
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000295c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041e4  08029868  08029868  0002a868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0001aaea  0802da4c  0802da4c  0002ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000008dc  08048538  08048538  00049538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0071c300  90000000  90000000  0004b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000017c  9071c300  9071c300  00767300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08048e14  08048e14  0076747c  2**0
                  CONTENTS
  8 .ARM          00000008  08048e14  08048e14  00049e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08048e1c  08048e1c  0076747c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08048e1c  08048e1c  00049e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08048e38  08048e38  00049e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08048e40  0004a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08048f7c  0004a140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0804907c  0004a240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00028f00  24000340  0804917c  0004a340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24029240  0804917c  0004b240  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0076747c  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00768000  2**2
                  ALLOC
 19 .debug_info   00120e58  00000000  00000000  007674aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001b8bf  00000000  00000000  00888302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004208  00000000  00000000  008a3bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00006469  00000000  00000000  008a7dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00053596  00000000  00000000  008ae239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   000786eb  00000000  00000000  009017cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e8248  00000000  00000000  00979eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  00b62102  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b3b8  00000000  00000000  00b621c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0002bcc8  00000000  00000000  00b6d57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000008d  00000000  00000000  00b99244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802984c 	.word	0x0802984c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802984c 	.word	0x0802984c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f010 bcfc 	b.w	80110f8 <vTaskSetApplicationTaskTag>
 8000700:	08002035 	.word	0x08002035

08000704 <StartTask_ASHandler>:
* @brief Function implementing the Task_ASHandler thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ASHandler */
__weak void StartTask_ASHandler(void *argument)
 8000704:	b508      	push	{r3, lr}
 8000706:	2001      	movs	r0, #1
 8000708:	f00e ffdf 	bl	800f6ca <osDelay>
 800070c:	e7fb      	b.n	8000706 <StartTask_ASHandler+0x2>
	...

08000710 <SystemClock_Config>:
{
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000714:	224c      	movs	r2, #76	@ 0x4c
 8000716:	2100      	movs	r1, #0
 8000718:	a809      	add	r0, sp, #36	@ 0x24
 800071a:	f028 fb01 	bl	8028d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	a801      	add	r0, sp, #4
 8000724:	f028 fafc 	bl	8028d20 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000728:	2004      	movs	r0, #4
 800072a:	f00c fe5d 	bl	800d3e8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	2300      	movs	r3, #0
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <SystemClock_Config+0xbc>)
 8000734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000736:	f022 0201 	bic.w	r2, r2, #1
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <SystemClock_Config+0xc0>)
 8000746:	699a      	ldr	r2, [r3, #24]
 8000748:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	0491      	lsls	r1, r2, #18
 800075c:	d5fc      	bpl.n	8000758 <SystemClock_Config+0x48>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000762:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000766:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076a:	2608      	movs	r6, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2301      	movs	r3, #1
 8000776:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000780:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000786:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f00d f928 	bl	800d9e4 <HAL_RCC_OscConfig>
 8000794:	b108      	cbz	r0, 800079a <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a6:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ac:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f00d fcb2 	bl	800e11c <HAL_RCC_ClockConfig>
 80007b8:	4601      	mov	r1, r0
 80007ba:	b108      	cbz	r0, 80007c0 <SystemClock_Config+0xb0>
 80007bc:	b672      	cpsid	i
  while (1)
 80007be:	e7fe      	b.n	80007be <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007c4:	f00d fbba 	bl	800df3c <HAL_RCC_MCOConfig>
}
 80007c8:	b01d      	add	sp, #116	@ 0x74
 80007ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007cc:	58000400 	.word	0x58000400
 80007d0:	58024800 	.word	0x58024800

080007d4 <main>:
{
 80007d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d8:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007da:	2210      	movs	r2, #16
 80007dc:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007de:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e0:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007e2:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e4:	f028 fa9c 	bl	8028d20 <memset>
  HAL_MPU_Disable();
 80007e8:	f009 ffce 	bl	800a788 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ec:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007f0:	4bbe      	ldr	r3, [pc, #760]	@ (8000aec <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007f4:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007f8:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007fa:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fe:	f009 ffe1 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000802:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000804:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000806:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800080a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080e:	f009 ffd9 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000812:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000814:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000816:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800081a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800081e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000822:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000824:	2318      	movs	r3, #24
 8000826:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082a:	f009 ffcb 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800082e:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000830:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000832:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000836:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800083a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800083c:	2312      	movs	r3, #18
 800083e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000848:	f009 ffbc 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000852:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000856:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000858:	2311      	movs	r3, #17
 800085a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085e:	f009 ffb1 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000862:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000864:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000866:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800086a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 800086e:	4ba0      	ldr	r3, [pc, #640]	@ (8000af0 <main+0x31c>)
 8000870:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000872:	230e      	movs	r3, #14
 8000874:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000878:	f009 ffa4 	bl	800a7c4 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800087c:	4628      	mov	r0, r5
 800087e:	f009 ff91 	bl	800a7a4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000882:	4b9c      	ldr	r3, [pc, #624]	@ (8000af4 <main+0x320>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800088a:	d111      	bne.n	80008b0 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000894:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800089c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ac:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b0:	4a90      	ldr	r2, [pc, #576]	@ (8000af4 <main+0x320>)
 80008b2:	6953      	ldr	r3, [r2, #20]
 80008b4:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008b8:	d123      	bne.n	8000902 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008c2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ca:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ce:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008d2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008de:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e0:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008e4:	d2f9      	bcs.n	80008da <main+0x106>
    } while(sets-- != 0U);
 80008e6:	3b20      	subs	r3, #32
 80008e8:	f113 0f20 	cmn.w	r3, #32
 80008ec:	d1f2      	bne.n	80008d4 <main+0x100>
 80008ee:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008f2:	6953      	ldr	r3, [r2, #20]
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008fe:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000906:	4d7c      	ldr	r5, [pc, #496]	@ (8000af8 <main+0x324>)
 8000908:	682c      	ldr	r4, [r5, #0]
 800090a:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 800090e:	f000 82ef 	beq.w	8000ef0 <main+0x71c>
 8000912:	3b01      	subs	r3, #1
 8000914:	d2f8      	bcs.n	8000908 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000916:	b672      	cpsid	i
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x144>
 800091a:	b672      	cpsid	i
 800091c:	e7fe      	b.n	800091c <main+0x148>
  hqspi.Instance = QUADSPI;
 800091e:	4877      	ldr	r0, [pc, #476]	@ (8000afc <main+0x328>)
 8000920:	4a77      	ldr	r2, [pc, #476]	@ (8000b00 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000922:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000924:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000926:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800092a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800092e:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000932:	f00c fe77 	bl	800d624 <HAL_QSPI_Init>
 8000936:	b108      	cbz	r0, 800093c <main+0x168>
 8000938:	b672      	cpsid	i
  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093c:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000940:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000942:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000946:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800094a:	f009 f9fd 	bl	8009d48 <BSP_QSPI_Init>
 800094e:	b108      	cbz	r0, 8000954 <main+0x180>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000954:	f009 f9a4 	bl	8009ca0 <BSP_QSPI_EnableMemoryMappedMode>
 8000958:	4603      	mov	r3, r0
 800095a:	b108      	cbz	r0, 8000960 <main+0x18c>
 800095c:	b672      	cpsid	i
  while (1)
 800095e:	e7fe      	b.n	800095e <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000960:	4868      	ldr	r0, [pc, #416]	@ (8000b04 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000966:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b10 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800096a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 800096e:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000972:	f009 ffb4 	bl	800a8de <HAL_DMA2D_Init>
 8000976:	4604      	mov	r4, r0
 8000978:	b108      	cbz	r0, 800097e <main+0x1aa>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 800097e:	4602      	mov	r2, r0
 8000980:	4639      	mov	r1, r7
 8000982:	4861      	ldr	r0, [pc, #388]	@ (8000b08 <main+0x334>)
 8000984:	f00a fe8e 	bl	800b6a4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000988:	2014      	movs	r0, #20
 800098a:	f009 fe81 	bl	800a690 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 800098e:	4639      	mov	r1, r7
 8000990:	462a      	mov	r2, r5
 8000992:	485d      	ldr	r0, [pc, #372]	@ (8000b08 <main+0x334>)
 8000994:	f00a fe86 	bl	800b6a4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000998:	200a      	movs	r0, #10
 800099a:	f009 fe79 	bl	800a690 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800099e:	2224      	movs	r2, #36	@ 0x24
 80009a0:	4621      	mov	r1, r4
 80009a2:	a817      	add	r0, sp, #92	@ 0x5c
 80009a4:	f028 f9bc 	bl	8028d20 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009a8:	2218      	movs	r2, #24
 80009aa:	4621      	mov	r1, r4
 80009ac:	a811      	add	r0, sp, #68	@ 0x44
 80009ae:	f028 f9b7 	bl	8028d20 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009b2:	2234      	movs	r2, #52	@ 0x34
 80009b4:	4621      	mov	r1, r4
 80009b6:	a82d      	add	r0, sp, #180	@ 0xb4
 80009b8:	f028 f9b2 	bl	8028d20 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009bc:	4621      	mov	r1, r4
 80009be:	222c      	movs	r2, #44	@ 0x2c
 80009c0:	a820      	add	r0, sp, #128	@ 0x80
 80009c2:	f028 f9ad 	bl	8028d20 <memset>
  hdsi.Instance = DSI;
 80009c6:	4f51      	ldr	r7, [pc, #324]	@ (8000b0c <main+0x338>)
 80009c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009cc:	a90e      	add	r1, sp, #56	@ 0x38
 80009ce:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009d0:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009d2:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009d6:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009d8:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009dc:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009e0:	f00a f8ca 	bl	800ab78 <HAL_DSI_Init>
 80009e4:	b108      	cbz	r0, 80009ea <main+0x216>
 80009e6:	b672      	cpsid	i
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009ea:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009ee:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009f2:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009f6:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009fa:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009fc:	a917      	add	r1, sp, #92	@ 0x5c
 80009fe:	4638      	mov	r0, r7
 8000a00:	f00a fb26 	bl	800b050 <HAL_DSI_ConfigHostTimeouts>
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x236>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a0a:	2321      	movs	r3, #33	@ 0x21
 8000a0c:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0e:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a12:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a16:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a18:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a1c:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a1e:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a22:	f00a fad8 	bl	800afd6 <HAL_DSI_ConfigPhyTimer>
 8000a26:	b108      	cbz	r0, 8000a2c <main+0x258>
 8000a28:	b672      	cpsid	i
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4837      	ldr	r0, [pc, #220]	@ (8000b0c <main+0x338>)
 8000a30:	f00a fac0 	bl	800afb4 <HAL_DSI_ConfigFlowControl>
 8000a34:	b108      	cbz	r0, 8000a3a <main+0x266>
 8000a36:	b672      	cpsid	i
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a3a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a3e:	4833      	ldr	r0, [pc, #204]	@ (8000b0c <main+0x338>)
 8000a40:	f00a fc8f 	bl	800b362 <HAL_DSI_SetLowPowerRXFilter>
 8000a44:	4601      	mov	r1, r0
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x278>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a4c:	482f      	ldr	r0, [pc, #188]	@ (8000b0c <main+0x338>)
 8000a4e:	f00a f830 	bl	800aab2 <HAL_DSI_ConfigErrorMonitor>
 8000a52:	b108      	cbz	r0, 8000a58 <main+0x284>
 8000a54:	b672      	cpsid	i
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5c:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a60:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a6c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a70:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a78:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a80:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a84:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8c:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9c:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a9e:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000aa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa6:	4819      	ldr	r0, [pc, #100]	@ (8000b0c <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000aa8:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aac:	f00a fa4e 	bl	800af4c <HAL_DSI_ConfigCommand>
 8000ab0:	b108      	cbz	r0, 8000ab6 <main+0x2e2>
 8000ab2:	b672      	cpsid	i
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000abc:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000abe:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ac0:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ac2:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ac4:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000ac8:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000aca:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ace:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ad0:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad4:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000ad8:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <main+0x338>)
 8000ade:	f00a f9c3 	bl	800ae68 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	b1b0      	cbz	r0, 8000b14 <main+0x340>
 8000ae6:	b672      	cpsid	i
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x314>
 8000aea:	bf00      	nop
 8000aec:	0300001b 	.word	0x0300001b
 8000af0:	10040000 	.word	0x10040000
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	58024400 	.word	0x58024400
 8000afc:	240003cc 	.word	0x240003cc
 8000b00:	52005000 	.word	0x52005000
 8000b04:	2400060c 	.word	0x2400060c
 8000b08:	58021800 	.word	0x58021800
 8000b0c:	240005f0 	.word	0x240005f0
 8000b10:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b14:	485e      	ldr	r0, [pc, #376]	@ (8000c90 <main+0x4bc>)
 8000b16:	f00a f996 	bl	800ae46 <HAL_DSI_SetGenericVCID>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	b108      	cbz	r0, 8000b22 <main+0x34e>
 8000b1e:	b672      	cpsid	i
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b22:	2234      	movs	r2, #52	@ 0x34
 8000b24:	4601      	mov	r1, r0
 8000b26:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b28:	4d5a      	ldr	r5, [pc, #360]	@ (8000c94 <main+0x4c0>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b2a:	f028 f8f9 	bl	8028d20 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b2e:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8000ce0 <main+0x50c>
 8000b32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b36:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b3a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b3e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b40:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b42:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b46:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b4e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b52:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b56:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b5a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	f240 1893 	movw	r8, #403	@ 0x193
 8000b62:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b66:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b6a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	f00c f90b 	bl	800cd88 <HAL_LTDC_Init>
 8000b72:	4602      	mov	r2, r0
 8000b74:	b108      	cbz	r0, 8000b7a <main+0x3a6>
 8000b76:	b672      	cpsid	i
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b7a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b7c:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b7e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b82:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b86:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b8a:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b8c:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b90:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b94:	2107      	movs	r1, #7
 8000b96:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b9a:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b9e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000ba4:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba8:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000baa:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bae:	f00c f9b7 	bl	800cf20 <HAL_LTDC_ConfigLayer>
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	b108      	cbz	r0, 8000bba <main+0x3e6>
 8000bb6:	b672      	cpsid	i
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bba:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bbc:	4834      	ldr	r0, [pc, #208]	@ (8000c90 <main+0x4bc>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bbe:	6993      	ldr	r3, [r2, #24]
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bc6:	f00a faa9 	bl	800b11c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bca:	4933      	ldr	r1, [pc, #204]	@ (8000c98 <main+0x4c4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <main+0x4c8>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bce:	4834      	ldr	r0, [pc, #208]	@ (8000ca0 <main+0x4cc>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bd0:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <main+0x4d0>)
  IOCtx.Address     = 0;
 8000bd4:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bd6:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <main+0x4d4>)
 8000bda:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bdc:	f008 fe58 	bl	8009890 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000be0:	4632      	mov	r2, r6
 8000be2:	4621      	mov	r1, r4
 8000be4:	482e      	ldr	r0, [pc, #184]	@ (8000ca0 <main+0x4cc>)
 8000be6:	f008 fac3 	bl	8009170 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bea:	2328      	movs	r3, #40	@ 0x28
 8000bec:	2215      	movs	r2, #21
 8000bee:	4621      	mov	r1, r4
 8000bf0:	4827      	ldr	r0, [pc, #156]	@ (8000c90 <main+0x4bc>)
 8000bf2:	9400      	str	r4, [sp, #0]
 8000bf4:	f00a fac5 	bl	800b182 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bf8:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bfa:	4825      	ldr	r0, [pc, #148]	@ (8000c90 <main+0x4bc>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bfc:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bfe:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c02:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c06:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c0a:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c0e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c12:	f00a f99b 	bl	800af4c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c16:	4622      	mov	r2, r4
 8000c18:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f00c f9ad 	bl	800cf7c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c22:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c24:	4821      	ldr	r0, [pc, #132]	@ (8000cac <main+0x4d8>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c26:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c28:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <main+0x4dc>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c32:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c34:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c36:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c3a:	f009 fdef 	bl	800a81c <HAL_CRC_Init>
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x470>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c44:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <main+0x4e0>)
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <main+0x4e4>)
 8000c48:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c4a:	f00b fa85 	bl	800c158 <HAL_JPEG_Init>
 8000c4e:	b108      	cbz	r0, 8000c54 <main+0x480>
 8000c50:	b672      	cpsid	i
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <main+0x47e>
  MX_TouchGFX_Init();
 8000c54:	f000 fd9a 	bl	800178c <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c58:	f000 fd97 	bl	800178a <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c5c:	f00e fcc2 	bl	800f5e4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c60:	4a16      	ldr	r2, [pc, #88]	@ (8000cbc <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <main+0x4ec>)
 8000c66:	f00e fce9 	bl	800f63c <osThreadNew>
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <main+0x4f0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c6c:	4a16      	ldr	r2, [pc, #88]	@ (8000cc8 <main+0x4f4>)
 8000c6e:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c70:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c72:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <main+0x4f8>)
 8000c74:	f00e fce2 	bl	800f63c <osThreadNew>
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <main+0x4fc>)
  Task_ASHandlerHandle = osThreadNew(StartTask_ASHandler, NULL, &Task_ASHandler_attributes);
 8000c7a:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <main+0x500>)
 8000c7c:	2100      	movs	r1, #0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c7e:	6018      	str	r0, [r3, #0]
  Task_ASHandlerHandle = osThreadNew(StartTask_ASHandler, NULL, &Task_ASHandler_attributes);
 8000c80:	4815      	ldr	r0, [pc, #84]	@ (8000cd8 <main+0x504>)
 8000c82:	f00e fcdb 	bl	800f63c <osThreadNew>
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <main+0x508>)
 8000c88:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c8a:	f00e fcbd 	bl	800f608 <osKernelStart>
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <main+0x4ba>
 8000c90:	240005f0 	.word	0x240005f0
 8000c94:	24000418 	.word	0x24000418
 8000c98:	2400035c 	.word	0x2400035c
 8000c9c:	08009c71 	.word	0x08009c71
 8000ca0:	2400036c 	.word	0x2400036c
 8000ca4:	08001d35 	.word	0x08001d35
 8000ca8:	08001d6d 	.word	0x08001d6d
 8000cac:	24000674 	.word	0x24000674
 8000cb0:	58024c00 	.word	0x58024c00
 8000cb4:	24000598 	.word	0x24000598
 8000cb8:	52003000 	.word	0x52003000
 8000cbc:	08029918 	.word	0x08029918
 8000cc0:	0800179b 	.word	0x0800179b
 8000cc4:	24000394 	.word	0x24000394
 8000cc8:	080298f4 	.word	0x080298f4
 8000ccc:	080038d9 	.word	0x080038d9
 8000cd0:	24000390 	.word	0x24000390
 8000cd4:	080298d0 	.word	0x080298d0
 8000cd8:	08000705 	.word	0x08000705
 8000cdc:	2400038c 	.word	0x2400038c
 8000ce0:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f028 f818 	bl	8028d20 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cfe:	488d      	ldr	r0, [pc, #564]	@ (8000f34 <main+0x760>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	f04f 0900 	mov.w	r9, #0
 8000d04:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d06:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000d16:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1c:	9304      	str	r3, [sp, #16]
 8000d1e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	9305      	str	r3, [sp, #20]
 8000d36:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d40:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d4c:	9306      	str	r3, [sp, #24]
 8000d4e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	9307      	str	r3, [sp, #28]
 8000d66:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d70:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d7c:	9308      	str	r3, [sp, #32]
 8000d7e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8000dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dd4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	930d      	str	r3, [sp, #52]	@ 0x34
 8000df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000df8:	f00a fc54 	bl	800b6a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2108      	movs	r1, #8
 8000e00:	484d      	ldr	r0, [pc, #308]	@ (8000f38 <main+0x764>)
 8000e02:	f00a fc4f 	bl	800b6a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0c:	484b      	ldr	r0, [pc, #300]	@ (8000f3c <main+0x768>)
 8000e0e:	f00a fc49 	bl	800b6a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	4846      	ldr	r0, [pc, #280]	@ (8000f34 <main+0x760>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e22:	f00a fab5 	bl	800b390 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	4845      	ldr	r0, [pc, #276]	@ (8000f40 <main+0x76c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e2a:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f00a faab 	bl	800b390 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e3c:	483e      	ldr	r0, [pc, #248]	@ (8000f38 <main+0x764>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f00a faa3 	bl	800b390 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e4c:	483b      	ldr	r0, [pc, #236]	@ (8000f3c <main+0x768>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f00a fa9b 	bl	800b390 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e5a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e5e:	464a      	mov	r2, r9
 8000e60:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e62:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e64:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e66:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e6a:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e6e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e72:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e74:	402b      	ands	r3, r5
 8000e76:	9303      	str	r3, [sp, #12]
 8000e78:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e7a:	f009 fc33 	bl	800a6e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e7e:	207a      	movs	r0, #122	@ 0x7a
 8000e80:	f009 fc62 	bl	800a748 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e84:	4a2f      	ldr	r2, [pc, #188]	@ (8000f44 <main+0x770>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e86:	4830      	ldr	r0, [pc, #192]	@ (8000f48 <main+0x774>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e88:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <main+0x778>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e98:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e9c:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000ea0:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000ea2:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ea6:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000eb0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eb4:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ec0:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000ec2:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ec6:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000eca:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ece:	f00e f8b9 	bl	800f044 <HAL_SDRAM_Init>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f47f ad20 	bne.w	800091a <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eda:	f009 f8ef 	bl	800a0bc <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000ede:	4648      	mov	r0, r9
 8000ee0:	f009 f93a 	bl	800a158 <BSP_SDRAM_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f43f ad19 	beq.w	800091e <main+0x14a>
 8000eec:	b672      	cpsid	i
  while (1)
 8000eee:	e7fe      	b.n	8000eee <main+0x71a>
  HAL_Init();
 8000ef0:	f009 fb8e 	bl	800a610 <HAL_Init>
  SystemClock_Config();
 8000ef4:	f7ff fc0c 	bl	8000710 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ef8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000efc:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f02:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f06:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f12:	f00a fbd5 	bl	800b6c0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f16:	4621      	mov	r1, r4
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f00a fbdf 	bl	800b6dc <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8000f50 <main+0x77c>)
timeout = 0xFFFF;
 8000f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	0412      	lsls	r2, r2, #16
 8000f28:	f53f aedc 	bmi.w	8000ce4 <main+0x510>
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	d2f9      	bcs.n	8000f24 <main+0x750>
 8000f30:	b672      	cpsid	i
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0x75e>
 8000f34:	58022400 	.word	0x58022400
 8000f38:	58021800 	.word	0x58021800
 8000f3c:	58021400 	.word	0x58021400
 8000f40:	58020000 	.word	0x58020000
 8000f44:	52004000 	.word	0x52004000
 8000f48:	24000398 	.word	0x24000398
 8000f4c:	52004140 	.word	0x52004140
 8000f50:	58024400 	.word	0x58024400

08000f54 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f54:	6802      	ldr	r2, [r0, #0]
 8000f56:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d101      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f5c:	f009 bb86 	b.w	800a66c <HAL_IncTick>
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40001000 	.word	0x40001000

08000f68 <Error_Handler>:
 8000f68:	b672      	cpsid	i
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <Error_Handler+0x2>

08000f6c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_MspInit+0x2c>)
{
 8000f6e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f70:	210f      	movs	r1, #15
 8000f72:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f7a:	f042 0202 	orr.w	r2, r2, #2
 8000f7e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f82:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	f009 bba7 	b.w	800a6e4 <HAL_NVIC_SetPriority>
 8000f96:	bf00      	nop
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f9c:	6802      	ldr	r2, [r0, #0]
{
 8000f9e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_CRC_MspInit+0x2c>)
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d10d      	bne.n	8000fc2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fa6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fae:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000fb2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fc2:	b002      	add	sp, #8
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	58024c00 	.word	0x58024c00

08000fcc <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_DMA2D_MspInit+0x40>)
{
 8000fce:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fd0:	6802      	ldr	r2, [r0, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d117      	bne.n	8001006 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd8:	2107      	movs	r1, #7
 8000fda:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fdc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fe0:	f042 0210 	orr.w	r2, r2, #16
 8000fe4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fe8:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000ff6:	f009 fb75 	bl	800a6e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ffa:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000ffc:	b003      	add	sp, #12
 8000ffe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001002:	f009 bba1 	b.w	800a748 <HAL_NVIC_EnableIRQ>
}
 8001006:	b003      	add	sp, #12
 8001008:	f85d fb04 	ldr.w	pc, [sp], #4
 800100c:	52001000 	.word	0x52001000
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001014:	b510      	push	{r4, lr}
 8001016:	b0ba      	sub	sp, #232	@ 0xe8
 8001018:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	2214      	movs	r2, #20
 800101c:	2100      	movs	r1, #0
 800101e:	a803      	add	r0, sp, #12
 8001020:	f027 fe7e 	bl	8028d20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	22c8      	movs	r2, #200	@ 0xc8
 8001026:	2100      	movs	r1, #0
 8001028:	a808      	add	r0, sp, #32
 800102a:	f027 fe79 	bl	8028d20 <memset>
  if(hdsi->Instance==DSI)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001034:	d138      	bne.n	80010a8 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001036:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800103a:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800103e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f00d faf1 	bl	800e628 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	b108      	cbz	r0, 800104c <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001048:	f7ff ff8e 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001050:	a903      	add	r1, sp, #12
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001054:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001058:	f042 0210 	orr.w	r2, r2, #16
 800105c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001060:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001064:	f002 0210 	and.w	r2, r2, #16
 8001068:	9201      	str	r2, [sp, #4]
 800106a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800106c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800108c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001092:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001094:	f00a f97c 	bl	800b390 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001098:	207b      	movs	r0, #123	@ 0x7b
 800109a:	4622      	mov	r2, r4
 800109c:	2107      	movs	r1, #7
 800109e:	f009 fb21 	bl	800a6e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80010a2:	207b      	movs	r0, #123	@ 0x7b
 80010a4:	f009 fb50 	bl	800a748 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80010a8:	b03a      	add	sp, #232	@ 0xe8
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58022400 	.word	0x58022400

080010b4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80010b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_JPEG_MspInit+0xf4>)
{
 80010b8:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80010ba:	6802      	ldr	r2, [r0, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d170      	bne.n	80011a2 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010c0:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80010c2:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010c4:	4c3a      	ldr	r4, [pc, #232]	@ (80011b0 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010c6:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010ce:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80011bc <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010d2:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010dc:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010ea:	2311      	movs	r3, #17
 80010ec:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010f6:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010fa:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010fc:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010fe:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001102:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001106:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800110a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800110e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001112:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001116:	f00b ff9c 	bl	800d052 <HAL_MDMA_Init>
 800111a:	b108      	cbz	r0, 8001120 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800111c:	f7ff ff24 	bl	8000f68 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001120:	2200      	movs	r2, #0
 8001122:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <HAL_JPEG_MspInit+0xfc>)
 8001124:	4611      	mov	r1, r2
 8001126:	f00c f822 	bl	800d16e <HAL_MDMA_ConfigPostRequestMask>
 800112a:	b108      	cbz	r0, 8001130 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800112c:	f7ff ff1c 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001130:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001132:	2313      	movs	r3, #19
 8001134:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001136:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001138:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800113a:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800113e:	4c1e      	ldr	r4, [pc, #120]	@ (80011b8 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001140:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	22c0      	movs	r2, #192	@ 0xc0
 8001148:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800114c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800114e:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001150:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001154:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001158:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800115c:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8001160:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001164:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001166:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 800116a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800116e:	f00b ff70 	bl	800d052 <HAL_MDMA_Init>
 8001172:	b108      	cbz	r0, 8001178 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001174:	f7ff fef8 	bl	8000f68 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001178:	2200      	movs	r2, #0
 800117a:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <HAL_JPEG_MspInit+0x104>)
 800117c:	4611      	mov	r1, r2
 800117e:	f00b fff6 	bl	800d16e <HAL_MDMA_ConfigPostRequestMask>
 8001182:	b108      	cbz	r0, 8001188 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001184:	f7ff fef0 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001188:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2105      	movs	r1, #5
 800118e:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001190:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001192:	f009 faa7 	bl	800a6e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001196:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001198:	b003      	add	sp, #12
 800119a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800119e:	f009 bad3 	b.w	800a748 <HAL_NVIC_EnableIRQ>
}
 80011a2:	b003      	add	sp, #12
 80011a4:	bd30      	pop	{r4, r5, pc}
 80011a6:	bf00      	nop
 80011a8:	52003000 	.word	0x52003000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	2400052c 	.word	0x2400052c
 80011b4:	520001c0 	.word	0x520001c0
 80011b8:	240004c0 	.word	0x240004c0
 80011bc:	52000200 	.word	0x52000200

080011c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b0b4      	sub	sp, #208	@ 0xd0
 80011c4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c6:	22c8      	movs	r2, #200	@ 0xc8
 80011c8:	2100      	movs	r1, #0
 80011ca:	a802      	add	r0, sp, #8
 80011cc:	f027 fda8 	bl	8028d20 <memset>
  if(hltdc->Instance==LTDC)
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_LTDC_MspInit+0x74>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d12b      	bne.n	8001230 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011dc:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011de:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011e6:	23a1      	movs	r3, #161	@ 0xa1
 80011e8:	2205      	movs	r2, #5
 80011ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ee:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011f0:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f8:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f00d fa14 	bl	800e628 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	b108      	cbz	r0, 8001206 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001202:	f7ff feb1 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001208:	2058      	movs	r0, #88	@ 0x58
 800120a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800120c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001210:	f042 0208 	orr.w	r2, r2, #8
 8001214:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001218:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800121a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001226:	f009 fa5d 	bl	800a6e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800122a:	2058      	movs	r0, #88	@ 0x58
 800122c:	f009 fa8c 	bl	800a748 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001230:	b034      	add	sp, #208	@ 0xd0
 8001232:	bd10      	pop	{r4, pc}
 8001234:	50001000 	.word	0x50001000
 8001238:	58024400 	.word	0x58024400

0800123c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b0bf      	sub	sp, #252	@ 0xfc
 8001240:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	2214      	movs	r2, #20
 8001244:	2100      	movs	r1, #0
 8001246:	a807      	add	r0, sp, #28
 8001248:	f027 fd6a 	bl	8028d20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	22c8      	movs	r2, #200	@ 0xc8
 800124e:	2100      	movs	r1, #0
 8001250:	a80c      	add	r0, sp, #48	@ 0x30
 8001252:	f027 fd65 	bl	8028d20 <memset>
  if(hqspi->Instance==QUADSPI)
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <HAL_QSPI_MspInit+0x16c>)
 800125a:	429a      	cmp	r2, r3
 800125c:	f040 80a1 	bne.w	80013a2 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001264:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001268:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126c:	f00d f9dc 	bl	800e628 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	b108      	cbz	r0, 8001276 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8001272:	f7ff fe79 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001276:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800127c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800127e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	a907      	add	r1, sp, #28
 8001284:	484a      	ldr	r0, [pc, #296]	@ (80013b0 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001286:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001288:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800128c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001290:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001294:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80012b0:	9202      	str	r2, [sp, #8]
 80012b2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f002 0220 	and.w	r2, r2, #32
 80012c8:	9203      	str	r2, [sp, #12]
 80012ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012e0:	9204      	str	r2, [sp, #16]
 80012e2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012e8:	f042 0202 	orr.w	r2, r2, #2
 80012ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012f4:	f002 0202 	and.w	r2, r2, #2
 80012f8:	9205      	str	r2, [sp, #20]
 80012fa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001300:	f042 0208 	orr.w	r2, r2, #8
 8001304:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	9306      	str	r3, [sp, #24]
 8001312:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001318:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001320:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001322:	f00a f835 	bl	800b390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001326:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001328:	a907      	add	r1, sp, #28
 800132a:	4821      	ldr	r0, [pc, #132]	@ (80013b0 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800132c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001336:	f00a f82b 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800133a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	a907      	add	r1, sp, #28
 800133e:	481d      	ldr	r0, [pc, #116]	@ (80013b4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001340:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134a:	f00a f821 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001352:	a907      	add	r1, sp, #28
 8001354:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001356:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	f00a f816 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001364:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001366:	a907      	add	r1, sp, #28
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800136a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001374:	f00a f80c 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001378:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	a907      	add	r1, sp, #28
 800137c:	480f      	ldr	r0, [pc, #60]	@ (80013bc <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800137e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f00a f802 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800138c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	a907      	add	r1, sp, #28
 8001392:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001394:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f009 fff7 	bl	800b390 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80013a2:	b03f      	add	sp, #252	@ 0xfc
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	52005000 	.word	0x52005000
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58021800 	.word	0x58021800
 80013b4:	58021400 	.word	0x58021400
 80013b8:	58021c00 	.word	0x58021c00
 80013bc:	58020400 	.word	0x58020400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013c8:	2100      	movs	r1, #0
 80013ca:	2214      	movs	r2, #20
 80013cc:	a801      	add	r0, sp, #4
 80013ce:	f027 fca7 	bl	8028d20 <memset>
  if (FMC_Initialized) {
 80013d2:	4b3f      	ldr	r3, [pc, #252]	@ (80014d0 <HAL_SDRAM_MspInit+0x10c>)
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	2900      	cmp	r1, #0
 80013d8:	d177      	bne.n	80014ca <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013da:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013de:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	22c0      	movs	r2, #192	@ 0xc0
 80013e2:	f027 fc9d 	bl	8028d20 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013ea:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ec:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f00d f919 	bl	800e628 <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	b108      	cbz	r0, 80013fc <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013f8:	f7ff fdb6 	bl	8000f68 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013fc:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2600      	movs	r6, #0
 8001402:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001404:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001408:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140a:	a901      	add	r1, sp, #4
 800140c:	4832      	ldr	r0, [pc, #200]	@ (80014d8 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800140e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001412:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001416:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800141c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001430:	f009 ffae 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001434:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	a901      	add	r1, sp, #4
 8001438:	4828      	ldr	r0, [pc, #160]	@ (80014dc <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f009 ffa4 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001448:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144c:	a901      	add	r1, sp, #4
 800144e:	4824      	ldr	r0, [pc, #144]	@ (80014e0 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001450:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145a:	f009 ff99 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800145e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001462:	a901      	add	r1, sp, #4
 8001464:	481f      	ldr	r0, [pc, #124]	@ (80014e4 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001466:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001470:	f009 ff8e 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001474:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	a901      	add	r1, sp, #4
 800147a:	481b      	ldr	r0, [pc, #108]	@ (80014e8 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001486:	f009 ff83 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800148a:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	a901      	add	r1, sp, #4
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001492:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	f009 ff78 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014a0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a4:	a901      	add	r1, sp, #4
 80014a6:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b2:	f009 ff6d 	bl	800b390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	a901      	add	r1, sp, #4
 80014ba:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f009 ff63 	bl	800b390 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ca:	b039      	add	sp, #228	@ 0xe4
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2400069c 	.word	0x2400069c
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58022000 	.word	0x58022000
 80014dc:	58020400 	.word	0x58020400
 80014e0:	58021000 	.word	0x58021000
 80014e4:	58021c00 	.word	0x58021c00
 80014e8:	58021800 	.word	0x58021800
 80014ec:	58020c00 	.word	0x58020c00
 80014f0:	58021400 	.word	0x58021400
 80014f4:	58020800 	.word	0x58020800

080014f8 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <HAL_SDRAM_MspDeInit+0x6c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014fc:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014fe:	bb82      	cbnz	r2, 8001562 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001502:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001504:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001508:	4818      	ldr	r0, [pc, #96]	@ (800156c <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800150a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800150c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001510:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001514:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001518:	f00a f822 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800151c:	2160      	movs	r1, #96	@ 0x60
 800151e:	4814      	ldr	r0, [pc, #80]	@ (8001570 <HAL_SDRAM_MspDeInit+0x78>)
 8001520:	f00a f81e 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001524:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <HAL_SDRAM_MspDeInit+0x7c>)
 800152a:	f00a f819 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800152e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <HAL_SDRAM_MspDeInit+0x80>)
 8001534:	f00a f814 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001538:	f248 1133 	movw	r1, #33075	@ 0x8133
 800153c:	480f      	ldr	r0, [pc, #60]	@ (800157c <HAL_SDRAM_MspDeInit+0x84>)
 800153e:	f00a f80f 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001542:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001546:	480e      	ldr	r0, [pc, #56]	@ (8001580 <HAL_SDRAM_MspDeInit+0x88>)
 8001548:	f00a f80a 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800154c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <HAL_SDRAM_MspDeInit+0x8c>)
 8001552:	f00a f805 	bl	800b560 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001556:	4621      	mov	r1, r4
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800155a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800155e:	f009 bfff 	b.w	800b560 <HAL_GPIO_DeInit>
}
 8001562:	bd10      	pop	{r4, pc}
 8001564:	24000698 	.word	0x24000698
 8001568:	58024400 	.word	0x58024400
 800156c:	58022000 	.word	0x58022000
 8001570:	58020400 	.word	0x58020400
 8001574:	58021000 	.word	0x58021000
 8001578:	58021c00 	.word	0x58021c00
 800157c:	58021800 	.word	0x58021800
 8001580:	58020c00 	.word	0x58020c00
 8001584:	58021400 	.word	0x58021400
 8001588:	58020800 	.word	0x58020800

0800158c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158c:	280f      	cmp	r0, #15
{
 800158e:	b510      	push	{r4, lr}
 8001590:	4604      	mov	r4, r0
 8001592:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	d902      	bls.n	800159c <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001598:	b00a      	add	sp, #40	@ 0x28
 800159a:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800159c:	4601      	mov	r1, r0
 800159e:	2200      	movs	r2, #0
 80015a0:	2036      	movs	r0, #54	@ 0x36
 80015a2:	f009 f89f 	bl	800a6e4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a6:	2036      	movs	r0, #54	@ 0x36
 80015a8:	f009 f8ce 	bl	800a748 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ae:	4669      	mov	r1, sp
 80015b0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80015b2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_InitTick+0x88>)
 80015b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80015ba:	f042 0210 	orr.w	r2, r2, #16
 80015be:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80015c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ce:	f00c ff11 	bl	800e3f4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d2:	9b07      	ldr	r3, [sp, #28]
 80015d4:	b9c3      	cbnz	r3, 8001608 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d6:	f00c fee9 	bl	800e3ac <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015da:	4c0f      	ldr	r4, [pc, #60]	@ (8001618 <HAL_InitTick+0x8c>)
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_InitTick+0x90>)
 80015de:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015e0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015e4:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_InitTick+0x94>)
 80015e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ec:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ee:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f0:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015f2:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015f4:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015f8:	f00d ff1a 	bl	800f430 <HAL_TIM_Base_Init>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d1ca      	bne.n	8001596 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001600:	4620      	mov	r0, r4
 8001602:	f00d fdc7 	bl	800f194 <HAL_TIM_Base_Start_IT>
 8001606:	e7c7      	b.n	8001598 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001608:	f00c fed0 	bl	800e3ac <HAL_RCC_GetPCLK1Freq>
 800160c:	0040      	lsls	r0, r0, #1
 800160e:	e7e4      	b.n	80015da <HAL_InitTick+0x4e>
 8001610:	24000074 	.word	0x24000074
 8001614:	58024400 	.word	0x58024400
 8001618:	240006a0 	.word	0x240006a0
 800161c:	40001000 	.word	0x40001000
 8001620:	000f4240 	.word	0x000f4240

08001624 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler>

08001626 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler>

08001628 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler>

0800162a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler>

0800162c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler>

0800162e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162e:	4770      	bx	lr

08001630 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <TIM6_DAC_IRQHandler+0x8>)
 8001632:	f00d bdf1 	b.w	800f218 <HAL_TIM_IRQHandler>
 8001636:	bf00      	nop
 8001638:	240006a0 	.word	0x240006a0

0800163c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800163c:	4801      	ldr	r0, [pc, #4]	@ (8001644 <LTDC_IRQHandler+0x8>)
 800163e:	f00b bc12 	b.w	800ce66 <HAL_LTDC_IRQHandler>
 8001642:	bf00      	nop
 8001644:	24000418 	.word	0x24000418

08001648 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001648:	4801      	ldr	r0, [pc, #4]	@ (8001650 <DMA2D_IRQHandler+0x8>)
 800164a:	f009 b987 	b.w	800a95c <HAL_DMA2D_IRQHandler>
 800164e:	bf00      	nop
 8001650:	2400060c 	.word	0x2400060c

08001654 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001654:	4801      	ldr	r0, [pc, #4]	@ (800165c <JPEG_IRQHandler+0x8>)
 8001656:	f00b bab7 	b.w	800cbc8 <HAL_JPEG_IRQHandler>
 800165a:	bf00      	nop
 800165c:	24000598 	.word	0x24000598

08001660 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MDMA_IRQHandler+0x14>)
{
 8001662:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001664:	f00b fe08 	bl	800d278 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800166e:	f00b be03 	b.w	800d278 <HAL_MDMA_IRQHandler>
 8001672:	bf00      	nop
 8001674:	240004c0 	.word	0x240004c0
 8001678:	2400052c 	.word	0x2400052c

0800167c <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800167c:	4801      	ldr	r0, [pc, #4]	@ (8001684 <DSI_IRQHandler+0x8>)
 800167e:	f009 bb70 	b.w	800ad62 <HAL_DSI_IRQHandler>
 8001682:	bf00      	nop
 8001684:	240005f0 	.word	0x240005f0

08001688 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001688:	2001      	movs	r0, #1
 800168a:	4770      	bx	lr

0800168c <_kill>:

int _kill(int pid, int sig)
{
 800168c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800168e:	f027 fbfb 	bl	8028e88 <__errno>
 8001692:	2316      	movs	r3, #22
 8001694:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001696:	f04f 30ff 	mov.w	r0, #4294967295
 800169a:	bd08      	pop	{r3, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800169e:	f027 fbf3 	bl	8028e88 <__errno>
 80016a2:	2316      	movs	r3, #22
 80016a4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80016a6:	e7fe      	b.n	80016a6 <_exit+0xa>

080016a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	460d      	mov	r5, r1
 80016ac:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	460e      	mov	r6, r1
 80016b0:	1b73      	subs	r3, r6, r5
 80016b2:	429c      	cmp	r4, r3
 80016b4:	dc01      	bgt.n	80016ba <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80016b6:	4620      	mov	r0, r4
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80016ba:	f3af 8000 	nop.w
 80016be:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	e7f5      	b.n	80016b0 <_read+0x8>

080016c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	460d      	mov	r5, r1
 80016c8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	460e      	mov	r6, r1
 80016cc:	1b73      	subs	r3, r6, r5
 80016ce:	429c      	cmp	r4, r3
 80016d0:	dc01      	bgt.n	80016d6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016d2:	4620      	mov	r0, r4
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016d6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	e7f5      	b.n	80016cc <_write+0x8>

080016e0 <_close>:

int _close(int file)
{
	return -1;
}
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	4770      	bx	lr

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016ea:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016ec:	604b      	str	r3, [r1, #4]
}
 80016ee:	4770      	bx	lr

080016f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016f0:	2001      	movs	r0, #1
 80016f2:	4770      	bx	lr

080016f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	4770      	bx	lr

080016f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <_sbrk+0x30>)
{
 80016fa:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016fc:	6811      	ldr	r1, [r2, #0]
{
 80016fe:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001700:	b909      	cbnz	r1, 8001706 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001702:	490a      	ldr	r1, [pc, #40]	@ (800172c <_sbrk+0x34>)
 8001704:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	6810      	ldr	r0, [r2, #0]
 8001708:	4909      	ldr	r1, [pc, #36]	@ (8001730 <_sbrk+0x38>)
 800170a:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <_sbrk+0x3c>)
 800170c:	4403      	add	r3, r0
 800170e:	1b09      	subs	r1, r1, r4
 8001710:	428b      	cmp	r3, r1
 8001712:	d906      	bls.n	8001722 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001714:	f027 fbb8 	bl	8028e88 <__errno>
 8001718:	230c      	movs	r3, #12
 800171a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800171c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001720:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001722:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001724:	e7fc      	b.n	8001720 <_sbrk+0x28>
 8001726:	bf00      	nop
 8001728:	240006ec 	.word	0x240006ec
 800172c:	24029240 	.word	0x24029240
 8001730:	24080000 	.word	0x24080000
 8001734:	00001000 	.word	0x00001000

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001770 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800173c:	f008 fef8 	bl	800a530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001766:	f027 fb95 	bl	8028e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7ff f833 	bl	80007d4 <main>
  bx  lr
 800176e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001770:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001774:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001778:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 800177c:	08048e40 	.word	0x08048e40
  ldr r2, =_sbss
 8001780:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001784:	24029240 	.word	0x24029240

08001788 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC3_IRQHandler>

0800178a <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 800178a:	4770      	bx	lr

0800178c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800178c:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800178e:	f001 fd19 	bl	80031c4 <touchgfx_components_init>
    touchgfx_init();
}
 8001792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001796:	f001 bc9b 	b.w	80030d0 <touchgfx_init>

0800179a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800179a:	f001 bd15 	b.w	80031c8 <touchgfx_taskEntry>

0800179e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800179e:	6840      	ldr	r0, [r0, #4]
    }
 80017a0:	4770      	bx	lr

080017a2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80017a2:	6041      	str	r1, [r0, #4]
    }
 80017a4:	4770      	bx	lr

080017a6 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80017a6:	1a52      	subs	r2, r2, r1
 80017a8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80017ac:	fbb2 f0f3 	udiv	r0, r2, r3
 80017b0:	4770      	bx	lr
	...

080017b4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80017b4:	4b02      	ldr	r3, [pc, #8]	@ (80017c0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80017b6:	68c0      	ldr	r0, [r0, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80017bc:	4358      	muls	r0, r3
 80017be:	4770      	bx	lr
 80017c0:	240006f0 	.word	0x240006f0

080017c4 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017c4:	4770      	bx	lr
	...

080017c8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017d0:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017d2:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017e2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017f0:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017f4:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017fa:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017fc:	2101      	movs	r1, #1
 80017fe:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001800:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	2210      	movs	r2, #16
 8001804:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001808:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	b983      	cbnz	r3, 800183a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001818:	f00c fda6 	bl	800e368 <HAL_RCC_GetHCLKFreq>
 800181c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800181e:	f00c fbdb 	bl	800dfd8 <HAL_RCC_GetSysClockFreq>
 8001822:	fbb0 f0f4 	udiv	r0, r0, r4
 8001826:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800182a:	f00d fe01 	bl	800f430 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800182e:	4806      	ldr	r0, [pc, #24]	@ (8001848 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001830:	b003      	add	sp, #12
 8001832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001836:	f00d bc73 	b.w	800f120 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 800183a:	f00c fdb7 	bl	800e3ac <HAL_RCC_GetPCLK1Freq>
 800183e:	0044      	lsls	r4, r0, #1
 8001840:	e7ed      	b.n	800181e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001842:	bf00      	nop
 8001844:	58024400 	.word	0x58024400
 8001848:	240006f0 	.word	0x240006f0
 800184c:	0802c7c0 	.word	0x0802c7c0

08001850 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001850:	b510      	push	{r4, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	2110      	movs	r1, #16
 8001856:	f026 fc4f 	bl	80280f8 <_ZdlPvj>
 800185a:	4620      	mov	r0, r4
 800185c:	bd10      	pop	{r4, pc}

0800185e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800185e:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001860:	6803      	ldr	r3, [r0, #0]
{
 8001862:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001864:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001866:	b131      	cbz	r1, 8001876 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001868:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 800186a:	4798      	blx	r3
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	1b5b      	subs	r3, r3, r5
 8001870:	4403      	add	r3, r0
 8001872:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001876:	4798      	blx	r3
 8001878:	60a0      	str	r0, [r4, #8]
}
 800187a:	e7fb      	b.n	8001874 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

0800187c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800187c:	4770      	bx	lr
	...

08001880 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001884:	460f      	mov	r7, r1
 8001886:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001888:	781d      	ldrb	r5, [r3, #0]
 800188a:	b915      	cbnz	r5, 8001892 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 800188c:	2500      	movs	r5, #0
}
 800188e:	4628      	mov	r0, r5
 8001890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001892:	4c07      	ldr	r4, [pc, #28]	@ (80018b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001894:	2000      	movs	r0, #0
 8001896:	4621      	mov	r1, r4
 8001898:	f008 fdee 	bl	800a478 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f4      	beq.n	800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 80018a6:	68a3      	ldr	r3, [r4, #8]
 80018a8:	6033      	str	r3, [r6, #0]
            return true;
 80018aa:	e7f0      	b.n	800188e <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 80018ac:	2400074c 	.word	0x2400074c
 80018b0:	2400073c 	.word	0x2400073c

080018b4 <_ZN20STM32TouchControllerD0Ev>:
 80018b4:	b510      	push	{r4, lr}
 80018b6:	4604      	mov	r4, r0
 80018b8:	2104      	movs	r1, #4
 80018ba:	f026 fc1d 	bl	80280f8 <_ZdlPvj>
 80018be:	4620      	mov	r0, r4
 80018c0:	bd10      	pop	{r4, pc}
	...

080018c4 <_ZN20STM32TouchController4initEv>:
{
 80018c4:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018c8:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018cc:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018ce:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018d4:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018d8:	230c      	movs	r3, #12
 80018da:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018de:	f008 fd3b 	bl	800a358 <BSP_TS_Init>
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_ZN20STM32TouchController4initEv+0x40>)
 80018e4:	b910      	cbnz	r0, 80018ec <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
}
 80018ea:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1fb      	bne.n	80018ea <_ZN20STM32TouchController4initEv+0x26>
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <_ZN20STM32TouchController4initEv+0x44>)
 80018f4:	212e      	movs	r1, #46	@ 0x2e
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <_ZN20STM32TouchController4initEv+0x48>)
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <_ZN20STM32TouchController4initEv+0x4c>)
 80018fa:	f026 ff75 	bl	80287e8 <__assert_func>
 80018fe:	bf00      	nop
 8001900:	24000748 	.word	0x24000748
 8001904:	2400074c 	.word	0x2400074c
 8001908:	08029964 	.word	0x08029964
 800190c:	08029977 	.word	0x08029977
 8001910:	080299a1 	.word	0x080299a1

08001914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001914:	2803      	cmp	r0, #3
 8001916:	d825      	bhi.n	8001964 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001918:	e8df f000 	tbb	[pc, r0]
 800191c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001922:	2108      	movs	r1, #8
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800192c:	480f      	ldr	r0, [pc, #60]	@ (800196c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	f009 beb9 	b.w	800b6a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	fab2 f282 	clz	r2, r2
 800193e:	0952      	lsrs	r2, r2, #5
 8001940:	e7f4      	b.n	800192c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	0952      	lsrs	r2, r2, #5
 8001950:	e7ec      	b.n	800192c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	0952      	lsrs	r2, r2, #5
 8001962:	e7e4      	b.n	800192e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	24000750 	.word	0x24000750
 800196c:	58022400 	.word	0x58022400
 8001970:	58021400 	.word	0x58021400

08001974 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001974:	2803      	cmp	r0, #3
 8001976:	d825      	bhi.n	80019c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001978:	e8df f000 	tbb	[pc, r0]
 800197c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001982:	2108      	movs	r1, #8
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	f009 be89 	b.w	800b6a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001994:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	3a00      	subs	r2, #0
 800199c:	bf18      	it	ne
 800199e:	2201      	movne	r2, #1
 80019a0:	e7f4      	b.n	800198c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80019a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	3a00      	subs	r2, #0
 80019ac:	bf18      	it	ne
 80019ae:	2201      	movne	r2, #1
 80019b0:	e7ec      	b.n	800198c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80019b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	3a00      	subs	r2, #0
 80019be:	bf18      	it	ne
 80019c0:	2201      	movne	r2, #1
 80019c2:	e7e4      	b.n	800198e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	24000750 	.word	0x24000750
 80019cc:	58022400 	.word	0x58022400
 80019d0:	58021400 	.word	0x58021400

080019d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019d4:	2803      	cmp	r0, #3
 80019d6:	d811      	bhi.n	80019fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019d8:	e8df f000 	tbb	[pc, r0]
 80019dc:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019e0:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019e2:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019e4:	f009 be63 	b.w	800b6ae <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ec:	e7f9      	b.n	80019e2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f2:	e7f6      	b.n	80019e2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019fa:	e7f3      	b.n	80019e4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	58022400 	.word	0x58022400
 8001a04:	58021400 	.word	0x58021400

08001a08 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001a08:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001a0a:	2803      	cmp	r0, #3
 8001a0c:	d815      	bhi.n	8001a3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001a0e:	e8df f000 	tbb	[pc, r0]
 8001a12:	0a02      	.short	0x0a02
 8001a14:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001a16:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a18:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a1a:	f009 fe3d 	bl	800b698 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001a1e:	1e43      	subs	r3, r0, #1
 8001a20:	4258      	negs	r0, r3
 8001a22:	4158      	adcs	r0, r3
 8001a24:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2a:	e7f5      	b.n	8001a18 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a30:	e7f2      	b.n	8001a18 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a36:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a38:	e7ef      	b.n	8001a1a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e7ef      	b.n	8001a1e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a3e:	bf00      	nop
 8001a40:	58022400 	.word	0x58022400
 8001a44:	58021400 	.word	0x58021400

08001a48 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4d08      	ldr	r5, [pc, #32]	@ (8001a6c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a4c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a4e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a50:	b2e0      	uxtb	r0, r4
 8001a52:	f7ff ffd9 	bl	8001a08 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a56:	b118      	cbz	r0, 8001a60 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a5c:	bf18      	it	ne
 8001a5e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a60:	3401      	adds	r4, #1
 8001a62:	3504      	adds	r5, #4
 8001a64:	2c05      	cmp	r4, #5
 8001a66:	d1f3      	bne.n	8001a50 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
 8001a6a:	bf00      	nop
 8001a6c:	24000750 	.word	0x24000750

08001a70 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a70:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a72:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a76:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a7a:	4770      	bx	lr

08001a7c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	4770      	bx	lr

08001a80 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a80:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a82:	3900      	subs	r1, #0
 8001a84:	4b02      	ldr	r3, [pc, #8]	@ (8001a90 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a86:	bf18      	it	ne
 8001a88:	2101      	movne	r1, #1
 8001a8a:	7019      	strb	r1, [r3, #0]
    }
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2402851f 	.word	0x2402851f

08001a94 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a94:	2000      	movs	r0, #0
 8001a96:	4770      	bx	lr

08001a98 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a98:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a9a:	b10b      	cbz	r3, 8001aa0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4718      	bx	r3
        }
    }
 8001aa0:	4770      	bx	lr

08001aa2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001aa2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001aa6:	4770      	bx	lr

08001aa8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001aa8:	6840      	ldr	r0, [r0, #4]
 8001aaa:	6803      	ldr	r3, [r0, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4718      	bx	r3

08001ab0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001ab0:	4b01      	ldr	r3, [pc, #4]	@ (8001ab8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	24000774 	.word	0x24000774

08001abc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001abc:	4770      	bx	lr

08001abe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001abe:	f001 bc80 	b.w	80033c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001ac2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001ac2:	f001 bc0f 	b.w	80032e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ac6 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001ac6:	f001 bde1 	b.w	800368c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aca <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aca:	f001 bdd3 	b.w	8003674 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ad0 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ad4:	f001 fd96 	bl	8003604 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ad8:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001adc:	b113      	cbz	r3, 8001ae4 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ade:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
    }
}
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2400000c 	.word	0x2400000c

08001aec <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001aec:	f001 bc02 	b.w	80032f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001af0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001af0:	b510      	push	{r4, lr}
 8001af2:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001af4:	f011 ffde 	bl	8013ab4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	4620      	mov	r0, r4
 8001afc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001b04:	4718      	bx	r3

08001b06 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001b06:	b510      	push	{r4, lr}
 8001b08:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001b0a:	f011 fb69 	bl	80131e0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001b0e:	6860      	ldr	r0, [r4, #4]
 8001b10:	6803      	ldr	r3, [r0, #0]
    }
 8001b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4718      	bx	r3

08001b1a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001b1a:	f011 ba36 	b.w	8012f8a <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001b1e <_ZN11TouchGFXHALD0Ev>:
 8001b1e:	b510      	push	{r4, lr}
 8001b20:	4604      	mov	r4, r0
 8001b22:	217c      	movs	r1, #124	@ 0x7c
 8001b24:	f026 fae8 	bl	80280f8 <_ZdlPvj>
 8001b28:	4620      	mov	r0, r4
 8001b2a:	bd10      	pop	{r4, pc}

08001b2c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b2c:	4b02      	ldr	r3, [pc, #8]	@ (8001b38 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b32:	f011 ba67 	b.w	8013004 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b36:	bf00      	nop
 8001b38:	2400000c 	.word	0x2400000c

08001b3c <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b40:	4d06      	ldr	r5, [pc, #24]	@ (8001b5c <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b42:	f001 fbff 	bl	8003344 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b46:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b4e:	f7ff fe3b 	bl	80017c8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b52:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b54:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b56:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
 8001b5c:	24000764 	.word	0x24000764

08001b60 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b60:	6803      	ldr	r3, [r0, #0]
{
 8001b62:	4604      	mov	r4, r0
 8001b64:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b6a:	4798      	blx	r3
    enableInterrupts();
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b72:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b74:	f000 ff5c 	bl	8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b80:	2100      	movs	r1, #0
 8001b82:	2329      	movs	r3, #41	@ 0x29
 8001b84:	2215      	movs	r2, #21
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b88:	9100      	str	r1, [sp, #0]
 8001b8a:	f009 fafa 	bl	800b182 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b8e:	f000 ff4f 	bl	8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	4620      	mov	r0, r4
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4798      	blx	r3
    for (;;)
 8001b9a:	e7f8      	b.n	8001b8e <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b9c:	240005f0 	.word	0x240005f0

08001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001ba0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001ba6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001ba8:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001bac:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001bae:	428c      	cmp	r4, r1
 8001bb0:	d009      	beq.n	8001bc6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001bb2:	b93a      	cbnz	r2, 8001bc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb4:	490a      	ldr	r1, [pc, #40]	@ (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bba:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001bbc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001bbe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bc0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001bc2:	701a      	strb	r2, [r3, #0]
        }
    }
 8001bc4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001bc6:	2a00      	cmp	r2, #0
 8001bc8:	d0fc      	beq.n	8001bc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bca:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bcc:	4904      	ldr	r1, [pc, #16]	@ (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bce:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bd0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bd2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bd4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	e7f3      	b.n	8001bc2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bda:	bf00      	nop
 8001bdc:	24028518 	.word	0x24028518
 8001be0:	24028516 	.word	0x24028516
 8001be4:	24028514 	.word	0x24028514

08001be8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001be8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	428b      	cmp	r3, r1
 8001bf0:	d803      	bhi.n	8001bfa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d905      	bls.n	8001c06 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bfc:	219e      	movs	r1, #158	@ 0x9e
 8001bfe:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001c02:	f026 fdf1 	bl	80287e8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001c08:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001c0c:	801a      	strh	r2, [r3, #0]
    }
 8001c0e:	bd08      	pop	{r3, pc}
 8001c10:	24028514 	.word	0x24028514
 8001c14:	24028516 	.word	0x24028516
 8001c18:	08029a28 	.word	0x08029a28
 8001c1c:	08029a8b 	.word	0x08029a8b
 8001c20:	08029ace 	.word	0x08029ace
 8001c24:	2402851a 	.word	0x2402851a
 8001c28:	2402851c 	.word	0x2402851c

08001c2c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c2c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c2e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c32:	b118      	cbz	r0, 8001c3c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c34:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c36:	6803      	ldr	r3, [r0, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4718      	bx	r3
    }
 8001c3c:	4770      	bx	lr
	...

08001c40 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	460d      	mov	r5, r1
 8001c44:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c48:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c4a:	b935      	cbnz	r5, 8001c5a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c4e:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c54:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c56:	f026 fdc7 	bl	80287e8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c5a:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c5e:	3a00      	subs	r2, #0
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c62:	bf18      	it	ne
 8001c64:	2201      	movne	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c68:	6803      	ldr	r3, [r0, #0]
}
 8001c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c72:	4718      	bx	r3
 8001c74:	24000774 	.word	0x24000774
 8001c78:	08029b21 	.word	0x08029b21
 8001c7c:	08029b59 	.word	0x08029b59
 8001c80:	08029ace 	.word	0x08029ace
 8001c84:	2402851e 	.word	0x2402851e

08001c88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c88:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c8c:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c92:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c94:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c98:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c9a:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c9c:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001ca0:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001ca2:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001ca4:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001ca8:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001caa:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001cae:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001cb0:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001cb2:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001cb6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001cbc:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001cc0:	3520      	adds	r5, #32
          buttonController(0),
 8001cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001cc6:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001cca:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001cce:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cd2:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cd6:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cda:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cde:	6782      	str	r2, [r0, #120]	@ 0x78
 8001ce0:	b2ad      	uxth	r5, r5
        instance = this;
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ce4:	42b5      	cmp	r5, r6
        instance = this;
 8001ce6:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cea:	8015      	strh	r5, [r2, #0]
 8001cec:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cee:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cf0:	bf28      	it	cs
 8001cf2:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cf6:	bf38      	it	cc
 8001cf8:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cfa:	8016      	strh	r6, [r2, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cfe:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d02:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001d04:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001d06:	7013      	strb	r3, [r2, #0]
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001d0a:	6003      	str	r3, [r0, #0]
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	bf00      	nop
 8001d10:	01000001 	.word	0x01000001
 8001d14:	01010000 	.word	0x01010000
 8001d18:	24028520 	.word	0x24028520
 8001d1c:	24028514 	.word	0x24028514
 8001d20:	2402851a 	.word	0x2402851a
 8001d24:	24028516 	.word	0x24028516
 8001d28:	2402851c 	.word	0x2402851c
 8001d2c:	24028518 	.word	0x24028518
 8001d30:	08029bb0 	.word	0x08029bb0

08001d34 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d34:	2b01      	cmp	r3, #1
    {
 8001d36:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d38:	d80e      	bhi.n	8001d58 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	2215      	movs	r2, #21
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	460b      	mov	r3, r1
 8001d42:	4601      	mov	r1, r0
 8001d44:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <DSI_IO_Write+0x34>)
 8001d46:	f009 fa1c 	bl	800b182 <HAL_DSI_ShortWrite>
 8001d4a:	b118      	cbz	r0, 8001d54 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d4c:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d50:	b002      	add	sp, #8
 8001d52:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d54:	2000      	movs	r0, #0
 8001d56:	e7fb      	b.n	8001d50 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d58:	e9cd 1200 	strd	r1, r2, [sp]
 8001d5c:	4601      	mov	r1, r0
 8001d5e:	2239      	movs	r2, #57	@ 0x39
 8001d60:	4801      	ldr	r0, [pc, #4]	@ (8001d68 <DSI_IO_Write+0x34>)
 8001d62:	f009 fa1f 	bl	800b1a4 <HAL_DSI_LongWrite>
 8001d66:	e7f0      	b.n	8001d4a <DSI_IO_Write+0x16>
 8001d68:	240005f0 	.word	0x240005f0

08001d6c <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d6e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d72:	2106      	movs	r1, #6
 8001d74:	9100      	str	r1, [sp, #0]
 8001d76:	4601      	mov	r1, r0
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <DSI_IO_Read+0x24>)
 8001d7a:	f009 fa73 	bl	800b264 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d7e:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d80:	bf14      	ite	ne
 8001d82:	f06f 0007 	mvnne.w	r0, #7
 8001d86:	2000      	moveq	r0, #0
 8001d88:	b005      	add	sp, #20
 8001d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d8e:	bf00      	nop
 8001d90:	240005f0 	.word	0x240005f0

08001d94 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d96:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d9a:	4c0b      	ldr	r4, [pc, #44]	@ (8001dc8 <LCD_ReqTear+0x34>)
 8001d9c:	2239      	movs	r2, #57	@ 0x39
 8001d9e:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001da0:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001da4:	ab03      	add	r3, sp, #12
 8001da6:	4620      	mov	r0, r4
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2344      	movs	r3, #68	@ 0x44
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2302      	movs	r3, #2
 8001db0:	f009 f9f8 	bl	800b1a4 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2335      	movs	r3, #53	@ 0x35
 8001db8:	2215      	movs	r2, #21
 8001dba:	4620      	mov	r0, r4
 8001dbc:	9100      	str	r1, [sp, #0]
 8001dbe:	f009 f9e0 	bl	800b182 <HAL_DSI_ShortWrite>
    }
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	bf00      	nop
 8001dc8:	240005f0 	.word	0x240005f0

08001dcc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001dcc:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001dce:	f7ff ffe1 	bl	8001d94 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001de2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001df2:	f042 0202 	orr.w	r2, r2, #2
 8001df6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4b02      	ldr	r3, [pc, #8]	@ (8001e08 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e00:	bd08      	pop	{r3, pc}
 8001e02:	bf00      	nop
 8001e04:	240005f0 	.word	0x240005f0
 8001e08:	50001000 	.word	0x50001000

08001e0c <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001e0c:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <LCD_ReqEnable+0x20>)
    {
 8001e0e:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001e10:	7819      	ldrb	r1, [r3, #0]
 8001e12:	b939      	cbnz	r1, 8001e24 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001e14:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001e16:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001e18:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001e1a:	2329      	movs	r3, #41	@ 0x29
 8001e1c:	2215      	movs	r2, #21
 8001e1e:	9100      	str	r1, [sp, #0]
 8001e20:	f009 f9af 	bl	800b182 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e24:	b003      	add	sp, #12
 8001e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2a:	bf00      	nop
 8001e2c:	24000760 	.word	0x24000760
 8001e30:	240005f0 	.word	0x240005f0

08001e34 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionLeft+0x20>)
 8001e46:	f009 f9ad 	bl	800b1a4 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000008 	.word	0x24000008
 8001e54:	240005f0 	.word	0x240005f0

08001e58 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e5a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	232a      	movs	r3, #42	@ 0x2a
 8001e60:	2239      	movs	r2, #57	@ 0x39
 8001e62:	2100      	movs	r1, #0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2304      	movs	r3, #4
 8001e68:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <LCD_SetUpdateRegionRight+0x20>)
 8001e6a:	f009 f99b 	bl	800b1a4 <HAL_DSI_LongWrite>
    }
 8001e6e:	b003      	add	sp, #12
 8001e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e74:	24000004 	.word	0x24000004
 8001e78:	240005f0 	.word	0x240005f0

08001e7c <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e7c:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e7e:	4d14      	ldr	r5, [pc, #80]	@ (8001ed0 <HAL_DSI_TearingEffectCallback+0x54>)
 8001e80:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fd46 	bl	8001914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e88:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e8a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e94:	f000 fdc0 	bl	8002a18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e9a:	682a      	ldr	r2, [r5, #0]
 8001e9c:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001ea4:	b173      	cbz	r3, 8001ec4 <HAL_DSI_TearingEffectCallback+0x48>
 8001ea6:	4d0c      	ldr	r5, [pc, #48]	@ (8001ed8 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001ea8:	782b      	ldrb	r3, [r5, #0]
 8001eaa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001eae:	b94b      	cbnz	r3, 8001ec4 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_DSI_TearingEffectCallback+0x60>)
 8001eb2:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001eb4:	f7ff ffbe 	bl	8001e34 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f009 f952 	bl	800b162 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ec4:	2000      	movs	r0, #0
    }
 8001ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001eca:	f7ff bd53 	b.w	8001974 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001ece:	bf00      	nop
 8001ed0:	24028520 	.word	0x24028520
 8001ed4:	2400000c 	.word	0x2400000c
 8001ed8:	2400077c 	.word	0x2400077c
 8001edc:	24000778 	.word	0x24000778

08001ee0 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ee4:	4e48      	ldr	r6, [pc, #288]	@ (8002008 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001eea:	7833      	ldrb	r3, [r6, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8088 	beq.w	8002002 <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ef2:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800202c <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ef6:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002030 <HAL_DSI_EndOfRefreshCallback+0x150>
 8001efa:	f8d9 5000 	ldr.w	r5, [r9]
 8001efe:	4f43      	ldr	r7, [pc, #268]	@ (800200c <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001f00:	2d00      	cmp	r5, #0
 8001f02:	d13e      	bne.n	8001f82 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001f04:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f06:	4e42      	ldr	r6, [pc, #264]	@ (8002010 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001f08:	f008 fbc2 	bl	800a690 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	9500      	str	r5, [sp, #0]
 8001f10:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f14:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f16:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f1a:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f1e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f26:	f002 0208 	and.w	r2, r2, #8
 8001f2a:	9200      	str	r2, [sp, #0]
 8001f2c:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f2e:	f8d8 2000 	ldr.w	r2, [r8]
 8001f32:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f36:	4837      	ldr	r0, [pc, #220]	@ (8002014 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f38:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f3a:	4e37      	ldr	r6, [pc, #220]	@ (8002018 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f3c:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f3e:	4837      	ldr	r0, [pc, #220]	@ (800201c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f40:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f44:	4836      	ldr	r0, [pc, #216]	@ (8002020 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f46:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f4a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f4c:	f041 0101 	orr.w	r1, r1, #1
 8001f50:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f52:	9501      	str	r5, [sp, #4]
 8001f54:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f58:	f042 0208 	orr.w	r2, r2, #8
 8001f5c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f6c:	f7ff ff74 	bl	8001e58 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f70:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f72:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f74:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f78:	b005      	add	sp, #20
 8001f7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f7e:	f009 b8f0 	b.w	800b162 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f82:	6803      	ldr	r3, [r0, #0]
 8001f84:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f86:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f88:	9502      	str	r5, [sp, #8]
 8001f8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f8e:	4c25      	ldr	r4, [pc, #148]	@ (8002024 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f98:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f9c:	f002 0208 	and.w	r2, r2, #8
 8001fa0:	9202      	str	r2, [sp, #8]
 8001fa2:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001fa4:	f8d8 2000 	ldr.w	r2, [r8]
 8001fa8:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001fac:	4819      	ldr	r0, [pc, #100]	@ (8002014 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001fae:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001fb0:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001fb4:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001fb6:	4819      	ldr	r0, [pc, #100]	@ (800201c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001fb8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001fbc:	4818      	ldr	r0, [pc, #96]	@ (8002020 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001fbe:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fc4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fc6:	f041 0101 	orr.w	r1, r1, #1
 8001fca:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fcc:	9503      	str	r5, [sp, #12]
 8001fce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fe6:	f7ff fcc5 	bl	8001974 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fea:	f7ff ff0f 	bl	8001e0c <LCD_ReqEnable>
        return instance;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001ff0:	7035      	strb	r5, [r6, #0]
 8001ff2:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001ff4:	b128      	cbz	r0, 8002002 <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001ff6:	6803      	ldr	r3, [r0, #0]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
    }
 8001ffa:	b005      	add	sp, #20
 8001ffc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002000:	4718      	bx	r3
 8002002:	b005      	add	sp, #20
 8002004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002008:	2400077c 	.word	0x2400077c
 800200c:	24000774 	.word	0x24000774
 8002010:	01b201e2 	.word	0x01b201e2
 8002014:	50001000 	.word	0x50001000
 8002018:	019201e3 	.word	0x019201e3
 800201c:	01920003 	.word	0x01920003
 8002020:	09c004b3 	.word	0x09c004b3
 8002024:	019201e2 	.word	0x019201e2
 8002028:	24028520 	.word	0x24028520
 800202c:	24000778 	.word	0x24000778
 8002030:	24000418 	.word	0x24000418

08002034 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002034:	4601      	mov	r1, r0
 8002036:	b508      	push	{r3, lr}
        return instance;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <IdleTaskHook+0x14>)
 800203a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800203c:	b101      	cbz	r1, 8002040 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800203e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002040:	f011 fd52 	bl	8013ae8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002044:	2001      	movs	r0, #1
 8002046:	bd08      	pop	{r3, pc}
 8002048:	24028520 	.word	0x24028520

0800204c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	4a02      	ldr	r2, [pc, #8]	@ (8002060 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002056:	601a      	str	r2, [r3, #0]

}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	24000764 	.word	0x24000764
 8002060:	08029944 	.word	0x08029944

08002064 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002064:	6940      	ldr	r0, [r0, #20]
 8002066:	4770      	bx	lr

08002068 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002068:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800206c:	4770      	bx	lr

0800206e <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800206e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002070:	b923      	cbnz	r3, 800207c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002072:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002074:	3800      	subs	r0, #0
 8002076:	bf18      	it	ne
 8002078:	2001      	movne	r0, #1
 800207a:	4770      	bx	lr
 800207c:	2001      	movs	r0, #1
}
 800207e:	4770      	bx	lr

08002080 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002080:	6880      	ldr	r0, [r0, #8]
 8002082:	4770      	bx	lr

08002084 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002084:	4770      	bx	lr

08002086 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002086:	3004      	adds	r0, #4
{
 8002088:	b510      	push	{r4, lr}
 800208a:	460c      	mov	r4, r1
    *data = videoInfo;
 800208c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800208e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002092:	bd10      	pop	{r4, pc}

08002094 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002094:	4770      	bx	lr
	...

08002098 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002098:	b508      	push	{r3, lr}
    assert(0);
 800209a:	4a03      	ldr	r2, [pc, #12]	@ (80020a8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 800209c:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80020a2:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80020a4:	f026 fba0 	bl	80287e8 <__assert_func>
 80020a8:	08029c80 	.word	0x08029c80
 80020ac:	0802c2d3 	.word	0x0802c2d3
 80020b0:	08029cdb 	.word	0x08029cdb

080020b4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
 80020b8:	2148      	movs	r1, #72	@ 0x48
 80020ba:	f026 f81d 	bl	80280f8 <_ZdlPvj>
 80020be:	4620      	mov	r0, r4
 80020c0:	bd10      	pop	{r4, pc}
	...

080020c4 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020c4:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020c8:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020ca:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020cc:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020ce:	6003      	str	r3, [r0, #0]
 80020d0:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020d2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020d6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020da:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020de:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020e2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020e6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ee:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020f2:	2001      	movs	r0, #1
 80020f4:	f00d fb6c 	bl	800f7d0 <osSemaphoreNew>
 80020f8:	4b02      	ldr	r3, [pc, #8]	@ (8002104 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020fa:	6018      	str	r0, [r3, #0]
}
 80020fc:	4620      	mov	r0, r4
 80020fe:	bd10      	pop	{r4, pc}
 8002100:	08029f2c 	.word	0x08029f2c
 8002104:	2400079c 	.word	0x2400079c

08002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002108:	b410      	push	{r4}
 800210a:	460c      	mov	r4, r1
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
    if (reader != 0)
 8002110:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002112:	b13b      	cbz	r3, 8002124 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002114:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002116:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002118:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800211a:	4420      	add	r0, r4
}
 800211c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002120:	f026 be06 	b.w	8028d30 <strncmp>
        src = (const char*)movieData + offset;
 8002124:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002126:	e7f8      	b.n	800211a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002128 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002128:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800212a:	b510      	push	{r4, lr}
    if (reader != 0)
 800212c:	b173      	cbz	r3, 800214c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800212e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002130:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002132:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002134:	1853      	adds	r3, r2, r1
 8002136:	5c52      	ldrb	r2, [r2, r1]
 8002138:	7898      	ldrb	r0, [r3, #2]
 800213a:	785c      	ldrb	r4, [r3, #1]
 800213c:	0400      	lsls	r0, r0, #16
 800213e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002142:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002144:	78db      	ldrb	r3, [r3, #3]
 8002146:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800214a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800214c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800214e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002150:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002152:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002154:	7898      	ldrb	r0, [r3, #2]
 8002156:	0400      	lsls	r0, r0, #16
 8002158:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800215c:	e7f1      	b.n	8002142 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800215e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800215e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002160:	b143      	cbz	r3, 8002174 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002162:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002164:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002166:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002168:	185a      	adds	r2, r3, r1
 800216a:	5c58      	ldrb	r0, [r3, r1]
 800216c:	7852      	ldrb	r2, [r2, #1]
 800216e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002172:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002174:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002176:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002178:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800217a:	7853      	ldrb	r3, [r2, #1]
 800217c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002180:	4770      	bx	lr
	...

08002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4604      	mov	r4, r0
    if (reader != 0)
 8002188:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800218a:	460d      	mov	r5, r1
 800218c:	4616      	mov	r6, r2
    if (reader != 0)
 800218e:	b1d8      	cbz	r0, 80021c8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002190:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002192:	4293      	cmp	r3, r2
 8002194:	d208      	bcs.n	80021a8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002196:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800219a:	219e      	movs	r1, #158	@ 0x9e
 800219c:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800219e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80021a4:	f026 fb20 	bl	80287e8 <__assert_func>
        reader->seek(offset);
 80021a8:	6803      	ldr	r3, [r0, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80021ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80021b0:	4632      	mov	r2, r6
 80021b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021b4:	6803      	ldr	r3, [r0, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4798      	blx	r3
 80021ba:	b910      	cbnz	r0, 80021c2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80021bc:	230d      	movs	r3, #13
 80021be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80021c2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021c4:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021c8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021ca:	4408      	add	r0, r1
 80021cc:	e7fb      	b.n	80021c6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021ce:	bf00      	nop
 80021d0:	08029d67 	.word	0x08029d67
 80021d4:	08029cdb 	.word	0x08029cdb
 80021d8:	08029d54 	.word	0x08029d54

080021dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021e0:	6943      	ldr	r3, [r0, #20]
{
 80021e2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021e4:	b92b      	cbnz	r3, 80021f2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021e8:	21e4      	movs	r1, #228	@ 0xe4
 80021ea:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021ec:	4822      	ldr	r0, [pc, #136]	@ (8002278 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ee:	f026 fafb 	bl	80287e8 <__assert_func>
    readData(currentMovieOffset, 8);
 80021f2:	2208      	movs	r2, #8
 80021f4:	6981      	ldr	r1, [r0, #24]
 80021f6:	f7ff ffc5 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021fa:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021fc:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002200:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002204:	3104      	adds	r1, #4
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff ff8e 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800220c:	69a3      	ldr	r3, [r4, #24]
 800220e:	4418      	add	r0, r3
 8002210:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002212:	f100 0208 	add.w	r2, r0, #8
 8002216:	429a      	cmp	r2, r3
 8002218:	d306      	bcc.n	8002228 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800221a:	2301      	movs	r3, #1
    return false;
 800221c:	2000      	movs	r0, #0
    frameNumber = 1;
 800221e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002220:	6a23      	ldr	r3, [r4, #32]
 8002222:	61a3      	str	r3, [r4, #24]
}
 8002224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002228:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800222a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800222e:	2208      	movs	r2, #8
 8002230:	4620      	mov	r0, r4
        frameNumber++;
 8002232:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002234:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002238:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800223a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800223c:	f7ff ffa2 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002240:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002244:	4620      	mov	r0, r4
 8002246:	4649      	mov	r1, r9
 8002248:	f7ff ff89 	bl	800215e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800224c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002250:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff ff83 	bl	800215e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002258:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800225c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ff62 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002264:	45b0      	cmp	r8, r6
 8002266:	d1d1      	bne.n	800220c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002268:	42bd      	cmp	r5, r7
 800226a:	d1cf      	bne.n	800220c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800226c:	2001      	movs	r0, #1
 800226e:	e7d9      	b.n	8002224 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002270:	08029da9 	.word	0x08029da9
 8002274:	08029df2 	.word	0x08029df2
 8002278:	08029cdb 	.word	0x08029cdb

0800227c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800227c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	bf38      	it	cc
 8002282:	2101      	movcc	r1, #1
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002286:	b570      	push	{r4, r5, r6, lr}
 8002288:	460d      	mov	r5, r1
 800228a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800228c:	4798      	blx	r3
 800228e:	42a8      	cmp	r0, r5
 8002290:	d204      	bcs.n	800229c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	4620      	mov	r0, r4
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	4798      	blx	r3
 800229a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800229c:	1e6b      	subs	r3, r5, #1
 800229e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80022a0:	2210      	movs	r2, #16
 80022a2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80022a4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80022a8:	f106 0108 	add.w	r1, r6, #8
 80022ac:	f7ff ff6a 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80022b0:	f106 0110 	add.w	r1, r6, #16
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ff37 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80022ba:	6a23      	ldr	r3, [r4, #32]
 80022bc:	3b04      	subs	r3, #4
 80022be:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80022c0:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022c8:	2100      	movs	r1, #0
    readData(0, 72);
 80022ca:	2248      	movs	r2, #72	@ 0x48
{
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022d2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022d4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022d8:	f7ff ff54 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022dc:	69a6      	ldr	r6, [r4, #24]
 80022de:	2304      	movs	r3, #4
 80022e0:	4a63      	ldr	r2, [pc, #396]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022e2:	4631      	mov	r1, r6
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff ff0f 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ea:	b148      	cbz	r0, 8002300 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022ec:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ee:	4a61      	ldr	r2, [pc, #388]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022fa:	4860      	ldr	r0, [pc, #384]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022fc:	f026 fa74 	bl	80287e8 <__assert_func>
    currentMovieOffset += 8;
 8002300:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002304:	2304      	movs	r3, #4
 8002306:	4a5e      	ldr	r2, [pc, #376]	@ (8002480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002308:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800230a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800230c:	f7ff fefc 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002312:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002314:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800231e:	4b59      	ldr	r3, [pc, #356]	@ (8002484 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002320:	e7eb      	b.n	80022fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002322:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002326:	2304      	movs	r3, #4
 8002328:	4a57      	ldr	r2, [pc, #348]	@ (8002488 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800232a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800232c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800232e:	f7ff feeb 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002332:	4607      	mov	r7, r0
 8002334:	b138      	cbz	r0, 8002346 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002336:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002338:	4a4e      	ldr	r2, [pc, #312]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800233a:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800233e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002342:	4b52      	ldr	r3, [pc, #328]	@ (800248c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002344:	e7d9      	b.n	80022fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002346:	f106 0110 	add.w	r1, r6, #16
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff feec 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002350:	4605      	mov	r5, r0
 8002352:	b920      	cbnz	r0, 800235e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002354:	4b4e      	ldr	r3, [pc, #312]	@ (8002490 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002356:	f240 1141 	movw	r1, #321	@ 0x141
 800235a:	4a46      	ldr	r2, [pc, #280]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800235c:	e7cd      	b.n	80022fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800235e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002362:	2304      	movs	r3, #4
 8002364:	4a4b      	ldr	r2, [pc, #300]	@ (8002494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002366:	4620      	mov	r0, r4
 8002368:	4641      	mov	r1, r8
 800236a:	f7ff fecd 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800236e:	2800      	cmp	r0, #0
 8002370:	d049      	beq.n	8002406 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002372:	2306      	movs	r3, #6
 8002374:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002378:	2304      	movs	r3, #4
 800237a:	4a47      	ldr	r2, [pc, #284]	@ (8002498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800237c:	f106 0118 	add.w	r1, r6, #24
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff fec1 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002386:	2800      	cmp	r0, #0
 8002388:	d03f      	beq.n	800240a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800238a:	2307      	movs	r3, #7
 800238c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002390:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002392:	4f42      	ldr	r7, [pc, #264]	@ (800249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002394:	220c      	movs	r2, #12
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7ff fef3 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800239e:	f105 0608 	add.w	r6, r5, #8
 80023a2:	2304      	movs	r3, #4
 80023a4:	463a      	mov	r2, r7
 80023a6:	4620      	mov	r0, r4
 80023a8:	4631      	mov	r1, r6
 80023aa:	f7ff fead 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d048      	beq.n	8002448 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d148      	bne.n	800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80023ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023bc:	42ab      	cmp	r3, r5
 80023be:	d849      	bhi.n	8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023c0:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023c4:	3504      	adds	r5, #4
 80023c6:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023c8:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7ff feac 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023d0:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023d2:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023d4:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff fea6 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023dc:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023de:	2204      	movs	r2, #4
 80023e0:	4620      	mov	r0, r4
 80023e2:	4631      	mov	r1, r6
 80023e4:	f7ff fece 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023e8:	2304      	movs	r3, #4
 80023ea:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023ec:	4631      	mov	r1, r6
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe8a 	bl	8002108 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d138      	bne.n	800246a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023f8:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023fa:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023fc:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023fe:	69a3      	ldr	r3, [r4, #24]
 8002400:	6223      	str	r3, [r4, #32]
}
 8002402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002406:	2701      	movs	r7, #1
 8002408:	e7b6      	b.n	8002378 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800240a:	2f00      	cmp	r7, #0
 800240c:	d0c0      	beq.n	8002390 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800240e:	f106 0120 	add.w	r1, r6, #32
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff fe88 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002418:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800241c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002420:	fbb0 f0f3 	udiv	r0, r0, r3
 8002424:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fe7e 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800242c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002430:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe78 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002438:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800243c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff fe72 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002444:	6120      	str	r0, [r4, #16]
 8002446:	e7a3      	b.n	8002390 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0b9      	beq.n	80023c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800244c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800244e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002452:	e7d6      	b.n	8002402 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002454:	1d29      	adds	r1, r5, #4
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff fe66 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800245c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800245e:	220c      	movs	r2, #12
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7ff fe8e 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002468:	e799      	b.n	800239e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800246a:	230b      	movs	r3, #11
 800246c:	e7ef      	b.n	800244e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800246e:	bf00      	nop
 8002470:	08029e25 	.word	0x08029e25
 8002474:	08029e43 	.word	0x08029e43
 8002478:	08029e2a 	.word	0x08029e2a
 800247c:	08029cdb 	.word	0x08029cdb
 8002480:	08029e70 	.word	0x08029e70
 8002484:	08029e75 	.word	0x08029e75
 8002488:	08029e8d 	.word	0x08029e8d
 800248c:	08029e92 	.word	0x08029e92
 8002490:	08029ea8 	.word	0x08029ea8
 8002494:	08029eb4 	.word	0x08029eb4
 8002498:	08029eb9 	.word	0x08029eb9
 800249c:	08029ebe 	.word	0x08029ebe
 80024a0:	08029ec3 	.word	0x08029ec3

080024a4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80024a4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80024a8:	2200      	movs	r2, #0
 80024aa:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80024ac:	f7ff bf0c 	b.w	80022c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080024b0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80024b0:	b510      	push	{r4, lr}
    movieData = 0;
 80024b2:	2300      	movs	r3, #0
{
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
    movieData = 0;
 80024b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80024ba:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80024bc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4798      	blx	r3
 80024c2:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024c4:	4620      	mov	r0, r4
}
 80024c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024ca:	f7ff befd 	b.w	80022c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024d0 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024d2:	4c14      	ldr	r4, [pc, #80]	@ (8002524 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024d4:	4d14      	ldr	r5, [pc, #80]	@ (8002528 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024d6:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024d8:	2400      	movs	r4, #0
 80024da:	4b14      	ldr	r3, [pc, #80]	@ (800252c <JPEG_Decode_DMA+0x5c>)
 80024dc:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <JPEG_Decode_DMA+0x60>)
 80024e0:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024e4:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024e6:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <JPEG_Decode_DMA+0x68>)
 80024ea:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <JPEG_Decode_DMA+0x6c>)
 80024ee:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <JPEG_Decode_DMA+0x70>)
 80024f2:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024f4:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024f6:	682a      	ldr	r2, [r5, #0]
 80024f8:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024fc:	701c      	strb	r4, [r3, #0]
 80024fe:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002500:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002504:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002508:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800250c:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <JPEG_Decode_DMA+0x78>)
 800250e:	68d2      	ldr	r2, [r2, #12]
 8002510:	436a      	muls	r2, r5
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f009 ffcb 	bl	800c4b4 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800251e:	4620      	mov	r0, r4
 8002520:	b003      	add	sp, #12
 8002522:	bd30      	pop	{r4, r5, pc}
 8002524:	24009dc8 	.word	0x24009dc8
 8002528:	24009da4 	.word	0x24009da4
 800252c:	24009db4 	.word	0x24009db4
 8002530:	24000798 	.word	0x24000798
 8002534:	24009dc4 	.word	0x24009dc4
 8002538:	24009dbc 	.word	0x24009dbc
 800253c:	24009dc0 	.word	0x24009dc0
 8002540:	240007a0 	.word	0x240007a0
 8002544:	24000010 	.word	0x24000010
 8002548:	24000780 	.word	0x24000780

0800254c <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800254c:	684b      	ldr	r3, [r1, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d115      	bne.n	800257e <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002552:	68cb      	ldr	r3, [r1, #12]
 8002554:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002556:	bf1e      	ittt	ne
 8002558:	f023 030f 	bicne.w	r3, r3, #15
 800255c:	3310      	addne	r3, #16
 800255e:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002560:	688b      	ldr	r3, [r1, #8]
 8002562:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002564:	bf1e      	ittt	ne
 8002566:	f023 030f 	bicne.w	r3, r3, #15
 800256a:	3310      	addne	r3, #16
 800256c:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800256e:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002570:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002572:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002574:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002576:	4353      	muls	r3, r2
 8002578:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <HAL_JPEG_InfoReadyCallback+0x68>)
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800257e:	2b02      	cmp	r3, #2
 8002580:	d10e      	bne.n	80025a0 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002582:	68cb      	ldr	r3, [r1, #12]
 8002584:	071a      	lsls	r2, r3, #28
 8002586:	d003      	beq.n	8002590 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002588:	f023 030f 	bic.w	r3, r3, #15
 800258c:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800258e:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002590:	688b      	ldr	r3, [r1, #8]
 8002592:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002594:	bf1e      	ittt	ne
 8002596:	f023 0307 	bicne.w	r3, r3, #7
 800259a:	3308      	addne	r3, #8
 800259c:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800259e:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1fc      	bne.n	800259e <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80025a4:	68cb      	ldr	r3, [r1, #12]
 80025a6:	0758      	lsls	r0, r3, #29
 80025a8:	d0f2      	beq.n	8002590 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80025aa:	f023 0307 	bic.w	r3, r3, #7
 80025ae:	3308      	adds	r3, #8
 80025b0:	e7ed      	b.n	800258e <HAL_JPEG_InfoReadyCallback+0x42>
 80025b2:	bf00      	nop
 80025b4:	24009dac 	.word	0x24009dac

080025b8 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80025b8:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_JPEG_GetDataCallback+0x30>)
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	440b      	add	r3, r1
    {
 80025be:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80025c0:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <HAL_JPEG_GetDataCallback+0x34>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d20c      	bcs.n	80025e4 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025ca:	4c09      	ldr	r4, [pc, #36]	@ (80025f0 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025cc:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025ce:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025d0:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025d4:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025d6:	bf28      	it	cs
 80025d8:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025dc:	6021      	str	r1, [r4, #0]
        }
    }
 80025de:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025e0:	f009 bfca 	b.w	800c578 <HAL_JPEG_ConfigInputBuffer>
    }
 80025e4:	bc30      	pop	{r4, r5}
 80025e6:	4770      	bx	lr
 80025e8:	24009dc4 	.word	0x24009dc4
 80025ec:	24009dc0 	.word	0x24009dc0
 80025f0:	24009dbc 	.word	0x24009dbc

080025f4 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025f6:	4c20      	ldr	r4, [pc, #128]	@ (8002678 <HAL_JPEG_DataReadyCallback+0x84>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	4d20      	ldr	r5, [pc, #128]	@ (800267c <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025fc:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025fe:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002600:	4f1f      	ldr	r7, [pc, #124]	@ (8002680 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800260c:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_JPEG_DataReadyCallback+0x90>)
 8002610:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002618:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	440a      	add	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d901      	bls.n	8002632 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	5ceb      	ldrb	r3, [r5, r3]
 8002638:	b133      	cbz	r3, 8002648 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800263a:	2102      	movs	r1, #2
 800263c:	4630      	mov	r0, r6
 800263e:	f009 ff6d 	bl	800c51c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_JPEG_DataReadyCallback+0x94>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	4630      	mov	r0, r6
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002652:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002656:	6869      	ldr	r1, [r5, #4]
 8002658:	435a      	muls	r2, r3
 800265a:	f009 ff90 	bl	800c57e <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800265e:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_JPEG_DataReadyCallback+0x98>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	7a1a      	ldrb	r2, [r3, #8]
 8002664:	b93a      	cbnz	r2, 8002676 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002666:	7a9b      	ldrb	r3, [r3, #10]
 8002668:	b92b      	cbnz	r3, 8002676 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_JPEG_DataReadyCallback+0x9c>)
 800266c:	6818      	ldr	r0, [r3, #0]
        }
    }
 800266e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002672:	f00d b923 	b.w	800f8bc <osSemaphoreRelease>
    }
 8002676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002678:	24009da4 	.word	0x24009da4
 800267c:	24000010 	.word	0x24000010
 8002680:	24000780 	.word	0x24000780
 8002684:	240007a0 	.word	0x240007a0
 8002688:	24009db4 	.word	0x24009db4
 800268c:	24009da8 	.word	0x24009da8
 8002690:	2400079c 	.word	0x2400079c

08002694 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002696:	e7fe      	b.n	8002696 <HAL_JPEG_ErrorCallback+0x2>

08002698 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002698:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
    }
 800269e:	4770      	bx	lr
 80026a0:	24009db8 	.word	0x24009db8

080026a4 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80026a4:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026a6:	4d16      	ldr	r5, [pc, #88]	@ (8002700 <JPEG_OutputHandler+0x5c>)
{
 80026a8:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	b113      	cbz	r3, 80026b4 <JPEG_OutputHandler+0x10>
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <JPEG_OutputHandler+0x60>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	bb1b      	cbnz	r3, 80026fc <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <JPEG_OutputHandler+0x64>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	7a03      	ldrb	r3, [r0, #8]
 80026ba:	b963      	cbnz	r3, 80026d6 <JPEG_OutputHandler+0x32>
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <JPEG_OutputHandler+0x68>)
 80026be:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <JPEG_OutputHandler+0x6c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <JPEG_OutputHandler+0x32>
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <JPEG_OutputHandler+0x60>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b913      	cbnz	r3, 80026d6 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026d0:	6803      	ldr	r3, [r0, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002714 <JPEG_OutputHandler+0x70>)
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10c      	bne.n	80026f8 <JPEG_OutputHandler+0x54>
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <JPEG_OutputHandler+0x74>)
 80026e0:	490b      	ldr	r1, [pc, #44]	@ (8002710 <JPEG_OutputHandler+0x6c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	b933      	cbnz	r3, 80026f8 <JPEG_OutputHandler+0x54>
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	b923      	cbnz	r3, 80026f8 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ee:	2102      	movs	r1, #2
 80026f0:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026f2:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026f4:	f00a f971 	bl	800c9da <HAL_JPEG_Resume>
        return 1;
 80026f8:	2002      	movs	r0, #2
    }

    return 2;
}
 80026fa:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026fc:	2001      	movs	r0, #1
 80026fe:	e7fc      	b.n	80026fa <JPEG_OutputHandler+0x56>
 8002700:	24009db8 	.word	0x24009db8
 8002704:	24000794 	.word	0x24000794
 8002708:	24009da8 	.word	0x24009da8
 800270c:	24000798 	.word	0x24000798
 8002710:	24000010 	.word	0x24000010
 8002714:	24009db4 	.word	0x24009db4
 8002718:	24009da4 	.word	0x24009da4

0800271c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4605      	mov	r5, r0
    if (length == 0)
 8002720:	2a00      	cmp	r2, #0
 8002722:	d035      	beq.n	8002790 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002724:	2b00      	cmp	r3, #0
 8002726:	d033      	beq.n	8002790 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002728:	481a      	ldr	r0, [pc, #104]	@ (8002794 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 800272a:	2403      	movs	r4, #3
 800272c:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800272e:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002730:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002732:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002736:	bf18      	it	ne
 8002738:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800273c:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800273e:	bf18      	it	ne
 8002740:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002742:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002744:	0924      	lsrs	r4, r4, #4
 8002746:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002748:	692c      	ldr	r4, [r5, #16]
 800274a:	f014 040f 	ands.w	r4, r4, #15
 800274e:	bf18      	it	ne
 8002750:	f1c4 0410 	rsbne	r4, r4, #16
 8002754:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002756:	4810      	ldr	r0, [pc, #64]	@ (8002798 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002758:	f7ff feba 	bl	80024d0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800275c:	4c0f      	ldr	r4, [pc, #60]	@ (800279c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800275e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002762:	4d0d      	ldr	r5, [pc, #52]	@ (8002798 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002764:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002766:	4628      	mov	r0, r5
 8002768:	f7ff ff9c 	bl	80026a4 <JPEG_OutputHandler>
 800276c:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d105      	bne.n	8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002776:	f04f 31ff 	mov.w	r1, #4294967295
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	f00d f872 	bl	800f864 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d1ef      	bne.n	8002766 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 800278a:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	bf00      	nop
 8002794:	24000780 	.word	0x24000780
 8002798:	24000598 	.word	0x24000598
 800279c:	24009db0 	.word	0x24009db0
 80027a0:	24009da8 	.word	0x24009da8
 80027a4:	2400079c 	.word	0x2400079c
 80027a8:	24009db8 	.word	0x24009db8
 80027ac:	24000794 	.word	0x24000794

080027b0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027b6:	6943      	ldr	r3, [r0, #20]
{
 80027b8:	b085      	sub	sp, #20
 80027ba:	4604      	mov	r4, r0
 80027bc:	460f      	mov	r7, r1
 80027be:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80027c0:	b92b      	cbnz	r3, 80027ce <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80027c2:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027c4:	21b0      	movs	r1, #176	@ 0xb0
 80027c6:	4a29      	ldr	r2, [pc, #164]	@ (800286c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027c8:	4829      	ldr	r0, [pc, #164]	@ (8002870 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027ca:	f026 f80d 	bl	80287e8 <__assert_func>
    readData(currentMovieOffset, 8);
 80027ce:	2208      	movs	r2, #8
 80027d0:	6981      	ldr	r1, [r0, #24]
 80027d2:	f7ff fcd7 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027d6:	69a6      	ldr	r6, [r4, #24]
 80027d8:	4620      	mov	r0, r4
 80027da:	4631      	mov	r1, r6
 80027dc:	f7ff fcbf 	bl	800215e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027e0:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027e2:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fcba 	bl	800215e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ea:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027ec:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fc9a 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027f4:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027fa:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027fc:	1842      	adds	r2, r0, r1
 80027fe:	429a      	cmp	r2, r3
 8002800:	d226      	bcs.n	8002850 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002802:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002806:	459b      	cmp	fp, r3
 8002808:	d117      	bne.n	800283a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800280a:	f246 3364 	movw	r3, #25444	@ 0x6364
 800280e:	459a      	cmp	sl, r3
 8002810:	d113      	bne.n	800283a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002812:	b190      	cbz	r0, 800283a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002814:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002816:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff fcb3 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800281e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002820:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002822:	462a      	mov	r2, r5
 8002824:	4620      	mov	r0, r4
 8002826:	f8cd 8000 	str.w	r8, [sp]
 800282a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800282e:	463b      	mov	r3, r7
 8002830:	f7ff ff74 	bl	800271c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002834:	6963      	ldr	r3, [r4, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800283e:	b905      	cbnz	r5, 8002842 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002840:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002842:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002844:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002846:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800284a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800284c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800284e:	d109      	bne.n	8002864 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002850:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002852:	2001      	movs	r0, #1
        frameNumber = 1;
 8002854:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002856:	6a23      	ldr	r3, [r4, #32]
 8002858:	61a3      	str	r3, [r4, #24]
}
 800285a:	f080 0001 	eor.w	r0, r0, #1
 800285e:	b005      	add	sp, #20
 8002860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002864:	2000      	movs	r0, #0
 8002866:	e7f8      	b.n	800285a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002868:	08029da9 	.word	0x08029da9
 800286c:	08029ec8 	.word	0x08029ec8
 8002870:	08029cdb 	.word	0x08029cdb

08002874 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002878:	6981      	ldr	r1, [r0, #24]
{
 800287a:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 800287c:	2208      	movs	r2, #8
 800287e:	f7ff fc81 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002882:	69a7      	ldr	r7, [r4, #24]
 8002884:	4620      	mov	r0, r4
 8002886:	1d39      	adds	r1, r7, #4
 8002888:	f7ff fc4e 	bl	8002128 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800288c:	f107 0108 	add.w	r1, r7, #8
 8002890:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002892:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fc75 	bl	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800289a:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 800289c:	b16e      	cbz	r6, 80028ba <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800289e:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028a0:	4c07      	ldr	r4, [pc, #28]	@ (80028c0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 80028a2:	4d08      	ldr	r5, [pc, #32]	@ (80028c4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80028a4:	4633      	mov	r3, r6
 80028a6:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 80028a8:	f7ff fe12 	bl	80024d0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7ff fef9 	bl	80026a4 <JPEG_OutputHandler>
 80028b2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f8      	beq.n	80028ac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 80028ba:	2001      	movs	r0, #1
 80028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028be:	bf00      	nop
 80028c0:	24009db0 	.word	0x24009db0
 80028c4:	24000598 	.word	0x24000598

080028c8 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <DMA2D_CopyBuffer+0x70>)
 80028ca:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028d0:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028d4:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028d6:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028d8:	4e18      	ldr	r6, [pc, #96]	@ (800293c <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028da:	4f19      	ldr	r7, [pc, #100]	@ (8002940 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028dc:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028e0:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028e4:	434d      	muls	r5, r1
 80028e6:	6911      	ldr	r1, [r2, #16]
 80028e8:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028ec:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ee:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028f0:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028f2:	683f      	ldr	r7, [r7, #0]
 80028f4:	68d3      	ldr	r3, [r2, #12]
 80028f6:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028f8:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028fa:	45bc      	cmp	ip, r7
 80028fc:	d317      	bcc.n	800292e <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	f1c2 0210 	rsb	r2, r2, #16
 8002904:	430a      	orrs	r2, r1
 8002906:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002908:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800290a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 800290e:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002910:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <DMA2D_CopyBuffer+0x74>)
 8002914:	4421      	add	r1, r4
 8002916:	4429      	add	r1, r5
 8002918:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800291a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 800291c:	2300      	movs	r3, #0
 800291e:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <DMA2D_CopyBuffer+0x80>)
 8002922:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002924:	6843      	ldr	r3, [r0, #4]
 8002926:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002928:	4b08      	ldr	r3, [pc, #32]	@ (800294c <DMA2D_CopyBuffer+0x84>)
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800292e:	f041 0110 	orr.w	r1, r1, #16
 8002932:	6471      	str	r1, [r6, #68]	@ 0x44
 8002934:	e7e8      	b.n	8002908 <DMA2D_CopyBuffer+0x40>
 8002936:	bf00      	nop
 8002938:	24000780 	.word	0x24000780
 800293c:	52001000 	.word	0x52001000
 8002940:	24009dac 	.word	0x24009dac
 8002944:	24009dc8 	.word	0x24009dc8
 8002948:	ff09000b 	.word	0xff09000b
 800294c:	00012301 	.word	0x00012301

08002950 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002952:	2200      	movs	r2, #0
 8002954:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002956:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002958:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 800295a:	3101      	adds	r1, #1
 800295c:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	2901      	cmp	r1, #1
 8002962:	d900      	bls.n	8002966 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002964:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <DMA2D_ExternalJobCompleted+0x38>)
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <DMA2D_ExternalJobCompleted+0x3c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	68c2      	ldr	r2, [r0, #12]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <DMA2D_ExternalJobCompleted+0x40>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <DMA2D_ExternalJobCompleted+0x44>)
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	f00c bf9c 	b.w	800f8bc <osSemaphoreRelease>
 8002984:	24000798 	.word	0x24000798
 8002988:	24009dac 	.word	0x24009dac
 800298c:	24000780 	.word	0x24000780
 8002990:	24000794 	.word	0x24000794
 8002994:	2400079c 	.word	0x2400079c

08002998 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002998:	2101      	movs	r1, #1
 800299a:	2200      	movs	r2, #0
{
 800299c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800299e:	4608      	mov	r0, r1
 80029a0:	f00c ff16 	bl	800f7d0 <osSemaphoreNew>
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80029a6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80029a8:	b928      	cbnz	r0, 80029b6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80029ac:	2128      	movs	r1, #40	@ 0x28
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029b0:	480a      	ldr	r0, [pc, #40]	@ (80029dc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80029b2:	f025 ff19 	bl	80287e8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2104      	movs	r1, #4
 80029ba:	2001      	movs	r0, #1
 80029bc:	f00c ffa7 	bl	800f90e <osMessageQueueNew>
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80029c2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029c4:	b918      	cbnz	r0, 80029ce <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029c8:	212c      	movs	r1, #44	@ 0x2c
 80029ca:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029cc:	e7f0      	b.n	80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029ce:	bd08      	pop	{r3, pc}
 80029d0:	24009dd0 	.word	0x24009dd0
 80029d4:	08029f68 	.word	0x08029f68
 80029d8:	08029fb1 	.word	0x08029fb1
 80029dc:	08029fe0 	.word	0x08029fe0
 80029e0:	24009dcc 	.word	0x24009dcc
 80029e4:	0802a04f 	.word	0x0802a04f

080029e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029e8:	4b02      	ldr	r3, [pc, #8]	@ (80029f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029ea:	f04f 31ff 	mov.w	r1, #4294967295
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f00c bf38 	b.w	800f864 <osSemaphoreAcquire>
 80029f4:	24009dd0 	.word	0x24009dd0

080029f8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029f8:	4b01      	ldr	r3, [pc, #4]	@ (8002a00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	f00c bf5e 	b.w	800f8bc <osSemaphoreRelease>
 8002a00:	24009dd0 	.word	0x24009dd0

08002a04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002a04:	4b02      	ldr	r3, [pc, #8]	@ (8002a10 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002a06:	2100      	movs	r1, #0
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	f00c bf2b 	b.w	800f864 <osSemaphoreAcquire>
 8002a0e:	bf00      	nop
 8002a10:	24009dd0 	.word	0x24009dd0

08002a14 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002a14:	f7ff bff0 	b.w	80029f8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002a18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4803      	ldr	r0, [pc, #12]	@ (8002a28 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6800      	ldr	r0, [r0, #0]
 8002a22:	f00c bfaf 	b.w	800f984 <osMessageQueuePut>
 8002a26:	bf00      	nop
 8002a28:	24009dcc 	.word	0x24009dcc
 8002a2c:	24000030 	.word	0x24000030

08002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a30:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a32:	2300      	movs	r3, #0
 8002a34:	4c07      	ldr	r4, [pc, #28]	@ (8002a54 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a36:	a901      	add	r1, sp, #4
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	f00c ffd3 	bl	800f9e6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	2200      	movs	r2, #0
 8002a46:	a901      	add	r1, sp, #4
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	f00c ffcc 	bl	800f9e6 <osMessageQueueGet>
}
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd10      	pop	{r4, pc}
 8002a52:	bf00      	nop
 8002a54:	24009dcc 	.word	0x24009dcc

08002a58 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	4718      	bx	r3

08002a5e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a5e:	2001      	movs	r0, #1
 8002a60:	4770      	bx	lr

08002a62 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a62:	e7fe      	b.n	8002a62 <DMA2D_XferErrorCallback>

08002a64 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a64:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a68:	4770      	bx	lr
	...

08002a6c <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a78:	f00c fe68 	bl	800f74c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a7c:	6860      	ldr	r0, [r4, #4]
 8002a7e:	6803      	ldr	r3, [r0, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4798      	blx	r3
 8002a84:	b978      	cbnz	r0, 8002aa6 <_ZN8STM32DMA5startEv+0x3a>
 8002a86:	7a63      	ldrb	r3, [r4, #9]
 8002a88:	b16b      	cbz	r3, 8002aa6 <_ZN8STM32DMA5startEv+0x3a>
 8002a8a:	7a23      	ldrb	r3, [r4, #8]
 8002a8c:	b95b      	cbnz	r3, 8002aa6 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a8e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a92:	4620      	mov	r0, r4
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a9a:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002aa2:	f00c be76 	b.w	800f792 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002aa6:	490b      	ldr	r1, [pc, #44]	@ (8002ad4 <_ZN8STM32DMA5startEv+0x68>)
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <_ZN8STM32DMA5startEv+0x6c>)
 8002aaa:	680b      	ldr	r3, [r1, #0]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d1f2      	bne.n	8002a9a <_ZN8STM32DMA5startEv+0x2e>
 8002ab4:	7a20      	ldrb	r0, [r4, #8]
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1ef      	bne.n	8002a9a <_ZN8STM32DMA5startEv+0x2e>
 8002aba:	7aa0      	ldrb	r0, [r4, #10]
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d1ec      	bne.n	8002a9a <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac0:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002ac2:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ac6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aca:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002acc:	f7ff fefc 	bl	80028c8 <DMA2D_CopyBuffer>
    }
 8002ad0:	e7e3      	b.n	8002a9a <_ZN8STM32DMA5startEv+0x2e>
 8002ad2:	bf00      	nop
 8002ad4:	24000798 	.word	0x24000798
 8002ad8:	24000010 	.word	0x24000010

08002adc <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ae2:	6003      	str	r3, [r0, #0]
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aee:	f3bf 8f6f 	isb	sy
}
 8002af2:	4770      	bx	lr
 8002af4:	0802a210 	.word	0x0802a210
 8002af8:	e000e100 	.word	0xe000e100

08002afc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4604      	mov	r4, r0
}
 8002b00:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002b04:	f7ff ffea 	bl	8002adc <_ZN8STM32DMAD1Ev>
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f025 faf5 	bl	80280f8 <_ZdlPvj>
 8002b0e:	4620      	mov	r0, r4
 8002b10:	bd10      	pop	{r4, pc}
	...

08002b14 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b14:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002b16:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b18:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b1c:	f042 0210 	orr.w	r2, r2, #16
 8002b20:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b24:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b28:	f002 0210 	and.w	r2, r2, #16
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b30:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b32:	f042 0210 	orr.w	r2, r2, #16
 8002b36:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b3a:	f022 0210 	bic.w	r2, r2, #16
 8002b3e:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b40:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <_ZN8STM32DMA10initializeEv+0x48>)
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b44:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b46:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b50:	609a      	str	r2, [r3, #8]
}
 8002b52:	b002      	add	sp, #8
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	2400060c 	.word	0x2400060c
 8002b60:	08002db1 	.word	0x08002db1
 8002b64:	08002a63 	.word	0x08002a63
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b6c:	b508      	push	{r3, lr}
    switch (format)
 8002b6e:	280a      	cmp	r0, #10
 8002b70:	d809      	bhi.n	8002b86 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b72:	e8df f000 	tbb	[pc, r0]
 8002b76:	1006      	.short	0x1006
 8002b78:	0808080e 	.word	0x0808080e
 8002b7c:	10101008 	.word	0x10101008
 8002b80:	10          	.byte	0x10
 8002b81:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b82:	2002      	movs	r0, #2
}
 8002b84:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b88:	2191      	movs	r1, #145	@ 0x91
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b8c:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b8e:	f025 fe2b 	bl	80287e8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7f6      	b.n	8002b84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b96:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b98:	e7f4      	b.n	8002b84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b9a:	bf00      	nop
 8002b9c:	0802a091 	.word	0x0802a091
 8002ba0:	0802a0ac 	.word	0x0802a0ac
 8002ba4:	0802a0f7 	.word	0x0802a0f7

08002ba8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002bac:	7f88      	ldrb	r0, [r1, #30]
 8002bae:	f7ff ffdd 	bl	8002b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bb4:	8aa5      	ldrh	r5, [r4, #20]
 8002bb6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bb8:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bba:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bbe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bc2:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bc6:	1b52      	subs	r2, r2, r5
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002bca:	6825      	ldr	r5, [r4, #0]
 8002bcc:	2d08      	cmp	r5, #8
 8002bce:	d10e      	bne.n	8002bee <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bd0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bd2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bd4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bd8:	7f20      	ldrb	r0, [r4, #28]
 8002bda:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bde:	61da      	str	r2, [r3, #28]
        return color;
 8002be0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002be2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002be4:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002be8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bea:	601a      	str	r2, [r3, #0]
    }
}
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bee:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bf0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bf2:	611a      	str	r2, [r3, #16]
 8002bf4:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bf8:	4a03      	ldr	r2, [pc, #12]	@ (8002c08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bfa:	e7f6      	b.n	8002bea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bfc:	52001000 	.word	0x52001000
 8002c00:	00010009 	.word	0x00010009
 8002c04:	00022301 	.word	0x00022301
 8002c08:	00032301 	.word	0x00032301

08002c0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002c0c:	b508      	push	{r3, lr}
    switch (format)
 8002c0e:	280b      	cmp	r0, #11
 8002c10:	d80b      	bhi.n	8002c2a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002c12:	e8df f000 	tbb	[pc, r0]
 8002c16:	1206      	.short	0x1206
 8002c18:	0a0a0a10 	.word	0x0a0a0a10
 8002c1c:	0808080a 	.word	0x0808080a
 8002c20:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c22:	2002      	movs	r0, #2
}
 8002c24:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c26:	2005      	movs	r0, #5
        break;
 8002c28:	e7fc      	b.n	8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c2c:	2170      	movs	r1, #112	@ 0x70
 8002c2e:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c30:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c32:	f025 fdd9 	bl	80287e8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c36:	2000      	movs	r0, #0
 8002c38:	e7f4      	b.n	8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c3a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c3c:	e7f2      	b.n	8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c3e:	bf00      	nop
 8002c40:	0802a091 	.word	0x0802a091
 8002c44:	0802a164 	.word	0x0802a164
 8002c48:	0802a0f7 	.word	0x0802a0f7

08002c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c50:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c52:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c54:	4638      	mov	r0, r7
 8002c56:	f7ff ffd9 	bl	8002c0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c5a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c5e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c60:	4628      	mov	r0, r5
 8002c62:	f7ff ffd3 	bl	8002c0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c66:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f7ff ff7f 	bl	8002b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c6e:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c72:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c76:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c7a:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c7c:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c7e:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c80:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c82:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c84:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c86:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c8a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c90:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c96:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c9a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c9c:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c9e:	f8d9 4000 	ldr.w	r4, [r9]
 8002ca2:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002ca6:	2c80      	cmp	r4, #128	@ 0x80
 8002ca8:	d022      	beq.n	8002cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002caa:	d80f      	bhi.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002cac:	2c20      	cmp	r4, #32
 8002cae:	d066      	beq.n	8002d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cb0:	2c40      	cmp	r4, #64	@ 0x40
 8002cb2:	d064      	beq.n	8002d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002cb4:	2c04      	cmp	r4, #4
 8002cb6:	d05c      	beq.n	8002d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002cbc:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cbe:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cc0:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cc4:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002cc6:	d060      	beq.n	8002d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002cc8:	4a32      	ldr	r2, [pc, #200]	@ (8002d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002cca:	e03f      	b.n	8002d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ccc:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cd0:	d004      	beq.n	8002cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cd2:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cd6:	d1ef      	bne.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd8:	482f      	ldr	r0, [pc, #188]	@ (8002d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cda:	e000      	b.n	8002cde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cdc:	482f      	ldr	r0, [pc, #188]	@ (8002d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cde:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002ce2:	61da      	str	r2, [r3, #28]
 8002ce4:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ce8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cea:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cec:	6159      	str	r1, [r3, #20]
 8002cee:	e02c      	b.n	8002d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cf0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cf4:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cf8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cfc:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cfe:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d00:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002d02:	1d21      	adds	r1, r4, #4
 8002d04:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002d06:	7821      	ldrb	r1, [r4, #0]
 8002d08:	b141      	cbz	r1, 8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002d0a:	2901      	cmp	r1, #1
 8002d0c:	d021      	beq.n	8002d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002d0e:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002d10:	f240 110b 	movw	r1, #267	@ 0x10b
 8002d14:	4a23      	ldr	r2, [pc, #140]	@ (8002da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002d16:	4824      	ldr	r0, [pc, #144]	@ (8002da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002d18:	f025 fd66 	bl	80287e8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	8861      	ldrh	r1, [r4, #2]
 8002d20:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d24:	3901      	subs	r1, #1
 8002d26:	f022 0210 	bic.w	r2, r2, #16
 8002d2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d2e:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d30:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d32:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d34:	69d9      	ldr	r1, [r3, #28]
 8002d36:	f041 0120 	orr.w	r1, r1, #32
 8002d3a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d3c:	69d9      	ldr	r1, [r3, #28]
 8002d3e:	0689      	lsls	r1, r1, #26
 8002d40:	d4fc      	bmi.n	8002d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d42:	2110      	movs	r1, #16
 8002d44:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	d0be      	beq.n	8002cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d4a:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d52:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d54:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d56:	8860      	ldrh	r0, [r4, #2]
 8002d58:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d5c:	bf18      	it	ne
 8002d5e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d60:	3801      	subs	r0, #1
 8002d62:	f021 0110 	bic.w	r1, r1, #16
 8002d66:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d6a:	f041 0110 	orr.w	r1, r1, #16
 8002d6e:	61d9      	str	r1, [r3, #28]
                break;
 8002d70:	e7df      	b.n	8002d32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d72:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d7a:	61da      	str	r2, [r3, #28]
 8002d7c:	e7b5      	b.n	8002cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d7e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d82:	4b03      	ldr	r3, [pc, #12]	@ (8002d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d84:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d88:	e7f7      	b.n	8002d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d8a:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d8e:	e7dd      	b.n	8002d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d90:	52001000 	.word	0x52001000
 8002d94:	00012301 	.word	0x00012301
 8002d98:	00020009 	.word	0x00020009
 8002d9c:	0002000a 	.word	0x0002000a
 8002da0:	0802a1ae 	.word	0x0802a1ae
 8002da4:	0802a1c8 	.word	0x0802a1c8
 8002da8:	0802a0f7 	.word	0x0802a0f7
 8002dac:	00022301 	.word	0x00022301

08002db0 <DMA2D_XferCpltCallback>:
 8002db0:	4b02      	ldr	r3, [pc, #8]	@ (8002dbc <DMA2D_XferCpltCallback+0xc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4718      	bx	r3
 8002dbc:	24028520 	.word	0x24028520

08002dc0 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002dc0:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002dc8:	b9d3      	cbnz	r3, 8002e00 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002dca:	6803      	ldr	r3, [r0, #0]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dd0:	4919      	ldr	r1, [pc, #100]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e3c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dd4:	680b      	ldr	r3, [r1, #0]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d12a      	bne.n	8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dde:	4818      	ldr	r0, [pc, #96]	@ (8002e40 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002de0:	6800      	ldr	r0, [r0, #0]
 8002de2:	bb38      	cbnz	r0, 8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de4:	7a20      	ldrb	r0, [r4, #8]
 8002de6:	bb28      	cbnz	r0, 8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002de8:	7aa0      	ldrb	r0, [r4, #10]
 8002dea:	bb18      	cbnz	r0, 8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dec:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dee:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002df2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002df4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dfc:	f7ff bd64 	b.w	80028c8 <DMA2D_CopyBuffer>
        if (isRunning)
 8002e00:	7a03      	ldrb	r3, [r0, #8]
 8002e02:	b143      	cbz	r3, 8002e16 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002e04:	2300      	movs	r3, #0
 8002e06:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002e0e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002e12:	f7ff fd9d 	bl	8002950 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002e16:	6860      	ldr	r0, [r4, #4]
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4798      	blx	r3
 8002e1e:	b948      	cbnz	r0, 8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e20:	7a63      	ldrb	r3, [r4, #9]
 8002e22:	b13b      	cbz	r3, 8002e34 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e24:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e26:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e32:	4718      	bx	r3
    }
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	bf00      	nop
 8002e38:	24000798 	.word	0x24000798
 8002e3c:	24000010 	.word	0x24000010
 8002e40:	24000794 	.word	0x24000794

08002e44 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e48:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <_ZN8STM32DMAC1Ev+0x40>)
 8002e4a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	4625      	mov	r5, r4
 8002e50:	2260      	movs	r2, #96	@ 0x60
 8002e52:	6060      	str	r0, [r4, #4]
 8002e54:	7226      	strb	r6, [r4, #8]
 8002e56:	7266      	strb	r6, [r4, #9]
 8002e58:	f845 3b20 	str.w	r3, [r5], #32
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f010 ff87 	bl	8013d70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e62:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e66:	60ee      	str	r6, [r5, #12]
 8002e68:	3524      	adds	r5, #36	@ 0x24
 8002e6a:	429d      	cmp	r5, r3
 8002e6c:	d1fb      	bne.n	8002e66 <_ZN8STM32DMAC1Ev+0x22>
 8002e6e:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e72:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e74:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e78:	f00c fc33 	bl	800f6e2 <osMutexNew>
 8002e7c:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e80:	4620      	mov	r0, r4
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	0802a210 	.word	0x0802a210

08002e88 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	07d2      	lsls	r2, r2, #31
 8002e8e:	d4fc      	bmi.n	8002e8a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e90:	2223      	movs	r2, #35	@ 0x23
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	52001000 	.word	0x52001000

08002e9c <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e9e:	6953      	ldr	r3, [r2, #20]
 8002ea0:	03db      	lsls	r3, r3, #15
 8002ea2:	d511      	bpl.n	8002ec8 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	dd0f      	ble.n	8002ec8 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002ea8:	f000 031f 	and.w	r3, r0, #31
 8002eac:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002eae:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002eb2:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002eb4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002eb8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002eba:	1a0b      	subs	r3, r1, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	dcf9      	bgt.n	8002eb4 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ec4:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002ed0:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002ed2:	4c10      	ldr	r4, [pc, #64]	@ (8002f14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002ed4:	6825      	ldr	r5, [r4, #0]
 8002ed6:	07ed      	lsls	r5, r5, #31
 8002ed8:	d4fc      	bmi.n	8002ed4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eda:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002edc:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002ede:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ee0:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ee2:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ee6:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002eea:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eec:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eee:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ef0:	d00c      	beq.n	8002f0c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ef2:	4909      	ldr	r1, [pc, #36]	@ (8002f18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ef4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ef8:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002efa:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002efe:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002f02:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002f04:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002f06:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f08:	6023      	str	r3, [r4, #0]
    }
}
 8002f0a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f0c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002f10:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f12:	e7f9      	b.n	8002f08 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002f14:	52001000 	.word	0x52001000
 8002f18:	00010009 	.word	0x00010009
 8002f1c:	00020001 	.word	0x00020001
 8002f20:	00030001 	.word	0x00030001

08002f24 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f24:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f26:	4c0e      	ldr	r4, [pc, #56]	@ (8002f60 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f28:	6825      	ldr	r5, [r4, #0]
 8002f2a:	07ed      	lsls	r5, r5, #31
 8002f2c:	d4fc      	bmi.n	8002f28 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f2e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f30:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f32:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f34:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f36:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f3a:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f3e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f40:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f42:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f44:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f46:	d007      	beq.n	8002f58 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f48:	4a06      	ldr	r2, [pc, #24]	@ (8002f64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f4a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f4e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f50:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f52:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f54:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f56:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f5a:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f5c:	6025      	str	r5, [r4, #0]
}
 8002f5e:	e7fa      	b.n	8002f56 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f60:	52001000 	.word	0x52001000
 8002f64:	00020001 	.word	0x00020001
 8002f68:	ff020001 	.word	0xff020001

08002f6c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f6c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f6e:	4c0b      	ldr	r4, [pc, #44]	@ (8002f9c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f70:	6825      	ldr	r5, [r4, #0]
 8002f72:	07ed      	lsls	r5, r5, #31
 8002f74:	d4fc      	bmi.n	8002f70 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f76:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f78:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f7a:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f7c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f7e:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f84:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f86:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f88:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f8a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f8c:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f8e:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f92:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f94:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f96:	6023      	str	r3, [r4, #0]
}
 8002f98:	bd30      	pop	{r4, r5, pc}
 8002f9a:	bf00      	nop
 8002f9c:	52001000 	.word	0x52001000
 8002fa0:	00020001 	.word	0x00020001

08002fa4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	4770      	bx	lr

08002fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002fa8:	200c      	movs	r0, #12
 8002faa:	4770      	bx	lr

08002fac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002fac:	230c      	movs	r3, #12
 8002fae:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fb2:	3008      	adds	r0, #8
 8002fb4:	4770      	bx	lr

08002fb6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fbc:	3008      	adds	r0, #8
 8002fbe:	4770      	bx	lr

08002fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	4770      	bx	lr

08002fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc4:	f243 407c 	movw	r0, #13436	@ 0x347c
 8002fc8:	4770      	bx	lr

08002fca <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fca:	f243 437c 	movw	r3, #13436	@ 0x347c
 8002fce:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fd6:	f243 437c 	movw	r3, #13436	@ 0x347c
 8002fda:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fde:	3008      	adds	r0, #8
 8002fe0:	4770      	bx	lr

08002fe2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	4770      	bx	lr

08002fe6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fe6:	2010      	movs	r0, #16
 8002fe8:	4770      	bx	lr

08002fea <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fea:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fee:	3008      	adds	r0, #8
 8002ff0:	4770      	bx	lr

08002ff2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ff2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002ff6:	3008      	adds	r0, #8
 8002ff8:	4770      	bx	lr

08002ffa <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenScreenNoTransition();
 8002ffa:	4608      	mov	r0, r1
 8002ffc:	f004 bc1c 	b.w	8007838 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>

08003000 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003002:	b510      	push	{r4, lr}
 8003004:	4604      	mov	r4, r0
 8003006:	6003      	str	r3, [r0, #0]
 8003008:	f00e fce5 	bl	80119d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800300c:	4620      	mov	r0, r4
 800300e:	bd10      	pop	{r4, pc}
 8003010:	0802a2c8 	.word	0x0802a2c8

08003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
 8003018:	f7ff fff2 	bl	8003000 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800301c:	2114      	movs	r1, #20
 800301e:	4620      	mov	r0, r4
 8003020:	f025 f86a 	bl	80280f8 <_ZdlPvj>
 8003024:	4620      	mov	r0, r4
 8003026:	bd10      	pop	{r4, pc}

08003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
 800302e:	6003      	str	r3, [r0, #0]
 8003030:	f00e fcd1 	bl	80119d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003034:	4620      	mov	r0, r4
 8003036:	bd10      	pop	{r4, pc}
 8003038:	0802a294 	.word	0x0802a294

0800303c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
 8003040:	f7ff fff2 	bl	8003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003044:	f243 4184 	movw	r1, #13444	@ 0x3484
 8003048:	4620      	mov	r0, r4
 800304a:	f025 f855 	bl	80280f8 <_ZdlPvj>
 800304e:	4620      	mov	r0, r4
 8003050:	bd10      	pop	{r4, pc}
	...

08003054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003056:	b510      	push	{r4, lr}
 8003058:	4604      	mov	r4, r0
 800305a:	6003      	str	r3, [r0, #0]
 800305c:	f00e fcbb 	bl	80119d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003060:	4620      	mov	r0, r4
 8003062:	bd10      	pop	{r4, pc}
 8003064:	0802a260 	.word	0x0802a260

08003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	f7ff fff2 	bl	8003054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003070:	2118      	movs	r1, #24
 8003072:	4620      	mov	r0, r4
 8003074:	f025 f840 	bl	80280f8 <_ZdlPvj>
 8003078:	4620      	mov	r0, r4
 800307a:	bd10      	pop	{r4, pc}

0800307c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <_ZN12FrontendHeapD1Ev+0x28>)
 800307e:	b510      	push	{r4, lr}
 8003080:	4604      	mov	r4, r0
 8003082:	6003      	str	r3, [r0, #0]
 8003084:	f500 5052 	add.w	r0, r0, #13440	@ 0x3480
 8003088:	3030      	adds	r0, #48	@ 0x30
 800308a:	f7ff ffb9 	bl	8003000 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800308e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003092:	f7ff ffc9 	bl	8003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003096:	f104 0014 	add.w	r0, r4, #20
 800309a:	f7ff ffdb 	bl	8003054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800309e:	4620      	mov	r0, r4
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	bf00      	nop
 80030a4:	0802a2fc 	.word	0x0802a2fc

080030a8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80030a8:	b508      	push	{r3, lr}
 80030aa:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <__tcf_0+0xc>)
 80030ac:	f7ff ffe6 	bl	800307c <_ZN12FrontendHeapD1Ev>
 80030b0:	bd08      	pop	{r3, pc}
 80030b2:	bf00      	nop
 80030b4:	2400ac8c 	.word	0x2400ac8c

080030b8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	f7ff ffde 	bl	800307c <_ZN12FrontendHeapD1Ev>
 80030c0:	f243 6124 	movw	r1, #13860	@ 0x3624
 80030c4:	4620      	mov	r0, r4
 80030c6:	f025 f817 	bl	80280f8 <_ZdlPvj>
 80030ca:	4620      	mov	r0, r4
 80030cc:	bd10      	pop	{r4, pc}
	...

080030d0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030d4:	f000 fc5c 	bl	8003990 <_ZN14BitmapDatabase11getInstanceEv>
 80030d8:	2400      	movs	r4, #0
 80030da:	4605      	mov	r5, r0
 80030dc:	f000 fc5c 	bl	8003998 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030e0:	4623      	mov	r3, r4
 80030e2:	4601      	mov	r1, r0
 80030e4:	4622      	mov	r2, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	9400      	str	r4, [sp, #0]
 80030ea:	f01a f9d7 	bl	801d49c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <touchgfx_init+0xbc>)
 80030f0:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030f2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030f4:	4d27      	ldr	r5, [pc, #156]	@ (8003194 <touchgfx_init+0xc4>)
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f005 fa46 	bl	8008588 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030fc:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <touchgfx_init+0xc8>)
 80030fe:	4a27      	ldr	r2, [pc, #156]	@ (800319c <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003100:	4827      	ldr	r0, [pc, #156]	@ (80031a0 <touchgfx_init+0xd0>)
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	f01a f876 	bl	801d1f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	f3bf 8f5b 	dmb	ish
 800310e:	07db      	lsls	r3, r3, #31
 8003110:	d436      	bmi.n	8003180 <touchgfx_init+0xb0>
 8003112:	4628      	mov	r0, r5
 8003114:	f024 fff2 	bl	80280fc <__cxa_guard_acquire>
 8003118:	b390      	cbz	r0, 8003180 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800311a:	4c22      	ldr	r4, [pc, #136]	@ (80031a4 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 800311c:	4f22      	ldr	r7, [pc, #136]	@ (80031a8 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003120:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003124:	f107 0618 	add.w	r6, r7, #24
          screenStorage(scr),
 8003128:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800312c:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800312e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003130:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003134:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003136:	6126      	str	r6, [r4, #16]
 8003138:	f00e fc4e 	bl	80119d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800313c:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <touchgfx_init+0xe0>)
 800313e:	4640      	mov	r0, r8
 8003140:	6163      	str	r3, [r4, #20]
 8003142:	f00e fc49 	bl	80119d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <touchgfx_init+0xe4>)
 8003148:	4638      	mov	r0, r7
 800314a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800314c:	f00e fc44 	bl	80119d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003150:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003154:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <touchgfx_init+0xe8>)
 8003156:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
 800315a:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 800315e:	f005 fc09 	bl	8008974 <_ZN5ModelC1Ev>
 8003162:	4622      	mov	r2, r4
 8003164:	f107 0114 	add.w	r1, r7, #20
 8003168:	4630      	mov	r0, r6
 800316a:	f005 fbbd 	bl	80088e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800316e:	4630      	mov	r0, r6
 8003170:	f004 fb62 	bl	8007838 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003174:	4811      	ldr	r0, [pc, #68]	@ (80031bc <touchgfx_init+0xec>)
 8003176:	f025 fb55 	bl	8028824 <atexit>
 800317a:	4628      	mov	r0, r5
 800317c:	f024 ffca 	bl	8028114 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003180:	480f      	ldr	r0, [pc, #60]	@ (80031c0 <touchgfx_init+0xf0>)
}
 8003182:	b002      	add	sp, #8
 8003184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003188:	f7fe bcd8 	b.w	8001b3c <_ZN11TouchGFXHAL10initializeEv>
 800318c:	24028584 	.word	0x24028584
 8003190:	24009e50 	.word	0x24009e50
 8003194:	2400ac88 	.word	0x2400ac88
 8003198:	24009e70 	.word	0x24009e70
 800319c:	24009e54 	.word	0x24009e54
 80031a0:	24000034 	.word	0x24000034
 80031a4:	2400ac8c 	.word	0x2400ac8c
 80031a8:	2400e13c 	.word	0x2400e13c
 80031ac:	0802a2fc 	.word	0x0802a2fc
 80031b0:	0802a260 	.word	0x0802a260
 80031b4:	0802a294 	.word	0x0802a294
 80031b8:	0802a2c8 	.word	0x0802a2c8
 80031bc:	080030a9 	.word	0x080030a9
 80031c0:	24009dd4 	.word	0x24009dd4

080031c4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031c4:	4770      	bx	lr
	...

080031c8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031c8:	4801      	ldr	r0, [pc, #4]	@ (80031d0 <touchgfx_taskEntry+0x8>)
 80031ca:	f7fe bcc9 	b.w	8001b60 <_ZN11TouchGFXHAL9taskEntryEv>
 80031ce:	bf00      	nop
 80031d0:	24009dd4 	.word	0x24009dd4

080031d4 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031d6:	4c0e      	ldr	r4, [pc, #56]	@ (8003210 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031da:	4e0f      	ldr	r6, [pc, #60]	@ (8003218 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031dc:	4620      	mov	r0, r4
static LCD24bpp display;
 80031de:	4d0f      	ldr	r5, [pc, #60]	@ (800321c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031e0:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031e2:	f7ff fe2f 	bl	8002e44 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031e6:	4628      	mov	r0, r5
 80031e8:	f01d fffa 	bl	80211e0 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031ee:	f017 fd37 	bl	801ac60 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031f2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031f6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031fa:	4621      	mov	r1, r4
 80031fc:	4809      	ldr	r0, [pc, #36]	@ (8003224 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031fe:	e9cd 3200 	strd	r3, r2, [sp]
 8003202:	4633      	mov	r3, r6
 8003204:	462a      	mov	r2, r5
 8003206:	f7fe fd3f 	bl	8001c88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800320a:	b002      	add	sp, #8
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	bf00      	nop
 8003210:	24009edc 	.word	0x24009edc
 8003214:	08029a18 	.word	0x08029a18
 8003218:	2400ac84 	.word	0x2400ac84
 800321c:	24009e70 	.word	0x24009e70
 8003220:	24009e54 	.word	0x24009e54
 8003224:	24009dd4 	.word	0x24009dd4

08003228 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003228:	4801      	ldr	r0, [pc, #4]	@ (8003230 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800322a:	f7ff bc57 	b.w	8002adc <_ZN8STM32DMAD1Ev>
 800322e:	bf00      	nop
 8003230:	24009edc 	.word	0x24009edc

08003234 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003234:	2000      	movs	r0, #0
 8003236:	4770      	bx	lr

08003238 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003238:	8081      	strh	r1, [r0, #4]
    }
 800323a:	4770      	bx	lr

0800323c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800323c:	80c1      	strh	r1, [r0, #6]
    }
 800323e:	4770      	bx	lr

08003240 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003240:	8101      	strh	r1, [r0, #8]
    }
 8003242:	4770      	bx	lr

08003244 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003244:	8141      	strh	r1, [r0, #10]
    }
 8003246:	4770      	bx	lr

08003248 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003248:	4770      	bx	lr

0800324a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800324a:	4770      	bx	lr

0800324c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800324c:	4770      	bx	lr

0800324e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800324e:	4770      	bx	lr

08003250 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003250:	4770      	bx	lr

08003252 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003252:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003254:	88c4      	ldrh	r4, [r0, #6]
 8003256:	6803      	ldr	r3, [r0, #0]
 8003258:	1b12      	subs	r2, r2, r4
 800325a:	8884      	ldrh	r4, [r0, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	1b09      	subs	r1, r1, r4
 8003260:	b212      	sxth	r2, r2
    }
 8003262:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003266:	b209      	sxth	r1, r1
 8003268:	4718      	bx	r3

0800326a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800326a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800326e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800327a:	6010      	str	r0, [r2, #0]
    }
 800327c:	4770      	bx	lr

0800327e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800327e:	2000      	movs	r0, #0
 8003280:	4770      	bx	lr

08003282 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003282:	888b      	ldrh	r3, [r1, #4]
 8003284:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003286:	2001      	movs	r0, #1
 8003288:	4770      	bx	lr

0800328a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800328a:	4770      	bx	lr

0800328c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800328c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003290:	4770      	bx	lr

08003292 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003292:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003296:	4770      	bx	lr

08003298 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003298:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800329a:	b510      	push	{r4, lr}
        return rect.width;
 800329c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80032a0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80032a4:	8002      	strh	r2, [r0, #0]
 80032a6:	8042      	strh	r2, [r0, #2]
 80032a8:	8084      	strh	r4, [r0, #4]
 80032aa:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80032ac:	bd10      	pop	{r4, pc}

080032ae <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80032ae:	2200      	movs	r2, #0
 80032b0:	8002      	strh	r2, [r0, #0]
 80032b2:	8042      	strh	r2, [r0, #2]
 80032b4:	8082      	strh	r2, [r0, #4]
 80032b6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80032b8:	4770      	bx	lr

080032ba <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80032ba:	7701      	strb	r1, [r0, #28]
    }
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80032be:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80032c2:	4770      	bx	lr

080032c4 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032c4:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032c8:	4770      	bx	lr

080032ca <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032ca:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032ce:	4770      	bx	lr

080032d0 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032d0:	2001      	movs	r0, #1
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032d4:	3098      	adds	r0, #152	@ 0x98
 80032d6:	4770      	bx	lr

080032d8 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032d8:	308c      	adds	r0, #140	@ 0x8c
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032dc:	3084      	adds	r0, #132	@ 0x84
 80032de:	4770      	bx	lr

080032e0 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032e0:	4770      	bx	lr
	...

080032e4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	4b02      	ldr	r3, [pc, #8]	@ (80032f0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032e6:	2290      	movs	r2, #144	@ 0x90
 80032e8:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032f4:	4770      	bx	lr

080032f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032f6:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032f8:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032fc:	4770      	bx	lr

080032fe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032fe:	4770      	bx	lr

08003300 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003300:	4770      	bx	lr

08003302 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003302:	4770      	bx	lr

08003304 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003304:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003308:	4611      	mov	r1, r2
 800330a:	6840      	ldr	r0, [r0, #4]
 800330c:	6803      	ldr	r3, [r0, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4718      	bx	r3

08003312 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003312:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003316:	4770      	bx	lr

08003318 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	212c      	movs	r1, #44	@ 0x2c
 800331e:	f024 feeb 	bl	80280f8 <_ZdlPvj>
 8003322:	4620      	mov	r0, r4
 8003324:	bd10      	pop	{r4, pc}

08003326 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003326:	b510      	push	{r4, lr}
 8003328:	4604      	mov	r4, r0
 800332a:	2148      	movs	r1, #72	@ 0x48
 800332c:	f024 fee4 	bl	80280f8 <_ZdlPvj>
 8003330:	4620      	mov	r0, r4
 8003332:	bd10      	pop	{r4, pc}

08003334 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003334:	b510      	push	{r4, lr}
 8003336:	4604      	mov	r4, r0
 8003338:	21bc      	movs	r1, #188	@ 0xbc
 800333a:	f024 fedd 	bl	80280f8 <_ZdlPvj>
 800333e:	4620      	mov	r0, r4
 8003340:	bd10      	pop	{r4, pc}
	...

08003344 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4604      	mov	r4, r0
    HAL::initialize();
 8003348:	f00f fe75 	bl	8013036 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003350:	f016 fb0e 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8003354:	4601      	mov	r1, r0
 8003356:	4620      	mov	r0, r4
 8003358:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	4908      	ldr	r1, [pc, #32]	@ (8003380 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800335e:	4620      	mov	r0, r4
 8003360:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003364:	2300      	movs	r3, #0
 8003366:	461a      	mov	r2, r3
 8003368:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800336a:	6863      	ldr	r3, [r4, #4]
 800336c:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800336e:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003372:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003374:	4a05      	ldr	r2, [pc, #20]	@ (800338c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	d0119400 	.word	0xd0119400
 8003384:	2400e3b8 	.word	0x2400e3b8
 8003388:	2400e370 	.word	0x2400e370
 800338c:	d0000000 	.word	0xd0000000
 8003390:	00119400 	.word	0x00119400

08003394 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800339a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	f00c f9d4 	bl	800f74c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80033a4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80033a6:	f00c f9f4 	bl	800f792 <osMutexRelease>
        streams[handle].isActive = false;
 80033aa:	2324      	movs	r3, #36	@ 0x24
 80033ac:	fb03 4505 	mla	r5, r3, r5, r4
 80033b0:	2300      	movs	r3, #0
 80033b2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80033b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80033ba:	b90b      	cbnz	r3, 80033c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80033bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033be:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80033c0:	bd38      	pop	{r3, r4, r5, pc}

080033c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80033c2:	f00f bde8 	b.w	8012f96 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033c6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033c6:	f00f bf4a 	b.w	801325e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033ca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033ce:	b112      	cbz	r2, 80033d6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033d0:	6803      	ldr	r3, [r0, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4718      	bx	r3
    }
 80033d6:	4770      	bx	lr

080033d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033d8:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033da:	6953      	ldr	r3, [r2, #20]
 80033dc:	03db      	lsls	r3, r3, #15
{
 80033de:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033e0:	d51e      	bpl.n	8003420 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033e8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033f0:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033f4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033f8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033fc:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033fe:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003402:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003404:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003408:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800340a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800340e:	d2f9      	bcs.n	8003404 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003410:	3b20      	subs	r3, #32
 8003412:	f113 0f20 	cmn.w	r3, #32
 8003416:	d1f2      	bne.n	80033fe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800341c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003420:	bd70      	pop	{r4, r5, r6, pc}
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003428:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800342a:	b131      	cbz	r1, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800342c:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800342e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003432:	4a04      	ldr	r2, [pc, #16]	@ (8003444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003434:	4804      	ldr	r0, [pc, #16]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003436:	f025 f9d7 	bl	80287e8 <__assert_func>
    }
 800343a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800343e:	bd08      	pop	{r3, pc}
 8003440:	0802a308 	.word	0x0802a308
 8003444:	0802a31c 	.word	0x0802a31c
 8003448:	0802a4a6 	.word	0x0802a4a6

0800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 800344c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800344e:	b131      	cbz	r1, 800345e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003452:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003456:	4a06      	ldr	r2, [pc, #24]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003458:	4806      	ldr	r0, [pc, #24]	@ (8003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800345a:	f025 f9c5 	bl	80287e8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800345e:	6840      	ldr	r0, [r0, #4]
 8003460:	4611      	mov	r1, r2
 8003462:	6803      	ldr	r3, [r0, #0]
    }
 8003464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4718      	bx	r3
 800346c:	0802a308 	.word	0x0802a308
 8003470:	0802a4f0 	.word	0x0802a4f0
 8003474:	0802a4a6 	.word	0x0802a4a6

08003478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003478:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800347a:	b129      	cbz	r1, 8003488 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800347e:	2179      	movs	r1, #121	@ 0x79
 8003480:	4a03      	ldr	r2, [pc, #12]	@ (8003490 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003482:	4804      	ldr	r0, [pc, #16]	@ (8003494 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003484:	f025 f9b0 	bl	80287e8 <__assert_func>
    }
 8003488:	68c0      	ldr	r0, [r0, #12]
 800348a:	bd08      	pop	{r3, pc}
 800348c:	0802a308 	.word	0x0802a308
 8003490:	0802a69e 	.word	0x0802a69e
 8003494:	0802a4a6 	.word	0x0802a4a6

08003498 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003498:	b510      	push	{r4, lr}
 800349a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800349c:	b129      	cbz	r1, 80034aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80034a0:	21a2      	movs	r1, #162	@ 0xa2
 80034a2:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80034a4:	4819      	ldr	r0, [pc, #100]	@ (800350c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80034a6:	f025 f99f 	bl	80287e8 <__assert_func>
        switch (cmd)
 80034aa:	2a05      	cmp	r2, #5
 80034ac:	d815      	bhi.n	80034da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034ae:	e8df f002 	tbb	[pc, r2]
 80034b2:	1103      	.short	0x1103
 80034b4:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80034b8:	6840      	ldr	r0, [r0, #4]
 80034ba:	6803      	ldr	r3, [r0, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	4798      	blx	r3
 80034c0:	b158      	cbz	r0, 80034da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034c8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034cc:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034d2:	e002      	b.n	80034da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034da:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034dc:	6203      	str	r3, [r0, #32]
 80034de:	e7f5      	b.n	80034cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034e0:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034e8:	e7f0      	b.n	80034cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	6203      	str	r3, [r0, #32]
            break;
 80034f4:	e7f1      	b.n	80034da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034f6:	3b00      	subs	r3, #0
 80034f8:	bf18      	it	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003500:	e7eb      	b.n	80034da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003502:	bf00      	nop
 8003504:	0802a308 	.word	0x0802a308
 8003508:	0802a853 	.word	0x0802a853
 800350c:	0802a4a6 	.word	0x0802a4a6

08003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003510:	b510      	push	{r4, lr}
 8003512:	460c      	mov	r4, r1
 8003514:	4611      	mov	r1, r2
 8003516:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003518:	b12c      	cbz	r4, 8003526 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800351c:	2190      	movs	r1, #144	@ 0x90
 800351e:	4a06      	ldr	r2, [pc, #24]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003520:	4806      	ldr	r0, [pc, #24]	@ (800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003522:	f025 f961 	bl	80287e8 <__assert_func>
        stream.frameNumber = 0;
 8003526:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003528:	6840      	ldr	r0, [r0, #4]
 800352a:	6803      	ldr	r3, [r0, #0]
    }
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4718      	bx	r3
 8003534:	0802a308 	.word	0x0802a308
 8003538:	0802aa27 	.word	0x0802aa27
 800353c:	0802a4a6 	.word	0x0802a4a6

08003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003540:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003542:	b129      	cbz	r1, 8003550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003546:	2182      	movs	r1, #130	@ 0x82
 8003548:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800354a:	4806      	ldr	r0, [pc, #24]	@ (8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 800354c:	f025 f94c 	bl	80287e8 <__assert_func>
        stream.tickCount = 0;
 8003550:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003554:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003558:	bd08      	pop	{r3, pc}
 800355a:	bf00      	nop
 800355c:	0802a308 	.word	0x0802a308
 8003560:	0802ac02 	.word	0x0802ac02
 8003564:	0802a4a6 	.word	0x0802a4a6

08003568 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003568:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800356c:	b510      	push	{r4, lr}
 800356e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003570:	b153      	cbz	r3, 8003588 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003572:	f04f 31ff 	mov.w	r1, #4294967295
 8003576:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003578:	f00c f8e8 	bl	800f74c <osMutexAcquire>
            firstDrawThisFrame = false;
 800357c:	2300      	movs	r3, #0
 800357e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003582:	2301      	movs	r3, #1
 8003584:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003588:	bd10      	pop	{r4, pc}

0800358a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800358a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800358e:	b11a      	cbz	r2, 8003598 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003590:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003594:	b102      	cbz	r2, 8003598 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003596:	6018      	str	r0, [r3, #0]
        }
    }
 8003598:	4770      	bx	lr
	...

0800359c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800359c:	b510      	push	{r4, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80035a2:	b129      	cbz	r1, 80035b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80035a4:	4b13      	ldr	r3, [pc, #76]	@ (80035f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80035a6:	21d0      	movs	r1, #208	@ 0xd0
 80035a8:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80035aa:	4814      	ldr	r0, [pc, #80]	@ (80035fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80035ac:	f025 f91c 	bl	80287e8 <__assert_func>
        if (stream.isPlaying)
 80035b0:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035b4:	b133      	cbz	r3, 80035c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80035be:	6963      	ldr	r3, [r4, #20]
 80035c0:	4413      	add	r3, r2
 80035c2:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035c4:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035c8:	b90b      	cbnz	r3, 80035ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035ca:	2001      	movs	r0, #1
    }
 80035cc:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035d8:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035de:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d1f1      	bne.n	80035ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035e6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ee      	bne.n	80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035ee:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035f2:	e7eb      	b.n	80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035f4:	0802a308 	.word	0x0802a308
 80035f8:	0802adbe 	.word	0x0802adbe
 80035fc:	0802a4a6 	.word	0x0802a4a6
 8003600:	24028520 	.word	0x24028520

08003604 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003604:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003606:	4c1a      	ldr	r4, [pc, #104]	@ (8003670 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003608:	4605      	mov	r5, r0
    HAL::endFrame();
 800360a:	f00f fd07 	bl	801301c <_ZN8touchgfx3HAL8endFrameEv>
 800360e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003612:	b913      	cbnz	r3, 800361a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003614:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003618:	b1ab      	cbz	r3, 8003646 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800361a:	69e1      	ldr	r1, [r4, #28]
 800361c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003620:	4353      	muls	r3, r2
 8003622:	6922      	ldr	r2, [r4, #16]
 8003624:	434a      	muls	r2, r1
 8003626:	4293      	cmp	r3, r2
 8003628:	d30d      	bcc.n	8003646 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800362a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800362e:	b138      	cbz	r0, 8003640 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003636:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003638:	bf98      	it	ls
 800363a:	f102 32ff 	addls.w	r2, r2, #4294967295
 800363e:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003640:	2301      	movs	r3, #1
 8003642:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003646:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003648:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800364a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800364e:	f00c f935 	bl	800f8bc <osSemaphoreRelease>
        if (uiHasMutex)
 8003652:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003656:	b12b      	cbz	r3, 8003664 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003658:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800365a:	f00c f89a 	bl	800f792 <osMutexRelease>
            uiHasMutex = false;
 800365e:	2300      	movs	r3, #0
 8003660:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003664:	6868      	ldr	r0, [r5, #4]
 8003666:	6803      	ldr	r3, [r0, #0]
}
 8003668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4718      	bx	r3
 8003670:	2400e370 	.word	0x2400e370

08003674 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003676:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800367a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800367e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003682:	f3bf 8f6f 	isb	sy
}
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100

0800368c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368c:	4b02      	ldr	r3, [pc, #8]	@ (8003698 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800368e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000e100 	.word	0xe000e100

0800369c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80036a0:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80036a4:	b9d8      	cbnz	r0, 80036de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80036a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036aa:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80036ac:	2501      	movs	r5, #1
                streams[i] = Stream();
 80036ae:	60d8      	str	r0, [r3, #12]
 80036b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036b2:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80036b6:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036b8:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80036bc:	6158      	str	r0, [r3, #20]
 80036be:	6198      	str	r0, [r3, #24]
 80036c0:	61d8      	str	r0, [r3, #28]
 80036c2:	6218      	str	r0, [r3, #32]
 80036c4:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036c6:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036c8:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036cc:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036d0:	443c      	add	r4, r7
 80036d2:	42a2      	cmp	r2, r4
 80036d4:	d90a      	bls.n	80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036d8:	2152      	movs	r1, #82	@ 0x52
 80036da:	4a0b      	ldr	r2, [pc, #44]	@ (8003708 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036dc:	e003      	b.n	80036e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036e0:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036e6:	480b      	ldr	r0, [pc, #44]	@ (8003714 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036e8:	f025 f87e 	bl	80287e8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036ec:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036f0:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036f4:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036f8:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036fa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036fe:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003700:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003704:	0802b116 	.word	0x0802b116
 8003708:	0802b151 	.word	0x0802b151
 800370c:	0802af5f 	.word	0x0802af5f
 8003710:	0802af8f 	.word	0x0802af8f
 8003714:	0802a4a6 	.word	0x0802a4a6

08003718 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003718:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800371a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800371c:	4e12      	ldr	r6, [pc, #72]	@ (8003768 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800371e:	4604      	mov	r4, r0
 8003720:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003722:	4b12      	ldr	r3, [pc, #72]	@ (800376c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003724:	6003      	str	r3, [r0, #0]
 8003726:	6833      	ldr	r3, [r6, #0]
 8003728:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800372c:	b10a      	cbz	r2, 8003732 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800372e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003730:	b900      	cbnz	r0, 8003734 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003732:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003734:	6803      	ldr	r3, [r0, #0]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	4798      	blx	r3
 800373a:	1e43      	subs	r3, r0, #1
 800373c:	425d      	negs	r5, r3
 800373e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003744:	b130      	cbz	r0, 8003754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003746:	6803      	ldr	r3, [r0, #0]
 8003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374a:	4798      	blx	r3
 800374c:	2801      	cmp	r0, #1
 800374e:	bf08      	it	eq
 8003750:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003754:	b92d      	cbnz	r5, 8003762 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003758:	2127      	movs	r1, #39	@ 0x27
 800375a:	4a06      	ldr	r2, [pc, #24]	@ (8003774 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 800375c:	4806      	ldr	r0, [pc, #24]	@ (8003778 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800375e:	f025 f843 	bl	80287e8 <__assert_func>
    }
 8003762:	4620      	mov	r0, r4
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	bf00      	nop
 8003768:	24028520 	.word	0x24028520
 800376c:	0802b404 	.word	0x0802b404
 8003770:	0802b2f4 	.word	0x0802b2f4
 8003774:	0802b352 	.word	0x0802b352
 8003778:	0802b38b 	.word	0x0802b38b

0800377c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 800377c:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800377e:	4e24      	ldr	r6, [pc, #144]	@ (8003810 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003780:	6835      	ldr	r5, [r6, #0]
 8003782:	f3bf 8f5b 	dmb	ish
 8003786:	f015 0501 	ands.w	r5, r5, #1
 800378a:	d13f      	bne.n	800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 800378c:	4630      	mov	r0, r6
 800378e:	f024 fcb5 	bl	80280fc <__cxa_guard_acquire>
 8003792:	2800      	cmp	r0, #0
 8003794:	d03a      	beq.n	800380c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003796:	4c1f      	ldr	r4, [pc, #124]	@ (8003814 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 800379a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800379e:	6125      	str	r5, [r4, #16]
 80037a0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80037a2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80037a4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80037a6:	e9c4 3500 	strd	r3, r5, [r4]
 80037aa:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80037ae:	f017 fcb6 	bl	801b11e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80037b2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037b6:	f011 fe61 	bl	801547c <_ZN8touchgfx12CanvasWidgetC1Ev>
 80037ba:	4b18      	ldr	r3, [pc, #96]	@ (800381c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037bc:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80037be:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037c0:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 80037c2:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037c6:	f7ff ffa7 	bl	8003718 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037ca:	4b16      	ldr	r3, [pc, #88]	@ (8003824 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037cc:	4816      	ldr	r0, [pc, #88]	@ (8003828 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037ce:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037d2:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037d4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037d8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037dc:	2364      	movs	r3, #100	@ 0x64
 80037de:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037e2:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037e6:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037f0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037f4:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037f8:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037fe:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003802:	f025 f80f 	bl	8028824 <atexit>
 8003806:	4630      	mov	r0, r6
 8003808:	f024 fc84 	bl	8028114 <__cxa_guard_release>
}
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	2400e2b0 	.word	0x2400e2b0
 8003814:	2400e2b4 	.word	0x2400e2b4
 8003818:	0802cdc4 	.word	0x0802cdc4
 800381c:	0802b424 	.word	0x0802b424
 8003820:	0802b49c 	.word	0x0802b49c
 8003824:	0802ce10 	.word	0x0802ce10
 8003828:	080032e1 	.word	0x080032e1
 800382c:	0802ce48 	.word	0x0802ce48

08003830 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003834:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003836:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003838:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 800383c:	f04f 31ff 	mov.w	r1, #4294967295
 8003840:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003842:	f00c f80f 	bl	800f864 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003846:	f04f 31ff 	mov.w	r1, #4294967295
 800384a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800384c:	f00b ff7e 	bl	800f74c <osMutexAcquire>
                if (stream.doDecode)
 8003850:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003854:	b343      	cbz	r3, 80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003856:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003858:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 800385c:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800385e:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003862:	f1b8 0f00 	cmp.w	r8, #0
 8003866:	d023      	beq.n	80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	4641      	mov	r1, r8
 800386c:	4628      	mov	r0, r5
 800386e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800387a:	9700      	str	r7, [sp, #0]
 800387c:	4628      	mov	r0, r5
 800387e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003882:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003886:	68a1      	ldr	r1, [r4, #8]
 8003888:	47c0      	blx	r8
                    stream.frameCount++;
 800388a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800388c:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003890:	3301      	adds	r3, #1
 8003892:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003894:	b1f0      	cbz	r0, 80038d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	4628      	mov	r0, r5
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	4798      	blx	r3
 800389e:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80038a0:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80038a2:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80038a4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80038a8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038aa:	f00b ff72 	bl	800f792 <osMutexRelease>
        while (1)
 80038ae:	e7c5      	b.n	800383c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80038b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038b2:	2a00      	cmp	r2, #0
 80038b4:	d0de      	beq.n	8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80038b6:	4628      	mov	r0, r5
 80038b8:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80038bc:	4798      	blx	r3
 80038be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80038c0:	4401      	add	r1, r0
 80038c2:	4628      	mov	r0, r5
 80038c4:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038ca:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038ce:	4413      	add	r3, r2
 80038d0:	6123      	str	r3, [r4, #16]
 80038d2:	e7cf      	b.n	8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038d4:	2001      	movs	r0, #1
 80038d6:	e7e3      	b.n	80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038d8 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038d8:	4801      	ldr	r0, [pc, #4]	@ (80038e0 <videoTaskFunc+0x8>)
{
 80038da:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038dc:	f7ff ffa8 	bl	8003830 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038e0:	2400e370 	.word	0x2400e370

080038e4 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038e4:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038e6:	4814      	ldr	r0, [pc, #80]	@ (8003938 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e8:	2500      	movs	r5, #0
 80038ea:	f7fe fbeb 	bl	80020c4 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ee:	4c13      	ldr	r4, [pc, #76]	@ (800393c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038f0:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038f2:	462a      	mov	r2, r5
 80038f4:	4629      	mov	r1, r5
 80038f6:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038fe:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003900:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003902:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003904:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003908:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800390c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003910:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003914:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003918:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800391c:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003920:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003924:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003928:	f00b ff52 	bl	800f7d0 <osSemaphoreNew>
 800392c:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800392e:	4628      	mov	r0, r5
 8003930:	f00b fed7 	bl	800f6e2 <osMutexNew>
 8003934:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2400e3b8 	.word	0x2400e3b8
 800393c:	2400e370 	.word	0x2400e370
 8003940:	0802b4e8 	.word	0x0802b4e8

08003944 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_21_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003944:	4770      	bx	lr

08003946 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003946:	b508      	push	{r3, lr}
    switch (typography)
 8003948:	2904      	cmp	r1, #4
 800394a:	d818      	bhi.n	800397e <_ZN23ApplicationFontProvider7getFontEt+0x38>
 800394c:	e8df f001 	tbb	[pc, r1]
 8003950:	0f0b0703 	.word	0x0f0b0703
 8003954:	13          	.byte	0x13
 8003955:	00          	.byte	0x00
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003956:	f004 fe63 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 800395a:	6800      	ldr	r0, [r0, #0]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
    default:
        return 0;
    }
}
 800395c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800395e:	f004 fe5f 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 8003962:	6840      	ldr	r0, [r0, #4]
 8003964:	e7fa      	b.n	800395c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003966:	f004 fe5b 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 800396a:	6880      	ldr	r0, [r0, #8]
 800396c:	e7f6      	b.n	800395c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800396e:	f004 fe57 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 8003972:	68c0      	ldr	r0, [r0, #12]
 8003974:	e7f2      	b.n	800395c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003976:	f004 fe53 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 800397a:	6900      	ldr	r0, [r0, #16]
 800397c:	e7ee      	b.n	800395c <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 800397e:	2000      	movs	r0, #0
 8003980:	e7ec      	b.n	800395c <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003982 <_ZN23ApplicationFontProviderD0Ev>:
 8003982:	b510      	push	{r4, lr}
 8003984:	4604      	mov	r4, r0
 8003986:	2104      	movs	r1, #4
 8003988:	f024 fbb6 	bl	80280f8 <_ZdlPvj>
 800398c:	4620      	mov	r0, r4
 800398e:	bd10      	pop	{r4, pc}

08003990 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003990:	4800      	ldr	r0, [pc, #0]	@ (8003994 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003992:	4770      	bx	lr
 8003994:	0802b538 	.word	0x0802b538

08003998 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003998:	200e      	movs	r0, #14
 800399a:	4770      	bx	lr

0800399c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800399c:	b513      	push	{r0, r1, r4, lr}
 800399e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80039a0:	b151      	cbz	r1, 80039b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80039a2:	6803      	ldr	r3, [r0, #0]
 80039a4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80039a6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80039a8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80039ac:	689c      	ldr	r4, [r3, #8]
 80039ae:	f10d 0303 	add.w	r3, sp, #3
 80039b2:	47a0      	blx	r4
        return glyph;
    }
 80039b4:	b002      	add	sp, #8
 80039b6:	bd10      	pop	{r4, pc}
            return 0;
 80039b8:	4608      	mov	r0, r1
 80039ba:	e7fb      	b.n	80039b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080039bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80039bc:	89c0      	ldrh	r0, [r0, #14]
 80039be:	4770      	bx	lr

080039c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80039c0:	8a00      	ldrh	r0, [r0, #16]
 80039c2:	4770      	bx	lr

080039c4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80039c4:	88c0      	ldrh	r0, [r0, #6]
 80039c6:	4770      	bx	lr

080039c8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80039c8:	8880      	ldrh	r0, [r0, #4]
 80039ca:	4770      	bx	lr

080039cc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039cc:	7a80      	ldrb	r0, [r0, #10]
    }
 80039ce:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039d2:	4770      	bx	lr

080039d4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039d4:	7a80      	ldrb	r0, [r0, #10]
    }
 80039d6:	09c0      	lsrs	r0, r0, #7
 80039d8:	4770      	bx	lr

080039da <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039da:	2000      	movs	r0, #0
 80039dc:	4770      	bx	lr
	...

080039e0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039e8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	00000000 	.word	0x00000000

080039ec <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80039ec:	4770      	bx	lr

080039ee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80039ee:	4770      	bx	lr

080039f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80039f0:	4770      	bx	lr

080039f2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80039f2:	4770      	bx	lr

080039f4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80039f4:	4770      	bx	lr

080039f6 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039f6:	4770      	bx	lr

080039f8 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80039f8:	b530      	push	{r4, r5, lr}
 80039fa:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80039fc:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80039fe:	4604      	mov	r4, r0
        rect.width = width;
 8003a00:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003a02:	466d      	mov	r5, sp
 8003a04:	4601      	mov	r1, r0
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0a:	343c      	adds	r4, #60	@ 0x3c
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	4798      	blx	r3
 8003a10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003a18:	b005      	add	sp, #20
 8003a1a:	bd30      	pop	{r4, r5, pc}

08003a1c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003a1c:	b530      	push	{r4, r5, lr}
 8003a1e:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003a20:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003a22:	4604      	mov	r4, r0
        rect.height = height;
 8003a24:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003a26:	466d      	mov	r5, sp
 8003a28:	4601      	mov	r1, r0
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2e:	343c      	adds	r4, #60	@ 0x3c
 8003a30:	4628      	mov	r0, r5
 8003a32:	4798      	blx	r3
 8003a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003a3c:	b005      	add	sp, #20
 8003a3e:	bd30      	pop	{r4, r5, pc}

08003a40 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003a40:	2200      	movs	r2, #0
 8003a42:	8002      	strh	r2, [r0, #0]
 8003a44:	8042      	strh	r2, [r0, #2]
 8003a46:	8082      	strh	r2, [r0, #4]
 8003a48:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003a4a:	4770      	bx	lr

08003a4c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003a4c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003a50:	4770      	bx	lr

08003a52 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003a52:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4604      	mov	r4, r0
        setX(x);
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003a5a:	4615      	mov	r5, r2
        setX(x);
 8003a5c:	4798      	blx	r3
        setBaselineY(baselineY);
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003a6a:	4718      	bx	r3

08003a6c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	4770      	bx	lr

08003a70 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a70:	2200      	movs	r2, #0
 8003a72:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003a76:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a78:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8003a7c:	4770      	bx	lr

08003a7e <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003a7e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003a80:	4770      	bx	lr

08003a82 <_ZN18CalculatorViewBase18sendToCalculator_0Ev>:
     * Virtual Action Handlers
     */
    virtual void sendToCalculator_0()
    {
        // Override and implement this function in Calculator
    }
 8003a82:	4770      	bx	lr

08003a84 <_ZN18CalculatorViewBase18sendToCalculator_1Ev>:
    virtual void sendToCalculator_1()
    {
        // Override and implement this function in Calculator
    }
 8003a84:	4770      	bx	lr

08003a86 <_ZN18CalculatorViewBase18sendToCalculator_2Ev>:
    virtual void sendToCalculator_2()
    {
        // Override and implement this function in Calculator
    }
 8003a86:	4770      	bx	lr

08003a88 <_ZN18CalculatorViewBase18sendToCalculator_3Ev>:
    virtual void sendToCalculator_3()
    {
        // Override and implement this function in Calculator
    }
 8003a88:	4770      	bx	lr

08003a8a <_ZN18CalculatorViewBase18sendToCalculator_4Ev>:
    virtual void sendToCalculator_4()
    {
        // Override and implement this function in Calculator
    }
 8003a8a:	4770      	bx	lr

08003a8c <_ZN18CalculatorViewBase18sendToCalculator_5Ev>:
    virtual void sendToCalculator_5()
    {
        // Override and implement this function in Calculator
    }
 8003a8c:	4770      	bx	lr

08003a8e <_ZN18CalculatorViewBase18sendToCalculator_6Ev>:
    virtual void sendToCalculator_6()
    {
        // Override and implement this function in Calculator
    }
 8003a8e:	4770      	bx	lr

08003a90 <_ZN18CalculatorViewBase18sendToCalculator_7Ev>:
    virtual void sendToCalculator_7()
    {
        // Override and implement this function in Calculator
    }
 8003a90:	4770      	bx	lr

08003a92 <_ZN18CalculatorViewBase18sendToCalculator_8Ev>:
    virtual void sendToCalculator_8()
    {
        // Override and implement this function in Calculator
    }
 8003a92:	4770      	bx	lr

08003a94 <_ZN18CalculatorViewBase18sendToCalculator_9Ev>:
    virtual void sendToCalculator_9()
    {
        // Override and implement this function in Calculator
    }
 8003a94:	4770      	bx	lr

08003a96 <_ZN18CalculatorViewBase20sendToCalculator_AddEv>:
    virtual void sendToCalculator_Add()
    {
        // Override and implement this function in Calculator
    }
 8003a96:	4770      	bx	lr

08003a98 <_ZN18CalculatorViewBase23sendToCalculator_EqualsEv>:
    virtual void sendToCalculator_Equals()
    {
        // Override and implement this function in Calculator
    }
 8003a98:	4770      	bx	lr

08003a9a <_ZN18CalculatorViewBase23sendToCalculator_DeleteEv>:
    virtual void sendToCalculator_Delete()
    {
        // Override and implement this function in Calculator
    }
 8003a9a:	4770      	bx	lr

08003a9c <_ZN18CalculatorViewBase32sendToCalculator_OpenParenthesisEv>:
    virtual void sendToCalculator_OpenParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003a9c:	4770      	bx	lr

08003a9e <_ZN18CalculatorViewBase33sendToCalculator_CloseParenthesisEv>:
    virtual void sendToCalculator_CloseParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN18CalculatorViewBase25sendToCalculator_SubtractEv>:
    virtual void sendToCalculator_Subtract()
    {
        // Override and implement this function in Calculator
    }
 8003aa0:	4770      	bx	lr

08003aa2 <_ZN18CalculatorViewBase25sendToCalculator_MultiplyEv>:
    virtual void sendToCalculator_Multiply()
    {
        // Override and implement this function in Calculator
    }
 8003aa2:	4770      	bx	lr

08003aa4 <_ZN18CalculatorViewBase23sendToCalculator_DivideEv>:
    virtual void sendToCalculator_Divide()
    {
        // Override and implement this function in Calculator
    }
 8003aa4:	4770      	bx	lr

08003aa6 <_ZN18CalculatorViewBase22sendToCalculator_CommaEv>:
    virtual void sendToCalculator_Comma()
    {
        // Override and implement this function in Calculator
    }
 8003aa6:	4770      	bx	lr

08003aa8 <_ZN18CalculatorViewBase22sendToCalculator_ClearEv>:
    virtual void sendToCalculator_Clear()
    {
        // Override and implement this function in Calculator
    }
 8003aa8:	4770      	bx	lr

08003aaa <_ZN18CalculatorViewBaseD1Ev>:
}

CalculatorViewBase::~CalculatorViewBase()
{

}
 8003aaa:	4770      	bx	lr

08003aac <_ZN18CalculatorViewBase11setupScreenEv>:

void CalculatorViewBase::setupScreen()
{

}
 8003aac:	4770      	bx	lr

08003aae <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003aae:	4770      	bx	lr

08003ab0 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 8003ab0:	4770      	bx	lr

08003ab2 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003ab2:	4770      	bx	lr

08003ab4 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 8003ab4:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun)(t1);
 8003ab6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003ab8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003aba:	68c2      	ldr	r2, [r0, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	1055      	asrs	r5, r2, #1
 8003ac0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003ac4:	07d2      	lsls	r2, r2, #31
 8003ac6:	bf48      	it	mi
 8003ac8:	5962      	ldrmi	r2, [r4, r5]
    }
 8003aca:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003acc:	bf48      	it	mi
 8003ace:	58d3      	ldrmi	r3, [r2, r3]
 8003ad0:	4718      	bx	r3

08003ad2 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    /**
     * Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 8003ad2:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003ad4:	6840      	ldr	r0, [r0, #4]
 8003ad6:	b130      	cbz	r0, 8003ae6 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	b91a      	cbnz	r2, 8003ae4 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003adc:	68d8      	ldr	r0, [r3, #12]
 8003ade:	f000 0001 	and.w	r0, r0, #1
 8003ae2:	4770      	bx	lr
 8003ae4:	2001      	movs	r0, #1
    }
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
    }
 8003aec:	2108      	movs	r1, #8
 8003aee:	f024 fb03 	bl	80280f8 <_ZdlPvj>
 8003af2:	4620      	mov	r0, r4
 8003af4:	bd10      	pop	{r4, pc}

08003af6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4604      	mov	r4, r0
 8003afa:	214c      	movs	r1, #76	@ 0x4c
 8003afc:	f024 fafc 	bl	80280f8 <_ZdlPvj>
 8003b00:	4620      	mov	r0, r4
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED0Ev>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	2130      	movs	r1, #48	@ 0x30
 8003b0a:	f024 faf5 	bl	80280f8 <_ZdlPvj>
 8003b0e:	4620      	mov	r0, r4
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003b12:	b510      	push	{r4, lr}
 8003b14:	4604      	mov	r4, r0
 8003b16:	2110      	movs	r1, #16
 8003b18:	f024 faee 	bl	80280f8 <_ZdlPvj>
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	bd10      	pop	{r4, pc}

08003b20 <_ZN18CalculatorViewBaseD0Ev>:
CalculatorViewBase::~CalculatorViewBase()
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4604      	mov	r4, r0
}
 8003b24:	f44f 61de 	mov.w	r1, #1776	@ 0x6f0
 8003b28:	f024 fae6 	bl	80280f8 <_ZdlPvj>
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void CalculatorViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8003b30:	f500 7349 	add.w	r3, r0, #804	@ 0x324
 8003b34:	4299      	cmp	r1, r3
{
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	4604      	mov	r4, r0
 8003b3a:	460d      	mov	r5, r1
    if (&src == &HomeButton)
 8003b3c:	d103      	bne.n	8003b46 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003b3e:	f015 ff17 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
 8003b42:	f003 fe79 	bl	8007838 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
    if (&src == &CalculatorButton_0)
 8003b46:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8003b4a:	429d      	cmp	r5, r3
 8003b4c:	d103      	bne.n	8003b56 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //CalculatorButtonClicked_0
        //When CalculatorButton_0 clicked call virtual function
        //Call sendToCalculator_0
        sendToCalculator_0();
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	4620      	mov	r0, r4
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_1)
 8003b56:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8003b5a:	429d      	cmp	r5, r3
 8003b5c:	d103      	bne.n	8003b66 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //CalculatorButtonClicked_1
        //When CalculatorButton_1 clicked call virtual function
        //Call sendToCalculator_1
        sendToCalculator_1();
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	4620      	mov	r0, r4
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_2)
 8003b66:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8003b6a:	429d      	cmp	r5, r3
 8003b6c:	d103      	bne.n	8003b76 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //CalculatorButtonClicked_2
        //When CalculatorButton_2 clicked call virtual function
        //Call sendToCalculator_2
        sendToCalculator_2();
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	4620      	mov	r0, r4
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_3)
 8003b76:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	d103      	bne.n	8003b86 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //CalculatorButtonClicked_3
        //When CalculatorButton_3 clicked call virtual function
        //Call sendToCalculator_3
        sendToCalculator_3();
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	4620      	mov	r0, r4
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_4)
 8003b86:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	d103      	bne.n	8003b96 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
    {
        //CalculatorButtonClicked_4
        //When CalculatorButton_4 clicked call virtual function
        //Call sendToCalculator_4
        sendToCalculator_4();
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	4620      	mov	r0, r4
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_5)
 8003b96:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8003b9a:	429d      	cmp	r5, r3
 8003b9c:	d103      	bne.n	8003ba6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
    {
        //CalculatorButtonClicked_5
        //When CalculatorButton_5 clicked call virtual function
        //Call sendToCalculator_5
        sendToCalculator_5();
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_6)
 8003ba6:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8003baa:	429d      	cmp	r5, r3
 8003bac:	d103      	bne.n	8003bb6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
    {
        //CalculatorButtonClicked_6
        //When CalculatorButton_6 clicked call virtual function
        //Call sendToCalculator_6
        sendToCalculator_6();
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_7)
 8003bb6:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8003bba:	429d      	cmp	r5, r3
 8003bbc:	d103      	bne.n	8003bc6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
    {
        //CalculatorButtonClicked_7
        //When CalculatorButton_7 clicked call virtual function
        //Call sendToCalculator_7
        sendToCalculator_7();
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_8)
 8003bc6:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8003bca:	429d      	cmp	r5, r3
 8003bcc:	d103      	bne.n	8003bd6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa6>
    {
        //CalculatorButtonClicked_8
        //When CalculatorButton_8 clicked call virtual function
        //Call sendToCalculator_8
        sendToCalculator_8();
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_9)
 8003bd6:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8003bda:	429d      	cmp	r5, r3
 8003bdc:	d103      	bne.n	8003be6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb6>
    {
        //CalculatorButtonClicked_9
        //When CalculatorButton_9 clicked call virtual function
        //Call sendToCalculator_9
        sendToCalculator_9();
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4620      	mov	r0, r4
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Add)
 8003be6:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8003bea:	429d      	cmp	r5, r3
 8003bec:	d103      	bne.n	8003bf6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc6>
    {
        //CalculatorButtonClicked_Add
        //When CalculatorButton_Add clicked call virtual function
        //Call sendToCalculator_Add
        sendToCalculator_Add();
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Equals)
 8003bf6:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	d103      	bne.n	8003c06 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
    {
        //CalculatorButtonClicked_Equals
        //When CalculatorButton_Equals clicked call virtual function
        //Call sendToCalculator_Equals
        sendToCalculator_Equals();
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4620      	mov	r0, r4
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Delete)
 8003c06:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	d103      	bne.n	8003c16 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe6>
    {
        //CalculatorButtonClicked_Delete
        //When CalculatorButton_Delete clicked call virtual function
        //Call sendToCalculator_Delete
        sendToCalculator_Delete();
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	4620      	mov	r0, r4
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_OpenParenthesis)
 8003c16:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 8003c1a:	429d      	cmp	r5, r3
 8003c1c:	d103      	bne.n	8003c26 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf6>
    {
        //CalculatorButtonClicked_OpenParenthesis
        //When CalculatorButton_OpenParenthesis clicked call virtual function
        //Call sendToCalculator_OpenParenthesis
        sendToCalculator_OpenParenthesis();
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	4620      	mov	r0, r4
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_CloseParenthesis)
 8003c26:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8003c2a:	429d      	cmp	r5, r3
 8003c2c:	d103      	bne.n	8003c36 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x106>
    {
        //CalculatorButtonClicked_CloseParenthesis
        //When CalculatorButton_CloseParenthesis clicked call virtual function
        //Call sendToCalculator_CloseParenthesis
        sendToCalculator_CloseParenthesis();
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	4620      	mov	r0, r4
 8003c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c34:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Subtract)
 8003c36:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	d103      	bne.n	8003c46 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x116>
    {
        //CalculatorButtonClicked_Subtract
        //When CalculatorButton_Subtract clicked call virtual function
        //Call sendToCalculator_Subtract
        sendToCalculator_Subtract();
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	4620      	mov	r0, r4
 8003c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c44:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Multiply)
 8003c46:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 8003c4a:	429d      	cmp	r5, r3
 8003c4c:	d103      	bne.n	8003c56 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x126>
    {
        //CalculatorButtonClicked_Multiply
        //When CalculatorButton_Multiply clicked call virtual function
        //Call sendToCalculator_Multiply
        sendToCalculator_Multiply();
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	4620      	mov	r0, r4
 8003c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c54:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Divide)
 8003c56:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 8003c5a:	429d      	cmp	r5, r3
 8003c5c:	d103      	bne.n	8003c66 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x136>
    {
        //CalculatorButtonClicked_Divide
        //When CalculatorButton_Divide clicked call virtual function
        //Call sendToCalculator_Divide
        sendToCalculator_Divide();
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	4620      	mov	r0, r4
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Comma)
 8003c66:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8003c6a:	429d      	cmp	r5, r3
 8003c6c:	d103      	bne.n	8003c76 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    {
        //CalculatorButtonClicked_Comma
        //When CalculatorButton_Comma clicked call virtual function
        //Call sendToCalculator_Comma
        sendToCalculator_Comma();
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	4620      	mov	r0, r4
 8003c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c74:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Clear)
 8003c76:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 8003c7a:	429d      	cmp	r5, r3
 8003c7c:	d105      	bne.n	8003c8a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x15a>
    {
        //CalculatorButtonClicked_Clear
        //When CalculatorButton_Clear clicked call virtual function
        //Call sendToCalculator_Clear
        sendToCalculator_Clear();
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	4620      	mov	r0, r4
 8003c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    }
}
 8003c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendToCalculator_Clear();
 8003c88:	4718      	bx	r3
}
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}

08003c8c <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8003c8c:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8003c8e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8003c92:	b10b      	cbz	r3, 8003c98 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8003c94:	f7ff fb99 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8003c98:	bd08      	pop	{r3, pc}

08003c9a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003c9a:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003c9c:	f7ff fb95 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003ca0:	bd08      	pop	{r3, pc}

08003ca2 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003ca2:	b570      	push	{r4, r5, r6, lr}
 8003ca4:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 8003ca6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
 8003ca8:	460d      	mov	r5, r1
        if (clickAction && clickAction->isValid())
 8003caa:	b158      	cbz	r0, 8003cc4 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
 8003cac:	6803      	ldr	r3, [r0, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4798      	blx	r3
 8003cb2:	b138      	cbz	r0, 8003cc4 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
        {
            clickAction->execute(*this, event);
 8003cb4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003cb6:	462a      	mov	r2, r5
 8003cb8:	4621      	mov	r1, r4
 8003cba:	6803      	ldr	r3, [r0, #0]
        }
    }
 8003cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4718      	bx	r3
    }
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cc8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003cc8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003cca:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ccc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003cce:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003cd2:	b28d      	uxth	r5, r1
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b92b      	cbnz	r3, 8003ce4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003cda:	216c      	movs	r1, #108	@ 0x6c
 8003cdc:	4a10      	ldr	r2, [pc, #64]	@ (8003d20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003cde:	4811      	ldr	r0, [pc, #68]	@ (8003d24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003ce0:	f024 fd82 	bl	80287e8 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003ce4:	4910      	ldr	r1, [pc, #64]	@ (8003d28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003ce6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003ce8:	8809      	ldrh	r1, [r1, #0]
 8003cea:	4291      	cmp	r1, r2
 8003cec:	d803      	bhi.n	8003cf6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003cee:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003cf0:	216d      	movs	r1, #109	@ 0x6d
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003cf4:	e7f3      	b.n	8003cde <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003cf6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003d02:	6803      	ldr	r3, [r0, #0]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4798      	blx	r3
 8003d08:	1a29      	subs	r1, r5, r0
 8003d0a:	4633      	mov	r3, r6
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	b209      	sxth	r1, r1
    }
 8003d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003d14:	4718      	bx	r3
 8003d16:	bf00      	nop
 8003d18:	24028578 	.word	0x24028578
 8003d1c:	0802b650 	.word	0x0802b650
 8003d20:	0802b692 	.word	0x0802b692
 8003d24:	0802b6cd 	.word	0x0802b6cd
 8003d28:	2402857c 	.word	0x2402857c
 8003d2c:	0802b722 	.word	0x0802b722
 8003d30:	24028580 	.word	0x24028580

08003d34 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003d34:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003d36:	b570      	push	{r4, r5, r6, lr}
 8003d38:	4604      	mov	r4, r0
        setX(x);
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003d3c:	4615      	mov	r5, r2
        setX(x);
 8003d3e:	4798      	blx	r3
        setY(y);
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	4620      	mov	r0, r4
 8003d44:	4629      	mov	r1, r5
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003d4c:	4718      	bx	r3

08003d4e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	4604      	mov	r4, r0
 8003d52:	461d      	mov	r5, r3
 8003d54:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003d58:	f7ff ffec 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4620      	mov	r0, r4
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	4798      	blx	r3
        setHeight(height);
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003d72:	4718      	bx	r3

08003d74 <_ZN8touchgfx6WidgetC1Ev>:
 8003d74:	2200      	movs	r2, #0
 8003d76:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003d7a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003d7e:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003d82:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d8a:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003d8c:	4a01      	ldr	r2, [pc, #4]	@ (8003d94 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003d8e:	6002      	str	r2, [r0, #0]
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	0802b7b8 	.word	0x0802b7b8

08003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	d92a      	bls.n	8003dfc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003da6:	4b17      	ldr	r3, [pc, #92]	@ (8003e04 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b92b      	cbnz	r3, 8003db8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003dac:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8003dae:	216c      	movs	r1, #108	@ 0x6c
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8003db2:	4817      	ldr	r0, [pc, #92]	@ (8003e10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8003db4:	f024 fd18 	bl	80287e8 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003db8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003dbc:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	f004 fc1a 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	4607      	mov	r7, r0
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	4798      	blx	r3
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4639      	mov	r1, r7
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dde:	4628      	mov	r0, r5
 8003de0:	4798      	blx	r3
 8003de2:	fb14 f400 	smulbb	r4, r4, r0
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	4639      	mov	r1, r7
 8003dea:	b2a4      	uxth	r4, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	4798      	blx	r3
 8003df2:	1823      	adds	r3, r4, r0
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e7fa      	b.n	8003df6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8003e00:	2402857c 	.word	0x2402857c
 8003e04:	24028578 	.word	0x24028578
 8003e08:	0802b650 	.word	0x0802b650
 8003e0c:	0802b692 	.word	0x0802b692
 8003e10:	0802b6cd 	.word	0x0802b6cd
 8003e14:	24028580 	.word	0x24028580
 8003e18:	24028584 	.word	0x24028584

08003e1c <_ZN18CalculatorViewBaseC1Ev>:
CalculatorViewBase::CalculatorViewBase() :
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	4604      	mov	r4, r0
 8003e22:	b09d      	sub	sp, #116	@ 0x74
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8003e24:	f04f 0900 	mov.w	r9, #0
 8003e28:	f017 fd0c 	bl	801b844 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 8003e2c:	4626      	mov	r6, r4
 8003e2e:	4bdf      	ldr	r3, [pc, #892]	@ (80041ac <_ZN18CalculatorViewBaseC1Ev+0x390>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003e30:	2226      	movs	r2, #38	@ 0x26
 8003e32:	4649      	mov	r1, r9
 8003e34:	f8c4 903c 	str.w	r9, [r4, #60]	@ 0x3c
 8003e38:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8003e3c:	f846 3b40 	str.w	r3, [r6], #64
 8003e40:	4630      	mov	r0, r6
 8003e42:	f024 ff6d 	bl	8028d20 <memset>
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ff94 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8003e4c:	4bd8      	ldr	r3, [pc, #864]	@ (80041b0 <_ZN18CalculatorViewBaseC1Ev+0x394>)
 8003e4e:	f104 0ab4 	add.w	sl, r4, #180	@ 0xb4
 8003e52:	4658      	mov	r0, fp
 8003e54:	6423      	str	r3, [r4, #64]	@ 0x40
 8003e56:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 8003e58:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003e5c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8003e60:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 8003e64:	f04f 0701 	mov.w	r7, #1
 8003e68:	f013 f9fe 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e6c:	4650      	mov	r0, sl
 8003e6e:	f013 f9fb 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e72:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
    CalculatorButton_0.setAction(buttonCallback);
 8003e76:	f504 68dc 	add.w	r8, r4, #1760	@ 0x6e0
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	f013 f9f3 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e82:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 8003e86:	4618      	mov	r0, r3
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	f013 f9ed 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e8e:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8003e92:	4618      	mov	r0, r3
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	f013 f9e7 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e9a:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	9306      	str	r3, [sp, #24]
 8003ea2:	f013 f9e1 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ea6:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	9307      	str	r3, [sp, #28]
 8003eae:	f013 f9db 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eb2:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	9308      	str	r3, [sp, #32]
 8003eba:	f013 f9d5 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ebe:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ec6:	f013 f9cf 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eca:	f504 733d 	add.w	r3, r4, #756	@ 0x2f4
        : T(), clickAction(0)
 8003ece:	a91a      	add	r1, sp, #104	@ 0x68
 8003ed0:	f8ad 5068 	strh.w	r5, [sp, #104]	@ 0x68
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ed8:	f012 f9b4 	bl	8016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003edc:	4bb5      	ldr	r3, [pc, #724]	@ (80041b4 <_ZN18CalculatorViewBaseC1Ev+0x398>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003ede:	2226      	movs	r2, #38	@ 0x26
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
 8003ee6:	f504 7349 	add.w	r3, r4, #804	@ 0x324
 8003eea:	f884 7318 	strb.w	r7, [r4, #792]	@ 0x318
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f8c4 9320 	str.w	r9, [r4, #800]	@ 0x320
 8003ef4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ef6:	f024 ff13 	bl	8028d20 <memset>
 8003efa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003efc:	f7ff ff3a 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003f00:	4bad      	ldr	r3, [pc, #692]	@ (80041b8 <_ZN18CalculatorViewBaseC1Ev+0x39c>)
 8003f02:	f884 7348 	strb.w	r7, [r4, #840]	@ 0x348
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003f06:	1d27      	adds	r7, r4, #4
 8003f08:	f8c4 3324 	str.w	r3, [r4, #804]	@ 0x324
 8003f0c:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8003f10:	f8a4 5352 	strh.w	r5, [r4, #850]	@ 0x352
 8003f14:	4618      	mov	r0, r3
 8003f16:	f8a4 5354 	strh.w	r5, [r4, #852]	@ 0x354
 8003f1a:	f884 5356 	strb.w	r5, [r4, #854]	@ 0x356
 8003f1e:	f8c4 934c 	str.w	r9, [r4, #844]	@ 0x34c
 8003f22:	f884 9350 	strb.w	r9, [r4, #848]	@ 0x350
 8003f26:	930c      	str	r3, [sp, #48]	@ 0x30
 8003f28:	f013 f99e 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f2c:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8003f30:	4618      	mov	r0, r3
 8003f32:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f34:	f013 f998 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f38:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f40:	f013 f992 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f44:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8003f48:	4618      	mov	r0, r3
 8003f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f4c:	f013 f98c 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f50:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8003f54:	4618      	mov	r0, r3
 8003f56:	9310      	str	r3, [sp, #64]	@ 0x40
 8003f58:	f013 f986 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f5c:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8003f60:	4618      	mov	r0, r3
 8003f62:	9311      	str	r3, [sp, #68]	@ 0x44
 8003f64:	f013 f980 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f68:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003f70:	f013 f97a 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f74:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8003f78:	4618      	mov	r0, r3
 8003f7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f7c:	f013 f974 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f80:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8003f84:	4618      	mov	r0, r3
 8003f86:	9314      	str	r3, [sp, #80]	@ 0x50
 8003f88:	f013 f96e 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f8c:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8003f90:	4618      	mov	r0, r3
 8003f92:	9315      	str	r3, [sp, #84]	@ 0x54
 8003f94:	f013 f968 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f98:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	9316      	str	r3, [sp, #88]	@ 0x58
 8003fa0:	f013 f962 	bl	8017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003fa4:	f504 63ce 	add.w	r3, r4, #1648	@ 0x670
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003fa8:	2226      	movs	r2, #38	@ 0x26
 8003faa:	4649      	mov	r1, r9
 8003fac:	4618      	mov	r0, r3
 8003fae:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003fb0:	f024 feb6 	bl	8028d20 <memset>
 8003fb4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003fb6:	f7ff fedd 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8003fba:	4b80      	ldr	r3, [pc, #512]	@ (80041bc <_ZN18CalculatorViewBaseC1Ev+0x3a0>)
 8003fbc:	f8a4 569c 	strh.w	r5, [r4, #1692]	@ 0x69c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003fc0:	f04f 35ff 	mov.w	r5, #4294967295
 8003fc4:	f8c4 3698 	str.w	r3, [r4, #1688]	@ 0x698
 8003fc8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 800, 480);
 8003fcc:	464a      	mov	r2, r9
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
 8003fd4:	4649      	mov	r1, r9
        : TextAreaWithWildcardBase(), wc1(0)
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80041c0 <_ZN18CalculatorViewBaseC1Ev+0x3a4>)
 8003fd8:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
 8003fdc:	f8c4 3670 	str.w	r3, [r4, #1648]	@ 0x670
        : pobject(pObject), pmemfun(pmemfun_1)
 8003fe0:	4b78      	ldr	r3, [pc, #480]	@ (80041c4 <_ZN18CalculatorViewBaseC1Ev+0x3a8>)
        : color(col)
 8003fe2:	f8c4 96a0 	str.w	r9, [r4, #1696]	@ 0x6a0
 8003fe6:	f8c4 36e0 	str.w	r3, [r4, #1760]	@ 0x6e0
 8003fea:	4b77      	ldr	r3, [pc, #476]	@ (80041c8 <_ZN18CalculatorViewBaseC1Ev+0x3ac>)
 8003fec:	f8a4 96a8 	strh.w	r9, [r4, #1704]	@ 0x6a8
 8003ff0:	f8c4 36e8 	str.w	r3, [r4, #1768]	@ 0x6e8
 8003ff4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003ff8:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
              text(0)
 8003ffc:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8004000:	f8c4 96b8 	str.w	r9, [r4, #1720]	@ 0x6b8
 8004004:	f8c4 46e4 	str.w	r4, [r4, #1764]	@ 0x6e4
 8004008:	f8c4 96ec 	str.w	r9, [r4, #1772]	@ 0x6ec
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004012:	f7ff fe9c 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004016:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800401a:	4631      	mov	r1, r6
 800401c:	4638      	mov	r0, r7
 800401e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004020:	2603      	movs	r6, #3
 8004022:	f00d feb5 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_0.setXY(541, 247);
 8004026:	4658      	mov	r0, fp
 8004028:	22f7      	movs	r2, #247	@ 0xf7
 800402a:	f240 211d 	movw	r1, #541	@ 0x21d
 800402e:	f7ff fe81 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_0.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004032:	aa1a      	add	r2, sp, #104	@ 0x68
 8004034:	a919      	add	r1, sp, #100	@ 0x64
 8004036:	4658      	mov	r0, fp
 8004038:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800403c:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004040:	f012 fea2 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004044:	f04f 0308 	mov.w	r3, #8
        updateTextPosition();
 8004048:	4658      	mov	r0, fp
 800404a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800404e:	f7ff fea3 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004052:	4659      	mov	r1, fp
 8004054:	4638      	mov	r0, r7
        rotation = textRotation;
 8004056:	f884 60b0 	strb.w	r6, [r4, #176]	@ 0xb0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800405a:	f8c4 8094 	str.w	r8, [r4, #148]	@ 0x94
 800405e:	f04f 0b04 	mov.w	fp, #4
        colorPressed = col;
 8004062:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8004066:	f00d fe93 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_OpenParenthesis.setXY(651, 356);
 800406a:	4650      	mov	r0, sl
 800406c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004070:	f240 218b 	movw	r1, #651	@ 0x28b
 8004074:	f7ff fe5e 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 8004078:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_OpenParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800407c:	aa1a      	add	r2, sp, #104	@ 0x68
 800407e:	a919      	add	r1, sp, #100	@ 0x64
 8004080:	4650      	mov	r0, sl
 8004082:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004086:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 800408a:	f012 fe7d 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800408e:	2309      	movs	r3, #9
        updateTextPosition();
 8004090:	4650      	mov	r0, sl
 8004092:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
 8004096:	f7ff fe7f 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800409a:	4651      	mov	r1, sl
 800409c:	4638      	mov	r0, r7
        rotation = textRotation;
 800409e:	f884 60f8 	strb.w	r6, [r4, #248]	@ 0xf8
 80040a2:	f8c4 80dc 	str.w	r8, [r4, #220]	@ 0xdc
 80040a6:	f04f 0a01 	mov.w	sl, #1
        colorPressed = col;
 80040aa:	e9c4 553c 	strd	r5, r5, [r4, #240]	@ 0xf0
 80040ae:	f00d fe6f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Clear.setXY(319, 25);
 80040b2:	2219      	movs	r2, #25
 80040b4:	f240 113f 	movw	r1, #319	@ 0x13f
 80040b8:	9803      	ldr	r0, [sp, #12]
 80040ba:	f7ff fe3b 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Clear.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80040be:	aa1a      	add	r2, sp, #104	@ 0x68
 80040c0:	a919      	add	r1, sp, #100	@ 0x64
 80040c2:	9803      	ldr	r0, [sp, #12]
 80040c4:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80040c8:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80040cc:	f012 fe5c 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040d0:	f04f 0107 	mov.w	r1, #7
        updateTextPosition();
 80040d4:	9803      	ldr	r0, [sp, #12]
 80040d6:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
 80040da:	f7ff fe5d 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80040de:	9903      	ldr	r1, [sp, #12]
 80040e0:	4638      	mov	r0, r7
        rotation = textRotation;
 80040e2:	f884 6140 	strb.w	r6, [r4, #320]	@ 0x140
 80040e6:	f8c4 8124 	str.w	r8, [r4, #292]	@ 0x124
        colorPressed = col;
 80040ea:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 80040ee:	f00d fe4f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Delete.setXY(208, 25);
 80040f2:	2219      	movs	r2, #25
 80040f4:	21d0      	movs	r1, #208	@ 0xd0
 80040f6:	9804      	ldr	r0, [sp, #16]
 80040f8:	f7ff fe1c 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Delete.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80040fc:	a819      	add	r0, sp, #100	@ 0x64
 80040fe:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004102:	f04f 0a05 	mov.w	sl, #5
 8004106:	aa1a      	add	r2, sp, #104	@ 0x68
 8004108:	4601      	mov	r1, r0
 800410a:	9804      	ldr	r0, [sp, #16]
 800410c:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004110:	f012 fe3a 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004114:	9804      	ldr	r0, [sp, #16]
 8004116:	f8a4 a17c 	strh.w	sl, [r4, #380]	@ 0x17c
 800411a:	f7ff fe3d 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800411e:	9904      	ldr	r1, [sp, #16]
 8004120:	4638      	mov	r0, r7
        rotation = textRotation;
 8004122:	f884 6188 	strb.w	r6, [r4, #392]	@ 0x188
 8004126:	f8c4 816c 	str.w	r8, [r4, #364]	@ 0x16c
        colorPressed = col;
 800412a:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
 800412e:	f00d fe2f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_CloseParenthesis.setXY(651, 247);
 8004132:	22f7      	movs	r2, #247	@ 0xf7
 8004134:	f240 218b 	movw	r1, #651	@ 0x28b
 8004138:	9805      	ldr	r0, [sp, #20]
 800413a:	f7ff fdfb 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_CloseParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800413e:	a819      	add	r0, sp, #100	@ 0x64
 8004140:	f04f 0302 	mov.w	r3, #2
 8004144:	aa1a      	add	r2, sp, #104	@ 0x68
 8004146:	4601      	mov	r1, r0
 8004148:	9805      	ldr	r0, [sp, #20]
 800414a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800414e:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004152:	f012 fe19 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004156:	2306      	movs	r3, #6
        updateTextPosition();
 8004158:	9805      	ldr	r0, [sp, #20]
 800415a:	f8a4 31c4 	strh.w	r3, [r4, #452]	@ 0x1c4
 800415e:	f7ff fe1b 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004162:	9905      	ldr	r1, [sp, #20]
 8004164:	4638      	mov	r0, r7
        rotation = textRotation;
 8004166:	f884 61d0 	strb.w	r6, [r4, #464]	@ 0x1d0
 800416a:	f8c4 81b4 	str.w	r8, [r4, #436]	@ 0x1b4
        colorPressed = col;
 800416e:	e9c4 5572 	strd	r5, r5, [r4, #456]	@ 0x1c8
 8004172:	f00d fe0d 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Subtract.setXY(541, 25);
 8004176:	2219      	movs	r2, #25
 8004178:	f240 211d 	movw	r1, #541	@ 0x21d
 800417c:	9806      	ldr	r0, [sp, #24]
 800417e:	f7ff fdd9 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Subtract.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004182:	a819      	add	r0, sp, #100	@ 0x64
 8004184:	f04f 0302 	mov.w	r3, #2
 8004188:	aa1a      	add	r2, sp, #104	@ 0x68
 800418a:	4601      	mov	r1, r0
 800418c:	9806      	ldr	r0, [sp, #24]
 800418e:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004192:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004196:	f012 fdf7 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800419a:	230a      	movs	r3, #10
        updateTextPosition();
 800419c:	9806      	ldr	r0, [sp, #24]
 800419e:	f8a4 320c 	strh.w	r3, [r4, #524]	@ 0x20c
 80041a2:	f7ff fdf9 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80041a6:	9906      	ldr	r1, [sp, #24]
 80041a8:	e010      	b.n	80041cc <_ZN18CalculatorViewBaseC1Ev+0x3b0>
 80041aa:	bf00      	nop
 80041ac:	0802b94c 	.word	0x0802b94c
 80041b0:	0802d328 	.word	0x0802d328
 80041b4:	0802b8c0 	.word	0x0802b8c0
 80041b8:	0802d390 	.word	0x0802d390
 80041bc:	0802b820 	.word	0x0802b820
 80041c0:	0802b830 	.word	0x0802b830
 80041c4:	0802b934 	.word	0x0802b934
 80041c8:	08003b31 	.word	0x08003b31
 80041cc:	4638      	mov	r0, r7
        rotation = textRotation;
 80041ce:	f884 6218 	strb.w	r6, [r4, #536]	@ 0x218
 80041d2:	f8c4 81fc 	str.w	r8, [r4, #508]	@ 0x1fc
        colorPressed = col;
 80041d6:	e9c4 5584 	strd	r5, r5, [r4, #528]	@ 0x210
 80041da:	f00d fdd9 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Add.setXY(430, 25);
 80041de:	2219      	movs	r2, #25
 80041e0:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80041e4:	9807      	ldr	r0, [sp, #28]
 80041e6:	f7ff fda5 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Add.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80041ea:	a819      	add	r0, sp, #100	@ 0x64
 80041ec:	f04f 0302 	mov.w	r3, #2
 80041f0:	aa1a      	add	r2, sp, #104	@ 0x68
 80041f2:	4601      	mov	r1, r0
 80041f4:	9807      	ldr	r0, [sp, #28]
 80041f6:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80041fa:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80041fe:	f012 fdc3 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004202:	220b      	movs	r2, #11
        updateTextPosition();
 8004204:	9807      	ldr	r0, [sp, #28]
 8004206:	f8a4 2254 	strh.w	r2, [r4, #596]	@ 0x254
 800420a:	f7ff fdc5 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800420e:	9907      	ldr	r1, [sp, #28]
 8004210:	4638      	mov	r0, r7
 8004212:	f8c4 8244 	str.w	r8, [r4, #580]	@ 0x244
        colorPressed = col;
 8004216:	e9c4 5596 	strd	r5, r5, [r4, #600]	@ 0x258
 800421a:	f00d fdb9 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Divide.setXY(651, 25);
 800421e:	2219      	movs	r2, #25
 8004220:	f240 218b 	movw	r1, #651	@ 0x28b
 8004224:	9808      	ldr	r0, [sp, #32]
 8004226:	f7ff fd85 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Divide.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800422a:	a819      	add	r0, sp, #100	@ 0x64
 800422c:	f04f 0302 	mov.w	r3, #2
 8004230:	aa1a      	add	r2, sp, #104	@ 0x68
 8004232:	4601      	mov	r1, r0
 8004234:	9808      	ldr	r0, [sp, #32]
 8004236:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800423a:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 800423e:	f012 fda3 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004242:	220c      	movs	r2, #12
        updateTextPosition();
 8004244:	9808      	ldr	r0, [sp, #32]
 8004246:	f8a4 229c 	strh.w	r2, [r4, #668]	@ 0x29c
 800424a:	f7ff fda5 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800424e:	9908      	ldr	r1, [sp, #32]
 8004250:	4638      	mov	r0, r7
        rotation = textRotation;
 8004252:	f884 62a8 	strb.w	r6, [r4, #680]	@ 0x2a8
 8004256:	f8c4 828c 	str.w	r8, [r4, #652]	@ 0x28c
        colorPressed = col;
 800425a:	e9c4 55a8 	strd	r5, r5, [r4, #672]	@ 0x2a0
 800425e:	f00d fd97 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Multiply.setXY(651, 140);
 8004262:	228c      	movs	r2, #140	@ 0x8c
 8004264:	f240 218b 	movw	r1, #651	@ 0x28b
 8004268:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800426a:	f7ff fd63 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Multiply.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800426e:	a819      	add	r0, sp, #100	@ 0x64
 8004270:	f04f 0302 	mov.w	r3, #2
 8004274:	aa1a      	add	r2, sp, #104	@ 0x68
 8004276:	4601      	mov	r1, r0
 8004278:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800427a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800427e:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004282:	f012 fd81 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004286:	220d      	movs	r2, #13
        updateTextPosition();
 8004288:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800428a:	f8a4 22e4 	strh.w	r2, [r4, #740]	@ 0x2e4
 800428e:	f7ff fd83 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004294:	4638      	mov	r0, r7
        rotation = textRotation;
 8004296:	f884 62f0 	strb.w	r6, [r4, #752]	@ 0x2f0
 800429a:	f8c4 82d4 	str.w	r8, [r4, #724]	@ 0x2d4
        colorPressed = col;
 800429e:	e9c4 55ba 	strd	r5, r5, [r4, #744]	@ 0x2e8
 80042a2:	f00d fd75 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ROATATED_ID));
 80042a6:	a81a      	add	r0, sp, #104	@ 0x68
 80042a8:	230a      	movs	r3, #10
 80042aa:	4601      	mov	r1, r0
 80042ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80042ae:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 80042b2:	f012 fea2 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 80042b6:	2337      	movs	r3, #55	@ 0x37
 80042b8:	2210      	movs	r2, #16
 80042ba:	2117      	movs	r1, #23
 80042bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f7ff fd45 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80042c4:	4649      	mov	r1, r9
 80042c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80042c8:	f011 ff77 	bl	80161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80042cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042ce:	4638      	mov	r0, r7
 80042d0:	f00d fd5e 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80042d4:	220e      	movs	r2, #14
 80042d6:	2114      	movs	r1, #20
 80042d8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80042da:	f7ff fd2b 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 80042de:	a819      	add	r0, sp, #100	@ 0x64
 80042e0:	aa1a      	add	r2, sp, #104	@ 0x68
 80042e2:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80042e6:	4601      	mov	r1, r0
 80042e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80042ea:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80042ee:	f012 fd4b 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80042f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80042f4:	4638      	mov	r0, r7
 80042f6:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
 80042fa:	f04f 0a11 	mov.w	sl, #17
 80042fe:	f00d fd47 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_9.setXY(208, 137);
 8004302:	2289      	movs	r2, #137	@ 0x89
 8004304:	21d0      	movs	r1, #208	@ 0xd0
 8004306:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004308:	f7ff fd14 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800430c:	a819      	add	r0, sp, #100	@ 0x64
 800430e:	aa1a      	add	r2, sp, #104	@ 0x68
 8004310:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004314:	4601      	mov	r1, r0
 8004316:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004318:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800431c:	f012 fd34 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004320:	2318      	movs	r3, #24
        updateTextPosition();
 8004322:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004324:	f8a4 3390 	strh.w	r3, [r4, #912]	@ 0x390
 8004328:	f7ff fd36 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800432c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800432e:	4638      	mov	r0, r7
        rotation = textRotation;
 8004330:	f884 639c 	strb.w	r6, [r4, #924]	@ 0x39c
 8004334:	f8c4 8380 	str.w	r8, [r4, #896]	@ 0x380
        colorPressed = col;
 8004338:	e9c4 55e5 	strd	r5, r5, [r4, #916]	@ 0x394
 800433c:	f00d fd28 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_8.setXY(208, 247);
 8004340:	22f7      	movs	r2, #247	@ 0xf7
 8004342:	21d0      	movs	r1, #208	@ 0xd0
 8004344:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004346:	f7ff fcf5 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800434a:	a819      	add	r0, sp, #100	@ 0x64
 800434c:	aa1a      	add	r2, sp, #104	@ 0x68
 800434e:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004352:	4601      	mov	r1, r0
 8004354:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004356:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800435a:	f012 fd15 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800435e:	2317      	movs	r3, #23
        updateTextPosition();
 8004360:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004362:	f8a4 33d8 	strh.w	r3, [r4, #984]	@ 0x3d8
 8004366:	f7ff fd17 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800436a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800436c:	4638      	mov	r0, r7
        rotation = textRotation;
 800436e:	f884 63e4 	strb.w	r6, [r4, #996]	@ 0x3e4
 8004372:	f8c4 83c8 	str.w	r8, [r4, #968]	@ 0x3c8
        colorPressed = col;
 8004376:	e9c4 55f7 	strd	r5, r5, [r4, #988]	@ 0x3dc
 800437a:	f00d fd09 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_7.setXY(208, 356);
 800437e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004382:	21d0      	movs	r1, #208	@ 0xd0
 8004384:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004386:	f7ff fcd5 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800438a:	a819      	add	r0, sp, #100	@ 0x64
 800438c:	aa1a      	add	r2, sp, #104	@ 0x68
 800438e:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004392:	4601      	mov	r1, r0
 8004394:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004396:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800439a:	f012 fcf5 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800439e:	2316      	movs	r3, #22
        updateTextPosition();
 80043a0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80043a2:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
 80043a6:	f7ff fcf7 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80043aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80043ac:	4638      	mov	r0, r7
        color = col;
 80043ae:	f8c4 5424 	str.w	r5, [r4, #1060]	@ 0x424
        colorPressed = col;
 80043b2:	f8c4 5428 	str.w	r5, [r4, #1064]	@ 0x428
        rotation = textRotation;
 80043b6:	f884 642c 	strb.w	r6, [r4, #1068]	@ 0x42c
 80043ba:	f8c4 8410 	str.w	r8, [r4, #1040]	@ 0x410
 80043be:	f00d fce7 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_6.setXY(319, 137);
 80043c2:	2289      	movs	r2, #137	@ 0x89
 80043c4:	f240 113f 	movw	r1, #319	@ 0x13f
 80043c8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80043ca:	f7ff fcb3 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80043ce:	a819      	add	r0, sp, #100	@ 0x64
 80043d0:	aa1a      	add	r2, sp, #104	@ 0x68
 80043d2:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80043d6:	4601      	mov	r1, r0
 80043d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80043da:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80043de:	f012 fcd3 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80043e2:	2315      	movs	r3, #21
        updateTextPosition();
 80043e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80043e6:	f8a4 3468 	strh.w	r3, [r4, #1128]	@ 0x468
 80043ea:	f7ff fcd5 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80043ee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043f0:	4638      	mov	r0, r7
        color = col;
 80043f2:	f8c4 546c 	str.w	r5, [r4, #1132]	@ 0x46c
        colorPressed = col;
 80043f6:	f8c4 5470 	str.w	r5, [r4, #1136]	@ 0x470
        rotation = textRotation;
 80043fa:	f884 6474 	strb.w	r6, [r4, #1140]	@ 0x474
 80043fe:	f8c4 8458 	str.w	r8, [r4, #1112]	@ 0x458
 8004402:	f00d fcc5 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_5.setXY(319, 247);
 8004406:	22f7      	movs	r2, #247	@ 0xf7
 8004408:	f240 113f 	movw	r1, #319	@ 0x13f
 800440c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800440e:	f7ff fc91 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004412:	a819      	add	r0, sp, #100	@ 0x64
 8004414:	aa1a      	add	r2, sp, #104	@ 0x68
 8004416:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800441a:	4601      	mov	r1, r0
 800441c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800441e:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004422:	f012 fcb1 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004426:	2314      	movs	r3, #20
        updateTextPosition();
 8004428:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800442a:	f8a4 34b0 	strh.w	r3, [r4, #1200]	@ 0x4b0
 800442e:	f7ff fcb3 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004432:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004434:	4638      	mov	r0, r7
        color = col;
 8004436:	f8c4 54b4 	str.w	r5, [r4, #1204]	@ 0x4b4
        colorPressed = col;
 800443a:	f8c4 54b8 	str.w	r5, [r4, #1208]	@ 0x4b8
        rotation = textRotation;
 800443e:	f884 64bc 	strb.w	r6, [r4, #1212]	@ 0x4bc
 8004442:	f8c4 84a0 	str.w	r8, [r4, #1184]	@ 0x4a0
 8004446:	f00d fca3 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_4.setXY(319, 356);
 800444a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800444e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004452:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004454:	f7ff fc6e 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004458:	a819      	add	r0, sp, #100	@ 0x64
 800445a:	aa1a      	add	r2, sp, #104	@ 0x68
 800445c:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004460:	4601      	mov	r1, r0
 8004462:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004464:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004468:	f012 fc8e 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800446c:	2313      	movs	r3, #19
        updateTextPosition();
 800446e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004470:	f8a4 34f8 	strh.w	r3, [r4, #1272]	@ 0x4f8
 8004474:	f7ff fc90 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004478:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800447a:	4638      	mov	r0, r7
        color = col;
 800447c:	f8c4 54fc 	str.w	r5, [r4, #1276]	@ 0x4fc
        colorPressed = col;
 8004480:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
        rotation = textRotation;
 8004484:	f884 6504 	strb.w	r6, [r4, #1284]	@ 0x504
 8004488:	f8c4 84e8 	str.w	r8, [r4, #1256]	@ 0x4e8
 800448c:	f00d fc80 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_3.setXY(430, 356);
 8004490:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004494:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004498:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800449a:	f7ff fc4b 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800449e:	a819      	add	r0, sp, #100	@ 0x64
 80044a0:	aa1a      	add	r2, sp, #104	@ 0x68
 80044a2:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80044a6:	4601      	mov	r1, r0
 80044a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80044aa:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80044ae:	f012 fc6b 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80044b2:	2312      	movs	r3, #18
        updateTextPosition();
 80044b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80044b6:	f8a4 3540 	strh.w	r3, [r4, #1344]	@ 0x540
 80044ba:	f7ff fc6d 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80044be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80044c0:	4638      	mov	r0, r7
        color = col;
 80044c2:	f8c4 5544 	str.w	r5, [r4, #1348]	@ 0x544
        colorPressed = col;
 80044c6:	f8c4 5548 	str.w	r5, [r4, #1352]	@ 0x548
        rotation = textRotation;
 80044ca:	f884 654c 	strb.w	r6, [r4, #1356]	@ 0x54c
 80044ce:	f8c4 8530 	str.w	r8, [r4, #1328]	@ 0x530
 80044d2:	f00d fc5d 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_2.setXY(430, 247);
 80044d6:	22f7      	movs	r2, #247	@ 0xf7
 80044d8:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80044dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044de:	f7ff fc29 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80044e2:	a819      	add	r0, sp, #100	@ 0x64
 80044e4:	aa1a      	add	r2, sp, #104	@ 0x68
 80044e6:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80044ea:	4601      	mov	r1, r0
 80044ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044ee:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80044f2:	f012 fc49 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80044f6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044f8:	f8a4 a588 	strh.w	sl, [r4, #1416]	@ 0x588
 80044fc:	f7ff fc4c 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004500:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004502:	4638      	mov	r0, r7
        color = col;
 8004504:	f8c4 558c 	str.w	r5, [r4, #1420]	@ 0x58c
        colorPressed = col;
 8004508:	f8c4 5590 	str.w	r5, [r4, #1424]	@ 0x590
        rotation = textRotation;
 800450c:	f884 6594 	strb.w	r6, [r4, #1428]	@ 0x594
 8004510:	f8c4 8578 	str.w	r8, [r4, #1400]	@ 0x578
 8004514:	f00d fc3c 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_1.setXY(430, 140);
 8004518:	228c      	movs	r2, #140	@ 0x8c
 800451a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800451e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004520:	f7ff fc08 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004524:	a819      	add	r0, sp, #100	@ 0x64
 8004526:	aa1a      	add	r2, sp, #104	@ 0x68
 8004528:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800452c:	4601      	mov	r1, r0
 800452e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004530:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004534:	f012 fc28 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004538:	2310      	movs	r3, #16
        updateTextPosition();
 800453a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800453c:	f8a4 35d0 	strh.w	r3, [r4, #1488]	@ 0x5d0
 8004540:	f7ff fc2a 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004544:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004546:	4638      	mov	r0, r7
        color = col;
 8004548:	f8c4 55d4 	str.w	r5, [r4, #1492]	@ 0x5d4
        colorPressed = col;
 800454c:	f8c4 55d8 	str.w	r5, [r4, #1496]	@ 0x5d8
        rotation = textRotation;
 8004550:	f884 65dc 	strb.w	r6, [r4, #1500]	@ 0x5dc
 8004554:	f8c4 85c0 	str.w	r8, [r4, #1472]	@ 0x5c0
 8004558:	f00d fc1a 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Equals.setXY(541, 140);
 800455c:	228c      	movs	r2, #140	@ 0x8c
 800455e:	f240 211d 	movw	r1, #541	@ 0x21d
 8004562:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004564:	f7ff fbe6 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 8004568:	f04f 0107 	mov.w	r1, #7
 800456c:	f04f 0208 	mov.w	r2, #8
    CalculatorButton_Equals.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004570:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004572:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
 8004576:	a919      	add	r1, sp, #100	@ 0x64
 8004578:	f8ad 2068 	strh.w	r2, [sp, #104]	@ 0x68
 800457c:	aa1a      	add	r2, sp, #104	@ 0x68
 800457e:	f012 fc03 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004582:	230f      	movs	r3, #15
        updateTextPosition();
 8004584:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004586:	f8a4 3618 	strh.w	r3, [r4, #1560]	@ 0x618
 800458a:	f7ff fc05 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800458e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004590:	4638      	mov	r0, r7
        color = col;
 8004592:	f8c4 561c 	str.w	r5, [r4, #1564]	@ 0x61c
        colorPressed = col;
 8004596:	f8c4 5620 	str.w	r5, [r4, #1568]	@ 0x620
        rotation = textRotation;
 800459a:	f884 6624 	strb.w	r6, [r4, #1572]	@ 0x624
 800459e:	f8c4 8608 	str.w	r8, [r4, #1544]	@ 0x608
 80045a2:	f00d fbf5 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Comma.setXY(541, 356);
 80045a6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80045aa:	f240 211d 	movw	r1, #541	@ 0x21d
 80045ae:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80045b0:	f7ff fbc0 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 80045b4:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_Comma.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80045b8:	aa1a      	add	r2, sp, #104	@ 0x68
 80045ba:	a919      	add	r1, sp, #100	@ 0x64
 80045bc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80045be:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80045c2:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80045c6:	f012 fbdf 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80045ca:	230e      	movs	r3, #14
        updateTextPosition();
 80045cc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80045ce:	f8a4 3660 	strh.w	r3, [r4, #1632]	@ 0x660
 80045d2:	f7ff fbe1 	bl	8003d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80045d6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80045d8:	4638      	mov	r0, r7
        color = col;
 80045da:	f8c4 5664 	str.w	r5, [r4, #1636]	@ 0x664
        colorPressed = col;
 80045de:	f8c4 5668 	str.w	r5, [r4, #1640]	@ 0x668
        rotation = textRotation;
 80045e2:	f884 666c 	strb.w	r6, [r4, #1644]	@ 0x66c
 80045e6:	f8c4 8650 	str.w	r8, [r4, #1616]	@ 0x650
 80045ea:	f00d fbd1 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    TextResult.setPosition(109, 25, 89, 431);
 80045ee:	f240 13af 	movw	r3, #431	@ 0x1af
 80045f2:	2219      	movs	r2, #25
 80045f4:	216d      	movs	r1, #109	@ 0x6d
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2359      	movs	r3, #89	@ 0x59
 80045fa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80045fc:	f7ff fba7 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <_ZN18CalculatorViewBaseC1Ev+0x85c>)
        color = newColor;
 8004602:	f8c4 56a0 	str.w	r5, [r4, #1696]	@ 0x6a0
 8004606:	681b      	ldr	r3, [r3, #0]
        boundingArea = calculateBoundingArea();
 8004608:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
    Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YKNQ).getText());
 800460c:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
        linespace = space;
 8004610:	f8a4 96a4 	strh.w	r9, [r4, #1700]	@ 0x6a4
        rotation = textRotation;
 8004614:	f884 66a8 	strb.w	r6, [r4, #1704]	@ 0x6a8
        boundingArea = calculateBoundingArea();
 8004618:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
 800461c:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8004620:	b92b      	cbnz	r3, 800462e <_ZN18CalculatorViewBaseC1Ev+0x812>
 8004622:	4b16      	ldr	r3, [pc, #88]	@ (800467c <_ZN18CalculatorViewBaseC1Ev+0x860>)
 8004624:	2160      	movs	r1, #96	@ 0x60
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <_ZN18CalculatorViewBaseC1Ev+0x864>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004628:	4816      	ldr	r0, [pc, #88]	@ (8004684 <_ZN18CalculatorViewBaseC1Ev+0x868>)
 800462a:	f024 f8dd 	bl	80287e8 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800462e:	4b16      	ldr	r3, [pc, #88]	@ (8004688 <_ZN18CalculatorViewBaseC1Ev+0x86c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d803      	bhi.n	800463e <_ZN18CalculatorViewBaseC1Ev+0x822>
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <_ZN18CalculatorViewBaseC1Ev+0x870>)
 8004638:	2161      	movs	r1, #97	@ 0x61
 800463a:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <_ZN18CalculatorViewBaseC1Ev+0x864>)
 800463c:	e7f4      	b.n	8004628 <_ZN18CalculatorViewBaseC1Ev+0x80c>
        return texts->getText(typedTextId);
 800463e:	4b14      	ldr	r3, [pc, #80]	@ (8004690 <_ZN18CalculatorViewBaseC1Ev+0x874>)
 8004640:	2102      	movs	r1, #2
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f003 ffdc 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8004648:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <_ZN18CalculatorViewBaseC1Ev+0x878>)
 800464a:	4603      	mov	r3, r0
 800464c:	4651      	mov	r1, sl
 800464e:	4628      	mov	r0, r5
 8004650:	f018 fdc2 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004654:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <_ZN18CalculatorViewBaseC1Ev+0x87c>)
    TextResult.setTypedText(touchgfx::TypedText(T_TEXTRESULT));
 8004656:	a91a      	add	r1, sp, #104	@ 0x68
 8004658:	9817      	ldr	r0, [sp, #92]	@ 0x5c
        wc1 = value;
 800465a:	f8c4 56b8 	str.w	r5, [r4, #1720]	@ 0x6b8
 800465e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004660:	f8ad 606c 	strh.w	r6, [sp, #108]	@ 0x6c
 8004664:	f012 fb32 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004668:	4638      	mov	r0, r7
 800466a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800466c:	f00d fb90 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004670:	4620      	mov	r0, r4
 8004672:	b01d      	add	sp, #116	@ 0x74
 8004674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004678:	24028578 	.word	0x24028578
 800467c:	0802b650 	.word	0x0802b650
 8004680:	0802b760 	.word	0x0802b760
 8004684:	0802b6cd 	.word	0x0802b6cd
 8004688:	2402857c 	.word	0x2402857c
 800468c:	0802b722 	.word	0x0802b722
 8004690:	24028584 	.word	0x24028584
 8004694:	0802b7ab 	.word	0x0802b7ab
 8004698:	0802b820 	.word	0x0802b820

0800469c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 800469c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800469e:	4770      	bx	lr

080046a0 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80046a0:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 80046a4:	4770      	bx	lr

080046a6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 80046a6:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80046a8:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 80046aa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80046ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046b0:	4362      	muls	r2, r4
 80046b2:	4361      	muls	r1, r4
    }
 80046b4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80046b8:	4718      	bx	r3

080046ba <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 80046ba:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80046be:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80046c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 80046c4:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80046c6:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80046ca:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 80046ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	db1a      	blt.n	800470e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 80046d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046dc:	ee30 0a07 	vadd.f32	s0, s0, s14
 80046e0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80046e4:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 80046e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 80046ec:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	db1e      	blt.n	8004734 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 80046f6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80046fa:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80046fe:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004702:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004706:	4623      	mov	r3, r4
    }
 8004708:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800470c:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800470e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004712:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004716:	ee17 3a10 	vmov	r3, s14
 800471a:	3b01      	subs	r3, #1
 800471c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004720:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004724:	ee30 0a26 	vadd.f32	s0, s0, s13
 8004728:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800472c:	ee10 1a10 	vmov	r1, s0
 8004730:	4419      	add	r1, r3
 8004732:	e7d9      	b.n	80046e8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8004734:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800473c:	ee17 3a90 	vmov	r3, s15
 8004740:	3b01      	subs	r3, #1
 8004742:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004746:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800474a:	ee70 0a87 	vadd.f32	s1, s1, s14
 800474e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004752:	ee10 2a90 	vmov	r2, s1
 8004756:	441a      	add	r2, r3
 8004758:	e7d5      	b.n	8004706 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

0800475a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800475a:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800475c:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 800475e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004764:	4362      	muls	r2, r4
    }
 8004766:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800476a:	4718      	bx	r3

0800476c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 800476c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004770:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8004776:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004778:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800477c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8004780:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	db0b      	blt.n	80047a2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 800478a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800478e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004792:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004796:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800479a:	4623      	mov	r3, r4
    }
 800479c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80047a0:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80047a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047aa:	ee17 3a90 	vmov	r3, s15
 80047ae:	3b01      	subs	r3, #1
 80047b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80047b4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80047b8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80047bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80047c0:	ee10 2a10 	vmov	r2, s0
 80047c4:	441a      	add	r2, r3
 80047c6:	e7e8      	b.n	800479a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

080047c8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 80047c8:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80047ca:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 80047cc:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80047ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047d2:	4362      	muls	r2, r4
 80047d4:	4361      	muls	r1, r4
    }
 80047d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80047da:	4718      	bx	r3

080047dc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 80047dc:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047e0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80047e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 80047e6:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80047e8:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047ec:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 80047f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	db1a      	blt.n	8004830 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 80047fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047fe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004802:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004806:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800480a:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800480e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	db1e      	blt.n	8004856 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8004818:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800481c:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8004820:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004824:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004828:	4623      	mov	r3, r4
    }
 800482a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800482e:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004830:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004834:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004838:	ee17 3a10 	vmov	r3, s14
 800483c:	3b01      	subs	r3, #1
 800483e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004842:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004846:	ee30 0a26 	vadd.f32	s0, s0, s13
 800484a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800484e:	ee10 1a10 	vmov	r1, s0
 8004852:	4419      	add	r1, r3
 8004854:	e7d9      	b.n	800480a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8004856:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800485a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800485e:	ee17 3a90 	vmov	r3, s15
 8004862:	3b01      	subs	r3, #1
 8004864:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004868:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800486c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8004870:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004874:	ee10 2a90 	vmov	r2, s1
 8004878:	441a      	add	r2, r3
 800487a:	e7d5      	b.n	8004828 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

0800487c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800487c:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800487e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8004880:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8004882:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004886:	4362      	muls	r2, r4
    }
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800488c:	4718      	bx	r3

0800488e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 800488e:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004892:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8004898:	b410      	push	{r4}
        const float fs = f * (float)scale;
 800489a:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800489e:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 80048a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	db0b      	blt.n	80048c4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80048ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80048b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80048b8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80048bc:	4623      	mov	r3, r4
    }
 80048be:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80048c2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80048c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80048c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048cc:	ee17 3a90 	vmov	r3, s15
 80048d0:	3b01      	subs	r3, #1
 80048d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80048d6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80048da:	ee30 0a07 	vadd.f32	s0, s0, s14
 80048de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048e2:	ee10 2a10 	vmov	r2, s0
 80048e6:	441a      	add	r2, r3
 80048e8:	e7e8      	b.n	80048bc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

080048ea <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 80048ea:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 80048ee:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db07      	blt.n	8004904 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80048f4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80048f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80048fc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004900:	1040      	asrs	r0, r0, #1
 8004902:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004904:	f06f 0101 	mvn.w	r1, #1
 8004908:	fb01 2003 	mla	r0, r1, r3, r2
 800490c:	3801      	subs	r0, #1
 800490e:	fb90 f0f2 	sdiv	r0, r0, r2
 8004912:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004916:	1040      	asrs	r0, r0, #1
 8004918:	4240      	negs	r0, r0
    }
 800491a:	4770      	bx	lr

0800491c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 800491c:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8004920:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8004924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004928:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800492c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004930:	4770      	bx	lr

08004932 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8004932:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8004936:	4770      	bx	lr

08004938 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8004938:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 800493c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 800493e:	2b00      	cmp	r3, #0
 8004940:	db07      	blt.n	8004952 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004942:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004946:	fb90 f0f2 	sdiv	r0, r0, r2
 800494a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800494e:	1040      	asrs	r0, r0, #1
 8004950:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004952:	f06f 0101 	mvn.w	r1, #1
 8004956:	fb01 2003 	mla	r0, r1, r3, r2
 800495a:	3801      	subs	r0, #1
 800495c:	fb90 f0f2 	sdiv	r0, r0, r2
 8004960:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004964:	1040      	asrs	r0, r0, #1
 8004966:	4240      	negs	r0, r0
    }
 8004968:	4770      	bx	lr

0800496a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 800496a:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 800496e:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800497a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800497e:	4770      	bx	lr

08004980 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8004980:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 8004984:	4770      	bx	lr

08004986 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8004986:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 800498a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 800498c:	2b00      	cmp	r3, #0
 800498e:	db07      	blt.n	80049a0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004990:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004994:	fb90 f0f2 	sdiv	r0, r0, r2
 8004998:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800499c:	1040      	asrs	r0, r0, #1
 800499e:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80049a0:	f06f 0101 	mvn.w	r1, #1
 80049a4:	fb01 2003 	mla	r0, r1, r3, r2
 80049a8:	3801      	subs	r0, #1
 80049aa:	fb90 f0f2 	sdiv	r0, r0, r2
 80049ae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80049b2:	1040      	asrs	r0, r0, #1
 80049b4:	4240      	negs	r0, r0
    }
 80049b6:	4770      	bx	lr

080049b8 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80049b8:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 80049bc:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80049c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80049c8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80049cc:	4770      	bx	lr

080049ce <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 80049ce:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 80049d2:	4770      	bx	lr

080049d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 80049d4:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 80049d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db07      	blt.n	80049ee <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80049de:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80049e2:	fb90 f0f2 	sdiv	r0, r0, r2
 80049e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80049ea:	1040      	asrs	r0, r0, #1
 80049ec:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80049ee:	f06f 0101 	mvn.w	r1, #1
 80049f2:	fb01 2003 	mla	r0, r1, r3, r2
 80049f6:	3801      	subs	r0, #1
 80049f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80049fc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004a00:	1040      	asrs	r0, r0, #1
 8004a02:	4240      	negs	r0, r0
    }
 8004a04:	4770      	bx	lr

08004a06 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8004a06:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 8004a0a:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8004a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a12:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004a16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004a1a:	4770      	bx	lr

08004a1c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8004a1c:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 8004a20:	4770      	bx	lr

08004a22 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8004a22:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 8004a2c:	460d      	mov	r5, r1
 8004a2e:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8004a30:	4798      	blx	r3
        setScaleY(scale, updateData);
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	4632      	mov	r2, r6
 8004a36:	4629      	mov	r1, r5
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8004a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8004a42:	4718      	bx	r3

08004a44 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8004a44:	6803      	ldr	r3, [r0, #0]
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4a:	4718      	bx	r3

08004a4c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8004a4c:	6803      	ldr	r3, [r0, #0]
 8004a4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a52:	4718      	bx	r3

08004a54 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8004a54:	6803      	ldr	r3, [r0, #0]
 8004a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a5a:	4718      	bx	r3

08004a5c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a5c:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004a5e:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8004a60:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8004a66:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8004a68:	db0e      	blt.n	8004a88 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8004a6a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004a6e:	fb92 f1f4 	sdiv	r1, r2, r4
 8004a72:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004a76:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a78:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8004a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a80:	3a01      	subs	r2, #1
 8004a82:	440a      	add	r2, r1
 8004a84:	4249      	negs	r1, r1
 8004a86:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004a88:	f06f 0101 	mvn.w	r1, #1
 8004a8c:	fb01 4102 	mla	r1, r1, r2, r4
 8004a90:	3901      	subs	r1, #1
 8004a92:	fb91 f1f4 	sdiv	r1, r1, r4
 8004a96:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004a9a:	1049      	asrs	r1, r1, #1
 8004a9c:	4249      	negs	r1, r1
 8004a9e:	e7eb      	b.n	8004a78 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08004aa0 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8004aa0:	6803      	ldr	r3, [r0, #0]
 8004aa2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004aa6:	4718      	bx	r3

08004aa8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8004aa8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8004aaa:	6803      	ldr	r3, [r0, #0]
 8004aac:	4351      	muls	r1, r2
 8004aae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ab2:	4718      	bx	r3

08004ab4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8004ab4:	6803      	ldr	r3, [r0, #0]
 8004ab6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8004aba:	4718      	bx	r3

08004abc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8004abc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8004ac0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004ac6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 8004aca:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004ace:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	db08      	blt.n	8004aea <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8004ad8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004adc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004ae0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ae4:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004ae8:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004aea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004af2:	ee17 3a90 	vmov	r3, s15
 8004af6:	3b01      	subs	r3, #1
 8004af8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004afc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004b00:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004b04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b08:	ee10 1a10 	vmov	r1, s0
 8004b0c:	4419      	add	r1, r3
 8004b0e:	e7eb      	b.n	8004ae8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08004b10 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8004b10:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 8004b14:	4770      	bx	lr

08004b16 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8004b16:	6803      	ldr	r3, [r0, #0]
 8004b18:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004b1c:	4718      	bx	r3

08004b1e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8004b1e:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8004b20:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8004b22:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8004b26:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8004b28:	4798      	blx	r3
        if (i >= 0)
 8004b2a:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004b2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8004b2e:	db07      	blt.n	8004b40 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004b30:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004b34:	fb90 f0f3 	sdiv	r0, r0, r3
 8004b38:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004b3c:	1040      	asrs	r0, r0, #1
    }
 8004b3e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004b40:	f06f 0201 	mvn.w	r2, #1
 8004b44:	fb02 3000 	mla	r0, r2, r0, r3
 8004b48:	3801      	subs	r0, #1
 8004b4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8004b4e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004b52:	1040      	asrs	r0, r0, #1
 8004b54:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8004b56:	e7f2      	b.n	8004b3e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08004b58 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004b5e:	4718      	bx	r3

08004b60 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8004b60:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8004b66:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8004b6a:	4798      	blx	r3
 8004b6c:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8004b70:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8004b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b78:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004b7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004b80:	bd10      	pop	{r4, pc}

08004b82 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8004b82:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 8004b86:	4770      	bx	lr

08004b88 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8004b88:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	4351      	muls	r1, r2
 8004b8e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8004b92:	4718      	bx	r3

08004b94 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8004b94:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8004b98:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004b9e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 8004ba2:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004ba6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	db08      	blt.n	8004bc2 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8004bb0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004bb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004bb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004bbc:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004bc0:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004bc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bca:	ee17 3a90 	vmov	r3, s15
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004bd4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004bd8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004bdc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004be0:	ee10 1a10 	vmov	r1, s0
 8004be4:	4419      	add	r1, r3
 8004be6:	e7eb      	b.n	8004bc0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08004be8 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8004be8:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 8004bec:	4770      	bx	lr

08004bee <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8004bee:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8004bf0:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8004bf2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 8004bf6:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004bf8:	4798      	blx	r3
        if (i >= 0)
 8004bfa:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004bfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8004bfe:	db07      	blt.n	8004c10 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004c00:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004c04:	fb90 f0f3 	sdiv	r0, r0, r3
 8004c08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004c0c:	1040      	asrs	r0, r0, #1
    }
 8004c0e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004c10:	f06f 0201 	mvn.w	r2, #1
 8004c14:	fb02 3000 	mla	r0, r2, r0, r3
 8004c18:	3801      	subs	r0, #1
 8004c1a:	fb90 f0f3 	sdiv	r0, r0, r3
 8004c1e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004c22:	1040      	asrs	r0, r0, #1
 8004c24:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004c26:	e7f2      	b.n	8004c0e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08004c28 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8004c28:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8004c2e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8004c32:	4798      	blx	r3
 8004c34:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8004c38:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8004c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c40:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004c44:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8004c4a:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8004c4e:	4770      	bx	lr

08004c50 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8004c50:	4608      	mov	r0, r1
 8004c52:	4770      	bx	lr

08004c54 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c54:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004c56:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8004c58:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c5a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	4604      	mov	r4, r0
        if (i >= 0)
 8004c62:	db0e      	blt.n	8004c82 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8004c64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004c68:	fb91 f1f2 	sdiv	r1, r1, r2
 8004c6c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004c70:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c72:	b209      	sxth	r1, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4798      	blx	r3
 8004c78:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8004c7c:	fb02 3000 	mla	r0, r2, r0, r3
 8004c80:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004c82:	f06f 0001 	mvn.w	r0, #1
 8004c86:	fb00 2101 	mla	r1, r0, r1, r2
 8004c8a:	3901      	subs	r1, #1
 8004c8c:	fb91 f1f2 	sdiv	r1, r1, r2
 8004c90:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004c94:	1049      	asrs	r1, r1, #1
 8004c96:	4249      	negs	r1, r1
 8004c98:	e7eb      	b.n	8004c72 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

08004c9a <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 8004c9a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004c9c:	4770      	bx	lr

08004c9e <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8004c9e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8004ca0:	4770      	bx	lr

08004ca2 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8004ca2:	6803      	ldr	r3, [r0, #0]
 8004ca4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ca8:	4718      	bx	r3

08004caa <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8004cb0:	4718      	bx	r3

08004cb2 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8004cb2:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 8004cb4:	6803      	ldr	r3, [r0, #0]
 8004cb6:	4351      	muls	r1, r2
 8004cb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004cbc:	4718      	bx	r3

08004cbe <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004cbe:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8004cc0:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004cc2:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8004cc6:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004cc8:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 8004ccc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8004cd0:	4798      	blx	r3
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8004cd8:	4620      	mov	r0, r4
    }
 8004cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004cde:	4718      	bx	r3

08004ce0 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8004ce0:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 8004ce4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8004ce8:	4419      	add	r1, r3
    }
 8004cea:	1a08      	subs	r0, r1, r0
 8004cec:	4770      	bx	lr

08004cee <_ZN16DiagnoseViewBase11setupScreenEv>:
}

void DiagnoseViewBase::setupScreen()
{

}
 8004cee:	4770      	bx	lr

08004cf0 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004cf0:	4770      	bx	lr

08004cf2 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 8004cf2:	4770      	bx	lr

08004cf4 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004cf4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004cf6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004cf8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004cfa:	68c2      	ldr	r2, [r0, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	1055      	asrs	r5, r2, #1
 8004d00:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004d04:	07d2      	lsls	r2, r2, #31
 8004d06:	bf48      	it	mi
 8004d08:	5962      	ldrmi	r2, [r4, r5]
    }
 8004d0a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004d0c:	bf48      	it	mi
 8004d0e:	58d3      	ldrmi	r3, [r2, r3]
 8004d10:	4718      	bx	r3

08004d12 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004d12:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004d14:	6840      	ldr	r0, [r0, #4]
 8004d16:	b130      	cbz	r0, 8004d26 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	b91a      	cbnz	r2, 8004d24 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004d1c:	68d8      	ldr	r0, [r3, #12]
 8004d1e:	f000 0001 	and.w	r0, r0, #1
 8004d22:	4770      	bx	lr
 8004d24:	2001      	movs	r0, #1
    }
 8004d26:	4770      	bx	lr

08004d28 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8004d30:	f023 f9e2 	bl	80280f8 <_ZdlPvj>
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	2110      	movs	r1, #16
 8004d3e:	f023 f9db 	bl	80280f8 <_ZdlPvj>
 8004d42:	4620      	mov	r0, r4
 8004d44:	bd10      	pop	{r4, pc}
	...

08004d48 <_ZN16DiagnoseViewBaseD1Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <_ZN16DiagnoseViewBaseD1Ev+0x10>)
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004d50:	f013 f940 	bl	8017fd4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	0802bcac 	.word	0x0802bcac

08004d5c <_ZN16DiagnoseViewBaseD0Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <_ZN16DiagnoseViewBaseD0Ev+0x1c>)
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	4604      	mov	r4, r0
 8004d62:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004d64:	f013 f936 	bl	8017fd4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004d68:	f243 417c 	movw	r1, #13436	@ 0x347c
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f023 f9c3 	bl	80280f8 <_ZdlPvj>
 8004d72:	4620      	mov	r0, r4
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	bf00      	nop
 8004d78:	0802bcac 	.word	0x0802bcac

08004d7c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8004d7c:	b508      	push	{r3, lr}
        if (alpha > 0)
 8004d7e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004d82:	b10b      	cbz	r3, 8004d88 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8004d84:	f7fe fb21 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8004d88:	bd08      	pop	{r3, pc}
	...

08004d8c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004d8c:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8004d8e:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8004d90:	db03      	blt.n	8004d9a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8004d92:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 8004d96:	4294      	cmp	r4, r2
 8004d98:	dc06      	bgt.n	8004da8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8004d9a:	4b08      	ldr	r3, [pc, #32]	@ (8004dbc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8004d9c:	f240 6139 	movw	r1, #1593	@ 0x639
 8004da0:	4a07      	ldr	r2, [pc, #28]	@ (8004dc0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8004da2:	4808      	ldr	r0, [pc, #32]	@ (8004dc4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8004da4:	f023 fd20 	bl	80287e8 <__assert_func>
        return yValues[dataIndex(index)];
 8004da8:	6803      	ldr	r3, [r0, #0]
 8004daa:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 8004dae:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8004db2:	4798      	blx	r3
    }
 8004db4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	bf00      	nop
 8004dbc:	0802b9c8 	.word	0x0802b9c8
 8004dc0:	0802b9eb 	.word	0x0802b9eb
 8004dc4:	0802ba3a 	.word	0x0802ba3a

08004dc8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004dc8:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8004dce:	db03      	blt.n	8004dd8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8004dd0:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dc06      	bgt.n	8004de6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8004dd8:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8004dda:	f240 6133 	movw	r1, #1587	@ 0x633
 8004dde:	4a07      	ldr	r2, [pc, #28]	@ (8004dfc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8004de0:	4807      	ldr	r0, [pc, #28]	@ (8004e00 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8004de2:	f023 fd01 	bl	80287e8 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8004de6:	6803      	ldr	r3, [r0, #0]
 8004de8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8004dec:	4798      	blx	r3
 8004dee:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8004df2:	fb02 3000 	mla	r0, r2, r0, r3
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	0802b9c8 	.word	0x0802b9c8
 8004dfc:	0802baa5 	.word	0x0802baa5
 8004e00:	0802ba3a 	.word	0x0802ba3a

08004e04 <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void DiagnoseViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8004e04:	f200 409c 	addw	r0, r0, #1180	@ 0x49c
 8004e08:	4288      	cmp	r0, r1
{
 8004e0a:	b508      	push	{r3, lr}
    if (&src == &HomeButton)
 8004e0c:	d105      	bne.n	8004e1a <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~DiagnoseViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004e0e:	f014 fdaf 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
}
 8004e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenScreenNoTransition();
 8004e16:	f002 bd0f 	b.w	8007838 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
}
 8004e1a:	bd08      	pop	{r3, pc}

08004e1c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8004e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8004e1e:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8004e20:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8004e22:	f016 fb59 	bl	801b4d8 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8004e26:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004e28:	462a      	mov	r2, r5
 8004e2a:	9901      	ldr	r1, [sp, #4]
 8004e2c:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8004e30:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8004e34:	db04      	blt.n	8004e40 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004e36:	f016 fb6e 	bl	801b516 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8004e3a:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8004e3c:	b003      	add	sp, #12
 8004e3e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004e40:	f016 fb69 	bl	801b516 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8004e44:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8004e46:	e7f9      	b.n	8004e3c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08004e48 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004e48:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004e4a:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004e4e:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004e50:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8004e54:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8004e58:	4423      	add	r3, r4
 8004e5a:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8004e5c:	b22d      	sxth	r5, r5
 8004e5e:	442c      	add	r4, r5
 8004e60:	1e69      	subs	r1, r5, #1
 8004e62:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8004e66:	3c01      	subs	r4, #1
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	1af0      	subs	r0, r6, r3
 8004e6c:	f7ff ffd6 	bl	8004e1c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8004e70:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8004e74:	bd70      	pop	{r4, r5, r6, pc}

08004e76 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8004e76:	b538      	push	{r3, r4, r5, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004e7c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8004e80:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8004e84:	440b      	add	r3, r1
 8004e86:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8004e8a:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8004e8c:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8004e90:	b209      	sxth	r1, r1
 8004e92:	1a12      	subs	r2, r2, r0
 8004e94:	1a28      	subs	r0, r5, r0
 8004e96:	3901      	subs	r1, #1
 8004e98:	f7ff ffc0 	bl	8004e1c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8004e9c:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 8004ea0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004ea4:	bd38      	pop	{r3, r4, r5, pc}
	...

08004ea8 <_ZN16DiagnoseViewBaseC1Ev>:
DiagnoseViewBase::DiagnoseViewBase() :
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	4604      	mov	r4, r0
 8004eae:	b091      	sub	sp, #68	@ 0x44
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	f016 fcc7 	bl	801b844 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &DiagnoseViewBase::buttonCallbackHandler)
 8004eb6:	46a2      	mov	sl, r4
 8004eb8:	4be5      	ldr	r3, [pc, #916]	@ (8005250 <_ZN16DiagnoseViewBaseC1Ev+0x3a8>)
        : Widget(), alpha(255), color(0)
 8004eba:	2226      	movs	r2, #38	@ 0x26
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8004ec0:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8004ec4:	f84a 3b40 	str.w	r3, [sl], #64
 8004ec8:	4650      	mov	r0, sl
 8004eca:	f023 ff29 	bl	8028d20 <memset>
 8004ece:	4650      	mov	r0, sl
 8004ed0:	f7fe ff50 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8004ed4:	4bdf      	ldr	r3, [pc, #892]	@ (8005254 <_ZN16DiagnoseViewBaseC1Ev+0x3ac>)
 8004ed6:	f504 7982 	add.w	r9, r4, #260	@ 0x104
 8004eda:	4640      	mov	r0, r8
 8004edc:	6423      	str	r3, [r4, #64]	@ 0x40
 8004ede:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 8004ee0:	66a6      	str	r6, [r4, #104]	@ 0x68
 8004ee2:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8004ee6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8004eea:	f504 75be 	add.w	r5, r4, #380	@ 0x17c
 8004eee:	f00c fe8d 	bl	8011c0c <_ZN8touchgfx12DigitalClockC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004ef2:	2226      	movs	r2, #38	@ 0x26
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4648      	mov	r0, r9
 8004ef8:	f023 ff12 	bl	8028d20 <memset>
 8004efc:	4648      	mov	r0, r9
 8004efe:	f7fe ff39 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8004f02:	4bd5      	ldr	r3, [pc, #852]	@ (8005258 <_ZN16DiagnoseViewBaseC1Ev+0x3b0>)
 8004f04:	f504 72a6 	add.w	r2, r4, #332	@ 0x14c
 8004f08:	a90e      	add	r1, sp, #56	@ 0x38
 8004f0a:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
 8004f0e:	f04f 0b01 	mov.w	fp, #1
 8004f12:	4bd2      	ldr	r3, [pc, #840]	@ (800525c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
 8004f14:	4610      	mov	r0, r2
 8004f16:	f8a4 7130 	strh.w	r7, [r4, #304]	@ 0x130
 8004f1a:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8004f1e:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8004f22:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 8004f26:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	f8a4 613c 	strh.w	r6, [r4, #316]	@ 0x13c
 8004f32:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 8004f36:	9203      	str	r2, [sp, #12]
 8004f38:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
              text(0)
 8004f3c:	e9c4 3651 	strd	r3, r6, [r4, #324]	@ 0x144
 8004f40:	f011 f980 	bl	8016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8004f44:	4bc6      	ldr	r3, [pc, #792]	@ (8005260 <_ZN16DiagnoseViewBaseC1Ev+0x3b8>)
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f46:	2164      	movs	r1, #100	@ 0x64
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8004f4e:	f8c4 6178 	str.w	r6, [r4, #376]	@ 0x178
 8004f52:	f884 b170 	strb.w	fp, [r4, #368]	@ 0x170
 8004f56:	f010 fe31 	bl	8015bbc <_ZN8touchgfx17AbstractDataGraphC1Es>
 8004f5a:	4bc2      	ldr	r3, [pc, #776]	@ (8005264 <_ZN16DiagnoseViewBaseC1Ev+0x3bc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f60:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8004f64:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f68:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f6a:	e9c4 36b0 	strd	r3, r6, [r4, #704]	@ 0x2c0
 8004f6e:	e9c4 b6ae 	strd	fp, r6, [r4, #696]	@ 0x2b8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f72:	f7ff fb98 	bl	80046a6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8004f76:	f504 628b 	add.w	r2, r4, #1112	@ 0x458
 8004f7a:	4bbb      	ldr	r3, [pc, #748]	@ (8005268 <_ZN16DiagnoseViewBaseC1Ev+0x3c0>)
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	9206      	str	r2, [sp, #24]
 8004f80:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
 8004f84:	f010 fa7a 	bl	801547c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8004f88:	f504 6191 	add.w	r1, r4, #1160	@ 0x488
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8004f8c:	4bb7      	ldr	r3, [pc, #732]	@ (800526c <_ZN16DiagnoseViewBaseC1Ev+0x3c4>)
 8004f8e:	f04f 0202 	mov.w	r2, #2
 8004f92:	4608      	mov	r0, r1
 8004f94:	9107      	str	r1, [sp, #28]
 8004f96:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
 8004f9a:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8004f9e:	f7fe fbbb 	bl	8003718 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8004fa2:	4bb3      	ldr	r3, [pc, #716]	@ (8005270 <_ZN16DiagnoseViewBaseC1Ev+0x3c8>)
 8004fa4:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
        : Widget(), action(), pressed(false)
 8004fa8:	2226      	movs	r2, #38	@ 0x26
 8004faa:	f8c4 3488 	str.w	r3, [r4, #1160]	@ 0x488
 8004fae:	3324      	adds	r3, #36	@ 0x24
 8004fb0:	9104      	str	r1, [sp, #16]
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
 8004fb8:	9804      	ldr	r0, [sp, #16]
 8004fba:	f8c4 6494 	str.w	r6, [r4, #1172]	@ 0x494
 8004fbe:	f023 feaf 	bl	8028d20 <memset>
 8004fc2:	9804      	ldr	r0, [sp, #16]
 8004fc4:	f7fe fed6 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8004fc8:	f504 619a 	add.w	r1, r4, #1232	@ 0x4d0
 8004fcc:	4ba9      	ldr	r3, [pc, #676]	@ (8005274 <_ZN16DiagnoseViewBaseC1Ev+0x3cc>)
 8004fce:	4608      	mov	r0, r1
 8004fd0:	f8a4 74ca 	strh.w	r7, [r4, #1226]	@ 0x4ca
 8004fd4:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
 8004fd8:	f8a4 74cc 	strh.w	r7, [r4, #1228]	@ 0x4cc
 8004fdc:	f884 74ce 	strb.w	r7, [r4, #1230]	@ 0x4ce
 8004fe0:	1d27      	adds	r7, r4, #4
 8004fe2:	f8c4 64c4 	str.w	r6, [r4, #1220]	@ 0x4c4
 8004fe6:	f884 64c8 	strb.w	r6, [r4, #1224]	@ 0x4c8
 8004fea:	f884 b4c0 	strb.w	fp, [r4, #1216]	@ 0x4c0
 8004fee:	9105      	str	r1, [sp, #20]
 8004ff0:	f00d fc78 	bl	80128e4 <_ZN8touchgfx19ScrollableContainerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004ff4:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8004ff8:	4a9f      	ldr	r2, [pc, #636]	@ (8005278 <_ZN16DiagnoseViewBaseC1Ev+0x3d0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8004ffa:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8004ffe:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
 8005002:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
 8005006:	4a9d      	ldr	r2, [pc, #628]	@ (800527c <_ZN16DiagnoseViewBaseC1Ev+0x3d4>)
 8005008:	f8c3 4470 	str.w	r4, [r3, #1136]	@ 0x470
 800500c:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
 8005010:	f8c3 6478 	str.w	r6, [r3, #1144]	@ 0x478
 8005014:	f012 ffd4 	bl	8017fc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8005018:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800501c:	4632      	mov	r2, r6
 800501e:	4650      	mov	r0, sl
 8005020:	4631      	mov	r1, r6
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005028:	f7fe fe91 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800502c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005030:	4651      	mov	r1, sl
 8005032:	4638      	mov	r0, r7
 8005034:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005036:	f00c feab 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseClock.setPosition(529, 12, 256, 72);
 800503a:	2348      	movs	r3, #72	@ 0x48
 800503c:	f8df a258 	ldr.w	sl, [pc, #600]	@ 8005298 <_ZN16DiagnoseViewBaseC1Ev+0x3f0>
 8005040:	220c      	movs	r2, #12
 8005042:	4640      	mov	r0, r8
 8005044:	f240 2111 	movw	r1, #529	@ 0x211
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800504e:	f7fe fe7e 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8005052:	4640      	mov	r0, r8
 8005054:	4651      	mov	r1, sl
 8005056:	f00c fd17 	bl	8011a88 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 800505a:	4b80      	ldr	r3, [pc, #512]	@ (800525c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RGBC));
 800505c:	4640      	mov	r0, r8
 800505e:	a90e      	add	r1, sp, #56	@ 0x38
 8005060:	930e      	str	r3, [sp, #56]	@ 0x38
 8005062:	231b      	movs	r3, #27
 8005064:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8005068:	f00c fd21 	bl	8011aae <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    DiagnoseClock.displayLeadingZeroForHourIndicator(true);
 800506c:	4640      	mov	r0, r8
 800506e:	4659      	mov	r1, fp
 8005070:	f00c fe1a 	bl	8011ca8 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    DiagnoseClock.setTime24Hour(10, 10, 0);
 8005074:	220a      	movs	r2, #10
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8005076:	2303      	movs	r3, #3
 8005078:	4640      	mov	r0, r8
 800507a:	4611      	mov	r1, r2
 800507c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8005080:	4633      	mov	r3, r6
 8005082:	f00c fe14 	bl	8011cae <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8005086:	4641      	mov	r1, r8
 8005088:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 800508a:	f10d 0820 	add.w	r8, sp, #32
 800508e:	f00c fe7f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseTitile.setPosition(0, 12, 800, 62);
 8005092:	233e      	movs	r3, #62	@ 0x3e
 8005094:	220c      	movs	r2, #12
 8005096:	4631      	mov	r1, r6
 8005098:	4648      	mov	r0, r9
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80050a0:	f7fe fe55 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80050a4:	4649      	mov	r1, r9
 80050a6:	4640      	mov	r0, r8
        color = newColor;
 80050a8:	f8c4 a134 	str.w	sl, [r4, #308]	@ 0x134
        linespace = space;
 80050ac:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
        boundingArea = calculateBoundingArea();
 80050b0:	f011 fb72 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80050b4:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80050b8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80050bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80050c0:	4b66      	ldr	r3, [pc, #408]	@ (800525c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseTitile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HCE1));
 80050c2:	a90e      	add	r1, sp, #56	@ 0x38
 80050c4:	4648      	mov	r0, r9
 80050c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80050c8:	231c      	movs	r3, #28
 80050ca:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 80050ce:	f011 fdfd 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80050d2:	4649      	mov	r1, r9
 80050d4:	4638      	mov	r0, r7
 80050d6:	f00c fe5b 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80050da:	2309      	movs	r3, #9
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
 80050dc:	a90e      	add	r1, sp, #56	@ 0x38
 80050de:	9803      	ldr	r0, [sp, #12]
 80050e0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80050e4:	f011 ff89 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 80050e8:	2337      	movs	r3, #55	@ 0x37
 80050ea:	2210      	movs	r2, #16
 80050ec:	2117      	movs	r1, #23
 80050ee:	9803      	ldr	r0, [sp, #12]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f7fe fe2c 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80050f6:	4631      	mov	r1, r6
 80050f8:	9803      	ldr	r0, [sp, #12]
 80050fa:	f011 f85e 	bl	80161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80050fe:	9903      	ldr	r1, [sp, #12]
 8005100:	4638      	mov	r0, r7
 8005102:	f00c fe45 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(391, 133, 322, 264);
 8005106:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800510a:	2285      	movs	r2, #133	@ 0x85
 800510c:	f240 1187 	movw	r1, #391	@ 0x187
 8005110:	4628      	mov	r0, r5
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8005118:	f7fe fe19 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 800511c:	4632      	mov	r2, r6
 800511e:	4659      	mov	r1, fp
 8005120:	4628      	mov	r0, r5
 8005122:	f7ff fc7e 	bl	8004a22 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8005126:	4633      	mov	r3, r6
 8005128:	4632      	mov	r2, r6
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	9600      	str	r6, [sp, #0]
 8005130:	f010 fcf5 	bl	8015b1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005134:	4633      	mov	r3, r6
 8005136:	4632      	mov	r2, r6
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	9600      	str	r6, [sp, #0]
 800513e:	f010 fc15 	bl	801596c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8005142:	2264      	movs	r2, #100	@ 0x64
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	f7ff fb3e 	bl	80047c8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 800514c:	4b4c      	ldr	r3, [pc, #304]	@ (8005280 <_ZN16DiagnoseViewBaseC1Ev+0x3d8>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800514e:	f04f 0202 	mov.w	r2, #2
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005152:	9906      	ldr	r1, [sp, #24]
 8005154:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8005158:	f249 7314 	movw	r3, #38676	@ 0x9714
 800515c:	4628      	mov	r0, r5
 800515e:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8005162:	f8a4 3498 	strh.w	r3, [r4, #1176]	@ 0x498
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8005166:	23c5      	movs	r3, #197	@ 0xc5
 8005168:	f884 349a 	strb.w	r3, [r4, #1178]	@ 0x49a
        canvasPainter = &painter;
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
 8005172:	f010 fc06 	bl	8015982 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8005176:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800517a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005284 <_ZN16DiagnoseViewBaseC1Ev+0x3dc>
 800517e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005182:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	f2c1 82d4 	blt.w	800673a <_ZN16DiagnoseViewBaseC1Ev+0x1892>
            return (int)(fs + 0.5f);
 8005192:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800519a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800519e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051a2:	4628      	mov	r0, r5
 80051a4:	f010 fdc7 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051a8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80051ac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005288 <_ZN16DiagnoseViewBaseC1Ev+0x3e0>
 80051b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	f2c1 82cf 	blt.w	8006762 <_ZN16DiagnoseViewBaseC1Ev+0x18ba>
            return (int)(fs + 0.5f);
 80051c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051d4:	4628      	mov	r0, r5
 80051d6:	f010 fdae 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80051de:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800528c <_ZN16DiagnoseViewBaseC1Ev+0x3e4>
 80051e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	f2c1 82ca 	blt.w	800678a <_ZN16DiagnoseViewBaseC1Ev+0x18e2>
            return (int)(fs + 0.5f);
 80051f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005202:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005206:	4628      	mov	r0, r5
 8005208:	f010 fd95 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800520c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005210:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005290 <_ZN16DiagnoseViewBaseC1Ev+0x3e8>
 8005214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005218:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800521c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	f2c1 82c5 	blt.w	80067b2 <_ZN16DiagnoseViewBaseC1Ev+0x190a>
            return (int)(fs + 0.5f);
 8005228:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800522c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005234:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005238:	4628      	mov	r0, r5
 800523a:	f010 fd7c 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800523e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005242:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005294 <_ZN16DiagnoseViewBaseC1Ev+0x3ec>
 8005246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524e:	e04b      	b.n	80052e8 <_ZN16DiagnoseViewBaseC1Ev+0x440>
 8005250:	0802bcac 	.word	0x0802bcac
 8005254:	0802d328 	.word	0x0802d328
 8005258:	0802d298 	.word	0x0802d298
 800525c:	0802b820 	.word	0x0802b820
 8005260:	0802b8c0 	.word	0x0802b8c0
 8005264:	0802cee0 	.word	0x0802cee0
 8005268:	0802bafc 	.word	0x0802bafc
 800526c:	0802d1a8 	.word	0x0802d1a8
 8005270:	0802ce10 	.word	0x0802ce10
 8005274:	0802d390 	.word	0x0802d390
 8005278:	0802bc94 	.word	0x0802bc94
 800527c:	08004e05 	.word	0x08004e05
 8005280:	ff1497c5 	.word	0xff1497c5
 8005284:	42977c6e 	.word	0x42977c6e
 8005288:	42896904 	.word	0x42896904
 800528c:	4260f242 	.word	0x4260f242
 8005290:	42219ceb 	.word	0x42219ceb
 8005294:	41c1580b 	.word	0x41c1580b
 8005298:	ffa3baff 	.word	0xffa3baff
 800529c:	412b3abd 	.word	0x412b3abd
 80052a0:	4028ee39 	.word	0x4028ee39
 80052a4:	3fbb0111 	.word	0x3fbb0111
 80052a8:	40e4c02f 	.word	0x40e4c02f
 80052ac:	4191a071 	.word	0x4191a071
 80052b0:	42001183 	.word	0x42001183
 80052b4:	4236064a 	.word	0x4236064a
 80052b8:	425f6b59 	.word	0x425f6b59
 80052bc:	4274bdec 	.word	0x4274bdec
 80052c0:	4273f7a5 	.word	0x4273f7a5
 80052c4:	4260ece7 	.word	0x4260ece7
 80052c8:	42443795 	.word	0x42443795
 80052cc:	4228f3d0 	.word	0x4228f3d0
 80052d0:	4219ddfc 	.word	0x4219ddfc
 80052d4:	421e8856 	.word	0x421e8856
 80052d8:	423958f2 	.word	0x423958f2
 80052dc:	4266cf1d 	.word	0x4266cf1d
 80052e0:	428f1fe1 	.word	0x428f1fe1
 80052e4:	42a9edc2 	.word	0x42a9edc2
        if (fs >= 0)
 80052e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f0:	f2c1 8273 	blt.w	80067da <_ZN16DiagnoseViewBaseC1Ev+0x1932>
            return (int)(fs + 0.5f);
 80052f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005300:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005304:	4628      	mov	r0, r5
 8005306:	f010 fd16 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800530a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800530e:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 800529c <_ZN16DiagnoseViewBaseC1Ev+0x3f4>
 8005312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005316:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800531a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	f2c1 826e 	blt.w	8006802 <_ZN16DiagnoseViewBaseC1Ev+0x195a>
            return (int)(fs + 0.5f);
 8005326:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800532a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800532e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005332:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005336:	4628      	mov	r0, r5
 8005338:	f010 fcfd 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800533c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005340:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 80052a0 <_ZN16DiagnoseViewBaseC1Ev+0x3f8>
 8005344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005348:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800534c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	f2c1 8269 	blt.w	800682a <_ZN16DiagnoseViewBaseC1Ev+0x1982>
            return (int)(fs + 0.5f);
 8005358:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800535c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005364:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005368:	4628      	mov	r0, r5
 800536a:	f010 fce4 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800536e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005372:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 80052a4 <_ZN16DiagnoseViewBaseC1Ev+0x3fc>
 8005376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800537e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	f2c1 8264 	blt.w	8006852 <_ZN16DiagnoseViewBaseC1Ev+0x19aa>
            return (int)(fs + 0.5f);
 800538a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800538e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005396:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800539a:	4628      	mov	r0, r5
 800539c:	f010 fccb 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053a0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80053a4:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 80052a8 <_ZN16DiagnoseViewBaseC1Ev+0x400>
 80053a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b8:	f2c1 825f 	blt.w	800687a <_ZN16DiagnoseViewBaseC1Ev+0x19d2>
            return (int)(fs + 0.5f);
 80053bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053cc:	4628      	mov	r0, r5
 80053ce:	f010 fcb2 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053d2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80053d6:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 80052ac <_ZN16DiagnoseViewBaseC1Ev+0x404>
 80053da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	f2c1 825a 	blt.w	80068a2 <_ZN16DiagnoseViewBaseC1Ev+0x19fa>
            return (int)(fs + 0.5f);
 80053ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053fa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053fe:	4628      	mov	r0, r5
 8005400:	f010 fc99 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005404:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005408:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 80052b0 <_ZN16DiagnoseViewBaseC1Ev+0x408>
 800540c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005410:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541c:	f2c1 8255 	blt.w	80068ca <_ZN16DiagnoseViewBaseC1Ev+0x1a22>
            return (int)(fs + 0.5f);
 8005420:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800542c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005430:	4628      	mov	r0, r5
 8005432:	f010 fc80 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005436:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800543a:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 80052b4 <_ZN16DiagnoseViewBaseC1Ev+0x40c>
 800543e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005442:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	f2c1 8250 	blt.w	80068f2 <_ZN16DiagnoseViewBaseC1Ev+0x1a4a>
            return (int)(fs + 0.5f);
 8005452:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800545a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005462:	4628      	mov	r0, r5
 8005464:	f010 fc67 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005468:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800546c:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 80052b8 <_ZN16DiagnoseViewBaseC1Ev+0x410>
 8005470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005474:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005480:	f2c1 824b 	blt.w	800691a <_ZN16DiagnoseViewBaseC1Ev+0x1a72>
            return (int)(fs + 0.5f);
 8005484:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800548c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005490:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005494:	4628      	mov	r0, r5
 8005496:	f010 fc4e 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800549a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800549e:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 80052bc <_ZN16DiagnoseViewBaseC1Ev+0x414>
 80054a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	f2c1 8246 	blt.w	8006942 <_ZN16DiagnoseViewBaseC1Ev+0x1a9a>
            return (int)(fs + 0.5f);
 80054b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054c6:	4628      	mov	r0, r5
 80054c8:	f010 fc35 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054cc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80054d0:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 80052c0 <_ZN16DiagnoseViewBaseC1Ev+0x418>
 80054d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	f2c1 8241 	blt.w	800696a <_ZN16DiagnoseViewBaseC1Ev+0x1ac2>
            return (int)(fs + 0.5f);
 80054e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054f8:	4628      	mov	r0, r5
 80054fa:	f010 fc1c 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054fe:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005502:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 80052c4 <_ZN16DiagnoseViewBaseC1Ev+0x41c>
 8005506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800550e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005516:	f2c1 823c 	blt.w	8006992 <_ZN16DiagnoseViewBaseC1Ev+0x1aea>
            return (int)(fs + 0.5f);
 800551a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800551e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005526:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800552a:	4628      	mov	r0, r5
 800552c:	f010 fc03 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005530:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005534:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 80052c8 <_ZN16DiagnoseViewBaseC1Ev+0x420>
 8005538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800553c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	f2c1 8237 	blt.w	80069ba <_ZN16DiagnoseViewBaseC1Ev+0x1b12>
            return (int)(fs + 0.5f);
 800554c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005558:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800555c:	4628      	mov	r0, r5
 800555e:	f010 fbea 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005562:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005566:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 80052cc <_ZN16DiagnoseViewBaseC1Ev+0x424>
 800556a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800556e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	f2c1 8232 	blt.w	80069e2 <_ZN16DiagnoseViewBaseC1Ev+0x1b3a>
            return (int)(fs + 0.5f);
 800557e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800558a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800558e:	4628      	mov	r0, r5
 8005590:	f010 fbd1 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005594:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005598:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 80052d0 <_ZN16DiagnoseViewBaseC1Ev+0x428>
 800559c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ac:	f2c1 822d 	blt.w	8006a0a <_ZN16DiagnoseViewBaseC1Ev+0x1b62>
            return (int)(fs + 0.5f);
 80055b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055bc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055c0:	4628      	mov	r0, r5
 80055c2:	f010 fbb8 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055c6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055ca:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 80052d4 <_ZN16DiagnoseViewBaseC1Ev+0x42c>
 80055ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	f2c1 8228 	blt.w	8006a32 <_ZN16DiagnoseViewBaseC1Ev+0x1b8a>
            return (int)(fs + 0.5f);
 80055e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055f2:	4628      	mov	r0, r5
 80055f4:	f010 fb9f 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055f8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055fc:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 80052d8 <_ZN16DiagnoseViewBaseC1Ev+0x430>
 8005600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005604:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005610:	f2c1 8223 	blt.w	8006a5a <_ZN16DiagnoseViewBaseC1Ev+0x1bb2>
            return (int)(fs + 0.5f);
 8005614:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800561c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005620:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005624:	4628      	mov	r0, r5
 8005626:	f010 fb86 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800562a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800562e:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 80052dc <_ZN16DiagnoseViewBaseC1Ev+0x434>
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800563a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	f2c1 821e 	blt.w	8006a82 <_ZN16DiagnoseViewBaseC1Ev+0x1bda>
            return (int)(fs + 0.5f);
 8005646:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800564a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800564e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005652:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005656:	4628      	mov	r0, r5
 8005658:	f010 fb6d 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800565c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005660:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 80052e0 <_ZN16DiagnoseViewBaseC1Ev+0x438>
 8005664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005668:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800566c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	f2c1 8219 	blt.w	8006aaa <_ZN16DiagnoseViewBaseC1Ev+0x1c02>
            return (int)(fs + 0.5f);
 8005678:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800567c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005684:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005688:	4628      	mov	r0, r5
 800568a:	f010 fb54 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800568e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005692:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 80052e4 <_ZN16DiagnoseViewBaseC1Ev+0x43c>
 8005696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800569e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a6:	f2c1 8214 	blt.w	8006ad2 <_ZN16DiagnoseViewBaseC1Ev+0x1c2a>
            return (int)(fs + 0.5f);
 80056aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80056ba:	4628      	mov	r0, r5
 80056bc:	f010 fb3b 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80056c0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80056c4:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8005a94 <_ZN16DiagnoseViewBaseC1Ev+0xbec>
 80056c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80056d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d8:	f2c1 820f 	blt.w	8006afa <_ZN16DiagnoseViewBaseC1Ev+0x1c52>
            return (int)(fs + 0.5f);
 80056dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80056ec:	4628      	mov	r0, r5
 80056ee:	f010 fb22 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80056f2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80056f6:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8005a98 <_ZN16DiagnoseViewBaseC1Ev+0xbf0>
 80056fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	f2c1 820a 	blt.w	8006b22 <_ZN16DiagnoseViewBaseC1Ev+0x1c7a>
            return (int)(fs + 0.5f);
 800570e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800571e:	4628      	mov	r0, r5
 8005720:	f010 fb09 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005724:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005728:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8005a9c <_ZN16DiagnoseViewBaseC1Ev+0xbf4>
 800572c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005730:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	f2c1 8205 	blt.w	8006b4a <_ZN16DiagnoseViewBaseC1Ev+0x1ca2>
            return (int)(fs + 0.5f);
 8005740:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800574c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005750:	4628      	mov	r0, r5
 8005752:	f010 faf0 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005756:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800575a:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8005aa0 <_ZN16DiagnoseViewBaseC1Ev+0xbf8>
 800575e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005762:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800576a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576e:	f2c1 8200 	blt.w	8006b72 <_ZN16DiagnoseViewBaseC1Ev+0x1cca>
            return (int)(fs + 0.5f);
 8005772:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800577e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005782:	4628      	mov	r0, r5
 8005784:	f010 fad7 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005788:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800578c:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8005aa4 <_ZN16DiagnoseViewBaseC1Ev+0xbfc>
 8005790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005794:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a0:	f2c1 81fb 	blt.w	8006b9a <_ZN16DiagnoseViewBaseC1Ev+0x1cf2>
            return (int)(fs + 0.5f);
 80057a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80057b4:	4628      	mov	r0, r5
 80057b6:	f010 fabe 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057ba:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057be:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005aa8 <_ZN16DiagnoseViewBaseC1Ev+0xc00>
 80057c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d2:	f2c1 81f6 	blt.w	8006bc2 <_ZN16DiagnoseViewBaseC1Ev+0x1d1a>
            return (int)(fs + 0.5f);
 80057d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80057e6:	4628      	mov	r0, r5
 80057e8:	f010 faa5 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057ec:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057f0:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8005aac <_ZN16DiagnoseViewBaseC1Ev+0xc04>
 80057f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	f2c1 81f1 	blt.w	8006bea <_ZN16DiagnoseViewBaseC1Ev+0x1d42>
            return (int)(fs + 0.5f);
 8005808:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800580c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005814:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005818:	4628      	mov	r0, r5
 800581a:	f010 fa8c 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800581e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005822:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8005ab0 <_ZN16DiagnoseViewBaseC1Ev+0xc08>
 8005826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800582e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	f2c1 81ec 	blt.w	8006c12 <_ZN16DiagnoseViewBaseC1Ev+0x1d6a>
            return (int)(fs + 0.5f);
 800583a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800583e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005846:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800584a:	4628      	mov	r0, r5
 800584c:	f010 fa73 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005850:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005854:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005ab4 <_ZN16DiagnoseViewBaseC1Ev+0xc0c>
 8005858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800585c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	f2c1 81e7 	blt.w	8006c3a <_ZN16DiagnoseViewBaseC1Ev+0x1d92>
            return (int)(fs + 0.5f);
 800586c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005878:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800587c:	4628      	mov	r0, r5
 800587e:	f010 fa5a 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005882:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005886:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8005ab8 <_ZN16DiagnoseViewBaseC1Ev+0xc10>
 800588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589a:	f2c1 81e2 	blt.w	8006c62 <_ZN16DiagnoseViewBaseC1Ev+0x1dba>
            return (int)(fs + 0.5f);
 800589e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058aa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058ae:	4628      	mov	r0, r5
 80058b0:	f010 fa41 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80058b4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005abc <_ZN16DiagnoseViewBaseC1Ev+0xc14>
 80058bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	f2c1 81dd 	blt.w	8006c8a <_ZN16DiagnoseViewBaseC1Ev+0x1de2>
            return (int)(fs + 0.5f);
 80058d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058e0:	4628      	mov	r0, r5
 80058e2:	f010 fa28 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80058e6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058ea:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8005ac0 <_ZN16DiagnoseViewBaseC1Ev+0xc18>
 80058ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	f2c1 81d8 	blt.w	8006cb2 <_ZN16DiagnoseViewBaseC1Ev+0x1e0a>
            return (int)(fs + 0.5f);
 8005902:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800590a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800590e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005912:	4628      	mov	r0, r5
 8005914:	f010 fa0f 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005918:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800591c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8005ac4 <_ZN16DiagnoseViewBaseC1Ev+0xc1c>
 8005920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005924:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005930:	f2c1 81d3 	blt.w	8006cda <_ZN16DiagnoseViewBaseC1Ev+0x1e32>
            return (int)(fs + 0.5f);
 8005934:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800593c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005940:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005944:	4628      	mov	r0, r5
 8005946:	f010 f9f6 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800594a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800594e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005ac8 <_ZN16DiagnoseViewBaseC1Ev+0xc20>
 8005952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005956:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800595a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005962:	f2c1 81ce 	blt.w	8006d02 <_ZN16DiagnoseViewBaseC1Ev+0x1e5a>
            return (int)(fs + 0.5f);
 8005966:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800596a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800596e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005972:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005976:	4628      	mov	r0, r5
 8005978:	f010 f9dd 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800597c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005980:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005acc <_ZN16DiagnoseViewBaseC1Ev+0xc24>
 8005984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005988:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800598c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005994:	f2c1 81c9 	blt.w	8006d2a <_ZN16DiagnoseViewBaseC1Ev+0x1e82>
            return (int)(fs + 0.5f);
 8005998:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800599c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059a8:	4628      	mov	r0, r5
 80059aa:	f010 f9c4 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059ae:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80059b2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005ad0 <_ZN16DiagnoseViewBaseC1Ev+0xc28>
 80059b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c6:	f2c1 81c4 	blt.w	8006d52 <_ZN16DiagnoseViewBaseC1Ev+0x1eaa>
            return (int)(fs + 0.5f);
 80059ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059da:	4628      	mov	r0, r5
 80059dc:	f010 f9ab 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059e0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80059e4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005ad4 <_ZN16DiagnoseViewBaseC1Ev+0xc2c>
 80059e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	f2c1 81bf 	blt.w	8006d7a <_ZN16DiagnoseViewBaseC1Ev+0x1ed2>
            return (int)(fs + 0.5f);
 80059fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a08:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f010 f992 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a12:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a16:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005ad8 <_ZN16DiagnoseViewBaseC1Ev+0xc30>
 8005a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	f2c1 81ba 	blt.w	8006da2 <_ZN16DiagnoseViewBaseC1Ev+0x1efa>
            return (int)(fs + 0.5f);
 8005a2e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f010 f979 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a44:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a48:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005adc <_ZN16DiagnoseViewBaseC1Ev+0xc34>
 8005a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a50:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	f2c1 81b5 	blt.w	8006dca <_ZN16DiagnoseViewBaseC1Ev+0x1f22>
            return (int)(fs + 0.5f);
 8005a60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a6c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a70:	4628      	mov	r0, r5
 8005a72:	f010 f960 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a76:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a7a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005ae0 <_ZN16DiagnoseViewBaseC1Ev+0xc38>
 8005a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a82:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	f2c1 81b0 	blt.w	8006df2 <_ZN16DiagnoseViewBaseC1Ev+0x1f4a>
 8005a92:	e04d      	b.n	8005b30 <_ZN16DiagnoseViewBaseC1Ev+0xc88>
 8005a94:	42bdc083 	.word	0x42bdc083
 8005a98:	42c5d585 	.word	0x42c5d585
 8005a9c:	42bfe1a1 	.word	0x42bfe1a1
 8005aa0:	42aca41f 	.word	0x42aca41f
 8005aa4:	428fbf28 	.word	0x428fbf28
 8005aa8:	425dbdf6 	.word	0x425dbdf6
 8005aac:	4220c971 	.word	0x4220c971
 8005ab0:	41e79e30 	.word	0x41e79e30
 8005ab4:	41bba58a 	.word	0x41bba58a
 8005ab8:	41c03ddf 	.word	0x41c03ddf
 8005abc:	41ec3b01 	.word	0x41ec3b01
 8005ac0:	4216a066 	.word	0x4216a066
 8005ac4:	423647a4 	.word	0x423647a4
 8005ac8:	424a6d26 	.word	0x424a6d26
 8005acc:	424bddc7 	.word	0x424bddc7
 8005ad0:	4238b3be 	.word	0x4238b3be
 8005ad4:	4214dd41 	.word	0x4214dd41
 8005ad8:	41d25c19 	.word	0x41d25c19
 8005adc:	41826af2 	.word	0x41826af2
 8005ae0:	412184c0 	.word	0x412184c0
 8005ae4:	411c803f 	.word	0x411c803f
 8005ae8:	4181733e 	.word	0x4181733e
 8005aec:	41e4c438 	.word	0x41e4c438
 8005af0:	4233c65c 	.word	0x4233c65c
 8005af4:	4278ee70 	.word	0x4278ee70
 8005af8:	429a8141 	.word	0x429a8141
 8005afc:	42aea312 	.word	0x42aea312
 8005b00:	42b5c855 	.word	0x42b5c855
 8005b04:	42afd4b1 	.word	0x42afd4b1
 8005b08:	429f9a06 	.word	0x429f9a06
 8005b0c:	428a19ce 	.word	0x428a19ce
 8005b10:	426a8187 	.word	0x426a8187
 8005b14:	424cd9b6 	.word	0x424cd9b6
 8005b18:	4242344c 	.word	0x4242344c
 8005b1c:	424c13d3 	.word	0x424c13d3
 8005b20:	426631d4 	.word	0x426631d4
 8005b24:	4283ced6 	.word	0x4283ced6
 8005b28:	4292837e 	.word	0x4292837e
 8005b2c:	4299d153 	.word	0x4299d153
            return (int)(fs + 0.5f);
 8005b30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b40:	4628      	mov	r0, r5
 8005b42:	f010 f8f8 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b46:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b4a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8005ae4 <_ZN16DiagnoseViewBaseC1Ev+0xc3c>
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5e:	f2c1 815c 	blt.w	8006e1a <_ZN16DiagnoseViewBaseC1Ev+0x1f72>
            return (int)(fs + 0.5f);
 8005b62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b6e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b72:	4628      	mov	r0, r5
 8005b74:	f010 f8df 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b78:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b7c:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8005ae8 <_ZN16DiagnoseViewBaseC1Ev+0xc40>
 8005b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b84:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	f2c1 8157 	blt.w	8006e42 <_ZN16DiagnoseViewBaseC1Ev+0x1f9a>
            return (int)(fs + 0.5f);
 8005b94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ba0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f010 f8c6 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005baa:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005bae:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8005aec <_ZN16DiagnoseViewBaseC1Ev+0xc44>
 8005bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	f2c1 8152 	blt.w	8006e6a <_ZN16DiagnoseViewBaseC1Ev+0x1fc2>
            return (int)(fs + 0.5f);
 8005bc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f010 f8ad 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bdc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005be0:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8005af0 <_ZN16DiagnoseViewBaseC1Ev+0xc48>
 8005be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf4:	f2c1 814d 	blt.w	8006e92 <_ZN16DiagnoseViewBaseC1Ev+0x1fea>
            return (int)(fs + 0.5f);
 8005bf8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c04:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f010 f894 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c0e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c12:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8005af4 <_ZN16DiagnoseViewBaseC1Ev+0xc4c>
 8005c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c26:	f2c1 8148 	blt.w	8006eba <_ZN16DiagnoseViewBaseC1Ev+0x2012>
            return (int)(fs + 0.5f);
 8005c2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c36:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f010 f87b 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c40:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c44:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8005af8 <_ZN16DiagnoseViewBaseC1Ev+0xc50>
 8005c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c58:	f2c1 8143 	blt.w	8006ee2 <_ZN16DiagnoseViewBaseC1Ev+0x203a>
            return (int)(fs + 0.5f);
 8005c5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c68:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f010 f862 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c72:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c76:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8005afc <_ZN16DiagnoseViewBaseC1Ev+0xc54>
 8005c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8a:	f2c1 813e 	blt.w	8006f0a <_ZN16DiagnoseViewBaseC1Ev+0x2062>
            return (int)(fs + 0.5f);
 8005c8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c9a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f010 f849 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ca4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ca8:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8005b00 <_ZN16DiagnoseViewBaseC1Ev+0xc58>
 8005cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbc:	f2c1 8139 	blt.w	8006f32 <_ZN16DiagnoseViewBaseC1Ev+0x208a>
            return (int)(fs + 0.5f);
 8005cc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ccc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f010 f830 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cd6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005cda:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8005b04 <_ZN16DiagnoseViewBaseC1Ev+0xc5c>
 8005cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cee:	f2c1 8134 	blt.w	8006f5a <_ZN16DiagnoseViewBaseC1Ev+0x20b2>
            return (int)(fs + 0.5f);
 8005cf2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d02:	4628      	mov	r0, r5
 8005d04:	f010 f817 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d08:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d0c:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8005b08 <_ZN16DiagnoseViewBaseC1Ev+0xc60>
 8005d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d20:	f2c1 812f 	blt.w	8006f82 <_ZN16DiagnoseViewBaseC1Ev+0x20da>
            return (int)(fs + 0.5f);
 8005d24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d34:	4628      	mov	r0, r5
 8005d36:	f00f fffe 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d3a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d3e:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8005b0c <_ZN16DiagnoseViewBaseC1Ev+0xc64>
 8005d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d46:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	f2c1 812a 	blt.w	8006faa <_ZN16DiagnoseViewBaseC1Ev+0x2102>
            return (int)(fs + 0.5f);
 8005d56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d62:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d66:	4628      	mov	r0, r5
 8005d68:	f00f ffe5 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d6c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d70:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8005b10 <_ZN16DiagnoseViewBaseC1Ev+0xc68>
 8005d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d78:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d84:	f2c1 8125 	blt.w	8006fd2 <_ZN16DiagnoseViewBaseC1Ev+0x212a>
            return (int)(fs + 0.5f);
 8005d88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d94:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f00f ffcc 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d9e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005da2:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8005b14 <_ZN16DiagnoseViewBaseC1Ev+0xc6c>
 8005da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005daa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	f2c1 8120 	blt.w	8006ffa <_ZN16DiagnoseViewBaseC1Ev+0x2152>
            return (int)(fs + 0.5f);
 8005dba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dc6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f00f ffb3 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005dd0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005dd4:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8005b18 <_ZN16DiagnoseViewBaseC1Ev+0xc70>
 8005dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de8:	f2c1 811b 	blt.w	8007022 <_ZN16DiagnoseViewBaseC1Ev+0x217a>
            return (int)(fs + 0.5f);
 8005dec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f00f ff9a 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e02:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e06:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8005b1c <_ZN16DiagnoseViewBaseC1Ev+0xc74>
 8005e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1a:	f2c1 8116 	blt.w	800704a <_ZN16DiagnoseViewBaseC1Ev+0x21a2>
            return (int)(fs + 0.5f);
 8005e1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e2a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f00f ff81 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e34:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e38:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8005b20 <_ZN16DiagnoseViewBaseC1Ev+0xc78>
 8005e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e40:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	f2c1 8111 	blt.w	8007072 <_ZN16DiagnoseViewBaseC1Ev+0x21ca>
            return (int)(fs + 0.5f);
 8005e50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e5c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e60:	4628      	mov	r0, r5
 8005e62:	f00f ff68 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e66:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e6a:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8005b24 <_ZN16DiagnoseViewBaseC1Ev+0xc7c>
 8005e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e72:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7e:	f2c1 810c 	blt.w	800709a <_ZN16DiagnoseViewBaseC1Ev+0x21f2>
            return (int)(fs + 0.5f);
 8005e82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e8e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e92:	4628      	mov	r0, r5
 8005e94:	f00f ff4f 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e98:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e9c:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8005b28 <_ZN16DiagnoseViewBaseC1Ev+0xc80>
 8005ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	f2c1 8107 	blt.w	80070c2 <_ZN16DiagnoseViewBaseC1Ev+0x221a>
            return (int)(fs + 0.5f);
 8005eb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ec0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f00f ff36 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005eca:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ece:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8005b2c <_ZN16DiagnoseViewBaseC1Ev+0xc84>
 8005ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee2:	f2c1 8102 	blt.w	80070ea <_ZN16DiagnoseViewBaseC1Ev+0x2242>
            return (int)(fs + 0.5f);
 8005ee6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ef2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f00f ff1d 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005efc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f00:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 80062d0 <_ZN16DiagnoseViewBaseC1Ev+0x1428>
 8005f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	f2c1 80fd 	blt.w	8007112 <_ZN16DiagnoseViewBaseC1Ev+0x226a>
            return (int)(fs + 0.5f);
 8005f18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f00f ff04 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f2e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f32:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 80062d4 <_ZN16DiagnoseViewBaseC1Ev+0x142c>
 8005f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	f2c1 80f8 	blt.w	800713a <_ZN16DiagnoseViewBaseC1Ev+0x2292>
            return (int)(fs + 0.5f);
 8005f4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f56:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f00f feeb 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f60:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f64:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80062d8 <_ZN16DiagnoseViewBaseC1Ev+0x1430>
 8005f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f78:	f2c1 80f3 	blt.w	8007162 <_ZN16DiagnoseViewBaseC1Ev+0x22ba>
            return (int)(fs + 0.5f);
 8005f7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f00f fed2 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f92:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f96:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80062dc <_ZN16DiagnoseViewBaseC1Ev+0x1434>
 8005f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005faa:	f2c1 80ee 	blt.w	800718a <_ZN16DiagnoseViewBaseC1Ev+0x22e2>
            return (int)(fs + 0.5f);
 8005fae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f00f feb9 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fc4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005fc8:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80062e0 <_ZN16DiagnoseViewBaseC1Ev+0x1438>
 8005fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fdc:	f2c1 80e9 	blt.w	80071b2 <_ZN16DiagnoseViewBaseC1Ev+0x230a>
            return (int)(fs + 0.5f);
 8005fe0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f00f fea0 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ff6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ffa:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80062e4 <_ZN16DiagnoseViewBaseC1Ev+0x143c>
 8005ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006002:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600e:	f2c1 80e4 	blt.w	80071da <_ZN16DiagnoseViewBaseC1Ev+0x2332>
            return (int)(fs + 0.5f);
 8006012:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800601a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800601e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006022:	4628      	mov	r0, r5
 8006024:	f00f fe87 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006028:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800602c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80062e8 <_ZN16DiagnoseViewBaseC1Ev+0x1440>
 8006030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006034:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006040:	f2c1 80df 	blt.w	8007202 <_ZN16DiagnoseViewBaseC1Ev+0x235a>
            return (int)(fs + 0.5f);
 8006044:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800604c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006050:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006054:	4628      	mov	r0, r5
 8006056:	f00f fe6e 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800605a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800605e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80062ec <_ZN16DiagnoseViewBaseC1Ev+0x1444>
 8006062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006066:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800606a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006072:	f2c1 80da 	blt.w	800722a <_ZN16DiagnoseViewBaseC1Ev+0x2382>
            return (int)(fs + 0.5f);
 8006076:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800607a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800607e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006082:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006086:	4628      	mov	r0, r5
 8006088:	f00f fe55 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800608c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006090:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80062f0 <_ZN16DiagnoseViewBaseC1Ev+0x1448>
 8006094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006098:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800609c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a4:	f2c1 80d5 	blt.w	8007252 <_ZN16DiagnoseViewBaseC1Ev+0x23aa>
            return (int)(fs + 0.5f);
 80060a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060b4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060b8:	4628      	mov	r0, r5
 80060ba:	f00f fe3c 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060be:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060c2:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80062f4 <_ZN16DiagnoseViewBaseC1Ev+0x144c>
 80060c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	f2c1 80d0 	blt.w	800727a <_ZN16DiagnoseViewBaseC1Ev+0x23d2>
            return (int)(fs + 0.5f);
 80060da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060e6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060ea:	4628      	mov	r0, r5
 80060ec:	f00f fe23 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060f0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060f4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80062f8 <_ZN16DiagnoseViewBaseC1Ev+0x1450>
 80060f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006108:	f2c1 80cb 	blt.w	80072a2 <_ZN16DiagnoseViewBaseC1Ev+0x23fa>
            return (int)(fs + 0.5f);
 800610c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006118:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800611c:	4628      	mov	r0, r5
 800611e:	f00f fe0a 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006122:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006126:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80062fc <_ZN16DiagnoseViewBaseC1Ev+0x1454>
 800612a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800612e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	f2c1 80c6 	blt.w	80072ca <_ZN16DiagnoseViewBaseC1Ev+0x2422>
            return (int)(fs + 0.5f);
 800613e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800614a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800614e:	4628      	mov	r0, r5
 8006150:	f00f fdf1 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006154:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006158:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006300 <_ZN16DiagnoseViewBaseC1Ev+0x1458>
 800615c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006160:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	f2c1 80c1 	blt.w	80072f2 <_ZN16DiagnoseViewBaseC1Ev+0x244a>
            return (int)(fs + 0.5f);
 8006170:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006174:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006180:	4628      	mov	r0, r5
 8006182:	f00f fdd8 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006186:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800618a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006304 <_ZN16DiagnoseViewBaseC1Ev+0x145c>
 800618e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006192:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	f2c1 80bc 	blt.w	800731a <_ZN16DiagnoseViewBaseC1Ev+0x2472>
            return (int)(fs + 0.5f);
 80061a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061b2:	4628      	mov	r0, r5
 80061b4:	f00f fdbf 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061b8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061bc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006308 <_ZN16DiagnoseViewBaseC1Ev+0x1460>
 80061c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d0:	f2c1 80b7 	blt.w	8007342 <_ZN16DiagnoseViewBaseC1Ev+0x249a>
            return (int)(fs + 0.5f);
 80061d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061e0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061e4:	4628      	mov	r0, r5
 80061e6:	f00f fda6 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061ea:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061ee:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800630c <_ZN16DiagnoseViewBaseC1Ev+0x1464>
 80061f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	f2c1 80b2 	blt.w	800736a <_ZN16DiagnoseViewBaseC1Ev+0x24c2>
            return (int)(fs + 0.5f);
 8006206:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800620a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800620e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006212:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006216:	4628      	mov	r0, r5
 8006218:	f00f fd8d 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800621c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006220:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006310 <_ZN16DiagnoseViewBaseC1Ev+0x1468>
 8006224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006228:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800622c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006234:	f2c1 80ad 	blt.w	8007392 <_ZN16DiagnoseViewBaseC1Ev+0x24ea>
            return (int)(fs + 0.5f);
 8006238:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800623c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006244:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006248:	4628      	mov	r0, r5
 800624a:	f00f fd74 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800624e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006252:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006314 <_ZN16DiagnoseViewBaseC1Ev+0x146c>
 8006256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800625e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	f2c1 80a8 	blt.w	80073ba <_ZN16DiagnoseViewBaseC1Ev+0x2512>
            return (int)(fs + 0.5f);
 800626a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800626e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006276:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800627a:	4628      	mov	r0, r5
 800627c:	f00f fd5b 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006280:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006284:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006318 <_ZN16DiagnoseViewBaseC1Ev+0x1470>
 8006288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800628c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006298:	f2c1 80a3 	blt.w	80073e2 <_ZN16DiagnoseViewBaseC1Ev+0x253a>
            return (int)(fs + 0.5f);
 800629c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062a8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062ac:	4628      	mov	r0, r5
 80062ae:	f00f fd42 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062b2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80062b6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800631c <_ZN16DiagnoseViewBaseC1Ev+0x1474>
 80062ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	f2c1 809e 	blt.w	800740a <_ZN16DiagnoseViewBaseC1Ev+0x2562>
 80062ce:	e049      	b.n	8006364 <_ZN16DiagnoseViewBaseC1Ev+0x14bc>
 80062d0:	4295fa02 	.word	0x4295fa02
 80062d4:	4285e50c 	.word	0x4285e50c
 80062d8:	4256f26f 	.word	0x4256f26f
 80062dc:	42167451 	.word	0x42167451
 80062e0:	41ad0597 	.word	0x41ad0597
 80062e4:	410e92d7 	.word	0x410e92d7
 80062e8:	3ff86e6e 	.word	0x3ff86e6e
 80062ec:	3ffaf599 	.word	0x3ffaf599
 80062f0:	410b128e 	.word	0x410b128e
 80062f4:	41a35230 	.word	0x41a35230
 80062f8:	42099166 	.word	0x42099166
 80062fc:	423e2093 	.word	0x423e2093
 8006300:	426489ab 	.word	0x426489ab
 8006304:	42761f9c 	.word	0x42761f9c
 8006308:	4271dbd0 	.word	0x4271dbd0
 800630c:	425c7cf8 	.word	0x425c7cf8
 8006310:	423f37ee 	.word	0x423f37ee
 8006314:	42254e0a 	.word	0x42254e0a
 8006318:	42192202 	.word	0x42192202
 800631c:	422183b0 	.word	0x422183b0
 8006320:	423fde06 	.word	0x423fde06
 8006324:	426fbac7 	.word	0x426fbac7
 8006328:	4293ddf2 	.word	0x4293ddf2
 800632c:	42ade74e 	.word	0x42ade74e
 8006330:	42c007bb 	.word	0x42c007bb
 8006334:	42c5d556 	.word	0x42c5d556
 8006338:	42bd8271 	.word	0x42bd8271
 800633c:	42a8528b 	.word	0x42a8528b
 8006340:	428a52fd 	.word	0x428a52fd
 8006344:	4252d134 	.word	0x4252d134
 8006348:	4217da1a 	.word	0x4217da1a
 800634c:	41dcc932 	.word	0x41dcc932
 8006350:	41b921ff 	.word	0x41b921ff
 8006354:	41c54a38 	.word	0x41c54a38
 8006358:	41f649c0 	.word	0x41f649c0
 800635c:	421c52f7 	.word	0x421c52f7
 8006360:	423ab963 	.word	0x423ab963
            return (int)(fs + 0.5f);
 8006364:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006368:	ee77 7a87 	vadd.f32	s15, s15, s14
 800636c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006370:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006374:	4628      	mov	r0, r5
 8006376:	f00f fcde 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800637a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800637e:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8006320 <_ZN16DiagnoseViewBaseC1Ev+0x1478>
 8006382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006386:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800638a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006392:	f2c1 804e 	blt.w	8007432 <_ZN16DiagnoseViewBaseC1Ev+0x258a>
            return (int)(fs + 0.5f);
 8006396:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800639a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800639e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063a2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063a6:	4628      	mov	r0, r5
 80063a8:	f00f fcc5 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063ac:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063b0:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 8006324 <_ZN16DiagnoseViewBaseC1Ev+0x147c>
 80063b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	f2c1 8049 	blt.w	800745a <_ZN16DiagnoseViewBaseC1Ev+0x25b2>
            return (int)(fs + 0.5f);
 80063c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063d8:	4628      	mov	r0, r5
 80063da:	f00f fcac 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063de:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063e2:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 8006328 <_ZN16DiagnoseViewBaseC1Ev+0x1480>
 80063e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f6:	f2c1 8044 	blt.w	8007482 <_ZN16DiagnoseViewBaseC1Ev+0x25da>
            return (int)(fs + 0.5f);
 80063fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006406:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800640a:	4628      	mov	r0, r5
 800640c:	f00f fc93 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006410:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006414:	ed1f 7a3b 	vldr	s14, [pc, #-236]	@ 800632c <_ZN16DiagnoseViewBaseC1Ev+0x1484>
 8006418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800641c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006428:	f2c1 803f 	blt.w	80074aa <_ZN16DiagnoseViewBaseC1Ev+0x2602>
            return (int)(fs + 0.5f);
 800642c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006438:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800643c:	4628      	mov	r0, r5
 800643e:	f00f fc7a 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006442:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006446:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 8006330 <_ZN16DiagnoseViewBaseC1Ev+0x1488>
 800644a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645a:	f2c1 803a 	blt.w	80074d2 <_ZN16DiagnoseViewBaseC1Ev+0x262a>
            return (int)(fs + 0.5f);
 800645e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800646a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800646e:	4628      	mov	r0, r5
 8006470:	f00f fc61 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006474:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006478:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8006334 <_ZN16DiagnoseViewBaseC1Ev+0x148c>
 800647c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006480:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648c:	f2c1 8035 	blt.w	80074fa <_ZN16DiagnoseViewBaseC1Ev+0x2652>
            return (int)(fs + 0.5f);
 8006490:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064a0:	4628      	mov	r0, r5
 80064a2:	f00f fc48 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064a6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064aa:	ed1f 7a5d 	vldr	s14, [pc, #-372]	@ 8006338 <_ZN16DiagnoseViewBaseC1Ev+0x1490>
 80064ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	f2c1 8030 	blt.w	8007522 <_ZN16DiagnoseViewBaseC1Ev+0x267a>
            return (int)(fs + 0.5f);
 80064c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064d2:	4628      	mov	r0, r5
 80064d4:	f00f fc2f 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064d8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064dc:	ed1f 7a69 	vldr	s14, [pc, #-420]	@ 800633c <_ZN16DiagnoseViewBaseC1Ev+0x1494>
 80064e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	f2c1 802b 	blt.w	800754a <_ZN16DiagnoseViewBaseC1Ev+0x26a2>
            return (int)(fs + 0.5f);
 80064f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006500:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006504:	4628      	mov	r0, r5
 8006506:	f00f fc16 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800650a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800650e:	ed1f 7a74 	vldr	s14, [pc, #-464]	@ 8006340 <_ZN16DiagnoseViewBaseC1Ev+0x1498>
 8006512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006516:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800651a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	f2c1 8026 	blt.w	8007572 <_ZN16DiagnoseViewBaseC1Ev+0x26ca>
            return (int)(fs + 0.5f);
 8006526:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800652a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800652e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006532:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006536:	4628      	mov	r0, r5
 8006538:	f00f fbfd 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800653c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006540:	ed1f 7a80 	vldr	s14, [pc, #-512]	@ 8006344 <_ZN16DiagnoseViewBaseC1Ev+0x149c>
 8006544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006548:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800654c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	f2c1 8021 	blt.w	800759a <_ZN16DiagnoseViewBaseC1Ev+0x26f2>
            return (int)(fs + 0.5f);
 8006558:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800655c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006564:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006568:	4628      	mov	r0, r5
 800656a:	f00f fbe4 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800656e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006572:	ed1f 7a8b 	vldr	s14, [pc, #-556]	@ 8006348 <_ZN16DiagnoseViewBaseC1Ev+0x14a0>
 8006576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800657e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	f2c1 801c 	blt.w	80075c2 <_ZN16DiagnoseViewBaseC1Ev+0x271a>
            return (int)(fs + 0.5f);
 800658a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800658e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006596:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800659a:	4628      	mov	r0, r5
 800659c:	f00f fbcb 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065a0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065a4:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 800634c <_ZN16DiagnoseViewBaseC1Ev+0x14a4>
 80065a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b8:	f2c1 8017 	blt.w	80075ea <_ZN16DiagnoseViewBaseC1Ev+0x2742>
            return (int)(fs + 0.5f);
 80065bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065cc:	4628      	mov	r0, r5
 80065ce:	f00f fbb2 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065d2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065d6:	ed1f 7aa2 	vldr	s14, [pc, #-648]	@ 8006350 <_ZN16DiagnoseViewBaseC1Ev+0x14a8>
 80065da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	f2c1 8012 	blt.w	8007612 <_ZN16DiagnoseViewBaseC1Ev+0x276a>
            return (int)(fs + 0.5f);
 80065ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065fa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065fe:	4628      	mov	r0, r5
 8006600:	f00f fb99 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006604:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006608:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8006354 <_ZN16DiagnoseViewBaseC1Ev+0x14ac>
 800660c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006610:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661c:	f2c1 800d 	blt.w	800763a <_ZN16DiagnoseViewBaseC1Ev+0x2792>
            return (int)(fs + 0.5f);
 8006620:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800662c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006630:	4628      	mov	r0, r5
 8006632:	f00f fb80 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006636:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800663a:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 8006358 <_ZN16DiagnoseViewBaseC1Ev+0x14b0>
 800663e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006642:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	f2c1 8008 	blt.w	8007662 <_ZN16DiagnoseViewBaseC1Ev+0x27ba>
            return (int)(fs + 0.5f);
 8006652:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800665a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800665e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006662:	4628      	mov	r0, r5
 8006664:	f00f fb67 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006668:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800666c:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 800635c <_ZN16DiagnoseViewBaseC1Ev+0x14b4>
 8006670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006674:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006680:	f2c1 8003 	blt.w	800768a <_ZN16DiagnoseViewBaseC1Ev+0x27e2>
            return (int)(fs + 0.5f);
 8006684:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006688:	ee77 7a87 	vadd.f32	s15, s15, s14
 800668c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006690:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006694:	4628      	mov	r0, r5
 8006696:	f00f fb4e 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800669a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800669e:	ed1f 7ad0 	vldr	s14, [pc, #-832]	@ 8006360 <_ZN16DiagnoseViewBaseC1Ev+0x14b8>
 80066a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b2:	f2c0 87fe 	blt.w	80076b2 <_ZN16DiagnoseViewBaseC1Ev+0x280a>
            return (int)(fs + 0.5f);
 80066b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066c6:	4628      	mov	r0, r5
 80066c8:	f00f fb35 	bl	8015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4638      	mov	r0, r7
 80066d0:	f00b fb5e 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80066d4:	9804      	ldr	r0, [sp, #16]
 80066d6:	220e      	movs	r2, #14
 80066d8:	2114      	movs	r1, #20
 80066da:	f7fd fb2b 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 80066de:	2305      	movs	r3, #5
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 80066e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80066e2:	a90d      	add	r1, sp, #52	@ 0x34
 80066e4:	9804      	ldr	r0, [sp, #16]
 80066e6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80066ea:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80066ee:	f010 fb4b 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    HomeButton.setAction(buttonCallback);
 80066f2:	f504 5351 	add.w	r3, r4, #13376	@ 0x3440
 80066f6:	9904      	ldr	r1, [sp, #16]
 80066f8:	4638      	mov	r0, r7
 80066fa:	332c      	adds	r3, #44	@ 0x2c
        action = &callback;
 80066fc:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 8006700:	f00b fb46 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scrollableContainer1.setPosition(0, 94, 307, 386);
 8006704:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8006708:	225e      	movs	r2, #94	@ 0x5e
 800670a:	9805      	ldr	r0, [sp, #20]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2100      	movs	r1, #0
 8006710:	f240 1333 	movw	r3, #307	@ 0x133
 8006714:	f7fd fb1b 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006718:	9805      	ldr	r0, [sp, #20]
 800671a:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 800671e:	f00c fc1d 	bl	8012f5c <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    scrollableContainer1.setScrollbarsAlpha(255);
 8006722:	9805      	ldr	r0, [sp, #20]
 8006724:	21ff      	movs	r1, #255	@ 0xff
 8006726:	f00c fc1e 	bl	8012f66 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
 800672a:	4638      	mov	r0, r7
 800672c:	9905      	ldr	r1, [sp, #20]
 800672e:	f00b fb2f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006732:	4620      	mov	r0, r4
 8006734:	b011      	add	sp, #68	@ 0x44
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800673a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800673e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006742:	ee17 3a10 	vmov	r3, s14
 8006746:	3b01      	subs	r3, #1
 8006748:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800674c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006758:	ee17 1a90 	vmov	r1, s15
 800675c:	4419      	add	r1, r3
 800675e:	f7fe bd20 	b.w	80051a2 <_ZN16DiagnoseViewBaseC1Ev+0x2fa>
 8006762:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006766:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800676a:	ee17 3a10 	vmov	r3, s14
 800676e:	3b01      	subs	r3, #1
 8006770:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006774:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006780:	ee17 1a90 	vmov	r1, s15
 8006784:	4419      	add	r1, r3
 8006786:	f7fe bd25 	b.w	80051d4 <_ZN16DiagnoseViewBaseC1Ev+0x32c>
 800678a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800678e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006792:	ee17 3a10 	vmov	r3, s14
 8006796:	3b01      	subs	r3, #1
 8006798:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800679c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80067a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a8:	ee17 1a90 	vmov	r1, s15
 80067ac:	4419      	add	r1, r3
 80067ae:	f7fe bd2a 	b.w	8005206 <_ZN16DiagnoseViewBaseC1Ev+0x35e>
 80067b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067ba:	ee17 3a10 	vmov	r3, s14
 80067be:	3b01      	subs	r3, #1
 80067c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80067c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067d0:	ee17 1a90 	vmov	r1, s15
 80067d4:	4419      	add	r1, r3
 80067d6:	f7fe bd2f 	b.w	8005238 <_ZN16DiagnoseViewBaseC1Ev+0x390>
 80067da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067e2:	ee17 3a10 	vmov	r3, s14
 80067e6:	3b01      	subs	r3, #1
 80067e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067f8:	ee17 1a90 	vmov	r1, s15
 80067fc:	4419      	add	r1, r3
 80067fe:	f7fe bd81 	b.w	8005304 <_ZN16DiagnoseViewBaseC1Ev+0x45c>
 8006802:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006806:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800680a:	ee17 3a10 	vmov	r3, s14
 800680e:	3b01      	subs	r3, #1
 8006810:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006814:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006820:	ee17 1a90 	vmov	r1, s15
 8006824:	4419      	add	r1, r3
 8006826:	f7fe bd86 	b.w	8005336 <_ZN16DiagnoseViewBaseC1Ev+0x48e>
 800682a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800682e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006832:	ee17 3a10 	vmov	r3, s14
 8006836:	3b01      	subs	r3, #1
 8006838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800683c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006848:	ee17 1a90 	vmov	r1, s15
 800684c:	4419      	add	r1, r3
 800684e:	f7fe bd8b 	b.w	8005368 <_ZN16DiagnoseViewBaseC1Ev+0x4c0>
 8006852:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006856:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800685a:	ee17 3a10 	vmov	r3, s14
 800685e:	3b01      	subs	r3, #1
 8006860:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006864:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006870:	ee17 1a90 	vmov	r1, s15
 8006874:	4419      	add	r1, r3
 8006876:	f7fe bd90 	b.w	800539a <_ZN16DiagnoseViewBaseC1Ev+0x4f2>
 800687a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800687e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006882:	ee17 3a10 	vmov	r3, s14
 8006886:	3b01      	subs	r3, #1
 8006888:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800688c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006898:	ee17 1a90 	vmov	r1, s15
 800689c:	4419      	add	r1, r3
 800689e:	f7fe bd95 	b.w	80053cc <_ZN16DiagnoseViewBaseC1Ev+0x524>
 80068a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068aa:	ee17 3a10 	vmov	r3, s14
 80068ae:	3b01      	subs	r3, #1
 80068b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068b4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80068b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c0:	ee17 1a90 	vmov	r1, s15
 80068c4:	4419      	add	r1, r3
 80068c6:	f7fe bd9a 	b.w	80053fe <_ZN16DiagnoseViewBaseC1Ev+0x556>
 80068ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068d2:	ee17 3a10 	vmov	r3, s14
 80068d6:	3b01      	subs	r3, #1
 80068d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068dc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80068e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e8:	ee17 1a90 	vmov	r1, s15
 80068ec:	4419      	add	r1, r3
 80068ee:	f7fe bd9f 	b.w	8005430 <_ZN16DiagnoseViewBaseC1Ev+0x588>
 80068f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068fa:	ee17 3a10 	vmov	r3, s14
 80068fe:	3b01      	subs	r3, #1
 8006900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006904:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006910:	ee17 1a90 	vmov	r1, s15
 8006914:	4419      	add	r1, r3
 8006916:	f7fe bda4 	b.w	8005462 <_ZN16DiagnoseViewBaseC1Ev+0x5ba>
 800691a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800691e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006922:	ee17 3a10 	vmov	r3, s14
 8006926:	3b01      	subs	r3, #1
 8006928:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800692c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006938:	ee17 1a90 	vmov	r1, s15
 800693c:	4419      	add	r1, r3
 800693e:	f7fe bda9 	b.w	8005494 <_ZN16DiagnoseViewBaseC1Ev+0x5ec>
 8006942:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006946:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800694a:	ee17 3a10 	vmov	r3, s14
 800694e:	3b01      	subs	r3, #1
 8006950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006954:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006960:	ee17 1a90 	vmov	r1, s15
 8006964:	4419      	add	r1, r3
 8006966:	f7fe bdae 	b.w	80054c6 <_ZN16DiagnoseViewBaseC1Ev+0x61e>
 800696a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800696e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006972:	ee17 3a10 	vmov	r3, s14
 8006976:	3b01      	subs	r3, #1
 8006978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800697c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006988:	ee17 1a90 	vmov	r1, s15
 800698c:	4419      	add	r1, r3
 800698e:	f7fe bdb3 	b.w	80054f8 <_ZN16DiagnoseViewBaseC1Ev+0x650>
 8006992:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006996:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800699a:	ee17 3a10 	vmov	r3, s14
 800699e:	3b01      	subs	r3, #1
 80069a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069b0:	ee17 1a90 	vmov	r1, s15
 80069b4:	4419      	add	r1, r3
 80069b6:	f7fe bdb8 	b.w	800552a <_ZN16DiagnoseViewBaseC1Ev+0x682>
 80069ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069c2:	ee17 3a10 	vmov	r3, s14
 80069c6:	3b01      	subs	r3, #1
 80069c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d8:	ee17 1a90 	vmov	r1, s15
 80069dc:	4419      	add	r1, r3
 80069de:	f7fe bdbd 	b.w	800555c <_ZN16DiagnoseViewBaseC1Ev+0x6b4>
 80069e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069ea:	ee17 3a10 	vmov	r3, s14
 80069ee:	3b01      	subs	r3, #1
 80069f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a00:	ee17 1a90 	vmov	r1, s15
 8006a04:	4419      	add	r1, r3
 8006a06:	f7fe bdc2 	b.w	800558e <_ZN16DiagnoseViewBaseC1Ev+0x6e6>
 8006a0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a12:	ee17 3a10 	vmov	r3, s14
 8006a16:	3b01      	subs	r3, #1
 8006a18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a1c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a28:	ee17 1a90 	vmov	r1, s15
 8006a2c:	4419      	add	r1, r3
 8006a2e:	f7fe bdc7 	b.w	80055c0 <_ZN16DiagnoseViewBaseC1Ev+0x718>
 8006a32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a3a:	ee17 3a10 	vmov	r3, s14
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a44:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a50:	ee17 1a90 	vmov	r1, s15
 8006a54:	4419      	add	r1, r3
 8006a56:	f7fe bdcc 	b.w	80055f2 <_ZN16DiagnoseViewBaseC1Ev+0x74a>
 8006a5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a62:	ee17 3a10 	vmov	r3, s14
 8006a66:	3b01      	subs	r3, #1
 8006a68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a6c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a78:	ee17 1a90 	vmov	r1, s15
 8006a7c:	4419      	add	r1, r3
 8006a7e:	f7fe bdd1 	b.w	8005624 <_ZN16DiagnoseViewBaseC1Ev+0x77c>
 8006a82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a8a:	ee17 3a10 	vmov	r3, s14
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a94:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa0:	ee17 1a90 	vmov	r1, s15
 8006aa4:	4419      	add	r1, r3
 8006aa6:	f7fe bdd6 	b.w	8005656 <_ZN16DiagnoseViewBaseC1Ev+0x7ae>
 8006aaa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006aae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ab2:	ee17 3a10 	vmov	r3, s14
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006abc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac8:	ee17 1a90 	vmov	r1, s15
 8006acc:	4419      	add	r1, r3
 8006ace:	f7fe bddb 	b.w	8005688 <_ZN16DiagnoseViewBaseC1Ev+0x7e0>
 8006ad2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ad6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ada:	ee17 3a10 	vmov	r3, s14
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ae4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af0:	ee17 1a90 	vmov	r1, s15
 8006af4:	4419      	add	r1, r3
 8006af6:	f7fe bde0 	b.w	80056ba <_ZN16DiagnoseViewBaseC1Ev+0x812>
 8006afa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006afe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b02:	ee17 3a10 	vmov	r3, s14
 8006b06:	3b01      	subs	r3, #1
 8006b08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b0c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b18:	ee17 1a90 	vmov	r1, s15
 8006b1c:	4419      	add	r1, r3
 8006b1e:	f7fe bde5 	b.w	80056ec <_ZN16DiagnoseViewBaseC1Ev+0x844>
 8006b22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b26:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b2a:	ee17 3a10 	vmov	r3, s14
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b34:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b40:	ee17 1a90 	vmov	r1, s15
 8006b44:	4419      	add	r1, r3
 8006b46:	f7fe bdea 	b.w	800571e <_ZN16DiagnoseViewBaseC1Ev+0x876>
 8006b4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b4e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b52:	ee17 3a10 	vmov	r3, s14
 8006b56:	3b01      	subs	r3, #1
 8006b58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b5c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b68:	ee17 1a90 	vmov	r1, s15
 8006b6c:	4419      	add	r1, r3
 8006b6e:	f7fe bdef 	b.w	8005750 <_ZN16DiagnoseViewBaseC1Ev+0x8a8>
 8006b72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b7a:	ee17 3a10 	vmov	r3, s14
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b84:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b90:	ee17 1a90 	vmov	r1, s15
 8006b94:	4419      	add	r1, r3
 8006b96:	f7fe bdf4 	b.w	8005782 <_ZN16DiagnoseViewBaseC1Ev+0x8da>
 8006b9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ba2:	ee17 3a10 	vmov	r3, s14
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb8:	ee17 1a90 	vmov	r1, s15
 8006bbc:	4419      	add	r1, r3
 8006bbe:	f7fe bdf9 	b.w	80057b4 <_ZN16DiagnoseViewBaseC1Ev+0x90c>
 8006bc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bc6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bca:	ee17 3a10 	vmov	r3, s14
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bd4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006be0:	ee17 1a90 	vmov	r1, s15
 8006be4:	4419      	add	r1, r3
 8006be6:	f7fe bdfe 	b.w	80057e6 <_ZN16DiagnoseViewBaseC1Ev+0x93e>
 8006bea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bf2:	ee17 3a10 	vmov	r3, s14
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bfc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c08:	ee17 1a90 	vmov	r1, s15
 8006c0c:	4419      	add	r1, r3
 8006c0e:	f7fe be03 	b.w	8005818 <_ZN16DiagnoseViewBaseC1Ev+0x970>
 8006c12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c1a:	ee17 3a10 	vmov	r3, s14
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c24:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c30:	ee17 1a90 	vmov	r1, s15
 8006c34:	4419      	add	r1, r3
 8006c36:	f7fe be08 	b.w	800584a <_ZN16DiagnoseViewBaseC1Ev+0x9a2>
 8006c3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c42:	ee17 3a10 	vmov	r3, s14
 8006c46:	3b01      	subs	r3, #1
 8006c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c4c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c58:	ee17 1a90 	vmov	r1, s15
 8006c5c:	4419      	add	r1, r3
 8006c5e:	f7fe be0d 	b.w	800587c <_ZN16DiagnoseViewBaseC1Ev+0x9d4>
 8006c62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c6a:	ee17 3a10 	vmov	r3, s14
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c74:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c80:	ee17 1a90 	vmov	r1, s15
 8006c84:	4419      	add	r1, r3
 8006c86:	f7fe be12 	b.w	80058ae <_ZN16DiagnoseViewBaseC1Ev+0xa06>
 8006c8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c92:	ee17 3a10 	vmov	r3, s14
 8006c96:	3b01      	subs	r3, #1
 8006c98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c9c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca8:	ee17 1a90 	vmov	r1, s15
 8006cac:	4419      	add	r1, r3
 8006cae:	f7fe be17 	b.w	80058e0 <_ZN16DiagnoseViewBaseC1Ev+0xa38>
 8006cb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cba:	ee17 3a10 	vmov	r3, s14
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cc4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cd0:	ee17 1a90 	vmov	r1, s15
 8006cd4:	4419      	add	r1, r3
 8006cd6:	f7fe be1c 	b.w	8005912 <_ZN16DiagnoseViewBaseC1Ev+0xa6a>
 8006cda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cde:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ce2:	ee17 3a10 	vmov	r3, s14
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cf8:	ee17 1a90 	vmov	r1, s15
 8006cfc:	4419      	add	r1, r3
 8006cfe:	f7fe be21 	b.w	8005944 <_ZN16DiagnoseViewBaseC1Ev+0xa9c>
 8006d02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d0a:	ee17 3a10 	vmov	r3, s14
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d14:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d20:	ee17 1a90 	vmov	r1, s15
 8006d24:	4419      	add	r1, r3
 8006d26:	f7fe be26 	b.w	8005976 <_ZN16DiagnoseViewBaseC1Ev+0xace>
 8006d2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d32:	ee17 3a10 	vmov	r3, s14
 8006d36:	3b01      	subs	r3, #1
 8006d38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d3c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d48:	ee17 1a90 	vmov	r1, s15
 8006d4c:	4419      	add	r1, r3
 8006d4e:	f7fe be2b 	b.w	80059a8 <_ZN16DiagnoseViewBaseC1Ev+0xb00>
 8006d52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d5a:	ee17 3a10 	vmov	r3, s14
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d64:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d70:	ee17 1a90 	vmov	r1, s15
 8006d74:	4419      	add	r1, r3
 8006d76:	f7fe be30 	b.w	80059da <_ZN16DiagnoseViewBaseC1Ev+0xb32>
 8006d7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d82:	ee17 3a10 	vmov	r3, s14
 8006d86:	3b01      	subs	r3, #1
 8006d88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d8c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d98:	ee17 1a90 	vmov	r1, s15
 8006d9c:	4419      	add	r1, r3
 8006d9e:	f7fe be35 	b.w	8005a0c <_ZN16DiagnoseViewBaseC1Ev+0xb64>
 8006da2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006da6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006daa:	ee17 3a10 	vmov	r3, s14
 8006dae:	3b01      	subs	r3, #1
 8006db0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006db4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc0:	ee17 1a90 	vmov	r1, s15
 8006dc4:	4419      	add	r1, r3
 8006dc6:	f7fe be3a 	b.w	8005a3e <_ZN16DiagnoseViewBaseC1Ev+0xb96>
 8006dca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dd2:	ee17 3a10 	vmov	r3, s14
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ddc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de8:	ee17 1a90 	vmov	r1, s15
 8006dec:	4419      	add	r1, r3
 8006dee:	f7fe be3f 	b.w	8005a70 <_ZN16DiagnoseViewBaseC1Ev+0xbc8>
 8006df2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006df6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dfa:	ee17 3a10 	vmov	r3, s14
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e04:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e10:	ee17 1a90 	vmov	r1, s15
 8006e14:	4419      	add	r1, r3
 8006e16:	f7fe be93 	b.w	8005b40 <_ZN16DiagnoseViewBaseC1Ev+0xc98>
 8006e1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e22:	ee17 3a10 	vmov	r3, s14
 8006e26:	3b01      	subs	r3, #1
 8006e28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e2c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e38:	ee17 1a90 	vmov	r1, s15
 8006e3c:	4419      	add	r1, r3
 8006e3e:	f7fe be98 	b.w	8005b72 <_ZN16DiagnoseViewBaseC1Ev+0xcca>
 8006e42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e4a:	ee17 3a10 	vmov	r3, s14
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e54:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e60:	ee17 1a90 	vmov	r1, s15
 8006e64:	4419      	add	r1, r3
 8006e66:	f7fe be9d 	b.w	8005ba4 <_ZN16DiagnoseViewBaseC1Ev+0xcfc>
 8006e6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e6e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e72:	ee17 3a10 	vmov	r3, s14
 8006e76:	3b01      	subs	r3, #1
 8006e78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e7c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e88:	ee17 1a90 	vmov	r1, s15
 8006e8c:	4419      	add	r1, r3
 8006e8e:	f7fe bea2 	b.w	8005bd6 <_ZN16DiagnoseViewBaseC1Ev+0xd2e>
 8006e92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e9a:	ee17 3a10 	vmov	r3, s14
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ea4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eb0:	ee17 1a90 	vmov	r1, s15
 8006eb4:	4419      	add	r1, r3
 8006eb6:	f7fe bea7 	b.w	8005c08 <_ZN16DiagnoseViewBaseC1Ev+0xd60>
 8006eba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ebe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ec2:	ee17 3a10 	vmov	r3, s14
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ecc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed8:	ee17 1a90 	vmov	r1, s15
 8006edc:	4419      	add	r1, r3
 8006ede:	f7fe beac 	b.w	8005c3a <_ZN16DiagnoseViewBaseC1Ev+0xd92>
 8006ee2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ee6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006eea:	ee17 3a10 	vmov	r3, s14
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ef4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f00:	ee17 1a90 	vmov	r1, s15
 8006f04:	4419      	add	r1, r3
 8006f06:	f7fe beb1 	b.w	8005c6c <_ZN16DiagnoseViewBaseC1Ev+0xdc4>
 8006f0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f12:	ee17 3a10 	vmov	r3, s14
 8006f16:	3b01      	subs	r3, #1
 8006f18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f1c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f28:	ee17 1a90 	vmov	r1, s15
 8006f2c:	4419      	add	r1, r3
 8006f2e:	f7fe beb6 	b.w	8005c9e <_ZN16DiagnoseViewBaseC1Ev+0xdf6>
 8006f32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f3a:	ee17 3a10 	vmov	r3, s14
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f44:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f50:	ee17 1a90 	vmov	r1, s15
 8006f54:	4419      	add	r1, r3
 8006f56:	f7fe bebb 	b.w	8005cd0 <_ZN16DiagnoseViewBaseC1Ev+0xe28>
 8006f5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f62:	ee17 3a10 	vmov	r3, s14
 8006f66:	3b01      	subs	r3, #1
 8006f68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f6c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f78:	ee17 1a90 	vmov	r1, s15
 8006f7c:	4419      	add	r1, r3
 8006f7e:	f7fe bec0 	b.w	8005d02 <_ZN16DiagnoseViewBaseC1Ev+0xe5a>
 8006f82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f8a:	ee17 3a10 	vmov	r3, s14
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f94:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa0:	ee17 1a90 	vmov	r1, s15
 8006fa4:	4419      	add	r1, r3
 8006fa6:	f7fe bec5 	b.w	8005d34 <_ZN16DiagnoseViewBaseC1Ev+0xe8c>
 8006faa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fb2:	ee17 3a10 	vmov	r3, s14
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fbc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc8:	ee17 1a90 	vmov	r1, s15
 8006fcc:	4419      	add	r1, r3
 8006fce:	f7fe beca 	b.w	8005d66 <_ZN16DiagnoseViewBaseC1Ev+0xebe>
 8006fd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fd6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fda:	ee17 3a10 	vmov	r3, s14
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fe4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ff0:	ee17 1a90 	vmov	r1, s15
 8006ff4:	4419      	add	r1, r3
 8006ff6:	f7fe becf 	b.w	8005d98 <_ZN16DiagnoseViewBaseC1Ev+0xef0>
 8006ffa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ffe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007002:	ee17 3a10 	vmov	r3, s14
 8007006:	3b01      	subs	r3, #1
 8007008:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800700c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007018:	ee17 1a90 	vmov	r1, s15
 800701c:	4419      	add	r1, r3
 800701e:	f7fe bed4 	b.w	8005dca <_ZN16DiagnoseViewBaseC1Ev+0xf22>
 8007022:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007026:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800702a:	ee17 3a10 	vmov	r3, s14
 800702e:	3b01      	subs	r3, #1
 8007030:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007034:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007040:	ee17 1a90 	vmov	r1, s15
 8007044:	4419      	add	r1, r3
 8007046:	f7fe bed9 	b.w	8005dfc <_ZN16DiagnoseViewBaseC1Ev+0xf54>
 800704a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800704e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007052:	ee17 3a10 	vmov	r3, s14
 8007056:	3b01      	subs	r3, #1
 8007058:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800705c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007068:	ee17 1a90 	vmov	r1, s15
 800706c:	4419      	add	r1, r3
 800706e:	f7fe bede 	b.w	8005e2e <_ZN16DiagnoseViewBaseC1Ev+0xf86>
 8007072:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007076:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800707a:	ee17 3a10 	vmov	r3, s14
 800707e:	3b01      	subs	r3, #1
 8007080:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007084:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007090:	ee17 1a90 	vmov	r1, s15
 8007094:	4419      	add	r1, r3
 8007096:	f7fe bee3 	b.w	8005e60 <_ZN16DiagnoseViewBaseC1Ev+0xfb8>
 800709a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800709e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070a2:	ee17 3a10 	vmov	r3, s14
 80070a6:	3b01      	subs	r3, #1
 80070a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b8:	ee17 1a90 	vmov	r1, s15
 80070bc:	4419      	add	r1, r3
 80070be:	f7fe bee8 	b.w	8005e92 <_ZN16DiagnoseViewBaseC1Ev+0xfea>
 80070c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070ca:	ee17 3a10 	vmov	r3, s14
 80070ce:	3b01      	subs	r3, #1
 80070d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e0:	ee17 1a90 	vmov	r1, s15
 80070e4:	4419      	add	r1, r3
 80070e6:	f7fe beed 	b.w	8005ec4 <_ZN16DiagnoseViewBaseC1Ev+0x101c>
 80070ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070f2:	ee17 3a10 	vmov	r3, s14
 80070f6:	3b01      	subs	r3, #1
 80070f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007108:	ee17 1a90 	vmov	r1, s15
 800710c:	4419      	add	r1, r3
 800710e:	f7fe bef2 	b.w	8005ef6 <_ZN16DiagnoseViewBaseC1Ev+0x104e>
 8007112:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007116:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800711a:	ee17 3a10 	vmov	r3, s14
 800711e:	3b01      	subs	r3, #1
 8007120:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007124:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007130:	ee17 1a90 	vmov	r1, s15
 8007134:	4419      	add	r1, r3
 8007136:	f7fe bef7 	b.w	8005f28 <_ZN16DiagnoseViewBaseC1Ev+0x1080>
 800713a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800713e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007142:	ee17 3a10 	vmov	r3, s14
 8007146:	3b01      	subs	r3, #1
 8007148:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800714c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007158:	ee17 1a90 	vmov	r1, s15
 800715c:	4419      	add	r1, r3
 800715e:	f7fe befc 	b.w	8005f5a <_ZN16DiagnoseViewBaseC1Ev+0x10b2>
 8007162:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007166:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800716a:	ee17 3a10 	vmov	r3, s14
 800716e:	3b01      	subs	r3, #1
 8007170:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007174:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007180:	ee17 1a90 	vmov	r1, s15
 8007184:	4419      	add	r1, r3
 8007186:	f7fe bf01 	b.w	8005f8c <_ZN16DiagnoseViewBaseC1Ev+0x10e4>
 800718a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800718e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007192:	ee17 3a10 	vmov	r3, s14
 8007196:	3b01      	subs	r3, #1
 8007198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800719c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a8:	ee17 1a90 	vmov	r1, s15
 80071ac:	4419      	add	r1, r3
 80071ae:	f7fe bf06 	b.w	8005fbe <_ZN16DiagnoseViewBaseC1Ev+0x1116>
 80071b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071ba:	ee17 3a10 	vmov	r3, s14
 80071be:	3b01      	subs	r3, #1
 80071c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071d0:	ee17 1a90 	vmov	r1, s15
 80071d4:	4419      	add	r1, r3
 80071d6:	f7fe bf0b 	b.w	8005ff0 <_ZN16DiagnoseViewBaseC1Ev+0x1148>
 80071da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071e2:	ee17 3a10 	vmov	r3, s14
 80071e6:	3b01      	subs	r3, #1
 80071e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f8:	ee17 1a90 	vmov	r1, s15
 80071fc:	4419      	add	r1, r3
 80071fe:	f7fe bf10 	b.w	8006022 <_ZN16DiagnoseViewBaseC1Ev+0x117a>
 8007202:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007206:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800720a:	ee17 3a10 	vmov	r3, s14
 800720e:	3b01      	subs	r3, #1
 8007210:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007214:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007220:	ee17 1a90 	vmov	r1, s15
 8007224:	4419      	add	r1, r3
 8007226:	f7fe bf15 	b.w	8006054 <_ZN16DiagnoseViewBaseC1Ev+0x11ac>
 800722a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800722e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007232:	ee17 3a10 	vmov	r3, s14
 8007236:	3b01      	subs	r3, #1
 8007238:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800723c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007248:	ee17 1a90 	vmov	r1, s15
 800724c:	4419      	add	r1, r3
 800724e:	f7fe bf1a 	b.w	8006086 <_ZN16DiagnoseViewBaseC1Ev+0x11de>
 8007252:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007256:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800725a:	ee17 3a10 	vmov	r3, s14
 800725e:	3b01      	subs	r3, #1
 8007260:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007264:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007270:	ee17 1a90 	vmov	r1, s15
 8007274:	4419      	add	r1, r3
 8007276:	f7fe bf1f 	b.w	80060b8 <_ZN16DiagnoseViewBaseC1Ev+0x1210>
 800727a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800727e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007282:	ee17 3a10 	vmov	r3, s14
 8007286:	3b01      	subs	r3, #1
 8007288:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800728c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007298:	ee17 1a90 	vmov	r1, s15
 800729c:	4419      	add	r1, r3
 800729e:	f7fe bf24 	b.w	80060ea <_ZN16DiagnoseViewBaseC1Ev+0x1242>
 80072a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072aa:	ee17 3a10 	vmov	r3, s14
 80072ae:	3b01      	subs	r3, #1
 80072b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072b4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c0:	ee17 1a90 	vmov	r1, s15
 80072c4:	4419      	add	r1, r3
 80072c6:	f7fe bf29 	b.w	800611c <_ZN16DiagnoseViewBaseC1Ev+0x1274>
 80072ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072d2:	ee17 3a10 	vmov	r3, s14
 80072d6:	3b01      	subs	r3, #1
 80072d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072dc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e8:	ee17 1a90 	vmov	r1, s15
 80072ec:	4419      	add	r1, r3
 80072ee:	f7fe bf2e 	b.w	800614e <_ZN16DiagnoseViewBaseC1Ev+0x12a6>
 80072f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072fa:	ee17 3a10 	vmov	r3, s14
 80072fe:	3b01      	subs	r3, #1
 8007300:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007304:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007310:	ee17 1a90 	vmov	r1, s15
 8007314:	4419      	add	r1, r3
 8007316:	f7fe bf33 	b.w	8006180 <_ZN16DiagnoseViewBaseC1Ev+0x12d8>
 800731a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800731e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007322:	ee17 3a10 	vmov	r3, s14
 8007326:	3b01      	subs	r3, #1
 8007328:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800732c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007338:	ee17 1a90 	vmov	r1, s15
 800733c:	4419      	add	r1, r3
 800733e:	f7fe bf38 	b.w	80061b2 <_ZN16DiagnoseViewBaseC1Ev+0x130a>
 8007342:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007346:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800734a:	ee17 3a10 	vmov	r3, s14
 800734e:	3b01      	subs	r3, #1
 8007350:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007354:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007360:	ee17 1a90 	vmov	r1, s15
 8007364:	4419      	add	r1, r3
 8007366:	f7fe bf3d 	b.w	80061e4 <_ZN16DiagnoseViewBaseC1Ev+0x133c>
 800736a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800736e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007372:	ee17 3a10 	vmov	r3, s14
 8007376:	3b01      	subs	r3, #1
 8007378:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800737c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007388:	ee17 1a90 	vmov	r1, s15
 800738c:	4419      	add	r1, r3
 800738e:	f7fe bf42 	b.w	8006216 <_ZN16DiagnoseViewBaseC1Ev+0x136e>
 8007392:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007396:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800739a:	ee17 3a10 	vmov	r3, s14
 800739e:	3b01      	subs	r3, #1
 80073a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073b0:	ee17 1a90 	vmov	r1, s15
 80073b4:	4419      	add	r1, r3
 80073b6:	f7fe bf47 	b.w	8006248 <_ZN16DiagnoseViewBaseC1Ev+0x13a0>
 80073ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073c2:	ee17 3a10 	vmov	r3, s14
 80073c6:	3b01      	subs	r3, #1
 80073c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d8:	ee17 1a90 	vmov	r1, s15
 80073dc:	4419      	add	r1, r3
 80073de:	f7fe bf4c 	b.w	800627a <_ZN16DiagnoseViewBaseC1Ev+0x13d2>
 80073e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073ea:	ee17 3a10 	vmov	r3, s14
 80073ee:	3b01      	subs	r3, #1
 80073f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007400:	ee17 1a90 	vmov	r1, s15
 8007404:	4419      	add	r1, r3
 8007406:	f7fe bf51 	b.w	80062ac <_ZN16DiagnoseViewBaseC1Ev+0x1404>
 800740a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800740e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007412:	ee17 3a10 	vmov	r3, s14
 8007416:	3b01      	subs	r3, #1
 8007418:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800741c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007428:	ee17 1a90 	vmov	r1, s15
 800742c:	4419      	add	r1, r3
 800742e:	f7fe bfa1 	b.w	8006374 <_ZN16DiagnoseViewBaseC1Ev+0x14cc>
 8007432:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007436:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800743a:	ee17 3a10 	vmov	r3, s14
 800743e:	3b01      	subs	r3, #1
 8007440:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007444:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007450:	ee17 1a90 	vmov	r1, s15
 8007454:	4419      	add	r1, r3
 8007456:	f7fe bfa6 	b.w	80063a6 <_ZN16DiagnoseViewBaseC1Ev+0x14fe>
 800745a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800745e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007462:	ee17 3a10 	vmov	r3, s14
 8007466:	3b01      	subs	r3, #1
 8007468:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800746c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007478:	ee17 1a90 	vmov	r1, s15
 800747c:	4419      	add	r1, r3
 800747e:	f7fe bfab 	b.w	80063d8 <_ZN16DiagnoseViewBaseC1Ev+0x1530>
 8007482:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007486:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800748a:	ee17 3a10 	vmov	r3, s14
 800748e:	3b01      	subs	r3, #1
 8007490:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007494:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074a0:	ee17 1a90 	vmov	r1, s15
 80074a4:	4419      	add	r1, r3
 80074a6:	f7fe bfb0 	b.w	800640a <_ZN16DiagnoseViewBaseC1Ev+0x1562>
 80074aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074b2:	ee17 3a10 	vmov	r3, s14
 80074b6:	3b01      	subs	r3, #1
 80074b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c8:	ee17 1a90 	vmov	r1, s15
 80074cc:	4419      	add	r1, r3
 80074ce:	f7fe bfb5 	b.w	800643c <_ZN16DiagnoseViewBaseC1Ev+0x1594>
 80074d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074da:	ee17 3a10 	vmov	r3, s14
 80074de:	3b01      	subs	r3, #1
 80074e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f0:	ee17 1a90 	vmov	r1, s15
 80074f4:	4419      	add	r1, r3
 80074f6:	f7fe bfba 	b.w	800646e <_ZN16DiagnoseViewBaseC1Ev+0x15c6>
 80074fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007502:	ee17 3a10 	vmov	r3, s14
 8007506:	3b01      	subs	r3, #1
 8007508:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800750c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007518:	ee17 1a90 	vmov	r1, s15
 800751c:	4419      	add	r1, r3
 800751e:	f7fe bfbf 	b.w	80064a0 <_ZN16DiagnoseViewBaseC1Ev+0x15f8>
 8007522:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007526:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800752a:	ee17 3a10 	vmov	r3, s14
 800752e:	3b01      	subs	r3, #1
 8007530:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007534:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007540:	ee17 1a90 	vmov	r1, s15
 8007544:	4419      	add	r1, r3
 8007546:	f7fe bfc4 	b.w	80064d2 <_ZN16DiagnoseViewBaseC1Ev+0x162a>
 800754a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800754e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007552:	ee17 3a10 	vmov	r3, s14
 8007556:	3b01      	subs	r3, #1
 8007558:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800755c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007568:	ee17 1a90 	vmov	r1, s15
 800756c:	4419      	add	r1, r3
 800756e:	f7fe bfc9 	b.w	8006504 <_ZN16DiagnoseViewBaseC1Ev+0x165c>
 8007572:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007576:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800757a:	ee17 3a10 	vmov	r3, s14
 800757e:	3b01      	subs	r3, #1
 8007580:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007584:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007590:	ee17 1a90 	vmov	r1, s15
 8007594:	4419      	add	r1, r3
 8007596:	f7fe bfce 	b.w	8006536 <_ZN16DiagnoseViewBaseC1Ev+0x168e>
 800759a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800759e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075a2:	ee17 3a10 	vmov	r3, s14
 80075a6:	3b01      	subs	r3, #1
 80075a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b8:	ee17 1a90 	vmov	r1, s15
 80075bc:	4419      	add	r1, r3
 80075be:	f7fe bfd3 	b.w	8006568 <_ZN16DiagnoseViewBaseC1Ev+0x16c0>
 80075c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075ca:	ee17 3a10 	vmov	r3, s14
 80075ce:	3b01      	subs	r3, #1
 80075d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e0:	ee17 1a90 	vmov	r1, s15
 80075e4:	4419      	add	r1, r3
 80075e6:	f7fe bfd8 	b.w	800659a <_ZN16DiagnoseViewBaseC1Ev+0x16f2>
 80075ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075f2:	ee17 3a10 	vmov	r3, s14
 80075f6:	3b01      	subs	r3, #1
 80075f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007608:	ee17 1a90 	vmov	r1, s15
 800760c:	4419      	add	r1, r3
 800760e:	f7fe bfdd 	b.w	80065cc <_ZN16DiagnoseViewBaseC1Ev+0x1724>
 8007612:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007616:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800761a:	ee17 3a10 	vmov	r3, s14
 800761e:	3b01      	subs	r3, #1
 8007620:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007624:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007630:	ee17 1a90 	vmov	r1, s15
 8007634:	4419      	add	r1, r3
 8007636:	f7fe bfe2 	b.w	80065fe <_ZN16DiagnoseViewBaseC1Ev+0x1756>
 800763a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800763e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007642:	ee17 3a10 	vmov	r3, s14
 8007646:	3b01      	subs	r3, #1
 8007648:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800764c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007658:	ee17 1a90 	vmov	r1, s15
 800765c:	4419      	add	r1, r3
 800765e:	f7fe bfe7 	b.w	8006630 <_ZN16DiagnoseViewBaseC1Ev+0x1788>
 8007662:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007666:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800766a:	ee17 3a10 	vmov	r3, s14
 800766e:	3b01      	subs	r3, #1
 8007670:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007674:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007680:	ee17 1a90 	vmov	r1, s15
 8007684:	4419      	add	r1, r3
 8007686:	f7fe bfec 	b.w	8006662 <_ZN16DiagnoseViewBaseC1Ev+0x17ba>
 800768a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800768e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007692:	ee17 3a10 	vmov	r3, s14
 8007696:	3b01      	subs	r3, #1
 8007698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800769c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a8:	ee17 1a90 	vmov	r1, s15
 80076ac:	4419      	add	r1, r3
 80076ae:	f7fe bff1 	b.w	8006694 <_ZN16DiagnoseViewBaseC1Ev+0x17ec>
 80076b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076ba:	ee17 3a10 	vmov	r3, s14
 80076be:	3b01      	subs	r3, #1
 80076c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076d0:	ee17 1a90 	vmov	r1, s15
 80076d4:	4419      	add	r1, r3
 80076d6:	f7fe bff6 	b.w	80066c6 <_ZN16DiagnoseViewBaseC1Ev+0x181e>
 80076da:	bf00      	nop

080076dc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80076dc:	4770      	bx	lr

080076de <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80076de:	4770      	bx	lr

080076e0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80076e0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80076e4:	6808      	ldr	r0, [r1, #0]
 80076e6:	6849      	ldr	r1, [r1, #4]
 80076e8:	c303      	stmia	r3!, {r0, r1}
    }
 80076ea:	4770      	bx	lr

080076ec <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80076ec:	4770      	bx	lr

080076ee <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80076ee:	4770      	bx	lr

080076f0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80076f0:	6041      	str	r1, [r0, #4]
    }
 80076f2:	4770      	bx	lr

080076f4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80076f4:	4770      	bx	lr
	...

080076f8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80076fa:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80076fe:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007702:	2300      	movs	r3, #0
 8007704:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007708:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800770c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoMainScreenScreenNoTransition();
    }
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	08007b39 	.word	0x08007b39

08007718 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8007718:	2301      	movs	r3, #1
 800771a:	7203      	strb	r3, [r0, #8]
    }
 800771c:	4770      	bx	lr

0800771e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800771e:	4770      	bx	lr

08007720 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8007720:	4770      	bx	lr

08007722 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8007722:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8007724:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8007726:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8007728:	68c2      	ldr	r2, [r0, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	1054      	asrs	r4, r2, #1
 800772e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8007732:	07d2      	lsls	r2, r2, #31
 8007734:	bf48      	it	mi
 8007736:	590a      	ldrmi	r2, [r1, r4]
    }
 8007738:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800773c:	bf48      	it	mi
 800773e:	58d3      	ldrmi	r3, [r2, r3]
 8007740:	4718      	bx	r3

08007742 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8007742:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8007744:	6840      	ldr	r0, [r0, #4]
 8007746:	b130      	cbz	r0, 8007756 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	b91a      	cbnz	r2, 8007754 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800774c:	68d8      	ldr	r0, [r3, #12]
 800774e:	f000 0001 	and.w	r0, r0, #1
 8007752:	4770      	bx	lr
 8007754:	2001      	movs	r0, #1
    }
 8007756:	4770      	bx	lr

08007758 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007758:	b510      	push	{r4, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	210c      	movs	r1, #12
 800775e:	f020 fccb 	bl	80280f8 <_ZdlPvj>
 8007762:	4620      	mov	r0, r4
 8007764:	bd10      	pop	{r4, pc}

08007766 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007766:	b510      	push	{r4, lr}
 8007768:	4604      	mov	r4, r0
 800776a:	2110      	movs	r1, #16
 800776c:	f020 fcc4 	bl	80280f8 <_ZdlPvj>
 8007770:	4620      	mov	r0, r4
 8007772:	bd10      	pop	{r4, pc}

08007774 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8007774:	b510      	push	{r4, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800777c:	f020 fcbc 	bl	80280f8 <_ZdlPvj>
 8007780:	4620      	mov	r0, r4
 8007782:	bd10      	pop	{r4, pc}

08007784 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8007784:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8007786:	f012 f8f3 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 800778a:	6803      	ldr	r3, [r0, #0]
    }
 800778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8007790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007792:	4718      	bx	r3

08007794 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8007794:	b510      	push	{r4, lr}
 8007796:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8007798:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800779c:	b158      	cbz	r0, 80077b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800779e:	6803      	ldr	r3, [r0, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	4798      	blx	r3
 80077a4:	b138      	cbz	r0, 80077b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80077a6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80077aa:	6803      	ldr	r3, [r0, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80077b6:	bd10      	pop	{r4, pc}

080077b8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80077b8:	4b04      	ldr	r3, [pc, #16]	@ (80077cc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80077c0:	b10a      	cbz	r2, 80077c6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80077c2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80077c4:	b900      	cbnz	r0, 80077c8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80077c6:	6898      	ldr	r0, [r3, #8]
    }
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	24028520 	.word	0x24028520

080077d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	4617      	mov	r7, r2
 80077d4:	4604      	mov	r4, r0
 80077d6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80077d8:	f012 f9da 	bl	8019b90 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80077dc:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80077de:	2500      	movs	r5, #0
        instance = this;
 80077e0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077e2:	4629      	mov	r1, r5
      model(m)
 80077e4:	4b11      	ldr	r3, [pc, #68]	@ (800782c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80077e6:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80077e8:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80077ea:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 80077ee:	4b11      	ldr	r3, [pc, #68]	@ (8007834 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077f6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80077f8:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80077fc:	689b      	ldr	r3, [r3, #8]
      model(m)
 80077fe:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007802:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8007804:	4628      	mov	r0, r5
 8007806:	f000 febf 	bl	8008588 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800780a:	f7ff ffd5 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 800780e:	f01a fde8 	bl	80223e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8007812:	f7ff ffd1 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8007816:	f01a fe5b 	bl	80224d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800781a:	f7ff ffcd 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 800781e:	f01a fe63 	bl	80224e8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8007822:	4620      	mov	r0, r4
 8007824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007826:	bf00      	nop
 8007828:	24028574 	.word	0x24028574
 800782c:	0802c1a8 	.word	0x0802c1a8
 8007830:	0802c190 	.word	0x0802c190
 8007834:	24028520 	.word	0x24028520

08007838 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007838:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x1c>)
 800783a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800783e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007842:	2300      	movs	r3, #0
 8007844:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8007848:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800784c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	08007b39 	.word	0x08007b39

08007858 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>:
 8007858:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv+0x1c>)
 800785a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800785e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007862:	2300      	movs	r3, #0
 8007864:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Diagnose

void FrontendApplicationBase::gotoDiagnoseScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDiagnoseScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007868:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800786c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	080079ed 	.word	0x080079ed

08007878 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>:
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv+0x1c>)
 800787a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800787e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007882:	2300      	movs	r3, #0
 8007884:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Calculator

void FrontendApplicationBase::gotoCalculatorScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007888:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800788c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	080078a1 	.word	0x080078a1

08007898 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789c:	4718      	bx	r3
	...

080078a0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl()
{
 80078a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<CalculatorView, CalculatorPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80078a4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80078a8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80078aa:	68b0      	ldr	r0, [r6, #8]
 80078ac:	6803      	ldr	r3, [r0, #0]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	4798      	blx	r3
 80078b2:	f240 63f3 	movw	r3, #1779	@ 0x6f3
 80078b6:	4298      	cmp	r0, r3
 80078b8:	d805      	bhi.n	80078c6 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x26>
 80078ba:	4b44      	ldr	r3, [pc, #272]	@ (80079cc <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
 80078bc:	21a3      	movs	r1, #163	@ 0xa3
 80078be:	4a44      	ldr	r2, [pc, #272]	@ (80079d0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80078c0:	4844      	ldr	r0, [pc, #272]	@ (80079d4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x134>)
 80078c2:	f020 ff91 	bl	80287e8 <__assert_func>
 80078c6:	6870      	ldr	r0, [r6, #4]
 80078c8:	6803      	ldr	r3, [r0, #0]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	4798      	blx	r3
 80078ce:	280f      	cmp	r0, #15
 80078d0:	d803      	bhi.n	80078da <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x3a>
 80078d2:	4b41      	ldr	r3, [pc, #260]	@ (80079d8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x138>)
 80078d4:	21a4      	movs	r1, #164	@ 0xa4
 80078d6:	4a3e      	ldr	r2, [pc, #248]	@ (80079d0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 80078d8:	e7f2      	b.n	80078c0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80078da:	68f0      	ldr	r0, [r6, #12]
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	4798      	blx	r3
 80078e2:	280b      	cmp	r0, #11
 80078e4:	d803      	bhi.n	80078ee <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x4e>
 80078e6:	4b3d      	ldr	r3, [pc, #244]	@ (80079dc <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x13c>)
 80078e8:	21a5      	movs	r1, #165	@ 0xa5
 80078ea:	4a39      	ldr	r2, [pc, #228]	@ (80079d0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 80078ec:	e7e8      	b.n	80078c0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80078ee:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80079e4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80078f2:	f012 f83d 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80078f6:	3004      	adds	r0, #4
 80078f8:	f012 f878 	bl	80199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80078fc:	f8d9 0000 	ldr.w	r0, [r9]
 8007900:	b110      	cbz	r0, 8007908 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8007902:	6803      	ldr	r3, [r0, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	4798      	blx	r3
    if (*currentTrans)
 8007908:	f8d9 0000 	ldr.w	r0, [r9]
 800790c:	b110      	cbz	r0, 8007914 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 800790e:	6803      	ldr	r3, [r0, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4798      	blx	r3
    if (*currentScreen)
 8007914:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80079e8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x148>
 8007918:	f8d8 0000 	ldr.w	r0, [r8]
 800791c:	b110      	cbz	r0, 8007924 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	4798      	blx	r3
    if (*currentPresenter)
 8007924:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007928:	b110      	cbz	r0, 8007930 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800792a:	6803      	ldr	r3, [r0, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	4798      	blx	r3
    if (*currentScreen)
 8007930:	f8d8 0000 	ldr.w	r0, [r8]
 8007934:	b110      	cbz	r0, 800793c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4798      	blx	r3
    if (*currentPresenter)
 800793c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007940:	b110      	cbz	r0, 8007948 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007942:	6803      	ldr	r3, [r0, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007948:	2100      	movs	r1, #0
 800794a:	68f0      	ldr	r0, [r6, #12]
 800794c:	f7ff ffa4 	bl	8007898 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8007950:	f04f 0b00 	mov.w	fp, #0
 8007954:	4b22      	ldr	r3, [pc, #136]	@ (80079e0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x140>)
 8007956:	4604      	mov	r4, r0
 8007958:	f8c0 b004 	str.w	fp, [r0, #4]
 800795c:	4659      	mov	r1, fp
 800795e:	f880 b008 	strb.w	fp, [r0, #8]
 8007962:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007964:	68b0      	ldr	r0, [r6, #8]
 8007966:	6803      	ldr	r3, [r0, #0]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	4798      	blx	r3
 800796c:	4605      	mov	r5, r0
 800796e:	f000 fea7 	bl	80086c0 <_ZN14CalculatorViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007972:	6870      	ldr	r0, [r6, #4]
 8007974:	4659      	mov	r1, fp
 8007976:	6803      	ldr	r3, [r0, #0]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	4798      	blx	r3
 800797c:	4606      	mov	r6, r0
 800797e:	4629      	mov	r1, r5
 8007980:	f000 fe7c 	bl	800867c <_ZN19CalculatorPresenterC1ER14CalculatorView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8007984:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007986:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800798a:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800798c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007990:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8007994:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007998:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800799a:	f8c6 a008 	str.w	sl, [r6, #8]
 800799e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80079a0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80079a2:	4798      	blx	r3
    newPresenter->activate();
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80079ac:	4621      	mov	r1, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	f014 f8f4 	bl	801bb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	4620      	mov	r0, r4
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	4798      	blx	r3
    newTransition->invalidate();
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	4620      	mov	r0, r4
 80079c0:	695b      	ldr	r3, [r3, #20]
}
 80079c2:	b001      	add	sp, #4
 80079c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	4718      	bx	r3
 80079ca:	bf00      	nop
 80079cc:	0802bcd8 	.word	0x0802bcd8
 80079d0:	0802bd66 	.word	0x0802bd66
 80079d4:	0802be3e 	.word	0x0802be3e
 80079d8:	0802be93 	.word	0x0802be93
 80079dc:	0802bf36 	.word	0x0802bf36
 80079e0:	0802c1fc 	.word	0x0802c1fc
 80079e4:	24028568 	.word	0x24028568
 80079e8:	24028564 	.word	0x24028564

080079ec <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv>:
{
 80079ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<DiagnoseView, DiagnosePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80079f0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80079f4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80079f6:	68b0      	ldr	r0, [r6, #8]
 80079f8:	6803      	ldr	r3, [r0, #0]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	4798      	blx	r3
 80079fe:	f243 437b 	movw	r3, #13435	@ 0x347b
 8007a02:	4298      	cmp	r0, r3
 8007a04:	d805      	bhi.n	8007a12 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x26>
 8007a06:	4b44      	ldr	r3, [pc, #272]	@ (8007b18 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x12c>)
 8007a08:	21a3      	movs	r1, #163	@ 0xa3
 8007a0a:	4a44      	ldr	r2, [pc, #272]	@ (8007b1c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007a0c:	4844      	ldr	r0, [pc, #272]	@ (8007b20 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x134>)
 8007a0e:	f020 feeb 	bl	80287e8 <__assert_func>
 8007a12:	6870      	ldr	r0, [r6, #4]
 8007a14:	6803      	ldr	r3, [r0, #0]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	4798      	blx	r3
 8007a1a:	280f      	cmp	r0, #15
 8007a1c:	d803      	bhi.n	8007a26 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x3a>
 8007a1e:	4b41      	ldr	r3, [pc, #260]	@ (8007b24 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x138>)
 8007a20:	21a4      	movs	r1, #164	@ 0xa4
 8007a22:	4a3e      	ldr	r2, [pc, #248]	@ (8007b1c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8007a24:	e7f2      	b.n	8007a0c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007a26:	68f0      	ldr	r0, [r6, #12]
 8007a28:	6803      	ldr	r3, [r0, #0]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	4798      	blx	r3
 8007a2e:	280b      	cmp	r0, #11
 8007a30:	d803      	bhi.n	8007a3a <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x4e>
 8007a32:	4b3d      	ldr	r3, [pc, #244]	@ (8007b28 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x13c>)
 8007a34:	21a5      	movs	r1, #165	@ 0xa5
 8007a36:	4a39      	ldr	r2, [pc, #228]	@ (8007b1c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8007a38:	e7e8      	b.n	8007a0c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8007a3a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8007b30 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8007a3e:	f011 ff97 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8007a42:	3004      	adds	r0, #4
 8007a44:	f011 ffd2 	bl	80199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007a48:	f8d9 0000 	ldr.w	r0, [r9]
 8007a4c:	b110      	cbz	r0, 8007a54 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8007a4e:	6803      	ldr	r3, [r0, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	4798      	blx	r3
    if (*currentTrans)
 8007a54:	f8d9 0000 	ldr.w	r0, [r9]
 8007a58:	b110      	cbz	r0, 8007a60 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8007a5a:	6803      	ldr	r3, [r0, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4798      	blx	r3
    if (*currentScreen)
 8007a60:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007b34 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x148>
 8007a64:	f8d8 0000 	ldr.w	r0, [r8]
 8007a68:	b110      	cbz	r0, 8007a70 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8007a6a:	6803      	ldr	r3, [r0, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	4798      	blx	r3
    if (*currentPresenter)
 8007a70:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007a74:	b110      	cbz	r0, 8007a7c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8007a76:	6803      	ldr	r3, [r0, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4798      	blx	r3
    if (*currentScreen)
 8007a7c:	f8d8 0000 	ldr.w	r0, [r8]
 8007a80:	b110      	cbz	r0, 8007a88 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007a82:	6803      	ldr	r3, [r0, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4798      	blx	r3
    if (*currentPresenter)
 8007a88:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007a8c:	b110      	cbz	r0, 8007a94 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007a8e:	6803      	ldr	r3, [r0, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007a94:	2100      	movs	r1, #0
 8007a96:	68f0      	ldr	r0, [r6, #12]
 8007a98:	f7ff fefe 	bl	8007898 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007a9c:	f04f 0b00 	mov.w	fp, #0
 8007aa0:	4b22      	ldr	r3, [pc, #136]	@ (8007b2c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x140>)
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f8c0 b004 	str.w	fp, [r0, #4]
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	f880 b008 	strb.w	fp, [r0, #8]
 8007aae:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007ab0:	68b0      	ldr	r0, [r6, #8]
 8007ab2:	6803      	ldr	r3, [r0, #0]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	4798      	blx	r3
 8007ab8:	4605      	mov	r5, r0
 8007aba:	f000 fef5 	bl	80088a8 <_ZN12DiagnoseViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007abe:	6870      	ldr	r0, [r6, #4]
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	6803      	ldr	r3, [r0, #0]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac6:	4798      	blx	r3
 8007ac8:	4606      	mov	r6, r0
 8007aca:	4629      	mov	r1, r5
 8007acc:	f000 feca 	bl	8008864 <_ZN17DiagnosePresenterC1ER12DiagnoseView>
    model->bind(newPresenter);
 8007ad0:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007ad2:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007ad6:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007ad8:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007adc:	f8c8 5000 	str.w	r5, [r8]
 8007ae0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	f8c6 a008 	str.w	sl, [r6, #8]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007aee:	4798      	blx	r3
    newPresenter->activate();
 8007af0:	6833      	ldr	r3, [r6, #0]
 8007af2:	4630      	mov	r0, r6
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f014 f84e 	bl	801bb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	4620      	mov	r0, r4
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	4798      	blx	r3
    newTransition->invalidate();
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	695b      	ldr	r3, [r3, #20]
}
 8007b0e:	b001      	add	sp, #4
 8007b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4718      	bx	r3
 8007b16:	bf00      	nop
 8007b18:	0802bcd8 	.word	0x0802bcd8
 8007b1c:	0802bfd9 	.word	0x0802bfd9
 8007b20:	0802be3e 	.word	0x0802be3e
 8007b24:	0802be93 	.word	0x0802be93
 8007b28:	0802bf36 	.word	0x0802bf36
 8007b2c:	0802c1fc 	.word	0x0802c1fc
 8007b30:	24028568 	.word	0x24028568
 8007b34:	24028564 	.word	0x24028564

08007b38 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:
{
 8007b38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007b3c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007b40:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007b42:	68b0      	ldr	r0, [r6, #8]
 8007b44:	6803      	ldr	r3, [r0, #0]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	4798      	blx	r3
 8007b4a:	f5b0 7f67 	cmp.w	r0, #924	@ 0x39c
 8007b4e:	d205      	bcs.n	8007b5c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x24>
 8007b50:	4b43      	ldr	r3, [pc, #268]	@ (8007c60 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x128>)
 8007b52:	21a3      	movs	r1, #163	@ 0xa3
 8007b54:	4a43      	ldr	r2, [pc, #268]	@ (8007c64 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007b56:	4844      	ldr	r0, [pc, #272]	@ (8007c68 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x130>)
 8007b58:	f020 fe46 	bl	80287e8 <__assert_func>
 8007b5c:	6870      	ldr	r0, [r6, #4]
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	4798      	blx	r3
 8007b64:	280f      	cmp	r0, #15
 8007b66:	d803      	bhi.n	8007b70 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x38>
 8007b68:	4b40      	ldr	r3, [pc, #256]	@ (8007c6c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x134>)
 8007b6a:	21a4      	movs	r1, #164	@ 0xa4
 8007b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c64 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007b6e:	e7f2      	b.n	8007b56 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007b70:	68f0      	ldr	r0, [r6, #12]
 8007b72:	6803      	ldr	r3, [r0, #0]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	4798      	blx	r3
 8007b78:	280b      	cmp	r0, #11
 8007b7a:	d803      	bhi.n	8007b84 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x4c>
 8007b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c70 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x138>)
 8007b7e:	21a5      	movs	r1, #165	@ 0xa5
 8007b80:	4a38      	ldr	r2, [pc, #224]	@ (8007c64 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007b82:	e7e8      	b.n	8007b56 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8007b84:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8007c78 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8007b88:	f011 fef2 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8007b8c:	3004      	adds	r0, #4
 8007b8e:	f011 ff2d 	bl	80199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007b92:	f8d9 0000 	ldr.w	r0, [r9]
 8007b96:	b110      	cbz	r0, 8007b9e <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8007b98:	6803      	ldr	r3, [r0, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	4798      	blx	r3
    if (*currentTrans)
 8007b9e:	f8d9 0000 	ldr.w	r0, [r9]
 8007ba2:	b110      	cbz	r0, 8007baa <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4798      	blx	r3
    if (*currentScreen)
 8007baa:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007c7c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x144>
 8007bae:	f8d8 0000 	ldr.w	r0, [r8]
 8007bb2:	b110      	cbz	r0, 8007bba <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8007bb4:	6803      	ldr	r3, [r0, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	4798      	blx	r3
    if (*currentPresenter)
 8007bba:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007bbe:	b110      	cbz	r0, 8007bc6 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4798      	blx	r3
    if (*currentScreen)
 8007bc6:	f8d8 0000 	ldr.w	r0, [r8]
 8007bca:	b110      	cbz	r0, 8007bd2 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8007bcc:	6803      	ldr	r3, [r0, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4798      	blx	r3
    if (*currentPresenter)
 8007bd2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007bd6:	b110      	cbz	r0, 8007bde <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8007bd8:	6803      	ldr	r3, [r0, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007bde:	2100      	movs	r1, #0
 8007be0:	68f0      	ldr	r0, [r6, #12]
 8007be2:	f7ff fe59 	bl	8007898 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007be6:	f04f 0b00 	mov.w	fp, #0
 8007bea:	4b22      	ldr	r3, [pc, #136]	@ (8007c74 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x13c>)
 8007bec:	4604      	mov	r4, r0
 8007bee:	f8c0 b004 	str.w	fp, [r0, #4]
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	f880 b008 	strb.w	fp, [r0, #8]
 8007bf8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007bfa:	68b0      	ldr	r0, [r6, #8]
 8007bfc:	6803      	ldr	r3, [r0, #0]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c00:	4798      	blx	r3
 8007c02:	4605      	mov	r5, r0
 8007c04:	f000 feaa 	bl	800895c <_ZN14MainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007c08:	6870      	ldr	r0, [r6, #4]
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c10:	4798      	blx	r3
 8007c12:	4606      	mov	r6, r0
 8007c14:	4629      	mov	r1, r5
 8007c16:	f000 fe7f 	bl	8008918 <_ZN19MainScreenPresenterC1ER14MainScreenView>
    model->bind(newPresenter);
 8007c1a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007c1c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007c20:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007c22:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007c26:	f8c8 5000 	str.w	r5, [r8]
 8007c2a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	f8c6 a008 	str.w	sl, [r6, #8]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007c38:	4798      	blx	r3
    newPresenter->activate();
 8007c3a:	6833      	ldr	r3, [r6, #0]
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f013 ffa9 	bl	801bb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	4798      	blx	r3
    newTransition->invalidate();
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4620      	mov	r0, r4
 8007c56:	695b      	ldr	r3, [r3, #20]
}
 8007c58:	b001      	add	sp, #4
 8007c5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5e:	4718      	bx	r3
 8007c60:	0802bcd8 	.word	0x0802bcd8
 8007c64:	0802c0ad 	.word	0x0802c0ad
 8007c68:	0802be3e 	.word	0x0802be3e
 8007c6c:	0802be93 	.word	0x0802be93
 8007c70:	0802bf36 	.word	0x0802bf36
 8007c74:	0802c1fc 	.word	0x0802c1fc
 8007c78:	24028568 	.word	0x24028568
 8007c7c:	24028564 	.word	0x24028564

08007c80 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8007c80:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007c82:	4770      	bx	lr

08007c84 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8007c84:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007c86:	4770      	bx	lr

08007c88 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8007c88:	4770      	bx	lr

08007c8a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007c8a:	888b      	ldrh	r3, [r1, #4]
 8007c8c:	69c0      	ldr	r0, [r0, #28]
 8007c8e:	0adb      	lsrs	r3, r3, #11
 8007c90:	680a      	ldr	r2, [r1, #0]
 8007c92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8007c96:	4410      	add	r0, r2
 8007c98:	4770      	bx	lr

08007c9a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8007c9e:	b1ba      	cbz	r2, 8007cd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8007ca0:	7b10      	ldrb	r0, [r2, #12]
 8007ca2:	b168      	cbz	r0, 8007cc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007ca4:	7b53      	ldrb	r3, [r2, #13]
 8007ca6:	7ad2      	ldrb	r2, [r2, #11]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	6a23      	ldr	r3, [r4, #32]
 8007cb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	428a      	cmp	r2, r1
 8007cba:	d102      	bne.n	8007cc2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8007cbc:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8007cc0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8007cc2:	d805      	bhi.n	8007cd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007cc4:	3801      	subs	r0, #1
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	b280      	uxth	r0, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1f3      	bne.n	8007cb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007cce:	e7f7      	b.n	8007cc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7f5      	b.n	8007cc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08007cd4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	212c      	movs	r1, #44	@ 0x2c
 8007cda:	f020 fa0d 	bl	80280f8 <_ZdlPvj>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	bd10      	pop	{r4, pc}
	...

08007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007ce4:	b530      	push	{r4, r5, lr}
 8007ce6:	b08b      	sub	sp, #44	@ 0x2c
 8007ce8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8007cea:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8007cee:	9508      	str	r5, [sp, #32]
 8007cf0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8007cf4:	9507      	str	r5, [sp, #28]
 8007cf6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8007cfa:	9506      	str	r5, [sp, #24]
 8007cfc:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8007d00:	9505      	str	r5, [sp, #20]
 8007d02:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8007d06:	9504      	str	r5, [sp, #16]
 8007d08:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8007d0c:	9503      	str	r5, [sp, #12]
 8007d0e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8007d12:	9502      	str	r5, [sp, #8]
 8007d14:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8007d18:	9501      	str	r5, [sp, #4]
 8007d1a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8007d1e:	9500      	str	r5, [sp, #0]
 8007d20:	f013 faba 	bl	801b298 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8007d24:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8007d26:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8007d28:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8007d2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d2c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8007d2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d30:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8007d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d34:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8007d36:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007d38:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8007d3a:	b00b      	add	sp, #44	@ 0x2c
 8007d3c:	bd30      	pop	{r4, r5, pc}
 8007d3e:	bf00      	nop
 8007d40:	0802c220 	.word	0x0802c220

08007d44 <_ZN18MainScreenViewBaseD1Ev>:
}

MainScreenViewBase::~MainScreenViewBase()
{

}
 8007d44:	4770      	bx	lr

08007d46 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{

}
 8007d46:	4770      	bx	lr

08007d48 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007d48:	4770      	bx	lr

08007d4a <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007d4a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007d4c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8007d4e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007d50:	68c2      	ldr	r2, [r0, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	1055      	asrs	r5, r2, #1
 8007d56:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007d5a:	07d2      	lsls	r2, r2, #31
 8007d5c:	bf48      	it	mi
 8007d5e:	5962      	ldrmi	r2, [r4, r5]
    }
 8007d60:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007d62:	bf48      	it	mi
 8007d64:	58d3      	ldrmi	r3, [r2, r3]
 8007d66:	4718      	bx	r3

08007d68 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007d68:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8007d6a:	6840      	ldr	r0, [r0, #4]
 8007d6c:	b130      	cbz	r0, 8007d7c <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	b91a      	cbnz	r2, 8007d7a <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8007d72:	68d8      	ldr	r0, [r3, #12]
 8007d74:	f000 0001 	and.w	r0, r0, #1
 8007d78:	4770      	bx	lr
 8007d7a:	2001      	movs	r0, #1
    }
 8007d7c:	4770      	bx	lr

08007d7e <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	2110      	movs	r1, #16
 8007d84:	f020 f9b8 	bl	80280f8 <_ZdlPvj>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
}
 8007d90:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8007d94:	f020 f9b0 	bl	80280f8 <_ZdlPvj>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	bd10      	pop	{r4, pc}

08007d9c <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007d9c:	b538      	push	{r3, r4, r5, lr}
    if (&src == &SwitchToDiagnose)
 8007d9e:	f500 7314 	add.w	r3, r0, #592	@ 0x250
{
 8007da2:	4604      	mov	r4, r0
 8007da4:	460d      	mov	r5, r1
    if (&src == &SwitchToDiagnose)
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d103      	bne.n	8007db2 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~MainScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007daa:	f011 fde1 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //SwitchToDiagnose
        //When SwitchToDiagnose clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
 8007dae:	f7ff fd53 	bl	8007858 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>
    }
    if (&src == &SwitchToCalculator)
 8007db2:	f504 742c 	add.w	r4, r4, #688	@ 0x2b0
 8007db6:	42a5      	cmp	r5, r4
 8007db8:	d105      	bne.n	8007dc6 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
 8007dba:	f011 fdd9 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When SwitchToCalculator clicked change screen to Calculator
        //Go to Calculator with no screen transition
        application().gotoCalculatorScreenNoTransition();
    }
}
 8007dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoCalculatorScreenNoTransition();
 8007dc2:	f7ff bd59 	b.w	8007878 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>
}
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}

08007dc8 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007dcc:	2226      	movs	r2, #38	@ 0x26
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f020 ffa6 	bl	8028d20 <memset>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7fb ffcd 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8007dda:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8007ddc:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8007de0:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8007de6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dec:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8007dee:	2300      	movs	r3, #0
 8007df0:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	8723      	strh	r3, [r4, #56]	@ 0x38
 8007dfa:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8007dfc:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	0802d298 	.word	0x0802d298
 8007e08:	0802b820 	.word	0x0802b820

08007e0c <_ZN8touchgfx6ButtonC1Ev>:
    Button()
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 8007e10:	2226      	movs	r2, #38	@ 0x26
 8007e12:	2100      	movs	r1, #0
 8007e14:	f020 ff84 	bl	8028d20 <memset>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7fb ffab 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8007e1e:	2300      	movs	r3, #0
    {
    }
 8007e20:	4620      	mov	r0, r4
 8007e22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e24:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 8007e2e:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e36:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8007e38:	8623      	strh	r3, [r4, #48]	@ 0x30
 8007e3a:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	0802d390 	.word	0x0802d390

08007e44 <_ZN18MainScreenViewBaseC1Ev>:
MainScreenViewBase::MainScreenViewBase() :
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4604      	mov	r4, r0
 8007e4a:	b093      	sub	sp, #76	@ 0x4c
        : presenter(0)
 8007e4c:	2500      	movs	r5, #0
 8007e4e:	f013 fcf9 	bl	801b844 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 8007e52:	46a0      	mov	r8, r4
 8007e54:	4bde      	ldr	r3, [pc, #888]	@ (80081d0 <_ZN18MainScreenViewBaseC1Ev+0x38c>)
        : Widget(), alpha(255), color(0)
 8007e56:	2226      	movs	r2, #38	@ 0x26
 8007e58:	4629      	mov	r1, r5
 8007e5a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007e5c:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8007e60:	f848 3b40 	str.w	r3, [r8], #64
 8007e64:	4640      	mov	r0, r8
 8007e66:	f020 ff5b 	bl	8028d20 <memset>
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7fb ff82 	bl	8003d74 <_ZN8touchgfx6WidgetC1Ev>
 8007e70:	4bd8      	ldr	r3, [pc, #864]	@ (80081d4 <_ZN18MainScreenViewBaseC1Ev+0x390>)
 8007e72:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 8007e76:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8007e7a:	6423      	str	r3, [r4, #64]	@ 0x40
 8007e7c:	23ff      	movs	r3, #255	@ 0xff
 8007e7e:	a910      	add	r1, sp, #64	@ 0x40
 8007e80:	f504 7b98 	add.w	fp, r4, #304	@ 0x130
 8007e84:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8007e88:	4648      	mov	r0, r9
        : color(col)
 8007e8a:	66a5      	str	r5, [r4, #104]	@ 0x68
 8007e8c:	f504 7abc 	add.w	sl, r4, #376	@ 0x178
 8007e90:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8007e94:	f00e f9d6 	bl	8016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f009 feb7 	bl	8011c0c <_ZN8touchgfx12DigitalClockC1Ev>
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f7ff ff92 	bl	8007dc8 <_ZN8touchgfx8TextAreaC1Ev>
 8007ea4:	4650      	mov	r0, sl
 8007ea6:	f7ff ff8f 	bl	8007dc8 <_ZN8touchgfx8TextAreaC1Ev>
 8007eaa:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	9302      	str	r3, [sp, #8]
 8007eb2:	f7ff ff89 	bl	8007dc8 <_ZN8touchgfx8TextAreaC1Ev>
 8007eb6:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 8007eba:	4618      	mov	r0, r3
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	f7ff ff83 	bl	8007dc8 <_ZN8touchgfx8TextAreaC1Ev>
 8007ec2:	f504 7314 	add.w	r3, r4, #592	@ 0x250
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f7ff ff9f 	bl	8007e0c <_ZN8touchgfx6ButtonC1Ev>
 8007ece:	f504 7321 	add.w	r3, r4, #644	@ 0x284
 8007ed2:	a910      	add	r1, sp, #64	@ 0x40
 8007ed4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8007ed8:	4618      	mov	r0, r3
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	f00e f9b2 	bl	8016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007ee0:	f504 732c 	add.w	r3, r4, #688	@ 0x2b0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	f7ff ff90 	bl	8007e0c <_ZN8touchgfx6ButtonC1Ev>
 8007eec:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	f7ff ff68 	bl	8007dc8 <_ZN8touchgfx8TextAreaC1Ev>
 8007ef8:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 8007efc:	a910      	add	r1, sp, #64	@ 0x40
 8007efe:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8007f02:	4618      	mov	r0, r3
 8007f04:	9306      	str	r3, [sp, #24]
 8007f06:	f00e f99d 	bl	8016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007f0a:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8007f0e:	1d27      	adds	r7, r4, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f14:	f7ff ff7a 	bl	8007e0c <_ZN8touchgfx6ButtonC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8007f18:	4baf      	ldr	r3, [pc, #700]	@ (80081d8 <_ZN18MainScreenViewBaseC1Ev+0x394>)
    __background.setPosition(0, 0, 800, 480);
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4640      	mov	r0, r8
 8007f20:	e9c4 34e3 	strd	r3, r4, [r4, #908]	@ 0x38c
 8007f24:	4bad      	ldr	r3, [pc, #692]	@ (80081dc <_ZN18MainScreenViewBaseC1Ev+0x398>)
 8007f26:	e9c4 35e5 	strd	r3, r5, [r4, #916]	@ 0x394
 8007f2a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8007f34:	f7fb ff0b 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8007f38:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	4638      	mov	r0, r7
 8007f40:	66a3      	str	r3, [r4, #104]	@ 0x68
 8007f42:	f009 ff25 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007f46:	230c      	movs	r3, #12
    DiagnoseIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_CROPPED_ID));
 8007f48:	a910      	add	r1, sp, #64	@ 0x40
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8007f50:	f00f f853 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    DiagnoseIcon.setPosition(56, 112, 164, 164);
 8007f54:	23a4      	movs	r3, #164	@ 0xa4
 8007f56:	2270      	movs	r2, #112	@ 0x70
 8007f58:	4648      	mov	r0, r9
 8007f5a:	2138      	movs	r1, #56	@ 0x38
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f7fb fef6 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8007f62:	4629      	mov	r1, r5
 8007f64:	4648      	mov	r0, r9
 8007f66:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 80081e0 <_ZN18MainScreenViewBaseC1Ev+0x39c>
 8007f6a:	f00e f926 	bl	80161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4638      	mov	r0, r7
 8007f72:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 80081e4 <_ZN18MainScreenViewBaseC1Ev+0x3a0>
 8007f76:	f009 ff0b 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainScreenClock.setPosition(597, 18, 187, 51);
 8007f7a:	2333      	movs	r3, #51	@ 0x33
 8007f7c:	2212      	movs	r2, #18
 8007f7e:	4630      	mov	r0, r6
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	f240 2155 	movw	r1, #597	@ 0x255
 8007f86:	23bb      	movs	r3, #187	@ 0xbb
 8007f88:	f7fb fee1 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    MainScreenClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f009 fd7a 	bl	8011a88 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8007f94:	231d      	movs	r3, #29
    MainScreenClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NI1A));
 8007f96:	a910      	add	r1, sp, #64	@ 0x40
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8007f9e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8007fa2:	f009 fd84 	bl	8011aae <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    MainScreenClock.displayLeadingZeroForHourIndicator(true);
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	2101      	movs	r1, #1
 8007faa:	f009 fe7d 	bl	8011ca8 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    MainScreenClock.setTime24Hour(10, 10, 0);
 8007fae:	220a      	movs	r2, #10
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	f884 30c7 	strb.w	r3, [r4, #199]	@ 0xc7
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f009 fe77 	bl	8011cae <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8007fc4:	ae0a      	add	r6, sp, #40	@ 0x28
 8007fc6:	f009 fee3 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Diagnose.setPosition(81, 286, 114, 33);
 8007fca:	2321      	movs	r3, #33	@ 0x21
 8007fcc:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 8007fd0:	4658      	mov	r0, fp
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	2151      	movs	r1, #81	@ 0x51
 8007fd6:	2372      	movs	r3, #114	@ 0x72
 8007fd8:	f7fb feb9 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8007fdc:	4659      	mov	r1, fp
 8007fde:	4630      	mov	r0, r6
        color = newColor;
 8007fe0:	f8c4 9160 	str.w	r9, [r4, #352]	@ 0x160
        linespace = space;
 8007fe4:	f8a4 5164 	strh.w	r5, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 8007fe8:	f00e fbd6 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007fec:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8007ff0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007ff8:	2319      	movs	r3, #25
    Text_Diagnose.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6UML));
 8007ffa:	a910      	add	r1, sp, #64	@ 0x40
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008002:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008006:	f00e fe61 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800800a:	4659      	mov	r1, fp
    Text_Calculator.setPosition(317, 289, 114, 26);
 800800c:	f04f 0b1a 	mov.w	fp, #26
 8008010:	4638      	mov	r0, r7
 8008012:	f009 febd 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008016:	2372      	movs	r3, #114	@ 0x72
 8008018:	f240 1221 	movw	r2, #289	@ 0x121
 800801c:	4650      	mov	r0, sl
 800801e:	f240 113d 	movw	r1, #317	@ 0x13d
 8008022:	f8cd b000 	str.w	fp, [sp]
 8008026:	f7fb fe92 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 800802a:	4651      	mov	r1, sl
 800802c:	4630      	mov	r0, r6
        color = newColor;
 800802e:	f8c4 91a8 	str.w	r9, [r4, #424]	@ 0x1a8
        linespace = space;
 8008032:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
 8008036:	f00e fbaf 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800803a:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 800803e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008046:	2304      	movs	r3, #4
    Text_Calculator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_10PZ));
 8008048:	a910      	add	r1, sp, #64	@ 0x40
 800804a:	4650      	mov	r0, sl
 800804c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008050:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008054:	f00e fe3a 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008058:	4651      	mov	r1, sl
 800805a:	4638      	mov	r0, r7
 800805c:	f009 fe98 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Manipulator.setPosition(530, 289, 134, 26);
 8008060:	2386      	movs	r3, #134	@ 0x86
 8008062:	f240 1221 	movw	r2, #289	@ 0x121
 8008066:	9802      	ldr	r0, [sp, #8]
 8008068:	f240 2112 	movw	r1, #530	@ 0x212
 800806c:	f8cd b000 	str.w	fp, [sp]
 8008070:	f7fb fe6d 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008074:	9902      	ldr	r1, [sp, #8]
 8008076:	4630      	mov	r0, r6
        color = newColor;
 8008078:	f8c4 91f0 	str.w	r9, [r4, #496]	@ 0x1f0
        linespace = space;
 800807c:	f8a4 51f4 	strh.w	r5, [r4, #500]	@ 0x1f4
    SwitchToDiagnose.setAction(buttonCallback);
 8008080:	f504 7a63 	add.w	sl, r4, #908	@ 0x38c
        boundingArea = calculateBoundingArea();
 8008084:	f00e fb88 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008088:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 800808c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Text_Manipulator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CDWB));
 8008094:	a910      	add	r1, sp, #64	@ 0x40
 8008096:	9802      	ldr	r0, [sp, #8]
 8008098:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800809c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80080a0:	f00e fe14 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80080a4:	9902      	ldr	r1, [sp, #8]
 80080a6:	4638      	mov	r0, r7
 80080a8:	f009 fe72 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainTitle.setPosition(47, 18, 384, 51);
 80080ac:	2333      	movs	r3, #51	@ 0x33
 80080ae:	2212      	movs	r2, #18
 80080b0:	9803      	ldr	r0, [sp, #12]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	212f      	movs	r1, #47	@ 0x2f
 80080b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80080ba:	f7fb fe48 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80080be:	9903      	ldr	r1, [sp, #12]
 80080c0:	4630      	mov	r0, r6
        color = newColor;
 80080c2:	f8c4 9238 	str.w	r9, [r4, #568]	@ 0x238
        linespace = space;
 80080c6:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        boundingArea = calculateBoundingArea();
 80080ca:	f00e fb65 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80080ce:	f504 7311 	add.w	r3, r4, #580	@ 0x244
 80080d2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80080d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 80080da:	a910      	add	r1, sp, #64	@ 0x40
 80080dc:	9803      	ldr	r0, [sp, #12]
 80080de:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80080e2:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 80080e6:	f00e fdf1 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80080ea:	9903      	ldr	r1, [sp, #12]
 80080ec:	4638      	mov	r0, r7
 80080ee:	f009 fe4f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToDiagnose.setXY(50, 107);
 80080f2:	9807      	ldr	r0, [sp, #28]
 80080f4:	226b      	movs	r2, #107	@ 0x6b
 80080f6:	2132      	movs	r1, #50	@ 0x32
 80080f8:	f7fb fe1c 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToDiagnose.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 80080fc:	aa10      	add	r2, sp, #64	@ 0x40
 80080fe:	a90f      	add	r1, sp, #60	@ 0x3c
 8008100:	9807      	ldr	r0, [sp, #28]
 8008102:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008106:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 800810a:	f00e fe3d 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800810e:	9907      	ldr	r1, [sp, #28]
 8008110:	4638      	mov	r0, r7
        action = &callback;
 8008112:	f8c4 a278 	str.w	sl, [r4, #632]	@ 0x278
 8008116:	f009 fe3b 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800811a:	2306      	movs	r3, #6
    CalculatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_CALCULATOR_LOGO_ID));
 800811c:	a910      	add	r1, sp, #64	@ 0x40
 800811e:	9804      	ldr	r0, [sp, #16]
 8008120:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008124:	f00e ff69 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    CalculatorIcon.setPosition(289, 112, 164, 164);
 8008128:	23a4      	movs	r3, #164	@ 0xa4
 800812a:	2270      	movs	r2, #112	@ 0x70
 800812c:	9804      	ldr	r0, [sp, #16]
 800812e:	f240 1121 	movw	r1, #289	@ 0x121
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	f7fb fe0b 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    CalculatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008138:	4629      	mov	r1, r5
 800813a:	9804      	ldr	r0, [sp, #16]
 800813c:	f00e f83d 	bl	80161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008140:	9904      	ldr	r1, [sp, #16]
 8008142:	4638      	mov	r0, r7
 8008144:	f009 fe24 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToCalculator.setXY(283, 107);
 8008148:	9808      	ldr	r0, [sp, #32]
 800814a:	226b      	movs	r2, #107	@ 0x6b
 800814c:	f240 111b 	movw	r1, #283	@ 0x11b
 8008150:	f7fb fdf0 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToCalculator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008154:	aa10      	add	r2, sp, #64	@ 0x40
 8008156:	a90f      	add	r1, sp, #60	@ 0x3c
 8008158:	9808      	ldr	r0, [sp, #32]
 800815a:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 800815e:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008162:	f00e fe11 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008166:	9908      	ldr	r1, [sp, #32]
 8008168:	4638      	mov	r0, r7
 800816a:	f8c4 a2d8 	str.w	sl, [r4, #728]	@ 0x2d8
 800816e:	f009 fe0f 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Temperature.setPosition(463, 18, 101, 51);
 8008172:	2333      	movs	r3, #51	@ 0x33
 8008174:	2212      	movs	r2, #18
 8008176:	9805      	ldr	r0, [sp, #20]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800817e:	2365      	movs	r3, #101	@ 0x65
 8008180:	f7fb fde5 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008184:	9905      	ldr	r1, [sp, #20]
 8008186:	4630      	mov	r0, r6
        color = newColor;
 8008188:	f8c4 9314 	str.w	r9, [r4, #788]	@ 0x314
        linespace = space;
 800818c:	f8a4 5318 	strh.w	r5, [r4, #792]	@ 0x318
        boundingArea = calculateBoundingArea();
 8008190:	f00e fb02 	bl	8016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008194:	f504 7348 	add.w	r3, r4, #800	@ 0x320
 8008198:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800819c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80081a0:	2301      	movs	r3, #1
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EH0R));
 80081a2:	a910      	add	r1, sp, #64	@ 0x40
 80081a4:	9805      	ldr	r0, [sp, #20]
 80081a6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80081aa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80081ae:	f00e fd8d 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80081b2:	9905      	ldr	r1, [sp, #20]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f009 fdeb 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80081ba:	230d      	movs	r3, #13
    ManipulatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_MANIPULATOR_ID));
 80081bc:	a910      	add	r1, sp, #64	@ 0x40
 80081be:	9806      	ldr	r0, [sp, #24]
 80081c0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80081c4:	f00e ff19 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    ManipulatorIcon.setPosition(513, 112, 169, 164);
 80081c8:	23a4      	movs	r3, #164	@ 0xa4
 80081ca:	2270      	movs	r2, #112	@ 0x70
 80081cc:	e00c      	b.n	80081e8 <_ZN18MainScreenViewBaseC1Ev+0x3a4>
 80081ce:	bf00      	nop
 80081d0:	0802c2a0 	.word	0x0802c2a0
 80081d4:	0802d328 	.word	0x0802d328
 80081d8:	0802c288 	.word	0x0802c288
 80081dc:	08007d9d 	.word	0x08007d9d
 80081e0:	0802b820 	.word	0x0802b820
 80081e4:	ffa3baff 	.word	0xffa3baff
 80081e8:	9806      	ldr	r0, [sp, #24]
 80081ea:	f240 2101 	movw	r1, #513	@ 0x201
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	23a9      	movs	r3, #169	@ 0xa9
 80081f2:	f7fb fdac 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    ManipulatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80081f6:	4629      	mov	r1, r5
 80081f8:	9806      	ldr	r0, [sp, #24]
 80081fa:	f00d ffde 	bl	80161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80081fe:	9906      	ldr	r1, [sp, #24]
 8008200:	4638      	mov	r0, r7
 8008202:	f009 fdc5 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToManipulator.setXY(509, 107);
 8008206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008208:	226b      	movs	r2, #107	@ 0x6b
 800820a:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800820e:	f7fb fd91 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToManipulator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008212:	aa10      	add	r2, sp, #64	@ 0x40
 8008214:	a90f      	add	r1, sp, #60	@ 0x3c
 8008216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008218:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 800821c:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008220:	f00e fdb2 	bl	8016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008224:	4638      	mov	r0, r7
 8008226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008228:	f009 fdb2 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800822c:	4620      	mov	r0, r4
 800822e:	b013      	add	sp, #76	@ 0x4c
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008234 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008234:	4770      	bx	lr
	...

08008238 <_Z23getFont_verdana_10_4bppv>:
{
 8008238:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800823a:	4d17      	ldr	r5, [pc, #92]	@ (8008298 <_Z23getFont_verdana_10_4bppv+0x60>)
{
 800823c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800823e:	682c      	ldr	r4, [r5, #0]
 8008240:	f3bf 8f5b 	dmb	ish
 8008244:	f014 0401 	ands.w	r4, r4, #1
 8008248:	d122      	bne.n	8008290 <_Z23getFont_verdana_10_4bppv+0x58>
 800824a:	4628      	mov	r0, r5
 800824c:	f01f ff56 	bl	80280fc <__cxa_guard_acquire>
 8008250:	b1f0      	cbz	r0, 8008290 <_Z23getFont_verdana_10_4bppv+0x58>
 8008252:	233f      	movs	r3, #63	@ 0x3f
 8008254:	2204      	movs	r2, #4
 8008256:	4911      	ldr	r1, [pc, #68]	@ (800829c <_Z23getFont_verdana_10_4bppv+0x64>)
 8008258:	9309      	str	r3, [sp, #36]	@ 0x24
 800825a:	4b11      	ldr	r3, [pc, #68]	@ (80082a0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800825c:	4811      	ldr	r0, [pc, #68]	@ (80082a4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800825e:	9308      	str	r3, [sp, #32]
 8008260:	4b11      	ldr	r3, [pc, #68]	@ (80082a8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8008262:	940a      	str	r4, [sp, #40]	@ 0x28
 8008264:	9307      	str	r3, [sp, #28]
 8008266:	2301      	movs	r3, #1
 8008268:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	230a      	movs	r3, #10
 8008272:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	22bf      	movs	r2, #191	@ 0xbf
 800827a:	230c      	movs	r3, #12
 800827c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008280:	f7ff fd30 	bl	8007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008284:	4809      	ldr	r0, [pc, #36]	@ (80082ac <_Z23getFont_verdana_10_4bppv+0x74>)
 8008286:	f020 facd 	bl	8028824 <atexit>
 800828a:	4628      	mov	r0, r5
 800828c:	f01f ff42 	bl	8028114 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8008290:	4804      	ldr	r0, [pc, #16]	@ (80082a4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8008292:	b00f      	add	sp, #60	@ 0x3c
 8008294:	bd30      	pop	{r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	2400e400 	.word	0x2400e400
 800829c:	08045b58 	.word	0x08045b58
 80082a0:	08048538 	.word	0x08048538
 80082a4:	2400e404 	.word	0x2400e404
 80082a8:	08048e00 	.word	0x08048e00
 80082ac:	08008235 	.word	0x08008235

080082b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80082b0:	4770      	bx	lr
	...

080082b4 <_Z23getFont_verdana_20_4bppv>:
{
 80082b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80082b6:	4d17      	ldr	r5, [pc, #92]	@ (8008314 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80082b8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80082ba:	682c      	ldr	r4, [r5, #0]
 80082bc:	f3bf 8f5b 	dmb	ish
 80082c0:	f014 0401 	ands.w	r4, r4, #1
 80082c4:	d122      	bne.n	800830c <_Z23getFont_verdana_20_4bppv+0x58>
 80082c6:	4628      	mov	r0, r5
 80082c8:	f01f ff18 	bl	80280fc <__cxa_guard_acquire>
 80082cc:	b1f0      	cbz	r0, 800830c <_Z23getFont_verdana_20_4bppv+0x58>
 80082ce:	233f      	movs	r3, #63	@ 0x3f
 80082d0:	22bf      	movs	r2, #191	@ 0xbf
 80082d2:	4911      	ldr	r1, [pc, #68]	@ (8008318 <_Z23getFont_verdana_20_4bppv+0x64>)
 80082d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d6:	4b11      	ldr	r3, [pc, #68]	@ (800831c <_Z23getFont_verdana_20_4bppv+0x68>)
 80082d8:	4811      	ldr	r0, [pc, #68]	@ (8008320 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80082da:	9308      	str	r3, [sp, #32]
 80082dc:	4b11      	ldr	r3, [pc, #68]	@ (8008324 <_Z23getFont_verdana_20_4bppv+0x70>)
 80082de:	940a      	str	r4, [sp, #40]	@ 0x28
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	2301      	movs	r3, #1
 80082e4:	9401      	str	r4, [sp, #4]
 80082e6:	9304      	str	r3, [sp, #16]
 80082e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80082ec:	2304      	movs	r3, #4
 80082ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80082f2:	2314      	movs	r3, #20
 80082f4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	2319      	movs	r3, #25
 80082fc:	f7ff fcf2 	bl	8007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008300:	4809      	ldr	r0, [pc, #36]	@ (8008328 <_Z23getFont_verdana_20_4bppv+0x74>)
 8008302:	f020 fa8f 	bl	8028824 <atexit>
 8008306:	4628      	mov	r0, r5
 8008308:	f01f ff04 	bl	8028114 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800830c:	4804      	ldr	r0, [pc, #16]	@ (8008320 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800830e:	b00f      	add	sp, #60	@ 0x3c
 8008310:	bd30      	pop	{r4, r5, pc}
 8008312:	bf00      	nop
 8008314:	2400e430 	.word	0x2400e430
 8008318:	080465cc 	.word	0x080465cc
 800831c:	0804856c 	.word	0x0804856c
 8008320:	2400e434 	.word	0x2400e434
 8008324:	08048e04 	.word	0x08048e04
 8008328:	080082b1 	.word	0x080082b1

0800832c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_21_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_21_4bpp();

touchgfx::GeneratedFont& getFont_verdana_21_4bpp()
{
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 800832c:	4770      	bx	lr
	...

08008330 <_Z23getFont_verdana_21_4bppv>:
{
 8008330:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008332:	4d17      	ldr	r5, [pc, #92]	@ (8008390 <_Z23getFont_verdana_21_4bppv+0x60>)
{
 8008334:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008336:	682c      	ldr	r4, [r5, #0]
 8008338:	f3bf 8f5b 	dmb	ish
 800833c:	f014 0401 	ands.w	r4, r4, #1
 8008340:	d123      	bne.n	800838a <_Z23getFont_verdana_21_4bppv+0x5a>
 8008342:	4628      	mov	r0, r5
 8008344:	f01f feda 	bl	80280fc <__cxa_guard_acquire>
 8008348:	b1f8      	cbz	r0, 800838a <_Z23getFont_verdana_21_4bppv+0x5a>
 800834a:	233f      	movs	r3, #63	@ 0x3f
 800834c:	2202      	movs	r2, #2
 800834e:	4911      	ldr	r1, [pc, #68]	@ (8008394 <_Z23getFont_verdana_21_4bppv+0x64>)
 8008350:	9309      	str	r3, [sp, #36]	@ 0x24
 8008352:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <_Z23getFont_verdana_21_4bppv+0x68>)
 8008354:	4811      	ldr	r0, [pc, #68]	@ (800839c <_Z23getFont_verdana_21_4bppv+0x6c>)
 8008356:	9308      	str	r3, [sp, #32]
 8008358:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <_Z23getFont_verdana_21_4bppv+0x70>)
 800835a:	940a      	str	r4, [sp, #40]	@ 0x28
 800835c:	9307      	str	r3, [sp, #28]
 800835e:	2301      	movs	r3, #1
 8008360:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	2204      	movs	r2, #4
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	2315      	movs	r3, #21
 800836c:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	22bf      	movs	r2, #191	@ 0xbf
 8008374:	2319      	movs	r3, #25
 8008376:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800837a:	f7ff fcb3 	bl	8007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800837e:	4809      	ldr	r0, [pc, #36]	@ (80083a4 <_Z23getFont_verdana_21_4bppv+0x74>)
 8008380:	f020 fa50 	bl	8028824 <atexit>
 8008384:	4628      	mov	r0, r5
 8008386:	f01f fec5 	bl	8028114 <__cxa_guard_release>
    return verdana_21_4bpp;
}
 800838a:	4804      	ldr	r0, [pc, #16]	@ (800839c <_Z23getFont_verdana_21_4bppv+0x6c>)
 800838c:	b00f      	add	sp, #60	@ 0x3c
 800838e:	bd30      	pop	{r4, r5, pc}
 8008390:	2400e460 	.word	0x2400e460
 8008394:	08047040 	.word	0x08047040
 8008398:	08048780 	.word	0x08048780
 800839c:	2400e464 	.word	0x2400e464
 80083a0:	08048e08 	.word	0x08048e08
 80083a4:	0800832d 	.word	0x0800832d

080083a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80083a8:	4770      	bx	lr
	...

080083ac <_Z23getFont_verdana_30_4bppv>:
{
 80083ac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80083ae:	4d16      	ldr	r5, [pc, #88]	@ (8008408 <_Z23getFont_verdana_30_4bppv+0x5c>)
{
 80083b0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80083b2:	682c      	ldr	r4, [r5, #0]
 80083b4:	f3bf 8f5b 	dmb	ish
 80083b8:	f014 0401 	ands.w	r4, r4, #1
 80083bc:	d120      	bne.n	8008400 <_Z23getFont_verdana_30_4bppv+0x54>
 80083be:	4628      	mov	r0, r5
 80083c0:	f01f fe9c 	bl	80280fc <__cxa_guard_acquire>
 80083c4:	b1e0      	cbz	r0, 8008400 <_Z23getFont_verdana_30_4bppv+0x54>
 80083c6:	233f      	movs	r3, #63	@ 0x3f
 80083c8:	2201      	movs	r2, #1
 80083ca:	4910      	ldr	r1, [pc, #64]	@ (800840c <_Z23getFont_verdana_30_4bppv+0x60>)
 80083cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ce:	4b10      	ldr	r3, [pc, #64]	@ (8008410 <_Z23getFont_verdana_30_4bppv+0x64>)
 80083d0:	4810      	ldr	r0, [pc, #64]	@ (8008414 <_Z23getFont_verdana_30_4bppv+0x68>)
 80083d2:	9308      	str	r3, [sp, #32]
 80083d4:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80083d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80083d8:	9405      	str	r4, [sp, #20]
 80083da:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80083de:	2304      	movs	r3, #4
 80083e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80083e4:	231e      	movs	r3, #30
 80083e6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80083f0:	f7ff fc78 	bl	8007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80083f4:	4809      	ldr	r0, [pc, #36]	@ (800841c <_Z23getFont_verdana_30_4bppv+0x70>)
 80083f6:	f020 fa15 	bl	8028824 <atexit>
 80083fa:	4628      	mov	r0, r5
 80083fc:	f01f fe8a 	bl	8028114 <__cxa_guard_release>
    return verdana_30_4bpp;
}
 8008400:	4804      	ldr	r0, [pc, #16]	@ (8008414 <_Z23getFont_verdana_30_4bppv+0x68>)
 8008402:	b00f      	add	sp, #60	@ 0x3c
 8008404:	bd30      	pop	{r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	2400e490 	.word	0x2400e490
 800840c:	08047ab4 	.word	0x08047ab4
 8008410:	080489f8 	.word	0x080489f8
 8008414:	2400e494 	.word	0x2400e494
 8008418:	08048e0c 	.word	0x08048e0c
 800841c:	080083a9 	.word	0x080083a9

08008420 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008420:	4770      	bx	lr
	...

08008424 <_Z23getFont_verdana_40_4bppv>:
{
 8008424:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008426:	4d17      	ldr	r5, [pc, #92]	@ (8008484 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8008428:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800842a:	682c      	ldr	r4, [r5, #0]
 800842c:	f3bf 8f5b 	dmb	ish
 8008430:	f014 0401 	ands.w	r4, r4, #1
 8008434:	d123      	bne.n	800847e <_Z23getFont_verdana_40_4bppv+0x5a>
 8008436:	4628      	mov	r0, r5
 8008438:	f01f fe60 	bl	80280fc <__cxa_guard_acquire>
 800843c:	b1f8      	cbz	r0, 800847e <_Z23getFont_verdana_40_4bppv+0x5a>
 800843e:	233f      	movs	r3, #63	@ 0x3f
 8008440:	2204      	movs	r2, #4
 8008442:	4911      	ldr	r1, [pc, #68]	@ (8008488 <_Z23getFont_verdana_40_4bppv+0x64>)
 8008444:	9309      	str	r3, [sp, #36]	@ 0x24
 8008446:	4b11      	ldr	r3, [pc, #68]	@ (800848c <_Z23getFont_verdana_40_4bppv+0x68>)
 8008448:	4811      	ldr	r0, [pc, #68]	@ (8008490 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800844a:	9308      	str	r3, [sp, #32]
 800844c:	4b11      	ldr	r3, [pc, #68]	@ (8008494 <_Z23getFont_verdana_40_4bppv+0x70>)
 800844e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	2302      	movs	r3, #2
 8008454:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008458:	2301      	movs	r3, #1
 800845a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800845e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008462:	2328      	movs	r3, #40	@ 0x28
 8008464:	22bf      	movs	r2, #191	@ 0xbf
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	2330      	movs	r3, #48	@ 0x30
 800846a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800846e:	f7ff fc39 	bl	8007ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008472:	4809      	ldr	r0, [pc, #36]	@ (8008498 <_Z23getFont_verdana_40_4bppv+0x74>)
 8008474:	f020 f9d6 	bl	8028824 <atexit>
 8008478:	4628      	mov	r0, r5
 800847a:	f01f fe4b 	bl	8028114 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800847e:	4804      	ldr	r0, [pc, #16]	@ (8008490 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8008480:	b00f      	add	sp, #60	@ 0x3c
 8008482:	bd30      	pop	{r4, r5, pc}
 8008484:	2400e4c0 	.word	0x2400e4c0
 8008488:	08047ac4 	.word	0x08047ac4
 800848c:	080489fc 	.word	0x080489fc
 8008490:	2400e4c4 	.word	0x2400e4c4
 8008494:	08048e10 	.word	0x08048e10
 8008498:	08008421 	.word	0x08008421

0800849c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800849c:	2000      	movs	r0, #0
 800849e:	4770      	bx	lr

080084a0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80084a0:	2000      	movs	r0, #0
 80084a2:	4770      	bx	lr

080084a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80084a4:	b40e      	push	{r1, r2, r3}
 80084a6:	b503      	push	{r0, r1, lr}
 80084a8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80084aa:	2100      	movs	r1, #0
{
 80084ac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80084b0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80084b2:	f012 f9f5 	bl	801a8a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80084b6:	b002      	add	sp, #8
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr

080084c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80084c0:	b40c      	push	{r2, r3}
 80084c2:	b507      	push	{r0, r1, r2, lr}
 80084c4:	ab04      	add	r3, sp, #16
 80084c6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80084ca:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80084cc:	f012 f9e8 	bl	801a8a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80084d0:	b003      	add	sp, #12
 80084d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d6:	b002      	add	sp, #8
 80084d8:	4770      	bx	lr
	...

080084dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80084dc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80084e2:	b373      	cbz	r3, 8008542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80084e4:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80084e6:	b92b      	cbnz	r3, 80084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80084e8:	4b18      	ldr	r3, [pc, #96]	@ (800854c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80084ea:	21c5      	movs	r1, #197	@ 0xc5
 80084ec:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80084ee:	4819      	ldr	r0, [pc, #100]	@ (8008554 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80084f0:	f020 f97a 	bl	80287e8 <__assert_func>
            return buffer[pos];
 80084f4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80084f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80084fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80084fc:	b30b      	cbz	r3, 8008542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80084fe:	f014 f8b1 	bl	801c664 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8008502:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008504:	2b01      	cmp	r3, #1
 8008506:	d803      	bhi.n	8008510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8008508:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800850a:	21cb      	movs	r1, #203	@ 0xcb
 800850c:	4a13      	ldr	r2, [pc, #76]	@ (800855c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800850e:	e7ee      	b.n	80084ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8008510:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008512:	f640 103f 	movw	r0, #2367	@ 0x93f
 8008516:	1c53      	adds	r3, r2, #1
 8008518:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800851a:	2b09      	cmp	r3, #9
 800851c:	4619      	mov	r1, r3
 800851e:	bf88      	it	hi
 8008520:	f1a3 010a 	subhi.w	r1, r3, #10
 8008524:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8008528:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800852a:	4281      	cmp	r1, r0
 800852c:	d109      	bne.n	8008542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800852e:	2b0a      	cmp	r3, #10
 8008530:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008534:	bf28      	it	cs
 8008536:	2300      	movcs	r3, #0
            return buffer[pos];
 8008538:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800853a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800853e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8008540:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008542:	4620      	mov	r0, r4
}
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8008548:	f013 bf8e 	b.w	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800854c:	0802c2cc 	.word	0x0802c2cc
 8008550:	0802c2d5 	.word	0x0802c2d5
 8008554:	0802c380 	.word	0x0802c380
 8008558:	0802c3d8 	.word	0x0802c3d8
 800855c:	0802c3e6 	.word	0x0802c3e6

08008560 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8008560:	f013 bf4b 	b.w	801c3fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08008564 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008564:	b510      	push	{r4, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	ac02      	add	r4, sp, #8
 800856a:	e884 0006 	stmia.w	r4, {r1, r2}
 800856e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8008570:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008572:	4621      	mov	r1, r4
    va_start(pArg, format);
 8008574:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	f010 fdbf 	bl	8019100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008582:	b006      	add	sp, #24
 8008584:	bd10      	pop	{r4, pc}
	...

08008588 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008588:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800858a:	bb18      	cbnz	r0, 80085d4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800858c:	4b12      	ldr	r3, [pc, #72]	@ (80085d8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800858e:	4813      	ldr	r0, [pc, #76]	@ (80085dc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8008590:	681c      	ldr	r4, [r3, #0]
 8008592:	4913      	ldr	r1, [pc, #76]	@ (80085e0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8008594:	b1b4      	cbz	r4, 80085c4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	4422      	add	r2, r4
 800859a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800859c:	6862      	ldr	r2, [r4, #4]
 800859e:	4422      	add	r2, r4
 80085a0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80085a2:	68a2      	ldr	r2, [r4, #8]
 80085a4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80085a6:	4b0f      	ldr	r3, [pc, #60]	@ (80085e4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80085ac:	f000 f838 	bl	8008620 <_ZN17TypedTextDatabase8getFontsEv>
 80085b0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80085b2:	f000 f833 	bl	800861c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80085b6:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80085b8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80085ba:	4b0c      	ldr	r3, [pc, #48]	@ (80085ec <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80085bc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80085be:	4b0c      	ldr	r3, [pc, #48]	@ (80085f0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80085c0:	8018      	strh	r0, [r3, #0]
    }
}
 80085c2:	e007      	b.n	80085d4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80085c4:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80085c6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80085c8:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80085ca:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80085cc:	4b0b      	ldr	r3, [pc, #44]	@ (80085fc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80085ce:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	d1e8      	bne.n	80085a6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	2400e4fc 	.word	0x2400e4fc
 80085dc:	2400e4f4 	.word	0x2400e4f4
 80085e0:	2400e4f0 	.word	0x2400e4f0
 80085e4:	2400e4f8 	.word	0x2400e4f8
 80085e8:	24028578 	.word	0x24028578
 80085ec:	24028580 	.word	0x24028580
 80085f0:	2402857c 	.word	0x2402857c
 80085f4:	9071c378 	.word	0x9071c378
 80085f8:	9071c300 	.word	0x9071c300
 80085fc:	9071c43c 	.word	0x9071c43c

08008600 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008600:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8008608:	4b03      	ldr	r3, [pc, #12]	@ (8008618 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800860a:	681b      	ldr	r3, [r3, #0]
}
 800860c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2400e4f0 	.word	0x2400e4f0
 8008618:	2400e4f4 	.word	0x2400e4f4

0800861c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800861c:	201e      	movs	r0, #30
 800861e:	4770      	bx	lr

08008620 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8008620:	4800      	ldr	r0, [pc, #0]	@ (8008624 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8008622:	4770      	bx	lr
 8008624:	2400e500 	.word	0x2400e500

08008628 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008628:	b510      	push	{r4, lr}
};
 800862a:	4c08      	ldr	r4, [pc, #32]	@ (800864c <_GLOBAL__sub_I_touchgfx_fonts+0x24>)
    &(getFont_verdana_20_4bpp()),
 800862c:	f7ff fe42 	bl	80082b4 <_Z23getFont_verdana_20_4bppv>
};
 8008630:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8008632:	f7ff fef7 	bl	8008424 <_Z23getFont_verdana_40_4bppv>
};
 8008636:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8008638:	f7ff fdfe 	bl	8008238 <_Z23getFont_verdana_10_4bppv>
};
 800863c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_21_4bpp()),
 800863e:	f7ff fe77 	bl	8008330 <_Z23getFont_verdana_21_4bppv>
};
 8008642:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_30_4bpp())
 8008644:	f7ff feb2 	bl	80083ac <_Z23getFont_verdana_30_4bppv>
};
 8008648:	6120      	str	r0, [r4, #16]
} // namespace TypedTextDatabase
 800864a:	bd10      	pop	{r4, pc}
 800864c:	2400e500 	.word	0x2400e500

08008650 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8008650:	b510      	push	{r4, lr}
    pointArray = 0;
 8008652:	2400      	movs	r4, #0
 8008654:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8008656:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8008658:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800865a:	601c      	str	r4, [r3, #0]
}
 800865c:	bd10      	pop	{r4, pc}

0800865e <_ZN19CalculatorPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~CalculatorPresenter() {}
 800865e:	4770      	bx	lr

08008660 <_ZThn4_N19CalculatorPresenterD1Ev>:
 8008660:	3804      	subs	r0, #4
 8008662:	4770      	bx	lr

08008664 <_ZN19CalculatorPresenter10deactivateEv>:
}

void CalculatorPresenter::activate()
{

}
 8008664:	4770      	bx	lr

08008666 <_ZN19CalculatorPresenterD0Ev>:
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	2110      	movs	r1, #16
 800866c:	f01f fd44 	bl	80280f8 <_ZdlPvj>
 8008670:	4620      	mov	r0, r4
 8008672:	bd10      	pop	{r4, pc}

08008674 <_ZThn4_N19CalculatorPresenterD0Ev>:
 8008674:	f1a0 0004 	sub.w	r0, r0, #4
 8008678:	e7f5      	b.n	8008666 <_ZN19CalculatorPresenterD0Ev>
	...

0800867c <_ZN19CalculatorPresenterC1ER14CalculatorView>:
    ModelListener() : model(0) {}
 800867c:	2200      	movs	r2, #0
    : view(v)
 800867e:	60c1      	str	r1, [r0, #12]
 8008680:	6082      	str	r2, [r0, #8]
 8008682:	4a02      	ldr	r2, [pc, #8]	@ (800868c <_ZN19CalculatorPresenterC1ER14CalculatorView+0x10>)
 8008684:	6002      	str	r2, [r0, #0]
 8008686:	3218      	adds	r2, #24
 8008688:	6042      	str	r2, [r0, #4]
}
 800868a:	4770      	bx	lr
 800868c:	0802c4c0 	.word	0x0802c4c0

08008690 <_ZN14CalculatorView14tearDownScreenEv>:
}

void CalculatorView::tearDownScreen()
{
    CalculatorViewBase::tearDownScreen();
}
 8008690:	4770      	bx	lr
	...

08008694 <_ZN14CalculatorViewD1Ev>:

class CalculatorView : public CalculatorViewBase
{
public:
    CalculatorView();
    virtual ~CalculatorView() {}
 8008694:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <_ZN14CalculatorViewD1Ev+0x10>)
 8008696:	b510      	push	{r4, lr}
 8008698:	4604      	mov	r4, r0
 800869a:	6003      	str	r3, [r0, #0]
 800869c:	f7fb fa05 	bl	8003aaa <_ZN18CalculatorViewBaseD1Ev>
 80086a0:	4620      	mov	r0, r4
 80086a2:	bd10      	pop	{r4, pc}
 80086a4:	0802c4e8 	.word	0x0802c4e8

080086a8 <_ZN14CalculatorViewD0Ev>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	4604      	mov	r4, r0
 80086ac:	f7ff fff2 	bl	8008694 <_ZN14CalculatorViewD1Ev>
 80086b0:	f240 61f4 	movw	r1, #1780	@ 0x6f4
 80086b4:	4620      	mov	r0, r4
 80086b6:	f01f fd1f 	bl	80280f8 <_ZdlPvj>
 80086ba:	4620      	mov	r0, r4
 80086bc:	bd10      	pop	{r4, pc}
	...

080086c0 <_ZN14CalculatorViewC1Ev>:
CalculatorView::CalculatorView()
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7fb fbaa 	bl	8003e1c <_ZN18CalculatorViewBaseC1Ev>
 80086c8:	4b03      	ldr	r3, [pc, #12]	@ (80086d8 <_ZN14CalculatorViewC1Ev+0x18>)
}
 80086ca:	4620      	mov	r0, r4
CalculatorView::CalculatorView()
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	0802c4e8 	.word	0x0802c4e8

080086dc <_ZN14CalculatorView11setupScreenEv>:
    CalculatorViewBase::setupScreen();
 80086dc:	f7fb b9e6 	b.w	8003aac <_ZN18CalculatorViewBase11setupScreenEv>

080086e0 <_ZN14CalculatorView7addCharEc>:

bool CalculatorView::addChar(char character)
{
	if(char_counter > 15)
 80086e0:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 80086e4:	2b0f      	cmp	r3, #15
{
 80086e6:	b570      	push	{r4, r5, r6, lr}
 80086e8:	4604      	mov	r4, r0
 80086ea:	b08a      	sub	sp, #40	@ 0x28
 80086ec:	460d      	mov	r5, r1
	if(char_counter > 15)
 80086ee:	dc24      	bgt.n	800873a <_ZN14CalculatorView7addCharEc+0x5a>
	{
		return false;
	}
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80086f0:	f204 66bc 	addw	r6, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 80086f4:	2222      	movs	r2, #34	@ 0x22
 80086f6:	2100      	movs	r1, #0
 80086f8:	a801      	add	r0, sp, #4
 80086fa:	f020 fb11 	bl	8028d20 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80086fe:	2211      	movs	r2, #17
 8008700:	4631      	mov	r1, r6
 8008702:	a801      	add	r0, sp, #4
 8008704:	f014 f9f7 	bl	801caf6 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter] = character;
 8008708:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 800870c:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 800870e:	2111      	movs	r1, #17
 8008710:	4630      	mov	r0, r6
	new_buf[char_counter] = character;
 8008712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008716:	4a0a      	ldr	r2, [pc, #40]	@ (8008740 <_ZN14CalculatorView7addCharEc+0x60>)
	new_buf[char_counter] = character;
 8008718:	f823 5c24 	strh.w	r5, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 800871c:	ab01      	add	r3, sp, #4
 800871e:	f014 fd5b 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 8008722:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008726:	f012 f9e6 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter++;
 800872a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 800872e:	2001      	movs	r0, #1
 8008730:	3301      	adds	r3, #1
 8008732:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
	return true;
}
 8008736:	b00a      	add	sp, #40	@ 0x28
 8008738:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800873a:	2000      	movs	r0, #0
 800873c:	e7fb      	b.n	8008736 <_ZN14CalculatorView7addCharEc+0x56>
 800873e:	bf00      	nop
 8008740:	0802b7ab 	.word	0x0802b7ab

08008744 <_ZN14CalculatorView18sendToCalculator_0Ev>:
	char_counter = 0;
}

void CalculatorView::sendToCalculator_0()
{
	addChar('0');
 8008744:	2130      	movs	r1, #48	@ 0x30
 8008746:	f7ff bfcb 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800874a <_ZN14CalculatorView18sendToCalculator_1Ev>:
}

void CalculatorView::sendToCalculator_1()
{
	addChar('1');
 800874a:	2131      	movs	r1, #49	@ 0x31
 800874c:	f7ff bfc8 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008750 <_ZN14CalculatorView18sendToCalculator_2Ev>:
}

void CalculatorView::sendToCalculator_2()
{
	addChar('2');
 8008750:	2132      	movs	r1, #50	@ 0x32
 8008752:	f7ff bfc5 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008756 <_ZN14CalculatorView18sendToCalculator_3Ev>:
}

void CalculatorView::sendToCalculator_3()
{
	addChar('3');
 8008756:	2133      	movs	r1, #51	@ 0x33
 8008758:	f7ff bfc2 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800875c <_ZN14CalculatorView18sendToCalculator_4Ev>:
}

void CalculatorView::sendToCalculator_4()
{
	addChar('4');
 800875c:	2134      	movs	r1, #52	@ 0x34
 800875e:	f7ff bfbf 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008762 <_ZN14CalculatorView18sendToCalculator_5Ev>:
}

void CalculatorView::sendToCalculator_5()
{
	addChar('5');
 8008762:	2135      	movs	r1, #53	@ 0x35
 8008764:	f7ff bfbc 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008768 <_ZN14CalculatorView18sendToCalculator_6Ev>:
}

void CalculatorView::sendToCalculator_6()
{
	addChar('6');
 8008768:	2136      	movs	r1, #54	@ 0x36
 800876a:	f7ff bfb9 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800876e <_ZN14CalculatorView18sendToCalculator_7Ev>:
}

void CalculatorView::sendToCalculator_7()
{
	addChar('7');
 800876e:	2137      	movs	r1, #55	@ 0x37
 8008770:	f7ff bfb6 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008774 <_ZN14CalculatorView18sendToCalculator_8Ev>:
}

void CalculatorView::sendToCalculator_8()
{
	addChar('8');
 8008774:	2138      	movs	r1, #56	@ 0x38
 8008776:	f7ff bfb3 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800877a <_ZN14CalculatorView18sendToCalculator_9Ev>:
}

void CalculatorView::sendToCalculator_9()
{
	addChar('9');
 800877a:	2139      	movs	r1, #57	@ 0x39
 800877c:	f7ff bfb0 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008780 <_ZN14CalculatorView20sendToCalculator_AddEv>:
}

void CalculatorView::sendToCalculator_Add()
{
	addChar('+');
 8008780:	212b      	movs	r1, #43	@ 0x2b
 8008782:	f7ff bfad 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008786 <_ZN14CalculatorView32sendToCalculator_OpenParenthesisEv>:
	removeLastChar();
}

void CalculatorView::sendToCalculator_OpenParenthesis()
{
	addChar('(');
 8008786:	2128      	movs	r1, #40	@ 0x28
 8008788:	f7ff bfaa 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800878c <_ZN14CalculatorView33sendToCalculator_CloseParenthesisEv>:
}

void CalculatorView::sendToCalculator_CloseParenthesis()
{
	addChar(')');
 800878c:	2129      	movs	r1, #41	@ 0x29
 800878e:	f7ff bfa7 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008792 <_ZN14CalculatorView25sendToCalculator_SubtractEv>:
}

void CalculatorView::sendToCalculator_Subtract()
{
	addChar('-');
 8008792:	212d      	movs	r1, #45	@ 0x2d
 8008794:	f7ff bfa4 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

08008798 <_ZN14CalculatorView25sendToCalculator_MultiplyEv>:
}

void CalculatorView::sendToCalculator_Multiply()
{
	addChar('*');
 8008798:	212a      	movs	r1, #42	@ 0x2a
 800879a:	f7ff bfa1 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

0800879e <_ZN14CalculatorView23sendToCalculator_DivideEv>:
}

void CalculatorView::sendToCalculator_Divide()
{
	addChar('/');
 800879e:	212f      	movs	r1, #47	@ 0x2f
 80087a0:	f7ff bf9e 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>

080087a4 <_ZN14CalculatorView22sendToCalculator_CommaEv>:
}

void CalculatorView::sendToCalculator_Comma()
{
	addChar(',');
 80087a4:	212c      	movs	r1, #44	@ 0x2c
 80087a6:	f7ff bf9b 	b.w	80086e0 <_ZN14CalculatorView7addCharEc>
	...

080087ac <_ZN14CalculatorView14removeLastCharEv>:
	if(char_counter < 1)
 80087ac:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 80087b0:	2b00      	cmp	r3, #0
{
 80087b2:	b530      	push	{r4, r5, lr}
 80087b4:	4604      	mov	r4, r0
 80087b6:	b08b      	sub	sp, #44	@ 0x2c
	if(char_counter < 1)
 80087b8:	dd26      	ble.n	8008808 <_ZN14CalculatorView14removeLastCharEv+0x5c>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80087ba:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 80087be:	2222      	movs	r2, #34	@ 0x22
 80087c0:	2100      	movs	r1, #0
 80087c2:	a801      	add	r0, sp, #4
 80087c4:	f020 faac 	bl	8028d20 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80087c8:	2211      	movs	r2, #17
 80087ca:	4629      	mov	r1, r5
 80087cc:	a801      	add	r0, sp, #4
 80087ce:	f014 f992 	bl	801caf6 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter-1] = '\0';
 80087d2:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 80087d6:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80087d8:	2111      	movs	r1, #17
	new_buf[char_counter-1] = '\0';
 80087da:	3b01      	subs	r3, #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80087dc:	4628      	mov	r0, r5
	new_buf[char_counter-1] = '\0';
 80087de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80087e2:	2200      	movs	r2, #0
 80087e4:	f823 2c24 	strh.w	r2, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80087e8:	ab01      	add	r3, sp, #4
 80087ea:	4a08      	ldr	r2, [pc, #32]	@ (800880c <_ZN14CalculatorView14removeLastCharEv+0x60>)
 80087ec:	f014 fcf4 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 80087f0:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 80087f4:	f012 f97f 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter--;
 80087f8:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 80087fc:	2001      	movs	r0, #1
 80087fe:	3b01      	subs	r3, #1
 8008800:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 8008804:	b00b      	add	sp, #44	@ 0x2c
 8008806:	bd30      	pop	{r4, r5, pc}
		return false;
 8008808:	2000      	movs	r0, #0
 800880a:	e7fb      	b.n	8008804 <_ZN14CalculatorView14removeLastCharEv+0x58>
 800880c:	0802b7ab 	.word	0x0802b7ab

08008810 <_ZN14CalculatorView23sendToCalculator_DeleteEv>:
	removeLastChar();
 8008810:	f7ff bfcc 	b.w	80087ac <_ZN14CalculatorView14removeLastCharEv>

08008814 <_ZN14CalculatorView9clearTextEv>:
{
 8008814:	b510      	push	{r4, lr}
 8008816:	b08a      	sub	sp, #40	@ 0x28
 8008818:	4604      	mov	r4, r0
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 800881a:	2222      	movs	r2, #34	@ 0x22
 800881c:	2100      	movs	r1, #0
 800881e:	a801      	add	r0, sp, #4
 8008820:	f020 fa7e 	bl	8028d20 <memset>
	touchgfx::Unicode::strncpy(TextResultBuffer, new_buf, TEXTRESULT_SIZE);
 8008824:	2211      	movs	r2, #17
 8008826:	a901      	add	r1, sp, #4
 8008828:	f204 60bc 	addw	r0, r4, #1724	@ 0x6bc
 800882c:	f014 f963 	bl	801caf6 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	TextResult.invalidate();
 8008830:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008834:	f012 f95f 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 800883e:	b00a      	add	sp, #40	@ 0x28
 8008840:	bd10      	pop	{r4, pc}

08008842 <_ZN14CalculatorView22sendToCalculator_ClearEv>:
}

void CalculatorView::sendToCalculator_Clear()
{
	clearText();
 8008842:	f7ff bfe7 	b.w	8008814 <_ZN14CalculatorView9clearTextEv>

08008846 <_ZN17DiagnosePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DiagnosePresenter() {}
 8008846:	4770      	bx	lr

08008848 <_ZThn4_N17DiagnosePresenterD1Ev>:
 8008848:	3804      	subs	r0, #4
 800884a:	4770      	bx	lr

0800884c <_ZN17DiagnosePresenter10deactivateEv>:
}

void DiagnosePresenter::activate()
{

}
 800884c:	4770      	bx	lr

0800884e <_ZN17DiagnosePresenterD0Ev>:
 800884e:	b510      	push	{r4, lr}
 8008850:	4604      	mov	r4, r0
 8008852:	2110      	movs	r1, #16
 8008854:	f01f fc50 	bl	80280f8 <_ZdlPvj>
 8008858:	4620      	mov	r0, r4
 800885a:	bd10      	pop	{r4, pc}

0800885c <_ZThn4_N17DiagnosePresenterD0Ev>:
 800885c:	f1a0 0004 	sub.w	r0, r0, #4
 8008860:	e7f5      	b.n	800884e <_ZN17DiagnosePresenterD0Ev>
	...

08008864 <_ZN17DiagnosePresenterC1ER12DiagnoseView>:
 8008864:	2200      	movs	r2, #0
    : view(v)
 8008866:	60c1      	str	r1, [r0, #12]
 8008868:	6082      	str	r2, [r0, #8]
 800886a:	4a02      	ldr	r2, [pc, #8]	@ (8008874 <_ZN17DiagnosePresenterC1ER12DiagnoseView+0x10>)
 800886c:	6002      	str	r2, [r0, #0]
 800886e:	3218      	adds	r2, #24
 8008870:	6042      	str	r2, [r0, #4]
}
 8008872:	4770      	bx	lr
 8008874:	0802c56c 	.word	0x0802c56c

08008878 <_ZN12DiagnoseView14tearDownScreenEv>:
}

void DiagnoseView::tearDownScreen()
{
    DiagnoseViewBase::tearDownScreen();
}
 8008878:	4770      	bx	lr
	...

0800887c <_ZN12DiagnoseViewD1Ev>:

class DiagnoseView : public DiagnoseViewBase
{
public:
    DiagnoseView();
    virtual ~DiagnoseView() {}
 800887c:	4b03      	ldr	r3, [pc, #12]	@ (800888c <_ZN12DiagnoseViewD1Ev+0x10>)
 800887e:	b510      	push	{r4, lr}
 8008880:	4604      	mov	r4, r0
 8008882:	6003      	str	r3, [r0, #0]
 8008884:	f7fc fa60 	bl	8004d48 <_ZN16DiagnoseViewBaseD1Ev>
 8008888:	4620      	mov	r0, r4
 800888a:	bd10      	pop	{r4, pc}
 800888c:	0802c594 	.word	0x0802c594

08008890 <_ZN12DiagnoseViewD0Ev>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4604      	mov	r4, r0
 8008894:	f7ff fff2 	bl	800887c <_ZN12DiagnoseViewD1Ev>
 8008898:	f243 417c 	movw	r1, #13436	@ 0x347c
 800889c:	4620      	mov	r0, r4
 800889e:	f01f fc2b 	bl	80280f8 <_ZdlPvj>
 80088a2:	4620      	mov	r0, r4
 80088a4:	bd10      	pop	{r4, pc}
	...

080088a8 <_ZN12DiagnoseViewC1Ev>:
DiagnoseView::DiagnoseView()
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4604      	mov	r4, r0
 80088ac:	f7fc fafc 	bl	8004ea8 <_ZN16DiagnoseViewBaseC1Ev>
 80088b0:	4b01      	ldr	r3, [pc, #4]	@ (80088b8 <_ZN12DiagnoseViewC1Ev+0x10>)
}
 80088b2:	4620      	mov	r0, r4
DiagnoseView::DiagnoseView()
 80088b4:	6023      	str	r3, [r4, #0]
}
 80088b6:	bd10      	pop	{r4, pc}
 80088b8:	0802c594 	.word	0x0802c594

080088bc <_ZN12DiagnoseView11setupScreenEv>:
    DiagnoseViewBase::setupScreen();
 80088bc:	f7fc ba17 	b.w	8004cee <_ZN16DiagnoseViewBase11setupScreenEv>

080088c0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80088c0:	4770      	bx	lr

080088c2 <_ZN19FrontendApplicationD0Ev>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	4604      	mov	r4, r0
 80088c6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80088ca:	f01f fc15 	bl	80280f8 <_ZdlPvj>
 80088ce:	4620      	mov	r0, r4
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
    {
        model.tick();
 80088d6:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80088da:	f000 f84e 	bl	800897a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80088de:	4620      	mov	r0, r4
    }
 80088e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80088e4:	f011 b8e0 	b.w	8019aa8 <_ZN8touchgfx11Application15handleTickEventEv>

080088e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80088ec:	f7fe ff70 	bl	80077d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80088f0:	4b01      	ldr	r3, [pc, #4]	@ (80088f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80088f2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80088f4:	6023      	str	r3, [r4, #0]
}
 80088f6:	bd10      	pop	{r4, pc}
 80088f8:	0802c5c8 	.word	0x0802c5c8

080088fc <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {}
 80088fc:	4770      	bx	lr

080088fe <_ZThn4_N19MainScreenPresenterD1Ev>:
 80088fe:	3804      	subs	r0, #4
 8008900:	4770      	bx	lr

08008902 <_ZN19MainScreenPresenter10deactivateEv>:
}

void MainScreenPresenter::activate()
{

}
 8008902:	4770      	bx	lr

08008904 <_ZN19MainScreenPresenterD0Ev>:
 8008904:	b510      	push	{r4, lr}
 8008906:	4604      	mov	r4, r0
 8008908:	2110      	movs	r1, #16
 800890a:	f01f fbf5 	bl	80280f8 <_ZdlPvj>
 800890e:	4620      	mov	r0, r4
 8008910:	bd10      	pop	{r4, pc}

08008912 <_ZThn4_N19MainScreenPresenterD0Ev>:
 8008912:	f1a0 0004 	sub.w	r0, r0, #4
 8008916:	e7f5      	b.n	8008904 <_ZN19MainScreenPresenterD0Ev>

08008918 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
 8008918:	2200      	movs	r2, #0
    : view(v)
 800891a:	60c1      	str	r1, [r0, #12]
 800891c:	6082      	str	r2, [r0, #8]
 800891e:	4a02      	ldr	r2, [pc, #8]	@ (8008928 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x10>)
 8008920:	6002      	str	r2, [r0, #0]
 8008922:	3218      	adds	r2, #24
 8008924:	6042      	str	r2, [r0, #4]
}
 8008926:	4770      	bx	lr
 8008928:	0802c61c 	.word	0x0802c61c

0800892c <_ZN14MainScreenView14tearDownScreenEv>:
}

void MainScreenView::tearDownScreen()
{
    MainScreenViewBase::tearDownScreen();
}
 800892c:	4770      	bx	lr
	...

08008930 <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 8008930:	4b03      	ldr	r3, [pc, #12]	@ (8008940 <_ZN14MainScreenViewD1Ev+0x10>)
 8008932:	b510      	push	{r4, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	6003      	str	r3, [r0, #0]
 8008938:	f7ff fa04 	bl	8007d44 <_ZN18MainScreenViewBaseD1Ev>
 800893c:	4620      	mov	r0, r4
 800893e:	bd10      	pop	{r4, pc}
 8008940:	0802c644 	.word	0x0802c644

08008944 <_ZN14MainScreenViewD0Ev>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	f7ff fff2 	bl	8008930 <_ZN14MainScreenViewD1Ev>
 800894c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8008950:	4620      	mov	r0, r4
 8008952:	f01f fbd1 	bl	80280f8 <_ZdlPvj>
 8008956:	4620      	mov	r0, r4
 8008958:	bd10      	pop	{r4, pc}
	...

0800895c <_ZN14MainScreenViewC1Ev>:
MainScreenView::MainScreenView()
 800895c:	b510      	push	{r4, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	f7ff fa70 	bl	8007e44 <_ZN18MainScreenViewBaseC1Ev>
 8008964:	4b01      	ldr	r3, [pc, #4]	@ (800896c <_ZN14MainScreenViewC1Ev+0x10>)
}
 8008966:	4620      	mov	r0, r4
MainScreenView::MainScreenView()
 8008968:	6023      	str	r3, [r4, #0]
}
 800896a:	bd10      	pop	{r4, pc}
 800896c:	0802c644 	.word	0x0802c644

08008970 <_ZN14MainScreenView11setupScreenEv>:
    MainScreenViewBase::setupScreen();
 8008970:	f7ff b9e9 	b.w	8007d46 <_ZN18MainScreenViewBase11setupScreenEv>

08008974 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008974:	2200      	movs	r2, #0
 8008976:	6002      	str	r2, [r0, #0]
{

}
 8008978:	4770      	bx	lr

0800897a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800897a:	4770      	bx	lr

0800897c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800897c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800897e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8008982:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8008984:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8008986:	2302      	movs	r3, #2
 8008988:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800898a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800898e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8008992:	4770      	bx	lr

08008994 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008994:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008998:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800899a:	bf04      	itt	eq
 800899c:	2300      	moveq	r3, #0
 800899e:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80089a2:	2000      	movs	r0, #0
 80089a4:	4770      	bx	lr

080089a6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80089a6:	2000      	movs	r0, #0
 80089a8:	4770      	bx	lr

080089aa <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80089aa:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80089ac:	6904      	ldr	r4, [r0, #16]
 80089ae:	8900      	ldrh	r0, [r0, #8]
 80089b0:	46a4      	mov	ip, r4
}
 80089b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80089b6:	4760      	bx	ip

080089b8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80089b8:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80089ba:	68c4      	ldr	r4, [r0, #12]
 80089bc:	8900      	ldrh	r0, [r0, #8]
 80089be:	46a4      	mov	ip, r4
}
 80089c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80089c4:	4760      	bx	ip

080089c6 <FT6X06_GestureConfig>:
{
 80089c6:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80089c8:	f100 0518 	add.w	r5, r0, #24
{
 80089cc:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80089ce:	7809      	ldrb	r1, [r1, #0]
 80089d0:	4628      	mov	r0, r5
 80089d2:	f000 f911 	bl	8008bf8 <ft6x06_radian_value>
 80089d6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80089d8:	7931      	ldrb	r1, [r6, #4]
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 f918 	bl	8008c10 <ft6x06_offset_left_right>
 80089e0:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80089e2:	7a31      	ldrb	r1, [r6, #8]
 80089e4:	4628      	mov	r0, r5
 80089e6:	f000 f91f 	bl	8008c28 <ft6x06_offset_up_down>
 80089ea:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80089ec:	7b31      	ldrb	r1, [r6, #12]
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f926 	bl	8008c40 <ft6x06_disatnce_left_right>
 80089f4:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80089f6:	7c31      	ldrb	r1, [r6, #16]
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 f92d 	bl	8008c58 <ft6x06_distance_up_down>
 80089fe:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008a00:	7d31      	ldrb	r1, [r6, #20]
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 f934 	bl	8008c70 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8008a08:	42c4      	cmn	r4, r0
}
 8008a0a:	bf14      	ite	ne
 8008a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a10:	2000      	moveq	r0, #0
 8008a12:	bd70      	pop	{r4, r5, r6, pc}

08008a14 <FT6X06_ReadID>:
{
 8008a14:	b513      	push	{r0, r1, r4, lr}
 8008a16:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8008a18:	3018      	adds	r0, #24
 8008a1a:	f10d 0107 	add.w	r1, sp, #7
 8008a1e:	f000 f93f 	bl	8008ca0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8008a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a26:	6023      	str	r3, [r4, #0]
}
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <FT6X06_GetState>:
{
 8008a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008a2e:	f100 0518 	add.w	r5, r0, #24
{
 8008a32:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008a34:	a901      	add	r1, sp, #4
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f8d1 	bl	8008bde <ft6x06_td_status>
 8008a3c:	bb08      	cbnz	r0, 8008a82 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8008a3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	bf98      	it	ls
 8008a46:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008a48:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008a4a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008a4c:	2103      	movs	r1, #3
 8008a4e:	4628      	mov	r0, r5
 8008a50:	eb0d 0203 	add.w	r2, sp, r3
 8008a54:	f000 f8b0 	bl	8008bb8 <ft6x06_read_reg>
 8008a58:	b9b0      	cbnz	r0, 8008a88 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008a5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008a5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a68:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008a6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008a6e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008a70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60a3      	str	r3, [r4, #8]
}
 8008a7e:	b003      	add	sp, #12
 8008a80:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	e7df      	b.n	8008a48 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008a8c:	e7f7      	b.n	8008a7e <FT6X06_GetState+0x52>

08008a8e <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8008a8e:	3018      	adds	r0, #24
 8008a90:	f000 b8a0 	b.w	8008bd4 <ft6x06_gest_id>

08008a94 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8008a94:	2101      	movs	r1, #1
 8008a96:	3018      	adds	r0, #24
 8008a98:	f000 b8f6 	b.w	8008c88 <ft6x06_g_mode>

08008a9c <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	3018      	adds	r0, #24
 8008aa0:	f000 b8f2 	b.w	8008c88 <ft6x06_g_mode>

08008aa4 <FT6X06_Init>:
{
 8008aa4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8008aa6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8008aaa:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8008aac:	b96b      	cbnz	r3, 8008aca <FT6X06_Init+0x26>
    pObj->IO.Init();
 8008aae:	6803      	ldr	r3, [r0, #0]
 8008ab0:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff fff2 	bl	8008a9c <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8008ab8:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8008aba:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8008abe:	bf18      	it	ne
 8008ac0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8008ac2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8008ac6:	4240      	negs	r0, r0
}
 8008ac8:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8008aca:	2000      	movs	r0, #0
  return ret;
 8008acc:	e7fc      	b.n	8008ac8 <FT6X06_Init+0x24>

08008ace <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8008ace:	2000      	movs	r0, #0
 8008ad0:	4770      	bx	lr

08008ad2 <FT6X06_GetMultiTouchState>:
{
 8008ad2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008ad4:	f100 0518 	add.w	r5, r0, #24
{
 8008ad8:	b085      	sub	sp, #20
 8008ada:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008adc:	4628      	mov	r0, r5
 8008ade:	a901      	add	r1, sp, #4
 8008ae0:	f000 f87d 	bl	8008bde <ft6x06_td_status>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d145      	bne.n	8008b74 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8008ae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	bf98      	it	ls
 8008af0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008af2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008af4:	230c      	movs	r3, #12
 8008af6:	aa01      	add	r2, sp, #4
 8008af8:	2103      	movs	r1, #3
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 f85c 	bl	8008bb8 <ft6x06_read_reg>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d13a      	bne.n	8008b7a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008b04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008b08:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008b0c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008b0e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008b10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008b14:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008b16:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008b18:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b1c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008b20:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008b22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b2c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b2e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008b32:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8008b34:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008b38:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8008b3a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8008b3e:	091b      	lsrs	r3, r3, #4
 8008b40:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b42:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8008b44:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b46:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8008b4a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b4c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8008b4e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008b52:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8008b54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8008b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008b66:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8008b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8008b70:	b005      	add	sp, #20
 8008b72:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295
 8008b78:	e7bb      	b.n	8008af2 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8008b7e:	e7f7      	b.n	8008b70 <FT6X06_GetMultiTouchState+0x9e>

08008b80 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8008b80:	b190      	cbz	r0, 8008ba8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8008b82:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8008b84:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008b86:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8008b88:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8008b8a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8008b8c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008b8e:	68ca      	ldr	r2, [r1, #12]
 8008b90:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008b92:	690a      	ldr	r2, [r1, #16]
 8008b94:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008b96:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8008b98:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8008b9a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008b9c:	4a04      	ldr	r2, [pc, #16]	@ (8008bb0 <FT6X06_RegisterBusIO+0x30>)
 8008b9e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008ba0:	4a04      	ldr	r2, [pc, #16]	@ (8008bb4 <FT6X06_RegisterBusIO+0x34>)
 8008ba2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8008ba4:	b103      	cbz	r3, 8008ba8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8008ba6:	4718      	bx	r3
}
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	080089ab 	.word	0x080089ab
 8008bb4:	080089b9 	.word	0x080089b9

08008bb8 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008bb8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008bba:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008bbe:	46a4      	mov	ip, r4
}
 8008bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008bc4:	4760      	bx	ip

08008bc6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008bc6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008bc8:	6804      	ldr	r4, [r0, #0]
 8008bca:	6880      	ldr	r0, [r0, #8]
 8008bcc:	46a4      	mov	ip, r4
}
 8008bce:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008bd2:	4760      	bx	ip

08008bd4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8008bd4:	2301      	movs	r3, #1
{
 8008bd6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8008bd8:	4619      	mov	r1, r3
 8008bda:	f7ff bfed 	b.w	8008bb8 <ft6x06_read_reg>

08008bde <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008bde:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008be0:	460a      	mov	r2, r1
{
 8008be2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008be4:	2301      	movs	r3, #1
 8008be6:	2102      	movs	r1, #2
 8008be8:	f7ff ffe6 	bl	8008bb8 <ft6x06_read_reg>
  
  if(ret == 0)
 8008bec:	b918      	cbnz	r0, 8008bf6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8008bee:	7823      	ldrb	r3, [r4, #0]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8008bf6:	bd10      	pop	{r4, pc}

08008bf8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008bf8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8008bfa:	2301      	movs	r3, #1
{
 8008bfc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8008c00:	f10d 0207 	add.w	r2, sp, #7
 8008c04:	2191      	movs	r1, #145	@ 0x91
 8008c06:	f7ff ffde 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c0a:	b003      	add	sp, #12
 8008c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08008c10 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c10:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8008c12:	2301      	movs	r3, #1
{
 8008c14:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8008c18:	f10d 0207 	add.w	r2, sp, #7
 8008c1c:	2192      	movs	r1, #146	@ 0x92
 8008c1e:	f7ff ffd2 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c22:	b003      	add	sp, #12
 8008c24:	f85d fb04 	ldr.w	pc, [sp], #4

08008c28 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c28:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8008c2a:	2301      	movs	r3, #1
{
 8008c2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8008c30:	f10d 0207 	add.w	r2, sp, #7
 8008c34:	2193      	movs	r1, #147	@ 0x93
 8008c36:	f7ff ffc6 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c3a:	b003      	add	sp, #12
 8008c3c:	f85d fb04 	ldr.w	pc, [sp], #4

08008c40 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c40:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8008c42:	2301      	movs	r3, #1
{
 8008c44:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8008c48:	f10d 0207 	add.w	r2, sp, #7
 8008c4c:	2194      	movs	r1, #148	@ 0x94
 8008c4e:	f7ff ffba 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c52:	b003      	add	sp, #12
 8008c54:	f85d fb04 	ldr.w	pc, [sp], #4

08008c58 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c58:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8008c5a:	2301      	movs	r3, #1
{
 8008c5c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8008c60:	f10d 0207 	add.w	r2, sp, #7
 8008c64:	2195      	movs	r1, #149	@ 0x95
 8008c66:	f7ff ffae 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c6a:	b003      	add	sp, #12
 8008c6c:	f85d fb04 	ldr.w	pc, [sp], #4

08008c70 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c70:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8008c72:	2301      	movs	r3, #1
{
 8008c74:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8008c78:	f10d 0207 	add.w	r2, sp, #7
 8008c7c:	2196      	movs	r1, #150	@ 0x96
 8008c7e:	f7ff ffa2 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c82:	b003      	add	sp, #12
 8008c84:	f85d fb04 	ldr.w	pc, [sp], #4

08008c88 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008c88:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8008c8a:	2301      	movs	r3, #1
{
 8008c8c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8008c90:	f10d 0207 	add.w	r2, sp, #7
 8008c94:	21a4      	movs	r1, #164	@ 0xa4
 8008c96:	f7ff ff96 	bl	8008bc6 <ft6x06_write_reg>
}
 8008c9a:	b003      	add	sp, #12
 8008c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08008ca0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008ca0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	21a8      	movs	r1, #168	@ 0xa8
 8008ca6:	f7ff bf87 	b.w	8008bb8 <ft6x06_read_reg>
	...

08008cac <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008cac:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4b07      	ldr	r3, [pc, #28]	@ (8008cd0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8008cb2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8008cb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8008cb8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008cba:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8008cbc:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cc2:	f006 f9f5 	bl	800f0b0 <HAL_SDRAM_SendCommand>
 8008cc6:	3800      	subs	r0, #0
 8008cc8:	bf18      	it	ne
 8008cca:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008ccc:	4240      	negs	r0, r0
 8008cce:	bd08      	pop	{r3, pc}
 8008cd0:	2400e514 	.word	0x2400e514

08008cd4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008cd4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8008cda:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8008cde:	2101      	movs	r1, #1
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cea:	4619      	mov	r1, r3
 8008cec:	f006 f9e0 	bl	800f0b0 <HAL_SDRAM_SendCommand>
 8008cf0:	3800      	subs	r0, #0
 8008cf2:	bf18      	it	ne
 8008cf4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008cf6:	4240      	negs	r0, r0
 8008cf8:	bd08      	pop	{r3, pc}
 8008cfa:	bf00      	nop
 8008cfc:	2400e514 	.word	0x2400e514

08008d00 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8008d00:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008d02:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8008d06:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008d08:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8008d0a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008d0c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8008d0e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8008d10:	6991      	ldr	r1, [r2, #24]
 8008d12:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008d14:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8008d16:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008d18:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008d1a:	4907      	ldr	r1, [pc, #28]	@ (8008d38 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8008d1c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8008d1e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008d20:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8008d22:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d2a:	f006 f9c1 	bl	800f0b0 <HAL_SDRAM_SendCommand>
 8008d2e:	3800      	subs	r0, #0
 8008d30:	bf18      	it	ne
 8008d32:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008d34:	4240      	negs	r0, r0
 8008d36:	bd10      	pop	{r4, pc}
 8008d38:	2400e514 	.word	0x2400e514

08008d3c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8008d3c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8008d3e:	4b08      	ldr	r3, [pc, #32]	@ (8008d60 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8008d40:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8008d44:	2108      	movs	r1, #8
 8008d46:	2200      	movs	r2, #0
 8008d48:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008d4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d50:	4619      	mov	r1, r3
 8008d52:	f006 f9ad 	bl	800f0b0 <HAL_SDRAM_SendCommand>
 8008d56:	3800      	subs	r0, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008d5c:	4240      	negs	r0, r0
 8008d5e:	bd08      	pop	{r3, pc}
 8008d60:	2400e514 	.word	0x2400e514

08008d64 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8008d64:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8008d66:	f006 f9c2 	bl	800f0ee <HAL_SDRAM_ProgramRefreshRate>
 8008d6a:	3800      	subs	r0, #0
 8008d6c:	bf18      	it	ne
 8008d6e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008d70:	4240      	negs	r0, r0
 8008d72:	bd08      	pop	{r3, pc}

08008d74 <IS42S32800J_Init>:
{
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008d78:	6809      	ldr	r1, [r1, #0]
{
 8008d7a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008d7c:	f7ff ff96 	bl	8008cac <IS42S32800J_ClockEnable>
 8008d80:	b110      	cbz	r0, 8008d88 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8008d88:	f001 fc7c 	bl	800a684 <HAL_GetTick>
 8008d8c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8008d8e:	f001 fc79 	bl	800a684 <HAL_GetTick>
 8008d92:	4286      	cmp	r6, r0
 8008d94:	d0fb      	beq.n	8008d8e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008d96:	6821      	ldr	r1, [r4, #0]
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f7ff ff9b 	bl	8008cd4 <IS42S32800J_Precharge>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d1ef      	bne.n	8008d82 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8008da2:	4628      	mov	r0, r5
 8008da4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8008da8:	f7ff ffc8 	bl	8008d3c <IS42S32800J_RefreshMode>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1e8      	bne.n	8008d82 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f7ff ffa4 	bl	8008d00 <IS42S32800J_ModeRegConfig>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1e2      	bne.n	8008d82 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8008dbc:	68a1      	ldr	r1, [r4, #8]
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7ff ffd0 	bl	8008d64 <IS42S32800J_RefreshRate>
 8008dc4:	3800      	subs	r0, #0
 8008dc6:	bf18      	it	ne
 8008dc8:	2001      	movne	r0, #1
 8008dca:	4240      	negs	r0, r0
  return ret;
 8008dcc:	e7db      	b.n	8008d86 <IS42S32800J_Init+0x12>

08008dce <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8008dce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008dd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8008dd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8008dda:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8008dde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008de2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8008de6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008dea:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8008dec:	2000      	movs	r0, #0
 8008dee:	4770      	bx	lr

08008df0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008df0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008df2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8008df6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008df8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008dfc:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008dfe:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008e00:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8008e02:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008e04:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008e06:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8008e08:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e0a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008e0c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8008e0e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8008e10:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8008e12:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e14:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e16:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008e1a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8008e1e:	2310      	movs	r3, #16
 8008e20:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8008e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008e26:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8008e28:	f240 1301 	movw	r3, #257	@ 0x101
 8008e2c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008e32:	f004 fd44 	bl	800d8be <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8008e36:	2800      	cmp	r0, #0

}
 8008e38:	bf14      	ite	ne
 8008e3a:	f06f 0004 	mvnne.w	r0, #4
 8008e3e:	2000      	moveq	r0, #0
 8008e40:	b015      	add	sp, #84	@ 0x54
 8008e42:	f85d fb04 	ldr.w	pc, [sp], #4

08008e46 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008e46:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e48:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8008e4c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008e4e:	bf08      	it	eq
 8008e50:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8008e54:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008e56:	bf18      	it	ne
 8008e58:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008e5c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e5e:	a906      	add	r1, sp, #24
{
 8008e60:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008e62:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8008e64:	2306      	movs	r3, #6
 8008e66:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008e68:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e6a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8008e6e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8008e70:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008e72:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008e74:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e78:	f004 fc20 	bl	800d6bc <HAL_QSPI_Command>
 8008e7c:	bb20      	cbnz	r0, 8008ec8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8008e7e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8008e82:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008e84:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008e86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8008e8a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e8c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8008e8e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8008e92:	f04f 0310 	mov.w	r3, #16
 8008e96:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008e9a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e9e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008ea0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008ea4:	bf14      	ite	ne
 8008ea6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8008eaa:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008eae:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008eb0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008eb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008eb6:	f004 fd02 	bl	800d8be <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	bf14      	ite	ne
 8008ebe:	f06f 0004 	mvnne.w	r0, #4
 8008ec2:	2000      	moveq	r0, #0
}
 8008ec4:	b015      	add	sp, #84	@ 0x54
 8008ec6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8008ec8:	f06f 0001 	mvn.w	r0, #1
 8008ecc:	e7fa      	b.n	8008ec4 <MT25TL01G_WriteEnable+0x7e>

08008ece <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008ece:	2903      	cmp	r1, #3
{
 8008ed0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008ed2:	bf08      	it	eq
 8008ed4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8008ed8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008eda:	bf18      	it	ne
 8008edc:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008ee4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8008ee6:	23b7      	movs	r3, #183	@ 0xb7
 8008ee8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008eea:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008eec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008ef0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008ef2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008ef4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008ef6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8008efa:	f7ff ffa4 	bl	8008e46 <MT25TL01G_WriteEnable>
 8008efe:	b118      	cbz	r0, 8008f08 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8008f00:	f06f 0001 	mvn.w	r0, #1
}
 8008f04:	b00f      	add	sp, #60	@ 0x3c
 8008f06:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f0c:	4669      	mov	r1, sp
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f004 fbd4 	bl	800d6bc <HAL_QSPI_Command>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d1f3      	bne.n	8008f00 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7ff ff68 	bl	8008df0 <MT25TL01G_AutoPollingMemReady>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0ef      	beq.n	8008f04 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8008f24:	e7ec      	b.n	8008f00 <MT25TL01G_Enter4BytesAddressMode+0x32>

08008f26 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8008f26:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8008f2c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008f32:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8008f34:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f36:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8008f38:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008f3a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008f40:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008f42:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008f44:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008f46:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f4a:	f004 fbb7 	bl	800d6bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008f4e:	2800      	cmp	r0, #0
}
 8008f50:	bf14      	ite	ne
 8008f52:	f06f 0001 	mvnne.w	r0, #1
 8008f56:	2000      	moveq	r0, #0
 8008f58:	b00f      	add	sp, #60	@ 0x3c
 8008f5a:	f85d fb04 	ldr.w	pc, [sp], #4

08008f5e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8008f5e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8008f64:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f66:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008f6a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8008f6c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f6e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8008f70:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008f72:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f74:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008f78:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008f7a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008f7c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008f7e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f82:	f004 fb9b 	bl	800d6bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008f86:	2800      	cmp	r0, #0
}
 8008f88:	bf14      	ite	ne
 8008f8a:	f06f 0001 	mvnne.w	r0, #1
 8008f8e:	2000      	moveq	r0, #0
 8008f90:	b00f      	add	sp, #60	@ 0x3c
 8008f92:	f85d fb04 	ldr.w	pc, [sp], #4

08008f96 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008f96:	b500      	push	{lr}
 8008f98:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8008f9a:	2903      	cmp	r1, #3
 8008f9c:	d80e      	bhi.n	8008fbc <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8008f9e:	e8df f001 	tbb	[pc, r1]
 8008fa2:	2902      	.short	0x2902
 8008fa4:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008faa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8008fac:	230e      	movs	r3, #14
 8008fae:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8008fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fb4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8008fb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008fba:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8008fbc:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008fbe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008fc2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008fc6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8008fc8:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008fce:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008fd0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008fd2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008fd6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008fd8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008fda:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8008fdc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008fe0:	f004 fcbe 	bl	800d960 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8008fe4:	2800      	cmp	r0, #0
}
 8008fe6:	bf14      	ite	ne
 8008fe8:	f06f 0005 	mvnne.w	r0, #5
 8008fec:	2000      	moveq	r0, #0
 8008fee:	b011      	add	sp, #68	@ 0x44
 8008ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ff8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8008ffa:	233d      	movs	r3, #61	@ 0x3d
 8008ffc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8008ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009002:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009008:	e7d7      	b.n	8008fba <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800900a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800900e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8009010:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009012:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009014:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009018:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800901a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800901e:	e7cc      	b.n	8008fba <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009020:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009024:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009026:	23ed      	movs	r3, #237	@ 0xed
 8009028:	e7f3      	b.n	8009012 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800902a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800902a:	b500      	push	{lr}
 800902c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800902e:	2903      	cmp	r1, #3
 8009030:	d80e      	bhi.n	8009050 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8009032:	e8df f001 	tbb	[pc, r1]
 8009036:	2502      	.short	0x2502
 8009038:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800903a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800903e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8009040:	230c      	movs	r3, #12
 8009042:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009048:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800904a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800904e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009050:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009052:	466a      	mov	r2, sp
 8009054:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009056:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009058:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800905c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800905e:	2300      	movs	r3, #0
 8009060:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009062:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009064:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009068:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800906c:	f004 fc78 	bl	800d960 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8009070:	2800      	cmp	r0, #0
}
 8009072:	bf14      	ite	ne
 8009074:	f06f 0005 	mvnne.w	r0, #5
 8009078:	2000      	moveq	r0, #0
 800907a:	b011      	add	sp, #68	@ 0x44
 800907c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009084:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009086:	23bc      	movs	r3, #188	@ 0xbc
 8009088:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800908a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800908e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009094:	e7db      	b.n	800904e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009096:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800909a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800909c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800909e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80090a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80090a4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80090a6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80090aa:	e7d0      	b.n	800904e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80090ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80090b0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80090b2:	23eb      	movs	r3, #235	@ 0xeb
 80090b4:	e7f3      	b.n	800909e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080090b6 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80090b6:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090b8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80090bc:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80090be:	bf18      	it	ne
 80090c0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80090c4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80090c6:	bf08      	it	eq
 80090c8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090cc:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80090ce:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80090d0:	2366      	movs	r3, #102	@ 0x66
 80090d2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80090d4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80090d6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80090da:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80090dc:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80090de:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80090e0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090e4:	f004 faea 	bl	800d6bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80090e8:	2800      	cmp	r0, #0
}
 80090ea:	bf14      	ite	ne
 80090ec:	f06f 0001 	mvnne.w	r0, #1
 80090f0:	2000      	moveq	r0, #0
 80090f2:	b00f      	add	sp, #60	@ 0x3c
 80090f4:	f85d fb04 	ldr.w	pc, [sp], #4

080090f8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80090f8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090fa:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80090fe:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009100:	bf18      	it	ne
 8009102:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009106:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009108:	bf08      	it	eq
 800910a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800910e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009110:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8009112:	2399      	movs	r3, #153	@ 0x99
 8009114:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009116:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009118:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800911c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800911e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009120:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009122:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009126:	f004 fac9 	bl	800d6bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800912a:	2800      	cmp	r0, #0
}
 800912c:	bf14      	ite	ne
 800912e:	f06f 0001 	mvnne.w	r0, #1
 8009132:	2000      	moveq	r0, #0
 8009134:	b00f      	add	sp, #60	@ 0x3c
 8009136:	f85d fb04 	ldr.w	pc, [sp], #4

0800913a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800913a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800913c:	6884      	ldr	r4, [r0, #8]
 800913e:	8800      	ldrh	r0, [r0, #0]
 8009140:	46a4      	mov	ip, r4
}
 8009142:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009146:	4760      	bx	ip

08009148 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009148:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800914a:	6844      	ldr	r4, [r0, #4]
 800914c:	8800      	ldrh	r0, [r0, #0]
 800914e:	46a4      	mov	ip, r4
}
 8009150:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009154:	4760      	bx	ip

08009156 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009156:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8009158:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800915a:	4604      	mov	r4, r0
 800915c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800915e:	4798      	blx	r3
 8009160:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009162:	68e3      	ldr	r3, [r4, #12]
 8009164:	4798      	blx	r3
 8009166:	1b83      	subs	r3, r0, r6
 8009168:	42ab      	cmp	r3, r5
 800916a:	d3fa      	bcc.n	8009162 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800916c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009170 <OTM8009A_Init>:
{
 8009170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009174:	2300      	movs	r3, #0
 8009176:	f100 0510 	add.w	r5, r0, #16
{
 800917a:	4607      	mov	r7, r0
 800917c:	460e      	mov	r6, r1
 800917e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009180:	4619      	mov	r1, r3
 8009182:	4ade      	ldr	r2, [pc, #888]	@ (80094fc <OTM8009A_Init+0x38c>)
 8009184:	4628      	mov	r0, r5
 8009186:	f000 fb99 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800918a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800918c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800918e:	4adc      	ldr	r2, [pc, #880]	@ (8009500 <OTM8009A_Init+0x390>)
 8009190:	21ff      	movs	r1, #255	@ 0xff
 8009192:	4628      	mov	r0, r5
 8009194:	f000 fb92 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009198:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800919a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800919c:	4ad9      	ldr	r2, [pc, #868]	@ (8009504 <OTM8009A_Init+0x394>)
 800919e:	4619      	mov	r1, r3
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 fb8b 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80091a6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80091aa:	4ad7      	ldr	r2, [pc, #860]	@ (8009508 <OTM8009A_Init+0x398>)
 80091ac:	21ff      	movs	r1, #255	@ 0xff
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 fb84 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80091b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091b8:	4ad2      	ldr	r2, [pc, #840]	@ (8009504 <OTM8009A_Init+0x394>)
 80091ba:	4619      	mov	r1, r3
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 fb7d 	bl	80098bc <otm8009a_write_reg>
 80091c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80091c4:	2300      	movs	r3, #0
 80091c6:	4ad1      	ldr	r2, [pc, #836]	@ (800950c <OTM8009A_Init+0x39c>)
 80091c8:	21c4      	movs	r1, #196	@ 0xc4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 fb76 	bl	80098bc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80091d0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80091d2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80091d4:	4638      	mov	r0, r7
 80091d6:	f7ff ffbe 	bl	8009156 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80091da:	2300      	movs	r3, #0
 80091dc:	4acc      	ldr	r2, [pc, #816]	@ (8009510 <OTM8009A_Init+0x3a0>)
 80091de:	4628      	mov	r0, r5
 80091e0:	4619      	mov	r1, r3
 80091e2:	f000 fb6b 	bl	80098bc <otm8009a_write_reg>
 80091e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80091e8:	2300      	movs	r3, #0
 80091ea:	4aca      	ldr	r2, [pc, #808]	@ (8009514 <OTM8009A_Init+0x3a4>)
 80091ec:	21c4      	movs	r1, #196	@ 0xc4
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 fb64 	bl	80098bc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80091f4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80091f6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ffac 	bl	8009156 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80091fe:	2300      	movs	r3, #0
 8009200:	4ac5      	ldr	r2, [pc, #788]	@ (8009518 <OTM8009A_Init+0x3a8>)
 8009202:	4628      	mov	r0, r5
 8009204:	4619      	mov	r1, r3
 8009206:	f000 fb59 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800920a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800920c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800920e:	4ac3      	ldr	r2, [pc, #780]	@ (800951c <OTM8009A_Init+0x3ac>)
 8009210:	21c5      	movs	r1, #197	@ 0xc5
 8009212:	4628      	mov	r0, r5
 8009214:	f000 fb52 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009218:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800921a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800921c:	4ac0      	ldr	r2, [pc, #768]	@ (8009520 <OTM8009A_Init+0x3b0>)
 800921e:	4619      	mov	r1, r3
 8009220:	4628      	mov	r0, r5
 8009222:	f000 fb4b 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009226:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009228:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800922a:	4abe      	ldr	r2, [pc, #760]	@ (8009524 <OTM8009A_Init+0x3b4>)
 800922c:	21c5      	movs	r1, #197	@ 0xc5
 800922e:	4628      	mov	r0, r5
 8009230:	f000 fb44 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009234:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009238:	4abb      	ldr	r2, [pc, #748]	@ (8009528 <OTM8009A_Init+0x3b8>)
 800923a:	4619      	mov	r1, r3
 800923c:	4628      	mov	r0, r5
 800923e:	f000 fb3d 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009242:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009244:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009246:	4ab9      	ldr	r2, [pc, #740]	@ (800952c <OTM8009A_Init+0x3bc>)
 8009248:	21c0      	movs	r1, #192	@ 0xc0
 800924a:	4628      	mov	r0, r5
 800924c:	f000 fb36 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009250:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009252:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009254:	4aa9      	ldr	r2, [pc, #676]	@ (80094fc <OTM8009A_Init+0x38c>)
 8009256:	4619      	mov	r1, r3
 8009258:	4628      	mov	r0, r5
 800925a:	f000 fb2f 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800925e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009260:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009262:	4ab3      	ldr	r2, [pc, #716]	@ (8009530 <OTM8009A_Init+0x3c0>)
 8009264:	21d9      	movs	r1, #217	@ 0xd9
 8009266:	4628      	mov	r0, r5
 8009268:	f000 fb28 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800926c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800926e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009270:	4ab0      	ldr	r2, [pc, #704]	@ (8009534 <OTM8009A_Init+0x3c4>)
 8009272:	4619      	mov	r1, r3
 8009274:	4628      	mov	r0, r5
 8009276:	f000 fb21 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800927a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800927c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800927e:	4aae      	ldr	r2, [pc, #696]	@ (8009538 <OTM8009A_Init+0x3c8>)
 8009280:	21c1      	movs	r1, #193	@ 0xc1
 8009282:	4628      	mov	r0, r5
 8009284:	f000 fb1a 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009288:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800928a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800928c:	4aab      	ldr	r2, [pc, #684]	@ (800953c <OTM8009A_Init+0x3cc>)
 800928e:	4619      	mov	r1, r3
 8009290:	4628      	mov	r0, r5
 8009292:	f000 fb13 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009296:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009298:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800929a:	4aa9      	ldr	r2, [pc, #676]	@ (8009540 <OTM8009A_Init+0x3d0>)
 800929c:	21c5      	movs	r1, #197	@ 0xc5
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 fb0c 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80092a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80092a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80092a8:	4aa6      	ldr	r2, [pc, #664]	@ (8009544 <OTM8009A_Init+0x3d4>)
 80092aa:	4619      	mov	r1, r3
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 fb05 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80092b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80092b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80092b6:	4a9b      	ldr	r2, [pc, #620]	@ (8009524 <OTM8009A_Init+0x3b4>)
 80092b8:	21c5      	movs	r1, #197	@ 0xc5
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 fafe 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80092c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80092c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80092c4:	4a8d      	ldr	r2, [pc, #564]	@ (80094fc <OTM8009A_Init+0x38c>)
 80092c6:	4619      	mov	r1, r3
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 faf7 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80092ce:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80092d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80092d2:	4a9d      	ldr	r2, [pc, #628]	@ (8009548 <OTM8009A_Init+0x3d8>)
 80092d4:	21d8      	movs	r1, #216	@ 0xd8
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 faf0 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80092dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80092de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80092e0:	4a9a      	ldr	r2, [pc, #616]	@ (800954c <OTM8009A_Init+0x3dc>)
 80092e2:	4619      	mov	r1, r3
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 fae9 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80092ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80092ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80092ee:	4a98      	ldr	r2, [pc, #608]	@ (8009550 <OTM8009A_Init+0x3e0>)
 80092f0:	21c5      	movs	r1, #197	@ 0xc5
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 fae2 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80092f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80092fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80092fc:	4a95      	ldr	r2, [pc, #596]	@ (8009554 <OTM8009A_Init+0x3e4>)
 80092fe:	4619      	mov	r1, r3
 8009300:	4628      	mov	r0, r5
 8009302:	f000 fadb 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009306:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009308:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800930a:	4a93      	ldr	r2, [pc, #588]	@ (8009558 <OTM8009A_Init+0x3e8>)
 800930c:	21c0      	movs	r1, #192	@ 0xc0
 800930e:	4628      	mov	r0, r5
 8009310:	f000 fad4 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009314:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009316:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009318:	4a90      	ldr	r2, [pc, #576]	@ (800955c <OTM8009A_Init+0x3ec>)
 800931a:	4619      	mov	r1, r3
 800931c:	4628      	mov	r0, r5
 800931e:	f000 facd 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009322:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009324:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009326:	4a8e      	ldr	r2, [pc, #568]	@ (8009560 <OTM8009A_Init+0x3f0>)
 8009328:	21c5      	movs	r1, #197	@ 0xc5
 800932a:	4628      	mov	r0, r5
 800932c:	f000 fac6 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009330:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009332:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009334:	4a8b      	ldr	r2, [pc, #556]	@ (8009564 <OTM8009A_Init+0x3f4>)
 8009336:	4619      	mov	r1, r3
 8009338:	4628      	mov	r0, r5
 800933a:	f000 fabf 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800933e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009340:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009342:	4a89      	ldr	r2, [pc, #548]	@ (8009568 <OTM8009A_Init+0x3f8>)
 8009344:	21c4      	movs	r1, #196	@ 0xc4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 fab8 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800934c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800934e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009350:	4a78      	ldr	r2, [pc, #480]	@ (8009534 <OTM8009A_Init+0x3c4>)
 8009352:	4619      	mov	r1, r3
 8009354:	4628      	mov	r0, r5
 8009356:	f000 fab1 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800935a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800935c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800935e:	4a83      	ldr	r2, [pc, #524]	@ (800956c <OTM8009A_Init+0x3fc>)
 8009360:	21c1      	movs	r1, #193	@ 0xc1
 8009362:	4628      	mov	r0, r5
 8009364:	f000 faaa 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009368:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800936a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800936c:	4a80      	ldr	r2, [pc, #512]	@ (8009570 <OTM8009A_Init+0x400>)
 800936e:	4619      	mov	r1, r3
 8009370:	4628      	mov	r0, r5
 8009372:	f000 faa3 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009376:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009378:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800937a:	4a7e      	ldr	r2, [pc, #504]	@ (8009574 <OTM8009A_Init+0x404>)
 800937c:	21b3      	movs	r1, #179	@ 0xb3
 800937e:	4628      	mov	r0, r5
 8009380:	f000 fa9c 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009384:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009386:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009388:	4a5e      	ldr	r2, [pc, #376]	@ (8009504 <OTM8009A_Init+0x394>)
 800938a:	4619      	mov	r1, r3
 800938c:	4628      	mov	r0, r5
 800938e:	f000 fa95 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009392:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009394:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009396:	4a78      	ldr	r2, [pc, #480]	@ (8009578 <OTM8009A_Init+0x408>)
 8009398:	21ce      	movs	r1, #206	@ 0xce
 800939a:	4628      	mov	r0, r5
 800939c:	f000 fa8e 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80093a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80093a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80093a4:	4a75      	ldr	r2, [pc, #468]	@ (800957c <OTM8009A_Init+0x40c>)
 80093a6:	4619      	mov	r1, r3
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 fa87 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80093ae:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80093b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80093b2:	4a73      	ldr	r2, [pc, #460]	@ (8009580 <OTM8009A_Init+0x410>)
 80093b4:	21ce      	movs	r1, #206	@ 0xce
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fa80 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80093bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80093be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80093c0:	4a70      	ldr	r2, [pc, #448]	@ (8009584 <OTM8009A_Init+0x414>)
 80093c2:	4619      	mov	r1, r3
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 fa79 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80093ca:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80093cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80093ce:	4a6e      	ldr	r2, [pc, #440]	@ (8009588 <OTM8009A_Init+0x418>)
 80093d0:	21ce      	movs	r1, #206	@ 0xce
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 fa72 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80093d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80093da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80093dc:	4a6b      	ldr	r2, [pc, #428]	@ (800958c <OTM8009A_Init+0x41c>)
 80093de:	4619      	mov	r1, r3
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 fa6b 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80093e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80093e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80093ea:	4a69      	ldr	r2, [pc, #420]	@ (8009590 <OTM8009A_Init+0x420>)
 80093ec:	21cf      	movs	r1, #207	@ 0xcf
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 fa64 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80093f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80093f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80093f8:	4a66      	ldr	r2, [pc, #408]	@ (8009594 <OTM8009A_Init+0x424>)
 80093fa:	4619      	mov	r1, r3
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 fa5d 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009402:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009404:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009406:	4a64      	ldr	r2, [pc, #400]	@ (8009598 <OTM8009A_Init+0x428>)
 8009408:	21cf      	movs	r1, #207	@ 0xcf
 800940a:	4628      	mov	r0, r5
 800940c:	f000 fa56 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009410:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009412:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009414:	4a3b      	ldr	r2, [pc, #236]	@ (8009504 <OTM8009A_Init+0x394>)
 8009416:	4619      	mov	r1, r3
 8009418:	4628      	mov	r0, r5
 800941a:	f000 fa4f 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800941e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009420:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009422:	4a5e      	ldr	r2, [pc, #376]	@ (800959c <OTM8009A_Init+0x42c>)
 8009424:	21cb      	movs	r1, #203	@ 0xcb
 8009426:	4628      	mov	r0, r5
 8009428:	f000 fa48 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800942c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800942e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009430:	4a5b      	ldr	r2, [pc, #364]	@ (80095a0 <OTM8009A_Init+0x430>)
 8009432:	4619      	mov	r1, r3
 8009434:	4628      	mov	r0, r5
 8009436:	f000 fa41 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800943a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800943c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800943e:	4a59      	ldr	r2, [pc, #356]	@ (80095a4 <OTM8009A_Init+0x434>)
 8009440:	21cb      	movs	r1, #203	@ 0xcb
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fa3a 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009448:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800944a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800944c:	4a4b      	ldr	r2, [pc, #300]	@ (800957c <OTM8009A_Init+0x40c>)
 800944e:	4619      	mov	r1, r3
 8009450:	4628      	mov	r0, r5
 8009452:	f000 fa33 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009456:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009458:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800945a:	4a53      	ldr	r2, [pc, #332]	@ (80095a8 <OTM8009A_Init+0x438>)
 800945c:	21cb      	movs	r1, #203	@ 0xcb
 800945e:	4628      	mov	r0, r5
 8009460:	f000 fa2c 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009464:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009466:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009468:	4a46      	ldr	r2, [pc, #280]	@ (8009584 <OTM8009A_Init+0x414>)
 800946a:	4619      	mov	r1, r3
 800946c:	4628      	mov	r0, r5
 800946e:	f000 fa25 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009472:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009474:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009476:	4a4d      	ldr	r2, [pc, #308]	@ (80095ac <OTM8009A_Init+0x43c>)
 8009478:	21cb      	movs	r1, #203	@ 0xcb
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fa1e 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009480:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009482:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009484:	4a41      	ldr	r2, [pc, #260]	@ (800958c <OTM8009A_Init+0x41c>)
 8009486:	4619      	mov	r1, r3
 8009488:	4628      	mov	r0, r5
 800948a:	f000 fa17 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800948e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009490:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009492:	4a47      	ldr	r2, [pc, #284]	@ (80095b0 <OTM8009A_Init+0x440>)
 8009494:	21cb      	movs	r1, #203	@ 0xcb
 8009496:	4628      	mov	r0, r5
 8009498:	f000 fa10 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800949c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800949e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80094a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009594 <OTM8009A_Init+0x424>)
 80094a2:	4619      	mov	r1, r3
 80094a4:	4628      	mov	r0, r5
 80094a6:	f000 fa09 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80094aa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80094ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80094ae:	4a41      	ldr	r2, [pc, #260]	@ (80095b4 <OTM8009A_Init+0x444>)
 80094b0:	21cb      	movs	r1, #203	@ 0xcb
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 fa02 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80094b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80094ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80094bc:	4a3e      	ldr	r2, [pc, #248]	@ (80095b8 <OTM8009A_Init+0x448>)
 80094be:	4619      	mov	r1, r3
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f9fb 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80094c6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80094c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80094ca:	4a3c      	ldr	r2, [pc, #240]	@ (80095bc <OTM8009A_Init+0x44c>)
 80094cc:	21cb      	movs	r1, #203	@ 0xcb
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f9f4 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80094d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80094d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80094d8:	4a39      	ldr	r2, [pc, #228]	@ (80095c0 <OTM8009A_Init+0x450>)
 80094da:	4619      	mov	r1, r3
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 f9ed 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80094e2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80094e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80094e6:	4a37      	ldr	r2, [pc, #220]	@ (80095c4 <OTM8009A_Init+0x454>)
 80094e8:	21cb      	movs	r1, #203	@ 0xcb
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 f9e6 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80094f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80094f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80094f4:	4a03      	ldr	r2, [pc, #12]	@ (8009504 <OTM8009A_Init+0x394>)
 80094f6:	4619      	mov	r1, r3
 80094f8:	4628      	mov	r0, r5
 80094fa:	e065      	b.n	80095c8 <OTM8009A_Init+0x458>
 80094fc:	0802c77d 	.word	0x0802c77d
 8009500:	0802c779 	.word	0x0802c779
 8009504:	0802c77e 	.word	0x0802c77e
 8009508:	0802c777 	.word	0x0802c777
 800950c:	0802c77f 	.word	0x0802c77f
 8009510:	0802c780 	.word	0x0802c780
 8009514:	0802c781 	.word	0x0802c781
 8009518:	0802c782 	.word	0x0802c782
 800951c:	0802c783 	.word	0x0802c783
 8009520:	0802c784 	.word	0x0802c784
 8009524:	0802c785 	.word	0x0802c785
 8009528:	0802c786 	.word	0x0802c786
 800952c:	0802c787 	.word	0x0802c787
 8009530:	0802c788 	.word	0x0802c788
 8009534:	0802c78b 	.word	0x0802c78b
 8009538:	0802c78c 	.word	0x0802c78c
 800953c:	0802c78d 	.word	0x0802c78d
 8009540:	0802c78e 	.word	0x0802c78e
 8009544:	0802c78f 	.word	0x0802c78f
 8009548:	0802c775 	.word	0x0802c775
 800954c:	0802c790 	.word	0x0802c790
 8009550:	0802c791 	.word	0x0802c791
 8009554:	0802c792 	.word	0x0802c792
 8009558:	0802c793 	.word	0x0802c793
 800955c:	0802c794 	.word	0x0802c794
 8009560:	0802c795 	.word	0x0802c795
 8009564:	0802c789 	.word	0x0802c789
 8009568:	0802c796 	.word	0x0802c796
 800956c:	0802c797 	.word	0x0802c797
 8009570:	0802c798 	.word	0x0802c798
 8009574:	0802c773 	.word	0x0802c773
 8009578:	0802c76d 	.word	0x0802c76d
 800957c:	0802c799 	.word	0x0802c799
 8009580:	0802c75f 	.word	0x0802c75f
 8009584:	0802c79a 	.word	0x0802c79a
 8009588:	0802c751 	.word	0x0802c751
 800958c:	0802c79b 	.word	0x0802c79b
 8009590:	0802c747 	.word	0x0802c747
 8009594:	0802c79c 	.word	0x0802c79c
 8009598:	0802c7a9 	.word	0x0802c7a9
 800959c:	0802c73d 	.word	0x0802c73d
 80095a0:	0802c79d 	.word	0x0802c79d
 80095a4:	0802c72e 	.word	0x0802c72e
 80095a8:	0802c71f 	.word	0x0802c71f
 80095ac:	0802c715 	.word	0x0802c715
 80095b0:	0802c706 	.word	0x0802c706
 80095b4:	0802c6f7 	.word	0x0802c6f7
 80095b8:	0802c79e 	.word	0x0802c79e
 80095bc:	0802c6ed 	.word	0x0802c6ed
 80095c0:	0802c79f 	.word	0x0802c79f
 80095c4:	0802c6e3 	.word	0x0802c6e3
 80095c8:	f000 f978 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80095cc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80095ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80095d0:	4a8e      	ldr	r2, [pc, #568]	@ (800980c <OTM8009A_Init+0x69c>)
 80095d2:	21cc      	movs	r1, #204	@ 0xcc
 80095d4:	4628      	mov	r0, r5
 80095d6:	f000 f971 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80095da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80095dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80095de:	4a8c      	ldr	r2, [pc, #560]	@ (8009810 <OTM8009A_Init+0x6a0>)
 80095e0:	4619      	mov	r1, r3
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f96a 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80095e8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80095ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80095ec:	4a89      	ldr	r2, [pc, #548]	@ (8009814 <OTM8009A_Init+0x6a4>)
 80095ee:	21cc      	movs	r1, #204	@ 0xcc
 80095f0:	4628      	mov	r0, r5
 80095f2:	f000 f963 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80095f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80095f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80095fa:	4a87      	ldr	r2, [pc, #540]	@ (8009818 <OTM8009A_Init+0x6a8>)
 80095fc:	4619      	mov	r1, r3
 80095fe:	4628      	mov	r0, r5
 8009600:	f000 f95c 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009604:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009606:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009608:	4a84      	ldr	r2, [pc, #528]	@ (800981c <OTM8009A_Init+0x6ac>)
 800960a:	21cc      	movs	r1, #204	@ 0xcc
 800960c:	4628      	mov	r0, r5
 800960e:	f000 f955 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009612:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009614:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009616:	4a82      	ldr	r2, [pc, #520]	@ (8009820 <OTM8009A_Init+0x6b0>)
 8009618:	4619      	mov	r1, r3
 800961a:	4628      	mov	r0, r5
 800961c:	f000 f94e 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009620:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009622:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009624:	4a7f      	ldr	r2, [pc, #508]	@ (8009824 <OTM8009A_Init+0x6b4>)
 8009626:	21cc      	movs	r1, #204	@ 0xcc
 8009628:	4628      	mov	r0, r5
 800962a:	f000 f947 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800962e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009630:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009632:	4a7d      	ldr	r2, [pc, #500]	@ (8009828 <OTM8009A_Init+0x6b8>)
 8009634:	4619      	mov	r1, r3
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f940 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800963c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800963e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009640:	4a7a      	ldr	r2, [pc, #488]	@ (800982c <OTM8009A_Init+0x6bc>)
 8009642:	21cc      	movs	r1, #204	@ 0xcc
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f939 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800964a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800964c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800964e:	4a78      	ldr	r2, [pc, #480]	@ (8009830 <OTM8009A_Init+0x6c0>)
 8009650:	4619      	mov	r1, r3
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f932 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009658:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800965a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800965c:	4a75      	ldr	r2, [pc, #468]	@ (8009834 <OTM8009A_Init+0x6c4>)
 800965e:	21cc      	movs	r1, #204	@ 0xcc
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f92b 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009666:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009668:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800966a:	4a73      	ldr	r2, [pc, #460]	@ (8009838 <OTM8009A_Init+0x6c8>)
 800966c:	4619      	mov	r1, r3
 800966e:	4628      	mov	r0, r5
 8009670:	f000 f924 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009674:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009676:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009678:	4a70      	ldr	r2, [pc, #448]	@ (800983c <OTM8009A_Init+0x6cc>)
 800967a:	21c5      	movs	r1, #197	@ 0xc5
 800967c:	4628      	mov	r0, r5
 800967e:	f000 f91d 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009682:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009684:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009686:	4a6e      	ldr	r2, [pc, #440]	@ (8009840 <OTM8009A_Init+0x6d0>)
 8009688:	4619      	mov	r1, r3
 800968a:	4628      	mov	r0, r5
 800968c:	f000 f916 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009690:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009692:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009694:	4a6b      	ldr	r2, [pc, #428]	@ (8009844 <OTM8009A_Init+0x6d4>)
 8009696:	21f5      	movs	r1, #245	@ 0xf5
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f90f 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800969e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80096a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80096a2:	4a69      	ldr	r2, [pc, #420]	@ (8009848 <OTM8009A_Init+0x6d8>)
 80096a4:	4619      	mov	r1, r3
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 f908 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80096ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80096ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80096b0:	4a66      	ldr	r2, [pc, #408]	@ (800984c <OTM8009A_Init+0x6dc>)
 80096b2:	21c6      	movs	r1, #198	@ 0xc6
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f901 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80096bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096be:	4a64      	ldr	r2, [pc, #400]	@ (8009850 <OTM8009A_Init+0x6e0>)
 80096c0:	4619      	mov	r1, r3
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 f8fa 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80096c8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80096cc:	4a61      	ldr	r2, [pc, #388]	@ (8009854 <OTM8009A_Init+0x6e4>)
 80096ce:	21ff      	movs	r1, #255	@ 0xff
 80096d0:	4628      	mov	r0, r5
 80096d2:	f000 f8f3 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80096d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096da:	4a5d      	ldr	r2, [pc, #372]	@ (8009850 <OTM8009A_Init+0x6e0>)
 80096dc:	4619      	mov	r1, r3
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f8ec 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096e8:	4a59      	ldr	r2, [pc, #356]	@ (8009850 <OTM8009A_Init+0x6e0>)
 80096ea:	4619      	mov	r1, r3
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 f8e5 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80096f2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80096f6:	4a58      	ldr	r2, [pc, #352]	@ (8009858 <OTM8009A_Init+0x6e8>)
 80096f8:	21e1      	movs	r1, #225	@ 0xe1
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 f8de 	bl	80098bc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009700:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009702:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009704:	4a52      	ldr	r2, [pc, #328]	@ (8009850 <OTM8009A_Init+0x6e0>)
 8009706:	4619      	mov	r1, r3
 8009708:	4628      	mov	r0, r5
 800970a:	f000 f8d7 	bl	80098bc <otm8009a_write_reg>
 800970e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8009710:	2310      	movs	r3, #16
 8009712:	4a52      	ldr	r2, [pc, #328]	@ (800985c <OTM8009A_Init+0x6ec>)
 8009714:	21e2      	movs	r1, #226	@ 0xe2
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f8d0 	bl	80098bc <otm8009a_write_reg>
 800971c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800971e:	2300      	movs	r3, #0
 8009720:	4a4f      	ldr	r2, [pc, #316]	@ (8009860 <OTM8009A_Init+0x6f0>)
 8009722:	2111      	movs	r1, #17
 8009724:	4628      	mov	r0, r5
 8009726:	f000 f8c9 	bl	80098bc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800972a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800972c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800972e:	4638      	mov	r0, r7
 8009730:	f7ff fd11 	bl	8009156 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8009734:	4f4b      	ldr	r7, [pc, #300]	@ (8009864 <OTM8009A_Init+0x6f4>)
 8009736:	2e00      	cmp	r6, #0
 8009738:	d061      	beq.n	80097fe <OTM8009A_Init+0x68e>
 800973a:	2e02      	cmp	r6, #2
 800973c:	d107      	bne.n	800974e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800973e:	2300      	movs	r3, #0
 8009740:	4a49      	ldr	r2, [pc, #292]	@ (8009868 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8009742:	213a      	movs	r1, #58	@ 0x3a
 8009744:	4628      	mov	r0, r5
 8009746:	f000 f8b9 	bl	80098bc <otm8009a_write_reg>
 800974a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800974c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800974e:	f1b8 0f01 	cmp.w	r8, #1
 8009752:	d157      	bne.n	8009804 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009754:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009756:	f10d 0207 	add.w	r2, sp, #7
 800975a:	2136      	movs	r1, #54	@ 0x36
 800975c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800975e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009762:	2300      	movs	r3, #0
 8009764:	f000 f8aa 	bl	80098bc <otm8009a_write_reg>
 8009768:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800976a:	2304      	movs	r3, #4
 800976c:	4a3f      	ldr	r2, [pc, #252]	@ (800986c <OTM8009A_Init+0x6fc>)
 800976e:	212a      	movs	r1, #42	@ 0x2a
 8009770:	4628      	mov	r0, r5
 8009772:	f000 f8a3 	bl	80098bc <otm8009a_write_reg>
 8009776:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8009778:	2304      	movs	r3, #4
 800977a:	4a3d      	ldr	r2, [pc, #244]	@ (8009870 <OTM8009A_Init+0x700>)
 800977c:	212b      	movs	r1, #43	@ 0x2b
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f89c 	bl	80098bc <otm8009a_write_reg>
 8009784:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8009786:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800978a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800978c:	2300      	movs	r3, #0
 800978e:	4a39      	ldr	r2, [pc, #228]	@ (8009874 <OTM8009A_Init+0x704>)
 8009790:	2151      	movs	r1, #81	@ 0x51
 8009792:	4628      	mov	r0, r5
 8009794:	f000 f892 	bl	80098bc <otm8009a_write_reg>
 8009798:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800979a:	4633      	mov	r3, r6
 800979c:	4a36      	ldr	r2, [pc, #216]	@ (8009878 <OTM8009A_Init+0x708>)
 800979e:	2153      	movs	r1, #83	@ 0x53
 80097a0:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80097a2:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80097a4:	f000 f88a 	bl	80098bc <otm8009a_write_reg>
 80097a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80097aa:	4633      	mov	r3, r6
 80097ac:	4a33      	ldr	r2, [pc, #204]	@ (800987c <OTM8009A_Init+0x70c>)
 80097ae:	2155      	movs	r1, #85	@ 0x55
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 f883 	bl	80098bc <otm8009a_write_reg>
 80097b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80097b8:	4633      	mov	r3, r6
 80097ba:	4a31      	ldr	r2, [pc, #196]	@ (8009880 <OTM8009A_Init+0x710>)
 80097bc:	215e      	movs	r1, #94	@ 0x5e
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f87c 	bl	80098bc <otm8009a_write_reg>
 80097c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80097c6:	4633      	mov	r3, r6
 80097c8:	4a2e      	ldr	r2, [pc, #184]	@ (8009884 <OTM8009A_Init+0x714>)
 80097ca:	2129      	movs	r1, #41	@ 0x29
 80097cc:	4628      	mov	r0, r5
 80097ce:	f000 f875 	bl	80098bc <otm8009a_write_reg>
 80097d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80097d4:	4633      	mov	r3, r6
 80097d6:	4631      	mov	r1, r6
 80097d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009850 <OTM8009A_Init+0x6e0>)
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f86e 	bl	80098bc <otm8009a_write_reg>
 80097e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80097e2:	4633      	mov	r3, r6
 80097e4:	4a28      	ldr	r2, [pc, #160]	@ (8009888 <OTM8009A_Init+0x718>)
 80097e6:	212c      	movs	r1, #44	@ 0x2c
 80097e8:	4628      	mov	r0, r5
 80097ea:	f000 f867 	bl	80098bc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80097ee:	42c4      	cmn	r4, r0
}
 80097f0:	bf14      	ite	ne
 80097f2:	f04f 30ff 	movne.w	r0, #4294967295
 80097f6:	4630      	moveq	r0, r6
 80097f8:	b002      	add	sp, #8
 80097fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80097fe:	4633      	mov	r3, r6
 8009800:	4a22      	ldr	r2, [pc, #136]	@ (800988c <OTM8009A_Init+0x71c>)
 8009802:	e79e      	b.n	8009742 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	e7bf      	b.n	800978a <OTM8009A_Init+0x61a>
 800980a:	bf00      	nop
 800980c:	0802c6d9 	.word	0x0802c6d9
 8009810:	0802c79d 	.word	0x0802c79d
 8009814:	0802c6ca 	.word	0x0802c6ca
 8009818:	0802c799 	.word	0x0802c799
 800981c:	0802c6bb 	.word	0x0802c6bb
 8009820:	0802c79a 	.word	0x0802c79a
 8009824:	0802c6b1 	.word	0x0802c6b1
 8009828:	0802c79b 	.word	0x0802c79b
 800982c:	0802c6a2 	.word	0x0802c6a2
 8009830:	0802c79c 	.word	0x0802c79c
 8009834:	0802c693 	.word	0x0802c693
 8009838:	0802c789 	.word	0x0802c789
 800983c:	0802c7aa 	.word	0x0802c7aa
 8009840:	0802c7ab 	.word	0x0802c7ab
 8009844:	0802c7ac 	.word	0x0802c7ac
 8009848:	0802c7ad 	.word	0x0802c7ad
 800984c:	0802c7ae 	.word	0x0802c7ae
 8009850:	0802c77d 	.word	0x0802c77d
 8009854:	0802c690 	.word	0x0802c690
 8009858:	0802c680 	.word	0x0802c680
 800985c:	0802c670 	.word	0x0802c670
 8009860:	0802c7a0 	.word	0x0802c7a0
 8009864:	2400e524 	.word	0x2400e524
 8009868:	0802c7a1 	.word	0x0802c7a1
 800986c:	0802c7b3 	.word	0x0802c7b3
 8009870:	0802c7af 	.word	0x0802c7af
 8009874:	0802c7a3 	.word	0x0802c7a3
 8009878:	0802c7a4 	.word	0x0802c7a4
 800987c:	0802c7a5 	.word	0x0802c7a5
 8009880:	0802c7a6 	.word	0x0802c7a6
 8009884:	0802c7a7 	.word	0x0802c7a7
 8009888:	0802c7a8 	.word	0x0802c7a8
 800988c:	0802c7a2 	.word	0x0802c7a2

08009890 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8009890:	b160      	cbz	r0, 80098ac <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009892:	684b      	ldr	r3, [r1, #4]
 8009894:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009896:	688b      	ldr	r3, [r1, #8]
 8009898:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800989a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800989c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800989e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80098a0:	4b04      	ldr	r3, [pc, #16]	@ (80098b4 <OTM8009A_RegisterBusIO+0x24>)
 80098a2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80098a4:	4b04      	ldr	r3, [pc, #16]	@ (80098b8 <OTM8009A_RegisterBusIO+0x28>)
 80098a6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80098a8:	2000      	movs	r0, #0
 80098aa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	0800913b 	.word	0x0800913b
 80098b8:	08009149 	.word	0x08009149

080098bc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80098bc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80098be:	6804      	ldr	r4, [r0, #0]
 80098c0:	6880      	ldr	r0, [r0, #8]
 80098c2:	46a4      	mov	ip, r4
}
 80098c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80098c8:	4760      	bx	ip
	...

080098cc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80098cc:	4a10      	ldr	r2, [pc, #64]	@ (8009910 <BSP_I2C4_DeInit+0x44>)
{
 80098ce:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80098d6:	b10b      	cbz	r3, 80098dc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80098d8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80098da:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80098dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80098e0:	480c      	ldr	r0, [pc, #48]	@ (8009914 <BSP_I2C4_DeInit+0x48>)
 80098e2:	f001 fe3d 	bl	800b560 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80098e6:	480b      	ldr	r0, [pc, #44]	@ (8009914 <BSP_I2C4_DeInit+0x48>)
 80098e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80098ec:	f001 fe38 	bl	800b560 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80098f0:	4a09      	ldr	r2, [pc, #36]	@ (8009918 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80098f2:	480a      	ldr	r0, [pc, #40]	@ (800991c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80098f4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80098f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009900:	f002 f87e 	bl	800ba00 <HAL_I2C_DeInit>
 8009904:	2800      	cmp	r0, #0
 8009906:	d0e7      	beq.n	80098d8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8009908:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800990c:	e7e5      	b.n	80098da <BSP_I2C4_DeInit+0xe>
 800990e:	bf00      	nop
 8009910:	2400ef88 	.word	0x2400ef88
 8009914:	58020c00 	.word	0x58020c00
 8009918:	58024400 	.word	0x58024400
 800991c:	2400e530 	.word	0x2400e530

08009920 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009920:	2300      	movs	r3, #0
 8009922:	2201      	movs	r2, #1
{
 8009924:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8009926:	6041      	str	r1, [r0, #4]
{
 8009928:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800992a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800992c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8009930:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009934:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009938:	f002 f80c 	bl	800b954 <HAL_I2C_Init>
 800993c:	4601      	mov	r1, r0
 800993e:	b108      	cbz	r0, 8009944 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8009940:	2001      	movs	r0, #1
}
 8009942:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009944:	4620      	mov	r0, r4
 8009946:	f002 fa32 	bl	800bdae <HAL_I2CEx_ConfigAnalogFilter>
 800994a:	4601      	mov	r1, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	d1f7      	bne.n	8009940 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009950:	4620      	mov	r0, r4
 8009952:	f002 fa52 	bl	800bdfa <HAL_I2CEx_ConfigDigitalFilter>
 8009956:	3800      	subs	r0, #0
 8009958:	bf18      	it	ne
 800995a:	2001      	movne	r0, #1
 800995c:	e7f1      	b.n	8009942 <MX_I2C4_Init+0x22>
	...

08009960 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8009960:	4ba1      	ldr	r3, [pc, #644]	@ (8009be8 <BSP_I2C4_Init+0x288>)
 8009962:	48a2      	ldr	r0, [pc, #648]	@ (8009bec <BSP_I2C4_Init+0x28c>)
{
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8009968:	6003      	str	r3, [r0, #0]
{
 800996a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800996c:	4ba0      	ldr	r3, [pc, #640]	@ (8009bf0 <BSP_I2C4_Init+0x290>)
 800996e:	681c      	ldr	r4, [r3, #0]
 8009970:	b11c      	cbz	r4, 800997a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8009972:	2000      	movs	r0, #0
}
 8009974:	b013      	add	sp, #76	@ 0x4c
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800997a:	2201      	movs	r2, #1
 800997c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800997e:	f002 fa11 	bl	800bda4 <HAL_I2C_GetState>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1f5      	bne.n	8009972 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009986:	4d9b      	ldr	r5, [pc, #620]	@ (8009bf4 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009988:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800998c:	2702      	movs	r7, #2
 800998e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009990:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009994:	a90d      	add	r1, sp, #52	@ 0x34
 8009996:	4898      	ldr	r0, [pc, #608]	@ (8009bf8 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009998:	f043 0308 	orr.w	r3, r3, #8
 800999c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80099a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80099ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80099b0:	f043 0308 	orr.w	r3, r3, #8
 80099b4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80099b8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80099bc:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80099c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80099ca:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80099ce:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80099d2:	f001 fcdd 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80099d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80099da:	a90d      	add	r1, sp, #52	@ 0x34
 80099dc:	4886      	ldr	r0, [pc, #536]	@ (8009bf8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80099de:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80099e0:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80099e4:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80099e8:	f001 fcd2 	bl	800b390 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80099ec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80099f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80099f8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80099fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a00:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8009a04:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8009a10:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a18:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009a1c:	f004 fcd8 	bl	800e3d0 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d06f      	beq.n	8009b04 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009a24:	4b75      	ldr	r3, [pc, #468]	@ (8009bfc <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8009a26:	4622      	mov	r2, r4
 8009a28:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009a2a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009a2e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a32:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8009c04 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009a36:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009a3a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009a3e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8009a42:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009a44:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009a48:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8009a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8009a50:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8009a54:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009a56:	4b6a      	ldr	r3, [pc, #424]	@ (8009c00 <BSP_I2C4_Init+0x2a0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
{
 8009a5a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009a5c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8009a60:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8009a64:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009a68:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8009a6c:	d35d      	bcc.n	8009b2a <BSP_I2C4_Init+0x1ca>
 8009a6e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009a70:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009a72:	9d00      	ldr	r5, [sp, #0]
 8009a74:	42bd      	cmp	r5, r7
 8009a76:	d852      	bhi.n	8009b1e <BSP_I2C4_Init+0x1be>
 8009a78:	42be      	cmp	r6, r7
 8009a7a:	d350      	bcc.n	8009b1e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8009a7c:	4591      	cmp	r9, r2
 8009a7e:	d04e      	beq.n	8009b1e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a80:	2514      	movs	r5, #20
 8009a82:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8009a86:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009a88:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a8a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009a8e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a90:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009a94:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009a98:	d93e      	bls.n	8009b18 <BSP_I2C4_Init+0x1b8>
 8009a9a:	4a59      	ldr	r2, [pc, #356]	@ (8009c00 <BSP_I2C4_Init+0x2a0>)
 8009a9c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009a9e:	4b58      	ldr	r3, [pc, #352]	@ (8009c00 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009aa0:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8009aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa8:	4956      	ldr	r1, [pc, #344]	@ (8009c04 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009aaa:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009aac:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009aae:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009ab0:	0043      	lsls	r3, r0, #1
 8009ab2:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8009ab6:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8009aba:	f10b 0b01 	add.w	fp, fp, #1
 8009abe:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8009ac2:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8009ac6:	9508      	str	r5, [sp, #32]
 8009ac8:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009aca:	9b05      	ldr	r3, [sp, #20]
 8009acc:	429f      	cmp	r7, r3
 8009ace:	d138      	bne.n	8009b42 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ad4:	d816      	bhi.n	8009b04 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009ad6:	2114      	movs	r1, #20
 8009ad8:	9a01      	ldr	r2, [sp, #4]
 8009ada:	4b4a      	ldr	r3, [pc, #296]	@ (8009c04 <BSP_I2C4_Init+0x2a4>)
 8009adc:	434a      	muls	r2, r1
 8009ade:	1899      	adds	r1, r3, r2
 8009ae0:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009ae2:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009ae4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009ae8:	684b      	ldr	r3, [r1, #4]
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009af0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009af2:	688b      	ldr	r3, [r1, #8]
 8009af4:	041b      	lsls	r3, r3, #16
 8009af6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009afa:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009afc:	68cb      	ldr	r3, [r1, #12]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009b02:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009b04:	4621      	mov	r1, r4
 8009b06:	4839      	ldr	r0, [pc, #228]	@ (8009bec <BSP_I2C4_Init+0x28c>)
 8009b08:	f7ff ff0a 	bl	8009920 <MX_I2C4_Init>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f43f af30 	beq.w	8009972 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8009b12:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009b16:	e72d      	b.n	8009974 <BSP_I2C4_Init+0x14>
 8009b18:	4691      	mov	r9, r2
 8009b1a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009b1e:	f10e 0e01 	add.w	lr, lr, #1
 8009b22:	440f      	add	r7, r1
 8009b24:	f1be 0f10 	cmp.w	lr, #16
 8009b28:	d1a3      	bne.n	8009a72 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009b2a:	f1bc 0f10 	cmp.w	ip, #16
 8009b2e:	4488      	add	r8, r1
 8009b30:	d196      	bne.n	8009a60 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009b32:	3201      	adds	r2, #1
 8009b34:	4401      	add	r1, r0
 8009b36:	2a10      	cmp	r2, #16
 8009b38:	d18f      	bne.n	8009a5a <BSP_I2C4_Init+0xfa>
 8009b3a:	f1ba 0f00 	cmp.w	sl, #0
 8009b3e:	d1ac      	bne.n	8009a9a <BSP_I2C4_Init+0x13a>
 8009b40:	e7ad      	b.n	8009a9e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009b42:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009b44:	f04f 0c00 	mov.w	ip, #0
 8009b48:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009b4a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009b4e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009b50:	441d      	add	r5, r3
 8009b52:	441e      	add	r6, r3
 8009b54:	9503      	str	r5, [sp, #12]
 8009b56:	ebab 0503 	sub.w	r5, fp, r3
 8009b5a:	9607      	str	r6, [sp, #28]
 8009b5c:	006d      	lsls	r5, r5, #1
 8009b5e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009b60:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009b62:	f240 5214 	movw	r2, #1300	@ 0x514
 8009b66:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009b6a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009b6e:	4295      	cmp	r5, r2
 8009b70:	d92f      	bls.n	8009bd2 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009b72:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009b76:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8009b7a:	d22a      	bcs.n	8009bd2 <BSP_I2C4_Init+0x272>
 8009b7c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009b7e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009b82:	f8dd 9000 	ldr.w	r9, [sp]
 8009b86:	442e      	add	r6, r5
 8009b88:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009b8c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8009b90:	f240 4212 	movw	r2, #1042	@ 0x412
 8009b94:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009b98:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009b9c:	4592      	cmp	sl, r2
 8009b9e:	d811      	bhi.n	8009bc4 <BSP_I2C4_Init+0x264>
 8009ba0:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8009ba4:	d30e      	bcc.n	8009bc4 <BSP_I2C4_Init+0x264>
 8009ba6:	4580      	cmp	r8, r0
 8009ba8:	d90c      	bls.n	8009bc4 <BSP_I2C4_Init+0x264>
              error = -error;
 8009baa:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8009bae:	bf28      	it	cs
 8009bb0:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8009bb2:	9a02      	ldr	r2, [sp, #8]
 8009bb4:	4592      	cmp	sl, r2
 8009bb6:	d205      	bcs.n	8009bc4 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8009bbc:	9a06      	ldr	r2, [sp, #24]
 8009bbe:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8009bc2:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009bc4:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8009bc8:	4498      	add	r8, r3
 8009bca:	441e      	add	r6, r3
 8009bcc:	eba9 0903 	sub.w	r9, r9, r3
 8009bd0:	d1dc      	bne.n	8009b8c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009bd2:	9a00      	ldr	r2, [sp, #0]
 8009bd4:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8009bd8:	441d      	add	r5, r3
 8009bda:	eba2 0203 	sub.w	r2, r2, r3
 8009bde:	9200      	str	r2, [sp, #0]
 8009be0:	d1bf      	bne.n	8009b62 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009be2:	3701      	adds	r7, #1
 8009be4:	3114      	adds	r1, #20
 8009be6:	e770      	b.n	8009aca <BSP_I2C4_Init+0x16a>
 8009be8:	58001c00 	.word	0x58001c00
 8009bec:	2400e530 	.word	0x2400e530
 8009bf0:	2400ef88 	.word	0x2400ef88
 8009bf4:	58024400 	.word	0x58024400
 8009bf8:	58020c00 	.word	0x58020c00
 8009bfc:	3b9aca00 	.word	0x3b9aca00
 8009c00:	2400e584 	.word	0x2400e584
 8009c04:	2400e588 	.word	0x2400e588

08009c08 <BSP_I2C4_WriteReg>:
{
 8009c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009c0a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8009c0e:	9200      	str	r2, [sp, #0]
 8009c10:	460a      	mov	r2, r1
 8009c12:	4601      	mov	r1, r0
 8009c14:	4808      	ldr	r0, [pc, #32]	@ (8009c38 <BSP_I2C4_WriteReg+0x30>)
 8009c16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f001 ff0a 	bl	800ba34 <HAL_I2C_Mem_Write>
 8009c20:	b140      	cbz	r0, 8009c34 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009c22:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <BSP_I2C4_WriteReg+0x30>)
 8009c24:	f002 f8c1 	bl	800bdaa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009c28:	2804      	cmp	r0, #4
 8009c2a:	bf14      	ite	ne
 8009c2c:	f06f 0003 	mvnne.w	r0, #3
 8009c30:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8009c34:	b004      	add	sp, #16
 8009c36:	bd10      	pop	{r4, pc}
 8009c38:	2400e530 	.word	0x2400e530

08009c3c <BSP_I2C4_ReadReg>:
{
 8009c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009c3e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8009c42:	9200      	str	r2, [sp, #0]
 8009c44:	460a      	mov	r2, r1
 8009c46:	4601      	mov	r1, r0
 8009c48:	4808      	ldr	r0, [pc, #32]	@ (8009c6c <BSP_I2C4_ReadReg+0x30>)
 8009c4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f001 ffca 	bl	800bbe8 <HAL_I2C_Mem_Read>
 8009c54:	b140      	cbz	r0, 8009c68 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009c56:	4805      	ldr	r0, [pc, #20]	@ (8009c6c <BSP_I2C4_ReadReg+0x30>)
 8009c58:	f002 f8a7 	bl	800bdaa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009c5c:	2804      	cmp	r0, #4
 8009c5e:	bf14      	ite	ne
 8009c60:	f06f 0003 	mvnne.w	r0, #3
 8009c64:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8009c68:	b004      	add	sp, #16
 8009c6a:	bd10      	pop	{r4, pc}
 8009c6c:	2400e530 	.word	0x2400e530

08009c70 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8009c70:	f000 bd08 	b.w	800a684 <HAL_GetTick>

08009c74 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8009c74:	4a09      	ldr	r2, [pc, #36]	@ (8009c9c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009c76:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8009c7a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009c7c:	684a      	ldr	r2, [r1, #4]
 8009c7e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8009c80:	2201      	movs	r2, #1
 8009c82:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8009c84:	688a      	ldr	r2, [r1, #8]
 8009c86:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8009c88:	680a      	ldr	r2, [r1, #0]
 8009c8a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8009c92:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8009c94:	68ca      	ldr	r2, [r1, #12]
 8009c96:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8009c98:	f003 bcc4 	b.w	800d624 <HAL_QSPI_Init>
 8009c9c:	52005000 	.word	0x52005000

08009ca0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8009ca0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009ca2:	b988      	cbnz	r0, 8009cc8 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8009cd0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8009ca6:	480b      	ldr	r0, [pc, #44]	@ (8009cd4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009ca8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009caa:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009cac:	b94b      	cbnz	r3, 8009cc2 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009cae:	f7ff f9bc 	bl	800902a <MT25TL01G_EnableMemoryMappedModeSTR>
 8009cb2:	b110      	cbz	r0, 8009cba <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cb4:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8009cb8:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8009cba:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8009cbc:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8009cbe:	7023      	strb	r3, [r4, #0]
 8009cc0:	e7fa      	b.n	8009cb8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009cc2:	f7ff f968 	bl	8008f96 <MT25TL01G_EnableMemoryMappedModeDTR>
 8009cc6:	e7f4      	b.n	8009cb2 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8009cc8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009ccc:	e7f4      	b.n	8009cb8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8009cce:	bf00      	nop
 8009cd0:	2400ef8c 	.word	0x2400ef8c
 8009cd4:	240003cc 	.word	0x240003cc

08009cd8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009cde:	bb30      	cbnz	r0, 8009d2e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8009ce0:	4d17      	ldr	r5, [pc, #92]	@ (8009d40 <BSP_QSPI_ConfigFlash+0x68>)
 8009ce2:	782b      	ldrb	r3, [r5, #0]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d025      	beq.n	8009d34 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009ce8:	fab2 f382 	clz	r3, r2
 8009cec:	4e15      	ldr	r6, [pc, #84]	@ (8009d44 <BSP_QSPI_ConfigFlash+0x6c>)
 8009cee:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8009cf0:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8009cf6:	f003 fc95 	bl	800d624 <HAL_QSPI_Init>
 8009cfa:	b9f0      	cbnz	r0, 8009d3a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8009cfc:	786b      	ldrb	r3, [r5, #1]
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d10f      	bne.n	8009d22 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8009d02:	2c03      	cmp	r4, #3
 8009d04:	d105      	bne.n	8009d12 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8009d06:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8009d08:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8009d0a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8009d0c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8009d0e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff f923 	bl	8008f5e <MT25TL01G_ExitQPIMode>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0f4      	beq.n	8009d06 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d1c:	f06f 0004 	mvn.w	r0, #4
 8009d20:	e7f6      	b.n	8009d10 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8009d22:	2c03      	cmp	r4, #3
 8009d24:	d1ef      	bne.n	8009d06 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff f8fd 	bl	8008f26 <MT25TL01G_EnterQPIMode>
 8009d2c:	e7f4      	b.n	8009d18 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8009d2e:	f06f 0001 	mvn.w	r0, #1
 8009d32:	e7ed      	b.n	8009d10 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8009d34:	f06f 0019 	mvn.w	r0, #25
 8009d38:	e7ea      	b.n	8009d10 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009d3a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009d3e:	e7e7      	b.n	8009d10 <BSP_QSPI_ConfigFlash+0x38>
 8009d40:	2400ef8c 	.word	0x2400ef8c
 8009d44:	240003cc 	.word	0x240003cc

08009d48 <BSP_QSPI_Init>:
{
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f040 81ac 	bne.w	800a0ae <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8009d56:	4d03      	ldr	r5, [pc, #12]	@ (8009d64 <BSP_QSPI_Init+0x1c>)
 8009d58:	782f      	ldrb	r7, [r5, #0]
 8009d5a:	b12f      	cbz	r7, 8009d68 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8009d5c:	2000      	movs	r0, #0
}
 8009d5e:	b024      	add	sp, #144	@ 0x90
 8009d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d64:	2400ef8c 	.word	0x2400ef8c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8009d68:	4bc3      	ldr	r3, [pc, #780]	@ (800a078 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009d6a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009d6e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009d70:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8009d72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009d76:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009d7a:	48c0      	ldr	r0, [pc, #768]	@ (800a07c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009d7c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8009d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d84:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8009d88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009d8c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8009d90:	9201      	str	r2, [sp, #4]
 8009d92:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8009d94:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d9a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8009d9c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009d9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009da2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8009da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009da8:	f042 0202 	orr.w	r2, r2, #2
 8009dac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009db4:	f002 0202 	and.w	r2, r2, #2
 8009db8:	9202      	str	r2, [sp, #8]
 8009dba:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8009dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009dcc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009dd0:	9203      	str	r2, [sp, #12]
 8009dd2:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8009dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009dd8:	f042 0208 	orr.w	r2, r2, #8
 8009ddc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009de4:	f002 0208 	and.w	r2, r2, #8
 8009de8:	9204      	str	r2, [sp, #16]
 8009dea:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8009dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009df0:	f042 0220 	orr.w	r2, r2, #32
 8009df4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009dfc:	f002 0220 	and.w	r2, r2, #32
 8009e00:	9205      	str	r2, [sp, #20]
 8009e02:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8009e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e08:	f042 0220 	orr.w	r2, r2, #32
 8009e0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e14:	f002 0220 	and.w	r2, r2, #32
 8009e18:	9206      	str	r2, [sp, #24]
 8009e1a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8009e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e20:	f042 0220 	orr.w	r2, r2, #32
 8009e24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e2c:	f002 0220 	and.w	r2, r2, #32
 8009e30:	9207      	str	r2, [sp, #28]
 8009e32:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8009e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e44:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009e48:	9208      	str	r2, [sp, #32]
 8009e4a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8009e4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e5c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8009e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e74:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009e78:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8009e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e8c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009e90:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8009e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009eac:	2302      	movs	r3, #2
 8009eae:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eb2:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009eb4:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009eb6:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009eba:	f001 fa69 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009ebe:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8009ec0:	a916      	add	r1, sp, #88	@ 0x58
 8009ec2:	486f      	ldr	r0, [pc, #444]	@ (800a080 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009ec4:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009ec6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009eca:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8009ece:	f001 fa5f 	bl	800b390 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8009ed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009ed6:	a916      	add	r1, sp, #88	@ 0x58
 8009ed8:	486a      	ldr	r0, [pc, #424]	@ (800a084 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8009eda:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009edc:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009ede:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009ee0:	f001 fa56 	bl	800b390 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009ee4:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8009ee6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009eea:	4867      	ldr	r0, [pc, #412]	@ (800a088 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8009eec:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009ef0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009ef2:	f001 fa4d 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8009ef6:	a916      	add	r1, sp, #88	@ 0x58
 8009ef8:	4864      	ldr	r0, [pc, #400]	@ (800a08c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8009efa:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009efe:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8009f02:	f001 fa45 	bl	800b390 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8009f06:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8009f08:	a916      	add	r1, sp, #88	@ 0x58
 8009f0a:	485f      	ldr	r0, [pc, #380]	@ (800a088 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8009f0c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009f0e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8009f10:	f001 fa3e 	bl	800b390 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8009f14:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8009f16:	a916      	add	r1, sp, #88	@ 0x58
 8009f18:	485c      	ldr	r0, [pc, #368]	@ (800a08c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8009f1a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009f1c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8009f1e:	f001 fa37 	bl	800b390 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8009f22:	a916      	add	r1, sp, #88	@ 0x58
 8009f24:	4856      	ldr	r0, [pc, #344]	@ (800a080 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8009f26:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8009f2a:	f001 fa31 	bl	800b390 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8009f2e:	a916      	add	r1, sp, #88	@ 0x58
 8009f30:	4856      	ldr	r0, [pc, #344]	@ (800a08c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8009f32:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8009f36:	f001 fa2b 	bl	800b390 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8009f3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8009f3e:	a916      	add	r1, sp, #88	@ 0x58
 8009f40:	484f      	ldr	r0, [pc, #316]	@ (800a080 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8009f42:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8009f44:	f001 fa24 	bl	800b390 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8009f48:	463a      	mov	r2, r7
 8009f4a:	210f      	movs	r1, #15
 8009f4c:	205c      	movs	r0, #92	@ 0x5c
 8009f4e:	f000 fbc9 	bl	800a6e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8009f52:	205c      	movs	r0, #92	@ 0x5c
 8009f54:	f000 fbf8 	bl	800a748 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8009f58:	a811      	add	r0, sp, #68	@ 0x44
 8009f5a:	f7fe ff38 	bl	8008dce <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8009f5e:	7863      	ldrb	r3, [r4, #1]
 8009f60:	4a4b      	ldr	r2, [pc, #300]	@ (800a090 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8009f62:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8009f66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f6a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f6e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009f72:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8009f76:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009f7a:	a90d      	add	r1, sp, #52	@ 0x34
 8009f7c:	4845      	ldr	r0, [pc, #276]	@ (800a094 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009f7e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009f80:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009f82:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009f84:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009f86:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009f88:	f7ff fe74 	bl	8009c74 <MX_QSPI_Init>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f040 8091 	bne.w	800a0b4 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8009f92:	2103      	movs	r1, #3
 8009f94:	483f      	ldr	r0, [pc, #252]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009f96:	f7ff f88e 	bl	80090b6 <MT25TL01G_ResetEnable>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	f040 8084 	bne.w	800a0a8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8009fa0:	2103      	movs	r1, #3
 8009fa2:	483c      	ldr	r0, [pc, #240]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009fa4:	f7ff f8a8 	bl	80090f8 <MT25TL01G_ResetMemory>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d17d      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009fac:	7869      	ldrb	r1, [r5, #1]
 8009fae:	4839      	ldr	r0, [pc, #228]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009fb0:	f7fe ff1e 	bl	8008df0 <MT25TL01G_AutoPollingMemReady>
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d176      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009fba:	4836      	ldr	r0, [pc, #216]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009fbc:	f7ff f87b 	bl	80090b6 <MT25TL01G_ResetEnable>
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d170      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009fc6:	4833      	ldr	r0, [pc, #204]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009fc8:	f7ff f896 	bl	80090f8 <MT25TL01G_ResetMemory>
 8009fcc:	4601      	mov	r1, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d16a      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8009fd2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8009fd4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009fd6:	482f      	ldr	r0, [pc, #188]	@ (800a094 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8009fd8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009fda:	f7fe ff09 	bl	8008df0 <MT25TL01G_AutoPollingMemReady>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d162      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009fe2:	7869      	ldrb	r1, [r5, #1]
 8009fe4:	482b      	ldr	r0, [pc, #172]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 8009fe6:	f7fe ff72 	bl	8008ece <MT25TL01G_Enter4BytesAddressMode>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d15c      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009fee:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8009ff2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8009ff6:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009ffc:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8009ffe:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a000:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a002:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a004:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a008:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800a00a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a00c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a010:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a014:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a018:	481e      	ldr	r0, [pc, #120]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 800a01a:	f003 fb4f 	bl	800d6bc <HAL_QSPI_Command>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d142      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a022:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a026:	f10d 0102 	add.w	r1, sp, #2
 800a02a:	481a      	ldr	r0, [pc, #104]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 800a02c:	f003 fbe7 	bl	800d7fe <HAL_QSPI_Receive>
 800a030:	2800      	cmp	r0, #0
 800a032:	d139      	bne.n	800a0a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a034:	7869      	ldrb	r1, [r5, #1]
 800a036:	4817      	ldr	r0, [pc, #92]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 800a038:	f7fe ff05 	bl	8008e46 <MT25TL01G_WriteEnable>
 800a03c:	bba0      	cbnz	r0, 800a0a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a03e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a040:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a044:	a916      	add	r1, sp, #88	@ 0x58
 800a046:	4813      	ldr	r0, [pc, #76]	@ (800a094 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a048:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a04a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a04e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a052:	051b      	lsls	r3, r3, #20
 800a054:	0d1b      	lsrs	r3, r3, #20
 800a056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a062:	f003 fb2b 	bl	800d6bc <HAL_QSPI_Command>
 800a066:	b9f8      	cbnz	r0, 800a0a8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a06c:	f10d 0102 	add.w	r1, sp, #2
 800a070:	4808      	ldr	r0, [pc, #32]	@ (800a094 <BSP_QSPI_Init+0x34c>)
 800a072:	f003 fb68 	bl	800d746 <HAL_QSPI_Transmit>
 800a076:	e00f      	b.n	800a098 <BSP_QSPI_Init+0x350>
 800a078:	58024400 	.word	0x58024400
 800a07c:	58020400 	.word	0x58020400
 800a080:	58021800 	.word	0x58021800
 800a084:	58020c00 	.word	0x58020c00
 800a088:	58021c00 	.word	0x58021c00
 800a08c:	58021400 	.word	0x58021400
 800a090:	0802c7b8 	.word	0x0802c7b8
 800a094:	240003cc 	.word	0x240003cc
 800a098:	b930      	cbnz	r0, 800a0a8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a09a:	7862      	ldrb	r2, [r4, #1]
 800a09c:	7821      	ldrb	r1, [r4, #0]
 800a09e:	f7ff fe1b 	bl	8009cd8 <BSP_QSPI_ConfigFlash>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f43f ae5a 	beq.w	8009d5c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0a8:	f06f 0004 	mvn.w	r0, #4
 800a0ac:	e657      	b.n	8009d5e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800a0ae:	f06f 0001 	mvn.w	r0, #1
 800a0b2:	e654      	b.n	8009d5e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a0b4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a0b8:	e651      	b.n	8009d5e <BSP_QSPI_Init+0x16>
 800a0ba:	bf00      	nop

0800a0bc <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800a0bc:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800a0be:	4604      	mov	r4, r0
 800a0c0:	b970      	cbnz	r0, 800a0e0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800a0c2:	4b09      	ldr	r3, [pc, #36]	@ (800a0e8 <BSP_SDRAM_DeInit+0x2c>)
 800a0c4:	4809      	ldr	r0, [pc, #36]	@ (800a0ec <BSP_SDRAM_DeInit+0x30>)
 800a0c6:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800a0c8:	f004 ffe4 	bl	800f094 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800a0cc:	207a      	movs	r0, #122	@ 0x7a
 800a0ce:	f000 fb49 	bl	800a764 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800a0d2:	4807      	ldr	r0, [pc, #28]	@ (800a0f0 <BSP_SDRAM_DeInit+0x34>)
 800a0d4:	4b07      	ldr	r3, [pc, #28]	@ (800a0f4 <BSP_SDRAM_DeInit+0x38>)
 800a0d6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a0d8:	f003 f82a 	bl	800d130 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800a0dc:	4620      	mov	r0, r4
}
 800a0de:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a0e0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a0e4:	e7fb      	b.n	800a0de <BSP_SDRAM_DeInit+0x22>
 800a0e6:	bf00      	nop
 800a0e8:	52004140 	.word	0x52004140
 800a0ec:	2400f090 	.word	0x2400f090
 800a0f0:	2400ef98 	.word	0x2400ef98
 800a0f4:	52000040 	.word	0x52000040

0800a0f8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	4915      	ldr	r1, [pc, #84]	@ (800a150 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a0fc:	4b15      	ldr	r3, [pc, #84]	@ (800a154 <MX_SDRAM_Init+0x5c>)
{
 800a0fe:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a100:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a104:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a106:	2104      	movs	r1, #4
 800a108:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a10a:	2440      	movs	r4, #64	@ 0x40
{
 800a10c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a10e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a112:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800a116:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800a11a:	2200      	movs	r2, #0
 800a11c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800a120:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a124:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800a128:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a12a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a12c:	2207      	movs	r2, #7
 800a12e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800a130:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a134:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800a136:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a138:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800a13c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a140:	f004 ff80 	bl	800f044 <HAL_SDRAM_Init>
}
 800a144:	3800      	subs	r0, #0
 800a146:	bf18      	it	ne
 800a148:	2001      	movne	r0, #1
 800a14a:	b008      	add	sp, #32
 800a14c:	bd10      	pop	{r4, pc}
 800a14e:	bf00      	nop
 800a150:	52004140 	.word	0x52004140
 800a154:	2400f090 	.word	0x2400f090

0800a158 <BSP_SDRAM_Init>:
{
 800a158:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a15a:	4605      	mov	r5, r0
{
 800a15c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a15e:	2800      	cmp	r0, #0
 800a160:	f040 80dd 	bne.w	800a31e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800a164:	4b71      	ldr	r3, [pc, #452]	@ (800a32c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a166:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a168:	a909      	add	r1, sp, #36	@ 0x24
 800a16a:	4871      	ldr	r0, [pc, #452]	@ (800a330 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a16c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800a170:	4c70      	ldr	r4, [pc, #448]	@ (800a334 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a172:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a176:	4e70      	ldr	r6, [pc, #448]	@ (800a338 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a178:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800a17c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a180:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a184:	9201      	str	r2, [sp, #4]
 800a186:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800a188:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a18c:	f042 0201 	orr.w	r2, r2, #1
 800a190:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800a194:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a198:	f002 0201 	and.w	r2, r2, #1
 800a19c:	9202      	str	r2, [sp, #8]
 800a19e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1a4:	f042 0208 	orr.w	r2, r2, #8
 800a1a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a1ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1b0:	f002 0208 	and.w	r2, r2, #8
 800a1b4:	9203      	str	r2, [sp, #12]
 800a1b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a1b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1bc:	f042 0210 	orr.w	r2, r2, #16
 800a1c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a1c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1c8:	f002 0210 	and.w	r2, r2, #16
 800a1cc:	9204      	str	r2, [sp, #16]
 800a1ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a1d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1d4:	f042 0220 	orr.w	r2, r2, #32
 800a1d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a1dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1e0:	f002 0220 	and.w	r2, r2, #32
 800a1e4:	9205      	str	r2, [sp, #20]
 800a1e6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a1e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a1f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a1f8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a1fc:	9206      	str	r2, [sp, #24]
 800a1fe:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a200:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a204:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a208:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a20c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a210:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a214:	9207      	str	r2, [sp, #28]
 800a216:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a218:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a21c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a220:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a224:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a22a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22e:	9308      	str	r3, [sp, #32]
 800a230:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a232:	2301      	movs	r3, #1
 800a234:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a238:	230c      	movs	r3, #12
 800a23a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800a23e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a244:	f001 f8a4 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a248:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a24c:	a909      	add	r1, sp, #36	@ 0x24
 800a24e:	483b      	ldr	r0, [pc, #236]	@ (800a33c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a250:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a252:	f001 f89d 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a256:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a25a:	a909      	add	r1, sp, #36	@ 0x24
 800a25c:	4838      	ldr	r0, [pc, #224]	@ (800a340 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a25e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a260:	f001 f896 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a264:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a268:	a909      	add	r1, sp, #36	@ 0x24
 800a26a:	4836      	ldr	r0, [pc, #216]	@ (800a344 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a26c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a26e:	f001 f88f 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a272:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a276:	a909      	add	r1, sp, #36	@ 0x24
 800a278:	4833      	ldr	r0, [pc, #204]	@ (800a348 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a27a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a27c:	f001 f888 	bl	800b390 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a280:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a284:	a909      	add	r1, sp, #36	@ 0x24
 800a286:	4831      	ldr	r0, [pc, #196]	@ (800a34c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a288:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a28a:	f001 f881 	bl	800b390 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a28e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a292:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a296:	f240 2002 	movw	r0, #514	@ 0x202
 800a29a:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a29e:	6334      	str	r4, [r6, #48]	@ 0x30
 800a2a0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a2a2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a2a6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800a2aa:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800a2ac:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a2ae:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800a2b0:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800a2b2:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800a2b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a2ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a2be:	4b24      	ldr	r3, [pc, #144]	@ (800a350 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a2c0:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a2c2:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800a2c4:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800a2c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a2cc:	f002 ff30 	bl	800d130 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f002 febe 	bl	800d052 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	210f      	movs	r1, #15
 800a2da:	207a      	movs	r0, #122	@ 0x7a
 800a2dc:	f000 fa02 	bl	800a6e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800a2e0:	207a      	movs	r0, #122	@ 0x7a
 800a2e2:	f000 fa31 	bl	800a748 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7ff ff06 	bl	800a0f8 <MX_SDRAM_Init>
 800a2ec:	b9d0      	cbnz	r0, 800a324 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800a2ee:	4919      	ldr	r1, [pc, #100]	@ (800a354 <BSP_SDRAM_Init+0x1fc>)
 800a2f0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800a2f2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800a2f6:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800a2fa:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800a2fc:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800a300:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800a302:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a306:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a30a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a30c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a30e:	f7fe fd31 	bl	8008d74 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800a312:	2800      	cmp	r0, #0
 800a314:	bf18      	it	ne
 800a316:	f06f 0004 	mvnne.w	r0, #4
}
 800a31a:	b00f      	add	sp, #60	@ 0x3c
 800a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a31e:	f06f 0001 	mvn.w	r0, #1
 800a322:	e7fa      	b.n	800a31a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800a328:	e7f7      	b.n	800a31a <BSP_SDRAM_Init+0x1c2>
 800a32a:	bf00      	nop
 800a32c:	58024400 	.word	0x58024400
 800a330:	58020c00 	.word	0x58020c00
 800a334:	2400f004 	.word	0x2400f004
 800a338:	2400f090 	.word	0x2400f090
 800a33c:	58021000 	.word	0x58021000
 800a340:	58021400 	.word	0x58021400
 800a344:	58021800 	.word	0x58021800
 800a348:	58021c00 	.word	0x58021c00
 800a34c:	58022000 	.word	0x58022000
 800a350:	52000040 	.word	0x52000040
 800a354:	2400f070 	.word	0x2400f070

0800a358 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a360:	4606      	mov	r6, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d15c      	bne.n	800a420 <BSP_TS_Init+0xc8>
 800a366:	680b      	ldr	r3, [r1, #0]
 800a368:	1e5a      	subs	r2, r3, #1
 800a36a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800a36e:	d257      	bcs.n	800a420 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a370:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a372:	1e51      	subs	r1, r2, #1
 800a374:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a378:	d252      	bcs.n	800a420 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a37a:	4293      	cmp	r3, r2
 800a37c:	bf28      	it	cs
 800a37e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a380:	68e2      	ldr	r2, [r4, #12]
 800a382:	429a      	cmp	r2, r3
 800a384:	d84c      	bhi.n	800a420 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a386:	2370      	movs	r3, #112	@ 0x70
 800a388:	2254      	movs	r2, #84	@ 0x54
 800a38a:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a38e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a464 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a392:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800a396:	4b2e      	ldr	r3, [pc, #184]	@ (800a450 <BSP_TS_Init+0xf8>)
 800a398:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a39a:	4b2e      	ldr	r3, [pc, #184]	@ (800a454 <BSP_TS_Init+0xfc>)
 800a39c:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a39e:	4b2e      	ldr	r3, [pc, #184]	@ (800a458 <BSP_TS_Init+0x100>)
 800a3a0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a3a2:	4b2e      	ldr	r3, [pc, #184]	@ (800a45c <BSP_TS_Init+0x104>)
 800a3a4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800a3a6:	4b2e      	ldr	r3, [pc, #184]	@ (800a460 <BSP_TS_Init+0x108>)
 800a3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a3aa:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a3ae:	a906      	add	r1, sp, #24
 800a3b0:	482c      	ldr	r0, [pc, #176]	@ (800a464 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a3b2:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a3b6:	f7fe fbe3 	bl	8008b80 <FT6X06_RegisterBusIO>
 800a3ba:	b9c0      	cbnz	r0, 800a3ee <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800a3bc:	4669      	mov	r1, sp
 800a3be:	4829      	ldr	r0, [pc, #164]	@ (800a464 <BSP_TS_Init+0x10c>)
 800a3c0:	f7fe fb28 	bl	8008a14 <FT6X06_ReadID>
 800a3c4:	b998      	cbnz	r0, 800a3ee <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800a3c6:	9b00      	ldr	r3, [sp, #0]
 800a3c8:	2b11      	cmp	r3, #17
 800a3ca:	d110      	bne.n	800a3ee <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800a3cc:	a903      	add	r1, sp, #12
 800a3ce:	4825      	ldr	r0, [pc, #148]	@ (800a464 <BSP_TS_Init+0x10c>)
 800a3d0:	f7fe fad4 	bl	800897c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a3d4:	4f24      	ldr	r7, [pc, #144]	@ (800a468 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a3d6:	4b25      	ldr	r3, [pc, #148]	@ (800a46c <BSP_TS_Init+0x114>)
 800a3d8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800a474 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a3dc:	4821      	ldr	r0, [pc, #132]	@ (800a464 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a3de:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a3e2:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4798      	blx	r3
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b1d8      	cbz	r0, 800a426 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800a3ee:	b116      	cbz	r6, 800a3f6 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 800a3f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3f4:	e010      	b.n	800a418 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 800a3f6:	2601      	movs	r6, #1
 800a3f8:	e7d7      	b.n	800a3aa <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a3fa:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a3fc:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a3fe:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a400:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a402:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a404:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a40a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a40c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a40e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a410:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a412:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a414:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800a418:	4628      	mov	r0, r5
 800a41a:	b00c      	add	sp, #48	@ 0x30
 800a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a420:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800a424:	e7f8      	b.n	800a418 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a426:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a428:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a42a:	4e11      	ldr	r6, [pc, #68]	@ (800a470 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a42c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a42e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800a438:	68e3      	ldr	r3, [r4, #12]
 800a43a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a43c:	f8d8 3000 	ldr.w	r3, [r8]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	4798      	blx	r3
 800a444:	2800      	cmp	r0, #0
 800a446:	dad8      	bge.n	800a3fa <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a448:	f06f 0504 	mvn.w	r5, #4
 800a44c:	e7e4      	b.n	800a418 <BSP_TS_Init+0xc0>
 800a44e:	bf00      	nop
 800a450:	08009961 	.word	0x08009961
 800a454:	080098cd 	.word	0x080098cd
 800a458:	08009c3d 	.word	0x08009c3d
 800a45c:	08009c09 	.word	0x08009c09
 800a460:	08009c71 	.word	0x08009c71
 800a464:	2400f0c4 	.word	0x2400f0c4
 800a468:	2400f0ec 	.word	0x2400f0ec
 800a46c:	24000038 	.word	0x24000038
 800a470:	2400f0f0 	.word	0x2400f0f0
 800a474:	2400f118 	.word	0x2400f118

0800a478 <BSP_TS_GetState>:
{
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	460c      	mov	r4, r1
 800a47c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800a47e:	2800      	cmp	r0, #0
 800a480:	d14d      	bne.n	800a51e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a482:	4b28      	ldr	r3, [pc, #160]	@ (800a524 <BSP_TS_GetState+0xac>)
 800a484:	a901      	add	r1, sp, #4
 800a486:	4a28      	ldr	r2, [pc, #160]	@ (800a528 <BSP_TS_GetState+0xb0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6810      	ldr	r0, [r2, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	4798      	blx	r3
 800a490:	2800      	cmp	r0, #0
 800a492:	db41      	blt.n	800a518 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a494:	4925      	ldr	r1, [pc, #148]	@ (800a52c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800a496:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a498:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a49a:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	d037      	beq.n	800a510 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a4a0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a4a2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a4a6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800a4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a4ae:	bf1e      	ittt	ne
 800a4b0:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 800a4b2:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 800a4b4:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a4b6:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a4ba:	bf1c      	itt	ne
 800a4bc:	f10e 3cff 	addne.w	ip, lr, #4294967295
 800a4c0:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a4c4:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a4c8:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a4ca:	bf44      	itt	mi
 800a4cc:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 800a4d0:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a4d2:	680f      	ldr	r7, [r1, #0]
 800a4d4:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a4d6:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800a4d8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a4da:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a4dc:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a4de:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a4e2:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a4e6:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a4e8:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a4ea:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a4ec:	bf8c      	ite	hi
 800a4ee:	eba2 0c05 	subhi.w	ip, r2, r5
 800a4f2:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	bf8c      	ite	hi
 800a4fa:	1a1e      	subhi	r6, r3, r0
 800a4fc:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a4fe:	4567      	cmp	r7, ip
 800a500:	d301      	bcc.n	800a506 <BSP_TS_GetState+0x8e>
 800a502:	42b7      	cmp	r7, r6
 800a504:	d205      	bcs.n	800a512 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a506:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a508:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800a50a:	2000      	movs	r0, #0
}
 800a50c:	b005      	add	sp, #20
 800a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 800a510:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a512:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800a516:	e7f8      	b.n	800a50a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a518:	f06f 0004 	mvn.w	r0, #4
 800a51c:	e7f6      	b.n	800a50c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800a51e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a522:	e7f3      	b.n	800a50c <BSP_TS_GetState+0x94>
 800a524:	2400f118 	.word	0x2400f118
 800a528:	2400f0ec 	.word	0x2400f0ec
 800a52c:	2400f0f0 	.word	0x2400f0f0

0800a530 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a530:	4b2d      	ldr	r3, [pc, #180]	@ (800a5e8 <SystemInit+0xb8>)
 800a532:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a536:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	f042 0210 	orr.w	r2, r2, #16
 800a544:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a546:	4a29      	ldr	r2, [pc, #164]	@ (800a5ec <SystemInit+0xbc>)
 800a548:	6813      	ldr	r3, [r2, #0]
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	2b06      	cmp	r3, #6
 800a550:	d805      	bhi.n	800a55e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	f023 030f 	bic.w	r3, r3, #15
 800a558:	f043 0307 	orr.w	r3, r3, #7
 800a55c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a55e:	4b24      	ldr	r3, [pc, #144]	@ (800a5f0 <SystemInit+0xc0>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a568:	2200      	movs	r2, #0
 800a56a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a56c:	4a21      	ldr	r2, [pc, #132]	@ (800a5f4 <SystemInit+0xc4>)
 800a56e:	6819      	ldr	r1, [r3, #0]
 800a570:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a572:	491e      	ldr	r1, [pc, #120]	@ (800a5ec <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800a574:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a576:	680a      	ldr	r2, [r1, #0]
 800a578:	0712      	lsls	r2, r2, #28
 800a57a:	d505      	bpl.n	800a588 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a57c:	680a      	ldr	r2, [r1, #0]
 800a57e:	f022 020f 	bic.w	r2, r2, #15
 800a582:	f042 0207 	orr.w	r2, r2, #7
 800a586:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a588:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a58a:	491b      	ldr	r1, [pc, #108]	@ (800a5f8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800a58c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800a58e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800a590:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800a592:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a594:	4919      	ldr	r1, [pc, #100]	@ (800a5fc <SystemInit+0xcc>)
 800a596:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a598:	4919      	ldr	r1, [pc, #100]	@ (800a600 <SystemInit+0xd0>)
 800a59a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a59c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a59e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a5a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a5a2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a5a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a5a6:	6819      	ldr	r1, [r3, #0]
 800a5a8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800a5ac:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a5ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a5b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5b4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800a5b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a5c0:	4b10      	ldr	r3, [pc, #64]	@ (800a604 <SystemInit+0xd4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	041b      	lsls	r3, r3, #16
 800a5c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5cc:	d203      	bcs.n	800a5d6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a608 <SystemInit+0xd8>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a60c <SystemInit+0xdc>)
 800a5d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a5de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a5e2:	4b01      	ldr	r3, [pc, #4]	@ (800a5e8 <SystemInit+0xb8>)
 800a5e4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a5e6:	4770      	bx	lr
 800a5e8:	e000ed00 	.word	0xe000ed00
 800a5ec:	52002000 	.word	0x52002000
 800a5f0:	58024400 	.word	0x58024400
 800a5f4:	eaf6ed7f 	.word	0xeaf6ed7f
 800a5f8:	02020200 	.word	0x02020200
 800a5fc:	01ff0000 	.word	0x01ff0000
 800a600:	01010280 	.word	0x01010280
 800a604:	5c001000 	.word	0x5c001000
 800a608:	51008000 	.word	0x51008000
 800a60c:	52004000 	.word	0x52004000

0800a610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a610:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a612:	2003      	movs	r0, #3
 800a614:	f000 f854 	bl	800a6c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a618:	f003 fcde 	bl	800dfd8 <HAL_RCC_GetSysClockFreq>
 800a61c:	490f      	ldr	r1, [pc, #60]	@ (800a65c <HAL_Init+0x4c>)
 800a61e:	4a10      	ldr	r2, [pc, #64]	@ (800a660 <HAL_Init+0x50>)
 800a620:	698b      	ldr	r3, [r1, #24]
 800a622:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a626:	5cd3      	ldrb	r3, [r2, r3]
 800a628:	f003 031f 	and.w	r3, r3, #31
 800a62c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a62e:	698b      	ldr	r3, [r1, #24]
 800a630:	f003 030f 	and.w	r3, r3, #15
 800a634:	5cd3      	ldrb	r3, [r2, r3]
 800a636:	4a0b      	ldr	r2, [pc, #44]	@ (800a664 <HAL_Init+0x54>)
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	fa20 f303 	lsr.w	r3, r0, r3
 800a640:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a642:	4b09      	ldr	r3, [pc, #36]	@ (800a668 <HAL_Init+0x58>)
 800a644:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a646:	2000      	movs	r0, #0
 800a648:	f7f6 ffa0 	bl	800158c <HAL_InitTick>
 800a64c:	4604      	mov	r4, r0
 800a64e:	b918      	cbnz	r0, 800a658 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a650:	f7f6 fc8c 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800a654:	4620      	mov	r0, r4
 800a656:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a658:	2401      	movs	r4, #1
 800a65a:	e7fb      	b.n	800a654 <HAL_Init+0x44>
 800a65c:	58024400 	.word	0x58024400
 800a660:	0802c7c0 	.word	0x0802c7c0
 800a664:	24000068 	.word	0x24000068
 800a668:	2400006c 	.word	0x2400006c

0800a66c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a66c:	4a03      	ldr	r2, [pc, #12]	@ (800a67c <HAL_IncTick+0x10>)
 800a66e:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <HAL_IncTick+0x14>)
 800a670:	6811      	ldr	r1, [r2, #0]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	440b      	add	r3, r1
 800a676:	6013      	str	r3, [r2, #0]
}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	2400f11c 	.word	0x2400f11c
 800a680:	24000070 	.word	0x24000070

0800a684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a684:	4b01      	ldr	r3, [pc, #4]	@ (800a68c <HAL_GetTick+0x8>)
 800a686:	6818      	ldr	r0, [r3, #0]
}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	2400f11c 	.word	0x2400f11c

0800a690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a694:	f7ff fff6 	bl	800a684 <HAL_GetTick>
 800a698:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a69a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a69c:	bf1e      	ittt	ne
 800a69e:	4b04      	ldrne	r3, [pc, #16]	@ (800a6b0 <HAL_Delay+0x20>)
 800a6a0:	781b      	ldrbne	r3, [r3, #0]
 800a6a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a6a4:	f7ff ffee 	bl	800a684 <HAL_GetTick>
 800a6a8:	1b43      	subs	r3, r0, r5
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	d3fa      	bcc.n	800a6a4 <HAL_Delay+0x14>
  {
  }
}
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	24000070 	.word	0x24000070

0800a6b4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a6b4:	4b01      	ldr	r3, [pc, #4]	@ (800a6bc <HAL_GetREVID+0x8>)
 800a6b6:	6818      	ldr	r0, [r3, #0]
}
 800a6b8:	0c00      	lsrs	r0, r0, #16
 800a6ba:	4770      	bx	lr
 800a6bc:	5c001000 	.word	0x5c001000

0800a6c0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6c0:	4907      	ldr	r1, [pc, #28]	@ (800a6e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6c2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6c4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a6ce:	0412      	lsls	r2, r2, #16
 800a6d0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a6d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a6dc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a6de:	4770      	bx	lr
 800a6e0:	e000ed00 	.word	0xe000ed00

0800a6e4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6e4:	4b16      	ldr	r3, [pc, #88]	@ (800a740 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6e6:	b530      	push	{r4, r5, lr}
 800a6e8:	68dc      	ldr	r4, [r3, #12]
 800a6ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6ee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6f2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	bf28      	it	cs
 800a6f8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6fa:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6fc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a700:	bf8c      	ite	hi
 800a702:	3c03      	subhi	r4, #3
 800a704:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a706:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800a70a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a70c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a710:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a714:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a718:	fa03 f304 	lsl.w	r3, r3, r4
 800a71c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a720:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a724:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a726:	db06      	blt.n	800a736 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a728:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800a72c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800a730:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a734:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a736:	f000 000f 	and.w	r0, r0, #15
 800a73a:	4a02      	ldr	r2, [pc, #8]	@ (800a744 <HAL_NVIC_SetPriority+0x60>)
 800a73c:	5413      	strb	r3, [r2, r0]
 800a73e:	e7f9      	b.n	800a734 <HAL_NVIC_SetPriority+0x50>
 800a740:	e000ed00 	.word	0xe000ed00
 800a744:	e000ed14 	.word	0xe000ed14

0800a748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a748:	2800      	cmp	r0, #0
 800a74a:	db07      	blt.n	800a75c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a74c:	2301      	movs	r3, #1
 800a74e:	0941      	lsrs	r1, r0, #5
 800a750:	f000 001f 	and.w	r0, r0, #31
 800a754:	4a02      	ldr	r2, [pc, #8]	@ (800a760 <HAL_NVIC_EnableIRQ+0x18>)
 800a756:	4083      	lsls	r3, r0
 800a758:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	e000e100 	.word	0xe000e100

0800a764 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a764:	2800      	cmp	r0, #0
 800a766:	db0c      	blt.n	800a782 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a768:	0943      	lsrs	r3, r0, #5
 800a76a:	2201      	movs	r2, #1
 800a76c:	f000 001f 	and.w	r0, r0, #31
 800a770:	4904      	ldr	r1, [pc, #16]	@ (800a784 <HAL_NVIC_DisableIRQ+0x20>)
 800a772:	3320      	adds	r3, #32
 800a774:	4082      	lsls	r2, r0
 800a776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a77a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a77e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a782:	4770      	bx	lr
 800a784:	e000e100 	.word	0xe000e100

0800a788 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a788:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a78c:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <HAL_MPU_Disable+0x18>)
 800a78e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a790:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a794:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a796:	2200      	movs	r2, #0
 800a798:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	e000ed00 	.word	0xe000ed00

0800a7a4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	@ (800a7c0 <HAL_MPU_Enable+0x1c>)
 800a7a6:	f040 0001 	orr.w	r0, r0, #1
 800a7aa:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a7ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a7b4:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a7b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a7ba:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a7be:	4770      	bx	lr
 800a7c0:	e000ed00 	.word	0xe000ed00

0800a7c4 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a7c4:	7843      	ldrb	r3, [r0, #1]
 800a7c6:	4a14      	ldr	r2, [pc, #80]	@ (800a818 <HAL_MPU_ConfigRegion+0x54>)
 800a7c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a7cc:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800a7d0:	f023 0301 	bic.w	r3, r3, #1
 800a7d4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a7d8:	6843      	ldr	r3, [r0, #4]
 800a7da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a7de:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7e0:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a7e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7e4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a7e8:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7ea:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a7ec:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7ee:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a7f2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7f4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a7f8:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7fa:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a7fe:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a804:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a806:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a80a:	7a01      	ldrb	r1, [r0, #8]
 800a80c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a810:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	e000ed00 	.word	0xe000ed00

0800a81c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a81c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a81e:	4604      	mov	r4, r0
 800a820:	b908      	cbnz	r0, 800a826 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800a822:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a824:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a826:	7f43      	ldrb	r3, [r0, #29]
 800a828:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a82c:	b913      	cbnz	r3, 800a834 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800a82e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a830:	f7f6 fbb4 	bl	8000f9c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a834:	2302      	movs	r3, #2
 800a836:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a838:	7923      	ldrb	r3, [r4, #4]
 800a83a:	b9e3      	cbnz	r3, 800a876 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	4a13      	ldr	r2, [pc, #76]	@ (800a88c <HAL_CRC_Init+0x70>)
 800a840:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	f022 0218 	bic.w	r2, r2, #24
 800a848:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a84a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a84c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a84e:	b9d2      	cbnz	r2, 800a886 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a850:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a854:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800a856:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	6961      	ldr	r1, [r4, #20]
 800a85c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a860:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a862:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a864:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a86c:	430a      	orrs	r2, r1
 800a86e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a870:	2301      	movs	r3, #1
 800a872:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a874:	e7d6      	b.n	800a824 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a876:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 f808 	bl	800a890 <HAL_CRCEx_Polynomial_Set>
 800a880:	2800      	cmp	r0, #0
 800a882:	d0e2      	beq.n	800a84a <HAL_CRC_Init+0x2e>
 800a884:	e7cd      	b.n	800a822 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a886:	6922      	ldr	r2, [r4, #16]
 800a888:	e7e4      	b.n	800a854 <HAL_CRC_Init+0x38>
 800a88a:	bf00      	nop
 800a88c:	04c11db7 	.word	0x04c11db7

0800a890 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a890:	07cb      	lsls	r3, r1, #31
{
 800a892:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a894:	d50d      	bpl.n	800a8b2 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a896:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a898:	3b01      	subs	r3, #1
 800a89a:	d31d      	bcc.n	800a8d8 <HAL_CRCEx_Polynomial_Set+0x48>
 800a89c:	fa21 f403 	lsr.w	r4, r1, r3
 800a8a0:	07e4      	lsls	r4, r4, #31
 800a8a2:	d5f9      	bpl.n	800a898 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800a8a4:	2a10      	cmp	r2, #16
 800a8a6:	d013      	beq.n	800a8d0 <HAL_CRCEx_Polynomial_Set+0x40>
 800a8a8:	2a10      	cmp	r2, #16
 800a8aa:	d804      	bhi.n	800a8b6 <HAL_CRCEx_Polynomial_Set+0x26>
 800a8ac:	b13a      	cbz	r2, 800a8be <HAL_CRCEx_Polynomial_Set+0x2e>
 800a8ae:	2a08      	cmp	r2, #8
 800a8b0:	d010      	beq.n	800a8d4 <HAL_CRCEx_Polynomial_Set+0x44>
 800a8b2:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800a8b4:	e00b      	b.n	800a8ce <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800a8b6:	2a18      	cmp	r2, #24
 800a8b8:	d1fb      	bne.n	800a8b2 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800a8ba:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800a8bc:	d8f9      	bhi.n	800a8b2 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a8be:	6800      	ldr	r0, [r0, #0]
 800a8c0:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a8c2:	6883      	ldr	r3, [r0, #8]
 800a8c4:	f023 0318 	bic.w	r3, r3, #24
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	6083      	str	r3, [r0, #8]
 800a8cc:	2000      	movs	r0, #0
}
 800a8ce:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800a8d0:	2b07      	cmp	r3, #7
 800a8d2:	e7f3      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800a8d4:	2b0f      	cmp	r3, #15
 800a8d6:	e7f1      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800a8d8:	2a10      	cmp	r2, #16
 800a8da:	d1e5      	bne.n	800a8a8 <HAL_CRCEx_Polynomial_Set+0x18>
 800a8dc:	e7e9      	b.n	800a8b2 <HAL_CRCEx_Polynomial_Set+0x22>

0800a8de <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a8de:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d036      	beq.n	800a954 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a8e6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800a8ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a8ee:	b91b      	cbnz	r3, 800a8f8 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a8f0:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a8f4:	f7f6 fb6a 	bl	8000fcc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a8f8:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a8fa:	69e0      	ldr	r0, [r4, #28]
 800a8fc:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a8fe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a906:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a908:	6819      	ldr	r1, [r3, #0]
 800a90a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800a90e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800a912:	430a      	orrs	r2, r1
 800a914:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a916:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a918:	68a2      	ldr	r2, [r4, #8]
 800a91a:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800a91e:	4302      	orrs	r2, r0
 800a920:	f021 0101 	bic.w	r1, r1, #1
 800a924:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a926:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a928:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a92a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a92c:	0c12      	lsrs	r2, r2, #16
 800a92e:	0412      	lsls	r2, r2, #16
 800a930:	430a      	orrs	r2, r1
 800a932:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a936:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800a93a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a93e:	0552      	lsls	r2, r2, #21
 800a940:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a944:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a946:	430a      	orrs	r2, r1
 800a948:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a94a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a94c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a94e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800a952:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a954:	2001      	movs	r0, #1
 800a956:	e7fc      	b.n	800a952 <HAL_DMA2D_Init+0x74>

0800a958 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800a958:	4770      	bx	lr

0800a95a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800a95a:	4770      	bx	lr

0800a95c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a95c:	6803      	ldr	r3, [r0, #0]
{
 800a95e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a960:	685e      	ldr	r6, [r3, #4]
{
 800a962:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a964:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a966:	07f2      	lsls	r2, r6, #31
 800a968:	d514      	bpl.n	800a994 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a96a:	05e9      	lsls	r1, r5, #23
 800a96c:	d512      	bpl.n	800a994 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a974:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a976:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800a978:	f042 0201 	orr.w	r2, r2, #1
 800a97c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a97e:	2201      	movs	r2, #1
 800a980:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a982:	2304      	movs	r3, #4
 800a984:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a988:	2300      	movs	r3, #0
 800a98a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a98e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a990:	b103      	cbz	r3, 800a994 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800a992:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a994:	06b2      	lsls	r2, r6, #26
 800a996:	d516      	bpl.n	800a9c6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a998:	04ab      	lsls	r3, r5, #18
 800a99a:	d514      	bpl.n	800a9c6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a9a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ac:	f043 0302 	orr.w	r3, r3, #2
 800a9b0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a9be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9c0:	b10b      	cbz	r3, 800a9c6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a9c6:	0730      	lsls	r0, r6, #28
 800a9c8:	d516      	bpl.n	800a9f8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a9ca:	0529      	lsls	r1, r5, #20
 800a9cc:	d514      	bpl.n	800a9f8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a9d8:	2208      	movs	r2, #8
 800a9da:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a9dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9de:	f043 0304 	orr.w	r3, r3, #4
 800a9e2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a9f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9f2:	b10b      	cbz	r3, 800a9f8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a9f8:	0772      	lsls	r2, r6, #29
 800a9fa:	d50b      	bpl.n	800aa14 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a9fc:	056b      	lsls	r3, r5, #21
 800a9fe:	d509      	bpl.n	800aa14 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800aa00:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800aa02:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800aa10:	f7ff ffa2 	bl	800a958 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800aa14:	07b0      	lsls	r0, r6, #30
 800aa16:	d514      	bpl.n	800aa42 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800aa18:	05a9      	lsls	r1, r5, #22
 800aa1a:	d512      	bpl.n	800aa42 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800aa24:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800aa26:	2202      	movs	r2, #2
 800aa28:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800aa2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa2c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800aa34:	2300      	movs	r3, #0
 800aa36:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800aa3a:	6a23      	ldr	r3, [r4, #32]
 800aa3c:	b10b      	cbz	r3, 800aa42 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800aa42:	06f2      	lsls	r2, r6, #27
 800aa44:	d513      	bpl.n	800aa6e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800aa46:	04eb      	lsls	r3, r5, #19
 800aa48:	d511      	bpl.n	800aa6e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800aa4a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800aa4c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa54:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800aa56:	2210      	movs	r2, #16
 800aa58:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800aa5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa5c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800aa64:	2300      	movs	r3, #0
 800aa66:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800aa6a:	f7ff ff76 	bl	800a95a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	4607      	mov	r7, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	4614      	mov	r4, r2
 800aa7a:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa7c:	f7ff fe02 	bl	800a684 <HAL_GetTick>
 800aa80:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800aa86:	07d2      	lsls	r2, r2, #31
 800aa88:	d50a      	bpl.n	800aaa0 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800aa8a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800aa8e:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800aa90:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800aa92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa96:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800aa9a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aaa0:	f7ff fdf0 	bl	800a684 <HAL_GetTick>
 800aaa4:	eba0 0008 	sub.w	r0, r0, r8
 800aaa8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aaac:	d9e9      	bls.n	800aa82 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800aaae:	2003      	movs	r0, #3
 800aab0:	e7f4      	b.n	800aa9c <DSI_ShortWrite.constprop.0+0x2c>

0800aab2 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aab2:	7c03      	ldrb	r3, [r0, #16]
{
 800aab4:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d05b      	beq.n	800ab72 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800aaba:	6803      	ldr	r3, [r0, #0]
 800aabc:	2000      	movs	r0, #0
 800aabe:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800aac2:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800aac6:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800aac8:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800aaca:	d507      	bpl.n	800aadc <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800aacc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800aad0:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800aad4:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800aad8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800aadc:	0788      	lsls	r0, r1, #30
 800aade:	d505      	bpl.n	800aaec <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800aae0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800aae4:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800aae8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800aaec:	0748      	lsls	r0, r1, #29
 800aaee:	d505      	bpl.n	800aafc <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800aaf0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800aaf4:	f040 0001 	orr.w	r0, r0, #1
 800aaf8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800aafc:	0708      	lsls	r0, r1, #28
 800aafe:	d505      	bpl.n	800ab0c <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800ab00:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab04:	f040 0002 	orr.w	r0, r0, #2
 800ab08:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800ab0c:	06c8      	lsls	r0, r1, #27
 800ab0e:	d505      	bpl.n	800ab1c <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800ab10:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab14:	f040 000c 	orr.w	r0, r0, #12
 800ab18:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800ab1c:	0688      	lsls	r0, r1, #26
 800ab1e:	d505      	bpl.n	800ab2c <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800ab20:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab24:	f040 0010 	orr.w	r0, r0, #16
 800ab28:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800ab2c:	0648      	lsls	r0, r1, #25
 800ab2e:	d505      	bpl.n	800ab3c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800ab30:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab34:	f040 0020 	orr.w	r0, r0, #32
 800ab38:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800ab3c:	0608      	lsls	r0, r1, #24
 800ab3e:	d505      	bpl.n	800ab4c <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800ab40:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab44:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800ab48:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800ab4c:	05c8      	lsls	r0, r1, #23
 800ab4e:	d505      	bpl.n	800ab5c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800ab50:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ab54:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800ab58:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800ab5c:	0589      	lsls	r1, r1, #22
 800ab5e:	d505      	bpl.n	800ab6c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800ab60:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800ab64:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800ab68:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800ab70:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ab72:	2002      	movs	r0, #2
}
 800ab74:	4770      	bx	lr
	...

0800ab78 <HAL_DSI_Init>:
{
 800ab78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ab7a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f000 80ea 	beq.w	800ad58 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800ab84:	7c43      	ldrb	r3, [r0, #17]
 800ab86:	b90b      	cbnz	r3, 800ab8c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800ab88:	f7f6 fa44 	bl	8001014 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800ab90:	2300      	movs	r3, #0
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800ab9a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ab9e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800aba2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800aba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800abae:	f7ff fd69 	bl	800a684 <HAL_GetTick>
 800abb2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800abba:	04d9      	lsls	r1, r3, #19
 800abbc:	d56e      	bpl.n	800ac9c <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800abbe:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800abc2:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800abc6:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800abca:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800abce:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800abd2:	e9d5 0300 	ldrd	r0, r3, [r5]
 800abd6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800abd8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800abdc:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800abde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800abe2:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800abe4:	430b      	orrs	r3, r1
 800abe6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800abea:	2300      	movs	r3, #0
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800abf2:	f043 0301 	orr.w	r3, r3, #1
 800abf6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800abfa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800ac06:	f7ff fd43 	bl	800a690 <HAL_Delay>
  tickstart = HAL_GetTick();
 800ac0a:	f7ff fd3b 	bl	800a684 <HAL_GetTick>
 800ac0e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800ac16:	05d2      	lsls	r2, r2, #23
 800ac18:	d548      	bpl.n	800acac <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800ac1a:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ac1c:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800ac1e:	9202      	str	r2, [sp, #8]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	f042 0201 	orr.w	r2, r2, #1
 800ac26:	605a      	str	r2, [r3, #4]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	f002 0201 	and.w	r2, r2, #1
 800ac2e:	9202      	str	r2, [sp, #8]
 800ac30:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ac38:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ac3e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ac40:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800ac42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ac46:	f042 0202 	orr.w	r2, r2, #2
 800ac4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800ac4e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ac52:	f042 0204 	orr.w	r2, r2, #4
 800ac56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ac5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ac5e:	f022 0203 	bic.w	r2, r2, #3
 800ac62:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ac66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800ac70:	f7ff fd08 	bl	800a684 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800ac74:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ac76:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800ac78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac7c:	079b      	lsls	r3, r3, #30
 800ac7e:	d025      	beq.n	800accc <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac86:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800ac8a:	2b94      	cmp	r3, #148	@ 0x94
 800ac8c:	d025      	beq.n	800acda <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ac8e:	f7ff fcf9 	bl	800a684 <HAL_GetTick>
 800ac92:	1b80      	subs	r0, r0, r6
 800ac94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ac98:	d9f2      	bls.n	800ac80 <HAL_DSI_Init+0x108>
 800ac9a:	e014      	b.n	800acc6 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ac9c:	f7ff fcf2 	bl	800a684 <HAL_GetTick>
 800aca0:	1b80      	subs	r0, r0, r6
 800aca2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aca6:	d985      	bls.n	800abb4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800aca8:	2003      	movs	r0, #3
 800acaa:	e053      	b.n	800ad54 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800acac:	f7ff fcea 	bl	800a684 <HAL_GetTick>
 800acb0:	1b80      	subs	r0, r0, r6
 800acb2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800acb6:	d9ab      	bls.n	800ac10 <HAL_DSI_Init+0x98>
 800acb8:	e7f6      	b.n	800aca8 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800acba:	f7ff fce3 	bl	800a684 <HAL_GetTick>
 800acbe:	1b80      	subs	r0, r0, r6
 800acc0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800acc4:	d902      	bls.n	800accc <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800acc6:	2300      	movs	r3, #0
 800acc8:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800acca:	e7ed      	b.n	800aca8 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acd2:	f003 0314 	and.w	r3, r3, #20
 800acd6:	2b14      	cmp	r3, #20
 800acd8:	d1ef      	bne.n	800acba <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800acda:	686b      	ldr	r3, [r5, #4]
 800acdc:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800ace0:	4a1e      	ldr	r2, [pc, #120]	@ (800ad5c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800ace2:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	bf38      	it	cc
 800ace8:	2301      	movcc	r3, #1
 800acea:	435a      	muls	r2, r3
 800acec:	68ab      	ldr	r3, [r5, #8]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	409a      	lsls	r2, r3
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	434b      	muls	r3, r1
 800acf8:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ad02:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800ad06:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ad0a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ad0e:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ad10:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ad12:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ad16:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ad1a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800ad1e:	9003      	str	r0, [sp, #12]
 800ad20:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800ad22:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800ad24:	f022 0201 	bic.w	r2, r2, #1
 800ad28:	605a      	str	r2, [r3, #4]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	f002 0201 	and.w	r2, r2, #1
 800ad30:	9203      	str	r2, [sp, #12]
 800ad32:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800ad34:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ad38:	f022 0203 	bic.w	r2, r2, #3
 800ad3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ad40:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ad44:	430a      	orrs	r2, r1
 800ad46:	f042 0201 	orr.w	r2, r2, #1
 800ad4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800ad4e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ad50:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800ad52:	7463      	strb	r3, [r4, #17]
}
 800ad54:	b004      	add	sp, #16
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800ad58:	2001      	movs	r0, #1
 800ad5a:	e7fb      	b.n	800ad54 <HAL_DSI_Init+0x1dc>
 800ad5c:	003d0900 	.word	0x003d0900

0800ad60 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800ad60:	4770      	bx	lr

0800ad62 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ad62:	6803      	ldr	r3, [r0, #0]
 800ad64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800ad68:	07d1      	lsls	r1, r2, #31
{
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ad6e:	d508      	bpl.n	800ad82 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800ad70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ad74:	07d2      	lsls	r2, r2, #31
 800ad76:	d504      	bpl.n	800ad82 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800ad7e:	f7f7 f87d 	bl	8001e7c <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800ad88:	0791      	lsls	r1, r2, #30
 800ad8a:	d509      	bpl.n	800ada0 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800ad8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ad90:	0792      	lsls	r2, r2, #30
 800ad92:	d505      	bpl.n	800ada0 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ad94:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ad96:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ad98:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ad9c:	f7f7 f8a0 	bl	8001ee0 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800ada0:	69a3      	ldr	r3, [r4, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d04e      	beq.n	800ae44 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800ada6:	6821      	ldr	r1, [r4, #0]
 800ada8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800adac:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800adb0:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800adb2:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800adb6:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800adba:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800adbc:	b291      	uxth	r1, r2
 800adbe:	b119      	cbz	r1, 800adc8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800adc0:	6961      	ldr	r1, [r4, #20]
 800adc2:	f041 0101 	orr.w	r1, r1, #1
 800adc6:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800adc8:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800adcc:	d003      	beq.n	800add6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800adce:	6962      	ldr	r2, [r4, #20]
 800add0:	f042 0202 	orr.w	r2, r2, #2
 800add4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800add6:	07d8      	lsls	r0, r3, #31
 800add8:	d503      	bpl.n	800ade2 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800adda:	6962      	ldr	r2, [r4, #20]
 800addc:	f042 0204 	orr.w	r2, r2, #4
 800ade0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800ade2:	0799      	lsls	r1, r3, #30
 800ade4:	d503      	bpl.n	800adee <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800ade6:	6962      	ldr	r2, [r4, #20]
 800ade8:	f042 0208 	orr.w	r2, r2, #8
 800adec:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800adee:	f013 0f0c 	tst.w	r3, #12
 800adf2:	d003      	beq.n	800adfc <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800adf4:	6962      	ldr	r2, [r4, #20]
 800adf6:	f042 0210 	orr.w	r2, r2, #16
 800adfa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800adfc:	06da      	lsls	r2, r3, #27
 800adfe:	d503      	bpl.n	800ae08 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800ae00:	6962      	ldr	r2, [r4, #20]
 800ae02:	f042 0220 	orr.w	r2, r2, #32
 800ae06:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800ae08:	0698      	lsls	r0, r3, #26
 800ae0a:	d503      	bpl.n	800ae14 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800ae0c:	6962      	ldr	r2, [r4, #20]
 800ae0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae12:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800ae14:	0659      	lsls	r1, r3, #25
 800ae16:	d503      	bpl.n	800ae20 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800ae18:	6962      	ldr	r2, [r4, #20]
 800ae1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ae1e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800ae20:	061a      	lsls	r2, r3, #24
 800ae22:	d503      	bpl.n	800ae2c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800ae24:	6962      	ldr	r2, [r4, #20]
 800ae26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae2a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800ae2c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800ae30:	d003      	beq.n	800ae3a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800ae32:	6963      	ldr	r3, [r4, #20]
 800ae34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ae38:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800ae3a:	6963      	ldr	r3, [r4, #20]
 800ae3c:	b113      	cbz	r3, 800ae44 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff ff8e 	bl	800ad60 <HAL_DSI_ErrorCallback>
}
 800ae44:	bd10      	pop	{r4, pc}

0800ae46 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ae46:	7c02      	ldrb	r2, [r0, #16]
{
 800ae48:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800ae4a:	2a01      	cmp	r2, #1
 800ae4c:	d00a      	beq.n	800ae64 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800ae4e:	6802      	ldr	r2, [r0, #0]
 800ae50:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800ae52:	f020 0003 	bic.w	r0, r0, #3
 800ae56:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800ae58:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800ae5a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ae5c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800ae5e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800ae60:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800ae62:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ae64:	2002      	movs	r0, #2
}
 800ae66:	4770      	bx	lr

0800ae68 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800ae68:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ae6a:	7c03      	ldrb	r3, [r0, #16]
{
 800ae6c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d069      	beq.n	800af46 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800ae72:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800ae74:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800ae76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae78:	f042 0201 	orr.w	r2, r2, #1
 800ae7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800ae7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ae82:	f022 0201 	bic.w	r2, r2, #1
 800ae86:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800ae8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800ae96:	68da      	ldr	r2, [r3, #12]
 800ae98:	f022 0203 	bic.w	r2, r2, #3
 800ae9c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	4302      	orrs	r2, r0
 800aea2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800aea4:	695a      	ldr	r2, [r3, #20]
 800aea6:	f022 0207 	bic.w	r2, r2, #7
 800aeaa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800aeac:	6958      	ldr	r0, [r3, #20]
 800aeae:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800aeb2:	432a      	orrs	r2, r5
 800aeb4:	694d      	ldr	r5, [r1, #20]
 800aeb6:	432a      	orrs	r2, r5
 800aeb8:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800aeba:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800aebc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800aebe:	691a      	ldr	r2, [r3, #16]
 800aec0:	f022 020f 	bic.w	r2, r2, #15
 800aec4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800aec6:	691a      	ldr	r2, [r3, #16]
 800aec8:	4302      	orrs	r2, r0
 800aeca:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800aecc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800aed0:	f022 020e 	bic.w	r2, r2, #14
 800aed4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800aed8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800aedc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800aee0:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800aee2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800aee6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aee8:	0c12      	lsrs	r2, r2, #16
 800aeea:	0412      	lsls	r2, r2, #16
 800aeec:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800aeee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aef0:	4302      	orrs	r2, r0
 800aef2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800aef4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800aef8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800aefc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800af00:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800af04:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800af08:	432a      	orrs	r2, r5
 800af0a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800af0c:	432a      	orrs	r2, r5
 800af0e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800af10:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800af12:	432a      	orrs	r2, r5
 800af14:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800af16:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800af18:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800af1c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800af1e:	f022 0201 	bic.w	r2, r2, #1
 800af22:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800af24:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800af26:	430a      	orrs	r2, r1
 800af28:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800af2a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800af2e:	f042 0201 	orr.w	r2, r2, #1
 800af32:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800af36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800af3a:	f042 0202 	orr.w	r2, r2, #2
 800af3e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800af42:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800af44:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800af46:	2002      	movs	r0, #2
 800af48:	e7fc      	b.n	800af44 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800af4c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800af4c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800af4e:	7c03      	ldrb	r3, [r0, #16]
{
 800af50:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800af52:	2b01      	cmp	r3, #1
 800af54:	d029      	beq.n	800afaa <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	4b15      	ldr	r3, [pc, #84]	@ (800afb0 <HAL_DSI_ConfigCommand+0x64>)
 800af5a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800af5c:	4023      	ands	r3, r4
 800af5e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800af60:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800af62:	e9d1 3500 	ldrd	r3, r5, [r1]
 800af66:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800af68:	688d      	ldr	r5, [r1, #8]
 800af6a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800af6c:	68cd      	ldr	r5, [r1, #12]
 800af6e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800af70:	690d      	ldr	r5, [r1, #16]
 800af72:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800af74:	694d      	ldr	r5, [r1, #20]
 800af76:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800af78:	698d      	ldr	r5, [r1, #24]
 800af7a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800af7c:	69cd      	ldr	r5, [r1, #28]
 800af7e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800af80:	6a0d      	ldr	r5, [r1, #32]
 800af82:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800af84:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800af86:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800af88:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800af8a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800af8c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800af8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800af90:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800af92:	4323      	orrs	r3, r4
 800af94:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800af96:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800af98:	f023 0302 	bic.w	r3, r3, #2
 800af9c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800af9e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800afa0:	430b      	orrs	r3, r1
 800afa2:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800afa4:	2000      	movs	r0, #0
 800afa6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800afa8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800afaa:	2002      	movs	r0, #2
 800afac:	e7fc      	b.n	800afa8 <HAL_DSI_ConfigCommand+0x5c>
 800afae:	bf00      	nop
 800afb0:	fef080ff 	.word	0xfef080ff

0800afb4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800afb4:	7c02      	ldrb	r2, [r0, #16]
{
 800afb6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800afb8:	2a01      	cmp	r2, #1
 800afba:	d00a      	beq.n	800afd2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800afbc:	6802      	ldr	r2, [r0, #0]
 800afbe:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800afc0:	f020 001f 	bic.w	r0, r0, #31
 800afc4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800afc6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800afc8:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800afca:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800afcc:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800afce:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800afd0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800afd2:	2002      	movs	r0, #2
}
 800afd4:	4770      	bx	lr

0800afd6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800afd6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800afd8:	7c03      	ldrb	r3, [r0, #16]
{
 800afda:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d034      	beq.n	800b04a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800afe0:	e9d1 0300 	ldrd	r0, r3, [r1]
 800afe4:	4298      	cmp	r0, r3
 800afe6:	bf38      	it	cc
 800afe8:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800aff0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800aff4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800aff8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800affc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b000:	4302      	orrs	r2, r0
 800b002:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b006:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b00a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800b00e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b012:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800b016:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b01a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b01c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b020:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b022:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b024:	432a      	orrs	r2, r5
 800b026:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b028:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b02a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800b02e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b032:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b036:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b03a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b03e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b042:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800b046:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b048:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b04a:	2002      	movs	r0, #2
 800b04c:	e7fc      	b.n	800b048 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800b050 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800b050:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b052:	7c03      	ldrb	r3, [r0, #16]
{
 800b054:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b056:	2b01      	cmp	r3, #1
 800b058:	d05b      	beq.n	800b112 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b05a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b05c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b05e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b060:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b062:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b066:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b06e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b070:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800b072:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b074:	b292      	uxth	r2, r2
 800b076:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b078:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b07a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b07e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800b080:	4a25      	ldr	r2, [pc, #148]	@ (800b118 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800b082:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b084:	4010      	ands	r0, r2
 800b086:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b088:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b08a:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b08c:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b08e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800b090:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b092:	4010      	ands	r0, r2
 800b094:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b096:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b098:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b09a:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b09c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800b09e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b0a2:	4010      	ands	r0, r2
 800b0a4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b0a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b0ac:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b0ae:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b0b0:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800b0b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b0b8:	4010      	ands	r0, r2
 800b0ba:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b0be:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b0c2:	4328      	orrs	r0, r5
 800b0c4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800b0c8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b0cc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800b0d0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b0d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b0d8:	698d      	ldr	r5, [r1, #24]
 800b0da:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b0dc:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b0de:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b0e0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800b0e4:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b0e8:	4010      	ands	r0, r2
 800b0ea:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b0ee:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b0f2:	4328      	orrs	r0, r5
 800b0f4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b0f8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800b0fc:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b0fe:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b104:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b108:	430a      	orrs	r2, r1
 800b10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800b10e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b110:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b112:	2002      	movs	r0, #2
 800b114:	e7fc      	b.n	800b110 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800b116:	bf00      	nop
 800b118:	ffff0000 	.word	0xffff0000

0800b11c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b11c:	7c03      	ldrb	r3, [r0, #16]
{
 800b11e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800b120:	2b01      	cmp	r3, #1
 800b122:	d01c      	beq.n	800b15e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b124:	6802      	ldr	r2, [r0, #0]
 800b126:	2300      	movs	r3, #0
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	6851      	ldr	r1, [r2, #4]
 800b12c:	f041 0101 	orr.w	r1, r1, #1
 800b130:	6051      	str	r1, [r2, #4]
 800b132:	6851      	ldr	r1, [r2, #4]
 800b134:	f001 0101 	and.w	r1, r1, #1
 800b138:	9100      	str	r1, [sp, #0]
 800b13a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800b142:	f041 0108 	orr.w	r1, r1, #8
 800b146:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800b14a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b14e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b150:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b152:	f002 0208 	and.w	r2, r2, #8
 800b156:	9201      	str	r2, [sp, #4]
 800b158:	9a01      	ldr	r2, [sp, #4]
}
 800b15a:	b002      	add	sp, #8
 800b15c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b15e:	2002      	movs	r0, #2
 800b160:	e7fb      	b.n	800b15a <HAL_DSI_Start+0x3e>

0800b162 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b162:	7c02      	ldrb	r2, [r0, #16]
{
 800b164:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b166:	2a01      	cmp	r2, #1
 800b168:	d009      	beq.n	800b17e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b16a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b16c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b16e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800b172:	f042 0204 	orr.w	r2, r2, #4
 800b176:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800b17a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b17c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b17e:	2002      	movs	r0, #2
}
 800b180:	4770      	bx	lr

0800b182 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b182:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b184:	7c05      	ldrb	r5, [r0, #16]
{
 800b186:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b188:	2d01      	cmp	r5, #1
 800b18a:	d009      	beq.n	800b1a0 <HAL_DSI_ShortWrite+0x1e>
 800b18c:	2501      	movs	r5, #1
 800b18e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800b190:	9d06      	ldr	r5, [sp, #24]
 800b192:	9500      	str	r5, [sp, #0]
 800b194:	f7ff fc6c 	bl	800aa70 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b198:	2300      	movs	r3, #0
 800b19a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800b19c:	b003      	add	sp, #12
 800b19e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b1a0:	2002      	movs	r0, #2
 800b1a2:	e7fb      	b.n	800b19c <HAL_DSI_ShortWrite+0x1a>

0800b1a4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800b1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b1aa:	7c03      	ldrb	r3, [r0, #16]
{
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800b1b0:	2b01      	cmp	r3, #1
{
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800b1b8:	d052      	beq.n	800b260 <HAL_DSI_LongWrite+0xbc>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1be:	f7ff fa61 	bl	800a684 <HAL_GetTick>
 800b1c2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b1c4:	6832      	ldr	r2, [r6, #0]
 800b1c6:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b1c8:	f013 0a01 	ands.w	sl, r3, #1
 800b1cc:	d019      	beq.n	800b202 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b1ce:	2c03      	cmp	r4, #3
 800b1d0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800b1d2:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b1d6:	bf28      	it	cs
 800b1d8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800b1da:	4283      	cmp	r3, r0
 800b1dc:	d11d      	bne.n	800b21a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800b1de:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800b1e0:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800b1e2:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b1e6:	bb10      	cbnz	r0, 800b22e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b1e8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b1ea:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800b1ee:	0223      	lsls	r3, r4, #8
 800b1f0:	0224      	lsls	r4, r4, #8
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800b1f8:	431d      	orrs	r5, r3
 800b1fa:	4325      	orrs	r5, r4
 800b1fc:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b1fe:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800b200:	e009      	b.n	800b216 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b202:	f7ff fa3f 	bl	800a684 <HAL_GetTick>
 800b206:	eba0 000b 	sub.w	r0, r0, fp
 800b20a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b20e:	d9d9      	bls.n	800b1c4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800b210:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b212:	f886 a010 	strb.w	sl, [r6, #16]
}
 800b216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b21a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b21e:	3301      	adds	r3, #1
 800b220:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800b224:	fa01 f10c 	lsl.w	r1, r1, ip
 800b228:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800b22c:	e7d5      	b.n	800b1da <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b22e:	2804      	cmp	r0, #4
    fifoword = 0U;
 800b230:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b234:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800b236:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b238:	bf28      	it	cs
 800b23a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b23e:	f813 8001 	ldrb.w	r8, [r3, r1]
 800b242:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800b246:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b248:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800b24c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b24e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800b252:	d1f4      	bne.n	800b23e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800b254:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800b258:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800b25a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800b25e:	e7c2      	b.n	800b1e6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800b260:	2002      	movs	r0, #2
 800b262:	e7d8      	b.n	800b216 <HAL_DSI_LongWrite+0x72>

0800b264 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800b264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b268:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b26a:	7c03      	ldrb	r3, [r0, #16]
{
 800b26c:	4605      	mov	r5, r0
 800b26e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800b270:	2b01      	cmp	r3, #1
{
 800b272:	4617      	mov	r7, r2
 800b274:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b278:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800b27c:	d06f      	beq.n	800b35e <HAL_DSI_Read+0xfa>
 800b27e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800b280:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800b282:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800b284:	d90d      	bls.n	800b2a2 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800b286:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800b28a:	2237      	movs	r2, #55	@ 0x37
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	b2f3      	uxtb	r3, r6
 800b290:	f7ff fbee 	bl	800aa70 <DSI_ShortWrite.constprop.0>
 800b294:	b128      	cbz	r0, 800b2a2 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800b296:	2300      	movs	r3, #0

      return HAL_ERROR;
 800b298:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800b29a:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800b29c:	b003      	add	sp, #12
 800b29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b2a2:	f1b9 0f06 	cmp.w	r9, #6
 800b2a6:	d10f      	bne.n	800b2c8 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800b2aa:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800b2b2:	f043 0306 	orr.w	r3, r3, #6
 800b2b6:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800b2b8:	f7ff f9e4 	bl	800a684 <HAL_GetTick>
 800b2bc:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	dc27      	bgt.n	800b312 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800b2c6:	e7e9      	b.n	800b29c <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800b2c8:	f1b9 0f04 	cmp.w	r9, #4
 800b2cc:	d105      	bne.n	800b2da <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2ce:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800b2d0:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2d2:	f044 0404 	orr.w	r4, r4, #4
 800b2d6:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800b2d8:	e7ee      	b.n	800b2b8 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800b2da:	f1b9 0f14 	cmp.w	r9, #20
 800b2de:	d108      	bne.n	800b2f2 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b2e0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2e4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b2e6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2e8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b2ec:	f044 0414 	orr.w	r4, r4, #20
 800b2f0:	e7f1      	b.n	800b2d6 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800b2f2:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800b2f6:	d1ce      	bne.n	800b296 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b2f8:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b2fc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b2fe:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b300:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b304:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b308:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b30c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 800b310:	e7e1      	b.n	800b2d6 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b312:	682a      	ldr	r2, [r5, #0]
 800b314:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b316:	f013 0310 	ands.w	r3, r3, #16
 800b31a:	d10d      	bne.n	800b338 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b31c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800b31e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b320:	4632      	mov	r2, r6
 800b322:	bf28      	it	cs
 800b324:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b326:	00d9      	lsls	r1, r3, #3
 800b328:	fa20 f101 	lsr.w	r1, r0, r1
 800b32c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800b32e:	3301      	adds	r3, #1
 800b330:	429a      	cmp	r2, r3
 800b332:	d1f8      	bne.n	800b326 <HAL_DSI_Read+0xc2>
        pdata++;
 800b334:	4417      	add	r7, r2
        datasize--;
 800b336:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b338:	f7ff f9a4 	bl	800a684 <HAL_GetTick>
 800b33c:	1b00      	subs	r0, r0, r4
 800b33e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b342:	d903      	bls.n	800b34c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800b344:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b346:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b348:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800b34a:	e7a7      	b.n	800b29c <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800b350:	0652      	lsls	r2, r2, #25
 800b352:	d4b4      	bmi.n	800b2be <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800b354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b358:	069b      	lsls	r3, r3, #26
 800b35a:	d49c      	bmi.n	800b296 <HAL_DSI_Read+0x32>
 800b35c:	e7af      	b.n	800b2be <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800b35e:	2002      	movs	r0, #2
 800b360:	e79c      	b.n	800b29c <HAL_DSI_Read+0x38>

0800b362 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b362:	7c02      	ldrb	r2, [r0, #16]
{
 800b364:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b366:	2a01      	cmp	r2, #1
 800b368:	d00f      	beq.n	800b38a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800b36a:	6802      	ldr	r2, [r0, #0]
 800b36c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b370:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800b374:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b378:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b37c:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b380:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b382:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800b386:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b388:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b38a:	2002      	movs	r0, #2
}
 800b38c:	4770      	bx	lr
	...

0800b390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b394:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b396:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800b55c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b39a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b39e:	680a      	ldr	r2, [r1, #0]
 800b3a0:	fa32 f503 	lsrs.w	r5, r2, r3
 800b3a4:	d102      	bne.n	800b3ac <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800b3a6:	b003      	add	sp, #12
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b3ac:	2501      	movs	r5, #1
 800b3ae:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800b3b2:	ea18 0202 	ands.w	r2, r8, r2
 800b3b6:	f000 80bb 	beq.w	800b530 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3ba:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3bc:	2703      	movs	r7, #3
 800b3be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3c2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3c6:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3ca:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3cc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3d0:	2f01      	cmp	r7, #1
 800b3d2:	d834      	bhi.n	800b43e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800b3d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3d6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b3da:	68cf      	ldr	r7, [r1, #12]
 800b3dc:	fa07 f70e 	lsl.w	r7, r7, lr
 800b3e0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b3e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b3e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b3e8:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b3ec:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800b3f0:	409f      	lsls	r7, r3
 800b3f2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800b3f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b3f8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3fa:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b3fc:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b400:	688f      	ldr	r7, [r1, #8]
 800b402:	fa07 f70e 	lsl.w	r7, r7, lr
 800b406:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800b40a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b40c:	d119      	bne.n	800b442 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800b40e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b412:	f003 0a07 	and.w	sl, r3, #7
 800b416:	f04f 0b0f 	mov.w	fp, #15
 800b41a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b41e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800b422:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b426:	fa0b fb0a 	lsl.w	fp, fp, sl
 800b42a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b42e:	690f      	ldr	r7, [r1, #16]
 800b430:	fa07 f70a 	lsl.w	r7, r7, sl
 800b434:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800b438:	f8c8 7020 	str.w	r7, [r8, #32]
 800b43c:	e001      	b.n	800b442 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b43e:	2d03      	cmp	r5, #3
 800b440:	d1da      	bne.n	800b3f8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800b442:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b444:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b448:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b44c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b450:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800b454:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b456:	d06b      	beq.n	800b530 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b458:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800b45c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b460:	f003 0c03 	and.w	ip, r3, #3
 800b464:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b468:	f045 0502 	orr.w	r5, r5, #2
 800b46c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b470:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b474:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800b478:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800b47c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b480:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b484:	f005 0502 	and.w	r5, r5, #2
 800b488:	9501      	str	r5, [sp, #4]
 800b48a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b48c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b48e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b492:	4d31      	ldr	r5, [pc, #196]	@ (800b558 <HAL_GPIO_Init+0x1c8>)
 800b494:	42a8      	cmp	r0, r5
 800b496:	d04d      	beq.n	800b534 <HAL_GPIO_Init+0x1a4>
 800b498:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b49c:	42a8      	cmp	r0, r5
 800b49e:	d04b      	beq.n	800b538 <HAL_GPIO_Init+0x1a8>
 800b4a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4a4:	42a8      	cmp	r0, r5
 800b4a6:	d049      	beq.n	800b53c <HAL_GPIO_Init+0x1ac>
 800b4a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4ac:	42a8      	cmp	r0, r5
 800b4ae:	d047      	beq.n	800b540 <HAL_GPIO_Init+0x1b0>
 800b4b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4b4:	42a8      	cmp	r0, r5
 800b4b6:	d045      	beq.n	800b544 <HAL_GPIO_Init+0x1b4>
 800b4b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4bc:	42a8      	cmp	r0, r5
 800b4be:	d043      	beq.n	800b548 <HAL_GPIO_Init+0x1b8>
 800b4c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4c4:	42a8      	cmp	r0, r5
 800b4c6:	d041      	beq.n	800b54c <HAL_GPIO_Init+0x1bc>
 800b4c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4cc:	42a8      	cmp	r0, r5
 800b4ce:	d03f      	beq.n	800b550 <HAL_GPIO_Init+0x1c0>
 800b4d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4d4:	42a8      	cmp	r0, r5
 800b4d6:	d03d      	beq.n	800b554 <HAL_GPIO_Init+0x1c4>
 800b4d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b4dc:	42a8      	cmp	r0, r5
 800b4de:	bf14      	ite	ne
 800b4e0:	250a      	movne	r5, #10
 800b4e2:	2509      	moveq	r5, #9
 800b4e4:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b4e8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b4ec:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4f0:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800b4f2:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800b4f6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800b4f8:	bf0c      	ite	eq
 800b4fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b4fc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b4fe:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800b502:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800b504:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800b506:	bf0c      	ite	eq
 800b508:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b50a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b50c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 800b510:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800b512:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800b516:	bf0c      	ite	eq
 800b518:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b51a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b51c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800b51e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800b522:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800b526:	bf54      	ite	pl
 800b528:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800b52a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800b52c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 800b530:	3301      	adds	r3, #1
 800b532:	e734      	b.n	800b39e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b534:	2500      	movs	r5, #0
 800b536:	e7d5      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b538:	2501      	movs	r5, #1
 800b53a:	e7d3      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b53c:	2502      	movs	r5, #2
 800b53e:	e7d1      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b540:	2503      	movs	r5, #3
 800b542:	e7cf      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b544:	2504      	movs	r5, #4
 800b546:	e7cd      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b548:	2505      	movs	r5, #5
 800b54a:	e7cb      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b54c:	2506      	movs	r5, #6
 800b54e:	e7c9      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b550:	2507      	movs	r5, #7
 800b552:	e7c7      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b554:	2508      	movs	r5, #8
 800b556:	e7c5      	b.n	800b4e4 <HAL_GPIO_Init+0x154>
 800b558:	58020000 	.word	0x58020000
 800b55c:	58024400 	.word	0x58024400

0800b560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b564:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b566:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b56a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b56e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b572:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800b576:	fa31 f302 	lsrs.w	r3, r1, r2
 800b57a:	d101      	bne.n	800b580 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800b57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b580:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800b584:	ea1c 0601 	ands.w	r6, ip, r1
 800b588:	d070      	beq.n	800b66c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b58a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b58e:	f002 0703 	and.w	r7, r2, #3
 800b592:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800b596:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b598:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b59c:	fa08 f907 	lsl.w	r9, r8, r7
 800b5a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b5a4:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b5a8:	4b3a      	ldr	r3, [pc, #232]	@ (800b694 <HAL_GPIO_DeInit+0x134>)
 800b5aa:	4298      	cmp	r0, r3
 800b5ac:	d060      	beq.n	800b670 <HAL_GPIO_DeInit+0x110>
 800b5ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5b2:	4298      	cmp	r0, r3
 800b5b4:	d05e      	beq.n	800b674 <HAL_GPIO_DeInit+0x114>
 800b5b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5ba:	4298      	cmp	r0, r3
 800b5bc:	d05c      	beq.n	800b678 <HAL_GPIO_DeInit+0x118>
 800b5be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5c2:	4298      	cmp	r0, r3
 800b5c4:	d05a      	beq.n	800b67c <HAL_GPIO_DeInit+0x11c>
 800b5c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5ca:	4298      	cmp	r0, r3
 800b5cc:	d058      	beq.n	800b680 <HAL_GPIO_DeInit+0x120>
 800b5ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5d2:	4298      	cmp	r0, r3
 800b5d4:	d056      	beq.n	800b684 <HAL_GPIO_DeInit+0x124>
 800b5d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5da:	4298      	cmp	r0, r3
 800b5dc:	d054      	beq.n	800b688 <HAL_GPIO_DeInit+0x128>
 800b5de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5e2:	4298      	cmp	r0, r3
 800b5e4:	d052      	beq.n	800b68c <HAL_GPIO_DeInit+0x12c>
 800b5e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5ea:	4298      	cmp	r0, r3
 800b5ec:	d050      	beq.n	800b690 <HAL_GPIO_DeInit+0x130>
 800b5ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5f2:	4298      	cmp	r0, r3
 800b5f4:	bf0c      	ite	eq
 800b5f6:	2309      	moveq	r3, #9
 800b5f8:	230a      	movne	r3, #10
 800b5fa:	40bb      	lsls	r3, r7
 800b5fc:	4573      	cmp	r3, lr
 800b5fe:	d117      	bne.n	800b630 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b600:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b604:	ea23 0306 	bic.w	r3, r3, r6
 800b608:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b60c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b610:	ea23 0306 	bic.w	r3, r3, r6
 800b614:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b618:	6863      	ldr	r3, [r4, #4]
 800b61a:	ea23 0306 	bic.w	r3, r3, r6
 800b61e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	ea23 0306 	bic.w	r3, r3, r6
 800b626:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b628:	68ab      	ldr	r3, [r5, #8]
 800b62a:	ea23 0309 	bic.w	r3, r3, r9
 800b62e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b630:	0053      	lsls	r3, r2, #1
 800b632:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b634:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b636:	fa0b f303 	lsl.w	r3, fp, r3
 800b63a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b63e:	431d      	orrs	r5, r3
 800b640:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b642:	f002 0507 	and.w	r5, r2, #7
 800b646:	6a37      	ldr	r7, [r6, #32]
 800b648:	00ad      	lsls	r5, r5, #2
 800b64a:	fa08 f505 	lsl.w	r5, r8, r5
 800b64e:	ea27 0705 	bic.w	r7, r7, r5
 800b652:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b654:	68c5      	ldr	r5, [r0, #12]
 800b656:	ea25 0503 	bic.w	r5, r5, r3
 800b65a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b65c:	6845      	ldr	r5, [r0, #4]
 800b65e:	ea25 050c 	bic.w	r5, r5, ip
 800b662:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b664:	6885      	ldr	r5, [r0, #8]
 800b666:	ea25 0303 	bic.w	r3, r5, r3
 800b66a:	6083      	str	r3, [r0, #8]
    position++;
 800b66c:	3201      	adds	r2, #1
 800b66e:	e782      	b.n	800b576 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b670:	2300      	movs	r3, #0
 800b672:	e7c2      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b674:	2301      	movs	r3, #1
 800b676:	e7c0      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b678:	2302      	movs	r3, #2
 800b67a:	e7be      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b67c:	2303      	movs	r3, #3
 800b67e:	e7bc      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b680:	2304      	movs	r3, #4
 800b682:	e7ba      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b684:	2305      	movs	r3, #5
 800b686:	e7b8      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b688:	2306      	movs	r3, #6
 800b68a:	e7b6      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b68c:	2307      	movs	r3, #7
 800b68e:	e7b4      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b690:	2308      	movs	r3, #8
 800b692:	e7b2      	b.n	800b5fa <HAL_GPIO_DeInit+0x9a>
 800b694:	58020000 	.word	0x58020000

0800b698 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b698:	6903      	ldr	r3, [r0, #16]
 800b69a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b69c:	bf14      	ite	ne
 800b69e:	2001      	movne	r0, #1
 800b6a0:	2000      	moveq	r0, #0
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b6a4:	b10a      	cbz	r2, 800b6aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b6a6:	6181      	str	r1, [r0, #24]
  }
}
 800b6a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b6aa:	0409      	lsls	r1, r1, #16
 800b6ac:	e7fb      	b.n	800b6a6 <HAL_GPIO_WritePin+0x2>

0800b6ae <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b6ae:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b6b0:	ea01 0203 	and.w	r2, r1, r3
 800b6b4:	ea21 0103 	bic.w	r1, r1, r3
 800b6b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6bc:	6181      	str	r1, [r0, #24]
}
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800b6c0:	4b04      	ldr	r3, [pc, #16]	@ (800b6d4 <HAL_HSEM_FastTake+0x14>)
 800b6c2:	3020      	adds	r0, #32
 800b6c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800b6c8:	4b03      	ldr	r3, [pc, #12]	@ (800b6d8 <HAL_HSEM_FastTake+0x18>)
 800b6ca:	1ac0      	subs	r0, r0, r3
 800b6cc:	bf18      	it	ne
 800b6ce:	2001      	movne	r0, #1
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	58026400 	.word	0x58026400
 800b6d8:	80000300 	.word	0x80000300

0800b6dc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800b6dc:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800b6e0:	4b01      	ldr	r3, [pc, #4]	@ (800b6e8 <HAL_HSEM_Release+0xc>)
 800b6e2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800b6e6:	4770      	bx	lr
 800b6e8:	58026400 	.word	0x58026400

0800b6ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b6ec:	6803      	ldr	r3, [r0, #0]
 800b6ee:	699a      	ldr	r2, [r3, #24]
 800b6f0:	0791      	lsls	r1, r2, #30
 800b6f2:	d501      	bpl.n	800b6f8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b6f8:	699a      	ldr	r2, [r3, #24]
 800b6fa:	07d2      	lsls	r2, r2, #31
 800b6fc:	d403      	bmi.n	800b706 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	f042 0201 	orr.w	r2, r2, #1
 800b704:	619a      	str	r2, [r3, #24]
  }
}
 800b706:	4770      	bx	lr

0800b708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b708:	b530      	push	{r4, r5, lr}
 800b70a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b70c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b710:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b712:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b714:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b71a:	4a05      	ldr	r2, [pc, #20]	@ (800b730 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b71c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b71e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b722:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b726:	ea20 0002 	bic.w	r0, r0, r2
 800b72a:	4303      	orrs	r3, r0
 800b72c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b72e:	bd30      	pop	{r4, r5, pc}
 800b730:	03ff63ff 	.word	0x03ff63ff

0800b734 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b734:	6803      	ldr	r3, [r0, #0]
{
 800b736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b73a:	699c      	ldr	r4, [r3, #24]
{
 800b73c:	4605      	mov	r5, r0
 800b73e:	460f      	mov	r7, r1
 800b740:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b742:	f014 0410 	ands.w	r4, r4, #16
 800b746:	d06f      	beq.n	800b828 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800b748:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b74a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b74c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b74e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	699a      	ldr	r2, [r3, #24]
 800b754:	0690      	lsls	r0, r2, #26
 800b756:	d461      	bmi.n	800b81c <I2C_IsErrorOccurred+0xe8>
 800b758:	f1b8 0f00 	cmp.w	r8, #0
 800b75c:	d035      	beq.n	800b7ca <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800b75e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b762:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b764:	682e      	ldr	r6, [r5, #0]
 800b766:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b768:	05d9      	lsls	r1, r3, #23
 800b76a:	d505      	bpl.n	800b778 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b76c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b770:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b774:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b776:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b778:	055a      	lsls	r2, r3, #21
 800b77a:	d505      	bpl.n	800b788 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b77c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b780:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b784:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b786:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b788:	059b      	lsls	r3, r3, #22
 800b78a:	d54f      	bpl.n	800b82c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b78c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b790:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b794:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800b796:	4628      	mov	r0, r5
 800b798:	f7ff ffa8 	bl	800b6ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b79c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800b79e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b7a0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800b7a4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800b7a8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800b7ac:	f023 0301 	bic.w	r3, r3, #1
 800b7b0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800b7b2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800b7b4:	4323      	orrs	r3, r4
 800b7b6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800b7c4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800b7c8:	e032      	b.n	800b830 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800b7ca:	1c7a      	adds	r2, r7, #1
 800b7cc:	d0c1      	beq.n	800b752 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b7ce:	f7fe ff59 	bl	800a684 <HAL_GetTick>
 800b7d2:	1b80      	subs	r0, r0, r6
 800b7d4:	42b8      	cmp	r0, r7
 800b7d6:	d801      	bhi.n	800b7dc <I2C_IsErrorOccurred+0xa8>
 800b7d8:	2f00      	cmp	r7, #0
 800b7da:	d1b9      	bne.n	800b750 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b7e0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b7e4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b7e6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b7e8:	0400      	lsls	r0, r0, #16
 800b7ea:	d50a      	bpl.n	800b802 <I2C_IsErrorOccurred+0xce>
 800b7ec:	0449      	lsls	r1, r1, #17
 800b7ee:	d408      	bmi.n	800b802 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800b7f0:	2a20      	cmp	r2, #32
 800b7f2:	d006      	beq.n	800b802 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b7fa:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b7fc:	f7fe ff42 	bl	800a684 <HAL_GetTick>
 800b800:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b802:	682b      	ldr	r3, [r5, #0]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	069b      	lsls	r3, r3, #26
 800b808:	d4a2      	bmi.n	800b750 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b80a:	f7fe ff3b 	bl	800a684 <HAL_GetTick>
 800b80e:	1b80      	subs	r0, r0, r6
 800b810:	2819      	cmp	r0, #25
 800b812:	d9f6      	bls.n	800b802 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b814:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b816:	f04f 0801 	mov.w	r8, #1
 800b81a:	e799      	b.n	800b750 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b81c:	f1b8 0f00 	cmp.w	r8, #0
 800b820:	d19d      	bne.n	800b75e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b822:	2220      	movs	r2, #32
 800b824:	61da      	str	r2, [r3, #28]
 800b826:	e79a      	b.n	800b75e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b828:	4620      	mov	r0, r4
 800b82a:	e79b      	b.n	800b764 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1b2      	bne.n	800b796 <I2C_IsErrorOccurred+0x62>
}
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b834 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	079b      	lsls	r3, r3, #30
 800b842:	d501      	bpl.n	800b848 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b844:	2000      	movs	r0, #0
 800b846:	e01f      	b.n	800b888 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b848:	4632      	mov	r2, r6
 800b84a:	4629      	mov	r1, r5
 800b84c:	4620      	mov	r0, r4
 800b84e:	f7ff ff71 	bl	800b734 <I2C_IsErrorOccurred>
 800b852:	b9c0      	cbnz	r0, 800b886 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b854:	1c6a      	adds	r2, r5, #1
 800b856:	d0f1      	beq.n	800b83c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b858:	f7fe ff14 	bl	800a684 <HAL_GetTick>
 800b85c:	1b80      	subs	r0, r0, r6
 800b85e:	42a8      	cmp	r0, r5
 800b860:	d801      	bhi.n	800b866 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b862:	2d00      	cmp	r5, #0
 800b864:	d1ea      	bne.n	800b83c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	f013 0302 	ands.w	r3, r3, #2
 800b86e:	d1e5      	bne.n	800b83c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b870:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800b872:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b876:	f042 0220 	orr.w	r2, r2, #32
 800b87a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b87c:	2220      	movs	r2, #32
 800b87e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b882:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b886:	2001      	movs	r0, #1
}
 800b888:	bd70      	pop	{r4, r5, r6, pc}

0800b88a <I2C_WaitOnFlagUntilTimeout>:
{
 800b88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b892:	4604      	mov	r4, r0
 800b894:	460f      	mov	r7, r1
 800b896:	4616      	mov	r6, r2
 800b898:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	ea37 0303 	bics.w	r3, r7, r3
 800b8a2:	bf0c      	ite	eq
 800b8a4:	2301      	moveq	r3, #1
 800b8a6:	2300      	movne	r3, #0
 800b8a8:	42b3      	cmp	r3, r6
 800b8aa:	d001      	beq.n	800b8b0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e025      	b.n	800b8fc <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8b0:	4642      	mov	r2, r8
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f7ff ff3d 	bl	800b734 <I2C_IsErrorOccurred>
 800b8ba:	b9f0      	cbnz	r0, 800b8fa <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800b8bc:	1c6b      	adds	r3, r5, #1
 800b8be:	d0ec      	beq.n	800b89a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8c0:	f7fe fee0 	bl	800a684 <HAL_GetTick>
 800b8c4:	eba0 0008 	sub.w	r0, r0, r8
 800b8c8:	42a8      	cmp	r0, r5
 800b8ca:	d801      	bhi.n	800b8d0 <I2C_WaitOnFlagUntilTimeout+0x46>
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	d1e4      	bne.n	800b89a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	ea37 0303 	bics.w	r3, r7, r3
 800b8d8:	bf0c      	ite	eq
 800b8da:	2301      	moveq	r3, #1
 800b8dc:	2300      	movne	r3, #0
 800b8de:	42b3      	cmp	r3, r6
 800b8e0:	d1db      	bne.n	800b89a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b8e4:	f043 0320 	orr.w	r3, r3, #32
 800b8e8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8ea:	2320      	movs	r3, #32
 800b8ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800b8f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b8fa:	2001      	movs	r0, #1
}
 800b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b900 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	460d      	mov	r5, r1
 800b906:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	069b      	lsls	r3, r3, #26
 800b90e:	d501      	bpl.n	800b914 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b910:	2000      	movs	r0, #0
 800b912:	e01d      	b.n	800b950 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b914:	4632      	mov	r2, r6
 800b916:	4629      	mov	r1, r5
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff ff0b 	bl	800b734 <I2C_IsErrorOccurred>
 800b91e:	b9b0      	cbnz	r0, 800b94e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b920:	f7fe feb0 	bl	800a684 <HAL_GetTick>
 800b924:	1b80      	subs	r0, r0, r6
 800b926:	42a8      	cmp	r0, r5
 800b928:	d801      	bhi.n	800b92e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b92a:	2d00      	cmp	r5, #0
 800b92c:	d1ec      	bne.n	800b908 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	f013 0320 	ands.w	r3, r3, #32
 800b936:	d1e7      	bne.n	800b908 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b938:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b93a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b93e:	f042 0220 	orr.w	r2, r2, #32
 800b942:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b944:	2220      	movs	r2, #32
 800b946:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b94a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b94e:	2001      	movs	r0, #1
}
 800b950:	bd70      	pop	{r4, r5, r6, pc}

0800b952 <HAL_I2C_MspInit>:
}
 800b952:	4770      	bx	lr

0800b954 <HAL_I2C_Init>:
{
 800b954:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b956:	4604      	mov	r4, r0
 800b958:	2800      	cmp	r0, #0
 800b95a:	d04e      	beq.n	800b9fa <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b95c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b960:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b964:	b91b      	cbnz	r3, 800b96e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b966:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b96a:	f7ff fff2 	bl	800b952 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b96e:	2324      	movs	r3, #36	@ 0x24
 800b970:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b97e:	6862      	ldr	r2, [r4, #4]
 800b980:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b984:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b98c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b98e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b992:	2901      	cmp	r1, #1
 800b994:	d106      	bne.n	800b9a4 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b99a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b9a2:	e007      	b.n	800b9b4 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b9a4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b9a8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b9aa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b9ac:	d1f6      	bne.n	800b99c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b9b4:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9b6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b9be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b9c2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b9ca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b9cc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b9d0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b9d2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b9d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b9d8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b9da:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	f042 0201 	orr.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b9ea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9ec:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b9ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b9f2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9f4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800b9f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	e7fc      	b.n	800b9f8 <HAL_I2C_Init+0xa4>

0800b9fe <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_I2C_DeInit>:
{
 800ba00:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800ba02:	4604      	mov	r4, r0
 800ba04:	b198      	cbz	r0, 800ba2e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800ba06:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba08:	2324      	movs	r3, #36	@ 0x24
 800ba0a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ba0e:	6813      	ldr	r3, [r2, #0]
 800ba10:	f023 0301 	bic.w	r3, r3, #1
 800ba14:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800ba16:	f7ff fff2 	bl	800b9fe <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800ba1e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800ba22:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba26:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba28:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800ba2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e7fc      	b.n	800ba2c <HAL_I2C_DeInit+0x2c>
	...

0800ba34 <HAL_I2C_Mem_Write>:
{
 800ba34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba3a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba42:	2b20      	cmp	r3, #32
{
 800ba44:	4616      	mov	r6, r2
 800ba46:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800ba4a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba4e:	f040 80c6 	bne.w	800bbde <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800ba52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba54:	b113      	cbz	r3, 800ba5c <HAL_I2C_Mem_Write+0x28>
 800ba56:	f1ba 0f00 	cmp.w	sl, #0
 800ba5a:	d106      	bne.n	800ba6a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba60:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800ba62:	2001      	movs	r0, #1
}
 800ba64:	b003      	add	sp, #12
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800ba6a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	f000 80b5 	beq.w	800bbde <HAL_I2C_Mem_Write+0x1aa>
 800ba74:	f04f 0b01 	mov.w	fp, #1
 800ba78:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800ba7c:	f7fe fe02 	bl	800a684 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba80:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800ba82:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba84:	9000      	str	r0, [sp, #0]
 800ba86:	465a      	mov	r2, fp
 800ba88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7ff fefc 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d1e5      	bne.n	800ba62 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ba96:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800ba98:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ba9a:	fa5f f289 	uxtb.w	r2, r9
 800ba9e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800baa0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800baa4:	2340      	movs	r3, #64	@ 0x40
 800baa6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800baaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baac:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800baae:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800bab0:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bab2:	4b4c      	ldr	r3, [pc, #304]	@ (800bbe4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800bab4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800babe:	f7ff fe23 	bl	800b708 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bac2:	462a      	mov	r2, r5
 800bac4:	4641      	mov	r1, r8
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7ff feb4 	bl	800b834 <I2C_WaitOnTXISFlagUntilTimeout>
 800bacc:	bb18      	cbnz	r0, 800bb16 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bace:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bad2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bad4:	d115      	bne.n	800bb02 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bad6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bad8:	2200      	movs	r2, #0
 800bada:	2180      	movs	r1, #128	@ 0x80
 800badc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bade:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bae0:	4643      	mov	r3, r8
 800bae2:	9500      	str	r5, [sp, #0]
 800bae4:	f7ff fed1 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bae8:	b9a8      	cbnz	r0, 800bb16 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800baec:	b29b      	uxth	r3, r3
 800baee:	2bff      	cmp	r3, #255	@ 0xff
 800baf0:	d815      	bhi.n	800bb1e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800baf2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800baf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800baf8:	b292      	uxth	r2, r2
 800bafa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bafc:	b2d2      	uxtb	r2, r2
 800bafe:	9000      	str	r0, [sp, #0]
 800bb00:	e012      	b.n	800bb28 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb02:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb04:	4641      	mov	r1, r8
 800bb06:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	f7ff fe92 	bl	800b834 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb10:	b908      	cbnz	r0, 800bb16 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	e7df      	b.n	800bad6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800bb16:	2300      	movs	r3, #0
 800bb18:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bb1c:	e7a1      	b.n	800ba62 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb1e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb24:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb26:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bb28:	4639      	mov	r1, r7
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7ff fdec 	bl	800b708 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb30:	462a      	mov	r2, r5
 800bb32:	4641      	mov	r1, r8
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7ff fe7d 	bl	800b834 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d191      	bne.n	800ba62 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bb40:	6822      	ldr	r2, [r4, #0]
 800bb42:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bb46:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bb48:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bb4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bb4c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bb4e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bb50:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800bb52:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800bb54:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bb56:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bb5a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	b1b3      	cbz	r3, 800bb8e <HAL_I2C_Mem_Write+0x15a>
 800bb60:	b9aa      	cbnz	r2, 800bb8e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb62:	4643      	mov	r3, r8
 800bb64:	2180      	movs	r1, #128	@ 0x80
 800bb66:	4620      	mov	r0, r4
 800bb68:	9500      	str	r5, [sp, #0]
 800bb6a:	f7ff fe8e 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f47f af77 	bne.w	800ba62 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2bff      	cmp	r3, #255	@ 0xff
 800bb7a:	d928      	bls.n	800bbce <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb7c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb82:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb84:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb86:	4639      	mov	r1, r7
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f7ff fdbd 	bl	800b708 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bb8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1cc      	bne.n	800bb30 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb96:	462a      	mov	r2, r5
 800bb98:	4641      	mov	r1, r8
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f7ff feb0 	bl	800b900 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	f47f af5e 	bne.w	800ba62 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	2120      	movs	r1, #32
 800bbaa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800bbb2:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800bbb6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800bbba:	f022 0201 	bic.w	r2, r2, #1
 800bbbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bbc0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bbc4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bbc8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bbcc:	e74a      	b.n	800ba64 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800bbce:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	9000      	str	r0, [sp, #0]
 800bbdc:	e7d3      	b.n	800bb86 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800bbde:	2002      	movs	r0, #2
 800bbe0:	e740      	b.n	800ba64 <HAL_I2C_Mem_Write+0x30>
 800bbe2:	bf00      	nop
 800bbe4:	80002000 	.word	0x80002000

0800bbe8 <HAL_I2C_Mem_Read>:
{
 800bbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbf6:	2b20      	cmp	r3, #32
{
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800bbfe:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc02:	f040 80c9 	bne.w	800bd98 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800bc06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc08:	b113      	cbz	r3, 800bc10 <HAL_I2C_Mem_Read+0x28>
 800bc0a:	f1ba 0f00 	cmp.w	sl, #0
 800bc0e:	d106      	bne.n	800bc1e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bc10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc14:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bc16:	2001      	movs	r0, #1
}
 800bc18:	b003      	add	sp, #12
 800bc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800bc1e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	f000 80b8 	beq.w	800bd98 <HAL_I2C_Mem_Read+0x1b0>
 800bc28:	f04f 0b01 	mov.w	fp, #1
 800bc2c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bc30:	f7fe fd28 	bl	800a684 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc34:	2319      	movs	r3, #25
 800bc36:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800bc38:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc3a:	465a      	mov	r2, fp
 800bc3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bc40:	4620      	mov	r0, r4
 800bc42:	f7ff fe22 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d1e4      	bne.n	800bc16 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc4c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800bc4e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc50:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc52:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc56:	2240      	movs	r2, #64	@ 0x40
 800bc58:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800bc5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc5e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc60:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800bc62:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc64:	4a4d      	ldr	r2, [pc, #308]	@ (800bd9c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800bc66:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc6a:	9200      	str	r2, [sp, #0]
 800bc6c:	fa5f f289 	uxtb.w	r2, r9
 800bc70:	f7ff fd4a 	bl	800b708 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc74:	462a      	mov	r2, r5
 800bc76:	4641      	mov	r1, r8
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f7ff fddb 	bl	800b834 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc7e:	bb20      	cbnz	r0, 800bcca <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc80:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc84:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc86:	d116      	bne.n	800bcb6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc88:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2140      	movs	r1, #64	@ 0x40
 800bc8e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc90:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bc92:	4643      	mov	r3, r8
 800bc94:	9500      	str	r5, [sp, #0]
 800bc96:	f7ff fdf8 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bc9a:	b9b0      	cbnz	r0, 800bcca <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	2bff      	cmp	r3, #255	@ 0xff
 800bca2:	4b3f      	ldr	r3, [pc, #252]	@ (800bda0 <HAL_I2C_Mem_Read+0x1b8>)
 800bca4:	d815      	bhi.n	800bcd2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800bca6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800bca8:	b292      	uxth	r2, r2
 800bcaa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bcb4:	e012      	b.n	800bcdc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcb6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcb8:	4641      	mov	r1, r8
 800bcba:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcbc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	f7ff fdb8 	bl	800b834 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcc4:	b908      	cbnz	r0, 800bcca <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	e7de      	b.n	800bc88 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800bcca:	2300      	movs	r3, #0
 800bccc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bcd0:	e7a1      	b.n	800bc16 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcd2:	22ff      	movs	r2, #255	@ 0xff
 800bcd4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcdc:	4639      	mov	r1, r7
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff fd12 	bl	800b708 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bce4:	4643      	mov	r3, r8
 800bce6:	2200      	movs	r2, #0
 800bce8:	2104      	movs	r1, #4
 800bcea:	4620      	mov	r0, r4
 800bcec:	9500      	str	r5, [sp, #0]
 800bcee:	f7ff fdcc 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d18f      	bne.n	800bc16 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bcfc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800bcfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800bd00:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bd02:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800bd04:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bd06:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bd08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bd0a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bd0c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bd0e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	b1b3      	cbz	r3, 800bd48 <HAL_I2C_Mem_Read+0x160>
 800bd1a:	b9aa      	cbnz	r2, 800bd48 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd1c:	4643      	mov	r3, r8
 800bd1e:	2180      	movs	r1, #128	@ 0x80
 800bd20:	4620      	mov	r0, r4
 800bd22:	9500      	str	r5, [sp, #0]
 800bd24:	f7ff fdb1 	bl	800b88a <I2C_WaitOnFlagUntilTimeout>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f47f af74 	bne.w	800bc16 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	2bff      	cmp	r3, #255	@ 0xff
 800bd34:	d928      	bls.n	800bd88 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd36:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bd38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd3c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bd3e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd40:	4639      	mov	r1, r7
 800bd42:	4620      	mov	r0, r4
 800bd44:	f7ff fce0 	bl	800b708 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bd48:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1c9      	bne.n	800bce4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd50:	462a      	mov	r2, r5
 800bd52:	4641      	mov	r1, r8
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7ff fdd3 	bl	800b900 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f47f af5b 	bne.w	800bc16 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	2120      	movs	r1, #32
 800bd64:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800bd6c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800bd70:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800bd74:	f022 0201 	bic.w	r2, r2, #1
 800bd78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bd7a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bd7e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd82:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bd86:	e747      	b.n	800bc18 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800bd88:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bd8e:	b292      	uxth	r2, r2
 800bd90:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	9000      	str	r0, [sp, #0]
 800bd96:	e7d3      	b.n	800bd40 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800bd98:	2002      	movs	r0, #2
 800bd9a:	e73d      	b.n	800bc18 <HAL_I2C_Mem_Read+0x30>
 800bd9c:	80002000 	.word	0x80002000
 800bda0:	80002400 	.word	0x80002400

0800bda4 <HAL_I2C_GetState>:
  return hi2c->State;
 800bda4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800bda8:	4770      	bx	lr

0800bdaa <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800bdaa:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800bdac:	4770      	bx	lr

0800bdae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bdae:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdb0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800bdb4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdb6:	2a20      	cmp	r2, #32
 800bdb8:	b2d4      	uxtb	r4, r2
 800bdba:	d11c      	bne.n	800bdf6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdbc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800bdc0:	2a01      	cmp	r2, #1
 800bdc2:	d018      	beq.n	800bdf6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdc4:	2224      	movs	r2, #36	@ 0x24
 800bdc6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bdca:	6802      	ldr	r2, [r0, #0]
 800bdcc:	6810      	ldr	r0, [r2, #0]
 800bdce:	f020 0001 	bic.w	r0, r0, #1
 800bdd2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bdd4:	6810      	ldr	r0, [r2, #0]
 800bdd6:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800bdda:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bddc:	6810      	ldr	r0, [r2, #0]
 800bdde:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bde0:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800bde2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800bde4:	6811      	ldr	r1, [r2, #0]
 800bde6:	f041 0101 	orr.w	r1, r1, #1
 800bdea:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bdec:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bdf0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bdf4:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800bdf6:	2002      	movs	r0, #2
 800bdf8:	e7fc      	b.n	800bdf4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800bdfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bdfa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdfc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800be00:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800be02:	2a20      	cmp	r2, #32
 800be04:	b2d4      	uxtb	r4, r2
 800be06:	d11b      	bne.n	800be40 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be08:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800be0c:	2a01      	cmp	r2, #1
 800be0e:	d017      	beq.n	800be40 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be10:	2224      	movs	r2, #36	@ 0x24
 800be12:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be16:	6802      	ldr	r2, [r0, #0]
 800be18:	6810      	ldr	r0, [r2, #0]
 800be1a:	f020 0001 	bic.w	r0, r0, #1
 800be1e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be20:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be22:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be26:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be2a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800be2c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800be2e:	6811      	ldr	r1, [r2, #0]
 800be30:	f041 0101 	orr.w	r1, r1, #1
 800be34:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800be36:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800be3a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800be3e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800be40:	2002      	movs	r0, #2
 800be42:	e7fc      	b.n	800be3e <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800be44 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800be44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800be46:	2401      	movs	r4, #1
 800be48:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800be4a:	2500      	movs	r5, #0
 800be4c:	194e      	adds	r6, r1, r5
 800be4e:	443d      	add	r5, r7
 800be50:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800be52:	42be      	cmp	r6, r7
 800be54:	d112      	bne.n	800be7c <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800be56:	2c10      	cmp	r4, #16
 800be58:	d108      	bne.n	800be6c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800be5a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800be5c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800be5e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800be60:	601d      	str	r5, [r3, #0]
  p = 0;
 800be62:	4623      	mov	r3, r4
  si = Huffsize[0];
 800be64:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800be66:	5cc8      	ldrb	r0, [r1, r3]
 800be68:	b9d8      	cbnz	r0, 800bea2 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800be6c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800be6e:	3401      	adds	r4, #1
 800be70:	19ee      	adds	r6, r5, r7
 800be72:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800be76:	d9e9      	bls.n	800be4c <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800be78:	2001      	movs	r0, #1
 800be7a:	e7f6      	b.n	800be6a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800be7c:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800be80:	e7e7      	b.n	800be52 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800be82:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800be86:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800be88:	5cc8      	ldrb	r0, [r1, r3]
 800be8a:	19dc      	adds	r4, r3, r7
 800be8c:	42a8      	cmp	r0, r5
 800be8e:	d0f8      	beq.n	800be82 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800be90:	2d1f      	cmp	r5, #31
 800be92:	d8f1      	bhi.n	800be78 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800be94:	fa06 f005 	lsl.w	r0, r6, r5
 800be98:	42a0      	cmp	r0, r4
 800be9a:	d9ed      	bls.n	800be78 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800be9c:	0064      	lsls	r4, r4, #1
    si++;
 800be9e:	3501      	adds	r5, #1
 800bea0:	e7e1      	b.n	800be66 <JPEG_Bits_To_SizeCodes+0x22>
 800bea2:	1ae7      	subs	r7, r4, r3
 800bea4:	e7f0      	b.n	800be88 <JPEG_Bits_To_SizeCodes+0x44>

0800bea6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800bea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea8:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800beac:	460d      	mov	r5, r1
 800beae:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800beb0:	ab01      	add	r3, sp, #4
 800beb2:	aa43      	add	r2, sp, #268	@ 0x10c
 800beb4:	a902      	add	r1, sp, #8
 800beb6:	f7ff ffc5 	bl	800be44 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800beba:	b938      	cbnz	r0, 800becc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800bebc:	9e01      	ldr	r6, [sp, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	f104 010f 	add.w	r1, r4, #15
 800bec4:	360f      	adds	r6, #15
 800bec6:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800bec8:	42a1      	cmp	r1, r4
 800beca:	d102      	bne.n	800bed2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800becc:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800bed2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800bed6:	2e0b      	cmp	r6, #11
 800bed8:	d80a      	bhi.n	800bef0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800beda:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800bede:	f852 cb04 	ldr.w	ip, [r2], #4
 800bee2:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800bee6:	f813 7b01 	ldrb.w	r7, [r3], #1
 800beea:	3f01      	subs	r7, #1
 800beec:	55af      	strb	r7, [r5, r6]
      k++;
 800beee:	e7eb      	b.n	800bec8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800bef0:	2001      	movs	r0, #1
 800bef2:	e7eb      	b.n	800becc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800bef4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800bef4:	4603      	mov	r3, r0
 800bef6:	4608      	mov	r0, r1
 800bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800befa:	681c      	ldr	r4, [r3, #0]
{
 800befc:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800befe:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d125      	bne.n	800bf52 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bf06:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800bf0a:	a901      	add	r1, sp, #4
 800bf0c:	f7ff ffcb 	bl	800bea6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800bf10:	b9e8      	cbnz	r0, 800bf4e <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800bf12:	aa01      	add	r2, sp, #4
 800bf14:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800bf18:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800bf1c:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800bf1e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800bf20:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf22:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800bf24:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf26:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800bf2a:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf2c:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf2e:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf32:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800bf36:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bf38:	7b13      	ldrb	r3, [r2, #12]
 800bf3a:	021b      	lsls	r3, r3, #8
 800bf3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bf40:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bf42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bf46:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800bf4a:	42b4      	cmp	r4, r6
 800bf4c:	d1e9      	bne.n	800bf22 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800bf4e:	b011      	add	sp, #68	@ 0x44
 800bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800bf52:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d102      	bne.n	800bf60 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bf5a:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800bf5e:	e7d4      	b.n	800bf0a <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800bf60:	2001      	movs	r0, #1
 800bf62:	e7f4      	b.n	800bf4e <JPEG_Set_HuffDC_Mem+0x5a>

0800bf64 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800bf68:	6804      	ldr	r4, [r0, #0]
{
 800bf6a:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800bf6e:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800bf70:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d149      	bne.n	800c00c <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800bf78:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bf7c:	466b      	mov	r3, sp
 800bf7e:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800bf82:	a901      	add	r1, sp, #4
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff ff5d 	bl	800be44 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d13a      	bne.n	800c004 <JPEG_Set_HuffAC_Mem+0xa0>
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	460d      	mov	r5, r1
 800bf92:	f106 0c0f 	add.w	ip, r6, #15
 800bf96:	4617      	mov	r7, r2
 800bf98:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800bf9a:	f04f 0e0a 	mov.w	lr, #10
 800bf9e:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bfa0:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800bfa2:	4561      	cmp	r1, ip
 800bfa4:	d139      	bne.n	800c01a <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800bfa6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800bfaa:	a942      	add	r1, sp, #264	@ 0x108
 800bfac:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800bfb0:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800bfb2:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800bfb4:	6063      	str	r3, [r4, #4]
 800bfb6:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800bfb8:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800bfbc:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800bfc0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800bfc2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800bfc6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800bfc8:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800bfcc:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800bfce:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800bfd2:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfd4:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800bfd8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfda:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800bfde:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfe0:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfe2:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfe6:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800bfea:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800bfec:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800bff0:	021b      	lsls	r3, r3, #8
 800bff2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bff6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bffc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c000:	42b4      	cmp	r4, r6
 800c002:	d1e7      	bne.n	800bfd4 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c004:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800c008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800c00c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800c010:	429a      	cmp	r2, r3
 800c012:	d10f      	bne.n	800c034 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c014:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800c018:	e7b0      	b.n	800bf7c <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800c01a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800c01e:	b15b      	cbz	r3, 800c038 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800c020:	2bf0      	cmp	r3, #240	@ 0xf0
 800c022:	d015      	beq.n	800c050 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800c024:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800c026:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c02a:	3b01      	subs	r3, #1
 800c02c:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800c030:	2ba1      	cmp	r3, #161	@ 0xa1
 800c032:	d902      	bls.n	800c03a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800c034:	2001      	movs	r0, #1
 800c036:	e7e5      	b.n	800c004 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800c038:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c03a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800c03e:	f857 8b04 	ldr.w	r8, [r7], #4
 800c042:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c046:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c04a:	3a01      	subs	r2, #1
 800c04c:	54f2      	strb	r2, [r6, r3]
      k++;
 800c04e:	e7a8      	b.n	800bfa2 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800c050:	23a1      	movs	r3, #161	@ 0xa1
 800c052:	e7f2      	b.n	800c03a <JPEG_Set_HuffAC_Mem+0xd6>

0800c054 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800c054:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c056:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c05a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c05c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c05e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c060:	f002 0203 	and.w	r2, r2, #3
 800c064:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	bf0c      	ite	eq
 800c06a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800c06e:	f022 0208 	bicne.w	r2, r2, #8
 800c072:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	f022 0201 	bic.w	r2, r2, #1
 800c07a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c07c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c07e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c082:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c086:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c08a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c08c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c08e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c092:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c096:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c09a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c0a4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c0a6:	f002 020c 	and.w	r2, r2, #12
 800c0aa:	2a08      	cmp	r2, #8
 800c0ac:	d104      	bne.n	800c0b8 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800c0ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0b0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c0b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0b6:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c0b8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c0ba:	f002 020c 	and.w	r2, r2, #12
 800c0be:	2a0c      	cmp	r2, #12
 800c0c0:	d1f9      	bne.n	800c0b6 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c0c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0c4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c0c8:	e7f4      	b.n	800c0b4 <JPEG_Init_Process+0x60>
	...

0800c0cc <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c0cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c0ce:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800c0d0:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c0d2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c0d4:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c0d6:	42aa      	cmp	r2, r5
 800c0d8:	d313      	bcc.n	800c102 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c0da:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c0dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c0de:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	d30e      	bcc.n	800c102 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c0e4:	4f18      	ldr	r7, [pc, #96]	@ (800c148 <JPEG_DMA_StartProcess+0x7c>)
 800c0e6:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c0e8:	4f18      	ldr	r7, [pc, #96]	@ (800c14c <JPEG_DMA_StartProcess+0x80>)
 800c0ea:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c0ec:	4e18      	ldr	r6, [pc, #96]	@ (800c150 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c0ee:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c0f0:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c0f2:	4e18      	ldr	r6, [pc, #96]	@ (800c154 <JPEG_DMA_StartProcess+0x88>)
 800c0f4:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c0f6:	b105      	cbz	r5, 800c0fa <JPEG_DMA_StartProcess+0x2e>
 800c0f8:	b931      	cbnz	r1, 800c108 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c0fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c0fc:	f043 0304 	orr.w	r3, r3, #4
 800c100:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800c102:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800c104:	b003      	add	sp, #12
 800c106:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c108:	fbb2 f6f5 	udiv	r6, r2, r5
 800c10c:	fb05 2516 	mls	r5, r5, r6, r2
 800c110:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c112:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c114:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c116:	fbb3 f2f1 	udiv	r2, r3, r1
 800c11a:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c11e:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c120:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c122:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c124:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c126:	9500      	str	r5, [sp, #0]
 800c128:	69e2      	ldr	r2, [r4, #28]
 800c12a:	f001 f848 	bl	800d1be <HAL_MDMA_Start_IT>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d1e3      	bne.n	800c0fa <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	9500      	str	r5, [sp, #0]
 800c136:	3240      	adds	r2, #64	@ 0x40
 800c138:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c13a:	69a1      	ldr	r1, [r4, #24]
 800c13c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c13e:	f001 f83e 	bl	800d1be <HAL_MDMA_Start_IT>
 800c142:	2800      	cmp	r0, #0
 800c144:	d0de      	beq.n	800c104 <JPEG_DMA_StartProcess+0x38>
 800c146:	e7d8      	b.n	800c0fa <JPEG_DMA_StartProcess+0x2e>
 800c148:	0800c68f 	.word	0x0800c68f
 800c14c:	0800c587 	.word	0x0800c587
 800c150:	0800cb4d 	.word	0x0800cb4d
 800c154:	0800cb3f 	.word	0x0800cb3f

0800c158 <HAL_JPEG_Init>:
{
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800c15a:	4605      	mov	r5, r0
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f000 80f2 	beq.w	800c346 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800c162:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800c166:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c16a:	b91b      	cbnz	r3, 800c174 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800c16c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800c170:	f7f4 ffa0 	bl	80010b4 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800c174:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800c176:	2302      	movs	r3, #2
 800c178:	4a86      	ldr	r2, [pc, #536]	@ (800c394 <HAL_JPEG_Init+0x23c>)
 800c17a:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800c17e:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800c182:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c184:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800c188:	f043 0301 	orr.w	r3, r3, #1
 800c18c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	f023 0301 	bic.w	r3, r3, #1
 800c194:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c196:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c198:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800c19c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c19e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c1a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c1a4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c1a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c1a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c1ac:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c1ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c1b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c1b4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800c1b6:	4b78      	ldr	r3, [pc, #480]	@ (800c398 <HAL_JPEG_Init+0x240>)
 800c1b8:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800c1ba:	4b78      	ldr	r3, [pc, #480]	@ (800c39c <HAL_JPEG_Init+0x244>)
 800c1bc:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800c1be:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800c1c0:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c1c4:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800c1c6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c1c8:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c1ca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c1cc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c1d0:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c1d2:	4333      	orrs	r3, r6
 800c1d4:	7c56      	ldrb	r6, [r2, #17]
 800c1d6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c1da:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c1de:	4281      	cmp	r1, r0
 800c1e0:	d1f0      	bne.n	800c1c4 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c1e2:	4b6f      	ldr	r3, [pc, #444]	@ (800c3a0 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c1e4:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800c1e8:	4a6e      	ldr	r2, [pc, #440]	@ (800c3a4 <HAL_JPEG_Init+0x24c>)
 800c1ea:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c1ee:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800c1f2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c1f6:	4610      	mov	r0, r2
 800c1f8:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c1fa:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800c1fe:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c202:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c206:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800c208:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c20a:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c20e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c210:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c214:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c218:	ea43 030c 	orr.w	r3, r3, ip
 800c21c:	f890 c011 	ldrb.w	ip, [r0, #17]
 800c220:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c224:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800c228:	42be      	cmp	r6, r7
 800c22a:	d1ec      	bne.n	800c206 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800c22c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c230:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800c234:	0c1b      	lsrs	r3, r3, #16
 800c236:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c238:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800c23c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800c240:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c244:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800c248:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c24a:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c24e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c250:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c254:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c258:	4333      	orrs	r3, r6
 800c25a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800c25e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c262:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c266:	4281      	cmp	r1, r0
 800c268:	d1ec      	bne.n	800c244 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800c26a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800c26e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800c272:	4a4d      	ldr	r2, [pc, #308]	@ (800c3a8 <HAL_JPEG_Init+0x250>)
 800c274:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800c278:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c27a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800c27e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800c282:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c286:	4013      	ands	r3, r2
  *address = value;
 800c288:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c28c:	2301      	movs	r3, #1
 800c28e:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800c292:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800c296:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800c29a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800c29e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c2a2:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c2a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c2a8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800c2ac:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c2b0:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c2b2:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800c2b6:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800c2ba:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c2be:	4b3b      	ldr	r3, [pc, #236]	@ (800c3ac <HAL_JPEG_Init+0x254>)
 800c2c0:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800c2c4:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c2c8:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800c2cc:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c2d0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c2d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800c2d6:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800c2da:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c2de:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c2e0:	4a33      	ldr	r2, [pc, #204]	@ (800c3b0 <HAL_JPEG_Init+0x258>)
 800c2e2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800c2e6:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800c2ea:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c2ee:	4b31      	ldr	r3, [pc, #196]	@ (800c3b4 <HAL_JPEG_Init+0x25c>)
 800c2f0:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800c2f4:	4b30      	ldr	r3, [pc, #192]	@ (800c3b8 <HAL_JPEG_Init+0x260>)
 800c2f6:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800c2fa:	4b30      	ldr	r3, [pc, #192]	@ (800c3bc <HAL_JPEG_Init+0x264>)
 800c2fc:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800c300:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c304:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c30a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c30e:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800c312:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c314:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c318:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c31a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c31e:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c322:	4333      	orrs	r3, r6
 800c324:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800c328:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c32c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c330:	4281      	cmp	r1, r0
 800c332:	d1ec      	bne.n	800c30e <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c334:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800c338:	491a      	ldr	r1, [pc, #104]	@ (800c3a4 <HAL_JPEG_Init+0x24c>)
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7ff fe12 	bl	800bf64 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c340:	b118      	cbz	r0, 800c34a <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800c342:	2301      	movs	r3, #1
 800c344:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800c346:	2001      	movs	r0, #1
}
 800c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c34a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800c34e:	4918      	ldr	r1, [pc, #96]	@ (800c3b0 <HAL_JPEG_Init+0x258>)
 800c350:	4628      	mov	r0, r5
 800c352:	f7ff fe07 	bl	800bf64 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c356:	2800      	cmp	r0, #0
 800c358:	d1f3      	bne.n	800c342 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c35a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800c35e:	490d      	ldr	r1, [pc, #52]	@ (800c394 <HAL_JPEG_Init+0x23c>)
 800c360:	4628      	mov	r0, r5
 800c362:	f7ff fdc7 	bl	800bef4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800c366:	2800      	cmp	r0, #0
 800c368:	d1eb      	bne.n	800c342 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c36a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800c36e:	4914      	ldr	r1, [pc, #80]	@ (800c3c0 <HAL_JPEG_Init+0x268>)
 800c370:	4628      	mov	r0, r5
 800c372:	f7ff fdbf 	bl	800bef4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800c376:	2800      	cmp	r0, #0
 800c378:	d1e3      	bne.n	800c342 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800c37a:	6863      	ldr	r3, [r4, #4]
 800c37c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c380:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c382:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800c384:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800c386:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c388:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800c38c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800c38e:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800c390:	e7da      	b.n	800c348 <HAL_JPEG_Init+0x1f0>
 800c392:	bf00      	nop
 800c394:	0802ca10 	.word	0x0802ca10
 800c398:	0802c810 	.word	0x0802c810
 800c39c:	0802c7d0 	.word	0x0802c7d0
 800c3a0:	0b0a0908 	.word	0x0b0a0908
 800c3a4:	0802c942 	.word	0x0802c942
 800c3a8:	ffff0000 	.word	0xffff0000
 800c3ac:	09080706 	.word	0x09080706
 800c3b0:	0802c890 	.word	0x0802c890
 800c3b4:	01000404 	.word	0x01000404
 800c3b8:	05070403 	.word	0x05070403
 800c3bc:	04040201 	.word	0x04040201
 800c3c0:	0802c9f4 	.word	0x0802c9f4

0800c3c4 <HAL_JPEG_GetInfo>:
{
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d06f      	beq.n	800c4ac <HAL_JPEG_GetInfo+0xe8>
 800c3cc:	2900      	cmp	r1, #0
 800c3ce:	d06d      	beq.n	800c4ac <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800c3d0:	6804      	ldr	r4, [r0, #0]
 800c3d2:	6863      	ldr	r3, [r4, #4]
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d047      	beq.n	800c46c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800c3dc:	6863      	ldr	r3, [r4, #4]
 800c3de:	f013 0303 	ands.w	r3, r3, #3
 800c3e2:	d005      	beq.n	800c3f0 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800c3e4:	6863      	ldr	r3, [r4, #4]
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d15e      	bne.n	800c4ac <HAL_JPEG_GetInfo+0xe8>
 800c3ee:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c3f0:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800c3f2:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c3f4:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c3f8:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c3fa:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c3fc:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800c3fe:	68e2      	ldr	r2, [r4, #12]
 800c400:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c404:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c406:	d13c      	bne.n	800c482 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c408:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c40a:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c40c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c410:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c412:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c414:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c416:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c41a:	d129      	bne.n	800c470 <HAL_JPEG_GetInfo+0xac>
 800c41c:	4313      	orrs	r3, r2
 800c41e:	f013 0f0f 	tst.w	r3, #15
 800c422:	bf0c      	ite	eq
 800c424:	2301      	moveq	r3, #1
 800c426:	2300      	movne	r3, #0
 800c428:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800c42a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	3450      	adds	r4, #80	@ 0x50
 800c430:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800c4b0 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800c434:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c436:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800c43a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800c43e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800c442:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800c446:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c448:	fa29 f206 	lsr.w	r2, r9, r6
 800c44c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800c44e:	2a01      	cmp	r2, #1
 800c450:	d119      	bne.n	800c486 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800c452:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800c454:	3608      	adds	r6, #8
 800c456:	3701      	adds	r7, #1
 800c458:	2e20      	cmp	r6, #32
 800c45a:	d1f5      	bne.n	800c448 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800c45c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c45e:	2d40      	cmp	r5, #64	@ 0x40
 800c460:	d1ed      	bne.n	800c43e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800c462:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800c464:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800c466:	610b      	str	r3, [r1, #16]
}
 800c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46c:	2310      	movs	r3, #16
 800c46e:	e7bf      	b.n	800c3f0 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c470:	2d03      	cmp	r5, #3
 800c472:	d106      	bne.n	800c482 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c474:	4313      	orrs	r3, r2
 800c476:	f013 0f0f 	tst.w	r3, #15
 800c47a:	bf0c      	ite	eq
 800c47c:	2301      	moveq	r3, #1
 800c47e:	2300      	movne	r3, #0
 800c480:	e7d3      	b.n	800c42a <HAL_JPEG_GetInfo+0x66>
 800c482:	2300      	movs	r3, #0
 800c484:	e7d1      	b.n	800c42a <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c486:	fb0e fb02 	mul.w	fp, lr, r2
 800c48a:	f897 a000 	ldrb.w	sl, [r7]
 800c48e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c490:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800c494:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800c498:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800c49a:	bf8b      	itete	hi
 800c49c:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800c4a0:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800c4a4:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800c4a6:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800c4aa:	e7d3      	b.n	800c454 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	e7db      	b.n	800c468 <HAL_JPEG_GetInfo+0xa4>
 800c4b0:	0802c850 	.word	0x0802c850

0800c4b4 <HAL_JPEG_Decode_DMA>:
{
 800c4b4:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	b348      	cbz	r0, 800c50e <HAL_JPEG_Decode_DMA+0x5a>
 800c4ba:	b341      	cbz	r1, 800c50e <HAL_JPEG_Decode_DMA+0x5a>
 800c4bc:	b33b      	cbz	r3, 800c50e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800c4be:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800c4c2:	2d01      	cmp	r5, #1
 800c4c4:	d028      	beq.n	800c518 <HAL_JPEG_Decode_DMA+0x64>
 800c4c6:	2501      	movs	r5, #1
 800c4c8:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800c4cc:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800c4d0:	2d01      	cmp	r5, #1
 800c4d2:	d11e      	bne.n	800c512 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c4d4:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800c4d6:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c4d8:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800c4dc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c4de:	f025 050f 	bic.w	r5, r5, #15
 800c4e2:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c4e4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c4e6:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800c4ea:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c4ee:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800c4f0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800c4f2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800c4f4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800c4f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800c4f8:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800c4fa:	f7ff fdab 	bl	800c054 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800c4fe:	f7ff fde5 	bl	800c0cc <JPEG_DMA_StartProcess>
 800c502:	b128      	cbz	r0, 800c510 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c504:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800c506:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c50a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800c50e:	2001      	movs	r0, #1
}
 800c510:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800c512:	2300      	movs	r3, #0
 800c514:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800c518:	2002      	movs	r0, #2
 800c51a:	e7f9      	b.n	800c510 <HAL_JPEG_Decode_DMA+0x5c>

0800c51c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c51c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c51e:	f003 030c 	and.w	r3, r3, #12
 800c522:	2b0c      	cmp	r3, #12
 800c524:	d10d      	bne.n	800c542 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c526:	07cb      	lsls	r3, r1, #31
 800c528:	d503      	bpl.n	800c532 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c52a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c52c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c530:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c532:	0789      	lsls	r1, r1, #30
 800c534:	d503      	bpl.n	800c53e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c536:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c538:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c53c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800c53e:	2000      	movs	r0, #0
 800c540:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c542:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c544:	f003 030c 	and.w	r3, r3, #12
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d1f8      	bne.n	800c53e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c54c:	f011 0301 	ands.w	r3, r1, #1
 800c550:	d004      	beq.n	800c55c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c552:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c558:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c55a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c55c:	078a      	lsls	r2, r1, #30
 800c55e:	d505      	bpl.n	800c56c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c560:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c562:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c566:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c56a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800c56c:	6801      	ldr	r1, [r0, #0]
 800c56e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c570:	ea22 0303 	bic.w	r3, r2, r3
 800c574:	630b      	str	r3, [r1, #48]	@ 0x30
 800c576:	e7e2      	b.n	800c53e <HAL_JPEG_Pause+0x22>

0800c578 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800c578:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800c57a:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800c57c:	4770      	bx	lr

0800c57e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800c57e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800c580:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800c582:	4770      	bx	lr

0800c584 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800c584:	4770      	bx	lr

0800c586 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c586:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800c588:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c58a:	6803      	ldr	r3, [r0, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	f022 0201 	bic.w	r2, r2, #1
 800c592:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c596:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c59a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c59c:	2301      	movs	r3, #1
 800c59e:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c5a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c5a4:	f043 0304 	orr.w	r3, r3, #4
 800c5a8:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800c5aa:	f7f6 f873 	bl	8002694 <HAL_JPEG_ErrorCallback>
}
 800c5ae:	bd08      	pop	{r3, pc}

0800c5b0 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c5b0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800c5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c5b8:	b922      	cbnz	r2, 800c5c4 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	f7ff ffae 	bl	800c51c <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	e004      	b.n	800c5ce <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c5c4:	6a03      	ldr	r3, [r0, #32]
 800c5c6:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c5c8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c5ca:	d924      	bls.n	800c616 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c5cc:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c5ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c5d0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800c5d4:	d11e      	bne.n	800c614 <JPEG_ReadInputData+0x64>
 800c5d6:	b1ea      	cbz	r2, 800c614 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800c5d8:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800c5dc:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800c5de:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800c5e2:	d827      	bhi.n	800c634 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c5e4:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800c5e6:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c5e8:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c5ea:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c5ec:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800c5ee:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c5f0:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c5f2:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c5f6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c5fa:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c5fc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c600:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c604:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c608:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800c60a:	6a22      	ldr	r2, [r4, #32]
 800c60c:	f102 0204 	add.w	r2, r2, #4
 800c610:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c612:	d1e8      	bne.n	800c5e6 <JPEG_ReadInputData+0x36>
}
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c616:	429a      	cmp	r2, r3
 800c618:	d1d2      	bne.n	800c5c0 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c61a:	6a01      	ldr	r1, [r0, #32]
 800c61c:	f7f5 ffcc 	bl	80025b8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800c620:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c622:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c624:	bf84      	itt	hi
 800c626:	f023 0303 	bichi.w	r3, r3, #3
 800c62a:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c62c:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800c62e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c630:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800c632:	e7cc      	b.n	800c5ce <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800c634:	2a03      	cmp	r2, #3
 800c636:	d918      	bls.n	800c66a <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c638:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800c63a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c63c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c63e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c640:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800c642:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c644:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c646:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c64a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c64e:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c650:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c654:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c658:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c65c:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c65e:	6a22      	ldr	r2, [r4, #32]
 800c660:	f102 0204 	add.w	r2, r2, #4
 800c664:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c666:	d1e8      	bne.n	800c63a <JPEG_ReadInputData+0x8a>
 800c668:	e7d4      	b.n	800c614 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800c66a:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c66c:	6a25      	ldr	r5, [r4, #32]
 800c66e:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800c670:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c672:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800c674:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c676:	fa05 f506 	lsl.w	r5, r5, r6
 800c67a:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800c67e:	6a25      	ldr	r5, [r4, #32]
 800c680:	f105 0501 	add.w	r5, r5, #1
 800c684:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800c686:	d1f1      	bne.n	800c66c <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800c688:	6822      	ldr	r2, [r4, #0]
 800c68a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800c68c:	e7c2      	b.n	800c614 <JPEG_ReadInputData+0x64>

0800c68e <JPEG_MDMAInCpltCallback>:
{
 800c68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c690:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c696:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800c69a:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c69c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c69e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c6a2:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800c6a6:	041b      	lsls	r3, r3, #16
 800c6a8:	0c1b      	lsrs	r3, r3, #16
 800c6aa:	2b0c      	cmp	r3, #12
 800c6ac:	d11a      	bne.n	800c6e4 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c6ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c6b0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c6b2:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c6b4:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c6b6:	695a      	ldr	r2, [r3, #20]
 800c6b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c6ba:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800c6be:	1a9b      	subs	r3, r3, r2
 800c6c0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c6c2:	6a21      	ldr	r1, [r4, #32]
 800c6c4:	f7f5 ff78 	bl	80025b8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800c6c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c6ca:	42ab      	cmp	r3, r5
 800c6cc:	d327      	bcc.n	800c71e <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800c6ce:	b95d      	cbnz	r5, 800c6e8 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c6d0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800c6d2:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c6d4:	f043 0304 	orr.w	r3, r3, #4
 800c6d8:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c6da:	2306      	movs	r3, #6
 800c6dc:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800c6e0:	f7f5 ffd8 	bl	8002694 <HAL_JPEG_ErrorCallback>
}
 800c6e4:	b003      	add	sp, #12
 800c6e6:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c6e8:	fbb3 f2f5 	udiv	r2, r3, r5
 800c6ec:	fb05 3212 	mls	r2, r5, r2, r3
 800c6f0:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c6f2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c6f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c6f6:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c6f8:	04db      	lsls	r3, r3, #19
 800c6fa:	d40a      	bmi.n	800c712 <JPEG_MDMAInCpltCallback+0x84>
 800c6fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c6fe:	b143      	cbz	r3, 800c712 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c700:	2101      	movs	r1, #1
 800c702:	3240      	adds	r2, #64	@ 0x40
 800c704:	9100      	str	r1, [sp, #0]
 800c706:	69a1      	ldr	r1, [r4, #24]
 800c708:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c70a:	f000 fd58 	bl	800d1be <HAL_MDMA_Start_IT>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d1de      	bne.n	800c6d0 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c712:	6822      	ldr	r2, [r4, #0]
 800c714:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c716:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c71a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c71c:	e7e2      	b.n	800c6e4 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0e8      	beq.n	800c6f4 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c722:	079a      	lsls	r2, r3, #30
 800c724:	d0e6      	beq.n	800c6f4 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	3304      	adds	r3, #4
 800c72c:	e7e1      	b.n	800c6f2 <JPEG_MDMAInCpltCallback+0x64>

0800c72e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c72e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c732:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c736:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800c738:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d32a      	bcc.n	800c794 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800c73e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c740:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800c742:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c744:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800c746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800c748:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c74a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c74c:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c74e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c750:	69e0      	ldr	r0, [r4, #28]
 800c752:	4428      	add	r0, r5
 800c754:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800c758:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c75a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c75c:	69e0      	ldr	r0, [r4, #28]
 800c75e:	4428      	add	r0, r5
 800c760:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c764:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c768:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c76a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c76c:	69e0      	ldr	r0, [r4, #28]
 800c76e:	4428      	add	r0, r5
 800c770:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800c772:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c774:	f103 0304 	add.w	r3, r3, #4
 800c778:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c77a:	d1e1      	bne.n	800c740 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c77c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c77e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c780:	429a      	cmp	r2, r3
 800c782:	d106      	bne.n	800c792 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c784:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c786:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c788:	4620      	mov	r0, r4
 800c78a:	f7f5 ff33 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800c792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c794:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800c796:	4293      	cmp	r3, r2
 800c798:	d9fb      	bls.n	800c792 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c79a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c79c:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c79e:	1a9b      	subs	r3, r3, r2
 800c7a0:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800c7a2:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c7a4:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800c7a6:	d105      	bne.n	800c7b4 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c7a8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c7aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c7ac:	429f      	cmp	r7, r3
 800c7ae:	d119      	bne.n	800c7e4 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c7b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7b2:	e7e9      	b.n	800c788 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800c7b4:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800c7b6:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800c7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c7ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c7bc:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c7be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c7c0:	69e1      	ldr	r1, [r4, #28]
 800c7c2:	4429      	add	r1, r5
 800c7c4:	0a1d      	lsrs	r5, r3, #8
 800c7c6:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c7c8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c7ca:	69e1      	ldr	r1, [r4, #28]
 800c7cc:	4429      	add	r1, r5
 800c7ce:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c7d0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c7d2:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c7d4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c7d6:	69e1      	ldr	r1, [r4, #28]
 800c7d8:	4429      	add	r1, r5
 800c7da:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800c7dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c7de:	3304      	adds	r3, #4
 800c7e0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c7e2:	e7de      	b.n	800c7a2 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c7e4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c7e6:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c7e8:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c7ea:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800c7ec:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800c7ee:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c7f0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800c7f2:	d114      	bne.n	800c81e <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c7f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f7f5 fefc 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800c800:	1d2b      	adds	r3, r5, #4
 800c802:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800c804:	2b03      	cmp	r3, #3
 800c806:	d8c4      	bhi.n	800c792 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c808:	00da      	lsls	r2, r3, #3
 800c80a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c80c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800c80e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c810:	fa26 f202 	lsr.w	r2, r6, r2
 800c814:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800c816:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c818:	3201      	adds	r2, #1
 800c81a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c81c:	e7f2      	b.n	800c804 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c81e:	f002 0303 	and.w	r3, r2, #3
 800c822:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c826:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	fa26 f303 	lsr.w	r3, r6, r3
 800c82e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800c832:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c834:	3301      	adds	r3, #1
 800c836:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c838:	e7d9      	b.n	800c7ee <JPEG_StoreOutputData+0xc0>

0800c83a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c83a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c83c:	f003 0303 	and.w	r3, r3, #3
 800c840:	2b02      	cmp	r3, #2
{
 800c842:	b510      	push	{r4, lr}
 800c844:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c846:	d114      	bne.n	800c872 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c848:	6803      	ldr	r3, [r0, #0]
 800c84a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c84c:	065b      	lsls	r3, r3, #25
 800c84e:	d510      	bpl.n	800c872 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c850:	1d01      	adds	r1, r0, #4
 800c852:	f7ff fdb7 	bl	800c3c4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800c856:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c858:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800c85a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c85c:	f7f5 fe76 	bl	800254c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c868:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c86a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c86c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c870:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800c872:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c874:	04d9      	lsls	r1, r3, #19
 800c876:	d407      	bmi.n	800c888 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c87c:	0792      	lsls	r2, r2, #30
 800c87e:	d544      	bpl.n	800c90a <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c880:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff fe94 	bl	800c5b0 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c888:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c88a:	0499      	lsls	r1, r3, #18
 800c88c:	d407      	bmi.n	800c89e <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c892:	0712      	lsls	r2, r2, #28
 800c894:	d53e      	bpl.n	800c914 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c896:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800c898:	4620      	mov	r0, r4
 800c89a:	f7ff ff48 	bl	800c72e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8a2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c8a6:	2a20      	cmp	r2, #32
 800c8a8:	d13c      	bne.n	800c924 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	f022 0201 	bic.w	r2, r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c8b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8b4:	f002 020c 	and.w	r2, r2, #12
 800c8b8:	2a08      	cmp	r2, #8
 800c8ba:	d103      	bne.n	800c8c4 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c8bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8be:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c8c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c8c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8c6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c8ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800c8cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c8ce:	b133      	cbz	r3, 800c8de <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c8d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	69e1      	ldr	r1, [r4, #28]
 800c8d6:	f7f5 fe8d 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800c8de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c8e0:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c8e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c8e4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c8e8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c8ec:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c8ee:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c8f8:	f04f 0201 	mov.w	r2, #1
 800c8fc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c900:	d10d      	bne.n	800c91e <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c902:	f7f5 fec9 	bl	8002698 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800c906:	2001      	movs	r0, #1
}
 800c908:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800c90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90c:	0758      	lsls	r0, r3, #29
 800c90e:	d5bb      	bpl.n	800c888 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800c910:	2101      	movs	r1, #1
 800c912:	e7b6      	b.n	800c882 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c916:	06db      	lsls	r3, r3, #27
 800c918:	d5c1      	bpl.n	800c89e <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800c91a:	2101      	movs	r1, #1
 800c91c:	e7bc      	b.n	800c898 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c91e:	f7ff fe31 	bl	800c584 <HAL_JPEG_EncodeCpltCallback>
 800c922:	e7f0      	b.n	800c906 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800c924:	2000      	movs	r0, #0
 800c926:	e7ef      	b.n	800c908 <JPEG_Process+0xce>

0800c928 <JPEG_DMA_PollResidualData>:
{
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	4604      	mov	r4, r0
 800c92c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c92e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c930:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c932:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800c936:	d122      	bne.n	800c97e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c93a:	06d0      	lsls	r0, r2, #27
 800c93c:	d51f      	bpl.n	800c97e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800c93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c940:	69e1      	ldr	r1, [r4, #28]
 800c942:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c944:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c946:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c948:	69e2      	ldr	r2, [r4, #28]
 800c94a:	440a      	add	r2, r1
 800c94c:	0a19      	lsrs	r1, r3, #8
 800c94e:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c950:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c952:	69e2      	ldr	r2, [r4, #28]
 800c954:	440a      	add	r2, r1
 800c956:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c958:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c95a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c95c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c95e:	69e2      	ldr	r2, [r4, #28]
 800c960:	440a      	add	r2, r1
 800c962:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800c964:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c966:	3304      	adds	r3, #4
 800c968:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c96a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c96c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c96e:	429a      	cmp	r2, r3
 800c970:	d105      	bne.n	800c97e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c972:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c974:	4620      	mov	r0, r4
 800c976:	69e1      	ldr	r1, [r4, #28]
 800c978:	f7f5 fe3c 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800c97c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c97e:	3e01      	subs	r6, #1
 800c980:	d1d5      	bne.n	800c92e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c982:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800c984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c986:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c988:	06c9      	lsls	r1, r1, #27
 800c98a:	d501      	bpl.n	800c990 <JPEG_DMA_PollResidualData+0x68>
 800c98c:	0492      	lsls	r2, r2, #18
 800c98e:	d420      	bmi.n	800c9d2 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	f022 0201 	bic.w	r2, r2, #1
 800c996:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800c998:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c99a:	b133      	cbz	r3, 800c9aa <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c99c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c99e:	4620      	mov	r0, r4
 800c9a0:	69e1      	ldr	r1, [r4, #28]
 800c9a2:	f7f5 fe27 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800c9aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c9ac:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9b0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9b4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9b8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9ba:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c9bc:	f04f 0200 	mov.w	r2, #0
 800c9c0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c9c4:	f04f 0201 	mov.w	r2, #1
 800c9c8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9cc:	d102      	bne.n	800c9d4 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c9ce:	f7f5 fe63 	bl	8002698 <HAL_JPEG_DecodeCpltCallback>
}
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c9d4:	f7ff fdd6 	bl	800c584 <HAL_JPEG_EncodeCpltCallback>
}
 800c9d8:	e7fb      	b.n	800c9d2 <JPEG_DMA_PollResidualData+0xaa>

0800c9da <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c9da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9dc:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800c9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c9e6:	d014      	beq.n	800ca12 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c9e8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9ea:	f003 030c 	and.w	r3, r3, #12
 800c9ee:	2b0c      	cmp	r3, #12
 800c9f0:	d146      	bne.n	800ca80 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c9f2:	07cb      	lsls	r3, r1, #31
 800c9f4:	d520      	bpl.n	800ca38 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800c9f6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9fc:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c9fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ca00:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800ca02:	b941      	cbnz	r1, 800ca16 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ca04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ca06:	f043 0304 	orr.w	r3, r3, #4
 800ca0a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ca0c:	2306      	movs	r3, #6
 800ca0e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ca12:	2001      	movs	r0, #1
 800ca14:	e01d      	b.n	800ca52 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ca16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ca18:	fbb3 f2f1 	udiv	r2, r3, r1
 800ca1c:	fb01 3212 	mls	r2, r1, r2, r3
 800ca20:	1a9b      	subs	r3, r3, r2
 800ca22:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800ca24:	b143      	cbz	r3, 800ca38 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	2101      	movs	r1, #1
 800ca2a:	3240      	adds	r2, #64	@ 0x40
 800ca2c:	9100      	str	r1, [sp, #0]
 800ca2e:	69a1      	ldr	r1, [r4, #24]
 800ca30:	f000 fbc5 	bl	800d1be <HAL_MDMA_Start_IT>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d1e5      	bne.n	800ca04 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ca38:	07a8      	lsls	r0, r5, #30
 800ca3a:	d509      	bpl.n	800ca50 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ca3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca42:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ca44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca46:	0419      	lsls	r1, r3, #16
 800ca48:	d505      	bpl.n	800ca56 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7ff ff6c 	bl	800c928 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800ca50:	2000      	movs	r0, #0
}
 800ca52:	b003      	add	sp, #12
 800ca54:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ca56:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ca58:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	d0d2      	beq.n	800ca04 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ca5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca60:	fbb3 f2f1 	udiv	r2, r3, r1
 800ca64:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ca68:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ca6a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ca70:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ca72:	9200      	str	r2, [sp, #0]
 800ca74:	69e2      	ldr	r2, [r4, #28]
 800ca76:	f000 fba2 	bl	800d1be <HAL_MDMA_Start_IT>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d0e8      	beq.n	800ca50 <HAL_JPEG_Resume+0x76>
 800ca7e:	e7c1      	b.n	800ca04 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ca80:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ca82:	f003 030c 	and.w	r3, r3, #12
 800ca86:	2b08      	cmp	r3, #8
 800ca88:	d1e2      	bne.n	800ca50 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ca8a:	f011 0301 	ands.w	r3, r1, #1
 800ca8e:	d004      	beq.n	800ca9a <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ca90:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ca92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca96:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ca98:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ca9a:	07aa      	lsls	r2, r5, #30
 800ca9c:	d505      	bpl.n	800caaa <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ca9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800caa0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800caa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800caa8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800caaa:	6821      	ldr	r1, [r4, #0]
 800caac:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800caae:	4313      	orrs	r3, r2
 800cab0:	630b      	str	r3, [r1, #48]	@ 0x30
 800cab2:	e7cd      	b.n	800ca50 <HAL_JPEG_Resume+0x76>

0800cab4 <JPEG_DMA_EndProcess>:
{
 800cab4:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cab6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800cab8:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800caba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cac8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800caca:	429a      	cmp	r2, r3
 800cacc:	d105      	bne.n	800cada <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cace:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800cad0:	69c1      	ldr	r1, [r0, #28]
 800cad2:	f7f5 fd8f 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800cade:	f015 0510 	ands.w	r5, r5, #16
 800cae2:	d124      	bne.n	800cb2e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800cae4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cae6:	b12b      	cbz	r3, 800caf4 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cae8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800caea:	4620      	mov	r0, r4
 800caec:	69e1      	ldr	r1, [r4, #28]
 800caee:	f7f5 fd81 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800caf2:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800caf4:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800caf6:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800caf8:	6813      	ldr	r3, [r2, #0]
 800cafa:	f023 0301 	bic.w	r3, r3, #1
 800cafe:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800cb00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cb04:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb08:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cb0c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb0e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800cb10:	f04f 0200 	mov.w	r2, #0
 800cb14:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cb18:	f04f 0201 	mov.w	r2, #1
 800cb1c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cb20:	d102      	bne.n	800cb28 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cb22:	f7f5 fdb9 	bl	8002698 <HAL_JPEG_DecodeCpltCallback>
}
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cb28:	f7ff fd2c 	bl	800c584 <HAL_JPEG_EncodeCpltCallback>
 800cb2c:	e7fb      	b.n	800cb26 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cb2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb30:	049b      	lsls	r3, r3, #18
 800cb32:	d4f8      	bmi.n	800cb26 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800cb34:	4620      	mov	r0, r4
}
 800cb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800cb3a:	f7ff bef5 	b.w	800c928 <JPEG_DMA_PollResidualData>

0800cb3e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cb3e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800cb40:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cb42:	041b      	lsls	r3, r3, #16
 800cb44:	d501      	bpl.n	800cb4a <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800cb46:	f7ff bfb5 	b.w	800cab4 <JPEG_DMA_EndProcess>
}
 800cb4a:	4770      	bx	lr

0800cb4c <JPEG_MDMAOutCpltCallback>:
{
 800cb4c:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cb4e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb54:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cb58:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800cb5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb5c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800cb60:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800cb64:	0412      	lsls	r2, r2, #16
 800cb66:	0c12      	lsrs	r2, r2, #16
 800cb68:	2a0c      	cmp	r2, #12
 800cb6a:	d125      	bne.n	800cbb8 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800cb6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6e:	069a      	lsls	r2, r3, #26
 800cb70:	d424      	bmi.n	800cbbc <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cb72:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cb74:	4620      	mov	r0, r4
 800cb76:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cb78:	695a      	ldr	r2, [r3, #20]
 800cb7a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb7c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cb84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cb86:	f7f5 fd35 	bl	80025f4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cb8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb8c:	049b      	lsls	r3, r3, #18
 800cb8e:	d415      	bmi.n	800cbbc <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cb90:	6821      	ldr	r1, [r4, #0]
 800cb92:	2301      	movs	r3, #1
 800cb94:	3144      	adds	r1, #68	@ 0x44
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb9a:	69e2      	ldr	r2, [r4, #28]
 800cb9c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cb9e:	f000 fb0e 	bl	800d1be <HAL_MDMA_Start_IT>
 800cba2:	b158      	cbz	r0, 800cbbc <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cba4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800cba6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cba8:	f043 0304 	orr.w	r3, r3, #4
 800cbac:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800cbae:	2306      	movs	r3, #6
 800cbb0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800cbb4:	f7f5 fd6e 	bl	8002694 <HAL_JPEG_ErrorCallback>
}
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800cbc0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cbc4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbc6:	e7f7      	b.n	800cbb8 <JPEG_MDMAOutCpltCallback+0x6c>

0800cbc8 <HAL_JPEG_IRQHandler>:
{
 800cbc8:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800cbca:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800cbce:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800cbd0:	3b03      	subs	r3, #3
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d850      	bhi.n	800cc78 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cbd6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cbd8:	f003 030c 	and.w	r3, r3, #12
 800cbdc:	2b08      	cmp	r3, #8
 800cbde:	d103      	bne.n	800cbe8 <HAL_JPEG_IRQHandler+0x20>
}
 800cbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800cbe4:	f7ff be29 	b.w	800c83a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800cbe8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cbea:	f003 030c 	and.w	r3, r3, #12
 800cbee:	2b0c      	cmp	r3, #12
 800cbf0:	d142      	bne.n	800cc78 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cbf2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cbf4:	f003 0303 	and.w	r3, r3, #3
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d114      	bne.n	800cc26 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800cbfc:	6803      	ldr	r3, [r0, #0]
 800cbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc00:	0659      	lsls	r1, r3, #25
 800cc02:	d510      	bpl.n	800cc26 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800cc04:	1d01      	adds	r1, r0, #4
 800cc06:	f7ff fbdd 	bl	800c3c4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800cc0a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cc0c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800cc0e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cc10:	f7f5 fc9c 	bl	800254c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc1c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800cc1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc24:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc2a:	0692      	lsls	r2, r2, #26
 800cc2c:	d524      	bpl.n	800cc78 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800cc2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800cc30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800cc32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc36:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	f022 0201 	bic.w	r2, r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cc40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc42:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cc46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cc48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc4a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cc4e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800cc50:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d101      	bne.n	800cc5c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800cc58:	f000 fafa 	bl	800d250 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800cc5c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cc5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d103      	bne.n	800cc6e <HAL_JPEG_IRQHandler+0xa6>
}
 800cc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800cc6a:	f000 baf1 	b.w	800d250 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800cc6e:	4620      	mov	r0, r4
}
 800cc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800cc74:	f7ff bf1e 	b.w	800cab4 <JPEG_DMA_EndProcess>
}
 800cc78:	bd10      	pop	{r4, pc}

0800cc7a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cc7a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cc7c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800cc7e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cc82:	3284      	adds	r2, #132	@ 0x84
 800cc84:	1883      	adds	r3, r0, r2
{
 800cc86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cc8a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cc8c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cc90:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cc92:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cc96:	684c      	ldr	r4, [r1, #4]
 800cc98:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cc9c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800cca0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cca4:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cca6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cca8:	68c5      	ldr	r5, [r0, #12]
 800ccaa:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800ccae:	443d      	add	r5, r7
 800ccb0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ccb4:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ccb6:	68c6      	ldr	r6, [r0, #12]
 800ccb8:	68cd      	ldr	r5, [r1, #12]
 800ccba:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800ccbe:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ccc0:	689d      	ldr	r5, [r3, #8]
 800ccc2:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800ccc6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ccc8:	688d      	ldr	r5, [r1, #8]
 800ccca:	68c7      	ldr	r7, [r0, #12]
 800cccc:	3501      	adds	r5, #1
 800ccce:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800ccd2:	443d      	add	r5, r7
 800ccd4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ccd8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ccda:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ccdc:	691d      	ldr	r5, [r3, #16]
 800ccde:	f025 0507 	bic.w	r5, r5, #7
 800cce2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cce4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cce6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800cce8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ccec:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ccf0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ccf4:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800ccf8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800ccfc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800cd00:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800cd04:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800cd06:	695d      	ldr	r5, [r3, #20]
 800cd08:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800cd0c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800cd0e:	694d      	ldr	r5, [r1, #20]
 800cd10:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800cd12:	69dd      	ldr	r5, [r3, #28]
 800cd14:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800cd18:	f025 0507 	bic.w	r5, r5, #7
 800cd1c:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800cd1e:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800cd22:	433d      	orrs	r5, r7
 800cd24:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cd26:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cd28:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cd2a:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cd2e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cd30:	b31e      	cbz	r6, 800cd7a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cd32:	2e01      	cmp	r6, #1
 800cd34:	d023      	beq.n	800cd7e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cd36:	1eb5      	subs	r5, r6, #2
 800cd38:	2d02      	cmp	r5, #2
 800cd3a:	d922      	bls.n	800cd82 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800cd3c:	2e07      	cmp	r6, #7
 800cd3e:	bf14      	ite	ne
 800cd40:	2501      	movne	r5, #1
 800cd42:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cd44:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cd46:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cd4a:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cd4e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cd50:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cd52:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800cd54:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cd56:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800cd58:	436e      	muls	r6, r5
 800cd5a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800cd5e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cd60:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800cd62:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800cd66:	f024 0407 	bic.w	r4, r4, #7
 800cd6a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cd6c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cd6e:	5883      	ldr	r3, [r0, r2]
 800cd70:	f043 0301 	orr.w	r3, r3, #1
 800cd74:	5083      	str	r3, [r0, r2]
}
 800cd76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800cd7a:	2504      	movs	r5, #4
 800cd7c:	e7e2      	b.n	800cd44 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800cd7e:	2503      	movs	r5, #3
 800cd80:	e7e0      	b.n	800cd44 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800cd82:	2502      	movs	r5, #2
 800cd84:	e7de      	b.n	800cd44 <LTDC_SetConfig+0xca>
	...

0800cd88 <HAL_LTDC_Init>:
{
 800cd88:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d063      	beq.n	800ce58 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cd90:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800cd94:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cd98:	b91b      	cbnz	r3, 800cda2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800cd9a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800cd9e:	f7f4 fa0f 	bl	80011c0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cda2:	2302      	movs	r3, #2
 800cda4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800cdb0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdb2:	6999      	ldr	r1, [r3, #24]
 800cdb4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800cdb8:	4302      	orrs	r2, r0
 800cdba:	68e0      	ldr	r0, [r4, #12]
 800cdbc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cdbe:	6920      	ldr	r0, [r4, #16]
 800cdc0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800cdc2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdc4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cdc6:	4925      	ldr	r1, [pc, #148]	@ (800ce5c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdc8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	400a      	ands	r2, r1
 800cdce:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cdd0:	689a      	ldr	r2, [r3, #8]
 800cdd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cdd6:	69a0      	ldr	r0, [r4, #24]
 800cdd8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800cdda:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cddc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800cdde:	68da      	ldr	r2, [r3, #12]
 800cde0:	400a      	ands	r2, r1
 800cde2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cdea:	6a20      	ldr	r0, [r4, #32]
 800cdec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800cdee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cdf0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800cdf2:	691a      	ldr	r2, [r3, #16]
 800cdf4:	400a      	ands	r2, r1
 800cdf6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800cdf8:	691a      	ldr	r2, [r3, #16]
 800cdfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cdfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ce00:	4302      	orrs	r2, r0
 800ce02:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ce04:	695a      	ldr	r2, [r3, #20]
 800ce06:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ce08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ce0a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ce0c:	695a      	ldr	r2, [r3, #20]
 800ce0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ce12:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ce14:	430a      	orrs	r2, r1
 800ce16:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ce18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ce1a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ce1e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ce22:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ce26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ce28:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800ce2a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800ce2e:	432a      	orrs	r2, r5
 800ce30:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ce34:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ce36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ce3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ce3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce3e:	f042 0206 	orr.w	r2, r2, #6
 800ce42:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800ce44:	699a      	ldr	r2, [r3, #24]
 800ce46:	f042 0201 	orr.w	r2, r2, #1
 800ce4a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800ce4c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ce4e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800ce52:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ce58:	2001      	movs	r0, #1
 800ce5a:	e7fc      	b.n	800ce56 <HAL_LTDC_Init+0xce>
 800ce5c:	f000f800 	.word	0xf000f800

0800ce60 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800ce60:	4770      	bx	lr

0800ce62 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800ce62:	4770      	bx	lr

0800ce64 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800ce64:	4770      	bx	lr

0800ce66 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ce66:	6803      	ldr	r3, [r0, #0]
{
 800ce68:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ce6a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800ce6c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ce6e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ce70:	0772      	lsls	r2, r6, #29
 800ce72:	d514      	bpl.n	800ce9e <HAL_LTDC_IRQHandler+0x38>
 800ce74:	0769      	lsls	r1, r5, #29
 800ce76:	d512      	bpl.n	800ce9e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ce78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce7a:	f022 0204 	bic.w	r2, r2, #4
 800ce7e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ce80:	2204      	movs	r2, #4
 800ce82:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ce84:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800ce90:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ce92:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800ce96:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ce9a:	f7ff ffe1 	bl	800ce60 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ce9e:	07b2      	lsls	r2, r6, #30
 800cea0:	d516      	bpl.n	800ced0 <HAL_LTDC_IRQHandler+0x6a>
 800cea2:	07ab      	lsls	r3, r5, #30
 800cea4:	d514      	bpl.n	800ced0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800cea6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800cea8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ceaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ceac:	f022 0202 	bic.w	r2, r2, #2
 800ceb0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ceb6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800ceba:	4313      	orrs	r3, r2
 800cebc:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800cec0:	2304      	movs	r3, #4
 800cec2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cec6:	2300      	movs	r3, #0
 800cec8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800cecc:	f7ff ffc8 	bl	800ce60 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ced0:	07f0      	lsls	r0, r6, #31
 800ced2:	d510      	bpl.n	800cef6 <HAL_LTDC_IRQHandler+0x90>
 800ced4:	07e9      	lsls	r1, r5, #31
 800ced6:	d50e      	bpl.n	800cef6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ced8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800ceda:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cedc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cede:	f022 0201 	bic.w	r2, r2, #1
 800cee2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800cee4:	2201      	movs	r2, #1
 800cee6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800cee8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800ceea:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800ceee:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800cef2:	f7ff ffb6 	bl	800ce62 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800cef6:	0732      	lsls	r2, r6, #28
 800cef8:	d511      	bpl.n	800cf1e <HAL_LTDC_IRQHandler+0xb8>
 800cefa:	072b      	lsls	r3, r5, #28
 800cefc:	d50f      	bpl.n	800cf1e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cefe:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800cf00:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cf02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf04:	f022 0208 	bic.w	r2, r2, #8
 800cf08:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cf14:	2300      	movs	r3, #0
 800cf16:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800cf1a:	f7ff ffa3 	bl	800ce64 <HAL_LTDC_ReloadEventCallback>
}
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}

0800cf20 <HAL_LTDC_ConfigLayer>:
{
 800cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800cf24:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800cf28:	4606      	mov	r6, r0
 800cf2a:	460f      	mov	r7, r1
 800cf2c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	f04f 0002 	mov.w	r0, #2
 800cf34:	d01f      	beq.n	800cf76 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cf36:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800cf38:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cf3c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cf3e:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cf42:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800cf46:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cf4a:	3438      	adds	r4, #56	@ 0x38
 800cf4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf58:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	4662      	mov	r2, ip
 800cf5e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cf60:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800cf62:	f7ff fe8a 	bl	800cc7a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800cf66:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800cf68:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800cf6a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800cf6e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800cf72:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800cf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cf7c <HAL_LTDC_SetPitch>:
{
 800cf7c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800cf7e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	f04f 0302 	mov.w	r3, #2
 800cf88:	d02c      	beq.n	800cfe4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800cf8a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cf8c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800cf90:	fb04 0402 	mla	r4, r4, r2, r0
 800cf94:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cf96:	b33c      	cbz	r4, 800cfe8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cf98:	2c01      	cmp	r4, #1
 800cf9a:	d027      	beq.n	800cfec <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cf9c:	1ea5      	subs	r5, r4, #2
 800cf9e:	429d      	cmp	r5, r3
 800cfa0:	d902      	bls.n	800cfa8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800cfa2:	2c07      	cmp	r4, #7
 800cfa4:	bf18      	it	ne
 800cfa6:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800cfa8:	01d2      	lsls	r2, r2, #7
 800cfaa:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800cfac:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800cfae:	3284      	adds	r2, #132	@ 0x84
 800cfb0:	4422      	add	r2, r4
 800cfb2:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800cfb4:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800cfb8:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800cfbc:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800cfbe:	4c0c      	ldr	r4, [pc, #48]	@ (800cff0 <HAL_LTDC_SetPitch+0x74>)
 800cfc0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cfc2:	f045 0501 	orr.w	r5, r5, #1
 800cfc6:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800cfc8:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800cfca:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800cfce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800cfd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cfd2:	f043 0301 	orr.w	r3, r3, #1
 800cfd6:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800cfe8:	2304      	movs	r3, #4
 800cfea:	e7dd      	b.n	800cfa8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e7db      	b.n	800cfa8 <HAL_LTDC_SetPitch+0x2c>
 800cff0:	50001000 	.word	0x50001000

0800cff4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800cff4:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800cff6:	6804      	ldr	r4, [r0, #0]
 800cff8:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800cffc:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d000:	6965      	ldr	r5, [r4, #20]
 800d002:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800d006:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800d00a:	ea45 0503 	orr.w	r5, r5, r3
 800d00e:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800d010:	9d03      	ldr	r5, [sp, #12]
 800d012:	6963      	ldr	r3, [r4, #20]
 800d014:	f105 35ff 	add.w	r5, r5, #4294967295
 800d018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d01c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800d020:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800d022:	f04f 031f 	mov.w	r3, #31
 800d026:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800d028:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800d02a:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800d02c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d02e:	bf0c      	ite	eq
 800d030:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d034:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d038:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d03c:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800d03e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d040:	bf0c      	ite	eq
 800d042:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800d046:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800d04a:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800d04c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800d04e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800d050:	bd30      	pop	{r4, r5, pc}

0800d052 <HAL_MDMA_Init>:
{
 800d052:	b538      	push	{r3, r4, r5, lr}
 800d054:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d056:	f7fd fb15 	bl	800a684 <HAL_GetTick>
 800d05a:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800d05c:	2c00      	cmp	r4, #0
 800d05e:	d061      	beq.n	800d124 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800d060:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800d062:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800d064:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800d068:	2302      	movs	r3, #2
 800d06a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800d06e:	68d3      	ldr	r3, [r2, #12]
 800d070:	f023 0301 	bic.w	r3, r3, #1
 800d074:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	07d2      	lsls	r2, r2, #31
 800d07c:	d448      	bmi.n	800d110 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800d07e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800d082:	430a      	orrs	r2, r1
 800d084:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d086:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	69e1      	ldr	r1, [r4, #28]
 800d08e:	430a      	orrs	r2, r1
 800d090:	6a21      	ldr	r1, [r4, #32]
 800d092:	430a      	orrs	r2, r1
 800d094:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d096:	430a      	orrs	r2, r1
 800d098:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d09a:	430a      	orrs	r2, r1
 800d09c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	68a1      	ldr	r1, [r4, #8]
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d0a6:	3901      	subs	r1, #1
 800d0a8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d0ac:	6861      	ldr	r1, [r4, #4]
 800d0ae:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d0b2:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d0b4:	d103      	bne.n	800d0be <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800d0b6:	691a      	ldr	r2, [r3, #16]
 800d0b8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800d0bc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800d0be:	2200      	movs	r2, #0
 800d0c0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800d0c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	da04      	bge.n	800d0d2 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d0c8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800d0ca:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d0cc:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800d0d0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800d0d2:	b292      	uxth	r2, r2
 800d0d4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800d0d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d0d8:	2a00      	cmp	r2, #0
 800d0da:	da25      	bge.n	800d128 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d0dc:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800d0de:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d0e0:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800d0e4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d0e6:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d0e8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d0ec:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d0f0:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d0f2:	f04f 0200 	mov.w	r2, #0
 800d0f6:	d019      	beq.n	800d12c <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d0f8:	b2c9      	uxtb	r1, r1
 800d0fa:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d0fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800d0fe:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d100:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800d102:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800d104:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800d106:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800d10a:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800d10e:	e00a      	b.n	800d126 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800d110:	f7fd fab8 	bl	800a684 <HAL_GetTick>
 800d114:	1b40      	subs	r0, r0, r5
 800d116:	2805      	cmp	r0, #5
 800d118:	d9ad      	bls.n	800d076 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800d11a:	2340      	movs	r3, #64	@ 0x40
 800d11c:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d11e:	2303      	movs	r3, #3
 800d120:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800d124:	2001      	movs	r0, #1
}
 800d126:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d128:	6a18      	ldr	r0, [r3, #32]
 800d12a:	e7dd      	b.n	800d0e8 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800d12c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d12e:	e7e5      	b.n	800d0fc <HAL_MDMA_Init+0xaa>

0800d130 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800d130:	b1d8      	cbz	r0, 800d16a <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800d132:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800d134:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800d136:	68d3      	ldr	r3, [r2, #12]
 800d138:	f023 0301 	bic.w	r3, r3, #1
 800d13c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800d142:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800d144:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800d146:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800d148:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800d14a:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800d14c:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800d14e:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800d150:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800d152:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800d154:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d156:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800d158:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800d15a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800d15e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800d162:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800d166:	4618      	mov	r0, r3
 800d168:	4770      	bx	lr
    return HAL_ERROR;
 800d16a:	2001      	movs	r0, #1
}
 800d16c:	4770      	bx	lr

0800d16e <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800d16e:	4603      	mov	r3, r0
{
 800d170:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800d172:	b300      	cbz	r0, 800d1b6 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800d174:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800d178:	2801      	cmp	r0, #1
 800d17a:	d01e      	beq.n	800d1ba <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800d17c:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d17e:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800d182:	42a5      	cmp	r5, r4
 800d184:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800d186:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d18a:	d112      	bne.n	800d1b2 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800d18c:	681c      	ldr	r4, [r3, #0]
 800d18e:	6925      	ldr	r5, [r4, #16]
 800d190:	006d      	lsls	r5, r5, #1
 800d192:	d407      	bmi.n	800d1a4 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800d194:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800d196:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d198:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800d19a:	b939      	cbnz	r1, 800d1ac <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d19c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800d1a0:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d1a2:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800d1aa:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800d1ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1b0:	e7f6      	b.n	800d1a0 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	e7f6      	b.n	800d1a4 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	e7f7      	b.n	800d1aa <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800d1ba:	2002      	movs	r0, #2
 800d1bc:	e7f5      	b.n	800d1aa <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800d1be <HAL_MDMA_Start_IT>:
{
 800d1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d042      	beq.n	800d24c <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800d1c6:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800d1ca:	2d01      	cmp	r5, #1
 800d1cc:	d03c      	beq.n	800d248 <HAL_MDMA_Start_IT+0x8a>
 800d1ce:	2501      	movs	r5, #1
 800d1d0:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d1d4:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800d1d8:	2d01      	cmp	r5, #1
 800d1da:	f04f 0500 	mov.w	r5, #0
 800d1de:	d131      	bne.n	800d244 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800d1e0:	2602      	movs	r6, #2
 800d1e2:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d1e6:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800d1e8:	6805      	ldr	r5, [r0, #0]
 800d1ea:	68ee      	ldr	r6, [r5, #12]
 800d1ec:	f026 0601 	bic.w	r6, r6, #1
 800d1f0:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800d1f2:	9e06      	ldr	r6, [sp, #24]
 800d1f4:	9600      	str	r6, [sp, #0]
 800d1f6:	f7ff fefd 	bl	800cff4 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800d1fa:	68eb      	ldr	r3, [r5, #12]
 800d1fc:	f043 0306 	orr.w	r3, r3, #6
 800d200:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800d202:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d204:	b11b      	cbz	r3, 800d20e <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800d206:	68eb      	ldr	r3, [r5, #12]
 800d208:	f043 0310 	orr.w	r3, r3, #16
 800d20c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d20e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d210:	b11b      	cbz	r3, 800d21a <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800d212:	68eb      	ldr	r3, [r5, #12]
 800d214:	f043 0308 	orr.w	r3, r3, #8
 800d218:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800d21a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d21c:	b11b      	cbz	r3, 800d226 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800d21e:	68eb      	ldr	r3, [r5, #12]
 800d220:	f043 0320 	orr.w	r3, r3, #32
 800d224:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800d226:	68eb      	ldr	r3, [r5, #12]
 800d228:	f043 0301 	orr.w	r3, r3, #1
 800d22c:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d22e:	6863      	ldr	r3, [r4, #4]
 800d230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d234:	d103      	bne.n	800d23e <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800d236:	68eb      	ldr	r3, [r5, #12]
 800d238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d23c:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800d23e:	2000      	movs	r0, #0
}
 800d240:	b002      	add	sp, #8
 800d242:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800d244:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800d248:	2002      	movs	r0, #2
 800d24a:	e7f9      	b.n	800d240 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7f7      	b.n	800d240 <HAL_MDMA_Start_IT+0x82>

0800d250 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800d250:	b128      	cbz	r0, 800d25e <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d252:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d256:	2b02      	cmp	r3, #2
 800d258:	d003      	beq.n	800d262 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d25a:	2380      	movs	r3, #128	@ 0x80
 800d25c:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800d25e:	2001      	movs	r0, #1
 800d260:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800d262:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d264:	2304      	movs	r3, #4
 800d266:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800d26a:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800d26c:	68d3      	ldr	r3, [r2, #12]
 800d26e:	f023 0301 	bic.w	r3, r3, #1
 800d272:	60d3      	str	r3, [r2, #12]
}
 800d274:	4770      	bx	lr
	...

0800d278 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800d278:	2300      	movs	r3, #0
{
 800d27a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800d27c:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d27e:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800d282:	4b58      	ldr	r3, [pc, #352]	@ (800d3e4 <HAL_MDMA_IRQHandler+0x16c>)
{
 800d284:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d286:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800d288:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d28a:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d28c:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d28e:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800d292:	3a40      	subs	r2, #64	@ 0x40
 800d294:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800d298:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d29c:	4202      	tst	r2, r0
 800d29e:	f000 809e 	beq.w	800d3de <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	07d1      	lsls	r1, r2, #31
 800d2a6:	d529      	bpl.n	800d2fc <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	0792      	lsls	r2, r2, #30
 800d2ac:	d526      	bpl.n	800d2fc <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800d2ae:	68da      	ldr	r2, [r3, #12]
 800d2b0:	f022 0202 	bic.w	r2, r2, #2
 800d2b4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800d2b6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d2b8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800d2ba:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d2bc:	bf54      	ite	pl
 800d2be:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800d2c2:	f041 0102 	orrmi.w	r1, r1, #2
 800d2c6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800d2c8:	0591      	lsls	r1, r2, #22
 800d2ca:	d503      	bpl.n	800d2d4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800d2cc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d2ce:	f041 0104 	orr.w	r1, r1, #4
 800d2d2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800d2d4:	05d0      	lsls	r0, r2, #23
 800d2d6:	d503      	bpl.n	800d2e0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800d2d8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d2da:	f041 0108 	orr.w	r1, r1, #8
 800d2de:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800d2e0:	0551      	lsls	r1, r2, #21
 800d2e2:	d503      	bpl.n	800d2ec <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800d2e4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d2e6:	f041 0110 	orr.w	r1, r1, #16
 800d2ea:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800d2ec:	0512      	lsls	r2, r2, #20
 800d2ee:	d503      	bpl.n	800d2f8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800d2f0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d2f2:	f042 0220 	orr.w	r2, r2, #32
 800d2f6:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	06d0      	lsls	r0, r2, #27
 800d300:	d508      	bpl.n	800d314 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	0691      	lsls	r1, r2, #26
 800d306:	d505      	bpl.n	800d314 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800d308:	2210      	movs	r2, #16
 800d30a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800d30c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d30e:	b10b      	cbz	r3, 800d314 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800d310:	4620      	mov	r0, r4
 800d312:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	0712      	lsls	r2, r2, #28
 800d31a:	d508      	bpl.n	800d32e <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	06d0      	lsls	r0, r2, #27
 800d320:	d505      	bpl.n	800d32e <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d322:	2208      	movs	r2, #8
 800d324:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800d326:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d328:	b10b      	cbz	r3, 800d32e <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800d32a:	4620      	mov	r0, r4
 800d32c:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	0751      	lsls	r1, r2, #29
 800d334:	d508      	bpl.n	800d348 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	0712      	lsls	r2, r2, #28
 800d33a:	d505      	bpl.n	800d348 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d33c:	2204      	movs	r2, #4
 800d33e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d340:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d342:	b10b      	cbz	r3, 800d348 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d344:	4620      	mov	r0, r4
 800d346:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	0790      	lsls	r0, r2, #30
 800d34e:	d524      	bpl.n	800d39a <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d350:	68da      	ldr	r2, [r3, #12]
 800d352:	0751      	lsls	r1, r2, #29
 800d354:	d521      	bpl.n	800d39a <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d356:	68da      	ldr	r2, [r3, #12]
 800d358:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d35c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d35e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800d362:	2a04      	cmp	r2, #4
 800d364:	f04f 0200 	mov.w	r2, #0
 800d368:	d10c      	bne.n	800d384 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800d36a:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800d36c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800d370:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800d374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800d376:	2b00      	cmp	r3, #0
 800d378:	d031      	beq.n	800d3de <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800d37a:	4620      	mov	r0, r4
}
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800d382:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d384:	2102      	movs	r1, #2
 800d386:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800d388:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800d38a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800d38e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800d392:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d394:	b10b      	cbz	r3, 800d39a <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800d396:	4620      	mov	r0, r4
 800d398:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d39a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d39c:	b1fb      	cbz	r3, 800d3de <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800d39e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800d3a2:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	f022 0201 	bic.w	r2, r2, #1
 800d3b4:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800d3b6:	9a01      	ldr	r2, [sp, #4]
 800d3b8:	3201      	adds	r2, #1
 800d3ba:	42aa      	cmp	r2, r5
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	d802      	bhi.n	800d3c6 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	07d2      	lsls	r2, r2, #31
 800d3c4:	d4f7      	bmi.n	800d3b6 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d3d0:	bf4c      	ite	mi
 800d3d2:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800d3d4:	2301      	movpl	r3, #1
 800d3d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800d3da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d3dc:	e7cb      	b.n	800d376 <HAL_MDMA_IRQHandler+0xfe>
}
 800d3de:	b003      	add	sp, #12
 800d3e0:	bd30      	pop	{r4, r5, pc}
 800d3e2:	bf00      	nop
 800d3e4:	2400006c 	.word	0x2400006c

0800d3e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d3e8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d3ea:	4d1c      	ldr	r5, [pc, #112]	@ (800d45c <HAL_PWREx_ConfigSupply+0x74>)
{
 800d3ec:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d3ee:	68eb      	ldr	r3, [r5, #12]
 800d3f0:	f003 0307 	and.w	r3, r3, #7
 800d3f4:	2b06      	cmp	r3, #6
 800d3f6:	d006      	beq.n	800d406 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d3f8:	68e8      	ldr	r0, [r5, #12]
 800d3fa:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800d3fe:	1b00      	subs	r0, r0, r4
 800d400:	bf18      	it	ne
 800d402:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800d404:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d406:	68eb      	ldr	r3, [r5, #12]
 800d408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800d40c:	4303      	orrs	r3, r0
 800d40e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800d410:	f7fd f938 	bl	800a684 <HAL_GetTick>
 800d414:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d416:	686b      	ldr	r3, [r5, #4]
 800d418:	049a      	lsls	r2, r3, #18
 800d41a:	d508      	bpl.n	800d42e <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800d41c:	f1a4 031d 	sub.w	r3, r4, #29
 800d420:	2b01      	cmp	r3, #1
 800d422:	d90c      	bls.n	800d43e <HAL_PWREx_ConfigSupply+0x56>
 800d424:	3c2d      	subs	r4, #45	@ 0x2d
 800d426:	2c01      	cmp	r4, #1
 800d428:	d909      	bls.n	800d43e <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800d42a:	2000      	movs	r0, #0
 800d42c:	e7ea      	b.n	800d404 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d42e:	f7fd f929 	bl	800a684 <HAL_GetTick>
 800d432:	1b80      	subs	r0, r0, r6
 800d434:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d438:	d9ed      	bls.n	800d416 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800d43a:	2001      	movs	r0, #1
 800d43c:	e7e2      	b.n	800d404 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800d43e:	f7fd f921 	bl	800a684 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d442:	4d06      	ldr	r5, [pc, #24]	@ (800d45c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800d444:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d446:	68eb      	ldr	r3, [r5, #12]
 800d448:	03db      	lsls	r3, r3, #15
 800d44a:	d4ee      	bmi.n	800d42a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d44c:	f7fd f91a 	bl	800a684 <HAL_GetTick>
 800d450:	1b00      	subs	r0, r0, r4
 800d452:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d456:	d9f6      	bls.n	800d446 <HAL_PWREx_ConfigSupply+0x5e>
 800d458:	e7ef      	b.n	800d43a <HAL_PWREx_ConfigSupply+0x52>
 800d45a:	bf00      	nop
 800d45c:	58024800 	.word	0x58024800

0800d460 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d464:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800d466:	b136      	cbz	r6, 800d476 <QSPI_Config+0x16>
 800d468:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800d46c:	d003      	beq.n	800d476 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d46e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d470:	6804      	ldr	r4, [r0, #0]
 800d472:	3b01      	subs	r3, #1
 800d474:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d476:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d47a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d47e:	f1ba 0f00 	cmp.w	sl, #0
 800d482:	d04c      	beq.n	800d51e <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d484:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d486:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d488:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800d48c:	ea4a 0406 	orr.w	r4, sl, r6
 800d490:	680b      	ldr	r3, [r1, #0]
 800d492:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800d496:	ea44 0a02 	orr.w	sl, r4, r2
 800d49a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d49e:	f1be 0f00 	cmp.w	lr, #0
 800d4a2:	d024      	beq.n	800d4ee <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d4a4:	688e      	ldr	r6, [r1, #8]
 800d4a6:	ea4a 040e 	orr.w	r4, sl, lr
 800d4aa:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4ac:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d4ae:	b19f      	cbz	r7, 800d4d8 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4b0:	433b      	orrs	r3, r7
 800d4b2:	4303      	orrs	r3, r0
 800d4b4:	68c8      	ldr	r0, [r1, #12]
 800d4b6:	ea43 0309 	orr.w	r3, r3, r9
 800d4ba:	ea43 0308 	orr.w	r3, r3, r8
 800d4be:	4333      	orrs	r3, r6
 800d4c0:	4303      	orrs	r3, r0
 800d4c2:	ea43 030c 	orr.w	r3, r3, ip
 800d4c6:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d4c8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4cc:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d4ce:	d001      	beq.n	800d4d4 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d4d0:	684b      	ldr	r3, [r1, #4]
 800d4d2:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4d8:	4303      	orrs	r3, r0
 800d4da:	ea43 0309 	orr.w	r3, r3, r9
 800d4de:	ea43 0308 	orr.w	r3, r3, r8
 800d4e2:	4333      	orrs	r3, r6
 800d4e4:	ea43 030c 	orr.w	r3, r3, ip
 800d4e8:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4ea:	616b      	str	r3, [r5, #20]
 800d4ec:	e7f2      	b.n	800d4d4 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d4ee:	b167      	cbz	r7, 800d50a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4f0:	433b      	orrs	r3, r7
 800d4f2:	4303      	orrs	r3, r0
 800d4f4:	68c8      	ldr	r0, [r1, #12]
 800d4f6:	ea43 0309 	orr.w	r3, r3, r9
 800d4fa:	ea43 0308 	orr.w	r3, r3, r8
 800d4fe:	4303      	orrs	r3, r0
 800d500:	ea43 030c 	orr.w	r3, r3, ip
 800d504:	ea43 030a 	orr.w	r3, r3, sl
 800d508:	e7de      	b.n	800d4c8 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d50a:	4303      	orrs	r3, r0
 800d50c:	ea43 0309 	orr.w	r3, r3, r9
 800d510:	ea43 0408 	orr.w	r4, r3, r8
 800d514:	ea44 030c 	orr.w	r3, r4, ip
 800d518:	ea43 030a 	orr.w	r3, r3, sl
 800d51c:	e7e5      	b.n	800d4ea <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d51e:	f1be 0f00 	cmp.w	lr, #0
 800d522:	d02c      	beq.n	800d57e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d524:	ea46 050e 	orr.w	r5, r6, lr
 800d528:	688b      	ldr	r3, [r1, #8]
 800d52a:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d52c:	694e      	ldr	r6, [r1, #20]
 800d52e:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d530:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d532:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d536:	04b6      	lsls	r6, r6, #18
 800d538:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d53a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d53e:	b1a7      	cbz	r7, 800d56a <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d540:	433b      	orrs	r3, r7
 800d542:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d544:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d548:	ea43 0308 	orr.w	r3, r3, r8
 800d54c:	ea43 030e 	orr.w	r3, r3, lr
 800d550:	ea43 030c 	orr.w	r3, r3, ip
 800d554:	ea43 0300 	orr.w	r3, r3, r0
 800d558:	ea43 0306 	orr.w	r3, r3, r6
 800d55c:	ea43 0305 	orr.w	r3, r3, r5
 800d560:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d562:	d0b7      	beq.n	800d4d4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d564:	684b      	ldr	r3, [r1, #4]
 800d566:	61a3      	str	r3, [r4, #24]
 800d568:	e7b4      	b.n	800d4d4 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d56a:	ea43 0308 	orr.w	r3, r3, r8
 800d56e:	ea43 030e 	orr.w	r3, r3, lr
 800d572:	ea43 030c 	orr.w	r3, r3, ip
 800d576:	4333      	orrs	r3, r6
 800d578:	432b      	orrs	r3, r5
 800d57a:	6163      	str	r3, [r4, #20]
 800d57c:	e7aa      	b.n	800d4d4 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d57e:	b1d7      	cbz	r7, 800d5b6 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d580:	ea46 0307 	orr.w	r3, r6, r7
 800d584:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800d586:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d588:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d58c:	ea43 0302 	orr.w	r3, r3, r2
 800d590:	ea43 0304 	orr.w	r3, r3, r4
 800d594:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800d596:	ea43 0304 	orr.w	r3, r3, r4
 800d59a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800d59c:	ea43 0304 	orr.w	r3, r3, r4
 800d5a0:	68cc      	ldr	r4, [r1, #12]
 800d5a2:	ea43 0304 	orr.w	r3, r3, r4
 800d5a6:	694c      	ldr	r4, [r1, #20]
 800d5a8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800d5ac:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d5ae:	d091      	beq.n	800d4d4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d5b0:	684b      	ldr	r3, [r1, #4]
 800d5b2:	6183      	str	r3, [r0, #24]
 800d5b4:	e78e      	b.n	800d4d4 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d5b6:	2e00      	cmp	r6, #0
 800d5b8:	d08c      	beq.n	800d4d4 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d5ba:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800d5bc:	6800      	ldr	r0, [r0, #0]
 800d5be:	4333      	orrs	r3, r6
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	694a      	ldr	r2, [r1, #20]
 800d5cc:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800d5d0:	6143      	str	r3, [r0, #20]
}
 800d5d2:	e77f      	b.n	800d4d4 <QSPI_Config+0x74>

0800d5d4 <QSPI_WaitFlagStateUntilTimeout>:
{
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d5dc:	4604      	mov	r4, r0
 800d5de:	460e      	mov	r6, r1
 800d5e0:	4615      	mov	r5, r2
 800d5e2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d5e4:	6822      	ldr	r2, [r4, #0]
 800d5e6:	6893      	ldr	r3, [r2, #8]
 800d5e8:	4233      	tst	r3, r6
 800d5ea:	bf14      	ite	ne
 800d5ec:	2301      	movne	r3, #1
 800d5ee:	2300      	moveq	r3, #0
 800d5f0:	42ab      	cmp	r3, r5
 800d5f2:	d101      	bne.n	800d5f8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e012      	b.n	800d61e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800d5f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d5fc:	d0f3      	beq.n	800d5e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5fe:	f7fd f841 	bl	800a684 <HAL_GetTick>
 800d602:	1bc0      	subs	r0, r0, r7
 800d604:	4540      	cmp	r0, r8
 800d606:	d802      	bhi.n	800d60e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	d1ea      	bne.n	800d5e4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d60e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d610:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d612:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d616:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d618:	f043 0301 	orr.w	r3, r3, #1
 800d61c:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800d61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d624 <HAL_QSPI_Init>:
{
 800d624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d626:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d628:	f7fd f82c 	bl	800a684 <HAL_GetTick>
 800d62c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800d62e:	2c00      	cmp	r4, #0
 800d630:	d03f      	beq.n	800d6b2 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d632:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d636:	b92b      	cbnz	r3, 800d644 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800d638:	4620      	mov	r0, r4
 800d63a:	f7f3 fdff 	bl	800123c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800d63e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d642:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d644:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d646:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d648:	68a3      	ldr	r3, [r4, #8]
 800d64a:	680a      	ldr	r2, [r1, #0]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800d652:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d656:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d658:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d65a:	2200      	movs	r2, #0
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	2120      	movs	r1, #32
 800d660:	462b      	mov	r3, r5
 800d662:	f7ff ffb7 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800d666:	bb10      	cbnz	r0, 800d6ae <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d668:	6822      	ldr	r2, [r4, #0]
 800d66a:	69e5      	ldr	r5, [r4, #28]
 800d66c:	68e3      	ldr	r3, [r4, #12]
 800d66e:	6811      	ldr	r1, [r2, #0]
 800d670:	432b      	orrs	r3, r5
 800d672:	6a25      	ldr	r5, [r4, #32]
 800d674:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800d678:	432b      	orrs	r3, r5
 800d67a:	6865      	ldr	r5, [r4, #4]
 800d67c:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800d680:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d684:	430b      	orrs	r3, r1
 800d686:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d688:	6855      	ldr	r5, [r2, #4]
 800d68a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800d68e:	430b      	orrs	r3, r1
 800d690:	6921      	ldr	r1, [r4, #16]
 800d692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d696:	4908      	ldr	r1, [pc, #32]	@ (800d6b8 <HAL_QSPI_Init+0x94>)
 800d698:	4029      	ands	r1, r5
 800d69a:	430b      	orrs	r3, r1
 800d69c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800d69e:	6813      	ldr	r3, [r2, #0]
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800d6a6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d6a8:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800d6aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800d6ae:	b003      	add	sp, #12
 800d6b0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	e7fb      	b.n	800d6ae <HAL_QSPI_Init+0x8a>
 800d6b6:	bf00      	nop
 800d6b8:	ffe0f8fe 	.word	0xffe0f8fe

0800d6bc <HAL_QSPI_Command>:
{
 800d6bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	468a      	mov	sl, r1
 800d6c4:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800d6c6:	f7fc ffdd 	bl	800a684 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d6ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d6ce:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d036      	beq.n	800d742 <HAL_QSPI_Command+0x86>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	2602      	movs	r6, #2
 800d6d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d6dc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	fa5f f983 	uxtb.w	r9, r3
 800d6e6:	d128      	bne.n	800d73a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d6e8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2120      	movs	r1, #32
 800d6ee:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d6f0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800d6f2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d6f6:	f8cd 8000 	str.w	r8, [sp]
 800d6fa:	f7ff ff6b 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d6fe:	4605      	mov	r5, r0
 800d700:	b9a0      	cbnz	r0, 800d72c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d702:	4602      	mov	r2, r0
 800d704:	4651      	mov	r1, sl
 800d706:	4620      	mov	r0, r4
 800d708:	f7ff feaa 	bl	800d460 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800d70c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800d710:	b953      	cbnz	r3, 800d728 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d712:	463b      	mov	r3, r7
 800d714:	464a      	mov	r2, r9
 800d716:	4631      	mov	r1, r6
 800d718:	4620      	mov	r0, r4
 800d71a:	f8cd 8000 	str.w	r8, [sp]
 800d71e:	f7ff ff59 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d722:	b960      	cbnz	r0, 800d73e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d728:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d72c:	2300      	movs	r3, #0
 800d72e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d732:	4628      	mov	r0, r5
 800d734:	b002      	add	sp, #8
 800d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800d73a:	4635      	mov	r5, r6
 800d73c:	e7f6      	b.n	800d72c <HAL_QSPI_Command+0x70>
 800d73e:	4605      	mov	r5, r0
 800d740:	e7f4      	b.n	800d72c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800d742:	2502      	movs	r5, #2
 800d744:	e7f5      	b.n	800d732 <HAL_QSPI_Command+0x76>

0800d746 <HAL_QSPI_Transmit>:
{
 800d746:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d74a:	4604      	mov	r4, r0
 800d74c:	4688      	mov	r8, r1
 800d74e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800d750:	f7fc ff98 	bl	800a684 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d754:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d758:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d75a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d04c      	beq.n	800d7fa <HAL_QSPI_Transmit+0xb4>
 800d760:	2301      	movs	r3, #1
 800d762:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d766:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	b2d8      	uxtb	r0, r3
 800d76e:	d142      	bne.n	800d7f6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d770:	2300      	movs	r3, #0
 800d772:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d774:	f1b8 0f00 	cmp.w	r8, #0
 800d778:	d038      	beq.n	800d7ec <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800d77a:	2312      	movs	r3, #18
 800d77c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d780:	692b      	ldr	r3, [r5, #16]
 800d782:	3301      	adds	r3, #1
 800d784:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d786:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800d788:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d78c:	3301      	adds	r3, #1
 800d78e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d790:	696b      	ldr	r3, [r5, #20]
 800d792:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800d796:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800d798:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d79a:	b99b      	cbnz	r3, 800d7c4 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d79c:	4633      	mov	r3, r6
 800d79e:	2201      	movs	r2, #1
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	9700      	str	r7, [sp, #0]
 800d7a6:	f7ff ff15 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d7aa:	b910      	cbnz	r0, 800d7b2 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d7be:	b002      	add	sp, #8
 800d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d7c4:	4633      	mov	r3, r6
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	2104      	movs	r1, #4
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	9700      	str	r7, [sp, #0]
 800d7ce:	f7ff ff01 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d1ed      	bne.n	800d7b2 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d7d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800d7de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800d7e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7ea:	e7d5      	b.n	800d798 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d7ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d7ee:	f043 0308 	orr.w	r3, r3, #8
 800d7f2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d7f4:	e7e0      	b.n	800d7b8 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800d7f6:	2002      	movs	r0, #2
 800d7f8:	e7de      	b.n	800d7b8 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800d7fa:	2002      	movs	r0, #2
 800d7fc:	e7df      	b.n	800d7be <HAL_QSPI_Transmit+0x78>

0800d7fe <HAL_QSPI_Receive>:
{
 800d7fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d802:	4604      	mov	r4, r0
 800d804:	4617      	mov	r7, r2
 800d806:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800d808:	f7fc ff3c 	bl	800a684 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d80c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800d80e:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d810:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800d812:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d816:	2b01      	cmp	r3, #1
 800d818:	d04f      	beq.n	800d8ba <HAL_QSPI_Receive+0xbc>
 800d81a:	2301      	movs	r3, #1
 800d81c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d820:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d824:	2b01      	cmp	r3, #1
 800d826:	b2d8      	uxtb	r0, r3
 800d828:	d145      	bne.n	800d8b6 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d82a:	2300      	movs	r3, #0
 800d82c:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d82e:	f1b8 0f00 	cmp.w	r8, #0
 800d832:	d03b      	beq.n	800d8ac <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d834:	2322      	movs	r3, #34	@ 0x22
 800d836:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d83a:	692b      	ldr	r3, [r5, #16]
 800d83c:	3301      	adds	r3, #1
 800d83e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d840:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800d842:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d846:	3301      	adds	r3, #1
 800d848:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d84a:	6969      	ldr	r1, [r5, #20]
 800d84c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800d850:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800d854:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d856:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800d858:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d85a:	b99b      	cbnz	r3, 800d884 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d85c:	4633      	mov	r3, r6
 800d85e:	2201      	movs	r2, #1
 800d860:	2102      	movs	r1, #2
 800d862:	4620      	mov	r0, r4
 800d864:	9700      	str	r7, [sp, #0]
 800d866:	f7ff feb5 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800d86a:	b910      	cbnz	r0, 800d872 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	2202      	movs	r2, #2
 800d870:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d872:	2301      	movs	r3, #1
 800d874:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d878:	2300      	movs	r3, #0
 800d87a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d87e:	b002      	add	sp, #8
 800d880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d884:	4633      	mov	r3, r6
 800d886:	2201      	movs	r2, #1
 800d888:	2106      	movs	r1, #6
 800d88a:	4620      	mov	r0, r4
 800d88c:	9700      	str	r7, [sp, #0]
 800d88e:	f7ff fea1 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800d892:	2800      	cmp	r0, #0
 800d894:	d1ed      	bne.n	800d872 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d896:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d89a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d89c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d89e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800d8a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d8aa:	e7d5      	b.n	800d858 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d8ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d8ae:	f043 0308 	orr.w	r3, r3, #8
 800d8b2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d8b4:	e7e0      	b.n	800d878 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800d8b6:	2002      	movs	r0, #2
 800d8b8:	e7de      	b.n	800d878 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800d8ba:	2002      	movs	r0, #2
 800d8bc:	e7df      	b.n	800d87e <HAL_QSPI_Receive+0x80>

0800d8be <HAL_QSPI_AutoPolling>:
{
 800d8be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	461f      	mov	r7, r3
 800d8c6:	4689      	mov	r9, r1
 800d8c8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800d8ca:	f7fc fedb 	bl	800a684 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d8ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d8d2:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d041      	beq.n	800d95c <HAL_QSPI_AutoPolling+0x9e>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d8de:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	fa5f f883 	uxtb.w	r8, r3
 800d8e8:	d136      	bne.n	800d958 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d8ea:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d8ec:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d8ee:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d8f0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d8f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	9700      	str	r7, [sp, #0]
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f7ff fe6a 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d900:	bb20      	cbnz	r0, 800d94c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d902:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d904:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d906:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d908:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d90a:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d90c:	686b      	ldr	r3, [r5, #4]
 800d90e:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d910:	68ab      	ldr	r3, [r5, #8]
 800d912:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d914:	6813      	ldr	r3, [r2, #0]
 800d916:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d91a:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d91c:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d91e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d922:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d924:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800d928:	68eb      	ldr	r3, [r5, #12]
 800d92a:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d92e:	f7ff fd97 	bl	800d460 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d932:	4633      	mov	r3, r6
 800d934:	4642      	mov	r2, r8
 800d936:	2108      	movs	r1, #8
 800d938:	4620      	mov	r0, r4
 800d93a:	9700      	str	r7, [sp, #0]
 800d93c:	f7ff fe4a 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800d940:	b920      	cbnz	r0, 800d94c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	2208      	movs	r2, #8
 800d946:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d948:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d94c:	2300      	movs	r3, #0
 800d94e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d952:	b003      	add	sp, #12
 800d954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800d958:	2002      	movs	r0, #2
 800d95a:	e7f7      	b.n	800d94c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800d95c:	2002      	movs	r0, #2
 800d95e:	e7f8      	b.n	800d952 <HAL_QSPI_AutoPolling+0x94>

0800d960 <HAL_QSPI_MemoryMapped>:
{
 800d960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d962:	4604      	mov	r4, r0
 800d964:	4616      	mov	r6, r2
 800d966:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800d968:	f7fc fe8c 	bl	800a684 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d96c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d970:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d972:	2a01      	cmp	r2, #1
 800d974:	d033      	beq.n	800d9de <HAL_QSPI_MemoryMapped+0x7e>
 800d976:	2201      	movs	r2, #1
 800d978:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d97c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800d980:	2a01      	cmp	r2, #1
 800d982:	d12a      	bne.n	800d9da <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d984:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d986:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d988:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d98a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d98c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d990:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d992:	9100      	str	r1, [sp, #0]
 800d994:	2120      	movs	r1, #32
 800d996:	f7ff fe1d 	bl	800d5d4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d99a:	4605      	mov	r5, r0
 800d99c:	b9b8      	cbnz	r0, 800d9ce <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	6872      	ldr	r2, [r6, #4]
 800d9a2:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d9a4:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d9a6:	f020 0008 	bic.w	r0, r0, #8
 800d9aa:	ea40 0002 	orr.w	r0, r0, r2
 800d9ae:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d9b0:	d107      	bne.n	800d9c2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d9b2:	6832      	ldr	r2, [r6, #0]
 800d9b4:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d9b6:	2210      	movs	r2, #16
 800d9b8:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800d9c0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d9c2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800d9c6:	4639      	mov	r1, r7
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f7ff fd49 	bl	800d460 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	b003      	add	sp, #12
 800d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800d9da:	2502      	movs	r5, #2
 800d9dc:	e7f7      	b.n	800d9ce <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800d9de:	2502      	movs	r5, #2
 800d9e0:	e7f8      	b.n	800d9d4 <HAL_QSPI_MemoryMapped+0x74>
	...

0800d9e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d074      	beq.n	800dad6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d9ec:	6803      	ldr	r3, [r0, #0]
 800d9ee:	07d8      	lsls	r0, r3, #31
 800d9f0:	d45e      	bmi.n	800dab0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	0799      	lsls	r1, r3, #30
 800d9f6:	f100 80ad 	bmi.w	800db54 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	06da      	lsls	r2, r3, #27
 800d9fe:	d527      	bpl.n	800da50 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da00:	4a9c      	ldr	r2, [pc, #624]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800da02:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da04:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800da0a:	2b08      	cmp	r3, #8
 800da0c:	d007      	beq.n	800da1e <HAL_RCC_OscConfig+0x3a>
 800da0e:	2b18      	cmp	r3, #24
 800da10:	f040 8103 	bne.w	800dc1a <HAL_RCC_OscConfig+0x236>
 800da14:	f001 0303 	and.w	r3, r1, #3
 800da18:	2b01      	cmp	r3, #1
 800da1a:	f040 80fe 	bne.w	800dc1a <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800da1e:	6813      	ldr	r3, [r2, #0]
 800da20:	05db      	lsls	r3, r3, #23
 800da22:	d502      	bpl.n	800da2a <HAL_RCC_OscConfig+0x46>
 800da24:	69e3      	ldr	r3, [r4, #28]
 800da26:	2b80      	cmp	r3, #128	@ 0x80
 800da28:	d155      	bne.n	800dad6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800da2a:	f7fc fe43 	bl	800a6b4 <HAL_GetREVID>
 800da2e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800da32:	6a21      	ldr	r1, [r4, #32]
 800da34:	4298      	cmp	r0, r3
 800da36:	4b8f      	ldr	r3, [pc, #572]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800da38:	f200 80e8 	bhi.w	800dc0c <HAL_RCC_OscConfig+0x228>
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	2920      	cmp	r1, #32
 800da40:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800da44:	bf0c      	ite	eq
 800da46:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800da4a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800da4e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	0719      	lsls	r1, r3, #28
 800da54:	f100 8123 	bmi.w	800dc9e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	069a      	lsls	r2, r3, #26
 800da5c:	f100 8144 	bmi.w	800dce8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da60:	6823      	ldr	r3, [r4, #0]
 800da62:	075d      	lsls	r5, r3, #29
 800da64:	d51e      	bpl.n	800daa4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800da66:	4d84      	ldr	r5, [pc, #528]	@ (800dc78 <HAL_RCC_OscConfig+0x294>)
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da6e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800da70:	f7fc fe08 	bl	800a684 <HAL_GetTick>
 800da74:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	05da      	lsls	r2, r3, #23
 800da7a:	f140 815a 	bpl.w	800dd32 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	4d7c      	ldr	r5, [pc, #496]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800da82:	2b01      	cmp	r3, #1
 800da84:	f040 815c 	bne.w	800dd40 <HAL_RCC_OscConfig+0x35c>
 800da88:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800da8a:	f043 0301 	orr.w	r3, r3, #1
 800da8e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da90:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800da94:	f7fc fdf6 	bl	800a684 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da98:	4e76      	ldr	r6, [pc, #472]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800da9a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800da9c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800da9e:	079b      	lsls	r3, r3, #30
 800daa0:	f140 8174 	bpl.w	800dd8c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800daa4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800daa6:	2900      	cmp	r1, #0
 800daa8:	f040 8177 	bne.w	800dd9a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800daac:	2000      	movs	r0, #0
 800daae:	e02b      	b.n	800db08 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dab0:	4a70      	ldr	r2, [pc, #448]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800dab2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dab4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800daba:	2b10      	cmp	r3, #16
 800dabc:	d005      	beq.n	800daca <HAL_RCC_OscConfig+0xe6>
 800dabe:	2b18      	cmp	r3, #24
 800dac0:	d10b      	bne.n	800dada <HAL_RCC_OscConfig+0xf6>
 800dac2:	f001 0303 	and.w	r3, r1, #3
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d107      	bne.n	800dada <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800daca:	6813      	ldr	r3, [r2, #0]
 800dacc:	039a      	lsls	r2, r3, #14
 800dace:	d590      	bpl.n	800d9f2 <HAL_RCC_OscConfig+0xe>
 800dad0:	6863      	ldr	r3, [r4, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d18d      	bne.n	800d9f2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800dad6:	2001      	movs	r0, #1
 800dad8:	e016      	b.n	800db08 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dada:	6863      	ldr	r3, [r4, #4]
 800dadc:	4d65      	ldr	r5, [pc, #404]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800dade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dae2:	d112      	bne.n	800db0a <HAL_RCC_OscConfig+0x126>
 800dae4:	682b      	ldr	r3, [r5, #0]
 800dae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800daea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800daec:	f7fc fdca 	bl	800a684 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800daf0:	4e60      	ldr	r6, [pc, #384]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800daf2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800daf4:	6833      	ldr	r3, [r6, #0]
 800daf6:	039b      	lsls	r3, r3, #14
 800daf8:	f53f af7b 	bmi.w	800d9f2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dafc:	f7fc fdc2 	bl	800a684 <HAL_GetTick>
 800db00:	1b40      	subs	r0, r0, r5
 800db02:	2864      	cmp	r0, #100	@ 0x64
 800db04:	d9f6      	bls.n	800daf4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800db06:	2003      	movs	r0, #3
}
 800db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db0a:	b9a3      	cbnz	r3, 800db36 <HAL_RCC_OscConfig+0x152>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800db1c:	f7fc fdb2 	bl	800a684 <HAL_GetTick>
 800db20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800db22:	682b      	ldr	r3, [r5, #0]
 800db24:	039f      	lsls	r7, r3, #14
 800db26:	f57f af64 	bpl.w	800d9f2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db2a:	f7fc fdab 	bl	800a684 <HAL_GetTick>
 800db2e:	1b80      	subs	r0, r0, r6
 800db30:	2864      	cmp	r0, #100	@ 0x64
 800db32:	d9f6      	bls.n	800db22 <HAL_RCC_OscConfig+0x13e>
 800db34:	e7e7      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	d103      	bne.n	800db46 <HAL_RCC_OscConfig+0x162>
 800db3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	e7ce      	b.n	800dae4 <HAL_RCC_OscConfig+0x100>
 800db46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db4a:	602b      	str	r3, [r5, #0]
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db52:	e7ca      	b.n	800daea <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db54:	4947      	ldr	r1, [pc, #284]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800db56:	68e2      	ldr	r2, [r4, #12]
 800db58:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db5a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800db5c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800db60:	d003      	beq.n	800db6a <HAL_RCC_OscConfig+0x186>
 800db62:	2b18      	cmp	r3, #24
 800db64:	d12a      	bne.n	800dbbc <HAL_RCC_OscConfig+0x1d8>
 800db66:	0780      	lsls	r0, r0, #30
 800db68:	d128      	bne.n	800dbbc <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db6a:	680b      	ldr	r3, [r1, #0]
 800db6c:	075b      	lsls	r3, r3, #29
 800db6e:	d501      	bpl.n	800db74 <HAL_RCC_OscConfig+0x190>
 800db70:	2a00      	cmp	r2, #0
 800db72:	d0b0      	beq.n	800dad6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800db74:	4d3f      	ldr	r5, [pc, #252]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800db76:	682b      	ldr	r3, [r5, #0]
 800db78:	f023 0319 	bic.w	r3, r3, #25
 800db7c:	4313      	orrs	r3, r2
 800db7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800db80:	f7fc fd80 	bl	800a684 <HAL_GetTick>
 800db84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	075f      	lsls	r7, r3, #29
 800db8a:	d511      	bpl.n	800dbb0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db8c:	f7fc fd92 	bl	800a6b4 <HAL_GetREVID>
 800db90:	f241 0303 	movw	r3, #4099	@ 0x1003
 800db94:	6922      	ldr	r2, [r4, #16]
 800db96:	4298      	cmp	r0, r3
 800db98:	686b      	ldr	r3, [r5, #4]
 800db9a:	d822      	bhi.n	800dbe2 <HAL_RCC_OscConfig+0x1fe>
 800db9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800dba0:	2a40      	cmp	r2, #64	@ 0x40
 800dba2:	bf0c      	ite	eq
 800dba4:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800dba8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800dbac:	606b      	str	r3, [r5, #4]
 800dbae:	e724      	b.n	800d9fa <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbb0:	f7fc fd68 	bl	800a684 <HAL_GetTick>
 800dbb4:	1b80      	subs	r0, r0, r6
 800dbb6:	2802      	cmp	r0, #2
 800dbb8:	d9e5      	bls.n	800db86 <HAL_RCC_OscConfig+0x1a2>
 800dbba:	e7a4      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dbbc:	4d2d      	ldr	r5, [pc, #180]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dbbe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dbc0:	b1a2      	cbz	r2, 800dbec <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dbc2:	f023 0319 	bic.w	r3, r3, #25
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dbca:	f7fc fd5b 	bl	800a684 <HAL_GetTick>
 800dbce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	0758      	lsls	r0, r3, #29
 800dbd4:	d4da      	bmi.n	800db8c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbd6:	f7fc fd55 	bl	800a684 <HAL_GetTick>
 800dbda:	1b80      	subs	r0, r0, r6
 800dbdc:	2802      	cmp	r0, #2
 800dbde:	d9f7      	bls.n	800dbd0 <HAL_RCC_OscConfig+0x1ec>
 800dbe0:	e791      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbe2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800dbe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dbea:	e7df      	b.n	800dbac <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800dbec:	f023 0301 	bic.w	r3, r3, #1
 800dbf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dbf2:	f7fc fd47 	bl	800a684 <HAL_GetTick>
 800dbf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	0759      	lsls	r1, r3, #29
 800dbfc:	f57f aefd 	bpl.w	800d9fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc00:	f7fc fd40 	bl	800a684 <HAL_GetTick>
 800dc04:	1b80      	subs	r0, r0, r6
 800dc06:	2802      	cmp	r0, #2
 800dc08:	d9f6      	bls.n	800dbf8 <HAL_RCC_OscConfig+0x214>
 800dc0a:	e77c      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc0c:	68da      	ldr	r2, [r3, #12]
 800dc0e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800dc12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dc16:	60da      	str	r2, [r3, #12]
 800dc18:	e71a      	b.n	800da50 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dc1a:	69e3      	ldr	r3, [r4, #28]
 800dc1c:	4d15      	ldr	r5, [pc, #84]	@ (800dc74 <HAL_RCC_OscConfig+0x290>)
 800dc1e:	b36b      	cbz	r3, 800dc7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dc28:	f7fc fd2c 	bl	800a684 <HAL_GetTick>
 800dc2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc2e:	682b      	ldr	r3, [r5, #0]
 800dc30:	05df      	lsls	r7, r3, #23
 800dc32:	d511      	bpl.n	800dc58 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc34:	f7fc fd3e 	bl	800a6b4 <HAL_GetREVID>
 800dc38:	f241 0303 	movw	r3, #4099	@ 0x1003
 800dc3c:	6a22      	ldr	r2, [r4, #32]
 800dc3e:	4298      	cmp	r0, r3
 800dc40:	d810      	bhi.n	800dc64 <HAL_RCC_OscConfig+0x280>
 800dc42:	686b      	ldr	r3, [r5, #4]
 800dc44:	2a20      	cmp	r2, #32
 800dc46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800dc4a:	bf0c      	ite	eq
 800dc4c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800dc50:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800dc54:	606b      	str	r3, [r5, #4]
 800dc56:	e6fb      	b.n	800da50 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dc58:	f7fc fd14 	bl	800a684 <HAL_GetTick>
 800dc5c:	1b80      	subs	r0, r0, r6
 800dc5e:	2802      	cmp	r0, #2
 800dc60:	d9e5      	bls.n	800dc2e <HAL_RCC_OscConfig+0x24a>
 800dc62:	e750      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc64:	68eb      	ldr	r3, [r5, #12]
 800dc66:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800dc6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc6e:	60eb      	str	r3, [r5, #12]
 800dc70:	e6ee      	b.n	800da50 <HAL_RCC_OscConfig+0x6c>
 800dc72:	bf00      	nop
 800dc74:	58024400 	.word	0x58024400
 800dc78:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dc84:	f7fc fcfe 	bl	800a684 <HAL_GetTick>
 800dc88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dc8a:	682b      	ldr	r3, [r5, #0]
 800dc8c:	05d8      	lsls	r0, r3, #23
 800dc8e:	f57f aedf 	bpl.w	800da50 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dc92:	f7fc fcf7 	bl	800a684 <HAL_GetTick>
 800dc96:	1b80      	subs	r0, r0, r6
 800dc98:	2802      	cmp	r0, #2
 800dc9a:	d9f6      	bls.n	800dc8a <HAL_RCC_OscConfig+0x2a6>
 800dc9c:	e733      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc9e:	6963      	ldr	r3, [r4, #20]
 800dca0:	4da5      	ldr	r5, [pc, #660]	@ (800df38 <HAL_RCC_OscConfig+0x554>)
 800dca2:	b183      	cbz	r3, 800dcc6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800dca4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800dcac:	f7fc fcea 	bl	800a684 <HAL_GetTick>
 800dcb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dcb2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dcb4:	079b      	lsls	r3, r3, #30
 800dcb6:	f53f aecf 	bmi.w	800da58 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dcba:	f7fc fce3 	bl	800a684 <HAL_GetTick>
 800dcbe:	1b80      	subs	r0, r0, r6
 800dcc0:	2802      	cmp	r0, #2
 800dcc2:	d9f6      	bls.n	800dcb2 <HAL_RCC_OscConfig+0x2ce>
 800dcc4:	e71f      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800dcc6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dcc8:	f023 0301 	bic.w	r3, r3, #1
 800dccc:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800dcce:	f7fc fcd9 	bl	800a684 <HAL_GetTick>
 800dcd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dcd4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dcd6:	079f      	lsls	r7, r3, #30
 800dcd8:	f57f aebe 	bpl.w	800da58 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dcdc:	f7fc fcd2 	bl	800a684 <HAL_GetTick>
 800dce0:	1b80      	subs	r0, r0, r6
 800dce2:	2802      	cmp	r0, #2
 800dce4:	d9f6      	bls.n	800dcd4 <HAL_RCC_OscConfig+0x2f0>
 800dce6:	e70e      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800dce8:	69a3      	ldr	r3, [r4, #24]
 800dcea:	4d93      	ldr	r5, [pc, #588]	@ (800df38 <HAL_RCC_OscConfig+0x554>)
 800dcec:	b183      	cbz	r3, 800dd10 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dcf4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800dcf6:	f7fc fcc5 	bl	800a684 <HAL_GetTick>
 800dcfa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	0498      	lsls	r0, r3, #18
 800dd00:	f53f aeae 	bmi.w	800da60 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd04:	f7fc fcbe 	bl	800a684 <HAL_GetTick>
 800dd08:	1b80      	subs	r0, r0, r6
 800dd0a:	2802      	cmp	r0, #2
 800dd0c:	d9f6      	bls.n	800dcfc <HAL_RCC_OscConfig+0x318>
 800dd0e:	e6fa      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800dd18:	f7fc fcb4 	bl	800a684 <HAL_GetTick>
 800dd1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dd1e:	682b      	ldr	r3, [r5, #0]
 800dd20:	0499      	lsls	r1, r3, #18
 800dd22:	f57f ae9d 	bpl.w	800da60 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd26:	f7fc fcad 	bl	800a684 <HAL_GetTick>
 800dd2a:	1b80      	subs	r0, r0, r6
 800dd2c:	2802      	cmp	r0, #2
 800dd2e:	d9f6      	bls.n	800dd1e <HAL_RCC_OscConfig+0x33a>
 800dd30:	e6e9      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd32:	f7fc fca7 	bl	800a684 <HAL_GetTick>
 800dd36:	1b80      	subs	r0, r0, r6
 800dd38:	2864      	cmp	r0, #100	@ 0x64
 800dd3a:	f67f ae9c 	bls.w	800da76 <HAL_RCC_OscConfig+0x92>
 800dd3e:	e6e2      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd40:	b9b3      	cbnz	r3, 800dd70 <HAL_RCC_OscConfig+0x38c>
 800dd42:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd44:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd48:	f023 0301 	bic.w	r3, r3, #1
 800dd4c:	672b      	str	r3, [r5, #112]	@ 0x70
 800dd4e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dd50:	f023 0304 	bic.w	r3, r3, #4
 800dd54:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800dd56:	f7fc fc95 	bl	800a684 <HAL_GetTick>
 800dd5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dd5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dd5e:	0798      	lsls	r0, r3, #30
 800dd60:	f57f aea0 	bpl.w	800daa4 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd64:	f7fc fc8e 	bl	800a684 <HAL_GetTick>
 800dd68:	1b80      	subs	r0, r0, r6
 800dd6a:	42b8      	cmp	r0, r7
 800dd6c:	d9f6      	bls.n	800dd5c <HAL_RCC_OscConfig+0x378>
 800dd6e:	e6ca      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd70:	2b05      	cmp	r3, #5
 800dd72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dd74:	d103      	bne.n	800dd7e <HAL_RCC_OscConfig+0x39a>
 800dd76:	f043 0304 	orr.w	r3, r3, #4
 800dd7a:	672b      	str	r3, [r5, #112]	@ 0x70
 800dd7c:	e684      	b.n	800da88 <HAL_RCC_OscConfig+0xa4>
 800dd7e:	f023 0301 	bic.w	r3, r3, #1
 800dd82:	672b      	str	r3, [r5, #112]	@ 0x70
 800dd84:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dd86:	f023 0304 	bic.w	r3, r3, #4
 800dd8a:	e680      	b.n	800da8e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd8c:	f7fc fc7a 	bl	800a684 <HAL_GetTick>
 800dd90:	1b40      	subs	r0, r0, r5
 800dd92:	42b8      	cmp	r0, r7
 800dd94:	f67f ae82 	bls.w	800da9c <HAL_RCC_OscConfig+0xb8>
 800dd98:	e6b5      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800dd9a:	4d67      	ldr	r5, [pc, #412]	@ (800df38 <HAL_RCC_OscConfig+0x554>)
 800dd9c:	692b      	ldr	r3, [r5, #16]
 800dd9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dda2:	2b18      	cmp	r3, #24
 800dda4:	d07a      	beq.n	800de9c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800dda6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dda8:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800ddaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ddae:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ddb0:	d167      	bne.n	800de82 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800ddb2:	f7fc fc67 	bl	800a684 <HAL_GetTick>
 800ddb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	0199      	lsls	r1, r3, #6
 800ddbc:	d45b      	bmi.n	800de76 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ddbe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800ddc0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ddc2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800ddc6:	f023 0303 	bic.w	r3, r3, #3
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ddce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ddd2:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ddd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ddd6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	3a01      	subs	r2, #1
 800dddc:	025b      	lsls	r3, r3, #9
 800ddde:	0412      	lsls	r2, r2, #16
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dde6:	4313      	orrs	r3, r2
 800dde8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ddea:	3a01      	subs	r2, #1
 800ddec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ddf4:	3a01      	subs	r2, #1
 800ddf6:	0612      	lsls	r2, r2, #24
 800ddf8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800de00:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de02:	f023 0301 	bic.w	r3, r3, #1
 800de06:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800de08:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800de0a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800de0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de10:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800de18:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800de1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de1c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800de1e:	f023 030c 	bic.w	r3, r3, #12
 800de22:	4313      	orrs	r3, r2
 800de24:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800de26:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de28:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800de2a:	f023 0302 	bic.w	r3, r3, #2
 800de2e:	4313      	orrs	r3, r2
 800de30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800de32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de40:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800de42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800de48:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800de4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800de4c:	f043 0301 	orr.w	r3, r3, #1
 800de50:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800de52:	682b      	ldr	r3, [r5, #0]
 800de54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800de58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800de5a:	f7fc fc13 	bl	800a684 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800de5e:	4d36      	ldr	r5, [pc, #216]	@ (800df38 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800de60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800de62:	682b      	ldr	r3, [r5, #0]
 800de64:	019a      	lsls	r2, r3, #6
 800de66:	f53f ae21 	bmi.w	800daac <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de6a:	f7fc fc0b 	bl	800a684 <HAL_GetTick>
 800de6e:	1b00      	subs	r0, r0, r4
 800de70:	2802      	cmp	r0, #2
 800de72:	d9f6      	bls.n	800de62 <HAL_RCC_OscConfig+0x47e>
 800de74:	e647      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de76:	f7fc fc05 	bl	800a684 <HAL_GetTick>
 800de7a:	1b80      	subs	r0, r0, r6
 800de7c:	2802      	cmp	r0, #2
 800de7e:	d99b      	bls.n	800ddb8 <HAL_RCC_OscConfig+0x3d4>
 800de80:	e641      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800de82:	f7fc fbff 	bl	800a684 <HAL_GetTick>
 800de86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	019b      	lsls	r3, r3, #6
 800de8c:	f57f ae0e 	bpl.w	800daac <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de90:	f7fc fbf8 	bl	800a684 <HAL_GetTick>
 800de94:	1b00      	subs	r0, r0, r4
 800de96:	2802      	cmp	r0, #2
 800de98:	d9f6      	bls.n	800de88 <HAL_RCC_OscConfig+0x4a4>
 800de9a:	e634      	b.n	800db06 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800de9c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800de9e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dea0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dea2:	f43f ae18 	beq.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dea6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800deaa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800deac:	4281      	cmp	r1, r0
 800deae:	f47f ae12 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800deb2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800deb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800deb8:	428a      	cmp	r2, r1
 800deba:	f47f ae0c 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800debe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dec0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800dec4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dec6:	4291      	cmp	r1, r2
 800dec8:	f47f ae05 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800decc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800dece:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800ded2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ded4:	4291      	cmp	r1, r2
 800ded6:	f47f adfe 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800deda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dedc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800dee0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dee2:	4291      	cmp	r1, r2
 800dee4:	f47f adf7 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dee8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800deea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800deee:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800def0:	4293      	cmp	r3, r2
 800def2:	f47f adf0 	bne.w	800dad6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800def6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800def8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800defa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800defe:	429a      	cmp	r2, r3
 800df00:	f43f add4 	beq.w	800daac <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800df04:	4d0c      	ldr	r5, [pc, #48]	@ (800df38 <HAL_RCC_OscConfig+0x554>)
 800df06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800df08:	f023 0301 	bic.w	r3, r3, #1
 800df0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800df0e:	f7fc fbb9 	bl	800a684 <HAL_GetTick>
 800df12:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800df14:	f7fc fbb6 	bl	800a684 <HAL_GetTick>
 800df18:	42b0      	cmp	r0, r6
 800df1a:	d0fb      	beq.n	800df14 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800df1c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800df1e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800df20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800df28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800df2c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800df2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800df30:	f043 0301 	orr.w	r3, r3, #1
 800df34:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800df36:	e5b9      	b.n	800daac <HAL_RCC_OscConfig+0xc8>
 800df38:	58024400 	.word	0x58024400

0800df3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	4c23      	ldr	r4, [pc, #140]	@ (800dfcc <HAL_RCC_MCOConfig+0x90>)
 800df40:	b088      	sub	sp, #32
 800df42:	460e      	mov	r6, r1
 800df44:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800df46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800df4a:	b9f8      	cbnz	r0, 800df8c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800df4c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df50:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800df54:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800df56:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800df5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800df5e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df68:	2302      	movs	r3, #2
 800df6a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df6e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df70:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800df74:	4816      	ldr	r0, [pc, #88]	@ (800dfd0 <HAL_RCC_MCOConfig+0x94>)
 800df76:	f7fd fa0b 	bl	800b390 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800df80:	ea43 0106 	orr.w	r1, r3, r6
 800df84:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800df86:	6121      	str	r1, [r4, #16]
  }
}
 800df88:	b008      	add	sp, #32
 800df8a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800df8c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df90:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df94:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800df96:	480f      	ldr	r0, [pc, #60]	@ (800dfd4 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800df98:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800df9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800dfa0:	f003 0304 	and.w	r3, r3, #4
 800dfa4:	9302      	str	r3, [sp, #8]
 800dfa6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800dfb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800dfb6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800dfb8:	f7fd f9ea 	bl	800b390 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800dfbc:	6923      	ldr	r3, [r4, #16]
 800dfbe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800dfc2:	ea43 0106 	orr.w	r1, r3, r6
 800dfc6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800dfca:	e7dc      	b.n	800df86 <HAL_RCC_MCOConfig+0x4a>
 800dfcc:	58024400 	.word	0x58024400
 800dfd0:	58020000 	.word	0x58020000
 800dfd4:	58020800 	.word	0x58020800

0800dfd8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dfd8:	4b49      	ldr	r3, [pc, #292]	@ (800e100 <HAL_RCC_GetSysClockFreq+0x128>)
 800dfda:	691a      	ldr	r2, [r3, #16]
 800dfdc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800dfe0:	2a10      	cmp	r2, #16
{
 800dfe2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dfe4:	f000 8088 	beq.w	800e0f8 <HAL_RCC_GetSysClockFreq+0x120>
 800dfe8:	2a18      	cmp	r2, #24
 800dfea:	d00c      	beq.n	800e006 <HAL_RCC_GetSysClockFreq+0x2e>
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	f040 8085 	bne.w	800e0fc <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	4843      	ldr	r0, [pc, #268]	@ (800e104 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dff6:	f012 0f20 	tst.w	r2, #32
 800dffa:	d003      	beq.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e002:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800e004:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e006:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e008:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e00a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800e00c:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e010:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800e016:	d0f5      	beq.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e018:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e01c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e020:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e024:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e028:	4362      	muls	r2, r4
 800e02a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e02e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e034:	ee06 2a90 	vmov	s13, r2
 800e038:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800e03c:	d04e      	beq.n	800e0dc <HAL_RCC_GetSysClockFreq+0x104>
 800e03e:	2902      	cmp	r1, #2
 800e040:	d03e      	beq.n	800e0c0 <HAL_RCC_GetSysClockFreq+0xe8>
 800e042:	2900      	cmp	r1, #0
 800e044:	d14a      	bne.n	800e0dc <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	0692      	lsls	r2, r2, #26
 800e04a:	d527      	bpl.n	800e09c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e04c:	6819      	ldr	r1, [r3, #0]
 800e04e:	4a2d      	ldr	r2, [pc, #180]	@ (800e104 <HAL_RCC_GetSysClockFreq+0x12c>)
 800e050:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e056:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e05c:	ee07 2a90 	vmov	s15, r2
 800e060:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800e064:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800e068:	ee07 3a10 	vmov	s14, r3
 800e06c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e070:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e074:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e078:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e07c:	4b20      	ldr	r3, [pc, #128]	@ (800e100 <HAL_RCC_GetSysClockFreq+0x128>)
 800e07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e080:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e084:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e086:	ee07 3a10 	vmov	s14, r3
 800e08a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e08e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e092:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e096:	ee17 0a90 	vmov	r0, s15
 800e09a:	e7b3      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a2:	ee07 3a90 	vmov	s15, r3
 800e0a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e0b2:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e108 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0b6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800e0ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800e0be:	e7dd      	b.n	800e07c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0c6:	ee07 3a90 	vmov	s15, r3
 800e0ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e0d6:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800e10c <HAL_RCC_GetSysClockFreq+0x134>
 800e0da:	e7ec      	b.n	800e0b6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e2:	ee07 3a90 	vmov	s15, r3
 800e0e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e0f2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800e110 <HAL_RCC_GetSysClockFreq+0x138>
 800e0f6:	e7de      	b.n	800e0b6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0f8:	4806      	ldr	r0, [pc, #24]	@ (800e114 <HAL_RCC_GetSysClockFreq+0x13c>)
 800e0fa:	e783      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800e0fc:	4806      	ldr	r0, [pc, #24]	@ (800e118 <HAL_RCC_GetSysClockFreq+0x140>)
 800e0fe:	e781      	b.n	800e004 <HAL_RCC_GetSysClockFreq+0x2c>
 800e100:	58024400 	.word	0x58024400
 800e104:	03d09000 	.word	0x03d09000
 800e108:	4c742400 	.word	0x4c742400
 800e10c:	4bbebc20 	.word	0x4bbebc20
 800e110:	4a742400 	.word	0x4a742400
 800e114:	017d7840 	.word	0x017d7840
 800e118:	003d0900 	.word	0x003d0900

0800e11c <HAL_RCC_ClockConfig>:
{
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800e122:	4604      	mov	r4, r0
 800e124:	b910      	cbnz	r0, 800e12c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800e126:	2001      	movs	r0, #1
}
 800e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e12c:	4a88      	ldr	r2, [pc, #544]	@ (800e350 <HAL_RCC_ClockConfig+0x234>)
 800e12e:	6813      	ldr	r3, [r2, #0]
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	428b      	cmp	r3, r1
 800e136:	f0c0 8093 	bcc.w	800e260 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	075f      	lsls	r7, r3, #29
 800e13e:	f100 809b 	bmi.w	800e278 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e142:	071e      	lsls	r6, r3, #28
 800e144:	d50b      	bpl.n	800e15e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e146:	4983      	ldr	r1, [pc, #524]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e148:	6960      	ldr	r0, [r4, #20]
 800e14a:	69ca      	ldr	r2, [r1, #28]
 800e14c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e150:	4290      	cmp	r0, r2
 800e152:	d904      	bls.n	800e15e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e154:	69ca      	ldr	r2, [r1, #28]
 800e156:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e15a:	4302      	orrs	r2, r0
 800e15c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e15e:	06d8      	lsls	r0, r3, #27
 800e160:	d50b      	bpl.n	800e17a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e162:	497c      	ldr	r1, [pc, #496]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e164:	69a0      	ldr	r0, [r4, #24]
 800e166:	69ca      	ldr	r2, [r1, #28]
 800e168:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e16c:	4290      	cmp	r0, r2
 800e16e:	d904      	bls.n	800e17a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e170:	69ca      	ldr	r2, [r1, #28]
 800e172:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e176:	4302      	orrs	r2, r0
 800e178:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e17a:	0699      	lsls	r1, r3, #26
 800e17c:	d50b      	bpl.n	800e196 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e17e:	4975      	ldr	r1, [pc, #468]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e180:	69e0      	ldr	r0, [r4, #28]
 800e182:	6a0a      	ldr	r2, [r1, #32]
 800e184:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e188:	4290      	cmp	r0, r2
 800e18a:	d904      	bls.n	800e196 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e18c:	6a0a      	ldr	r2, [r1, #32]
 800e18e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e192:	4302      	orrs	r2, r0
 800e194:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e196:	079a      	lsls	r2, r3, #30
 800e198:	d50b      	bpl.n	800e1b2 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e19a:	496e      	ldr	r1, [pc, #440]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e19c:	68e0      	ldr	r0, [r4, #12]
 800e19e:	698a      	ldr	r2, [r1, #24]
 800e1a0:	f002 020f 	and.w	r2, r2, #15
 800e1a4:	4290      	cmp	r0, r2
 800e1a6:	d904      	bls.n	800e1b2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1a8:	698a      	ldr	r2, [r1, #24]
 800e1aa:	f022 020f 	bic.w	r2, r2, #15
 800e1ae:	4302      	orrs	r2, r0
 800e1b0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1b2:	07df      	lsls	r7, r3, #31
 800e1b4:	d46e      	bmi.n	800e294 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	079e      	lsls	r6, r3, #30
 800e1ba:	f100 80a1 	bmi.w	800e300 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e1be:	4964      	ldr	r1, [pc, #400]	@ (800e350 <HAL_RCC_ClockConfig+0x234>)
 800e1c0:	680a      	ldr	r2, [r1, #0]
 800e1c2:	f002 020f 	and.w	r2, r2, #15
 800e1c6:	42aa      	cmp	r2, r5
 800e1c8:	f200 80a8 	bhi.w	800e31c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e1cc:	0758      	lsls	r0, r3, #29
 800e1ce:	f100 80b1 	bmi.w	800e334 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1d2:	0719      	lsls	r1, r3, #28
 800e1d4:	d50b      	bpl.n	800e1ee <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e1d6:	495f      	ldr	r1, [pc, #380]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e1d8:	6960      	ldr	r0, [r4, #20]
 800e1da:	69ca      	ldr	r2, [r1, #28]
 800e1dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e1e0:	4290      	cmp	r0, r2
 800e1e2:	d204      	bcs.n	800e1ee <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e1e4:	69ca      	ldr	r2, [r1, #28]
 800e1e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e1ea:	4302      	orrs	r2, r0
 800e1ec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1ee:	06da      	lsls	r2, r3, #27
 800e1f0:	d50b      	bpl.n	800e20a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e1f2:	4958      	ldr	r1, [pc, #352]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e1f4:	69a0      	ldr	r0, [r4, #24]
 800e1f6:	69ca      	ldr	r2, [r1, #28]
 800e1f8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e1fc:	4290      	cmp	r0, r2
 800e1fe:	d204      	bcs.n	800e20a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e200:	69ca      	ldr	r2, [r1, #28]
 800e202:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e206:	4302      	orrs	r2, r0
 800e208:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e20a:	069b      	lsls	r3, r3, #26
 800e20c:	d50b      	bpl.n	800e226 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e20e:	4a51      	ldr	r2, [pc, #324]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e210:	69e1      	ldr	r1, [r4, #28]
 800e212:	6a13      	ldr	r3, [r2, #32]
 800e214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e218:	4299      	cmp	r1, r3
 800e21a:	d204      	bcs.n	800e226 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e21c:	6a13      	ldr	r3, [r2, #32]
 800e21e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e222:	430b      	orrs	r3, r1
 800e224:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e226:	f7ff fed7 	bl	800dfd8 <HAL_RCC_GetSysClockFreq>
 800e22a:	494a      	ldr	r1, [pc, #296]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e22c:	4a4a      	ldr	r2, [pc, #296]	@ (800e358 <HAL_RCC_ClockConfig+0x23c>)
 800e22e:	698b      	ldr	r3, [r1, #24]
 800e230:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800e234:	5cd3      	ldrb	r3, [r2, r3]
 800e236:	f003 031f 	and.w	r3, r3, #31
 800e23a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e23c:	698b      	ldr	r3, [r1, #24]
 800e23e:	f003 030f 	and.w	r3, r3, #15
 800e242:	5cd3      	ldrb	r3, [r2, r3]
 800e244:	4a45      	ldr	r2, [pc, #276]	@ (800e35c <HAL_RCC_ClockConfig+0x240>)
 800e246:	f003 031f 	and.w	r3, r3, #31
 800e24a:	fa20 f303 	lsr.w	r3, r0, r3
 800e24e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800e250:	4b43      	ldr	r3, [pc, #268]	@ (800e360 <HAL_RCC_ClockConfig+0x244>)
 800e252:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800e254:	4b43      	ldr	r3, [pc, #268]	@ (800e364 <HAL_RCC_ClockConfig+0x248>)
}
 800e256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800e25a:	6818      	ldr	r0, [r3, #0]
 800e25c:	f7f3 b996 	b.w	800158c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e260:	6813      	ldr	r3, [r2, #0]
 800e262:	f023 030f 	bic.w	r3, r3, #15
 800e266:	430b      	orrs	r3, r1
 800e268:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e26a:	6813      	ldr	r3, [r2, #0]
 800e26c:	f003 030f 	and.w	r3, r3, #15
 800e270:	428b      	cmp	r3, r1
 800e272:	f47f af58 	bne.w	800e126 <HAL_RCC_ClockConfig+0xa>
 800e276:	e760      	b.n	800e13a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e278:	4936      	ldr	r1, [pc, #216]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e27a:	6920      	ldr	r0, [r4, #16]
 800e27c:	698a      	ldr	r2, [r1, #24]
 800e27e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e282:	4290      	cmp	r0, r2
 800e284:	f67f af5d 	bls.w	800e142 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e288:	698a      	ldr	r2, [r1, #24]
 800e28a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e28e:	4302      	orrs	r2, r0
 800e290:	618a      	str	r2, [r1, #24]
 800e292:	e756      	b.n	800e142 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e294:	4b2f      	ldr	r3, [pc, #188]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e296:	68a1      	ldr	r1, [r4, #8]
 800e298:	699a      	ldr	r2, [r3, #24]
 800e29a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800e29e:	430a      	orrs	r2, r1
 800e2a0:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2a2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e2a4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2a6:	2902      	cmp	r1, #2
 800e2a8:	d11d      	bne.n	800e2e6 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e2aa:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e2ae:	f43f af3a 	beq.w	800e126 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e2b2:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e2b4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2b8:	4f26      	ldr	r7, [pc, #152]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e2ba:	f022 0207 	bic.w	r2, r2, #7
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800e2c2:	f7fc f9df 	bl	800a684 <HAL_GetTick>
 800e2c6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	6862      	ldr	r2, [r4, #4]
 800e2cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2d0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e2d4:	f43f af6f 	beq.w	800e1b6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e2d8:	f7fc f9d4 	bl	800a684 <HAL_GetTick>
 800e2dc:	1b80      	subs	r0, r0, r6
 800e2de:	4540      	cmp	r0, r8
 800e2e0:	d9f2      	bls.n	800e2c8 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800e2e2:	2003      	movs	r0, #3
 800e2e4:	e720      	b.n	800e128 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e2e6:	2903      	cmp	r1, #3
 800e2e8:	d102      	bne.n	800e2f0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2ea:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800e2ee:	e7de      	b.n	800e2ae <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e2f0:	2901      	cmp	r1, #1
 800e2f2:	d102      	bne.n	800e2fa <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e2f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800e2f8:	e7d9      	b.n	800e2ae <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e2fa:	f012 0f04 	tst.w	r2, #4
 800e2fe:	e7d6      	b.n	800e2ae <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e300:	4914      	ldr	r1, [pc, #80]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e302:	68e0      	ldr	r0, [r4, #12]
 800e304:	698a      	ldr	r2, [r1, #24]
 800e306:	f002 020f 	and.w	r2, r2, #15
 800e30a:	4290      	cmp	r0, r2
 800e30c:	f4bf af57 	bcs.w	800e1be <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e310:	698a      	ldr	r2, [r1, #24]
 800e312:	f022 020f 	bic.w	r2, r2, #15
 800e316:	4302      	orrs	r2, r0
 800e318:	618a      	str	r2, [r1, #24]
 800e31a:	e750      	b.n	800e1be <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e31c:	680a      	ldr	r2, [r1, #0]
 800e31e:	f022 020f 	bic.w	r2, r2, #15
 800e322:	432a      	orrs	r2, r5
 800e324:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e326:	680a      	ldr	r2, [r1, #0]
 800e328:	f002 020f 	and.w	r2, r2, #15
 800e32c:	42aa      	cmp	r2, r5
 800e32e:	f47f aefa 	bne.w	800e126 <HAL_RCC_ClockConfig+0xa>
 800e332:	e74b      	b.n	800e1cc <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e334:	4907      	ldr	r1, [pc, #28]	@ (800e354 <HAL_RCC_ClockConfig+0x238>)
 800e336:	6920      	ldr	r0, [r4, #16]
 800e338:	698a      	ldr	r2, [r1, #24]
 800e33a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e33e:	4290      	cmp	r0, r2
 800e340:	f4bf af47 	bcs.w	800e1d2 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e344:	698a      	ldr	r2, [r1, #24]
 800e346:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e34a:	4302      	orrs	r2, r0
 800e34c:	618a      	str	r2, [r1, #24]
 800e34e:	e740      	b.n	800e1d2 <HAL_RCC_ClockConfig+0xb6>
 800e350:	52002000 	.word	0x52002000
 800e354:	58024400 	.word	0x58024400
 800e358:	0802c7c0 	.word	0x0802c7c0
 800e35c:	24000068 	.word	0x24000068
 800e360:	2400006c 	.word	0x2400006c
 800e364:	24000074 	.word	0x24000074

0800e368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e368:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e36a:	f7ff fe35 	bl	800dfd8 <HAL_RCC_GetSysClockFreq>
 800e36e:	4a0b      	ldr	r2, [pc, #44]	@ (800e39c <HAL_RCC_GetHCLKFreq+0x34>)
 800e370:	490b      	ldr	r1, [pc, #44]	@ (800e3a0 <HAL_RCC_GetHCLKFreq+0x38>)
 800e372:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e374:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e376:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e37a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e37e:	5ccb      	ldrb	r3, [r1, r3]
 800e380:	f003 031f 	and.w	r3, r3, #31
 800e384:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e388:	5c88      	ldrb	r0, [r1, r2]
 800e38a:	4a06      	ldr	r2, [pc, #24]	@ (800e3a4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800e38c:	f000 001f 	and.w	r0, r0, #31
 800e390:	fa23 f000 	lsr.w	r0, r3, r0
 800e394:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e396:	4a04      	ldr	r2, [pc, #16]	@ (800e3a8 <HAL_RCC_GetHCLKFreq+0x40>)
 800e398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800e39a:	bd08      	pop	{r3, pc}
 800e39c:	58024400 	.word	0x58024400
 800e3a0:	0802c7c0 	.word	0x0802c7c0
 800e3a4:	24000068 	.word	0x24000068
 800e3a8:	2400006c 	.word	0x2400006c

0800e3ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3ac:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e3ae:	f7ff ffdb 	bl	800e368 <HAL_RCC_GetHCLKFreq>
 800e3b2:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e3b4:	4a05      	ldr	r2, [pc, #20]	@ (800e3cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800e3b6:	69db      	ldr	r3, [r3, #28]
 800e3b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e3bc:	5cd3      	ldrb	r3, [r2, r3]
 800e3be:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e3c2:	40d8      	lsrs	r0, r3
 800e3c4:	bd08      	pop	{r3, pc}
 800e3c6:	bf00      	nop
 800e3c8:	58024400 	.word	0x58024400
 800e3cc:	0802c7c0 	.word	0x0802c7c0

0800e3d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e3d2:	f7ff ffc9 	bl	800e368 <HAL_RCC_GetHCLKFreq>
 800e3d6:	4b05      	ldr	r3, [pc, #20]	@ (800e3ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e3d8:	4a05      	ldr	r2, [pc, #20]	@ (800e3f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e3da:	69db      	ldr	r3, [r3, #28]
 800e3dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e3e0:	5cd3      	ldrb	r3, [r2, r3]
 800e3e2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e3e6:	40d8      	lsrs	r0, r3
 800e3e8:	bd08      	pop	{r3, pc}
 800e3ea:	bf00      	nop
 800e3ec:	58024400 	.word	0x58024400
 800e3f0:	0802c7c0 	.word	0x0802c7c0

0800e3f4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e3f4:	233f      	movs	r3, #63	@ 0x3f
 800e3f6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e3f8:	4b11      	ldr	r3, [pc, #68]	@ (800e440 <HAL_RCC_GetClockConfig+0x4c>)
 800e3fa:	691a      	ldr	r2, [r3, #16]
 800e3fc:	f002 0207 	and.w	r2, r2, #7
 800e400:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e402:	699a      	ldr	r2, [r3, #24]
 800e404:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800e408:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e40a:	699a      	ldr	r2, [r3, #24]
 800e40c:	f002 020f 	and.w	r2, r2, #15
 800e410:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e412:	699a      	ldr	r2, [r3, #24]
 800e414:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e418:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e41a:	69da      	ldr	r2, [r3, #28]
 800e41c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e420:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e422:	69da      	ldr	r2, [r3, #28]
 800e424:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e428:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e430:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e432:	4b04      	ldr	r3, [pc, #16]	@ (800e444 <HAL_RCC_GetClockConfig+0x50>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f003 030f 	and.w	r3, r3, #15
 800e43a:	600b      	str	r3, [r1, #0]
}
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	58024400 	.word	0x58024400
 800e444:	52002000 	.word	0x52002000

0800e448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e44a:	4c3a      	ldr	r4, [pc, #232]	@ (800e534 <RCCEx_PLL2_Config+0xec>)
{
 800e44c:	4606      	mov	r6, r0
 800e44e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e450:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e452:	f003 0303 	and.w	r3, r3, #3
 800e456:	2b03      	cmp	r3, #3
 800e458:	d069      	beq.n	800e52e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e460:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e462:	f7fc f90f 	bl	800a684 <HAL_GetTick>
 800e466:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	011a      	lsls	r2, r3, #4
 800e46c:	d44b      	bmi.n	800e506 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e46e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e470:	6832      	ldr	r2, [r6, #0]
 800e472:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e476:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e47a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e47c:	68b3      	ldr	r3, [r6, #8]
 800e47e:	68f2      	ldr	r2, [r6, #12]
 800e480:	3b01      	subs	r3, #1
 800e482:	3a01      	subs	r2, #1
 800e484:	025b      	lsls	r3, r3, #9
 800e486:	0412      	lsls	r2, r2, #16
 800e488:	b29b      	uxth	r3, r3
 800e48a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e48e:	4313      	orrs	r3, r2
 800e490:	6872      	ldr	r2, [r6, #4]
 800e492:	3a01      	subs	r2, #1
 800e494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e498:	4313      	orrs	r3, r2
 800e49a:	6932      	ldr	r2, [r6, #16]
 800e49c:	3a01      	subs	r2, #1
 800e49e:	0612      	lsls	r2, r2, #24
 800e4a0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e4a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4aa:	6972      	ldr	r2, [r6, #20]
 800e4ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e4b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4b6:	69b2      	ldr	r2, [r6, #24]
 800e4b8:	f023 0320 	bic.w	r3, r3, #32
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e4c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4c2:	f023 0310 	bic.w	r3, r3, #16
 800e4c6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e4c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e4ca:	69f2      	ldr	r2, [r6, #28]
 800e4cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e4d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e4d8:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e4da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4dc:	f043 0310 	orr.w	r3, r3, #16
 800e4e0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e4e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e4e4:	b9b5      	cbnz	r5, 800e514 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e4e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e4ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e4ec:	4c11      	ldr	r4, [pc, #68]	@ (800e534 <RCCEx_PLL2_Config+0xec>)
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e4f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4f6:	f7fc f8c5 	bl	800a684 <HAL_GetTick>
 800e4fa:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e4fc:	6823      	ldr	r3, [r4, #0]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	d50f      	bpl.n	800e522 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800e502:	2000      	movs	r0, #0
 800e504:	e005      	b.n	800e512 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e506:	f7fc f8bd 	bl	800a684 <HAL_GetTick>
 800e50a:	1bc0      	subs	r0, r0, r7
 800e50c:	2802      	cmp	r0, #2
 800e50e:	d9ab      	bls.n	800e468 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800e510:	2003      	movs	r0, #3
}
 800e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e514:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e516:	bf0c      	ite	eq
 800e518:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e51c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800e520:	e7e3      	b.n	800e4ea <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e522:	f7fc f8af 	bl	800a684 <HAL_GetTick>
 800e526:	1b40      	subs	r0, r0, r5
 800e528:	2802      	cmp	r0, #2
 800e52a:	d9e7      	bls.n	800e4fc <RCCEx_PLL2_Config+0xb4>
 800e52c:	e7f0      	b.n	800e510 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800e52e:	2001      	movs	r0, #1
 800e530:	e7ef      	b.n	800e512 <RCCEx_PLL2_Config+0xca>
 800e532:	bf00      	nop
 800e534:	58024400 	.word	0x58024400

0800e538 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e53a:	4c3a      	ldr	r4, [pc, #232]	@ (800e624 <RCCEx_PLL3_Config+0xec>)
{
 800e53c:	4606      	mov	r6, r0
 800e53e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e540:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e542:	f003 0303 	and.w	r3, r3, #3
 800e546:	2b03      	cmp	r3, #3
 800e548:	d069      	beq.n	800e61e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e550:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e552:	f7fc f897 	bl	800a684 <HAL_GetTick>
 800e556:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	009a      	lsls	r2, r3, #2
 800e55c:	d44b      	bmi.n	800e5f6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e55e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e560:	6832      	ldr	r2, [r6, #0]
 800e562:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800e566:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e56a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e56c:	68b3      	ldr	r3, [r6, #8]
 800e56e:	68f2      	ldr	r2, [r6, #12]
 800e570:	3b01      	subs	r3, #1
 800e572:	3a01      	subs	r2, #1
 800e574:	025b      	lsls	r3, r3, #9
 800e576:	0412      	lsls	r2, r2, #16
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e57e:	4313      	orrs	r3, r2
 800e580:	6872      	ldr	r2, [r6, #4]
 800e582:	3a01      	subs	r2, #1
 800e584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e588:	4313      	orrs	r3, r2
 800e58a:	6932      	ldr	r2, [r6, #16]
 800e58c:	3a01      	subs	r2, #1
 800e58e:	0612      	lsls	r2, r2, #24
 800e590:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e594:	4313      	orrs	r3, r2
 800e596:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e598:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e59a:	6972      	ldr	r2, [r6, #20]
 800e59c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e5a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e5a6:	69b2      	ldr	r2, [r6, #24]
 800e5a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e5b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e5b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5b6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e5b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e5ba:	69f2      	ldr	r2, [r6, #28]
 800e5bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e5c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e5c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e5c8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e5ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e5cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e5d0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e5d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e5d4:	b9b5      	cbnz	r5, 800e604 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e5d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e5da:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e5dc:	4c11      	ldr	r4, [pc, #68]	@ (800e624 <RCCEx_PLL3_Config+0xec>)
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5e6:	f7fc f84d 	bl	800a684 <HAL_GetTick>
 800e5ea:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	d50f      	bpl.n	800e612 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e005      	b.n	800e602 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e5f6:	f7fc f845 	bl	800a684 <HAL_GetTick>
 800e5fa:	1bc0      	subs	r0, r0, r7
 800e5fc:	2802      	cmp	r0, #2
 800e5fe:	d9ab      	bls.n	800e558 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800e600:	2003      	movs	r0, #3
}
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e604:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e606:	bf0c      	ite	eq
 800e608:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e60c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800e610:	e7e3      	b.n	800e5da <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e612:	f7fc f837 	bl	800a684 <HAL_GetTick>
 800e616:	1b40      	subs	r0, r0, r5
 800e618:	2802      	cmp	r0, #2
 800e61a:	d9e7      	bls.n	800e5ec <RCCEx_PLL3_Config+0xb4>
 800e61c:	e7f0      	b.n	800e600 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800e61e:	2001      	movs	r0, #1
 800e620:	e7ef      	b.n	800e602 <RCCEx_PLL3_Config+0xca>
 800e622:	bf00      	nop
 800e624:	58024400 	.word	0x58024400

0800e628 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e62c:	6803      	ldr	r3, [r0, #0]
{
 800e62e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e630:	011c      	lsls	r4, r3, #4
 800e632:	d51e      	bpl.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e634:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800e636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e63a:	d02a      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e63c:	d80f      	bhi.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800e63e:	b1d3      	cbz	r3, 800e676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800e640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e644:	d01d      	beq.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800e646:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	05d8      	lsls	r0, r3, #23
 800e64c:	d54f      	bpl.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e64e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800e650:	2b04      	cmp	r3, #4
 800e652:	d84b      	bhi.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800e654:	e8df f003 	tbb	[pc, r3]
 800e658:	27443d22 	.word	0x27443d22
 800e65c:	27          	.byte	0x27
 800e65d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e65e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e662:	d1f0      	bne.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e664:	4a86      	ldr	r2, [pc, #536]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e666:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800e668:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e66a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e66e:	430b      	orrs	r3, r1
 800e670:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e672:	2600      	movs	r6, #0
 800e674:	e7e8      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e676:	4a82      	ldr	r2, [pc, #520]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e678:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e67a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e67e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e680:	e7f0      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e682:	2102      	movs	r1, #2
 800e684:	3008      	adds	r0, #8
 800e686:	f7ff fedf 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e68a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d1db      	bne.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800e690:	e7e8      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e692:	2102      	movs	r1, #2
 800e694:	3028      	adds	r0, #40	@ 0x28
 800e696:	f7ff ff4f 	bl	800e538 <RCCEx_PLL3_Config>
 800e69a:	e7f6      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e69c:	4a78      	ldr	r2, [pc, #480]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e69e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e6a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e6a6:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800e6a8:	bb1c      	cbnz	r4, 800e6f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e6aa:	4a75      	ldr	r2, [pc, #468]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e6ac:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800e6ae:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	430b      	orrs	r3, r1
 800e6b6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	0599      	lsls	r1, r3, #22
 800e6bc:	d528      	bpl.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800e6be:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800e6c0:	2b80      	cmp	r3, #128	@ 0x80
 800e6c2:	d043      	beq.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800e6c4:	d817      	bhi.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800e6c6:	b3a3      	cbz	r3, 800e732 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800e6c8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ca:	d038      	beq.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e6cc:	2601      	movs	r6, #1
 800e6ce:	4634      	mov	r4, r6
 800e6d0:	e01e      	b.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	f105 0008 	add.w	r0, r5, #8
 800e6d8:	f7ff feb6 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6dc:	4604      	mov	r4, r0
        break;
 800e6de:	e7e3      	b.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e6e6:	f7ff ff27 	bl	800e538 <RCCEx_PLL3_Config>
 800e6ea:	e7f7      	b.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e6ec:	2601      	movs	r6, #1
 800e6ee:	4634      	mov	r4, r6
 800e6f0:	e7e2      	b.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e6f2:	4626      	mov	r6, r4
 800e6f4:	e7e0      	b.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800e6f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800e6f8:	d002      	beq.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800e6fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6fe:	d1e5      	bne.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800e700:	bb54      	cbnz	r4, 800e758 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e702:	4a5f      	ldr	r2, [pc, #380]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e704:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e706:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e708:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800e70c:	430b      	orrs	r3, r1
 800e70e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	055a      	lsls	r2, r3, #21
 800e714:	d531      	bpl.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e716:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800e71a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e71e:	d049      	beq.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800e720:	d81c      	bhi.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d039      	beq.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e72a:	d03c      	beq.n	800e7a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800e72c:	2601      	movs	r6, #1
 800e72e:	4634      	mov	r4, r6
 800e730:	e023      	b.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e732:	4a53      	ldr	r2, [pc, #332]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e734:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e73a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e73c:	e7e0      	b.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e73e:	2100      	movs	r1, #0
 800e740:	f105 0008 	add.w	r0, r5, #8
 800e744:	f7ff fe80 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e748:	4604      	mov	r4, r0
        break;
 800e74a:	e7d9      	b.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e74c:	2100      	movs	r1, #0
 800e74e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e752:	f7ff fef1 	bl	800e538 <RCCEx_PLL3_Config>
 800e756:	e7f7      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800e758:	4626      	mov	r6, r4
 800e75a:	e7d9      	b.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e75c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e760:	d002      	beq.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800e762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e766:	d1e1      	bne.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800e768:	bb54      	cbnz	r4, 800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e76a:	4a45      	ldr	r2, [pc, #276]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e76c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800e770:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e772:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800e776:	430b      	orrs	r3, r1
 800e778:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e77a:	682b      	ldr	r3, [r5, #0]
 800e77c:	051b      	lsls	r3, r3, #20
 800e77e:	d530      	bpl.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e780:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800e784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e788:	d045      	beq.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e78a:	d81b      	bhi.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800e78c:	b3b3      	cbz	r3, 800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800e78e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e792:	d039      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800e794:	2601      	movs	r6, #1
 800e796:	4634      	mov	r4, r6
 800e798:	e023      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e79a:	4a39      	ldr	r2, [pc, #228]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e79c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e7a4:	e7e0      	b.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	f105 0008 	add.w	r0, r5, #8
 800e7ac:	f7ff fe4c 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e7b0:	4604      	mov	r4, r0
        break;
 800e7b2:	e7d9      	b.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e7ba:	f7ff febd 	bl	800e538 <RCCEx_PLL3_Config>
 800e7be:	e7f7      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800e7c0:	4626      	mov	r6, r4
 800e7c2:	e7da      	b.n	800e77a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e7c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e7c8:	d002      	beq.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e7ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e7ce:	d1e1      	bne.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800e7d0:	bb3c      	cbnz	r4, 800e822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e7d2:	4a2b      	ldr	r2, [pc, #172]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e7d4:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800e7d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e7da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800e7de:	430b      	orrs	r3, r1
 800e7e0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e7e2:	682b      	ldr	r3, [r5, #0]
 800e7e4:	019f      	lsls	r7, r3, #6
 800e7e6:	d528      	bpl.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800e7e8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e7ea:	2b20      	cmp	r3, #32
 800e7ec:	d03e      	beq.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800e7ee:	d81a      	bhi.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800e7f0:	b1db      	cbz	r3, 800e82a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e7f2:	2b10      	cmp	r3, #16
 800e7f4:	d034      	beq.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800e7f6:	2601      	movs	r6, #1
 800e7f8:	4634      	mov	r4, r6
 800e7fa:	e01e      	b.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7fc:	4a20      	ldr	r2, [pc, #128]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e7fe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e804:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e806:	e7e3      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e808:	2100      	movs	r1, #0
 800e80a:	f105 0008 	add.w	r0, r5, #8
 800e80e:	f7ff fe1b 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e812:	4604      	mov	r4, r0
        break;
 800e814:	e7dc      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e816:	2100      	movs	r1, #0
 800e818:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e81c:	f7ff fe8c 	bl	800e538 <RCCEx_PLL3_Config>
 800e820:	e7f7      	b.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e822:	4626      	mov	r6, r4
 800e824:	e7dd      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800e826:	2b30      	cmp	r3, #48	@ 0x30
 800e828:	d1e5      	bne.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800e82a:	bb34      	cbnz	r4, 800e87a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e82c:	4a14      	ldr	r2, [pc, #80]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e82e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e830:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e832:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800e836:	430b      	orrs	r3, r1
 800e838:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	04d8      	lsls	r0, r3, #19
 800e83e:	d530      	bpl.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800e840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e846:	f000 8097 	beq.w	800e978 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800e84a:	d81b      	bhi.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 8086 	beq.w	800e95e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800e852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e856:	f000 8088 	beq.w	800e96a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800e85a:	2601      	movs	r6, #1
 800e85c:	4634      	mov	r4, r6
 800e85e:	e020      	b.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e860:	4a07      	ldr	r2, [pc, #28]	@ (800e880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e862:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e868:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e86a:	e7de      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e86c:	2102      	movs	r1, #2
 800e86e:	f105 0008 	add.w	r0, r5, #8
 800e872:	f7ff fde9 	bl	800e448 <RCCEx_PLL2_Config>
 800e876:	4604      	mov	r4, r0
        break;
 800e878:	e7d7      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e87a:	4626      	mov	r6, r4
 800e87c:	e7dd      	b.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800e87e:	bf00      	nop
 800e880:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800e884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e888:	d002      	beq.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800e88a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e88e:	d1e4      	bne.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800e890:	2c00      	cmp	r4, #0
 800e892:	d177      	bne.n	800e984 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e894:	4a9e      	ldr	r2, [pc, #632]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e896:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800e898:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e89a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e89e:	430b      	orrs	r3, r1
 800e8a0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e8a2:	682b      	ldr	r3, [r5, #0]
 800e8a4:	0499      	lsls	r1, r3, #18
 800e8a6:	d50c      	bpl.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e8a8:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800e8aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8ae:	f000 8083 	beq.w	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800e8b2:	d869      	bhi.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d06f      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800e8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8bc:	d075      	beq.n	800e9aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e8be:	2601      	movs	r6, #1
 800e8c0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	045a      	lsls	r2, r3, #17
 800e8c6:	d50e      	bpl.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e8c8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e8cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8d0:	f000 8093 	beq.w	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800e8d4:	d878      	bhi.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d07e      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e8da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8de:	f000 8085 	beq.w	800e9ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800e8e2:	2601      	movs	r6, #1
 800e8e4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	015b      	lsls	r3, r3, #5
 800e8ea:	d515      	bpl.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800e8ec:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e8ee:	b14b      	cbz	r3, 800e904 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e8f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8f4:	f040 8089 	bne.w	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	f105 0008 	add.w	r0, r5, #8
 800e8fe:	f7ff fda3 	bl	800e448 <RCCEx_PLL2_Config>
 800e902:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e904:	2c00      	cmp	r4, #0
 800e906:	f040 8083 	bne.w	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800e90a:	4a81      	ldr	r2, [pc, #516]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e90c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800e90e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e914:	430b      	orrs	r3, r1
 800e916:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	041f      	lsls	r7, r3, #16
 800e91c:	d511      	bpl.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800e91e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e924:	d076      	beq.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800e926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e92a:	d079      	beq.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d17e      	bne.n	800ea2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800e930:	2c00      	cmp	r4, #0
 800e932:	d17f      	bne.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e934:	4a76      	ldr	r2, [pc, #472]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e936:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800e938:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e93a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800e93e:	430b      	orrs	r3, r1
 800e940:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	01d8      	lsls	r0, r3, #7
 800e946:	f140 8085 	bpl.w	800ea54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800e94a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800e94c:	2b03      	cmp	r3, #3
 800e94e:	f200 80e5 	bhi.w	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800e952:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e956:	0076      	.short	0x0076
 800e958:	00d50071 	.word	0x00d50071
 800e95c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e95e:	4a6c      	ldr	r2, [pc, #432]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e960:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e966:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e968:	e792      	b.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e96a:	2100      	movs	r1, #0
 800e96c:	f105 0008 	add.w	r0, r5, #8
 800e970:	f7ff fd6a 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e974:	4604      	mov	r4, r0
        break;
 800e976:	e78b      	b.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e978:	2100      	movs	r1, #0
 800e97a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e97e:	f7ff fddb 	bl	800e538 <RCCEx_PLL3_Config>
 800e982:	e7f7      	b.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800e984:	4626      	mov	r6, r4
 800e986:	e78c      	b.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e988:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e98c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800e990:	d002      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800e992:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e996:	d192      	bne.n	800e8be <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800e998:	b9a4      	cbnz	r4, 800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e99a:	4a5d      	ldr	r2, [pc, #372]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e99c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800e99e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e9a0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800e9a4:	430b      	orrs	r3, r1
 800e9a6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e9a8:	e78b      	b.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	f105 0008 	add.w	r0, r5, #8
 800e9b0:	f7ff fd4a 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9b4:	4604      	mov	r4, r0
        break;
 800e9b6:	e7ef      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e9be:	f7ff fdbb 	bl	800e538 <RCCEx_PLL3_Config>
 800e9c2:	e7f7      	b.n	800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800e9c4:	4626      	mov	r6, r4
 800e9c6:	e77c      	b.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e9c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e9cc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800e9d0:	d002      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e9d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e9d6:	d184      	bne.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800e9d8:	b9ac      	cbnz	r4, 800ea06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e9da:	4a4d      	ldr	r2, [pc, #308]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e9dc:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800e9e0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e9e2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800e9e6:	430b      	orrs	r3, r1
 800e9e8:	6593      	str	r3, [r2, #88]	@ 0x58
 800e9ea:	e77c      	b.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9ec:	2101      	movs	r1, #1
 800e9ee:	f105 0008 	add.w	r0, r5, #8
 800e9f2:	f7ff fd29 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9f6:	4604      	mov	r4, r0
        break;
 800e9f8:	e7ee      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9fa:	2101      	movs	r1, #1
 800e9fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ea00:	f7ff fd9a 	bl	800e538 <RCCEx_PLL3_Config>
 800ea04:	e7f7      	b.n	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ea06:	4626      	mov	r6, r4
 800ea08:	e76d      	b.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800ea0a:	2601      	movs	r6, #1
 800ea0c:	4634      	mov	r4, r6
 800ea0e:	e783      	b.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800ea10:	4626      	mov	r6, r4
 800ea12:	e781      	b.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea14:	4a3e      	ldr	r2, [pc, #248]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ea16:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ea18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ea1e:	e787      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea20:	2101      	movs	r1, #1
 800ea22:	f105 0008 	add.w	r0, r5, #8
 800ea26:	f7ff fd0f 	bl	800e448 <RCCEx_PLL2_Config>
 800ea2a:	4604      	mov	r4, r0
        break;
 800ea2c:	e780      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800ea2e:	2601      	movs	r6, #1
 800ea30:	4634      	mov	r4, r6
 800ea32:	e786      	b.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800ea34:	4626      	mov	r6, r4
 800ea36:	e784      	b.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea38:	4a35      	ldr	r2, [pc, #212]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ea3a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ea3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ea42:	2c00      	cmp	r4, #0
 800ea44:	d16d      	bne.n	800eb22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ea46:	4a32      	ldr	r2, [pc, #200]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ea48:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ea4a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ea4c:	f023 0303 	bic.w	r3, r3, #3
 800ea50:	430b      	orrs	r3, r1
 800ea52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	0259      	lsls	r1, r3, #9
 800ea58:	d539      	bpl.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ea5a:	4f2e      	ldr	r7, [pc, #184]	@ (800eb14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea62:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ea64:	f7fb fe0e 	bl	800a684 <HAL_GetTick>
 800ea68:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	05da      	lsls	r2, r3, #23
 800ea6e:	d55a      	bpl.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800ea70:	2c00      	cmp	r4, #0
 800ea72:	d176      	bne.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ea74:	4b26      	ldr	r3, [pc, #152]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ea76:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800ea7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ea7c:	4042      	eors	r2, r0
 800ea7e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800ea82:	d00b      	beq.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800ea86:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800ea8c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800ea90:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ea92:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ea94:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800ea98:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800ea9a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ea9c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800eaa0:	d04a      	beq.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eaa2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800eaa6:	491a      	ldr	r1, [pc, #104]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800eaa8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800eaac:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800eab0:	d153      	bne.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800eab2:	6908      	ldr	r0, [r1, #16]
 800eab4:	4a18      	ldr	r2, [pc, #96]	@ (800eb18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800eab6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800eaba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800eabe:	4302      	orrs	r2, r0
 800eac0:	610a      	str	r2, [r1, #16]
 800eac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eac6:	4a12      	ldr	r2, [pc, #72]	@ (800eb10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800eac8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800eaca:	430b      	orrs	r3, r1
 800eacc:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	07d8      	lsls	r0, r3, #31
 800ead2:	d50a      	bpl.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ead4:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ead8:	2b10      	cmp	r3, #16
 800eada:	d05b      	beq.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800eadc:	d843      	bhi.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d047      	beq.n	800eb72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800eae2:	2b08      	cmp	r3, #8
 800eae4:	d04f      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800eae6:	2601      	movs	r6, #1
 800eae8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eaea:	682b      	ldr	r3, [r5, #0]
 800eaec:	0799      	lsls	r1, r3, #30
 800eaee:	d567      	bpl.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eaf0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800eaf2:	2b05      	cmp	r3, #5
 800eaf4:	d87a      	bhi.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800eaf6:	e8df f003 	tbb	[pc, r3]
 800eafa:	555b      	.short	0x555b
 800eafc:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb00:	2102      	movs	r1, #2
 800eb02:	f105 0008 	add.w	r0, r5, #8
 800eb06:	f7ff fc9f 	bl	800e448 <RCCEx_PLL2_Config>
 800eb0a:	4604      	mov	r4, r0
        break;
 800eb0c:	e799      	b.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800eb0e:	bf00      	nop
 800eb10:	58024400 	.word	0x58024400
 800eb14:	58024800 	.word	0x58024800
 800eb18:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800eb1c:	2601      	movs	r6, #1
 800eb1e:	4634      	mov	r4, r6
 800eb20:	e798      	b.n	800ea54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800eb22:	4626      	mov	r6, r4
 800eb24:	e796      	b.n	800ea54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb26:	f7fb fdad 	bl	800a684 <HAL_GetTick>
 800eb2a:	eba0 0008 	sub.w	r0, r0, r8
 800eb2e:	2864      	cmp	r0, #100	@ 0x64
 800eb30:	d99b      	bls.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800eb32:	2603      	movs	r6, #3
 800eb34:	4634      	mov	r4, r6
 800eb36:	e7ca      	b.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800eb38:	f7fb fda4 	bl	800a684 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb3c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800eb40:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb42:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb46:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800eb4a:	079b      	lsls	r3, r3, #30
 800eb4c:	d4a9      	bmi.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb4e:	f7fb fd99 	bl	800a684 <HAL_GetTick>
 800eb52:	1bc0      	subs	r0, r0, r7
 800eb54:	4548      	cmp	r0, r9
 800eb56:	d9f6      	bls.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800eb58:	e7eb      	b.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb5a:	690a      	ldr	r2, [r1, #16]
 800eb5c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800eb60:	e7ae      	b.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800eb62:	4626      	mov	r6, r4
 800eb64:	e7b3      	b.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800eb66:	f023 0208 	bic.w	r2, r3, #8
 800eb6a:	2a20      	cmp	r2, #32
 800eb6c:	d001      	beq.n	800eb72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800eb6e:	2b18      	cmp	r3, #24
 800eb70:	d1b9      	bne.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800eb72:	b9ac      	cbnz	r4, 800eba0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eb74:	4a20      	ldr	r2, [pc, #128]	@ (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eb76:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800eb7a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800eb7c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800eb80:	430b      	orrs	r3, r1
 800eb82:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb84:	e7b1      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb86:	2101      	movs	r1, #1
 800eb88:	f105 0008 	add.w	r0, r5, #8
 800eb8c:	f7ff fc5c 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb90:	4604      	mov	r4, r0
        break;
 800eb92:	e7ee      	b.n	800eb72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb94:	2101      	movs	r1, #1
 800eb96:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eb9a:	f7ff fccd 	bl	800e538 <RCCEx_PLL3_Config>
 800eb9e:	e7f7      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800eba0:	4626      	mov	r6, r4
 800eba2:	e7a2      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eba4:	2101      	movs	r1, #1
 800eba6:	f105 0008 	add.w	r0, r5, #8
 800ebaa:	f7ff fc4d 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebae:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ebb0:	b9fc      	cbnz	r4, 800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ebb2:	4a11      	ldr	r2, [pc, #68]	@ (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ebb4:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800ebb6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ebb8:	f023 0307 	bic.w	r3, r3, #7
 800ebbc:	430b      	orrs	r3, r1
 800ebbe:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	075a      	lsls	r2, r3, #29
 800ebc4:	d52b      	bpl.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ebc6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ebca:	2b05      	cmp	r3, #5
 800ebcc:	f200 816e 	bhi.w	800eeac <HAL_RCCEx_PeriphCLKConfig+0x884>
 800ebd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ebd4:	0014001a 	.word	0x0014001a
 800ebd8:	001a0166 	.word	0x001a0166
 800ebdc:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ebe6:	f7ff fca7 	bl	800e538 <RCCEx_PLL3_Config>
 800ebea:	e7e0      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ebec:	2601      	movs	r6, #1
 800ebee:	4634      	mov	r4, r6
 800ebf0:	e7e6      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ebf2:	4626      	mov	r6, r4
 800ebf4:	e7e4      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ebf6:	bf00      	nop
 800ebf8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	f105 0008 	add.w	r0, r5, #8
 800ec02:	f7ff fc21 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec06:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ec08:	2c00      	cmp	r4, #0
 800ec0a:	f040 8152 	bne.w	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ec0e:	4aaa      	ldr	r2, [pc, #680]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ec10:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800ec14:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ec16:	f023 0307 	bic.w	r3, r3, #7
 800ec1a:	430b      	orrs	r3, r1
 800ec1c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	069b      	lsls	r3, r3, #26
 800ec22:	d510      	bpl.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ec24:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800ec28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec2c:	f000 8160 	beq.w	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800ec30:	f200 8144 	bhi.w	800eebc <HAL_RCCEx_PeriphCLKConfig+0x894>
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f000 814a 	beq.w	800eece <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800ec3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec3e:	f000 8150 	beq.w	800eee2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800ec42:	2601      	movs	r6, #1
 800ec44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ec46:	682b      	ldr	r3, [r5, #0]
 800ec48:	065f      	lsls	r7, r3, #25
 800ec4a:	d510      	bpl.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ec4c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800ec50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec54:	f000 816e 	beq.w	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800ec58:	f200 8152 	bhi.w	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 8158 	beq.w	800ef12 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ec62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec66:	f000 815e 	beq.w	800ef26 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ec6a:	2601      	movs	r6, #1
 800ec6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ec6e:	682b      	ldr	r3, [r5, #0]
 800ec70:	0618      	lsls	r0, r3, #24
 800ec72:	d510      	bpl.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ec74:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800ec78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec7c:	f000 817c 	beq.w	800ef78 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800ec80:	f200 8160 	bhi.w	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 8166 	beq.w	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ec8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec8e:	f000 816c 	beq.w	800ef6a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800ec92:	2601      	movs	r6, #1
 800ec94:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ec96:	682b      	ldr	r3, [r5, #0]
 800ec98:	0719      	lsls	r1, r3, #28
 800ec9a:	d514      	bpl.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ec9c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800eca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eca4:	d107      	bne.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eca6:	2102      	movs	r1, #2
 800eca8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ecac:	f7ff fc44 	bl	800e538 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	bf18      	it	ne
 800ecb4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ecb6:	4a80      	ldr	r2, [pc, #512]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ecb8:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800ecbc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ecbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800ecc2:	430b      	orrs	r3, r1
 800ecc4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	06da      	lsls	r2, r3, #27
 800ecca:	d514      	bpl.n	800ecf6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800eccc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800ecd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecd4:	d107      	bne.n	800ece6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ecd6:	2102      	movs	r1, #2
 800ecd8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ecdc:	f7ff fc2c 	bl	800e538 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ece0:	2800      	cmp	r0, #0
 800ece2:	bf18      	it	ne
 800ece4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ece6:	4a74      	ldr	r2, [pc, #464]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ece8:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800ecec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ecee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecf2:	430b      	orrs	r3, r1
 800ecf4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	031b      	lsls	r3, r3, #12
 800ecfa:	d51b      	bpl.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800ecfc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ed00:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800ed04:	f000 8140 	beq.w	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ed08:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800ed0c:	d007      	beq.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800ed0e:	2900      	cmp	r1, #0
 800ed10:	f040 8140 	bne.w	800ef94 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed14:	f105 0008 	add.w	r0, r5, #8
 800ed18:	f7ff fb96 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed1c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ed1e:	2c00      	cmp	r4, #0
 800ed20:	f040 813b 	bne.w	800ef9a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ed24:	4a64      	ldr	r2, [pc, #400]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ed26:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ed2a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ed2c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ed30:	430b      	orrs	r3, r1
 800ed32:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	035f      	lsls	r7, r3, #13
 800ed38:	d50f      	bpl.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800ed3a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800ed3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ed42:	f000 813b 	beq.w	800efbc <HAL_RCCEx_PeriphCLKConfig+0x994>
 800ed46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ed4a:	f000 812d 	beq.w	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800ed4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed52:	f000 8124 	beq.w	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800ed56:	2601      	movs	r6, #1
 800ed58:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	03d8      	lsls	r0, r3, #15
 800ed5e:	d509      	bpl.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800ed60:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8133 	beq.w	800efce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800ed68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed6c:	f000 813d 	beq.w	800efea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800ed70:	2601      	movs	r6, #1
 800ed72:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	0099      	lsls	r1, r3, #2
 800ed78:	d507      	bpl.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ed7a:	2102      	movs	r1, #2
 800ed7c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ed80:	f7ff fbda 	bl	800e538 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800ed84:	2800      	cmp	r0, #0
 800ed86:	bf18      	it	ne
 800ed88:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ed8a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800ed8e:	039a      	lsls	r2, r3, #14
 800ed90:	f140 8143 	bpl.w	800f01a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800ed94:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800ed98:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800ed9c:	f000 813f 	beq.w	800f01e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800eda0:	f200 812c 	bhi.w	800effc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	f000 812f 	beq.w	800f008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800edaa:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800edac:	02df      	lsls	r7, r3, #11
 800edae:	d506      	bpl.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800edb0:	4841      	ldr	r0, [pc, #260]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800edb2:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800edb4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800edb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800edba:	4332      	orrs	r2, r6
 800edbc:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800edbe:	00de      	lsls	r6, r3, #3
 800edc0:	d507      	bpl.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800edc2:	483d      	ldr	r0, [pc, #244]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800edc4:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800edc8:	6902      	ldr	r2, [r0, #16]
 800edca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800edce:	4332      	orrs	r2, r6
 800edd0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800edd2:	0298      	lsls	r0, r3, #10
 800edd4:	d506      	bpl.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800edd6:	4838      	ldr	r0, [pc, #224]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800edd8:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800edda:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800eddc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ede0:	4332      	orrs	r2, r6
 800ede2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ede4:	005a      	lsls	r2, r3, #1
 800ede6:	d509      	bpl.n	800edfc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ede8:	4a33      	ldr	r2, [pc, #204]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800edea:	6910      	ldr	r0, [r2, #16]
 800edec:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800edf0:	6110      	str	r0, [r2, #16]
 800edf2:	6910      	ldr	r0, [r2, #16]
 800edf4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800edf8:	4330      	orrs	r0, r6
 800edfa:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	da06      	bge.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ee00:	482d      	ldr	r0, [pc, #180]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ee02:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ee04:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800ee06:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ee0a:	4332      	orrs	r2, r6
 800ee0c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ee0e:	021f      	lsls	r7, r3, #8
 800ee10:	d507      	bpl.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ee12:	4a29      	ldr	r2, [pc, #164]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ee14:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800ee18:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ee1a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ee1e:	4303      	orrs	r3, r0
 800ee20:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ee22:	07ce      	lsls	r6, r1, #31
 800ee24:	d506      	bpl.n	800ee34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee26:	2100      	movs	r1, #0
 800ee28:	f105 0008 	add.w	r0, r5, #8
 800ee2c:	f7ff fb0c 	bl	800e448 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ee30:	4607      	mov	r7, r0
 800ee32:	b900      	cbnz	r0, 800ee36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800ee34:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ee36:	686b      	ldr	r3, [r5, #4]
 800ee38:	079c      	lsls	r4, r3, #30
 800ee3a:	d506      	bpl.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	f105 0008 	add.w	r0, r5, #8
 800ee42:	f7ff fb01 	bl	800e448 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ee46:	4606      	mov	r6, r0
 800ee48:	b900      	cbnz	r0, 800ee4c <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800ee4a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ee4c:	686b      	ldr	r3, [r5, #4]
 800ee4e:	0758      	lsls	r0, r3, #29
 800ee50:	d506      	bpl.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee52:	2102      	movs	r1, #2
 800ee54:	f105 0008 	add.w	r0, r5, #8
 800ee58:	f7ff faf6 	bl	800e448 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	b900      	cbnz	r0, 800ee62 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800ee60:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee62:	686b      	ldr	r3, [r5, #4]
 800ee64:	0719      	lsls	r1, r3, #28
 800ee66:	d506      	bpl.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ee6e:	f7ff fb63 	bl	800e538 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ee72:	4606      	mov	r6, r0
 800ee74:	b900      	cbnz	r0, 800ee78 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800ee76:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ee78:	686b      	ldr	r3, [r5, #4]
 800ee7a:	06da      	lsls	r2, r3, #27
 800ee7c:	d506      	bpl.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee7e:	2101      	movs	r1, #1
 800ee80:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ee84:	f7ff fb58 	bl	800e538 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	b900      	cbnz	r0, 800ee8e <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800ee8c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ee8e:	686b      	ldr	r3, [r5, #4]
 800ee90:	069b      	lsls	r3, r3, #26
 800ee92:	f100 80ca 	bmi.w	800f02a <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800ee96:	1e20      	subs	r0, r4, #0
 800ee98:	bf18      	it	ne
 800ee9a:	2001      	movne	r0, #1
}
 800ee9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eea0:	2101      	movs	r1, #1
 800eea2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eea6:	f7ff fb47 	bl	800e538 <RCCEx_PLL3_Config>
 800eeaa:	e6ac      	b.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800eeac:	2601      	movs	r6, #1
 800eeae:	4634      	mov	r4, r6
 800eeb0:	e6b5      	b.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800eeb2:	4626      	mov	r6, r4
 800eeb4:	e6b3      	b.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800eeb6:	bf00      	nop
 800eeb8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eebc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eec0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800eec4:	d003      	beq.n	800eece <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800eec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800eeca:	f47f aeba 	bne.w	800ec42 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800eece:	b9ac      	cbnz	r4, 800eefc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eed0:	4a5b      	ldr	r2, [pc, #364]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800eed2:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800eed6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800eed8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800eedc:	430b      	orrs	r3, r1
 800eede:	6553      	str	r3, [r2, #84]	@ 0x54
 800eee0:	e6b1      	b.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eee2:	2100      	movs	r1, #0
 800eee4:	f105 0008 	add.w	r0, r5, #8
 800eee8:	f7ff faae 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eeec:	4604      	mov	r4, r0
        break;
 800eeee:	e7ee      	b.n	800eece <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eef0:	2102      	movs	r1, #2
 800eef2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eef6:	f7ff fb1f 	bl	800e538 <RCCEx_PLL3_Config>
 800eefa:	e7f7      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800eefc:	4626      	mov	r6, r4
 800eefe:	e6a2      	b.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ef00:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ef04:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800ef08:	d003      	beq.n	800ef12 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ef0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ef0e:	f47f aeac 	bne.w	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800ef12:	b9ac      	cbnz	r4, 800ef40 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ef14:	4a4a      	ldr	r2, [pc, #296]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ef16:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800ef1a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ef1c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800ef20:	430b      	orrs	r3, r1
 800ef22:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef24:	e6a3      	b.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef26:	2100      	movs	r1, #0
 800ef28:	f105 0008 	add.w	r0, r5, #8
 800ef2c:	f7ff fa8c 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef30:	4604      	mov	r4, r0
        break;
 800ef32:	e7ee      	b.n	800ef12 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef34:	2102      	movs	r1, #2
 800ef36:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ef3a:	f7ff fafd 	bl	800e538 <RCCEx_PLL3_Config>
 800ef3e:	e7f7      	b.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800ef40:	4626      	mov	r6, r4
 800ef42:	e694      	b.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ef44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ef48:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800ef4c:	d003      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ef4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ef52:	f47f ae9e 	bne.w	800ec92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800ef56:	b9ac      	cbnz	r4, 800ef84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef58:	4a39      	ldr	r2, [pc, #228]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ef5a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800ef5e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ef60:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ef64:	430b      	orrs	r3, r1
 800ef66:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef68:	e695      	b.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	f105 0008 	add.w	r0, r5, #8
 800ef70:	f7ff fa6a 	bl	800e448 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef74:	4604      	mov	r4, r0
        break;
 800ef76:	e7ee      	b.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef78:	2102      	movs	r1, #2
 800ef7a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ef7e:	f7ff fadb 	bl	800e538 <RCCEx_PLL3_Config>
 800ef82:	e7f7      	b.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800ef84:	4626      	mov	r6, r4
 800ef86:	e686      	b.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef88:	2102      	movs	r1, #2
 800ef8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ef8e:	f7ff fad3 	bl	800e538 <RCCEx_PLL3_Config>
 800ef92:	e6c3      	b.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800ef94:	2601      	movs	r6, #1
 800ef96:	4634      	mov	r4, r6
 800ef98:	e6cc      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800ef9a:	4626      	mov	r6, r4
 800ef9c:	e6ca      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef9e:	4a28      	ldr	r2, [pc, #160]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800efa0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800efa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800efa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800efa8:	b97c      	cbnz	r4, 800efca <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800efaa:	4a25      	ldr	r2, [pc, #148]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800efac:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800efb0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800efb2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800efb6:	430b      	orrs	r3, r1
 800efb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800efba:	e6ce      	b.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efbc:	2101      	movs	r1, #1
 800efbe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800efc2:	f7ff fab9 	bl	800e538 <RCCEx_PLL3_Config>
 800efc6:	4604      	mov	r4, r0
        break;
 800efc8:	e7ee      	b.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800efca:	4626      	mov	r6, r4
 800efcc:	e6c5      	b.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efce:	4a1c      	ldr	r2, [pc, #112]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800efd0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800efd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800efd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800efd8:	b974      	cbnz	r4, 800eff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800efda:	4a19      	ldr	r2, [pc, #100]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800efdc:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800efde:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800efe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efe4:	430b      	orrs	r3, r1
 800efe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800efe8:	e6c4      	b.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800efea:	2102      	movs	r1, #2
 800efec:	f105 0008 	add.w	r0, r5, #8
 800eff0:	f7ff fa2a 	bl	800e448 <RCCEx_PLL2_Config>
 800eff4:	4604      	mov	r4, r0
        break;
 800eff6:	e7ef      	b.n	800efd8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800eff8:	4626      	mov	r6, r4
 800effa:	e6bb      	b.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800effc:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800f000:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800f004:	f47f aed1 	bne.w	800edaa <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800f008:	2c00      	cmp	r4, #0
 800f00a:	f47f aecf 	bne.w	800edac <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f00e:	4c0c      	ldr	r4, [pc, #48]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f012:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f016:	4302      	orrs	r2, r0
 800f018:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800f01a:	4634      	mov	r4, r6
 800f01c:	e6c6      	b.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f01e:	4f08      	ldr	r7, [pc, #32]	@ (800f040 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f022:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f026:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800f028:	e7ee      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f02a:	2102      	movs	r1, #2
 800f02c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f030:	f7ff fa82 	bl	800e538 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f034:	2800      	cmp	r0, #0
 800f036:	f43f af2e 	beq.w	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800f03a:	2001      	movs	r0, #1
 800f03c:	e72e      	b.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800f03e:	bf00      	nop
 800f040:	58024400 	.word	0x58024400

0800f044 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f048:	4604      	mov	r4, r0
 800f04a:	b1f0      	cbz	r0, 800f08a <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f04c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800f050:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f054:	b91b      	cbnz	r3, 800f05e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f056:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f05a:	f7f2 f9b3 	bl	80013c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f05e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f060:	1d21      	adds	r1, r4, #4
 800f062:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f064:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f068:	f000 fa15 	bl	800f496 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f06c:	6862      	ldr	r2, [r4, #4]
 800f06e:	4629      	mov	r1, r5
 800f070:	6820      	ldr	r0, [r4, #0]
 800f072:	f000 fa48 	bl	800f506 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f076:	4a06      	ldr	r2, [pc, #24]	@ (800f090 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800f078:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800f07a:	6813      	ldr	r3, [r2, #0]
 800f07c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f080:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f082:	2301      	movs	r3, #1
 800f084:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800f088:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f08a:	2001      	movs	r0, #1
 800f08c:	e7fc      	b.n	800f088 <HAL_SDRAM_Init+0x44>
 800f08e:	bf00      	nop
 800f090:	52004000 	.word	0x52004000

0800f094 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800f094:	b510      	push	{r4, lr}
 800f096:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800f098:	f7f2 fa2e 	bl	80014f8 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800f09c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f0a0:	f000 fa67 	bl	800f572 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800f0aa:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800f0ae:	bd10      	pop	{r4, pc}

0800f0b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800f0b0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f0b2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800f0ba:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f0bc:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800f0be:	d010      	beq.n	800f0e2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800f0c0:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800f0c4:	2c01      	cmp	r4, #1
 800f0c6:	d110      	bne.n	800f0ea <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f0c8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f0ca:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f0cc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f0d0:	f000 fa5e 	bl	800f590 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f0d4:	6833      	ldr	r3, [r6, #0]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d104      	bne.n	800f0e4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f0da:	2305      	movs	r3, #5
 800f0dc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f0e0:	2000      	movs	r0, #0
}
 800f0e2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800f0e4:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800f0e8:	e7fa      	b.n	800f0e0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	e7f9      	b.n	800f0e2 <HAL_SDRAM_SendCommand+0x32>

0800f0ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f0ee:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f0f0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800f0f4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	b2d8      	uxtb	r0, r3
 800f0fa:	d00d      	beq.n	800f118 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800f0fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f100:	2b01      	cmp	r3, #1
 800f102:	b2dd      	uxtb	r5, r3
 800f104:	d109      	bne.n	800f11a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f106:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f108:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f10a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f10e:	f000 fa51 	bl	800f5b4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f112:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f114:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800f118:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f11a:	2001      	movs	r0, #1
 800f11c:	e7fc      	b.n	800f118 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800f11e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f11e:	4770      	bx	lr

0800f120 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f120:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f124:	2b01      	cmp	r3, #1
 800f126:	d12f      	bne.n	800f188 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f128:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f12a:	4a18      	ldr	r2, [pc, #96]	@ (800f18c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f12c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f130:	6803      	ldr	r3, [r0, #0]
 800f132:	4293      	cmp	r3, r2
 800f134:	d01a      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f13a:	d017      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f13c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f140:	4293      	cmp	r3, r2
 800f142:	d013      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f144:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00f      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f14c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f150:	4293      	cmp	r3, r2
 800f152:	d00b      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f154:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f158:	4293      	cmp	r3, r2
 800f15a:	d007      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f15c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f160:	4293      	cmp	r3, r2
 800f162:	d003      	beq.n	800f16c <HAL_TIM_Base_Start+0x4c>
 800f164:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f168:	4293      	cmp	r3, r2
 800f16a:	d107      	bne.n	800f17c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f16c:	6899      	ldr	r1, [r3, #8]
 800f16e:	4a08      	ldr	r2, [pc, #32]	@ (800f190 <HAL_TIM_Base_Start+0x70>)
 800f170:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f172:	2a06      	cmp	r2, #6
 800f174:	d006      	beq.n	800f184 <HAL_TIM_Base_Start+0x64>
 800f176:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f17a:	d003      	beq.n	800f184 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	f042 0201 	orr.w	r2, r2, #1
 800f182:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800f184:	2000      	movs	r0, #0
 800f186:	4770      	bx	lr
    return HAL_ERROR;
 800f188:	2001      	movs	r0, #1
}
 800f18a:	4770      	bx	lr
 800f18c:	40010000 	.word	0x40010000
 800f190:	00010007 	.word	0x00010007

0800f194 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f194:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d133      	bne.n	800f204 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f19c:	2302      	movs	r3, #2
 800f19e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1a2:	6803      	ldr	r3, [r0, #0]
 800f1a4:	68da      	ldr	r2, [r3, #12]
 800f1a6:	f042 0201 	orr.w	r2, r2, #1
 800f1aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1ac:	4a16      	ldr	r2, [pc, #88]	@ (800f208 <HAL_TIM_Base_Start_IT+0x74>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d01a      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1b6:	d017      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1b8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d013      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00f      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d00b      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1d0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d007      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1d8:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d003      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0x54>
 800f1e0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d107      	bne.n	800f1f8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1e8:	6899      	ldr	r1, [r3, #8]
 800f1ea:	4a08      	ldr	r2, [pc, #32]	@ (800f20c <HAL_TIM_Base_Start_IT+0x78>)
 800f1ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1ee:	2a06      	cmp	r2, #6
 800f1f0:	d006      	beq.n	800f200 <HAL_TIM_Base_Start_IT+0x6c>
 800f1f2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f1f6:	d003      	beq.n	800f200 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	f042 0201 	orr.w	r2, r2, #1
 800f1fe:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800f200:	2000      	movs	r0, #0
 800f202:	4770      	bx	lr
    return HAL_ERROR;
 800f204:	2001      	movs	r0, #1
}
 800f206:	4770      	bx	lr
 800f208:	40010000 	.word	0x40010000
 800f20c:	00010007 	.word	0x00010007

0800f210 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800f210:	4770      	bx	lr

0800f212 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800f212:	4770      	bx	lr

0800f214 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800f214:	4770      	bx	lr

0800f216 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800f216:	4770      	bx	lr

0800f218 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800f218:	6803      	ldr	r3, [r0, #0]
{
 800f21a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800f21c:	68dd      	ldr	r5, [r3, #12]
{
 800f21e:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800f220:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f222:	07b2      	lsls	r2, r6, #30
 800f224:	d50d      	bpl.n	800f242 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f226:	07a9      	lsls	r1, r5, #30
 800f228:	d50b      	bpl.n	800f242 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f22a:	f06f 0202 	mvn.w	r2, #2
 800f22e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f230:	2201      	movs	r2, #1
 800f232:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f234:	699b      	ldr	r3, [r3, #24]
 800f236:	079a      	lsls	r2, r3, #30
 800f238:	d075      	beq.n	800f326 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f23a:	f7ff ffea 	bl	800f212 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f23e:	2300      	movs	r3, #0
 800f240:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f242:	0773      	lsls	r3, r6, #29
 800f244:	d510      	bpl.n	800f268 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f246:	0768      	lsls	r0, r5, #29
 800f248:	d50e      	bpl.n	800f268 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f250:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f254:	2202      	movs	r2, #2
 800f256:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f258:	699b      	ldr	r3, [r3, #24]
 800f25a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f25e:	d068      	beq.n	800f332 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f260:	f7ff ffd7 	bl	800f212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f264:	2300      	movs	r3, #0
 800f266:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f268:	0731      	lsls	r1, r6, #28
 800f26a:	d50f      	bpl.n	800f28c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f26c:	072a      	lsls	r2, r5, #28
 800f26e:	d50d      	bpl.n	800f28c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f276:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f27a:	2204      	movs	r2, #4
 800f27c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f27e:	69db      	ldr	r3, [r3, #28]
 800f280:	079b      	lsls	r3, r3, #30
 800f282:	d05c      	beq.n	800f33e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800f284:	f7ff ffc5 	bl	800f212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f288:	2300      	movs	r3, #0
 800f28a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f28c:	06f1      	lsls	r1, r6, #27
 800f28e:	d510      	bpl.n	800f2b2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f290:	06ea      	lsls	r2, r5, #27
 800f292:	d50e      	bpl.n	800f2b2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800f29a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f29e:	2208      	movs	r2, #8
 800f2a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2a2:	69db      	ldr	r3, [r3, #28]
 800f2a4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f2a8:	d04f      	beq.n	800f34a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800f2aa:	f7ff ffb2 	bl	800f212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f2b2:	07f3      	lsls	r3, r6, #31
 800f2b4:	d508      	bpl.n	800f2c8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f2b6:	07e8      	lsls	r0, r5, #31
 800f2b8:	d506      	bpl.n	800f2c8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f2ba:	6823      	ldr	r3, [r4, #0]
 800f2bc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f2c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2c4:	f7f1 fe46 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f2c8:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800f2cc:	d008      	beq.n	800f2e0 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f2ce:	0629      	lsls	r1, r5, #24
 800f2d0:	d506      	bpl.n	800f2e0 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800f2d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f2da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f2dc:	f000 f8d9 	bl	800f492 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f2e0:	05f2      	lsls	r2, r6, #23
 800f2e2:	d508      	bpl.n	800f2f6 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f2e4:	062b      	lsls	r3, r5, #24
 800f2e6:	d506      	bpl.n	800f2f6 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f2e8:	6823      	ldr	r3, [r4, #0]
 800f2ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800f2ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f2f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f2f2:	f000 f8cf 	bl	800f494 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f2f6:	0670      	lsls	r0, r6, #25
 800f2f8:	d508      	bpl.n	800f30c <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f2fa:	0669      	lsls	r1, r5, #25
 800f2fc:	d506      	bpl.n	800f30c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800f304:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f306:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f308:	f7ff ff85 	bl	800f216 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f30c:	06b2      	lsls	r2, r6, #26
 800f30e:	d522      	bpl.n	800f356 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f310:	06ab      	lsls	r3, r5, #26
 800f312:	d520      	bpl.n	800f356 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800f31a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f31c:	611a      	str	r2, [r3, #16]
}
 800f31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800f322:	f000 b8b5 	b.w	800f490 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f326:	f7ff ff73 	bl	800f210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f32a:	4620      	mov	r0, r4
 800f32c:	f7ff ff72 	bl	800f214 <HAL_TIM_PWM_PulseFinishedCallback>
 800f330:	e785      	b.n	800f23e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f332:	f7ff ff6d 	bl	800f210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f336:	4620      	mov	r0, r4
 800f338:	f7ff ff6c 	bl	800f214 <HAL_TIM_PWM_PulseFinishedCallback>
 800f33c:	e792      	b.n	800f264 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f33e:	f7ff ff67 	bl	800f210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f342:	4620      	mov	r0, r4
 800f344:	f7ff ff66 	bl	800f214 <HAL_TIM_PWM_PulseFinishedCallback>
 800f348:	e79e      	b.n	800f288 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f34a:	f7ff ff61 	bl	800f210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f34e:	4620      	mov	r0, r4
 800f350:	f7ff ff60 	bl	800f214 <HAL_TIM_PWM_PulseFinishedCallback>
 800f354:	e7ab      	b.n	800f2ae <HAL_TIM_IRQHandler+0x96>
}
 800f356:	bd70      	pop	{r4, r5, r6, pc}

0800f358 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f358:	4a33      	ldr	r2, [pc, #204]	@ (800f428 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800f35a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f35c:	4290      	cmp	r0, r2
 800f35e:	d012      	beq.n	800f386 <TIM_Base_SetConfig+0x2e>
 800f360:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f364:	d00f      	beq.n	800f386 <TIM_Base_SetConfig+0x2e>
 800f366:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f36a:	4290      	cmp	r0, r2
 800f36c:	d00b      	beq.n	800f386 <TIM_Base_SetConfig+0x2e>
 800f36e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f372:	4290      	cmp	r0, r2
 800f374:	d007      	beq.n	800f386 <TIM_Base_SetConfig+0x2e>
 800f376:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f37a:	4290      	cmp	r0, r2
 800f37c:	d003      	beq.n	800f386 <TIM_Base_SetConfig+0x2e>
 800f37e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f382:	4290      	cmp	r0, r2
 800f384:	d119      	bne.n	800f3ba <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800f386:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800f38c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f38e:	4a26      	ldr	r2, [pc, #152]	@ (800f428 <TIM_Base_SetConfig+0xd0>)
 800f390:	4290      	cmp	r0, r2
 800f392:	d01d      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f394:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f398:	d01a      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f39a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f39e:	4290      	cmp	r0, r2
 800f3a0:	d016      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f3a6:	4290      	cmp	r0, r2
 800f3a8:	d012      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f3ae:	4290      	cmp	r0, r2
 800f3b0:	d00e      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3b2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f3b6:	4290      	cmp	r0, r2
 800f3b8:	d00a      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f42c <TIM_Base_SetConfig+0xd4>)
 800f3bc:	4290      	cmp	r0, r2
 800f3be:	d007      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f3c4:	4290      	cmp	r0, r2
 800f3c6:	d003      	beq.n	800f3d0 <TIM_Base_SetConfig+0x78>
 800f3c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f3cc:	4290      	cmp	r0, r2
 800f3ce:	d103      	bne.n	800f3d8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3d4:	68ca      	ldr	r2, [r1, #12]
 800f3d6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3d8:	694a      	ldr	r2, [r1, #20]
 800f3da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3de:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800f3e0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3e2:	688b      	ldr	r3, [r1, #8]
 800f3e4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3e6:	680b      	ldr	r3, [r1, #0]
 800f3e8:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f428 <TIM_Base_SetConfig+0xd0>)
 800f3ec:	4298      	cmp	r0, r3
 800f3ee:	d00f      	beq.n	800f410 <TIM_Base_SetConfig+0xb8>
 800f3f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f3f4:	4298      	cmp	r0, r3
 800f3f6:	d00b      	beq.n	800f410 <TIM_Base_SetConfig+0xb8>
 800f3f8:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800f3fc:	4298      	cmp	r0, r3
 800f3fe:	d007      	beq.n	800f410 <TIM_Base_SetConfig+0xb8>
 800f400:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f404:	4298      	cmp	r0, r3
 800f406:	d003      	beq.n	800f410 <TIM_Base_SetConfig+0xb8>
 800f408:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f40c:	4298      	cmp	r0, r3
 800f40e:	d101      	bne.n	800f414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f410:	690b      	ldr	r3, [r1, #16]
 800f412:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f414:	2301      	movs	r3, #1
 800f416:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f418:	6903      	ldr	r3, [r0, #16]
 800f41a:	07db      	lsls	r3, r3, #31
 800f41c:	d503      	bpl.n	800f426 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f41e:	6903      	ldr	r3, [r0, #16]
 800f420:	f023 0301 	bic.w	r3, r3, #1
 800f424:	6103      	str	r3, [r0, #16]
  }
}
 800f426:	4770      	bx	lr
 800f428:	40010000 	.word	0x40010000
 800f42c:	40014000 	.word	0x40014000

0800f430 <HAL_TIM_Base_Init>:
{
 800f430:	b510      	push	{r4, lr}
  if (htim == NULL)
 800f432:	4604      	mov	r4, r0
 800f434:	b350      	cbz	r0, 800f48c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f436:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f43a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f43e:	b91b      	cbnz	r3, 800f448 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800f440:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f444:	f7ff fe6b 	bl	800f11e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800f448:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f44a:	6820      	ldr	r0, [r4, #0]
 800f44c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800f44e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f452:	f7ff ff81 	bl	800f358 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f456:	2301      	movs	r3, #1
  return HAL_OK;
 800f458:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f45a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f45e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800f462:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800f466:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800f46a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f46e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f476:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f47a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f47e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800f482:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f486:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800f48a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f48c:	2001      	movs	r0, #1
 800f48e:	e7fc      	b.n	800f48a <HAL_TIM_Base_Init+0x5a>

0800f490 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800f490:	4770      	bx	lr

0800f492 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800f492:	4770      	bx	lr

0800f494 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800f494:	4770      	bx	lr

0800f496 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f49a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800f49e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800f4a2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800f4a6:	ea43 0308 	orr.w	r3, r3, r8
 800f4aa:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800f4ae:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f4b2:	6809      	ldr	r1, [r1, #0]
 800f4b4:	b991      	cbnz	r1, 800f4dc <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f4b6:	ea43 030e 	orr.w	r3, r3, lr
 800f4ba:	6801      	ldr	r1, [r0, #0]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800f4c2:	ea43 030c 	orr.w	r3, r3, ip
 800f4c6:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800f4ca:	433b      	orrs	r3, r7
 800f4cc:	4333      	orrs	r3, r6
 800f4ce:	432b      	orrs	r3, r5
 800f4d0:	4323      	orrs	r3, r4
 800f4d2:	430b      	orrs	r3, r1
 800f4d4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f4dc:	6801      	ldr	r1, [r0, #0]
 800f4de:	ea43 030e 	orr.w	r3, r3, lr
 800f4e2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800f4e6:	430b      	orrs	r3, r1
 800f4e8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f4ea:	ea42 030c 	orr.w	r3, r2, ip
 800f4ee:	6841      	ldr	r1, [r0, #4]
 800f4f0:	433b      	orrs	r3, r7
 800f4f2:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800f4f6:	4333      	orrs	r3, r6
 800f4f8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800f4fc:	432b      	orrs	r3, r5
 800f4fe:	4323      	orrs	r3, r4
 800f500:	4313      	orrs	r3, r2
 800f502:	6043      	str	r3, [r0, #4]
 800f504:	e7e7      	b.n	800f4d6 <FMC_SDRAM_Init+0x40>

0800f506 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f506:	68cb      	ldr	r3, [r1, #12]
 800f508:	f103 3cff 	add.w	ip, r3, #4294967295
 800f50c:	694b      	ldr	r3, [r1, #20]
{
 800f50e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f510:	3b01      	subs	r3, #1
 800f512:	680f      	ldr	r7, [r1, #0]
 800f514:	684c      	ldr	r4, [r1, #4]
 800f516:	688e      	ldr	r6, [r1, #8]
 800f518:	051b      	lsls	r3, r3, #20
 800f51a:	690d      	ldr	r5, [r1, #16]
 800f51c:	3c01      	subs	r4, #1
 800f51e:	6989      	ldr	r1, [r1, #24]
 800f520:	3e01      	subs	r6, #1
 800f522:	3d01      	subs	r5, #1
 800f524:	3f01      	subs	r7, #1
 800f526:	3901      	subs	r1, #1
 800f528:	0124      	lsls	r4, r4, #4
 800f52a:	0236      	lsls	r6, r6, #8
 800f52c:	042d      	lsls	r5, r5, #16
 800f52e:	0609      	lsls	r1, r1, #24
 800f530:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800f534:	b95a      	cbnz	r2, 800f54e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f536:	433b      	orrs	r3, r7
 800f538:	6882      	ldr	r2, [r0, #8]
 800f53a:	4323      	orrs	r3, r4
 800f53c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800f540:	4333      	orrs	r3, r6
 800f542:	432b      	orrs	r3, r5
 800f544:	430b      	orrs	r3, r1
 800f546:	4313      	orrs	r3, r2
 800f548:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800f54a:	2000      	movs	r0, #0
 800f54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f54e:	6882      	ldr	r2, [r0, #8]
 800f550:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800f554:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800f558:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f55a:	ea44 0306 	orr.w	r3, r4, r6
 800f55e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f560:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f562:	68c2      	ldr	r2, [r0, #12]
 800f564:	432b      	orrs	r3, r5
 800f566:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800f56a:	430b      	orrs	r3, r1
 800f56c:	4313      	orrs	r3, r2
 800f56e:	60c3      	str	r3, [r0, #12]
 800f570:	e7eb      	b.n	800f54a <FMC_SDRAM_Timing_Init+0x44>

0800f572 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800f572:	4603      	mov	r3, r0
 800f574:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800f578:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800f57c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800f580:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800f582:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f586:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800f588:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800f58a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800f58c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800f58e:	4770      	bx	lr

0800f590 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f590:	6902      	ldr	r2, [r0, #16]
{
 800f592:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f594:	e9d1 3400 	ldrd	r3, r4, [r1]
 800f598:	0d92      	lsrs	r2, r2, #22
 800f59a:	4323      	orrs	r3, r4
 800f59c:	68cc      	ldr	r4, [r1, #12]
 800f59e:	0592      	lsls	r2, r2, #22
 800f5a0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	688a      	ldr	r2, [r1, #8]
 800f5a8:	3a01      	subs	r2, #1
 800f5aa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800f5ae:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	bd10      	pop	{r4, pc}

0800f5b4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f5b4:	6943      	ldr	r3, [r0, #20]
 800f5b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800f5ba:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800f5be:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f5c2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	4770      	bx	lr

0800f5c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f5c8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f5ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f5ce:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f5d0:	f001 ff0e 	bl	80113f0 <xTaskGetSchedulerState>
 800f5d4:	2801      	cmp	r0, #1
 800f5d6:	d003      	beq.n	800f5e0 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f5d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800f5dc:	f000 bc52 	b.w	800fe84 <xPortSysTickHandler>
}
 800f5e0:	bd08      	pop	{r3, pc}
	...

0800f5e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f5e8:	b92b      	cbnz	r3, 800f5f6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f5ea:	4b06      	ldr	r3, [pc, #24]	@ (800f604 <osKernelInitialize+0x20>)
 800f5ec:	6818      	ldr	r0, [r3, #0]
 800f5ee:	b928      	cbnz	r0, 800f5fc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f5f4:	4770      	bx	lr
    stat = osErrorISR;
 800f5f6:	f06f 0005 	mvn.w	r0, #5
 800f5fa:	4770      	bx	lr
    } else {
      stat = osError;
 800f5fc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop
 800f604:	2400f7e0 	.word	0x2400f7e0

0800f608 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f608:	b510      	push	{r4, lr}
 800f60a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f60e:	b95c      	cbnz	r4, 800f628 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f610:	4b08      	ldr	r3, [pc, #32]	@ (800f634 <osKernelStart+0x2c>)
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	2a01      	cmp	r2, #1
 800f616:	d10a      	bne.n	800f62e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f618:	4a07      	ldr	r2, [pc, #28]	@ (800f638 <osKernelStart+0x30>)
 800f61a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f61c:	2202      	movs	r2, #2
 800f61e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f620:	f001 fd86 	bl	8011130 <vTaskStartScheduler>
      stat = osOK;
 800f624:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800f626:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800f628:	f06f 0005 	mvn.w	r0, #5
 800f62c:	e7fb      	b.n	800f626 <osKernelStart+0x1e>
      stat = osError;
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800f632:	e7f8      	b.n	800f626 <osKernelStart+0x1e>
 800f634:	2400f7e0 	.word	0x2400f7e0
 800f638:	e000ed00 	.word	0xe000ed00

0800f63c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63e:	4614      	mov	r4, r2
 800f640:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f642:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f644:	460b      	mov	r3, r1
  hTask = NULL;
 800f646:	9205      	str	r2, [sp, #20]
 800f648:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f64c:	b9ca      	cbnz	r2, 800f682 <osThreadNew+0x46>
 800f64e:	b1c0      	cbz	r0, 800f682 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f650:	b36c      	cbz	r4, 800f6ae <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f652:	69a5      	ldr	r5, [r4, #24]
 800f654:	2d00      	cmp	r5, #0
 800f656:	bf08      	it	eq
 800f658:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f65a:	1e69      	subs	r1, r5, #1
 800f65c:	46ac      	mov	ip, r5
 800f65e:	2937      	cmp	r1, #55	@ 0x37
 800f660:	d82a      	bhi.n	800f6b8 <osThreadNew+0x7c>
 800f662:	6861      	ldr	r1, [r4, #4]
 800f664:	07c9      	lsls	r1, r1, #31
 800f666:	d427      	bmi.n	800f6b8 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f668:	6966      	ldr	r6, [r4, #20]
 800f66a:	b16e      	cbz	r6, 800f688 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f66c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800f66e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f670:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800f674:	b157      	cbz	r7, 800f68c <osThreadNew+0x50>
 800f676:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800f67a:	d902      	bls.n	800f682 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f67c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f67e:	b104      	cbz	r4, 800f682 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f680:	b9e6      	cbnz	r6, 800f6bc <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f682:	9805      	ldr	r0, [sp, #20]
}
 800f684:	b007      	add	sp, #28
 800f686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800f688:	2280      	movs	r2, #128	@ 0x80
 800f68a:	e7f0      	b.n	800f66e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f68c:	f1be 0f00 	cmp.w	lr, #0
 800f690:	d1f7      	bne.n	800f682 <osThreadNew+0x46>
      if (mem == 0) {
 800f692:	6924      	ldr	r4, [r4, #16]
 800f694:	2c00      	cmp	r4, #0
 800f696:	d1f4      	bne.n	800f682 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f698:	ac05      	add	r4, sp, #20
 800f69a:	b292      	uxth	r2, r2
 800f69c:	e9cd c400 	strd	ip, r4, [sp]
 800f6a0:	f001 fbbf 	bl	8010e22 <xTaskCreate>
 800f6a4:	2801      	cmp	r0, #1
            hTask = NULL;
 800f6a6:	bf1c      	itt	ne
 800f6a8:	2300      	movne	r3, #0
 800f6aa:	9305      	strne	r3, [sp, #20]
 800f6ac:	e7e9      	b.n	800f682 <osThreadNew+0x46>
    name = NULL;
 800f6ae:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800f6b0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800f6b4:	2280      	movs	r2, #128	@ 0x80
 800f6b6:	e7ef      	b.n	800f698 <osThreadNew+0x5c>
        return (NULL);
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	e7e3      	b.n	800f684 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f6bc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800f6c0:	9500      	str	r5, [sp, #0]
 800f6c2:	f001 fb76 	bl	8010db2 <xTaskCreateStatic>
 800f6c6:	9005      	str	r0, [sp, #20]
 800f6c8:	e7db      	b.n	800f682 <osThreadNew+0x46>

0800f6ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f6ca:	b508      	push	{r3, lr}
 800f6cc:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6d0:	b922      	cbnz	r2, 800f6dc <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800f6d2:	b108      	cbz	r0, 800f6d8 <osDelay+0xe>
      vTaskDelay(ticks);
 800f6d4:	f001 fcec 	bl	80110b0 <vTaskDelay>
    stat = osOK;
 800f6d8:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800f6da:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800f6dc:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 800f6e0:	e7fb      	b.n	800f6da <osDelay+0x10>

0800f6e2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800f6ea:	b116      	cbz	r6, 800f6f2 <osMutexNew+0x10>
  hMutex = NULL;
 800f6ec:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800f6f2:	b110      	cbz	r0, 800f6fa <osMutexNew+0x18>
      type = attr->attr_bits;
 800f6f4:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800f6f6:	0733      	lsls	r3, r6, #28
 800f6f8:	d4f8      	bmi.n	800f6ec <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f6fa:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800f6fe:	b17d      	cbz	r5, 800f720 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f700:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800f704:	b151      	cbz	r1, 800f71c <osMutexNew+0x3a>
 800f706:	2b4f      	cmp	r3, #79	@ 0x4f
 800f708:	d9f0      	bls.n	800f6ec <osMutexNew+0xa>
          if (rmtx != 0U) {
 800f70a:	b1de      	cbz	r6, 800f744 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f70c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f70e:	f000 fec2 	bl	8010496 <xQueueCreateMutexStatic>
 800f712:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f714:	2800      	cmp	r0, #0
 800f716:	d0e9      	beq.n	800f6ec <osMutexNew+0xa>
          name = attr->name;
 800f718:	682d      	ldr	r5, [r5, #0]
 800f71a:	e00a      	b.n	800f732 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1e5      	bne.n	800f6ec <osMutexNew+0xa>
            if (rmtx != 0U) {
 800f720:	b196      	cbz	r6, 800f748 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f722:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800f724:	f000 feeb 	bl	80104fe <xQueueCreateMutex>
 800f728:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d0de      	beq.n	800f6ec <osMutexNew+0xa>
        if (attr != NULL) {
 800f72e:	2d00      	cmp	r5, #0
 800f730:	d1f2      	bne.n	800f718 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800f732:	4629      	mov	r1, r5
 800f734:	4620      	mov	r0, r4
 800f736:	f001 f977 	bl	8010a28 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f73a:	2e00      	cmp	r6, #0
 800f73c:	d0d7      	beq.n	800f6ee <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f73e:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800f742:	e7d4      	b.n	800f6ee <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f744:	2001      	movs	r0, #1
 800f746:	e7e2      	b.n	800f70e <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800f748:	2001      	movs	r0, #1
 800f74a:	e7eb      	b.n	800f724 <osMutexNew+0x42>

0800f74c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f74c:	b538      	push	{r3, r4, r5, lr}
 800f74e:	4603      	mov	r3, r0
 800f750:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f752:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800f756:	f003 0201 	and.w	r2, r3, #1
 800f75a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f75e:	b995      	cbnz	r5, 800f786 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800f760:	2b01      	cmp	r3, #1
 800f762:	d913      	bls.n	800f78c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800f764:	b162      	cbz	r2, 800f780 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f766:	f001 f8f0 	bl	801094a <xQueueTakeMutexRecursive>
 800f76a:	2801      	cmp	r0, #1
 800f76c:	d101      	bne.n	800f772 <osMutexAcquire+0x26>
  stat = osOK;
 800f76e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f770:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800f772:	2c00      	cmp	r4, #0
 800f774:	bf14      	ite	ne
 800f776:	f06f 0001 	mvnne.w	r0, #1
 800f77a:	f06f 0002 	mvneq.w	r0, #2
 800f77e:	e7f7      	b.n	800f770 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f780:	f001 f826 	bl	80107d0 <xQueueSemaphoreTake>
 800f784:	e7f1      	b.n	800f76a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800f786:	f06f 0005 	mvn.w	r0, #5
 800f78a:	e7f1      	b.n	800f770 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800f78c:	f06f 0003 	mvn.w	r0, #3
 800f790:	e7ee      	b.n	800f770 <osMutexAcquire+0x24>

0800f792 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f792:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f794:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f798:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800f79a:	f002 0301 	and.w	r3, r2, #1
 800f79e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f7a2:	b979      	cbnz	r1, 800f7c4 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800f7a4:	2a01      	cmp	r2, #1
 800f7a6:	d910      	bls.n	800f7ca <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800f7a8:	b13b      	cbz	r3, 800f7ba <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f7aa:	f000 fe89 	bl	80104c0 <xQueueGiveMutexRecursive>
 800f7ae:	2801      	cmp	r0, #1
  stat = osOK;
 800f7b0:	bf0c      	ite	eq
 800f7b2:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800f7b4:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f7b8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	4619      	mov	r1, r3
 800f7be:	f000 fdb8 	bl	8010332 <xQueueGenericSend>
 800f7c2:	e7f4      	b.n	800f7ae <osMutexRelease+0x1c>
    stat = osErrorISR;
 800f7c4:	f06f 0005 	mvn.w	r0, #5
 800f7c8:	e7f6      	b.n	800f7b8 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800f7ca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f7ce:	e7f3      	b.n	800f7b8 <osMutexRelease+0x26>

0800f7d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	460e      	mov	r6, r1
 800f7d6:	4615      	mov	r5, r2
 800f7d8:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f7dc:	b942      	cbnz	r2, 800f7f0 <osSemaphoreNew+0x20>
 800f7de:	b138      	cbz	r0, 800f7f0 <osSemaphoreNew+0x20>
 800f7e0:	4288      	cmp	r0, r1
 800f7e2:	d305      	bcc.n	800f7f0 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800f7e4:	b155      	cbz	r5, 800f7fc <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f7e6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800f7ea:	b12b      	cbz	r3, 800f7f8 <osSemaphoreNew+0x28>
 800f7ec:	2f4f      	cmp	r7, #79	@ 0x4f
 800f7ee:	d822      	bhi.n	800f836 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800f7f0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	b003      	add	sp, #12
 800f7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f7f8:	2f00      	cmp	r7, #0
 800f7fa:	d1f9      	bne.n	800f7f0 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800f7fc:	2c01      	cmp	r4, #1
 800f7fe:	d00c      	beq.n	800f81a <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f800:	4620      	mov	r0, r4
 800f802:	4631      	mov	r1, r6
 800f804:	f000 fd77 	bl	80102f6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800f808:	4604      	mov	r4, r0
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d0f0      	beq.n	800f7f0 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800f80e:	b985      	cbnz	r5, 800f832 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800f810:	4629      	mov	r1, r5
 800f812:	4620      	mov	r0, r4
 800f814:	f001 f908 	bl	8010a28 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800f818:	e7eb      	b.n	800f7f2 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800f81a:	2203      	movs	r2, #3
 800f81c:	2100      	movs	r1, #0
 800f81e:	2001      	movs	r0, #1
 800f820:	f000 fd20 	bl	8010264 <xQueueGenericCreate>
 800f824:	e00e      	b.n	800f844 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f826:	461a      	mov	r2, r3
 800f828:	f000 fd43 	bl	80102b2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800f82c:	4604      	mov	r4, r0
 800f82e:	2800      	cmp	r0, #0
 800f830:	d0de      	beq.n	800f7f0 <osSemaphoreNew+0x20>
          name = attr->name;
 800f832:	682d      	ldr	r5, [r5, #0]
 800f834:	e7ec      	b.n	800f810 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800f836:	2801      	cmp	r0, #1
 800f838:	d1f5      	bne.n	800f826 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f83a:	2103      	movs	r1, #3
 800f83c:	9100      	str	r1, [sp, #0]
 800f83e:	4611      	mov	r1, r2
 800f840:	f000 fcc2 	bl	80101c8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800f844:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f846:	2800      	cmp	r0, #0
 800f848:	d0d2      	beq.n	800f7f0 <osSemaphoreNew+0x20>
 800f84a:	2e00      	cmp	r6, #0
 800f84c:	d0df      	beq.n	800f80e <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f84e:	2300      	movs	r3, #0
 800f850:	461a      	mov	r2, r3
 800f852:	4619      	mov	r1, r3
 800f854:	f000 fd6d 	bl	8010332 <xQueueGenericSend>
 800f858:	2801      	cmp	r0, #1
 800f85a:	d0d8      	beq.n	800f80e <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800f85c:	4620      	mov	r0, r4
 800f85e:	f001 f90d 	bl	8010a7c <vQueueDelete>
      if (hSemaphore != NULL) {
 800f862:	e7c5      	b.n	800f7f0 <osSemaphoreNew+0x20>

0800f864 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f864:	b513      	push	{r0, r1, r4, lr}
 800f866:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f868:	b328      	cbz	r0, 800f8b6 <osSemaphoreAcquire+0x52>
 800f86a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f86e:	b1cb      	cbz	r3, 800f8a4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800f870:	bb09      	cbnz	r1, 800f8b6 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f872:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f874:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f876:	f001 f889 	bl	801098c <xQueueReceiveFromISR>
 800f87a:	2801      	cmp	r0, #1
 800f87c:	d003      	beq.n	800f886 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800f87e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f882:	b002      	add	sp, #8
 800f884:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800f886:	9b01      	ldr	r3, [sp, #4]
 800f888:	b90b      	cbnz	r3, 800f88e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800f88a:	2000      	movs	r0, #0
 800f88c:	e7f9      	b.n	800f882 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800f88e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f896:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	e7f2      	b.n	800f88a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f8a4:	f000 ff94 	bl	80107d0 <xQueueSemaphoreTake>
 800f8a8:	2801      	cmp	r0, #1
 800f8aa:	d0ee      	beq.n	800f88a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800f8ac:	2c00      	cmp	r4, #0
 800f8ae:	d0e6      	beq.n	800f87e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800f8b0:	f06f 0001 	mvn.w	r0, #1
 800f8b4:	e7e5      	b.n	800f882 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800f8b6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f8ba:	e7e2      	b.n	800f882 <osSemaphoreAcquire+0x1e>

0800f8bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f8bc:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f8be:	b318      	cbz	r0, 800f908 <osSemaphoreRelease+0x4c>
 800f8c0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f8c4:	b1cb      	cbz	r3, 800f8fa <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800f8c6:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f8c8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800f8ca:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f8cc:	f000 fe91 	bl	80105f2 <xQueueGiveFromISR>
 800f8d0:	2801      	cmp	r0, #1
 800f8d2:	d004      	beq.n	800f8de <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800f8d4:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800f8d8:	b003      	add	sp, #12
 800f8da:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	b14b      	cbz	r3, 800f8f6 <osSemaphoreRelease+0x3a>
 800f8e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e7ee      	b.n	800f8d8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	f000 fd18 	bl	8010332 <xQueueGenericSend>
 800f902:	2801      	cmp	r0, #1
 800f904:	d0f7      	beq.n	800f8f6 <osSemaphoreRelease+0x3a>
 800f906:	e7e5      	b.n	800f8d4 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800f908:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f90c:	e7e4      	b.n	800f8d8 <osSemaphoreRelease+0x1c>

0800f90e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f90e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f910:	4605      	mov	r5, r0
 800f912:	460e      	mov	r6, r1
 800f914:	4614      	mov	r4, r2
 800f916:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f91a:	b11f      	cbz	r7, 800f924 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800f91c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f91e:	4628      	mov	r0, r5
 800f920:	b003      	add	sp, #12
 800f922:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f924:	2800      	cmp	r0, #0
 800f926:	d0f9      	beq.n	800f91c <osMessageQueueNew+0xe>
 800f928:	2900      	cmp	r1, #0
 800f92a:	d0f7      	beq.n	800f91c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800f92c:	b1da      	cbz	r2, 800f966 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f92e:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800f932:	b183      	cbz	r3, 800f956 <osMessageQueueNew+0x48>
 800f934:	2a4f      	cmp	r2, #79	@ 0x4f
 800f936:	d9f1      	bls.n	800f91c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f938:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	d0ee      	beq.n	800f91c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f93e:	434d      	muls	r5, r1
 800f940:	6966      	ldr	r6, [r4, #20]
 800f942:	42ae      	cmp	r6, r5
 800f944:	d3ea      	bcc.n	800f91c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f946:	9700      	str	r7, [sp, #0]
 800f948:	f000 fc3e 	bl	80101c8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800f94c:	4605      	mov	r5, r0
 800f94e:	2800      	cmp	r0, #0
 800f950:	d0e4      	beq.n	800f91c <osMessageQueueNew+0xe>
        name = attr->name;
 800f952:	6824      	ldr	r4, [r4, #0]
 800f954:	e011      	b.n	800f97a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f956:	2a00      	cmp	r2, #0
 800f958:	d1e0      	bne.n	800f91c <osMessageQueueNew+0xe>
 800f95a:	6923      	ldr	r3, [r4, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1dd      	bne.n	800f91c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f960:	6963      	ldr	r3, [r4, #20]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1da      	bne.n	800f91c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800f966:	4628      	mov	r0, r5
 800f968:	2200      	movs	r2, #0
 800f96a:	4631      	mov	r1, r6
 800f96c:	f000 fc7a 	bl	8010264 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800f970:	4605      	mov	r5, r0
 800f972:	2800      	cmp	r0, #0
 800f974:	d0d2      	beq.n	800f91c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800f976:	2c00      	cmp	r4, #0
 800f978:	d1eb      	bne.n	800f952 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800f97a:	4621      	mov	r1, r4
 800f97c:	4628      	mov	r0, r5
 800f97e:	f001 f853 	bl	8010a28 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800f982:	e7cc      	b.n	800f91e <osMessageQueueNew+0x10>

0800f984 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f984:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f986:	461c      	mov	r4, r3
 800f988:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f98c:	b1de      	cbz	r6, 800f9c6 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f98e:	b338      	cbz	r0, 800f9e0 <osMessageQueuePut+0x5c>
 800f990:	b331      	cbz	r1, 800f9e0 <osMessageQueuePut+0x5c>
 800f992:	bb2b      	cbnz	r3, 800f9e0 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f994:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f996:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f998:	f000 fdce 	bl	8010538 <xQueueGenericSendFromISR>
 800f99c:	2801      	cmp	r0, #1
 800f99e:	d003      	beq.n	800f9a8 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800f9a0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f9a4:	b002      	add	sp, #8
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800f9a8:	9b01      	ldr	r3, [sp, #4]
 800f9aa:	b90b      	cbnz	r3, 800f9b0 <osMessageQueuePut+0x2c>
  stat = osOK;
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	e7f9      	b.n	800f9a4 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800f9b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	f3bf 8f6f 	isb	sy
 800f9c4:	e7f2      	b.n	800f9ac <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f9c6:	b158      	cbz	r0, 800f9e0 <osMessageQueuePut+0x5c>
 800f9c8:	b151      	cbz	r1, 800f9e0 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f9ca:	4633      	mov	r3, r6
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	f000 fcb0 	bl	8010332 <xQueueGenericSend>
 800f9d2:	2801      	cmp	r0, #1
 800f9d4:	d0ea      	beq.n	800f9ac <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d0e2      	beq.n	800f9a0 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800f9da:	f06f 0001 	mvn.w	r0, #1
 800f9de:	e7e1      	b.n	800f9a4 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800f9e0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f9e4:	e7de      	b.n	800f9a4 <osMessageQueuePut+0x20>

0800f9e6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f9e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9e8:	461c      	mov	r4, r3
 800f9ea:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f9ee:	b1db      	cbz	r3, 800fa28 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9f0:	b330      	cbz	r0, 800fa40 <osMessageQueueGet+0x5a>
 800f9f2:	b329      	cbz	r1, 800fa40 <osMessageQueueGet+0x5a>
 800f9f4:	bb24      	cbnz	r4, 800fa40 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9f6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f9f8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9fa:	f000 ffc7 	bl	801098c <xQueueReceiveFromISR>
 800f9fe:	2801      	cmp	r0, #1
 800fa00:	d003      	beq.n	800fa0a <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800fa02:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800fa06:	b003      	add	sp, #12
 800fa08:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800fa0a:	9b01      	ldr	r3, [sp, #4]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <osMessageQueueGet+0x2c>
  stat = osOK;
 800fa0e:	2000      	movs	r0, #0
 800fa10:	e7f9      	b.n	800fa06 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800fa12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fa16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fa1e:	f3bf 8f4f 	dsb	sy
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	e7f2      	b.n	800fa0e <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa28:	b150      	cbz	r0, 800fa40 <osMessageQueueGet+0x5a>
 800fa2a:	b149      	cbz	r1, 800fa40 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	f000 fe31 	bl	8010694 <xQueueReceive>
 800fa32:	2801      	cmp	r0, #1
 800fa34:	d0eb      	beq.n	800fa0e <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800fa36:	2c00      	cmp	r4, #0
 800fa38:	d0e3      	beq.n	800fa02 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800fa3a:	f06f 0001 	mvn.w	r0, #1
 800fa3e:	e7e2      	b.n	800fa06 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800fa40:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fa44:	e7df      	b.n	800fa06 <osMessageQueueGet+0x20>
	...

0800fa48 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa48:	4b03      	ldr	r3, [pc, #12]	@ (800fa58 <vApplicationGetIdleTaskMemory+0x10>)
 800fa4a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa4c:	4b03      	ldr	r3, [pc, #12]	@ (800fa5c <vApplicationGetIdleTaskMemory+0x14>)
 800fa4e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa50:	2380      	movs	r3, #128	@ 0x80
 800fa52:	6013      	str	r3, [r2, #0]
}
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	2400f780 	.word	0x2400f780
 800fa5c:	2400f580 	.word	0x2400f580

0800fa60 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fa60:	4b03      	ldr	r3, [pc, #12]	@ (800fa70 <vApplicationGetTimerTaskMemory+0x10>)
 800fa62:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fa64:	4b03      	ldr	r3, [pc, #12]	@ (800fa74 <vApplicationGetTimerTaskMemory+0x14>)
 800fa66:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fa68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa6c:	6013      	str	r3, [r2, #0]
}
 800fa6e:	4770      	bx	lr
 800fa70:	2400f520 	.word	0x2400f520
 800fa74:	2400f120 	.word	0x2400f120

0800fa78 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa78:	4b10      	ldr	r3, [pc, #64]	@ (800fabc <prvInsertBlockIntoFreeList+0x44>)
{
 800fa7a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4283      	cmp	r3, r0
 800fa82:	d3fb      	bcc.n	800fa7c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa84:	6854      	ldr	r4, [r2, #4]
 800fa86:	1911      	adds	r1, r2, r4
 800fa88:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa8a:	bf01      	itttt	eq
 800fa8c:	6841      	ldreq	r1, [r0, #4]
 800fa8e:	4610      	moveq	r0, r2
 800fa90:	1909      	addeq	r1, r1, r4
 800fa92:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa94:	6844      	ldr	r4, [r0, #4]
 800fa96:	1901      	adds	r1, r0, r4
 800fa98:	428b      	cmp	r3, r1
 800fa9a:	d10c      	bne.n	800fab6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa9c:	4908      	ldr	r1, [pc, #32]	@ (800fac0 <prvInsertBlockIntoFreeList+0x48>)
 800fa9e:	6809      	ldr	r1, [r1, #0]
 800faa0:	428b      	cmp	r3, r1
 800faa2:	d003      	beq.n	800faac <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800faa4:	6859      	ldr	r1, [r3, #4]
 800faa6:	4421      	add	r1, r4
 800faa8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800faaa:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800faac:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800faae:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fab0:	bf18      	it	ne
 800fab2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fab4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fab6:	4619      	mov	r1, r3
 800fab8:	e7f8      	b.n	800faac <prvInsertBlockIntoFreeList+0x34>
 800faba:	bf00      	nop
 800fabc:	2400f7fc 	.word	0x2400f7fc
 800fac0:	2400f7f8 	.word	0x2400f7f8

0800fac4 <pvPortMalloc>:
{
 800fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800faca:	f001 f9d9 	bl	8010e80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800face:	4940      	ldr	r1, [pc, #256]	@ (800fbd0 <pvPortMalloc+0x10c>)
 800fad0:	4d40      	ldr	r5, [pc, #256]	@ (800fbd4 <pvPortMalloc+0x110>)
 800fad2:	680b      	ldr	r3, [r1, #0]
 800fad4:	b9f3      	cbnz	r3, 800fb14 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800fad6:	4a40      	ldr	r2, [pc, #256]	@ (800fbd8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800fad8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fada:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fadc:	4e3f      	ldr	r6, [pc, #252]	@ (800fbdc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fade:	bf1b      	ittet	ne
 800fae0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fae2:	4b3f      	ldrne	r3, [pc, #252]	@ (800fbe0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fae4:	4b3f      	ldreq	r3, [pc, #252]	@ (800fbe4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fae6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800faea:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800faec:	bf18      	it	ne
 800faee:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800faf0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800faf2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800faf4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800faf6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800fafa:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fafe:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800fb00:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb02:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb06:	4b38      	ldr	r3, [pc, #224]	@ (800fbe8 <pvPortMalloc+0x124>)
 800fb08:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb0a:	4b38      	ldr	r3, [pc, #224]	@ (800fbec <pvPortMalloc+0x128>)
 800fb0c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fb12:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb14:	682e      	ldr	r6, [r5, #0]
 800fb16:	4226      	tst	r6, r4
 800fb18:	d155      	bne.n	800fbc6 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	d046      	beq.n	800fbac <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800fb1e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb22:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb24:	bf1c      	itt	ne
 800fb26:	f023 0307 	bicne.w	r3, r3, #7
 800fb2a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d04a      	beq.n	800fbc6 <pvPortMalloc+0x102>
 800fb30:	4f2e      	ldr	r7, [pc, #184]	@ (800fbec <pvPortMalloc+0x128>)
 800fb32:	683c      	ldr	r4, [r7, #0]
 800fb34:	429c      	cmp	r4, r3
 800fb36:	d346      	bcc.n	800fbc6 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800fb38:	4a28      	ldr	r2, [pc, #160]	@ (800fbdc <pvPortMalloc+0x118>)
 800fb3a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb3c:	6868      	ldr	r0, [r5, #4]
 800fb3e:	4298      	cmp	r0, r3
 800fb40:	d204      	bcs.n	800fb4c <pvPortMalloc+0x88>
 800fb42:	f8d5 c000 	ldr.w	ip, [r5]
 800fb46:	f1bc 0f00 	cmp.w	ip, #0
 800fb4a:	d115      	bne.n	800fb78 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800fb4c:	6809      	ldr	r1, [r1, #0]
 800fb4e:	42a9      	cmp	r1, r5
 800fb50:	d039      	beq.n	800fbc6 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb52:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb54:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb58:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb5a:	1ac2      	subs	r2, r0, r3
 800fb5c:	2a10      	cmp	r2, #16
 800fb5e:	d912      	bls.n	800fb86 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb60:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb62:	0741      	lsls	r1, r0, #29
 800fb64:	d00b      	beq.n	800fb7e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	e7fe      	b.n	800fb76 <pvPortMalloc+0xb2>
 800fb78:	462a      	mov	r2, r5
 800fb7a:	4665      	mov	r5, ip
 800fb7c:	e7de      	b.n	800fb3c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb7e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb80:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb82:	f7ff ff79 	bl	800fa78 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb86:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb88:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb8a:	4917      	ldr	r1, [pc, #92]	@ (800fbe8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb8c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb8e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb90:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800fb92:	4a17      	ldr	r2, [pc, #92]	@ (800fbf0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb94:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800fb96:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800fb98:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb9a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800fb9c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fba0:	bf38      	it	cc
 800fba2:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fba4:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fba8:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800fbaa:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800fbac:	f001 fa0c 	bl	8010fc8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbb0:	0763      	lsls	r3, r4, #29
 800fbb2:	d00a      	beq.n	800fbca <pvPortMalloc+0x106>
 800fbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	e7fe      	b.n	800fbc4 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800fbc6:	2400      	movs	r4, #0
 800fbc8:	e7f0      	b.n	800fbac <pvPortMalloc+0xe8>
}
 800fbca:	4620      	mov	r0, r4
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	2400f7f8 	.word	0x2400f7f8
 800fbd4:	2400f7e4 	.word	0x2400f7e4
 800fbd8:	2400f804 	.word	0x2400f804
 800fbdc:	2400f7fc 	.word	0x2400f7fc
 800fbe0:	24027ea4 	.word	0x24027ea4
 800fbe4:	000186a0 	.word	0x000186a0
 800fbe8:	2400f7f0 	.word	0x2400f7f0
 800fbec:	2400f7f4 	.word	0x2400f7f4
 800fbf0:	2400f7ec 	.word	0x2400f7ec

0800fbf4 <vPortFree>:
{
 800fbf4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	b390      	cbz	r0, 800fc60 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbfa:	4a1a      	ldr	r2, [pc, #104]	@ (800fc64 <vPortFree+0x70>)
 800fbfc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fc00:	6812      	ldr	r2, [r2, #0]
 800fc02:	4213      	tst	r3, r2
 800fc04:	d108      	bne.n	800fc18 <vPortFree+0x24>
 800fc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	e7fe      	b.n	800fc16 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc18:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800fc1c:	b141      	cbz	r1, 800fc30 <vPortFree+0x3c>
 800fc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	e7fe      	b.n	800fc2e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc30:	ea23 0302 	bic.w	r3, r3, r2
 800fc34:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800fc38:	f001 f922 	bl	8010e80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc3c:	4a0a      	ldr	r2, [pc, #40]	@ (800fc68 <vPortFree+0x74>)
 800fc3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc42:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc46:	6811      	ldr	r1, [r2, #0]
 800fc48:	440b      	add	r3, r1
 800fc4a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc4c:	f7ff ff14 	bl	800fa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc50:	4a06      	ldr	r2, [pc, #24]	@ (800fc6c <vPortFree+0x78>)
 800fc52:	6813      	ldr	r3, [r2, #0]
 800fc54:	3301      	adds	r3, #1
}
 800fc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800fc5a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800fc5c:	f001 b9b4 	b.w	8010fc8 <xTaskResumeAll>
}
 800fc60:	bd10      	pop	{r4, pc}
 800fc62:	bf00      	nop
 800fc64:	2400f7e4 	.word	0x2400f7e4
 800fc68:	2400f7f4 	.word	0x2400f7f4
 800fc6c:	2400f7e8 	.word	0x2400f7e8

0800fc70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc70:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc74:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc78:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc7a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc7c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc80:	2300      	movs	r3, #0
 800fc82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc84:	4770      	bx	lr

0800fc86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc86:	2300      	movs	r3, #0
 800fc88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc8a:	4770      	bx	lr

0800fc8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc8c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc8e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800fc90:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc94:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fc96:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fc98:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fc9a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	6003      	str	r3, [r0, #0]
}
 800fca0:	4770      	bx	lr

0800fca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fca2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fca4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fca6:	1c63      	adds	r3, r4, #1
 800fca8:	d10a      	bne.n	800fcc0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcaa:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fcac:	685a      	ldr	r2, [r3, #4]
 800fcae:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fcb0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fcb2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fcb4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fcb6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fcb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fcba:	3301      	adds	r3, #1
 800fcbc:	6003      	str	r3, [r0, #0]
}
 800fcbe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fcc0:	f100 0208 	add.w	r2, r0, #8
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	6852      	ldr	r2, [r2, #4]
 800fcc8:	6815      	ldr	r5, [r2, #0]
 800fcca:	42a5      	cmp	r5, r4
 800fccc:	d9fa      	bls.n	800fcc4 <vListInsert+0x22>
 800fcce:	e7ed      	b.n	800fcac <vListInsert+0xa>

0800fcd0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fcd0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fcd2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800fcd6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fcd8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fcda:	6859      	ldr	r1, [r3, #4]
 800fcdc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fcde:	bf08      	it	eq
 800fce0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fce2:	2200      	movs	r2, #0
 800fce4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	3a01      	subs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fcec:	6818      	ldr	r0, [r3, #0]
}
 800fcee:	4770      	bx	lr

0800fcf0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fcf0:	4808      	ldr	r0, [pc, #32]	@ (800fd14 <prvPortStartFirstTask+0x24>)
 800fcf2:	6800      	ldr	r0, [r0, #0]
 800fcf4:	6800      	ldr	r0, [r0, #0]
 800fcf6:	f380 8808 	msr	MSP, r0
 800fcfa:	f04f 0000 	mov.w	r0, #0
 800fcfe:	f380 8814 	msr	CONTROL, r0
 800fd02:	b662      	cpsie	i
 800fd04:	b661      	cpsie	f
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	df00      	svc	0
 800fd10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd12:	0000      	.short	0x0000
 800fd14:	e000ed08 	.word	0xe000ed08

0800fd18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fd28 <vPortEnableVFP+0x10>
 800fd1c:	6801      	ldr	r1, [r0, #0]
 800fd1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd22:	6001      	str	r1, [r0, #0]
 800fd24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd26:	0000      	.short	0x0000
 800fd28:	e000ed88 	.word	0xe000ed88

0800fd2c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800fd2c:	2300      	movs	r3, #0
{
 800fd2e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fd30:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800fd32:	4b0d      	ldr	r3, [pc, #52]	@ (800fd68 <prvTaskExitError+0x3c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3301      	adds	r3, #1
 800fd38:	d008      	beq.n	800fd4c <prvTaskExitError+0x20>
 800fd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd3e:	f383 8811 	msr	BASEPRI, r3
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	f3bf 8f4f 	dsb	sy
 800fd4a:	e7fe      	b.n	800fd4a <prvTaskExitError+0x1e>
 800fd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800fd5c:	9b01      	ldr	r3, [sp, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d0fc      	beq.n	800fd5c <prvTaskExitError+0x30>
}
 800fd62:	b002      	add	sp, #8
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	24000078 	.word	0x24000078

0800fd6c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fd6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fd70:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fd74:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800fd78:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fd7a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd7c:	4b03      	ldr	r3, [pc, #12]	@ (800fd8c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fd7e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd80:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fd82:	f06f 0302 	mvn.w	r3, #2
 800fd86:	6203      	str	r3, [r0, #32]
}
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	0800fd2d 	.word	0x0800fd2d

0800fd90 <SVC_Handler>:
	__asm volatile (
 800fd90:	4b07      	ldr	r3, [pc, #28]	@ (800fdb0 <pxCurrentTCBConst2>)
 800fd92:	6819      	ldr	r1, [r3, #0]
 800fd94:	6808      	ldr	r0, [r1, #0]
 800fd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9a:	f380 8809 	msr	PSP, r0
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f04f 0000 	mov.w	r0, #0
 800fda6:	f380 8811 	msr	BASEPRI, r0
 800fdaa:	4770      	bx	lr
 800fdac:	f3af 8000 	nop.w

0800fdb0 <pxCurrentTCBConst2>:
 800fdb0:	240283e4 	.word	0x240283e4

0800fdb4 <vPortEnterCritical>:
 800fdb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800fdc4:	4a0a      	ldr	r2, [pc, #40]	@ (800fdf0 <vPortEnterCritical+0x3c>)
 800fdc6:	6813      	ldr	r3, [r2, #0]
 800fdc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800fdca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800fdcc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800fdce:	d10e      	bne.n	800fdee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fdd4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	b143      	cbz	r3, 800fdee <vPortEnterCritical+0x3a>
 800fddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	e7fe      	b.n	800fdec <vPortEnterCritical+0x38>
}
 800fdee:	4770      	bx	lr
 800fdf0:	24000078 	.word	0x24000078

0800fdf4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fdf4:	4a08      	ldr	r2, [pc, #32]	@ (800fe18 <vPortExitCritical+0x24>)
 800fdf6:	6813      	ldr	r3, [r2, #0]
 800fdf8:	b943      	cbnz	r3, 800fe0c <vPortExitCritical+0x18>
 800fdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	e7fe      	b.n	800fe0a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe10:	b90b      	cbnz	r3, 800fe16 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe12:	f383 8811 	msr	BASEPRI, r3
}
 800fe16:	4770      	bx	lr
 800fe18:	24000078 	.word	0x24000078
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <PendSV_Handler>:
	__asm volatile
 800fe20:	f3ef 8009 	mrs	r0, PSP
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	4b15      	ldr	r3, [pc, #84]	@ (800fe80 <pxCurrentTCBConst>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	f01e 0f10 	tst.w	lr, #16
 800fe30:	bf08      	it	eq
 800fe32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3a:	6010      	str	r0, [r2, #0]
 800fe3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe44:	f380 8811 	msr	BASEPRI, r0
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f001 f9bc 	bl	80111cc <vTaskSwitchContext>
 800fe54:	f04f 0000 	mov.w	r0, #0
 800fe58:	f380 8811 	msr	BASEPRI, r0
 800fe5c:	bc09      	pop	{r0, r3}
 800fe5e:	6819      	ldr	r1, [r3, #0]
 800fe60:	6808      	ldr	r0, [r1, #0]
 800fe62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe66:	f01e 0f10 	tst.w	lr, #16
 800fe6a:	bf08      	it	eq
 800fe6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe70:	f380 8809 	msr	PSP, r0
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	f3af 8000 	nop.w

0800fe80 <pxCurrentTCBConst>:
 800fe80:	240283e4 	.word	0x240283e4

0800fe84 <xPortSysTickHandler>:
{
 800fe84:	b508      	push	{r3, lr}
	__asm volatile
 800fe86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800fe96:	f001 f801 	bl	8010e9c <xTaskIncrementTick>
 800fe9a:	b128      	cbz	r0, 800fea8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800fea8:	2300      	movs	r3, #0
 800feaa:	f383 8811 	msr	BASEPRI, r3
}
 800feae:	bd08      	pop	{r3, pc}

0800feb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800feb0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800feb4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800feb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800feba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800febc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800febe:	4b04      	ldr	r3, [pc, #16]	@ (800fed0 <vPortSetupTimerInterrupt+0x20>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fec6:	3b01      	subs	r3, #1
 800fec8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800feca:	2307      	movs	r3, #7
 800fecc:	6113      	str	r3, [r2, #16]
}
 800fece:	4770      	bx	lr
 800fed0:	2400006c 	.word	0x2400006c

0800fed4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fed4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800fed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800feda:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800fede:	4a38      	ldr	r2, [pc, #224]	@ (800ffc0 <xPortStartScheduler+0xec>)
 800fee0:	4291      	cmp	r1, r2
 800fee2:	d108      	bne.n	800fef6 <xPortStartScheduler+0x22>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	e7fe      	b.n	800fef4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fef6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800fefa:	4b32      	ldr	r3, [pc, #200]	@ (800ffc4 <xPortStartScheduler+0xf0>)
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d108      	bne.n	800ff12 <xPortStartScheduler+0x3e>
 800ff00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	e7fe      	b.n	800ff10 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff12:	4b2d      	ldr	r3, [pc, #180]	@ (800ffc8 <xPortStartScheduler+0xf4>)
 800ff14:	781a      	ldrb	r2, [r3, #0]
 800ff16:	b2d2      	uxtb	r2, r2
 800ff18:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff1a:	22ff      	movs	r2, #255	@ 0xff
 800ff1c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff1e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff20:	4a2a      	ldr	r2, [pc, #168]	@ (800ffcc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ff2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ff30:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff32:	2307      	movs	r3, #7
 800ff34:	4a26      	ldr	r2, [pc, #152]	@ (800ffd0 <xPortStartScheduler+0xfc>)
 800ff36:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff38:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800ff3c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff3e:	0609      	lsls	r1, r1, #24
 800ff40:	d40a      	bmi.n	800ff58 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff42:	2b03      	cmp	r3, #3
 800ff44:	d011      	beq.n	800ff6a <xPortStartScheduler+0x96>
 800ff46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff4a:	f383 8811 	msr	BASEPRI, r3
 800ff4e:	f3bf 8f6f 	isb	sy
 800ff52:	f3bf 8f4f 	dsb	sy
 800ff56:	e7fe      	b.n	800ff56 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	f88d 3003 	strb.w	r3, [sp, #3]
 800ff68:	e7e6      	b.n	800ff38 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff6e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800ff72:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff74:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff76:	9b01      	ldr	r3, [sp, #4]
 800ff78:	4a13      	ldr	r2, [pc, #76]	@ (800ffc8 <xPortStartScheduler+0xf4>)
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff7e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ff82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ff86:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ff8a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ff8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ff92:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ff96:	f7ff ff8b 	bl	800feb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ff9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ffd4 <xPortStartScheduler+0x100>)
 800ff9c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ff9e:	f7ff febb 	bl	800fd18 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffa2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800ffa6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ffaa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ffae:	f7ff fe9f 	bl	800fcf0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ffb2:	f001 f90b 	bl	80111cc <vTaskSwitchContext>
}
 800ffb6:	4628      	mov	r0, r5
	prvTaskExitError();
 800ffb8:	f7ff feb8 	bl	800fd2c <prvTaskExitError>
}
 800ffbc:	b003      	add	sp, #12
 800ffbe:	bd30      	pop	{r4, r5, pc}
 800ffc0:	410fc271 	.word	0x410fc271
 800ffc4:	410fc270 	.word	0x410fc270
 800ffc8:	e000e400 	.word	0xe000e400
 800ffcc:	24027ea8 	.word	0x24027ea8
 800ffd0:	24027ea4 	.word	0x24027ea4
 800ffd4:	24000078 	.word	0x24000078

0800ffd8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ffd8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ffdc:	2b0f      	cmp	r3, #15
 800ffde:	d90e      	bls.n	800fffe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ffe0:	4a11      	ldr	r2, [pc, #68]	@ (8010028 <vPortValidateInterruptPriority+0x50>)
 800ffe2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ffe4:	4a11      	ldr	r2, [pc, #68]	@ (801002c <vPortValidateInterruptPriority+0x54>)
 800ffe6:	7812      	ldrb	r2, [r2, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d908      	bls.n	800fffe <vPortValidateInterruptPriority+0x26>
 800ffec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	e7fe      	b.n	800fffc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fffe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010002:	4a0b      	ldr	r2, [pc, #44]	@ (8010030 <vPortValidateInterruptPriority+0x58>)
 8010004:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8010008:	6812      	ldr	r2, [r2, #0]
 801000a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801000e:	4293      	cmp	r3, r2
 8010010:	d908      	bls.n	8010024 <vPortValidateInterruptPriority+0x4c>
 8010012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010016:	f383 8811 	msr	BASEPRI, r3
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	e7fe      	b.n	8010022 <vPortValidateInterruptPriority+0x4a>
	}
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	e000e3f0 	.word	0xe000e3f0
 801002c:	24027ea8 	.word	0x24027ea8
 8010030:	24027ea4 	.word	0x24027ea4

08010034 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010034:	b510      	push	{r4, lr}
 8010036:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010038:	f7ff febc 	bl	800fdb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801003c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801003e:	f7ff fed9 	bl	800fdf4 <vPortExitCritical>

	return xReturn;
}
 8010042:	fab4 f084 	clz	r0, r4
 8010046:	0940      	lsrs	r0, r0, #5
 8010048:	bd10      	pop	{r4, pc}

0801004a <prvCopyDataToQueue>:
{
 801004a:	b570      	push	{r4, r5, r6, lr}
 801004c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801004e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8010050:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010052:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010054:	b942      	cbnz	r2, 8010068 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010056:	6806      	ldr	r6, [r0, #0]
 8010058:	b99e      	cbnz	r6, 8010082 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801005a:	6880      	ldr	r0, [r0, #8]
 801005c:	f001 fa16 	bl	801148c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010060:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010062:	3501      	adds	r5, #1
 8010064:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8010066:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010068:	b96e      	cbnz	r6, 8010086 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801006a:	6840      	ldr	r0, [r0, #4]
 801006c:	f018 ff39 	bl	8028ee2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010070:	6863      	ldr	r3, [r4, #4]
 8010072:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010074:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010076:	68a2      	ldr	r2, [r4, #8]
 8010078:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801007a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801007c:	bf24      	itt	cs
 801007e:	6823      	ldrcs	r3, [r4, #0]
 8010080:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8010082:	2000      	movs	r0, #0
 8010084:	e7ed      	b.n	8010062 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010086:	68c0      	ldr	r0, [r0, #12]
 8010088:	f018 ff2b 	bl	8028ee2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801008c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801008e:	68e3      	ldr	r3, [r4, #12]
 8010090:	4251      	negs	r1, r2
 8010092:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010094:	6822      	ldr	r2, [r4, #0]
 8010096:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010098:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801009a:	bf3e      	ittt	cc
 801009c:	68a3      	ldrcc	r3, [r4, #8]
 801009e:	185b      	addcc	r3, r3, r1
 80100a0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80100a2:	2e02      	cmp	r6, #2
 80100a4:	d1ed      	bne.n	8010082 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100a6:	b10d      	cbz	r5, 80100ac <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80100a8:	3d01      	subs	r5, #1
 80100aa:	e7ea      	b.n	8010082 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80100ac:	4628      	mov	r0, r5
 80100ae:	e7d8      	b.n	8010062 <prvCopyDataToQueue+0x18>

080100b0 <prvCopyDataFromQueue>:
{
 80100b0:	4603      	mov	r3, r0
 80100b2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80100b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80100b6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80100b8:	b162      	cbz	r2, 80100d4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100ba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100bc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100be:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100c0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100c2:	60dc      	str	r4, [r3, #12]
}
 80100c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100c8:	bf24      	itt	cs
 80100ca:	6819      	ldrcs	r1, [r3, #0]
 80100cc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100ce:	68d9      	ldr	r1, [r3, #12]
 80100d0:	f018 bf07 	b.w	8028ee2 <memcpy>
}
 80100d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d8:	4770      	bx	lr

080100da <prvUnlockQueue>:
{
 80100da:	b570      	push	{r4, r5, r6, lr}
 80100dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80100de:	f7ff fe69 	bl	800fdb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80100e2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100e6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80100ea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100ec:	2d00      	cmp	r5, #0
 80100ee:	dc14      	bgt.n	801011a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80100f0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100f2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80100f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80100fa:	f7ff fe7b 	bl	800fdf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80100fe:	f7ff fe59 	bl	800fdb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010102:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8010106:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010108:	2d00      	cmp	r5, #0
 801010a:	dc12      	bgt.n	8010132 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 801010c:	23ff      	movs	r3, #255	@ 0xff
 801010e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8010112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010116:	f7ff be6d 	b.w	800fdf4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801011a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801011c:	2b00      	cmp	r3, #0
 801011e:	d0e7      	beq.n	80100f0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010120:	4630      	mov	r0, r6
 8010122:	f001 f8cf 	bl	80112c4 <xTaskRemoveFromEventList>
 8010126:	b108      	cbz	r0, 801012c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010128:	f001 f956 	bl	80113d8 <vTaskMissedYield>
			--cTxLock;
 801012c:	3d01      	subs	r5, #1
 801012e:	b26d      	sxtb	r5, r5
 8010130:	e7dc      	b.n	80100ec <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010132:	6923      	ldr	r3, [r4, #16]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d0e9      	beq.n	801010c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010138:	4630      	mov	r0, r6
 801013a:	f001 f8c3 	bl	80112c4 <xTaskRemoveFromEventList>
 801013e:	b108      	cbz	r0, 8010144 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010140:	f001 f94a 	bl	80113d8 <vTaskMissedYield>
				--cRxLock;
 8010144:	3d01      	subs	r5, #1
 8010146:	b26d      	sxtb	r5, r5
 8010148:	e7de      	b.n	8010108 <prvUnlockQueue+0x2e>

0801014a <xQueueGenericReset>:
{
 801014a:	b538      	push	{r3, r4, r5, lr}
 801014c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 801014e:	4604      	mov	r4, r0
 8010150:	b940      	cbnz	r0, 8010164 <xQueueGenericReset+0x1a>
 8010152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	e7fe      	b.n	8010162 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8010164:	f7ff fe26 	bl	800fdb4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801016e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010170:	434b      	muls	r3, r1
 8010172:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010174:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010176:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010178:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801017a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 801017c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801017e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010180:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010182:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010186:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801018a:	b9a5      	cbnz	r5, 80101b6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	b173      	cbz	r3, 80101ae <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010190:	f104 0010 	add.w	r0, r4, #16
 8010194:	f001 f896 	bl	80112c4 <xTaskRemoveFromEventList>
 8010198:	b148      	cbz	r0, 80101ae <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 801019a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801019e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80101ae:	f7ff fe21 	bl	800fdf4 <vPortExitCritical>
}
 80101b2:	2001      	movs	r0, #1
 80101b4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80101b6:	f104 0010 	add.w	r0, r4, #16
 80101ba:	f7ff fd59 	bl	800fc70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80101be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80101c2:	f7ff fd55 	bl	800fc70 <vListInitialise>
 80101c6:	e7f2      	b.n	80101ae <xQueueGenericReset+0x64>

080101c8 <xQueueGenericCreateStatic>:
	{
 80101c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101ca:	460d      	mov	r5, r1
 80101cc:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80101ce:	b940      	cbnz	r0, 80101e2 <xQueueGenericCreateStatic+0x1a>
 80101d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	e7fe      	b.n	80101e0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80101e2:	b943      	cbnz	r3, 80101f6 <xQueueGenericCreateStatic+0x2e>
 80101e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	e7fe      	b.n	80101f4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80101f6:	b14a      	cbz	r2, 801020c <xQueueGenericCreateStatic+0x44>
 80101f8:	b991      	cbnz	r1, 8010220 <xQueueGenericCreateStatic+0x58>
 80101fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	e7fe      	b.n	801020a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801020c:	b141      	cbz	r1, 8010220 <xQueueGenericCreateStatic+0x58>
 801020e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	e7fe      	b.n	801021e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010220:	2350      	movs	r3, #80	@ 0x50
 8010222:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010224:	9b01      	ldr	r3, [sp, #4]
 8010226:	2b50      	cmp	r3, #80	@ 0x50
 8010228:	d008      	beq.n	801023c <xQueueGenericCreateStatic+0x74>
 801022a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	e7fe      	b.n	801023a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801023c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801023e:	2d00      	cmp	r5, #0
 8010240:	bf08      	it	eq
 8010242:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010244:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010246:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 801024a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801024c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010250:	4620      	mov	r0, r4
 8010252:	f7ff ff7a 	bl	801014a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8010256:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 801025a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 801025c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8010260:	b003      	add	sp, #12
 8010262:	bd30      	pop	{r4, r5, pc}

08010264 <xQueueGenericCreate>:
	{
 8010264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010266:	460d      	mov	r5, r1
 8010268:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801026a:	4606      	mov	r6, r0
 801026c:	b940      	cbnz	r0, 8010280 <xQueueGenericCreate+0x1c>
 801026e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	e7fe      	b.n	801027e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010280:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010282:	3050      	adds	r0, #80	@ 0x50
 8010284:	f7ff fc1e 	bl	800fac4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010288:	4604      	mov	r4, r0
 801028a:	b170      	cbz	r0, 80102aa <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801028c:	2300      	movs	r3, #0
 801028e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010292:	b165      	cbz	r5, 80102ae <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010294:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010298:	2101      	movs	r1, #1
 801029a:	4620      	mov	r0, r4
 801029c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801029e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80102a2:	f7ff ff52 	bl	801014a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80102a6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80102aa:	4620      	mov	r0, r4
 80102ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80102ae:	4603      	mov	r3, r0
 80102b0:	e7f2      	b.n	8010298 <xQueueGenericCreate+0x34>

080102b2 <xQueueCreateCountingSemaphoreStatic>:
	{
 80102b2:	b513      	push	{r0, r1, r4, lr}
 80102b4:	4613      	mov	r3, r2
 80102b6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80102b8:	b940      	cbnz	r0, 80102cc <xQueueCreateCountingSemaphoreStatic+0x1a>
 80102ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	e7fe      	b.n	80102ca <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80102cc:	4288      	cmp	r0, r1
 80102ce:	d208      	bcs.n	80102e2 <xQueueCreateCountingSemaphoreStatic+0x30>
 80102d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	e7fe      	b.n	80102e0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80102e2:	2202      	movs	r2, #2
 80102e4:	9200      	str	r2, [sp, #0]
 80102e6:	2200      	movs	r2, #0
 80102e8:	4611      	mov	r1, r2
 80102ea:	f7ff ff6d 	bl	80101c8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80102ee:	b100      	cbz	r0, 80102f2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80102f0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80102f2:	b002      	add	sp, #8
 80102f4:	bd10      	pop	{r4, pc}

080102f6 <xQueueCreateCountingSemaphore>:
	{
 80102f6:	b510      	push	{r4, lr}
 80102f8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80102fa:	b940      	cbnz	r0, 801030e <xQueueCreateCountingSemaphore+0x18>
 80102fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	e7fe      	b.n	801030c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 801030e:	4288      	cmp	r0, r1
 8010310:	d208      	bcs.n	8010324 <xQueueCreateCountingSemaphore+0x2e>
 8010312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	e7fe      	b.n	8010322 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010324:	2202      	movs	r2, #2
 8010326:	2100      	movs	r1, #0
 8010328:	f7ff ff9c 	bl	8010264 <xQueueGenericCreate>
		if( xHandle != NULL )
 801032c:	b100      	cbz	r0, 8010330 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801032e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8010330:	bd10      	pop	{r4, pc}

08010332 <xQueueGenericSend>:
{
 8010332:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010336:	460f      	mov	r7, r1
 8010338:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 801033a:	4604      	mov	r4, r0
{
 801033c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801033e:	b940      	cbnz	r0, 8010352 <xQueueGenericSend+0x20>
 8010340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	e7fe      	b.n	8010350 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010352:	b951      	cbnz	r1, 801036a <xQueueGenericSend+0x38>
 8010354:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010356:	b143      	cbz	r3, 801036a <xQueueGenericSend+0x38>
 8010358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	e7fe      	b.n	8010368 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801036a:	2e02      	cmp	r6, #2
 801036c:	d10b      	bne.n	8010386 <xQueueGenericSend+0x54>
 801036e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010370:	2b01      	cmp	r3, #1
 8010372:	d008      	beq.n	8010386 <xQueueGenericSend+0x54>
 8010374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	e7fe      	b.n	8010384 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010386:	f001 f833 	bl	80113f0 <xTaskGetSchedulerState>
 801038a:	4605      	mov	r5, r0
 801038c:	b330      	cbz	r0, 80103dc <xQueueGenericSend+0xaa>
 801038e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8010390:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8010394:	f7ff fd0e 	bl	800fdb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010398:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801039a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801039c:	429a      	cmp	r2, r3
 801039e:	d301      	bcc.n	80103a4 <xQueueGenericSend+0x72>
 80103a0:	2e02      	cmp	r6, #2
 80103a2:	d127      	bne.n	80103f4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103a4:	4632      	mov	r2, r6
 80103a6:	4639      	mov	r1, r7
 80103a8:	4620      	mov	r0, r4
 80103aa:	f7ff fe4e 	bl	801004a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80103b0:	b11b      	cbz	r3, 80103ba <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80103b6:	f000 ff85 	bl	80112c4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80103ba:	b148      	cbz	r0, 80103d0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80103bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80103c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80103c8:	f3bf 8f4f 	dsb	sy
 80103cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80103d0:	f7ff fd10 	bl	800fdf4 <vPortExitCritical>
				return pdPASS;
 80103d4:	2001      	movs	r0, #1
}
 80103d6:	b004      	add	sp, #16
 80103d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103dc:	9b01      	ldr	r3, [sp, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d0d6      	beq.n	8010390 <xQueueGenericSend+0x5e>
 80103e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	e7fe      	b.n	80103f2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80103f4:	9b01      	ldr	r3, [sp, #4]
 80103f6:	b91b      	cbnz	r3, 8010400 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80103f8:	f7ff fcfc 	bl	800fdf4 <vPortExitCritical>
					return errQUEUE_FULL;
 80103fc:	2000      	movs	r0, #0
 80103fe:	e7ea      	b.n	80103d6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8010400:	b915      	cbnz	r5, 8010408 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010402:	a802      	add	r0, sp, #8
 8010404:	f000 ffa0 	bl	8011348 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010408:	f7ff fcf4 	bl	800fdf4 <vPortExitCritical>
		vTaskSuspendAll();
 801040c:	f000 fd38 	bl	8010e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010410:	f7ff fcd0 	bl	800fdb4 <vPortEnterCritical>
 8010414:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010418:	2bff      	cmp	r3, #255	@ 0xff
 801041a:	d101      	bne.n	8010420 <xQueueGenericSend+0xee>
 801041c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8010420:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010424:	2bff      	cmp	r3, #255	@ 0xff
 8010426:	d101      	bne.n	801042c <xQueueGenericSend+0xfa>
 8010428:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801042c:	f7ff fce2 	bl	800fdf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010430:	a901      	add	r1, sp, #4
 8010432:	a802      	add	r0, sp, #8
 8010434:	f000 ff94 	bl	8011360 <xTaskCheckForTimeOut>
 8010438:	bb38      	cbnz	r0, 801048a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801043a:	f7ff fcbb 	bl	800fdb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801043e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010440:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010442:	429a      	cmp	r2, r3
 8010444:	d10e      	bne.n	8010464 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010446:	f7ff fcd5 	bl	800fdf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801044a:	9901      	ldr	r1, [sp, #4]
 801044c:	f104 0010 	add.w	r0, r4, #16
 8010450:	f000 ff00 	bl	8011254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010454:	4620      	mov	r0, r4
 8010456:	f7ff fe40 	bl	80100da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801045a:	f000 fdb5 	bl	8010fc8 <xTaskResumeAll>
 801045e:	b148      	cbz	r0, 8010474 <xQueueGenericSend+0x142>
 8010460:	2501      	movs	r5, #1
 8010462:	e797      	b.n	8010394 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8010464:	f7ff fcc6 	bl	800fdf4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010468:	4620      	mov	r0, r4
 801046a:	f7ff fe36 	bl	80100da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801046e:	f000 fdab 	bl	8010fc8 <xTaskResumeAll>
 8010472:	e7f5      	b.n	8010460 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8010474:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801047c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	e7ea      	b.n	8010460 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 801048a:	4620      	mov	r0, r4
 801048c:	f7ff fe25 	bl	80100da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010490:	f000 fd9a 	bl	8010fc8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010494:	e7b2      	b.n	80103fc <xQueueGenericSend+0xca>

08010496 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010496:	2200      	movs	r2, #0
	{
 8010498:	460b      	mov	r3, r1
 801049a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801049c:	4611      	mov	r1, r2
 801049e:	9000      	str	r0, [sp, #0]
 80104a0:	2001      	movs	r0, #1
 80104a2:	f7ff fe91 	bl	80101c8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80104a6:	4604      	mov	r4, r0
 80104a8:	b138      	cbz	r0, 80104ba <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80104aa:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80104ac:	461a      	mov	r2, r3
 80104ae:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80104b0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80104b2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80104b4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80104b6:	f7ff ff3c 	bl	8010332 <xQueueGenericSend>
	}
 80104ba:	4620      	mov	r0, r4
 80104bc:	b002      	add	sp, #8
 80104be:	bd10      	pop	{r4, pc}

080104c0 <xQueueGiveMutexRecursive>:
	{
 80104c0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80104c2:	4604      	mov	r4, r0
 80104c4:	b940      	cbnz	r0, 80104d8 <xQueueGiveMutexRecursive+0x18>
 80104c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	e7fe      	b.n	80104d6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80104d8:	6885      	ldr	r5, [r0, #8]
 80104da:	f000 ff83 	bl	80113e4 <xTaskGetCurrentTaskHandle>
 80104de:	4285      	cmp	r5, r0
 80104e0:	d10b      	bne.n	80104fa <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80104e2:	68e3      	ldr	r3, [r4, #12]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80104e8:	b10b      	cbz	r3, 80104ee <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 80104ea:	2001      	movs	r0, #1
	}
 80104ec:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80104ee:	461a      	mov	r2, r3
 80104f0:	4619      	mov	r1, r3
 80104f2:	4620      	mov	r0, r4
 80104f4:	f7ff ff1d 	bl	8010332 <xQueueGenericSend>
 80104f8:	e7f7      	b.n	80104ea <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 80104fa:	2000      	movs	r0, #0
		return xReturn;
 80104fc:	e7f6      	b.n	80104ec <xQueueGiveMutexRecursive+0x2c>

080104fe <xQueueCreateMutex>:
	{
 80104fe:	b570      	push	{r4, r5, r6, lr}
 8010500:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010502:	2050      	movs	r0, #80	@ 0x50
 8010504:	f7ff fade 	bl	800fac4 <pvPortMalloc>
 8010508:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 801050a:	b198      	cbz	r0, 8010534 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801050c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 801050e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010510:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010512:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8010516:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801051a:	f7ff fe16 	bl	801014a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801051e:	462b      	mov	r3, r5
 8010520:	462a      	mov	r2, r5
 8010522:	4629      	mov	r1, r5
 8010524:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8010526:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801052a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801052c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801052e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010530:	f7ff feff 	bl	8010332 <xQueueGenericSend>
	}
 8010534:	4620      	mov	r0, r4
 8010536:	bd70      	pop	{r4, r5, r6, pc}

08010538 <xQueueGenericSendFromISR>:
{
 8010538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801053c:	4689      	mov	r9, r1
 801053e:	4617      	mov	r7, r2
 8010540:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8010542:	4604      	mov	r4, r0
 8010544:	b940      	cbnz	r0, 8010558 <xQueueGenericSendFromISR+0x20>
 8010546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	e7fe      	b.n	8010556 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010558:	b951      	cbnz	r1, 8010570 <xQueueGenericSendFromISR+0x38>
 801055a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801055c:	b143      	cbz	r3, 8010570 <xQueueGenericSendFromISR+0x38>
 801055e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010562:	f383 8811 	msr	BASEPRI, r3
 8010566:	f3bf 8f6f 	isb	sy
 801056a:	f3bf 8f4f 	dsb	sy
 801056e:	e7fe      	b.n	801056e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010570:	2e02      	cmp	r6, #2
 8010572:	d10b      	bne.n	801058c <xQueueGenericSendFromISR+0x54>
 8010574:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010576:	2b01      	cmp	r3, #1
 8010578:	d008      	beq.n	801058c <xQueueGenericSendFromISR+0x54>
 801057a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	e7fe      	b.n	801058a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801058c:	f7ff fd24 	bl	800ffd8 <vPortValidateInterruptPriority>
	__asm volatile
 8010590:	f3ef 8811 	mrs	r8, BASEPRI
 8010594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80105a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d301      	bcc.n	80105b0 <xQueueGenericSendFromISR+0x78>
 80105ac:	2e02      	cmp	r6, #2
 80105ae:	d11e      	bne.n	80105ee <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 80105b0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105b4:	4632      	mov	r2, r6
 80105b6:	4649      	mov	r1, r9
 80105b8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80105ba:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105be:	f7ff fd44 	bl	801004a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80105c2:	1c6b      	adds	r3, r5, #1
 80105c4:	d10e      	bne.n	80105e4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80105c8:	b13b      	cbz	r3, 80105da <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80105ce:	f000 fe79 	bl	80112c4 <xTaskRemoveFromEventList>
 80105d2:	b110      	cbz	r0, 80105da <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 80105d4:	b10f      	cbz	r7, 80105da <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105d6:	2301      	movs	r3, #1
 80105d8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80105da:	2001      	movs	r0, #1
	__asm volatile
 80105dc:	f388 8811 	msr	BASEPRI, r8
}
 80105e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105e4:	3501      	adds	r5, #1
 80105e6:	b26d      	sxtb	r5, r5
 80105e8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80105ec:	e7f5      	b.n	80105da <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 80105ee:	2000      	movs	r0, #0
 80105f0:	e7f4      	b.n	80105dc <xQueueGenericSendFromISR+0xa4>

080105f2 <xQueueGiveFromISR>:
{
 80105f2:	b570      	push	{r4, r5, r6, lr}
 80105f4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80105f6:	4604      	mov	r4, r0
 80105f8:	b940      	cbnz	r0, 801060c <xQueueGiveFromISR+0x1a>
	__asm volatile
 80105fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	e7fe      	b.n	801060a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 801060c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801060e:	b143      	cbz	r3, 8010622 <xQueueGiveFromISR+0x30>
 8010610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	e7fe      	b.n	8010620 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010622:	6803      	ldr	r3, [r0, #0]
 8010624:	b953      	cbnz	r3, 801063c <xQueueGiveFromISR+0x4a>
 8010626:	6883      	ldr	r3, [r0, #8]
 8010628:	b143      	cbz	r3, 801063c <xQueueGiveFromISR+0x4a>
 801062a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	e7fe      	b.n	801063a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801063c:	f7ff fccc 	bl	800ffd8 <vPortValidateInterruptPriority>
	__asm volatile
 8010640:	f3ef 8611 	mrs	r6, BASEPRI
 8010644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010654:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010656:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010658:	4293      	cmp	r3, r2
 801065a:	d919      	bls.n	8010690 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 801065c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010660:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8010662:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8010664:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010666:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8010668:	d10d      	bne.n	8010686 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801066a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801066c:	b13b      	cbz	r3, 801067e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801066e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010672:	f000 fe27 	bl	80112c4 <xTaskRemoveFromEventList>
 8010676:	b110      	cbz	r0, 801067e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8010678:	b10d      	cbz	r5, 801067e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801067a:	2301      	movs	r3, #1
 801067c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 801067e:	2001      	movs	r0, #1
	__asm volatile
 8010680:	f386 8811 	msr	BASEPRI, r6
}
 8010684:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010686:	3301      	adds	r3, #1
 8010688:	b25b      	sxtb	r3, r3
 801068a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801068e:	e7f6      	b.n	801067e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8010690:	2000      	movs	r0, #0
 8010692:	e7f5      	b.n	8010680 <xQueueGiveFromISR+0x8e>

08010694 <xQueueReceive>:
{
 8010694:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010698:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 801069a:	4604      	mov	r4, r0
{
 801069c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801069e:	b940      	cbnz	r0, 80106b2 <xQueueReceive+0x1e>
	__asm volatile
 80106a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	e7fe      	b.n	80106b0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106b2:	b951      	cbnz	r1, 80106ca <xQueueReceive+0x36>
 80106b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80106b6:	b143      	cbz	r3, 80106ca <xQueueReceive+0x36>
 80106b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	e7fe      	b.n	80106c8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106ca:	f000 fe91 	bl	80113f0 <xTaskGetSchedulerState>
 80106ce:	4605      	mov	r5, r0
 80106d0:	b318      	cbz	r0, 801071a <xQueueReceive+0x86>
 80106d2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80106d4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80106d8:	f7ff fb6c 	bl	800fdb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106dc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106de:	b347      	cbz	r7, 8010732 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106e0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106e2:	4631      	mov	r1, r6
 80106e4:	4620      	mov	r0, r4
 80106e6:	f7ff fce3 	bl	80100b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106ea:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ec:	6923      	ldr	r3, [r4, #16]
 80106ee:	b173      	cbz	r3, 801070e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106f0:	f104 0010 	add.w	r0, r4, #16
 80106f4:	f000 fde6 	bl	80112c4 <xTaskRemoveFromEventList>
 80106f8:	b148      	cbz	r0, 801070e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80106fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80106fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010702:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801070e:	f7ff fb71 	bl	800fdf4 <vPortExitCritical>
				return pdPASS;
 8010712:	2001      	movs	r0, #1
}
 8010714:	b004      	add	sp, #16
 8010716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801071a:	9b01      	ldr	r3, [sp, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d0d9      	beq.n	80106d4 <xQueueReceive+0x40>
 8010720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	e7fe      	b.n	8010730 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010732:	9b01      	ldr	r3, [sp, #4]
 8010734:	b91b      	cbnz	r3, 801073e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8010736:	f7ff fb5d 	bl	800fdf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801073a:	2000      	movs	r0, #0
 801073c:	e7ea      	b.n	8010714 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 801073e:	b915      	cbnz	r5, 8010746 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010740:	a802      	add	r0, sp, #8
 8010742:	f000 fe01 	bl	8011348 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010746:	f7ff fb55 	bl	800fdf4 <vPortExitCritical>
		vTaskSuspendAll();
 801074a:	f000 fb99 	bl	8010e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801074e:	f7ff fb31 	bl	800fdb4 <vPortEnterCritical>
 8010752:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010756:	2bff      	cmp	r3, #255	@ 0xff
 8010758:	d101      	bne.n	801075e <xQueueReceive+0xca>
 801075a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 801075e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010762:	2bff      	cmp	r3, #255	@ 0xff
 8010764:	d101      	bne.n	801076a <xQueueReceive+0xd6>
 8010766:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801076a:	f7ff fb43 	bl	800fdf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801076e:	a901      	add	r1, sp, #4
 8010770:	a802      	add	r0, sp, #8
 8010772:	f000 fdf5 	bl	8011360 <xTaskCheckForTimeOut>
 8010776:	bb00      	cbnz	r0, 80107ba <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010778:	4620      	mov	r0, r4
 801077a:	f7ff fc5b 	bl	8010034 <prvIsQueueEmpty>
 801077e:	b1b0      	cbz	r0, 80107ae <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010780:	9901      	ldr	r1, [sp, #4]
 8010782:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010786:	f000 fd65 	bl	8011254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff fca5 	bl	80100da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010790:	f000 fc1a 	bl	8010fc8 <xTaskResumeAll>
 8010794:	b948      	cbnz	r0, 80107aa <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8010796:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801079a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801079e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80107a2:	f3bf 8f4f 	dsb	sy
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	2501      	movs	r5, #1
 80107ac:	e794      	b.n	80106d8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80107ae:	4620      	mov	r0, r4
 80107b0:	f7ff fc93 	bl	80100da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107b4:	f000 fc08 	bl	8010fc8 <xTaskResumeAll>
 80107b8:	e7f7      	b.n	80107aa <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80107ba:	4620      	mov	r0, r4
 80107bc:	f7ff fc8d 	bl	80100da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107c0:	f000 fc02 	bl	8010fc8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107c4:	4620      	mov	r0, r4
 80107c6:	f7ff fc35 	bl	8010034 <prvIsQueueEmpty>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d0ed      	beq.n	80107aa <xQueueReceive+0x116>
 80107ce:	e7b4      	b.n	801073a <xQueueReceive+0xa6>

080107d0 <xQueueSemaphoreTake>:
{
 80107d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107d2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80107d4:	4604      	mov	r4, r0
{
 80107d6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80107d8:	b940      	cbnz	r0, 80107ec <xQueueSemaphoreTake+0x1c>
 80107da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107de:	f383 8811 	msr	BASEPRI, r3
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	f3bf 8f4f 	dsb	sy
 80107ea:	e7fe      	b.n	80107ea <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80107ec:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80107ee:	b145      	cbz	r5, 8010802 <xQueueSemaphoreTake+0x32>
 80107f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	e7fe      	b.n	8010800 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010802:	f000 fdf5 	bl	80113f0 <xTaskGetSchedulerState>
 8010806:	4606      	mov	r6, r0
 8010808:	b320      	cbz	r0, 8010854 <xQueueSemaphoreTake+0x84>
 801080a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801080c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 801080e:	f7ff fad1 	bl	800fdb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010812:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010814:	b353      	cbz	r3, 801086c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010816:	3b01      	subs	r3, #1
 8010818:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	b913      	cbnz	r3, 8010824 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801081e:	f000 fec5 	bl	80115ac <pvTaskIncrementMutexHeldCount>
 8010822:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010824:	6923      	ldr	r3, [r4, #16]
 8010826:	b173      	cbz	r3, 8010846 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010828:	f104 0010 	add.w	r0, r4, #16
 801082c:	f000 fd4a 	bl	80112c4 <xTaskRemoveFromEventList>
 8010830:	b148      	cbz	r0, 8010846 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8010832:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801083a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010846:	f7ff fad5 	bl	800fdf4 <vPortExitCritical>
				return pdPASS;
 801084a:	2001      	movs	r0, #1
}
 801084c:	b005      	add	sp, #20
 801084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010850:	4635      	mov	r5, r6
 8010852:	e7db      	b.n	801080c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010854:	9b01      	ldr	r3, [sp, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0fa      	beq.n	8010850 <xQueueSemaphoreTake+0x80>
 801085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	e7fe      	b.n	801086a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	b953      	cbnz	r3, 8010886 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010870:	2d00      	cmp	r5, #0
 8010872:	d066      	beq.n	8010942 <xQueueSemaphoreTake+0x172>
 8010874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010878:	f383 8811 	msr	BASEPRI, r3
 801087c:	f3bf 8f6f 	isb	sy
 8010880:	f3bf 8f4f 	dsb	sy
 8010884:	e7fe      	b.n	8010884 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8010886:	b916      	cbnz	r6, 801088e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010888:	a802      	add	r0, sp, #8
 801088a:	f000 fd5d 	bl	8011348 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801088e:	f7ff fab1 	bl	800fdf4 <vPortExitCritical>
		vTaskSuspendAll();
 8010892:	f000 faf5 	bl	8010e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010896:	f7ff fa8d 	bl	800fdb4 <vPortEnterCritical>
 801089a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801089e:	2bff      	cmp	r3, #255	@ 0xff
 80108a0:	d101      	bne.n	80108a6 <xQueueSemaphoreTake+0xd6>
 80108a2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80108a6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80108aa:	2bff      	cmp	r3, #255	@ 0xff
 80108ac:	d101      	bne.n	80108b2 <xQueueSemaphoreTake+0xe2>
 80108ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108b2:	f7ff fa9f 	bl	800fdf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108b6:	a901      	add	r1, sp, #4
 80108b8:	a802      	add	r0, sp, #8
 80108ba:	f000 fd51 	bl	8011360 <xTaskCheckForTimeOut>
 80108be:	bb50      	cbnz	r0, 8010916 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108c0:	4620      	mov	r0, r4
 80108c2:	f7ff fbb7 	bl	8010034 <prvIsQueueEmpty>
 80108c6:	b300      	cbz	r0, 801090a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	b93b      	cbnz	r3, 80108dc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80108cc:	f7ff fa72 	bl	800fdb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108d0:	68a0      	ldr	r0, [r4, #8]
 80108d2:	f000 fd9d 	bl	8011410 <xTaskPriorityInherit>
 80108d6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80108d8:	f7ff fa8c 	bl	800fdf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108dc:	9901      	ldr	r1, [sp, #4]
 80108de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80108e2:	f000 fcb7 	bl	8011254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108e6:	4620      	mov	r0, r4
 80108e8:	f7ff fbf7 	bl	80100da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108ec:	f000 fb6c 	bl	8010fc8 <xTaskResumeAll>
 80108f0:	b948      	cbnz	r0, 8010906 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 80108f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80108f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	f3bf 8f6f 	isb	sy
 8010906:	2601      	movs	r6, #1
 8010908:	e781      	b.n	801080e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 801090a:	4620      	mov	r0, r4
 801090c:	f7ff fbe5 	bl	80100da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010910:	f000 fb5a 	bl	8010fc8 <xTaskResumeAll>
 8010914:	e7f7      	b.n	8010906 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8010916:	4620      	mov	r0, r4
 8010918:	f7ff fbdf 	bl	80100da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801091c:	f000 fb54 	bl	8010fc8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010920:	4620      	mov	r0, r4
 8010922:	f7ff fb87 	bl	8010034 <prvIsQueueEmpty>
 8010926:	2800      	cmp	r0, #0
 8010928:	d0ed      	beq.n	8010906 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 801092a:	b165      	cbz	r5, 8010946 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 801092c:	f7ff fa42 	bl	800fdb4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010930:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010932:	b119      	cbz	r1, 801093c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010936:	6819      	ldr	r1, [r3, #0]
 8010938:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801093c:	68a0      	ldr	r0, [r4, #8]
 801093e:	f000 fde7 	bl	8011510 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010942:	f7ff fa57 	bl	800fdf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010946:	2000      	movs	r0, #0
 8010948:	e780      	b.n	801084c <xQueueSemaphoreTake+0x7c>

0801094a <xQueueTakeMutexRecursive>:
	{
 801094a:	b570      	push	{r4, r5, r6, lr}
 801094c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 801094e:	4604      	mov	r4, r0
 8010950:	b940      	cbnz	r0, 8010964 <xQueueTakeMutexRecursive+0x1a>
 8010952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	e7fe      	b.n	8010962 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010964:	6886      	ldr	r6, [r0, #8]
 8010966:	f000 fd3d 	bl	80113e4 <xTaskGetCurrentTaskHandle>
 801096a:	4286      	cmp	r6, r0
 801096c:	d104      	bne.n	8010978 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801096e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8010970:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010972:	3301      	adds	r3, #1
 8010974:	60e3      	str	r3, [r4, #12]
	}
 8010976:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010978:	4629      	mov	r1, r5
 801097a:	4620      	mov	r0, r4
 801097c:	f7ff ff28 	bl	80107d0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8010980:	2800      	cmp	r0, #0
 8010982:	d0f8      	beq.n	8010976 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010984:	68e3      	ldr	r3, [r4, #12]
 8010986:	3301      	adds	r3, #1
 8010988:	60e3      	str	r3, [r4, #12]
 801098a:	e7f4      	b.n	8010976 <xQueueTakeMutexRecursive+0x2c>

0801098c <xQueueReceiveFromISR>:
{
 801098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010990:	4689      	mov	r9, r1
 8010992:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8010994:	4604      	mov	r4, r0
 8010996:	b940      	cbnz	r0, 80109aa <xQueueReceiveFromISR+0x1e>
 8010998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801099c:	f383 8811 	msr	BASEPRI, r3
 80109a0:	f3bf 8f6f 	isb	sy
 80109a4:	f3bf 8f4f 	dsb	sy
 80109a8:	e7fe      	b.n	80109a8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109aa:	b951      	cbnz	r1, 80109c2 <xQueueReceiveFromISR+0x36>
 80109ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80109ae:	b143      	cbz	r3, 80109c2 <xQueueReceiveFromISR+0x36>
 80109b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	e7fe      	b.n	80109c0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109c2:	f7ff fb09 	bl	800ffd8 <vPortValidateInterruptPriority>
	__asm volatile
 80109c6:	f3ef 8711 	mrs	r7, BASEPRI
 80109ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109da:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109dc:	b30d      	cbz	r5, 8010a22 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80109de:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109e2:	4649      	mov	r1, r9
 80109e4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109e6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80109e8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109ea:	f7ff fb61 	bl	80100b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109ee:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80109f0:	1c73      	adds	r3, r6, #1
 80109f2:	d111      	bne.n	8010a18 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109f4:	6923      	ldr	r3, [r4, #16]
 80109f6:	b153      	cbz	r3, 8010a0e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109f8:	f104 0010 	add.w	r0, r4, #16
 80109fc:	f000 fc62 	bl	80112c4 <xTaskRemoveFromEventList>
 8010a00:	b128      	cbz	r0, 8010a0e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8010a02:	f1b8 0f00 	cmp.w	r8, #0
 8010a06:	d002      	beq.n	8010a0e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8010a0e:	2001      	movs	r0, #1
	__asm volatile
 8010a10:	f387 8811 	msr	BASEPRI, r7
}
 8010a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a18:	3601      	adds	r6, #1
 8010a1a:	b276      	sxtb	r6, r6
 8010a1c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8010a20:	e7f5      	b.n	8010a0e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8010a22:	4628      	mov	r0, r5
 8010a24:	e7f4      	b.n	8010a10 <xQueueReceiveFromISR+0x84>
	...

08010a28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a28:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010a2a:	4a07      	ldr	r2, [pc, #28]	@ (8010a48 <vQueueAddToRegistry+0x20>)
	{
 8010a2c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010a2e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010a32:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8010a36:	b91d      	cbnz	r5, 8010a40 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010a38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010a3c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010a3e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a40:	3301      	adds	r3, #1
 8010a42:	2b08      	cmp	r3, #8
 8010a44:	d1f3      	bne.n	8010a2e <vQueueAddToRegistry+0x6>
 8010a46:	e7fa      	b.n	8010a3e <vQueueAddToRegistry+0x16>
 8010a48:	24027eac 	.word	0x24027eac

08010a4c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a4c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010a4e:	4a09      	ldr	r2, [pc, #36]	@ (8010a74 <vQueueUnregisterQueue+0x28>)
	{
 8010a50:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010a52:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010a56:	00dc      	lsls	r4, r3, #3
 8010a58:	4281      	cmp	r1, r0
 8010a5a:	d106      	bne.n	8010a6a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010a5c:	4a06      	ldr	r2, [pc, #24]	@ (8010a78 <vQueueUnregisterQueue+0x2c>)
 8010a5e:	2100      	movs	r1, #0
 8010a60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010a64:	4422      	add	r2, r4
 8010a66:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010a68:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	2b08      	cmp	r3, #8
 8010a6e:	d1f0      	bne.n	8010a52 <vQueueUnregisterQueue+0x6>
 8010a70:	e7fa      	b.n	8010a68 <vQueueUnregisterQueue+0x1c>
 8010a72:	bf00      	nop
 8010a74:	24027eb0 	.word	0x24027eb0
 8010a78:	24027eac 	.word	0x24027eac

08010a7c <vQueueDelete>:
{
 8010a7c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8010a7e:	b940      	cbnz	r0, 8010a92 <vQueueDelete+0x16>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	e7fe      	b.n	8010a90 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8010a92:	f7ff ffdb 	bl	8010a4c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a96:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8010a9a:	b91b      	cbnz	r3, 8010aa4 <vQueueDelete+0x28>
}
 8010a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8010aa0:	f7ff b8a8 	b.w	800fbf4 <vPortFree>
}
 8010aa4:	bd10      	pop	{r4, pc}

08010aa6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010aa6:	b570      	push	{r4, r5, r6, lr}
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	460d      	mov	r5, r1
 8010aac:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010aae:	f7ff f981 	bl	800fdb4 <vPortEnterCritical>
 8010ab2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010ab6:	2bff      	cmp	r3, #255	@ 0xff
 8010ab8:	d102      	bne.n	8010ac0 <vQueueWaitForMessageRestricted+0x1a>
 8010aba:	2300      	movs	r3, #0
 8010abc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8010ac0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010ac4:	2bff      	cmp	r3, #255	@ 0xff
 8010ac6:	d102      	bne.n	8010ace <vQueueWaitForMessageRestricted+0x28>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010ace:	f7ff f991 	bl	800fdf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010ad2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ad4:	b92b      	cbnz	r3, 8010ae2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	4629      	mov	r1, r5
 8010ada:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010ade:	f000 fbd3 	bl	8011288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010ae2:	4620      	mov	r0, r4
	}
 8010ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010ae8:	f7ff baf7 	b.w	80100da <prvUnlockQueue>

08010aec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010af2:	f7ff f95f 	bl	800fdb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010af6:	4b2f      	ldr	r3, [pc, #188]	@ (8010bb4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010af8:	4e2f      	ldr	r6, [pc, #188]	@ (8010bb8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	4f2f      	ldr	r7, [pc, #188]	@ (8010bbc <prvAddNewTaskToReadyList+0xd0>)
 8010afe:	3201      	adds	r2, #1
 8010b00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010b02:	6835      	ldr	r5, [r6, #0]
 8010b04:	2d00      	cmp	r5, #0
 8010b06:	d14a      	bne.n	8010b9e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b08:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d11f      	bne.n	8010b50 <prvAddNewTaskToReadyList+0x64>
 8010b10:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b12:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010b14:	4640      	mov	r0, r8
 8010b16:	f7ff f8ab 	bl	800fc70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b1a:	f108 0814 	add.w	r8, r8, #20
 8010b1e:	2d38      	cmp	r5, #56	@ 0x38
 8010b20:	d1f7      	bne.n	8010b12 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010b22:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8010be4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8010b26:	4d26      	ldr	r5, [pc, #152]	@ (8010bc0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010b28:	4640      	mov	r0, r8
 8010b2a:	f7ff f8a1 	bl	800fc70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f7ff f89e 	bl	800fc70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010b34:	4823      	ldr	r0, [pc, #140]	@ (8010bc4 <prvAddNewTaskToReadyList+0xd8>)
 8010b36:	f7ff f89b 	bl	800fc70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010b3a:	4823      	ldr	r0, [pc, #140]	@ (8010bc8 <prvAddNewTaskToReadyList+0xdc>)
 8010b3c:	f7ff f898 	bl	800fc70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010b40:	4822      	ldr	r0, [pc, #136]	@ (8010bcc <prvAddNewTaskToReadyList+0xe0>)
 8010b42:	f7ff f895 	bl	800fc70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010b46:	4b22      	ldr	r3, [pc, #136]	@ (8010bd0 <prvAddNewTaskToReadyList+0xe4>)
 8010b48:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010b4c:	4b21      	ldr	r3, [pc, #132]	@ (8010bd4 <prvAddNewTaskToReadyList+0xe8>)
 8010b4e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010b50:	4a21      	ldr	r2, [pc, #132]	@ (8010bd8 <prvAddNewTaskToReadyList+0xec>)
 8010b52:	6813      	ldr	r3, [r2, #0]
 8010b54:	3301      	adds	r3, #1
 8010b56:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010b58:	4a20      	ldr	r2, [pc, #128]	@ (8010bdc <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010b5a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010b5c:	6811      	ldr	r1, [r2, #0]
 8010b5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010b60:	428b      	cmp	r3, r1
 8010b62:	d900      	bls.n	8010b66 <prvAddNewTaskToReadyList+0x7a>
 8010b64:	6013      	str	r3, [r2, #0]
 8010b66:	2014      	movs	r0, #20
 8010b68:	1d21      	adds	r1, r4, #4
 8010b6a:	fb00 7003 	mla	r0, r0, r3, r7
 8010b6e:	f7ff f88d 	bl	800fc8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010b72:	f7ff f93f 	bl	800fdf4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010b76:	4b1a      	ldr	r3, [pc, #104]	@ (8010be0 <prvAddNewTaskToReadyList+0xf4>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	b173      	cbz	r3, 8010b9a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b7c:	6833      	ldr	r3, [r6, #0]
 8010b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d209      	bcs.n	8010b9a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8010b86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010b92:	f3bf 8f4f 	dsb	sy
 8010b96:	f3bf 8f6f 	isb	sy
}
 8010b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8010b9e:	4b10      	ldr	r3, [pc, #64]	@ (8010be0 <prvAddNewTaskToReadyList+0xf4>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ba2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	d1d3      	bne.n	8010b50 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ba8:	6832      	ldr	r2, [r6, #0]
 8010baa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d8cf      	bhi.n	8010b50 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010bb0:	6034      	str	r4, [r6, #0]
 8010bb2:	e7cd      	b.n	8010b50 <prvAddNewTaskToReadyList+0x64>
 8010bb4:	24027f10 	.word	0x24027f10
 8010bb8:	240283e4 	.word	0x240283e4
 8010bbc:	24027f84 	.word	0x24027f84
 8010bc0:	24027f5c 	.word	0x24027f5c
 8010bc4:	24027f40 	.word	0x24027f40
 8010bc8:	24027f2c 	.word	0x24027f2c
 8010bcc:	24027f14 	.word	0x24027f14
 8010bd0:	24027f58 	.word	0x24027f58
 8010bd4:	24027f54 	.word	0x24027f54
 8010bd8:	24027ef4 	.word	0x24027ef4
 8010bdc:	24027f08 	.word	0x24027f08
 8010be0:	24027f04 	.word	0x24027f04
 8010be4:	24027f70 	.word	0x24027f70

08010be8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010bea:	4b15      	ldr	r3, [pc, #84]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010bec:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bee:	4d15      	ldr	r5, [pc, #84]	@ (8010c44 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010bf0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8010bf2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bf4:	6828      	ldr	r0, [r5, #0]
 8010bf6:	3004      	adds	r0, #4
 8010bf8:	f7ff f86a 	bl	800fcd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010bfc:	1c73      	adds	r3, r6, #1
 8010bfe:	d107      	bne.n	8010c10 <prvAddCurrentTaskToDelayedList+0x28>
 8010c00:	b137      	cbz	r7, 8010c10 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c02:	6829      	ldr	r1, [r5, #0]
 8010c04:	4810      	ldr	r0, [pc, #64]	@ (8010c48 <prvAddCurrentTaskToDelayedList+0x60>)
 8010c06:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c0c:	f7ff b83e 	b.w	800fc8c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c10:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010c16:	d307      	bcc.n	8010c28 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c18:	4b0c      	ldr	r3, [pc, #48]	@ (8010c4c <prvAddCurrentTaskToDelayedList+0x64>)
 8010c1a:	6818      	ldr	r0, [r3, #0]
 8010c1c:	6829      	ldr	r1, [r5, #0]
}
 8010c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c22:	3104      	adds	r1, #4
 8010c24:	f7ff b83d 	b.w	800fca2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c28:	4b09      	ldr	r3, [pc, #36]	@ (8010c50 <prvAddCurrentTaskToDelayedList+0x68>)
 8010c2a:	6818      	ldr	r0, [r3, #0]
 8010c2c:	6829      	ldr	r1, [r5, #0]
 8010c2e:	3104      	adds	r1, #4
 8010c30:	f7ff f837 	bl	800fca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c34:	4b07      	ldr	r3, [pc, #28]	@ (8010c54 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	42a2      	cmp	r2, r4
 8010c3a:	d900      	bls.n	8010c3e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010c3c:	601c      	str	r4, [r3, #0]
}
 8010c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c40:	24027f0c 	.word	0x24027f0c
 8010c44:	240283e4 	.word	0x240283e4
 8010c48:	24027f14 	.word	0x24027f14
 8010c4c:	24027f54 	.word	0x24027f54
 8010c50:	24027f58 	.word	0x24027f58
 8010c54:	24027ef0 	.word	0x24027ef0

08010c58 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c58:	4a06      	ldr	r2, [pc, #24]	@ (8010c74 <prvResetNextTaskUnblockTime+0x1c>)
 8010c5a:	6813      	ldr	r3, [r2, #0]
 8010c5c:	6819      	ldr	r1, [r3, #0]
 8010c5e:	4b06      	ldr	r3, [pc, #24]	@ (8010c78 <prvResetNextTaskUnblockTime+0x20>)
 8010c60:	b919      	cbnz	r1, 8010c6a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c62:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c66:	601a      	str	r2, [r3, #0]
}
 8010c68:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c6a:	6812      	ldr	r2, [r2, #0]
 8010c6c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c6e:	68d2      	ldr	r2, [r2, #12]
 8010c70:	6852      	ldr	r2, [r2, #4]
 8010c72:	e7f8      	b.n	8010c66 <prvResetNextTaskUnblockTime+0xe>
 8010c74:	24027f58 	.word	0x24027f58
 8010c78:	24027ef0 	.word	0x24027ef0

08010c7c <prvDeleteTCB>:
	{
 8010c7c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c7e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8010c82:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c84:	b93b      	cbnz	r3, 8010c96 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8010c86:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010c88:	f7fe ffb4 	bl	800fbf4 <vPortFree>
				vPortFree( pxTCB );
 8010c8c:	4620      	mov	r0, r4
	}
 8010c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8010c92:	f7fe bfaf 	b.w	800fbf4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d0f9      	beq.n	8010c8e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d008      	beq.n	8010cb0 <prvDeleteTCB+0x34>
 8010c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	e7fe      	b.n	8010cae <prvDeleteTCB+0x32>
	}
 8010cb0:	bd10      	pop	{r4, pc}
	...

08010cb4 <prvIdleTask>:
{
 8010cb4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010cb6:	4c14      	ldr	r4, [pc, #80]	@ (8010d08 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cb8:	4f14      	ldr	r7, [pc, #80]	@ (8010d0c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8010cba:	4d15      	ldr	r5, [pc, #84]	@ (8010d10 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	b983      	cbnz	r3, 8010ce2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cc0:	4b14      	ldr	r3, [pc, #80]	@ (8010d14 <prvIdleTask+0x60>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d909      	bls.n	8010cdc <prvIdleTask+0x28>
				taskYIELD();
 8010cc8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010cdc:	f7ef fd0c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010ce0:	e7eb      	b.n	8010cba <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8010ce2:	f7ff f867 	bl	800fdb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cea:	1d30      	adds	r0, r6, #4
 8010cec:	f7fe fff0 	bl	800fcd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010cf0:	682b      	ldr	r3, [r5, #0]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010cfc:	f7ff f87a 	bl	800fdf4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010d00:	4630      	mov	r0, r6
 8010d02:	f7ff ffbb 	bl	8010c7c <prvDeleteTCB>
 8010d06:	e7d9      	b.n	8010cbc <prvIdleTask+0x8>
 8010d08:	24027f28 	.word	0x24027f28
 8010d0c:	24027f2c 	.word	0x24027f2c
 8010d10:	24027f10 	.word	0x24027f10
 8010d14:	24027f84 	.word	0x24027f84

08010d18 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d1c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010d1e:	4607      	mov	r7, r0
 8010d20:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d22:	21a5      	movs	r1, #165	@ 0xa5
 8010d24:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010d26:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d28:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010d2a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010d30:	f017 fff6 	bl	8028d20 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d36:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d38:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8010d3c:	b3b5      	cbz	r5, 8010dac <prvInitialiseNewTask.constprop.0+0x94>
 8010d3e:	1e6b      	subs	r3, r5, #1
 8010d40:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8010d44:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d46:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010d4a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8010d4e:	b109      	cbz	r1, 8010d54 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d50:	42ab      	cmp	r3, r5
 8010d52:	d1f8      	bne.n	8010d46 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010d54:	2300      	movs	r3, #0
 8010d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d5a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8010d5c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d60:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d62:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8010d64:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010d68:	bf28      	it	cs
 8010d6a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010d6c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010d6e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d70:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d74:	f7fe ff87 	bl	800fc86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010d78:	f104 0018 	add.w	r0, r4, #24
 8010d7c:	f7fe ff83 	bl	800fc86 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010d80:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d84:	4642      	mov	r2, r8
 8010d86:	4639      	mov	r1, r7
 8010d88:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010d8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d8c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010d8e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8010d90:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010d94:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d98:	f7fe ffe8 	bl	800fd6c <pxPortInitialiseStack>
 8010d9c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010d9e:	f1b9 0f00 	cmp.w	r9, #0
 8010da2:	d001      	beq.n	8010da8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010da4:	f8c9 4000 	str.w	r4, [r9]
}
 8010da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010dac:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8010db0:	e7d3      	b.n	8010d5a <prvInitialiseNewTask.constprop.0+0x42>

08010db2 <xTaskCreateStatic>:
	{
 8010db2:	b570      	push	{r4, r5, r6, lr}
 8010db4:	b086      	sub	sp, #24
 8010db6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010dba:	b945      	cbnz	r5, 8010dce <xTaskCreateStatic+0x1c>
 8010dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc0:	f383 8811 	msr	BASEPRI, r3
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	e7fe      	b.n	8010dcc <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8010dce:	b944      	cbnz	r4, 8010de2 <xTaskCreateStatic+0x30>
 8010dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	e7fe      	b.n	8010de0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010de2:	2660      	movs	r6, #96	@ 0x60
 8010de4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010de6:	9e05      	ldr	r6, [sp, #20]
 8010de8:	2e60      	cmp	r6, #96	@ 0x60
 8010dea:	d008      	beq.n	8010dfe <xTaskCreateStatic+0x4c>
 8010dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df0:	f383 8811 	msr	BASEPRI, r3
 8010df4:	f3bf 8f6f 	isb	sy
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	e7fe      	b.n	8010dfc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dfe:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e00:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e02:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e04:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e08:	ad04      	add	r5, sp, #16
 8010e0a:	9402      	str	r4, [sp, #8]
 8010e0c:	9501      	str	r5, [sp, #4]
 8010e0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010e10:	9500      	str	r5, [sp, #0]
 8010e12:	f7ff ff81 	bl	8010d18 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e16:	4620      	mov	r0, r4
 8010e18:	f7ff fe68 	bl	8010aec <prvAddNewTaskToReadyList>
	}
 8010e1c:	9804      	ldr	r0, [sp, #16]
 8010e1e:	b006      	add	sp, #24
 8010e20:	bd70      	pop	{r4, r5, r6, pc}

08010e22 <xTaskCreate>:
	{
 8010e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e26:	4607      	mov	r7, r0
 8010e28:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e2a:	0090      	lsls	r0, r2, #2
	{
 8010e2c:	4688      	mov	r8, r1
 8010e2e:	4616      	mov	r6, r2
 8010e30:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e32:	f7fe fe47 	bl	800fac4 <pvPortMalloc>
			if( pxStack != NULL )
 8010e36:	4605      	mov	r5, r0
 8010e38:	b920      	cbnz	r0, 8010e44 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e3a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010e3e:	b005      	add	sp, #20
 8010e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e44:	2060      	movs	r0, #96	@ 0x60
 8010e46:	f7fe fe3d 	bl	800fac4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	b198      	cbz	r0, 8010e76 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e4e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8010e50:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e52:	4632      	mov	r2, r6
 8010e54:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e56:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e5c:	9002      	str	r0, [sp, #8]
 8010e5e:	4638      	mov	r0, r7
 8010e60:	9301      	str	r3, [sp, #4]
 8010e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e64:	9300      	str	r3, [sp, #0]
 8010e66:	464b      	mov	r3, r9
 8010e68:	f7ff ff56 	bl	8010d18 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7ff fe3d 	bl	8010aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e72:	2001      	movs	r0, #1
 8010e74:	e7e3      	b.n	8010e3e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7fe febc 	bl	800fbf4 <vPortFree>
		if( pxNewTCB != NULL )
 8010e7c:	e7dd      	b.n	8010e3a <xTaskCreate+0x18>
	...

08010e80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010e80:	4a02      	ldr	r2, [pc, #8]	@ (8010e8c <vTaskSuspendAll+0xc>)
 8010e82:	6813      	ldr	r3, [r2, #0]
 8010e84:	3301      	adds	r3, #1
 8010e86:	6013      	str	r3, [r2, #0]
}
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	24027eec 	.word	0x24027eec

08010e90 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010e90:	4b01      	ldr	r3, [pc, #4]	@ (8010e98 <xTaskGetTickCount+0x8>)
 8010e92:	6818      	ldr	r0, [r3, #0]
}
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	24027f0c 	.word	0x24027f0c

08010e9c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8010f9c <xTaskIncrementTick+0x100>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
{
 8010ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d172      	bne.n	8010f8e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8010fa0 <xTaskIncrementTick+0x104>)
 8010eaa:	681c      	ldr	r4, [r3, #0]
 8010eac:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8010eae:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010eb0:	b9bc      	cbnz	r4, 8010ee2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8010eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8010fa4 <xTaskIncrementTick+0x108>)
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	6812      	ldr	r2, [r2, #0]
 8010eb8:	b142      	cbz	r2, 8010ecc <xTaskIncrementTick+0x30>
 8010eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	e7fe      	b.n	8010eca <xTaskIncrementTick+0x2e>
 8010ecc:	4a36      	ldr	r2, [pc, #216]	@ (8010fa8 <xTaskIncrementTick+0x10c>)
 8010ece:	6819      	ldr	r1, [r3, #0]
 8010ed0:	6810      	ldr	r0, [r2, #0]
 8010ed2:	6018      	str	r0, [r3, #0]
 8010ed4:	6011      	str	r1, [r2, #0]
 8010ed6:	4a35      	ldr	r2, [pc, #212]	@ (8010fac <xTaskIncrementTick+0x110>)
 8010ed8:	6813      	ldr	r3, [r2, #0]
 8010eda:	3301      	adds	r3, #1
 8010edc:	6013      	str	r3, [r2, #0]
 8010ede:	f7ff febb 	bl	8010c58 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ee2:	4d33      	ldr	r5, [pc, #204]	@ (8010fb0 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8010ee4:	f04f 0b00 	mov.w	fp, #0
 8010ee8:	4e32      	ldr	r6, [pc, #200]	@ (8010fb4 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010eea:	682b      	ldr	r3, [r5, #0]
 8010eec:	4f32      	ldr	r7, [pc, #200]	@ (8010fb8 <xTaskIncrementTick+0x11c>)
 8010eee:	429c      	cmp	r4, r3
 8010ef0:	d212      	bcs.n	8010f18 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	2114      	movs	r1, #20
 8010ef6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010ef8:	434a      	muls	r2, r1
 8010efa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8010efc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8010efe:	4a2f      	ldr	r2, [pc, #188]	@ (8010fbc <xTaskIncrementTick+0x120>)
 8010f00:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8010f02:	bf28      	it	cs
 8010f04:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8010f08:	2a00      	cmp	r2, #0
 8010f0a:	bf18      	it	ne
 8010f0c:	f04f 0b01 	movne.w	fp, #1
}
 8010f10:	4658      	mov	r0, fp
 8010f12:	b003      	add	sp, #12
 8010f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f18:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8010fa4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8010f1c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8010fc4 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f20:	f8d9 2000 	ldr.w	r2, [r9]
 8010f24:	6812      	ldr	r2, [r2, #0]
 8010f26:	b91a      	cbnz	r2, 8010f30 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f28:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2c:	602a      	str	r2, [r5, #0]
					break;
 8010f2e:	e7e0      	b.n	8010ef2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f30:	f8d9 2000 	ldr.w	r2, [r9]
 8010f34:	68d2      	ldr	r2, [r2, #12]
 8010f36:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8010f3e:	428c      	cmp	r4, r1
 8010f40:	d201      	bcs.n	8010f46 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8010f42:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f44:	e7d5      	b.n	8010ef2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f46:	f108 0304 	add.w	r3, r8, #4
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	9301      	str	r3, [sp, #4]
 8010f4e:	f7fe febf 	bl	800fcd0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f52:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8010f56:	b119      	cbz	r1, 8010f60 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f58:	f108 0018 	add.w	r0, r8, #24
 8010f5c:	f7fe feb8 	bl	800fcd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f60:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8010f64:	f8da 1000 	ldr.w	r1, [sl]
 8010f68:	4288      	cmp	r0, r1
 8010f6a:	d901      	bls.n	8010f70 <xTaskIncrementTick+0xd4>
 8010f6c:	f8ca 0000 	str.w	r0, [sl]
 8010f70:	2314      	movs	r3, #20
 8010f72:	9901      	ldr	r1, [sp, #4]
 8010f74:	fb03 6000 	mla	r0, r3, r0, r6
 8010f78:	f7fe fe88 	bl	800fc8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f7c:	6838      	ldr	r0, [r7, #0]
 8010f7e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8010f82:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8010f84:	4291      	cmp	r1, r2
 8010f86:	bf28      	it	cs
 8010f88:	f04f 0b01 	movcs.w	fp, #1
 8010f8c:	e7c8      	b.n	8010f20 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8010f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8010f90:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8010f94:	6813      	ldr	r3, [r2, #0]
 8010f96:	3301      	adds	r3, #1
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	e7b9      	b.n	8010f10 <xTaskIncrementTick+0x74>
 8010f9c:	24027eec 	.word	0x24027eec
 8010fa0:	24027f0c 	.word	0x24027f0c
 8010fa4:	24027f58 	.word	0x24027f58
 8010fa8:	24027f54 	.word	0x24027f54
 8010fac:	24027ef8 	.word	0x24027ef8
 8010fb0:	24027ef0 	.word	0x24027ef0
 8010fb4:	24027f84 	.word	0x24027f84
 8010fb8:	240283e4 	.word	0x240283e4
 8010fbc:	24027efc 	.word	0x24027efc
 8010fc0:	24027f00 	.word	0x24027f00
 8010fc4:	24027f08 	.word	0x24027f08

08010fc8 <xTaskResumeAll>:
{
 8010fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8010fcc:	4c30      	ldr	r4, [pc, #192]	@ (8011090 <xTaskResumeAll+0xc8>)
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	b943      	cbnz	r3, 8010fe4 <xTaskResumeAll+0x1c>
 8010fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd6:	f383 8811 	msr	BASEPRI, r3
 8010fda:	f3bf 8f6f 	isb	sy
 8010fde:	f3bf 8f4f 	dsb	sy
 8010fe2:	e7fe      	b.n	8010fe2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8010fe4:	f7fe fee6 	bl	800fdb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	3b01      	subs	r3, #1
 8010fec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fee:	6824      	ldr	r4, [r4, #0]
 8010ff0:	b12c      	cbz	r4, 8010ffe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8010ff2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010ff4:	f7fe fefe 	bl	800fdf4 <vPortExitCritical>
}
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ffe:	4b25      	ldr	r3, [pc, #148]	@ (8011094 <xTaskResumeAll+0xcc>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d0f5      	beq.n	8010ff2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011006:	4d24      	ldr	r5, [pc, #144]	@ (8011098 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8011008:	4e24      	ldr	r6, [pc, #144]	@ (801109c <xTaskResumeAll+0xd4>)
 801100a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80110ac <xTaskResumeAll+0xe4>
 801100e:	e01d      	b.n	801104c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011010:	68eb      	ldr	r3, [r5, #12]
 8011012:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011014:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011016:	f104 0018 	add.w	r0, r4, #24
 801101a:	f7fe fe59 	bl	800fcd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801101e:	4638      	mov	r0, r7
 8011020:	f7fe fe56 	bl	800fcd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011024:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011026:	6832      	ldr	r2, [r6, #0]
 8011028:	4293      	cmp	r3, r2
 801102a:	d900      	bls.n	801102e <xTaskResumeAll+0x66>
 801102c:	6033      	str	r3, [r6, #0]
 801102e:	2014      	movs	r0, #20
 8011030:	4639      	mov	r1, r7
 8011032:	fb00 8003 	mla	r0, r0, r3, r8
 8011036:	f7fe fe29 	bl	800fc8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801103a:	4b19      	ldr	r3, [pc, #100]	@ (80110a0 <xTaskResumeAll+0xd8>)
 801103c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011042:	429a      	cmp	r2, r3
 8011044:	d302      	bcc.n	801104c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8011046:	4b17      	ldr	r3, [pc, #92]	@ (80110a4 <xTaskResumeAll+0xdc>)
 8011048:	2201      	movs	r2, #1
 801104a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1de      	bne.n	8011010 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8011052:	b10c      	cbz	r4, 8011058 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8011054:	f7ff fe00 	bl	8010c58 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011058:	4d13      	ldr	r5, [pc, #76]	@ (80110a8 <xTaskResumeAll+0xe0>)
 801105a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801105c:	b144      	cbz	r4, 8011070 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 801105e:	4e11      	ldr	r6, [pc, #68]	@ (80110a4 <xTaskResumeAll+0xdc>)
 8011060:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011062:	f7ff ff1b 	bl	8010e9c <xTaskIncrementTick>
 8011066:	b100      	cbz	r0, 801106a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8011068:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801106a:	3c01      	subs	r4, #1
 801106c:	d1f9      	bne.n	8011062 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 801106e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011070:	4b0c      	ldr	r3, [pc, #48]	@ (80110a4 <xTaskResumeAll+0xdc>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d0bc      	beq.n	8010ff2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8011078:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801107c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011080:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801108c:	2401      	movs	r4, #1
 801108e:	e7b1      	b.n	8010ff4 <xTaskResumeAll+0x2c>
 8011090:	24027eec 	.word	0x24027eec
 8011094:	24027f10 	.word	0x24027f10
 8011098:	24027f40 	.word	0x24027f40
 801109c:	24027f08 	.word	0x24027f08
 80110a0:	240283e4 	.word	0x240283e4
 80110a4:	24027efc 	.word	0x24027efc
 80110a8:	24027f00 	.word	0x24027f00
 80110ac:	24027f84 	.word	0x24027f84

080110b0 <vTaskDelay>:
	{
 80110b0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110b2:	b950      	cbnz	r0, 80110ca <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80110b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80110b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	f3bf 8f6f 	isb	sy
	}
 80110c8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80110ca:	4b0a      	ldr	r3, [pc, #40]	@ (80110f4 <vTaskDelay+0x44>)
 80110cc:	6819      	ldr	r1, [r3, #0]
 80110ce:	b141      	cbz	r1, 80110e2 <vTaskDelay+0x32>
 80110d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	e7fe      	b.n	80110e0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80110e2:	f7ff fecd 	bl	8010e80 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110e6:	f7ff fd7f 	bl	8010be8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80110ea:	f7ff ff6d 	bl	8010fc8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d0e0      	beq.n	80110b4 <vTaskDelay+0x4>
 80110f2:	e7e9      	b.n	80110c8 <vTaskDelay+0x18>
 80110f4:	24027eec 	.word	0x24027eec

080110f8 <vTaskSetApplicationTaskTag>:
	{
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	460d      	mov	r5, r1
		if( xTask == NULL )
 80110fc:	4604      	mov	r4, r0
 80110fe:	b908      	cbnz	r0, 8011104 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011100:	4b04      	ldr	r3, [pc, #16]	@ (8011114 <vTaskSetApplicationTaskTag+0x1c>)
 8011102:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8011104:	f7fe fe56 	bl	800fdb4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011108:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 801110a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801110e:	f7fe be71 	b.w	800fdf4 <vPortExitCritical>
 8011112:	bf00      	nop
 8011114:	240283e4 	.word	0x240283e4

08011118 <xTaskCallApplicationTaskHook>:
	{
 8011118:	4603      	mov	r3, r0
 801111a:	4608      	mov	r0, r1
		if( xTask == NULL )
 801111c:	b90b      	cbnz	r3, 8011122 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801111e:	4b03      	ldr	r3, [pc, #12]	@ (801112c <xTaskCallApplicationTaskHook+0x14>)
 8011120:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8011122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011124:	b103      	cbz	r3, 8011128 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011126:	4718      	bx	r3
	}
 8011128:	4618      	mov	r0, r3
 801112a:	4770      	bx	lr
 801112c:	240283e4 	.word	0x240283e4

08011130 <vTaskStartScheduler>:
{
 8011130:	b510      	push	{r4, lr}
 8011132:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011134:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011136:	aa07      	add	r2, sp, #28
 8011138:	a906      	add	r1, sp, #24
 801113a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801113c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011140:	f7fe fc82 	bl	800fa48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011144:	9b05      	ldr	r3, [sp, #20]
 8011146:	9a07      	ldr	r2, [sp, #28]
 8011148:	9302      	str	r3, [sp, #8]
 801114a:	9b06      	ldr	r3, [sp, #24]
 801114c:	4919      	ldr	r1, [pc, #100]	@ (80111b4 <vTaskStartScheduler+0x84>)
 801114e:	481a      	ldr	r0, [pc, #104]	@ (80111b8 <vTaskStartScheduler+0x88>)
 8011150:	e9cd 4300 	strd	r4, r3, [sp]
 8011154:	4623      	mov	r3, r4
 8011156:	f7ff fe2c 	bl	8010db2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801115a:	b340      	cbz	r0, 80111ae <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 801115c:	f000 fa84 	bl	8011668 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011160:	2801      	cmp	r0, #1
 8011162:	d119      	bne.n	8011198 <vTaskStartScheduler+0x68>
 8011164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011168:	f383 8811 	msr	BASEPRI, r3
 801116c:	f3bf 8f6f 	isb	sy
 8011170:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8011174:	f04f 32ff 	mov.w	r2, #4294967295
 8011178:	4b10      	ldr	r3, [pc, #64]	@ (80111bc <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 801117a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 801117c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801117e:	4b10      	ldr	r3, [pc, #64]	@ (80111c0 <vTaskStartScheduler+0x90>)
 8011180:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011182:	4b10      	ldr	r3, [pc, #64]	@ (80111c4 <vTaskStartScheduler+0x94>)
 8011184:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011186:	4b10      	ldr	r3, [pc, #64]	@ (80111c8 <vTaskStartScheduler+0x98>)
 8011188:	6818      	ldr	r0, [r3, #0]
 801118a:	f7ff ffc5 	bl	8011118 <xTaskCallApplicationTaskHook>
}
 801118e:	b008      	add	sp, #32
 8011190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8011194:	f7fe be9e 	b.w	800fed4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011198:	3001      	adds	r0, #1
 801119a:	d108      	bne.n	80111ae <vTaskStartScheduler+0x7e>
 801119c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a0:	f383 8811 	msr	BASEPRI, r3
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	e7fe      	b.n	80111ac <vTaskStartScheduler+0x7c>
}
 80111ae:	b008      	add	sp, #32
 80111b0:	bd10      	pop	{r4, pc}
 80111b2:	bf00      	nop
 80111b4:	0802ca2c 	.word	0x0802ca2c
 80111b8:	08010cb5 	.word	0x08010cb5
 80111bc:	24027ef0 	.word	0x24027ef0
 80111c0:	24027f04 	.word	0x24027f04
 80111c4:	24027f0c 	.word	0x24027f0c
 80111c8:	240283e4 	.word	0x240283e4

080111cc <vTaskSwitchContext>:
{
 80111cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111ce:	4b1c      	ldr	r3, [pc, #112]	@ (8011240 <vTaskSwitchContext+0x74>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	4b1c      	ldr	r3, [pc, #112]	@ (8011244 <vTaskSwitchContext+0x78>)
 80111d4:	b112      	cbz	r2, 80111dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80111d6:	2201      	movs	r2, #1
 80111d8:	601a      	str	r2, [r3, #0]
}
 80111da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80111dc:	4c1a      	ldr	r4, [pc, #104]	@ (8011248 <vTaskSwitchContext+0x7c>)
 80111de:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e0:	4e1a      	ldr	r6, [pc, #104]	@ (801124c <vTaskSwitchContext+0x80>)
 80111e2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 80111e4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	f7ff ff96 	bl	8011118 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ec:	6832      	ldr	r2, [r6, #0]
 80111ee:	4918      	ldr	r1, [pc, #96]	@ (8011250 <vTaskSwitchContext+0x84>)
 80111f0:	fb07 f302 	mul.w	r3, r7, r2
 80111f4:	58cd      	ldr	r5, [r1, r3]
 80111f6:	18c8      	adds	r0, r1, r3
 80111f8:	b1ad      	cbz	r5, 8011226 <vTaskSwitchContext+0x5a>
 80111fa:	6845      	ldr	r5, [r0, #4]
 80111fc:	3308      	adds	r3, #8
 80111fe:	686d      	ldr	r5, [r5, #4]
 8011200:	440b      	add	r3, r1
 8011202:	429d      	cmp	r5, r3
 8011204:	6045      	str	r5, [r0, #4]
 8011206:	bf04      	itt	eq
 8011208:	686b      	ldreq	r3, [r5, #4]
 801120a:	6043      	streq	r3, [r0, #4]
 801120c:	2314      	movs	r3, #20
 801120e:	fb03 1102 	mla	r1, r3, r2, r1
 8011212:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8011214:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 801121c:	6820      	ldr	r0, [r4, #0]
}
 801121e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8011222:	f7ff bf79 	b.w	8011118 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011226:	b942      	cbnz	r2, 801123a <vTaskSwitchContext+0x6e>
 8011228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	e7fe      	b.n	8011238 <vTaskSwitchContext+0x6c>
 801123a:	3a01      	subs	r2, #1
 801123c:	e7d8      	b.n	80111f0 <vTaskSwitchContext+0x24>
 801123e:	bf00      	nop
 8011240:	24027eec 	.word	0x24027eec
 8011244:	24027efc 	.word	0x24027efc
 8011248:	240283e4 	.word	0x240283e4
 801124c:	24027f08 	.word	0x24027f08
 8011250:	24027f84 	.word	0x24027f84

08011254 <vTaskPlaceOnEventList>:
{
 8011254:	b510      	push	{r4, lr}
 8011256:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8011258:	b940      	cbnz	r0, 801126c <vTaskPlaceOnEventList+0x18>
 801125a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	e7fe      	b.n	801126a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801126c:	4b05      	ldr	r3, [pc, #20]	@ (8011284 <vTaskPlaceOnEventList+0x30>)
 801126e:	6819      	ldr	r1, [r3, #0]
 8011270:	3118      	adds	r1, #24
 8011272:	f7fe fd16 	bl	800fca2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011276:	4620      	mov	r0, r4
 8011278:	2101      	movs	r1, #1
}
 801127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801127e:	f7ff bcb3 	b.w	8010be8 <prvAddCurrentTaskToDelayedList>
 8011282:	bf00      	nop
 8011284:	240283e4 	.word	0x240283e4

08011288 <vTaskPlaceOnEventListRestricted>:
	{
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	460d      	mov	r5, r1
 801128c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801128e:	b940      	cbnz	r0, 80112a2 <vTaskPlaceOnEventListRestricted+0x1a>
 8011290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011294:	f383 8811 	msr	BASEPRI, r3
 8011298:	f3bf 8f6f 	isb	sy
 801129c:	f3bf 8f4f 	dsb	sy
 80112a0:	e7fe      	b.n	80112a0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112a2:	4b07      	ldr	r3, [pc, #28]	@ (80112c0 <vTaskPlaceOnEventListRestricted+0x38>)
 80112a4:	6819      	ldr	r1, [r3, #0]
 80112a6:	3118      	adds	r1, #24
 80112a8:	f7fe fcf0 	bl	800fc8c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80112ac:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80112ae:	4621      	mov	r1, r4
 80112b0:	bf0c      	ite	eq
 80112b2:	4628      	moveq	r0, r5
 80112b4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80112b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80112bc:	f7ff bc94 	b.w	8010be8 <prvAddCurrentTaskToDelayedList>
 80112c0:	240283e4 	.word	0x240283e4

080112c4 <xTaskRemoveFromEventList>:
{
 80112c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112c6:	68c3      	ldr	r3, [r0, #12]
 80112c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80112ca:	b944      	cbnz	r4, 80112de <xTaskRemoveFromEventList+0x1a>
 80112cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	e7fe      	b.n	80112dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80112de:	f104 0518 	add.w	r5, r4, #24
 80112e2:	4628      	mov	r0, r5
 80112e4:	f7fe fcf4 	bl	800fcd0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112e8:	4b11      	ldr	r3, [pc, #68]	@ (8011330 <xTaskRemoveFromEventList+0x6c>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	b9d3      	cbnz	r3, 8011324 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80112ee:	1d25      	adds	r5, r4, #4
 80112f0:	4628      	mov	r0, r5
 80112f2:	f7fe fced 	bl	800fcd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80112f6:	4a0f      	ldr	r2, [pc, #60]	@ (8011334 <xTaskRemoveFromEventList+0x70>)
 80112f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80112fa:	6811      	ldr	r1, [r2, #0]
 80112fc:	428b      	cmp	r3, r1
 80112fe:	d900      	bls.n	8011302 <xTaskRemoveFromEventList+0x3e>
 8011300:	6013      	str	r3, [r2, #0]
 8011302:	2014      	movs	r0, #20
 8011304:	4a0c      	ldr	r2, [pc, #48]	@ (8011338 <xTaskRemoveFromEventList+0x74>)
 8011306:	4629      	mov	r1, r5
 8011308:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801130c:	f7fe fcbe 	bl	800fc8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011310:	4b0a      	ldr	r3, [pc, #40]	@ (801133c <xTaskRemoveFromEventList+0x78>)
 8011312:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011318:	429a      	cmp	r2, r3
 801131a:	d906      	bls.n	801132a <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 801131c:	2001      	movs	r0, #1
 801131e:	4b08      	ldr	r3, [pc, #32]	@ (8011340 <xTaskRemoveFromEventList+0x7c>)
 8011320:	6018      	str	r0, [r3, #0]
}
 8011322:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011324:	4629      	mov	r1, r5
 8011326:	4807      	ldr	r0, [pc, #28]	@ (8011344 <xTaskRemoveFromEventList+0x80>)
 8011328:	e7f0      	b.n	801130c <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 801132a:	2000      	movs	r0, #0
	return xReturn;
 801132c:	e7f9      	b.n	8011322 <xTaskRemoveFromEventList+0x5e>
 801132e:	bf00      	nop
 8011330:	24027eec 	.word	0x24027eec
 8011334:	24027f08 	.word	0x24027f08
 8011338:	24027f84 	.word	0x24027f84
 801133c:	240283e4 	.word	0x240283e4
 8011340:	24027efc 	.word	0x24027efc
 8011344:	24027f40 	.word	0x24027f40

08011348 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011348:	4b03      	ldr	r3, [pc, #12]	@ (8011358 <vTaskInternalSetTimeOutState+0x10>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801134e:	4b03      	ldr	r3, [pc, #12]	@ (801135c <vTaskInternalSetTimeOutState+0x14>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6043      	str	r3, [r0, #4]
}
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	24027ef8 	.word	0x24027ef8
 801135c:	24027f0c 	.word	0x24027f0c

08011360 <xTaskCheckForTimeOut>:
{
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8011364:	4605      	mov	r5, r0
 8011366:	b940      	cbnz	r0, 801137a <xTaskCheckForTimeOut+0x1a>
 8011368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	e7fe      	b.n	8011378 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801137a:	b941      	cbnz	r1, 801138e <xTaskCheckForTimeOut+0x2e>
 801137c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	e7fe      	b.n	801138c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801138e:	f7fe fd11 	bl	800fdb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8011392:	4b0f      	ldr	r3, [pc, #60]	@ (80113d0 <xTaskCheckForTimeOut+0x70>)
 8011394:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	d010      	beq.n	80113be <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801139c:	480d      	ldr	r0, [pc, #52]	@ (80113d4 <xTaskCheckForTimeOut+0x74>)
 801139e:	682e      	ldr	r6, [r5, #0]
 80113a0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80113a2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80113a4:	4286      	cmp	r6, r0
 80113a6:	d001      	beq.n	80113ac <xTaskCheckForTimeOut+0x4c>
 80113a8:	428a      	cmp	r2, r1
 80113aa:	d90f      	bls.n	80113cc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80113ac:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80113ae:	4283      	cmp	r3, r0
 80113b0:	d90a      	bls.n	80113c8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80113b2:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80113b4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80113b6:	4413      	add	r3, r2
 80113b8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80113ba:	f7ff ffc5 	bl	8011348 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80113be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80113c0:	f7fe fd18 	bl	800fdf4 <vPortExitCritical>
}
 80113c4:	4620      	mov	r0, r4
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80113cc:	2401      	movs	r4, #1
 80113ce:	e7f7      	b.n	80113c0 <xTaskCheckForTimeOut+0x60>
 80113d0:	24027f0c 	.word	0x24027f0c
 80113d4:	24027ef8 	.word	0x24027ef8

080113d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80113d8:	4b01      	ldr	r3, [pc, #4]	@ (80113e0 <vTaskMissedYield+0x8>)
 80113da:	2201      	movs	r2, #1
 80113dc:	601a      	str	r2, [r3, #0]
}
 80113de:	4770      	bx	lr
 80113e0:	24027efc 	.word	0x24027efc

080113e4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80113e4:	4b01      	ldr	r3, [pc, #4]	@ (80113ec <xTaskGetCurrentTaskHandle+0x8>)
 80113e6:	6818      	ldr	r0, [r3, #0]
	}
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	240283e4 	.word	0x240283e4

080113f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80113f0:	4b05      	ldr	r3, [pc, #20]	@ (8011408 <xTaskGetSchedulerState+0x18>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	b133      	cbz	r3, 8011404 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113f6:	4b05      	ldr	r3, [pc, #20]	@ (801140c <xTaskGetSchedulerState+0x1c>)
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	fab0 f080 	clz	r0, r0
 80113fe:	0940      	lsrs	r0, r0, #5
 8011400:	0040      	lsls	r0, r0, #1
 8011402:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011404:	2001      	movs	r0, #1
	}
 8011406:	4770      	bx	lr
 8011408:	24027f04 	.word	0x24027f04
 801140c:	24027eec 	.word	0x24027eec

08011410 <xTaskPriorityInherit>:
	{
 8011410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8011412:	4604      	mov	r4, r0
 8011414:	b338      	cbz	r0, 8011466 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011416:	4d1a      	ldr	r5, [pc, #104]	@ (8011480 <xTaskPriorityInherit+0x70>)
 8011418:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801141a:	682a      	ldr	r2, [r5, #0]
 801141c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801141e:	4293      	cmp	r3, r2
 8011420:	d226      	bcs.n	8011470 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011422:	6982      	ldr	r2, [r0, #24]
 8011424:	2a00      	cmp	r2, #0
 8011426:	db04      	blt.n	8011432 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011428:	682a      	ldr	r2, [r5, #0]
 801142a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801142c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8011430:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011432:	2214      	movs	r2, #20
 8011434:	4e13      	ldr	r6, [pc, #76]	@ (8011484 <xTaskPriorityInherit+0x74>)
 8011436:	fb02 6303 	mla	r3, r2, r3, r6
 801143a:	6962      	ldr	r2, [r4, #20]
 801143c:	429a      	cmp	r2, r3
 801143e:	d113      	bne.n	8011468 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011440:	1d27      	adds	r7, r4, #4
 8011442:	4638      	mov	r0, r7
 8011444:	f7fe fc44 	bl	800fcd0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011448:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801144a:	4a0f      	ldr	r2, [pc, #60]	@ (8011488 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801144e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011450:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011452:	428b      	cmp	r3, r1
 8011454:	d900      	bls.n	8011458 <xTaskPriorityInherit+0x48>
 8011456:	6013      	str	r3, [r2, #0]
 8011458:	2014      	movs	r0, #20
 801145a:	4639      	mov	r1, r7
 801145c:	fb00 6003 	mla	r0, r0, r3, r6
 8011460:	f7fe fc14 	bl	800fc8c <vListInsertEnd>
				xReturn = pdTRUE;
 8011464:	2001      	movs	r0, #1
	}
 8011466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011468:	682b      	ldr	r3, [r5, #0]
 801146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801146c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801146e:	e7f9      	b.n	8011464 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011470:	682b      	ldr	r3, [r5, #0]
 8011472:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8011474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011476:	4298      	cmp	r0, r3
 8011478:	bf2c      	ite	cs
 801147a:	2000      	movcs	r0, #0
 801147c:	2001      	movcc	r0, #1
 801147e:	e7f2      	b.n	8011466 <xTaskPriorityInherit+0x56>
 8011480:	240283e4 	.word	0x240283e4
 8011484:	24027f84 	.word	0x24027f84
 8011488:	24027f08 	.word	0x24027f08

0801148c <xTaskPriorityDisinherit>:
	{
 801148c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 801148e:	b908      	cbnz	r0, 8011494 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8011490:	2000      	movs	r0, #0
	}
 8011492:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8011494:	4b1b      	ldr	r3, [pc, #108]	@ (8011504 <xTaskPriorityDisinherit+0x78>)
 8011496:	681c      	ldr	r4, [r3, #0]
 8011498:	4284      	cmp	r4, r0
 801149a:	d008      	beq.n	80114ae <xTaskPriorityDisinherit+0x22>
 801149c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114a0:	f383 8811 	msr	BASEPRI, r3
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	e7fe      	b.n	80114ac <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80114ae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80114b0:	b943      	cbnz	r3, 80114c4 <xTaskPriorityDisinherit+0x38>
 80114b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b6:	f383 8811 	msr	BASEPRI, r3
 80114ba:	f3bf 8f6f 	isb	sy
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	e7fe      	b.n	80114c2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80114c6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114c8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80114ca:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114cc:	4291      	cmp	r1, r2
 80114ce:	d0df      	beq.n	8011490 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1dd      	bne.n	8011490 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114d4:	1d25      	adds	r5, r4, #4
 80114d6:	4628      	mov	r0, r5
 80114d8:	f7fe fbfa 	bl	800fcd0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114e4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80114e6:	4a08      	ldr	r2, [pc, #32]	@ (8011508 <xTaskPriorityDisinherit+0x7c>)
 80114e8:	6811      	ldr	r1, [r2, #0]
 80114ea:	428b      	cmp	r3, r1
 80114ec:	d900      	bls.n	80114f0 <xTaskPriorityDisinherit+0x64>
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	4a06      	ldr	r2, [pc, #24]	@ (801150c <xTaskPriorityDisinherit+0x80>)
 80114f2:	2014      	movs	r0, #20
 80114f4:	4629      	mov	r1, r5
 80114f6:	fb00 2003 	mla	r0, r0, r3, r2
 80114fa:	f7fe fbc7 	bl	800fc8c <vListInsertEnd>
					xReturn = pdTRUE;
 80114fe:	2001      	movs	r0, #1
		return xReturn;
 8011500:	e7c7      	b.n	8011492 <xTaskPriorityDisinherit+0x6>
 8011502:	bf00      	nop
 8011504:	240283e4 	.word	0x240283e4
 8011508:	24027f08 	.word	0x24027f08
 801150c:	24027f84 	.word	0x24027f84

08011510 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8011510:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8011512:	4604      	mov	r4, r0
 8011514:	2800      	cmp	r0, #0
 8011516:	d042      	beq.n	801159e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8011518:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 801151a:	b942      	cbnz	r2, 801152e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801151c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	e7fe      	b.n	801152c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801152e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011530:	4299      	cmp	r1, r3
 8011532:	bf38      	it	cc
 8011534:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011536:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011538:	428b      	cmp	r3, r1
 801153a:	d030      	beq.n	801159e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801153c:	2a01      	cmp	r2, #1
 801153e:	d12e      	bne.n	801159e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 8011540:	4a17      	ldr	r2, [pc, #92]	@ (80115a0 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8011542:	6812      	ldr	r2, [r2, #0]
 8011544:	4282      	cmp	r2, r0
 8011546:	d108      	bne.n	801155a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8011548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	e7fe      	b.n	8011558 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801155a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801155c:	4d11      	ldr	r5, [pc, #68]	@ (80115a4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801155e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011560:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8011564:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011566:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801156a:	bfa8      	it	ge
 801156c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011570:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011572:	bfa8      	it	ge
 8011574:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011576:	429a      	cmp	r2, r3
 8011578:	d111      	bne.n	801159e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801157a:	1d06      	adds	r6, r0, #4
 801157c:	4630      	mov	r0, r6
 801157e:	f7fe fba7 	bl	800fcd0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8011582:	4a09      	ldr	r2, [pc, #36]	@ (80115a8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8011584:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011586:	6811      	ldr	r1, [r2, #0]
 8011588:	428b      	cmp	r3, r1
 801158a:	d900      	bls.n	801158e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801158c:	6013      	str	r3, [r2, #0]
 801158e:	2014      	movs	r0, #20
 8011590:	4631      	mov	r1, r6
 8011592:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8011596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 801159a:	f7fe bb77 	b.w	800fc8c <vListInsertEnd>
	}
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	240283e4 	.word	0x240283e4
 80115a4:	24027f84 	.word	0x24027f84
 80115a8:	24027f08 	.word	0x24027f08

080115ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80115ac:	4b04      	ldr	r3, [pc, #16]	@ (80115c0 <pvTaskIncrementMutexHeldCount+0x14>)
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	b11a      	cbz	r2, 80115ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80115b6:	3201      	adds	r2, #1
 80115b8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80115ba:	6818      	ldr	r0, [r3, #0]
	}
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	240283e4 	.word	0x240283e4

080115c4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80115c4:	4291      	cmp	r1, r2
{
 80115c6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80115c8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115ca:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80115cc:	d80a      	bhi.n	80115e4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115ce:	1ad2      	subs	r2, r2, r3
 80115d0:	6983      	ldr	r3, [r0, #24]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d20d      	bcs.n	80115f2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80115d6:	1d01      	adds	r1, r0, #4
 80115d8:	4b07      	ldr	r3, [pc, #28]	@ (80115f8 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	f7fe fb61 	bl	800fca2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80115e0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80115e2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d201      	bcs.n	80115ec <prvInsertTimerInActiveList+0x28>
 80115e8:	4299      	cmp	r1, r3
 80115ea:	d202      	bcs.n	80115f2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115ec:	1d01      	adds	r1, r0, #4
 80115ee:	4b03      	ldr	r3, [pc, #12]	@ (80115fc <prvInsertTimerInActiveList+0x38>)
 80115f0:	e7f3      	b.n	80115da <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80115f2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80115f4:	e7f5      	b.n	80115e2 <prvInsertTimerInActiveList+0x1e>
 80115f6:	bf00      	nop
 80115f8:	240284e4 	.word	0x240284e4
 80115fc:	240284e8 	.word	0x240284e8

08011600 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8011602:	4c11      	ldr	r4, [pc, #68]	@ (8011648 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8011604:	f7fe fbd6 	bl	800fdb4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8011608:	6825      	ldr	r5, [r4, #0]
 801160a:	b9bd      	cbnz	r5, 801163c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 801160c:	4f0f      	ldr	r7, [pc, #60]	@ (801164c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 801160e:	4e10      	ldr	r6, [pc, #64]	@ (8011650 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8011610:	4638      	mov	r0, r7
 8011612:	f7fe fb2d 	bl	800fc70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011616:	4630      	mov	r0, r6
 8011618:	f7fe fb2a 	bl	800fc70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801161c:	4b0d      	ldr	r3, [pc, #52]	@ (8011654 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801161e:	4a0e      	ldr	r2, [pc, #56]	@ (8011658 <prvCheckForValidListAndQueue+0x58>)
 8011620:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8011622:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011624:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8011626:	4b0d      	ldr	r3, [pc, #52]	@ (801165c <prvCheckForValidListAndQueue+0x5c>)
 8011628:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801162a:	4b0d      	ldr	r3, [pc, #52]	@ (8011660 <prvCheckForValidListAndQueue+0x60>)
 801162c:	9500      	str	r5, [sp, #0]
 801162e:	f7fe fdcb 	bl	80101c8 <xQueueGenericCreateStatic>
 8011632:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011634:	b110      	cbz	r0, 801163c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011636:	490b      	ldr	r1, [pc, #44]	@ (8011664 <prvCheckForValidListAndQueue+0x64>)
 8011638:	f7ff f9f6 	bl	8010a28 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801163c:	b003      	add	sp, #12
 801163e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8011642:	f7fe bbd7 	b.w	800fdf4 <vPortExitCritical>
 8011646:	bf00      	nop
 8011648:	240284e0 	.word	0x240284e0
 801164c:	24028500 	.word	0x24028500
 8011650:	240284ec 	.word	0x240284ec
 8011654:	240284e8 	.word	0x240284e8
 8011658:	24028438 	.word	0x24028438
 801165c:	240284e4 	.word	0x240284e4
 8011660:	240283e8 	.word	0x240283e8
 8011664:	0802ca31 	.word	0x0802ca31

08011668 <xTimerCreateTimerTask>:
{
 8011668:	b510      	push	{r4, lr}
 801166a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801166c:	f7ff ffc8 	bl	8011600 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011670:	4b12      	ldr	r3, [pc, #72]	@ (80116bc <xTimerCreateTimerTask+0x54>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	b1b3      	cbz	r3, 80116a4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011676:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011678:	aa07      	add	r2, sp, #28
 801167a:	a906      	add	r1, sp, #24
 801167c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801167e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011682:	f7fe f9ed 	bl	800fa60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011686:	9b05      	ldr	r3, [sp, #20]
 8011688:	9a07      	ldr	r2, [sp, #28]
 801168a:	9302      	str	r3, [sp, #8]
 801168c:	9b06      	ldr	r3, [sp, #24]
 801168e:	490c      	ldr	r1, [pc, #48]	@ (80116c0 <xTimerCreateTimerTask+0x58>)
 8011690:	9301      	str	r3, [sp, #4]
 8011692:	2302      	movs	r3, #2
 8011694:	480b      	ldr	r0, [pc, #44]	@ (80116c4 <xTimerCreateTimerTask+0x5c>)
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	4623      	mov	r3, r4
 801169a:	f7ff fb8a 	bl	8010db2 <xTaskCreateStatic>
 801169e:	4b0a      	ldr	r3, [pc, #40]	@ (80116c8 <xTimerCreateTimerTask+0x60>)
 80116a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80116a2:	b940      	cbnz	r0, 80116b6 <xTimerCreateTimerTask+0x4e>
 80116a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80116b4:	e7fe      	b.n	80116b4 <xTimerCreateTimerTask+0x4c>
}
 80116b6:	2001      	movs	r0, #1
 80116b8:	b008      	add	sp, #32
 80116ba:	bd10      	pop	{r4, pc}
 80116bc:	240284e0 	.word	0x240284e0
 80116c0:	0802ca36 	.word	0x0802ca36
 80116c4:	080117c5 	.word	0x080117c5
 80116c8:	240284dc 	.word	0x240284dc

080116cc <xTimerGenericCommand>:
{
 80116cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80116ce:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80116d0:	4604      	mov	r4, r0
{
 80116d2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80116d4:	b940      	cbnz	r0, 80116e8 <xTimerGenericCommand+0x1c>
 80116d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	e7fe      	b.n	80116e6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80116e8:	4d0c      	ldr	r5, [pc, #48]	@ (801171c <xTimerGenericCommand+0x50>)
 80116ea:	6828      	ldr	r0, [r5, #0]
 80116ec:	b178      	cbz	r0, 801170e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80116ee:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80116f0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80116f2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80116f6:	dc0c      	bgt.n	8011712 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80116f8:	f7ff fe7a 	bl	80113f0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80116fc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80116fe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011700:	4669      	mov	r1, sp
 8011702:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011704:	bf0c      	ite	eq
 8011706:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011708:	461a      	movne	r2, r3
 801170a:	f7fe fe12 	bl	8010332 <xQueueGenericSend>
}
 801170e:	b004      	add	sp, #16
 8011710:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011712:	2300      	movs	r3, #0
 8011714:	4669      	mov	r1, sp
 8011716:	f7fe ff0f 	bl	8010538 <xQueueGenericSendFromISR>
 801171a:	e7f8      	b.n	801170e <xTimerGenericCommand+0x42>
 801171c:	240284e0 	.word	0x240284e0

08011720 <prvSampleTimeNow>:
{
 8011720:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8011724:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80117c0 <prvSampleTimeNow+0xa0>
{
 8011728:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 801172a:	f7ff fbb1 	bl	8010e90 <xTaskGetTickCount>
 801172e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8011730:	f8d8 3000 	ldr.w	r3, [r8]
 8011734:	4283      	cmp	r3, r0
 8011736:	d909      	bls.n	801174c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011738:	4f1f      	ldr	r7, [pc, #124]	@ (80117b8 <prvSampleTimeNow+0x98>)
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	b96a      	cbnz	r2, 801175c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8011740:	4a1e      	ldr	r2, [pc, #120]	@ (80117bc <prvSampleTimeNow+0x9c>)
 8011742:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011744:	6013      	str	r3, [r2, #0]
 8011746:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8011748:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 801174a:	e000      	b.n	801174e <prvSampleTimeNow+0x2e>
 801174c:	2300      	movs	r3, #0
}
 801174e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8011750:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8011752:	f8c8 5000 	str.w	r5, [r8]
}
 8011756:	b002      	add	sp, #8
 8011758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801175c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801175e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011760:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011764:	f104 0a04 	add.w	sl, r4, #4
 8011768:	4650      	mov	r0, sl
 801176a:	f7fe fab1 	bl	800fcd0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801176e:	6a23      	ldr	r3, [r4, #32]
 8011770:	4620      	mov	r0, r4
 8011772:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011774:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011778:	075b      	lsls	r3, r3, #29
 801177a:	d5de      	bpl.n	801173a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801177c:	69a3      	ldr	r3, [r4, #24]
 801177e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8011780:	4599      	cmp	r9, r3
 8011782:	d206      	bcs.n	8011792 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011784:	4651      	mov	r1, sl
 8011786:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011788:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801178a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801178c:	f7fe fa89 	bl	800fca2 <vListInsert>
 8011790:	e7d3      	b.n	801173a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011792:	2300      	movs	r3, #0
 8011794:	464a      	mov	r2, r9
 8011796:	4620      	mov	r0, r4
 8011798:	4619      	mov	r1, r3
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	f7ff ff96 	bl	80116cc <xTimerGenericCommand>
				configASSERT( xResult );
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d1ca      	bne.n	801173a <prvSampleTimeNow+0x1a>
 80117a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117a8:	f383 8811 	msr	BASEPRI, r3
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	f3bf 8f4f 	dsb	sy
 80117b4:	e7fe      	b.n	80117b4 <prvSampleTimeNow+0x94>
 80117b6:	bf00      	nop
 80117b8:	240284e8 	.word	0x240284e8
 80117bc:	240284e4 	.word	0x240284e4
 80117c0:	240284d8 	.word	0x240284d8

080117c4 <prvTimerTask>:
{
 80117c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80117c8:	4d6e      	ldr	r5, [pc, #440]	@ (8011984 <prvTimerTask+0x1c0>)
{
 80117ca:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80117cc:	4e6e      	ldr	r6, [pc, #440]	@ (8011988 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80117ce:	682b      	ldr	r3, [r5, #0]
 80117d0:	f8d3 8000 	ldr.w	r8, [r3]
 80117d4:	f1b8 0f00 	cmp.w	r8, #0
 80117d8:	d035      	beq.n	8011846 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117da:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80117dc:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117de:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80117e2:	f7ff fb4d 	bl	8010e80 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117e6:	a804      	add	r0, sp, #16
 80117e8:	f7ff ff9a 	bl	8011720 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80117ec:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117ee:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d169      	bne.n	80118c8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80117f4:	2c00      	cmp	r4, #0
 80117f6:	d14c      	bne.n	8011892 <prvTimerTask+0xce>
 80117f8:	4540      	cmp	r0, r8
 80117fa:	d350      	bcc.n	801189e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80117fc:	f7ff fbe4 	bl	8010fc8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011800:	682b      	ldr	r3, [r5, #0]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011806:	1d38      	adds	r0, r7, #4
 8011808:	f7fe fa62 	bl	800fcd0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801180c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011810:	0758      	lsls	r0, r3, #29
 8011812:	d51a      	bpl.n	801184a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011814:	69b9      	ldr	r1, [r7, #24]
 8011816:	4643      	mov	r3, r8
 8011818:	464a      	mov	r2, r9
 801181a:	4638      	mov	r0, r7
 801181c:	4441      	add	r1, r8
 801181e:	f7ff fed1 	bl	80115c4 <prvInsertTimerInActiveList>
 8011822:	b1b0      	cbz	r0, 8011852 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011824:	4623      	mov	r3, r4
 8011826:	4642      	mov	r2, r8
 8011828:	4621      	mov	r1, r4
 801182a:	4638      	mov	r0, r7
 801182c:	9400      	str	r4, [sp, #0]
 801182e:	f7ff ff4d 	bl	80116cc <xTimerGenericCommand>
			configASSERT( xResult );
 8011832:	b970      	cbnz	r0, 8011852 <prvTimerTask+0x8e>
 8011834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	e7fe      	b.n	8011844 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011846:	2401      	movs	r4, #1
 8011848:	e7cb      	b.n	80117e2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801184a:	f023 0301 	bic.w	r3, r3, #1
 801184e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	4638      	mov	r0, r7
 8011856:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011858:	2200      	movs	r2, #0
 801185a:	a904      	add	r1, sp, #16
 801185c:	6830      	ldr	r0, [r6, #0]
 801185e:	f7fe ff19 	bl	8010694 <xQueueReceive>
 8011862:	2800      	cmp	r0, #0
 8011864:	d0b3      	beq.n	80117ce <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011866:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011868:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801186a:	2b00      	cmp	r3, #0
 801186c:	db2f      	blt.n	80118ce <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801186e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011870:	6963      	ldr	r3, [r4, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d132      	bne.n	80118dc <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011876:	a803      	add	r0, sp, #12
 8011878:	f7ff ff52 	bl	8011720 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801187c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801187e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8011880:	2b09      	cmp	r3, #9
 8011882:	d8e9      	bhi.n	8011858 <prvTimerTask+0x94>
 8011884:	e8df f003 	tbb	[pc, r3]
 8011888:	572e2e2e 	.word	0x572e2e2e
 801188c:	2e2e765e 	.word	0x2e2e765e
 8011890:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011892:	4b3e      	ldr	r3, [pc, #248]	@ (801198c <prvTimerTask+0x1c8>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681c      	ldr	r4, [r3, #0]
 8011898:	fab4 f484 	clz	r4, r4
 801189c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801189e:	4622      	mov	r2, r4
 80118a0:	eba8 0109 	sub.w	r1, r8, r9
 80118a4:	6830      	ldr	r0, [r6, #0]
 80118a6:	f7ff f8fe 	bl	8010aa6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80118aa:	f7ff fb8d 	bl	8010fc8 <xTaskResumeAll>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d1d2      	bne.n	8011858 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80118b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80118b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	e7c7      	b.n	8011858 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80118c8:	f7ff fb7e 	bl	8010fc8 <xTaskResumeAll>
}
 80118cc:	e7c4      	b.n	8011858 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80118ce:	9b05      	ldr	r3, [sp, #20]
 80118d0:	9907      	ldr	r1, [sp, #28]
 80118d2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80118d4:	9b04      	ldr	r3, [sp, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	dbbe      	blt.n	8011858 <prvTimerTask+0x94>
 80118da:	e7c8      	b.n	801186e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80118dc:	1d20      	adds	r0, r4, #4
 80118de:	f7fe f9f7 	bl	800fcd0 <uxListRemove>
 80118e2:	e7c8      	b.n	8011876 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80118e4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80118e8:	4620      	mov	r0, r4
 80118ea:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80118ec:	f043 0301 	orr.w	r3, r3, #1
 80118f0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80118f4:	9b05      	ldr	r3, [sp, #20]
 80118f6:	4419      	add	r1, r3
 80118f8:	f7ff fe64 	bl	80115c4 <prvInsertTimerInActiveList>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d0ab      	beq.n	8011858 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011900:	6a23      	ldr	r3, [r4, #32]
 8011902:	4620      	mov	r0, r4
 8011904:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011906:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801190a:	0759      	lsls	r1, r3, #29
 801190c:	d5a4      	bpl.n	8011858 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801190e:	69a2      	ldr	r2, [r4, #24]
 8011910:	2300      	movs	r3, #0
 8011912:	9905      	ldr	r1, [sp, #20]
 8011914:	4620      	mov	r0, r4
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	440a      	add	r2, r1
 801191a:	4619      	mov	r1, r3
 801191c:	f7ff fed6 	bl	80116cc <xTimerGenericCommand>
							configASSERT( xResult );
 8011920:	2800      	cmp	r0, #0
 8011922:	d199      	bne.n	8011858 <prvTimerTask+0x94>
 8011924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	e7fe      	b.n	8011934 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011936:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801193a:	f023 0301 	bic.w	r3, r3, #1
 801193e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8011942:	e789      	b.n	8011858 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011944:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011948:	f043 0301 	orr.w	r3, r3, #1
 801194c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011950:	9905      	ldr	r1, [sp, #20]
 8011952:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011954:	b941      	cbnz	r1, 8011968 <prvTimerTask+0x1a4>
 8011956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801195a:	f383 8811 	msr	BASEPRI, r3
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	e7fe      	b.n	8011966 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011968:	4603      	mov	r3, r0
 801196a:	4401      	add	r1, r0
 801196c:	4620      	mov	r0, r4
 801196e:	f7ff fe29 	bl	80115c4 <prvInsertTimerInActiveList>
					break;
 8011972:	e771      	b.n	8011858 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011974:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011978:	079a      	lsls	r2, r3, #30
 801197a:	d4de      	bmi.n	801193a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 801197c:	4620      	mov	r0, r4
 801197e:	f7fe f939 	bl	800fbf4 <vPortFree>
 8011982:	e769      	b.n	8011858 <prvTimerTask+0x94>
 8011984:	240284e8 	.word	0x240284e8
 8011988:	240284e0 	.word	0x240284e0
 801198c:	240284e4 	.word	0x240284e4

08011990 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011990:	8880      	ldrh	r0, [r0, #4]
 8011992:	4770      	bx	lr

08011994 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011994:	b570      	push	{r4, r5, r6, lr}
 8011996:	6803      	ldr	r3, [r0, #0]
 8011998:	460c      	mov	r4, r1
 801199a:	2100      	movs	r1, #0
 801199c:	4605      	mov	r5, r0
 801199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119a0:	4798      	blx	r3
 80119a2:	4606      	mov	r6, r0
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	4628      	mov	r0, r5
 80119a8:	1ba4      	subs	r4, r4, r6
 80119aa:	6a1b      	ldr	r3, [r3, #32]
 80119ac:	b2a4      	uxth	r4, r4
 80119ae:	4798      	blx	r3
 80119b0:	fbb4 f0f0 	udiv	r0, r4, r0
 80119b4:	bd70      	pop	{r4, r5, r6, pc}

080119b6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80119b6:	2300      	movs	r3, #0
 80119b8:	8083      	strh	r3, [r0, #4]
 80119ba:	4770      	bx	lr

080119bc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80119bc:	b510      	push	{r4, lr}
 80119be:	6803      	ldr	r3, [r0, #0]
 80119c0:	4604      	mov	r4, r0
 80119c2:	8881      	ldrh	r1, [r0, #4]
 80119c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c6:	4798      	blx	r3
 80119c8:	88a3      	ldrh	r3, [r4, #4]
 80119ca:	3301      	adds	r3, #1
 80119cc:	80a3      	strh	r3, [r4, #4]
 80119ce:	bd10      	pop	{r4, pc}

080119d0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80119d0:	6803      	ldr	r3, [r0, #0]
 80119d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119d4:	4718      	bx	r3

080119d6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80119d6:	4770      	bx	lr

080119d8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80119d8:	4a02      	ldr	r2, [pc, #8]	@ (80119e4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80119da:	6002      	str	r2, [r0, #0]
 80119dc:	2200      	movs	r2, #0
 80119de:	8082      	strh	r2, [r0, #4]
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	0802ca48 	.word	0x0802ca48

080119e8 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 80119e8:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 80119ec:	4770      	bx	lr

080119ee <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 80119ee:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 80119f2:	4770      	bx	lr

080119f4 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 80119f4:	b510      	push	{r4, lr}
 80119f6:	6803      	ldr	r3, [r0, #0]
 80119f8:	4604      	mov	r4, r0
 80119fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80119fe:	4798      	blx	r3
 8011a00:	b110      	cbz	r0, 8011a08 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 8011a02:	4620      	mov	r0, r4
 8011a04:	f7f1 fce1 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011a08:	bd10      	pop	{r4, pc}

08011a0a <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8011a0a:	b508      	push	{r3, lr}
 8011a0c:	3034      	adds	r0, #52	@ 0x34
 8011a0e:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8011a12:	f7f1 fff1 	bl	80039f8 <_ZN8touchgfx8TextArea8setWidthEs>
 8011a16:	bd08      	pop	{r3, pc}

08011a18 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8011a18:	b508      	push	{r3, lr}
 8011a1a:	3034      	adds	r0, #52	@ 0x34
 8011a1c:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8011a20:	f7f1 fffc 	bl	8003a1c <_ZN8touchgfx8TextArea9setHeightEs>
 8011a24:	bd08      	pop	{r3, pc}
	...

08011a28 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8011a28:	4a11      	ldr	r2, [pc, #68]	@ (8011a70 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8011a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8011a32:	4604      	mov	r4, r0
 8011a34:	8812      	ldrh	r2, [r2, #0]
 8011a36:	460d      	mov	r5, r1
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d916      	bls.n	8011a6a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8011a3c:	6802      	ldr	r2, [r0, #0]
 8011a3e:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8011a42:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8011a44:	4a0b      	ldr	r2, [pc, #44]	@ (8011a74 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8011a46:	6812      	ldr	r2, [r2, #0]
 8011a48:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a78 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a54:	6803      	ldr	r3, [r0, #0]
 8011a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a58:	4798      	blx	r3
 8011a5a:	1a2a      	subs	r2, r5, r0
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	4620      	mov	r0, r4
 8011a60:	4633      	mov	r3, r6
 8011a62:	b212      	sxth	r2, r2
 8011a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a68:	4718      	bx	r3
 8011a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a6e:	bf00      	nop
 8011a70:	2402857c 	.word	0x2402857c
 8011a74:	24028578 	.word	0x24028578
 8011a78:	24028580 	.word	0x24028580

08011a7c <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8011a7c:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8011a80:	4770      	bx	lr

08011a82 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8011a82:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 8011a86:	4770      	bx	lr

08011a88 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8011a88:	b508      	push	{r3, lr}
 8011a8a:	3034      	adds	r0, #52	@ 0x34
 8011a8c:	6301      	str	r1, [r0, #48]	@ 0x30
 8011a8e:	f7f1 fc9c 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011a92:	bd08      	pop	{r3, pc}

08011a94 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8011a94:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8011a96:	4770      	bx	lr

08011a98 <_ZN8touchgfx12DigitalClockD1Ev>:
 8011a98:	4770      	bx	lr

08011a9a <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8011a9a:	3034      	adds	r0, #52	@ 0x34
 8011a9c:	f004 bdda 	b.w	8016654 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08011aa0 <_ZN8touchgfx12DigitalClockD0Ev>:
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	2198      	movs	r1, #152	@ 0x98
 8011aa6:	f016 fb27 	bl	80280f8 <_ZdlPvj>
 8011aaa:	4620      	mov	r0, r4
 8011aac:	bd10      	pop	{r4, pc}

08011aae <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8011aae:	b538      	push	{r3, r4, r5, lr}
 8011ab0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011ab4:	460d      	mov	r5, r1
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f7f1 fc87 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011abc:	4620      	mov	r0, r4
 8011abe:	4629      	mov	r1, r5
 8011ac0:	f005 f904 	bl	8016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f7f1 fc80 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011aca:	bd38      	pop	{r3, r4, r5, pc}

08011acc <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8011acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad0:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f7f1 fc77 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011adc:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8011ae0:	bb0b      	cbnz	r3, 8011b26 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8011ae2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	4a40      	ldr	r2, [pc, #256]	@ (8011bec <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8011aea:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8011aee:	4d40      	ldr	r5, [pc, #256]	@ (8011bf0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	bf08      	it	eq
 8011af4:	4615      	moveq	r5, r2
 8011af6:	f000 f928 	bl	8011d4a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011afa:	4680      	mov	r8, r0
 8011afc:	4620      	mov	r0, r4
 8011afe:	f000 f937 	bl	8011d70 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011b02:	4681      	mov	r9, r0
 8011b04:	4620      	mov	r0, r4
 8011b06:	f000 f92c 	bl	8011d62 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	462a      	mov	r2, r5
 8011b0e:	f04f 010c 	mov.w	r1, #12
 8011b12:	bf14      	ite	ne
 8011b14:	2341      	movne	r3, #65	@ 0x41
 8011b16:	2350      	moveq	r3, #80	@ 0x50
 8011b18:	4638      	mov	r0, r7
 8011b1a:	e9cd 9300 	strd	r9, r3, [sp]
 8011b1e:	4643      	mov	r3, r8
 8011b20:	f00b fb5a 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011b24:	e017      	b.n	8011b56 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d11b      	bne.n	8011b62 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8011b2a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011b2e:	4620      	mov	r0, r4
 8011b30:	4a30      	ldr	r2, [pc, #192]	@ (8011bf4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8011b32:	4d31      	ldr	r5, [pc, #196]	@ (8011bf8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	bf08      	it	eq
 8011b38:	4615      	moveq	r5, r2
 8011b3a:	f000 f903 	bl	8011d44 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8011b3e:	4607      	mov	r7, r0
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 f915 	bl	8011d70 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011b46:	462a      	mov	r2, r5
 8011b48:	9000      	str	r0, [sp, #0]
 8011b4a:	463b      	mov	r3, r7
 8011b4c:	210c      	movs	r1, #12
 8011b4e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011b52:	f00b fb41 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011b56:	4630      	mov	r0, r6
 8011b58:	f7f1 fc37 	bl	80033ca <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011b5c:	b004      	add	sp, #16
 8011b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b62:	2b02      	cmp	r3, #2
 8011b64:	d126      	bne.n	8011bb4 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8011b66:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	4a23      	ldr	r2, [pc, #140]	@ (8011bfc <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8011b6e:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8011b72:	4d23      	ldr	r5, [pc, #140]	@ (8011c00 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	bf08      	it	eq
 8011b78:	4615      	moveq	r5, r2
 8011b7a:	f000 f8e6 	bl	8011d4a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011b7e:	4680      	mov	r8, r0
 8011b80:	4620      	mov	r0, r4
 8011b82:	f000 f8f5 	bl	8011d70 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011b86:	4681      	mov	r9, r0
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f000 f8f4 	bl	8011d76 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011b8e:	4682      	mov	sl, r0
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 f8e6 	bl	8011d62 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f8cd 9000 	str.w	r9, [sp]
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	bf14      	ite	ne
 8011ba0:	2341      	movne	r3, #65	@ 0x41
 8011ba2:	2350      	moveq	r3, #80	@ 0x50
 8011ba4:	210c      	movs	r1, #12
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011bac:	4643      	mov	r3, r8
 8011bae:	f00b fb13 	bl	801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011bb2:	e7d0      	b.n	8011b56 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8011bb4:	2b03      	cmp	r3, #3
 8011bb6:	d1ce      	bne.n	8011b56 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8011bb8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	4a11      	ldr	r2, [pc, #68]	@ (8011c04 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8011bc0:	4d11      	ldr	r5, [pc, #68]	@ (8011c08 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	bf08      	it	eq
 8011bc6:	4615      	moveq	r5, r2
 8011bc8:	f000 f8bc 	bl	8011d44 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8011bcc:	4607      	mov	r7, r0
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 f8ce 	bl	8011d70 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011bd4:	4680      	mov	r8, r0
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f000 f8cd 	bl	8011d76 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011bdc:	463b      	mov	r3, r7
 8011bde:	462a      	mov	r2, r5
 8011be0:	210c      	movs	r1, #12
 8011be2:	e9cd 8000 	strd	r8, r0, [sp]
 8011be6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011bea:	e799      	b.n	8011b20 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8011bec:	0802ca74 	.word	0x0802ca74
 8011bf0:	0802ca9e 	.word	0x0802ca9e
 8011bf4:	0802ca80 	.word	0x0802ca80
 8011bf8:	0802cabe 	.word	0x0802cabe
 8011bfc:	0802ca9b 	.word	0x0802ca9b
 8011c00:	0802ca88 	.word	0x0802ca88
 8011c04:	0802cabb 	.word	0x0802cabb
 8011c08:	0802caac 	.word	0x0802caac

08011c0c <_ZN8touchgfx12DigitalClockC1Ev>:
 8011c0c:	b510      	push	{r4, lr}
 8011c0e:	4604      	mov	r4, r0
 8011c10:	f000 f87c 	bl	8011d0c <_ZN8touchgfx13AbstractClockC1Ev>
 8011c14:	2201      	movs	r2, #1
 8011c16:	4b21      	ldr	r3, [pc, #132]	@ (8011c9c <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8011c18:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8011c22:	4a1f      	ldr	r2, [pc, #124]	@ (8011ca0 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	2303      	movs	r3, #3
 8011c28:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8011c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011c2e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 8011c32:	2300      	movs	r3, #0
 8011c34:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8011c38:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8011c3c:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8011c40:	4a18      	ldr	r2, [pc, #96]	@ (8011ca4 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8011c42:	66a1      	str	r1, [r4, #104]	@ 0x68
 8011c44:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8011c48:	6362      	str	r2, [r4, #52]	@ 0x34
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8011c50:	8723      	strh	r3, [r4, #56]	@ 0x38
 8011c52:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8011c54:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8011c56:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8011c58:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8011c5c:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8011c60:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8011c64:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8011c68:	6523      	str	r3, [r4, #80]	@ 0x50
 8011c6a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8011c6e:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8011c72:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8011c76:	6663      	str	r3, [r4, #100]	@ 0x64
 8011c78:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8011c7c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011c80:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8011c84:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 8011c88:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011c8a:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8011c8e:	f822 3f80 	strh.w	r3, [r2, #128]!
 8011c92:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8011c94:	f000 f87c 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	bd10      	pop	{r4, pc}
 8011c9c:	0802cad0 	.word	0x0802cad0
 8011ca0:	0802b820 	.word	0x0802b820
 8011ca4:	0802b830 	.word	0x0802b830

08011ca8 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8011ca8:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8011cac:	4770      	bx	lr

08011cae <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8011cae:	b470      	push	{r4, r5, r6}
 8011cb0:	2518      	movs	r5, #24
 8011cb2:	fbb1 f6f5 	udiv	r6, r1, r5
 8011cb6:	fb06 1115 	mls	r1, r6, r5, r1
 8011cba:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8011cbe:	213c      	movs	r1, #60	@ 0x3c
 8011cc0:	fbb2 f5f1 	udiv	r5, r2, r1
 8011cc4:	fb05 2211 	mls	r2, r5, r1, r2
 8011cc8:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 8011ccc:	fbb3 f2f1 	udiv	r2, r3, r1
 8011cd0:	fb02 3311 	mls	r3, r2, r1, r3
 8011cd4:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8011cd8:	6803      	ldr	r3, [r0, #0]
 8011cda:	bc70      	pop	{r4, r5, r6}
 8011cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ce0:	4718      	bx	r3

08011ce2 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8011ce2:	b4f0      	push	{r4, r5, r6, r7}
 8011ce4:	6804      	ldr	r4, [r0, #0]
 8011ce6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8011cea:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 8011cee:	240c      	movs	r4, #12
 8011cf0:	2e00      	cmp	r6, #0
 8011cf2:	46ac      	mov	ip, r5
 8011cf4:	fbb1 f7f4 	udiv	r7, r1, r4
 8011cf8:	fb07 1114 	mls	r1, r7, r4, r1
 8011cfc:	bf18      	it	ne
 8011cfe:	2400      	movne	r4, #0
 8011d00:	fa54 f181 	uxtab	r1, r4, r1
 8011d04:	bcf0      	pop	{r4, r5, r6, r7}
 8011d06:	b2c9      	uxtb	r1, r1
 8011d08:	4760      	bx	ip
	...

08011d0c <_ZN8touchgfx13AbstractClockC1Ev>:
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011d14:	490a      	ldr	r1, [pc, #40]	@ (8011d40 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8011d16:	8082      	strh	r2, [r0, #4]
 8011d18:	80c2      	strh	r2, [r0, #6]
 8011d1a:	8102      	strh	r2, [r0, #8]
 8011d1c:	8142      	strh	r2, [r0, #10]
 8011d1e:	8182      	strh	r2, [r0, #12]
 8011d20:	81c2      	strh	r2, [r0, #14]
 8011d22:	8202      	strh	r2, [r0, #16]
 8011d24:	8242      	strh	r2, [r0, #18]
 8011d26:	61c2      	str	r2, [r0, #28]
 8011d28:	8402      	strh	r2, [r0, #32]
 8011d2a:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011d2c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011d30:	6001      	str	r1, [r0, #0]
 8011d32:	6282      	str	r2, [r0, #40]	@ 0x28
 8011d34:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8011d36:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8011d3a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011d3e:	4770      	bx	lr
 8011d40:	0802cb90 	.word	0x0802cb90

08011d44 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8011d44:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011d48:	4770      	bx	lr

08011d4a <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8011d4a:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011d4e:	220c      	movs	r2, #12
 8011d50:	f100 030b 	add.w	r3, r0, #11
 8011d54:	fb93 f0f2 	sdiv	r0, r3, r2
 8011d58:	fb02 3010 	mls	r0, r2, r0, r3
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	b2c0      	uxtb	r0, r0
 8011d60:	4770      	bx	lr

08011d62 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8011d62:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011d66:	280b      	cmp	r0, #11
 8011d68:	bf8c      	ite	hi
 8011d6a:	2000      	movhi	r0, #0
 8011d6c:	2001      	movls	r0, #1
 8011d6e:	4770      	bx	lr

08011d70 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8011d70:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8011d74:	4770      	bx	lr

08011d76 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8011d76:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 8011d7a:	4770      	bx	lr

08011d7c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011d7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011d7e:	2000      	movs	r0, #0
 8011d80:	b12b      	cbz	r3, 8011d8e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011d82:	b920      	cbnz	r0, 8011d8e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011d84:	1a5a      	subs	r2, r3, r1
 8011d86:	699b      	ldr	r3, [r3, #24]
 8011d88:	4250      	negs	r0, r2
 8011d8a:	4150      	adcs	r0, r2
 8011d8c:	e7f8      	b.n	8011d80 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011d8e:	4770      	bx	lr

08011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011d90:	2300      	movs	r3, #0
 8011d92:	6148      	str	r0, [r1, #20]
 8011d94:	618b      	str	r3, [r1, #24]
 8011d96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011d98:	b913      	cbnz	r3, 8011da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011d9a:	6281      	str	r1, [r0, #40]	@ 0x28
 8011d9c:	4770      	bx	lr
 8011d9e:	4613      	mov	r3, r2
 8011da0:	699a      	ldr	r2, [r3, #24]
 8011da2:	2a00      	cmp	r2, #0
 8011da4:	d1fb      	bne.n	8011d9e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011da6:	6199      	str	r1, [r3, #24]
 8011da8:	4770      	bx	lr

08011daa <_ZN8touchgfx9Container9removeAllEv>:
 8011daa:	2200      	movs	r2, #0
 8011dac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011dae:	b123      	cbz	r3, 8011dba <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011db0:	6999      	ldr	r1, [r3, #24]
 8011db2:	6281      	str	r1, [r0, #40]	@ 0x28
 8011db4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011db8:	e7f8      	b.n	8011dac <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011dba:	4770      	bx	lr

08011dbc <_ZN8touchgfx9Container6unlinkEv>:
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	6283      	str	r3, [r0, #40]	@ 0x28
 8011dc0:	4770      	bx	lr

08011dc2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	8002      	strh	r2, [r0, #0]
 8011dc6:	8042      	strh	r2, [r0, #2]
 8011dc8:	8082      	strh	r2, [r0, #4]
 8011dca:	80c2      	strh	r2, [r0, #6]
 8011dcc:	4770      	bx	lr

08011dce <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011dce:	b570      	push	{r4, r5, r6, lr}
 8011dd0:	460d      	mov	r5, r1
 8011dd2:	4616      	mov	r6, r2
 8011dd4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011dd6:	b13c      	cbz	r4, 8011de8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011dd8:	6823      	ldr	r3, [r4, #0]
 8011dda:	4620      	mov	r0, r4
 8011ddc:	4632      	mov	r2, r6
 8011dde:	4629      	mov	r1, r5
 8011de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011de2:	4798      	blx	r3
 8011de4:	69a4      	ldr	r4, [r4, #24]
 8011de6:	e7f6      	b.n	8011dd6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011de8:	bd70      	pop	{r4, r5, r6, pc}

08011dea <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011dea:	b538      	push	{r3, r4, r5, lr}
 8011dec:	460d      	mov	r5, r1
 8011dee:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011df0:	b134      	cbz	r4, 8011e00 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011df2:	682b      	ldr	r3, [r5, #0]
 8011df4:	4621      	mov	r1, r4
 8011df6:	4628      	mov	r0, r5
 8011df8:	689b      	ldr	r3, [r3, #8]
 8011dfa:	4798      	blx	r3
 8011dfc:	69a4      	ldr	r4, [r4, #24]
 8011dfe:	e7f7      	b.n	8011df0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011e00:	bd38      	pop	{r3, r4, r5, pc}

08011e02 <_ZN8touchgfx9ContainerD1Ev>:
 8011e02:	4770      	bx	lr

08011e04 <_ZN8touchgfx9ContainerD0Ev>:
 8011e04:	b510      	push	{r4, lr}
 8011e06:	4604      	mov	r4, r0
 8011e08:	212c      	movs	r1, #44	@ 0x2c
 8011e0a:	f016 f975 	bl	80280f8 <_ZdlPvj>
 8011e0e:	4620      	mov	r0, r4
 8011e10:	bd10      	pop	{r4, pc}

08011e12 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011e12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011e14:	b19b      	cbz	r3, 8011e3e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011e16:	428b      	cmp	r3, r1
 8011e18:	d109      	bne.n	8011e2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011e1a:	699a      	ldr	r2, [r3, #24]
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	6159      	str	r1, [r3, #20]
 8011e20:	6282      	str	r2, [r0, #40]	@ 0x28
 8011e22:	b902      	cbnz	r2, 8011e26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011e24:	4770      	bx	lr
 8011e26:	6199      	str	r1, [r3, #24]
 8011e28:	4770      	bx	lr
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	b13a      	cbz	r2, 8011e3e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011e2e:	699a      	ldr	r2, [r3, #24]
 8011e30:	428a      	cmp	r2, r1
 8011e32:	d1fa      	bne.n	8011e2a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011e34:	698a      	ldr	r2, [r1, #24]
 8011e36:	619a      	str	r2, [r3, #24]
 8011e38:	2300      	movs	r3, #0
 8011e3a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011e3e:	4770      	bx	lr

08011e40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011e40:	b410      	push	{r4}
 8011e42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011e44:	4604      	mov	r4, r0
 8011e46:	b92b      	cbnz	r3, 8011e54 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011e48:	6803      	ldr	r3, [r0, #0]
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e52:	4718      	bx	r3
 8011e54:	b941      	cbnz	r1, 8011e68 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011e56:	6193      	str	r3, [r2, #24]
 8011e58:	6282      	str	r2, [r0, #40]	@ 0x28
 8011e5a:	6154      	str	r4, [r2, #20]
 8011e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e60:	4770      	bx	lr
 8011e62:	4603      	mov	r3, r0
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d0f9      	beq.n	8011e5c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011e68:	4299      	cmp	r1, r3
 8011e6a:	6998      	ldr	r0, [r3, #24]
 8011e6c:	d1f9      	bne.n	8011e62 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011e6e:	6190      	str	r0, [r2, #24]
 8011e70:	618a      	str	r2, [r1, #24]
 8011e72:	e7f2      	b.n	8011e5a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e78:	461f      	mov	r7, r3
 8011e7a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8011e7e:	460d      	mov	r5, r1
 8011e80:	4616      	mov	r6, r2
 8011e82:	b103      	cbz	r3, 8011e86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011e84:	6038      	str	r0, [r7, #0]
 8011e86:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011e88:	b314      	cbz	r4, 8011ed0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011e8a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011e8e:	b1eb      	cbz	r3, 8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e90:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011e94:	428d      	cmp	r5, r1
 8011e96:	db19      	blt.n	8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e98:	b289      	uxth	r1, r1
 8011e9a:	8923      	ldrh	r3, [r4, #8]
 8011e9c:	440b      	add	r3, r1
 8011e9e:	b21b      	sxth	r3, r3
 8011ea0:	429d      	cmp	r5, r3
 8011ea2:	da13      	bge.n	8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ea4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011ea8:	4296      	cmp	r6, r2
 8011eaa:	db0f      	blt.n	8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011eac:	b292      	uxth	r2, r2
 8011eae:	8963      	ldrh	r3, [r4, #10]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	b21b      	sxth	r3, r3
 8011eb4:	429e      	cmp	r6, r3
 8011eb6:	da09      	bge.n	8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	1ab2      	subs	r2, r6, r2
 8011ebc:	1a69      	subs	r1, r5, r1
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8011ec4:	b212      	sxth	r2, r2
 8011ec6:	463b      	mov	r3, r7
 8011ec8:	b209      	sxth	r1, r1
 8011eca:	47c0      	blx	r8
 8011ecc:	69a4      	ldr	r4, [r4, #24]
 8011ece:	e7db      	b.n	8011e88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed8:	4c6d      	ldr	r4, [pc, #436]	@ (8012090 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011eda:	b0a1      	sub	sp, #132	@ 0x84
 8011edc:	4606      	mov	r6, r0
 8011ede:	6824      	ldr	r4, [r4, #0]
 8011ee0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8011ee2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8011ee6:	2400      	movs	r4, #0
 8011ee8:	9303      	str	r3, [sp, #12]
 8011eea:	802c      	strh	r4, [r5, #0]
 8011eec:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8011eee:	802c      	strh	r4, [r5, #0]
 8011ef0:	601c      	str	r4, [r3, #0]
 8011ef2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011ef6:	f7ff ffbd 	bl	8011e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011efa:	f1b9 0f03 	cmp.w	r9, #3
 8011efe:	f340 80c1 	ble.w	8012084 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011f02:	4631      	mov	r1, r6
 8011f04:	a80c      	add	r0, sp, #48	@ 0x30
 8011f06:	f008 fe91 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011f0a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011f0e:	9306      	str	r3, [sp, #24]
 8011f10:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8011f14:	9307      	str	r3, [sp, #28]
 8011f16:	9b03      	ldr	r3, [sp, #12]
 8011f18:	f8d3 a000 	ldr.w	sl, [r3]
 8011f1c:	f1ba 0f00 	cmp.w	sl, #0
 8011f20:	f000 80b3 	beq.w	801208a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011f24:	4651      	mov	r1, sl
 8011f26:	a810      	add	r0, sp, #64	@ 0x40
 8011f28:	f008 fe80 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011f2c:	2002      	movs	r0, #2
 8011f2e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8011f32:	9b01      	ldr	r3, [sp, #4]
 8011f34:	9a06      	ldr	r2, [sp, #24]
 8011f36:	fb91 f1f0 	sdiv	r1, r1, r0
 8011f3a:	189d      	adds	r5, r3, r2
 8011f3c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8011f40:	9a07      	ldr	r2, [sp, #28]
 8011f42:	4419      	add	r1, r3
 8011f44:	9b02      	ldr	r3, [sp, #8]
 8011f46:	4413      	add	r3, r2
 8011f48:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8011f4c:	1a6d      	subs	r5, r5, r1
 8011f4e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8011f52:	fb92 f2f0 	sdiv	r2, r2, r0
 8011f56:	440a      	add	r2, r1
 8011f58:	1a9b      	subs	r3, r3, r2
 8011f5a:	435b      	muls	r3, r3
 8011f5c:	fb05 3505 	mla	r5, r5, r5, r3
 8011f60:	4f4c      	ldr	r7, [pc, #304]	@ (8012094 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011f62:	ac10      	add	r4, sp, #64	@ 0x40
 8011f64:	f1b9 0f0c 	cmp.w	r9, #12
 8011f68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011f7c:	f04f 0303 	mov.w	r3, #3
 8011f80:	bfd8      	it	le
 8011f82:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011f86:	f04f 0400 	mov.w	r4, #0
 8011f8a:	f8cd 9000 	str.w	r9, [sp]
 8011f8e:	bfcc      	ite	gt
 8011f90:	4698      	movgt	r8, r3
 8011f92:	fb92 f8f3 	sdivle	r8, r2, r3
 8011f96:	1c63      	adds	r3, r4, #1
 8011f98:	aa10      	add	r2, sp, #64	@ 0x40
 8011f9a:	f004 0401 	and.w	r4, r4, #1
 8011f9e:	f04f 0b00 	mov.w	fp, #0
 8011fa2:	9308      	str	r3, [sp, #32]
 8011fa4:	9b00      	ldr	r3, [sp, #0]
 8011fa6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011faa:	fb93 f3f8 	sdiv	r3, r3, r8
 8011fae:	3404      	adds	r4, #4
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	9304      	str	r3, [sp, #16]
 8011fb4:	9a04      	ldr	r2, [sp, #16]
 8011fb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011fba:	fb13 f302 	smulbb	r3, r3, r2
 8011fbe:	9a01      	ldr	r2, [sp, #4]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	1899      	adds	r1, r3, r2
 8011fc4:	9305      	str	r3, [sp, #20]
 8011fc6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011fca:	b209      	sxth	r1, r1
 8011fcc:	4299      	cmp	r1, r3
 8011fce:	db4d      	blt.n	801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011fd0:	8932      	ldrh	r2, [r6, #8]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	b21b      	sxth	r3, r3
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	da48      	bge.n	801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011fda:	9b04      	ldr	r3, [sp, #16]
 8011fdc:	6827      	ldr	r7, [r4, #0]
 8011fde:	fb17 f703 	smulbb	r7, r7, r3
 8011fe2:	9b02      	ldr	r3, [sp, #8]
 8011fe4:	b2bf      	uxth	r7, r7
 8011fe6:	18fa      	adds	r2, r7, r3
 8011fe8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011fec:	b212      	sxth	r2, r2
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	db3c      	blt.n	801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011ff2:	8970      	ldrh	r0, [r6, #10]
 8011ff4:	4403      	add	r3, r0
 8011ff6:	b21b      	sxth	r3, r3
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	da37      	bge.n	801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	4630      	mov	r0, r6
 8012000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012002:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012004:	f7ff ff36 	bl	8011e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012008:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801200a:	b37a      	cbz	r2, 801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801200c:	4552      	cmp	r2, sl
 801200e:	d02d      	beq.n	801206c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012010:	4611      	mov	r1, r2
 8012012:	a80e      	add	r0, sp, #56	@ 0x38
 8012014:	9209      	str	r2, [sp, #36]	@ 0x24
 8012016:	f008 fe09 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801201a:	f04f 0e02 	mov.w	lr, #2
 801201e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012022:	9a06      	ldr	r2, [sp, #24]
 8012024:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012028:	9b01      	ldr	r3, [sp, #4]
 801202a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801202e:	4413      	add	r3, r2
 8012030:	9a07      	ldr	r2, [sp, #28]
 8012032:	fb91 f1fe 	sdiv	r1, r1, lr
 8012036:	fb9c fcfe 	sdiv	ip, ip, lr
 801203a:	4401      	add	r1, r0
 801203c:	1a58      	subs	r0, r3, r1
 801203e:	9b02      	ldr	r3, [sp, #8]
 8012040:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012044:	4413      	add	r3, r2
 8012046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012048:	448c      	add	ip, r1
 801204a:	eba3 030c 	sub.w	r3, r3, ip
 801204e:	435b      	muls	r3, r3
 8012050:	fb00 3300 	mla	r3, r0, r0, r3
 8012054:	42ab      	cmp	r3, r5
 8012056:	d208      	bcs.n	801206a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801205a:	461d      	mov	r5, r3
 801205c:	9803      	ldr	r0, [sp, #12]
 801205e:	6001      	str	r1, [r0, #0]
 8012060:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012062:	9805      	ldr	r0, [sp, #20]
 8012064:	8008      	strh	r0, [r1, #0]
 8012066:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012068:	800f      	strh	r7, [r1, #0]
 801206a:	4692      	mov	sl, r2
 801206c:	f10b 0b01 	add.w	fp, fp, #1
 8012070:	3408      	adds	r4, #8
 8012072:	f1bb 0f04 	cmp.w	fp, #4
 8012076:	d19d      	bne.n	8011fb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012078:	9b00      	ldr	r3, [sp, #0]
 801207a:	9c08      	ldr	r4, [sp, #32]
 801207c:	444b      	add	r3, r9
 801207e:	4544      	cmp	r4, r8
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	d188      	bne.n	8011f96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012084:	b021      	add	sp, #132	@ 0x84
 8012086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208a:	f04f 35ff 	mov.w	r5, #4294967295
 801208e:	e767      	b.n	8011f60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012090:	24028520 	.word	0x24028520
 8012094:	08029868 	.word	0x08029868

08012098 <_ZN8touchgfx4RectaNERKS0_>:
 8012098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801209c:	f9b1 7000 	ldrsh.w	r7, [r1]
 80120a0:	888c      	ldrh	r4, [r1, #4]
 80120a2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80120a6:	443c      	add	r4, r7
 80120a8:	b2a4      	uxth	r4, r4
 80120aa:	fa0f f884 	sxth.w	r8, r4
 80120ae:	45c1      	cmp	r9, r8
 80120b0:	da2f      	bge.n	8012112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80120b2:	8882      	ldrh	r2, [r0, #4]
 80120b4:	444a      	add	r2, r9
 80120b6:	b292      	uxth	r2, r2
 80120b8:	fa0f fe82 	sxth.w	lr, r2
 80120bc:	4577      	cmp	r7, lr
 80120be:	da28      	bge.n	8012112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80120c0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80120c4:	88cb      	ldrh	r3, [r1, #6]
 80120c6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80120ca:	442b      	add	r3, r5
 80120cc:	b21b      	sxth	r3, r3
 80120ce:	429e      	cmp	r6, r3
 80120d0:	da1f      	bge.n	8012112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80120d2:	88c3      	ldrh	r3, [r0, #6]
 80120d4:	4433      	add	r3, r6
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	fa0f fc83 	sxth.w	ip, r3
 80120dc:	4565      	cmp	r5, ip
 80120de:	da18      	bge.n	8012112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80120e0:	454f      	cmp	r7, r9
 80120e2:	bfb8      	it	lt
 80120e4:	464f      	movlt	r7, r9
 80120e6:	42b5      	cmp	r5, r6
 80120e8:	bfb8      	it	lt
 80120ea:	4635      	movlt	r5, r6
 80120ec:	45f0      	cmp	r8, lr
 80120ee:	bfd8      	it	le
 80120f0:	4622      	movle	r2, r4
 80120f2:	1bd2      	subs	r2, r2, r7
 80120f4:	8082      	strh	r2, [r0, #4]
 80120f6:	884a      	ldrh	r2, [r1, #2]
 80120f8:	88c9      	ldrh	r1, [r1, #6]
 80120fa:	8007      	strh	r7, [r0, #0]
 80120fc:	440a      	add	r2, r1
 80120fe:	8045      	strh	r5, [r0, #2]
 8012100:	b292      	uxth	r2, r2
 8012102:	b211      	sxth	r1, r2
 8012104:	458c      	cmp	ip, r1
 8012106:	bfa8      	it	ge
 8012108:	4613      	movge	r3, r2
 801210a:	1b5b      	subs	r3, r3, r5
 801210c:	80c3      	strh	r3, [r0, #6]
 801210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012112:	2300      	movs	r3, #0
 8012114:	8003      	strh	r3, [r0, #0]
 8012116:	8043      	strh	r3, [r0, #2]
 8012118:	8083      	strh	r3, [r0, #4]
 801211a:	80c3      	strh	r3, [r0, #6]
 801211c:	e7f7      	b.n	801210e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801211e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801211e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	dd06      	ble.n	8012134 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012126:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801212a:	2800      	cmp	r0, #0
 801212c:	bfcc      	ite	gt
 801212e:	2000      	movgt	r0, #0
 8012130:	2001      	movle	r0, #1
 8012132:	4770      	bx	lr
 8012134:	2001      	movs	r0, #1
 8012136:	4770      	bx	lr

08012138 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213c:	2300      	movs	r3, #0
 801213e:	4604      	mov	r4, r0
 8012140:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012142:	8003      	strh	r3, [r0, #0]
 8012144:	8043      	strh	r3, [r0, #2]
 8012146:	8083      	strh	r3, [r0, #4]
 8012148:	80c3      	strh	r3, [r0, #6]
 801214a:	2d00      	cmp	r5, #0
 801214c:	d040      	beq.n	80121d0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801214e:	1d28      	adds	r0, r5, #4
 8012150:	f7ff ffe5 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012154:	b988      	cbnz	r0, 801217a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012156:	4620      	mov	r0, r4
 8012158:	f7ff ffe1 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801215c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012160:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012164:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012168:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801216c:	b138      	cbz	r0, 801217e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801216e:	8022      	strh	r2, [r4, #0]
 8012170:	8063      	strh	r3, [r4, #2]
 8012172:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012176:	f8a4 c006 	strh.w	ip, [r4, #6]
 801217a:	69ad      	ldr	r5, [r5, #24]
 801217c:	e7e5      	b.n	801214a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801217e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012182:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012186:	4290      	cmp	r0, r2
 8012188:	4607      	mov	r7, r0
 801218a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801218e:	460e      	mov	r6, r1
 8012190:	bfa8      	it	ge
 8012192:	4617      	movge	r7, r2
 8012194:	4299      	cmp	r1, r3
 8012196:	4472      	add	r2, lr
 8012198:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801219c:	bfa8      	it	ge
 801219e:	461e      	movge	r6, r3
 80121a0:	4440      	add	r0, r8
 80121a2:	4471      	add	r1, lr
 80121a4:	4463      	add	r3, ip
 80121a6:	b200      	sxth	r0, r0
 80121a8:	8027      	strh	r7, [r4, #0]
 80121aa:	b212      	sxth	r2, r2
 80121ac:	8066      	strh	r6, [r4, #2]
 80121ae:	b209      	sxth	r1, r1
 80121b0:	b21b      	sxth	r3, r3
 80121b2:	4290      	cmp	r0, r2
 80121b4:	bfac      	ite	ge
 80121b6:	ebc7 0200 	rsbge	r2, r7, r0
 80121ba:	ebc7 0202 	rsblt	r2, r7, r2
 80121be:	4299      	cmp	r1, r3
 80121c0:	bfac      	ite	ge
 80121c2:	ebc6 0301 	rsbge	r3, r6, r1
 80121c6:	ebc6 0303 	rsblt	r3, r6, r3
 80121ca:	80a2      	strh	r2, [r4, #4]
 80121cc:	80e3      	strh	r3, [r4, #6]
 80121ce:	e7d4      	b.n	801217a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80121d0:	4620      	mov	r0, r4
 80121d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80121d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80121da:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80121de:	b383      	cbz	r3, 8012242 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80121e0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80121e2:	b374      	cbz	r4, 8012242 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80121e4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80121e8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80121ec:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80121f0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80121f4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80121f8:	b303      	cbz	r3, 801223c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80121fa:	4668      	mov	r0, sp
 80121fc:	1d21      	adds	r1, r4, #4
 80121fe:	f8ad 5000 	strh.w	r5, [sp]
 8012202:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012206:	f8ad 7004 	strh.w	r7, [sp, #4]
 801220a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801220e:	f7ff ff43 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8012212:	4668      	mov	r0, sp
 8012214:	f7ff ff83 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012218:	b980      	cbnz	r0, 801223c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801221a:	f8bd 3000 	ldrh.w	r3, [sp]
 801221e:	4669      	mov	r1, sp
 8012220:	88a2      	ldrh	r2, [r4, #4]
 8012222:	4620      	mov	r0, r4
 8012224:	1a9b      	subs	r3, r3, r2
 8012226:	88e2      	ldrh	r2, [r4, #6]
 8012228:	f8ad 3000 	strh.w	r3, [sp]
 801222c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012230:	1a9b      	subs	r3, r3, r2
 8012232:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	4798      	blx	r3
 801223c:	69a4      	ldr	r4, [r4, #24]
 801223e:	2c00      	cmp	r4, #0
 8012240:	d1d8      	bne.n	80121f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012242:	b002      	add	sp, #8
 8012244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012248 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012248:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801224a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801224e:	460d      	mov	r5, r1
 8012250:	4616      	mov	r6, r2
 8012252:	b323      	cbz	r3, 801229e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012254:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012256:	b314      	cbz	r4, 801229e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012258:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801225c:	b1eb      	cbz	r3, 801229a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801225e:	6828      	ldr	r0, [r5, #0]
 8012260:	466b      	mov	r3, sp
 8012262:	6869      	ldr	r1, [r5, #4]
 8012264:	c303      	stmia	r3!, {r0, r1}
 8012266:	4668      	mov	r0, sp
 8012268:	1d21      	adds	r1, r4, #4
 801226a:	f7ff ff15 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801226e:	4668      	mov	r0, sp
 8012270:	f7ff ff55 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012274:	b988      	cbnz	r0, 801229a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012276:	f8bd 3000 	ldrh.w	r3, [sp]
 801227a:	4669      	mov	r1, sp
 801227c:	88a2      	ldrh	r2, [r4, #4]
 801227e:	4620      	mov	r0, r4
 8012280:	1a9b      	subs	r3, r3, r2
 8012282:	88e2      	ldrh	r2, [r4, #6]
 8012284:	f8ad 3000 	strh.w	r3, [sp]
 8012288:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801228c:	1a9b      	subs	r3, r3, r2
 801228e:	4632      	mov	r2, r6
 8012290:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012298:	4798      	blx	r3
 801229a:	69a4      	ldr	r4, [r4, #24]
 801229c:	e7db      	b.n	8012256 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801229e:	b002      	add	sp, #8
 80122a0:	bd70      	pop	{r4, r5, r6, pc}

080122a2 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80122a2:	2000      	movs	r0, #0
 80122a4:	4770      	bx	lr

080122a6 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80122a6:	2001      	movs	r0, #1
 80122a8:	4770      	bx	lr

080122aa <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 80122aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122ac:	6803      	ldr	r3, [r0, #0]
 80122ae:	4604      	mov	r4, r0
 80122b0:	460e      	mov	r6, r1
 80122b2:	4601      	mov	r1, r0
 80122b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122b8:	4668      	mov	r0, sp
 80122ba:	4615      	mov	r5, r2
 80122bc:	4798      	blx	r3
 80122be:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 80122c2:	b13b      	cbz	r3, 80122d4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 80122c4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80122c8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80122cc:	4293      	cmp	r3, r2
 80122ce:	bfac      	ite	ge
 80122d0:	2300      	movge	r3, #0
 80122d2:	2301      	movlt	r3, #1
 80122d4:	7033      	strb	r3, [r6, #0]
 80122d6:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80122da:	b13b      	cbz	r3, 80122ec <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 80122dc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80122e0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80122e4:	4293      	cmp	r3, r2
 80122e6:	bfac      	ite	ge
 80122e8:	2300      	movge	r3, #0
 80122ea:	2301      	movlt	r3, #1
 80122ec:	702b      	strb	r3, [r5, #0]
 80122ee:	b002      	add	sp, #8
 80122f0:	bd70      	pop	{r4, r5, r6, pc}

080122f2 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80122f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f6:	4604      	mov	r4, r0
 80122f8:	460f      	mov	r7, r1
 80122fa:	4616      	mov	r6, r2
 80122fc:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 80122fe:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 8012302:	f100 0964 	add.w	r9, r0, #100	@ 0x64
 8012306:	b15d      	cbz	r5, 8012320 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 8012308:	4545      	cmp	r5, r8
 801230a:	d007      	beq.n	801231c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 801230c:	454d      	cmp	r5, r9
 801230e:	d005      	beq.n	801231c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8012310:	682b      	ldr	r3, [r5, #0]
 8012312:	4632      	mov	r2, r6
 8012314:	4639      	mov	r1, r7
 8012316:	4628      	mov	r0, r5
 8012318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801231a:	4798      	blx	r3
 801231c:	69ad      	ldr	r5, [r5, #24]
 801231e:	e7f2      	b.n	8012306 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8012320:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 8012324:	441f      	add	r7, r3
 8012326:	f8b4 309a 	ldrh.w	r3, [r4, #154]	@ 0x9a
 801232a:	441e      	add	r6, r3
 801232c:	f8a4 7098 	strh.w	r7, [r4, #152]	@ 0x98
 8012330:	f8a4 609a 	strh.w	r6, [r4, #154]	@ 0x9a
 8012334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012338 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 8012338:	4770      	bx	lr

0801233a <_ZN8touchgfx9DragEventD1Ev>:
 801233a:	4770      	bx	lr

0801233c <_ZN8touchgfx10ClickEventD1Ev>:
 801233c:	4770      	bx	lr

0801233e <_ZN8touchgfx10ClickEventD0Ev>:
 801233e:	b510      	push	{r4, lr}
 8012340:	4604      	mov	r4, r0
 8012342:	210c      	movs	r1, #12
 8012344:	f015 fed8 	bl	80280f8 <_ZdlPvj>
 8012348:	4620      	mov	r0, r4
 801234a:	bd10      	pop	{r4, pc}

0801234c <_ZN8touchgfx9DragEventD0Ev>:
 801234c:	b510      	push	{r4, lr}
 801234e:	4604      	mov	r4, r0
 8012350:	2110      	movs	r1, #16
 8012352:	f015 fed1 	bl	80280f8 <_ZdlPvj>
 8012356:	4620      	mov	r0, r4
 8012358:	bd10      	pop	{r4, pc}

0801235a <_ZN8touchgfx19ScrollableContainerD0Ev>:
 801235a:	b510      	push	{r4, lr}
 801235c:	4604      	mov	r4, r0
 801235e:	21bc      	movs	r1, #188	@ 0xbc
 8012360:	f015 feca 	bl	80280f8 <_ZdlPvj>
 8012364:	4620      	mov	r0, r4
 8012366:	bd10      	pop	{r4, pc}

08012368 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	b086      	sub	sp, #24
 801236c:	2300      	movs	r3, #0
 801236e:	460c      	mov	r4, r1
 8012370:	4605      	mov	r5, r0
 8012372:	aa06      	add	r2, sp, #24
 8012374:	f88d 3002 	strb.w	r3, [sp, #2]
 8012378:	f10d 0102 	add.w	r1, sp, #2
 801237c:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8012380:	6803      	ldr	r3, [r0, #0]
 8012382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012386:	4798      	blx	r3
 8012388:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801238c:	b10b      	cbz	r3, 8012392 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801238e:	7923      	ldrb	r3, [r4, #4]
 8012390:	b133      	cbz	r3, 80123a0 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8012392:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d068      	beq.n	801246c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801239a:	7923      	ldrb	r3, [r4, #4]
 801239c:	2b01      	cmp	r3, #1
 801239e:	d165      	bne.n	801246c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80123a0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80123a4:	2a00      	cmp	r2, #0
 80123a6:	bfb8      	it	lt
 80123a8:	4252      	neglt	r2, r2
 80123aa:	b213      	sxth	r3, r2
 80123ac:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	@ 0x9c
 80123b0:	429a      	cmp	r2, r3
 80123b2:	dc5b      	bgt.n	801246c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80123b4:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 80123b6:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 80123ba:	429a      	cmp	r2, r3
 80123bc:	bfa8      	it	ge
 80123be:	461a      	movge	r2, r3
 80123c0:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	@ 0xba
 80123c4:	b212      	sxth	r2, r2
 80123c6:	2a05      	cmp	r2, #5
 80123c8:	bfb8      	it	lt
 80123ca:	2205      	movlt	r2, #5
 80123cc:	4351      	muls	r1, r2
 80123ce:	3a04      	subs	r2, #4
 80123d0:	fb91 f1f3 	sdiv	r1, r1, r3
 80123d4:	f8a5 10a8 	strh.w	r1, [r5, #168]	@ 0xa8
 80123d8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80123dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80123e0:	b289      	uxth	r1, r1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80123e8:	bfcc      	ite	gt
 80123ea:	2001      	movgt	r0, #1
 80123ec:	4618      	movle	r0, r3
 80123ee:	00d3      	lsls	r3, r2, #3
 80123f0:	fb13 f300 	smulbb	r3, r3, r0
 80123f4:	b21b      	sxth	r3, r3
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f8a5 30ac 	strh.w	r3, [r5, #172]	@ 0xac
 80123fc:	bfb8      	it	lt
 80123fe:	425b      	neglt	r3, r3
 8012400:	b21b      	sxth	r3, r3
 8012402:	428b      	cmp	r3, r1
 8012404:	bfa8      	it	ge
 8012406:	460b      	movge	r3, r1
 8012408:	4629      	mov	r1, r5
 801240a:	f8a5 30a8 	strh.w	r3, [r5, #168]	@ 0xa8
 801240e:	7922      	ldrb	r2, [r4, #4]
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	2a01      	cmp	r2, #1
 8012414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012418:	d12a      	bne.n	8012470 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 801241a:	a801      	add	r0, sp, #4
 801241c:	4798      	blx	r3
 801241e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012422:	2601      	movs	r6, #1
 8012424:	f8a5 30aa 	strh.w	r3, [r5, #170]	@ 0xaa
 8012428:	f885 60b0 	strb.w	r6, [r5, #176]	@ 0xb0
 801242c:	f007 faa0 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8012430:	4629      	mov	r1, r5
 8012432:	3004      	adds	r0, #4
 8012434:	f007 fb6a 	bl	8019b0c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8012438:	7923      	ldrb	r3, [r4, #4]
 801243a:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 801243e:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
 8012442:	b198      	cbz	r0, 801246c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8012444:	f895 30b6 	ldrb.w	r3, [r5, #182]	@ 0xb6
 8012448:	b983      	cbnz	r3, 801246c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801244a:	4a0c      	ldr	r2, [pc, #48]	@ (801247c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 801244c:	a903      	add	r1, sp, #12
 801244e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012452:	9203      	str	r2, [sp, #12]
 8012454:	2202      	movs	r2, #2
 8012456:	f8ad 3014 	strh.w	r3, [sp, #20]
 801245a:	f88d 2010 	strb.w	r2, [sp, #16]
 801245e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012462:	6803      	ldr	r3, [r0, #0]
 8012464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012466:	4798      	blx	r3
 8012468:	f885 60b6 	strb.w	r6, [r5, #182]	@ 0xb6
 801246c:	b006      	add	sp, #24
 801246e:	bd70      	pop	{r4, r5, r6, pc}
 8012470:	a803      	add	r0, sp, #12
 8012472:	4798      	blx	r3
 8012474:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012478:	e7d3      	b.n	8012422 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 801247a:	bf00      	nop
 801247c:	0802ccbc 	.word	0x0802ccbc

08012480 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8012480:	b470      	push	{r4, r5, r6}
 8012482:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
 8012486:	461d      	mov	r5, r3
 8012488:	b11e      	cbz	r6, 8012492 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801248a:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 801248e:	b116      	cbz	r6, 8012496 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8012490:	6028      	str	r0, [r5, #0]
 8012492:	bc70      	pop	{r4, r5, r6}
 8012494:	4770      	bx	lr
 8012496:	bc70      	pop	{r4, r5, r6}
 8012498:	f7ff bcec 	b.w	8011e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

0801249c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 801249c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801249e:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
 80124a2:	4604      	mov	r4, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d049      	beq.n	801253c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 80124a8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	@ 0xae
 80124ac:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80124b0:	3001      	adds	r0, #1
 80124b2:	b280      	uxth	r0, r0
 80124b4:	4298      	cmp	r0, r3
 80124b6:	f8a4 00ae 	strh.w	r0, [r4, #174]	@ 0xae
 80124ba:	d843      	bhi.n	8012544 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa8>
 80124bc:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80124c0:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80124c4:	f009 fb70 	bl	801bba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80124c8:	4605      	mov	r5, r0
 80124ca:	b282      	uxth	r2, r0
 80124cc:	f012 0301 	ands.w	r3, r2, #1
 80124d0:	d006      	beq.n	80124e0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 80124d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80124d6:	2800      	cmp	r0, #0
 80124d8:	bfd8      	it	le
 80124da:	460b      	movle	r3, r1
 80124dc:	18d5      	adds	r5, r2, r3
 80124de:	b22d      	sxth	r5, r5
 80124e0:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d02b      	beq.n	8012540 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 80124e8:	6823      	ldr	r3, [r4, #0]
 80124ea:	4621      	mov	r1, r4
 80124ec:	4668      	mov	r0, sp
 80124ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80124f2:	4798      	blx	r3
 80124f4:	f8bd 6000 	ldrh.w	r6, [sp]
 80124f8:	1bae      	subs	r6, r5, r6
 80124fa:	b236      	sxth	r6, r6
 80124fc:	f894 2036 	ldrb.w	r2, [r4, #54]	@ 0x36
 8012500:	b14a      	cbz	r2, 8012516 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	4621      	mov	r1, r4
 8012506:	4668      	mov	r0, sp
 8012508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801250c:	4798      	blx	r3
 801250e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012512:	1aad      	subs	r5, r5, r2
 8012514:	b22a      	sxth	r2, r5
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	4631      	mov	r1, r6
 801251a:	4620      	mov	r0, r4
 801251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012520:	4798      	blx	r3
 8012522:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
 8012526:	f894 50b0 	ldrb.w	r5, [r4, #176]	@ 0xb0
 801252a:	b93d      	cbnz	r5, 801253c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 801252c:	f007 fa20 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8012530:	4621      	mov	r1, r4
 8012532:	3004      	adds	r0, #4
 8012534:	f007 fa41 	bl	80199ba <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012538:	f8a4 50ae 	strh.w	r5, [r4, #174]	@ 0xae
 801253c:	b002      	add	sp, #8
 801253e:	bd70      	pop	{r4, r5, r6, pc}
 8012540:	2600      	movs	r6, #0
 8012542:	e7db      	b.n	80124fc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8012544:	2300      	movs	r3, #0
 8012546:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
 801254a:	e7ec      	b.n	8012526 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

0801254c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 801254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012550:	b08b      	sub	sp, #44	@ 0x2c
 8012552:	2300      	movs	r3, #0
 8012554:	4604      	mov	r4, r0
 8012556:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801255a:	aa0a      	add	r2, sp, #40	@ 0x28
 801255c:	f88d 3006 	strb.w	r3, [sp, #6]
 8012560:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8012564:	460f      	mov	r7, r1
 8012566:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801256a:	6803      	ldr	r3, [r0, #0]
 801256c:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8012570:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8012574:	f10d 0106 	add.w	r1, sp, #6
 8012578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801257c:	4798      	blx	r3
 801257e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8012582:	2900      	cmp	r1, #0
 8012584:	d03d      	beq.n	8012602 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8012586:	42a1      	cmp	r1, r4
 8012588:	d03b      	beq.n	8012602 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801258a:	a802      	add	r0, sp, #8
 801258c:	f008 fb4e 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012590:	4621      	mov	r1, r4
 8012592:	a804      	add	r0, sp, #16
 8012594:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8012598:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801259c:	f008 fb46 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80125a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80125a4:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 80125a8:	eba3 030b 	sub.w	r3, r3, fp
 80125ac:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 80125b0:	88f9      	ldrh	r1, [r7, #6]
 80125b2:	4413      	add	r3, r2
 80125b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80125b8:	f89d c006 	ldrb.w	ip, [sp, #6]
 80125bc:	eba2 020a 	sub.w	r2, r2, sl
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4402      	add	r2, r0
 80125c4:	8938      	ldrh	r0, [r7, #8]
 80125c6:	4419      	add	r1, r3
 80125c8:	b292      	uxth	r2, r2
 80125ca:	b209      	sxth	r1, r1
 80125cc:	4410      	add	r0, r2
 80125ce:	b200      	sxth	r0, r0
 80125d0:	f1bc 0f00 	cmp.w	ip, #0
 80125d4:	f040 808d 	bne.w	80126f2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 80125d8:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 80125dc:	4473      	add	r3, lr
 80125de:	b21b      	sxth	r3, r3
 80125e0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80125e4:	f1be 0f00 	cmp.w	lr, #0
 80125e8:	f040 80b1 	bne.w	801274e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 80125ec:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 80125f0:	4472      	add	r2, lr
 80125f2:	b212      	sxth	r2, r2
 80125f4:	f1bc 0f00 	cmp.w	ip, #0
 80125f8:	f000 80c8 	beq.w	801278c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 80125fc:	4290      	cmp	r0, r2
 80125fe:	f040 80ae 	bne.w	801275e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8012602:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 8012606:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801260a:	2b00      	cmp	r3, #0
 801260c:	f040 8099 	bne.w	8012742 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8012610:	897d      	ldrh	r5, [r7, #10]
 8012612:	89be      	ldrh	r6, [r7, #12]
 8012614:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8012618:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	@ 0xb4
 801261c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 8012620:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	@ 0xa0
 8012624:	4411      	add	r1, r2
 8012626:	442a      	add	r2, r5
 8012628:	449c      	add	ip, r3
 801262a:	4433      	add	r3, r6
 801262c:	b292      	uxth	r2, r2
 801262e:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8012632:	b29b      	uxth	r3, r3
 8012634:	b289      	uxth	r1, r1
 8012636:	fa1f fc8c 	uxth.w	ip, ip
 801263a:	b215      	sxth	r5, r2
 801263c:	b21e      	sxth	r6, r3
 801263e:	b15f      	cbz	r7, 8012658 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8012640:	1a52      	subs	r2, r2, r1
 8012642:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	@ 0x9c
 8012646:	b212      	sxth	r2, r2
 8012648:	2a00      	cmp	r2, #0
 801264a:	bfb8      	it	lt
 801264c:	4252      	neglt	r2, r2
 801264e:	b212      	sxth	r2, r2
 8012650:	4297      	cmp	r7, r2
 8012652:	bfac      	ite	ge
 8012654:	2700      	movge	r7, #0
 8012656:	2701      	movlt	r7, #1
 8012658:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801265c:	b152      	cbz	r2, 8012674 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 801265e:	eba3 030c 	sub.w	r3, r3, ip
 8012662:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	@ 0x9c
 8012666:	b21b      	sxth	r3, r3
 8012668:	2b00      	cmp	r3, #0
 801266a:	bfb8      	it	lt
 801266c:	425b      	neglt	r3, r3
 801266e:	b21b      	sxth	r3, r3
 8012670:	429a      	cmp	r2, r3
 8012672:	db01      	blt.n	8012678 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8012674:	2f00      	cmp	r7, #0
 8012676:	d03e      	beq.n	80126f6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8012678:	2701      	movs	r7, #1
 801267a:	fa0f f881 	sxth.w	r8, r1
 801267e:	fa0f f98c 	sxth.w	r9, ip
 8012682:	f884 70a3 	strb.w	r7, [r4, #163]	@ 0xa3
 8012686:	b1a0      	cbz	r0, 80126b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8012688:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 801268c:	b98b      	cbnz	r3, 80126b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 801268e:	4a41      	ldr	r2, [pc, #260]	@ (8012794 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8012690:	a906      	add	r1, sp, #24
 8012692:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012696:	9206      	str	r2, [sp, #24]
 8012698:	2202      	movs	r2, #2
 801269a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801269e:	f88d 201c 	strb.w	r2, [sp, #28]
 80126a2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80126a6:	6803      	ldr	r3, [r0, #0]
 80126a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126aa:	4798      	blx	r3
 80126ac:	2301      	movs	r3, #1
 80126ae:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 80126b2:	f894 10a4 	ldrb.w	r1, [r4, #164]	@ 0xa4
 80126b6:	b149      	cbz	r1, 80126cc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80126b8:	eba5 0108 	sub.w	r1, r5, r8
 80126bc:	b209      	sxth	r1, r1
 80126be:	b12f      	cbz	r7, 80126cc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80126c0:	2900      	cmp	r1, #0
 80126c2:	dc40      	bgt.n	8012746 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80126c4:	bf14      	ite	ne
 80126c6:	f04f 31ff 	movne.w	r1, #4294967295
 80126ca:	2100      	moveq	r1, #0
 80126cc:	f894 20a5 	ldrb.w	r2, [r4, #165]	@ 0xa5
 80126d0:	b14a      	cbz	r2, 80126e6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80126d2:	eba6 0609 	sub.w	r6, r6, r9
 80126d6:	b232      	sxth	r2, r6
 80126d8:	b12f      	cbz	r7, 80126e6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80126da:	2a00      	cmp	r2, #0
 80126dc:	dc35      	bgt.n	801274a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 80126de:	bf14      	ite	ne
 80126e0:	f04f 32ff 	movne.w	r2, #4294967295
 80126e4:	2200      	moveq	r2, #0
 80126e6:	6823      	ldr	r3, [r4, #0]
 80126e8:	4620      	mov	r0, r4
 80126ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126ee:	4798      	blx	r3
 80126f0:	e024      	b.n	801273c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80126f2:	460b      	mov	r3, r1
 80126f4:	e774      	b.n	80125e0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 80126f6:	b308      	cbz	r0, 801273c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80126f8:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 80126fc:	b9f3      	cbnz	r3, 801273c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80126fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8012700:	4620      	mov	r0, r4
 8012702:	4632      	mov	r2, r6
 8012704:	4629      	mov	r1, r5
 8012706:	f843 7d18 	str.w	r7, [r3, #-24]!
 801270a:	f7ff fbb3 	bl	8011e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801270e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012712:	9b04      	ldr	r3, [sp, #16]
 8012714:	4298      	cmp	r0, r3
 8012716:	d011      	beq.n	801273c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8012718:	4b1e      	ldr	r3, [pc, #120]	@ (8012794 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 801271a:	a906      	add	r1, sp, #24
 801271c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012720:	9306      	str	r3, [sp, #24]
 8012722:	2302      	movs	r3, #2
 8012724:	f8ad 7020 	strh.w	r7, [sp, #32]
 8012728:	f88d 301c 	strb.w	r3, [sp, #28]
 801272c:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8012730:	6803      	ldr	r3, [r0, #0]
 8012732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012734:	4798      	blx	r3
 8012736:	2301      	movs	r3, #1
 8012738:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 801273c:	b00b      	add	sp, #44	@ 0x2c
 801273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012742:	2700      	movs	r7, #0
 8012744:	e79f      	b.n	8012686 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8012746:	2101      	movs	r1, #1
 8012748:	e7c0      	b.n	80126cc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 801274a:	2201      	movs	r2, #1
 801274c:	e7cb      	b.n	80126e6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801274e:	f1bc 0f00 	cmp.w	ip, #0
 8012752:	f47f af56 	bne.w	8012602 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8012756:	428b      	cmp	r3, r1
 8012758:	f43f af53 	beq.w	8012602 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801275c:	4602      	mov	r2, r0
 801275e:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8012798 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8012762:	f8ad 0020 	strh.w	r0, [sp, #32]
 8012766:	f8cd c018 	str.w	ip, [sp, #24]
 801276a:	f04f 0c00 	mov.w	ip, #0
 801276e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012772:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012776:	a906      	add	r1, sp, #24
 8012778:	f88d c01c 	strb.w	ip, [sp, #28]
 801277c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8012780:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8012784:	6803      	ldr	r3, [r0, #0]
 8012786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012788:	4798      	blx	r3
 801278a:	e73a      	b.n	8012602 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801278c:	428b      	cmp	r3, r1
 801278e:	f43f af35 	beq.w	80125fc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8012792:	e7e4      	b.n	801275e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8012794:	0802ccbc 	.word	0x0802ccbc
 8012798:	0802ccd0 	.word	0x0802ccd0

0801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279e:	4604      	mov	r4, r0
 80127a0:	4608      	mov	r0, r1
 80127a2:	460d      	mov	r5, r1
 80127a4:	f7ff fcbb 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 80127a8:	b978      	cbnz	r0, 80127ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80127aa:	4620      	mov	r0, r4
 80127ac:	f7ff fcb7 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 80127b0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80127b4:	b150      	cbz	r0, 80127cc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80127b6:	8026      	strh	r6, [r4, #0]
 80127b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80127bc:	8063      	strh	r3, [r4, #2]
 80127be:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80127c2:	80a3      	strh	r3, [r4, #4]
 80127c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80127c8:	80e3      	strh	r3, [r4, #6]
 80127ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80127d0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80127d4:	42b1      	cmp	r1, r6
 80127d6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80127da:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80127de:	460f      	mov	r7, r1
 80127e0:	88ed      	ldrh	r5, [r5, #6]
 80127e2:	bfa8      	it	ge
 80127e4:	4637      	movge	r7, r6
 80127e6:	4293      	cmp	r3, r2
 80127e8:	4618      	mov	r0, r3
 80127ea:	4466      	add	r6, ip
 80127ec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80127f0:	bfa8      	it	ge
 80127f2:	4610      	movge	r0, r2
 80127f4:	442a      	add	r2, r5
 80127f6:	88e5      	ldrh	r5, [r4, #6]
 80127f8:	4461      	add	r1, ip
 80127fa:	b236      	sxth	r6, r6
 80127fc:	8027      	strh	r7, [r4, #0]
 80127fe:	442b      	add	r3, r5
 8012800:	b209      	sxth	r1, r1
 8012802:	b212      	sxth	r2, r2
 8012804:	8060      	strh	r0, [r4, #2]
 8012806:	b21b      	sxth	r3, r3
 8012808:	428e      	cmp	r6, r1
 801280a:	bfac      	ite	ge
 801280c:	ebc7 0106 	rsbge	r1, r7, r6
 8012810:	ebc7 0101 	rsblt	r1, r7, r1
 8012814:	429a      	cmp	r2, r3
 8012816:	bfac      	ite	ge
 8012818:	ebc0 0202 	rsbge	r2, r0, r2
 801281c:	ebc0 0203 	rsblt	r2, r0, r3
 8012820:	80a1      	strh	r1, [r4, #4]
 8012822:	80e2      	strh	r2, [r4, #6]
 8012824:	e7d1      	b.n	80127ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012826 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8012826:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012828:	4604      	mov	r4, r0
 801282a:	2200      	movs	r2, #0
 801282c:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8012830:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8012834:	680b      	ldr	r3, [r1, #0]
 8012836:	8022      	strh	r2, [r4, #0]
 8012838:	8062      	strh	r2, [r4, #2]
 801283a:	80e0      	strh	r0, [r4, #6]
 801283c:	4668      	mov	r0, sp
 801283e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012842:	80a5      	strh	r5, [r4, #4]
 8012844:	4798      	blx	r3
 8012846:	4620      	mov	r0, r4
 8012848:	4669      	mov	r1, sp
 801284a:	f7ff ffa7 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801284e:	4620      	mov	r0, r4
 8012850:	b003      	add	sp, #12
 8012852:	bd30      	pop	{r4, r5, pc}

08012854 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8012854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012856:	2300      	movs	r3, #0
 8012858:	4605      	mov	r5, r0
 801285a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801285c:	f101 0738 	add.w	r7, r1, #56	@ 0x38
 8012860:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 8012864:	8003      	strh	r3, [r0, #0]
 8012866:	8043      	strh	r3, [r0, #2]
 8012868:	8083      	strh	r3, [r0, #4]
 801286a:	80c3      	strh	r3, [r0, #6]
 801286c:	b164      	cbz	r4, 8012888 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 801286e:	42bc      	cmp	r4, r7
 8012870:	d008      	beq.n	8012884 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8012872:	42b4      	cmp	r4, r6
 8012874:	d006      	beq.n	8012884 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8012876:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801287a:	b11b      	cbz	r3, 8012884 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 801287c:	1d21      	adds	r1, r4, #4
 801287e:	4628      	mov	r0, r5
 8012880:	f7ff ff8c 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012884:	69a4      	ldr	r4, [r4, #24]
 8012886:	e7f1      	b.n	801286c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8012888:	4628      	mov	r0, r5
 801288a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801288c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	6803      	ldr	r3, [r0, #0]
 8012890:	4604      	mov	r4, r0
 8012892:	4615      	mov	r5, r2
 8012894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012896:	4798      	blx	r3
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	4629      	mov	r1, r5
 801289c:	4620      	mov	r0, r4
 801289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128a4:	4718      	bx	r3
	...

080128a8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 80128a8:	b530      	push	{r4, r5, lr}
 80128aa:	2500      	movs	r5, #0
 80128ac:	6283      	str	r3, [r0, #40]	@ 0x28
 80128ae:	8101      	strh	r1, [r0, #8]
 80128b0:	8085      	strh	r5, [r0, #4]
 80128b2:	80c5      	strh	r5, [r0, #6]
 80128b4:	8185      	strh	r5, [r0, #12]
 80128b6:	81c5      	strh	r5, [r0, #14]
 80128b8:	8205      	strh	r5, [r0, #16]
 80128ba:	8245      	strh	r5, [r0, #18]
 80128bc:	61c5      	str	r5, [r0, #28]
 80128be:	8405      	strh	r5, [r0, #32]
 80128c0:	8445      	strh	r5, [r0, #34]	@ 0x22
 80128c2:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80128c6:	8142      	strh	r2, [r0, #10]
 80128c8:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80128cc:	2501      	movs	r5, #1
 80128ce:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80128d2:	4d03      	ldr	r5, [pc, #12]	@ (80128e0 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 80128d4:	6005      	str	r5, [r0, #0]
 80128d6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80128da:	f880 5026 	strb.w	r5, [r0, #38]	@ 0x26
 80128de:	bd30      	pop	{r4, r5, pc}
 80128e0:	0802d328 	.word	0x0802d328

080128e4 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 80128e4:	4b2f      	ldr	r3, [pc, #188]	@ (80129a4 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 80128e6:	2278      	movs	r2, #120	@ 0x78
 80128e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128ea:	6003      	str	r3, [r0, #0]
 80128ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128f0:	2500      	movs	r5, #0
 80128f2:	2601      	movs	r6, #1
 80128f4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80128f6:	2111      	movs	r1, #17
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
 80128fc:	4604      	mov	r4, r0
 80128fe:	8085      	strh	r5, [r0, #4]
 8012900:	80c5      	strh	r5, [r0, #6]
 8012902:	8105      	strh	r5, [r0, #8]
 8012904:	8145      	strh	r5, [r0, #10]
 8012906:	8185      	strh	r5, [r0, #12]
 8012908:	81c5      	strh	r5, [r0, #14]
 801290a:	8205      	strh	r5, [r0, #16]
 801290c:	8245      	strh	r5, [r0, #18]
 801290e:	61c5      	str	r5, [r0, #28]
 8012910:	8405      	strh	r5, [r0, #32]
 8012912:	8445      	strh	r5, [r0, #34]	@ 0x22
 8012914:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8012918:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
 801291c:	6285      	str	r5, [r0, #40]	@ 0x28
 801291e:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8012922:	6303      	str	r3, [r0, #48]	@ 0x30
 8012924:	8681      	strh	r1, [r0, #52]	@ 0x34
 8012926:	4629      	mov	r1, r5
 8012928:	f880 5036 	strb.w	r5, [r0, #54]	@ 0x36
 801292c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8012930:	9200      	str	r2, [sp, #0]
 8012932:	3038      	adds	r0, #56	@ 0x38
 8012934:	462a      	mov	r2, r5
 8012936:	f7ff ffb7 	bl	80128a8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801293a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801293e:	462a      	mov	r2, r5
 8012940:	4629      	mov	r1, r5
 8012942:	9300      	str	r3, [sp, #0]
 8012944:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8012948:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801294a:	f7ff ffad 	bl	80128a8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801294e:	2305      	movs	r3, #5
 8012950:	4620      	mov	r0, r4
 8012952:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 8012956:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801295a:	4b13      	ldr	r3, [pc, #76]	@ (80129a8 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 801295c:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8012960:	f884 50a2 	strb.w	r5, [r4, #162]	@ 0xa2
 8012964:	f884 50a3 	strb.w	r5, [r4, #163]	@ 0xa3
 8012968:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 801296c:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 8012970:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 8012974:	f884 50a7 	strb.w	r5, [r4, #167]	@ 0xa7
 8012978:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
 801297c:	f8a4 50b2 	strh.w	r5, [r4, #178]	@ 0xb2
 8012980:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 8012984:	f884 50b6 	strb.w	r5, [r4, #182]	@ 0xb6
 8012988:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 801298c:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8012990:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
 8012994:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8012998:	e9c4 5524 	strd	r5, r5, [r4, #144]	@ 0x90
 801299c:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 80129a0:	b002      	add	sp, #8
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	0802cce4 	.word	0x0802cce4
 80129a8:	00010007 	.word	0x00010007

080129ac <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 80129ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129ae:	2600      	movs	r6, #0
 80129b0:	f891 30a4 	ldrb.w	r3, [r1, #164]	@ 0xa4
 80129b4:	4605      	mov	r5, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	8006      	strh	r6, [r0, #0]
 80129ba:	8046      	strh	r6, [r0, #2]
 80129bc:	8086      	strh	r6, [r0, #4]
 80129be:	80c6      	strh	r6, [r0, #6]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d041      	beq.n	8012a48 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80129c4:	680b      	ldr	r3, [r1, #0]
 80129c6:	4668      	mov	r0, sp
 80129c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129cc:	4798      	blx	r3
 80129ce:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80129d2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d039      	beq.n	8012a4e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 80129da:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80129de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	dd05      	ble.n	80129f2 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 80129e6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80129ea:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80129ee:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80129f2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80129f6:	42bb      	cmp	r3, r7
 80129f8:	da26      	bge.n	8012a48 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80129fa:	f9bd 0000 	ldrsh.w	r0, [sp]
 80129fe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a02:	4242      	negs	r2, r0
 8012a04:	4438      	add	r0, r7
 8012a06:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8012a0a:	b200      	sxth	r0, r0
 8012a0c:	435a      	muls	r2, r3
 8012a0e:	1b9e      	subs	r6, r3, r6
 8012a10:	1ac0      	subs	r0, r0, r3
 8012a12:	4343      	muls	r3, r0
 8012a14:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012a18:	fb92 f2f7 	sdiv	r2, r2, r7
 8012a1c:	fb93 f3f7 	sdiv	r3, r3, r7
 8012a20:	4413      	add	r3, r2
 8012a22:	0047      	lsls	r7, r0, #1
 8012a24:	1af3      	subs	r3, r6, r3
 8012a26:	429f      	cmp	r7, r3
 8012a28:	dd05      	ble.n	8012a36 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8012a2a:	1afb      	subs	r3, r7, r3
 8012a2c:	4353      	muls	r3, r2
 8012a2e:	fb93 f3f6 	sdiv	r3, r3, r6
 8012a32:	1ad2      	subs	r2, r2, r3
 8012a34:	463b      	mov	r3, r7
 8012a36:	b289      	uxth	r1, r1
 8012a38:	8964      	ldrh	r4, [r4, #10]
 8012a3a:	80ab      	strh	r3, [r5, #4]
 8012a3c:	180e      	adds	r6, r1, r0
 8012a3e:	4411      	add	r1, r2
 8012a40:	80e8      	strh	r0, [r5, #6]
 8012a42:	1ba4      	subs	r4, r4, r6
 8012a44:	8029      	strh	r1, [r5, #0]
 8012a46:	806c      	strh	r4, [r5, #2]
 8012a48:	4628      	mov	r0, r5
 8012a4a:	b003      	add	sp, #12
 8012a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a4e:	461e      	mov	r6, r3
 8012a50:	e7cf      	b.n	80129f2 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08012a52 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8012a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a54:	2600      	movs	r6, #0
 8012a56:	f891 30a5 	ldrb.w	r3, [r1, #165]	@ 0xa5
 8012a5a:	4605      	mov	r5, r0
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	8006      	strh	r6, [r0, #0]
 8012a60:	8046      	strh	r6, [r0, #2]
 8012a62:	8086      	strh	r6, [r0, #4]
 8012a64:	80c6      	strh	r6, [r0, #6]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d041      	beq.n	8012aee <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8012a6a:	680b      	ldr	r3, [r1, #0]
 8012a6c:	4668      	mov	r0, sp
 8012a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a72:	4798      	blx	r3
 8012a74:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8012a78:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d039      	beq.n	8012af4 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8012a80:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8012a84:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	dd05      	ble.n	8012a98 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 8012a8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a90:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8012a94:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8012a98:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012a9c:	42bb      	cmp	r3, r7
 8012a9e:	da26      	bge.n	8012aee <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8012aa0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8012aa4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012aa8:	4242      	negs	r2, r0
 8012aaa:	4438      	add	r0, r7
 8012aac:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8012ab0:	b200      	sxth	r0, r0
 8012ab2:	435a      	muls	r2, r3
 8012ab4:	1b9e      	subs	r6, r3, r6
 8012ab6:	1ac0      	subs	r0, r0, r3
 8012ab8:	4343      	muls	r3, r0
 8012aba:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012abe:	fb92 f2f7 	sdiv	r2, r2, r7
 8012ac2:	fb93 f3f7 	sdiv	r3, r3, r7
 8012ac6:	4413      	add	r3, r2
 8012ac8:	0047      	lsls	r7, r0, #1
 8012aca:	1af3      	subs	r3, r6, r3
 8012acc:	429f      	cmp	r7, r3
 8012ace:	dd05      	ble.n	8012adc <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8012ad0:	1afb      	subs	r3, r7, r3
 8012ad2:	4353      	muls	r3, r2
 8012ad4:	fb93 f3f6 	sdiv	r3, r3, r6
 8012ad8:	1ad2      	subs	r2, r2, r3
 8012ada:	463b      	mov	r3, r7
 8012adc:	b289      	uxth	r1, r1
 8012ade:	8924      	ldrh	r4, [r4, #8]
 8012ae0:	80a8      	strh	r0, [r5, #4]
 8012ae2:	180e      	adds	r6, r1, r0
 8012ae4:	4411      	add	r1, r2
 8012ae6:	80eb      	strh	r3, [r5, #6]
 8012ae8:	1ba4      	subs	r4, r4, r6
 8012aea:	8069      	strh	r1, [r5, #2]
 8012aec:	802c      	strh	r4, [r5, #0]
 8012aee:	4628      	mov	r0, r5
 8012af0:	b003      	add	sp, #12
 8012af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af4:	461e      	mov	r6, r3
 8012af6:	e7cf      	b.n	8012a98 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08012af8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8012af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012afc:	4617      	mov	r7, r2
 8012afe:	2200      	movs	r2, #0
 8012b00:	4604      	mov	r4, r0
 8012b02:	460e      	mov	r6, r1
 8012b04:	8002      	strh	r2, [r0, #0]
 8012b06:	4698      	mov	r8, r3
 8012b08:	8042      	strh	r2, [r0, #2]
 8012b0a:	8082      	strh	r2, [r0, #4]
 8012b0c:	80c2      	strh	r2, [r0, #6]
 8012b0e:	4638      	mov	r0, r7
 8012b10:	f7ff fb05 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b14:	4605      	mov	r5, r0
 8012b16:	b998      	cbnz	r0, 8012b40 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8012b18:	4640      	mov	r0, r8
 8012b1a:	f7ff fb00 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b1e:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 8012b22:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 8012b26:	b908      	cbnz	r0, 8012b2c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8012b28:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8012b2c:	8933      	ldrh	r3, [r6, #8]
 8012b2e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8012b32:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012b36:	8022      	strh	r2, [r4, #0]
 8012b38:	8067      	strh	r7, [r4, #2]
 8012b3a:	1b58      	subs	r0, r3, r5
 8012b3c:	80e1      	strh	r1, [r4, #6]
 8012b3e:	80a0      	strh	r0, [r4, #4]
 8012b40:	4620      	mov	r0, r4
 8012b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b46 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8012b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	460f      	mov	r7, r1
 8012b50:	4616      	mov	r6, r2
 8012b52:	8020      	strh	r0, [r4, #0]
 8012b54:	4698      	mov	r8, r3
 8012b56:	8060      	strh	r0, [r4, #2]
 8012b58:	80a0      	strh	r0, [r4, #4]
 8012b5a:	80e0      	strh	r0, [r4, #6]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7ff fade 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b62:	4605      	mov	r5, r0
 8012b64:	b998      	cbnz	r0, 8012b8e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8012b66:	4630      	mov	r0, r6
 8012b68:	f7ff fad9 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b6c:	f897 602c 	ldrb.w	r6, [r7, #44]	@ 0x2c
 8012b70:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8012b74:	b908      	cbnz	r0, 8012b7a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8012b76:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8012b7a:	897a      	ldrh	r2, [r7, #10]
 8012b7c:	f8b8 3000 	ldrh.w	r3, [r8]
 8012b80:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8012b84:	8066      	strh	r6, [r4, #2]
 8012b86:	8023      	strh	r3, [r4, #0]
 8012b88:	1b50      	subs	r0, r2, r5
 8012b8a:	80a1      	strh	r1, [r4, #4]
 8012b8c:	80e0      	strh	r0, [r4, #6]
 8012b8e:	4620      	mov	r0, r4
 8012b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b94 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	b088      	sub	sp, #32
 8012b98:	4604      	mov	r4, r0
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	4668      	mov	r0, sp
 8012b9e:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 8012ba2:	f7ff ff03 	bl	80129ac <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	a802      	add	r0, sp, #8
 8012baa:	f7ff ff52 	bl	8012a52 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8012bae:	ab02      	add	r3, sp, #8
 8012bb0:	466a      	mov	r2, sp
 8012bb2:	4621      	mov	r1, r4
 8012bb4:	a804      	add	r0, sp, #16
 8012bb6:	f7ff ff9f 	bl	8012af8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8012bba:	ab02      	add	r3, sp, #8
 8012bbc:	466a      	mov	r2, sp
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	a806      	add	r0, sp, #24
 8012bc2:	f7ff ffc0 	bl	8012b46 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8012bc6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8012bca:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	da02      	bge.n	8012bd8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	f007 ff8f 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012bd8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8012bdc:	f104 0564 	add.w	r5, r4, #100	@ 0x64
 8012be0:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	@ 0x68
 8012be4:	429a      	cmp	r2, r3
 8012be6:	da02      	bge.n	8012bee <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8012be8:	4628      	mov	r0, r5
 8012bea:	f007 ff84 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012bee:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012bf2:	f8bd 0000 	ldrh.w	r0, [sp]
 8012bf6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8012bfa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8012bfe:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8012c00:	4630      	mov	r0, r6
 8012c02:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8012c04:	f7ff fe42 	bl	801288c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012c08:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012c0c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8012c10:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8012c14:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 8012c18:	4628      	mov	r0, r5
 8012c1a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8012c1e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8012c22:	f7ff fe33 	bl	801288c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012c26:	8922      	ldrh	r2, [r4, #8]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	a804      	add	r0, sp, #16
 8012c2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012c30:	8962      	ldrh	r2, [r4, #10]
 8012c32:	f8ad 3010 	strh.w	r3, [sp, #16]
 8012c36:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012c3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012c3e:	f7ff fa6e 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c42:	b920      	cbnz	r0, 8012c4e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	a904      	add	r1, sp, #16
 8012c48:	4620      	mov	r0, r4
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	4798      	blx	r3
 8012c4e:	a806      	add	r0, sp, #24
 8012c50:	f7ff fa65 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c54:	b920      	cbnz	r0, 8012c60 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8012c56:	6823      	ldr	r3, [r4, #0]
 8012c58:	a906      	add	r1, sp, #24
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	4798      	blx	r3
 8012c60:	b008      	add	sp, #32
 8012c62:	bd70      	pop	{r4, r5, r6, pc}

08012c64 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	790b      	ldrb	r3, [r1, #4]
 8012c68:	b08a      	sub	sp, #40	@ 0x28
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	460d      	mov	r5, r1
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d17f      	bne.n	8012d72 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10e>
 8012c72:	2201      	movs	r2, #1
 8012c74:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
 8012c78:	f890 20b0 	ldrb.w	r2, [r0, #176]	@ 0xb0
 8012c7c:	b14a      	cbz	r2, 8012c92 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2e>
 8012c7e:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8012c82:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
 8012c86:	f006 fe73 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	3004      	adds	r0, #4
 8012c8e:	f006 fe94 	bl	80199ba <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012c92:	4623      	mov	r3, r4
 8012c94:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012c98:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8012c9c:	f853 0bb4 	ldr.w	r0, [r3], #180
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	f104 03b2 	add.w	r3, r4, #178	@ 0xb2
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8012cac:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 8012cae:	4620      	mov	r0, r4
 8012cb0:	47b0      	blx	r6
 8012cb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8012cb6:	42a3      	cmp	r3, r4
 8012cb8:	bf04      	itt	eq
 8012cba:	2300      	moveq	r3, #0
 8012cbc:	f8c4 3090 	streq.w	r3, [r4, #144]	@ 0x90
 8012cc0:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8012cc4:	2900      	cmp	r1, #0
 8012cc6:	d03a      	beq.n	8012d3e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8012cc8:	2600      	movs	r6, #0
 8012cca:	a803      	add	r0, sp, #12
 8012ccc:	f884 60b6 	strb.w	r6, [r4, #182]	@ 0xb6
 8012cd0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012cd4:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 8012cd8:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8012cdc:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8012ce0:	f007 ffa4 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ce4:	4621      	mov	r1, r4
 8012ce6:	a805      	add	r0, sp, #20
 8012ce8:	f007 ffa0 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012cec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012cf0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012cf4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8012cf8:	1ad2      	subs	r2, r2, r3
 8012cfa:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8012cfe:	7929      	ldrb	r1, [r5, #4]
 8012d00:	441a      	add	r2, r3
 8012d02:	88eb      	ldrh	r3, [r5, #6]
 8012d04:	f88d 1020 	strb.w	r1, [sp, #32]
 8012d08:	a907      	add	r1, sp, #28
 8012d0a:	441a      	add	r2, r3
 8012d0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012d10:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8012d14:	1a1b      	subs	r3, r3, r0
 8012d16:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8012d1a:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8012d1e:	4403      	add	r3, r0
 8012d20:	8928      	ldrh	r0, [r5, #8]
 8012d22:	4403      	add	r3, r0
 8012d24:	482f      	ldr	r0, [pc, #188]	@ (8012de4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8012d26:	9007      	str	r0, [sp, #28]
 8012d28:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012d2c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8012d30:	6803      	ldr	r3, [r0, #0]
 8012d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d34:	4798      	blx	r3
 8012d36:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8012d3a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8012d3e:	2300      	movs	r3, #0
 8012d40:	f894 20a2 	ldrb.w	r2, [r4, #162]	@ 0xa2
 8012d44:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8012d48:	b112      	cbz	r2, 8012d50 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xec>
 8012d4a:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8012d4e:	b90b      	cbnz	r3, 8012d54 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xf0>
 8012d50:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012d54:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8012d58:	b112      	cbz	r2, 8012d60 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfc>
 8012d5a:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8012d5e:	b90b      	cbnz	r3, 8012d64 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x100>
 8012d60:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012d64:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f7ff ff13 	bl	8012b94 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012d6e:	b00a      	add	sp, #40	@ 0x28
 8012d70:	bd70      	pop	{r4, r5, r6, pc}
 8012d72:	2b02      	cmp	r3, #2
 8012d74:	d0fb      	beq.n	8012d6e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10a>
 8012d76:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 8012d7a:	b361      	cbz	r1, 8012dd6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 8012d7c:	a803      	add	r0, sp, #12
 8012d7e:	f007 ff55 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d82:	4621      	mov	r1, r4
 8012d84:	a805      	add	r0, sp, #20
 8012d86:	f007 ff51 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012d8e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012d92:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8012d96:	1ad2      	subs	r2, r2, r3
 8012d98:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8012d9c:	7929      	ldrb	r1, [r5, #4]
 8012d9e:	441a      	add	r2, r3
 8012da0:	88eb      	ldrh	r3, [r5, #6]
 8012da2:	f88d 1020 	strb.w	r1, [sp, #32]
 8012da6:	a907      	add	r1, sp, #28
 8012da8:	441a      	add	r2, r3
 8012daa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012dae:	1a1b      	subs	r3, r3, r0
 8012db0:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8012db4:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8012db8:	4403      	add	r3, r0
 8012dba:	8928      	ldrh	r0, [r5, #8]
 8012dbc:	4403      	add	r3, r0
 8012dbe:	4809      	ldr	r0, [pc, #36]	@ (8012de4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8012dc0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9007      	str	r0, [sp, #28]
 8012dc8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012dcc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8012dd0:	6803      	ldr	r3, [r0, #0]
 8012dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dd4:	4798      	blx	r3
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e9c4 3324 	strd	r3, r3, [r4, #144]	@ 0x90
 8012ddc:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8012de0:	e7ad      	b.n	8012d3e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8012de2:	bf00      	nop
 8012de4:	0802ccbc 	.word	0x0802ccbc

08012de8 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8012de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dea:	4606      	mov	r6, r0
 8012dec:	4615      	mov	r5, r2
 8012dee:	460c      	mov	r4, r1
 8012df0:	b919      	cbnz	r1, 8012dfa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8012df2:	b912      	cbnz	r2, 8012dfa <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8012df4:	2000      	movs	r0, #0
 8012df6:	b003      	add	sp, #12
 8012df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dfa:	6833      	ldr	r3, [r6, #0]
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	4668      	mov	r0, sp
 8012e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e04:	4798      	blx	r3
 8012e06:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8012e0a:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8012e0e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8012e12:	4288      	cmp	r0, r1
 8012e14:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8012e18:	da2c      	bge.n	8012e74 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	dd20      	ble.n	8012e60 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 8012e1e:	1913      	adds	r3, r2, r4
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd01      	ble.n	8012e28 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012e24:	4252      	negs	r2, r2
 8012e26:	b214      	sxth	r4, r2
 8012e28:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8012e2c:	4297      	cmp	r7, r2
 8012e2e:	dd2c      	ble.n	8012e8a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8012e30:	2d00      	cmp	r5, #0
 8012e32:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012e36:	dd1f      	ble.n	8012e78 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8012e38:	195a      	adds	r2, r3, r5
 8012e3a:	2a00      	cmp	r2, #0
 8012e3c:	dd04      	ble.n	8012e48 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012e3e:	425b      	negs	r3, r3
 8012e40:	b21d      	sxth	r5, r3
 8012e42:	b90c      	cbnz	r4, 8012e48 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012e44:	2d00      	cmp	r5, #0
 8012e46:	d0d5      	beq.n	8012df4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8012e48:	6833      	ldr	r3, [r6, #0]
 8012e4a:	462a      	mov	r2, r5
 8012e4c:	4621      	mov	r1, r4
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e54:	4798      	blx	r3
 8012e56:	4630      	mov	r0, r6
 8012e58:	f7ff fe9c 	bl	8012b94 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	e7ca      	b.n	8012df6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8012e60:	d0e2      	beq.n	8012e28 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012e62:	440a      	add	r2, r1
 8012e64:	b292      	uxth	r2, r2
 8012e66:	fa04 f382 	sxtah	r3, r4, r2
 8012e6a:	4283      	cmp	r3, r0
 8012e6c:	dadc      	bge.n	8012e28 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012e6e:	1a84      	subs	r4, r0, r2
 8012e70:	b224      	sxth	r4, r4
 8012e72:	e7d9      	b.n	8012e28 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012e74:	2400      	movs	r4, #0
 8012e76:	e7d7      	b.n	8012e28 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012e78:	d007      	beq.n	8012e8a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8012e7a:	443b      	add	r3, r7
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	fa05 f183 	sxtah	r1, r5, r3
 8012e82:	4291      	cmp	r1, r2
 8012e84:	dae0      	bge.n	8012e48 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	e7da      	b.n	8012e40 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 8012e8a:	2c00      	cmp	r4, #0
 8012e8c:	d0b2      	beq.n	8012df4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8012e8e:	2500      	movs	r5, #0
 8012e90:	e7da      	b.n	8012e48 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08012e92 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8012e92:	b513      	push	{r0, r1, r4, lr}
 8012e94:	6803      	ldr	r3, [r0, #0]
 8012e96:	4601      	mov	r1, r0
 8012e98:	4604      	mov	r4, r0
 8012e9a:	4668      	mov	r0, sp
 8012e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012ea0:	4798      	blx	r3
 8012ea2:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8012ea6:	f9bd 1000 	ldrsh.w	r1, [sp]
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	dd20      	ble.n	8012ef0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	2900      	cmp	r1, #0
 8012eb2:	dc0e      	bgt.n	8012ed2 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8012eb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012eb8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8012ebc:	440b      	add	r3, r1
 8012ebe:	b21b      	sxth	r3, r3
 8012ec0:	4298      	cmp	r0, r3
 8012ec2:	dd04      	ble.n	8012ece <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8012ec4:	1a1b      	subs	r3, r3, r0
 8012ec6:	4299      	cmp	r1, r3
 8012ec8:	bfb8      	it	lt
 8012eca:	4619      	movlt	r1, r3
 8012ecc:	b909      	cbnz	r1, 8012ed2 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8012ece:	b1f2      	cbz	r2, 8012f0e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	4252      	negs	r2, r2
 8012ed6:	4249      	negs	r1, r1
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ede:	b212      	sxth	r2, r2
 8012ee0:	b209      	sxth	r1, r1
 8012ee2:	4798      	blx	r3
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	b002      	add	sp, #8
 8012ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eec:	f7ff be52 	b.w	8012b94 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012ef0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012ef4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8012ef8:	4403      	add	r3, r0
 8012efa:	b21b      	sxth	r3, r3
 8012efc:	429a      	cmp	r2, r3
 8012efe:	dd04      	ble.n	8012f0a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8012f00:	1a9a      	subs	r2, r3, r2
 8012f02:	4282      	cmp	r2, r0
 8012f04:	bfb8      	it	lt
 8012f06:	4602      	movlt	r2, r0
 8012f08:	e7d2      	b.n	8012eb0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	e7d0      	b.n	8012eb0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8012f0e:	b002      	add	sp, #8
 8012f10:	bd10      	pop	{r4, pc}

08012f12 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8012f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f14:	4605      	mov	r5, r0
 8012f16:	f100 0638 	add.w	r6, r0, #56	@ 0x38
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	460f      	mov	r7, r1
 8012f1e:	f855 3b64 	ldr.w	r3, [r5], #100
 8012f22:	4631      	mov	r1, r6
 8012f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f26:	4798      	blx	r3
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f30:	4798      	blx	r3
 8012f32:	4639      	mov	r1, r7
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7fe ff2b 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012f3a:	4631      	mov	r1, r6
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f7fe ff27 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012f42:	4629      	mov	r1, r5
 8012f44:	4620      	mov	r0, r4
 8012f46:	f7fe ff23 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012f4a:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012f4e:	b123      	cbz	r3, 8012f5a <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE+0x48>
 8012f50:	4620      	mov	r0, r4
 8012f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f56:	f7ff be1d 	b.w	8012b94 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f5c <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8012f5c:	6301      	str	r1, [r0, #48]	@ 0x30
 8012f5e:	6601      	str	r1, [r0, #96]	@ 0x60
 8012f60:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8012f64:	4770      	bx	lr

08012f66 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8012f66:	f880 102e 	strb.w	r1, [r0, #46]	@ 0x2e
 8012f6a:	f880 105e 	strb.w	r1, [r0, #94]	@ 0x5e
 8012f6e:	f880 108a 	strb.w	r1, [r0, #138]	@ 0x8a
 8012f72:	4770      	bx	lr

08012f74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012f74:	6803      	ldr	r3, [r0, #0]
 8012f76:	b513      	push	{r0, r1, r4, lr}
 8012f78:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	e9cd 3300 	strd	r3, r3, [sp]
 8012f82:	466b      	mov	r3, sp
 8012f84:	47a0      	blx	r4
 8012f86:	b002      	add	sp, #8
 8012f88:	bd10      	pop	{r4, pc}

08012f8a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012f90:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012f94:	4770      	bx	lr

08012f96 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012f96:	2301      	movs	r3, #1
 8012f98:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012f9c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012fa0:	4770      	bx	lr

08012fa2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012fa2:	6843      	ldr	r3, [r0, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	725a      	strb	r2, [r3, #9]
 8012fa8:	6840      	ldr	r0, [r0, #4]
 8012faa:	6803      	ldr	r3, [r0, #0]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	4718      	bx	r3

08012fb0 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012fb0:	6840      	ldr	r0, [r0, #4]
 8012fb2:	6803      	ldr	r3, [r0, #0]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	4718      	bx	r3

08012fb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012fb8:	b530      	push	{r4, r5, lr}
 8012fba:	b08b      	sub	sp, #44	@ 0x2c
 8012fbc:	6804      	ldr	r4, [r0, #0]
 8012fbe:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012fc2:	9509      	str	r5, [sp, #36]	@ 0x24
 8012fc4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012fc8:	9508      	str	r5, [sp, #32]
 8012fca:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012fce:	9507      	str	r5, [sp, #28]
 8012fd0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012fd4:	9506      	str	r5, [sp, #24]
 8012fd6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012fda:	9505      	str	r5, [sp, #20]
 8012fdc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012fe0:	9504      	str	r5, [sp, #16]
 8012fe2:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012fe6:	9503      	str	r5, [sp, #12]
 8012fe8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012fec:	9502      	str	r5, [sp, #8]
 8012fee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012ff2:	e9cd 3500 	strd	r3, r5, [sp]
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	47a0      	blx	r4
 8012ffe:	b00b      	add	sp, #44	@ 0x2c
 8013000:	bd30      	pop	{r4, r5, pc}
	...

08013004 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013004:	4b04      	ldr	r3, [pc, #16]	@ (8013018 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	b123      	cbz	r3, 8013014 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801300a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801300e:	f080 0001 	eor.w	r0, r0, #1
 8013012:	4770      	bx	lr
 8013014:	2001      	movs	r0, #1
 8013016:	4770      	bx	lr
 8013018:	2402851e 	.word	0x2402851e

0801301c <_ZN8touchgfx3HAL8endFrameEv>:
 801301c:	b510      	push	{r4, lr}
 801301e:	4604      	mov	r4, r0
 8013020:	6840      	ldr	r0, [r0, #4]
 8013022:	6803      	ldr	r3, [r0, #0]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	4798      	blx	r3
 8013028:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 801302c:	b113      	cbz	r3, 8013034 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801302e:	2301      	movs	r3, #1
 8013030:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013034:	bd10      	pop	{r4, pc}

08013036 <_ZN8touchgfx3HAL10initializeEv>:
 8013036:	b510      	push	{r4, lr}
 8013038:	4604      	mov	r4, r0
 801303a:	f7ef fcad 	bl	8002998 <_ZN8touchgfx10OSWrappers10initializeEv>
 801303e:	f7ee fd03 	bl	8001a48 <_ZN8touchgfx4GPIO4initEv>
 8013042:	6860      	ldr	r0, [r4, #4]
 8013044:	6803      	ldr	r3, [r0, #0]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	4798      	blx	r3
 801304a:	68e0      	ldr	r0, [r4, #12]
 801304c:	6803      	ldr	r3, [r0, #0]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	4798      	blx	r3
 8013052:	6823      	ldr	r3, [r4, #0]
 8013054:	4620      	mov	r0, r4
 8013056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801305c:	4718      	bx	r3
	...

08013060 <_ZN8touchgfx3HAL4tickEv>:
 8013060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013062:	6803      	ldr	r3, [r0, #0]
 8013064:	4604      	mov	r4, r0
 8013066:	4d5b      	ldr	r5, [pc, #364]	@ (80131d4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801306c:	4798      	blx	r3
 801306e:	2800      	cmp	r0, #0
 8013070:	f000 8095 	beq.w	801319e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013074:	2001      	movs	r0, #1
 8013076:	2600      	movs	r6, #0
 8013078:	f7ee fc4c 	bl	8001914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801307c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8013080:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8013084:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013088:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 801308c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8013090:	b133      	cbz	r3, 80130a0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	4620      	mov	r0, r4
 8013096:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801309a:	4798      	blx	r3
 801309c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80130a0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80130a4:	2601      	movs	r6, #1
 80130a6:	6862      	ldr	r2, [r4, #4]
 80130a8:	f083 0301 	eor.w	r3, r3, #1
 80130ac:	702e      	strb	r6, [r5, #0]
 80130ae:	7253      	strb	r3, [r2, #9]
 80130b0:	f006 fc5e 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 80130b4:	6803      	ldr	r3, [r0, #0]
 80130b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130b8:	4798      	blx	r3
 80130ba:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80130be:	b90b      	cbnz	r3, 80130c4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80130c0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80130c4:	f006 fc54 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 80130c8:	6803      	ldr	r3, [r0, #0]
 80130ca:	695b      	ldr	r3, [r3, #20]
 80130cc:	4798      	blx	r3
 80130ce:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80130d0:	6803      	ldr	r3, [r0, #0]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	4798      	blx	r3
 80130d6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80130da:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80130de:	3b01      	subs	r3, #1
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80130e6:	b10a      	cbz	r2, 80130ec <_ZN8touchgfx3HAL4tickEv+0x8c>
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1eb      	bne.n	80130c4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80130ec:	4a3a      	ldr	r2, [pc, #232]	@ (80131d8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80130ee:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80130f2:	7813      	ldrb	r3, [r2, #0]
 80130f4:	3301      	adds	r3, #1
 80130f6:	b25b      	sxtb	r3, r3
 80130f8:	4299      	cmp	r1, r3
 80130fa:	7013      	strb	r3, [r2, #0]
 80130fc:	dc10      	bgt.n	8013120 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80130fe:	2300      	movs	r3, #0
 8013100:	68e0      	ldr	r0, [r4, #12]
 8013102:	a902      	add	r1, sp, #8
 8013104:	7013      	strb	r3, [r2, #0]
 8013106:	aa03      	add	r2, sp, #12
 8013108:	6803      	ldr	r3, [r0, #0]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	4798      	blx	r3
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	2800      	cmp	r0, #0
 8013112:	d050      	beq.n	80131b6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013114:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013118:	4620      	mov	r0, r4
 801311a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801311e:	4798      	blx	r3
 8013120:	2300      	movs	r3, #0
 8013122:	6960      	ldr	r0, [r4, #20]
 8013124:	f88d 3007 	strb.w	r3, [sp, #7]
 8013128:	b158      	cbz	r0, 8013142 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801312a:	6803      	ldr	r3, [r0, #0]
 801312c:	f10d 0107 	add.w	r1, sp, #7
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	4798      	blx	r3
 8013134:	b128      	cbz	r0, 8013142 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013136:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013138:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801313c:	6803      	ldr	r3, [r0, #0]
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	4798      	blx	r3
 8013142:	f104 001c 	add.w	r0, r4, #28
 8013146:	f014 f9bb 	bl	80274c0 <_ZN8touchgfx8Gestures4tickEv>
 801314a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801314e:	b30b      	cbz	r3, 8013194 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013150:	6920      	ldr	r0, [r4, #16]
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	691b      	ldr	r3, [r3, #16]
 8013156:	4798      	blx	r3
 8013158:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801315a:	4606      	mov	r6, r0
 801315c:	b903      	cbnz	r3, 8013160 <_ZN8touchgfx3HAL4tickEv+0x100>
 801315e:	6760      	str	r0, [r4, #116]	@ 0x74
 8013160:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013162:	4a1e      	ldr	r2, [pc, #120]	@ (80131dc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013164:	1af3      	subs	r3, r6, r3
 8013166:	4293      	cmp	r3, r2
 8013168:	d914      	bls.n	8013194 <_ZN8touchgfx3HAL4tickEv+0x134>
 801316a:	6920      	ldr	r0, [r4, #16]
 801316c:	6803      	ldr	r3, [r0, #0]
 801316e:	699b      	ldr	r3, [r3, #24]
 8013170:	4798      	blx	r3
 8013172:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013174:	2264      	movs	r2, #100	@ 0x64
 8013176:	1af3      	subs	r3, r6, r3
 8013178:	fbb3 f3f2 	udiv	r3, r3, r2
 801317c:	fbb0 f0f3 	udiv	r0, r0, r3
 8013180:	2800      	cmp	r0, #0
 8013182:	dc1d      	bgt.n	80131c0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8013184:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8013188:	6920      	ldr	r0, [r4, #16]
 801318a:	2100      	movs	r1, #0
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	69db      	ldr	r3, [r3, #28]
 8013190:	4798      	blx	r3
 8013192:	6766      	str	r6, [r4, #116]	@ 0x74
 8013194:	f006 fbec 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 8013198:	6803      	ldr	r3, [r0, #0]
 801319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801319c:	4798      	blx	r3
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	4620      	mov	r0, r4
 80131a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80131a6:	4798      	blx	r3
 80131a8:	2001      	movs	r0, #1
 80131aa:	f7ee fbe3 	bl	8001974 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80131ae:	2300      	movs	r3, #0
 80131b0:	702b      	strb	r3, [r5, #0]
 80131b2:	b004      	add	sp, #16
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
 80131b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80131ba:	4620      	mov	r0, r4
 80131bc:	4798      	blx	r3
 80131be:	e7af      	b.n	8013120 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80131c0:	2863      	cmp	r0, #99	@ 0x63
 80131c2:	bfcb      	itete	gt
 80131c4:	2300      	movgt	r3, #0
 80131c6:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80131ca:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80131ce:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80131d2:	e7d9      	b.n	8013188 <_ZN8touchgfx3HAL4tickEv+0x128>
 80131d4:	24028524 	.word	0x24028524
 80131d8:	24028525 	.word	0x24028525
 80131dc:	05f5e100 	.word	0x05f5e100

080131e0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80131e0:	b510      	push	{r4, lr}
 80131e2:	4604      	mov	r4, r0
 80131e4:	f7ef fc08 	bl	80029f8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80131e8:	2200      	movs	r2, #0
 80131ea:	6863      	ldr	r3, [r4, #4]
 80131ec:	729a      	strb	r2, [r3, #10]
 80131ee:	bd10      	pop	{r4, pc}

080131f0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80131f0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80131f2:	301c      	adds	r0, #28
 80131f4:	f014 b962 	b.w	80274bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080131f8 <_ZN8touchgfx3HAL5touchEll>:
 80131f8:	b530      	push	{r4, r5, lr}
 80131fa:	b087      	sub	sp, #28
 80131fc:	4604      	mov	r4, r0
 80131fe:	a804      	add	r0, sp, #16
 8013200:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013204:	f006 f9c6 	bl	8019594 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013208:	9b04      	ldr	r3, [sp, #16]
 801320a:	a906      	add	r1, sp, #24
 801320c:	a803      	add	r0, sp, #12
 801320e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013212:	9b05      	ldr	r3, [sp, #20]
 8013214:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013218:	f006 fa0e 	bl	8019638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801321c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8013220:	f104 001c 	add.w	r0, r4, #28
 8013224:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013228:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801322c:	b189      	cbz	r1, 8013252 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801322e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	4613      	mov	r3, r2
 8013236:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801323a:	462a      	mov	r2, r5
 801323c:	f014 f94e 	bl	80274dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013240:	b128      	cbz	r0, 801324e <_ZN8touchgfx3HAL5touchEll+0x56>
 8013242:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013246:	6623      	str	r3, [r4, #96]	@ 0x60
 8013248:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801324c:	6663      	str	r3, [r4, #100]	@ 0x64
 801324e:	b007      	add	sp, #28
 8013250:	bd30      	pop	{r4, r5, pc}
 8013252:	f014 f983 	bl	802755c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013256:	2301      	movs	r3, #1
 8013258:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801325c:	e7f1      	b.n	8013242 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801325e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801325e:	b510      	push	{r4, lr}
 8013260:	2b00      	cmp	r3, #0
 8013262:	d046      	beq.n	80132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013264:	ea81 0002 	eor.w	r0, r1, r2
 8013268:	07c4      	lsls	r4, r0, #31
 801326a:	d508      	bpl.n	801327e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801326c:	440b      	add	r3, r1
 801326e:	3a01      	subs	r2, #1
 8013270:	428b      	cmp	r3, r1
 8013272:	d93e      	bls.n	80132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013274:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013278:	f801 0b01 	strb.w	r0, [r1], #1
 801327c:	e7f8      	b.n	8013270 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801327e:	07d0      	lsls	r0, r2, #31
 8013280:	bf42      	ittt	mi
 8013282:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013286:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801328a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801328e:	2b01      	cmp	r3, #1
 8013290:	d911      	bls.n	80132b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013292:	ea81 0402 	eor.w	r4, r1, r2
 8013296:	4610      	mov	r0, r2
 8013298:	07a4      	lsls	r4, r4, #30
 801329a:	d022      	beq.n	80132e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801329c:	f023 0401 	bic.w	r4, r3, #1
 80132a0:	440c      	add	r4, r1
 80132a2:	428c      	cmp	r4, r1
 80132a4:	4602      	mov	r2, r0
 80132a6:	d904      	bls.n	80132b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80132a8:	8812      	ldrh	r2, [r2, #0]
 80132aa:	3002      	adds	r0, #2
 80132ac:	f821 2b02 	strh.w	r2, [r1], #2
 80132b0:	e7f7      	b.n	80132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	f023 0003 	bic.w	r0, r3, #3
 80132ba:	4408      	add	r0, r1
 80132bc:	4288      	cmp	r0, r1
 80132be:	4614      	mov	r4, r2
 80132c0:	d904      	bls.n	80132cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80132c2:	6824      	ldr	r4, [r4, #0]
 80132c4:	3204      	adds	r2, #4
 80132c6:	f841 4b04 	str.w	r4, [r1], #4
 80132ca:	e7f7      	b.n	80132bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80132cc:	f003 0303 	and.w	r3, r3, #3
 80132d0:	3a01      	subs	r2, #1
 80132d2:	440b      	add	r3, r1
 80132d4:	428b      	cmp	r3, r1
 80132d6:	d90c      	bls.n	80132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80132d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80132dc:	f801 0b01 	strb.w	r0, [r1], #1
 80132e0:	e7f8      	b.n	80132d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80132e2:	0790      	lsls	r0, r2, #30
 80132e4:	d0e7      	beq.n	80132b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80132e6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80132ea:	3b02      	subs	r3, #2
 80132ec:	f821 0b02 	strh.w	r0, [r1], #2
 80132f0:	e7e1      	b.n	80132b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80132f2:	2001      	movs	r0, #1
 80132f4:	bd10      	pop	{r4, pc}

080132f6 <_ZN8touchgfx3HAL7noTouchEv>:
 80132f6:	b510      	push	{r4, lr}
 80132f8:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80132fc:	4604      	mov	r4, r0
 80132fe:	b153      	cbz	r3, 8013316 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013300:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8013304:	2101      	movs	r1, #1
 8013306:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801330a:	301c      	adds	r0, #28
 801330c:	f014 f926 	bl	802755c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013310:	2300      	movs	r3, #0
 8013312:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013316:	bd10      	pop	{r4, pc}

08013318 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801331c:	b085      	sub	sp, #20
 801331e:	4604      	mov	r4, r0
 8013320:	2000      	movs	r0, #0
 8013322:	4699      	mov	r9, r3
 8013324:	ad04      	add	r5, sp, #16
 8013326:	460f      	mov	r7, r1
 8013328:	4690      	mov	r8, r2
 801332a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801332e:	69a0      	ldr	r0, [r4, #24]
 8013330:	6806      	ldr	r6, [r0, #0]
 8013332:	9501      	str	r5, [sp, #4]
 8013334:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8013338:	9500      	str	r5, [sp, #0]
 801333a:	6835      	ldr	r5, [r6, #0]
 801333c:	47a8      	blx	r5
 801333e:	4d10      	ldr	r5, [pc, #64]	@ (8013380 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013340:	4606      	mov	r6, r0
 8013342:	f8a5 9000 	strh.w	r9, [r5]
 8013346:	f7f4 fa37 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 801334a:	6803      	ldr	r3, [r0, #0]
 801334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801334e:	4798      	blx	r3
 8013350:	b128      	cbz	r0, 801335e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013352:	2801      	cmp	r0, #1
 8013354:	d00b      	beq.n	801336e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013356:	4630      	mov	r0, r6
 8013358:	b005      	add	sp, #20
 801335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801335e:	882b      	ldrh	r3, [r5, #0]
 8013360:	fb08 7203 	mla	r2, r8, r3, r7
 8013364:	9b03      	ldr	r3, [sp, #12]
 8013366:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801336a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801336c:	e7f3      	b.n	8013356 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801336e:	882a      	ldrh	r2, [r5, #0]
 8013370:	9b03      	ldr	r3, [sp, #12]
 8013372:	fb08 7202 	mla	r2, r8, r2, r7
 8013376:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801337a:	1a9a      	subs	r2, r3, r2
 801337c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801337e:	e7ea      	b.n	8013356 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013380:	2402851a 	.word	0x2402851a

08013384 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013386:	b08b      	sub	sp, #44	@ 0x2c
 8013388:	4617      	mov	r7, r2
 801338a:	4604      	mov	r4, r0
 801338c:	460e      	mov	r6, r1
 801338e:	461d      	mov	r5, r3
 8013390:	f7f4 fa12 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8013394:	6803      	ldr	r3, [r0, #0]
 8013396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013398:	4798      	blx	r3
 801339a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801339e:	9007      	str	r0, [sp, #28]
 80133a0:	4631      	mov	r1, r6
 80133a2:	6822      	ldr	r2, [r4, #0]
 80133a4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80133a8:	4b0c      	ldr	r3, [pc, #48]	@ (80133dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80133aa:	4620      	mov	r0, r4
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	9306      	str	r3, [sp, #24]
 80133b0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80133b4:	9305      	str	r3, [sp, #20]
 80133b6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80133ba:	9304      	str	r3, [sp, #16]
 80133bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80133c0:	9303      	str	r3, [sp, #12]
 80133c2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80133c6:	9302      	str	r3, [sp, #8]
 80133c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80133cc:	e9cd 5300 	strd	r5, r3, [sp]
 80133d0:	463b      	mov	r3, r7
 80133d2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80133d4:	2200      	movs	r2, #0
 80133d6:	47a8      	blx	r5
 80133d8:	b00b      	add	sp, #44	@ 0x2c
 80133da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133dc:	2402851a 	.word	0x2402851a

080133e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80133e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133e4:	4698      	mov	r8, r3
 80133e6:	6803      	ldr	r3, [r0, #0]
 80133e8:	b08b      	sub	sp, #44	@ 0x2c
 80133ea:	4617      	mov	r7, r2
 80133ec:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80133ee:	460e      	mov	r6, r1
 80133f0:	4b13      	ldr	r3, [pc, #76]	@ (8013440 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80133f2:	4604      	mov	r4, r0
 80133f4:	f8b3 9000 	ldrh.w	r9, [r3]
 80133f8:	f7f4 f9de 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 80133fc:	6803      	ldr	r3, [r0, #0]
 80133fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013400:	4798      	blx	r3
 8013402:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8013406:	2200      	movs	r2, #0
 8013408:	4631      	mov	r1, r6
 801340a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801340e:	2302      	movs	r3, #2
 8013410:	4620      	mov	r0, r4
 8013412:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013416:	2301      	movs	r3, #1
 8013418:	9305      	str	r3, [sp, #20]
 801341a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8013424:	9303      	str	r3, [sp, #12]
 8013426:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801342a:	9302      	str	r3, [sp, #8]
 801342c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013430:	e9cd 8300 	strd	r8, r3, [sp]
 8013434:	463b      	mov	r3, r7
 8013436:	47a8      	blx	r5
 8013438:	b00b      	add	sp, #44	@ 0x2c
 801343a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801343e:	bf00      	nop
 8013440:	2402851a 	.word	0x2402851a

08013444 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013448:	4698      	mov	r8, r3
 801344a:	6803      	ldr	r3, [r0, #0]
 801344c:	b087      	sub	sp, #28
 801344e:	460e      	mov	r6, r1
 8013450:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8013452:	4617      	mov	r7, r2
 8013454:	4b0f      	ldr	r3, [pc, #60]	@ (8013494 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013456:	4604      	mov	r4, r0
 8013458:	f8b3 9000 	ldrh.w	r9, [r3]
 801345c:	f7f4 f9ac 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8013460:	6803      	ldr	r3, [r0, #0]
 8013462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013464:	4798      	blx	r3
 8013466:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801346a:	463a      	mov	r2, r7
 801346c:	4631      	mov	r1, r6
 801346e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013472:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013476:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801347a:	4620      	mov	r0, r4
 801347c:	9302      	str	r3, [sp, #8]
 801347e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	4643      	mov	r3, r8
 801348c:	47a8      	blx	r5
 801348e:	b007      	add	sp, #28
 8013490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013494:	2402851a 	.word	0x2402851a

08013498 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	4604      	mov	r4, r0
 801349e:	b08f      	sub	sp, #60	@ 0x3c
 80134a0:	4610      	mov	r0, r2
 80134a2:	460d      	mov	r5, r1
 80134a4:	4691      	mov	r9, r2
 80134a6:	461e      	mov	r6, r3
 80134a8:	f009 febc 	bl	801d224 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	f000 809d 	beq.w	80135ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	4620      	mov	r0, r4
 80134b6:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8013650 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80134ba:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80134be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134c0:	4798      	blx	r3
 80134c2:	6823      	ldr	r3, [r4, #0]
 80134c4:	4620      	mov	r0, r4
 80134c6:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8013654 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80134ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134cc:	4798      	blx	r3
 80134ce:	f8bb 3000 	ldrh.w	r3, [fp]
 80134d2:	4f5c      	ldr	r7, [pc, #368]	@ (8013644 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80134d4:	9301      	str	r3, [sp, #4]
 80134d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80134da:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80134de:	4640      	mov	r0, r8
 80134e0:	9302      	str	r3, [sp, #8]
 80134e2:	883b      	ldrh	r3, [r7, #0]
 80134e4:	9303      	str	r3, [sp, #12]
 80134e6:	4b58      	ldr	r3, [pc, #352]	@ (8013648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80134e8:	881a      	ldrh	r2, [r3, #0]
 80134ea:	9305      	str	r3, [sp, #20]
 80134ec:	9204      	str	r2, [sp, #16]
 80134ee:	f009 ffe9 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134f2:	8038      	strh	r0, [r7, #0]
 80134f4:	4640      	mov	r0, r8
 80134f6:	f00a f819 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80134fa:	9b05      	ldr	r3, [sp, #20]
 80134fc:	b280      	uxth	r0, r0
 80134fe:	8018      	strh	r0, [r3, #0]
 8013500:	4b52      	ldr	r3, [pc, #328]	@ (801364c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d174      	bne.n	80135f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013508:	883b      	ldrh	r3, [r7, #0]
 801350a:	f8aa 0000 	strh.w	r0, [sl]
 801350e:	f8ab 3000 	strh.w	r3, [fp]
 8013512:	4648      	mov	r0, r9
 8013514:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8013518:	f009 fe84 	bl	801d224 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801351c:	2200      	movs	r2, #0
 801351e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8013522:	4611      	mov	r1, r2
 8013524:	4628      	mov	r0, r5
 8013526:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801352a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801352e:	f7f0 fc01 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 8013532:	2301      	movs	r3, #1
 8013534:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8013538:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801353c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	dd5c      	ble.n	80135fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013544:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013548:	2b00      	cmp	r3, #0
 801354a:	dd58      	ble.n	80135fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801354c:	462a      	mov	r2, r5
 801354e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013550:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013554:	6851      	ldr	r1, [r2, #4]
 8013556:	c303      	stmia	r3!, {r0, r1}
 8013558:	4631      	mov	r1, r6
 801355a:	a80a      	add	r0, sp, #40	@ 0x28
 801355c:	f7fe fd9c 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8013560:	4b38      	ldr	r3, [pc, #224]	@ (8013644 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013562:	2100      	movs	r1, #0
 8013564:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013568:	4b37      	ldr	r3, [pc, #220]	@ (8013648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801356a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801356e:	aa0a      	add	r2, sp, #40	@ 0x28
 8013570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013574:	910c      	str	r1, [sp, #48]	@ 0x30
 8013576:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801357a:	ab08      	add	r3, sp, #32
 801357c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013580:	e883 0003 	stmia.w	r3, {r0, r1}
 8013584:	4618      	mov	r0, r3
 8013586:	a90c      	add	r1, sp, #48	@ 0x30
 8013588:	f7fe fd86 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801358c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801358e:	2b00      	cmp	r3, #0
 8013590:	d13c      	bne.n	801360c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013592:	2000      	movs	r0, #0
 8013594:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8013598:	2600      	movs	r6, #0
 801359a:	696b      	ldr	r3, [r5, #20]
 801359c:	a908      	add	r1, sp, #32
 801359e:	682a      	ldr	r2, [r5, #0]
 80135a0:	4628      	mov	r0, r5
 80135a2:	9305      	str	r3, [sp, #20]
 80135a4:	616e      	str	r6, [r5, #20]
 80135a6:	6892      	ldr	r2, [r2, #8]
 80135a8:	4790      	blx	r2
 80135aa:	9b05      	ldr	r3, [sp, #20]
 80135ac:	4652      	mov	r2, sl
 80135ae:	4649      	mov	r1, r9
 80135b0:	616b      	str	r3, [r5, #20]
 80135b2:	4628      	mov	r0, r5
 80135b4:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80135b8:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80135bc:	f7f0 fbba 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 80135c0:	9a01      	ldr	r2, [sp, #4]
 80135c2:	4b23      	ldr	r3, [pc, #140]	@ (8013650 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80135c4:	4620      	mov	r0, r4
 80135c6:	801a      	strh	r2, [r3, #0]
 80135c8:	9a02      	ldr	r2, [sp, #8]
 80135ca:	4b22      	ldr	r3, [pc, #136]	@ (8013654 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80135cc:	801a      	strh	r2, [r3, #0]
 80135ce:	9a03      	ldr	r2, [sp, #12]
 80135d0:	4b1c      	ldr	r3, [pc, #112]	@ (8013644 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80135d2:	801a      	strh	r2, [r3, #0]
 80135d4:	4b1c      	ldr	r3, [pc, #112]	@ (8013648 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80135d6:	9a04      	ldr	r2, [sp, #16]
 80135d8:	801a      	strh	r2, [r3, #0]
 80135da:	6823      	ldr	r3, [r4, #0]
 80135dc:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80135e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135e2:	4798      	blx	r3
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	4620      	mov	r0, r4
 80135e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ea:	4798      	blx	r3
 80135ec:	b00f      	add	sp, #60	@ 0x3c
 80135ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f2:	883b      	ldrh	r3, [r7, #0]
 80135f4:	f8ab 0000 	strh.w	r0, [fp]
 80135f8:	f8aa 3000 	strh.w	r3, [sl]
 80135fc:	e789      	b.n	8013512 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80135fe:	462a      	mov	r2, r5
 8013600:	ab0a      	add	r3, sp, #40	@ 0x28
 8013602:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013606:	6851      	ldr	r1, [r2, #4]
 8013608:	c303      	stmia	r3!, {r0, r1}
 801360a:	e7a9      	b.n	8013560 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801360c:	a807      	add	r0, sp, #28
 801360e:	f00a f8cf 	bl	801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013612:	4606      	mov	r6, r0
 8013614:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8013616:	6803      	ldr	r3, [r0, #0]
 8013618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801361a:	4798      	blx	r3
 801361c:	4286      	cmp	r6, r0
 801361e:	d1b8      	bne.n	8013592 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013620:	f7f4 f8ca 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8013624:	6803      	ldr	r3, [r0, #0]
 8013626:	4606      	mov	r6, r0
 8013628:	a807      	add	r0, sp, #28
 801362a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801362c:	9305      	str	r3, [sp, #20]
 801362e:	f00a f8bf 	bl	801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013632:	9b05      	ldr	r3, [sp, #20]
 8013634:	4601      	mov	r1, r0
 8013636:	4630      	mov	r0, r6
 8013638:	4798      	blx	r3
 801363a:	f080 0001 	eor.w	r0, r0, #1
 801363e:	b2c0      	uxtb	r0, r0
 8013640:	e7a8      	b.n	8013594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013642:	bf00      	nop
 8013644:	24028514 	.word	0x24028514
 8013648:	24028516 	.word	0x24028516
 801364c:	24028518 	.word	0x24028518
 8013650:	2402851a 	.word	0x2402851a
 8013654:	2402851c 	.word	0x2402851c

08013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013658:	4b07      	ldr	r3, [pc, #28]	@ (8013678 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801365a:	b510      	push	{r4, lr}
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	4604      	mov	r4, r0
 8013660:	b13b      	cbz	r3, 8013672 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013662:	6803      	ldr	r3, [r0, #0]
 8013664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013666:	4798      	blx	r3
 8013668:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801366a:	4283      	cmp	r3, r0
 801366c:	d101      	bne.n	8013672 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801366e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013670:	bd10      	pop	{r4, pc}
 8013672:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013674:	e7fc      	b.n	8013670 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8013676:	bf00      	nop
 8013678:	2402851e 	.word	0x2402851e

0801367c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013680:	461d      	mov	r5, r3
 8013682:	b08a      	sub	sp, #40	@ 0x28
 8013684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013688:	4690      	mov	r8, r2
 801368a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801368e:	2400      	movs	r4, #0
 8013690:	4607      	mov	r7, r0
 8013692:	fb06 8505 	mla	r5, r6, r5, r8
 8013696:	9404      	str	r4, [sp, #16]
 8013698:	f88d 4020 	strb.w	r4, [sp, #32]
 801369c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80136a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80136a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80136a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80136ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 80136b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80136b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80136b8:	f7ff ffce 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80136c6:	a901      	add	r1, sp, #4
 80136c8:	9505      	str	r5, [sp, #20]
 80136ca:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80136ce:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80136d2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80136d6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80136da:	6803      	ldr	r3, [r0, #0]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	4798      	blx	r3
 80136e0:	b00a      	add	sp, #40	@ 0x28
 80136e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136e6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80136e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136ea:	b08b      	sub	sp, #44	@ 0x2c
 80136ec:	2400      	movs	r4, #0
 80136ee:	4691      	mov	r9, r2
 80136f0:	461d      	mov	r5, r3
 80136f2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80136f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80136fa:	4688      	mov	r8, r1
 80136fc:	4607      	mov	r7, r0
 80136fe:	9404      	str	r4, [sp, #16]
 8013700:	fb06 9505 	mla	r5, r6, r5, r9
 8013704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013708:	f7ff ffa6 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801370c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013710:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f8ad 3018 	strh.w	r3, [sp, #24]
 801371a:	a901      	add	r1, sp, #4
 801371c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013720:	9505      	str	r5, [sp, #20]
 8013722:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013726:	f8ad 401c 	strh.w	r4, [sp, #28]
 801372a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801372e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013732:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013736:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801373a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801373e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013742:	6803      	ldr	r3, [r0, #0]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	4798      	blx	r3
 8013748:	b00b      	add	sp, #44	@ 0x2c
 801374a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013750 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013754:	b08a      	sub	sp, #40	@ 0x28
 8013756:	4698      	mov	r8, r3
 8013758:	2300      	movs	r3, #0
 801375a:	4606      	mov	r6, r0
 801375c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8013760:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8013764:	2d0b      	cmp	r5, #11
 8013766:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801376a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801376e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8013772:	9304      	str	r3, [sp, #16]
 8013774:	d137      	bne.n	80137e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8013776:	2380      	movs	r3, #128	@ 0x80
 8013778:	f88d 0020 	strb.w	r0, [sp, #32]
 801377c:	4630      	mov	r0, r6
 801377e:	9203      	str	r2, [sp, #12]
 8013780:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013784:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013788:	f8ad 3018 	strh.w	r3, [sp, #24]
 801378c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013790:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013794:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013798:	f8ad 301c 	strh.w	r3, [sp, #28]
 801379c:	f7ff ff5c 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137a0:	2c0b      	cmp	r4, #11
 80137a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80137a6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80137aa:	bf94      	ite	ls
 80137ac:	4b19      	ldrls	r3, [pc, #100]	@ (8013814 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80137ae:	2100      	movhi	r1, #0
 80137b0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80137b4:	bf98      	it	ls
 80137b6:	5d19      	ldrbls	r1, [r3, r4]
 80137b8:	fb02 8307 	mla	r3, r2, r7, r8
 80137bc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80137c0:	10c9      	asrs	r1, r1, #3
 80137c2:	fb01 0003 	mla	r0, r1, r3, r0
 80137c6:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80137ca:	a901      	add	r1, sp, #4
 80137cc:	9005      	str	r0, [sp, #20]
 80137ce:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80137d2:	2300      	movs	r3, #0
 80137d4:	6870      	ldr	r0, [r6, #4]
 80137d6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80137da:	6803      	ldr	r3, [r0, #0]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	4798      	blx	r3
 80137e0:	b00a      	add	sp, #40	@ 0x28
 80137e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e6:	2d02      	cmp	r5, #2
 80137e8:	d109      	bne.n	80137fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80137ea:	28ff      	cmp	r0, #255	@ 0xff
 80137ec:	d105      	bne.n	80137fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80137ee:	f1bc 0f00 	cmp.w	ip, #0
 80137f2:	bf14      	ite	ne
 80137f4:	2340      	movne	r3, #64	@ 0x40
 80137f6:	2320      	moveq	r3, #32
 80137f8:	e7be      	b.n	8013778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137fa:	2340      	movs	r3, #64	@ 0x40
 80137fc:	e7bc      	b.n	8013778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137fe:	28ff      	cmp	r0, #255	@ 0xff
 8013800:	d105      	bne.n	801380e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8013802:	f1bc 0f00 	cmp.w	ip, #0
 8013806:	bf14      	ite	ne
 8013808:	2304      	movne	r3, #4
 801380a:	2301      	moveq	r3, #1
 801380c:	e7b4      	b.n	8013778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801380e:	2304      	movs	r3, #4
 8013810:	e7b2      	b.n	8013778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013812:	bf00      	nop
 8013814:	0802cd78 	.word	0x0802cd78

08013818 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801381c:	b08b      	sub	sp, #44	@ 0x2c
 801381e:	461d      	mov	r5, r3
 8013820:	2400      	movs	r4, #0
 8013822:	4688      	mov	r8, r1
 8013824:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8013828:	4693      	mov	fp, r2
 801382a:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801382e:	4607      	mov	r7, r0
 8013830:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8013834:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8013838:	9404      	str	r4, [sp, #16]
 801383a:	bf14      	ite	ne
 801383c:	2308      	movne	r3, #8
 801383e:	2302      	moveq	r3, #2
 8013840:	fb05 b50a 	mla	r5, r5, sl, fp
 8013844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013848:	f7ff ff06 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801384c:	2e0b      	cmp	r6, #11
 801384e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8013852:	a901      	add	r1, sp, #4
 8013854:	bf98      	it	ls
 8013856:	4b13      	ldrls	r3, [pc, #76]	@ (80138a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013858:	f8ad a01e 	strh.w	sl, [sp, #30]
 801385c:	bf98      	it	ls
 801385e:	5d9c      	ldrbls	r4, [r3, r6]
 8013860:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8013864:	10e4      	asrs	r4, r4, #3
 8013866:	f8cd 8010 	str.w	r8, [sp, #16]
 801386a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801386e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013872:	fb04 0405 	mla	r4, r4, r5, r0
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f8ad 301a 	strh.w	r3, [sp, #26]
 801387c:	2300      	movs	r3, #0
 801387e:	9405      	str	r4, [sp, #20]
 8013880:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013884:	f88d 9020 	strb.w	r9, [sp, #32]
 8013888:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801388c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013890:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8013894:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8013898:	6803      	ldr	r3, [r0, #0]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	4798      	blx	r3
 801389e:	b00b      	add	sp, #44	@ 0x2c
 80138a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a4:	0802cd78 	.word	0x0802cd78

080138a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80138a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ac:	461e      	mov	r6, r3
 80138ae:	4b0a      	ldr	r3, [pc, #40]	@ (80138d8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80138b0:	460f      	mov	r7, r1
 80138b2:	4690      	mov	r8, r2
 80138b4:	881d      	ldrh	r5, [r3, #0]
 80138b6:	f7f3 ff7f 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 80138ba:	6803      	ldr	r3, [r0, #0]
 80138bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138be:	4798      	blx	r3
 80138c0:	280b      	cmp	r0, #11
 80138c2:	bf96      	itet	ls
 80138c4:	4b05      	ldrls	r3, [pc, #20]	@ (80138dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80138c6:	2400      	movhi	r4, #0
 80138c8:	5c1c      	ldrbls	r4, [r3, r0]
 80138ca:	fb08 7005 	mla	r0, r8, r5, r7
 80138ce:	10e4      	asrs	r4, r4, #3
 80138d0:	fb04 6000 	mla	r0, r4, r0, r6
 80138d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138d8:	2402851a 	.word	0x2402851a
 80138dc:	0802cd78 	.word	0x0802cd78

080138e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80138e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e2:	b08b      	sub	sp, #44	@ 0x2c
 80138e4:	461f      	mov	r7, r3
 80138e6:	4604      	mov	r4, r0
 80138e8:	4616      	mov	r6, r2
 80138ea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80138ee:	2500      	movs	r5, #0
 80138f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80138f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80138f8:	9504      	str	r5, [sp, #16]
 80138fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80138fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013902:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013906:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801390a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801390e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013912:	f88d 3020 	strb.w	r3, [sp, #32]
 8013916:	f7ff fe9f 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801391a:	463a      	mov	r2, r7
 801391c:	4631      	mov	r1, r6
 801391e:	4603      	mov	r3, r0
 8013920:	4620      	mov	r0, r4
 8013922:	f7ff ffc1 	bl	80138a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013926:	4b0e      	ldr	r3, [pc, #56]	@ (8013960 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013928:	9005      	str	r0, [sp, #20]
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013930:	f7f3 ff42 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8013934:	6803      	ldr	r3, [r0, #0]
 8013936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013938:	4798      	blx	r3
 801393a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801393c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8013940:	a901      	add	r1, sp, #4
 8013942:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8013946:	9304      	str	r3, [sp, #16]
 8013948:	6860      	ldr	r0, [r4, #4]
 801394a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801394e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8013952:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8013956:	6803      	ldr	r3, [r0, #0]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	4798      	blx	r3
 801395c:	b00b      	add	sp, #44	@ 0x2c
 801395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013960:	2402851a 	.word	0x2402851a

08013964 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013966:	b08d      	sub	sp, #52	@ 0x34
 8013968:	2501      	movs	r5, #1
 801396a:	4604      	mov	r4, r0
 801396c:	466b      	mov	r3, sp
 801396e:	9503      	str	r5, [sp, #12]
 8013970:	e883 0006 	stmia.w	r3, {r1, r2}
 8013974:	2300      	movs	r3, #0
 8013976:	f8bd 6000 	ldrh.w	r6, [sp]
 801397a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801397e:	9306      	str	r3, [sp, #24]
 8013980:	6803      	ldr	r3, [r0, #0]
 8013982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013984:	4798      	blx	r3
 8013986:	463a      	mov	r2, r7
 8013988:	4631      	mov	r1, r6
 801398a:	4603      	mov	r3, r0
 801398c:	4620      	mov	r0, r4
 801398e:	f7ff ff8b 	bl	80138a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013992:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013994:	9004      	str	r0, [sp, #16]
 8013996:	9307      	str	r3, [sp, #28]
 8013998:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801399c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80139a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80139a4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80139a8:	4b0e      	ldr	r3, [pc, #56]	@ (80139e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80139aa:	881b      	ldrh	r3, [r3, #0]
 80139ac:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80139b0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80139b4:	f7f3 ff00 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 80139b8:	6803      	ldr	r3, [r0, #0]
 80139ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139bc:	4798      	blx	r3
 80139be:	23ff      	movs	r3, #255	@ 0xff
 80139c0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80139c4:	a903      	add	r1, sp, #12
 80139c6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80139ca:	6860      	ldr	r0, [r4, #4]
 80139cc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80139d0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80139d4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80139d8:	6803      	ldr	r3, [r0, #0]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	4798      	blx	r3
 80139de:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80139e0:	b00d      	add	sp, #52	@ 0x34
 80139e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139e4:	2402851a 	.word	0x2402851a

080139e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80139e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ec:	b08c      	sub	sp, #48	@ 0x30
 80139ee:	461e      	mov	r6, r3
 80139f0:	2300      	movs	r3, #0
 80139f2:	4604      	mov	r4, r0
 80139f4:	466d      	mov	r5, sp
 80139f6:	9306      	str	r3, [sp, #24]
 80139f8:	6803      	ldr	r3, [r0, #0]
 80139fa:	e885 0006 	stmia.w	r5, {r1, r2}
 80139fe:	2501      	movs	r5, #1
 8013a00:	f8bd 7000 	ldrh.w	r7, [sp]
 8013a04:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013a08:	9503      	str	r5, [sp, #12]
 8013a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a0c:	4798      	blx	r3
 8013a0e:	4642      	mov	r2, r8
 8013a10:	4639      	mov	r1, r7
 8013a12:	4603      	mov	r3, r0
 8013a14:	4620      	mov	r0, r4
 8013a16:	f7ff ff47 	bl	80138a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013a1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013a1e:	9004      	str	r0, [sp, #16]
 8013a20:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013a24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013a28:	9607      	str	r6, [sp, #28]
 8013a2a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013a2e:	4b10      	ldr	r3, [pc, #64]	@ (8013a70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013a36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013a38:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013a3c:	f7f3 febc 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a44:	4798      	blx	r3
 8013a46:	23ff      	movs	r3, #255	@ 0xff
 8013a48:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013a4c:	a903      	add	r1, sp, #12
 8013a4e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013a52:	6860      	ldr	r0, [r4, #4]
 8013a54:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013a58:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013a5c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013a60:	6803      	ldr	r3, [r0, #0]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	4798      	blx	r3
 8013a66:	4630      	mov	r0, r6
 8013a68:	b00c      	add	sp, #48	@ 0x30
 8013a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a6e:	bf00      	nop
 8013a70:	2402851a 	.word	0x2402851a

08013a74 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a76:	b085      	sub	sp, #20
 8013a78:	4605      	mov	r5, r0
 8013a7a:	ac02      	add	r4, sp, #8
 8013a7c:	e884 0006 	stmia.w	r4, {r1, r2}
 8013a80:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013a84:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013a88:	f7ff fde6 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	4603      	mov	r3, r0
 8013a90:	463a      	mov	r2, r7
 8013a92:	4628      	mov	r0, r5
 8013a94:	f7ff ff08 	bl	80138a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013a98:	4a05      	ldr	r2, [pc, #20]	@ (8013ab0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013a9a:	682b      	ldr	r3, [r5, #0]
 8013a9c:	8812      	ldrh	r2, [r2, #0]
 8013a9e:	9200      	str	r2, [sp, #0]
 8013aa0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013aaa:	47b0      	blx	r6
 8013aac:	b005      	add	sp, #20
 8013aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ab0:	2402851a 	.word	0x2402851a

08013ab4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013ab4:	b570      	push	{r4, r5, r6, lr}
 8013ab6:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013aba:	4604      	mov	r4, r0
 8013abc:	b19b      	cbz	r3, 8013ae6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013abe:	2002      	movs	r0, #2
 8013ac0:	f7ed ff88 	bl	80019d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013acc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013ad0:	6823      	ldr	r3, [r4, #0]
 8013ad2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8013ad6:	f7ff fdbf 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013ada:	4601      	mov	r1, r0
 8013adc:	4620      	mov	r0, r4
 8013ade:	462b      	mov	r3, r5
 8013ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ae4:	4718      	bx	r3
 8013ae6:	bd70      	pop	{r4, r5, r6, pc}

08013ae8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8013ae8:	b570      	push	{r4, r5, r6, lr}
 8013aea:	4605      	mov	r5, r0
 8013aec:	460c      	mov	r4, r1
 8013aee:	2003      	movs	r0, #3
 8013af0:	b149      	cbz	r1, 8013b06 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8013af2:	f7ed ff0f 	bl	8001914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013af6:	6928      	ldr	r0, [r5, #16]
 8013af8:	b168      	cbz	r0, 8013b16 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8013afa:	6803      	ldr	r3, [r0, #0]
 8013afc:	2101      	movs	r1, #1
 8013afe:	695b      	ldr	r3, [r3, #20]
 8013b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b04:	4718      	bx	r3
 8013b06:	f7ed ff35 	bl	8001974 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013b0a:	6928      	ldr	r0, [r5, #16]
 8013b0c:	b118      	cbz	r0, 8013b16 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8013b0e:	6803      	ldr	r3, [r0, #0]
 8013b10:	4621      	mov	r1, r4
 8013b12:	695b      	ldr	r3, [r3, #20]
 8013b14:	e7f4      	b.n	8013b00 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8013b16:	bd70      	pop	{r4, r5, r6, pc}

08013b18 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013b1e:	4604      	mov	r4, r0
 8013b20:	460d      	mov	r5, r1
 8013b22:	428b      	cmp	r3, r1
 8013b24:	d006      	beq.n	8013b34 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013b26:	6803      	ldr	r3, [r0, #0]
 8013b28:	b929      	cbnz	r1, 8013b36 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013b2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013b2e:	4798      	blx	r3
 8013b30:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8013b34:	bd38      	pop	{r3, r4, r5, pc}
 8013b36:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013b3a:	e7f8      	b.n	8013b2e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013b3c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8013b74 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013b3e:	b510      	push	{r4, lr}
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	4604      	mov	r4, r0
 8013b44:	b95b      	cbnz	r3, 8013b5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b46:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013b4a:	2b02      	cmp	r3, #2
 8013b4c:	d007      	beq.n	8013b5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b4e:	6840      	ldr	r0, [r0, #4]
 8013b50:	f000 f91a 	bl	8013d88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013b54:	b118      	cbz	r0, 8013b5e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013b56:	6862      	ldr	r2, [r4, #4]
 8013b58:	7a53      	ldrb	r3, [r2, #9]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d0fc      	beq.n	8013b58 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013b5e:	f7ee ff43 	bl	80029e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013b62:	4620      	mov	r0, r4
 8013b64:	2100      	movs	r1, #0
 8013b66:	f7ff ffd7 	bl	8013b18 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f7ff fd74 	bl	8013658 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b70:	bd10      	pop	{r4, pc}
 8013b72:	bf00      	nop
 8013b74:	2402851e 	.word	0x2402851e

08013b78 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	6803      	ldr	r3, [r0, #0]
 8013b7e:	b919      	cbnz	r1, 8013b88 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b86:	4718      	bx	r3
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8013b8e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8013b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b94:	4798      	blx	r3
 8013b96:	6863      	ldr	r3, [r4, #4]
 8013b98:	2101      	movs	r1, #1
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	7299      	strb	r1, [r3, #10]
 8013ba0:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8013ba4:	f7ff ffb8 	bl	8013b18 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013ba8:	4628      	mov	r0, r5
 8013baa:	bd70      	pop	{r4, r5, r6, pc}

08013bac <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013bac:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013bb0:	1a13      	subs	r3, r2, r0
 8013bb2:	4258      	negs	r0, r3
 8013bb4:	4158      	adcs	r0, r3
 8013bb6:	4770      	bx	lr

08013bb8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013bb8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013bbc:	1a9b      	subs	r3, r3, r2
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	bfdc      	itt	le
 8013bc2:	6882      	ldrle	r2, [r0, #8]
 8013bc4:	189b      	addle	r3, r3, r2
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	bfcc      	ite	gt
 8013bca:	2000      	movgt	r0, #0
 8013bcc:	2001      	movle	r0, #1
 8013bce:	4770      	bx	lr

08013bd0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013bd0:	6902      	ldr	r2, [r0, #16]
 8013bd2:	6843      	ldr	r3, [r0, #4]
 8013bd4:	2024      	movs	r0, #36	@ 0x24
 8013bd6:	fb00 3002 	mla	r0, r0, r2, r3
 8013bda:	4770      	bx	lr

08013bdc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013bdc:	6803      	ldr	r3, [r0, #0]
 8013bde:	691b      	ldr	r3, [r3, #16]
 8013be0:	4718      	bx	r3

08013be2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013be2:	2301      	movs	r3, #1
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	7203      	strb	r3, [r0, #8]
 8013be8:	4604      	mov	r4, r0
 8013bea:	6840      	ldr	r0, [r0, #4]
 8013bec:	6803      	ldr	r3, [r0, #0]
 8013bee:	699b      	ldr	r3, [r3, #24]
 8013bf0:	4798      	blx	r3
 8013bf2:	6803      	ldr	r3, [r0, #0]
 8013bf4:	4605      	mov	r5, r0
 8013bf6:	2b40      	cmp	r3, #64	@ 0x40
 8013bf8:	d00c      	beq.n	8013c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013bfa:	d810      	bhi.n	8013c1e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013bfc:	2b04      	cmp	r3, #4
 8013bfe:	d01d      	beq.n	8013c3c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013c00:	d804      	bhi.n	8013c0c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013c02:	2b01      	cmp	r3, #1
 8013c04:	d006      	beq.n	8013c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c06:	2b02      	cmp	r3, #2
 8013c08:	d02c      	beq.n	8013c64 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013c0a:	bd70      	pop	{r4, r5, r6, pc}
 8013c0c:	2b08      	cmp	r3, #8
 8013c0e:	d01d      	beq.n	8013c4c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013c10:	2b20      	cmp	r3, #32
 8013c12:	d1fa      	bne.n	8013c0a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013c14:	6823      	ldr	r3, [r4, #0]
 8013c16:	4620      	mov	r0, r4
 8013c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c1a:	4798      	blx	r3
 8013c1c:	e013      	b.n	8013c46 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c22:	d0f7      	beq.n	8013c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c24:	d804      	bhi.n	8013c30 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013c26:	2b80      	cmp	r3, #128	@ 0x80
 8013c28:	d0f4      	beq.n	8013c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c2e:	e7f0      	b.n	8013c12 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c34:	d0ee      	beq.n	8013c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013c3a:	e7e5      	b.n	8013c08 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013c3c:	6823      	ldr	r3, [r4, #0]
 8013c3e:	7f01      	ldrb	r1, [r0, #28]
 8013c40:	4620      	mov	r0, r4
 8013c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c44:	4798      	blx	r3
 8013c46:	6823      	ldr	r3, [r4, #0]
 8013c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c4a:	e006      	b.n	8013c5a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013c4c:	6823      	ldr	r3, [r4, #0]
 8013c4e:	7f01      	ldrb	r1, [r0, #28]
 8013c50:	4620      	mov	r0, r4
 8013c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c54:	4798      	blx	r3
 8013c56:	6823      	ldr	r3, [r4, #0]
 8013c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c62:	4718      	bx	r3
 8013c64:	6823      	ldr	r3, [r4, #0]
 8013c66:	4620      	mov	r0, r4
 8013c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c6a:	4798      	blx	r3
 8013c6c:	e7f3      	b.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013c6e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013c6e:	4770      	bx	lr

08013c70 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013c70:	4770      	bx	lr

08013c72 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8013c72:	4770      	bx	lr

08013c74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013c74:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013c78:	b510      	push	{r4, lr}
 8013c7a:	1ad2      	subs	r2, r2, r3
 8013c7c:	2a00      	cmp	r2, #0
 8013c7e:	bfdc      	itt	le
 8013c80:	6884      	ldrle	r4, [r0, #8]
 8013c82:	1912      	addle	r2, r2, r4
 8013c84:	2a01      	cmp	r2, #1
 8013c86:	dd16      	ble.n	8013cb6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013c88:	6842      	ldr	r2, [r0, #4]
 8013c8a:	2424      	movs	r4, #36	@ 0x24
 8013c8c:	fb04 2303 	mla	r3, r4, r3, r2
 8013c90:	f101 0220 	add.w	r2, r1, #32
 8013c94:	f851 4b04 	ldr.w	r4, [r1], #4
 8013c98:	4291      	cmp	r1, r2
 8013c9a:	f843 4b04 	str.w	r4, [r3], #4
 8013c9e:	d1f9      	bne.n	8013c94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013ca0:	780a      	ldrb	r2, [r1, #0]
 8013ca2:	701a      	strb	r2, [r3, #0]
 8013ca4:	68c3      	ldr	r3, [r0, #12]
 8013ca6:	6882      	ldr	r2, [r0, #8]
 8013ca8:	f3bf 8f5b 	dmb	ish
 8013cac:	3301      	adds	r3, #1
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	bfd8      	it	le
 8013cb2:	1a9b      	suble	r3, r3, r2
 8013cb4:	60c3      	str	r3, [r0, #12]
 8013cb6:	bd10      	pop	{r4, pc}

08013cb8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013cb8:	6903      	ldr	r3, [r0, #16]
 8013cba:	6882      	ldr	r2, [r0, #8]
 8013cbc:	f3bf 8f5b 	dmb	ish
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	bfd8      	it	le
 8013cc6:	1a9b      	suble	r3, r3, r2
 8013cc8:	6103      	str	r3, [r0, #16]
 8013cca:	4770      	bx	lr

08013ccc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	4604      	mov	r4, r0
 8013cd0:	460e      	mov	r6, r1
 8013cd2:	6860      	ldr	r0, [r4, #4]
 8013cd4:	6803      	ldr	r3, [r0, #0]
 8013cd6:	685b      	ldr	r3, [r3, #4]
 8013cd8:	4798      	blx	r3
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d1f9      	bne.n	8013cd2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013cde:	4d0d      	ldr	r5, [pc, #52]	@ (8013d14 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013ce0:	6828      	ldr	r0, [r5, #0]
 8013ce2:	6803      	ldr	r3, [r0, #0]
 8013ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013ce6:	4798      	blx	r3
 8013ce8:	f7ee fe8c 	bl	8002a04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013cec:	6828      	ldr	r0, [r5, #0]
 8013cee:	2101      	movs	r1, #1
 8013cf0:	f7ff ff12 	bl	8013b18 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013cf4:	6860      	ldr	r0, [r4, #4]
 8013cf6:	4631      	mov	r1, r6
 8013cf8:	6803      	ldr	r3, [r0, #0]
 8013cfa:	689b      	ldr	r3, [r3, #8]
 8013cfc:	4798      	blx	r3
 8013cfe:	6823      	ldr	r3, [r4, #0]
 8013d00:	4620      	mov	r0, r4
 8013d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d04:	4798      	blx	r3
 8013d06:	6828      	ldr	r0, [r5, #0]
 8013d08:	6803      	ldr	r3, [r0, #0]
 8013d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d10:	4718      	bx	r3
 8013d12:	bf00      	nop
 8013d14:	24028520 	.word	0x24028520

08013d18 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013d18:	b508      	push	{r3, lr}
 8013d1a:	f7ee fe65 	bl	80029e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d22:	f7ee be69 	b.w	80029f8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013d26 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013d26:	b510      	push	{r4, lr}
 8013d28:	4604      	mov	r4, r0
 8013d2a:	2114      	movs	r1, #20
 8013d2c:	f014 f9e4 	bl	80280f8 <_ZdlPvj>
 8013d30:	4620      	mov	r0, r4
 8013d32:	bd10      	pop	{r4, pc}

08013d34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	4604      	mov	r4, r0
 8013d38:	6840      	ldr	r0, [r0, #4]
 8013d3a:	6803      	ldr	r3, [r0, #0]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4798      	blx	r3
 8013d40:	4605      	mov	r5, r0
 8013d42:	b930      	cbnz	r0, 8013d52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013d44:	7a23      	ldrb	r3, [r4, #8]
 8013d46:	b123      	cbz	r3, 8013d52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013d48:	6860      	ldr	r0, [r4, #4]
 8013d4a:	6803      	ldr	r3, [r0, #0]
 8013d4c:	695b      	ldr	r3, [r3, #20]
 8013d4e:	4798      	blx	r3
 8013d50:	7225      	strb	r5, [r4, #8]
 8013d52:	6860      	ldr	r0, [r4, #4]
 8013d54:	6803      	ldr	r3, [r0, #0]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4798      	blx	r3
 8013d5a:	b928      	cbnz	r0, 8013d68 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	4620      	mov	r0, r4
 8013d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d66:	4718      	bx	r3
 8013d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d6c:	f7ee be52 	b.w	8002a14 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08013d70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013d70:	b510      	push	{r4, lr}
 8013d72:	6082      	str	r2, [r0, #8]
 8013d74:	2200      	movs	r2, #0
 8013d76:	4c03      	ldr	r4, [pc, #12]	@ (8013d84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013d78:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013d7c:	e9c0 4100 	strd	r4, r1, [r0]
 8013d80:	bd10      	pop	{r4, pc}
 8013d82:	bf00      	nop
 8013d84:	0802cd8c 	.word	0x0802cd8c

08013d88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013d88:	6840      	ldr	r0, [r0, #4]
 8013d8a:	6803      	ldr	r3, [r0, #0]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4718      	bx	r3

08013d90 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8013d90:	2300      	movs	r3, #0
 8013d92:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013d94:	8503      	strh	r3, [r0, #40]	@ 0x28
 8013d96:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8013d98:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013d9a:	6980      	ldr	r0, [r0, #24]
 8013d9c:	b110      	cbz	r0, 8013da4 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8013d9e:	6803      	ldr	r3, [r0, #0]
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	4718      	bx	r3
 8013da4:	4770      	bx	lr

08013da6 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8013da6:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8013daa:	4770      	bx	lr

08013dac <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8013dac:	b538      	push	{r3, r4, r5, lr}
 8013dae:	0e0b      	lsrs	r3, r1, #24
 8013db0:	4604      	mov	r4, r0
 8013db2:	460d      	mov	r5, r1
 8013db4:	7783      	strb	r3, [r0, #30]
 8013db6:	6803      	ldr	r3, [r0, #0]
 8013db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dba:	4798      	blx	r3
 8013dbc:	6803      	ldr	r3, [r0, #0]
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	689b      	ldr	r3, [r3, #8]
 8013dc2:	4798      	blx	r3
 8013dc4:	6823      	ldr	r3, [r4, #0]
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dca:	4798      	blx	r3
 8013dcc:	61a0      	str	r0, [r4, #24]
 8013dce:	bd38      	pop	{r3, r4, r5, pc}

08013dd0 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8013dd0:	7741      	strb	r1, [r0, #29]
 8013dd2:	4770      	bx	lr

08013dd4 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8013dd4:	b530      	push	{r4, r5, lr}
 8013dd6:	460d      	mov	r5, r1
 8013dd8:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8013ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013de4:	682b      	ldr	r3, [r5, #0]
 8013de6:	6023      	str	r3, [r4, #0]
 8013de8:	bd30      	pop	{r4, r5, pc}

08013dea <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8013dea:	b538      	push	{r3, r4, r5, lr}
 8013dec:	4604      	mov	r4, r0
 8013dee:	1d03      	adds	r3, r0, #4
 8013df0:	6808      	ldr	r0, [r1, #0]
 8013df2:	2500      	movs	r5, #0
 8013df4:	6849      	ldr	r1, [r1, #4]
 8013df6:	c303      	stmia	r3!, {r0, r1}
 8013df8:	6813      	ldr	r3, [r2, #0]
 8013dfa:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8013dfe:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8013e02:	6853      	ldr	r3, [r2, #4]
 8013e04:	61a5      	str	r5, [r4, #24]
 8013e06:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8013e0a:	f007 f97b 	bl	801b104 <_ZN8touchgfx9Matrix3x35resetEv>
 8013e0e:	23ff      	movs	r3, #255	@ 0xff
 8013e10:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8013e14:	7763      	strb	r3, [r4, #29]
 8013e16:	77a3      	strb	r3, [r4, #30]
 8013e18:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8013e1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8013e1e:	2301      	movs	r3, #1
 8013e20:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8013e24:	bd38      	pop	{r3, r4, r5, pc}
	...

08013e28 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8013e28:	ee70 7a41 	vsub.f32	s15, s0, s2
 8013e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013e34:	4605      	mov	r5, r0
 8013e36:	ed2d 8b0a 	vpush	{d8-d12}
 8013e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3e:	b086      	sub	sp, #24
 8013e40:	eeb0 ba40 	vmov.f32	s22, s0
 8013e44:	6802      	ldr	r2, [r0, #0]
 8013e46:	eef0 ba60 	vmov.f32	s23, s1
 8013e4a:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8013e4e:	eef0 aa41 	vmov.f32	s21, s2
 8013e52:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8013e54:	eeb0 aa61 	vmov.f32	s20, s3
 8013e58:	eeb0 ca42 	vmov.f32	s24, s4
 8013e5c:	eef0 ca62 	vmov.f32	s25, s5
 8013e60:	d112      	bne.n	8013e88 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8013e62:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8013e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6e:	d10b      	bne.n	8013e88 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8013e70:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8013e74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8013e76:	3901      	subs	r1, #1
 8013e78:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8013e7c:	b006      	add	sp, #24
 8013e7e:	ecbd 8b0a 	vpop	{d8-d12}
 8013e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e86:	4710      	bx	r2
 8013e88:	23ff      	movs	r3, #255	@ 0xff
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8013e90:	77ab      	strb	r3, [r5, #30]
 8013e92:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8013e94:	4798      	blx	r3
 8013e96:	eeb0 0a4b 	vmov.f32	s0, s22
 8013e9a:	eef0 0a6b 	vmov.f32	s1, s23
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	4640      	mov	r0, r8
 8013ea2:	f007 f9de 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013ea6:	eef0 8a40 	vmov.f32	s17, s0
 8013eaa:	ed8d 0a00 	vstr	s0, [sp]
 8013eae:	eeb0 0a6a 	vmov.f32	s0, s21
 8013eb2:	eef0 9a60 	vmov.f32	s19, s1
 8013eb6:	edcd 0a01 	vstr	s1, [sp, #4]
 8013eba:	4640      	mov	r0, r8
 8013ebc:	eef0 0a4a 	vmov.f32	s1, s20
 8013ec0:	f007 f9cf 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013ec4:	eef4 8a40 	vcmp.f32	s17, s0
 8013ec8:	eeb0 8a40 	vmov.f32	s16, s0
 8013ecc:	ed8d 0a02 	vstr	s0, [sp, #8]
 8013ed0:	eeb0 9a60 	vmov.f32	s18, s1
 8013ed4:	edcd 0a03 	vstr	s1, [sp, #12]
 8013ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013edc:	eef4 9a60 	vcmp.f32	s19, s1
 8013ee0:	bf0c      	ite	eq
 8013ee2:	2301      	moveq	r3, #1
 8013ee4:	2300      	movne	r3, #0
 8013ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eea:	eef4 8a40 	vcmp.f32	s17, s0
 8013eee:	7463      	strb	r3, [r4, #17]
 8013ef0:	bf0c      	ite	eq
 8013ef2:	2301      	moveq	r3, #1
 8013ef4:	2300      	movne	r3, #0
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	74a3      	strb	r3, [r4, #18]
 8013efc:	d024      	beq.n	8013f48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013efe:	eef4 9a60 	vcmp.f32	s19, s1
 8013f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f06:	d01f      	beq.n	8013f48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013f08:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	ee7a aacb 	vsub.f32	s21, s21, s22
 8013f12:	eeb0 0a4b 	vmov.f32	s0, s22
 8013f16:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8013f1a:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8013f1e:	eef0 0a6b 	vmov.f32	s1, s23
 8013f22:	eea7 0acc 	vfms.f32	s0, s15, s24
 8013f26:	eeec 0a87 	vfma.f32	s1, s25, s14
 8013f2a:	f007 f99a 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013f2e:	ed8d 0a04 	vstr	s0, [sp, #16]
 8013f32:	ee30 0a68 	vsub.f32	s0, s0, s17
 8013f36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013f3a:	edcd 0a05 	vstr	s1, [sp, #20]
 8013f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f42:	d121      	bne.n	8013f88 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8013f44:	2301      	movs	r3, #1
 8013f46:	74a3      	strb	r3, [r4, #18]
 8013f48:	7c63      	ldrb	r3, [r4, #17]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d051      	beq.n	8013ff2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8013f4e:	ee39 7a69 	vsub.f32	s14, s18, s19
 8013f52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014048 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8013f56:	eef4 9ac9 	vcmpe.f32	s19, s18
 8013f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f62:	edc4 7a08 	vstr	s15, [r4, #32]
 8013f66:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8013f6a:	ee17 3a90 	vmov	r3, s15
 8013f6e:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8013f72:	b21a      	sxth	r2, r3
 8013f74:	ee17 3a90 	vmov	r3, s15
 8013f78:	bf48      	it	mi
 8013f7a:	8122      	strhmi	r2, [r4, #8]
 8013f7c:	b21b      	sxth	r3, r3
 8013f7e:	bf56      	itet	pl
 8013f80:	80e2      	strhpl	r2, [r4, #6]
 8013f82:	80e3      	strhmi	r3, [r4, #6]
 8013f84:	8123      	strhpl	r3, [r4, #8]
 8013f86:	e02c      	b.n	8013fe2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013f88:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8013f8c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8013f90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013f94:	edc4 7a05 	vstr	s15, [r4, #20]
 8013f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9c:	d102      	bne.n	8013fa4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	7463      	strb	r3, [r4, #17]
 8013fa2:	e7d1      	b.n	8013f48 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013fa4:	eeb0 7a69 	vmov.f32	s14, s19
 8013fa8:	ee39 9a69 	vsub.f32	s18, s18, s19
 8013fac:	ee38 8a68 	vsub.f32	s16, s16, s17
 8013fb0:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8013fb4:	ed84 7a06 	vstr	s14, [r4, #24]
 8013fb8:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8013fbc:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013fc0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 801404c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8013fc4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8013fc8:	ed84 8a07 	vstr	s16, [r4, #28]
 8013fcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd4:	edc4 7a08 	vstr	s15, [r4, #32]
 8013fd8:	d503      	bpl.n	8013fe2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013fda:	eeb1 8a48 	vneg.f32	s16, s16
 8013fde:	ed84 8a07 	vstr	s16, [r4, #28]
 8013fe2:	60e7      	str	r7, [r4, #12]
 8013fe4:	7426      	strb	r6, [r4, #16]
 8013fe6:	61ac      	str	r4, [r5, #24]
 8013fe8:	b006      	add	sp, #24
 8013fea:	ecbd 8b0a 	vpop	{d8-d12}
 8013fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff2:	7ca3      	ldrb	r3, [r4, #18]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d0f4      	beq.n	8013fe2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013ff8:	ee38 7a68 	vsub.f32	s14, s16, s17
 8013ffc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8014048 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8014000:	eef4 8ac8 	vcmpe.f32	s17, s16
 8014004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400c:	edc4 7a08 	vstr	s15, [r4, #32]
 8014010:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014014:	ee17 3a90 	vmov	r3, s15
 8014018:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 801401c:	b21a      	sxth	r2, r3
 801401e:	ee17 3a90 	vmov	r3, s15
 8014022:	bf48      	it	mi
 8014024:	8122      	strhmi	r2, [r4, #8]
 8014026:	b21b      	sxth	r3, r3
 8014028:	bf56      	itet	pl
 801402a:	80e2      	strhpl	r2, [r4, #6]
 801402c:	80e3      	strhmi	r3, [r4, #6]
 801402e:	8123      	strhpl	r3, [r4, #8]
 8014030:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014034:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014038:	1a9b      	subs	r3, r3, r2
 801403a:	ee07 3a90 	vmov	s15, r3
 801403e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014042:	edc4 7a07 	vstr	s15, [r4, #28]
 8014046:	e7cc      	b.n	8013fe2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8014048:	447ffffe 	.word	0x447ffffe
 801404c:	44800000 	.word	0x44800000

08014050 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8014050:	b510      	push	{r4, lr}
 8014052:	ed2d 8b02 	vpush	{d8}
 8014056:	eef0 8a62 	vmov.f32	s17, s5
 801405a:	2100      	movs	r1, #0
 801405c:	4604      	mov	r4, r0
 801405e:	eeb0 8a42 	vmov.f32	s16, s4
 8014062:	f013 fdbb 	bl	8027bdc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8014066:	eef0 7a68 	vmov.f32	s15, s17
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	4620      	mov	r0, r4
 801406e:	689b      	ldr	r3, [r3, #8]
 8014070:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014074:	ee17 2a90 	vmov	r2, s15
 8014078:	eef0 7a48 	vmov.f32	s15, s16
 801407c:	ecbd 8b02 	vpop	{d8}
 8014080:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014088:	ee17 1a90 	vmov	r1, s15
 801408c:	4718      	bx	r3

0801408e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801408e:	b510      	push	{r4, lr}
 8014090:	ed2d 8b02 	vpush	{d8}
 8014094:	eef0 8a63 	vmov.f32	s17, s7
 8014098:	2100      	movs	r1, #0
 801409a:	4604      	mov	r4, r0
 801409c:	eeb0 8a43 	vmov.f32	s16, s6
 80140a0:	f013 fe5e 	bl	8027d60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80140a4:	eef0 7a68 	vmov.f32	s15, s17
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	4620      	mov	r0, r4
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140b2:	ee17 2a90 	vmov	r2, s15
 80140b6:	eef0 7a48 	vmov.f32	s15, s16
 80140ba:	ecbd 8b02 	vpop	{d8}
 80140be:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140c6:	ee17 1a90 	vmov	r1, s15
 80140ca:	4718      	bx	r3

080140cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80140cc:	b513      	push	{r0, r1, r4, lr}
 80140ce:	4604      	mov	r4, r0
 80140d0:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80140d2:	f007 f8c6 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80140d6:	eef0 7a60 	vmov.f32	s15, s1
 80140da:	4620      	mov	r0, r4
 80140dc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140e0:	ee17 2a90 	vmov	r2, s15
 80140e4:	eef0 7a40 	vmov.f32	s15, s0
 80140e8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140ec:	ee17 1a90 	vmov	r1, s15
 80140f0:	b002      	add	sp, #8
 80140f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140f6:	f013 bccb 	b.w	8027a90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80140fa:	b513      	push	{r0, r1, r4, lr}
 80140fc:	4604      	mov	r4, r0
 80140fe:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8014100:	f007 f8af 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014104:	eef0 7a60 	vmov.f32	s15, s1
 8014108:	4620      	mov	r0, r4
 801410a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801410e:	ee17 2a90 	vmov	r2, s15
 8014112:	eef0 7a40 	vmov.f32	s15, s0
 8014116:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801411a:	ee17 1a90 	vmov	r1, s15
 801411e:	b002      	add	sp, #8
 8014120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014124:	f013 bd01 	b.w	8027b2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08014128 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8014128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801412a:	2400      	movs	r4, #0
 801412c:	9f07      	ldr	r7, [sp, #28]
 801412e:	f04f 0e01 	mov.w	lr, #1
 8014132:	4626      	mov	r6, r4
 8014134:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8014138:	4463      	add	r3, ip
 801413a:	4563      	cmp	r3, ip
 801413c:	d02d      	beq.n	801419a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 801413e:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8014142:	2d06      	cmp	r5, #6
 8014144:	d8f9      	bhi.n	801413a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8014146:	fa0e f505 	lsl.w	r5, lr, r5
 801414a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 801414e:	d10d      	bne.n	801416c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8014150:	f015 0f10 	tst.w	r5, #16
 8014154:	d117      	bne.n	8014186 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8014156:	072d      	lsls	r5, r5, #28
 8014158:	d5ef      	bpl.n	801413a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801415a:	3801      	subs	r0, #1
 801415c:	b91e      	cbnz	r6, 8014166 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 801415e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8014162:	682d      	ldr	r5, [r5, #0]
 8014164:	600d      	str	r5, [r1, #0]
 8014166:	b96c      	cbnz	r4, 8014184 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8014168:	2601      	movs	r6, #1
 801416a:	e7e6      	b.n	801413a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801416c:	b926      	cbnz	r6, 8014178 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801416e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8014172:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8014176:	600b      	str	r3, [r1, #0]
 8014178:	b924      	cbnz	r4, 8014184 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801417a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801417e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014186:	3801      	subs	r0, #1
 8014188:	b91c      	cbnz	r4, 8014192 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801418a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801418e:	6824      	ldr	r4, [r4, #0]
 8014190:	6014      	str	r4, [r2, #0]
 8014192:	2e00      	cmp	r6, #0
 8014194:	d1f6      	bne.n	8014184 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8014196:	2401      	movs	r4, #1
 8014198:	e7cf      	b.n	801413a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801419a:	b90e      	cbnz	r6, 80141a0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801419c:	2300      	movs	r3, #0
 801419e:	600b      	str	r3, [r1, #0]
 80141a0:	2c00      	cmp	r4, #0
 80141a2:	d1ef      	bne.n	8014184 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80141a4:	2300      	movs	r3, #0
 80141a6:	e7ec      	b.n	8014182 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

080141a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 80141a8:	b538      	push	{r3, r4, r5, lr}
 80141aa:	ed2d 8b0a 	vpush	{d8-d12}
 80141ae:	eef0 ba40 	vmov.f32	s23, s0
 80141b2:	4604      	mov	r4, r0
 80141b4:	eeb0 ca60 	vmov.f32	s24, s1
 80141b8:	460d      	mov	r5, r1
 80141ba:	eef0 aa41 	vmov.f32	s21, s2
 80141be:	eeb0 ba61 	vmov.f32	s22, s3
 80141c2:	eeb0 9a42 	vmov.f32	s18, s4
 80141c6:	eef0 9a62 	vmov.f32	s19, s5
 80141ca:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80141ce:	ee7b 8a29 	vadd.f32	s17, s22, s19
 80141d2:	ee3a 8a89 	vadd.f32	s16, s21, s18
 80141d6:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80141da:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80141de:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80141e2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80141e6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80141ea:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80141ee:	f013 ffad 	bl	802814c <sqrtf>
 80141f2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80141f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141fa:	d12e      	bne.n	801425a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80141fc:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8014200:	ee39 7acb 	vsub.f32	s14, s19, s22
 8014204:	eeb0 8a6a 	vmov.f32	s16, s21
 8014208:	eef0 8a4b 	vmov.f32	s17, s22
 801420c:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8014210:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8014214:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8014218:	eee7 8aca 	vfms.f32	s17, s15, s20
 801421c:	2d02      	cmp	r5, #2
 801421e:	dc2f      	bgt.n	8014280 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8014220:	3501      	adds	r5, #1
 8014222:	eef0 1a4b 	vmov.f32	s3, s22
 8014226:	eeb0 1a6a 	vmov.f32	s2, s21
 801422a:	4620      	mov	r0, r4
 801422c:	4629      	mov	r1, r5
 801422e:	eef0 2a68 	vmov.f32	s5, s17
 8014232:	eeb0 2a48 	vmov.f32	s4, s16
 8014236:	eef0 0a4c 	vmov.f32	s1, s24
 801423a:	eeb0 0a6b 	vmov.f32	s0, s23
 801423e:	f7ff ffb3 	bl	80141a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8014242:	eef0 0a68 	vmov.f32	s1, s17
 8014246:	eeb0 0a48 	vmov.f32	s0, s16
 801424a:	4620      	mov	r0, r4
 801424c:	f7ff ff55 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014250:	eeb0 ba68 	vmov.f32	s22, s17
 8014254:	eef0 aa48 	vmov.f32	s21, s16
 8014258:	e7b9      	b.n	80141ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801425a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801425e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8014262:	ee78 8acc 	vsub.f32	s17, s17, s24
 8014266:	ee28 7a27 	vmul.f32	s14, s16, s15
 801426a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801426e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8014272:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8014276:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801427a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801427e:	e7cd      	b.n	801421c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8014280:	eef0 0a68 	vmov.f32	s1, s17
 8014284:	4620      	mov	r0, r4
 8014286:	eeb0 0a48 	vmov.f32	s0, s16
 801428a:	f7ff ff36 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801428e:	ecbd 8b0a 	vpop	{d8-d12}
 8014292:	bd38      	pop	{r3, r4, r5, pc}

08014294 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8014294:	b510      	push	{r4, lr}
 8014296:	ed2d 8b0a 	vpush	{d8-d12}
 801429a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801429e:	4604      	mov	r4, r0
 80142a0:	eeb0 ca40 	vmov.f32	s24, s0
 80142a4:	2b02      	cmp	r3, #2
 80142a6:	eeb0 9a60 	vmov.f32	s18, s1
 80142aa:	eef0 9a41 	vmov.f32	s19, s2
 80142ae:	eef0 8a61 	vmov.f32	s17, s3
 80142b2:	eeb0 ba42 	vmov.f32	s22, s4
 80142b6:	eef0 ba62 	vmov.f32	s23, s5
 80142ba:	eeb0 aa43 	vmov.f32	s20, s6
 80142be:	eef0 aa63 	vmov.f32	s21, s7
 80142c2:	eeb0 8a44 	vmov.f32	s16, s8
 80142c6:	eef0 ca64 	vmov.f32	s25, s9
 80142ca:	d12c      	bne.n	8014326 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80142cc:	eef0 0a62 	vmov.f32	s1, s5
 80142d0:	eeb0 0a42 	vmov.f32	s0, s4
 80142d4:	f7ff ff11 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80142d8:	ee79 9acb 	vsub.f32	s19, s19, s22
 80142dc:	ee7a caec 	vsub.f32	s25, s21, s25
 80142e0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80142e4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80142e8:	ee69 9aac 	vmul.f32	s19, s19, s25
 80142ec:	ee28 8a88 	vmul.f32	s16, s17, s16
 80142f0:	eef4 9ac8 	vcmpe.f32	s19, s16
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	db0f      	blt.n	801431a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80142fa:	2101      	movs	r1, #1
 80142fc:	eef0 2a6a 	vmov.f32	s5, s21
 8014300:	eeb0 2a4a 	vmov.f32	s4, s20
 8014304:	4620      	mov	r0, r4
 8014306:	eef0 1a6b 	vmov.f32	s3, s23
 801430a:	eeb0 1a4b 	vmov.f32	s2, s22
 801430e:	eef0 0a49 	vmov.f32	s1, s18
 8014312:	eeb0 0a4c 	vmov.f32	s0, s24
 8014316:	f7ff ff47 	bl	80141a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801431a:	eef0 0a6a 	vmov.f32	s1, s21
 801431e:	4620      	mov	r0, r4
 8014320:	eeb0 0a4a 	vmov.f32	s0, s20
 8014324:	e035      	b.n	8014392 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8014326:	2b01      	cmp	r3, #1
 8014328:	d138      	bne.n	801439c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801432a:	ee31 4ae2 	vsub.f32	s8, s3, s5
 801432e:	ee33 6a48 	vsub.f32	s12, s6, s16
 8014332:	ee71 7a42 	vsub.f32	s15, s2, s4
 8014336:	ee73 6ae4 	vsub.f32	s13, s7, s9
 801433a:	ee26 7a44 	vnmul.f32	s14, s12, s8
 801433e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014342:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434a:	d027      	beq.n	801439c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801434c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8014350:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8014354:	eea4 8a83 	vfma.f32	s16, s9, s6
 8014358:	eee1 8a22 	vfma.f32	s17, s2, s5
 801435c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8014360:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8014364:	eee6 7a28 	vfma.f32	s15, s12, s17
 8014368:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801436c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8014370:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8014374:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8014378:	ee3c ca40 	vsub.f32	s24, s24, s0
 801437c:	ee39 9a60 	vsub.f32	s18, s18, s1
 8014380:	ee29 9a09 	vmul.f32	s18, s18, s18
 8014384:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8014388:	eef4 7ac9 	vcmpe.f32	s15, s18
 801438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014390:	db04      	blt.n	801439c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014392:	f7ff feb2 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014396:	ecbd 8b0a 	vpop	{d8-d12}
 801439a:	bd10      	pop	{r4, pc}
 801439c:	eef0 0a6b 	vmov.f32	s1, s23
 80143a0:	4620      	mov	r0, r4
 80143a2:	eeb0 0a4b 	vmov.f32	s0, s22
 80143a6:	f7ff fea8 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80143aa:	e7b6      	b.n	801431a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

080143ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 80143ac:	b510      	push	{r4, lr}
 80143ae:	ed2d 8b0c 	vpush	{d8-d13}
 80143b2:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80143b6:	4604      	mov	r4, r0
 80143b8:	eeb0 9a40 	vmov.f32	s18, s0
 80143bc:	eef0 9a60 	vmov.f32	s19, s1
 80143c0:	eef0 aa41 	vmov.f32	s21, s2
 80143c4:	eeb0 ba61 	vmov.f32	s22, s3
 80143c8:	b933      	cbnz	r3, 80143d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80143ca:	f7ff fe96 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80143ce:	eef0 0a4b 	vmov.f32	s1, s22
 80143d2:	eeb0 0a6a 	vmov.f32	s0, s21
 80143d6:	e015      	b.n	8014404 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80143d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80143dc:	2b02      	cmp	r3, #2
 80143de:	ee71 8a40 	vsub.f32	s17, s2, s0
 80143e2:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80143e6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80143ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 80143ee:	d10f      	bne.n	8014410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80143f0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80143f4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80143f8:	f7ff fe7f 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80143fc:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8014400:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8014404:	4620      	mov	r0, r4
 8014406:	f7ff fe78 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801440a:	ecbd 8b0c 	vpop	{d8-d13}
 801440e:	bd10      	pop	{r4, pc}
 8014410:	f7ff fe73 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014414:	eef0 0a69 	vmov.f32	s1, s19
 8014418:	eeb0 0a49 	vmov.f32	s0, s18
 801441c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 801454c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8014420:	eeb1 aa68 	vneg.f32	s20, s17
 8014424:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8014550 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8014428:	eee8 0a27 	vfma.f32	s1, s16, s15
 801442c:	4620      	mov	r0, r4
 801442e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014432:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8014554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8014436:	eddf ca48 	vldr	s25, [pc, #288]	@ 8014558 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 801443a:	ed9f da48 	vldr	s26, [pc, #288]	@ 801455c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 801443e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8014442:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8014446:	f7ff fe58 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801444a:	eef0 0a69 	vmov.f32	s1, s19
 801444e:	eeb0 0a49 	vmov.f32	s0, s18
 8014452:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8014560 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8014456:	4620      	mov	r0, r4
 8014458:	eee8 0a27 	vfma.f32	s1, s16, s15
 801445c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014460:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8014464:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014468:	f7ff fe47 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801446c:	eef0 0a69 	vmov.f32	s1, s19
 8014470:	eeb0 0a49 	vmov.f32	s0, s18
 8014474:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8014564 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8014478:	4620      	mov	r0, r4
 801447a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801447e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014482:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8014486:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801448a:	f7ff fe36 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801448e:	eef0 0a69 	vmov.f32	s1, s19
 8014492:	eeb0 0a49 	vmov.f32	s0, s18
 8014496:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8014568 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801449a:	4620      	mov	r0, r4
 801449c:	eee8 0a27 	vfma.f32	s1, s16, s15
 80144a0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80144a4:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80144a8:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80144ac:	f7ff fe25 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80144b0:	ee79 0a88 	vadd.f32	s1, s19, s16
 80144b4:	ee39 0a28 	vadd.f32	s0, s18, s17
 80144b8:	4620      	mov	r0, r4
 80144ba:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80144be:	ee30 0a08 	vadd.f32	s0, s0, s16
 80144c2:	f7ff fe1a 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80144c6:	eef0 0a69 	vmov.f32	s1, s19
 80144ca:	eeb0 0a49 	vmov.f32	s0, s18
 80144ce:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801456c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80144d2:	4620      	mov	r0, r4
 80144d4:	eee8 0a27 	vfma.f32	s1, s16, s15
 80144d8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80144dc:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80144e0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80144e4:	f7ff fe09 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80144e8:	eef0 0a69 	vmov.f32	s1, s19
 80144ec:	eeb0 0a49 	vmov.f32	s0, s18
 80144f0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8014570 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80144f4:	4620      	mov	r0, r4
 80144f6:	eee8 0a27 	vfma.f32	s1, s16, s15
 80144fa:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80144fe:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8014502:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8014506:	f7ff fdf8 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801450a:	eef0 0a69 	vmov.f32	s1, s19
 801450e:	eeb0 0a49 	vmov.f32	s0, s18
 8014512:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8014574 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8014516:	4620      	mov	r0, r4
 8014518:	eee8 0a27 	vfma.f32	s1, s16, s15
 801451c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014520:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8014524:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014528:	f7ff fde7 	bl	80140fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801452c:	eef0 0a69 	vmov.f32	s1, s19
 8014530:	eeb0 0a49 	vmov.f32	s0, s18
 8014534:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8014578 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8014538:	4620      	mov	r0, r4
 801453a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801453e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014542:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8014546:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801454a:	e73e      	b.n	80143ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 801454c:	3d23d70a 	.word	0x3d23d70a
 8014550:	3e8f5c29 	.word	0x3e8f5c29
 8014554:	3f19999a 	.word	0x3f19999a
 8014558:	3f4ccccd 	.word	0x3f4ccccd
 801455c:	3f75c28f 	.word	0x3f75c28f
 8014560:	3e4ccccd 	.word	0x3e4ccccd
 8014564:	3ecccccd 	.word	0x3ecccccd
 8014568:	3f3851ec 	.word	0x3f3851ec
 801456c:	3fa3d70a 	.word	0x3fa3d70a
 8014570:	3fcccccd 	.word	0x3fcccccd
 8014574:	3fe66666 	.word	0x3fe66666
 8014578:	3ffae148 	.word	0x3ffae148

0801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	ed2d 8b06 	vpush	{d8-d10}
 8014582:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8014586:	eef0 aa40 	vmov.f32	s21, s0
 801458a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801458e:	4604      	mov	r4, r0
 8014590:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8014594:	ee30 9a49 	vsub.f32	s18, s0, s18
 8014598:	eeb0 aa60 	vmov.f32	s20, s1
 801459c:	ee28 0a08 	vmul.f32	s0, s16, s16
 80145a0:	eea9 0a09 	vfma.f32	s0, s18, s18
 80145a4:	f013 fdd2 	bl	802814c <sqrtf>
 80145a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b0:	dd36      	ble.n	8014620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80145b2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80145b6:	2600      	movs	r6, #0
 80145b8:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80145bc:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80145c0:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 80145c4:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80145c8:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80145cc:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80145d0:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80145d4:	ee70 9a28 	vadd.f32	s19, s0, s17
 80145d8:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80145dc:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80145e0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80145e4:	b1fd      	cbz	r5, 8014626 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80145e6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80145ea:	eef0 0a49 	vmov.f32	s1, s18
 80145ee:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80145f2:	eeb0 0a69 	vmov.f32	s0, s19
 80145f6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80145fa:	4620      	mov	r0, r4
 80145fc:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8014600:	f7ff fd64 	bl	80140cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8014604:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8014608:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 801460c:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8014610:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8014614:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8014618:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 801461c:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8014620:	ecbd 8b06 	vpop	{d8-d10}
 8014624:	bd70      	pop	{r4, r5, r6, pc}
 8014626:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 801462a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801462e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8014632:	b16b      	cbz	r3, 8014650 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8014634:	eef0 1a49 	vmov.f32	s3, s18
 8014638:	4620      	mov	r0, r4
 801463a:	eeb0 1a69 	vmov.f32	s2, s19
 801463e:	eef0 0a62 	vmov.f32	s1, s5
 8014642:	eeb0 0a42 	vmov.f32	s0, s4
 8014646:	f7ff feb1 	bl	80143ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801464a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 801464e:	e7db      	b.n	8014608 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8014650:	eef0 4a48 	vmov.f32	s9, s16
 8014654:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8014658:	eeb0 4a68 	vmov.f32	s8, s17
 801465c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8014660:	eef0 3a49 	vmov.f32	s7, s18
 8014664:	4620      	mov	r0, r4
 8014666:	eeb0 3a69 	vmov.f32	s6, s19
 801466a:	f7ff fe13 	bl	8014294 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801466e:	e7cb      	b.n	8014608 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08014670 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8014670:	ee07 2a90 	vmov	s15, r2
 8014674:	ee07 1a10 	vmov	s14, r1
 8014678:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801467c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8014690 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8014680:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8014684:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014688:	ee20 0a27 	vmul.f32	s0, s0, s15
 801468c:	f7ff bf76 	b.w	801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014690:	3d000000 	.word	0x3d000000

08014694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8014694:	b538      	push	{r3, r4, r5, lr}
 8014696:	ed2d 8b02 	vpush	{d8}
 801469a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 801469e:	4604      	mov	r4, r0
 80146a0:	b31d      	cbz	r5, 80146ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 80146a2:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 80146a6:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80146aa:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80146ae:	ee78 8a67 	vsub.f32	s17, s16, s15
 80146b2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80146b6:	eef0 0a68 	vmov.f32	s1, s17
 80146ba:	f7ff fd07 	bl	80140cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80146be:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80146c2:	eef0 1a48 	vmov.f32	s3, s16
 80146c6:	4620      	mov	r0, r4
 80146c8:	eeb0 0a41 	vmov.f32	s0, s2
 80146cc:	eef0 0a68 	vmov.f32	s1, s17
 80146d0:	f7ff fe6c 	bl	80143ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80146d4:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80146d8:	eef0 1a68 	vmov.f32	s3, s17
 80146dc:	4620      	mov	r0, r4
 80146de:	eef0 0a48 	vmov.f32	s1, s16
 80146e2:	eeb0 0a41 	vmov.f32	s0, s2
 80146e6:	f7ff fe61 	bl	80143ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80146ea:	4628      	mov	r0, r5
 80146ec:	ecbd 8b02 	vpop	{d8}
 80146f0:	bd38      	pop	{r3, r4, r5, pc}

080146f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80146f2:	b510      	push	{r4, lr}
 80146f4:	ed2d 8b02 	vpush	{d8}
 80146f8:	4604      	mov	r4, r0
 80146fa:	eeb0 8a40 	vmov.f32	s16, s0
 80146fe:	eef0 8a60 	vmov.f32	s17, s1
 8014702:	f7ff ffc7 	bl	8014694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8014706:	b9d0      	cbnz	r0, 801473e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8014708:	4620      	mov	r0, r4
 801470a:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 801470e:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8014712:	eef0 0a68 	vmov.f32	s1, s17
 8014716:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801471a:	eeb0 0a48 	vmov.f32	s0, s16
 801471e:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8014722:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8014726:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801472a:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801472e:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8014732:	f7ff fdaf 	bl	8014294 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8014736:	2001      	movs	r0, #1
 8014738:	ecbd 8b02 	vpop	{d8}
 801473c:	bd10      	pop	{r4, pc}
 801473e:	2000      	movs	r0, #0
 8014740:	e7fa      	b.n	8014738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08014742 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8014742:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8014746:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801474a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801474e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8014752:	f7ff be2b 	b.w	80143ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08014758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8014758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475c:	b089      	sub	sp, #36	@ 0x24
 801475e:	461c      	mov	r4, r3
 8014760:	4682      	mov	sl, r0
 8014762:	4615      	mov	r5, r2
 8014764:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014768:	f10d 0820 	add.w	r8, sp, #32
 801476c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801476e:	9304      	str	r3, [sp, #16]
 8014770:	2300      	movs	r3, #0
 8014772:	9105      	str	r1, [sp, #20]
 8014774:	9306      	str	r3, [sp, #24]
 8014776:	f848 3d04 	str.w	r3, [r8, #-4]!
 801477a:	9b04      	ldr	r3, [sp, #16]
 801477c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8014780:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8014784:	9b05      	ldr	r3, [sp, #20]
 8014786:	429d      	cmp	r5, r3
 8014788:	d96d      	bls.n	8014866 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801478a:	3d01      	subs	r5, #1
 801478c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8014790:	2b06      	cmp	r3, #6
 8014792:	d8f7      	bhi.n	8014784 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8014794:	a201      	add	r2, pc, #4	@ (adr r2, 801479c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8014796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801479a:	bf00      	nop
 801479c:	080147bb 	.word	0x080147bb
 80147a0:	08014785 	.word	0x08014785
 80147a4:	080147b9 	.word	0x080147b9
 80147a8:	080147dd 	.word	0x080147dd
 80147ac:	080147dd 	.word	0x080147dd
 80147b0:	080147e1 	.word	0x080147e1
 80147b4:	08014821 	.word	0x08014821
 80147b8:	3c02      	subs	r4, #2
 80147ba:	4650      	mov	r0, sl
 80147bc:	9400      	str	r4, [sp, #0]
 80147be:	462b      	mov	r3, r5
 80147c0:	4642      	mov	r2, r8
 80147c2:	a906      	add	r1, sp, #24
 80147c4:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80147c8:	f7ff fcae 	bl	8014128 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80147cc:	eddd 0a07 	vldr	s1, [sp, #28]
 80147d0:	ed9d 0a06 	vldr	s0, [sp, #24]
 80147d4:	4630      	mov	r0, r6
 80147d6:	f7ff fed1 	bl	801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80147da:	e7d3      	b.n	8014784 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80147dc:	3c01      	subs	r4, #1
 80147de:	e7ec      	b.n	80147ba <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80147e0:	f1a4 0b04 	sub.w	fp, r4, #4
 80147e4:	3c02      	subs	r4, #2
 80147e6:	4650      	mov	r0, sl
 80147e8:	462b      	mov	r3, r5
 80147ea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80147ee:	f8cd b000 	str.w	fp, [sp]
 80147f2:	4642      	mov	r2, r8
 80147f4:	a906      	add	r1, sp, #24
 80147f6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80147fa:	f7ff fc95 	bl	8014128 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80147fe:	eddd 2a07 	vldr	s5, [sp, #28]
 8014802:	ed9d 2a06 	vldr	s4, [sp, #24]
 8014806:	4630      	mov	r0, r6
 8014808:	ed54 1a01 	vldr	s3, [r4, #-4]
 801480c:	ed14 1a02 	vldr	s2, [r4, #-8]
 8014810:	edd4 0a01 	vldr	s1, [r4, #4]
 8014814:	ed94 0a00 	vldr	s0, [r4]
 8014818:	f7ff fc1a 	bl	8014050 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801481c:	465c      	mov	r4, fp
 801481e:	e7b1      	b.n	8014784 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8014820:	f1a4 0b06 	sub.w	fp, r4, #6
 8014824:	3c02      	subs	r4, #2
 8014826:	4650      	mov	r0, sl
 8014828:	462b      	mov	r3, r5
 801482a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801482e:	f8cd b000 	str.w	fp, [sp]
 8014832:	4642      	mov	r2, r8
 8014834:	a906      	add	r1, sp, #24
 8014836:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801483a:	f7ff fc75 	bl	8014128 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801483e:	eddd 3a07 	vldr	s7, [sp, #28]
 8014842:	ed9d 3a06 	vldr	s6, [sp, #24]
 8014846:	4630      	mov	r0, r6
 8014848:	ed54 2a03 	vldr	s5, [r4, #-12]
 801484c:	ed14 2a04 	vldr	s4, [r4, #-16]
 8014850:	ed54 1a01 	vldr	s3, [r4, #-4]
 8014854:	ed14 1a02 	vldr	s2, [r4, #-8]
 8014858:	edd4 0a01 	vldr	s1, [r4, #4]
 801485c:	ed94 0a00 	vldr	s0, [r4]
 8014860:	f7ff fc15 	bl	801408e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8014864:	e7da      	b.n	801481c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8014866:	9b04      	ldr	r3, [sp, #16]
 8014868:	b113      	cbz	r3, 8014870 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801486a:	4630      	mov	r0, r6
 801486c:	f7ff ff69 	bl	8014742 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8014870:	b009      	add	sp, #36	@ 0x24
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	bf00      	nop

08014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8014878:	eef0 7a60 	vmov.f32	s15, s1
 801487c:	6803      	ldr	r3, [r0, #0]
 801487e:	689b      	ldr	r3, [r3, #8]
 8014880:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014884:	ee17 2a90 	vmov	r2, s15
 8014888:	eef0 7a40 	vmov.f32	s15, s0
 801488c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014890:	ee17 1a90 	vmov	r1, s15
 8014894:	4718      	bx	r3
	...

08014898 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8014898:	4b04      	ldr	r3, [pc, #16]	@ (80148ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801489a:	b510      	push	{r4, lr}
 801489c:	4604      	mov	r4, r0
 801489e:	f840 3b14 	str.w	r3, [r0], #20
 80148a2:	f002 fd0f 	bl	80172c4 <_ZN8touchgfx7OutlineD1Ev>
 80148a6:	4620      	mov	r0, r4
 80148a8:	bd10      	pop	{r4, pc}
 80148aa:	bf00      	nop
 80148ac:	0802d854 	.word	0x0802d854

080148b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	ed2d 8b04 	vpush	{d8-d9}
 80148b8:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80148bc:	b0b5      	sub	sp, #212	@ 0xd4
 80148be:	4605      	mov	r5, r0
 80148c0:	468b      	mov	fp, r1
 80148c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80148c6:	9206      	str	r2, [sp, #24]
 80148c8:	461e      	mov	r6, r3
 80148ca:	2400      	movs	r4, #0
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	f240 814f 	bls.w	8014b72 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80148d4:	23ff      	movs	r3, #255	@ 0xff
 80148d6:	1d02      	adds	r2, r0, #4
 80148d8:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8014b78 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80148dc:	f04f 0800 	mov.w	r8, #0
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	af08      	add	r7, sp, #32
 80148e4:	6981      	ldr	r1, [r0, #24]
 80148e6:	a808      	add	r0, sp, #32
 80148e8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80148ea:	eef0 9a49 	vmov.f32	s19, s18
 80148ee:	f012 ff83 	bl	80277f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80148f2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80148f6:	4ba1      	ldr	r3, [pc, #644]	@ (8014b7c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80148f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80148fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014900:	2201      	movs	r2, #1
 8014902:	9308      	str	r3, [sp, #32]
 8014904:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8014908:	edd5 6a08 	vldr	s13, [r5, #32]
 801490c:	eeb0 8a49 	vmov.f32	s16, s18
 8014910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014914:	9325      	str	r3, [sp, #148]	@ 0x94
 8014916:	f04f 0300 	mov.w	r3, #0
 801491a:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801491e:	7f6a      	ldrb	r2, [r5, #29]
 8014920:	eef0 8a49 	vmov.f32	s17, s18
 8014924:	bf48      	it	mi
 8014926:	eef1 7a67 	vnegmi.f32	s15, s15
 801492a:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801492e:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8014932:	46c1      	mov	r9, r8
 8014934:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8014938:	f04f 0a01 	mov.w	sl, #1
 801493c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014940:	7fab      	ldrb	r3, [r5, #30]
 8014942:	942a      	str	r4, [sp, #168]	@ 0xa8
 8014944:	435a      	muls	r2, r3
 8014946:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801494a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801494e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8014952:	1c53      	adds	r3, r2, #1
 8014954:	942b      	str	r4, [sp, #172]	@ 0xac
 8014956:	942c      	str	r4, [sp, #176]	@ 0xb0
 8014958:	ee27 7a26 	vmul.f32	s14, s14, s13
 801495c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014960:	942d      	str	r4, [sp, #180]	@ 0xb4
 8014962:	942e      	str	r4, [sp, #184]	@ 0xb8
 8014964:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801496c:	942f      	str	r4, [sp, #188]	@ 0xbc
 801496e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8014970:	9431      	str	r4, [sp, #196]	@ 0xc4
 8014972:	9432      	str	r4, [sp, #200]	@ 0xc8
 8014974:	9433      	str	r4, [sp, #204]	@ 0xcc
 8014976:	4644      	mov	r4, r8
 8014978:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801497c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8014980:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8014984:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8014988:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801498c:	9b06      	ldr	r3, [sp, #24]
 801498e:	454b      	cmp	r3, r9
 8014990:	f000 80cc 	beq.w	8014b2c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8014994:	f109 0301 	add.w	r3, r9, #1
 8014998:	9305      	str	r3, [sp, #20]
 801499a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801499e:	2b06      	cmp	r3, #6
 80149a0:	d839      	bhi.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80149a2:	e8df f003 	tbb	[pc, r3]
 80149a6:	3b04      	.short	0x3b04
 80149a8:	817c6f60 	.word	0x817c6f60
 80149ac:	a0          	.byte	0xa0
 80149ad:	00          	.byte	0x00
 80149ae:	45c1      	cmp	r9, r8
 80149b0:	d92b      	bls.n	8014a0a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80149b2:	eef0 0a49 	vmov.f32	s1, s18
 80149b6:	4638      	mov	r0, r7
 80149b8:	eeb0 0a69 	vmov.f32	s0, s19
 80149bc:	f7ff fdde 	bl	801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80149c0:	4638      	mov	r0, r7
 80149c2:	f7ff fe67 	bl	8014694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80149c6:	4681      	mov	r9, r0
 80149c8:	b9f8      	cbnz	r0, 8014a0a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80149ca:	eef0 0a49 	vmov.f32	s1, s18
 80149ce:	4638      	mov	r0, r7
 80149d0:	eeb0 0a69 	vmov.f32	s0, s19
 80149d4:	f7ff fe8d 	bl	80146f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80149d8:	4628      	mov	r0, r5
 80149da:	4623      	mov	r3, r4
 80149dc:	9a05      	ldr	r2, [sp, #20]
 80149de:	4641      	mov	r1, r8
 80149e0:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80149e4:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80149e8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80149ec:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80149f0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80149f4:	e9cd b600 	strd	fp, r6, [sp]
 80149f8:	f7ff feae 	bl	8014758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80149fc:	eef0 0a49 	vmov.f32	s1, s18
 8014a00:	eeb0 0a69 	vmov.f32	s0, s19
 8014a04:	4638      	mov	r0, r7
 8014a06:	f7ff fe74 	bl	80146f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8014a0a:	eeb0 8a49 	vmov.f32	s16, s18
 8014a0e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014a12:	eef0 8a69 	vmov.f32	s17, s19
 8014a16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8014a1a:	e7b7      	b.n	801498c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8014a1c:	45c1      	cmp	r9, r8
 8014a1e:	d90d      	bls.n	8014a3c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7ff fe37 	bl	8014694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8014a26:	b948      	cbnz	r0, 8014a3c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8014a28:	4623      	mov	r3, r4
 8014a2a:	464a      	mov	r2, r9
 8014a2c:	4641      	mov	r1, r8
 8014a2e:	4628      	mov	r0, r5
 8014a30:	e9cd a702 	strd	sl, r7, [sp, #8]
 8014a34:	e9cd b600 	strd	fp, r6, [sp]
 8014a38:	f7ff fe8e 	bl	8014758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8014a3c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014a40:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8014a44:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8014a48:	3402      	adds	r4, #2
 8014a4a:	edd3 8a00 	vldr	s17, [r3]
 8014a4e:	46c8      	mov	r8, r9
 8014a50:	ed93 8a01 	vldr	s16, [r3, #4]
 8014a54:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8014a58:	eef0 9a68 	vmov.f32	s19, s17
 8014a5c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8014a60:	eeb0 9a48 	vmov.f32	s18, s16
 8014a64:	e7d7      	b.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014a66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014a6a:	4638      	mov	r0, r7
 8014a6c:	3402      	adds	r4, #2
 8014a6e:	edd3 8a00 	vldr	s17, [r3]
 8014a72:	ed93 8a01 	vldr	s16, [r3, #4]
 8014a76:	eeb0 0a68 	vmov.f32	s0, s17
 8014a7a:	eef0 0a48 	vmov.f32	s1, s16
 8014a7e:	f7ff fd7d 	bl	801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014a82:	e7c8      	b.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014a84:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014a88:	edd3 8a00 	vldr	s17, [r3]
 8014a8c:	eef0 0a48 	vmov.f32	s1, s16
 8014a90:	4638      	mov	r0, r7
 8014a92:	eeb0 0a68 	vmov.f32	s0, s17
 8014a96:	3401      	adds	r4, #1
 8014a98:	f7ff fd70 	bl	801457c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014a9c:	e7bb      	b.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014a9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014aa2:	ed93 8a00 	vldr	s16, [r3]
 8014aa6:	e7f1      	b.n	8014a8c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8014aa8:	00a3      	lsls	r3, r4, #2
 8014aaa:	eef0 0a48 	vmov.f32	s1, s16
 8014aae:	eeb0 0a68 	vmov.f32	s0, s17
 8014ab2:	4638      	mov	r0, r7
 8014ab4:	f103 0208 	add.w	r2, r3, #8
 8014ab8:	f103 090c 	add.w	r9, r3, #12
 8014abc:	4433      	add	r3, r6
 8014abe:	3404      	adds	r4, #4
 8014ac0:	4432      	add	r2, r6
 8014ac2:	44b1      	add	r9, r6
 8014ac4:	edd3 1a01 	vldr	s3, [r3, #4]
 8014ac8:	ed92 2a00 	vldr	s4, [r2]
 8014acc:	edd9 2a00 	vldr	s5, [r9]
 8014ad0:	ed93 1a00 	vldr	s2, [r3]
 8014ad4:	9207      	str	r2, [sp, #28]
 8014ad6:	f7ff fabb 	bl	8014050 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8014ada:	9a07      	ldr	r2, [sp, #28]
 8014adc:	ed99 8a00 	vldr	s16, [r9]
 8014ae0:	edd2 8a00 	vldr	s17, [r2]
 8014ae4:	e797      	b.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014ae6:	00a3      	lsls	r3, r4, #2
 8014ae8:	eef0 0a48 	vmov.f32	s1, s16
 8014aec:	eeb0 0a68 	vmov.f32	s0, s17
 8014af0:	4638      	mov	r0, r7
 8014af2:	f103 0210 	add.w	r2, r3, #16
 8014af6:	f103 0914 	add.w	r9, r3, #20
 8014afa:	4433      	add	r3, r6
 8014afc:	3406      	adds	r4, #6
 8014afe:	4432      	add	r2, r6
 8014b00:	44b1      	add	r9, r6
 8014b02:	edd3 2a03 	vldr	s5, [r3, #12]
 8014b06:	ed92 3a00 	vldr	s6, [r2]
 8014b0a:	edd9 3a00 	vldr	s7, [r9]
 8014b0e:	ed93 2a02 	vldr	s4, [r3, #8]
 8014b12:	edd3 1a01 	vldr	s3, [r3, #4]
 8014b16:	ed93 1a00 	vldr	s2, [r3]
 8014b1a:	9207      	str	r2, [sp, #28]
 8014b1c:	f7ff fab7 	bl	801408e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8014b20:	9a07      	ldr	r2, [sp, #28]
 8014b22:	ed99 8a00 	vldr	s16, [r9]
 8014b26:	edd2 8a00 	vldr	s17, [r2]
 8014b2a:	e774      	b.n	8014a16 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014b2c:	9b06      	ldr	r3, [sp, #24]
 8014b2e:	af08      	add	r7, sp, #32
 8014b30:	4543      	cmp	r3, r8
 8014b32:	d90f      	bls.n	8014b54 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8014b34:	4638      	mov	r0, r7
 8014b36:	f7ff fdad 	bl	8014694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8014b3a:	b958      	cbnz	r0, 8014b54 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	9703      	str	r7, [sp, #12]
 8014b40:	f8cd b000 	str.w	fp, [sp]
 8014b44:	4641      	mov	r1, r8
 8014b46:	9a06      	ldr	r2, [sp, #24]
 8014b48:	4628      	mov	r0, r5
 8014b4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014b4e:	4623      	mov	r3, r4
 8014b50:	f7ff fe02 	bl	8014758 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8014b54:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8014b58:	4638      	mov	r0, r7
 8014b5a:	f012 fee1 	bl	8027920 <_ZN8touchgfx6Canvas6renderEh>
 8014b5e:	4604      	mov	r4, r0
 8014b60:	4638      	mov	r0, r7
 8014b62:	f7ff fe99 	bl	8014898 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8014b66:	4620      	mov	r0, r4
 8014b68:	b035      	add	sp, #212	@ 0xd4
 8014b6a:	ecbd 8b04 	vpop	{d8-d9}
 8014b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b72:	2401      	movs	r4, #1
 8014b74:	e7f7      	b.n	8014b66 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8014b76:	bf00      	nop
 8014b78:	00000000 	.word	0x00000000
 8014b7c:	0802cdb0 	.word	0x0802cdb0

08014b80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8014b80:	b510      	push	{r4, lr}
 8014b82:	4604      	mov	r4, r0
 8014b84:	f7ff fe88 	bl	8014898 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8014b88:	21b0      	movs	r1, #176	@ 0xb0
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f013 fab4 	bl	80280f8 <_ZdlPvj>
 8014b90:	4620      	mov	r0, r4
 8014b92:	bd10      	pop	{r4, pc}

08014b94 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8014b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b98:	4698      	mov	r8, r3
 8014b9a:	23ff      	movs	r3, #255	@ 0xff
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	4689      	mov	r9, r1
 8014ba0:	4692      	mov	sl, r2
 8014ba2:	1d02      	adds	r2, r0, #4
 8014ba4:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8014ba8:	2400      	movs	r4, #0
 8014baa:	44ca      	add	sl, r9
 8014bac:	ed2d 8b06 	vpush	{d8-d10}
 8014bb0:	b0aa      	sub	sp, #168	@ 0xa8
 8014bb2:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8014db8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8014bb6:	9300      	str	r3, [sp, #0]
 8014bb8:	eef0 8a48 	vmov.f32	s17, s16
 8014bbc:	6981      	ldr	r1, [r0, #24]
 8014bbe:	a80d      	add	r0, sp, #52	@ 0x34
 8014bc0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014bc2:	f012 fe19 	bl	80277f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8014bc6:	7f3b      	ldrb	r3, [r7, #28]
 8014bc8:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8014db8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8014bcc:	4628      	mov	r0, r5
 8014bce:	1e5a      	subs	r2, r3, #1
 8014bd0:	eeb0 0a60 	vmov.f32	s0, s1
 8014bd4:	4253      	negs	r3, r2
 8014bd6:	4153      	adcs	r3, r2
 8014bd8:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8014bdc:	f006 fb41 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014be0:	eeb0 9a40 	vmov.f32	s18, s0
 8014be4:	eef0 9a60 	vmov.f32	s19, s1
 8014be8:	45ca      	cmp	sl, r9
 8014bea:	f000 80cd 	beq.w	8014d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8014bee:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014bf2:	2b06      	cmp	r3, #6
 8014bf4:	d8f8      	bhi.n	8014be8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014bf6:	e8df f003 	tbb	[pc, r3]
 8014bfa:	0804      	.short	0x0804
 8014bfc:	58533f2a 	.word	0x58533f2a
 8014c00:	8a          	.byte	0x8a
 8014c01:	00          	.byte	0x00
 8014c02:	a80d      	add	r0, sp, #52	@ 0x34
 8014c04:	f012 fe6a 	bl	80278dc <_ZN8touchgfx6Canvas5closeEv>
 8014c08:	e7ee      	b.n	8014be8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014c0a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014c0e:	4628      	mov	r0, r5
 8014c10:	ed93 8a01 	vldr	s16, [r3, #4]
 8014c14:	edd3 8a00 	vldr	s17, [r3]
 8014c18:	eef0 0a48 	vmov.f32	s1, s16
 8014c1c:	eeb0 0a68 	vmov.f32	s0, s17
 8014c20:	f006 fb1f 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014c24:	a80d      	add	r0, sp, #52	@ 0x34
 8014c26:	eef0 7a60 	vmov.f32	s15, s1
 8014c2a:	eeb0 9a40 	vmov.f32	s18, s0
 8014c2e:	eef0 9a60 	vmov.f32	s19, s1
 8014c32:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014c36:	ee17 2a90 	vmov	r2, s15
 8014c3a:	eef0 7a40 	vmov.f32	s15, s0
 8014c3e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014c42:	ee17 1a90 	vmov	r1, s15
 8014c46:	f012 ff23 	bl	8027a90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014c4a:	3402      	adds	r4, #2
 8014c4c:	e7cc      	b.n	8014be8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014c4e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014c52:	4628      	mov	r0, r5
 8014c54:	edd3 8a00 	vldr	s17, [r3]
 8014c58:	ed93 8a01 	vldr	s16, [r3, #4]
 8014c5c:	eeb0 0a68 	vmov.f32	s0, s17
 8014c60:	eef0 0a48 	vmov.f32	s1, s16
 8014c64:	f006 fafd 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014c68:	a80d      	add	r0, sp, #52	@ 0x34
 8014c6a:	eeb0 9a40 	vmov.f32	s18, s0
 8014c6e:	eef0 9a60 	vmov.f32	s19, s1
 8014c72:	f7ff fe01 	bl	8014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8014c76:	e7e8      	b.n	8014c4a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8014c78:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014c7c:	edd3 8a00 	vldr	s17, [r3]
 8014c80:	eef0 0a48 	vmov.f32	s1, s16
 8014c84:	4628      	mov	r0, r5
 8014c86:	eeb0 0a68 	vmov.f32	s0, s17
 8014c8a:	3401      	adds	r4, #1
 8014c8c:	f006 fae9 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014c90:	a80d      	add	r0, sp, #52	@ 0x34
 8014c92:	eef0 9a60 	vmov.f32	s19, s1
 8014c96:	eeb0 9a40 	vmov.f32	s18, s0
 8014c9a:	f7ff fded 	bl	8014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8014c9e:	e7a3      	b.n	8014be8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014ca0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014ca4:	ed93 8a00 	vldr	s16, [r3]
 8014ca8:	e7ea      	b.n	8014c80 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8014caa:	1ca3      	adds	r3, r4, #2
 8014cac:	4628      	mov	r0, r5
 8014cae:	3404      	adds	r4, #4
 8014cb0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014cb4:	ed53 0a01 	vldr	s1, [r3, #-4]
 8014cb8:	ed13 0a02 	vldr	s0, [r3, #-8]
 8014cbc:	edd3 8a00 	vldr	s17, [r3]
 8014cc0:	ed93 8a01 	vldr	s16, [r3, #4]
 8014cc4:	f006 facd 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014cc8:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8014ccc:	eeb0 0a68 	vmov.f32	s0, s17
 8014cd0:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8014cd4:	eef0 0a48 	vmov.f32	s1, s16
 8014cd8:	4628      	mov	r0, r5
 8014cda:	f006 fac2 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014cde:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8014ce2:	eef0 2a60 	vmov.f32	s5, s1
 8014ce6:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8014cea:	eeb0 2a40 	vmov.f32	s4, s0
 8014cee:	a80d      	add	r0, sp, #52	@ 0x34
 8014cf0:	eeb0 aa40 	vmov.f32	s20, s0
 8014cf4:	eef0 aa60 	vmov.f32	s21, s1
 8014cf8:	eeb0 0a49 	vmov.f32	s0, s18
 8014cfc:	eef0 0a69 	vmov.f32	s1, s19
 8014d00:	f7ff f9a6 	bl	8014050 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8014d04:	eef0 9a6a 	vmov.f32	s19, s21
 8014d08:	eeb0 9a4a 	vmov.f32	s18, s20
 8014d0c:	e76c      	b.n	8014be8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014d0e:	1d26      	adds	r6, r4, #4
 8014d10:	4628      	mov	r0, r5
 8014d12:	3406      	adds	r4, #6
 8014d14:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014d18:	ed56 0a03 	vldr	s1, [r6, #-12]
 8014d1c:	ed16 0a04 	vldr	s0, [r6, #-16]
 8014d20:	edd6 8a00 	vldr	s17, [r6]
 8014d24:	ed96 8a01 	vldr	s16, [r6, #4]
 8014d28:	f006 fa9b 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014d2c:	ed8d 0a07 	vstr	s0, [sp, #28]
 8014d30:	4628      	mov	r0, r5
 8014d32:	ed16 0a02 	vldr	s0, [r6, #-8]
 8014d36:	edcd 0a08 	vstr	s1, [sp, #32]
 8014d3a:	ed56 0a01 	vldr	s1, [r6, #-4]
 8014d3e:	f006 fa90 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014d42:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8014d46:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8014d4a:	eeb0 0a68 	vmov.f32	s0, s17
 8014d4e:	eef0 0a48 	vmov.f32	s1, s16
 8014d52:	4628      	mov	r0, r5
 8014d54:	f006 fa85 	bl	801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014d58:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8014d5c:	eeb0 3a40 	vmov.f32	s6, s0
 8014d60:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8014d64:	eef0 3a60 	vmov.f32	s7, s1
 8014d68:	eddd 1a08 	vldr	s3, [sp, #32]
 8014d6c:	eeb0 aa40 	vmov.f32	s20, s0
 8014d70:	ed9d 1a07 	vldr	s2, [sp, #28]
 8014d74:	eef0 aa60 	vmov.f32	s21, s1
 8014d78:	a80d      	add	r0, sp, #52	@ 0x34
 8014d7a:	eef0 0a69 	vmov.f32	s1, s19
 8014d7e:	eeb0 0a49 	vmov.f32	s0, s18
 8014d82:	f7ff f984 	bl	801408e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8014d86:	e7bd      	b.n	8014d04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8014d88:	7f7b      	ldrb	r3, [r7, #29]
 8014d8a:	a80d      	add	r0, sp, #52	@ 0x34
 8014d8c:	7fb9      	ldrb	r1, [r7, #30]
 8014d8e:	4359      	muls	r1, r3
 8014d90:	1c4b      	adds	r3, r1, #1
 8014d92:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8014d96:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014d9a:	f012 fdc1 	bl	8027920 <_ZN8touchgfx6Canvas6renderEh>
 8014d9e:	4b07      	ldr	r3, [pc, #28]	@ (8014dbc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8014da0:	4604      	mov	r4, r0
 8014da2:	a812      	add	r0, sp, #72	@ 0x48
 8014da4:	930d      	str	r3, [sp, #52]	@ 0x34
 8014da6:	f002 fa8d 	bl	80172c4 <_ZN8touchgfx7OutlineD1Ev>
 8014daa:	4620      	mov	r0, r4
 8014dac:	b02a      	add	sp, #168	@ 0xa8
 8014dae:	ecbd 8b06 	vpop	{d8-d10}
 8014db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db6:	bf00      	nop
 8014db8:	00000000 	.word	0x00000000
 8014dbc:	0802d854 	.word	0x0802d854

08014dc0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8014dc0:	b410      	push	{r4}
 8014dc2:	7f04      	ldrb	r4, [r0, #28]
 8014dc4:	b11c      	cbz	r4, 8014dce <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8014dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dca:	f7ff bee3 	b.w	8014b94 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8014dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dd2:	f7ff bd6d 	b.w	80148b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08014dd6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8014dd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014dda:	4691      	mov	r9, r2
 8014ddc:	4602      	mov	r2, r0
 8014dde:	4606      	mov	r6, r0
 8014de0:	4688      	mov	r8, r1
 8014de2:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8014de6:	469a      	mov	sl, r3
 8014de8:	ab02      	add	r3, sp, #8
 8014dea:	af02      	add	r7, sp, #8
 8014dec:	6851      	ldr	r1, [r2, #4]
 8014dee:	c303      	stmia	r3!, {r0, r1}
 8014df0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	dd2f      	ble.n	8014e58 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014df8:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8014dfc:	2c00      	cmp	r4, #0
 8014dfe:	dd2b      	ble.n	8014e58 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014e00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014e04:	441c      	add	r4, r3
 8014e06:	b2a4      	uxth	r4, r4
 8014e08:	b225      	sxth	r5, r4
 8014e0a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8014e0e:	42ab      	cmp	r3, r5
 8014e10:	da22      	bge.n	8014e58 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014e12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e14:	464a      	mov	r2, r9
 8014e16:	9701      	str	r7, [sp, #4]
 8014e18:	4641      	mov	r1, r8
 8014e1a:	9300      	str	r3, [sp, #0]
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	4653      	mov	r3, sl
 8014e20:	f7ff ffce 	bl	8014dc0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8014e24:	b940      	cbnz	r0, 8014e38 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8014e26:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	d004      	beq.n	8014e38 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8014e2e:	3301      	adds	r3, #1
 8014e30:	105b      	asrs	r3, r3, #1
 8014e32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014e36:	e7ec      	b.n	8014e12 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8014e38:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8014e3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014e40:	4413      	add	r3, r2
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	441a      	add	r2, r3
 8014e46:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014e4a:	b212      	sxth	r2, r2
 8014e4c:	4295      	cmp	r5, r2
 8014e4e:	dadc      	bge.n	8014e0a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8014e50:	1ae3      	subs	r3, r4, r3
 8014e52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014e56:	e7d8      	b.n	8014e0a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8014e58:	b004      	add	sp, #16
 8014e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014e5e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8014e5e:	0c0b      	lsrs	r3, r1, #16
 8014e60:	60c1      	str	r1, [r0, #12]
 8014e62:	7481      	strb	r1, [r0, #18]
 8014e64:	7403      	strb	r3, [r0, #16]
 8014e66:	0a0b      	lsrs	r3, r1, #8
 8014e68:	7443      	strb	r3, [r0, #17]
 8014e6a:	4770      	bx	lr

08014e6c <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8014e6c:	f1a0 0008 	sub.w	r0, r0, #8
 8014e70:	e7f5      	b.n	8014e5e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08014e74 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8014e74:	b508      	push	{r3, lr}
 8014e76:	4b05      	ldr	r3, [pc, #20]	@ (8014e8c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8014e78:	6818      	ldr	r0, [r3, #0]
 8014e7a:	6803      	ldr	r3, [r0, #0]
 8014e7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014e80:	4798      	blx	r3
 8014e82:	1e43      	subs	r3, r0, #1
 8014e84:	4258      	negs	r0, r3
 8014e86:	4158      	adcs	r0, r3
 8014e88:	bd08      	pop	{r3, pc}
 8014e8a:	bf00      	nop
 8014e8c:	24028520 	.word	0x24028520

08014e90 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8014e90:	4770      	bx	lr

08014e92 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8014e92:	3808      	subs	r0, #8
 8014e94:	4770      	bx	lr

08014e96 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8014e96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014e9a:	b410      	push	{r4}
 8014e9c:	188c      	adds	r4, r1, r2
 8014e9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014ea2:	68c2      	ldr	r2, [r0, #12]
 8014ea4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eae:	f7ee b80f 	b.w	8002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08014eb2 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8014eb2:	f7ed bfe9 	b.w	8002e88 <_ZN8touchgfx5paint8tearDownEv>

08014eb6 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8014eb6:	b510      	push	{r4, lr}
 8014eb8:	4604      	mov	r4, r0
 8014eba:	2114      	movs	r1, #20
 8014ebc:	f013 f91c 	bl	80280f8 <_ZdlPvj>
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	bd10      	pop	{r4, pc}

08014ec4 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8014ec4:	f1a0 0008 	sub.w	r0, r0, #8
 8014ec8:	e7f5      	b.n	8014eb6 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08014ecc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8014ecc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ed4:	4411      	add	r1, r2
 8014ed6:	7c42      	ldrb	r2, [r0, #17]
 8014ed8:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8014edc:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8014ee0:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8014ee4:	2a00      	cmp	r2, #0
 8014ee6:	f000 8084 	beq.w	8014ff2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8014eea:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014eee:	ed90 7a08 	vldr	s14, [r0, #32]
 8014ef2:	42a2      	cmp	r2, r4
 8014ef4:	68c3      	ldr	r3, [r0, #12]
 8014ef6:	db20      	blt.n	8014f3a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8014ef8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014efc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8014f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f04:	bfc8      	it	gt
 8014f06:	2200      	movgt	r2, #0
 8014f08:	589a      	ldr	r2, [r3, r2]
 8014f0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014f0e:	7c03      	ldrb	r3, [r0, #16]
 8014f10:	fa5f fc82 	uxtb.w	ip, r2
 8014f14:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8014f18:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8014f1c:	440e      	add	r6, r1
 8014f1e:	b36b      	cbz	r3, 8014f7c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8014f20:	2dff      	cmp	r5, #255	@ 0xff
 8014f22:	d12b      	bne.n	8014f7c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8014f24:	42b1      	cmp	r1, r6
 8014f26:	f080 8204 	bcs.w	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8014f2a:	f881 c000 	strb.w	ip, [r1]
 8014f2e:	3103      	adds	r1, #3
 8014f30:	f801 7c02 	strb.w	r7, [r1, #-2]
 8014f34:	f801 4c01 	strb.w	r4, [r1, #-1]
 8014f38:	e7f4      	b.n	8014f24 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8014f3a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8014f3e:	42a7      	cmp	r7, r4
 8014f40:	dc08      	bgt.n	8014f54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8014f42:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014f46:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8014f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4e:	bfd8      	it	le
 8014f50:	2200      	movle	r2, #0
 8014f52:	e7d9      	b.n	8014f08 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8014f54:	1aa2      	subs	r2, r4, r2
 8014f56:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014f5a:	ee07 2a90 	vmov	s15, r2
 8014f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f6e:	ee17 2a90 	vmov	r2, s15
 8014f72:	bfd8      	it	le
 8014f74:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8014f78:	0092      	lsls	r2, r2, #2
 8014f7a:	e7c5      	b.n	8014f08 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8014f7c:	0e12      	lsrs	r2, r2, #24
 8014f7e:	4355      	muls	r5, r2
 8014f80:	1c6a      	adds	r2, r5, #1
 8014f82:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8014f86:	122d      	asrs	r5, r5, #8
 8014f88:	43e8      	mvns	r0, r5
 8014f8a:	b2ad      	uxth	r5, r5
 8014f8c:	fb1c fc05 	smulbb	ip, ip, r5
 8014f90:	b2c0      	uxtb	r0, r0
 8014f92:	fb17 f705 	smulbb	r7, r7, r5
 8014f96:	fb14 f505 	smulbb	r5, r4, r5
 8014f9a:	fa1f fc8c 	uxth.w	ip, ip
 8014f9e:	b2bf      	uxth	r7, r7
 8014fa0:	b2ad      	uxth	r5, r5
 8014fa2:	428e      	cmp	r6, r1
 8014fa4:	f101 0303 	add.w	r3, r1, #3
 8014fa8:	f240 81c3 	bls.w	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8014fac:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8014fb0:	fb02 c200 	mla	r2, r2, r0, ip
 8014fb4:	b292      	uxth	r2, r2
 8014fb6:	1c51      	adds	r1, r2, #1
 8014fb8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014fbc:	1212      	asrs	r2, r2, #8
 8014fbe:	f803 2c03 	strb.w	r2, [r3, #-3]
 8014fc2:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8014fc6:	fb02 7200 	mla	r2, r2, r0, r7
 8014fca:	b292      	uxth	r2, r2
 8014fcc:	1c51      	adds	r1, r2, #1
 8014fce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014fd2:	1212      	asrs	r2, r2, #8
 8014fd4:	f803 2c02 	strb.w	r2, [r3, #-2]
 8014fd8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8014fdc:	fb02 5200 	mla	r2, r2, r0, r5
 8014fe0:	b292      	uxth	r2, r2
 8014fe2:	1c51      	adds	r1, r2, #1
 8014fe4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014fe8:	4619      	mov	r1, r3
 8014fea:	1212      	asrs	r2, r2, #8
 8014fec:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014ff0:	e7d7      	b.n	8014fa2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8014ff2:	7c82      	ldrb	r2, [r0, #18]
 8014ff4:	2a00      	cmp	r2, #0
 8014ff6:	d047      	beq.n	8015088 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8014ff8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014ffc:	ee07 2a10 	vmov	s14, r2
 8015000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015004:	ee07 3a90 	vmov	s15, r3
 8015008:	461a      	mov	r2, r3
 801500a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801500e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015016:	f200 808e 	bhi.w	8015136 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801501a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801501e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015022:	68c7      	ldr	r7, [r0, #12]
 8015024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801502c:	ee06 6a90 	vmov	s13, r6
 8015030:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015034:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503c:	bf4a      	itet	mi
 801503e:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8015042:	4634      	movpl	r4, r6
 8015044:	ee17 4a90 	vmovmi	r4, s15
 8015048:	edd0 7a08 	vldr	s15, [r0, #32]
 801504c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015050:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8015054:	448e      	add	lr, r1
 8015056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505a:	bfc8      	it	gt
 801505c:	2200      	movgt	r2, #0
 801505e:	58bf      	ldr	r7, [r7, r2]
 8015060:	7c02      	ldrb	r2, [r0, #16]
 8015062:	fa5f f987 	uxtb.w	r9, r7
 8015066:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801506a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 801506e:	b31a      	cbz	r2, 80150b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8015070:	2dff      	cmp	r5, #255	@ 0xff
 8015072:	d121      	bne.n	80150b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8015074:	4571      	cmp	r1, lr
 8015076:	d25d      	bcs.n	8015134 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8015078:	f881 9000 	strb.w	r9, [r1]
 801507c:	3103      	adds	r1, #3
 801507e:	f801 8c02 	strb.w	r8, [r1, #-2]
 8015082:	f801 cc01 	strb.w	ip, [r1, #-1]
 8015086:	e7f5      	b.n	8015074 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8015088:	ee07 4a90 	vmov	s15, r4
 801508c:	ed90 7a06 	vldr	s14, [r0, #24]
 8015090:	edd0 6a05 	vldr	s13, [r0, #20]
 8015094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801509c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80150a0:	edd0 7a08 	vldr	s15, [r0, #32]
 80150a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150ac:	bf44      	itt	mi
 80150ae:	edd0 7a07 	vldrmi	s15, [r0, #28]
 80150b2:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 80150b6:	e7a5      	b.n	8015004 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 80150b8:	0e3f      	lsrs	r7, r7, #24
 80150ba:	436f      	muls	r7, r5
 80150bc:	1c7a      	adds	r2, r7, #1
 80150be:	eb02 2227 	add.w	r2, r2, r7, asr #8
 80150c2:	1212      	asrs	r2, r2, #8
 80150c4:	ea6f 0a02 	mvn.w	sl, r2
 80150c8:	b292      	uxth	r2, r2
 80150ca:	fb19 f902 	smulbb	r9, r9, r2
 80150ce:	fa5f fa8a 	uxtb.w	sl, sl
 80150d2:	fb18 f802 	smulbb	r8, r8, r2
 80150d6:	fb1c fc02 	smulbb	ip, ip, r2
 80150da:	fa1f f989 	uxth.w	r9, r9
 80150de:	fa1f f888 	uxth.w	r8, r8
 80150e2:	fa1f fc8c 	uxth.w	ip, ip
 80150e6:	458e      	cmp	lr, r1
 80150e8:	f101 0203 	add.w	r2, r1, #3
 80150ec:	d922      	bls.n	8015134 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80150ee:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80150f2:	fb01 910a 	mla	r1, r1, sl, r9
 80150f6:	b289      	uxth	r1, r1
 80150f8:	1c4f      	adds	r7, r1, #1
 80150fa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80150fe:	1209      	asrs	r1, r1, #8
 8015100:	f802 1c03 	strb.w	r1, [r2, #-3]
 8015104:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8015108:	fb01 810a 	mla	r1, r1, sl, r8
 801510c:	b289      	uxth	r1, r1
 801510e:	1c4f      	adds	r7, r1, #1
 8015110:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015114:	1209      	asrs	r1, r1, #8
 8015116:	f802 1c02 	strb.w	r1, [r2, #-2]
 801511a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801511e:	fb01 c10a 	mla	r1, r1, sl, ip
 8015122:	b289      	uxth	r1, r1
 8015124:	1c4f      	adds	r7, r1, #1
 8015126:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801512a:	1209      	asrs	r1, r1, #8
 801512c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015130:	4611      	mov	r1, r2
 8015132:	e7d8      	b.n	80150e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8015134:	191a      	adds	r2, r3, r4
 8015136:	4433      	add	r3, r6
 8015138:	b21b      	sxth	r3, r3
 801513a:	4293      	cmp	r3, r2
 801513c:	f340 80f9 	ble.w	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015140:	edd0 7a07 	vldr	s15, [r0, #28]
 8015144:	ee06 2a90 	vmov	s13, r2
 8015148:	ee77 7a27 	vadd.f32	s15, s14, s15
 801514c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015150:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015158:	f340 80b0 	ble.w	80152bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 801515c:	ee06 3a10 	vmov	s12, r3
 8015160:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015164:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8015338 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8015168:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801516c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015170:	ed90 6a08 	vldr	s12, [r0, #32]
 8015174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015178:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801517c:	bfd6      	itet	le
 801517e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8015182:	469c      	movgt	ip, r3
 8015184:	ee17 ca90 	vmovle	ip, s15
 8015188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801518c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801533c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8015190:	ebac 0202 	sub.w	r2, ip, r2
 8015194:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8015198:	eee6 7a07 	vfma.f32	s15, s12, s14
 801519c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80151a0:	188c      	adds	r4, r1, r2
 80151a2:	7c02      	ldrb	r2, [r0, #16]
 80151a4:	b1d2      	cbz	r2, 80151dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80151a6:	2dff      	cmp	r5, #255	@ 0xff
 80151a8:	d118      	bne.n	80151dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80151aa:	42a1      	cmp	r1, r4
 80151ac:	d261      	bcs.n	8015272 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80151ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80151b2:	68c6      	ldr	r6, [r0, #12]
 80151b4:	3103      	adds	r1, #3
 80151b6:	ee17 7a10 	vmov	r7, s14
 80151ba:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 80151be:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 80151c2:	f801 6c03 	strb.w	r6, [r1, #-3]
 80151c6:	7856      	ldrb	r6, [r2, #1]
 80151c8:	f801 6c02 	strb.w	r6, [r1, #-2]
 80151cc:	7892      	ldrb	r2, [r2, #2]
 80151ce:	f801 2c01 	strb.w	r2, [r1, #-1]
 80151d2:	ed90 7a08 	vldr	s14, [r0, #32]
 80151d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80151da:	e7e6      	b.n	80151aa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 80151dc:	68c2      	ldr	r2, [r0, #12]
 80151de:	428c      	cmp	r4, r1
 80151e0:	f101 0e03 	add.w	lr, r1, #3
 80151e4:	d945      	bls.n	8015272 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80151e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80151ea:	ee17 9a10 	vmov	r9, s14
 80151ee:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80151f2:	f898 7003 	ldrb.w	r7, [r8, #3]
 80151f6:	fb07 f605 	mul.w	r6, r7, r5
 80151fa:	1c77      	adds	r7, r6, #1
 80151fc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8015200:	123f      	asrs	r7, r7, #8
 8015202:	b2b9      	uxth	r1, r7
 8015204:	43ff      	mvns	r7, r7
 8015206:	b2fe      	uxtb	r6, r7
 8015208:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 801520c:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8015210:	fb19 f906 	smulbb	r9, r9, r6
 8015214:	fb07 9701 	mla	r7, r7, r1, r9
 8015218:	b2bf      	uxth	r7, r7
 801521a:	f107 0901 	add.w	r9, r7, #1
 801521e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8015222:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8015226:	fb19 f906 	smulbb	r9, r9, r6
 801522a:	123f      	asrs	r7, r7, #8
 801522c:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8015230:	f898 7001 	ldrb.w	r7, [r8, #1]
 8015234:	fb07 9701 	mla	r7, r7, r1, r9
 8015238:	b2bf      	uxth	r7, r7
 801523a:	f107 0901 	add.w	r9, r7, #1
 801523e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8015242:	123f      	asrs	r7, r7, #8
 8015244:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8015248:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 801524c:	f898 8002 	ldrb.w	r8, [r8, #2]
 8015250:	fb17 f606 	smulbb	r6, r7, r6
 8015254:	fb08 6601 	mla	r6, r8, r1, r6
 8015258:	b2b6      	uxth	r6, r6
 801525a:	1c71      	adds	r1, r6, #1
 801525c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8015260:	4671      	mov	r1, lr
 8015262:	1236      	asrs	r6, r6, #8
 8015264:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8015268:	ed90 7a08 	vldr	s14, [r0, #32]
 801526c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015270:	e7b5      	b.n	80151de <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8015272:	4563      	cmp	r3, ip
 8015274:	dd5d      	ble.n	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015276:	edd0 7a08 	vldr	s15, [r0, #32]
 801527a:	eba3 030c 	sub.w	r3, r3, ip
 801527e:	68c4      	ldr	r4, [r0, #12]
 8015280:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801528c:	7c00      	ldrb	r0, [r0, #16]
 801528e:	440b      	add	r3, r1
 8015290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015294:	bfd8      	it	le
 8015296:	2200      	movle	r2, #0
 8015298:	58a2      	ldr	r2, [r4, r2]
 801529a:	b2d4      	uxtb	r4, r2
 801529c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80152a0:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80152a4:	b160      	cbz	r0, 80152c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80152a6:	2dff      	cmp	r5, #255	@ 0xff
 80152a8:	d10a      	bne.n	80152c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80152aa:	4299      	cmp	r1, r3
 80152ac:	d241      	bcs.n	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80152ae:	700c      	strb	r4, [r1, #0]
 80152b0:	3103      	adds	r1, #3
 80152b2:	f801 cc02 	strb.w	ip, [r1, #-2]
 80152b6:	f801 7c01 	strb.w	r7, [r1, #-1]
 80152ba:	e7f6      	b.n	80152aa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 80152bc:	4694      	mov	ip, r2
 80152be:	e7da      	b.n	8015276 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 80152c0:	0e12      	lsrs	r2, r2, #24
 80152c2:	436a      	muls	r2, r5
 80152c4:	1c55      	adds	r5, r2, #1
 80152c6:	eb05 2522 	add.w	r5, r5, r2, asr #8
 80152ca:	122d      	asrs	r5, r5, #8
 80152cc:	43ee      	mvns	r6, r5
 80152ce:	b2ad      	uxth	r5, r5
 80152d0:	fb14 f405 	smulbb	r4, r4, r5
 80152d4:	b2f6      	uxtb	r6, r6
 80152d6:	fb1c f005 	smulbb	r0, ip, r5
 80152da:	fb17 f505 	smulbb	r5, r7, r5
 80152de:	b2a4      	uxth	r4, r4
 80152e0:	b280      	uxth	r0, r0
 80152e2:	b2ad      	uxth	r5, r5
 80152e4:	428b      	cmp	r3, r1
 80152e6:	f101 0203 	add.w	r2, r1, #3
 80152ea:	d922      	bls.n	8015332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80152ec:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80152f0:	fb01 4106 	mla	r1, r1, r6, r4
 80152f4:	b289      	uxth	r1, r1
 80152f6:	1c4f      	adds	r7, r1, #1
 80152f8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80152fc:	1209      	asrs	r1, r1, #8
 80152fe:	f802 1c03 	strb.w	r1, [r2, #-3]
 8015302:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8015306:	fb01 0106 	mla	r1, r1, r6, r0
 801530a:	b289      	uxth	r1, r1
 801530c:	1c4f      	adds	r7, r1, #1
 801530e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015312:	1209      	asrs	r1, r1, #8
 8015314:	f802 1c02 	strb.w	r1, [r2, #-2]
 8015318:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801531c:	fb01 5106 	mla	r1, r1, r6, r5
 8015320:	b289      	uxth	r1, r1
 8015322:	1c4f      	adds	r7, r1, #1
 8015324:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015328:	1209      	asrs	r1, r1, #8
 801532a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801532e:	4611      	mov	r1, r2
 8015330:	e7d8      	b.n	80152e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8015332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015336:	bf00      	nop
 8015338:	447ffffe 	.word	0x447ffffe
 801533c:	00000000 	.word	0x00000000

08015340 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8015340:	4770      	bx	lr

08015342 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8015342:	4770      	bx	lr

08015344 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8015344:	b510      	push	{r4, lr}
 8015346:	4604      	mov	r4, r0
 8015348:	2124      	movs	r1, #36	@ 0x24
 801534a:	f012 fed5 	bl	80280f8 <_ZdlPvj>
 801534e:	4620      	mov	r0, r4
 8015350:	bd10      	pop	{r4, pc}
	...

08015354 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015356:	6803      	ldr	r3, [r0, #0]
 8015358:	460d      	mov	r5, r1
 801535a:	4604      	mov	r4, r0
 801535c:	4601      	mov	r1, r0
 801535e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015360:	a802      	add	r0, sp, #8
 8015362:	4798      	blx	r3
 8015364:	6828      	ldr	r0, [r5, #0]
 8015366:	6869      	ldr	r1, [r5, #4]
 8015368:	466b      	mov	r3, sp
 801536a:	c303      	stmia	r3!, {r0, r1}
 801536c:	4668      	mov	r0, sp
 801536e:	4619      	mov	r1, r3
 8015370:	f7fc fe92 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8015374:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015376:	b188      	cbz	r0, 801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015378:	6803      	ldr	r3, [r0, #0]
 801537a:	1d21      	adds	r1, r4, #4
 801537c:	68db      	ldr	r3, [r3, #12]
 801537e:	4798      	blx	r3
 8015380:	b160      	cbz	r0, 801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015382:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	dd08      	ble.n	801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801538a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801538e:	2d00      	cmp	r5, #0
 8015390:	dd04      	ble.n	801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015392:	4a2b      	ldr	r2, [pc, #172]	@ (8015440 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8015394:	7812      	ldrb	r2, [r2, #0]
 8015396:	b11a      	cbz	r2, 80153a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8015398:	2a01      	cmp	r2, #1
 801539a:	d029      	beq.n	80153f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801539c:	b004      	add	sp, #16
 801539e:	bd70      	pop	{r4, r5, r6, pc}
 80153a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80153a4:	441d      	add	r5, r3
 80153a6:	b2ad      	uxth	r5, r5
 80153a8:	b22e      	sxth	r6, r5
 80153aa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80153ae:	42b3      	cmp	r3, r6
 80153b0:	daf4      	bge.n	801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	4669      	mov	r1, sp
 80153b6:	4620      	mov	r0, r4
 80153b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ba:	4798      	blx	r3
 80153bc:	b940      	cbnz	r0, 80153d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80153be:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80153c2:	2b01      	cmp	r3, #1
 80153c4:	d004      	beq.n	80153d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80153c6:	3301      	adds	r3, #1
 80153c8:	105b      	asrs	r3, r3, #1
 80153ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80153ce:	e7f0      	b.n	80153b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80153d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80153d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80153d8:	4413      	add	r3, r2
 80153da:	b29b      	uxth	r3, r3
 80153dc:	441a      	add	r2, r3
 80153de:	f8ad 3002 	strh.w	r3, [sp, #2]
 80153e2:	b212      	sxth	r2, r2
 80153e4:	4296      	cmp	r6, r2
 80153e6:	dae0      	bge.n	80153aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80153e8:	1aeb      	subs	r3, r5, r3
 80153ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80153ee:	e7dc      	b.n	80153aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80153f0:	f8bd 5000 	ldrh.w	r5, [sp]
 80153f4:	441d      	add	r5, r3
 80153f6:	b2ad      	uxth	r5, r5
 80153f8:	b22e      	sxth	r6, r5
 80153fa:	f9bd 3000 	ldrsh.w	r3, [sp]
 80153fe:	42b3      	cmp	r3, r6
 8015400:	dacc      	bge.n	801539c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015402:	6823      	ldr	r3, [r4, #0]
 8015404:	4669      	mov	r1, sp
 8015406:	4620      	mov	r0, r4
 8015408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801540a:	4798      	blx	r3
 801540c:	b940      	cbnz	r0, 8015420 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801540e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015412:	2b01      	cmp	r3, #1
 8015414:	d004      	beq.n	8015420 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8015416:	3301      	adds	r3, #1
 8015418:	105b      	asrs	r3, r3, #1
 801541a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801541e:	e7f0      	b.n	8015402 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8015420:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015424:	f8bd 3000 	ldrh.w	r3, [sp]
 8015428:	4413      	add	r3, r2
 801542a:	b29b      	uxth	r3, r3
 801542c:	441a      	add	r2, r3
 801542e:	f8ad 3000 	strh.w	r3, [sp]
 8015432:	b212      	sxth	r2, r2
 8015434:	4296      	cmp	r6, r2
 8015436:	dae0      	bge.n	80153fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015438:	1aeb      	subs	r3, r5, r3
 801543a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801543e:	e7dc      	b.n	80153fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015440:	24028518 	.word	0x24028518

08015444 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015446:	6803      	ldr	r3, [r0, #0]
 8015448:	4604      	mov	r4, r0
 801544a:	4601      	mov	r1, r0
 801544c:	4668      	mov	r0, sp
 801544e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015450:	4798      	blx	r3
 8015452:	2100      	movs	r1, #0
 8015454:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015458:	4668      	mov	r0, sp
 801545a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801545e:	9102      	str	r1, [sp, #8]
 8015460:	a902      	add	r1, sp, #8
 8015462:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015466:	f8ad 300e 	strh.w	r3, [sp, #14]
 801546a:	f7fc fe15 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	4669      	mov	r1, sp
 8015472:	4620      	mov	r0, r4
 8015474:	691b      	ldr	r3, [r3, #16]
 8015476:	4798      	blx	r3
 8015478:	b004      	add	sp, #16
 801547a:	bd10      	pop	{r4, pc}

0801547c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801547c:	2101      	movs	r1, #1
 801547e:	2200      	movs	r2, #0
 8015480:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8015484:	490a      	ldr	r1, [pc, #40]	@ (80154b0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8015486:	8082      	strh	r2, [r0, #4]
 8015488:	6001      	str	r1, [r0, #0]
 801548a:	21ff      	movs	r1, #255	@ 0xff
 801548c:	80c2      	strh	r2, [r0, #6]
 801548e:	8102      	strh	r2, [r0, #8]
 8015490:	8142      	strh	r2, [r0, #10]
 8015492:	8182      	strh	r2, [r0, #12]
 8015494:	81c2      	strh	r2, [r0, #14]
 8015496:	8202      	strh	r2, [r0, #16]
 8015498:	8242      	strh	r2, [r0, #18]
 801549a:	61c2      	str	r2, [r0, #28]
 801549c:	8402      	strh	r2, [r0, #32]
 801549e:	8442      	strh	r2, [r0, #34]	@ 0x22
 80154a0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80154a4:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80154a8:	6282      	str	r2, [r0, #40]	@ 0x28
 80154aa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80154ae:	4770      	bx	lr
 80154b0:	0802ce68 	.word	0x0802ce68

080154b4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 80154b4:	6301      	str	r1, [r0, #48]	@ 0x30
 80154b6:	4770      	bx	lr

080154b8 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 80154b8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80154ba:	4770      	bx	lr

080154bc <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 80154bc:	6341      	str	r1, [r0, #52]	@ 0x34
 80154be:	4770      	bx	lr

080154c0 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 80154c0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80154c2:	4770      	bx	lr

080154c4 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80154c4:	4770      	bx	lr

080154c6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80154c6:	4608      	mov	r0, r1
 80154c8:	4770      	bx	lr

080154ca <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80154ca:	b530      	push	{r4, r5, lr}
 80154cc:	460d      	mov	r5, r1
 80154ce:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80154d0:	8949      	ldrh	r1, [r1, #10]
 80154d2:	b085      	sub	sp, #20
 80154d4:	4604      	mov	r4, r0
 80154d6:	1ac9      	subs	r1, r1, r3
 80154d8:	6803      	ldr	r3, [r0, #0]
 80154da:	f10d 0206 	add.w	r2, sp, #6
 80154de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80154e2:	b209      	sxth	r1, r1
 80154e4:	4798      	blx	r3
 80154e6:	b1a0      	cbz	r0, 8015512 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80154e8:	792b      	ldrb	r3, [r5, #4]
 80154ea:	b993      	cbnz	r3, 8015512 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80154ec:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80154f0:	b178      	cbz	r0, 8015512 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80154f2:	6803      	ldr	r3, [r0, #0]
 80154f4:	68db      	ldr	r3, [r3, #12]
 80154f6:	4798      	blx	r3
 80154f8:	b158      	cbz	r0, 8015512 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80154fa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80154fe:	aa02      	add	r2, sp, #8
 8015500:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8015504:	4621      	mov	r1, r4
 8015506:	f8ad 3008 	strh.w	r3, [sp, #8]
 801550a:	9503      	str	r5, [sp, #12]
 801550c:	6803      	ldr	r3, [r0, #0]
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	4798      	blx	r3
 8015512:	b005      	add	sp, #20
 8015514:	bd30      	pop	{r4, r5, pc}

08015516 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8015516:	428a      	cmp	r2, r1
 8015518:	bfbc      	itt	lt
 801551a:	460b      	movlt	r3, r1
 801551c:	4611      	movlt	r1, r2
 801551e:	b510      	push	{r4, lr}
 8015520:	bfb8      	it	lt
 8015522:	461a      	movlt	r2, r3
 8015524:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8015528:	4604      	mov	r4, r0
 801552a:	428b      	cmp	r3, r1
 801552c:	d103      	bne.n	8015536 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 801552e:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8015532:	4293      	cmp	r3, r2
 8015534:	d011      	beq.n	801555a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8015536:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 801553a:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801553e:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8015542:	f005 fad8 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015546:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801554a:	f005 fad4 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801554e:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8015552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015556:	f005 bace 	b.w	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801555a:	bd10      	pop	{r4, pc}

0801555c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 801555c:	428a      	cmp	r2, r1
 801555e:	bfbc      	itt	lt
 8015560:	460b      	movlt	r3, r1
 8015562:	4611      	movlt	r1, r2
 8015564:	b510      	push	{r4, lr}
 8015566:	bfb8      	it	lt
 8015568:	461a      	movlt	r2, r3
 801556a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801556e:	4604      	mov	r4, r0
 8015570:	428b      	cmp	r3, r1
 8015572:	d103      	bne.n	801557c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8015574:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8015578:	4293      	cmp	r3, r2
 801557a:	d011      	beq.n	80155a0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801557c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8015580:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8015584:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8015588:	f005 fab5 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 801558c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015590:	f005 fab1 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015594:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8015598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801559c:	f005 baab 	b.w	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 80155a0:	bd10      	pop	{r4, pc}

080155a2 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 80155a2:	2300      	movs	r3, #0
 80155a4:	3038      	adds	r0, #56	@ 0x38
 80155a6:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 80155aa:	f005 baa4 	b.w	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>

080155ae <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 80155ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80155b6:	4605      	mov	r5, r0
 80155b8:	460f      	mov	r7, r1
 80155ba:	4616      	mov	r6, r2
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d03d      	beq.n	801563c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80155c0:	6803      	ldr	r3, [r0, #0]
 80155c2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80155c6:	4798      	blx	r3
 80155c8:	682b      	ldr	r3, [r5, #0]
 80155ca:	b204      	sxth	r4, r0
 80155cc:	4628      	mov	r0, r5
 80155ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80155d2:	4798      	blx	r3
 80155d4:	b203      	sxth	r3, r0
 80155d6:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 80155da:	429c      	cmp	r4, r3
 80155dc:	bfc4      	itt	gt
 80155de:	4622      	movgt	r2, r4
 80155e0:	461c      	movgt	r4, r3
 80155e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80155e6:	bfc8      	it	gt
 80155e8:	4613      	movgt	r3, r2
 80155ea:	4284      	cmp	r4, r0
 80155ec:	da26      	bge.n	801563c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80155ee:	4298      	cmp	r0, r3
 80155f0:	bfa8      	it	ge
 80155f2:	4618      	movge	r0, r3
 80155f4:	2800      	cmp	r0, #0
 80155f6:	db21      	blt.n	801563c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80155f8:	b9ef      	cbnz	r7, 8015636 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 80155fa:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80155fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015602:	4619      	mov	r1, r3
 8015604:	42a0      	cmp	r0, r4
 8015606:	dd0b      	ble.n	8015620 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8015608:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 801560c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8015610:	3401      	adds	r4, #1
 8015612:	4291      	cmp	r1, r2
 8015614:	bfa8      	it	ge
 8015616:	4611      	movge	r1, r2
 8015618:	4293      	cmp	r3, r2
 801561a:	bfb8      	it	lt
 801561c:	4613      	movlt	r3, r2
 801561e:	e7f1      	b.n	8015604 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8015620:	1b89      	subs	r1, r1, r6
 8015622:	18f2      	adds	r2, r6, r3
 8015624:	4291      	cmp	r1, r2
 8015626:	d009      	beq.n	801563c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015628:	682b      	ldr	r3, [r5, #0]
 801562a:	4628      	mov	r0, r5
 801562c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015634:	4718      	bx	r3
 8015636:	4273      	negs	r3, r6
 8015638:	4631      	mov	r1, r6
 801563a:	e7e3      	b.n	8015604 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 801563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015640 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8015640:	b530      	push	{r4, r5, lr}
 8015642:	790b      	ldrb	r3, [r1, #4]
 8015644:	b085      	sub	sp, #20
 8015646:	4604      	mov	r4, r0
 8015648:	460d      	mov	r5, r1
 801564a:	2b02      	cmp	r3, #2
 801564c:	d020      	beq.n	8015690 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801564e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8015650:	f10d 0206 	add.w	r2, sp, #6
 8015654:	88c9      	ldrh	r1, [r1, #6]
 8015656:	1ac9      	subs	r1, r1, r3
 8015658:	6803      	ldr	r3, [r0, #0]
 801565a:	b209      	sxth	r1, r1
 801565c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8015660:	4798      	blx	r3
 8015662:	b1a8      	cbz	r0, 8015690 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015664:	792b      	ldrb	r3, [r5, #4]
 8015666:	2b01      	cmp	r3, #1
 8015668:	d812      	bhi.n	8015690 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801566a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801566e:	b178      	cbz	r0, 8015690 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015670:	6803      	ldr	r3, [r0, #0]
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	4798      	blx	r3
 8015676:	b158      	cbz	r0, 8015690 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015678:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801567c:	aa02      	add	r2, sp, #8
 801567e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8015682:	4621      	mov	r1, r4
 8015684:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015688:	9503      	str	r5, [sp, #12]
 801568a:	6803      	ldr	r3, [r0, #0]
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	4798      	blx	r3
 8015690:	b005      	add	sp, #20
 8015692:	bd30      	pop	{r4, r5, pc}

08015694 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8015694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015698:	4604      	mov	r4, r0
 801569a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801569e:	4690      	mov	r8, r2
 80156a0:	461f      	mov	r7, r3
 80156a2:	9e06      	ldr	r6, [sp, #24]
 80156a4:	b928      	cbnz	r0, 80156b2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 80156a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80156aa:	8033      	strh	r3, [r6, #0]
 80156ac:	803b      	strh	r3, [r7, #0]
 80156ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80156b6:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 80156ba:	1883      	adds	r3, r0, r2
 80156bc:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80156c0:	1ad2      	subs	r2, r2, r3
 80156c2:	b212      	sxth	r2, r2
 80156c4:	2a01      	cmp	r2, #1
 80156c6:	dc07      	bgt.n	80156d8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80156c8:	2300      	movs	r3, #0
 80156ca:	803b      	strh	r3, [r7, #0]
 80156cc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 80156d0:	3b01      	subs	r3, #1
 80156d2:	8033      	strh	r3, [r6, #0]
 80156d4:	2001      	movs	r0, #1
 80156d6:	e7ea      	b.n	80156ae <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80156d8:	1a08      	subs	r0, r1, r0
 80156da:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 80156de:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80156e2:	0140      	lsls	r0, r0, #5
 80156e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156e6:	1a5b      	subs	r3, r3, r1
 80156e8:	d459      	bmi.n	801579e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 80156ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80156ee:	fb93 f1f5 	sdiv	r1, r3, r5
 80156f2:	2302      	movs	r3, #2
 80156f4:	fb91 f1f3 	sdiv	r1, r1, r3
 80156f8:	3a01      	subs	r2, #1
 80156fa:	f005 ff0c 	bl	801b516 <_ZN8touchgfx6muldivElll>
 80156fe:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8015702:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8015706:	2900      	cmp	r1, #0
 8015708:	db55      	blt.n	80157b6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 801570a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 801570e:	2502      	movs	r5, #2
 8015710:	fb93 f3fc 	sdiv	r3, r3, ip
 8015714:	fb93 f3f5 	sdiv	r3, r3, r5
 8015718:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 801571c:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8015720:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8015724:	1a52      	subs	r2, r2, r1
 8015726:	eba8 0003 	sub.w	r0, r8, r3
 801572a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801572e:	d44e      	bmi.n	80157ce <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8015730:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8015734:	fb92 f1fc 	sdiv	r1, r2, ip
 8015738:	2202      	movs	r2, #2
 801573a:	fb91 f1f2 	sdiv	r1, r1, r2
 801573e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8015742:	4413      	add	r3, r2
 8015744:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8015748:	1ad2      	subs	r2, r2, r3
 801574a:	b212      	sxth	r2, r2
 801574c:	3a01      	subs	r2, #1
 801574e:	f005 fee2 	bl	801b516 <_ZN8touchgfx6muldivElll>
 8015752:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8015756:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015758:	2b00      	cmp	r3, #0
 801575a:	db44      	blt.n	80157e6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 801575c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015760:	fb93 f3f2 	sdiv	r3, r3, r2
 8015764:	2202      	movs	r2, #2
 8015766:	fb93 f3f2 	sdiv	r3, r3, r2
 801576a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801576e:	2020      	movs	r0, #32
 8015770:	429d      	cmp	r5, r3
 8015772:	bfde      	ittt	le
 8015774:	461a      	movle	r2, r3
 8015776:	462b      	movle	r3, r5
 8015778:	4615      	movle	r5, r2
 801577a:	b21b      	sxth	r3, r3
 801577c:	2d00      	cmp	r5, #0
 801577e:	bfaa      	itet	ge
 8015780:	351f      	addge	r5, #31
 8015782:	fb95 f5f0 	sdivlt	r5, r5, r0
 8015786:	116d      	asrge	r5, r5, #5
 8015788:	fb93 f3f0 	sdiv	r3, r3, r0
 801578c:	b22d      	sxth	r5, r5
 801578e:	803b      	strh	r3, [r7, #0]
 8015790:	2d00      	cmp	r5, #0
 8015792:	8035      	strh	r5, [r6, #0]
 8015794:	da33      	bge.n	80157fe <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8015796:	2000      	movs	r0, #0
 8015798:	8030      	strh	r0, [r6, #0]
 801579a:	8038      	strh	r0, [r7, #0]
 801579c:	e787      	b.n	80156ae <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801579e:	f06f 0101 	mvn.w	r1, #1
 80157a2:	fb01 5303 	mla	r3, r1, r3, r5
 80157a6:	1e59      	subs	r1, r3, #1
 80157a8:	2302      	movs	r3, #2
 80157aa:	fb91 f1f5 	sdiv	r1, r1, r5
 80157ae:	fb91 f1f3 	sdiv	r1, r1, r3
 80157b2:	4249      	negs	r1, r1
 80157b4:	e7a0      	b.n	80156f8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80157b6:	f06f 0301 	mvn.w	r3, #1
 80157ba:	2502      	movs	r5, #2
 80157bc:	fb03 c301 	mla	r3, r3, r1, ip
 80157c0:	3b01      	subs	r3, #1
 80157c2:	fb93 f3fc 	sdiv	r3, r3, ip
 80157c6:	fb93 f3f5 	sdiv	r3, r3, r5
 80157ca:	425b      	negs	r3, r3
 80157cc:	e7a4      	b.n	8015718 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80157ce:	f06f 0101 	mvn.w	r1, #1
 80157d2:	fb01 c202 	mla	r2, r1, r2, ip
 80157d6:	1e51      	subs	r1, r2, #1
 80157d8:	2202      	movs	r2, #2
 80157da:	fb91 f1fc 	sdiv	r1, r1, ip
 80157de:	fb91 f1f2 	sdiv	r1, r1, r2
 80157e2:	4249      	negs	r1, r1
 80157e4:	e7ab      	b.n	801573e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 80157e6:	f06f 0101 	mvn.w	r1, #1
 80157ea:	fb01 2303 	mla	r3, r1, r3, r2
 80157ee:	3b01      	subs	r3, #1
 80157f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80157f4:	2202      	movs	r2, #2
 80157f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80157fa:	425b      	negs	r3, r3
 80157fc:	e7b5      	b.n	801576a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80157fe:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015802:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015806:	4293      	cmp	r3, r2
 8015808:	dc05      	bgt.n	8015816 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 801580a:	3b01      	subs	r3, #1
 801580c:	2000      	movs	r0, #0
 801580e:	b21b      	sxth	r3, r3
 8015810:	8033      	strh	r3, [r6, #0]
 8015812:	803b      	strh	r3, [r7, #0]
 8015814:	e74b      	b.n	80156ae <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015816:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801581a:	803a      	strh	r2, [r7, #0]
 801581c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015820:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015824:	4293      	cmp	r3, r2
 8015826:	bfdc      	itt	le
 8015828:	f103 33ff 	addle.w	r3, r3, #4294967295
 801582c:	b21a      	sxthle	r2, r3
 801582e:	8032      	strh	r2, [r6, #0]
 8015830:	e750      	b.n	80156d4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08015834 <_ZN8touchgfx9ContainerC1Ev>:
 8015834:	2101      	movs	r1, #1
 8015836:	2200      	movs	r2, #0
 8015838:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801583c:	4909      	ldr	r1, [pc, #36]	@ (8015864 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 801583e:	8082      	strh	r2, [r0, #4]
 8015840:	80c2      	strh	r2, [r0, #6]
 8015842:	8102      	strh	r2, [r0, #8]
 8015844:	8142      	strh	r2, [r0, #10]
 8015846:	8182      	strh	r2, [r0, #12]
 8015848:	81c2      	strh	r2, [r0, #14]
 801584a:	8202      	strh	r2, [r0, #16]
 801584c:	8242      	strh	r2, [r0, #18]
 801584e:	61c2      	str	r2, [r0, #28]
 8015850:	8402      	strh	r2, [r0, #32]
 8015852:	8442      	strh	r2, [r0, #34]	@ 0x22
 8015854:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8015858:	6001      	str	r1, [r0, #0]
 801585a:	6282      	str	r2, [r0, #40]	@ 0x28
 801585c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	0802cc2c 	.word	0x0802cc2c

08015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8015868:	6800      	ldr	r0, [r0, #0]
 801586a:	2800      	cmp	r0, #0
 801586c:	bfbd      	ittte	lt
 801586e:	380f      	sublt	r0, #15
 8015870:	2320      	movlt	r3, #32
 8015872:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015876:	3010      	addge	r0, #16
 8015878:	bfa8      	it	ge
 801587a:	1140      	asrge	r0, r0, #5
 801587c:	4770      	bx	lr

0801587e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801587e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015882:	4605      	mov	r5, r0
 8015884:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8015888:	4688      	mov	r8, r1
 801588a:	4691      	mov	r9, r2
 801588c:	469a      	mov	sl, r3
 801588e:	b360      	cbz	r0, 80158ea <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8015890:	2700      	movs	r7, #0
 8015892:	f04f 3bff 	mov.w	fp, #4294967295
 8015896:	b23e      	sxth	r6, r7
 8015898:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801589c:	42b3      	cmp	r3, r6
 801589e:	dd23      	ble.n	80158e8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80158a0:	682b      	ldr	r3, [r5, #0]
 80158a2:	4631      	mov	r1, r6
 80158a4:	4628      	mov	r0, r5
 80158a6:	3701      	adds	r7, #1
 80158a8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80158ac:	4798      	blx	r3
 80158ae:	9001      	str	r0, [sp, #4]
 80158b0:	a801      	add	r0, sp, #4
 80158b2:	f7ff ffd9 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80158b6:	682b      	ldr	r3, [r5, #0]
 80158b8:	eba0 0008 	sub.w	r0, r0, r8
 80158bc:	4631      	mov	r1, r6
 80158be:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80158c2:	b204      	sxth	r4, r0
 80158c4:	4628      	mov	r0, r5
 80158c6:	4798      	blx	r3
 80158c8:	9001      	str	r0, [sp, #4]
 80158ca:	a801      	add	r0, sp, #4
 80158cc:	f7ff ffcc 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80158d0:	eba0 0009 	sub.w	r0, r0, r9
 80158d4:	fb10 f000 	smulbb	r0, r0, r0
 80158d8:	fb04 0404 	mla	r4, r4, r4, r0
 80158dc:	455c      	cmp	r4, fp
 80158de:	bf3c      	itt	cc
 80158e0:	f8aa 6000 	strhcc.w	r6, [sl]
 80158e4:	46a3      	movcc	fp, r4
 80158e6:	e7d6      	b.n	8015896 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80158e8:	2001      	movs	r0, #1
 80158ea:	b003      	add	sp, #12
 80158ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080158f0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80158f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158f4:	460e      	mov	r6, r1
 80158f6:	2100      	movs	r1, #0
 80158f8:	4605      	mov	r5, r0
 80158fa:	4617      	mov	r7, r2
 80158fc:	8011      	strh	r1, [r2, #0]
 80158fe:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8015902:	b36b      	cbz	r3, 8015960 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	f10d 0808 	add.w	r8, sp, #8
 801590a:	2401      	movs	r4, #1
 801590c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015910:	4798      	blx	r3
 8015912:	f848 0d04 	str.w	r0, [r8, #-4]!
 8015916:	4640      	mov	r0, r8
 8015918:	f7ff ffa6 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801591c:	b200      	sxth	r0, r0
 801591e:	1b80      	subs	r0, r0, r6
 8015920:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8015924:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8015928:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801592c:	42a3      	cmp	r3, r4
 801592e:	dd1b      	ble.n	8015968 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8015930:	682b      	ldr	r3, [r5, #0]
 8015932:	4621      	mov	r1, r4
 8015934:	4628      	mov	r0, r5
 8015936:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801593a:	4798      	blx	r3
 801593c:	9001      	str	r0, [sp, #4]
 801593e:	4640      	mov	r0, r8
 8015940:	f7ff ff92 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015944:	b200      	sxth	r0, r0
 8015946:	1b80      	subs	r0, r0, r6
 8015948:	2800      	cmp	r0, #0
 801594a:	bfb8      	it	lt
 801594c:	4240      	neglt	r0, r0
 801594e:	4548      	cmp	r0, r9
 8015950:	bf38      	it	cc
 8015952:	803c      	strhcc	r4, [r7, #0]
 8015954:	f104 0401 	add.w	r4, r4, #1
 8015958:	bf38      	it	cc
 801595a:	4681      	movcc	r9, r0
 801595c:	b224      	sxth	r4, r4
 801595e:	e7e3      	b.n	8015928 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8015960:	4618      	mov	r0, r3
 8015962:	b003      	add	sp, #12
 8015964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015968:	2001      	movs	r0, #1
 801596a:	e7fa      	b.n	8015962 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

0801596c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801596c:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8015970:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015974:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8015978:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 801597c:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8015980:	4770      	bx	lr

08015982 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8015982:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015984:	4604      	mov	r4, r0
 8015986:	3038      	adds	r0, #56	@ 0x38
 8015988:	460d      	mov	r5, r1
 801598a:	f7fc fa01 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801598e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8015992:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015996:	4628      	mov	r0, r5
 8015998:	9200      	str	r2, [sp, #0]
 801599a:	2200      	movs	r2, #0
 801599c:	4611      	mov	r1, r2
 801599e:	f7ee f9d6 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80159a2:	b003      	add	sp, #12
 80159a4:	bd30      	pop	{r4, r5, pc}

080159a6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 80159a6:	b538      	push	{r3, r4, r5, lr}
 80159a8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80159ac:	460d      	mov	r5, r1
 80159ae:	428b      	cmp	r3, r1
 80159b0:	dd08      	ble.n	80159c4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80159b2:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 80159b4:	b134      	cbz	r4, 80159c4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80159b6:	6823      	ldr	r3, [r4, #0]
 80159b8:	4620      	mov	r0, r4
 80159ba:	4629      	mov	r1, r5
 80159bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159be:	4798      	blx	r3
 80159c0:	69a4      	ldr	r4, [r4, #24]
 80159c2:	e7f7      	b.n	80159b4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 80159c4:	bd38      	pop	{r3, r4, r5, pc}

080159c6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 80159c6:	b570      	push	{r4, r5, r6, lr}
 80159c8:	4606      	mov	r6, r0
 80159ca:	460d      	mov	r5, r1
 80159cc:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 80159d0:	b134      	cbz	r4, 80159e0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 80159d2:	6823      	ldr	r3, [r4, #0]
 80159d4:	4620      	mov	r0, r4
 80159d6:	4629      	mov	r1, r5
 80159d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159da:	4798      	blx	r3
 80159dc:	69a4      	ldr	r4, [r4, #24]
 80159de:	e7f7      	b.n	80159d0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80159e0:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 80159e4:	b134      	cbz	r4, 80159f4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80159e6:	6823      	ldr	r3, [r4, #0]
 80159e8:	4620      	mov	r0, r4
 80159ea:	4629      	mov	r1, r5
 80159ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159ee:	4798      	blx	r3
 80159f0:	69a4      	ldr	r4, [r4, #24]
 80159f2:	e7f7      	b.n	80159e4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80159f4:	bd70      	pop	{r4, r5, r6, pc}

080159f6 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80159f6:	b538      	push	{r3, r4, r5, lr}
 80159f8:	4604      	mov	r4, r0
 80159fa:	2500      	movs	r5, #0
 80159fc:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015a00:	42ab      	cmp	r3, r5
 8015a02:	db05      	blt.n	8015a10 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8015a04:	b229      	sxth	r1, r5
 8015a06:	4620      	mov	r0, r4
 8015a08:	f7ff ffdd 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8015a0c:	3501      	adds	r5, #1
 8015a0e:	e7f5      	b.n	80159fc <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8015a10:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8015a14:	f005 f86f 	bl	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a18:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8015a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a20:	f005 b869 	b.w	801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>

08015a24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8015a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a26:	4604      	mov	r4, r0
 8015a28:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8015a2a:	b15d      	cbz	r5, 8015a44 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8015a2c:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8015a30:	4628      	mov	r0, r5
 8015a32:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015a36:	9200      	str	r2, [sp, #0]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	4611      	mov	r1, r2
 8015a3c:	f7ee f987 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015a40:	69ad      	ldr	r5, [r5, #24]
 8015a42:	e7f2      	b.n	8015a2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8015a44:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8015a48:	b15d      	cbz	r5, 8015a62 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8015a4a:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8015a54:	9200      	str	r2, [sp, #0]
 8015a56:	2200      	movs	r2, #0
 8015a58:	4611      	mov	r1, r2
 8015a5a:	f7ee f978 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015a5e:	69ad      	ldr	r5, [r5, #24]
 8015a60:	e7f2      	b.n	8015a48 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8015a62:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8015a66:	b15d      	cbz	r5, 8015a80 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8015a68:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8015a72:	9200      	str	r2, [sp, #0]
 8015a74:	2200      	movs	r2, #0
 8015a76:	4611      	mov	r1, r2
 8015a78:	f7ee f969 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015a7c:	69ad      	ldr	r5, [r5, #24]
 8015a7e:	e7f2      	b.n	8015a66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8015a80:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8015a84:	b15d      	cbz	r5, 8015a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8015a86:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8015a90:	9200      	str	r2, [sp, #0]
 8015a92:	2200      	movs	r2, #0
 8015a94:	4611      	mov	r1, r2
 8015a96:	f7ee f95a 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015a9a:	69ad      	ldr	r5, [r5, #24]
 8015a9c:	e7f2      	b.n	8015a84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8015a9e:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8015aa2:	b15d      	cbz	r5, 8015abc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8015aa4:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8015aae:	9200      	str	r2, [sp, #0]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	4611      	mov	r1, r2
 8015ab4:	f7ee f94b 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015ab8:	69ad      	ldr	r5, [r5, #24]
 8015aba:	e7f2      	b.n	8015aa2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8015abc:	6823      	ldr	r3, [r4, #0]
 8015abe:	4620      	mov	r0, r4
 8015ac0:	695b      	ldr	r3, [r3, #20]
 8015ac2:	b003      	add	sp, #12
 8015ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ac8:	4718      	bx	r3

08015aca <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8015aca:	b430      	push	{r4, r5}
 8015acc:	b28a      	uxth	r2, r1
 8015ace:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8015ad2:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8015ad6:	1b15      	subs	r5, r2, r4
 8015ad8:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8015adc:	8101      	strh	r1, [r0, #8]
 8015ade:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8015ae2:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8015ae6:	442c      	add	r4, r5
 8015ae8:	1b12      	subs	r2, r2, r4
 8015aea:	bc30      	pop	{r4, r5}
 8015aec:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8015af0:	f7ff bf98 	b.w	8015a24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015af4 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8015af4:	b430      	push	{r4, r5}
 8015af6:	b28a      	uxth	r2, r1
 8015af8:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8015afc:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8015b00:	1b15      	subs	r5, r2, r4
 8015b02:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8015b06:	8141      	strh	r1, [r0, #10]
 8015b08:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8015b0c:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8015b10:	442c      	add	r4, r5
 8015b12:	1b12      	subs	r2, r2, r4
 8015b14:	bc30      	pop	{r4, r5}
 8015b16:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8015b1a:	f7ff bf83 	b.w	8015a24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015b1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8015b1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b22:	fa1f fa83 	uxth.w	sl, r3
 8015b26:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8015b2a:	4615      	mov	r5, r2
 8015b2c:	4699      	mov	r9, r3
 8015b2e:	fa1f f887 	uxth.w	r8, r7
 8015b32:	8903      	ldrh	r3, [r0, #8]
 8015b34:	4452      	add	r2, sl
 8015b36:	4604      	mov	r4, r0
 8015b38:	8940      	ldrh	r0, [r0, #10]
 8015b3a:	460e      	mov	r6, r1
 8015b3c:	1a9b      	subs	r3, r3, r2
 8015b3e:	eb08 0201 	add.w	r2, r8, r1
 8015b42:	1a80      	subs	r0, r0, r2
 8015b44:	b21b      	sxth	r3, r3
 8015b46:	460a      	mov	r2, r1
 8015b48:	4629      	mov	r1, r5
 8015b4a:	b200      	sxth	r0, r0
 8015b4c:	9000      	str	r0, [sp, #0]
 8015b4e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015b52:	f7ee f8fc 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015b56:	2200      	movs	r2, #0
 8015b58:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015b5c:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8015b60:	4611      	mov	r1, r2
 8015b62:	9600      	str	r6, [sp, #0]
 8015b64:	f7ee f8f3 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015b68:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	462b      	mov	r3, r5
 8015b76:	4611      	mov	r1, r2
 8015b78:	f7ee f8e9 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015b7c:	8921      	ldrh	r1, [r4, #8]
 8015b7e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015b82:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8015b86:	eba1 010a 	sub.w	r1, r1, sl
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	464b      	mov	r3, r9
 8015b90:	b209      	sxth	r1, r1
 8015b92:	f7ee f8dc 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015b96:	8962      	ldrh	r2, [r4, #10]
 8015b98:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8015b9c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015ba0:	eba2 0208 	sub.w	r2, r2, r8
 8015ba4:	9700      	str	r7, [sp, #0]
 8015ba6:	2100      	movs	r1, #0
 8015ba8:	b212      	sxth	r2, r2
 8015baa:	f7ee f8d0 	bl	8003d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8015bae:	4620      	mov	r0, r4
 8015bb0:	b002      	add	sp, #8
 8015bb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bb6:	f7ff bf35 	b.w	8015a24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08015bbc <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8015bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc0:	b085      	sub	sp, #20
 8015bc2:	4604      	mov	r4, r0
 8015bc4:	2601      	movs	r6, #1
 8015bc6:	2500      	movs	r5, #0
 8015bc8:	9103      	str	r1, [sp, #12]
 8015bca:	f7ff fe33 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015bce:	4b2c      	ldr	r3, [pc, #176]	@ (8015c80 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8015bd0:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8015bd4:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8015bd8:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8015bdc:	6023      	str	r3, [r4, #0]
 8015bde:	23ff      	movs	r3, #255	@ 0xff
 8015be0:	4658      	mov	r0, fp
 8015be2:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8015be6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015bea:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8015bee:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8015bf2:	f7ff fe1f 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015bf6:	4648      	mov	r0, r9
 8015bf8:	f7ff fe1c 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015bfc:	4640      	mov	r0, r8
 8015bfe:	f7ff fe19 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015c02:	4650      	mov	r0, sl
 8015c04:	f7ff fe16 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015c08:	4638      	mov	r0, r7
 8015c0a:	f7ff fe13 	bl	8015834 <_ZN8touchgfx9ContainerC1Ev>
 8015c0e:	9903      	ldr	r1, [sp, #12]
 8015c10:	4620      	mov	r0, r4
 8015c12:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8015c16:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8015c1a:	4659      	mov	r1, fp
 8015c1c:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8015c20:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8015c24:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8015c28:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8015c2c:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8015c30:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8015c34:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8015c38:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8015c3c:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8015c40:	f7fc f8a6 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c44:	4651      	mov	r1, sl
 8015c46:	4620      	mov	r0, r4
 8015c48:	f7fc f8a2 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c4c:	4649      	mov	r1, r9
 8015c4e:	4620      	mov	r0, r4
 8015c50:	f7fc f89e 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c54:	4641      	mov	r1, r8
 8015c56:	4620      	mov	r0, r4
 8015c58:	f7fc f89a 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c5c:	4639      	mov	r1, r7
 8015c5e:	4620      	mov	r0, r4
 8015c60:	f7fc f896 	bl	8011d90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c64:	4620      	mov	r0, r4
 8015c66:	9500      	str	r5, [sp, #0]
 8015c68:	462b      	mov	r3, r5
 8015c6a:	462a      	mov	r2, r5
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	f7ff ff56 	bl	8015b1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8015c72:	4620      	mov	r0, r4
 8015c74:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8015c78:	b005      	add	sp, #20
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	bf00      	nop
 8015c80:	0802d078 	.word	0x0802d078

08015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8015c84:	4291      	cmp	r1, r2
 8015c86:	4613      	mov	r3, r2
 8015c88:	d003      	beq.n	8015c92 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8015c8a:	460a      	mov	r2, r1
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	f005 bc42 	b.w	801b516 <_ZN8touchgfx6muldivElll>
 8015c92:	4770      	bx	lr

08015c94 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8015c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c98:	6803      	ldr	r3, [r0, #0]
 8015c9a:	460d      	mov	r5, r1
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015ca2:	4798      	blx	r3
 8015ca4:	42a8      	cmp	r0, r5
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	d024      	beq.n	8015cf4 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	4601      	mov	r1, r0
 8015cae:	462a      	mov	r2, r5
 8015cb0:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8015cb4:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8015cb8:	f7ff ffe4 	bl	8015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015cbc:	4680      	mov	r8, r0
 8015cbe:	462a      	mov	r2, r5
 8015cc0:	4631      	mov	r1, r6
 8015cc2:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8015cc6:	f7ff ffdd 	bl	8015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015cca:	4641      	mov	r1, r8
 8015ccc:	4602      	mov	r2, r0
 8015cce:	4620      	mov	r0, r4
 8015cd0:	47b8      	blx	r7
 8015cd2:	462a      	mov	r2, r5
 8015cd4:	4631      	mov	r1, r6
 8015cd6:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8015cda:	f7ff ffd3 	bl	8015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015cde:	462a      	mov	r2, r5
 8015ce0:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8015ce4:	4631      	mov	r1, r6
 8015ce6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8015cea:	f7ff ffcb 	bl	8015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015cee:	6325      	str	r5, [r4, #48]	@ 0x30
 8015cf0:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8015cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cf8 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8015cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	460f      	mov	r7, r1
 8015d00:	b1b2      	cbz	r2, 8015d30 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8015d02:	6803      	ldr	r3, [r0, #0]
 8015d04:	2600      	movs	r6, #0
 8015d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015d0a:	4798      	blx	r3
 8015d0c:	4681      	mov	r9, r0
 8015d0e:	b235      	sxth	r5, r6
 8015d10:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015d14:	3601      	adds	r6, #1
 8015d16:	42ab      	cmp	r3, r5
 8015d18:	dd0a      	ble.n	8015d30 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8015d1a:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8015d1e:	463a      	mov	r2, r7
 8015d20:	4649      	mov	r1, r9
 8015d22:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8015d26:	f7ff ffad 	bl	8015c84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015d2a:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8015d2e:	e7ee      	b.n	8015d0e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8015d30:	6367      	str	r7, [r4, #52]	@ 0x34
 8015d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015d36 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8015d36:	b570      	push	{r4, r5, r6, lr}
 8015d38:	6803      	ldr	r3, [r0, #0]
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	460d      	mov	r5, r1
 8015d3e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8015d42:	4798      	blx	r3
 8015d44:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8015d48:	4629      	mov	r1, r5
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8015d52:	6823      	ldr	r3, [r4, #0]
 8015d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d58:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015d5c:	4718      	bx	r3

08015d5e <_ZN8touchgfx16GraphElementLineD1Ev>:
 8015d5e:	4770      	bx	lr

08015d60 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8015d60:	b510      	push	{r4, lr}
 8015d62:	4604      	mov	r4, r0
 8015d64:	2130      	movs	r1, #48	@ 0x30
 8015d66:	f012 f9c7 	bl	80280f8 <_ZdlPvj>
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	bd10      	pop	{r4, pc}

08015d6e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8015d6e:	6800      	ldr	r0, [r0, #0]
 8015d70:	2800      	cmp	r0, #0
 8015d72:	bfb9      	ittee	lt
 8015d74:	2320      	movlt	r3, #32
 8015d76:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015d7a:	301f      	addge	r0, #31
 8015d7c:	1140      	asrge	r0, r0, #5
 8015d7e:	4770      	bx	lr

08015d80 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8015d80:	b510      	push	{r4, lr}
 8015d82:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8015d86:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8015d8a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8015d8e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8015d92:	139b      	asrs	r3, r3, #14
 8015d94:	13a4      	asrs	r4, r4, #14
 8015d96:	429c      	cmp	r4, r3
 8015d98:	bfb8      	it	lt
 8015d9a:	461c      	movlt	r4, r3
 8015d9c:	2c01      	cmp	r4, #1
 8015d9e:	dd07      	ble.n	8015db0 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8015da0:	fb91 f1f4 	sdiv	r1, r1, r4
 8015da4:	fb90 f0f4 	sdiv	r0, r0, r4
 8015da8:	f7ff ffea 	bl	8015d80 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015dac:	4360      	muls	r0, r4
 8015dae:	bd10      	pop	{r4, pc}
 8015db0:	4340      	muls	r0, r0
 8015db2:	fb01 0101 	mla	r1, r1, r1, r0
 8015db6:	2000      	movs	r0, #0
 8015db8:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8015dbc:	bfb4      	ite	lt
 8015dbe:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8015dc2:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8015dc6:	18c2      	adds	r2, r0, r3
 8015dc8:	428a      	cmp	r2, r1
 8015dca:	bf9c      	itt	ls
 8015dcc:	1898      	addls	r0, r3, r2
 8015dce:	1a89      	subls	r1, r1, r2
 8015dd0:	089b      	lsrs	r3, r3, #2
 8015dd2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8015dd6:	d1f6      	bne.n	8015dc6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8015dd8:	e7e9      	b.n	8015dae <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08015dda <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8015dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ddc:	9906      	ldr	r1, [sp, #24]
 8015dde:	4606      	mov	r6, r0
 8015de0:	461c      	mov	r4, r3
 8015de2:	2020      	movs	r0, #32
 8015de4:	4291      	cmp	r1, r2
 8015de6:	bfbc      	itt	lt
 8015de8:	9206      	strlt	r2, [sp, #24]
 8015dea:	460a      	movlt	r2, r1
 8015dec:	9907      	ldr	r1, [sp, #28]
 8015dee:	428b      	cmp	r3, r1
 8015df0:	bfc4      	itt	gt
 8015df2:	460c      	movgt	r4, r1
 8015df4:	9307      	strgt	r3, [sp, #28]
 8015df6:	fb92 f5f0 	sdiv	r5, r2, r0
 8015dfa:	fb94 f4f0 	sdiv	r4, r4, r0
 8015dfe:	a806      	add	r0, sp, #24
 8015e00:	f7ff ffb5 	bl	8015d6e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8015e04:	4607      	mov	r7, r0
 8015e06:	a807      	add	r0, sp, #28
 8015e08:	f7ff ffb1 	bl	8015d6e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8015e0c:	1b7a      	subs	r2, r7, r5
 8015e0e:	1b00      	subs	r0, r0, r4
 8015e10:	8035      	strh	r5, [r6, #0]
 8015e12:	8074      	strh	r4, [r6, #2]
 8015e14:	80f0      	strh	r0, [r6, #6]
 8015e16:	4630      	mov	r0, r6
 8015e18:	80b2      	strh	r2, [r6, #4]
 8015e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e1c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8015e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e1e:	9c08      	ldr	r4, [sp, #32]
 8015e20:	2602      	movs	r6, #2
 8015e22:	4605      	mov	r5, r0
 8015e24:	3401      	adds	r4, #1
 8015e26:	fb94 f4f6 	sdiv	r4, r4, r6
 8015e2a:	18a6      	adds	r6, r4, r2
 8015e2c:	191f      	adds	r7, r3, r4
 8015e2e:	1b12      	subs	r2, r2, r4
 8015e30:	1b1b      	subs	r3, r3, r4
 8015e32:	e9cd 6700 	strd	r6, r7, [sp]
 8015e36:	f7ff ffd0 	bl	8015dda <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8015e3a:	4628      	mov	r0, r5
 8015e3c:	b003      	add	sp, #12
 8015e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e40 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8015e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e44:	6943      	ldr	r3, [r0, #20]
 8015e46:	b087      	sub	sp, #28
 8015e48:	4606      	mov	r6, r0
 8015e4a:	460d      	mov	r5, r1
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d072      	beq.n	8015f36 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8015e50:	695c      	ldr	r4, [r3, #20]
 8015e52:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8015e56:	6823      	ldr	r3, [r4, #0]
 8015e58:	4620      	mov	r0, r4
 8015e5a:	017f      	lsls	r7, r7, #5
 8015e5c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015e60:	4798      	blx	r3
 8015e62:	6823      	ldr	r3, [r4, #0]
 8015e64:	4680      	mov	r8, r0
 8015e66:	4629      	mov	r1, r5
 8015e68:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	4798      	blx	r3
 8015e70:	9700      	str	r7, [sp, #0]
 8015e72:	4603      	mov	r3, r0
 8015e74:	4642      	mov	r2, r8
 8015e76:	4631      	mov	r1, r6
 8015e78:	a802      	add	r0, sp, #8
 8015e7a:	f7ff ffcf 	bl	8015e1c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015e7e:	2d00      	cmp	r5, #0
 8015e80:	dd1b      	ble.n	8015eba <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8015e82:	f105 38ff 	add.w	r8, r5, #4294967295
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	4620      	mov	r0, r4
 8015e8a:	fa0f f888 	sxth.w	r8, r8
 8015e8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015e92:	4641      	mov	r1, r8
 8015e94:	4798      	blx	r3
 8015e96:	6823      	ldr	r3, [r4, #0]
 8015e98:	4681      	mov	r9, r0
 8015e9a:	4641      	mov	r1, r8
 8015e9c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	4798      	blx	r3
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	9700      	str	r7, [sp, #0]
 8015eaa:	a804      	add	r0, sp, #16
 8015eac:	464a      	mov	r2, r9
 8015eae:	f7ff ffb5 	bl	8015e1c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015eb2:	a904      	add	r1, sp, #16
 8015eb4:	a802      	add	r0, sp, #8
 8015eb6:	f7fc fc71 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015eba:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	429d      	cmp	r5, r3
 8015ec2:	da19      	bge.n	8015ef8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8015ec4:	3501      	adds	r5, #1
 8015ec6:	6823      	ldr	r3, [r4, #0]
 8015ec8:	4620      	mov	r0, r4
 8015eca:	b22d      	sxth	r5, r5
 8015ecc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015ed0:	4629      	mov	r1, r5
 8015ed2:	4798      	blx	r3
 8015ed4:	6823      	ldr	r3, [r4, #0]
 8015ed6:	4680      	mov	r8, r0
 8015ed8:	4629      	mov	r1, r5
 8015eda:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015ede:	4620      	mov	r0, r4
 8015ee0:	4798      	blx	r3
 8015ee2:	4631      	mov	r1, r6
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	9700      	str	r7, [sp, #0]
 8015ee8:	a804      	add	r0, sp, #16
 8015eea:	4642      	mov	r2, r8
 8015eec:	f7ff ff96 	bl	8015e1c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015ef0:	a904      	add	r1, sp, #16
 8015ef2:	a802      	add	r0, sp, #8
 8015ef4:	f7fc fc52 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015ef8:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8015efc:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8015f00:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8015f04:	18ca      	adds	r2, r1, r3
 8015f06:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8015f0a:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015f0e:	a904      	add	r1, sp, #16
 8015f10:	1a9b      	subs	r3, r3, r2
 8015f12:	2200      	movs	r2, #0
 8015f14:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015f18:	a802      	add	r0, sp, #8
 8015f1a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015f1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f22:	f7fc f8b9 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8015f26:	6833      	ldr	r3, [r6, #0]
 8015f28:	a902      	add	r1, sp, #8
 8015f2a:	4630      	mov	r0, r6
 8015f2c:	691b      	ldr	r3, [r3, #16]
 8015f2e:	4798      	blx	r3
 8015f30:	b007      	add	sp, #28
 8015f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	deff      	udf	#255	@ 0xff

08015f3a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8015f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3e:	b08b      	sub	sp, #44	@ 0x2c
 8015f40:	461e      	mov	r6, r3
 8015f42:	460f      	mov	r7, r1
 8015f44:	4615      	mov	r5, r2
 8015f46:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8015f4a:	429e      	cmp	r6, r3
 8015f4c:	9304      	str	r3, [sp, #16]
 8015f4e:	d074      	beq.n	801603a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8015f50:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8015f54:	4631      	mov	r1, r6
 8015f56:	4610      	mov	r0, r2
 8015f58:	4634      	mov	r4, r6
 8015f5a:	015b      	lsls	r3, r3, #5
 8015f5c:	9303      	str	r3, [sp, #12]
 8015f5e:	6813      	ldr	r3, [r2, #0]
 8015f60:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015f64:	4798      	blx	r3
 8015f66:	ab0a      	add	r3, sp, #40	@ 0x28
 8015f68:	f843 0d10 	str.w	r0, [r3, #-16]!
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7ff fc7b 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015f72:	682b      	ldr	r3, [r5, #0]
 8015f74:	4631      	mov	r1, r6
 8015f76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015f7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015f7e:	4628      	mov	r0, r5
 8015f80:	4798      	blx	r3
 8015f82:	ab0a      	add	r3, sp, #40	@ 0x28
 8015f84:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f7ff fc6d 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015f8e:	4641      	mov	r1, r8
 8015f90:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8015f94:	4638      	mov	r0, r7
 8015f96:	464a      	mov	r2, r9
 8015f98:	f011 fd7a 	bl	8027a90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	9300      	str	r3, [sp, #0]
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	9b00      	ldr	r3, [sp, #0]
 8015fa4:	441c      	add	r4, r3
 8015fa6:	682b      	ldr	r3, [r5, #0]
 8015fa8:	b224      	sxth	r4, r4
 8015faa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015fae:	4621      	mov	r1, r4
 8015fb0:	4798      	blx	r3
 8015fb2:	9008      	str	r0, [sp, #32]
 8015fb4:	a808      	add	r0, sp, #32
 8015fb6:	f7ff fc57 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015fba:	4621      	mov	r1, r4
 8015fbc:	0143      	lsls	r3, r0, #5
 8015fbe:	4628      	mov	r0, r5
 8015fc0:	9301      	str	r3, [sp, #4]
 8015fc2:	682b      	ldr	r3, [r5, #0]
 8015fc4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015fc8:	4798      	blx	r3
 8015fca:	9009      	str	r0, [sp, #36]	@ 0x24
 8015fcc:	a809      	add	r0, sp, #36	@ 0x24
 8015fce:	f7ff fc4b 	bl	8015868 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015fd2:	0143      	lsls	r3, r0, #5
 8015fd4:	9302      	str	r3, [sp, #8]
 8015fd6:	9b01      	ldr	r3, [sp, #4]
 8015fd8:	eba3 0b08 	sub.w	fp, r3, r8
 8015fdc:	9b02      	ldr	r3, [sp, #8]
 8015fde:	eba3 0a09 	sub.w	sl, r3, r9
 8015fe2:	4658      	mov	r0, fp
 8015fe4:	4651      	mov	r1, sl
 8015fe6:	f7ff fecb 	bl	8015d80 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015fea:	b320      	cbz	r0, 8016036 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8015fec:	4602      	mov	r2, r0
 8015fee:	4651      	mov	r1, sl
 8015ff0:	9005      	str	r0, [sp, #20]
 8015ff2:	9803      	ldr	r0, [sp, #12]
 8015ff4:	f005 fa8f 	bl	801b516 <_ZN8touchgfx6muldivElll>
 8015ff8:	2302      	movs	r3, #2
 8015ffa:	4659      	mov	r1, fp
 8015ffc:	fb90 faf3 	sdiv	sl, r0, r3
 8016000:	9b05      	ldr	r3, [sp, #20]
 8016002:	9803      	ldr	r0, [sp, #12]
 8016004:	461a      	mov	r2, r3
 8016006:	f005 fa86 	bl	801b516 <_ZN8touchgfx6muldivElll>
 801600a:	2302      	movs	r3, #2
 801600c:	eba8 010a 	sub.w	r1, r8, sl
 8016010:	fb90 fbf3 	sdiv	fp, r0, r3
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	eb0b 0209 	add.w	r2, fp, r9
 801601a:	4638      	mov	r0, r7
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	4798      	blx	r3
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	9a02      	ldr	r2, [sp, #8]
 8016024:	4638      	mov	r0, r7
 8016026:	9901      	ldr	r1, [sp, #4]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	445a      	add	r2, fp
 801602c:	eba1 010a 	sub.w	r1, r1, sl
 8016030:	4798      	blx	r3
 8016032:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8016036:	42a6      	cmp	r6, r4
 8016038:	db02      	blt.n	8016040 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 801603a:	b00b      	add	sp, #44	@ 0x2c
 801603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016040:	9b00      	ldr	r3, [sp, #0]
 8016042:	9a04      	ldr	r2, [sp, #16]
 8016044:	42a2      	cmp	r2, r4
 8016046:	bf08      	it	eq
 8016048:	f04f 33ff 	moveq.w	r3, #4294967295
 801604c:	e7a7      	b.n	8015f9e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08016050 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8016050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016054:	6943      	ldr	r3, [r0, #20]
 8016056:	b0a4      	sub	sp, #144	@ 0x90
 8016058:	4605      	mov	r5, r0
 801605a:	460f      	mov	r7, r1
 801605c:	2b00      	cmp	r3, #0
 801605e:	d077      	beq.n	8016150 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8016060:	695c      	ldr	r4, [r3, #20]
 8016062:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016066:	2b01      	cmp	r3, #1
 8016068:	dc04      	bgt.n	8016074 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 801606a:	2401      	movs	r4, #1
 801606c:	4620      	mov	r0, r4
 801606e:	b024      	add	sp, #144	@ 0x90
 8016070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016074:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016078:	ae24      	add	r6, sp, #144	@ 0x90
 801607a:	011b      	lsls	r3, r3, #4
 801607c:	f846 3d74 	str.w	r3, [r6, #-116]!
 8016080:	4630      	mov	r0, r6
 8016082:	f7ff fe74 	bl	8015d6e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016086:	8839      	ldrh	r1, [r7, #0]
 8016088:	88ba      	ldrh	r2, [r7, #4]
 801608a:	b280      	uxth	r0, r0
 801608c:	6823      	ldr	r3, [r4, #0]
 801608e:	440a      	add	r2, r1
 8016090:	1a09      	subs	r1, r1, r0
 8016092:	4402      	add	r2, r0
 8016094:	f10d 000a 	add.w	r0, sp, #10
 8016098:	b209      	sxth	r1, r1
 801609a:	9000      	str	r0, [sp, #0]
 801609c:	b212      	sxth	r2, r2
 801609e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80160a2:	4620      	mov	r0, r4
 80160a4:	ab02      	add	r3, sp, #8
 80160a6:	47c0      	blx	r8
 80160a8:	2800      	cmp	r0, #0
 80160aa:	d0de      	beq.n	801606a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80160ac:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80160b0:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80160b4:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 80160b8:	18ca      	adds	r2, r1, r3
 80160ba:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80160be:	f8ad 100e 	strh.w	r1, [sp, #14]
 80160c2:	4639      	mov	r1, r7
 80160c4:	1a9b      	subs	r3, r3, r2
 80160c6:	2200      	movs	r2, #0
 80160c8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80160cc:	a803      	add	r0, sp, #12
 80160ce:	f8ad 200c 	strh.w	r2, [sp, #12]
 80160d2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80160d6:	f7fb ffdf 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 80160da:	4629      	mov	r1, r5
 80160dc:	a805      	add	r0, sp, #20
 80160de:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80160e0:	f004 fda4 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80160e4:	682b      	ldr	r3, [r5, #0]
 80160e6:	4628      	mov	r0, r5
 80160e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80160ea:	4798      	blx	r3
 80160ec:	ab03      	add	r3, sp, #12
 80160ee:	9000      	str	r0, [sp, #0]
 80160f0:	aa05      	add	r2, sp, #20
 80160f2:	4639      	mov	r1, r7
 80160f4:	4630      	mov	r0, r6
 80160f6:	f011 fb7f 	bl	80277f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80160fa:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 80160fe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016102:	2f00      	cmp	r7, #0
 8016104:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016108:	dd03      	ble.n	8016112 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801610a:	42bb      	cmp	r3, r7
 801610c:	da01      	bge.n	8016112 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801610e:	42ba      	cmp	r2, r7
 8016110:	da11      	bge.n	8016136 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016112:	9200      	str	r2, [sp, #0]
 8016114:	4622      	mov	r2, r4
 8016116:	4631      	mov	r1, r6
 8016118:	4628      	mov	r0, r5
 801611a:	f7ff ff0e 	bl	8015f3a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801611e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016122:	4630      	mov	r0, r6
 8016124:	f011 fbfc 	bl	8027920 <_ZN8touchgfx6Canvas6renderEh>
 8016128:	4b0b      	ldr	r3, [pc, #44]	@ (8016158 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 801612a:	4604      	mov	r4, r0
 801612c:	a80c      	add	r0, sp, #48	@ 0x30
 801612e:	9307      	str	r3, [sp, #28]
 8016130:	f001 f8c8 	bl	80172c4 <_ZN8touchgfx7OutlineD1Ev>
 8016134:	e79a      	b.n	801606c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8016136:	1e7a      	subs	r2, r7, #1
 8016138:	4631      	mov	r1, r6
 801613a:	4628      	mov	r0, r5
 801613c:	b212      	sxth	r2, r2
 801613e:	9200      	str	r2, [sp, #0]
 8016140:	4622      	mov	r2, r4
 8016142:	f7ff fefa 	bl	8015f3a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8016146:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	463b      	mov	r3, r7
 801614e:	e7e1      	b.n	8016114 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016150:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8016154:	deff      	udf	#255	@ 0xff
 8016156:	bf00      	nop
 8016158:	0802d854 	.word	0x0802d854

0801615c <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 801615c:	b510      	push	{r4, lr}
 801615e:	4604      	mov	r4, r0
 8016160:	f7ff fc49 	bl	80159f6 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8016164:	4620      	mov	r0, r4
 8016166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801616a:	f7ff ba1a 	b.w	80155a2 <_ZN8touchgfx17AbstractDataGraph5clearEv>

0801616e <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 801616e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016170:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8016174:	460f      	mov	r7, r1
 8016176:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 801617a:	4604      	mov	r4, r0
 801617c:	1c6b      	adds	r3, r5, #1
 801617e:	4629      	mov	r1, r5
 8016180:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 8016184:	6803      	ldr	r3, [r0, #0]
 8016186:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801618a:	4798      	blx	r3
 801618c:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8016190:	b915      	cbnz	r5, 8016198 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8016192:	4620      	mov	r0, r4
 8016194:	f7ff fc2f 	bl	80159f6 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8016198:	4620      	mov	r0, r4
 801619a:	4629      	mov	r1, r5
 801619c:	f7ff fc03 	bl	80159a6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80161a0:	4628      	mov	r0, r5
 80161a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080161a4 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 80161a4:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 80161a8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 80161ac:	4291      	cmp	r1, r2
 80161ae:	db03      	blt.n	80161b8 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80161b6:	4718      	bx	r3
 80161b8:	4770      	bx	lr

080161ba <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 80161ba:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80161be:	4770      	bx	lr

080161c0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 80161c0:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80161c4:	4770      	bx	lr

080161c6 <_ZN8touchgfx13ScalableImageD1Ev>:
 80161c6:	4770      	bx	lr

080161c8 <_ZN8touchgfx13ScalableImageD0Ev>:
 80161c8:	b510      	push	{r4, lr}
 80161ca:	4604      	mov	r4, r0
 80161cc:	212c      	movs	r1, #44	@ 0x2c
 80161ce:	f011 ff93 	bl	80280f8 <_ZdlPvj>
 80161d2:	4620      	mov	r0, r4
 80161d4:	bd10      	pop	{r4, pc}

080161d6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 80161d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161d8:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80161dc:	b085      	sub	sp, #20
 80161de:	4604      	mov	r4, r0
 80161e0:	460d      	mov	r5, r1
 80161e2:	2bff      	cmp	r3, #255	@ 0xff
 80161e4:	d128      	bne.n	8016238 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80161e6:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 80161ea:	4668      	mov	r0, sp
 80161ec:	4631      	mov	r1, r6
 80161ee:	f007 f9d1 	bl	801d594 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80161f2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80161f6:	4630      	mov	r0, r6
 80161f8:	f007 f964 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80161fc:	4287      	cmp	r7, r0
 80161fe:	d11b      	bne.n	8016238 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8016200:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016204:	4630      	mov	r0, r6
 8016206:	f007 f991 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801620a:	4287      	cmp	r7, r0
 801620c:	d114      	bne.n	8016238 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 801620e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8016212:	2100      	movs	r1, #0
 8016214:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8016218:	f8ad 300e 	strh.w	r3, [sp, #14]
 801621c:	466b      	mov	r3, sp
 801621e:	9102      	str	r1, [sp, #8]
 8016220:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016224:	cb03      	ldmia	r3!, {r0, r1}
 8016226:	6020      	str	r0, [r4, #0]
 8016228:	4620      	mov	r0, r4
 801622a:	6061      	str	r1, [r4, #4]
 801622c:	4619      	mov	r1, r3
 801622e:	f7fb ff33 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8016232:	4620      	mov	r0, r4
 8016234:	b005      	add	sp, #20
 8016236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016238:	2300      	movs	r3, #0
 801623a:	8023      	strh	r3, [r4, #0]
 801623c:	8063      	strh	r3, [r4, #2]
 801623e:	80a3      	strh	r3, [r4, #4]
 8016240:	80e3      	strh	r3, [r4, #6]
 8016242:	e7f6      	b.n	8016232 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

08016244 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8016244:	b538      	push	{r3, r4, r5, lr}
 8016246:	2300      	movs	r3, #0
 8016248:	2501      	movs	r5, #1
 801624a:	4604      	mov	r4, r0
 801624c:	8083      	strh	r3, [r0, #4]
 801624e:	80c3      	strh	r3, [r0, #6]
 8016250:	8103      	strh	r3, [r0, #8]
 8016252:	8143      	strh	r3, [r0, #10]
 8016254:	8183      	strh	r3, [r0, #12]
 8016256:	81c3      	strh	r3, [r0, #14]
 8016258:	8203      	strh	r3, [r0, #16]
 801625a:	8243      	strh	r3, [r0, #18]
 801625c:	61c3      	str	r3, [r0, #28]
 801625e:	8403      	strh	r3, [r0, #32]
 8016260:	8443      	strh	r3, [r0, #34]	@ 0x22
 8016262:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8016266:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801626a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801626e:	4b07      	ldr	r3, [pc, #28]	@ (801628c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8016270:	6003      	str	r3, [r0, #0]
 8016272:	880b      	ldrh	r3, [r1, #0]
 8016274:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016276:	23ff      	movs	r3, #255	@ 0xff
 8016278:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801627c:	f000 febd 	bl	8016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016280:	4b03      	ldr	r3, [pc, #12]	@ (8016290 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8016282:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8016286:	4620      	mov	r0, r4
 8016288:	6023      	str	r3, [r4, #0]
 801628a:	bd38      	pop	{r3, r4, r5, pc}
 801628c:	0802d404 	.word	0x0802d404
 8016290:	0802d224 	.word	0x0802d224

08016294 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8016294:	4603      	mov	r3, r0
 8016296:	3026      	adds	r0, #38	@ 0x26
 8016298:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801629c:	b90b      	cbnz	r3, 80162a2 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801629e:	f005 b88d 	b.w	801b3bc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80162a2:	f005 b89b 	b.w	801b3dc <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080162a8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80162a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ac:	4604      	mov	r4, r0
 80162ae:	b0b3      	sub	sp, #204	@ 0xcc
 80162b0:	469b      	mov	fp, r3
 80162b2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80162b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80162ba:	2500      	movs	r5, #0
 80162bc:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80162c0:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80162c4:	ab11      	add	r3, sp, #68	@ 0x44
 80162c6:	9206      	str	r2, [sp, #24]
 80162c8:	4618      	mov	r0, r3
 80162ca:	9511      	str	r5, [sp, #68]	@ 0x44
 80162cc:	9307      	str	r3, [sp, #28]
 80162ce:	ad13      	add	r5, sp, #76	@ 0x4c
 80162d0:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 80162d4:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 80162d8:	f7fb fede 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 80162dc:	9b07      	ldr	r3, [sp, #28]
 80162de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80162e6:	6821      	ldr	r1, [r4, #0]
 80162e8:	4620      	mov	r0, r4
 80162ea:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80162ec:	4629      	mov	r1, r5
 80162ee:	47b0      	blx	r6
 80162f0:	4621      	mov	r1, r4
 80162f2:	a815      	add	r0, sp, #84	@ 0x54
 80162f4:	1d26      	adds	r6, r4, #4
 80162f6:	f004 fc99 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162fa:	a815      	add	r0, sp, #84	@ 0x54
 80162fc:	f003 f9ca 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016300:	9b07      	ldr	r3, [sp, #28]
 8016302:	4631      	mov	r1, r6
 8016304:	4618      	mov	r0, r3
 8016306:	f003 fa09 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801630a:	4628      	mov	r0, r5
 801630c:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8016310:	f003 f9c0 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016314:	4628      	mov	r0, r5
 8016316:	f007 f9c7 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801631a:	9007      	str	r0, [sp, #28]
 801631c:	2800      	cmp	r0, #0
 801631e:	f000 80ce 	beq.w	80164be <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8016322:	f8db 200c 	ldr.w	r2, [fp, #12]
 8016326:	a809      	add	r0, sp, #36	@ 0x24
 8016328:	f8db 1000 	ldr.w	r1, [fp]
 801632c:	920c      	str	r2, [sp, #48]	@ 0x30
 801632e:	f8da 2000 	ldr.w	r2, [sl]
 8016332:	9109      	str	r1, [sp, #36]	@ 0x24
 8016334:	920d      	str	r2, [sp, #52]	@ 0x34
 8016336:	f8da 2004 	ldr.w	r2, [sl, #4]
 801633a:	f8db 1004 	ldr.w	r1, [fp, #4]
 801633e:	920e      	str	r2, [sp, #56]	@ 0x38
 8016340:	f8da 2008 	ldr.w	r2, [sl, #8]
 8016344:	910a      	str	r1, [sp, #40]	@ 0x28
 8016346:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016348:	f8db 1008 	ldr.w	r1, [fp, #8]
 801634c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8016350:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016352:	a90d      	add	r1, sp, #52	@ 0x34
 8016354:	9210      	str	r2, [sp, #64]	@ 0x40
 8016356:	4632      	mov	r2, r6
 8016358:	f003 f9c4 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801635c:	4632      	mov	r2, r6
 801635e:	a90e      	add	r1, sp, #56	@ 0x38
 8016360:	a80a      	add	r0, sp, #40	@ 0x28
 8016362:	f003 f9bf 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016366:	4632      	mov	r2, r6
 8016368:	a90f      	add	r1, sp, #60	@ 0x3c
 801636a:	a80b      	add	r0, sp, #44	@ 0x2c
 801636c:	f003 f9ba 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016370:	4632      	mov	r2, r6
 8016372:	a910      	add	r1, sp, #64	@ 0x40
 8016374:	a80c      	add	r0, sp, #48	@ 0x30
 8016376:	f003 f9b5 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801637a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 801637e:	ed97 3a00 	vldr	s6, [r7]
 8016382:	eef0 6a67 	vmov.f32	s13, s15
 8016386:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801638a:	edd7 4a01 	vldr	s9, [r7, #4]
 801638e:	eeb0 7a67 	vmov.f32	s14, s15
 8016392:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8016396:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801639a:	ed99 2a00 	vldr	s4, [r9]
 801639e:	eeb0 6a67 	vmov.f32	s12, s15
 80163a2:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80163a6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80163aa:	edd8 2a00 	vldr	s5, [r8]
 80163ae:	edd9 3a01 	vldr	s7, [r9, #4]
 80163b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80163b6:	ed98 4a01 	vldr	s8, [r8, #4]
 80163ba:	ed99 5a02 	vldr	s10, [r9, #8]
 80163be:	edd8 5a02 	vldr	s11, [r8, #8]
 80163c2:	ee16 6a10 	vmov	r6, s12
 80163c6:	eeb0 6a67 	vmov.f32	s12, s15
 80163ca:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80163ce:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80163d2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80163d6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80163da:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80163de:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 80163e2:	ee16 0a10 	vmov	r0, s12
 80163e6:	eeb0 6a67 	vmov.f32	s12, s15
 80163ea:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80163ee:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 80163f2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80163f6:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 80163fa:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 80163fe:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8016402:	ee16 1a10 	vmov	r1, s12
 8016406:	eeb0 6a67 	vmov.f32	s12, s15
 801640a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801640e:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8016412:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8016416:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 801641a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801641e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8016422:	68ff      	ldr	r7, [r7, #12]
 8016424:	ee16 2a10 	vmov	r2, s12
 8016428:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 801642c:	9624      	str	r6, [sp, #144]	@ 0x90
 801642e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8016432:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8016436:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 801643a:	4628      	mov	r0, r5
 801643c:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8016440:	9b06      	ldr	r3, [sp, #24]
 8016442:	922d      	str	r2, [sp, #180]	@ 0xb4
 8016444:	4a1f      	ldr	r2, [pc, #124]	@ (80164c4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 8016446:	9317      	str	r3, [sp, #92]	@ 0x5c
 8016448:	8812      	ldrh	r2, [r2, #0]
 801644a:	9b07      	ldr	r3, [sp, #28]
 801644c:	9218      	str	r2, [sp, #96]	@ 0x60
 801644e:	9319      	str	r3, [sp, #100]	@ 0x64
 8016450:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8016454:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8016458:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 801645c:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8016460:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8016464:	9731      	str	r7, [sp, #196]	@ 0xc4
 8016466:	f007 f94f 	bl	801d708 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801646a:	901a      	str	r0, [sp, #104]	@ 0x68
 801646c:	4628      	mov	r0, r5
 801646e:	f007 f829 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016472:	901b      	str	r0, [sp, #108]	@ 0x6c
 8016474:	4628      	mov	r0, r5
 8016476:	f007 f859 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801647a:	901c      	str	r0, [sp, #112]	@ 0x70
 801647c:	4628      	mov	r0, r5
 801647e:	f007 f821 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016482:	4b11      	ldr	r3, [pc, #68]	@ (80164c8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8016484:	901d      	str	r0, [sp, #116]	@ 0x74
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801648c:	b10a      	cbz	r2, 8016492 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 801648e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8016490:	b905      	cbnz	r5, 8016494 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8016492:	689d      	ldr	r5, [r3, #8]
 8016494:	682b      	ldr	r3, [r5, #0]
 8016496:	4620      	mov	r0, r4
 8016498:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 801649a:	f7ff fefb 	bl	8016294 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801649e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80164a2:	aa1e      	add	r2, sp, #120	@ 0x78
 80164a4:	a917      	add	r1, sp, #92	@ 0x5c
 80164a6:	9304      	str	r3, [sp, #16]
 80164a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80164ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80164b0:	ab13      	add	r3, sp, #76	@ 0x4c
 80164b2:	4628      	mov	r0, r5
 80164b4:	9301      	str	r3, [sp, #4]
 80164b6:	ab15      	add	r3, sp, #84	@ 0x54
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	ab19      	add	r3, sp, #100	@ 0x64
 80164bc:	47b0      	blx	r6
 80164be:	b033      	add	sp, #204	@ 0xcc
 80164c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c4:	2402851a 	.word	0x2402851a
 80164c8:	24028520 	.word	0x24028520

080164cc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80164cc:	b570      	push	{r4, r5, r6, lr}
 80164ce:	ed2d 8b04 	vpush	{d8-d9}
 80164d2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80164d6:	b098      	sub	sp, #96	@ 0x60
 80164d8:	4604      	mov	r4, r0
 80164da:	460e      	mov	r6, r1
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d065      	beq.n	80165ac <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 80164e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80164e4:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80164e8:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 80165c8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 80164ec:	ee09 3a10 	vmov	s18, r3
 80164f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80164f4:	4628      	mov	r0, r5
 80164f6:	ee08 3a90 	vmov	s17, r3
 80164fa:	4b34      	ldr	r3, [pc, #208]	@ (80165cc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 80164fc:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8016500:	930c      	str	r3, [sp, #48]	@ 0x30
 8016502:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8016506:	930d      	str	r3, [sp, #52]	@ 0x34
 8016508:	930e      	str	r3, [sp, #56]	@ 0x38
 801650a:	ee39 9a08 	vadd.f32	s18, s18, s16
 801650e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016510:	f006 ffd8 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016514:	ee07 0a90 	vmov	s15, r0
 8016518:	4628      	mov	r0, r5
 801651a:	ee78 8a88 	vadd.f32	s17, s17, s16
 801651e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8016522:	f007 f803 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016526:	4b2a      	ldr	r3, [pc, #168]	@ (80165d0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8016528:	ee07 0a90 	vmov	s15, r0
 801652c:	781b      	ldrb	r3, [r3, #0]
 801652e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016532:	eef0 7a48 	vmov.f32	s15, s16
 8016536:	2b01      	cmp	r3, #1
 8016538:	d13c      	bne.n	80165b4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801653a:	eef0 6a69 	vmov.f32	s13, s19
 801653e:	ee19 3a90 	vmov	r3, s19
 8016542:	eeb0 6a47 	vmov.f32	s12, s14
 8016546:	eef0 5a47 	vmov.f32	s11, s14
 801654a:	eef0 9a48 	vmov.f32	s19, s16
 801654e:	eeb0 7a48 	vmov.f32	s14, s16
 8016552:	9314      	str	r3, [sp, #80]	@ 0x50
 8016554:	ab14      	add	r3, sp, #80	@ 0x50
 8016556:	2200      	movs	r2, #0
 8016558:	4631      	mov	r1, r6
 801655a:	9303      	str	r3, [sp, #12]
 801655c:	ab10      	add	r3, sp, #64	@ 0x40
 801655e:	4620      	mov	r0, r4
 8016560:	edcd 7a04 	vstr	s15, [sp, #16]
 8016564:	9302      	str	r3, [sp, #8]
 8016566:	ab0c      	add	r3, sp, #48	@ 0x30
 8016568:	ed8d 9a05 	vstr	s18, [sp, #20]
 801656c:	9301      	str	r3, [sp, #4]
 801656e:	ab08      	add	r3, sp, #32
 8016570:	ed8d 9a06 	vstr	s18, [sp, #24]
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	ab04      	add	r3, sp, #16
 8016578:	edcd 7a07 	vstr	s15, [sp, #28]
 801657c:	edcd 7a08 	vstr	s15, [sp, #32]
 8016580:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8016584:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8016588:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 801658c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8016590:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8016594:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8016598:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801659c:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80165a0:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 80165a4:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 80165a8:	f7ff fe7e 	bl	80162a8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80165ac:	b018      	add	sp, #96	@ 0x60
 80165ae:	ecbd 8b04 	vpop	{d8-d9}
 80165b2:	bd70      	pop	{r4, r5, r6, pc}
 80165b4:	eef0 6a47 	vmov.f32	s13, s14
 80165b8:	ee18 3a10 	vmov	r3, s16
 80165bc:	eef0 5a69 	vmov.f32	s11, s19
 80165c0:	eeb0 6a48 	vmov.f32	s12, s16
 80165c4:	e7c5      	b.n	8016552 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 80165c6:	bf00      	nop
 80165c8:	00000000 	.word	0x00000000
 80165cc:	42c80000 	.word	0x42c80000
 80165d0:	24028518 	.word	0x24028518

080165d4 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80165d4:	2000      	movs	r0, #0
 80165d6:	4770      	bx	lr

080165d8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80165d8:	4b07      	ldr	r3, [pc, #28]	@ (80165f8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80165da:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80165dc:	881b      	ldrh	r3, [r3, #0]
 80165de:	4293      	cmp	r3, r2
 80165e0:	bf81      	itttt	hi
 80165e2:	4b06      	ldrhi	r3, [pc, #24]	@ (80165fc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80165e4:	681b      	ldrhi	r3, [r3, #0]
 80165e6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80165ea:	7858      	ldrbhi	r0, [r3, #1]
 80165ec:	bf8c      	ite	hi
 80165ee:	f000 0003 	andhi.w	r0, r0, #3
 80165f2:	2000      	movls	r0, #0
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	2402857c 	.word	0x2402857c
 80165fc:	24028578 	.word	0x24028578

08016600 <_ZN8touchgfx8TextAreaD1Ev>:
 8016600:	4770      	bx	lr
	...

08016604 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8016604:	4b11      	ldr	r3, [pc, #68]	@ (801664c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8016606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801660a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801660c:	4604      	mov	r4, r0
 801660e:	881b      	ldrh	r3, [r3, #0]
 8016610:	428b      	cmp	r3, r1
 8016612:	d918      	bls.n	8016646 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016614:	6803      	ldr	r3, [r0, #0]
 8016616:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8016618:	4b0d      	ldr	r3, [pc, #52]	@ (8016650 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801661a:	6818      	ldr	r0, [r3, #0]
 801661c:	f7f1 fff0 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	4606      	mov	r6, r0
 8016624:	4620      	mov	r0, r4
 8016626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016628:	4798      	blx	r3
 801662a:	6823      	ldr	r3, [r4, #0]
 801662c:	4607      	mov	r7, r0
 801662e:	4620      	mov	r0, r4
 8016630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016634:	4798      	blx	r3
 8016636:	463a      	mov	r2, r7
 8016638:	4603      	mov	r3, r0
 801663a:	4631      	mov	r1, r6
 801663c:	4620      	mov	r0, r4
 801663e:	46ac      	mov	ip, r5
 8016640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016644:	4760      	bx	ip
 8016646:	2000      	movs	r0, #0
 8016648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664c:	2402857c 	.word	0x2402857c
 8016650:	24028584 	.word	0x24028584

08016654 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016654:	4b18      	ldr	r3, [pc, #96]	@ (80166b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016656:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801665a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801665c:	4604      	mov	r4, r0
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	428b      	cmp	r3, r1
 8016662:	d926      	bls.n	80166b2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8016664:	4b15      	ldr	r3, [pc, #84]	@ (80166bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801666c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016670:	4b13      	ldr	r3, [pc, #76]	@ (80166c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016672:	7855      	ldrb	r5, [r2, #1]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801667a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801667e:	6833      	ldr	r3, [r6, #0]
 8016680:	69df      	ldr	r7, [r3, #28]
 8016682:	4b10      	ldr	r3, [pc, #64]	@ (80166c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016684:	6818      	ldr	r0, [r3, #0]
 8016686:	f7f1 ffbb 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 801668a:	6823      	ldr	r3, [r4, #0]
 801668c:	4680      	mov	r8, r0
 801668e:	4620      	mov	r0, r4
 8016690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016692:	4798      	blx	r3
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	4681      	mov	r9, r0
 8016698:	4620      	mov	r0, r4
 801669a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801669e:	4798      	blx	r3
 80166a0:	464b      	mov	r3, r9
 80166a2:	9000      	str	r0, [sp, #0]
 80166a4:	4642      	mov	r2, r8
 80166a6:	4629      	mov	r1, r5
 80166a8:	4630      	mov	r0, r6
 80166aa:	47b8      	blx	r7
 80166ac:	b003      	add	sp, #12
 80166ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166b2:	2000      	movs	r0, #0
 80166b4:	e7fa      	b.n	80166ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80166b6:	bf00      	nop
 80166b8:	2402857c 	.word	0x2402857c
 80166bc:	24028578 	.word	0x24028578
 80166c0:	24028580 	.word	0x24028580
 80166c4:	24028584 	.word	0x24028584

080166c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80166c8:	b40e      	push	{r1, r2, r3}
 80166ca:	4b30      	ldr	r3, [pc, #192]	@ (801678c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80166cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d0:	881a      	ldrh	r2, [r3, #0]
 80166d2:	b09d      	sub	sp, #116	@ 0x74
 80166d4:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80166d6:	4604      	mov	r4, r0
 80166d8:	429a      	cmp	r2, r3
 80166da:	d954      	bls.n	8016786 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80166dc:	aa26      	add	r2, sp, #152	@ 0x98
 80166de:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8016790 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80166e2:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8016794 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80166e6:	9202      	str	r2, [sp, #8]
 80166e8:	f8d9 2000 	ldr.w	r2, [r9]
 80166ec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80166f0:	f8d8 3000 	ldr.w	r3, [r8]
 80166f4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80166f8:	682b      	ldr	r3, [r5, #0]
 80166fa:	4628      	mov	r0, r5
 80166fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166fe:	4798      	blx	r3
 8016700:	4606      	mov	r6, r0
 8016702:	b207      	sxth	r7, r0
 8016704:	a803      	add	r0, sp, #12
 8016706:	f005 fa82 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801670a:	682b      	ldr	r3, [r5, #0]
 801670c:	4628      	mov	r0, r5
 801670e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016710:	4798      	blx	r3
 8016712:	682b      	ldr	r3, [r5, #0]
 8016714:	4682      	mov	sl, r0
 8016716:	4628      	mov	r0, r5
 8016718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801671a:	4798      	blx	r3
 801671c:	4653      	mov	r3, sl
 801671e:	9000      	str	r0, [sp, #0]
 8016720:	a803      	add	r0, sp, #12
 8016722:	9a02      	ldr	r2, [sp, #8]
 8016724:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016726:	f005 facd 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801672a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801672c:	f8d9 3000 	ldr.w	r3, [r9]
 8016730:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8016734:	8925      	ldrh	r5, [r4, #8]
 8016736:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801673a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801673e:	eba5 050c 	sub.w	r5, r5, ip
 8016742:	784a      	ldrb	r2, [r1, #1]
 8016744:	f8d8 3000 	ldr.w	r3, [r8]
 8016748:	b22d      	sxth	r5, r5
 801674a:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 801674e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016752:	9500      	str	r5, [sp, #0]
 8016754:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016758:	a803      	add	r0, sp, #12
 801675a:	f002 fca1 	bl	80190a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801675e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8016762:	b203      	sxth	r3, r0
 8016764:	18b9      	adds	r1, r7, r2
 8016766:	2900      	cmp	r1, #0
 8016768:	dd0b      	ble.n	8016782 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801676a:	3b01      	subs	r3, #1
 801676c:	fb13 f302 	smulbb	r3, r3, r2
 8016770:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016774:	b21f      	sxth	r7, r3
 8016776:	4638      	mov	r0, r7
 8016778:	b01d      	add	sp, #116	@ 0x74
 801677a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801677e:	b003      	add	sp, #12
 8016780:	4770      	bx	lr
 8016782:	2b00      	cmp	r3, #0
 8016784:	dcf7      	bgt.n	8016776 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016786:	2700      	movs	r7, #0
 8016788:	e7f5      	b.n	8016776 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801678a:	bf00      	nop
 801678c:	2402857c 	.word	0x2402857c
 8016790:	24028578 	.word	0x24028578
 8016794:	24028580 	.word	0x24028580

08016798 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8016798:	4bbd      	ldr	r3, [pc, #756]	@ (8016a90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801679a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679e:	460c      	mov	r4, r1
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 80167a4:	b0a9      	sub	sp, #164	@ 0xa4
 80167a6:	4680      	mov	r8, r0
 80167a8:	428b      	cmp	r3, r1
 80167aa:	d809      	bhi.n	80167c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80167ac:	2300      	movs	r3, #0
 80167ae:	f04f 32ff 	mov.w	r2, #4294967295
 80167b2:	6083      	str	r3, [r0, #8]
 80167b4:	e9c0 3200 	strd	r3, r2, [r0]
 80167b8:	4640      	mov	r0, r8
 80167ba:	b029      	add	sp, #164	@ 0xa4
 80167bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c0:	4eb4      	ldr	r6, [pc, #720]	@ (8016a94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 80167c2:	6833      	ldr	r3, [r6, #0]
 80167c4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80167c8:	4bb3      	ldr	r3, [pc, #716]	@ (8016a98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80167d0:	4bb2      	ldr	r3, [pc, #712]	@ (8016a9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80167d2:	6818      	ldr	r0, [r3, #0]
 80167d4:	f7f1 ff14 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 80167d8:	682b      	ldr	r3, [r5, #0]
 80167da:	4681      	mov	r9, r0
 80167dc:	4628      	mov	r0, r5
 80167de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167e0:	4798      	blx	r3
 80167e2:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 80167e4:	b203      	sxth	r3, r0
 80167e6:	4682      	mov	sl, r0
 80167e8:	4407      	add	r7, r0
 80167ea:	a80f      	add	r0, sp, #60	@ 0x3c
 80167ec:	9304      	str	r3, [sp, #16]
 80167ee:	b2bb      	uxth	r3, r7
 80167f0:	9303      	str	r3, [sp, #12]
 80167f2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	f040 80a5 	bne.w	8016946 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80167fc:	f005 fa07 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 8016800:	682b      	ldr	r3, [r5, #0]
 8016802:	4628      	mov	r0, r5
 8016804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016806:	4798      	blx	r3
 8016808:	682b      	ldr	r3, [r5, #0]
 801680a:	4606      	mov	r6, r0
 801680c:	4628      	mov	r0, r5
 801680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016810:	4798      	blx	r3
 8016812:	6823      	ldr	r3, [r4, #0]
 8016814:	4607      	mov	r7, r0
 8016816:	4620      	mov	r0, r4
 8016818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801681a:	4798      	blx	r3
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	4683      	mov	fp, r0
 8016820:	4620      	mov	r0, r4
 8016822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016826:	4798      	blx	r3
 8016828:	463b      	mov	r3, r7
 801682a:	4649      	mov	r1, r9
 801682c:	4632      	mov	r2, r6
 801682e:	2600      	movs	r6, #0
 8016830:	e9cd b000 	strd	fp, r0, [sp]
 8016834:	a80f      	add	r0, sp, #60	@ 0x3c
 8016836:	4637      	mov	r7, r6
 8016838:	f005 fa59 	bl	801bcee <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801683c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016840:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8016a94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8016844:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016848:	bf0c      	ite	eq
 801684a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801684e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8016852:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016854:	4629      	mov	r1, r5
 8016856:	f8db 3000 	ldr.w	r3, [fp]
 801685a:	a80f      	add	r0, sp, #60	@ 0x3c
 801685c:	3701      	adds	r7, #1
 801685e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016862:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016866:	b2bf      	uxth	r7, r7
 8016868:	785b      	ldrb	r3, [r3, #1]
 801686a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801686e:	f002 f91e 	bl	8018aae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016872:	9b03      	ldr	r3, [sp, #12]
 8016874:	4286      	cmp	r6, r0
 8016876:	eba9 0903 	sub.w	r9, r9, r3
 801687a:	bfb8      	it	lt
 801687c:	4606      	movlt	r6, r0
 801687e:	a80f      	add	r0, sp, #60	@ 0x3c
 8016880:	fa0f f989 	sxth.w	r9, r9
 8016884:	b236      	sxth	r6, r6
 8016886:	f005 f9e9 	bl	801bc5c <_ZN8touchgfx12TextProvider11endOfStringEv>
 801688a:	b918      	cbnz	r0, 8016894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801688c:	7a2b      	ldrb	r3, [r5, #8]
 801688e:	444b      	add	r3, r9
 8016890:	2b00      	cmp	r3, #0
 8016892:	dcde      	bgt.n	8016852 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8016894:	9b03      	ldr	r3, [sp, #12]
 8016896:	4620      	mov	r0, r4
 8016898:	9a04      	ldr	r2, [sp, #16]
 801689a:	fb13 f707 	smulbb	r7, r3, r7
 801689e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80168a0:	f895 9009 	ldrb.w	r9, [r5, #9]
 80168a4:	1aff      	subs	r7, r7, r3
 80168a6:	b2bf      	uxth	r7, r7
 80168a8:	b23b      	sxth	r3, r7
 80168aa:	429a      	cmp	r2, r3
 80168ac:	bfa8      	it	ge
 80168ae:	4657      	movge	r7, sl
 80168b0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80168b4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80168b8:	6823      	ldr	r3, [r4, #0]
 80168ba:	444f      	add	r7, r9
 80168bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168be:	bf08      	it	eq
 80168c0:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 80168c4:	fa1f f987 	uxth.w	r9, r7
 80168c8:	bf18      	it	ne
 80168ca:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 80168ce:	4798      	blx	r3
 80168d0:	2801      	cmp	r0, #1
 80168d2:	fa0f f789 	sxth.w	r7, r9
 80168d6:	b2b3      	uxth	r3, r6
 80168d8:	f000 80e2 	beq.w	8016aa0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80168dc:	2802      	cmp	r0, #2
 80168de:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 80168e2:	f000 80e3 	beq.w	8016aac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80168e6:	7aea      	ldrb	r2, [r5, #11]
 80168e8:	b236      	sxth	r6, r6
 80168ea:	7b2d      	ldrb	r5, [r5, #12]
 80168ec:	1ab6      	subs	r6, r6, r2
 80168ee:	442a      	add	r2, r5
 80168f0:	fa1f fa86 	uxth.w	sl, r6
 80168f4:	4413      	add	r3, r2
 80168f6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80168fa:	fa0f fb8a 	sxth.w	fp, sl
 80168fe:	b29b      	uxth	r3, r3
 8016900:	2a02      	cmp	r2, #2
 8016902:	b21e      	sxth	r6, r3
 8016904:	f000 80d6 	beq.w	8016ab4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8016908:	2a03      	cmp	r2, #3
 801690a:	f000 80de 	beq.w	8016aca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801690e:	2a01      	cmp	r2, #1
 8016910:	f040 80e6 	bne.w	8016ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8016914:	8925      	ldrh	r5, [r4, #8]
 8016916:	4633      	mov	r3, r6
 8016918:	463e      	mov	r6, r7
 801691a:	eba5 0909 	sub.w	r9, r5, r9
 801691e:	461f      	mov	r7, r3
 8016920:	465d      	mov	r5, fp
 8016922:	fa0f fb89 	sxth.w	fp, r9
 8016926:	4b5d      	ldr	r3, [pc, #372]	@ (8016a9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8016928:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801692a:	6818      	ldr	r0, [r3, #0]
 801692c:	f7f1 fe68 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016930:	f8a8 b000 	strh.w	fp, [r8]
 8016934:	f8a8 5002 	strh.w	r5, [r8, #2]
 8016938:	f8a8 6004 	strh.w	r6, [r8, #4]
 801693c:	f8a8 7006 	strh.w	r7, [r8, #6]
 8016940:	f8c8 0008 	str.w	r0, [r8, #8]
 8016944:	e738      	b.n	80167b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8016946:	f005 f962 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801694a:	682b      	ldr	r3, [r5, #0]
 801694c:	4628      	mov	r0, r5
 801694e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016950:	4798      	blx	r3
 8016952:	682b      	ldr	r3, [r5, #0]
 8016954:	4607      	mov	r7, r0
 8016956:	4628      	mov	r0, r5
 8016958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801695a:	4798      	blx	r3
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	4683      	mov	fp, r0
 8016960:	4620      	mov	r0, r4
 8016962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016964:	4798      	blx	r3
 8016966:	6822      	ldr	r2, [r4, #0]
 8016968:	9005      	str	r0, [sp, #20]
 801696a:	4620      	mov	r0, r4
 801696c:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8016970:	4790      	blx	r2
 8016972:	9b05      	ldr	r3, [sp, #20]
 8016974:	463a      	mov	r2, r7
 8016976:	4649      	mov	r1, r9
 8016978:	9001      	str	r0, [sp, #4]
 801697a:	a80f      	add	r0, sp, #60	@ 0x3c
 801697c:	9300      	str	r3, [sp, #0]
 801697e:	465b      	mov	r3, fp
 8016980:	f005 f9b5 	bl	801bcee <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016984:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016988:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801698c:	af0f      	add	r7, sp, #60	@ 0x3c
 801698e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016992:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016996:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016998:	bf0a      	itet	eq
 801699a:	464a      	moveq	r2, r9
 801699c:	461a      	movne	r2, r3
 801699e:	4699      	moveq	r9, r3
 80169a0:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 80169a4:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 80169a8:	1ad2      	subs	r2, r2, r3
 80169aa:	6833      	ldr	r3, [r6, #0]
 80169ac:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 80169b0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80169b4:	7859      	ldrb	r1, [r3, #1]
 80169b6:	2300      	movs	r3, #0
 80169b8:	9707      	str	r7, [sp, #28]
 80169ba:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80169be:	f8ad 3018 	strh.w	r3, [sp, #24]
 80169c2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80169c6:	f88d 1020 	strb.w	r1, [sp, #32]
 80169ca:	9509      	str	r5, [sp, #36]	@ 0x24
 80169cc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80169d0:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 80169d4:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80169d8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80169dc:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80169e0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80169e4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80169e8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80169ec:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80169f0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80169f4:	b350      	cbz	r0, 8016a4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80169f6:	682b      	ldr	r3, [r5, #0]
 80169f8:	4628      	mov	r0, r5
 80169fa:	695b      	ldr	r3, [r3, #20]
 80169fc:	4798      	blx	r3
 80169fe:	4607      	mov	r7, r0
 8016a00:	b320      	cbz	r0, 8016a4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8016a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a04:	4639      	mov	r1, r7
 8016a06:	6803      	ldr	r3, [r0, #0]
 8016a08:	68db      	ldr	r3, [r3, #12]
 8016a0a:	4798      	blx	r3
 8016a0c:	4606      	mov	r6, r0
 8016a0e:	b1e8      	cbz	r0, 8016a4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8016a10:	7b43      	ldrb	r3, [r0, #13]
 8016a12:	7a82      	ldrb	r2, [r0, #10]
 8016a14:	005b      	lsls	r3, r3, #1
 8016a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a1a:	4313      	orrs	r3, r2
 8016a1c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8016a20:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8016a24:	2b06      	cmp	r3, #6
 8016a26:	d111      	bne.n	8016a4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8016a28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a2a:	4632      	mov	r2, r6
 8016a2c:	4639      	mov	r1, r7
 8016a2e:	6803      	ldr	r3, [r0, #0]
 8016a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a32:	4798      	blx	r3
 8016a34:	7b73      	ldrb	r3, [r6, #13]
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016a3c:	7ab3      	ldrb	r3, [r6, #10]
 8016a3e:	4313      	orrs	r3, r2
 8016a40:	4418      	add	r0, r3
 8016a42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016a46:	4418      	add	r0, r3
 8016a48:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8016a4c:	2600      	movs	r6, #0
 8016a4e:	4637      	mov	r7, r6
 8016a50:	a806      	add	r0, sp, #24
 8016a52:	3701      	adds	r7, #1
 8016a54:	f002 fa21 	bl	8018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016a58:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8016a5c:	9b03      	ldr	r3, [sp, #12]
 8016a5e:	b2bf      	uxth	r7, r7
 8016a60:	4286      	cmp	r6, r0
 8016a62:	eba9 0903 	sub.w	r9, r9, r3
 8016a66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016a6a:	bfb8      	it	lt
 8016a6c:	4606      	movlt	r6, r0
 8016a6e:	fa0f f989 	sxth.w	r9, r9
 8016a72:	b236      	sxth	r6, r6
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	f43f af0d 	beq.w	8016894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016a7a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	f47f af08 	bne.w	8016894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016a84:	7a2b      	ldrb	r3, [r5, #8]
 8016a86:	444b      	add	r3, r9
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	dce1      	bgt.n	8016a50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8016a8c:	e702      	b.n	8016894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016a8e:	bf00      	nop
 8016a90:	2402857c 	.word	0x2402857c
 8016a94:	24028578 	.word	0x24028578
 8016a98:	24028580 	.word	0x24028580
 8016a9c:	24028584 	.word	0x24028584
 8016aa0:	ebaa 0606 	sub.w	r6, sl, r6
 8016aa4:	2002      	movs	r0, #2
 8016aa6:	fb96 f6f0 	sdiv	r6, r6, r0
 8016aaa:	e71c      	b.n	80168e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8016aac:	441e      	add	r6, r3
 8016aae:	ebaa 0606 	sub.w	r6, sl, r6
 8016ab2:	e718      	b.n	80168e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8016ab4:	8925      	ldrh	r5, [r4, #8]
 8016ab6:	1aed      	subs	r5, r5, r3
 8016ab8:	eba5 050a 	sub.w	r5, r5, sl
 8016abc:	fa0f fb85 	sxth.w	fp, r5
 8016ac0:	8965      	ldrh	r5, [r4, #10]
 8016ac2:	eba5 0509 	sub.w	r5, r5, r9
 8016ac6:	b22d      	sxth	r5, r5
 8016ac8:	e72d      	b.n	8016926 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8016aca:	8965      	ldrh	r5, [r4, #10]
 8016acc:	f04f 0b00 	mov.w	fp, #0
 8016ad0:	1aed      	subs	r5, r5, r3
 8016ad2:	4633      	mov	r3, r6
 8016ad4:	463e      	mov	r6, r7
 8016ad6:	eba5 050a 	sub.w	r5, r5, sl
 8016ada:	461f      	mov	r7, r3
 8016adc:	b22d      	sxth	r5, r5
 8016ade:	e722      	b.n	8016926 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8016ae0:	2500      	movs	r5, #0
 8016ae2:	e720      	b.n	8016926 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08016ae4 <_ZN8touchgfx8TextAreaD0Ev>:
 8016ae4:	b510      	push	{r4, lr}
 8016ae6:	4604      	mov	r4, r0
 8016ae8:	2148      	movs	r1, #72	@ 0x48
 8016aea:	f011 fb05 	bl	80280f8 <_ZdlPvj>
 8016aee:	4620      	mov	r0, r4
 8016af0:	bd10      	pop	{r4, pc}
	...

08016af4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8016af4:	b513      	push	{r0, r1, r4, lr}
 8016af6:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8016afa:	4604      	mov	r4, r0
 8016afc:	b1fb      	cbz	r3, 8016b3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016afe:	4b16      	ldr	r3, [pc, #88]	@ (8016b58 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8016b00:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	428b      	cmp	r3, r1
 8016b06:	d91a      	bls.n	8016b3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016b08:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	dd16      	ble.n	8016b3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016b10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	dd12      	ble.n	8016b3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016b18:	4b10      	ldr	r3, [pc, #64]	@ (8016b5c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8016b1a:	6818      	ldr	r0, [r3, #0]
 8016b1c:	f7f1 fd70 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016b20:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8016b24:	6822      	ldr	r2, [r4, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	db06      	blt.n	8016b38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016b2a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	db02      	blt.n	8016b38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016b32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016b34:	4298      	cmp	r0, r3
 8016b36:	d004      	beq.n	8016b42 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8016b38:	6953      	ldr	r3, [r2, #20]
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	4798      	blx	r3
 8016b3e:	b002      	add	sp, #8
 8016b40:	bd10      	pop	{r4, pc}
 8016b42:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8016b46:	466b      	mov	r3, sp
 8016b48:	6912      	ldr	r2, [r2, #16]
 8016b4a:	c903      	ldmia	r1, {r0, r1}
 8016b4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b50:	4619      	mov	r1, r3
 8016b52:	4620      	mov	r0, r4
 8016b54:	4790      	blx	r2
 8016b56:	e7f2      	b.n	8016b3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016b58:	2402857c 	.word	0x2402857c
 8016b5c:	24028584 	.word	0x24028584

08016b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016b60:	4b45      	ldr	r3, [pc, #276]	@ (8016c78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8016b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b66:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016b68:	b08e      	sub	sp, #56	@ 0x38
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	4293      	cmp	r3, r2
 8016b70:	d97e      	bls.n	8016c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016b72:	6808      	ldr	r0, [r1, #0]
 8016b74:	ab05      	add	r3, sp, #20
 8016b76:	6849      	ldr	r1, [r1, #4]
 8016b78:	4d40      	ldr	r5, [pc, #256]	@ (8016c7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8016b7a:	c303      	stmia	r3!, {r0, r1}
 8016b7c:	4611      	mov	r1, r2
 8016b7e:	6828      	ldr	r0, [r5, #0]
 8016b80:	f7f1 fd3e 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016b84:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	db11      	blt.n	8016bb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016b8c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	db0d      	blt.n	8016bb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016b94:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016b96:	4298      	cmp	r0, r3
 8016b98:	d10a      	bne.n	8016bb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016b9a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8016b9e:	ab09      	add	r3, sp, #36	@ 0x24
 8016ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ba4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ba8:	4619      	mov	r1, r3
 8016baa:	a805      	add	r0, sp, #20
 8016bac:	f7fb fa74 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8016bb0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	dd5b      	ble.n	8016c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016bb8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	dd57      	ble.n	8016c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016bc0:	4f2f      	ldr	r7, [pc, #188]	@ (8016c80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8016bc2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016bca:	4b2e      	ldr	r3, [pc, #184]	@ (8016c84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016bd2:	2e00      	cmp	r6, #0
 8016bd4:	d04c      	beq.n	8016c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016bd6:	6823      	ldr	r3, [r4, #0]
 8016bd8:	4620      	mov	r0, r4
 8016bda:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8016bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016be0:	4798      	blx	r3
 8016be2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8016bea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016bee:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8016bf2:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8016bf6:	785b      	ldrb	r3, [r3, #1]
 8016bf8:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8016bfc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016c00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016c02:	9609      	str	r6, [sp, #36]	@ 0x24
 8016c04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c08:	4b1f      	ldr	r3, [pc, #124]	@ (8016c88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8016c0a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8016c14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016c16:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8016c1a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8016c1e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8016c22:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8016c26:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016c2a:	b10a      	cbz	r2, 8016c30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8016c2c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8016c2e:	b906      	cbnz	r6, 8016c32 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8016c30:	689e      	ldr	r6, [r3, #8]
 8016c32:	af07      	add	r7, sp, #28
 8016c34:	4621      	mov	r1, r4
 8016c36:	4638      	mov	r0, r7
 8016c38:	f003 fff8 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016c3c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016c3e:	6828      	ldr	r0, [r5, #0]
 8016c40:	f7f1 fcde 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	4605      	mov	r5, r0
 8016c48:	4620      	mov	r0, r4
 8016c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016c4c:	4798      	blx	r3
 8016c4e:	6823      	ldr	r3, [r4, #0]
 8016c50:	4680      	mov	r8, r0
 8016c52:	4620      	mov	r0, r4
 8016c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016c58:	4798      	blx	r3
 8016c5a:	ab09      	add	r3, sp, #36	@ 0x24
 8016c5c:	9501      	str	r5, [sp, #4]
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	ab05      	add	r3, sp, #20
 8016c62:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8016c66:	4630      	mov	r0, r6
 8016c68:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016c6c:	f7f1 fc7a 	bl	8008564 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016c70:	b00e      	add	sp, #56	@ 0x38
 8016c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c76:	bf00      	nop
 8016c78:	2402857c 	.word	0x2402857c
 8016c7c:	24028584 	.word	0x24028584
 8016c80:	24028578 	.word	0x24028578
 8016c84:	24028580 	.word	0x24028580
 8016c88:	24028520 	.word	0x24028520

08016c8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8016cc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8016c90:	4604      	mov	r4, r0
 8016c92:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016c94:	881b      	ldrh	r3, [r3, #0]
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d214      	bcs.n	8016cc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016c9a:	6803      	ldr	r3, [r0, #0]
 8016c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c9e:	4798      	blx	r3
 8016ca0:	6823      	ldr	r3, [r4, #0]
 8016ca2:	4605      	mov	r5, r0
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ca8:	4798      	blx	r3
 8016caa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016cae:	b22d      	sxth	r5, r5
 8016cb0:	4601      	mov	r1, r0
 8016cb2:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016cb6:	bf06      	itte	eq
 8016cb8:	4602      	moveq	r2, r0
 8016cba:	4629      	moveq	r1, r5
 8016cbc:	462a      	movne	r2, r5
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f7fb fde4 	bl	801288c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016cc4:	bd38      	pop	{r3, r4, r5, pc}
 8016cc6:	bf00      	nop
 8016cc8:	2402857c 	.word	0x2402857c

08016ccc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8016ccc:	b530      	push	{r4, r5, lr}
 8016cce:	888b      	ldrh	r3, [r1, #4]
 8016cd0:	b085      	sub	sp, #20
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016cd6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016cda:	b923      	cbnz	r3, 8016ce6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016cdc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016ce0:	b90b      	cbnz	r3, 8016ce6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016ce2:	f7ff ffd3 	bl	8016c8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016ce6:	6823      	ldr	r3, [r4, #0]
 8016ce8:	466d      	mov	r5, sp
 8016cea:	4621      	mov	r1, r4
 8016cec:	343c      	adds	r4, #60	@ 0x3c
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016cf4:	4798      	blx	r3
 8016cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016cfe:	b005      	add	sp, #20
 8016d00:	bd30      	pop	{r4, r5, pc}

08016d02 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016d02:	2300      	movs	r3, #0
 8016d04:	8083      	strh	r3, [r0, #4]
 8016d06:	80c3      	strh	r3, [r0, #6]
 8016d08:	8003      	strh	r3, [r0, #0]
 8016d0a:	8043      	strh	r3, [r0, #2]
 8016d0c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8016d10:	2bff      	cmp	r3, #255	@ 0xff
 8016d12:	bf01      	itttt	eq
 8016d14:	890b      	ldrheq	r3, [r1, #8]
 8016d16:	8083      	strheq	r3, [r0, #4]
 8016d18:	894b      	ldrheq	r3, [r1, #10]
 8016d1a:	80c3      	strheq	r3, [r0, #6]
 8016d1c:	4770      	bx	lr
	...

08016d20 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d22:	4604      	mov	r4, r0
 8016d24:	466b      	mov	r3, sp
 8016d26:	6808      	ldr	r0, [r1, #0]
 8016d28:	6849      	ldr	r1, [r1, #4]
 8016d2a:	c303      	stmia	r3!, {r0, r1}
 8016d2c:	6823      	ldr	r3, [r4, #0]
 8016d2e:	4669      	mov	r1, sp
 8016d30:	4620      	mov	r0, r4
 8016d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d34:	4798      	blx	r3
 8016d36:	4b08      	ldr	r3, [pc, #32]	@ (8016d58 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016d3e:	b10a      	cbz	r2, 8016d44 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016d40:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016d42:	b900      	cbnz	r0, 8016d46 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016d44:	6898      	ldr	r0, [r3, #8]
 8016d46:	6803      	ldr	r3, [r0, #0]
 8016d48:	4669      	mov	r1, sp
 8016d4a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016d4c:	6a1d      	ldr	r5, [r3, #32]
 8016d4e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8016d52:	47a8      	blx	r5
 8016d54:	b003      	add	sp, #12
 8016d56:	bd30      	pop	{r4, r5, pc}
 8016d58:	24028520 	.word	0x24028520

08016d5c <_ZN8touchgfx3BoxD1Ev>:
 8016d5c:	4770      	bx	lr

08016d5e <_ZN8touchgfx3BoxD0Ev>:
 8016d5e:	b510      	push	{r4, lr}
 8016d60:	4604      	mov	r4, r0
 8016d62:	212c      	movs	r1, #44	@ 0x2c
 8016d64:	f011 f9c8 	bl	80280f8 <_ZdlPvj>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	bd10      	pop	{r4, pc}

08016d6c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8016d6c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8016d70:	b12a      	cbz	r2, 8016d7e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016d72:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016d76:	b112      	cbz	r2, 8016d7e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016d78:	6803      	ldr	r3, [r0, #0]
 8016d7a:	695b      	ldr	r3, [r3, #20]
 8016d7c:	4718      	bx	r3
 8016d7e:	4770      	bx	lr

08016d80 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8016d80:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8016d84:	4770      	bx	lr

08016d86 <_ZN8touchgfx6ButtonD1Ev>:
 8016d86:	4770      	bx	lr

08016d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8016d88:	b570      	push	{r4, r5, r6, lr}
 8016d8a:	880b      	ldrh	r3, [r1, #0]
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	4604      	mov	r4, r0
 8016d90:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8016d92:	8813      	ldrh	r3, [r2, #0]
 8016d94:	f825 3f30 	strh.w	r3, [r5, #48]!
 8016d98:	4628      	mov	r0, r5
 8016d9a:	f006 fb93 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d9e:	4606      	mov	r6, r0
 8016da0:	4628      	mov	r0, r5
 8016da2:	f006 fbc3 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016da6:	6823      	ldr	r3, [r4, #0]
 8016da8:	4605      	mov	r5, r0
 8016daa:	4631      	mov	r1, r6
 8016dac:	4620      	mov	r0, r4
 8016dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016db0:	4798      	blx	r3
 8016db2:	6823      	ldr	r3, [r4, #0]
 8016db4:	4629      	mov	r1, r5
 8016db6:	4620      	mov	r0, r4
 8016db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dbe:	4718      	bx	r3

08016dc0 <_ZN8touchgfx6ButtonD0Ev>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	2134      	movs	r1, #52	@ 0x34
 8016dc6:	f011 f997 	bl	80280f8 <_ZdlPvj>
 8016dca:	4620      	mov	r0, r4
 8016dcc:	bd10      	pop	{r4, pc}

08016dce <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8016dce:	b510      	push	{r4, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8016dd4:	b150      	cbz	r0, 8016dec <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016dd6:	6803      	ldr	r3, [r0, #0]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	4798      	blx	r3
 8016ddc:	b130      	cbz	r0, 8016dec <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016dde:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016de0:	4621      	mov	r1, r4
 8016de2:	6803      	ldr	r3, [r0, #0]
 8016de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de8:	689b      	ldr	r3, [r3, #8]
 8016dea:	4718      	bx	r3
 8016dec:	bd10      	pop	{r4, pc}

08016dee <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016dee:	b510      	push	{r4, lr}
 8016df0:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8016df4:	4604      	mov	r4, r0
 8016df6:	2bff      	cmp	r3, #255	@ 0xff
 8016df8:	d006      	beq.n	8016e08 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	8003      	strh	r3, [r0, #0]
 8016dfe:	8043      	strh	r3, [r0, #2]
 8016e00:	8083      	strh	r3, [r0, #4]
 8016e02:	80c3      	strh	r3, [r0, #6]
 8016e04:	4620      	mov	r0, r4
 8016e06:	bd10      	pop	{r4, pc}
 8016e08:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8016e0c:	b11b      	cbz	r3, 8016e16 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016e0e:	3130      	adds	r1, #48	@ 0x30
 8016e10:	f006 fbc0 	bl	801d594 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016e14:	e7f6      	b.n	8016e04 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8016e16:	312e      	adds	r1, #46	@ 0x2e
 8016e18:	e7fa      	b.n	8016e10 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08016e1c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e20:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016e24:	b08a      	sub	sp, #40	@ 0x28
 8016e26:	4604      	mov	r4, r0
 8016e28:	4688      	mov	r8, r1
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d066      	beq.n	8016efc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016e2e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8016e30:	a805      	add	r0, sp, #20
 8016e32:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e36:	f006 fb45 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016e3a:	4607      	mov	r7, r0
 8016e3c:	a805      	add	r0, sp, #20
 8016e3e:	f006 fb75 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016e42:	f9b8 6000 	ldrsh.w	r6, [r8]
 8016e46:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	4432      	add	r2, r6
 8016e4e:	9306      	str	r3, [sp, #24]
 8016e50:	b292      	uxth	r2, r2
 8016e52:	fa0f fc82 	sxth.w	ip, r2
 8016e56:	459c      	cmp	ip, r3
 8016e58:	dd52      	ble.n	8016f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016e5a:	42b7      	cmp	r7, r6
 8016e5c:	dd50      	ble.n	8016f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016e5e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8016e62:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016e66:	442b      	add	r3, r5
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	b219      	sxth	r1, r3
 8016e6c:	2900      	cmp	r1, #0
 8016e6e:	dd47      	ble.n	8016f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016e70:	42a8      	cmp	r0, r5
 8016e72:	dd45      	ble.n	8016f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016e74:	4567      	cmp	r7, ip
 8016e76:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8016e7a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8016e7e:	bfb8      	it	lt
 8016e80:	b2ba      	uxthlt	r2, r7
 8016e82:	4288      	cmp	r0, r1
 8016e84:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016e88:	bfb8      	it	lt
 8016e8a:	b283      	uxthlt	r3, r0
 8016e8c:	1b92      	subs	r2, r2, r6
 8016e8e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016e92:	1b5b      	subs	r3, r3, r5
 8016e94:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016e98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016e9c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d026      	beq.n	8016ef6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016ea8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	dd22      	ble.n	8016ef6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016eb0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	dd1e      	ble.n	8016ef6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	a908      	add	r1, sp, #32
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ec6:	4798      	blx	r3
 8016ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8016f08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016ed0:	b10a      	cbz	r2, 8016ed6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8016ed2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016ed4:	b900      	cbnz	r0, 8016ed8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8016ed6:	6898      	ldr	r0, [r3, #8]
 8016ed8:	2501      	movs	r5, #1
 8016eda:	6801      	ldr	r1, [r0, #0]
 8016edc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8016ee0:	9502      	str	r5, [sp, #8]
 8016ee2:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8016ee6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016eea:	9401      	str	r4, [sp, #4]
 8016eec:	ac06      	add	r4, sp, #24
 8016eee:	9400      	str	r4, [sp, #0]
 8016ef0:	688c      	ldr	r4, [r1, #8]
 8016ef2:	a905      	add	r1, sp, #20
 8016ef4:	47a0      	blx	r4
 8016ef6:	b00a      	add	sp, #40	@ 0x28
 8016ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016efc:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8016efe:	e797      	b.n	8016e30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016f00:	2300      	movs	r3, #0
 8016f02:	9307      	str	r3, [sp, #28]
 8016f04:	e7ca      	b.n	8016e9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8016f06:	bf00      	nop
 8016f08:	24028520 	.word	0x24028520

08016f0c <_ZNK8touchgfx6Button17invalidateContentEv>:
 8016f0c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8016f10:	b12a      	cbz	r2, 8016f1e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016f12:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016f16:	b112      	cbz	r2, 8016f1e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016f18:	6803      	ldr	r3, [r0, #0]
 8016f1a:	695b      	ldr	r3, [r3, #20]
 8016f1c:	4718      	bx	r3
 8016f1e:	4770      	bx	lr

08016f20 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8016f20:	4b30      	ldr	r3, [pc, #192]	@ (8016fe4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8016f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f26:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016f28:	b08d      	sub	sp, #52	@ 0x34
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	460f      	mov	r7, r1
 8016f30:	4293      	cmp	r3, r2
 8016f32:	d954      	bls.n	8016fde <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016f34:	4b2c      	ldr	r3, [pc, #176]	@ (8016fe8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8016f36:	6819      	ldr	r1, [r3, #0]
 8016f38:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8016f3c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8016f40:	4a2a      	ldr	r2, [pc, #168]	@ (8016fec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8016f42:	6812      	ldr	r2, [r2, #0]
 8016f44:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	d048      	beq.n	8016fde <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016f4c:	785a      	ldrb	r2, [r3, #1]
 8016f4e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8016f52:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8016f56:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016f5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016f5e:	4b24      	ldr	r3, [pc, #144]	@ (8016ff0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8016f60:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8016f6a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8016f6e:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8016f72:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016f74:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8016f78:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8016f7c:	9107      	str	r1, [sp, #28]
 8016f7e:	f88d 8020 	strb.w	r8, [sp, #32]
 8016f82:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8016f86:	9609      	str	r6, [sp, #36]	@ 0x24
 8016f88:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8016f8c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016f90:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8016f94:	b10b      	cbz	r3, 8016f9a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8016f96:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8016f98:	b905      	cbnz	r5, 8016f9c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8016f9a:	6895      	ldr	r5, [r2, #8]
 8016f9c:	ae05      	add	r6, sp, #20
 8016f9e:	4621      	mov	r1, r4
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f003 fe43 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fa6:	4b13      	ldr	r3, [pc, #76]	@ (8016ff4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8016fa8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016faa:	6818      	ldr	r0, [r3, #0]
 8016fac:	f7f1 fb28 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 8016fb0:	6823      	ldr	r3, [r4, #0]
 8016fb2:	4680      	mov	r8, r0
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016fb8:	4798      	blx	r3
 8016fba:	6823      	ldr	r3, [r4, #0]
 8016fbc:	4681      	mov	r9, r0
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016fc4:	4798      	blx	r3
 8016fc6:	ab07      	add	r3, sp, #28
 8016fc8:	f8cd 8004 	str.w	r8, [sp, #4]
 8016fcc:	9300      	str	r3, [sp, #0]
 8016fce:	463b      	mov	r3, r7
 8016fd0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016fda:	f7f1 fac3 	bl	8008564 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016fde:	b00d      	add	sp, #52	@ 0x34
 8016fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fe4:	2402857c 	.word	0x2402857c
 8016fe8:	24028578 	.word	0x24028578
 8016fec:	24028580 	.word	0x24028580
 8016ff0:	24028520 	.word	0x24028520
 8016ff4:	24028584 	.word	0x24028584

08016ff8 <_ZN8touchgfx5ImageD1Ev>:
 8016ff8:	4770      	bx	lr

08016ffa <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016ffa:	b570      	push	{r4, r5, r6, lr}
 8016ffc:	880b      	ldrh	r3, [r1, #0]
 8016ffe:	460d      	mov	r5, r1
 8017000:	4604      	mov	r4, r0
 8017002:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017004:	4608      	mov	r0, r1
 8017006:	f006 fa5d 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801700a:	4606      	mov	r6, r0
 801700c:	4628      	mov	r0, r5
 801700e:	f006 fa8d 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017012:	6823      	ldr	r3, [r4, #0]
 8017014:	4605      	mov	r5, r0
 8017016:	4631      	mov	r1, r6
 8017018:	4620      	mov	r0, r4
 801701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801701c:	4798      	blx	r3
 801701e:	6823      	ldr	r3, [r4, #0]
 8017020:	4629      	mov	r1, r5
 8017022:	4620      	mov	r0, r4
 8017024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801702a:	4718      	bx	r3

0801702c <_ZN8touchgfx5ImageD0Ev>:
 801702c:	b510      	push	{r4, lr}
 801702e:	4604      	mov	r4, r0
 8017030:	212c      	movs	r1, #44	@ 0x2c
 8017032:	f011 f861 	bl	80280f8 <_ZdlPvj>
 8017036:	4620      	mov	r0, r4
 8017038:	bd10      	pop	{r4, pc}

0801703a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801703a:	b510      	push	{r4, lr}
 801703c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017040:	4604      	mov	r4, r0
 8017042:	2bff      	cmp	r3, #255	@ 0xff
 8017044:	d006      	beq.n	8017054 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017046:	2300      	movs	r3, #0
 8017048:	8003      	strh	r3, [r0, #0]
 801704a:	8043      	strh	r3, [r0, #2]
 801704c:	8083      	strh	r3, [r0, #4]
 801704e:	80c3      	strh	r3, [r0, #6]
 8017050:	4620      	mov	r0, r4
 8017052:	bd10      	pop	{r4, pc}
 8017054:	3126      	adds	r1, #38	@ 0x26
 8017056:	f006 fa9d 	bl	801d594 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801705a:	e7f9      	b.n	8017050 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801705c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017060:	4604      	mov	r4, r0
 8017062:	b088      	sub	sp, #32
 8017064:	2500      	movs	r5, #0
 8017066:	460f      	mov	r7, r1
 8017068:	f854 3b26 	ldr.w	r3, [r4], #38
 801706c:	a904      	add	r1, sp, #16
 801706e:	4606      	mov	r6, r0
 8017070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017072:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017076:	4798      	blx	r3
 8017078:	4620      	mov	r0, r4
 801707a:	f006 fa23 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801707e:	4680      	mov	r8, r0
 8017080:	4620      	mov	r0, r4
 8017082:	f006 fa53 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017086:	9506      	str	r5, [sp, #24]
 8017088:	ad06      	add	r5, sp, #24
 801708a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801708e:	4639      	mov	r1, r7
 8017090:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017094:	4628      	mov	r0, r5
 8017096:	f7fa ffff 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801709a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	dd19      	ble.n	80170d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80170a2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	dd15      	ble.n	80170d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80170aa:	4b0c      	ldr	r3, [pc, #48]	@ (80170dc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80170b2:	b10a      	cbz	r2, 80170b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80170b4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80170b6:	b900      	cbnz	r0, 80170ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80170b8:	6898      	ldr	r0, [r3, #8]
 80170ba:	2701      	movs	r7, #1
 80170bc:	6801      	ldr	r1, [r0, #0]
 80170be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80170c2:	9702      	str	r7, [sp, #8]
 80170c4:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80170c8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80170cc:	e9cd 5600 	strd	r5, r6, [sp]
 80170d0:	688d      	ldr	r5, [r1, #8]
 80170d2:	4621      	mov	r1, r4
 80170d4:	47a8      	blx	r5
 80170d6:	b008      	add	sp, #32
 80170d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170dc:	24028520 	.word	0x24028520

080170e0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 80170e0:	4770      	bx	lr

080170e2 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80170e2:	b510      	push	{r4, lr}
 80170e4:	4604      	mov	r4, r0
 80170e6:	2148      	movs	r1, #72	@ 0x48
 80170e8:	f011 f806 	bl	80280f8 <_ZdlPvj>
 80170ec:	4620      	mov	r0, r4
 80170ee:	bd10      	pop	{r4, pc}

080170f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80170f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170f4:	b08d      	sub	sp, #52	@ 0x34
 80170f6:	4604      	mov	r4, r0
 80170f8:	460f      	mov	r7, r1
 80170fa:	f7ff fe8f 	bl	8016e1c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80170fe:	4a55      	ldr	r2, [pc, #340]	@ (8017254 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8017100:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017102:	8812      	ldrh	r2, [r2, #0]
 8017104:	429a      	cmp	r2, r3
 8017106:	f240 8082 	bls.w	801720e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801710a:	4d53      	ldr	r5, [pc, #332]	@ (8017258 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801710c:	682a      	ldr	r2, [r5, #0]
 801710e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017112:	4b52      	ldr	r3, [pc, #328]	@ (801725c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801711a:	2200      	movs	r2, #0
 801711c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8017120:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017124:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8017128:	2a03      	cmp	r2, #3
 801712a:	d811      	bhi.n	8017150 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801712c:	e8df f002 	tbb	[pc, r2]
 8017130:	89727902 	.word	0x89727902
 8017134:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017138:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801713c:	1ad2      	subs	r2, r2, r3
 801713e:	2002      	movs	r0, #2
 8017140:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017144:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017148:	fb92 f2f0 	sdiv	r2, r2, r0
 801714c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017150:	f10d 080c 	add.w	r8, sp, #12
 8017154:	f10d 0914 	add.w	r9, sp, #20
 8017158:	e898 0003 	ldmia.w	r8, {r0, r1}
 801715c:	e889 0003 	stmia.w	r9, {r0, r1}
 8017160:	4639      	mov	r1, r7
 8017162:	4648      	mov	r0, r9
 8017164:	f7fa ff98 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8017168:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801716c:	2b00      	cmp	r3, #0
 801716e:	dd4e      	ble.n	801720e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8017170:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017174:	2b00      	cmp	r3, #0
 8017176:	dd4a      	ble.n	801720e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8017178:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801717c:	4641      	mov	r1, r8
 801717e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017182:	4620      	mov	r0, r4
 8017184:	1a9b      	subs	r3, r3, r2
 8017186:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801718a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801718e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017192:	1a9b      	subs	r3, r3, r2
 8017194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801719c:	4798      	blx	r3
 801719e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d053      	beq.n	801724e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80171a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80171a8:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80171aa:	682b      	ldr	r3, [r5, #0]
 80171ac:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 80171b0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80171b4:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 80171b8:	785b      	ldrb	r3, [r3, #1]
 80171ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80171bc:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80171c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80171c4:	9607      	str	r6, [sp, #28]
 80171c6:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80171ca:	2300      	movs	r3, #0
 80171cc:	f88d 5020 	strb.w	r5, [sp, #32]
 80171d0:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80171d4:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80171d8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80171dc:	4b20      	ldr	r3, [pc, #128]	@ (8017260 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80171de:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80171e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80171ec:	b10a      	cbz	r2, 80171f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 80171ee:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80171f0:	b904      	cbnz	r4, 80171f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 80171f2:	689c      	ldr	r4, [r3, #8]
 80171f4:	4b1b      	ldr	r3, [pc, #108]	@ (8017264 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80171f6:	6818      	ldr	r0, [r3, #0]
 80171f8:	f7f1 fa02 	bl	8008600 <_ZNK8touchgfx5Texts7getTextEt>
 80171fc:	ab07      	add	r3, sp, #28
 80171fe:	9001      	str	r0, [sp, #4]
 8017200:	4620      	mov	r0, r4
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	464b      	mov	r3, r9
 8017206:	e898 0006 	ldmia.w	r8, {r1, r2}
 801720a:	f7f1 f9ab 	bl	8008564 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801720e:	b00d      	add	sp, #52	@ 0x34
 8017210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017214:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017218:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801721c:	1ad2      	subs	r2, r2, r3
 801721e:	3201      	adds	r2, #1
 8017220:	e78d      	b.n	801713e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8017222:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017226:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801722a:	1ad2      	subs	r2, r2, r3
 801722c:	3201      	adds	r2, #1
 801722e:	2002      	movs	r0, #2
 8017230:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017234:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017238:	fb92 f2f0 	sdiv	r2, r2, r0
 801723c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017240:	e786      	b.n	8017150 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8017242:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017246:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801724a:	1ad2      	subs	r2, r2, r3
 801724c:	e7ef      	b.n	801722e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 801724e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8017250:	e7aa      	b.n	80171a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8017252:	bf00      	nop
 8017254:	2402857c 	.word	0x2402857c
 8017258:	24028578 	.word	0x24028578
 801725c:	24028580 	.word	0x24028580
 8017260:	24028520 	.word	0x24028520
 8017264:	24028584 	.word	0x24028584

08017268 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8017268:	2101      	movs	r1, #1
 801726a:	2200      	movs	r2, #0
 801726c:	b510      	push	{r4, lr}
 801726e:	4c13      	ldr	r4, [pc, #76]	@ (80172bc <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8017270:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8017274:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8017278:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801727c:	6004      	str	r4, [r0, #0]
 801727e:	4c10      	ldr	r4, [pc, #64]	@ (80172c0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8017280:	8082      	strh	r2, [r0, #4]
 8017282:	80c2      	strh	r2, [r0, #6]
 8017284:	8102      	strh	r2, [r0, #8]
 8017286:	8142      	strh	r2, [r0, #10]
 8017288:	8182      	strh	r2, [r0, #12]
 801728a:	81c2      	strh	r2, [r0, #14]
 801728c:	8202      	strh	r2, [r0, #16]
 801728e:	8242      	strh	r2, [r0, #18]
 8017290:	61c2      	str	r2, [r0, #28]
 8017292:	8402      	strh	r2, [r0, #32]
 8017294:	8442      	strh	r2, [r0, #34]	@ 0x22
 8017296:	6282      	str	r2, [r0, #40]	@ 0x28
 8017298:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 801729c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801729e:	8601      	strh	r1, [r0, #48]	@ 0x30
 80172a0:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 80172a4:	6344      	str	r4, [r0, #52]	@ 0x34
 80172a6:	8701      	strh	r1, [r0, #56]	@ 0x38
 80172a8:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80172ac:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 80172b0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80172b4:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80172b8:	bd10      	pop	{r4, pc}
 80172ba:	bf00      	nop
 80172bc:	0802d470 	.word	0x0802d470
 80172c0:	0802b820 	.word	0x0802b820

080172c4 <_ZN8touchgfx7OutlineD1Ev>:
 80172c4:	4770      	bx	lr

080172c6 <_ZN8touchgfx7OutlineD0Ev>:
 80172c6:	b510      	push	{r4, lr}
 80172c8:	4604      	mov	r4, r0
 80172ca:	2130      	movs	r1, #48	@ 0x30
 80172cc:	f010 ff14 	bl	80280f8 <_ZdlPvj>
 80172d0:	4620      	mov	r0, r4
 80172d2:	bd10      	pop	{r4, pc}

080172d4 <_ZN8touchgfx7Outline5resetEv>:
 80172d4:	b510      	push	{r4, lr}
 80172d6:	4604      	mov	r4, r0
 80172d8:	f000 fe86 	bl	8017fe8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80172dc:	60e0      	str	r0, [r4, #12]
 80172de:	f000 fe89 	bl	8017ff4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80172e2:	68e3      	ldr	r3, [r4, #12]
 80172e4:	08c0      	lsrs	r0, r0, #3
 80172e6:	2200      	movs	r2, #0
 80172e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80172ec:	6123      	str	r3, [r4, #16]
 80172ee:	3801      	subs	r0, #1
 80172f0:	60a2      	str	r2, [r4, #8]
 80172f2:	6060      	str	r0, [r4, #4]
 80172f4:	8019      	strh	r1, [r3, #0]
 80172f6:	8059      	strh	r1, [r3, #2]
 80172f8:	809a      	strh	r2, [r3, #4]
 80172fa:	80da      	strh	r2, [r3, #6]
 80172fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80172fe:	f023 0301 	bic.w	r3, r3, #1
 8017302:	f043 0302 	orr.w	r3, r3, #2
 8017306:	6263      	str	r3, [r4, #36]	@ 0x24
 8017308:	bd10      	pop	{r4, pc}
	...

0801730c <_ZN8touchgfx7OutlineC1Ev>:
 801730c:	4b0a      	ldr	r3, [pc, #40]	@ (8017338 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801730e:	b510      	push	{r4, lr}
 8017310:	6003      	str	r3, [r0, #0]
 8017312:	2300      	movs	r3, #0
 8017314:	4604      	mov	r4, r0
 8017316:	6243      	str	r3, [r0, #36]	@ 0x24
 8017318:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801731c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017320:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8017324:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017328:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801732c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8017330:	f7ff ffd0 	bl	80172d4 <_ZN8touchgfx7Outline5resetEv>
 8017334:	4620      	mov	r0, r4
 8017336:	bd10      	pop	{r4, pc}
 8017338:	0802d4e4 	.word	0x0802d4e4

0801733c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017340:	b093      	sub	sp, #76	@ 0x4c
 8017342:	1156      	asrs	r6, r2, #5
 8017344:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017346:	9305      	str	r3, [sp, #20]
 8017348:	1153      	asrs	r3, r2, #5
 801734a:	f004 051f 	and.w	r5, r4, #31
 801734e:	9303      	str	r3, [sp, #12]
 8017350:	1163      	asrs	r3, r4, #5
 8017352:	9504      	str	r5, [sp, #16]
 8017354:	1165      	asrs	r5, r4, #5
 8017356:	9306      	str	r3, [sp, #24]
 8017358:	f002 031f 	and.w	r3, r2, #31
 801735c:	42ae      	cmp	r6, r5
 801735e:	f040 80f4 	bne.w	801754a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8017362:	9c04      	ldr	r4, [sp, #16]
 8017364:	9a05      	ldr	r2, [sp, #20]
 8017366:	42a3      	cmp	r3, r4
 8017368:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801736c:	6902      	ldr	r2, [r0, #16]
 801736e:	d125      	bne.n	80173bc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8017370:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017374:	459e      	cmp	lr, r3
 8017376:	d103      	bne.n	8017380 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8017378:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801737c:	429e      	cmp	r6, r3
 801737e:	d035      	beq.n	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017380:	88d1      	ldrh	r1, [r2, #6]
 8017382:	8893      	ldrh	r3, [r2, #4]
 8017384:	430b      	orrs	r3, r1
 8017386:	d010      	beq.n	80173aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017388:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801738c:	2b00      	cmp	r3, #0
 801738e:	db0c      	blt.n	80173aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017390:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017392:	428b      	cmp	r3, r1
 8017394:	da09      	bge.n	80173aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017396:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801739a:	428b      	cmp	r3, r1
 801739c:	f103 0301 	add.w	r3, r3, #1
 80173a0:	bf38      	it	cc
 80173a2:	3208      	addcc	r2, #8
 80173a4:	6083      	str	r3, [r0, #8]
 80173a6:	bf38      	it	cc
 80173a8:	6102      	strcc	r2, [r0, #16]
 80173aa:	6903      	ldr	r3, [r0, #16]
 80173ac:	9a03      	ldr	r2, [sp, #12]
 80173ae:	f8a3 e000 	strh.w	lr, [r3]
 80173b2:	805a      	strh	r2, [r3, #2]
 80173b4:	2200      	movs	r2, #0
 80173b6:	809a      	strh	r2, [r3, #4]
 80173b8:	80da      	strh	r2, [r3, #6]
 80173ba:	e017      	b.n	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80173bc:	9c05      	ldr	r4, [sp, #20]
 80173be:	114e      	asrs	r6, r1, #5
 80173c0:	f001 0c1f 	and.w	ip, r1, #31
 80173c4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80173c8:	f004 041f 	and.w	r4, r4, #31
 80173cc:	4576      	cmp	r6, lr
 80173ce:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80173d2:	9402      	str	r4, [sp, #8]
 80173d4:	9c04      	ldr	r4, [sp, #16]
 80173d6:	eba4 0403 	sub.w	r4, r4, r3
 80173da:	d10a      	bne.n	80173f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80173dc:	9b02      	ldr	r3, [sp, #8]
 80173de:	44a0      	add	r8, r4
 80173e0:	449c      	add	ip, r3
 80173e2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80173e6:	fb04 a40c 	mla	r4, r4, ip, sl
 80173ea:	80d4      	strh	r4, [r2, #6]
 80173ec:	b013      	add	sp, #76	@ 0x4c
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	9d05      	ldr	r5, [sp, #20]
 80173f4:	1a69      	subs	r1, r5, r1
 80173f6:	bf51      	iteee	pl
 80173f8:	f1cc 0520 	rsbpl	r5, ip, #32
 80173fc:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017400:	4249      	negmi	r1, r1
 8017402:	2500      	movmi	r5, #0
 8017404:	bf5d      	ittte	pl
 8017406:	436c      	mulpl	r4, r5
 8017408:	2520      	movpl	r5, #32
 801740a:	f04f 0901 	movpl.w	r9, #1
 801740e:	f04f 39ff 	movmi.w	r9, #4294967295
 8017412:	9501      	str	r5, [sp, #4]
 8017414:	9f01      	ldr	r7, [sp, #4]
 8017416:	444e      	add	r6, r9
 8017418:	fb94 f5f1 	sdiv	r5, r4, r1
 801741c:	fb01 4415 	mls	r4, r1, r5, r4
 8017420:	44bc      	add	ip, r7
 8017422:	2c00      	cmp	r4, #0
 8017424:	bfbc      	itt	lt
 8017426:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801742a:	1864      	addlt	r4, r4, r1
 801742c:	44a8      	add	r8, r5
 801742e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017432:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017436:	f8a2 c006 	strh.w	ip, [r2, #6]
 801743a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801743e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017442:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017446:	ea58 0202 	orrs.w	r2, r8, r2
 801744a:	d011      	beq.n	8017470 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801744c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017450:	f1b8 0f00 	cmp.w	r8, #0
 8017454:	db0c      	blt.n	8017470 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017456:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017458:	4590      	cmp	r8, r2
 801745a:	da09      	bge.n	8017470 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801745c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017460:	4590      	cmp	r8, r2
 8017462:	bf3c      	itt	cc
 8017464:	f10c 0208 	addcc.w	r2, ip, #8
 8017468:	6102      	strcc	r2, [r0, #16]
 801746a:	f108 0201 	add.w	r2, r8, #1
 801746e:	6082      	str	r2, [r0, #8]
 8017470:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017474:	2700      	movs	r7, #0
 8017476:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801747a:	45b6      	cmp	lr, r6
 801747c:	f8ac 6000 	strh.w	r6, [ip]
 8017480:	442b      	add	r3, r5
 8017482:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017486:	f8ac 7004 	strh.w	r7, [ip, #4]
 801748a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801748e:	d04b      	beq.n	8017528 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8017490:	9f04      	ldr	r7, [sp, #16]
 8017492:	1a64      	subs	r4, r4, r1
 8017494:	f04f 0a00 	mov.w	sl, #0
 8017498:	1aff      	subs	r7, r7, r3
 801749a:	443d      	add	r5, r7
 801749c:	016d      	lsls	r5, r5, #5
 801749e:	fb95 f8f1 	sdiv	r8, r5, r1
 80174a2:	fb01 5518 	mls	r5, r1, r8, r5
 80174a6:	2d00      	cmp	r5, #0
 80174a8:	bfbc      	itt	lt
 80174aa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80174ae:	186d      	addlt	r5, r5, r1
 80174b0:	f108 0701 	add.w	r7, r8, #1
 80174b4:	9703      	str	r7, [sp, #12]
 80174b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80174ba:	1964      	adds	r4, r4, r5
 80174bc:	444e      	add	r6, r9
 80174be:	bf54      	ite	pl
 80174c0:	9f03      	ldrpl	r7, [sp, #12]
 80174c2:	4647      	movmi	r7, r8
 80174c4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80174c8:	bf58      	it	pl
 80174ca:	1a64      	subpl	r4, r4, r1
 80174cc:	443b      	add	r3, r7
 80174ce:	44bb      	add	fp, r7
 80174d0:	f8ac b004 	strh.w	fp, [ip, #4]
 80174d4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80174d8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80174dc:	f8ac b006 	strh.w	fp, [ip, #6]
 80174e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80174e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80174e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80174ec:	ea5b 0707 	orrs.w	r7, fp, r7
 80174f0:	d011      	beq.n	8017516 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80174f2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80174f6:	f1bb 0f00 	cmp.w	fp, #0
 80174fa:	db0c      	blt.n	8017516 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80174fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80174fe:	45bb      	cmp	fp, r7
 8017500:	da09      	bge.n	8017516 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017502:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017506:	45bb      	cmp	fp, r7
 8017508:	bf3c      	itt	cc
 801750a:	f10c 0708 	addcc.w	r7, ip, #8
 801750e:	6107      	strcc	r7, [r0, #16]
 8017510:	f10b 0701 	add.w	r7, fp, #1
 8017514:	6087      	str	r7, [r0, #8]
 8017516:	6907      	ldr	r7, [r0, #16]
 8017518:	45b6      	cmp	lr, r6
 801751a:	803e      	strh	r6, [r7, #0]
 801751c:	807a      	strh	r2, [r7, #2]
 801751e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017522:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017526:	d1c6      	bne.n	80174b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8017528:	9a04      	ldr	r2, [sp, #16]
 801752a:	1ad3      	subs	r3, r2, r3
 801752c:	6902      	ldr	r2, [r0, #16]
 801752e:	8891      	ldrh	r1, [r2, #4]
 8017530:	88d6      	ldrh	r6, [r2, #6]
 8017532:	4419      	add	r1, r3
 8017534:	8091      	strh	r1, [r2, #4]
 8017536:	9902      	ldr	r1, [sp, #8]
 8017538:	f101 0c20 	add.w	ip, r1, #32
 801753c:	9901      	ldr	r1, [sp, #4]
 801753e:	ebac 0c01 	sub.w	ip, ip, r1
 8017542:	fb03 630c 	mla	r3, r3, ip, r6
 8017546:	80d3      	strh	r3, [r2, #6]
 8017548:	e750      	b.n	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801754a:	9d05      	ldr	r5, [sp, #20]
 801754c:	1aa2      	subs	r2, r4, r2
 801754e:	eba5 0501 	sub.w	r5, r5, r1
 8017552:	9202      	str	r2, [sp, #8]
 8017554:	9508      	str	r5, [sp, #32]
 8017556:	f140 8128 	bpl.w	80177aa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801755a:	9a03      	ldr	r2, [sp, #12]
 801755c:	2a00      	cmp	r2, #0
 801755e:	f6ff af45 	blt.w	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017562:	9a02      	ldr	r2, [sp, #8]
 8017564:	f04f 34ff 	mov.w	r4, #4294967295
 8017568:	4252      	negs	r2, r2
 801756a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801756c:	2400      	movs	r4, #0
 801756e:	9202      	str	r2, [sp, #8]
 8017570:	9a06      	ldr	r2, [sp, #24]
 8017572:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8017576:	9206      	str	r2, [sp, #24]
 8017578:	462a      	mov	r2, r5
 801757a:	435a      	muls	r2, r3
 801757c:	9401      	str	r4, [sp, #4]
 801757e:	9c02      	ldr	r4, [sp, #8]
 8017580:	9d02      	ldr	r5, [sp, #8]
 8017582:	fb92 f4f4 	sdiv	r4, r2, r4
 8017586:	fb05 2214 	mls	r2, r5, r4, r2
 801758a:	2a00      	cmp	r2, #0
 801758c:	9207      	str	r2, [sp, #28]
 801758e:	bfbc      	itt	lt
 8017590:	1952      	addlt	r2, r2, r5
 8017592:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017596:	6905      	ldr	r5, [r0, #16]
 8017598:	bfb8      	it	lt
 801759a:	9207      	strlt	r2, [sp, #28]
 801759c:	eb04 0901 	add.w	r9, r4, r1
 80175a0:	9a01      	ldr	r2, [sp, #4]
 80175a2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80175a6:	429a      	cmp	r2, r3
 80175a8:	f040 8111 	bne.w	80177ce <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80175ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80175b0:	429e      	cmp	r6, r3
 80175b2:	d104      	bne.n	80175be <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80175b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80175b8:	9a03      	ldr	r2, [sp, #12]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d01b      	beq.n	80175f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80175be:	88ea      	ldrh	r2, [r5, #6]
 80175c0:	88ab      	ldrh	r3, [r5, #4]
 80175c2:	4313      	orrs	r3, r2
 80175c4:	d010      	beq.n	80175e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80175c6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80175ca:	2a00      	cmp	r2, #0
 80175cc:	db0c      	blt.n	80175e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80175ce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80175d0:	429a      	cmp	r2, r3
 80175d2:	da09      	bge.n	80175e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80175d4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80175d8:	429a      	cmp	r2, r3
 80175da:	f102 0201 	add.w	r2, r2, #1
 80175de:	bf38      	it	cc
 80175e0:	3508      	addcc	r5, #8
 80175e2:	6082      	str	r2, [r0, #8]
 80175e4:	bf38      	it	cc
 80175e6:	6105      	strcc	r5, [r0, #16]
 80175e8:	6903      	ldr	r3, [r0, #16]
 80175ea:	9a03      	ldr	r2, [sp, #12]
 80175ec:	801e      	strh	r6, [r3, #0]
 80175ee:	805a      	strh	r2, [r3, #2]
 80175f0:	2200      	movs	r2, #0
 80175f2:	809a      	strh	r2, [r3, #4]
 80175f4:	80da      	strh	r2, [r3, #6]
 80175f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80175f8:	9a03      	ldr	r2, [sp, #12]
 80175fa:	6901      	ldr	r1, [r0, #16]
 80175fc:	441a      	add	r2, r3
 80175fe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017602:	42b3      	cmp	r3, r6
 8017604:	d103      	bne.n	801760e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8017606:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801760a:	429a      	cmp	r2, r3
 801760c:	d01a      	beq.n	8017644 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801760e:	88cc      	ldrh	r4, [r1, #6]
 8017610:	888b      	ldrh	r3, [r1, #4]
 8017612:	4323      	orrs	r3, r4
 8017614:	d010      	beq.n	8017638 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017616:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801761a:	2c00      	cmp	r4, #0
 801761c:	db0c      	blt.n	8017638 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801761e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017620:	429c      	cmp	r4, r3
 8017622:	da09      	bge.n	8017638 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017624:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017628:	429c      	cmp	r4, r3
 801762a:	f104 0401 	add.w	r4, r4, #1
 801762e:	bf38      	it	cc
 8017630:	3108      	addcc	r1, #8
 8017632:	6084      	str	r4, [r0, #8]
 8017634:	bf38      	it	cc
 8017636:	6101      	strcc	r1, [r0, #16]
 8017638:	6903      	ldr	r3, [r0, #16]
 801763a:	2100      	movs	r1, #0
 801763c:	801e      	strh	r6, [r3, #0]
 801763e:	805a      	strh	r2, [r3, #2]
 8017640:	8099      	strh	r1, [r3, #4]
 8017642:	80d9      	strh	r1, [r3, #6]
 8017644:	9b06      	ldr	r3, [sp, #24]
 8017646:	4293      	cmp	r3, r2
 8017648:	f000 8082 	beq.w	8017750 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801764c:	9b08      	ldr	r3, [sp, #32]
 801764e:	9902      	ldr	r1, [sp, #8]
 8017650:	015b      	lsls	r3, r3, #5
 8017652:	9c02      	ldr	r4, [sp, #8]
 8017654:	fb93 f1f1 	sdiv	r1, r3, r1
 8017658:	fb04 3311 	mls	r3, r4, r1, r3
 801765c:	9103      	str	r1, [sp, #12]
 801765e:	2b00      	cmp	r3, #0
 8017660:	9308      	str	r3, [sp, #32]
 8017662:	da04      	bge.n	801766e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8017664:	1e4b      	subs	r3, r1, #1
 8017666:	9303      	str	r3, [sp, #12]
 8017668:	9b08      	ldr	r3, [sp, #32]
 801766a:	4423      	add	r3, r4
 801766c:	9308      	str	r3, [sp, #32]
 801766e:	9b07      	ldr	r3, [sp, #28]
 8017670:	464f      	mov	r7, r9
 8017672:	9902      	ldr	r1, [sp, #8]
 8017674:	2600      	movs	r6, #0
 8017676:	1a5b      	subs	r3, r3, r1
 8017678:	9307      	str	r3, [sp, #28]
 801767a:	9b01      	ldr	r3, [sp, #4]
 801767c:	f1c3 0320 	rsb	r3, r3, #32
 8017680:	930e      	str	r3, [sp, #56]	@ 0x38
 8017682:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017684:	9b01      	ldr	r3, [sp, #4]
 8017686:	1a5b      	subs	r3, r3, r1
 8017688:	930a      	str	r3, [sp, #40]	@ 0x28
 801768a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801768e:	185b      	adds	r3, r3, r1
 8017690:	bf58      	it	pl
 8017692:	9902      	ldrpl	r1, [sp, #8]
 8017694:	9307      	str	r3, [sp, #28]
 8017696:	bf57      	itett	pl
 8017698:	1a5b      	subpl	r3, r3, r1
 801769a:	9903      	ldrmi	r1, [sp, #12]
 801769c:	9307      	strpl	r3, [sp, #28]
 801769e:	9b03      	ldrpl	r3, [sp, #12]
 80176a0:	bf58      	it	pl
 80176a2:	1c59      	addpl	r1, r3, #1
 80176a4:	2a00      	cmp	r2, #0
 80176a6:	4489      	add	r9, r1
 80176a8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80176ac:	db2e      	blt.n	801770c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80176ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80176b0:	4293      	cmp	r3, r2
 80176b2:	dd2b      	ble.n	801770c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80176b4:	9c01      	ldr	r4, [sp, #4]
 80176b6:	6905      	ldr	r5, [r0, #16]
 80176b8:	46a0      	mov	r8, r4
 80176ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80176bc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80176c0:	45a0      	cmp	r8, r4
 80176c2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80176c6:	f040 814c 	bne.w	8017962 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80176ca:	f9b5 1000 	ldrsh.w	r1, [r5]
 80176ce:	4551      	cmp	r1, sl
 80176d0:	d103      	bne.n	80176da <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80176d2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80176d6:	4291      	cmp	r1, r2
 80176d8:	d018      	beq.n	801770c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80176da:	ea5c 010e 	orrs.w	r1, ip, lr
 80176de:	d00f      	beq.n	8017700 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80176e0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80176e4:	2900      	cmp	r1, #0
 80176e6:	db0b      	blt.n	8017700 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80176e8:	428b      	cmp	r3, r1
 80176ea:	dd09      	ble.n	8017700 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80176ec:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80176f0:	4299      	cmp	r1, r3
 80176f2:	f101 0101 	add.w	r1, r1, #1
 80176f6:	bf38      	it	cc
 80176f8:	3508      	addcc	r5, #8
 80176fa:	6081      	str	r1, [r0, #8]
 80176fc:	bf38      	it	cc
 80176fe:	6105      	strcc	r5, [r0, #16]
 8017700:	6903      	ldr	r3, [r0, #16]
 8017702:	f8a3 a000 	strh.w	sl, [r3]
 8017706:	805a      	strh	r2, [r3, #2]
 8017708:	809e      	strh	r6, [r3, #4]
 801770a:	80de      	strh	r6, [r3, #6]
 801770c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801770e:	6901      	ldr	r1, [r0, #16]
 8017710:	441a      	add	r2, r3
 8017712:	88cc      	ldrh	r4, [r1, #6]
 8017714:	888b      	ldrh	r3, [r1, #4]
 8017716:	4323      	orrs	r3, r4
 8017718:	d010      	beq.n	801773c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801771a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801771e:	2c00      	cmp	r4, #0
 8017720:	db0c      	blt.n	801773c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017722:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017724:	429c      	cmp	r4, r3
 8017726:	da09      	bge.n	801773c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017728:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801772c:	429c      	cmp	r4, r3
 801772e:	f104 0401 	add.w	r4, r4, #1
 8017732:	bf38      	it	cc
 8017734:	3108      	addcc	r1, #8
 8017736:	6084      	str	r4, [r0, #8]
 8017738:	bf38      	it	cc
 801773a:	6101      	strcc	r1, [r0, #16]
 801773c:	6903      	ldr	r3, [r0, #16]
 801773e:	464f      	mov	r7, r9
 8017740:	f8a3 a000 	strh.w	sl, [r3]
 8017744:	805a      	strh	r2, [r3, #2]
 8017746:	809e      	strh	r6, [r3, #4]
 8017748:	80de      	strh	r6, [r3, #6]
 801774a:	9b06      	ldr	r3, [sp, #24]
 801774c:	4293      	cmp	r3, r2
 801774e:	d19c      	bne.n	801768a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8017750:	9b01      	ldr	r3, [sp, #4]
 8017752:	6907      	ldr	r7, [r0, #16]
 8017754:	f1c3 0620 	rsb	r6, r3, #32
 8017758:	9b05      	ldr	r3, [sp, #20]
 801775a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801775e:	9b04      	ldr	r3, [sp, #16]
 8017760:	429e      	cmp	r6, r3
 8017762:	f040 81c7 	bne.w	8017af4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8017766:	f9b7 3000 	ldrsh.w	r3, [r7]
 801776a:	459e      	cmp	lr, r3
 801776c:	d104      	bne.n	8017778 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801776e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017772:	429a      	cmp	r2, r3
 8017774:	f43f ae3a 	beq.w	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017778:	88f9      	ldrh	r1, [r7, #6]
 801777a:	88bb      	ldrh	r3, [r7, #4]
 801777c:	430b      	orrs	r3, r1
 801777e:	d010      	beq.n	80177a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017784:	2b00      	cmp	r3, #0
 8017786:	db0c      	blt.n	80177a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017788:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801778a:	428b      	cmp	r3, r1
 801778c:	da09      	bge.n	80177a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801778e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017792:	428b      	cmp	r3, r1
 8017794:	f103 0301 	add.w	r3, r3, #1
 8017798:	bf38      	it	cc
 801779a:	3708      	addcc	r7, #8
 801779c:	6083      	str	r3, [r0, #8]
 801779e:	bf38      	it	cc
 80177a0:	6107      	strcc	r7, [r0, #16]
 80177a2:	6903      	ldr	r3, [r0, #16]
 80177a4:	f8a3 e000 	strh.w	lr, [r3]
 80177a8:	e603      	b.n	80173b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80177aa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80177ac:	9c03      	ldr	r4, [sp, #12]
 80177ae:	42a2      	cmp	r2, r4
 80177b0:	f6ff ae1c 	blt.w	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80177b4:	9c06      	ldr	r4, [sp, #24]
 80177b6:	42a2      	cmp	r2, r4
 80177b8:	9c08      	ldr	r4, [sp, #32]
 80177ba:	bfbc      	itt	lt
 80177bc:	3201      	addlt	r2, #1
 80177be:	9206      	strlt	r2, [sp, #24]
 80177c0:	f1c3 0220 	rsb	r2, r3, #32
 80177c4:	4362      	muls	r2, r4
 80177c6:	2401      	movs	r4, #1
 80177c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80177ca:	2420      	movs	r4, #32
 80177cc:	e6d6      	b.n	801757c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80177ce:	ea4f 1861 	mov.w	r8, r1, asr #5
 80177d2:	f009 021f 	and.w	r2, r9, #31
 80177d6:	f001 011f 	and.w	r1, r1, #31
 80177da:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80177de:	920c      	str	r2, [sp, #48]	@ 0x30
 80177e0:	45b0      	cmp	r8, r6
 80177e2:	9a01      	ldr	r2, [sp, #4]
 80177e4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80177e8:	eba2 0203 	sub.w	r2, r2, r3
 80177ec:	d108      	bne.n	8017800 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80177ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177f0:	4496      	add	lr, r2
 80177f2:	4419      	add	r1, r3
 80177f4:	f8a5 e004 	strh.w	lr, [r5, #4]
 80177f8:	fb02 a101 	mla	r1, r2, r1, sl
 80177fc:	80e9      	strh	r1, [r5, #6]
 80177fe:	e6fa      	b.n	80175f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017800:	2c00      	cmp	r4, #0
 8017802:	f2c0 80a7 	blt.w	8017954 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8017806:	2701      	movs	r7, #1
 8017808:	f1c1 0c20 	rsb	ip, r1, #32
 801780c:	970a      	str	r7, [sp, #40]	@ 0x28
 801780e:	2720      	movs	r7, #32
 8017810:	fb02 f20c 	mul.w	r2, r2, ip
 8017814:	9709      	str	r7, [sp, #36]	@ 0x24
 8017816:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8017818:	fb92 fcf4 	sdiv	ip, r2, r4
 801781c:	fb04 221c 	mls	r2, r4, ip, r2
 8017820:	4439      	add	r1, r7
 8017822:	2a00      	cmp	r2, #0
 8017824:	bfbc      	itt	lt
 8017826:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801782a:	1912      	addlt	r2, r2, r4
 801782c:	fb0c a101 	mla	r1, ip, r1, sl
 8017830:	44e6      	add	lr, ip
 8017832:	80e9      	strh	r1, [r5, #6]
 8017834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017836:	f8a5 e004 	strh.w	lr, [r5, #4]
 801783a:	eb08 0501 	add.w	r5, r8, r1
 801783e:	6901      	ldr	r1, [r0, #16]
 8017840:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017844:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017848:	ea58 070e 	orrs.w	r7, r8, lr
 801784c:	d010      	beq.n	8017870 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801784e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017852:	f1be 0f00 	cmp.w	lr, #0
 8017856:	db0b      	blt.n	8017870 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017858:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801785a:	45be      	cmp	lr, r7
 801785c:	da08      	bge.n	8017870 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801785e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017862:	45be      	cmp	lr, r7
 8017864:	bf3c      	itt	cc
 8017866:	3108      	addcc	r1, #8
 8017868:	6101      	strcc	r1, [r0, #16]
 801786a:	f10e 0101 	add.w	r1, lr, #1
 801786e:	6081      	str	r1, [r0, #8]
 8017870:	6901      	ldr	r1, [r0, #16]
 8017872:	f04f 0e00 	mov.w	lr, #0
 8017876:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801787a:	42ae      	cmp	r6, r5
 801787c:	800d      	strh	r5, [r1, #0]
 801787e:	4463      	add	r3, ip
 8017880:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017884:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017888:	f8a1 e006 	strh.w	lr, [r1, #6]
 801788c:	d053      	beq.n	8017936 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801788e:	9901      	ldr	r1, [sp, #4]
 8017890:	1b12      	subs	r2, r2, r4
 8017892:	1ac9      	subs	r1, r1, r3
 8017894:	4461      	add	r1, ip
 8017896:	0149      	lsls	r1, r1, #5
 8017898:	fb91 fef4 	sdiv	lr, r1, r4
 801789c:	fb04 111e 	mls	r1, r4, lr, r1
 80178a0:	2900      	cmp	r1, #0
 80178a2:	bfbc      	itt	lt
 80178a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80178a8:	1909      	addlt	r1, r1, r4
 80178aa:	f10e 0701 	add.w	r7, lr, #1
 80178ae:	970d      	str	r7, [sp, #52]	@ 0x34
 80178b0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80178b4:	1852      	adds	r2, r2, r1
 80178b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80178b8:	bf54      	ite	pl
 80178ba:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80178be:	46f4      	movmi	ip, lr
 80178c0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80178c4:	bf58      	it	pl
 80178c6:	1b12      	subpl	r2, r2, r4
 80178c8:	4463      	add	r3, ip
 80178ca:	443d      	add	r5, r7
 80178cc:	44e3      	add	fp, ip
 80178ce:	f8aa b004 	strh.w	fp, [sl, #4]
 80178d2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80178d6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80178da:	f8aa b006 	strh.w	fp, [sl, #6]
 80178de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80178e2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80178e6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80178ea:	ea5b 070a 	orrs.w	r7, fp, sl
 80178ee:	d014      	beq.n	801791a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80178f0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80178f4:	f1ba 0f00 	cmp.w	sl, #0
 80178f8:	db0f      	blt.n	801791a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80178fa:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80178fc:	45ba      	cmp	sl, r7
 80178fe:	da0c      	bge.n	801791a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017900:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017904:	45ba      	cmp	sl, r7
 8017906:	f10a 0a01 	add.w	sl, sl, #1
 801790a:	bf38      	it	cc
 801790c:	f10c 0c08 	addcc.w	ip, ip, #8
 8017910:	f8c0 a008 	str.w	sl, [r0, #8]
 8017914:	bf38      	it	cc
 8017916:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801791a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801791e:	f04f 0700 	mov.w	r7, #0
 8017922:	42ae      	cmp	r6, r5
 8017924:	f8ac 5000 	strh.w	r5, [ip]
 8017928:	f8ac 8002 	strh.w	r8, [ip, #2]
 801792c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017930:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017934:	d1bc      	bne.n	80178b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8017936:	6904      	ldr	r4, [r0, #16]
 8017938:	9a01      	ldr	r2, [sp, #4]
 801793a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801793c:	1ad3      	subs	r3, r2, r3
 801793e:	88a2      	ldrh	r2, [r4, #4]
 8017940:	3120      	adds	r1, #32
 8017942:	441a      	add	r2, r3
 8017944:	80a2      	strh	r2, [r4, #4]
 8017946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017948:	1a89      	subs	r1, r1, r2
 801794a:	88e2      	ldrh	r2, [r4, #6]
 801794c:	fb03 2301 	mla	r3, r3, r1, r2
 8017950:	80e3      	strh	r3, [r4, #6]
 8017952:	e650      	b.n	80175f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017954:	f04f 37ff 	mov.w	r7, #4294967295
 8017958:	434a      	muls	r2, r1
 801795a:	4264      	negs	r4, r4
 801795c:	970a      	str	r7, [sp, #40]	@ 0x28
 801795e:	2700      	movs	r7, #0
 8017960:	e758      	b.n	8017814 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8017962:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017966:	f009 031f 	and.w	r3, r9, #31
 801796a:	f007 071f 	and.w	r7, r7, #31
 801796e:	fa1f fc8c 	uxth.w	ip, ip
 8017972:	45d0      	cmp	r8, sl
 8017974:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017976:	fa1f fe8e 	uxth.w	lr, lr
 801797a:	d10a      	bne.n	8017992 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801797c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801797e:	449c      	add	ip, r3
 8017980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017982:	441f      	add	r7, r3
 8017984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017986:	f8a5 c004 	strh.w	ip, [r5, #4]
 801798a:	fb03 e707 	mla	r7, r3, r7, lr
 801798e:	80ef      	strh	r7, [r5, #6]
 8017990:	e6bc      	b.n	801770c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017992:	2900      	cmp	r1, #0
 8017994:	f2c0 80a6 	blt.w	8017ae4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8017998:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801799a:	f1c7 0320 	rsb	r3, r7, #32
 801799e:	4363      	muls	r3, r4
 80179a0:	2401      	movs	r4, #1
 80179a2:	940d      	str	r4, [sp, #52]	@ 0x34
 80179a4:	2420      	movs	r4, #32
 80179a6:	940c      	str	r4, [sp, #48]	@ 0x30
 80179a8:	fb93 f4f1 	sdiv	r4, r3, r1
 80179ac:	fb01 3b14 	mls	fp, r1, r4, r3
 80179b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179b2:	f1bb 0f00 	cmp.w	fp, #0
 80179b6:	441f      	add	r7, r3
 80179b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80179ba:	bfbc      	itt	lt
 80179bc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80179c0:	448b      	addlt	fp, r1
 80179c2:	fb04 e707 	mla	r7, r4, r7, lr
 80179c6:	44a4      	add	ip, r4
 80179c8:	80ef      	strh	r7, [r5, #6]
 80179ca:	f8a5 c004 	strh.w	ip, [r5, #4]
 80179ce:	eb08 0503 	add.w	r5, r8, r3
 80179d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80179d6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80179da:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80179de:	ea5e 0307 	orrs.w	r3, lr, r7
 80179e2:	d011      	beq.n	8017a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80179e4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80179e8:	f1be 0f00 	cmp.w	lr, #0
 80179ec:	db0c      	blt.n	8017a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80179ee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80179f0:	45be      	cmp	lr, r7
 80179f2:	da09      	bge.n	8017a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80179f4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80179f8:	45be      	cmp	lr, r7
 80179fa:	bf3c      	itt	cc
 80179fc:	f10c 0708 	addcc.w	r7, ip, #8
 8017a00:	6107      	strcc	r7, [r0, #16]
 8017a02:	f10e 0701 	add.w	r7, lr, #1
 8017a06:	6087      	str	r7, [r0, #8]
 8017a08:	6907      	ldr	r7, [r0, #16]
 8017a0a:	b213      	sxth	r3, r2
 8017a0c:	4555      	cmp	r5, sl
 8017a0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017a10:	807b      	strh	r3, [r7, #2]
 8017a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a14:	803d      	strh	r5, [r7, #0]
 8017a16:	80be      	strh	r6, [r7, #4]
 8017a18:	eb04 0c03 	add.w	ip, r4, r3
 8017a1c:	80fe      	strh	r6, [r7, #6]
 8017a1e:	d050      	beq.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8017a20:	9b01      	ldr	r3, [sp, #4]
 8017a22:	eba3 070c 	sub.w	r7, r3, ip
 8017a26:	ebab 0301 	sub.w	r3, fp, r1
 8017a2a:	443c      	add	r4, r7
 8017a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a2e:	0164      	lsls	r4, r4, #5
 8017a30:	fb94 f8f1 	sdiv	r8, r4, r1
 8017a34:	fb01 4418 	mls	r4, r1, r8, r4
 8017a38:	2c00      	cmp	r4, #0
 8017a3a:	bfbc      	itt	lt
 8017a3c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017a40:	1864      	addlt	r4, r4, r1
 8017a42:	f108 0701 	add.w	r7, r8, #1
 8017a46:	9711      	str	r7, [sp, #68]	@ 0x44
 8017a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a4a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017a4e:	191b      	adds	r3, r3, r4
 8017a50:	f8be b004 	ldrh.w	fp, [lr, #4]
 8017a54:	bf54      	ite	pl
 8017a56:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8017a58:	4647      	movmi	r7, r8
 8017a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a5c:	bf58      	it	pl
 8017a5e:	1a5b      	subpl	r3, r3, r1
 8017a60:	44bb      	add	fp, r7
 8017a62:	44bc      	add	ip, r7
 8017a64:	bf58      	it	pl
 8017a66:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8017a68:	f8ae b004 	strh.w	fp, [lr, #4]
 8017a6c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017a70:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017a74:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017a76:	f8ae b006 	strh.w	fp, [lr, #6]
 8017a7a:	443d      	add	r5, r7
 8017a7c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017a80:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017a84:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8017a88:	ea5b 0307 	orrs.w	r3, fp, r7
 8017a8c:	d011      	beq.n	8017ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017a8e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8017a92:	f1bb 0f00 	cmp.w	fp, #0
 8017a96:	db0c      	blt.n	8017ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017a98:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017a9a:	45bb      	cmp	fp, r7
 8017a9c:	da09      	bge.n	8017ab2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017a9e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017aa2:	45bb      	cmp	fp, r7
 8017aa4:	bf3c      	itt	cc
 8017aa6:	f10e 0708 	addcc.w	r7, lr, #8
 8017aaa:	6107      	strcc	r7, [r0, #16]
 8017aac:	f10b 0701 	add.w	r7, fp, #1
 8017ab0:	6087      	str	r7, [r0, #8]
 8017ab2:	6907      	ldr	r7, [r0, #16]
 8017ab4:	4555      	cmp	r5, sl
 8017ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017ab8:	803d      	strh	r5, [r7, #0]
 8017aba:	807b      	strh	r3, [r7, #2]
 8017abc:	80be      	strh	r6, [r7, #4]
 8017abe:	80fe      	strh	r6, [r7, #6]
 8017ac0:	d1c2      	bne.n	8017a48 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8017ac2:	9b01      	ldr	r3, [sp, #4]
 8017ac4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017ac6:	eba3 0c0c 	sub.w	ip, r3, ip
 8017aca:	6903      	ldr	r3, [r0, #16]
 8017acc:	3720      	adds	r7, #32
 8017ace:	8899      	ldrh	r1, [r3, #4]
 8017ad0:	4461      	add	r1, ip
 8017ad2:	8099      	strh	r1, [r3, #4]
 8017ad4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017ad6:	1a7f      	subs	r7, r7, r1
 8017ad8:	88d9      	ldrh	r1, [r3, #6]
 8017ada:	fb0c 1c07 	mla	ip, ip, r7, r1
 8017ade:	f8a3 c006 	strh.w	ip, [r3, #6]
 8017ae2:	e613      	b.n	801770c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8017ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017aea:	4249      	negs	r1, r1
 8017aec:	940d      	str	r4, [sp, #52]	@ 0x34
 8017aee:	2400      	movs	r4, #0
 8017af0:	437b      	muls	r3, r7
 8017af2:	e758      	b.n	80179a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8017af4:	9905      	ldr	r1, [sp, #20]
 8017af6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8017afa:	f009 0c1f 	and.w	ip, r9, #31
 8017afe:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8017b02:	f001 011f 	and.w	r1, r1, #31
 8017b06:	45f3      	cmp	fp, lr
 8017b08:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8017b0c:	9102      	str	r1, [sp, #8]
 8017b0e:	9904      	ldr	r1, [sp, #16]
 8017b10:	eba1 0406 	sub.w	r4, r1, r6
 8017b14:	d108      	bne.n	8017b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8017b16:	9b02      	ldr	r3, [sp, #8]
 8017b18:	44a0      	add	r8, r4
 8017b1a:	449c      	add	ip, r3
 8017b1c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017b20:	fb04 a40c 	mla	r4, r4, ip, sl
 8017b24:	80fc      	strh	r4, [r7, #6]
 8017b26:	e461      	b.n	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017b28:	9905      	ldr	r1, [sp, #20]
 8017b2a:	ebb1 0109 	subs.w	r1, r1, r9
 8017b2e:	bf51      	iteee	pl
 8017b30:	f1cc 0520 	rsbpl	r5, ip, #32
 8017b34:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017b38:	4249      	negmi	r1, r1
 8017b3a:	2500      	movmi	r5, #0
 8017b3c:	bf5d      	ittte	pl
 8017b3e:	436c      	mulpl	r4, r5
 8017b40:	2520      	movpl	r5, #32
 8017b42:	f04f 0901 	movpl.w	r9, #1
 8017b46:	f04f 39ff 	movmi.w	r9, #4294967295
 8017b4a:	9501      	str	r5, [sp, #4]
 8017b4c:	9b01      	ldr	r3, [sp, #4]
 8017b4e:	fb94 f5f1 	sdiv	r5, r4, r1
 8017b52:	fb01 4415 	mls	r4, r1, r5, r4
 8017b56:	449c      	add	ip, r3
 8017b58:	eb0b 0309 	add.w	r3, fp, r9
 8017b5c:	2c00      	cmp	r4, #0
 8017b5e:	bfbc      	itt	lt
 8017b60:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017b64:	1864      	addlt	r4, r4, r1
 8017b66:	44a8      	add	r8, r5
 8017b68:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017b6c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017b70:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017b74:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b78:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017b7c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017b80:	ea58 0707 	orrs.w	r7, r8, r7
 8017b84:	d011      	beq.n	8017baa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017b86:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017b8a:	f1b8 0f00 	cmp.w	r8, #0
 8017b8e:	db0c      	blt.n	8017baa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017b90:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017b92:	45b8      	cmp	r8, r7
 8017b94:	da09      	bge.n	8017baa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017b96:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8017b9a:	45b8      	cmp	r8, r7
 8017b9c:	bf3c      	itt	cc
 8017b9e:	f10c 0708 	addcc.w	r7, ip, #8
 8017ba2:	6107      	strcc	r7, [r0, #16]
 8017ba4:	f108 0701 	add.w	r7, r8, #1
 8017ba8:	6087      	str	r7, [r0, #8]
 8017baa:	6907      	ldr	r7, [r0, #16]
 8017bac:	f04f 0c00 	mov.w	ip, #0
 8017bb0:	b212      	sxth	r2, r2
 8017bb2:	459e      	cmp	lr, r3
 8017bb4:	803b      	strh	r3, [r7, #0]
 8017bb6:	442e      	add	r6, r5
 8017bb8:	807a      	strh	r2, [r7, #2]
 8017bba:	f8a7 c004 	strh.w	ip, [r7, #4]
 8017bbe:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017bc2:	d04b      	beq.n	8017c5c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8017bc4:	9f04      	ldr	r7, [sp, #16]
 8017bc6:	1a64      	subs	r4, r4, r1
 8017bc8:	f04f 0a00 	mov.w	sl, #0
 8017bcc:	1bbf      	subs	r7, r7, r6
 8017bce:	443d      	add	r5, r7
 8017bd0:	016d      	lsls	r5, r5, #5
 8017bd2:	fb95 f8f1 	sdiv	r8, r5, r1
 8017bd6:	fb01 5518 	mls	r5, r1, r8, r5
 8017bda:	4565      	cmp	r5, ip
 8017bdc:	bfbc      	itt	lt
 8017bde:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017be2:	186d      	addlt	r5, r5, r1
 8017be4:	f108 0701 	add.w	r7, r8, #1
 8017be8:	9703      	str	r7, [sp, #12]
 8017bea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017bee:	1964      	adds	r4, r4, r5
 8017bf0:	444b      	add	r3, r9
 8017bf2:	bf54      	ite	pl
 8017bf4:	9f03      	ldrpl	r7, [sp, #12]
 8017bf6:	4647      	movmi	r7, r8
 8017bf8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017bfc:	bf58      	it	pl
 8017bfe:	1a64      	subpl	r4, r4, r1
 8017c00:	443e      	add	r6, r7
 8017c02:	44bb      	add	fp, r7
 8017c04:	f8ac b004 	strh.w	fp, [ip, #4]
 8017c08:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017c0c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017c10:	f8ac b006 	strh.w	fp, [ip, #6]
 8017c14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017c18:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017c1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017c20:	ea5b 0707 	orrs.w	r7, fp, r7
 8017c24:	d011      	beq.n	8017c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017c26:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017c2a:	f1bb 0f00 	cmp.w	fp, #0
 8017c2e:	db0c      	blt.n	8017c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017c30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017c32:	45bb      	cmp	fp, r7
 8017c34:	da09      	bge.n	8017c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017c36:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017c3a:	45bb      	cmp	fp, r7
 8017c3c:	bf3c      	itt	cc
 8017c3e:	f10c 0708 	addcc.w	r7, ip, #8
 8017c42:	6107      	strcc	r7, [r0, #16]
 8017c44:	f10b 0701 	add.w	r7, fp, #1
 8017c48:	6087      	str	r7, [r0, #8]
 8017c4a:	6907      	ldr	r7, [r0, #16]
 8017c4c:	459e      	cmp	lr, r3
 8017c4e:	803b      	strh	r3, [r7, #0]
 8017c50:	807a      	strh	r2, [r7, #2]
 8017c52:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017c56:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017c5a:	d1c6      	bne.n	8017bea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8017c5c:	9b04      	ldr	r3, [sp, #16]
 8017c5e:	1b9e      	subs	r6, r3, r6
 8017c60:	6903      	ldr	r3, [r0, #16]
 8017c62:	889a      	ldrh	r2, [r3, #4]
 8017c64:	4432      	add	r2, r6
 8017c66:	809a      	strh	r2, [r3, #4]
 8017c68:	9a02      	ldr	r2, [sp, #8]
 8017c6a:	f102 0c20 	add.w	ip, r2, #32
 8017c6e:	9a01      	ldr	r2, [sp, #4]
 8017c70:	ebac 0c02 	sub.w	ip, ip, r2
 8017c74:	88da      	ldrh	r2, [r3, #6]
 8017c76:	fb06 260c 	mla	r6, r6, ip, r2
 8017c7a:	80de      	strh	r6, [r3, #6]
 8017c7c:	f7ff bbb6 	b.w	80173ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08017c80 <_ZN8touchgfx7Outline6lineToEii>:
 8017c80:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017c82:	079b      	lsls	r3, r3, #30
 8017c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c86:	460e      	mov	r6, r1
 8017c88:	4615      	mov	r5, r2
 8017c8a:	d511      	bpl.n	8017cb0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017c8c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8017c90:	ea86 0701 	eor.w	r7, r6, r1
 8017c94:	ea85 0302 	eor.w	r3, r5, r2
 8017c98:	433b      	orrs	r3, r7
 8017c9a:	d009      	beq.n	8017cb0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017c9c:	4633      	mov	r3, r6
 8017c9e:	9500      	str	r5, [sp, #0]
 8017ca0:	f7ff fb4c 	bl	801733c <_ZN8touchgfx7Outline10renderLineEiiii>
 8017ca4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017ca6:	f043 0301 	orr.w	r3, r3, #1
 8017caa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8017cae:	6243      	str	r3, [r0, #36]	@ 0x24
 8017cb0:	b003      	add	sp, #12
 8017cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017cb4 <_ZN8touchgfx7Outline6moveToEii>:
 8017cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cb6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017cb8:	4615      	mov	r5, r2
 8017cba:	4604      	mov	r4, r0
 8017cbc:	460e      	mov	r6, r1
 8017cbe:	079a      	lsls	r2, r3, #30
 8017cc0:	d401      	bmi.n	8017cc6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8017cc2:	f7ff fb07 	bl	80172d4 <_ZN8touchgfx7Outline5resetEv>
 8017cc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017cc8:	07db      	lsls	r3, r3, #31
 8017cca:	d504      	bpl.n	8017cd6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8017ccc:	4620      	mov	r0, r4
 8017cce:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8017cd2:	f7ff ffd5 	bl	8017c80 <_ZN8touchgfx7Outline6lineToEii>
 8017cd6:	6923      	ldr	r3, [r4, #16]
 8017cd8:	1170      	asrs	r0, r6, #5
 8017cda:	1169      	asrs	r1, r5, #5
 8017cdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ce0:	4290      	cmp	r0, r2
 8017ce2:	d103      	bne.n	8017cec <_ZN8touchgfx7Outline6moveToEii+0x38>
 8017ce4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ce8:	4291      	cmp	r1, r2
 8017cea:	d01a      	beq.n	8017d22 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8017cec:	88df      	ldrh	r7, [r3, #6]
 8017cee:	889a      	ldrh	r2, [r3, #4]
 8017cf0:	433a      	orrs	r2, r7
 8017cf2:	d010      	beq.n	8017d16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017cf4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	db0c      	blt.n	8017d16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017cfc:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8017cfe:	42ba      	cmp	r2, r7
 8017d00:	da09      	bge.n	8017d16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017d02:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8017d06:	42ba      	cmp	r2, r7
 8017d08:	f102 0201 	add.w	r2, r2, #1
 8017d0c:	bf38      	it	cc
 8017d0e:	3308      	addcc	r3, #8
 8017d10:	60a2      	str	r2, [r4, #8]
 8017d12:	bf38      	it	cc
 8017d14:	6123      	strcc	r3, [r4, #16]
 8017d16:	6923      	ldr	r3, [r4, #16]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	8018      	strh	r0, [r3, #0]
 8017d1c:	8059      	strh	r1, [r3, #2]
 8017d1e:	809a      	strh	r2, [r3, #4]
 8017d20:	80da      	strh	r2, [r3, #6]
 8017d22:	6166      	str	r6, [r4, #20]
 8017d24:	6225      	str	r5, [r4, #32]
 8017d26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017d2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8017d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d30:	b0d0      	sub	sp, #320	@ 0x140
 8017d32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017d36:	466c      	mov	r4, sp
 8017d38:	4627      	mov	r7, r4
 8017d3a:	1a0d      	subs	r5, r1, r0
 8017d3c:	f100 0308 	add.w	r3, r0, #8
 8017d40:	2d48      	cmp	r5, #72	@ 0x48
 8017d42:	f340 80d5 	ble.w	8017ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017d46:	112d      	asrs	r5, r5, #4
 8017d48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017d4c:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017d50:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8017d54:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8017d58:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017d5c:	6816      	ldr	r6, [r2, #0]
 8017d5e:	6006      	str	r6, [r0, #0]
 8017d60:	6856      	ldr	r6, [r2, #4]
 8017d62:	6046      	str	r6, [r0, #4]
 8017d64:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017d68:	f8a2 8002 	strh.w	r8, [r2, #2]
 8017d6c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017d70:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017d74:	f1a1 0208 	sub.w	r2, r1, #8
 8017d78:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017d7c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8017d80:	4565      	cmp	r5, ip
 8017d82:	db06      	blt.n	8017d92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8017d84:	d119      	bne.n	8017dba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017d86:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017d8a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8017d8e:	42ae      	cmp	r6, r5
 8017d90:	dd13      	ble.n	8017dba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017d92:	460e      	mov	r6, r1
 8017d94:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8017d98:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8017d9c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017da0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8017da4:	601d      	str	r5, [r3, #0]
 8017da6:	6875      	ldr	r5, [r6, #4]
 8017da8:	605d      	str	r5, [r3, #4]
 8017daa:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017dae:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017db2:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017db6:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017dba:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017dbe:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8017dc2:	42ae      	cmp	r6, r5
 8017dc4:	db06      	blt.n	8017dd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8017dc6:	d116      	bne.n	8017df6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017dc8:	f9b0 c000 	ldrsh.w	ip, [r0]
 8017dcc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8017dd0:	45ac      	cmp	ip, r5
 8017dd2:	da10      	bge.n	8017df6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017dd4:	681d      	ldr	r5, [r3, #0]
 8017dd6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017dda:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017dde:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017de2:	6005      	str	r5, [r0, #0]
 8017de4:	685d      	ldr	r5, [r3, #4]
 8017de6:	f8a0 8008 	strh.w	r8, [r0, #8]
 8017dea:	6045      	str	r5, [r0, #4]
 8017dec:	8146      	strh	r6, [r0, #10]
 8017dee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8017df2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017df6:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017dfa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8017dfe:	4565      	cmp	r5, ip
 8017e00:	db06      	blt.n	8017e10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8017e02:	d119      	bne.n	8017e38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017e04:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8017e08:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017e0c:	42ae      	cmp	r6, r5
 8017e0e:	da13      	bge.n	8017e38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017e10:	460e      	mov	r6, r1
 8017e12:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017e16:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8017e1a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017e1e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8017e22:	6005      	str	r5, [r0, #0]
 8017e24:	6875      	ldr	r5, [r6, #4]
 8017e26:	6045      	str	r5, [r0, #4]
 8017e28:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017e2c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017e30:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017e34:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017e38:	3308      	adds	r3, #8
 8017e3a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8017e3e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8017e42:	45e6      	cmp	lr, ip
 8017e44:	dbf8      	blt.n	8017e38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017e46:	d105      	bne.n	8017e54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017e48:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017e4c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017e50:	42ae      	cmp	r6, r5
 8017e52:	dbf1      	blt.n	8017e38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017e54:	4615      	mov	r5, r2
 8017e56:	3a08      	subs	r2, #8
 8017e58:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8017e5c:	45b4      	cmp	ip, r6
 8017e5e:	dbf9      	blt.n	8017e54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017e60:	d105      	bne.n	8017e6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8017e62:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017e66:	f9b2 6000 	ldrsh.w	r6, [r2]
 8017e6a:	45b0      	cmp	r8, r6
 8017e6c:	dbf2      	blt.n	8017e54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017e6e:	4293      	cmp	r3, r2
 8017e70:	f1a5 0608 	sub.w	r6, r5, #8
 8017e74:	d816      	bhi.n	8017ea4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8017e76:	f8d6 c000 	ldr.w	ip, [r6]
 8017e7a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8017e7e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8017e82:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8017e86:	f8c3 c000 	str.w	ip, [r3]
 8017e8a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8017e8e:	f8c3 c004 	str.w	ip, [r3, #4]
 8017e92:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017e96:	f825 ec06 	strh.w	lr, [r5, #-6]
 8017e9a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8017e9e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8017ea2:	e7c9      	b.n	8017e38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017ea4:	f8d6 e000 	ldr.w	lr, [r6]
 8017ea8:	f9b0 a000 	ldrsh.w	sl, [r0]
 8017eac:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8017eb0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8017eb4:	f8c0 e000 	str.w	lr, [r0]
 8017eb8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017ebc:	1a16      	subs	r6, r2, r0
 8017ebe:	f8c0 e004 	str.w	lr, [r0, #4]
 8017ec2:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017ec6:	f825 cc06 	strh.w	ip, [r5, #-6]
 8017eca:	f825 9c04 	strh.w	r9, [r5, #-4]
 8017ece:	f825 8c02 	strh.w	r8, [r5, #-2]
 8017ed2:	1acd      	subs	r5, r1, r3
 8017ed4:	10ed      	asrs	r5, r5, #3
 8017ed6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8017eda:	bfb5      	itete	lt
 8017edc:	e9c4 0200 	strdlt	r0, r2, [r4]
 8017ee0:	e9c4 3100 	strdge	r3, r1, [r4]
 8017ee4:	460a      	movlt	r2, r1
 8017ee6:	4603      	movge	r3, r0
 8017ee8:	3408      	adds	r4, #8
 8017eea:	4618      	mov	r0, r3
 8017eec:	4611      	mov	r1, r2
 8017eee:	e724      	b.n	8017d3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017ef0:	4299      	cmp	r1, r3
 8017ef2:	d927      	bls.n	8017f44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8017ef4:	f1a3 0210 	sub.w	r2, r3, #16
 8017ef8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8017efc:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8017f00:	45ac      	cmp	ip, r5
 8017f02:	db06      	blt.n	8017f12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8017f04:	d11c      	bne.n	8017f40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017f06:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8017f0a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8017f0e:	42ae      	cmp	r6, r5
 8017f10:	da16      	bge.n	8017f40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017f12:	4615      	mov	r5, r2
 8017f14:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8017f18:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8017f1c:	3a08      	subs	r2, #8
 8017f1e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8017f22:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8017f26:	6196      	str	r6, [r2, #24]
 8017f28:	42a8      	cmp	r0, r5
 8017f2a:	686e      	ldr	r6, [r5, #4]
 8017f2c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8017f30:	61d6      	str	r6, [r2, #28]
 8017f32:	f8a2 c012 	strh.w	ip, [r2, #18]
 8017f36:	f8a2 8014 	strh.w	r8, [r2, #20]
 8017f3a:	f8a2 e016 	strh.w	lr, [r2, #22]
 8017f3e:	d1db      	bne.n	8017ef8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8017f40:	3308      	adds	r3, #8
 8017f42:	e7d5      	b.n	8017ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017f44:	42bc      	cmp	r4, r7
 8017f46:	d903      	bls.n	8017f50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8017f48:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8017f4c:	3c08      	subs	r4, #8
 8017f4e:	e6f4      	b.n	8017d3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017f50:	b050      	add	sp, #320	@ 0x140
 8017f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017f56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8017f56:	b510      	push	{r4, lr}
 8017f58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	07da      	lsls	r2, r3, #31
 8017f5e:	d507      	bpl.n	8017f70 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8017f60:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8017f64:	f7ff fe8c 	bl	8017c80 <_ZN8touchgfx7Outline6lineToEii>
 8017f68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017f6a:	f023 0301 	bic.w	r3, r3, #1
 8017f6e:	6243      	str	r3, [r0, #36]	@ 0x24
 8017f70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017f72:	079b      	lsls	r3, r3, #30
 8017f74:	d521      	bpl.n	8017fba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8017f76:	6923      	ldr	r3, [r4, #16]
 8017f78:	88d9      	ldrh	r1, [r3, #6]
 8017f7a:	889a      	ldrh	r2, [r3, #4]
 8017f7c:	430a      	orrs	r2, r1
 8017f7e:	d010      	beq.n	8017fa2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017f80:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017f84:	2a00      	cmp	r2, #0
 8017f86:	db0c      	blt.n	8017fa2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017f88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017f8a:	428a      	cmp	r2, r1
 8017f8c:	da09      	bge.n	8017fa2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017f8e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8017f92:	4291      	cmp	r1, r2
 8017f94:	f102 0201 	add.w	r2, r2, #1
 8017f98:	bf88      	it	hi
 8017f9a:	3308      	addhi	r3, #8
 8017f9c:	60a2      	str	r2, [r4, #8]
 8017f9e:	bf88      	it	hi
 8017fa0:	6123      	strhi	r3, [r4, #16]
 8017fa2:	68a1      	ldr	r1, [r4, #8]
 8017fa4:	b129      	cbz	r1, 8017fb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8017fa6:	6863      	ldr	r3, [r4, #4]
 8017fa8:	4299      	cmp	r1, r3
 8017faa:	d802      	bhi.n	8017fb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8017fac:	68e0      	ldr	r0, [r4, #12]
 8017fae:	f7ff febd 	bl	8017d2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8017fb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017fb4:	f023 0302 	bic.w	r3, r3, #2
 8017fb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8017fba:	68e0      	ldr	r0, [r4, #12]
 8017fbc:	bd10      	pop	{r4, pc}
	...

08017fc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017fc0:	4b02      	ldr	r3, [pc, #8]	@ (8017fcc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017fc2:	6018      	str	r0, [r3, #0]
 8017fc4:	4b02      	ldr	r3, [pc, #8]	@ (8017fd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017fc6:	6019      	str	r1, [r3, #0]
 8017fc8:	4770      	bx	lr
 8017fca:	bf00      	nop
 8017fcc:	24028528 	.word	0x24028528
 8017fd0:	2402852c 	.word	0x2402852c

08017fd4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	4a02      	ldr	r2, [pc, #8]	@ (8017fe0 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8017fd8:	6013      	str	r3, [r2, #0]
 8017fda:	4a02      	ldr	r2, [pc, #8]	@ (8017fe4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8017fdc:	6013      	str	r3, [r2, #0]
 8017fde:	4770      	bx	lr
 8017fe0:	24028528 	.word	0x24028528
 8017fe4:	2402852c 	.word	0x2402852c

08017fe8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017fe8:	4b01      	ldr	r3, [pc, #4]	@ (8017ff0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017fea:	6818      	ldr	r0, [r3, #0]
 8017fec:	4770      	bx	lr
 8017fee:	bf00      	nop
 8017ff0:	24028528 	.word	0x24028528

08017ff4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017ff4:	4b01      	ldr	r3, [pc, #4]	@ (8017ffc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017ff6:	6818      	ldr	r0, [r3, #0]
 8017ff8:	4770      	bx	lr
 8017ffa:	bf00      	nop
 8017ffc:	2402852c 	.word	0x2402852c

08018000 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018000:	b510      	push	{r4, lr}
 8018002:	6803      	ldr	r3, [r0, #0]
 8018004:	460c      	mov	r4, r1
 8018006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018008:	4798      	blx	r3
 801800a:	1b03      	subs	r3, r0, r4
 801800c:	4258      	negs	r0, r3
 801800e:	4158      	adcs	r0, r3
 8018010:	bd10      	pop	{r4, pc}
	...

08018014 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018014:	4b01      	ldr	r3, [pc, #4]	@ (801801c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018016:	6019      	str	r1, [r3, #0]
 8018018:	4770      	bx	lr
 801801a:	bf00      	nop
 801801c:	24028530 	.word	0x24028530

08018020 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018024:	4696      	mov	lr, r2
 8018026:	b097      	sub	sp, #92	@ 0x5c
 8018028:	4605      	mov	r5, r0
 801802a:	4614      	mov	r4, r2
 801802c:	460e      	mov	r6, r1
 801802e:	461f      	mov	r7, r3
 8018030:	f10d 0c1c 	add.w	ip, sp, #28
 8018034:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8018038:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801803c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8018040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018048:	f8de 3000 	ldr.w	r3, [lr]
 801804c:	f104 0e14 	add.w	lr, r4, #20
 8018050:	f8cc 3000 	str.w	r3, [ip]
 8018054:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018058:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801805c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018060:	f8de 3000 	ldr.w	r3, [lr]
 8018064:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018068:	f8cc 3000 	str.w	r3, [ip]
 801806c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018078:	f8de 3000 	ldr.w	r3, [lr]
 801807c:	4631      	mov	r1, r6
 801807e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018080:	4628      	mov	r0, r5
 8018082:	f8cc 3000 	str.w	r3, [ip]
 8018086:	682b      	ldr	r3, [r5, #0]
 8018088:	9201      	str	r2, [sp, #4]
 801808a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801808c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018090:	9200      	str	r2, [sp, #0]
 8018092:	aa07      	add	r2, sp, #28
 8018094:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018098:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801809c:	463b      	mov	r3, r7
 801809e:	47d8      	blx	fp
 80180a0:	46a6      	mov	lr, r4
 80180a2:	f10d 0c1c 	add.w	ip, sp, #28
 80180a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80180aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180ae:	f8de 3000 	ldr.w	r3, [lr]
 80180b2:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80180b6:	343c      	adds	r4, #60	@ 0x3c
 80180b8:	f8cc 3000 	str.w	r3, [ip]
 80180bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80180c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80180c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180c8:	f8de 3000 	ldr.w	r3, [lr]
 80180cc:	f8cc 3000 	str.w	r3, [ip]
 80180d0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80180d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180da:	6823      	ldr	r3, [r4, #0]
 80180dc:	4631      	mov	r1, r6
 80180de:	4628      	mov	r0, r5
 80180e0:	f8cc 3000 	str.w	r3, [ip]
 80180e4:	682b      	ldr	r3, [r5, #0]
 80180e6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80180ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80180ec:	f8cd 8008 	str.w	r8, [sp, #8]
 80180f0:	9201      	str	r2, [sp, #4]
 80180f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80180f4:	9200      	str	r2, [sp, #0]
 80180f6:	aa07      	add	r2, sp, #28
 80180f8:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80180fa:	463b      	mov	r3, r7
 80180fc:	47a0      	blx	r4
 80180fe:	b017      	add	sp, #92	@ 0x5c
 8018100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018104 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	b08d      	sub	sp, #52	@ 0x34
 801810a:	4688      	mov	r8, r1
 801810c:	f8d3 c000 	ldr.w	ip, [r3]
 8018110:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018112:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8018116:	680f      	ldr	r7, [r1, #0]
 8018118:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801811c:	eba7 070c 	sub.w	r7, r7, ip
 8018120:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8018124:	edd3 6a07 	vldr	s13, [r3, #28]
 8018128:	42bc      	cmp	r4, r7
 801812a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801812c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8018130:	bfa8      	it	ge
 8018132:	463c      	movge	r4, r7
 8018134:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018138:	f9ba 1000 	ldrsh.w	r1, [sl]
 801813c:	ee07 4a90 	vmov	s15, r4
 8018140:	eb09 0e0c 	add.w	lr, r9, ip
 8018144:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8018148:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801814c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8018150:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8018154:	4571      	cmp	r1, lr
 8018156:	ee25 4a04 	vmul.f32	s8, s10, s8
 801815a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801815e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018162:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018166:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801816a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801816e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018172:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018176:	ee61 1a87 	vmul.f32	s3, s3, s14
 801817a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801817e:	f340 808c 	ble.w	801829a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018182:	eba1 060e 	sub.w	r6, r1, lr
 8018186:	fb96 f5f4 	sdiv	r5, r6, r4
 801818a:	ee07 5a10 	vmov	s14, r5
 801818e:	2d00      	cmp	r5, #0
 8018190:	fb04 6615 	mls	r6, r4, r5, r6
 8018194:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018198:	eea7 0a04 	vfma.f32	s0, s14, s8
 801819c:	eee7 0a24 	vfma.f32	s1, s14, s9
 80181a0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80181a4:	dd12      	ble.n	80181cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80181a6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80181aa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80181ae:	ee31 2a45 	vsub.f32	s4, s2, s10
 80181b2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80181b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ba:	bf14      	ite	ne
 80181bc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80181c0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80181c4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80181c8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80181cc:	fb05 f204 	mul.w	r2, r5, r4
 80181d0:	1abf      	subs	r7, r7, r2
 80181d2:	4494      	add	ip, r2
 80181d4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80181d8:	4411      	add	r1, r2
 80181da:	eb09 020c 	add.w	r2, r9, ip
 80181de:	b209      	sxth	r1, r1
 80181e0:	443a      	add	r2, r7
 80181e2:	428a      	cmp	r2, r1
 80181e4:	bfc4      	itt	gt
 80181e6:	eba1 0209 	subgt.w	r2, r1, r9
 80181ea:	eba2 070c 	subgt.w	r7, r2, ip
 80181ee:	2f00      	cmp	r7, #0
 80181f0:	dd50      	ble.n	8018294 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80181f2:	fb97 f1f4 	sdiv	r1, r7, r4
 80181f6:	fb04 7211 	mls	r2, r4, r1, r7
 80181fa:	b90a      	cbnz	r2, 8018200 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80181fc:	3901      	subs	r1, #1
 80181fe:	4622      	mov	r2, r4
 8018200:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018204:	6840      	ldr	r0, [r0, #4]
 8018206:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801820a:	44b6      	add	lr, r6
 801820c:	f8d0 a000 	ldr.w	sl, [r0]
 8018210:	2900      	cmp	r1, #0
 8018212:	bfcc      	ite	gt
 8018214:	46a1      	movgt	r9, r4
 8018216:	4691      	movle	r9, r2
 8018218:	900b      	str	r0, [sp, #44]	@ 0x2c
 801821a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801821c:	fb04 e505 	mla	r5, r4, r5, lr
 8018220:	eef0 6a42 	vmov.f32	s13, s4
 8018224:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018228:	9008      	str	r0, [sp, #32]
 801822a:	eeb0 7a61 	vmov.f32	s14, s3
 801822e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8018230:	695b      	ldr	r3, [r3, #20]
 8018232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018236:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801823a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801823e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018240:	445b      	add	r3, fp
 8018242:	9307      	str	r3, [sp, #28]
 8018244:	ee16 3a90 	vmov	r3, s13
 8018248:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801824c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018250:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018254:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018258:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801825c:	ee17 7a90 	vmov	r7, s15
 8018260:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018264:	fb97 f7f4 	sdiv	r7, r7, r4
 8018268:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801826c:	ee17 ca90 	vmov	ip, s15
 8018270:	fb9c fcf4 	sdiv	ip, ip, r4
 8018274:	fb0c 3306 	mla	r3, ip, r6, r3
 8018278:	9302      	str	r3, [sp, #8]
 801827a:	ee17 3a10 	vmov	r3, s14
 801827e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018282:	fb07 3706 	mla	r7, r7, r6, r3
 8018286:	eba9 0306 	sub.w	r3, r9, r6
 801828a:	e9cd 4700 	strd	r4, r7, [sp]
 801828e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018292:	47a0      	blx	r4
 8018294:	b00d      	add	sp, #52	@ 0x34
 8018296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829a:	2500      	movs	r5, #0
 801829c:	462e      	mov	r6, r5
 801829e:	e799      	b.n	80181d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080182a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80182a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	b0db      	sub	sp, #364	@ 0x16c
 80182a6:	461d      	mov	r5, r3
 80182a8:	4614      	mov	r4, r2
 80182aa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80182ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80182b0:	4629      	mov	r1, r5
 80182b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80182b4:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80182b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80182ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182bc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80182c0:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80182c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80182c6:	6803      	ldr	r3, [r0, #0]
 80182c8:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80182ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80182ce:	47b8      	blx	r7
 80182d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182d2:	6058      	str	r0, [r3, #4]
 80182d4:	2800      	cmp	r0, #0
 80182d6:	f000 83a1 	beq.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80182da:	682b      	ldr	r3, [r5, #0]
 80182dc:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80182e0:	ed94 7a02 	vldr	s14, [r4, #8]
 80182e4:	9314      	str	r3, [sp, #80]	@ 0x50
 80182e6:	686b      	ldr	r3, [r5, #4]
 80182e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80182ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80182ee:	4bc1      	ldr	r3, [pc, #772]	@ (80185f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80182f0:	7819      	ldrb	r1, [r3, #0]
 80182f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80182f6:	2900      	cmp	r1, #0
 80182f8:	bf16      	itet	ne
 80182fa:	4619      	movne	r1, r3
 80182fc:	4611      	moveq	r1, r2
 80182fe:	4613      	movne	r3, r2
 8018300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018304:	9116      	str	r1, [sp, #88]	@ 0x58
 8018306:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801830a:	f240 8387 	bls.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801830e:	ed94 7a07 	vldr	s14, [r4, #28]
 8018312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831a:	f240 837f 	bls.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801831e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8018322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801832a:	f240 8377 	bls.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801832e:	6822      	ldr	r2, [r4, #0]
 8018330:	4bb1      	ldr	r3, [pc, #708]	@ (80185f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018332:	429a      	cmp	r2, r3
 8018334:	f2c0 8372 	blt.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018338:	49b0      	ldr	r1, [pc, #704]	@ (80185fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801833a:	6963      	ldr	r3, [r4, #20]
 801833c:	428a      	cmp	r2, r1
 801833e:	f300 836d 	bgt.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018342:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8018346:	48ae      	ldr	r0, [pc, #696]	@ (8018600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018348:	33ff      	adds	r3, #255	@ 0xff
 801834a:	4283      	cmp	r3, r0
 801834c:	f200 8366 	bhi.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018350:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018352:	4dac      	ldr	r5, [pc, #688]	@ (8018604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018354:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8018358:	33ff      	adds	r3, #255	@ 0xff
 801835a:	42ab      	cmp	r3, r5
 801835c:	f200 835e 	bhi.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018360:	6862      	ldr	r2, [r4, #4]
 8018362:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8018366:	33ff      	adds	r3, #255	@ 0xff
 8018368:	4283      	cmp	r3, r0
 801836a:	f200 8357 	bhi.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801836e:	69a1      	ldr	r1, [r4, #24]
 8018370:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8018374:	33ff      	adds	r3, #255	@ 0xff
 8018376:	4283      	cmp	r3, r0
 8018378:	f200 8350 	bhi.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801837c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801837e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8018382:	30ff      	adds	r0, #255	@ 0xff
 8018384:	42a8      	cmp	r0, r5
 8018386:	f200 8349 	bhi.w	8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801838a:	428a      	cmp	r2, r1
 801838c:	f280 8110 	bge.w	80185b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018390:	429a      	cmp	r2, r3
 8018392:	f300 8119 	bgt.w	80185c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018396:	4299      	cmp	r1, r3
 8018398:	f280 811d 	bge.w	80185d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801839c:	2502      	movs	r5, #2
 801839e:	2701      	movs	r7, #1
 80183a0:	46a9      	mov	r9, r5
 80183a2:	46b8      	mov	r8, r7
 80183a4:	f04f 0a00 	mov.w	sl, #0
 80183a8:	4621      	mov	r1, r4
 80183aa:	a849      	add	r0, sp, #292	@ 0x124
 80183ac:	f004 f97a 	bl	801c6a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80183b0:	4622      	mov	r2, r4
 80183b2:	4653      	mov	r3, sl
 80183b4:	a949      	add	r1, sp, #292	@ 0x124
 80183b6:	f8cd 9000 	str.w	r9, [sp]
 80183ba:	a819      	add	r0, sp, #100	@ 0x64
 80183bc:	f004 faa2 	bl	801c904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80183c0:	4622      	mov	r2, r4
 80183c2:	4653      	mov	r3, sl
 80183c4:	a949      	add	r1, sp, #292	@ 0x124
 80183c6:	f8cd 8000 	str.w	r8, [sp]
 80183ca:	a829      	add	r0, sp, #164	@ 0xa4
 80183cc:	f004 fa9a 	bl	801c904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80183d0:	4643      	mov	r3, r8
 80183d2:	4622      	mov	r2, r4
 80183d4:	a949      	add	r1, sp, #292	@ 0x124
 80183d6:	f8cd 9000 	str.w	r9, [sp]
 80183da:	a839      	add	r0, sp, #228	@ 0xe4
 80183dc:	f004 fa92 	bl	801c904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80183e0:	42af      	cmp	r7, r5
 80183e2:	af12      	add	r7, sp, #72	@ 0x48
 80183e4:	bfb7      	itett	lt
 80183e6:	2300      	movlt	r3, #0
 80183e8:	2301      	movge	r3, #1
 80183ea:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80183ec:	ac19      	addlt	r4, sp, #100	@ 0x64
 80183ee:	bfb1      	iteee	lt
 80183f0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80183f2:	ad19      	addge	r5, sp, #100	@ 0x64
 80183f4:	930e      	strge	r3, [sp, #56]	@ 0x38
 80183f6:	ac29      	addge	r4, sp, #164	@ 0xa4
 80183f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80183fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8018402:	b928      	cbnz	r0, 8018410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018404:	4b80      	ldr	r3, [pc, #512]	@ (8018608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018406:	6818      	ldr	r0, [r3, #0]
 8018408:	6803      	ldr	r3, [r0, #0]
 801840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801840c:	4798      	blx	r3
 801840e:	6038      	str	r0, [r7, #0]
 8018410:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018412:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018416:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801841a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801841c:	930c      	str	r3, [sp, #48]	@ 0x30
 801841e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018420:	6963      	ldr	r3, [r4, #20]
 8018422:	440b      	add	r3, r1
 8018424:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018428:	4408      	add	r0, r1
 801842a:	b200      	sxth	r0, r0
 801842c:	4283      	cmp	r3, r0
 801842e:	900d      	str	r0, [sp, #52]	@ 0x34
 8018430:	f280 80dd 	bge.w	80185ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018434:	428b      	cmp	r3, r1
 8018436:	da08      	bge.n	801844a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018438:	2a00      	cmp	r2, #0
 801843a:	dd06      	ble.n	801844a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801843c:	1acb      	subs	r3, r1, r3
 801843e:	429a      	cmp	r2, r3
 8018440:	f2c0 80e4 	blt.w	801860c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018444:	2b00      	cmp	r3, #0
 8018446:	f300 80e2 	bgt.w	801860e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801844a:	6967      	ldr	r7, [r4, #20]
 801844c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018450:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018452:	443b      	add	r3, r7
 8018454:	461f      	mov	r7, r3
 8018456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018458:	1bdf      	subs	r7, r3, r7
 801845a:	4297      	cmp	r7, r2
 801845c:	bfa8      	it	ge
 801845e:	4617      	movge	r7, r2
 8018460:	2f00      	cmp	r7, #0
 8018462:	f340 8166 	ble.w	8018732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018466:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018468:	6829      	ldr	r1, [r5, #0]
 801846a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801846e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018472:	4411      	add	r1, r2
 8018474:	6820      	ldr	r0, [r4, #0]
 8018476:	4299      	cmp	r1, r3
 8018478:	dd1a      	ble.n	80184b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801847a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801847e:	4402      	add	r2, r0
 8018480:	440b      	add	r3, r1
 8018482:	b21b      	sxth	r3, r3
 8018484:	429a      	cmp	r2, r3
 8018486:	dc13      	bgt.n	80184b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018488:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801848a:	a912      	add	r1, sp, #72	@ 0x48
 801848c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801848e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	9206      	str	r2, [sp, #24]
 8018494:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018496:	9500      	str	r5, [sp, #0]
 8018498:	9205      	str	r2, [sp, #20]
 801849a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801849c:	e9cd b203 	strd	fp, r2, [sp, #12]
 80184a0:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80184a2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80184a6:	aa49      	add	r2, sp, #292	@ 0x124
 80184a8:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80184ac:	4623      	mov	r3, r4
 80184ae:	47c8      	blx	r9
 80184b0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80184b4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80184b8:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80184bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80184c0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80184c4:	68a1      	ldr	r1, [r4, #8]
 80184c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80184ca:	ed94 6a08 	vldr	s12, [r4, #32]
 80184ce:	edd4 6a07 	vldr	s13, [r4, #28]
 80184d2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80184d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80184da:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80184de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80184e2:	edc4 6a07 	vstr	s13, [r4, #28]
 80184e6:	441a      	add	r2, r3
 80184e8:	6963      	ldr	r3, [r4, #20]
 80184ea:	3301      	adds	r3, #1
 80184ec:	6022      	str	r2, [r4, #0]
 80184ee:	6163      	str	r3, [r4, #20]
 80184f0:	69a3      	ldr	r3, [r4, #24]
 80184f2:	3b01      	subs	r3, #1
 80184f4:	61a3      	str	r3, [r4, #24]
 80184f6:	6923      	ldr	r3, [r4, #16]
 80184f8:	440b      	add	r3, r1
 80184fa:	68e1      	ldr	r1, [r4, #12]
 80184fc:	428b      	cmp	r3, r1
 80184fe:	6123      	str	r3, [r4, #16]
 8018500:	db15      	blt.n	801852e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018502:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018506:	3201      	adds	r2, #1
 8018508:	1a5b      	subs	r3, r3, r1
 801850a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801850e:	6022      	str	r2, [r4, #0]
 8018510:	6123      	str	r3, [r4, #16]
 8018512:	edc4 6a07 	vstr	s13, [r4, #28]
 8018516:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801851a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801851e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018522:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801852a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801852e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018532:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018536:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801853a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801853e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018542:	68a9      	ldr	r1, [r5, #8]
 8018544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018548:	ed95 6a08 	vldr	s12, [r5, #32]
 801854c:	edd5 6a07 	vldr	s13, [r5, #28]
 8018550:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018554:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018558:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801855c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018560:	edc5 6a07 	vstr	s13, [r5, #28]
 8018564:	441a      	add	r2, r3
 8018566:	696b      	ldr	r3, [r5, #20]
 8018568:	3301      	adds	r3, #1
 801856a:	602a      	str	r2, [r5, #0]
 801856c:	616b      	str	r3, [r5, #20]
 801856e:	69ab      	ldr	r3, [r5, #24]
 8018570:	3b01      	subs	r3, #1
 8018572:	61ab      	str	r3, [r5, #24]
 8018574:	692b      	ldr	r3, [r5, #16]
 8018576:	440b      	add	r3, r1
 8018578:	68e9      	ldr	r1, [r5, #12]
 801857a:	428b      	cmp	r3, r1
 801857c:	612b      	str	r3, [r5, #16]
 801857e:	db15      	blt.n	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018580:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018584:	3201      	adds	r2, #1
 8018586:	1a5b      	subs	r3, r3, r1
 8018588:	ee76 6a26 	vadd.f32	s13, s12, s13
 801858c:	602a      	str	r2, [r5, #0]
 801858e:	612b      	str	r3, [r5, #16]
 8018590:	edc5 6a07 	vstr	s13, [r5, #28]
 8018594:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018598:	ee36 7a87 	vadd.f32	s14, s13, s14
 801859c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80185a0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80185a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185a8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80185ac:	3f01      	subs	r7, #1
 80185ae:	e757      	b.n	8018460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80185b0:	4299      	cmp	r1, r3
 80185b2:	dc13      	bgt.n	80185dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80185b4:	429a      	cmp	r2, r3
 80185b6:	da14      	bge.n	80185e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80185b8:	2502      	movs	r5, #2
 80185ba:	2703      	movs	r7, #3
 80185bc:	f04f 0800 	mov.w	r8, #0
 80185c0:	46a9      	mov	r9, r5
 80185c2:	f04f 0a01 	mov.w	sl, #1
 80185c6:	e6ef      	b.n	80183a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80185c8:	2501      	movs	r5, #1
 80185ca:	2700      	movs	r7, #0
 80185cc:	46a9      	mov	r9, r5
 80185ce:	46b8      	mov	r8, r7
 80185d0:	f04f 0a02 	mov.w	sl, #2
 80185d4:	e6e8      	b.n	80183a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80185d6:	2501      	movs	r5, #1
 80185d8:	2702      	movs	r7, #2
 80185da:	e6e1      	b.n	80183a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80185dc:	2500      	movs	r5, #0
 80185de:	2701      	movs	r7, #1
 80185e0:	e7f4      	b.n	80185cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80185e2:	2702      	movs	r7, #2
 80185e4:	2503      	movs	r5, #3
 80185e6:	f04f 0900 	mov.w	r9, #0
 80185ea:	46b8      	mov	r8, r7
 80185ec:	e7e9      	b.n	80185c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80185ee:	4613      	mov	r3, r2
 80185f0:	e728      	b.n	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80185f2:	bf00      	nop
 80185f4:	24028518 	.word	0x24028518
 80185f8:	fffd8f01 	.word	0xfffd8f01
 80185fc:	00027100 	.word	0x00027100
 8018600:	0004e1ff 	.word	0x0004e1ff
 8018604:	0004e1fe 	.word	0x0004e1fe
 8018608:	24028520 	.word	0x24028520
 801860c:	4613      	mov	r3, r2
 801860e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018610:	469e      	mov	lr, r3
 8018612:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8018614:	469c      	mov	ip, r3
 8018616:	9111      	str	r1, [sp, #68]	@ 0x44
 8018618:	f04f 0900 	mov.w	r9, #0
 801861c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8018620:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8018624:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8018628:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801862c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018630:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018634:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8018638:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801863c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018640:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8018644:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8018648:	f1bc 0f00 	cmp.w	ip, #0
 801864c:	d147      	bne.n	80186de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801864e:	eb03 0c07 	add.w	ip, r3, r7
 8018652:	1ad7      	subs	r7, r2, r3
 8018654:	f1b9 0f00 	cmp.w	r9, #0
 8018658:	d009      	beq.n	801866e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801865a:	9029      	str	r0, [sp, #164]	@ 0xa4
 801865c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8018660:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8018664:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8018668:	912d      	str	r1, [sp, #180]	@ 0xb4
 801866a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801866e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018670:	f04f 0800 	mov.w	r8, #0
 8018674:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018678:	9111      	str	r1, [sp, #68]	@ 0x44
 801867a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801867e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018682:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018686:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801868a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801868e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018692:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018696:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801869a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801869e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80186a2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80186a6:	f1be 0f00 	cmp.w	lr, #0
 80186aa:	d031      	beq.n	8018710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80186ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80186ae:	4450      	add	r0, sl
 80186b0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80186b4:	4431      	add	r1, r6
 80186b6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80186ba:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80186be:	4549      	cmp	r1, r9
 80186c0:	db08      	blt.n	80186d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80186c2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80186c6:	3001      	adds	r0, #1
 80186c8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80186cc:	eba1 0109 	sub.w	r1, r1, r9
 80186d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80186d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80186d8:	f04f 0801 	mov.w	r8, #1
 80186dc:	e7e3      	b.n	80186a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80186de:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80186e0:	4450      	add	r0, sl
 80186e2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80186e6:	4431      	add	r1, r6
 80186e8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80186ec:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80186f0:	4541      	cmp	r1, r8
 80186f2:	db08      	blt.n	8018706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80186f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80186f8:	3001      	adds	r0, #1
 80186fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80186fe:	eba1 0108 	sub.w	r1, r1, r8
 8018702:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018706:	f10c 3cff 	add.w	ip, ip, #4294967295
 801870a:	f04f 0901 	mov.w	r9, #1
 801870e:	e79b      	b.n	8018648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018710:	449c      	add	ip, r3
 8018712:	1aff      	subs	r7, r7, r3
 8018714:	f1b8 0f00 	cmp.w	r8, #0
 8018718:	d009      	beq.n	801872e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801871a:	9019      	str	r0, [sp, #100]	@ 0x64
 801871c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018720:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018724:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018728:	911d      	str	r1, [sp, #116]	@ 0x74
 801872a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801872e:	1ad2      	subs	r2, r2, r3
 8018730:	e68b      	b.n	801844a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018734:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018736:	2b00      	cmp	r3, #0
 8018738:	f000 80d1 	beq.w	80188de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801873c:	ad19      	add	r5, sp, #100	@ 0x64
 801873e:	ac39      	add	r4, sp, #228	@ 0xe4
 8018740:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018742:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801874a:	930c      	str	r3, [sp, #48]	@ 0x30
 801874c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801874e:	6963      	ldr	r3, [r4, #20]
 8018750:	440b      	add	r3, r1
 8018752:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018756:	4408      	add	r0, r1
 8018758:	b200      	sxth	r0, r0
 801875a:	4283      	cmp	r3, r0
 801875c:	900d      	str	r0, [sp, #52]	@ 0x34
 801875e:	f280 80c1 	bge.w	80188e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018762:	428b      	cmp	r3, r1
 8018764:	da08      	bge.n	8018778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018766:	2a00      	cmp	r2, #0
 8018768:	dd06      	ble.n	8018778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801876a:	1acb      	subs	r3, r1, r3
 801876c:	429a      	cmp	r2, r3
 801876e:	f2c0 80bb 	blt.w	80188e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018772:	2b00      	cmp	r3, #0
 8018774:	f300 80b9 	bgt.w	80188ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018778:	6967      	ldr	r7, [r4, #20]
 801877a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801877e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018780:	443b      	add	r3, r7
 8018782:	461f      	mov	r7, r3
 8018784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018786:	1bdf      	subs	r7, r3, r7
 8018788:	4297      	cmp	r7, r2
 801878a:	bfa8      	it	ge
 801878c:	4617      	movge	r7, r2
 801878e:	2f00      	cmp	r7, #0
 8018790:	f340 813c 	ble.w	8018a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018794:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018796:	6829      	ldr	r1, [r5, #0]
 8018798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801879c:	f9bb 3000 	ldrsh.w	r3, [fp]
 80187a0:	4411      	add	r1, r2
 80187a2:	6820      	ldr	r0, [r4, #0]
 80187a4:	4299      	cmp	r1, r3
 80187a6:	dd1a      	ble.n	80187de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80187a8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80187ac:	4402      	add	r2, r0
 80187ae:	440b      	add	r3, r1
 80187b0:	b21b      	sxth	r3, r3
 80187b2:	429a      	cmp	r2, r3
 80187b4:	dc13      	bgt.n	80187de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80187b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80187b8:	a912      	add	r1, sp, #72	@ 0x48
 80187ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	9206      	str	r2, [sp, #24]
 80187c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80187c4:	9500      	str	r5, [sp, #0]
 80187c6:	9205      	str	r2, [sp, #20]
 80187c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187ca:	e9cd b203 	strd	fp, r2, [sp, #12]
 80187ce:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80187d0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80187d4:	aa49      	add	r2, sp, #292	@ 0x124
 80187d6:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80187da:	4623      	mov	r3, r4
 80187dc:	47c8      	blx	r9
 80187de:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80187e2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80187e6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80187ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80187ee:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80187f2:	68a1      	ldr	r1, [r4, #8]
 80187f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80187f8:	ed94 6a08 	vldr	s12, [r4, #32]
 80187fc:	edd4 6a07 	vldr	s13, [r4, #28]
 8018800:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018804:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018808:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801880c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018810:	edc4 6a07 	vstr	s13, [r4, #28]
 8018814:	441a      	add	r2, r3
 8018816:	6963      	ldr	r3, [r4, #20]
 8018818:	3301      	adds	r3, #1
 801881a:	6022      	str	r2, [r4, #0]
 801881c:	6163      	str	r3, [r4, #20]
 801881e:	69a3      	ldr	r3, [r4, #24]
 8018820:	3b01      	subs	r3, #1
 8018822:	61a3      	str	r3, [r4, #24]
 8018824:	6923      	ldr	r3, [r4, #16]
 8018826:	440b      	add	r3, r1
 8018828:	68e1      	ldr	r1, [r4, #12]
 801882a:	428b      	cmp	r3, r1
 801882c:	6123      	str	r3, [r4, #16]
 801882e:	db15      	blt.n	801885c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018830:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018834:	3201      	adds	r2, #1
 8018836:	1a5b      	subs	r3, r3, r1
 8018838:	ee76 6a26 	vadd.f32	s13, s12, s13
 801883c:	6022      	str	r2, [r4, #0]
 801883e:	6123      	str	r3, [r4, #16]
 8018840:	edc4 6a07 	vstr	s13, [r4, #28]
 8018844:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018848:	ee36 7a87 	vadd.f32	s14, s13, s14
 801884c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018850:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018858:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801885c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018860:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018864:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018868:	ee37 7a27 	vadd.f32	s14, s14, s15
 801886c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018870:	68a9      	ldr	r1, [r5, #8]
 8018872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018876:	ed95 6a08 	vldr	s12, [r5, #32]
 801887a:	edd5 6a07 	vldr	s13, [r5, #28]
 801887e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018882:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018886:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801888a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801888e:	edc5 6a07 	vstr	s13, [r5, #28]
 8018892:	441a      	add	r2, r3
 8018894:	696b      	ldr	r3, [r5, #20]
 8018896:	3301      	adds	r3, #1
 8018898:	602a      	str	r2, [r5, #0]
 801889a:	616b      	str	r3, [r5, #20]
 801889c:	69ab      	ldr	r3, [r5, #24]
 801889e:	3b01      	subs	r3, #1
 80188a0:	61ab      	str	r3, [r5, #24]
 80188a2:	692b      	ldr	r3, [r5, #16]
 80188a4:	440b      	add	r3, r1
 80188a6:	68e9      	ldr	r1, [r5, #12]
 80188a8:	428b      	cmp	r3, r1
 80188aa:	612b      	str	r3, [r5, #16]
 80188ac:	db15      	blt.n	80188da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80188ae:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80188b2:	3201      	adds	r2, #1
 80188b4:	1a5b      	subs	r3, r3, r1
 80188b6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80188ba:	602a      	str	r2, [r5, #0]
 80188bc:	612b      	str	r3, [r5, #16]
 80188be:	edc5 6a07 	vstr	s13, [r5, #28]
 80188c2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80188c6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80188ca:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80188ce:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80188d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188d6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80188da:	3f01      	subs	r7, #1
 80188dc:	e757      	b.n	801878e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80188de:	ad39      	add	r5, sp, #228	@ 0xe4
 80188e0:	ac19      	add	r4, sp, #100	@ 0x64
 80188e2:	e72d      	b.n	8018740 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80188e4:	4613      	mov	r3, r2
 80188e6:	e744      	b.n	8018772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80188e8:	4613      	mov	r3, r2
 80188ea:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80188ec:	469e      	mov	lr, r3
 80188ee:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80188f2:	461f      	mov	r7, r3
 80188f4:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80188f8:	f04f 0900 	mov.w	r9, #0
 80188fc:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8018900:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8018904:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8018908:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801890c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8018910:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018912:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8018916:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801891a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801891e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8018922:	960e      	str	r6, [sp, #56]	@ 0x38
 8018924:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8018928:	2f00      	cmp	r7, #0
 801892a:	d146      	bne.n	80189ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801892c:	449c      	add	ip, r3
 801892e:	1ad7      	subs	r7, r2, r3
 8018930:	f1b9 0f00 	cmp.w	r9, #0
 8018934:	d009      	beq.n	801894a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018936:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018938:	913d      	str	r1, [sp, #244]	@ 0xf4
 801893a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801893e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8018942:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8018946:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801894a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801894c:	f04f 0800 	mov.w	r8, #0
 8018950:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018954:	910e      	str	r1, [sp, #56]	@ 0x38
 8018956:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801895a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801895e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018962:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018966:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801896a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801896e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018972:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018976:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801897a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801897e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018982:	f1be 0f00 	cmp.w	lr, #0
 8018986:	d030      	beq.n	80189ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018988:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801898a:	4450      	add	r0, sl
 801898c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018990:	4431      	add	r1, r6
 8018992:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018996:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801899a:	4549      	cmp	r1, r9
 801899c:	db08      	blt.n	80189b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801899e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80189a2:	3001      	adds	r0, #1
 80189a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80189a8:	eba1 0109 	sub.w	r1, r1, r9
 80189ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80189b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80189b4:	f04f 0801 	mov.w	r8, #1
 80189b8:	e7e3      	b.n	8018982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80189ba:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80189bc:	4450      	add	r0, sl
 80189be:	ee37 7a24 	vadd.f32	s14, s14, s9
 80189c2:	4431      	add	r1, r6
 80189c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80189c8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80189cc:	4541      	cmp	r1, r8
 80189ce:	db08      	blt.n	80189e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80189d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80189d4:	3001      	adds	r0, #1
 80189d6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80189da:	eba1 0108 	sub.w	r1, r1, r8
 80189de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80189e2:	3f01      	subs	r7, #1
 80189e4:	f04f 0901 	mov.w	r9, #1
 80189e8:	e79e      	b.n	8018928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80189ea:	449c      	add	ip, r3
 80189ec:	1aff      	subs	r7, r7, r3
 80189ee:	f1b8 0f00 	cmp.w	r8, #0
 80189f2:	d009      	beq.n	8018a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80189f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80189f6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80189fa:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80189fe:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018a02:	911d      	str	r1, [sp, #116]	@ 0x74
 8018a04:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018a08:	1ad2      	subs	r2, r2, r3
 8018a0a:	e6b5      	b.n	8018778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	b923      	cbnz	r3, 8018a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a12:	4b04      	ldr	r3, [pc, #16]	@ (8018a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018a14:	6818      	ldr	r0, [r3, #0]
 8018a16:	6803      	ldr	r3, [r0, #0]
 8018a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a1a:	4798      	blx	r3
 8018a1c:	b05b      	add	sp, #364	@ 0x16c
 8018a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a22:	bf00      	nop
 8018a24:	24028520 	.word	0x24028520

08018a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018a28:	b570      	push	{r4, r5, r6, lr}
 8018a2a:	4604      	mov	r4, r0
 8018a2c:	2500      	movs	r5, #0
 8018a2e:	9805      	ldr	r0, [sp, #20]
 8018a30:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8018a34:	6061      	str	r1, [r4, #4]
 8018a36:	8263      	strh	r3, [r4, #18]
 8018a38:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018a3c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018a40:	8025      	strh	r5, [r4, #0]
 8018a42:	7221      	strb	r1, [r4, #8]
 8018a44:	7266      	strb	r6, [r4, #9]
 8018a46:	60e0      	str	r0, [r4, #12]
 8018a48:	8222      	strh	r2, [r4, #16]
 8018a4a:	82a3      	strh	r3, [r4, #20]
 8018a4c:	82e5      	strh	r5, [r4, #22]
 8018a4e:	8325      	strh	r5, [r4, #24]
 8018a50:	8365      	strh	r5, [r4, #26]
 8018a52:	83a5      	strh	r5, [r4, #28]
 8018a54:	83e5      	strh	r5, [r4, #30]
 8018a56:	8425      	strh	r5, [r4, #32]
 8018a58:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8018a5c:	b32e      	cbz	r6, 8018aaa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018a5e:	6803      	ldr	r3, [r0, #0]
 8018a60:	695b      	ldr	r3, [r3, #20]
 8018a62:	4798      	blx	r3
 8018a64:	4606      	mov	r6, r0
 8018a66:	b300      	cbz	r0, 8018aaa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018a68:	68e0      	ldr	r0, [r4, #12]
 8018a6a:	4631      	mov	r1, r6
 8018a6c:	6803      	ldr	r3, [r0, #0]
 8018a6e:	68db      	ldr	r3, [r3, #12]
 8018a70:	4798      	blx	r3
 8018a72:	4605      	mov	r5, r0
 8018a74:	b1c8      	cbz	r0, 8018aaa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018a76:	7b43      	ldrb	r3, [r0, #13]
 8018a78:	7a82      	ldrb	r2, [r0, #10]
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018a80:	4313      	orrs	r3, r2
 8018a82:	8423      	strh	r3, [r4, #32]
 8018a84:	7a63      	ldrb	r3, [r4, #9]
 8018a86:	2b06      	cmp	r3, #6
 8018a88:	d10f      	bne.n	8018aaa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018a8a:	68e0      	ldr	r0, [r4, #12]
 8018a8c:	462a      	mov	r2, r5
 8018a8e:	4631      	mov	r1, r6
 8018a90:	6803      	ldr	r3, [r0, #0]
 8018a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a94:	4798      	blx	r3
 8018a96:	7b6b      	ldrb	r3, [r5, #13]
 8018a98:	005b      	lsls	r3, r3, #1
 8018a9a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018a9e:	7aab      	ldrb	r3, [r5, #10]
 8018aa0:	4313      	orrs	r3, r2
 8018aa2:	4418      	add	r0, r3
 8018aa4:	8c23      	ldrh	r3, [r4, #32]
 8018aa6:	4418      	add	r0, r3
 8018aa8:	8420      	strh	r0, [r4, #32]
 8018aaa:	4620      	mov	r0, r4
 8018aac:	bd70      	pop	{r4, r5, r6, pc}

08018aae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab2:	2400      	movs	r4, #0
 8018ab4:	b085      	sub	sp, #20
 8018ab6:	4681      	mov	r9, r0
 8018ab8:	4688      	mov	r8, r1
 8018aba:	4692      	mov	sl, r2
 8018abc:	469b      	mov	fp, r3
 8018abe:	4627      	mov	r7, r4
 8018ac0:	4625      	mov	r5, r4
 8018ac2:	4626      	mov	r6, r4
 8018ac4:	4554      	cmp	r4, sl
 8018ac6:	da2a      	bge.n	8018b1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	9303      	str	r3, [sp, #12]
 8018acc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018ad0:	429d      	cmp	r5, r3
 8018ad2:	d004      	beq.n	8018ade <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018ad4:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018ad8:	429d      	cmp	r5, r3
 8018ada:	bf18      	it	ne
 8018adc:	462f      	movne	r7, r5
 8018ade:	ab03      	add	r3, sp, #12
 8018ae0:	4642      	mov	r2, r8
 8018ae2:	4659      	mov	r1, fp
 8018ae4:	4648      	mov	r0, r9
 8018ae6:	f003 fbf3 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018aea:	4605      	mov	r5, r0
 8018aec:	b1b8      	cbz	r0, 8018b1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018aee:	280a      	cmp	r0, #10
 8018af0:	d015      	beq.n	8018b1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018af2:	9a03      	ldr	r2, [sp, #12]
 8018af4:	b18a      	cbz	r2, 8018b1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8018af6:	7b50      	ldrb	r0, [r2, #13]
 8018af8:	4639      	mov	r1, r7
 8018afa:	7a93      	ldrb	r3, [r2, #10]
 8018afc:	0040      	lsls	r0, r0, #1
 8018afe:	8895      	ldrh	r5, [r2, #4]
 8018b00:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8018b04:	4303      	orrs	r3, r0
 8018b06:	4640      	mov	r0, r8
 8018b08:	9301      	str	r3, [sp, #4]
 8018b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8018b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b10:	4798      	blx	r3
 8018b12:	9b01      	ldr	r3, [sp, #4]
 8018b14:	4418      	add	r0, r3
 8018b16:	4406      	add	r6, r0
 8018b18:	b2b6      	uxth	r6, r6
 8018b1a:	3401      	adds	r4, #1
 8018b1c:	e7d2      	b.n	8018ac4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018b1e:	4630      	mov	r0, r6
 8018b20:	b005      	add	sp, #20
 8018b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018b26:	2a02      	cmp	r2, #2
 8018b28:	b530      	push	{r4, r5, lr}
 8018b2a:	d011      	beq.n	8018b50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018b2c:	2a03      	cmp	r2, #3
 8018b2e:	d01c      	beq.n	8018b6a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018b30:	2a01      	cmp	r2, #1
 8018b32:	d10c      	bne.n	8018b4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018b34:	888b      	ldrh	r3, [r1, #4]
 8018b36:	8801      	ldrh	r1, [r0, #0]
 8018b38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018b3c:	1a5b      	subs	r3, r3, r1
 8018b3e:	8844      	ldrh	r4, [r0, #2]
 8018b40:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018b44:	1a9b      	subs	r3, r3, r2
 8018b46:	8004      	strh	r4, [r0, #0]
 8018b48:	8081      	strh	r1, [r0, #4]
 8018b4a:	8043      	strh	r3, [r0, #2]
 8018b4c:	80c2      	strh	r2, [r0, #6]
 8018b4e:	bd30      	pop	{r4, r5, pc}
 8018b50:	88cb      	ldrh	r3, [r1, #6]
 8018b52:	8842      	ldrh	r2, [r0, #2]
 8018b54:	1a9b      	subs	r3, r3, r2
 8018b56:	88c2      	ldrh	r2, [r0, #6]
 8018b58:	1a9b      	subs	r3, r3, r2
 8018b5a:	888a      	ldrh	r2, [r1, #4]
 8018b5c:	8801      	ldrh	r1, [r0, #0]
 8018b5e:	8043      	strh	r3, [r0, #2]
 8018b60:	1a52      	subs	r2, r2, r1
 8018b62:	8881      	ldrh	r1, [r0, #4]
 8018b64:	1a52      	subs	r2, r2, r1
 8018b66:	8002      	strh	r2, [r0, #0]
 8018b68:	e7f1      	b.n	8018b4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018b6a:	88cb      	ldrh	r3, [r1, #6]
 8018b6c:	8841      	ldrh	r1, [r0, #2]
 8018b6e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018b72:	1a5b      	subs	r3, r3, r1
 8018b74:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018b78:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018b7c:	1a9b      	subs	r3, r3, r2
 8018b7e:	8045      	strh	r5, [r0, #2]
 8018b80:	8082      	strh	r2, [r0, #4]
 8018b82:	8003      	strh	r3, [r0, #0]
 8018b84:	80c4      	strh	r4, [r0, #6]
 8018b86:	e7e2      	b.n	8018b4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018b88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8c:	b09f      	sub	sp, #124	@ 0x7c
 8018b8e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018b90:	9312      	str	r3, [sp, #72]	@ 0x48
 8018b92:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018b94:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018b96:	8812      	ldrh	r2, [r2, #0]
 8018b98:	889b      	ldrh	r3, [r3, #4]
 8018b9a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8018b9c:	4413      	add	r3, r2
 8018b9e:	900e      	str	r0, [sp, #56]	@ 0x38
 8018ba0:	6828      	ldr	r0, [r5, #0]
 8018ba2:	b21b      	sxth	r3, r3
 8018ba4:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018ba6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8018baa:	9311      	str	r3, [sp, #68]	@ 0x44
 8018bac:	6803      	ldr	r3, [r0, #0]
 8018bae:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8018bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bb4:	4798      	blx	r3
 8018bb6:	682b      	ldr	r3, [r5, #0]
 8018bb8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8018bba:	7b1a      	ldrb	r2, [r3, #12]
 8018bbc:	7adb      	ldrb	r3, [r3, #11]
 8018bbe:	9215      	str	r2, [sp, #84]	@ 0x54
 8018bc0:	9316      	str	r3, [sp, #88]	@ 0x58
 8018bc2:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8018bc6:	2c00      	cmp	r4, #0
 8018bc8:	d067      	beq.n	8018c9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018bca:	7c2b      	ldrb	r3, [r5, #16]
 8018bcc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8018bce:	2b06      	cmp	r3, #6
 8018bd0:	bf14      	ite	ne
 8018bd2:	2301      	movne	r3, #1
 8018bd4:	2302      	moveq	r3, #2
 8018bd6:	4413      	add	r3, r2
 8018bd8:	f04f 0900 	mov.w	r9, #0
 8018bdc:	9310      	str	r3, [sp, #64]	@ 0x40
 8018bde:	464c      	mov	r4, r9
 8018be0:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8018be4:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8018be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018bea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018bec:	4293      	cmp	r3, r2
 8018bee:	f280 808b 	bge.w	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8018bf8:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8018bfc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018c00:	429c      	cmp	r4, r3
 8018c02:	d006      	beq.n	8018c12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8018c04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c06:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018c0a:	4294      	cmp	r4, r2
 8018c0c:	bf18      	it	ne
 8018c0e:	4623      	movne	r3, r4
 8018c10:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018c14:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8018c16:	682a      	ldr	r2, [r5, #0]
 8018c18:	428b      	cmp	r3, r1
 8018c1a:	db40      	blt.n	8018c9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8018c1c:	6813      	ldr	r3, [r2, #0]
 8018c1e:	4610      	mov	r0, r2
 8018c20:	695b      	ldr	r3, [r3, #20]
 8018c22:	4798      	blx	r3
 8018c24:	4604      	mov	r4, r0
 8018c26:	6828      	ldr	r0, [r5, #0]
 8018c28:	aa1d      	add	r2, sp, #116	@ 0x74
 8018c2a:	4621      	mov	r1, r4
 8018c2c:	6803      	ldr	r3, [r0, #0]
 8018c2e:	689f      	ldr	r7, [r3, #8]
 8018c30:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8018c34:	47b8      	blx	r7
 8018c36:	901c      	str	r0, [sp, #112]	@ 0x70
 8018c38:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018c3c:	429c      	cmp	r4, r3
 8018c3e:	f000 80eb 	beq.w	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018c42:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018c46:	429c      	cmp	r4, r3
 8018c48:	f000 80e6 	beq.w	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018c4c:	2c00      	cmp	r4, #0
 8018c4e:	f000 810d 	beq.w	8018e6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018c52:	2c0a      	cmp	r4, #10
 8018c54:	d05e      	beq.n	8018d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018c56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018c58:	b36a      	cbz	r2, 8018cb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018c5a:	8894      	ldrh	r4, [r2, #4]
 8018c5c:	f1bb 0f00 	cmp.w	fp, #0
 8018c60:	d03a      	beq.n	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018c62:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018c66:	f1bb 0f01 	cmp.w	fp, #1
 8018c6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018c6e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8018c72:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018c76:	ea49 0903 	orr.w	r9, r9, r3
 8018c7a:	d133      	bne.n	8018ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8018c7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c7e:	eba6 0609 	sub.w	r6, r6, r9
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d14d      	bne.n	8018d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018c86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018c88:	eb09 0306 	add.w	r3, r9, r6
 8018c8c:	4413      	add	r3, r2
 8018c8e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018c90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018c94:	4293      	cmp	r3, r2
 8018c96:	da4e      	bge.n	8018d36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8018c98:	e036      	b.n	8018d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018c9a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8018c9c:	e79c      	b.n	8018bd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8018c9e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8018ca2:	4659      	mov	r1, fp
 8018ca4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8018ca6:	9301      	str	r3, [sp, #4]
 8018ca8:	ab1d      	add	r3, sp, #116	@ 0x74
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	ab1c      	add	r3, sp, #112	@ 0x70
 8018cae:	f003 fb58 	bl	801c362 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	e7c0      	b.n	8018c38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8018cb6:	6828      	ldr	r0, [r5, #0]
 8018cb8:	6803      	ldr	r3, [r0, #0]
 8018cba:	691b      	ldr	r3, [r3, #16]
 8018cbc:	4798      	blx	r3
 8018cbe:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018cc2:	4298      	cmp	r0, r3
 8018cc4:	f000 80a8 	beq.w	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018cc8:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018ccc:	4298      	cmp	r0, r3
 8018cce:	f000 80a3 	beq.w	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018cd2:	f1bb 0f00 	cmp.w	fp, #0
 8018cd6:	d100      	bne.n	8018cda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8018cd8:	444e      	add	r6, r9
 8018cda:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018cdc:	2a00      	cmp	r2, #0
 8018cde:	d1c0      	bne.n	8018c62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018ce0:	4691      	mov	r9, r2
 8018ce2:	e099      	b.n	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	f000 80c2 	beq.w	8018e70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8018cec:	f1bb 0f00 	cmp.w	fp, #0
 8018cf0:	d117      	bne.n	8018d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018cf2:	6828      	ldr	r0, [r5, #0]
 8018cf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018cf6:	6803      	ldr	r3, [r0, #0]
 8018cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cfa:	4798      	blx	r3
 8018cfc:	4406      	add	r6, r0
 8018cfe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018d00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018d02:	1af3      	subs	r3, r6, r3
 8018d04:	4293      	cmp	r3, r2
 8018d06:	dd16      	ble.n	8018d36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8018d08:	2c00      	cmp	r4, #0
 8018d0a:	f000 80af 	beq.w	8018e6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018d0e:	2c0a      	cmp	r4, #10
 8018d10:	f040 809d 	bne.w	8018e4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8018d14:	240a      	movs	r4, #10
 8018d16:	fab4 f084 	clz	r0, r4
 8018d1a:	0940      	lsrs	r0, r0, #5
 8018d1c:	b01f      	add	sp, #124	@ 0x7c
 8018d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d22:	6828      	ldr	r0, [r5, #0]
 8018d24:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018d26:	6803      	ldr	r3, [r0, #0]
 8018d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d2a:	4798      	blx	r3
 8018d2c:	f1bb 0f01 	cmp.w	fp, #1
 8018d30:	eba6 0600 	sub.w	r6, r6, r0
 8018d34:	d0a7      	beq.n	8018c86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8018d36:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8018d38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018d3a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018d3e:	f9b3 8000 	ldrsh.w	r8, [r3]
 8018d42:	7b43      	ldrb	r3, [r0, #13]
 8018d44:	4431      	add	r1, r6
 8018d46:	015b      	lsls	r3, r3, #5
 8018d48:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018d4c:	7983      	ldrb	r3, [r0, #6]
 8018d4e:	4313      	orrs	r3, r2
 8018d50:	440b      	add	r3, r1
 8018d52:	4543      	cmp	r3, r8
 8018d54:	db60      	blt.n	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018d56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d58:	4299      	cmp	r1, r3
 8018d5a:	da5d      	bge.n	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018d5c:	6828      	ldr	r0, [r5, #0]
 8018d5e:	45b0      	cmp	r8, r6
 8018d60:	6803      	ldr	r3, [r0, #0]
 8018d62:	bfcc      	ite	gt
 8018d64:	eba8 0806 	subgt.w	r8, r8, r6
 8018d68:	f04f 0800 	movle.w	r8, #0
 8018d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d6e:	bfc8      	it	gt
 8018d70:	fa1f f888 	uxthgt.w	r8, r8
 8018d74:	4798      	blx	r3
 8018d76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018d78:	7b53      	ldrb	r3, [r2, #13]
 8018d7a:	00d9      	lsls	r1, r3, #3
 8018d7c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8018d80:	7a11      	ldrb	r1, [r2, #8]
 8018d82:	4339      	orrs	r1, r7
 8018d84:	065f      	lsls	r7, r3, #25
 8018d86:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018d88:	bf48      	it	mi
 8018d8a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8018d8e:	4407      	add	r7, r0
 8018d90:	bf48      	it	mi
 8018d92:	b209      	sxthmi	r1, r1
 8018d94:	1a7f      	subs	r7, r7, r1
 8018d96:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8018d98:	b2bf      	uxth	r7, r7
 8018d9a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018d9e:	fa0f fa87 	sxth.w	sl, r7
 8018da2:	4551      	cmp	r1, sl
 8018da4:	dd3c      	ble.n	8018e20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018da6:	011b      	lsls	r3, r3, #4
 8018da8:	79d0      	ldrb	r0, [r2, #7]
 8018daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018dae:	4303      	orrs	r3, r0
 8018db0:	449a      	add	sl, r3
 8018db2:	4551      	cmp	r1, sl
 8018db4:	dc30      	bgt.n	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018db6:	1bcf      	subs	r7, r1, r7
 8018db8:	468a      	mov	sl, r1
 8018dba:	b23f      	sxth	r7, r7
 8018dbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8018dbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018dc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018dc2:	6828      	ldr	r0, [r5, #0]
 8018dc4:	2a00      	cmp	r2, #0
 8018dc6:	d12d      	bne.n	8018e24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8018dc8:	9318      	str	r3, [sp, #96]	@ 0x60
 8018dca:	b2bf      	uxth	r7, r7
 8018dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018dce:	6819      	ldr	r1, [r3, #0]
 8018dd0:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8018dd2:	6801      	ldr	r1, [r0, #0]
 8018dd4:	9314      	str	r3, [sp, #80]	@ 0x50
 8018dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018dd8:	4788      	blx	r1
 8018dda:	79a9      	ldrb	r1, [r5, #6]
 8018ddc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018dde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018de0:	7ba9      	ldrb	r1, [r5, #14]
 8018de2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018de4:	910a      	str	r1, [sp, #40]	@ 0x28
 8018de6:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8018dea:	9109      	str	r1, [sp, #36]	@ 0x24
 8018dec:	68a9      	ldr	r1, [r5, #8]
 8018dee:	9306      	str	r3, [sp, #24]
 8018df0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018df2:	9205      	str	r2, [sp, #20]
 8018df4:	9304      	str	r3, [sp, #16]
 8018df6:	f8cd a004 	str.w	sl, [sp, #4]
 8018dfa:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8018dfe:	44b0      	add	r8, r6
 8018e00:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018e02:	fa0f f388 	sxth.w	r3, r8
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e0a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018e0e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	47b8      	blx	r7
 8018e18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8018e1e:	e6e3      	b.n	8018be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8018e20:	2700      	movs	r7, #0
 8018e22:	e7cb      	b.n	8018dbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8018e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e26:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8018e2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018e2c:	f8dc 1000 	ldr.w	r1, [ip]
 8018e30:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8018e34:	79aa      	ldrb	r2, [r5, #6]
 8018e36:	9203      	str	r2, [sp, #12]
 8018e38:	7baa      	ldrb	r2, [r5, #14]
 8018e3a:	9202      	str	r2, [sp, #8]
 8018e3c:	68aa      	ldr	r2, [r5, #8]
 8018e3e:	e9cd 0200 	strd	r0, r2, [sp]
 8018e42:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018e44:	4660      	mov	r0, ip
 8018e46:	688f      	ldr	r7, [r1, #8]
 8018e48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018e4a:	47b8      	blx	r7
 8018e4c:	e7e4      	b.n	8018e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018e4e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018e50:	3501      	adds	r5, #1
 8018e52:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8018e54:	429d      	cmp	r5, r3
 8018e56:	f6bf af5e 	bge.w	8018d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018e5a:	4659      	mov	r1, fp
 8018e5c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8018e5e:	f7ef fb3d 	bl	80084dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e62:	4604      	mov	r4, r0
 8018e64:	b110      	cbz	r0, 8018e6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018e66:	280a      	cmp	r0, #10
 8018e68:	d1f2      	bne.n	8018e50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8018e6a:	e753      	b.n	8018d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018e6c:	2400      	movs	r4, #0
 8018e6e:	e752      	b.n	8018d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018e70:	f1bb 0f00 	cmp.w	fp, #0
 8018e74:	f43f af43 	beq.w	8018cfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018e78:	e75d      	b.n	8018d36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08018e7a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018e7a:	b530      	push	{r4, r5, lr}
 8018e7c:	8ac4      	ldrh	r4, [r0, #22]
 8018e7e:	8b45      	ldrh	r5, [r0, #26]
 8018e80:	8343      	strh	r3, [r0, #26]
 8018e82:	442c      	add	r4, r5
 8018e84:	1ae4      	subs	r4, r4, r3
 8018e86:	8b83      	ldrh	r3, [r0, #28]
 8018e88:	82c4      	strh	r4, [r0, #22]
 8018e8a:	8b04      	ldrh	r4, [r0, #24]
 8018e8c:	4422      	add	r2, r4
 8018e8e:	440c      	add	r4, r1
 8018e90:	1a59      	subs	r1, r3, r1
 8018e92:	83c2      	strh	r2, [r0, #30]
 8018e94:	8304      	strh	r4, [r0, #24]
 8018e96:	8381      	strh	r1, [r0, #28]
 8018e98:	bd30      	pop	{r4, r5, pc}

08018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8018e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	8a47      	ldrh	r7, [r0, #18]
 8018ea2:	68c0      	ldr	r0, [r0, #12]
 8018ea4:	b085      	sub	sp, #20
 8018ea6:	6803      	ldr	r3, [r0, #0]
 8018ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018eaa:	4798      	blx	r3
 8018eac:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8018eb0:	7a63      	ldrb	r3, [r4, #9]
 8018eb2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8018eb6:	3b01      	subs	r3, #1
 8018eb8:	42b7      	cmp	r7, r6
 8018eba:	bfac      	ite	ge
 8018ebc:	f04f 0900 	movge.w	r9, #0
 8018ec0:	f04f 0901 	movlt.w	r9, #1
 8018ec4:	2b05      	cmp	r3, #5
 8018ec6:	d804      	bhi.n	8018ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8018ec8:	e8df f003 	tbb	[pc, r3]
 8018ecc:	470f0854 	.word	0x470f0854
 8018ed0:	4c4c      	.short	0x4c4c
 8018ed2:	2500      	movs	r5, #0
 8018ed4:	46a9      	mov	r9, r5
 8018ed6:	462e      	mov	r6, r5
 8018ed8:	462f      	mov	r7, r5
 8018eda:	e00e      	b.n	8018efa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018edc:	42b7      	cmp	r7, r6
 8018ede:	f04f 0500 	mov.w	r5, #0
 8018ee2:	bfb4      	ite	lt
 8018ee4:	2600      	movlt	r6, #0
 8018ee6:	2601      	movge	r6, #1
 8018ee8:	e7f6      	b.n	8018ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018eea:	42b7      	cmp	r7, r6
 8018eec:	464d      	mov	r5, r9
 8018eee:	f04f 0900 	mov.w	r9, #0
 8018ef2:	bfb4      	ite	lt
 8018ef4:	2600      	movlt	r6, #0
 8018ef6:	2601      	movge	r6, #1
 8018ef8:	464f      	mov	r7, r9
 8018efa:	f04f 0800 	mov.w	r8, #0
 8018efe:	f8a4 8016 	strh.w	r8, [r4, #22]
 8018f02:	f8a4 8018 	strh.w	r8, [r4, #24]
 8018f06:	f8cd 8004 	str.w	r8, [sp, #4]
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	9303      	str	r3, [sp, #12]
 8018f0e:	8823      	ldrh	r3, [r4, #0]
 8018f10:	2b20      	cmp	r3, #32
 8018f12:	d033      	beq.n	8018f7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8018f14:	f242 010b 	movw	r1, #8203	@ 0x200b
 8018f18:	1a5a      	subs	r2, r3, r1
 8018f1a:	f1d2 0a00 	rsbs	sl, r2, #0
 8018f1e:	eb4a 0a02 	adc.w	sl, sl, r2
 8018f22:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8018f26:	4293      	cmp	r3, r2
 8018f28:	d008      	beq.n	8018f3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018f2a:	428b      	cmp	r3, r1
 8018f2c:	9a01      	ldr	r2, [sp, #4]
 8018f2e:	bf0e      	itee	eq
 8018f30:	f04f 0a01 	moveq.w	sl, #1
 8018f34:	461a      	movne	r2, r3
 8018f36:	f04f 0a00 	movne.w	sl, #0
 8018f3a:	9201      	str	r2, [sp, #4]
 8018f3c:	ab03      	add	r3, sp, #12
 8018f3e:	68e2      	ldr	r2, [r4, #12]
 8018f40:	7a21      	ldrb	r1, [r4, #8]
 8018f42:	6860      	ldr	r0, [r4, #4]
 8018f44:	f003 f9c4 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018f48:	8020      	strh	r0, [r4, #0]
 8018f4a:	b9d8      	cbnz	r0, 8018f84 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8018f4c:	8ba2      	ldrh	r2, [r4, #28]
 8018f4e:	2300      	movs	r3, #0
 8018f50:	4611      	mov	r1, r2
 8018f52:	4620      	mov	r0, r4
 8018f54:	f7ff ff91 	bl	8018e7a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018f58:	e06e      	b.n	8019038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018f5a:	2500      	movs	r5, #0
 8018f5c:	2701      	movs	r7, #1
 8018f5e:	46a9      	mov	r9, r5
 8018f60:	462e      	mov	r6, r5
 8018f62:	e7ca      	b.n	8018efa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018f64:	42b7      	cmp	r7, r6
 8018f66:	f04f 0500 	mov.w	r5, #0
 8018f6a:	bfb4      	ite	lt
 8018f6c:	2700      	movlt	r7, #0
 8018f6e:	2701      	movge	r7, #1
 8018f70:	462e      	mov	r6, r5
 8018f72:	e7c2      	b.n	8018efa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018f74:	2500      	movs	r5, #0
 8018f76:	2601      	movs	r6, #1
 8018f78:	46a9      	mov	r9, r5
 8018f7a:	e7ad      	b.n	8018ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018f7c:	9301      	str	r3, [sp, #4]
 8018f7e:	f04f 0a01 	mov.w	sl, #1
 8018f82:	e7db      	b.n	8018f3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018f84:	8b63      	ldrh	r3, [r4, #26]
 8018f86:	280a      	cmp	r0, #10
 8018f88:	f103 0301 	add.w	r3, r3, #1
 8018f8c:	8363      	strh	r3, [r4, #26]
 8018f8e:	d0dd      	beq.n	8018f4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8018f90:	9a03      	ldr	r2, [sp, #12]
 8018f92:	bb62      	cbnz	r2, 8018fee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8018f94:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018f98:	4298      	cmp	r0, r3
 8018f9a:	d003      	beq.n	8018fa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018f9c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018fa0:	4298      	cmp	r0, r3
 8018fa2:	d1b2      	bne.n	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018fa4:	8823      	ldrh	r3, [r4, #0]
 8018fa6:	8ba1      	ldrh	r1, [r4, #28]
 8018fa8:	2b20      	cmp	r3, #32
 8018faa:	d003      	beq.n	8018fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8018fac:	f242 000b 	movw	r0, #8203	@ 0x200b
 8018fb0:	4283      	cmp	r3, r0
 8018fb2:	d131      	bne.n	8019018 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8018fb4:	f1ba 0f00 	cmp.w	sl, #0
 8018fb8:	bf0a      	itet	eq
 8018fba:	4688      	moveq	r8, r1
 8018fbc:	4650      	movne	r0, sl
 8018fbe:	2001      	moveq	r0, #1
 8018fc0:	440a      	add	r2, r1
 8018fc2:	8b23      	ldrh	r3, [r4, #24]
 8018fc4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018fc8:	b292      	uxth	r2, r2
 8018fca:	83a2      	strh	r2, [r4, #28]
 8018fcc:	4413      	add	r3, r2
 8018fce:	f1b9 0f00 	cmp.w	r9, #0
 8018fd2:	d102      	bne.n	8018fda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8018fd4:	2d00      	cmp	r5, #0
 8018fd6:	d042      	beq.n	801905e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8018fd8:	b300      	cbz	r0, 801901c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8018fda:	8c21      	ldrh	r1, [r4, #32]
 8018fdc:	4419      	add	r1, r3
 8018fde:	458c      	cmp	ip, r1
 8018fe0:	da37      	bge.n	8019052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018fe2:	8ae1      	ldrh	r1, [r4, #22]
 8018fe4:	2900      	cmp	r1, #0
 8018fe6:	d034      	beq.n	8019052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018fe8:	4563      	cmp	r3, ip
 8018fea:	dd8e      	ble.n	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018fec:	e01d      	b.n	801902a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8018fee:	8893      	ldrh	r3, [r2, #4]
 8018ff0:	9901      	ldr	r1, [sp, #4]
 8018ff2:	8023      	strh	r3, [r4, #0]
 8018ff4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8018ff8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8018ffc:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8019000:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8019004:	ea4b 0b00 	orr.w	fp, fp, r0
 8019008:	68e0      	ldr	r0, [r4, #12]
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801900e:	4798      	blx	r3
 8019010:	eb0b 0200 	add.w	r2, fp, r0
 8019014:	b292      	uxth	r2, r2
 8019016:	e7c5      	b.n	8018fa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019018:	2000      	movs	r0, #0
 801901a:	e7d1      	b.n	8018fc0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801901c:	4563      	cmp	r3, ip
 801901e:	f77f af74 	ble.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019022:	8ae3      	ldrh	r3, [r4, #22]
 8019024:	2b00      	cmp	r3, #0
 8019026:	f43f af70 	beq.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801902a:	2301      	movs	r3, #1
 801902c:	8c22      	ldrh	r2, [r4, #32]
 801902e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8019032:	8be3      	ldrh	r3, [r4, #30]
 8019034:	4413      	add	r3, r2
 8019036:	83e3      	strh	r3, [r4, #30]
 8019038:	68e0      	ldr	r0, [r4, #12]
 801903a:	6803      	ldr	r3, [r0, #0]
 801903c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801903e:	4798      	blx	r3
 8019040:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8019044:	4418      	add	r0, r3
 8019046:	8a63      	ldrh	r3, [r4, #18]
 8019048:	1a18      	subs	r0, r3, r0
 801904a:	8260      	strh	r0, [r4, #18]
 801904c:	b005      	add	sp, #20
 801904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019052:	2300      	movs	r3, #0
 8019054:	4611      	mov	r1, r2
 8019056:	4620      	mov	r0, r4
 8019058:	f7ff ff0f 	bl	8018e7a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801905c:	e755      	b.n	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801905e:	4563      	cmp	r3, ip
 8019060:	dd14      	ble.n	801908c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8019062:	b117      	cbz	r7, 801906a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8019064:	2301      	movs	r3, #1
 8019066:	460a      	mov	r2, r1
 8019068:	e772      	b.n	8018f50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801906a:	2e00      	cmp	r6, #0
 801906c:	f43f af4d 	beq.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019070:	2800      	cmp	r0, #0
 8019072:	f47f af4a 	bne.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019076:	f1ba 0f00 	cmp.w	sl, #0
 801907a:	d002      	beq.n	8019082 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801907c:	2301      	movs	r3, #1
 801907e:	4642      	mov	r2, r8
 8019080:	e767      	b.n	8018f52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8019082:	8ae3      	ldrh	r3, [r4, #22]
 8019084:	2b00      	cmp	r3, #0
 8019086:	f43f af40 	beq.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801908a:	e7d5      	b.n	8019038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801908c:	2800      	cmp	r0, #0
 801908e:	f47f af3c 	bne.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019092:	f1ba 0f00 	cmp.w	sl, #0
 8019096:	f43f af38 	beq.w	8018f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801909a:	2301      	movs	r3, #1
 801909c:	4642      	mov	r2, r8
 801909e:	e7da      	b.n	8019056 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080190a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80190a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190a2:	4605      	mov	r5, r0
 80190a4:	b08f      	sub	sp, #60	@ 0x3c
 80190a6:	4617      	mov	r7, r2
 80190a8:	461c      	mov	r4, r3
 80190aa:	460e      	mov	r6, r1
 80190ac:	b1d1      	cbz	r1, 80190e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4620      	mov	r0, r4
 80190b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190b4:	4798      	blx	r3
 80190b6:	4240      	negs	r0, r0
 80190b8:	9603      	str	r6, [sp, #12]
 80190ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80190be:	b200      	sxth	r0, r0
 80190c0:	9700      	str	r7, [sp, #0]
 80190c2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80190c6:	4629      	mov	r1, r5
 80190c8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80190cc:	2401      	movs	r4, #1
 80190ce:	a805      	add	r0, sp, #20
 80190d0:	f7ff fcaa 	bl	8018a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80190d4:	a805      	add	r0, sp, #20
 80190d6:	f7ff fee0 	bl	8018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80190da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80190de:	b163      	cbz	r3, 80190fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80190e0:	3401      	adds	r4, #1
 80190e2:	e7f7      	b.n	80190d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80190e4:	2401      	movs	r4, #1
 80190e6:	f003 f9bf 	bl	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80190ea:	280a      	cmp	r0, #10
 80190ec:	4628      	mov	r0, r5
 80190ee:	bf08      	it	eq
 80190f0:	3401      	addeq	r4, #1
 80190f2:	f003 f9b9 	bl	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d1f7      	bne.n	80190ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80190fa:	b2a0      	uxth	r0, r4
 80190fc:	b00f      	add	sp, #60	@ 0x3c
 80190fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	b0e3      	sub	sp, #396	@ 0x18c
 8019106:	461c      	mov	r4, r3
 8019108:	4683      	mov	fp, r0
 801910a:	4688      	mov	r8, r1
 801910c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801910e:	2b00      	cmp	r3, #0
 8019110:	f000 8112 	beq.w	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019114:	6823      	ldr	r3, [r4, #0]
 8019116:	2b00      	cmp	r3, #0
 8019118:	f000 810e 	beq.w	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801911c:	7ba3      	ldrb	r3, [r4, #14]
 801911e:	2b00      	cmp	r3, #0
 8019120:	f000 810a 	beq.w	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019124:	ad0a      	add	r5, sp, #40	@ 0x28
 8019126:	6810      	ldr	r0, [r2, #0]
 8019128:	6851      	ldr	r1, [r2, #4]
 801912a:	462b      	mov	r3, r5
 801912c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8019130:	c303      	stmia	r3!, {r0, r1}
 8019132:	2100      	movs	r1, #0
 8019134:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019138:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801913c:	4628      	mov	r0, r5
 801913e:	910c      	str	r1, [sp, #48]	@ 0x30
 8019140:	a90c      	add	r1, sp, #48	@ 0x30
 8019142:	79a2      	ldrb	r2, [r4, #6]
 8019144:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019148:	f7ff fced 	bl	8018b26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801914c:	a90c      	add	r1, sp, #48	@ 0x30
 801914e:	79a2      	ldrb	r2, [r4, #6]
 8019150:	4608      	mov	r0, r1
 8019152:	f7ff fce8 	bl	8018b26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019156:	a817      	add	r0, sp, #92	@ 0x5c
 8019158:	f002 fd59 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801915c:	6820      	ldr	r0, [r4, #0]
 801915e:	6803      	ldr	r3, [r0, #0]
 8019160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019162:	4798      	blx	r3
 8019164:	4606      	mov	r6, r0
 8019166:	6820      	ldr	r0, [r4, #0]
 8019168:	6803      	ldr	r3, [r0, #0]
 801916a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801916c:	4798      	blx	r3
 801916e:	4633      	mov	r3, r6
 8019170:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8019172:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8019174:	9000      	str	r0, [sp, #0]
 8019176:	a817      	add	r0, sp, #92	@ 0x5c
 8019178:	f002 fda4 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801917c:	6820      	ldr	r0, [r4, #0]
 801917e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8019182:	6803      	ldr	r3, [r0, #0]
 8019184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019186:	4798      	blx	r3
 8019188:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801918c:	6823      	ldr	r3, [r4, #0]
 801918e:	4607      	mov	r7, r0
 8019190:	4406      	add	r6, r0
 8019192:	a830      	add	r0, sp, #192	@ 0xc0
 8019194:	f893 9009 	ldrb.w	r9, [r3, #9]
 8019198:	f002 fd39 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801919c:	7c23      	ldrb	r3, [r4, #16]
 801919e:	b17b      	cbz	r3, 80191c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80191a0:	6820      	ldr	r0, [r4, #0]
 80191a2:	6803      	ldr	r3, [r0, #0]
 80191a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80191a6:	4798      	blx	r3
 80191a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80191aa:	6820      	ldr	r0, [r4, #0]
 80191ac:	6802      	ldr	r2, [r0, #0]
 80191ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80191b0:	4790      	blx	r2
 80191b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191b4:	9000      	str	r0, [sp, #0]
 80191b6:	a830      	add	r0, sp, #192	@ 0xc0
 80191b8:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80191ba:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80191bc:	f002 fd82 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80191c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80191c4:	a80e      	add	r0, sp, #56	@ 0x38
 80191c6:	7be2      	ldrb	r2, [r4, #15]
 80191c8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80191cc:	1a8a      	subs	r2, r1, r2
 80191ce:	7c21      	ldrb	r1, [r4, #16]
 80191d0:	9103      	str	r1, [sp, #12]
 80191d2:	b292      	uxth	r2, r2
 80191d4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80191d8:	9102      	str	r1, [sp, #8]
 80191da:	6821      	ldr	r1, [r4, #0]
 80191dc:	9101      	str	r1, [sp, #4]
 80191de:	7961      	ldrb	r1, [r4, #5]
 80191e0:	9100      	str	r1, [sp, #0]
 80191e2:	a930      	add	r1, sp, #192	@ 0xc0
 80191e4:	f7ff fc20 	bl	8018a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80191e8:	2e00      	cmp	r6, #0
 80191ea:	dc5b      	bgt.n	80192a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80191ec:	af17      	add	r7, sp, #92	@ 0x5c
 80191ee:	f04f 0900 	mov.w	r9, #0
 80191f2:	7c23      	ldrb	r3, [r4, #16]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	f000 80b1 	beq.w	801935c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80191fa:	a80e      	add	r0, sp, #56	@ 0x38
 80191fc:	f7ff fe4d 	bl	8018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8019200:	f1ba 0f00 	cmp.w	sl, #0
 8019204:	f000 80a5 	beq.w	8019352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019208:	7c23      	ldrb	r3, [r4, #16]
 801920a:	2264      	movs	r2, #100	@ 0x64
 801920c:	4639      	mov	r1, r7
 801920e:	a849      	add	r0, sp, #292	@ 0x124
 8019210:	9309      	str	r3, [sp, #36]	@ 0x24
 8019212:	f00f fe66 	bl	8028ee2 <memcpy>
 8019216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019218:	2b00      	cmp	r3, #0
 801921a:	f000 80a7 	beq.w	801936c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801921e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8019222:	7922      	ldrb	r2, [r4, #4]
 8019224:	2a01      	cmp	r2, #1
 8019226:	f040 808a 	bne.w	801933e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801922a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801922e:	1ac0      	subs	r0, r0, r3
 8019230:	2302      	movs	r3, #2
 8019232:	fb90 f0f3 	sdiv	r0, r0, r3
 8019236:	b200      	sxth	r0, r0
 8019238:	7c23      	ldrb	r3, [r4, #16]
 801923a:	2b00      	cmp	r3, #0
 801923c:	f000 808b 	beq.w	8019356 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019240:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8019244:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8019248:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801924c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019250:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8019254:	2100      	movs	r1, #0
 8019256:	4410      	add	r0, r2
 8019258:	4642      	mov	r2, r8
 801925a:	b200      	sxth	r0, r0
 801925c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8019260:	9000      	str	r0, [sp, #0]
 8019262:	4658      	mov	r0, fp
 8019264:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8019268:	f7ff fc8e 	bl	8018b88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801926c:	2800      	cmp	r0, #0
 801926e:	d163      	bne.n	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019270:	b2b2      	uxth	r2, r6
 8019272:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8019276:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801927a:	4413      	add	r3, r2
 801927c:	1a8a      	subs	r2, r1, r2
 801927e:	b21b      	sxth	r3, r3
 8019280:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8019284:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8019288:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801928c:	2a00      	cmp	r2, #0
 801928e:	d153      	bne.n	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019290:	6822      	ldr	r2, [r4, #0]
 8019292:	8869      	ldrh	r1, [r5, #2]
 8019294:	7a12      	ldrb	r2, [r2, #8]
 8019296:	1a9b      	subs	r3, r3, r2
 8019298:	88ea      	ldrh	r2, [r5, #6]
 801929a:	440a      	add	r2, r1
 801929c:	b212      	sxth	r2, r2
 801929e:	4293      	cmp	r3, r2
 80192a0:	dda7      	ble.n	80191f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80192a2:	e049      	b.n	8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80192a4:	7c23      	ldrb	r3, [r4, #16]
 80192a6:	444f      	add	r7, r9
 80192a8:	b1c3      	cbz	r3, 80192dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80192aa:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80192ae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80192b2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80192b6:	443b      	add	r3, r7
 80192b8:	4293      	cmp	r3, r2
 80192ba:	da97      	bge.n	80191ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80192bc:	a80e      	add	r0, sp, #56	@ 0x38
 80192be:	f7ff fdec 	bl	8018e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80192c2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80192c6:	3b01      	subs	r3, #1
 80192c8:	b29b      	uxth	r3, r3
 80192ca:	454b      	cmp	r3, r9
 80192cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80192ce:	d021      	beq.n	8019314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80192d0:	7961      	ldrb	r1, [r4, #5]
 80192d2:	a817      	add	r0, sp, #92	@ 0x5c
 80192d4:	f7ef f902 	bl	80084dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192da:	e7f4      	b.n	80192c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80192dc:	fa1f f986 	uxth.w	r9, r6
 80192e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80192e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80192e8:	443b      	add	r3, r7
 80192ea:	4293      	cmp	r3, r2
 80192ec:	f6bf af7e 	bge.w	80191ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80192f0:	a817      	add	r0, sp, #92	@ 0x5c
 80192f2:	f003 f8b9 	bl	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80192f6:	b1f8      	cbz	r0, 8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80192f8:	280a      	cmp	r0, #10
 80192fa:	d1f1      	bne.n	80192e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80192fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8019300:	444b      	add	r3, r9
 8019302:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019306:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801930a:	eba3 0309 	sub.w	r3, r3, r9
 801930e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019312:	e7e5      	b.n	80192e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8019314:	b2b3      	uxth	r3, r6
 8019316:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801931a:	441a      	add	r2, r3
 801931c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019320:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8019324:	1ad3      	subs	r3, r2, r3
 8019326:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801932a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801932e:	b11b      	cbz	r3, 8019338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019330:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8019334:	2b00      	cmp	r3, #0
 8019336:	d0ba      	beq.n	80192ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019338:	b063      	add	sp, #396	@ 0x18c
 801933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933e:	2a02      	cmp	r2, #2
 8019340:	d105      	bne.n	801934e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8019342:	7be2      	ldrb	r2, [r4, #15]
 8019344:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8019348:	1a80      	subs	r0, r0, r2
 801934a:	1ac0      	subs	r0, r0, r3
 801934c:	e773      	b.n	8019236 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801934e:	2000      	movs	r0, #0
 8019350:	e772      	b.n	8019238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8019352:	7be0      	ldrb	r0, [r4, #15]
 8019354:	e770      	b.n	8019238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8019356:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801935a:	e773      	b.n	8019244 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801935c:	f1ba 0f00 	cmp.w	sl, #0
 8019360:	d0f7      	beq.n	8019352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019362:	2264      	movs	r2, #100	@ 0x64
 8019364:	4639      	mov	r1, r7
 8019366:	a849      	add	r0, sp, #292	@ 0x124
 8019368:	f00f fdbb 	bl	8028ee2 <memcpy>
 801936c:	2300      	movs	r3, #0
 801936e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019372:	6821      	ldr	r1, [r4, #0]
 8019374:	a849      	add	r0, sp, #292	@ 0x124
 8019376:	f7ff fb9a 	bl	8018aae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801937a:	b203      	sxth	r3, r0
 801937c:	e751      	b.n	8019222 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801937e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801937e:	2b03      	cmp	r3, #3
 8019380:	d818      	bhi.n	80193b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019382:	e8df f003 	tbb	[pc, r3]
 8019386:	0602      	.short	0x0602
 8019388:	130d      	.short	0x130d
 801938a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801938e:	1850      	adds	r0, r2, r1
 8019390:	4770      	bx	lr
 8019392:	8803      	ldrh	r3, [r0, #0]
 8019394:	8880      	ldrh	r0, [r0, #4]
 8019396:	4418      	add	r0, r3
 8019398:	b200      	sxth	r0, r0
 801939a:	1a80      	subs	r0, r0, r2
 801939c:	3801      	subs	r0, #1
 801939e:	4770      	bx	lr
 80193a0:	8803      	ldrh	r3, [r0, #0]
 80193a2:	8880      	ldrh	r0, [r0, #4]
 80193a4:	4418      	add	r0, r3
 80193a6:	b200      	sxth	r0, r0
 80193a8:	1a40      	subs	r0, r0, r1
 80193aa:	e7f7      	b.n	801939c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80193ac:	f9b0 0000 	ldrsh.w	r0, [r0]
 80193b0:	4410      	add	r0, r2
 80193b2:	4770      	bx	lr
 80193b4:	2000      	movs	r0, #0
 80193b6:	4770      	bx	lr

080193b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80193b8:	2b03      	cmp	r3, #3
 80193ba:	d817      	bhi.n	80193ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80193bc:	e8df f003 	tbb	[pc, r3]
 80193c0:	10090602 	.word	0x10090602
 80193c4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80193c8:	1850      	adds	r0, r2, r1
 80193ca:	4770      	bx	lr
 80193cc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80193d0:	e7fa      	b.n	80193c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80193d2:	8843      	ldrh	r3, [r0, #2]
 80193d4:	88c0      	ldrh	r0, [r0, #6]
 80193d6:	4418      	add	r0, r3
 80193d8:	b200      	sxth	r0, r0
 80193da:	1a80      	subs	r0, r0, r2
 80193dc:	3801      	subs	r0, #1
 80193de:	4770      	bx	lr
 80193e0:	8843      	ldrh	r3, [r0, #2]
 80193e2:	88c0      	ldrh	r0, [r0, #6]
 80193e4:	4418      	add	r0, r3
 80193e6:	b200      	sxth	r0, r0
 80193e8:	1a40      	subs	r0, r0, r1
 80193ea:	e7f7      	b.n	80193dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80193ec:	2000      	movs	r0, #0
 80193ee:	4770      	bx	lr

080193f0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80193f0:	4b01      	ldr	r3, [pc, #4]	@ (80193f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80193f2:	2200      	movs	r2, #0
 80193f4:	601a      	str	r2, [r3, #0]
 80193f6:	4770      	bx	lr
 80193f8:	24028530 	.word	0x24028530

080193fc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80193fc:	4603      	mov	r3, r0
 80193fe:	b1c8      	cbz	r0, 8019434 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019400:	0c02      	lsrs	r2, r0, #16
 8019402:	0412      	lsls	r2, r2, #16
 8019404:	b9a2      	cbnz	r2, 8019430 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019406:	0403      	lsls	r3, r0, #16
 8019408:	2010      	movs	r0, #16
 801940a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801940e:	bf04      	itt	eq
 8019410:	021b      	lsleq	r3, r3, #8
 8019412:	3008      	addeq	r0, #8
 8019414:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8019418:	bf04      	itt	eq
 801941a:	011b      	lsleq	r3, r3, #4
 801941c:	3004      	addeq	r0, #4
 801941e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8019422:	bf04      	itt	eq
 8019424:	009b      	lsleq	r3, r3, #2
 8019426:	3002      	addeq	r0, #2
 8019428:	2b00      	cmp	r3, #0
 801942a:	db04      	blt.n	8019436 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801942c:	3001      	adds	r0, #1
 801942e:	4770      	bx	lr
 8019430:	2000      	movs	r0, #0
 8019432:	e7ea      	b.n	801940a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019434:	2020      	movs	r0, #32
 8019436:	4770      	bx	lr

08019438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801943c:	b087      	sub	sp, #28
 801943e:	460d      	mov	r5, r1
 8019440:	4616      	mov	r6, r2
 8019442:	4698      	mov	r8, r3
 8019444:	4601      	mov	r1, r0
 8019446:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801944a:	b120      	cbz	r0, 8019456 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801944c:	b11a      	cbz	r2, 8019456 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801944e:	2d1f      	cmp	r5, #31
 8019450:	d801      	bhi.n	8019456 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019452:	2b1f      	cmp	r3, #31
 8019454:	d904      	bls.n	8019460 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8019456:	2000      	movs	r0, #0
 8019458:	6038      	str	r0, [r7, #0]
 801945a:	b007      	add	sp, #28
 801945c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019460:	b97d      	cbnz	r5, 8019482 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8019462:	b143      	cbz	r3, 8019476 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8019464:	4602      	mov	r2, r0
 8019466:	462b      	mov	r3, r5
 8019468:	4641      	mov	r1, r8
 801946a:	4630      	mov	r0, r6
 801946c:	e9cd 4700 	strd	r4, r7, [sp]
 8019470:	f7ff ffe2 	bl	8019438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019474:	e7f1      	b.n	801945a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019476:	f04f 33ff 	mov.w	r3, #4294967295
 801947a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801947e:	603b      	str	r3, [r7, #0]
 8019480:	e7eb      	b.n	801945a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019482:	fa32 fa05 	lsrs.w	sl, r2, r5
 8019486:	d106      	bne.n	8019496 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8019488:	4346      	muls	r6, r0
 801948a:	fbb6 f0f4 	udiv	r0, r6, r4
 801948e:	fb04 6610 	mls	r6, r4, r0, r6
 8019492:	603e      	str	r6, [r7, #0]
 8019494:	e7e1      	b.n	801945a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019496:	2201      	movs	r2, #1
 8019498:	fa00 fb05 	lsl.w	fp, r0, r5
 801949c:	40aa      	lsls	r2, r5
 801949e:	fbbb f9f4 	udiv	r9, fp, r4
 80194a2:	3a01      	subs	r2, #1
 80194a4:	fb0a f309 	mul.w	r3, sl, r9
 80194a8:	fb04 b919 	mls	r9, r4, r9, fp
 80194ac:	4016      	ands	r6, r2
 80194ae:	9303      	str	r3, [sp, #12]
 80194b0:	4630      	mov	r0, r6
 80194b2:	f7ff ffa3 	bl	80193fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80194b6:	462b      	mov	r3, r5
 80194b8:	460a      	mov	r2, r1
 80194ba:	4601      	mov	r1, r0
 80194bc:	4630      	mov	r0, r6
 80194be:	e9cd 4700 	strd	r4, r7, [sp]
 80194c2:	f7ff ffb9 	bl	8019438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80194c6:	4606      	mov	r6, r0
 80194c8:	4648      	mov	r0, r9
 80194ca:	eb05 0108 	add.w	r1, r5, r8
 80194ce:	f7ff ff95 	bl	80193fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80194d2:	ab05      	add	r3, sp, #20
 80194d4:	464a      	mov	r2, r9
 80194d6:	e9cd 4300 	strd	r4, r3, [sp]
 80194da:	4603      	mov	r3, r0
 80194dc:	4650      	mov	r0, sl
 80194de:	f7ff ffab 	bl	8019438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80194e2:	6839      	ldr	r1, [r7, #0]
 80194e4:	9a05      	ldr	r2, [sp, #20]
 80194e6:	9b03      	ldr	r3, [sp, #12]
 80194e8:	4411      	add	r1, r2
 80194ea:	fbb1 f2f4 	udiv	r2, r1, r4
 80194ee:	18d3      	adds	r3, r2, r3
 80194f0:	fb04 1412 	mls	r4, r4, r2, r1
 80194f4:	441e      	add	r6, r3
 80194f6:	603c      	str	r4, [r7, #0]
 80194f8:	4430      	add	r0, r6
 80194fa:	e7ae      	b.n	801945a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080194fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80194fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019500:	b085      	sub	sp, #20
 8019502:	f1b0 0900 	subs.w	r9, r0, #0
 8019506:	461d      	mov	r5, r3
 8019508:	4617      	mov	r7, r2
 801950a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801950c:	bfbb      	ittet	lt
 801950e:	f1c9 0900 	rsblt	r9, r9, #0
 8019512:	f04f 36ff 	movlt.w	r6, #4294967295
 8019516:	2601      	movge	r6, #1
 8019518:	6823      	ldrlt	r3, [r4, #0]
 801951a:	bfbc      	itt	lt
 801951c:	425b      	neglt	r3, r3
 801951e:	6023      	strlt	r3, [r4, #0]
 8019520:	2a00      	cmp	r2, #0
 8019522:	da04      	bge.n	801952e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019524:	6823      	ldr	r3, [r4, #0]
 8019526:	4257      	negs	r7, r2
 8019528:	4276      	negs	r6, r6
 801952a:	425b      	negs	r3, r3
 801952c:	6023      	str	r3, [r4, #0]
 801952e:	2d00      	cmp	r5, #0
 8019530:	4638      	mov	r0, r7
 8019532:	bfba      	itte	lt
 8019534:	426d      	neglt	r5, r5
 8019536:	f04f 38ff 	movlt.w	r8, #4294967295
 801953a:	f04f 0801 	movge.w	r8, #1
 801953e:	f7ff ff5d 	bl	80193fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019542:	ab03      	add	r3, sp, #12
 8019544:	463a      	mov	r2, r7
 8019546:	e9cd 5300 	strd	r5, r3, [sp]
 801954a:	4603      	mov	r3, r0
 801954c:	4648      	mov	r0, r9
 801954e:	f7ff ff73 	bl	8019438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019552:	6823      	ldr	r3, [r4, #0]
 8019554:	9a03      	ldr	r2, [sp, #12]
 8019556:	4546      	cmp	r6, r8
 8019558:	441a      	add	r2, r3
 801955a:	fb92 f3f5 	sdiv	r3, r2, r5
 801955e:	4418      	add	r0, r3
 8019560:	fb05 2313 	mls	r3, r5, r3, r2
 8019564:	bf18      	it	ne
 8019566:	4240      	negne	r0, r0
 8019568:	1c72      	adds	r2, r6, #1
 801956a:	6023      	str	r3, [r4, #0]
 801956c:	d105      	bne.n	801957a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801956e:	2b00      	cmp	r3, #0
 8019570:	f1c3 0200 	rsb	r2, r3, #0
 8019574:	db0b      	blt.n	801958e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019576:	6022      	str	r2, [r4, #0]
 8019578:	e006      	b.n	8019588 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801957a:	2e01      	cmp	r6, #1
 801957c:	d104      	bne.n	8019588 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801957e:	2b00      	cmp	r3, #0
 8019580:	da02      	bge.n	8019588 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019582:	442b      	add	r3, r5
 8019584:	3801      	subs	r0, #1
 8019586:	6023      	str	r3, [r4, #0]
 8019588:	b005      	add	sp, #20
 801958a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801958e:	3801      	subs	r0, #1
 8019590:	1b52      	subs	r2, r2, r5
 8019592:	e7f0      	b.n	8019576 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08019594 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019594:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019598:	4c1c      	ldr	r4, [pc, #112]	@ (801960c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801959a:	4605      	mov	r5, r0
 801959c:	6807      	ldr	r7, [r0, #0]
 801959e:	69a3      	ldr	r3, [r4, #24]
 80195a0:	b92b      	cbnz	r3, 80195ae <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80195a2:	6840      	ldr	r0, [r0, #4]
 80195a4:	e9c5 7000 	strd	r7, r0, [r5]
 80195a8:	b004      	add	sp, #16
 80195aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ae:	f04f 0802 	mov.w	r8, #2
 80195b2:	68a2      	ldr	r2, [r4, #8]
 80195b4:	ae04      	add	r6, sp, #16
 80195b6:	6820      	ldr	r0, [r4, #0]
 80195b8:	fb93 f1f8 	sdiv	r1, r3, r8
 80195bc:	440a      	add	r2, r1
 80195be:	69e1      	ldr	r1, [r4, #28]
 80195c0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80195c4:	463a      	mov	r2, r7
 80195c6:	9600      	str	r6, [sp, #0]
 80195c8:	f7ff ff98 	bl	80194fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80195cc:	69a3      	ldr	r3, [r4, #24]
 80195ce:	4607      	mov	r7, r0
 80195d0:	686a      	ldr	r2, [r5, #4]
 80195d2:	6a21      	ldr	r1, [r4, #32]
 80195d4:	9600      	str	r6, [sp, #0]
 80195d6:	6860      	ldr	r0, [r4, #4]
 80195d8:	f7ff ff90 	bl	80194fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80195dc:	69a3      	ldr	r3, [r4, #24]
 80195de:	6962      	ldr	r2, [r4, #20]
 80195e0:	4407      	add	r7, r0
 80195e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80195e4:	9600      	str	r6, [sp, #0]
 80195e6:	68e0      	ldr	r0, [r4, #12]
 80195e8:	fb93 f8f8 	sdiv	r8, r3, r8
 80195ec:	4442      	add	r2, r8
 80195ee:	9203      	str	r2, [sp, #12]
 80195f0:	682a      	ldr	r2, [r5, #0]
 80195f2:	f7ff ff83 	bl	80194fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80195f6:	4680      	mov	r8, r0
 80195f8:	9600      	str	r6, [sp, #0]
 80195fa:	69a3      	ldr	r3, [r4, #24]
 80195fc:	686a      	ldr	r2, [r5, #4]
 80195fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019600:	6920      	ldr	r0, [r4, #16]
 8019602:	f7ff ff7b 	bl	80194fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019606:	4440      	add	r0, r8
 8019608:	e7cc      	b.n	80195a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801960a:	bf00      	nop
 801960c:	24028534 	.word	0x24028534

08019610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019610:	4b07      	ldr	r3, [pc, #28]	@ (8019630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	2b01      	cmp	r3, #1
 8019616:	d109      	bne.n	801962c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019618:	f9b1 3000 	ldrsh.w	r3, [r1]
 801961c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019620:	8003      	strh	r3, [r0, #0]
 8019622:	4b04      	ldr	r3, [pc, #16]	@ (8019634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019624:	881b      	ldrh	r3, [r3, #0]
 8019626:	3b01      	subs	r3, #1
 8019628:	1a9b      	subs	r3, r3, r2
 801962a:	800b      	strh	r3, [r1, #0]
 801962c:	4770      	bx	lr
 801962e:	bf00      	nop
 8019630:	24028518 	.word	0x24028518
 8019634:	24028514 	.word	0x24028514

08019638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019638:	4b07      	ldr	r3, [pc, #28]	@ (8019658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801963a:	b510      	push	{r4, lr}
 801963c:	781b      	ldrb	r3, [r3, #0]
 801963e:	2b01      	cmp	r3, #1
 8019640:	d108      	bne.n	8019654 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019642:	4b06      	ldr	r3, [pc, #24]	@ (801965c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019644:	880c      	ldrh	r4, [r1, #0]
 8019646:	881b      	ldrh	r3, [r3, #0]
 8019648:	f9b0 2000 	ldrsh.w	r2, [r0]
 801964c:	3b01      	subs	r3, #1
 801964e:	1b1b      	subs	r3, r3, r4
 8019650:	8003      	strh	r3, [r0, #0]
 8019652:	800a      	strh	r2, [r1, #0]
 8019654:	bd10      	pop	{r4, pc}
 8019656:	bf00      	nop
 8019658:	24028518 	.word	0x24028518
 801965c:	24028514 	.word	0x24028514

08019660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019660:	4b0a      	ldr	r3, [pc, #40]	@ (801968c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019662:	b510      	push	{r4, lr}
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	2b01      	cmp	r3, #1
 8019668:	d10e      	bne.n	8019688 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801966a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801966e:	8843      	ldrh	r3, [r0, #2]
 8019670:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019674:	18ca      	adds	r2, r1, r3
 8019676:	4b06      	ldr	r3, [pc, #24]	@ (8019690 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019678:	8044      	strh	r4, [r0, #2]
 801967a:	881b      	ldrh	r3, [r3, #0]
 801967c:	1a9b      	subs	r3, r3, r2
 801967e:	8003      	strh	r3, [r0, #0]
 8019680:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019684:	8081      	strh	r1, [r0, #4]
 8019686:	80c3      	strh	r3, [r0, #6]
 8019688:	bd10      	pop	{r4, pc}
 801968a:	bf00      	nop
 801968c:	24028518 	.word	0x24028518
 8019690:	24028514 	.word	0x24028514

08019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019694:	4b08      	ldr	r3, [pc, #32]	@ (80196b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	2b01      	cmp	r3, #1
 801969a:	d10c      	bne.n	80196b6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801969c:	8803      	ldrh	r3, [r0, #0]
 801969e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80196a2:	8842      	ldrh	r2, [r0, #2]
 80196a4:	8002      	strh	r2, [r0, #0]
 80196a6:	185a      	adds	r2, r3, r1
 80196a8:	4b04      	ldr	r3, [pc, #16]	@ (80196bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80196aa:	881b      	ldrh	r3, [r3, #0]
 80196ac:	1a9b      	subs	r3, r3, r2
 80196ae:	8043      	strh	r3, [r0, #2]
 80196b0:	88c3      	ldrh	r3, [r0, #6]
 80196b2:	80c1      	strh	r1, [r0, #6]
 80196b4:	8083      	strh	r3, [r0, #4]
 80196b6:	4770      	bx	lr
 80196b8:	24028518 	.word	0x24028518
 80196bc:	24028514 	.word	0x24028514

080196c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80196c0:	4b07      	ldr	r3, [pc, #28]	@ (80196e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80196c2:	b510      	push	{r4, lr}
 80196c4:	781b      	ldrb	r3, [r3, #0]
 80196c6:	2b01      	cmp	r3, #1
 80196c8:	d108      	bne.n	80196dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80196ca:	f9b1 3000 	ldrsh.w	r3, [r1]
 80196ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 80196d2:	8003      	strh	r3, [r0, #0]
 80196d4:	8893      	ldrh	r3, [r2, #4]
 80196d6:	3b01      	subs	r3, #1
 80196d8:	1b1b      	subs	r3, r3, r4
 80196da:	800b      	strh	r3, [r1, #0]
 80196dc:	bd10      	pop	{r4, pc}
 80196de:	bf00      	nop
 80196e0:	24028518 	.word	0x24028518

080196e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80196e4:	4b0b      	ldr	r3, [pc, #44]	@ (8019714 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80196e6:	781b      	ldrb	r3, [r3, #0]
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	d111      	bne.n	8019710 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80196ec:	680b      	ldr	r3, [r1, #0]
 80196ee:	ed90 7a00 	vldr	s14, [r0]
 80196f2:	6003      	str	r3, [r0, #0]
 80196f4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80196f8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8019718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80196fc:	ee07 3a90 	vmov	s15, r3
 8019700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801970c:	edc1 7a00 	vstr	s15, [r1]
 8019710:	4770      	bx	lr
 8019712:	bf00      	nop
 8019714:	24028518 	.word	0x24028518
 8019718:	38d1b717 	.word	0x38d1b717

0801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801971c:	4b0a      	ldr	r3, [pc, #40]	@ (8019748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801971e:	460a      	mov	r2, r1
 8019720:	b510      	push	{r4, lr}
 8019722:	781b      	ldrb	r3, [r3, #0]
 8019724:	2b01      	cmp	r3, #1
 8019726:	d10d      	bne.n	8019744 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019728:	8881      	ldrh	r1, [r0, #4]
 801972a:	8803      	ldrh	r3, [r0, #0]
 801972c:	440b      	add	r3, r1
 801972e:	4601      	mov	r1, r0
 8019730:	3b01      	subs	r3, #1
 8019732:	f821 3b02 	strh.w	r3, [r1], #2
 8019736:	f7ff ffc3 	bl	80196c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801973a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801973e:	88c2      	ldrh	r2, [r0, #6]
 8019740:	80c3      	strh	r3, [r0, #6]
 8019742:	8082      	strh	r2, [r0, #4]
 8019744:	bd10      	pop	{r4, pc}
 8019746:	bf00      	nop
 8019748:	24028518 	.word	0x24028518

0801974c <_ZN8touchgfx11Application13requestRedrawEv>:
 801974c:	4b06      	ldr	r3, [pc, #24]	@ (8019768 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801974e:	2100      	movs	r1, #0
 8019750:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019754:	4b05      	ldr	r3, [pc, #20]	@ (801976c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019756:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801975a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801975e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8019762:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8019766:	4770      	bx	lr
 8019768:	24028514 	.word	0x24028514
 801976c:	24028516 	.word	0x24028516

08019770 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019770:	4b03      	ldr	r3, [pc, #12]	@ (8019780 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019772:	6818      	ldr	r0, [r3, #0]
 8019774:	b110      	cbz	r0, 801977c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019776:	6803      	ldr	r3, [r0, #0]
 8019778:	699b      	ldr	r3, [r3, #24]
 801977a:	4718      	bx	r3
 801977c:	4770      	bx	lr
 801977e:	bf00      	nop
 8019780:	24028564 	.word	0x24028564

08019784 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019784:	4770      	bx	lr
	...

08019788 <_ZN8touchgfx11Application4drawEv>:
 8019788:	4b09      	ldr	r3, [pc, #36]	@ (80197b0 <_ZN8touchgfx11Application4drawEv+0x28>)
 801978a:	b507      	push	{r0, r1, r2, lr}
 801978c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019790:	2100      	movs	r1, #0
 8019792:	4b08      	ldr	r3, [pc, #32]	@ (80197b4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019794:	9100      	str	r1, [sp, #0]
 8019796:	4669      	mov	r1, sp
 8019798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801979c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80197a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80197a4:	6803      	ldr	r3, [r0, #0]
 80197a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80197a8:	4798      	blx	r3
 80197aa:	b003      	add	sp, #12
 80197ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80197b0:	24028514 	.word	0x24028514
 80197b4:	24028516 	.word	0x24028516

080197b8 <_ZN8touchgfx11Application10invalidateEv>:
 80197b8:	4b09      	ldr	r3, [pc, #36]	@ (80197e0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80197ba:	b082      	sub	sp, #8
 80197bc:	2100      	movs	r1, #0
 80197be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197c2:	4b08      	ldr	r3, [pc, #32]	@ (80197e4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80197c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80197c8:	aa02      	add	r2, sp, #8
 80197ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80197ce:	9100      	str	r1, [sp, #0]
 80197d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80197d4:	6803      	ldr	r3, [r0, #0]
 80197d6:	e912 0006 	ldmdb	r2, {r1, r2}
 80197da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197dc:	b002      	add	sp, #8
 80197de:	4718      	bx	r3
 80197e0:	24028514 	.word	0x24028514
 80197e4:	24028516 	.word	0x24028516

080197e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80197e8:	4b03      	ldr	r3, [pc, #12]	@ (80197f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80197ea:	6818      	ldr	r0, [r3, #0]
 80197ec:	b110      	cbz	r0, 80197f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80197ee:	6803      	ldr	r3, [r0, #0]
 80197f0:	69db      	ldr	r3, [r3, #28]
 80197f2:	4718      	bx	r3
 80197f4:	4770      	bx	lr
 80197f6:	bf00      	nop
 80197f8:	24028564 	.word	0x24028564

080197fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80197fc:	4b03      	ldr	r3, [pc, #12]	@ (801980c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80197fe:	6818      	ldr	r0, [r3, #0]
 8019800:	b110      	cbz	r0, 8019808 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	6a1b      	ldr	r3, [r3, #32]
 8019806:	4718      	bx	r3
 8019808:	4770      	bx	lr
 801980a:	bf00      	nop
 801980c:	24028564 	.word	0x24028564

08019810 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019810:	2300      	movs	r3, #0
 8019812:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8019816:	4770      	bx	lr

08019818 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019818:	4b03      	ldr	r3, [pc, #12]	@ (8019828 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801981a:	6818      	ldr	r0, [r3, #0]
 801981c:	b110      	cbz	r0, 8019824 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801981e:	6803      	ldr	r3, [r0, #0]
 8019820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019822:	4718      	bx	r3
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop
 8019828:	24028564 	.word	0x24028564

0801982c <_ZN8touchgfx11ApplicationD1Ev>:
 801982c:	4770      	bx	lr

0801982e <_ZN8touchgfx11ApplicationD0Ev>:
 801982e:	b510      	push	{r4, lr}
 8019830:	4604      	mov	r4, r0
 8019832:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8019836:	f00e fc5f 	bl	80280f8 <_ZdlPvj>
 801983a:	4620      	mov	r0, r4
 801983c:	bd10      	pop	{r4, pc}

0801983e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801983e:	b510      	push	{r4, lr}
 8019840:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019844:	888a      	ldrh	r2, [r1, #4]
 8019846:	f9b0 3000 	ldrsh.w	r3, [r0]
 801984a:	4422      	add	r2, r4
 801984c:	b212      	sxth	r2, r2
 801984e:	4293      	cmp	r3, r2
 8019850:	da15      	bge.n	801987e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019852:	8882      	ldrh	r2, [r0, #4]
 8019854:	4413      	add	r3, r2
 8019856:	b21b      	sxth	r3, r3
 8019858:	429c      	cmp	r4, r3
 801985a:	da10      	bge.n	801987e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801985c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019860:	88c9      	ldrh	r1, [r1, #6]
 8019862:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019866:	4419      	add	r1, r3
 8019868:	b209      	sxth	r1, r1
 801986a:	428a      	cmp	r2, r1
 801986c:	da07      	bge.n	801987e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801986e:	88c0      	ldrh	r0, [r0, #6]
 8019870:	4410      	add	r0, r2
 8019872:	b200      	sxth	r0, r0
 8019874:	4283      	cmp	r3, r0
 8019876:	bfac      	ite	ge
 8019878:	2000      	movge	r0, #0
 801987a:	2001      	movlt	r0, #1
 801987c:	bd10      	pop	{r4, pc}
 801987e:	2000      	movs	r0, #0
 8019880:	e7fc      	b.n	801987c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019882 <_ZN8touchgfx4Rect10restrictToEss>:
 8019882:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	b510      	push	{r4, lr}
 801988a:	da04      	bge.n	8019896 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801988c:	8884      	ldrh	r4, [r0, #4]
 801988e:	4423      	add	r3, r4
 8019890:	8083      	strh	r3, [r0, #4]
 8019892:	2300      	movs	r3, #0
 8019894:	8003      	strh	r3, [r0, #0]
 8019896:	f9b0 4000 	ldrsh.w	r4, [r0]
 801989a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801989e:	1b09      	subs	r1, r1, r4
 80198a0:	428b      	cmp	r3, r1
 80198a2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80198a6:	bfc8      	it	gt
 80198a8:	8081      	strhgt	r1, [r0, #4]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	da04      	bge.n	80198b8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80198ae:	88c1      	ldrh	r1, [r0, #6]
 80198b0:	440b      	add	r3, r1
 80198b2:	80c3      	strh	r3, [r0, #6]
 80198b4:	2300      	movs	r3, #0
 80198b6:	8043      	strh	r3, [r0, #2]
 80198b8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80198bc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80198c0:	1a52      	subs	r2, r2, r1
 80198c2:	4293      	cmp	r3, r2
 80198c4:	bfc8      	it	gt
 80198c6:	80c2      	strhgt	r2, [r0, #6]
 80198c8:	bd10      	pop	{r4, pc}
	...

080198cc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80198cc:	4b10      	ldr	r3, [pc, #64]	@ (8019910 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80198ce:	b510      	push	{r4, lr}
 80198d0:	460c      	mov	r4, r1
 80198d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80198d6:	4b0f      	ldr	r3, [pc, #60]	@ (8019914 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80198d8:	4620      	mov	r0, r4
 80198da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80198de:	f7ff ffd0 	bl	8019882 <_ZN8touchgfx4Rect10restrictToEss>
 80198e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019918 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80198e4:	6818      	ldr	r0, [r3, #0]
 80198e6:	b190      	cbz	r0, 801990e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80198e8:	6803      	ldr	r3, [r0, #0]
 80198ea:	4621      	mov	r1, r4
 80198ec:	689b      	ldr	r3, [r3, #8]
 80198ee:	4798      	blx	r3
 80198f0:	4b0a      	ldr	r3, [pc, #40]	@ (801991c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80198f2:	6818      	ldr	r0, [r3, #0]
 80198f4:	b118      	cbz	r0, 80198fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80198f6:	6803      	ldr	r3, [r0, #0]
 80198f8:	4621      	mov	r1, r4
 80198fa:	689b      	ldr	r3, [r3, #8]
 80198fc:	4798      	blx	r3
 80198fe:	4b08      	ldr	r3, [pc, #32]	@ (8019920 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019900:	4621      	mov	r1, r4
 8019902:	6818      	ldr	r0, [r3, #0]
 8019904:	6803      	ldr	r3, [r0, #0]
 8019906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801990a:	69db      	ldr	r3, [r3, #28]
 801990c:	4718      	bx	r3
 801990e:	bd10      	pop	{r4, pc}
 8019910:	24028516 	.word	0x24028516
 8019914:	24028514 	.word	0x24028514
 8019918:	24028564 	.word	0x24028564
 801991c:	24028560 	.word	0x24028560
 8019920:	24028520 	.word	0x24028520

08019924 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019926:	4606      	mov	r6, r0
 8019928:	4608      	mov	r0, r1
 801992a:	460f      	mov	r7, r1
 801992c:	f7f8 fbf7 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019930:	b9e8      	cbnz	r0, 801996e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019932:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019936:	f9b6 4000 	ldrsh.w	r4, [r6]
 801993a:	42a5      	cmp	r5, r4
 801993c:	db17      	blt.n	801996e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801993e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019942:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019946:	429a      	cmp	r2, r3
 8019948:	db11      	blt.n	801996e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801994a:	88b9      	ldrh	r1, [r7, #4]
 801994c:	440d      	add	r5, r1
 801994e:	88b1      	ldrh	r1, [r6, #4]
 8019950:	440c      	add	r4, r1
 8019952:	b22d      	sxth	r5, r5
 8019954:	b224      	sxth	r4, r4
 8019956:	42a5      	cmp	r5, r4
 8019958:	dc09      	bgt.n	801996e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801995a:	88f8      	ldrh	r0, [r7, #6]
 801995c:	4410      	add	r0, r2
 801995e:	88f2      	ldrh	r2, [r6, #6]
 8019960:	4413      	add	r3, r2
 8019962:	b200      	sxth	r0, r0
 8019964:	b21b      	sxth	r3, r3
 8019966:	4298      	cmp	r0, r3
 8019968:	bfcc      	ite	gt
 801996a:	2000      	movgt	r0, #0
 801996c:	2001      	movle	r0, #1
 801996e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019970 <_ZN8touchgfx11Application11getInstanceEv>:
 8019970:	4b01      	ldr	r3, [pc, #4]	@ (8019978 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019972:	6818      	ldr	r0, [r3, #0]
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop
 8019978:	24028574 	.word	0x24028574

0801997c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801997c:	2300      	movs	r3, #0
 801997e:	b510      	push	{r4, lr}
 8019980:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8019984:	4604      	mov	r4, r0
 8019986:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801998a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801998e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019992:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8019996:	429a      	cmp	r2, r3
 8019998:	d90e      	bls.n	80199b8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801999a:	18e2      	adds	r2, r4, r3
 801999c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80199a0:	b122      	cbz	r2, 80199ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80199a2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80199a6:	6803      	ldr	r3, [r0, #0]
 80199a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80199aa:	4798      	blx	r3
 80199ac:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80199b0:	3301      	adds	r3, #1
 80199b2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80199b6:	e7ea      	b.n	801998e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80199b8:	bd10      	pop	{r4, pc}

080199ba <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80199ba:	b530      	push	{r4, r5, lr}
 80199bc:	2200      	movs	r2, #0
 80199be:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80199c2:	b293      	uxth	r3, r2
 80199c4:	429d      	cmp	r5, r3
 80199c6:	d90e      	bls.n	80199e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80199c8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80199cc:	428b      	cmp	r3, r1
 80199ce:	d10b      	bne.n	80199e8 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80199d0:	1884      	adds	r4, r0, r2
 80199d2:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80199d6:	b13b      	cbz	r3, 80199e8 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80199d8:	3b01      	subs	r3, #1
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80199e0:	b90b      	cbnz	r3, 80199e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80199e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80199e6:	bd30      	pop	{r4, r5, pc}
 80199e8:	3201      	adds	r2, #1
 80199ea:	e7ea      	b.n	80199c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80199ec:	2300      	movs	r3, #0
 80199ee:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80199f2:	30a4      	adds	r0, #164	@ 0xa4
 80199f4:	f820 3c24 	strh.w	r3, [r0, #-36]
 80199f8:	f802 3b01 	strb.w	r3, [r2], #1
 80199fc:	4282      	cmp	r2, r0
 80199fe:	d1fb      	bne.n	80199f8 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019a00:	4770      	bx	lr
	...

08019a04 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019a04:	b570      	push	{r4, r5, r6, lr}
 8019a06:	4c0b      	ldr	r4, [pc, #44]	@ (8019a34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019a08:	4605      	mov	r5, r0
 8019a0a:	460e      	mov	r6, r1
 8019a0c:	6820      	ldr	r0, [r4, #0]
 8019a0e:	b110      	cbz	r0, 8019a16 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019a10:	6803      	ldr	r3, [r0, #0]
 8019a12:	695b      	ldr	r3, [r3, #20]
 8019a14:	4798      	blx	r3
 8019a16:	1d28      	adds	r0, r5, #4
 8019a18:	f7ff ffe8 	bl	80199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019a1c:	6026      	str	r6, [r4, #0]
 8019a1e:	6833      	ldr	r3, [r6, #0]
 8019a20:	4630      	mov	r0, r6
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	4798      	blx	r3
 8019a26:	682b      	ldr	r3, [r5, #0]
 8019a28:	4628      	mov	r0, r5
 8019a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a30:	4718      	bx	r3
 8019a32:	bf00      	nop
 8019a34:	24028564 	.word	0x24028564

08019a38 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019a38:	2300      	movs	r3, #0
 8019a3a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8019a3e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8019a42:	461a      	mov	r2, r3
 8019a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a46:	461c      	mov	r4, r3
 8019a48:	461d      	mov	r5, r3
 8019a4a:	459c      	cmp	ip, r3
 8019a4c:	dd1a      	ble.n	8019a84 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019a4e:	18c6      	adds	r6, r0, r3
 8019a50:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8019a54:	b16e      	cbz	r6, 8019a72 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019a56:	429a      	cmp	r2, r3
 8019a58:	d008      	beq.n	8019a6c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019a5a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019a5e:	fa1f fe82 	uxth.w	lr, r2
 8019a62:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019a66:	1887      	adds	r7, r0, r2
 8019a68:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8019a6c:	3201      	adds	r2, #1
 8019a6e:	3301      	adds	r3, #1
 8019a70:	e7eb      	b.n	8019a4a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019a72:	4299      	cmp	r1, r3
 8019a74:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8019a78:	bfa8      	it	ge
 8019a7a:	3501      	addge	r5, #1
 8019a7c:	429e      	cmp	r6, r3
 8019a7e:	bfc8      	it	gt
 8019a80:	3401      	addgt	r4, #1
 8019a82:	e7f4      	b.n	8019a6e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8019a84:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8019a88:	1b49      	subs	r1, r1, r5
 8019a8a:	1b1b      	subs	r3, r3, r4
 8019a8c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8019a90:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019a94:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019a98:	4293      	cmp	r3, r2
 8019a9a:	dd03      	ble.n	8019aa4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8019a9c:	3b01      	subs	r3, #1
 8019a9e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8019aa2:	e7f7      	b.n	8019a94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8019aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019aa8 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019aa8:	b570      	push	{r4, r5, r6, lr}
 8019aaa:	4d16      	ldr	r5, [pc, #88]	@ (8019b04 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8019aac:	4604      	mov	r4, r0
 8019aae:	6828      	ldr	r0, [r5, #0]
 8019ab0:	b140      	cbz	r0, 8019ac4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ab2:	7a03      	ldrb	r3, [r0, #8]
 8019ab4:	b933      	cbnz	r3, 8019ac4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ab6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8019aba:	6803      	ldr	r3, [r0, #0]
 8019abc:	689b      	ldr	r3, [r3, #8]
 8019abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ac2:	4718      	bx	r3
 8019ac4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8019ac8:	4e0f      	ldr	r6, [pc, #60]	@ (8019b08 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8019aca:	b973      	cbnz	r3, 8019aea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019acc:	b168      	cbz	r0, 8019aea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019ace:	7a03      	ldrb	r3, [r0, #8]
 8019ad0:	b15b      	cbz	r3, 8019aea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019ad2:	6830      	ldr	r0, [r6, #0]
 8019ad4:	b110      	cbz	r0, 8019adc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019ad6:	6803      	ldr	r3, [r0, #0]
 8019ad8:	691b      	ldr	r3, [r3, #16]
 8019ada:	4798      	blx	r3
 8019adc:	6828      	ldr	r0, [r5, #0]
 8019ade:	6803      	ldr	r3, [r0, #0]
 8019ae0:	68db      	ldr	r3, [r3, #12]
 8019ae2:	4798      	blx	r3
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8019aea:	3404      	adds	r4, #4
 8019aec:	4620      	mov	r0, r4
 8019aee:	f7ff ff45 	bl	801997c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8019af2:	4620      	mov	r0, r4
 8019af4:	f7ff ffa0 	bl	8019a38 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019af8:	6830      	ldr	r0, [r6, #0]
 8019afa:	b110      	cbz	r0, 8019b02 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8019afc:	6803      	ldr	r3, [r0, #0]
 8019afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b00:	e7dd      	b.n	8019abe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019b02:	bd70      	pop	{r4, r5, r6, pc}
 8019b04:	24028568 	.word	0x24028568
 8019b08:	24028564 	.word	0x24028564

08019b0c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8019b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b0e:	2300      	movs	r3, #0
 8019b10:	4604      	mov	r4, r0
 8019b12:	460d      	mov	r5, r1
 8019b14:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8019b18:	4618      	mov	r0, r3
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	4291      	cmp	r1, r2
 8019b1e:	d912      	bls.n	8019b46 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8019b20:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8019b24:	18e6      	adds	r6, r4, r3
 8019b26:	42af      	cmp	r7, r5
 8019b28:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8019b2c:	d105      	bne.n	8019b3a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8019b2e:	2aff      	cmp	r2, #255	@ 0xff
 8019b30:	d002      	beq.n	8019b38 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019b32:	3201      	adds	r2, #1
 8019b34:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8019b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b3a:	2a00      	cmp	r2, #0
 8019b3c:	f103 0301 	add.w	r3, r3, #1
 8019b40:	bf08      	it	eq
 8019b42:	2001      	moveq	r0, #1
 8019b44:	e7e9      	b.n	8019b1a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8019b46:	b120      	cbz	r0, 8019b52 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8019b48:	2920      	cmp	r1, #32
 8019b4a:	d102      	bne.n	8019b52 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	f7ff ff73 	bl	8019a38 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019b52:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8019b56:	2b1f      	cmp	r3, #31
 8019b58:	d8ee      	bhi.n	8019b38 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019b5a:	18e2      	adds	r2, r4, r3
 8019b5c:	2101      	movs	r1, #1
 8019b5e:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8019b62:	185a      	adds	r2, r3, r1
 8019b64:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8019b68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8019b6c:	e7e4      	b.n	8019b38 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08019b6e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019b6e:	4603      	mov	r3, r0
 8019b70:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8019b74:	2200      	movs	r2, #0
 8019b76:	801a      	strh	r2, [r3, #0]
 8019b78:	3308      	adds	r3, #8
 8019b7a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019b7e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019b82:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019b86:	428b      	cmp	r3, r1
 8019b88:	d1f5      	bne.n	8019b76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019b8a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019b8e:	4770      	bx	lr

08019b90 <_ZN8touchgfx11ApplicationC1Ev>:
 8019b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b92:	4b1d      	ldr	r3, [pc, #116]	@ (8019c08 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019b94:	4606      	mov	r6, r0
 8019b96:	4604      	mov	r4, r0
 8019b98:	2500      	movs	r5, #0
 8019b9a:	f846 3b04 	str.w	r3, [r6], #4
 8019b9e:	22a8      	movs	r2, #168	@ 0xa8
 8019ba0:	2100      	movs	r1, #0
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	f00f f8bc 	bl	8028d20 <memset>
 8019ba8:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8019bac:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019bb0:	4f16      	ldr	r7, [pc, #88]	@ (8019c0c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019bb2:	f7ff ffdc 	bl	8019b6e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019bb6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019bba:	f7ff ffd8 	bl	8019b6e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019bbe:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8019bc2:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8019bc6:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8019bca:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8019bce:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8019bd2:	490f      	ldr	r1, [pc, #60]	@ (8019c10 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019bd4:	480f      	ldr	r0, [pc, #60]	@ (8019c14 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019bd6:	f00d fbff 	bl	80273d8 <CRC_Lock>
 8019bda:	4b0f      	ldr	r3, [pc, #60]	@ (8019c18 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8019bdc:	b158      	cbz	r0, 8019bf6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8019bde:	801d      	strh	r5, [r3, #0]
 8019be0:	2300      	movs	r3, #0
 8019be2:	4a0e      	ldr	r2, [pc, #56]	@ (8019c1c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8019be4:	4630      	mov	r0, r6
 8019be6:	6013      	str	r3, [r2, #0]
 8019be8:	4a0d      	ldr	r2, [pc, #52]	@ (8019c20 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8019bea:	603b      	str	r3, [r7, #0]
 8019bec:	6013      	str	r3, [r2, #0]
 8019bee:	f7ff fefd 	bl	80199ec <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019bf2:	4620      	mov	r0, r4
 8019bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019bfa:	2002      	movs	r0, #2
 8019bfc:	801a      	strh	r2, [r3, #0]
 8019bfe:	6038      	str	r0, [r7, #0]
 8019c00:	f001 fe58 	bl	801b8b4 <_ZN8touchgfx6Screen4drawEv>
 8019c04:	e7ec      	b.n	8019be0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8019c06:	bf00      	nop
 8019c08:	0802d4f4 	.word	0x0802d4f4
 8019c0c:	24028564 	.word	0x24028564
 8019c10:	b5e8b5cd 	.word	0xb5e8b5cd
 8019c14:	f407a5c2 	.word	0xf407a5c2
 8019c18:	2400007c 	.word	0x2400007c
 8019c1c:	24028574 	.word	0x24028574
 8019c20:	24028568 	.word	0x24028568

08019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019c24:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019c28:	3b01      	subs	r3, #1
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	428b      	cmp	r3, r1
 8019c2e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8019c32:	b510      	push	{r4, lr}
 8019c34:	d908      	bls.n	8019c48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019c36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019c3a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019c44:	685a      	ldr	r2, [r3, #4]
 8019c46:	6062      	str	r2, [r4, #4]
 8019c48:	bd10      	pop	{r4, pc}
	...

08019c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c50:	b08f      	sub	sp, #60	@ 0x3c
 8019c52:	4b8f      	ldr	r3, [pc, #572]	@ (8019e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8019c54:	4683      	mov	fp, r0
 8019c56:	ac0a      	add	r4, sp, #40	@ 0x28
 8019c58:	e884 0006 	stmia.w	r4, {r1, r2}
 8019c5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c60:	4620      	mov	r0, r4
 8019c62:	4b8c      	ldr	r3, [pc, #560]	@ (8019e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8019c64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019c68:	f7ff fe0b 	bl	8019882 <_ZN8touchgfx4Rect10restrictToEss>
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	f7f8 fa56 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	d16a      	bne.n	8019d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019c76:	9403      	str	r4, [sp, #12]
 8019c78:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019c7c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019c80:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019c84:	9301      	str	r3, [sp, #4]
 8019c86:	35a4      	adds	r5, #164	@ 0xa4
 8019c88:	b15c      	cbz	r4, 8019ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019c8a:	4629      	mov	r1, r5
 8019c8c:	9803      	ldr	r0, [sp, #12]
 8019c8e:	f7ff fe49 	bl	8019924 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019c92:	3c01      	subs	r4, #1
 8019c94:	b118      	cbz	r0, 8019c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8019c96:	b2a1      	uxth	r1, r4
 8019c98:	9801      	ldr	r0, [sp, #4]
 8019c9a:	f7ff ffc3 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019c9e:	3d08      	subs	r5, #8
 8019ca0:	e7f2      	b.n	8019c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019ca2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8019ca6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019caa:	f8cd a010 	str.w	sl, [sp, #16]
 8019cae:	9302      	str	r3, [sp, #8]
 8019cb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019cb4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019cb8:	9306      	str	r3, [sp, #24]
 8019cba:	445c      	add	r4, fp
 8019cbc:	2500      	movs	r5, #0
 8019cbe:	4626      	mov	r6, r4
 8019cc0:	f8cd a014 	str.w	sl, [sp, #20]
 8019cc4:	462f      	mov	r7, r5
 8019cc6:	9b05      	ldr	r3, [sp, #20]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d073      	beq.n	8019db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019ccc:	9903      	ldr	r1, [sp, #12]
 8019cce:	4630      	mov	r0, r6
 8019cd0:	f7ff fdb5 	bl	801983e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019cd4:	b350      	cbz	r0, 8019d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019cd6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8019cda:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019cde:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019ce2:	45e6      	cmp	lr, ip
 8019ce4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019ce8:	db33      	blt.n	8019d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019cea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019cee:	88b3      	ldrh	r3, [r6, #4]
 8019cf0:	4472      	add	r2, lr
 8019cf2:	4463      	add	r3, ip
 8019cf4:	b212      	sxth	r2, r2
 8019cf6:	b21b      	sxth	r3, r3
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	dc2a      	bgt.n	8019d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019cfc:	fa1f f289 	uxth.w	r2, r9
 8019d00:	88f3      	ldrh	r3, [r6, #6]
 8019d02:	45c8      	cmp	r8, r9
 8019d04:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019d08:	4413      	add	r3, r2
 8019d0a:	fa1f fc88 	uxth.w	ip, r8
 8019d0e:	b29b      	uxth	r3, r3
 8019d10:	fa0f fe83 	sxth.w	lr, r3
 8019d14:	db0f      	blt.n	8019d36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019d16:	eba3 030c 	sub.w	r3, r3, ip
 8019d1a:	1ac9      	subs	r1, r1, r3
 8019d1c:	b209      	sxth	r1, r1
 8019d1e:	2900      	cmp	r1, #0
 8019d20:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019d24:	dd12      	ble.n	8019d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019d26:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019d2a:	4605      	mov	r5, r0
 8019d2c:	9b05      	ldr	r3, [sp, #20]
 8019d2e:	3e08      	subs	r6, #8
 8019d30:	3b01      	subs	r3, #1
 8019d32:	9305      	str	r3, [sp, #20]
 8019d34:	e7c7      	b.n	8019cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019d36:	4461      	add	r1, ip
 8019d38:	b209      	sxth	r1, r1
 8019d3a:	4571      	cmp	r1, lr
 8019d3c:	dc38      	bgt.n	8019db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019d3e:	eba2 020c 	sub.w	r2, r2, ip
 8019d42:	b212      	sxth	r2, r2
 8019d44:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019d48:	2a00      	cmp	r2, #0
 8019d4a:	dcee      	bgt.n	8019d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019d4c:	b00f      	add	sp, #60	@ 0x3c
 8019d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d52:	45c8      	cmp	r8, r9
 8019d54:	db2c      	blt.n	8019db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019d56:	88f3      	ldrh	r3, [r6, #6]
 8019d58:	4499      	add	r9, r3
 8019d5a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019d5e:	4498      	add	r8, r3
 8019d60:	fa0f f989 	sxth.w	r9, r9
 8019d64:	fa0f f888 	sxth.w	r8, r8
 8019d68:	45c1      	cmp	r9, r8
 8019d6a:	db21      	blt.n	8019db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019d6c:	fa1f f28c 	uxth.w	r2, ip
 8019d70:	88b3      	ldrh	r3, [r6, #4]
 8019d72:	45e6      	cmp	lr, ip
 8019d74:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019d78:	4413      	add	r3, r2
 8019d7a:	fa1f f88e 	uxth.w	r8, lr
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	fa0f f983 	sxth.w	r9, r3
 8019d84:	db0a      	blt.n	8019d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8019d86:	eba3 0308 	sub.w	r3, r3, r8
 8019d8a:	1ac9      	subs	r1, r1, r3
 8019d8c:	b209      	sxth	r1, r1
 8019d8e:	2900      	cmp	r1, #0
 8019d90:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019d94:	ddda      	ble.n	8019d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019d96:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019d9a:	e7c6      	b.n	8019d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019d9c:	4441      	add	r1, r8
 8019d9e:	b209      	sxth	r1, r1
 8019da0:	4549      	cmp	r1, r9
 8019da2:	dc05      	bgt.n	8019db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019da4:	eba2 0208 	sub.w	r2, r2, r8
 8019da8:	b212      	sxth	r2, r2
 8019daa:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019dae:	e7cb      	b.n	8019d48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019db0:	4607      	mov	r7, r0
 8019db2:	e7bb      	b.n	8019d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019db4:	2d00      	cmp	r5, #0
 8019db6:	d181      	bne.n	8019cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019db8:	2f00      	cmp	r7, #0
 8019dba:	f000 81dd 	beq.w	801a178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019dbe:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019dc2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019dc6:	b2b3      	uxth	r3, r6
 8019dc8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8019dcc:	9305      	str	r3, [sp, #20]
 8019dce:	9a05      	ldr	r2, [sp, #20]
 8019dd0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019dd4:	4413      	add	r3, r2
 8019dd6:	b2ba      	uxth	r2, r7
 8019dd8:	4492      	add	sl, r2
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	fa1f fa8a 	uxth.w	sl, sl
 8019de0:	fa0f f883 	sxth.w	r8, r3
 8019de4:	fa0f f98a 	sxth.w	r9, sl
 8019de8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019dec:	9b04      	ldr	r3, [sp, #16]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d052      	beq.n	8019e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019df2:	9903      	ldr	r1, [sp, #12]
 8019df4:	4620      	mov	r0, r4
 8019df6:	f7ff fd22 	bl	801983e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019dfa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019dfe:	b1c0      	cbz	r0, 8019e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019e00:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019e04:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019e08:	4576      	cmp	r6, lr
 8019e0a:	dc22      	bgt.n	8019e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019e0c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019e10:	44f4      	add	ip, lr
 8019e12:	fa0f fc8c 	sxth.w	ip, ip
 8019e16:	45e0      	cmp	r8, ip
 8019e18:	db1b      	blt.n	8019e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019e1a:	428f      	cmp	r7, r1
 8019e1c:	fa1f fc81 	uxth.w	ip, r1
 8019e20:	88e1      	ldrh	r1, [r4, #6]
 8019e22:	dc0d      	bgt.n	8019e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019e24:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019e28:	f8a4 9002 	strh.w	r9, [r4, #2]
 8019e2c:	eba1 010c 	sub.w	r1, r1, ip
 8019e30:	80e1      	strh	r1, [r4, #6]
 8019e32:	4628      	mov	r0, r5
 8019e34:	9904      	ldr	r1, [sp, #16]
 8019e36:	3c08      	subs	r4, #8
 8019e38:	4605      	mov	r5, r0
 8019e3a:	3901      	subs	r1, #1
 8019e3c:	9104      	str	r1, [sp, #16]
 8019e3e:	e7d3      	b.n	8019de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8019e40:	4461      	add	r1, ip
 8019e42:	b209      	sxth	r1, r1
 8019e44:	4549      	cmp	r1, r9
 8019e46:	dcf5      	bgt.n	8019e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019e48:	eba2 0c0c 	sub.w	ip, r2, ip
 8019e4c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019e50:	e7ef      	b.n	8019e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019e52:	428f      	cmp	r7, r1
 8019e54:	dcee      	bgt.n	8019e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019e56:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019e5a:	4461      	add	r1, ip
 8019e5c:	b209      	sxth	r1, r1
 8019e5e:	4589      	cmp	r9, r1
 8019e60:	dbe8      	blt.n	8019e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019e62:	4576      	cmp	r6, lr
 8019e64:	fa1f fc8e 	uxth.w	ip, lr
 8019e68:	88a1      	ldrh	r1, [r4, #4]
 8019e6a:	dc07      	bgt.n	8019e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8019e6c:	eba3 0c0c 	sub.w	ip, r3, ip
 8019e70:	f8a4 8000 	strh.w	r8, [r4]
 8019e74:	eba1 010c 	sub.w	r1, r1, ip
 8019e78:	80a1      	strh	r1, [r4, #4]
 8019e7a:	e7da      	b.n	8019e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019e7c:	4461      	add	r1, ip
 8019e7e:	b209      	sxth	r1, r1
 8019e80:	4588      	cmp	r8, r1
 8019e82:	dbd7      	blt.n	8019e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019e84:	9905      	ldr	r1, [sp, #20]
 8019e86:	eba1 0c0c 	sub.w	ip, r1, ip
 8019e8a:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019e8e:	e7d0      	b.n	8019e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019e90:	24028516 	.word	0x24028516
 8019e94:	24028514 	.word	0x24028514
 8019e98:	2d00      	cmp	r5, #0
 8019e9a:	f000 816d 	beq.w	801a178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019e9e:	9b06      	ldr	r3, [sp, #24]
 8019ea0:	445b      	add	r3, fp
 8019ea2:	461c      	mov	r4, r3
 8019ea4:	9b02      	ldr	r3, [sp, #8]
 8019ea6:	3301      	adds	r3, #1
 8019ea8:	f000 8166 	beq.w	801a178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019eac:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019eb0:	9803      	ldr	r0, [sp, #12]
 8019eb2:	4629      	mov	r1, r5
 8019eb4:	f7ff fd36 	bl	8019924 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019eb8:	b120      	cbz	r0, 8019ec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8019eba:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019ebe:	9801      	ldr	r0, [sp, #4]
 8019ec0:	f7ff feb0 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019ec4:	9903      	ldr	r1, [sp, #12]
 8019ec6:	4628      	mov	r0, r5
 8019ec8:	f7ff fcb9 	bl	801983e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	f000 809c 	beq.w	801a00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019ed2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019ed6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019eda:	fa1f f189 	uxth.w	r1, r9
 8019ede:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ee4:	eb01 0c03 	add.w	ip, r1, r3
 8019ee8:	b283      	uxth	r3, r0
 8019eea:	4548      	cmp	r0, r9
 8019eec:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019ef0:	fa1f fa8c 	uxth.w	sl, ip
 8019ef4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019ef8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8019efc:	eb03 050c 	add.w	r5, r3, ip
 8019f00:	b2ad      	uxth	r5, r5
 8019f02:	9505      	str	r5, [sp, #20]
 8019f04:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019f08:	9504      	str	r5, [sp, #16]
 8019f0a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8019f0e:	f340 8099 	ble.w	801a044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8019f12:	1a5b      	subs	r3, r3, r1
 8019f14:	4596      	cmp	lr, r2
 8019f16:	fa0f f08a 	sxth.w	r0, sl
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	b21e      	sxth	r6, r3
 8019f1e:	dd2e      	ble.n	8019f7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8019f20:	9f02      	ldr	r7, [sp, #8]
 8019f22:	fa1f fe8e 	uxth.w	lr, lr
 8019f26:	b292      	uxth	r2, r2
 8019f28:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8019f2c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019f30:	9f04      	ldr	r7, [sp, #16]
 8019f32:	ebae 0102 	sub.w	r1, lr, r2
 8019f36:	44a6      	add	lr, r4
 8019f38:	1a3f      	subs	r7, r7, r0
 8019f3a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8019f3e:	b289      	uxth	r1, r1
 8019f40:	4402      	add	r2, r0
 8019f42:	fa0f fe8e 	sxth.w	lr, lr
 8019f46:	b20d      	sxth	r5, r1
 8019f48:	b212      	sxth	r2, r2
 8019f4a:	436f      	muls	r7, r5
 8019f4c:	ebae 0202 	sub.w	r2, lr, r2
 8019f50:	4372      	muls	r2, r6
 8019f52:	4297      	cmp	r7, r2
 8019f54:	db09      	blt.n	8019f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8019f56:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8019f5a:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8019f5e:	449c      	add	ip, r3
 8019f60:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019f64:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019f68:	e686      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019f6a:	4421      	add	r1, r4
 8019f6c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019f70:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019f74:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019f78:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019f7c:	e67c      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019f7e:	9f04      	ldr	r7, [sp, #16]
 8019f80:	42b8      	cmp	r0, r7
 8019f82:	da27      	bge.n	8019fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8019f84:	9902      	ldr	r1, [sp, #8]
 8019f86:	1a3f      	subs	r7, r7, r0
 8019f88:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8019f8c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019f90:	eb05 010e 	add.w	r1, r5, lr
 8019f94:	fa1f f881 	uxth.w	r8, r1
 8019f98:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019f9c:	4411      	add	r1, r2
 8019f9e:	fa0f f988 	sxth.w	r9, r8
 8019fa2:	eba2 020e 	sub.w	r2, r2, lr
 8019fa6:	eba1 0108 	sub.w	r1, r1, r8
 8019faa:	4372      	muls	r2, r6
 8019fac:	b289      	uxth	r1, r1
 8019fae:	fa0f f881 	sxth.w	r8, r1
 8019fb2:	fb08 f707 	mul.w	r7, r8, r7
 8019fb6:	42ba      	cmp	r2, r7
 8019fb8:	dc06      	bgt.n	8019fc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8019fba:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019fbe:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019fc2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019fc6:	e7ca      	b.n	8019f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019fc8:	4429      	add	r1, r5
 8019fca:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019fce:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019fd2:	e651      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019fd4:	9805      	ldr	r0, [sp, #20]
 8019fd6:	2d06      	cmp	r5, #6
 8019fd8:	ebaa 0000 	sub.w	r0, sl, r0
 8019fdc:	b280      	uxth	r0, r0
 8019fde:	fa0f fe80 	sxth.w	lr, r0
 8019fe2:	d817      	bhi.n	801a014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019fe4:	9b04      	ldr	r3, [sp, #16]
 8019fe6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019fea:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019fee:	1c6b      	adds	r3, r5, #1
 8019ff0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019ff4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019ff8:	9b01      	ldr	r3, [sp, #4]
 8019ffa:	9801      	ldr	r0, [sp, #4]
 8019ffc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a000:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801a004:	805a      	strh	r2, [r3, #2]
 801a006:	809e      	strh	r6, [r3, #4]
 801a008:	80d9      	strh	r1, [r3, #6]
 801a00a:	9b02      	ldr	r3, [sp, #8]
 801a00c:	3c08      	subs	r4, #8
 801a00e:	3b01      	subs	r3, #1
 801a010:	9302      	str	r3, [sp, #8]
 801a012:	e747      	b.n	8019ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801a014:	9a02      	ldr	r2, [sp, #8]
 801a016:	45b6      	cmp	lr, r6
 801a018:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a01c:	db0d      	blt.n	801a03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a01e:	449c      	add	ip, r3
 801a020:	445a      	add	r2, fp
 801a022:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801a026:	fa1f fc8c 	uxth.w	ip, ip
 801a02a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801a02e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801a032:	448c      	add	ip, r1
 801a034:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801a038:	e61e      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a03a:	445a      	add	r2, fp
 801a03c:	4484      	add	ip, r0
 801a03e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801a042:	e78f      	b.n	8019f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a044:	fa1f f18e 	uxth.w	r1, lr
 801a048:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801a04c:	b293      	uxth	r3, r2
 801a04e:	4596      	cmp	lr, r2
 801a050:	eb01 0806 	add.w	r8, r1, r6
 801a054:	9306      	str	r3, [sp, #24]
 801a056:	fa1f f888 	uxth.w	r8, r8
 801a05a:	9f06      	ldr	r7, [sp, #24]
 801a05c:	fa0f f388 	sxth.w	r3, r8
 801a060:	9307      	str	r3, [sp, #28]
 801a062:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801a066:	443b      	add	r3, r7
 801a068:	b29b      	uxth	r3, r3
 801a06a:	9308      	str	r3, [sp, #32]
 801a06c:	da24      	bge.n	801a0b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801a06e:	9905      	ldr	r1, [sp, #20]
 801a070:	eba3 0308 	sub.w	r3, r3, r8
 801a074:	eba2 020e 	sub.w	r2, r2, lr
 801a078:	eba9 0000 	sub.w	r0, r9, r0
 801a07c:	ebaa 0401 	sub.w	r4, sl, r1
 801a080:	b29b      	uxth	r3, r3
 801a082:	b2a4      	uxth	r4, r4
 801a084:	b219      	sxth	r1, r3
 801a086:	b225      	sxth	r5, r4
 801a088:	4348      	muls	r0, r1
 801a08a:	436a      	muls	r2, r5
 801a08c:	4282      	cmp	r2, r0
 801a08e:	9a02      	ldr	r2, [sp, #8]
 801a090:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a094:	445a      	add	r2, fp
 801a096:	dc06      	bgt.n	801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801a098:	9b07      	ldr	r3, [sp, #28]
 801a09a:	44a4      	add	ip, r4
 801a09c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801a0a0:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801a0a4:	e75e      	b.n	8019f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a0a6:	9904      	ldr	r1, [sp, #16]
 801a0a8:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801a0ac:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801a0b0:	4433      	add	r3, r6
 801a0b2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a0b6:	e5df      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a0b8:	9f06      	ldr	r7, [sp, #24]
 801a0ba:	9b04      	ldr	r3, [sp, #16]
 801a0bc:	1bc9      	subs	r1, r1, r7
 801a0be:	fa0f f78a 	sxth.w	r7, sl
 801a0c2:	b289      	uxth	r1, r1
 801a0c4:	429f      	cmp	r7, r3
 801a0c6:	fa0f fe81 	sxth.w	lr, r1
 801a0ca:	dd23      	ble.n	801a114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801a0cc:	9a05      	ldr	r2, [sp, #20]
 801a0ce:	eba9 0000 	sub.w	r0, r9, r0
 801a0d2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a0d6:	ebaa 0202 	sub.w	r2, sl, r2
 801a0da:	9d07      	ldr	r5, [sp, #28]
 801a0dc:	fb0e f000 	mul.w	r0, lr, r0
 801a0e0:	b292      	uxth	r2, r2
 801a0e2:	eba5 0a03 	sub.w	sl, r5, r3
 801a0e6:	9b02      	ldr	r3, [sp, #8]
 801a0e8:	b214      	sxth	r4, r2
 801a0ea:	00db      	lsls	r3, r3, #3
 801a0ec:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0f0:	445b      	add	r3, fp
 801a0f2:	4550      	cmp	r0, sl
 801a0f4:	db03      	blt.n	801a0fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801a0f6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801a0fa:	4494      	add	ip, r2
 801a0fc:	e732      	b.n	8019f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a0fe:	9a04      	ldr	r2, [sp, #16]
 801a100:	4431      	add	r1, r6
 801a102:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801a106:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801a10a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801a10e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801a112:	e75c      	b.n	8019fce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801a114:	9b08      	ldr	r3, [sp, #32]
 801a116:	2d06      	cmp	r5, #6
 801a118:	eba3 0308 	sub.w	r3, r3, r8
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	b218      	sxth	r0, r3
 801a120:	d813      	bhi.n	801a14a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801a122:	9b07      	ldr	r3, [sp, #28]
 801a124:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801a128:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801a12c:	1c6b      	adds	r3, r5, #1
 801a12e:	9901      	ldr	r1, [sp, #4]
 801a130:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801a134:	9b01      	ldr	r3, [sp, #4]
 801a136:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801a13a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a13e:	805a      	strh	r2, [r3, #2]
 801a140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a142:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a146:	809a      	strh	r2, [r3, #4]
 801a148:	e75f      	b.n	801a00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801a14a:	9c02      	ldr	r4, [sp, #8]
 801a14c:	4570      	cmp	r0, lr
 801a14e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a152:	db0d      	blt.n	801a170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801a154:	4431      	add	r1, r6
 801a156:	9b06      	ldr	r3, [sp, #24]
 801a158:	445c      	add	r4, fp
 801a15a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801a15e:	b289      	uxth	r1, r1
 801a160:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801a164:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801a168:	4419      	add	r1, r3
 801a16a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801a16e:	e583      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a170:	445c      	add	r4, fp
 801a172:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801a176:	e79b      	b.n	801a0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801a178:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801a17c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801a180:	1e65      	subs	r5, r4, #1
 801a182:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801a186:	b2ad      	uxth	r5, r5
 801a188:	42b5      	cmp	r5, r6
 801a18a:	d044      	beq.n	801a216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801a18c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801a190:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801a194:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801a198:	4282      	cmp	r2, r0
 801a19a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801a19e:	d11f      	bne.n	801a1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a1a0:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801a1a4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a1a8:	459c      	cmp	ip, r3
 801a1aa:	d119      	bne.n	801a1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a1ac:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801a1b0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801a1b4:	19d8      	adds	r0, r3, r7
 801a1b6:	b200      	sxth	r0, r0
 801a1b8:	4288      	cmp	r0, r1
 801a1ba:	d109      	bne.n	801a1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801a1bc:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801a1c0:	4413      	add	r3, r2
 801a1c2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	9801      	ldr	r0, [sp, #4]
 801a1ca:	f7ff fd2b 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a1ce:	e003      	b.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a1d0:	4411      	add	r1, r2
 801a1d2:	b209      	sxth	r1, r1
 801a1d4:	42b9      	cmp	r1, r7
 801a1d6:	d0f3      	beq.n	801a1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801a1d8:	3d01      	subs	r5, #1
 801a1da:	3c08      	subs	r4, #8
 801a1dc:	b2ad      	uxth	r5, r5
 801a1de:	e7d3      	b.n	801a188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801a1e0:	42b9      	cmp	r1, r7
 801a1e2:	d1f9      	bne.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a1e4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801a1e8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a1ec:	4299      	cmp	r1, r3
 801a1ee:	d1f3      	bne.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a1f0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801a1f4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801a1f8:	181f      	adds	r7, r3, r0
 801a1fa:	b23f      	sxth	r7, r7
 801a1fc:	42ba      	cmp	r2, r7
 801a1fe:	d105      	bne.n	801a20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801a200:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801a204:	440b      	add	r3, r1
 801a206:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a20a:	e7dc      	b.n	801a1c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801a20c:	440a      	add	r2, r1
 801a20e:	b212      	sxth	r2, r2
 801a210:	4290      	cmp	r0, r2
 801a212:	d1e1      	bne.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a214:	e7f6      	b.n	801a204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801a216:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801a21a:	2e07      	cmp	r6, #7
 801a21c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a220:	d812      	bhi.n	801a248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801a222:	1c75      	adds	r5, r6, #1
 801a224:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801a228:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801a22c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801a230:	9d01      	ldr	r5, [sp, #4]
 801a232:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a236:	442c      	add	r4, r5
 801a238:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801a23c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a240:	8061      	strh	r1, [r4, #2]
 801a242:	80a2      	strh	r2, [r4, #4]
 801a244:	80e3      	strh	r3, [r4, #6]
 801a246:	e581      	b.n	8019d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a248:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801a24c:	3e01      	subs	r6, #1
 801a24e:	445c      	add	r4, fp
 801a250:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801a254:	f04f 37ff 	mov.w	r7, #4294967295
 801a258:	2500      	movs	r5, #0
 801a25a:	9305      	str	r3, [sp, #20]
 801a25c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a260:	1e72      	subs	r2, r6, #1
 801a262:	9302      	str	r3, [sp, #8]
 801a264:	4691      	mov	r9, r2
 801a266:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a26a:	9304      	str	r3, [sp, #16]
 801a26c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801a270:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a274:	6818      	ldr	r0, [r3, #0]
 801a276:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a27a:	9207      	str	r2, [sp, #28]
 801a27c:	bf16      	itet	ne
 801a27e:	9905      	ldrne	r1, [sp, #20]
 801a280:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a284:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a288:	9306      	str	r3, [sp, #24]
 801a28a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a28e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a292:	fb18 f801 	smulbb	r8, r8, r1
 801a296:	6859      	ldr	r1, [r3, #4]
 801a298:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a29c:	4671      	mov	r1, lr
 801a29e:	a80c      	add	r0, sp, #48	@ 0x30
 801a2a0:	f7f8 fa7c 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a2a4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a2a8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a2ac:	f04f 0c08 	mov.w	ip, #8
 801a2b0:	9b04      	ldr	r3, [sp, #16]
 801a2b2:	9a02      	ldr	r2, [sp, #8]
 801a2b4:	fb10 f001 	smulbb	r0, r0, r1
 801a2b8:	fb02 8803 	mla	r8, r2, r3, r8
 801a2bc:	eba0 0108 	sub.w	r1, r0, r8
 801a2c0:	fb90 f0fc 	sdiv	r0, r0, ip
 801a2c4:	4288      	cmp	r0, r1
 801a2c6:	dc20      	bgt.n	801a30a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a2c8:	4551      	cmp	r1, sl
 801a2ca:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a2ce:	da03      	bge.n	801a2d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801a2d0:	b1d9      	cbz	r1, 801a30a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a2d2:	468a      	mov	sl, r1
 801a2d4:	464f      	mov	r7, r9
 801a2d6:	4635      	mov	r5, r6
 801a2d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a2dc:	f119 0f02 	cmn.w	r9, #2
 801a2e0:	d1c6      	bne.n	801a270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a2e2:	4616      	mov	r6, r2
 801a2e4:	3201      	adds	r2, #1
 801a2e6:	f1a4 0408 	sub.w	r4, r4, #8
 801a2ea:	d1b7      	bne.n	801a25c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a2ec:	9b01      	ldr	r3, [sp, #4]
 801a2ee:	b2ac      	uxth	r4, r5
 801a2f0:	00ed      	lsls	r5, r5, #3
 801a2f2:	1958      	adds	r0, r3, r5
 801a2f4:	1c7b      	adds	r3, r7, #1
 801a2f6:	d10b      	bne.n	801a310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801a2f8:	4601      	mov	r1, r0
 801a2fa:	9803      	ldr	r0, [sp, #12]
 801a2fc:	f7f8 fa4e 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a300:	4621      	mov	r1, r4
 801a302:	9801      	ldr	r0, [sp, #4]
 801a304:	f7ff fc8e 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a308:	e4b6      	b.n	8019c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a30a:	464f      	mov	r7, r9
 801a30c:	4635      	mov	r5, r6
 801a30e:	e7ed      	b.n	801a2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801a310:	9b01      	ldr	r3, [sp, #4]
 801a312:	00ff      	lsls	r7, r7, #3
 801a314:	445d      	add	r5, fp
 801a316:	19d9      	adds	r1, r3, r7
 801a318:	445f      	add	r7, fp
 801a31a:	f7f8 fa3f 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a31e:	9b03      	ldr	r3, [sp, #12]
 801a320:	cb03      	ldmia	r3!, {r0, r1}
 801a322:	9b03      	ldr	r3, [sp, #12]
 801a324:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a328:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a32c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a330:	6869      	ldr	r1, [r5, #4]
 801a332:	c303      	stmia	r3!, {r0, r1}
 801a334:	e7e4      	b.n	801a300 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801a336:	bf00      	nop

0801a338 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a33c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a340:	b09b      	sub	sp, #108	@ 0x6c
 801a342:	4604      	mov	r4, r0
 801a344:	4630      	mov	r0, r6
 801a346:	f7f7 feea 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a34a:	4605      	mov	r5, r0
 801a34c:	b948      	cbnz	r0, 801a362 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a34e:	6823      	ldr	r3, [r4, #0]
 801a350:	4620      	mov	r0, r4
 801a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a354:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a358:	4798      	blx	r3
 801a35a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a35e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a362:	4bc5      	ldr	r3, [pc, #788]	@ (801a678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d03f      	beq.n	801a3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a36a:	4dc4      	ldr	r5, [pc, #784]	@ (801a67c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801a36c:	4628      	mov	r0, r5
 801a36e:	f7f7 fed6 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a372:	4606      	mov	r6, r0
 801a374:	2800      	cmp	r0, #0
 801a376:	d138      	bne.n	801a3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a378:	4628      	mov	r0, r5
 801a37a:	f7ff f971 	bl	8019660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a37e:	6823      	ldr	r3, [r4, #0]
 801a380:	6829      	ldr	r1, [r5, #0]
 801a382:	4620      	mov	r0, r4
 801a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a386:	686a      	ldr	r2, [r5, #4]
 801a388:	4798      	blx	r3
 801a38a:	802e      	strh	r6, [r5, #0]
 801a38c:	806e      	strh	r6, [r5, #2]
 801a38e:	80ae      	strh	r6, [r5, #4]
 801a390:	80ee      	strh	r6, [r5, #6]
 801a392:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801a396:	4dba      	ldr	r5, [pc, #744]	@ (801a680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801a398:	4640      	mov	r0, r8
 801a39a:	f7ff fbe8 	bl	8019b6e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a39e:	882e      	ldrh	r6, [r5, #0]
 801a3a0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a3a4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a3a8:	4633      	mov	r3, r6
 801a3aa:	42bb      	cmp	r3, r7
 801a3ac:	d224      	bcs.n	801a3f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a3ae:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801a3b2:	2907      	cmp	r1, #7
 801a3b4:	d816      	bhi.n	801a3e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801a3b6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a3ba:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a3be:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a3c2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a3c6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a3ca:	1c4a      	adds	r2, r1, #1
 801a3cc:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801a3d0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801a3d4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801a3d8:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a3dc:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a3e0:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	e7df      	b.n	801a3aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801a3ea:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d1cf      	bne.n	801a392 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801a3f2:	b01b      	add	sp, #108	@ 0x6c
 801a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3f8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a3fc:	42b3      	cmp	r3, r6
 801a3fe:	d90c      	bls.n	801a41a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801a400:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a404:	6822      	ldr	r2, [r4, #0]
 801a406:	3601      	adds	r6, #1
 801a408:	4620      	mov	r0, r4
 801a40a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a40c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a410:	b2b6      	uxth	r6, r6
 801a412:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a416:	47b8      	blx	r7
 801a418:	e7ee      	b.n	801a3f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a41a:	4a9a      	ldr	r2, [pc, #616]	@ (801a684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a41c:	6813      	ldr	r3, [r2, #0]
 801a41e:	4691      	mov	r9, r2
 801a420:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801a424:	2b01      	cmp	r3, #1
 801a426:	f040 80e0 	bne.w	801a5ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801a42a:	8829      	ldrh	r1, [r5, #0]
 801a42c:	2600      	movs	r6, #0
 801a42e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a432:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801a436:	33ae      	adds	r3, #174	@ 0xae
 801a438:	428f      	cmp	r7, r1
 801a43a:	f103 0308 	add.w	r3, r3, #8
 801a43e:	dd0a      	ble.n	801a456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801a440:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801a444:	3101      	adds	r1, #1
 801a446:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801a44a:	4402      	add	r2, r0
 801a44c:	b212      	sxth	r2, r2
 801a44e:	4296      	cmp	r6, r2
 801a450:	bfb8      	it	lt
 801a452:	4616      	movlt	r6, r2
 801a454:	e7f0      	b.n	801a438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801a456:	4b8c      	ldr	r3, [pc, #560]	@ (801a688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a458:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801a684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801a45c:	881b      	ldrh	r3, [r3, #0]
 801a45e:	2b0f      	cmp	r3, #15
 801a460:	bf8c      	ite	hi
 801a462:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801a466:	f04f 0b01 	movls.w	fp, #1
 801a46a:	2300      	movs	r3, #0
 801a46c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a470:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801a474:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801a478:	4b82      	ldr	r3, [pc, #520]	@ (801a684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a47a:	4438      	add	r0, r7
 801a47c:	b207      	sxth	r7, r0
 801a47e:	6818      	ldr	r0, [r3, #0]
 801a480:	42b7      	cmp	r7, r6
 801a482:	6803      	ldr	r3, [r0, #0]
 801a484:	f280 8083 	bge.w	801a58e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a488:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a48c:	4798      	blx	r3
 801a48e:	eb07 030b 	add.w	r3, r7, fp
 801a492:	4298      	cmp	r0, r3
 801a494:	da07      	bge.n	801a4a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a496:	42b0      	cmp	r0, r6
 801a498:	da05      	bge.n	801a4a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a49a:	4287      	cmp	r7, r0
 801a49c:	dd6c      	ble.n	801a578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a49e:	2f00      	cmp	r7, #0
 801a4a0:	dd6a      	ble.n	801a578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a4a2:	4630      	mov	r0, r6
 801a4a4:	e004      	b.n	801a4b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801a4a6:	4287      	cmp	r7, r0
 801a4a8:	dcfb      	bgt.n	801a4a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801a4aa:	42b0      	cmp	r0, r6
 801a4ac:	bfa8      	it	ge
 801a4ae:	4630      	movge	r0, r6
 801a4b0:	4b76      	ldr	r3, [pc, #472]	@ (801a68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a4b2:	1bc0      	subs	r0, r0, r7
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4be:	882f      	ldrh	r7, [r5, #0]
 801a4c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a4c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a4c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a4cc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a4d0:	42bb      	cmp	r3, r7
 801a4d2:	d9cd      	bls.n	801a470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801a4d4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a4d8:	ab07      	add	r3, sp, #28
 801a4da:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a4de:	6851      	ldr	r1, [r2, #4]
 801a4e0:	c303      	stmia	r3!, {r0, r1}
 801a4e2:	a905      	add	r1, sp, #20
 801a4e4:	a807      	add	r0, sp, #28
 801a4e6:	f7ff f9aa 	bl	801983e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a4ea:	2800      	cmp	r0, #0
 801a4ec:	d04c      	beq.n	801a588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a4ee:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a4f2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a4f6:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801a4fa:	4686      	mov	lr, r0
 801a4fc:	4290      	cmp	r0, r2
 801a4fe:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a502:	4450      	add	r0, sl
 801a504:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801a508:	bfb8      	it	lt
 801a50a:	4696      	movlt	lr, r2
 801a50c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a510:	4452      	add	r2, sl
 801a512:	b280      	uxth	r0, r0
 801a514:	4299      	cmp	r1, r3
 801a516:	468c      	mov	ip, r1
 801a518:	b292      	uxth	r2, r2
 801a51a:	9302      	str	r3, [sp, #8]
 801a51c:	bfb8      	it	lt
 801a51e:	469c      	movlt	ip, r3
 801a520:	b203      	sxth	r3, r0
 801a522:	fa0f fa82 	sxth.w	sl, r2
 801a526:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a52a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a52e:	4553      	cmp	r3, sl
 801a530:	bfb8      	it	lt
 801a532:	4602      	movlt	r2, r0
 801a534:	9b02      	ldr	r3, [sp, #8]
 801a536:	eba2 020e 	sub.w	r2, r2, lr
 801a53a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a53e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801a542:	4411      	add	r1, r2
 801a544:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a548:	4413      	add	r3, r2
 801a54a:	b289      	uxth	r1, r1
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	b208      	sxth	r0, r1
 801a550:	b21a      	sxth	r2, r3
 801a552:	4290      	cmp	r0, r2
 801a554:	bfb8      	it	lt
 801a556:	460b      	movlt	r3, r1
 801a558:	eba3 030c 	sub.w	r3, r3, ip
 801a55c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a560:	a807      	add	r0, sp, #28
 801a562:	f7f7 fddc 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a566:	b920      	cbnz	r0, 801a572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801a568:	6823      	ldr	r3, [r4, #0]
 801a56a:	a907      	add	r1, sp, #28
 801a56c:	4620      	mov	r0, r4
 801a56e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a570:	4798      	blx	r3
 801a572:	3701      	adds	r7, #1
 801a574:	b2bf      	uxth	r7, r7
 801a576:	e7a9      	b.n	801a4cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801a578:	f8d9 0000 	ldr.w	r0, [r9]
 801a57c:	2101      	movs	r1, #1
 801a57e:	6803      	ldr	r3, [r0, #0]
 801a580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a584:	4798      	blx	r3
 801a586:	e773      	b.n	801a470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801a588:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801a58c:	e7e8      	b.n	801a560 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801a58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a590:	4798      	blx	r3
 801a592:	4b3f      	ldr	r3, [pc, #252]	@ (801a690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a594:	781b      	ldrb	r3, [r3, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	f43f af2b 	beq.w	801a3f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a59c:	2300      	movs	r3, #0
 801a59e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801a5a2:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a5a6:	882b      	ldrh	r3, [r5, #0]
 801a5a8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801a5ac:	42ab      	cmp	r3, r5
 801a5ae:	f4bf af20 	bcs.w	801a3f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a5b2:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a5b6:	2907      	cmp	r1, #7
 801a5b8:	d814      	bhi.n	801a5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801a5ba:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801a5be:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801a5c2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801a5c6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801a5ca:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801a5ce:	1c4a      	adds	r2, r1, #1
 801a5d0:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a5d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801a5d8:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801a5dc:	f8a2 c002 	strh.w	ip, [r2, #2]
 801a5e0:	8097      	strh	r7, [r2, #4]
 801a5e2:	80d6      	strh	r6, [r2, #6]
 801a5e4:	3301      	adds	r3, #1
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	e7e0      	b.n	801a5ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801a5ea:	2b02      	cmp	r3, #2
 801a5ec:	f040 8133 	bne.w	801a856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801a5f0:	4b28      	ldr	r3, [pc, #160]	@ (801a694 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a5f2:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a5f6:	781b      	ldrb	r3, [r3, #0]
 801a5f8:	2b01      	cmp	r3, #1
 801a5fa:	f000 8098 	beq.w	801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a5fe:	882a      	ldrh	r2, [r5, #0]
 801a600:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a604:	3201      	adds	r2, #1
 801a606:	b292      	uxth	r2, r2
 801a608:	2900      	cmp	r1, #0
 801a60a:	d0c2      	beq.n	801a592 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a60c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801a610:	4694      	mov	ip, r2
 801a612:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801a616:	f04f 0900 	mov.w	r9, #0
 801a61a:	441e      	add	r6, r3
 801a61c:	b236      	sxth	r6, r6
 801a61e:	fa1f f38c 	uxth.w	r3, ip
 801a622:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801a626:	4299      	cmp	r1, r3
 801a628:	f240 80be 	bls.w	801a7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801a62c:	4427      	add	r7, r4
 801a62e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a632:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a636:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a63a:	4283      	cmp	r3, r0
 801a63c:	f340 80a0 	ble.w	801a780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801a640:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801a644:	46e1      	mov	r9, ip
 801a646:	4406      	add	r6, r0
 801a648:	b236      	sxth	r6, r6
 801a64a:	429e      	cmp	r6, r3
 801a64c:	bfa8      	it	ge
 801a64e:	461e      	movge	r6, r3
 801a650:	f10c 0c01 	add.w	ip, ip, #1
 801a654:	e7e3      	b.n	801a61e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801a656:	d10a      	bne.n	801a66e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801a658:	4562      	cmp	r2, ip
 801a65a:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801a65e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a662:	bfb8      	it	lt
 801a664:	4662      	movlt	r2, ip
 801a666:	4288      	cmp	r0, r1
 801a668:	bfb8      	it	lt
 801a66a:	461f      	movlt	r7, r3
 801a66c:	e086      	b.n	801a77c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801a66e:	428a      	cmp	r2, r1
 801a670:	bfb8      	it	lt
 801a672:	460a      	movlt	r2, r1
 801a674:	e082      	b.n	801a77c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801a676:	bf00      	nop
 801a678:	24028560 	.word	0x24028560
 801a67c:	2402856c 	.word	0x2402856c
 801a680:	2400007c 	.word	0x2400007c
 801a684:	24028520 	.word	0x24028520
 801a688:	24028516 	.word	0x24028516
 801a68c:	24028514 	.word	0x24028514
 801a690:	2402851e 	.word	0x2402851e
 801a694:	24028518 	.word	0x24028518
 801a698:	19a1      	adds	r1, r4, r6
 801a69a:	ab07      	add	r3, sp, #28
 801a69c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a6a0:	6849      	ldr	r1, [r1, #4]
 801a6a2:	c303      	stmia	r3!, {r0, r1}
 801a6a4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a6a8:	a807      	add	r0, sp, #28
 801a6aa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a6ae:	2b13      	cmp	r3, #19
 801a6b0:	440b      	add	r3, r1
 801a6b2:	bfd8      	it	le
 801a6b4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a6b8:	1a9b      	subs	r3, r3, r2
 801a6ba:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a6be:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a6c2:	f7fe ffe7 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6c6:	a807      	add	r0, sp, #28
 801a6c8:	f7f7 fd29 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a6cc:	bb78      	cbnz	r0, 801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a6ce:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801a6d2:	4426      	add	r6, r4
 801a6d4:	f8d9 0000 	ldr.w	r0, [r9]
 801a6d8:	f1bc 0f14 	cmp.w	ip, #20
 801a6dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a6e0:	f8d0 e000 	ldr.w	lr, [r0]
 801a6e4:	bfa8      	it	ge
 801a6e6:	f04f 0c14 	movge.w	ip, #20
 801a6ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a6ee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a6f2:	fa1f fc8c 	uxth.w	ip, ip
 801a6f6:	f8cd c000 	str.w	ip, [sp]
 801a6fa:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801a6fe:	47d8      	blx	fp
 801a700:	4683      	mov	fp, r0
 801a702:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a706:	a807      	add	r0, sp, #28
 801a708:	f7fe ffaa 	bl	8019660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a70c:	6823      	ldr	r3, [r4, #0]
 801a70e:	4620      	mov	r0, r4
 801a710:	a907      	add	r1, sp, #28
 801a712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a714:	4798      	blx	r3
 801a716:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a71a:	eba0 000b 	sub.w	r0, r0, fp
 801a71e:	b200      	sxth	r0, r0
 801a720:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801a724:	b918      	cbnz	r0, 801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a726:	b2b9      	uxth	r1, r7
 801a728:	4650      	mov	r0, sl
 801a72a:	f7ff fa7b 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a72e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a732:	f1bb 0f00 	cmp.w	fp, #0
 801a736:	f43f af2c 	beq.w	801a592 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a73a:	882b      	ldrh	r3, [r5, #0]
 801a73c:	2700      	movs	r7, #0
 801a73e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a742:	3301      	adds	r3, #1
 801a744:	b29b      	uxth	r3, r3
 801a746:	b299      	uxth	r1, r3
 801a748:	00fe      	lsls	r6, r7, #3
 801a74a:	458b      	cmp	fp, r1
 801a74c:	d9a4      	bls.n	801a698 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801a74e:	4426      	add	r6, r4
 801a750:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a754:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801a758:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a75c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a760:	4408      	add	r0, r1
 801a762:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a766:	4461      	add	r1, ip
 801a768:	b200      	sxth	r0, r0
 801a76a:	b209      	sxth	r1, r1
 801a76c:	4288      	cmp	r0, r1
 801a76e:	f6bf af72 	bge.w	801a656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a772:	4584      	cmp	ip, r0
 801a774:	4662      	mov	r2, ip
 801a776:	461f      	mov	r7, r3
 801a778:	bfb8      	it	lt
 801a77a:	4602      	movlt	r2, r0
 801a77c:	3301      	adds	r3, #1
 801a77e:	e7e2      	b.n	801a746 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801a780:	d10e      	bne.n	801a7a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801a782:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801a786:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801a78a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801a78e:	4473      	add	r3, lr
 801a790:	b21b      	sxth	r3, r3
 801a792:	429e      	cmp	r6, r3
 801a794:	bfa8      	it	ge
 801a796:	461e      	movge	r6, r3
 801a798:	4287      	cmp	r7, r0
 801a79a:	bfb8      	it	lt
 801a79c:	46e1      	movlt	r9, ip
 801a79e:	e757      	b.n	801a650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a7a0:	4286      	cmp	r6, r0
 801a7a2:	bfa8      	it	ge
 801a7a4:	4606      	movge	r6, r0
 801a7a6:	e753      	b.n	801a650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a7a8:	eb0a 0007 	add.w	r0, sl, r7
 801a7ac:	4427      	add	r7, r4
 801a7ae:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801a7b2:	f1bb 0f13 	cmp.w	fp, #19
 801a7b6:	bfdc      	itt	le
 801a7b8:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801a7bc:	445e      	addle	r6, fp
 801a7be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a7c2:	bfd8      	it	le
 801a7c4:	b236      	sxthle	r6, r6
 801a7c6:	f7f7 fcaa 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7ca:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a7ce:	2800      	cmp	r0, #0
 801a7d0:	f47f af1a 	bne.w	801a608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801a7d4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801a7d8:	fa1f fb8b 	uxth.w	fp, fp
 801a7dc:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a7e0:	1ab6      	subs	r6, r6, r2
 801a7e2:	4829      	ldr	r0, [pc, #164]	@ (801a888 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801a7e4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801a7e8:	2e14      	cmp	r6, #20
 801a7ea:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801a7ee:	6800      	ldr	r0, [r0, #0]
 801a7f0:	bfa8      	it	ge
 801a7f2:	2614      	movge	r6, #20
 801a7f4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a7f8:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a7fc:	b289      	uxth	r1, r1
 801a7fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a802:	b2b6      	uxth	r6, r6
 801a804:	f8d0 c000 	ldr.w	ip, [r0]
 801a808:	b292      	uxth	r2, r2
 801a80a:	455e      	cmp	r6, fp
 801a80c:	bf94      	ite	ls
 801a80e:	9600      	strls	r6, [sp, #0]
 801a810:	f8cd b000 	strhi.w	fp, [sp]
 801a814:	b29b      	uxth	r3, r3
 801a816:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801a81a:	47b0      	blx	r6
 801a81c:	6823      	ldr	r3, [r4, #0]
 801a81e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a822:	a907      	add	r1, sp, #28
 801a824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a826:	4620      	mov	r0, r4
 801a828:	4798      	blx	r3
 801a82a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801a82e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a832:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801a836:	1a5b      	subs	r3, r3, r1
 801a838:	440a      	add	r2, r1
 801a83a:	b21b      	sxth	r3, r3
 801a83c:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801a840:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a844:	2b00      	cmp	r3, #0
 801a846:	f47f aeda 	bne.w	801a5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a84a:	fa1f f189 	uxth.w	r1, r9
 801a84e:	4650      	mov	r0, sl
 801a850:	f7ff f9e8 	bl	8019c24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a854:	e6d3      	b.n	801a5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a856:	882e      	ldrh	r6, [r5, #0]
 801a858:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a85c:	42b3      	cmp	r3, r6
 801a85e:	f67f ae98 	bls.w	801a592 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a862:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801a866:	ab07      	add	r3, sp, #28
 801a868:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a86c:	6851      	ldr	r1, [r2, #4]
 801a86e:	c303      	stmia	r3!, {r0, r1}
 801a870:	a807      	add	r0, sp, #28
 801a872:	f7f7 fc54 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a876:	b920      	cbnz	r0, 801a882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801a878:	6823      	ldr	r3, [r4, #0]
 801a87a:	a907      	add	r1, sp, #28
 801a87c:	4620      	mov	r0, r4
 801a87e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a880:	4798      	blx	r3
 801a882:	3601      	adds	r6, #1
 801a884:	b2b6      	uxth	r6, r6
 801a886:	e7e7      	b.n	801a858 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801a888:	24028520 	.word	0x24028520

0801a88c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a88c:	4b03      	ldr	r3, [pc, #12]	@ (801a89c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a88e:	2200      	movs	r2, #0
 801a890:	801a      	strh	r2, [r3, #0]
 801a892:	805a      	strh	r2, [r3, #2]
 801a894:	809a      	strh	r2, [r3, #4]
 801a896:	80da      	strh	r2, [r3, #6]
 801a898:	4770      	bx	lr
 801a89a:	bf00      	nop
 801a89c:	2402856c 	.word	0x2402856c

0801a8a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a4:	b09d      	sub	sp, #116	@ 0x74
 801a8a6:	4606      	mov	r6, r0
 801a8a8:	4614      	mov	r4, r2
 801a8aa:	468a      	mov	sl, r1
 801a8ac:	a803      	add	r0, sp, #12
 801a8ae:	461d      	mov	r5, r3
 801a8b0:	f001 f9ad 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801a8b4:	6833      	ldr	r3, [r6, #0]
 801a8b6:	4630      	mov	r0, r6
 801a8b8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801a8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8be:	4798      	blx	r3
 801a8c0:	6833      	ldr	r3, [r6, #0]
 801a8c2:	4607      	mov	r7, r0
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8c8:	4798      	blx	r3
 801a8ca:	462a      	mov	r2, r5
 801a8cc:	2500      	movs	r5, #0
 801a8ce:	4621      	mov	r1, r4
 801a8d0:	9000      	str	r0, [sp, #0]
 801a8d2:	463b      	mov	r3, r7
 801a8d4:	462c      	mov	r4, r5
 801a8d6:	46a9      	mov	r9, r5
 801a8d8:	46a8      	mov	r8, r5
 801a8da:	a803      	add	r0, sp, #12
 801a8dc:	f001 f9f2 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	9302      	str	r3, [sp, #8]
 801a8e4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a8e8:	429c      	cmp	r4, r3
 801a8ea:	d002      	beq.n	801a8f2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a8ec:	455c      	cmp	r4, fp
 801a8ee:	bf18      	it	ne
 801a8f0:	4625      	movne	r5, r4
 801a8f2:	ab02      	add	r3, sp, #8
 801a8f4:	4632      	mov	r2, r6
 801a8f6:	4651      	mov	r1, sl
 801a8f8:	a803      	add	r0, sp, #12
 801a8fa:	f001 fce9 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8fe:	4604      	mov	r4, r0
 801a900:	b108      	cbz	r0, 801a906 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a902:	280a      	cmp	r0, #10
 801a904:	d10a      	bne.n	801a91c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a906:	45c1      	cmp	r9, r8
 801a908:	bf38      	it	cc
 801a90a:	46c1      	movcc	r9, r8
 801a90c:	f04f 0800 	mov.w	r8, #0
 801a910:	2c00      	cmp	r4, #0
 801a912:	d1e5      	bne.n	801a8e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a914:	4648      	mov	r0, r9
 801a916:	b01d      	add	sp, #116	@ 0x74
 801a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a91c:	9a02      	ldr	r2, [sp, #8]
 801a91e:	2a00      	cmp	r2, #0
 801a920:	d0de      	beq.n	801a8e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a922:	7b57      	ldrb	r7, [r2, #13]
 801a924:	4629      	mov	r1, r5
 801a926:	6833      	ldr	r3, [r6, #0]
 801a928:	007f      	lsls	r7, r7, #1
 801a92a:	8894      	ldrh	r4, [r2, #4]
 801a92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a92e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801a932:	7a97      	ldrb	r7, [r2, #10]
 801a934:	4307      	orrs	r7, r0
 801a936:	4630      	mov	r0, r6
 801a938:	4798      	blx	r3
 801a93a:	4438      	add	r0, r7
 801a93c:	4480      	add	r8, r0
 801a93e:	fa1f f888 	uxth.w	r8, r8
 801a942:	e7e5      	b.n	801a910 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a944 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a944:	b508      	push	{r3, lr}
 801a946:	6803      	ldr	r3, [r0, #0]
 801a948:	68db      	ldr	r3, [r3, #12]
 801a94a:	4798      	blx	r3
 801a94c:	b128      	cbz	r0, 801a95a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a94e:	7b43      	ldrb	r3, [r0, #13]
 801a950:	7a80      	ldrb	r0, [r0, #10]
 801a952:	005b      	lsls	r3, r3, #1
 801a954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a958:	4318      	orrs	r0, r3
 801a95a:	bd08      	pop	{r3, pc}

0801a95c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a95c:	b40e      	push	{r1, r2, r3}
 801a95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a960:	b09e      	sub	sp, #120	@ 0x78
 801a962:	4605      	mov	r5, r0
 801a964:	ab23      	add	r3, sp, #140	@ 0x8c
 801a966:	a805      	add	r0, sp, #20
 801a968:	f853 4b04 	ldr.w	r4, [r3], #4
 801a96c:	9303      	str	r3, [sp, #12]
 801a96e:	f001 f94e 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801a972:	682b      	ldr	r3, [r5, #0]
 801a974:	4628      	mov	r0, r5
 801a976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a978:	4798      	blx	r3
 801a97a:	682b      	ldr	r3, [r5, #0]
 801a97c:	4606      	mov	r6, r0
 801a97e:	4628      	mov	r0, r5
 801a980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a982:	4798      	blx	r3
 801a984:	4633      	mov	r3, r6
 801a986:	4621      	mov	r1, r4
 801a988:	ae1e      	add	r6, sp, #120	@ 0x78
 801a98a:	2400      	movs	r4, #0
 801a98c:	9000      	str	r0, [sp, #0]
 801a98e:	9a03      	ldr	r2, [sp, #12]
 801a990:	a805      	add	r0, sp, #20
 801a992:	f001 f997 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a996:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a99a:	462a      	mov	r2, r5
 801a99c:	4633      	mov	r3, r6
 801a99e:	4621      	mov	r1, r4
 801a9a0:	a805      	add	r0, sp, #20
 801a9a2:	f001 fc95 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a9a6:	b300      	cbz	r0, 801a9ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a9a8:	280a      	cmp	r0, #10
 801a9aa:	d01a      	beq.n	801a9e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a9ac:	9f04      	ldr	r7, [sp, #16]
 801a9ae:	b1c7      	cbz	r7, 801a9e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a9b0:	7b78      	ldrb	r0, [r7, #13]
 801a9b2:	7a3b      	ldrb	r3, [r7, #8]
 801a9b4:	00c1      	lsls	r1, r0, #3
 801a9b6:	88ea      	ldrh	r2, [r5, #6]
 801a9b8:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a9bc:	4319      	orrs	r1, r3
 801a9be:	0643      	lsls	r3, r0, #25
 801a9c0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a9c4:	bf48      	it	mi
 801a9c6:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801a9ca:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a9ce:	bf48      	it	mi
 801a9d0:	b219      	sxthmi	r1, r3
 801a9d2:	79fb      	ldrb	r3, [r7, #7]
 801a9d4:	4303      	orrs	r3, r0
 801a9d6:	4413      	add	r3, r2
 801a9d8:	1a5b      	subs	r3, r3, r1
 801a9da:	b21b      	sxth	r3, r3
 801a9dc:	429c      	cmp	r4, r3
 801a9de:	bfb8      	it	lt
 801a9e0:	461c      	movlt	r4, r3
 801a9e2:	4633      	mov	r3, r6
 801a9e4:	462a      	mov	r2, r5
 801a9e6:	2100      	movs	r1, #0
 801a9e8:	e7da      	b.n	801a9a0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a9ea:	b2a0      	uxth	r0, r4
 801a9ec:	b01e      	add	sp, #120	@ 0x78
 801a9ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a9f2:	b003      	add	sp, #12
 801a9f4:	4770      	bx	lr

0801a9f6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a9f6:	7a43      	ldrb	r3, [r0, #9]
 801a9f8:	8880      	ldrh	r0, [r0, #4]
 801a9fa:	4418      	add	r0, r3
 801a9fc:	b280      	uxth	r0, r0
 801a9fe:	4770      	bx	lr

0801aa00 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801aa00:	6803      	ldr	r3, [r0, #0]
 801aa02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa04:	4718      	bx	r3

0801aa06 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801aa06:	b40e      	push	{r1, r2, r3}
 801aa08:	b570      	push	{r4, r5, r6, lr}
 801aa0a:	b09d      	sub	sp, #116	@ 0x74
 801aa0c:	4604      	mov	r4, r0
 801aa0e:	ab21      	add	r3, sp, #132	@ 0x84
 801aa10:	a803      	add	r0, sp, #12
 801aa12:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa16:	9302      	str	r3, [sp, #8]
 801aa18:	f001 f8f9 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801aa1c:	6823      	ldr	r3, [r4, #0]
 801aa1e:	4620      	mov	r0, r4
 801aa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa22:	4798      	blx	r3
 801aa24:	6823      	ldr	r3, [r4, #0]
 801aa26:	4606      	mov	r6, r0
 801aa28:	4620      	mov	r0, r4
 801aa2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa2c:	2401      	movs	r4, #1
 801aa2e:	4798      	blx	r3
 801aa30:	4633      	mov	r3, r6
 801aa32:	9000      	str	r0, [sp, #0]
 801aa34:	4629      	mov	r1, r5
 801aa36:	9a02      	ldr	r2, [sp, #8]
 801aa38:	a803      	add	r0, sp, #12
 801aa3a:	f001 f943 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa3e:	a803      	add	r0, sp, #12
 801aa40:	f001 fd12 	bl	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa44:	b2a3      	uxth	r3, r4
 801aa46:	b138      	cbz	r0, 801aa58 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801aa48:	280a      	cmp	r0, #10
 801aa4a:	a803      	add	r0, sp, #12
 801aa4c:	bf04      	itt	eq
 801aa4e:	3301      	addeq	r3, #1
 801aa50:	b21c      	sxtheq	r4, r3
 801aa52:	f001 fd09 	bl	801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa56:	e7f5      	b.n	801aa44 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801aa58:	4618      	mov	r0, r3
 801aa5a:	b01d      	add	sp, #116	@ 0x74
 801aa5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa60:	b003      	add	sp, #12
 801aa62:	4770      	bx	lr

0801aa64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801aa64:	b40e      	push	{r1, r2, r3}
 801aa66:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa68:	b09e      	sub	sp, #120	@ 0x78
 801aa6a:	4604      	mov	r4, r0
 801aa6c:	ab23      	add	r3, sp, #140	@ 0x8c
 801aa6e:	a805      	add	r0, sp, #20
 801aa70:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa74:	9303      	str	r3, [sp, #12]
 801aa76:	f001 f8ca 	bl	801bc0e <_ZN8touchgfx12TextProviderC1Ev>
 801aa7a:	6823      	ldr	r3, [r4, #0]
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa80:	4798      	blx	r3
 801aa82:	6823      	ldr	r3, [r4, #0]
 801aa84:	4606      	mov	r6, r0
 801aa86:	4620      	mov	r0, r4
 801aa88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa8a:	4798      	blx	r3
 801aa8c:	4633      	mov	r3, r6
 801aa8e:	4629      	mov	r1, r5
 801aa90:	9000      	str	r0, [sp, #0]
 801aa92:	9a03      	ldr	r2, [sp, #12]
 801aa94:	a805      	add	r0, sp, #20
 801aa96:	f001 f915 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa9a:	ad1e      	add	r5, sp, #120	@ 0x78
 801aa9c:	2100      	movs	r1, #0
 801aa9e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801aaa2:	4622      	mov	r2, r4
 801aaa4:	a805      	add	r0, sp, #20
 801aaa6:	f845 1d68 	str.w	r1, [r5, #-104]!
 801aaaa:	462b      	mov	r3, r5
 801aaac:	f001 fc10 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aab0:	b1d8      	cbz	r0, 801aaea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801aab2:	280a      	cmp	r0, #10
 801aab4:	d012      	beq.n	801aadc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aab6:	9804      	ldr	r0, [sp, #16]
 801aab8:	b180      	cbz	r0, 801aadc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aaba:	7b47      	ldrb	r7, [r0, #13]
 801aabc:	88e2      	ldrh	r2, [r4, #6]
 801aabe:	00fb      	lsls	r3, r7, #3
 801aac0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801aac4:	7a03      	ldrb	r3, [r0, #8]
 801aac6:	430b      	orrs	r3, r1
 801aac8:	0679      	lsls	r1, r7, #25
 801aaca:	bf44      	itt	mi
 801aacc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801aad0:	b21b      	sxthmi	r3, r3
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	b21b      	sxth	r3, r3
 801aad6:	429e      	cmp	r6, r3
 801aad8:	bfa8      	it	ge
 801aada:	461e      	movge	r6, r3
 801aadc:	462b      	mov	r3, r5
 801aade:	4622      	mov	r2, r4
 801aae0:	2100      	movs	r1, #0
 801aae2:	a805      	add	r0, sp, #20
 801aae4:	f001 fbf4 	bl	801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aae8:	e7e2      	b.n	801aab0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801aaea:	4630      	mov	r0, r6
 801aaec:	b01e      	add	sp, #120	@ 0x78
 801aaee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aaf2:	b003      	add	sp, #12
 801aaf4:	4770      	bx	lr

0801aaf6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801aaf6:	b513      	push	{r0, r1, r4, lr}
 801aaf8:	6803      	ldr	r3, [r0, #0]
 801aafa:	2400      	movs	r4, #0
 801aafc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ab00:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ab04:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ab08:	4669      	mov	r1, sp
 801ab0a:	691b      	ldr	r3, [r3, #16]
 801ab0c:	9400      	str	r4, [sp, #0]
 801ab0e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ab12:	4798      	blx	r3
 801ab14:	b002      	add	sp, #8
 801ab16:	bd10      	pop	{r4, pc}

0801ab18 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ab18:	b538      	push	{r3, r4, r5, lr}
 801ab1a:	680b      	ldr	r3, [r1, #0]
 801ab1c:	460c      	mov	r4, r1
 801ab1e:	4605      	mov	r5, r0
 801ab20:	68db      	ldr	r3, [r3, #12]
 801ab22:	4798      	blx	r3
 801ab24:	6823      	ldr	r3, [r4, #0]
 801ab26:	4620      	mov	r0, r4
 801ab28:	4629      	mov	r1, r5
 801ab2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab2c:	4798      	blx	r3
 801ab2e:	4628      	mov	r0, r5
 801ab30:	bd38      	pop	{r3, r4, r5, pc}

0801ab32 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ab32:	b410      	push	{r4}
 801ab34:	880a      	ldrh	r2, [r1, #0]
 801ab36:	8884      	ldrh	r4, [r0, #4]
 801ab38:	4422      	add	r2, r4
 801ab3a:	800a      	strh	r2, [r1, #0]
 801ab3c:	884a      	ldrh	r2, [r1, #2]
 801ab3e:	88c4      	ldrh	r4, [r0, #6]
 801ab40:	4422      	add	r2, r4
 801ab42:	804a      	strh	r2, [r1, #2]
 801ab44:	6940      	ldr	r0, [r0, #20]
 801ab46:	b120      	cbz	r0, 801ab52 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ab48:	6803      	ldr	r3, [r0, #0]
 801ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab50:	4718      	bx	r3
 801ab52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab56:	4770      	bx	lr

0801ab58 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ab58:	b570      	push	{r4, r5, r6, lr}
 801ab5a:	8882      	ldrh	r2, [r0, #4]
 801ab5c:	460c      	mov	r4, r1
 801ab5e:	880b      	ldrh	r3, [r1, #0]
 801ab60:	4605      	mov	r5, r0
 801ab62:	4413      	add	r3, r2
 801ab64:	800b      	strh	r3, [r1, #0]
 801ab66:	884b      	ldrh	r3, [r1, #2]
 801ab68:	88c2      	ldrh	r2, [r0, #6]
 801ab6a:	4413      	add	r3, r2
 801ab6c:	804b      	strh	r3, [r1, #2]
 801ab6e:	1d01      	adds	r1, r0, #4
 801ab70:	4620      	mov	r0, r4
 801ab72:	f7f7 fa91 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801ab76:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	dd0b      	ble.n	801ab96 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab7e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	dd07      	ble.n	801ab96 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab86:	6968      	ldr	r0, [r5, #20]
 801ab88:	b128      	cbz	r0, 801ab96 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab8a:	6803      	ldr	r3, [r0, #0]
 801ab8c:	4621      	mov	r1, r4
 801ab8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab94:	4718      	bx	r3
 801ab96:	bd70      	pop	{r4, r5, r6, pc}

0801ab98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ab98:	b570      	push	{r4, r5, r6, lr}
 801ab9a:	8882      	ldrh	r2, [r0, #4]
 801ab9c:	460c      	mov	r4, r1
 801ab9e:	880b      	ldrh	r3, [r1, #0]
 801aba0:	4605      	mov	r5, r0
 801aba2:	4413      	add	r3, r2
 801aba4:	800b      	strh	r3, [r1, #0]
 801aba6:	884b      	ldrh	r3, [r1, #2]
 801aba8:	88c2      	ldrh	r2, [r0, #6]
 801abaa:	4413      	add	r3, r2
 801abac:	804b      	strh	r3, [r1, #2]
 801abae:	1d01      	adds	r1, r0, #4
 801abb0:	4620      	mov	r0, r4
 801abb2:	f7f7 fa71 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801abb6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	dd19      	ble.n	801abf2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801abbe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	dd15      	ble.n	801abf2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801abc6:	6968      	ldr	r0, [r5, #20]
 801abc8:	b128      	cbz	r0, 801abd6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801abca:	6803      	ldr	r3, [r0, #0]
 801abcc:	4621      	mov	r1, r4
 801abce:	691b      	ldr	r3, [r3, #16]
 801abd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abd4:	4718      	bx	r3
 801abd6:	4b07      	ldr	r3, [pc, #28]	@ (801abf4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	3304      	adds	r3, #4
 801abdc:	429d      	cmp	r5, r3
 801abde:	d108      	bne.n	801abf2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801abe0:	f7fe fec6 	bl	8019970 <_ZN8touchgfx11Application11getInstanceEv>
 801abe4:	6803      	ldr	r3, [r0, #0]
 801abe6:	6821      	ldr	r1, [r4, #0]
 801abe8:	6862      	ldr	r2, [r4, #4]
 801abea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801abec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abf0:	4718      	bx	r3
 801abf2:	bd70      	pop	{r4, r5, r6, pc}
 801abf4:	24028564 	.word	0x24028564

0801abf8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801abf8:	b570      	push	{r4, r5, r6, lr}
 801abfa:	4604      	mov	r4, r0
 801abfc:	4616      	mov	r6, r2
 801abfe:	460d      	mov	r5, r1
 801ac00:	b901      	cbnz	r1, 801ac04 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ac02:	b192      	cbz	r2, 801ac2a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ac04:	6823      	ldr	r3, [r4, #0]
 801ac06:	4620      	mov	r0, r4
 801ac08:	699b      	ldr	r3, [r3, #24]
 801ac0a:	4798      	blx	r3
 801ac0c:	88e2      	ldrh	r2, [r4, #6]
 801ac0e:	88a1      	ldrh	r1, [r4, #4]
 801ac10:	4620      	mov	r0, r4
 801ac12:	4432      	add	r2, r6
 801ac14:	4429      	add	r1, r5
 801ac16:	b212      	sxth	r2, r2
 801ac18:	b209      	sxth	r1, r1
 801ac1a:	f7e9 f88b 	bl	8003d34 <_ZN8touchgfx8Drawable5setXYEss>
 801ac1e:	6823      	ldr	r3, [r4, #0]
 801ac20:	4620      	mov	r0, r4
 801ac22:	699b      	ldr	r3, [r3, #24]
 801ac24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac28:	4718      	bx	r3
 801ac2a:	bd70      	pop	{r4, r5, r6, pc}

0801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ac2c:	b510      	push	{r4, lr}
 801ac2e:	2300      	movs	r3, #0
 801ac30:	4604      	mov	r4, r0
 801ac32:	4608      	mov	r0, r1
 801ac34:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ac38:	8023      	strh	r3, [r4, #0]
 801ac3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ac3e:	8063      	strh	r3, [r4, #2]
 801ac40:	6803      	ldr	r3, [r0, #0]
 801ac42:	80a1      	strh	r1, [r4, #4]
 801ac44:	4621      	mov	r1, r4
 801ac46:	80e2      	strh	r2, [r4, #6]
 801ac48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac4a:	4798      	blx	r3
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	bd10      	pop	{r4, pc}

0801ac50 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801ac50:	4770      	bx	lr

0801ac52 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801ac52:	b510      	push	{r4, lr}
 801ac54:	4604      	mov	r4, r0
 801ac56:	211c      	movs	r1, #28
 801ac58:	f00d fa4e 	bl	80280f8 <_ZdlPvj>
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	bd10      	pop	{r4, pc}

0801ac60 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801ac60:	4a04      	ldr	r2, [pc, #16]	@ (801ac74 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801ac62:	6002      	str	r2, [r0, #0]
 801ac64:	2200      	movs	r2, #0
 801ac66:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801ac6a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ac6e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ac72:	4770      	bx	lr
 801ac74:	0802d548 	.word	0x0802d548

0801ac78 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	4604      	mov	r4, r0
 801ac7e:	b087      	sub	sp, #28
 801ac80:	4696      	mov	lr, r2
 801ac82:	6880      	ldr	r0, [r0, #8]
 801ac84:	8b22      	ldrh	r2, [r4, #24]
 801ac86:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801ac8a:	9105      	str	r1, [sp, #20]
 801ac8c:	1c51      	adds	r1, r2, #1
 801ac8e:	8321      	strh	r1, [r4, #24]
 801ac90:	2101      	movs	r1, #1
 801ac92:	5481      	strb	r1, [r0, r2]
 801ac94:	4689      	mov	r9, r1
 801ac96:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac9a:	8b60      	ldrh	r0, [r4, #26]
 801ac9c:	ee06 2a90 	vmov	s13, r2
 801aca0:	68e2      	ldr	r2, [r4, #12]
 801aca2:	1845      	adds	r5, r0, r1
 801aca4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801aca8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801acac:	8365      	strh	r5, [r4, #26]
 801acae:	edc2 6a00 	vstr	s13, [r2]
 801acb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801acb6:	8b60      	ldrh	r0, [r4, #26]
 801acb8:	ee07 2a10 	vmov	s14, r2
 801acbc:	68e2      	ldr	r2, [r4, #12]
 801acbe:	1845      	adds	r5, r0, r1
 801acc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801acc4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801acc8:	8365      	strh	r5, [r4, #26]
 801acca:	1d18      	adds	r0, r3, #4
 801accc:	460d      	mov	r5, r1
 801acce:	ed82 7a00 	vstr	s14, [r2]
 801acd2:	f8be 2000 	ldrh.w	r2, [lr]
 801acd6:	9203      	str	r2, [sp, #12]
 801acd8:	2200      	movs	r2, #0
 801acda:	4613      	mov	r3, r2
 801acdc:	4694      	mov	ip, r2
 801acde:	9201      	str	r2, [sp, #4]
 801ace0:	9202      	str	r2, [sp, #8]
 801ace2:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801ace6:	9e05      	ldr	r6, [sp, #20]
 801ace8:	f108 0701 	add.w	r7, r8, #1
 801acec:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801acf0:	428e      	cmp	r6, r1
 801acf2:	b2bf      	uxth	r7, r7
 801acf4:	eb0a 0b08 	add.w	fp, sl, r8
 801acf8:	f340 80b6 	ble.w	801ae68 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801acfc:	9b03      	ldr	r3, [sp, #12]
 801acfe:	f9b0 c000 	ldrsh.w	ip, [r0]
 801ad02:	fa43 fb05 	asr.w	fp, r3, r5
 801ad06:	f00b 0b01 	and.w	fp, fp, #1
 801ad0a:	fa5f f38b 	uxtb.w	r3, fp
 801ad0e:	9304      	str	r3, [sp, #16]
 801ad10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ad14:	f1bb 0f00 	cmp.w	fp, #0
 801ad18:	d057      	beq.n	801adca <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801ad1a:	ee07 ca90 	vmov	s15, ip
 801ad1e:	8327      	strh	r7, [r4, #24]
 801ad20:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801ad24:	ee07 3a90 	vmov	s15, r3
 801ad28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad2c:	f1b9 0f00 	cmp.w	r9, #0
 801ad30:	d028      	beq.n	801ad84 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801ad32:	f04f 0602 	mov.w	r6, #2
 801ad36:	f80a 6008 	strb.w	r6, [sl, r8]
 801ad3a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad3e:	68e7      	ldr	r7, [r4, #12]
 801ad40:	f108 0901 	add.w	r9, r8, #1
 801ad44:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad48:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad4c:	edc7 5a00 	vstr	s11, [r7]
 801ad50:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad54:	68e7      	ldr	r7, [r4, #12]
 801ad56:	f108 0901 	add.w	r9, r8, #1
 801ad5a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad5e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad62:	edc7 7a00 	vstr	s15, [r7]
 801ad66:	3501      	adds	r5, #1
 801ad68:	2d10      	cmp	r5, #16
 801ad6a:	d106      	bne.n	801ad7a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801ad6c:	9d02      	ldr	r5, [sp, #8]
 801ad6e:	3501      	adds	r5, #1
 801ad70:	9502      	str	r5, [sp, #8]
 801ad72:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801ad76:	9503      	str	r5, [sp, #12]
 801ad78:	2500      	movs	r5, #0
 801ad7a:	3101      	adds	r1, #1
 801ad7c:	3004      	adds	r0, #4
 801ad7e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801ad82:	e7ae      	b.n	801ace2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801ad84:	f04f 0605 	mov.w	r6, #5
 801ad88:	ed9d 5a01 	vldr	s10, [sp, #4]
 801ad8c:	f80a 6008 	strb.w	r6, [sl, r8]
 801ad90:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ad94:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad98:	68e7      	ldr	r7, [r4, #12]
 801ad9a:	f108 0901 	add.w	r9, r8, #1
 801ad9e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ada2:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ada6:	ed87 5a00 	vstr	s10, [r7]
 801adaa:	ee05 2a10 	vmov	s10, r2
 801adae:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adb2:	68e7      	ldr	r7, [r4, #12]
 801adb4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801adb8:	f108 0901 	add.w	r9, r8, #1
 801adbc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adc0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adc4:	ed87 5a00 	vstr	s10, [r7]
 801adc8:	e7b7      	b.n	801ad3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801adca:	f1b9 0f00 	cmp.w	r9, #0
 801adce:	d147      	bne.n	801ae60 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801add0:	f04f 0605 	mov.w	r6, #5
 801add4:	eddd 7a01 	vldr	s15, [sp, #4]
 801add8:	8327      	strh	r7, [r4, #24]
 801adda:	f80a 6008 	strb.w	r6, [sl, r8]
 801adde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ade2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ade6:	68e7      	ldr	r7, [r4, #12]
 801ade8:	f108 0901 	add.w	r9, r8, #1
 801adec:	9e01      	ldr	r6, [sp, #4]
 801adee:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adf2:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adf6:	4466      	add	r6, ip
 801adf8:	edc7 7a00 	vstr	s15, [r7]
 801adfc:	ee07 2a90 	vmov	s15, r2
 801ae00:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae04:	441a      	add	r2, r3
 801ae06:	68e7      	ldr	r7, [r4, #12]
 801ae08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae0c:	f108 0901 	add.w	r9, r8, #1
 801ae10:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae14:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae18:	edc7 7a00 	vstr	s15, [r7]
 801ae1c:	ee07 6a90 	vmov	s15, r6
 801ae20:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae28:	68e7      	ldr	r7, [r4, #12]
 801ae2a:	f108 0901 	add.w	r9, r8, #1
 801ae2e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae32:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ae36:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae3a:	edc7 7a00 	vstr	s15, [r7]
 801ae3e:	ee07 2a90 	vmov	s15, r2
 801ae42:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae4a:	68e7      	ldr	r7, [r4, #12]
 801ae4c:	f108 0901 	add.w	r9, r8, #1
 801ae50:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae54:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ae58:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae5c:	edc7 7a00 	vstr	s15, [r7]
 801ae60:	461a      	mov	r2, r3
 801ae62:	f8cd c004 	str.w	ip, [sp, #4]
 801ae66:	e77e      	b.n	801ad66 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801ae68:	f1b9 0f00 	cmp.w	r9, #0
 801ae6c:	d028      	beq.n	801aec0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801ae6e:	ee07 ca90 	vmov	s15, ip
 801ae72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae76:	eef4 6a67 	vcmp.f32	s13, s15
 801ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae7e:	d108      	bne.n	801ae92 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801ae80:	ee07 3a90 	vmov	s15, r3
 801ae84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae88:	eeb4 7a67 	vcmp.f32	s14, s15
 801ae8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae90:	d016      	beq.n	801aec0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801ae92:	2302      	movs	r3, #2
 801ae94:	8327      	strh	r7, [r4, #24]
 801ae96:	f88b 3000 	strb.w	r3, [fp]
 801ae9a:	8b62      	ldrh	r2, [r4, #26]
 801ae9c:	68e3      	ldr	r3, [r4, #12]
 801ae9e:	1c51      	adds	r1, r2, #1
 801aea0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aea4:	8361      	strh	r1, [r4, #26]
 801aea6:	edc3 6a00 	vstr	s13, [r3]
 801aeaa:	8b62      	ldrh	r2, [r4, #26]
 801aeac:	68e3      	ldr	r3, [r4, #12]
 801aeae:	1c51      	adds	r1, r2, #1
 801aeb0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aeb4:	8361      	strh	r1, [r4, #26]
 801aeb6:	ed83 7a00 	vstr	s14, [r3]
 801aeba:	b007      	add	sp, #28
 801aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aec0:	2305      	movs	r3, #5
 801aec2:	eddd 7a01 	vldr	s15, [sp, #4]
 801aec6:	8327      	strh	r7, [r4, #24]
 801aec8:	f88b 3000 	strb.w	r3, [fp]
 801aecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aed0:	8b61      	ldrh	r1, [r4, #26]
 801aed2:	68e3      	ldr	r3, [r4, #12]
 801aed4:	1c4d      	adds	r5, r1, #1
 801aed6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801aeda:	8365      	strh	r5, [r4, #26]
 801aedc:	edc3 7a00 	vstr	s15, [r3]
 801aee0:	ee07 2a90 	vmov	s15, r2
 801aee4:	8b61      	ldrh	r1, [r4, #26]
 801aee6:	68e3      	ldr	r3, [r4, #12]
 801aee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeec:	1c4d      	adds	r5, r1, #1
 801aeee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801aef2:	8365      	strh	r5, [r4, #26]
 801aef4:	edc3 7a00 	vstr	s15, [r3]
 801aef8:	e7cf      	b.n	801ae9a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801aefc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af00:	4604      	mov	r4, r0
 801af02:	b08e      	sub	sp, #56	@ 0x38
 801af04:	4699      	mov	r9, r3
 801af06:	4688      	mov	r8, r1
 801af08:	4615      	mov	r5, r2
 801af0a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801af0c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801af10:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801af12:	f7e8 fc33 	bl	800377c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801af16:	6060      	str	r0, [r4, #4]
 801af18:	f1b9 0f00 	cmp.w	r9, #0
 801af1c:	f000 80e8 	beq.w	801b0f0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801af20:	2800      	cmp	r0, #0
 801af22:	f000 80e5 	beq.w	801b0f0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801af26:	a805      	add	r0, sp, #20
 801af28:	f000 f8f9 	bl	801b11e <_ZN8touchgfx9Matrix3x3C1Ev>
 801af2c:	6833      	ldr	r3, [r6, #0]
 801af2e:	4630      	mov	r0, r6
 801af30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801af32:	4798      	blx	r3
 801af34:	a805      	add	r0, sp, #20
 801af36:	eef0 0a40 	vmov.f32	s1, s0
 801af3a:	f000 f8f4 	bl	801b126 <_ZN8touchgfx9Matrix3x35scaleEff>
 801af3e:	6860      	ldr	r0, [r4, #4]
 801af40:	f1ba 0f03 	cmp.w	sl, #3
 801af44:	d83b      	bhi.n	801afbe <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801af46:	e8df f00a 	tbb	[pc, sl]
 801af4a:	1002      	.short	0x1002
 801af4c:	9f71      	.short	0x9f71
 801af4e:	6803      	ldr	r3, [r0, #0]
 801af50:	462a      	mov	r2, r5
 801af52:	4641      	mov	r1, r8
 801af54:	689b      	ldr	r3, [r3, #8]
 801af56:	4798      	blx	r3
 801af58:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801af5c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801af60:	ee07 7a90 	vmov	s15, r7
 801af64:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801af68:	e026      	b.n	801afb8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801af6a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801af6e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801af72:	8869      	ldrh	r1, [r5, #2]
 801af74:	1a9b      	subs	r3, r3, r2
 801af76:	f8ad 2010 	strh.w	r2, [sp, #16]
 801af7a:	aa03      	add	r2, sp, #12
 801af7c:	1a5b      	subs	r3, r3, r1
 801af7e:	4641      	mov	r1, r8
 801af80:	f8ad 300c 	strh.w	r3, [sp, #12]
 801af84:	882b      	ldrh	r3, [r5, #0]
 801af86:	f8ad 300e 	strh.w	r3, [sp, #14]
 801af8a:	88ab      	ldrh	r3, [r5, #4]
 801af8c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801af90:	6803      	ldr	r3, [r0, #0]
 801af92:	689b      	ldr	r3, [r3, #8]
 801af94:	4798      	blx	r3
 801af96:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801b0f8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801af9a:	a805      	add	r0, sp, #20
 801af9c:	f000 f8e8 	bl	801b170 <_ZN8touchgfx9Matrix3x36rotateEf>
 801afa0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801afa4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801afa6:	ee07 7a90 	vmov	s15, r7
 801afaa:	1a9b      	subs	r3, r3, r2
 801afac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801afb0:	ee00 3a10 	vmov	s0, r3
 801afb4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801afb8:	a805      	add	r0, sp, #20
 801afba:	f000 f927 	bl	801b20c <_ZN8touchgfx9Matrix3x39translateEff>
 801afbe:	6860      	ldr	r0, [r4, #4]
 801afc0:	a905      	add	r1, sp, #20
 801afc2:	2500      	movs	r5, #0
 801afc4:	f109 0602 	add.w	r6, r9, #2
 801afc8:	6803      	ldr	r3, [r0, #0]
 801afca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801afcc:	4798      	blx	r3
 801afce:	6860      	ldr	r0, [r4, #4]
 801afd0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801afd2:	6803      	ldr	r3, [r0, #0]
 801afd4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801afd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afda:	4798      	blx	r3
 801afdc:	6860      	ldr	r0, [r4, #4]
 801afde:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801afe2:	6803      	ldr	r3, [r0, #0]
 801afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afe6:	4798      	blx	r3
 801afe8:	6860      	ldr	r0, [r4, #4]
 801afea:	2101      	movs	r1, #1
 801afec:	6803      	ldr	r3, [r0, #0]
 801afee:	68db      	ldr	r3, [r3, #12]
 801aff0:	4798      	blx	r3
 801aff2:	f8b9 7000 	ldrh.w	r7, [r9]
 801aff6:	f104 0310 	add.w	r3, r4, #16
 801affa:	61a5      	str	r5, [r4, #24]
 801affc:	f104 0208 	add.w	r2, r4, #8
 801b000:	f104 0114 	add.w	r1, r4, #20
 801b004:	f104 000c 	add.w	r0, r4, #12
 801b008:	f7ed fb22 	bl	8008650 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801b00c:	42af      	cmp	r7, r5
 801b00e:	dd60      	ble.n	801b0d2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801b010:	8831      	ldrh	r1, [r6, #0]
 801b012:	1cb2      	adds	r2, r6, #2
 801b014:	4620      	mov	r0, r4
 801b016:	3501      	adds	r5, #1
 801b018:	f101 030f 	add.w	r3, r1, #15
 801b01c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801b020:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b024:	f7ff fe28 	bl	801ac78 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801b028:	4606      	mov	r6, r0
 801b02a:	e7ef      	b.n	801b00c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801b02c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b030:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b034:	8829      	ldrh	r1, [r5, #0]
 801b036:	1a9b      	subs	r3, r3, r2
 801b038:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b03c:	aa03      	add	r2, sp, #12
 801b03e:	1a5b      	subs	r3, r3, r1
 801b040:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b044:	886d      	ldrh	r5, [r5, #2]
 801b046:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b04a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b04e:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b052:	1a5b      	subs	r3, r3, r1
 801b054:	4641      	mov	r1, r8
 801b056:	1b5b      	subs	r3, r3, r5
 801b058:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b05c:	6803      	ldr	r3, [r0, #0]
 801b05e:	689b      	ldr	r3, [r3, #8]
 801b060:	4798      	blx	r3
 801b062:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801b0fc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801b066:	a805      	add	r0, sp, #20
 801b068:	f000 f882 	bl	801b170 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b06c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b070:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b072:	1a9b      	subs	r3, r3, r2
 801b074:	ee00 3a90 	vmov	s1, r3
 801b078:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b07c:	1bdb      	subs	r3, r3, r7
 801b07e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b082:	ee00 3a10 	vmov	s0, r3
 801b086:	e795      	b.n	801afb4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801b088:	886b      	ldrh	r3, [r5, #2]
 801b08a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b08e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b092:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b096:	8829      	ldrh	r1, [r5, #0]
 801b098:	1a9b      	subs	r3, r3, r2
 801b09a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b09e:	aa03      	add	r2, sp, #12
 801b0a0:	1a5b      	subs	r3, r3, r1
 801b0a2:	4641      	mov	r1, r8
 801b0a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b0a8:	88eb      	ldrh	r3, [r5, #6]
 801b0aa:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b0ae:	6803      	ldr	r3, [r0, #0]
 801b0b0:	689b      	ldr	r3, [r3, #8]
 801b0b2:	4798      	blx	r3
 801b0b4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801b100 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801b0b8:	a805      	add	r0, sp, #20
 801b0ba:	f000 f859 	bl	801b170 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b0be:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b0c2:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801b0c6:	1bdb      	subs	r3, r3, r7
 801b0c8:	ee00 3a90 	vmov	s1, r3
 801b0cc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b0d0:	e748      	b.n	801af64 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801b0d2:	6860      	ldr	r0, [r4, #4]
 801b0d4:	2100      	movs	r1, #0
 801b0d6:	8b22      	ldrh	r2, [r4, #24]
 801b0d8:	6803      	ldr	r3, [r0, #0]
 801b0da:	9101      	str	r1, [sp, #4]
 801b0dc:	8b61      	ldrh	r1, [r4, #26]
 801b0de:	9100      	str	r1, [sp, #0]
 801b0e0:	6a1d      	ldr	r5, [r3, #32]
 801b0e2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801b0e6:	47a8      	blx	r5
 801b0e8:	6860      	ldr	r0, [r4, #4]
 801b0ea:	6803      	ldr	r3, [r0, #0]
 801b0ec:	69db      	ldr	r3, [r3, #28]
 801b0ee:	4798      	blx	r3
 801b0f0:	b00e      	add	sp, #56	@ 0x38
 801b0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0f6:	bf00      	nop
 801b0f8:	42b40000 	.word	0x42b40000
 801b0fc:	43340000 	.word	0x43340000
 801b100:	43870000 	.word	0x43870000

0801b104 <_ZN8touchgfx9Matrix3x35resetEv>:
 801b104:	2300      	movs	r3, #0
 801b106:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801b10a:	6043      	str	r3, [r0, #4]
 801b10c:	6002      	str	r2, [r0, #0]
 801b10e:	6083      	str	r3, [r0, #8]
 801b110:	60c3      	str	r3, [r0, #12]
 801b112:	6102      	str	r2, [r0, #16]
 801b114:	6143      	str	r3, [r0, #20]
 801b116:	6183      	str	r3, [r0, #24]
 801b118:	61c3      	str	r3, [r0, #28]
 801b11a:	6202      	str	r2, [r0, #32]
 801b11c:	4770      	bx	lr

0801b11e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801b11e:	b508      	push	{r3, lr}
 801b120:	f7ff fff0 	bl	801b104 <_ZN8touchgfx9Matrix3x35resetEv>
 801b124:	bd08      	pop	{r3, pc}

0801b126 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801b126:	edd0 7a00 	vldr	s15, [r0]
 801b12a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b12e:	edc0 7a00 	vstr	s15, [r0]
 801b132:	edd0 7a01 	vldr	s15, [r0, #4]
 801b136:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b13a:	edc0 7a01 	vstr	s15, [r0, #4]
 801b13e:	edd0 7a02 	vldr	s15, [r0, #8]
 801b142:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b146:	edd0 7a03 	vldr	s15, [r0, #12]
 801b14a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b14e:	ed80 0a02 	vstr	s0, [r0, #8]
 801b152:	edc0 7a03 	vstr	s15, [r0, #12]
 801b156:	edd0 7a04 	vldr	s15, [r0, #16]
 801b15a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b15e:	edc0 7a04 	vstr	s15, [r0, #16]
 801b162:	edd0 7a05 	vldr	s15, [r0, #20]
 801b166:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b16a:	edc0 0a05 	vstr	s1, [r0, #20]
 801b16e:	4770      	bx	lr

0801b170 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801b170:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801b204 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801b174:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b178:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801b208 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801b17c:	b510      	push	{r4, lr}
 801b17e:	ed2d 8b02 	vpush	{d8}
 801b182:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801b186:	4604      	mov	r4, r0
 801b188:	eeb0 0a68 	vmov.f32	s0, s17
 801b18c:	f00d f8ec 	bl	8028368 <cosf>
 801b190:	eeb0 8a40 	vmov.f32	s16, s0
 801b194:	eeb0 0a68 	vmov.f32	s0, s17
 801b198:	f00d f822 	bl	80281e0 <sinf>
 801b19c:	edd4 6a03 	vldr	s13, [r4, #12]
 801b1a0:	edd4 4a00 	vldr	s9, [r4]
 801b1a4:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801b1a8:	ed94 7a04 	vldr	s14, [r4, #16]
 801b1ac:	ed94 5a01 	vldr	s10, [r4, #4]
 801b1b0:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b1b4:	edd4 5a02 	vldr	s11, [r4, #8]
 801b1b8:	eee8 7a24 	vfma.f32	s15, s16, s9
 801b1bc:	eee0 6a24 	vfma.f32	s13, s0, s9
 801b1c0:	edc4 7a00 	vstr	s15, [r4]
 801b1c4:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801b1c8:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b1cc:	edc4 6a03 	vstr	s13, [r4, #12]
 801b1d0:	eee8 7a05 	vfma.f32	s15, s16, s10
 801b1d4:	eea0 7a05 	vfma.f32	s14, s0, s10
 801b1d8:	edc4 7a01 	vstr	s15, [r4, #4]
 801b1dc:	edd4 7a05 	vldr	s15, [r4, #20]
 801b1e0:	ed84 7a04 	vstr	s14, [r4, #16]
 801b1e4:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801b1e8:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b1ec:	eea8 6a25 	vfma.f32	s12, s16, s11
 801b1f0:	eee0 7a25 	vfma.f32	s15, s0, s11
 801b1f4:	ecbd 8b02 	vpop	{d8}
 801b1f8:	ed84 6a02 	vstr	s12, [r4, #8]
 801b1fc:	edc4 7a05 	vstr	s15, [r4, #20]
 801b200:	bd10      	pop	{r4, pc}
 801b202:	bf00      	nop
 801b204:	40490fdb 	.word	0x40490fdb
 801b208:	43340000 	.word	0x43340000

0801b20c <_ZN8touchgfx9Matrix3x39translateEff>:
 801b20c:	ed90 6a06 	vldr	s12, [r0, #24]
 801b210:	edd0 7a00 	vldr	s15, [r0]
 801b214:	edd0 6a07 	vldr	s13, [r0, #28]
 801b218:	eee6 7a00 	vfma.f32	s15, s12, s0
 801b21c:	ed90 7a08 	vldr	s14, [r0, #32]
 801b220:	edc0 7a00 	vstr	s15, [r0]
 801b224:	edd0 7a01 	vldr	s15, [r0, #4]
 801b228:	eee6 7a80 	vfma.f32	s15, s13, s0
 801b22c:	edc0 7a01 	vstr	s15, [r0, #4]
 801b230:	edd0 7a02 	vldr	s15, [r0, #8]
 801b234:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b238:	edc0 7a02 	vstr	s15, [r0, #8]
 801b23c:	edd0 7a03 	vldr	s15, [r0, #12]
 801b240:	eee6 7a20 	vfma.f32	s15, s12, s1
 801b244:	edc0 7a03 	vstr	s15, [r0, #12]
 801b248:	edd0 7a04 	vldr	s15, [r0, #16]
 801b24c:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801b250:	edc0 7a04 	vstr	s15, [r0, #16]
 801b254:	edd0 7a05 	vldr	s15, [r0, #20]
 801b258:	eee7 7a20 	vfma.f32	s15, s14, s1
 801b25c:	edc0 7a05 	vstr	s15, [r0, #20]
 801b260:	4770      	bx	lr

0801b262 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801b262:	edd0 6a01 	vldr	s13, [r0, #4]
 801b266:	b084      	sub	sp, #16
 801b268:	edd0 7a04 	vldr	s15, [r0, #16]
 801b26c:	ed90 7a03 	vldr	s14, [r0, #12]
 801b270:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801b274:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801b278:	edd0 6a00 	vldr	s13, [r0]
 801b27c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b280:	ed90 7a05 	vldr	s14, [r0, #20]
 801b284:	eee6 0a80 	vfma.f32	s1, s13, s0
 801b288:	ed90 0a02 	vldr	s0, [r0, #8]
 801b28c:	ee30 0a80 	vadd.f32	s0, s1, s0
 801b290:	ee77 0a87 	vadd.f32	s1, s15, s14
 801b294:	b004      	add	sp, #16
 801b296:	4770      	bx	lr

0801b298 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b298:	b530      	push	{r4, r5, lr}
 801b29a:	8083      	strh	r3, [r0, #4]
 801b29c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b2a0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b2a4:	80c3      	strh	r3, [r0, #6]
 801b2a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b2aa:	6141      	str	r1, [r0, #20]
 801b2ac:	7203      	strb	r3, [r0, #8]
 801b2ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b2b2:	8302      	strh	r2, [r0, #24]
 801b2b4:	7243      	strb	r3, [r0, #9]
 801b2b6:	7a83      	ldrb	r3, [r0, #10]
 801b2b8:	f365 0306 	bfi	r3, r5, #0, #7
 801b2bc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b2c0:	f365 13c7 	bfi	r3, r5, #7, #1
 801b2c4:	7283      	strb	r3, [r0, #10]
 801b2c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b2ca:	72c3      	strb	r3, [r0, #11]
 801b2cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b2d0:	7303      	strb	r3, [r0, #12]
 801b2d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b2d6:	81c3      	strh	r3, [r0, #14]
 801b2d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b2dc:	8203      	strh	r3, [r0, #16]
 801b2de:	4b01      	ldr	r3, [pc, #4]	@ (801b2e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b2e0:	6003      	str	r3, [r0, #0]
 801b2e2:	bd30      	pop	{r4, r5, pc}
 801b2e4:	0802d55c 	.word	0x0802d55c

0801b2e8 <_ZNK8touchgfx9ConstFont4findEt>:
 801b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2ea:	6944      	ldr	r4, [r0, #20]
 801b2ec:	b3bc      	cbz	r4, 801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2ee:	88a3      	ldrh	r3, [r4, #4]
 801b2f0:	8b02      	ldrh	r2, [r0, #24]
 801b2f2:	1acb      	subs	r3, r1, r3
 801b2f4:	f102 32ff 	add.w	r2, r2, #4294967295
 801b2f8:	d431      	bmi.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b2fa:	4293      	cmp	r3, r2
 801b2fc:	dd0c      	ble.n	801b318 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b2fe:	230e      	movs	r3, #14
 801b300:	fb03 4302 	mla	r3, r3, r2, r4
 801b304:	889b      	ldrh	r3, [r3, #4]
 801b306:	1a5b      	subs	r3, r3, r1
 801b308:	1ad3      	subs	r3, r2, r3
 801b30a:	429a      	cmp	r2, r3
 801b30c:	db27      	blt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b30e:	2b00      	cmp	r3, #0
 801b310:	bfbc      	itt	lt
 801b312:	2302      	movlt	r3, #2
 801b314:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b318:	2500      	movs	r5, #0
 801b31a:	260e      	movs	r6, #14
 801b31c:	4295      	cmp	r5, r2
 801b31e:	dc1e      	bgt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b320:	fb06 4003 	mla	r0, r6, r3, r4
 801b324:	8887      	ldrh	r7, [r0, #4]
 801b326:	42b9      	cmp	r1, r7
 801b328:	d01a      	beq.n	801b360 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b32a:	d20d      	bcs.n	801b348 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b32c:	1e5a      	subs	r2, r3, #1
 801b32e:	4295      	cmp	r5, r2
 801b330:	dc15      	bgt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b332:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b336:	1a5b      	subs	r3, r3, r1
 801b338:	1ad3      	subs	r3, r2, r3
 801b33a:	429a      	cmp	r2, r3
 801b33c:	db0f      	blt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b33e:	429d      	cmp	r5, r3
 801b340:	ddec      	ble.n	801b31c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b342:	1953      	adds	r3, r2, r5
 801b344:	105b      	asrs	r3, r3, #1
 801b346:	e7e9      	b.n	801b31c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b348:	1c5d      	adds	r5, r3, #1
 801b34a:	42aa      	cmp	r2, r5
 801b34c:	db07      	blt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b34e:	8a43      	ldrh	r3, [r0, #18]
 801b350:	1acb      	subs	r3, r1, r3
 801b352:	442b      	add	r3, r5
 801b354:	429d      	cmp	r5, r3
 801b356:	dc02      	bgt.n	801b35e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b358:	429a      	cmp	r2, r3
 801b35a:	dadf      	bge.n	801b31c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b35c:	e7f1      	b.n	801b342 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b35e:	2000      	movs	r0, #0
 801b360:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b362 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b364:	4604      	mov	r4, r0
 801b366:	4617      	mov	r7, r2
 801b368:	461e      	mov	r6, r3
 801b36a:	b911      	cbnz	r1, 801b372 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b36c:	2500      	movs	r5, #0
 801b36e:	4628      	mov	r0, r5
 801b370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b372:	290a      	cmp	r1, #10
 801b374:	d0fa      	beq.n	801b36c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b376:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b37a:	4291      	cmp	r1, r2
 801b37c:	d0f6      	beq.n	801b36c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b37e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801b382:	4291      	cmp	r1, r2
 801b384:	d0f2      	beq.n	801b36c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b386:	f7ff ffaf 	bl	801b2e8 <_ZNK8touchgfx9ConstFont4findEt>
 801b38a:	4605      	mov	r5, r0
 801b38c:	b950      	cbnz	r0, 801b3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b38e:	6823      	ldr	r3, [r4, #0]
 801b390:	4620      	mov	r0, r4
 801b392:	691b      	ldr	r3, [r3, #16]
 801b394:	4798      	blx	r3
 801b396:	4601      	mov	r1, r0
 801b398:	4620      	mov	r0, r4
 801b39a:	f7ff ffa5 	bl	801b2e8 <_ZNK8touchgfx9ConstFont4findEt>
 801b39e:	4605      	mov	r5, r0
 801b3a0:	2800      	cmp	r0, #0
 801b3a2:	d0e3      	beq.n	801b36c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b3a4:	6823      	ldr	r3, [r4, #0]
 801b3a6:	4629      	mov	r1, r5
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b3ac:	4798      	blx	r3
 801b3ae:	6038      	str	r0, [r7, #0]
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	4620      	mov	r0, r4
 801b3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b3b6:	4798      	blx	r3
 801b3b8:	7030      	strb	r0, [r6, #0]
 801b3ba:	e7d8      	b.n	801b36e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b3bc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	4605      	mov	r5, r0
 801b3c0:	f002 f9f6 	bl	801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b3c4:	4604      	mov	r4, r0
 801b3c6:	4628      	mov	r0, r5
 801b3c8:	f002 f936 	bl	801d638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b3cc:	2800      	cmp	r0, #0
 801b3ce:	bf14      	ite	ne
 801b3d0:	2002      	movne	r0, #2
 801b3d2:	2000      	moveq	r0, #0
 801b3d4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b3d8:	b280      	uxth	r0, r0
 801b3da:	bd38      	pop	{r3, r4, r5, pc}

0801b3dc <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801b3dc:	b538      	push	{r3, r4, r5, lr}
 801b3de:	4605      	mov	r5, r0
 801b3e0:	f002 f9e6 	bl	801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b3e4:	4604      	mov	r4, r0
 801b3e6:	4628      	mov	r0, r5
 801b3e8:	f002 f926 	bl	801d638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b3ec:	2800      	cmp	r0, #0
 801b3ee:	bf14      	ite	ne
 801b3f0:	2002      	movne	r0, #2
 801b3f2:	2000      	moveq	r0, #0
 801b3f4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b3f8:	f040 0001 	orr.w	r0, r0, #1
 801b3fc:	b280      	uxth	r0, r0
 801b3fe:	bd38      	pop	{r3, r4, r5, pc}

0801b400 <_ZN8touchgfx4clzuEm>:
 801b400:	4603      	mov	r3, r0
 801b402:	b1c8      	cbz	r0, 801b438 <_ZN8touchgfx4clzuEm+0x38>
 801b404:	0c02      	lsrs	r2, r0, #16
 801b406:	0412      	lsls	r2, r2, #16
 801b408:	b9a2      	cbnz	r2, 801b434 <_ZN8touchgfx4clzuEm+0x34>
 801b40a:	0403      	lsls	r3, r0, #16
 801b40c:	2010      	movs	r0, #16
 801b40e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b412:	bf04      	itt	eq
 801b414:	021b      	lsleq	r3, r3, #8
 801b416:	3008      	addeq	r0, #8
 801b418:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b41c:	bf04      	itt	eq
 801b41e:	011b      	lsleq	r3, r3, #4
 801b420:	3004      	addeq	r0, #4
 801b422:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b426:	bf04      	itt	eq
 801b428:	009b      	lsleq	r3, r3, #2
 801b42a:	3002      	addeq	r0, #2
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	db04      	blt.n	801b43a <_ZN8touchgfx4clzuEm+0x3a>
 801b430:	3001      	adds	r0, #1
 801b432:	4770      	bx	lr
 801b434:	2000      	movs	r0, #0
 801b436:	e7ea      	b.n	801b40e <_ZN8touchgfx4clzuEm+0xe>
 801b438:	2020      	movs	r0, #32
 801b43a:	4770      	bx	lr

0801b43c <_ZN8touchgfx7muldivuEmmmRm>:
 801b43c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b440:	460f      	mov	r7, r1
 801b442:	4615      	mov	r5, r2
 801b444:	461e      	mov	r6, r3
 801b446:	4601      	mov	r1, r0
 801b448:	b100      	cbz	r0, 801b44c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801b44a:	b927      	cbnz	r7, 801b456 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801b44c:	2000      	movs	r0, #0
 801b44e:	6030      	str	r0, [r6, #0]
 801b450:	b002      	add	sp, #8
 801b452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b456:	f7ff ffd3 	bl	801b400 <_ZN8touchgfx4clzuEm>
 801b45a:	b980      	cbnz	r0, 801b47e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801b45c:	4638      	mov	r0, r7
 801b45e:	f7ff ffcf 	bl	801b400 <_ZN8touchgfx4clzuEm>
 801b462:	2800      	cmp	r0, #0
 801b464:	dd05      	ble.n	801b472 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801b466:	4633      	mov	r3, r6
 801b468:	462a      	mov	r2, r5
 801b46a:	4638      	mov	r0, r7
 801b46c:	f7ff ffe6 	bl	801b43c <_ZN8touchgfx7muldivuEmmmRm>
 801b470:	e7ee      	b.n	801b450 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b472:	f04f 33ff 	mov.w	r3, #4294967295
 801b476:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b47a:	6033      	str	r3, [r6, #0]
 801b47c:	e7e8      	b.n	801b450 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b47e:	fa37 f800 	lsrs.w	r8, r7, r0
 801b482:	fb07 f301 	mul.w	r3, r7, r1
 801b486:	d105      	bne.n	801b494 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801b488:	fbb3 f0f5 	udiv	r0, r3, r5
 801b48c:	fb05 3510 	mls	r5, r5, r0, r3
 801b490:	6035      	str	r5, [r6, #0]
 801b492:	e7dd      	b.n	801b450 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b494:	2301      	movs	r3, #1
 801b496:	fa01 fa00 	lsl.w	sl, r1, r0
 801b49a:	462a      	mov	r2, r5
 801b49c:	fa03 f000 	lsl.w	r0, r3, r0
 801b4a0:	4633      	mov	r3, r6
 801b4a2:	fbba f9f5 	udiv	r9, sl, r5
 801b4a6:	3801      	subs	r0, #1
 801b4a8:	fb08 f409 	mul.w	r4, r8, r9
 801b4ac:	4038      	ands	r0, r7
 801b4ae:	f7ff ffc5 	bl	801b43c <_ZN8touchgfx7muldivuEmmmRm>
 801b4b2:	462a      	mov	r2, r5
 801b4b4:	4607      	mov	r7, r0
 801b4b6:	ab01      	add	r3, sp, #4
 801b4b8:	fb05 a119 	mls	r1, r5, r9, sl
 801b4bc:	4640      	mov	r0, r8
 801b4be:	f7ff ffbd 	bl	801b43c <_ZN8touchgfx7muldivuEmmmRm>
 801b4c2:	9b01      	ldr	r3, [sp, #4]
 801b4c4:	6832      	ldr	r2, [r6, #0]
 801b4c6:	441a      	add	r2, r3
 801b4c8:	fbb2 f3f5 	udiv	r3, r2, r5
 801b4cc:	441c      	add	r4, r3
 801b4ce:	fb05 2513 	mls	r5, r5, r3, r2
 801b4d2:	443c      	add	r4, r7
 801b4d4:	4420      	add	r0, r4
 801b4d6:	e7db      	b.n	801b490 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801b4d8 <_ZN8touchgfx6muldivElllRl>:
 801b4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b4da:	2800      	cmp	r0, #0
 801b4dc:	461e      	mov	r6, r3
 801b4de:	bfba      	itte	lt
 801b4e0:	4240      	neglt	r0, r0
 801b4e2:	f04f 34ff 	movlt.w	r4, #4294967295
 801b4e6:	2401      	movge	r4, #1
 801b4e8:	2900      	cmp	r1, #0
 801b4ea:	bfbc      	itt	lt
 801b4ec:	4249      	neglt	r1, r1
 801b4ee:	4264      	neglt	r4, r4
 801b4f0:	2a00      	cmp	r2, #0
 801b4f2:	bfb6      	itet	lt
 801b4f4:	4265      	neglt	r5, r4
 801b4f6:	4625      	movge	r5, r4
 801b4f8:	4252      	neglt	r2, r2
 801b4fa:	4288      	cmp	r0, r1
 801b4fc:	bfc2      	ittt	gt
 801b4fe:	4603      	movgt	r3, r0
 801b500:	4608      	movgt	r0, r1
 801b502:	4619      	movgt	r1, r3
 801b504:	ab01      	add	r3, sp, #4
 801b506:	f7ff ff99 	bl	801b43c <_ZN8touchgfx7muldivuEmmmRm>
 801b50a:	9b01      	ldr	r3, [sp, #4]
 801b50c:	4368      	muls	r0, r5
 801b50e:	435c      	muls	r4, r3
 801b510:	6034      	str	r4, [r6, #0]
 801b512:	b002      	add	sp, #8
 801b514:	bd70      	pop	{r4, r5, r6, pc}

0801b516 <_ZN8touchgfx6muldivElll>:
 801b516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b518:	4606      	mov	r6, r0
 801b51a:	ab01      	add	r3, sp, #4
 801b51c:	460d      	mov	r5, r1
 801b51e:	4614      	mov	r4, r2
 801b520:	f7ff ffda 	bl	801b4d8 <_ZN8touchgfx6muldivElllRl>
 801b524:	2e00      	cmp	r6, #0
 801b526:	db20      	blt.n	801b56a <_ZN8touchgfx6muldivElll+0x54>
 801b528:	bf14      	ite	ne
 801b52a:	2301      	movne	r3, #1
 801b52c:	2300      	moveq	r3, #0
 801b52e:	2d00      	cmp	r5, #0
 801b530:	db1e      	blt.n	801b570 <_ZN8touchgfx6muldivElll+0x5a>
 801b532:	bf14      	ite	ne
 801b534:	2201      	movne	r2, #1
 801b536:	2200      	moveq	r2, #0
 801b538:	2c00      	cmp	r4, #0
 801b53a:	fb03 f202 	mul.w	r2, r3, r2
 801b53e:	db1a      	blt.n	801b576 <_ZN8touchgfx6muldivElll+0x60>
 801b540:	bf14      	ite	ne
 801b542:	2301      	movne	r3, #1
 801b544:	2300      	moveq	r3, #0
 801b546:	4353      	muls	r3, r2
 801b548:	2b01      	cmp	r3, #1
 801b54a:	d117      	bne.n	801b57c <_ZN8touchgfx6muldivElll+0x66>
 801b54c:	2c00      	cmp	r4, #0
 801b54e:	9b01      	ldr	r3, [sp, #4]
 801b550:	bfb8      	it	lt
 801b552:	4264      	neglt	r4, r4
 801b554:	2b00      	cmp	r3, #0
 801b556:	f104 0401 	add.w	r4, r4, #1
 801b55a:	bfb8      	it	lt
 801b55c:	425b      	neglt	r3, r3
 801b55e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b562:	db00      	blt.n	801b566 <_ZN8touchgfx6muldivElll+0x50>
 801b564:	3001      	adds	r0, #1
 801b566:	b002      	add	sp, #8
 801b568:	bd70      	pop	{r4, r5, r6, pc}
 801b56a:	f04f 33ff 	mov.w	r3, #4294967295
 801b56e:	e7de      	b.n	801b52e <_ZN8touchgfx6muldivElll+0x18>
 801b570:	f04f 32ff 	mov.w	r2, #4294967295
 801b574:	e7e0      	b.n	801b538 <_ZN8touchgfx6muldivElll+0x22>
 801b576:	f04f 33ff 	mov.w	r3, #4294967295
 801b57a:	e7e4      	b.n	801b546 <_ZN8touchgfx6muldivElll+0x30>
 801b57c:	3301      	adds	r3, #1
 801b57e:	d1f2      	bne.n	801b566 <_ZN8touchgfx6muldivElll+0x50>
 801b580:	9b01      	ldr	r3, [sp, #4]
 801b582:	2c00      	cmp	r4, #0
 801b584:	bfb8      	it	lt
 801b586:	4264      	neglt	r4, r4
 801b588:	2b00      	cmp	r3, #0
 801b58a:	bfb8      	it	lt
 801b58c:	425b      	neglt	r3, r3
 801b58e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b592:	bfc8      	it	gt
 801b594:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801b598:	e7e5      	b.n	801b566 <_ZN8touchgfx6muldivElll+0x50>

0801b59a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b59a:	2002      	movs	r0, #2
 801b59c:	4770      	bx	lr

0801b59e <_ZN8touchgfx6ScreenD1Ev>:
 801b59e:	4770      	bx	lr

0801b5a0 <_ZN8touchgfx12GestureEventD1Ev>:
 801b5a0:	4770      	bx	lr

0801b5a2 <_ZN8touchgfx12GestureEventD0Ev>:
 801b5a2:	b510      	push	{r4, lr}
 801b5a4:	4604      	mov	r4, r0
 801b5a6:	210c      	movs	r1, #12
 801b5a8:	f00c fda6 	bl	80280f8 <_ZdlPvj>
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	bd10      	pop	{r4, pc}

0801b5b0 <_ZN8touchgfx6ScreenD0Ev>:
 801b5b0:	b510      	push	{r4, lr}
 801b5b2:	4604      	mov	r4, r0
 801b5b4:	213c      	movs	r1, #60	@ 0x3c
 801b5b6:	f00c fd9f 	bl	80280f8 <_ZdlPvj>
 801b5ba:	4620      	mov	r0, r4
 801b5bc:	bd10      	pop	{r4, pc}
	...

0801b5c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b5c0:	b530      	push	{r4, r5, lr}
 801b5c2:	460d      	mov	r5, r1
 801b5c4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b5c6:	b087      	sub	sp, #28
 801b5c8:	4604      	mov	r4, r0
 801b5ca:	b301      	cbz	r1, 801b60e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b5cc:	a801      	add	r0, sp, #4
 801b5ce:	f7ff fb2d 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5d2:	892a      	ldrh	r2, [r5, #8]
 801b5d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b5d8:	7928      	ldrb	r0, [r5, #4]
 801b5da:	1ad2      	subs	r2, r2, r3
 801b5dc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b5de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b5e2:	441a      	add	r2, r3
 801b5e4:	896b      	ldrh	r3, [r5, #10]
 801b5e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b5ea:	f88d 0010 	strb.w	r0, [sp, #16]
 801b5ee:	1b5b      	subs	r3, r3, r5
 801b5f0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b5f2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b5f4:	442b      	add	r3, r5
 801b5f6:	4d07      	ldr	r5, [pc, #28]	@ (801b614 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b5f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b5fc:	a903      	add	r1, sp, #12
 801b5fe:	9503      	str	r5, [sp, #12]
 801b600:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b604:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b608:	6803      	ldr	r3, [r0, #0]
 801b60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b60c:	4798      	blx	r3
 801b60e:	b007      	add	sp, #28
 801b610:	bd30      	pop	{r4, r5, pc}
 801b612:	bf00      	nop
 801b614:	0802d5c4 	.word	0x0802d5c4

0801b618 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b61c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b61e:	b08a      	sub	sp, #40	@ 0x28
 801b620:	4604      	mov	r4, r0
 801b622:	460d      	mov	r5, r1
 801b624:	b113      	cbz	r3, 801b62c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b626:	790b      	ldrb	r3, [r1, #4]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d044      	beq.n	801b6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b62c:	f104 0804 	add.w	r8, r4, #4
 801b630:	a803      	add	r0, sp, #12
 801b632:	4641      	mov	r1, r8
 801b634:	f7ff fafa 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b638:	792b      	ldrb	r3, [r5, #4]
 801b63a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b63e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b642:	b983      	cbnz	r3, 801b666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b644:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b648:	892a      	ldrh	r2, [r5, #8]
 801b64a:	88e9      	ldrh	r1, [r5, #6]
 801b64c:	4640      	mov	r0, r8
 801b64e:	1b92      	subs	r2, r2, r6
 801b650:	9301      	str	r3, [sp, #4]
 801b652:	1bc9      	subs	r1, r1, r7
 801b654:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b658:	b212      	sxth	r2, r2
 801b65a:	9300      	str	r3, [sp, #0]
 801b65c:	b209      	sxth	r1, r1
 801b65e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b662:	f7f6 fc37 	bl	8011ed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b666:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b668:	b329      	cbz	r1, 801b6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b66a:	a805      	add	r0, sp, #20
 801b66c:	f7ff fade 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b670:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b674:	792b      	ldrb	r3, [r5, #4]
 801b676:	a907      	add	r1, sp, #28
 801b678:	1abf      	subs	r7, r7, r2
 801b67a:	88ea      	ldrh	r2, [r5, #6]
 801b67c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b67e:	4417      	add	r7, r2
 801b680:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b682:	f88d 3020 	strb.w	r3, [sp, #32]
 801b686:	4417      	add	r7, r2
 801b688:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b68c:	1ab6      	subs	r6, r6, r2
 801b68e:	892a      	ldrh	r2, [r5, #8]
 801b690:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b694:	4416      	add	r6, r2
 801b696:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b698:	4416      	add	r6, r2
 801b69a:	4a08      	ldr	r2, [pc, #32]	@ (801b6bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b69c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b6a0:	2600      	movs	r6, #0
 801b6a2:	9207      	str	r2, [sp, #28]
 801b6a4:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b6a8:	6803      	ldr	r3, [r0, #0]
 801b6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b6ac:	4798      	blx	r3
 801b6ae:	792b      	ldrb	r3, [r5, #4]
 801b6b0:	b10b      	cbz	r3, 801b6b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b6b2:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b6b6:	b00a      	add	sp, #40	@ 0x28
 801b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6bc:	0802ccbc 	.word	0x0802ccbc

0801b6c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c4:	460c      	mov	r4, r1
 801b6c6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b6c8:	b088      	sub	sp, #32
 801b6ca:	4605      	mov	r5, r0
 801b6cc:	2900      	cmp	r1, #0
 801b6ce:	d06d      	beq.n	801b7ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b6d0:	4668      	mov	r0, sp
 801b6d2:	f7ff faab 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b6d6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b6d8:	88e3      	ldrh	r3, [r4, #6]
 801b6da:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b6de:	440b      	add	r3, r1
 801b6e0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b6e4:	b21b      	sxth	r3, r3
 801b6e6:	4543      	cmp	r3, r8
 801b6e8:	db31      	blt.n	801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6ea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b6ee:	44c4      	add	ip, r8
 801b6f0:	fa0f fc8c 	sxth.w	ip, ip
 801b6f4:	4563      	cmp	r3, ip
 801b6f6:	da2a      	bge.n	801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b6f8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b6fa:	8926      	ldrh	r6, [r4, #8]
 801b6fc:	4416      	add	r6, r2
 801b6fe:	b236      	sxth	r6, r6
 801b700:	42be      	cmp	r6, r7
 801b702:	db24      	blt.n	801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b704:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b708:	4438      	add	r0, r7
 801b70a:	b200      	sxth	r0, r0
 801b70c:	4286      	cmp	r6, r0
 801b70e:	da1e      	bge.n	801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b710:	8963      	ldrh	r3, [r4, #10]
 801b712:	4419      	add	r1, r3
 801b714:	b209      	sxth	r1, r1
 801b716:	4541      	cmp	r1, r8
 801b718:	db08      	blt.n	801b72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b71a:	4561      	cmp	r1, ip
 801b71c:	da06      	bge.n	801b72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b71e:	89a3      	ldrh	r3, [r4, #12]
 801b720:	441a      	add	r2, r3
 801b722:	b212      	sxth	r2, r2
 801b724:	42ba      	cmp	r2, r7
 801b726:	db01      	blt.n	801b72c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b728:	4282      	cmp	r2, r0
 801b72a:	db10      	blt.n	801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b72c:	4b21      	ldr	r3, [pc, #132]	@ (801b7b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b72e:	a904      	add	r1, sp, #16
 801b730:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b732:	9304      	str	r3, [sp, #16]
 801b734:	2302      	movs	r3, #2
 801b736:	f88d 3014 	strb.w	r3, [sp, #20]
 801b73a:	2300      	movs	r3, #0
 801b73c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b740:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b744:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b748:	6803      	ldr	r3, [r0, #0]
 801b74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b74c:	4798      	blx	r3
 801b74e:	1d29      	adds	r1, r5, #4
 801b750:	a802      	add	r0, sp, #8
 801b752:	f7ff fa6b 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b756:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b75a:	88e0      	ldrh	r0, [r4, #6]
 801b75c:	eba3 0808 	sub.w	r8, r3, r8
 801b760:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b764:	7921      	ldrb	r1, [r4, #4]
 801b766:	fa1f f888 	uxth.w	r8, r8
 801b76a:	1bdf      	subs	r7, r3, r7
 801b76c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b770:	b2bb      	uxth	r3, r7
 801b772:	4440      	add	r0, r8
 801b774:	8922      	ldrh	r2, [r4, #8]
 801b776:	8967      	ldrh	r7, [r4, #10]
 801b778:	4460      	add	r0, ip
 801b77a:	89a4      	ldrh	r4, [r4, #12]
 801b77c:	441a      	add	r2, r3
 801b77e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b780:	44b8      	add	r8, r7
 801b782:	4423      	add	r3, r4
 801b784:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b788:	4432      	add	r2, r6
 801b78a:	44e0      	add	r8, ip
 801b78c:	4433      	add	r3, r6
 801b78e:	4c0a      	ldr	r4, [pc, #40]	@ (801b7b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b790:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b792:	f88d 1014 	strb.w	r1, [sp, #20]
 801b796:	a904      	add	r1, sp, #16
 801b798:	9404      	str	r4, [sp, #16]
 801b79a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b79e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b7a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b7a6:	6803      	ldr	r3, [r0, #0]
 801b7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b7aa:	4798      	blx	r3
 801b7ac:	b008      	add	sp, #32
 801b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b2:	bf00      	nop
 801b7b4:	0802ccbc 	.word	0x0802ccbc
 801b7b8:	0802ccd0 	.word	0x0802ccd0

0801b7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7be:	4604      	mov	r4, r0
 801b7c0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b7c4:	3201      	adds	r2, #1
 801b7c6:	d112      	bne.n	801b7ee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b7c8:	2500      	movs	r5, #0
 801b7ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b7ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b7d2:	6803      	ldr	r3, [r0, #0]
 801b7d4:	9500      	str	r5, [sp, #0]
 801b7d6:	466d      	mov	r5, sp
 801b7d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b7dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b7e0:	4629      	mov	r1, r5
 801b7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7e4:	4798      	blx	r3
 801b7e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b7ea:	e884 0003 	stmia.w	r4, {r0, r1}
 801b7ee:	4620      	mov	r0, r4
 801b7f0:	b003      	add	sp, #12
 801b7f2:	bd30      	pop	{r4, r5, pc}

0801b7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b7f4:	b513      	push	{r0, r1, r4, lr}
 801b7f6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b7fa:	4604      	mov	r4, r0
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	d109      	bne.n	801b814 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b800:	4601      	mov	r1, r0
 801b802:	4668      	mov	r0, sp
 801b804:	f7ff fa12 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b808:	f8bd 3000 	ldrh.w	r3, [sp]
 801b80c:	8423      	strh	r3, [r4, #32]
 801b80e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b812:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b814:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b818:	b002      	add	sp, #8
 801b81a:	bd10      	pop	{r4, pc}

0801b81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b81c:	b513      	push	{r0, r1, r4, lr}
 801b81e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b822:	4604      	mov	r4, r0
 801b824:	3301      	adds	r3, #1
 801b826:	d109      	bne.n	801b83c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b828:	4601      	mov	r1, r0
 801b82a:	4668      	mov	r0, sp
 801b82c:	f7ff f9fe 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b830:	f8bd 3000 	ldrh.w	r3, [sp]
 801b834:	8423      	strh	r3, [r4, #32]
 801b836:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b83a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b83c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b840:	b002      	add	sp, #8
 801b842:	bd10      	pop	{r4, pc}

0801b844 <_ZN8touchgfx6ScreenC1Ev>:
 801b844:	b570      	push	{r4, r5, r6, lr}
 801b846:	4b17      	ldr	r3, [pc, #92]	@ (801b8a4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b848:	4605      	mov	r5, r0
 801b84a:	4a17      	ldr	r2, [pc, #92]	@ (801b8a8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b84c:	2101      	movs	r1, #1
 801b84e:	f845 3b04 	str.w	r3, [r5], #4
 801b852:	2300      	movs	r3, #0
 801b854:	6042      	str	r2, [r0, #4]
 801b856:	4604      	mov	r4, r0
 801b858:	8103      	strh	r3, [r0, #8]
 801b85a:	8143      	strh	r3, [r0, #10]
 801b85c:	8183      	strh	r3, [r0, #12]
 801b85e:	81c3      	strh	r3, [r0, #14]
 801b860:	8203      	strh	r3, [r0, #16]
 801b862:	8243      	strh	r3, [r0, #18]
 801b864:	8283      	strh	r3, [r0, #20]
 801b866:	82c3      	strh	r3, [r0, #22]
 801b868:	6203      	str	r3, [r0, #32]
 801b86a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b86c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b86e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b872:	6343      	str	r3, [r0, #52]	@ 0x34
 801b874:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b878:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b87c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b880:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b884:	4b09      	ldr	r3, [pc, #36]	@ (801b8ac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b886:	4628      	mov	r0, r5
 801b888:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b88c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b88e:	4a08      	ldr	r2, [pc, #32]	@ (801b8b0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b890:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b894:	4798      	blx	r3
 801b896:	6863      	ldr	r3, [r4, #4]
 801b898:	4628      	mov	r0, r5
 801b89a:	4631      	mov	r1, r6
 801b89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b89e:	4798      	blx	r3
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	bd70      	pop	{r4, r5, r6, pc}
 801b8a4:	0802d5d8 	.word	0x0802d5d8
 801b8a8:	0802cc2c 	.word	0x0802cc2c
 801b8ac:	24028516 	.word	0x24028516
 801b8b0:	24028514 	.word	0x24028514

0801b8b4 <_ZN8touchgfx6Screen4drawEv>:
 801b8b4:	4b09      	ldr	r3, [pc, #36]	@ (801b8dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b8b6:	b507      	push	{r0, r1, r2, lr}
 801b8b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8bc:	2100      	movs	r1, #0
 801b8be:	4b08      	ldr	r3, [pc, #32]	@ (801b8e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b8c0:	9100      	str	r1, [sp, #0]
 801b8c2:	4669      	mov	r1, sp
 801b8c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b8cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b8d0:	6803      	ldr	r3, [r0, #0]
 801b8d2:	689b      	ldr	r3, [r3, #8]
 801b8d4:	4798      	blx	r3
 801b8d6:	b003      	add	sp, #12
 801b8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b8dc:	24028514 	.word	0x24028514
 801b8e0:	24028516 	.word	0x24028516

0801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b8ec:	b089      	sub	sp, #36	@ 0x24
 801b8ee:	4680      	mov	r8, r0
 801b8f0:	460c      	mov	r4, r1
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	4615      	mov	r5, r2
 801b8f6:	dd0e      	ble.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b8f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	dd0a      	ble.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b900:	4628      	mov	r0, r5
 801b902:	f7ff ff5b 	bl	801b7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b906:	4621      	mov	r1, r4
 801b908:	f7fd ff99 	bl	801983e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b90c:	69eb      	ldr	r3, [r5, #28]
 801b90e:	b928      	cbnz	r0, 801b91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b910:	461d      	mov	r5, r3
 801b912:	2b00      	cmp	r3, #0
 801b914:	d1f4      	bne.n	801b900 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b916:	b009      	add	sp, #36	@ 0x24
 801b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b91c:	ae04      	add	r6, sp, #16
 801b91e:	2b00      	cmp	r3, #0
 801b920:	f000 80b5 	beq.w	801ba8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b924:	682b      	ldr	r3, [r5, #0]
 801b926:	4629      	mov	r1, r5
 801b928:	a802      	add	r0, sp, #8
 801b92a:	68db      	ldr	r3, [r3, #12]
 801b92c:	4798      	blx	r3
 801b92e:	4628      	mov	r0, r5
 801b930:	f7ff ff60 	bl	801b7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b934:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b938:	4407      	add	r7, r0
 801b93a:	4628      	mov	r0, r5
 801b93c:	f7ff ff6e 	bl	801b81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b940:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b944:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b948:	b23f      	sxth	r7, r7
 801b94a:	4418      	add	r0, r3
 801b94c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b950:	4621      	mov	r1, r4
 801b952:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b956:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b95a:	4630      	mov	r0, r6
 801b95c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b960:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b964:	f7f6 fb98 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801b968:	4628      	mov	r0, r5
 801b96a:	f7ff ff27 	bl	801b7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b96e:	ab06      	add	r3, sp, #24
 801b970:	4602      	mov	r2, r0
 801b972:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b976:	e883 0003 	stmia.w	r3, {r0, r1}
 801b97a:	4611      	mov	r1, r2
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7f6 fb8b 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801b982:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b986:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b98a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b98e:	4299      	cmp	r1, r3
 801b990:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b994:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b998:	d10b      	bne.n	801b9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b99a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b99e:	4552      	cmp	r2, sl
 801b9a0:	d107      	bne.n	801b9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b9a6:	455a      	cmp	r2, fp
 801b9a8:	d103      	bne.n	801b9b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b9aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b9ae:	454a      	cmp	r2, r9
 801b9b0:	d06d      	beq.n	801ba8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b9b2:	f1bb 0f00 	cmp.w	fp, #0
 801b9b6:	dd65      	ble.n	801ba84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9b8:	f1b9 0f00 	cmp.w	r9, #0
 801b9bc:	dd62      	ble.n	801ba84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b9be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b9c2:	fa1f f08a 	uxth.w	r0, sl
 801b9c6:	4552      	cmp	r2, sl
 801b9c8:	9000      	str	r0, [sp, #0]
 801b9ca:	da12      	bge.n	801b9f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b9cc:	9301      	str	r3, [sp, #4]
 801b9ce:	9b00      	ldr	r3, [sp, #0]
 801b9d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b9d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b9d8:	1a9a      	subs	r2, r3, r2
 801b9da:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b9de:	4631      	mov	r1, r6
 801b9e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b9e4:	4640      	mov	r0, r8
 801b9e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b9ea:	69ea      	ldr	r2, [r5, #28]
 801b9ec:	f7ff ff7a 	bl	801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9f0:	9b01      	ldr	r3, [sp, #4]
 801b9f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b9f6:	b29f      	uxth	r7, r3
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	da0d      	bge.n	801ba18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b9fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba00:	1aba      	subs	r2, r7, r2
 801ba02:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba06:	4631      	mov	r1, r6
 801ba08:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ba0c:	4640      	mov	r0, r8
 801ba0e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba12:	69ea      	ldr	r2, [r5, #28]
 801ba14:	f7ff ff66 	bl	801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba18:	8822      	ldrh	r2, [r4, #0]
 801ba1a:	445f      	add	r7, fp
 801ba1c:	88a3      	ldrh	r3, [r4, #4]
 801ba1e:	b2bf      	uxth	r7, r7
 801ba20:	4413      	add	r3, r2
 801ba22:	b23a      	sxth	r2, r7
 801ba24:	b29b      	uxth	r3, r3
 801ba26:	b219      	sxth	r1, r3
 801ba28:	4291      	cmp	r1, r2
 801ba2a:	dd0d      	ble.n	801ba48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ba2c:	1bdb      	subs	r3, r3, r7
 801ba2e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ba32:	f8ad a012 	strh.w	sl, [sp, #18]
 801ba36:	4631      	mov	r1, r6
 801ba38:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba3c:	4640      	mov	r0, r8
 801ba3e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ba42:	69ea      	ldr	r2, [r5, #28]
 801ba44:	f7ff ff4e 	bl	801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba48:	88e2      	ldrh	r2, [r4, #6]
 801ba4a:	8863      	ldrh	r3, [r4, #2]
 801ba4c:	4413      	add	r3, r2
 801ba4e:	9a00      	ldr	r2, [sp, #0]
 801ba50:	444a      	add	r2, r9
 801ba52:	b29b      	uxth	r3, r3
 801ba54:	fa1f f982 	uxth.w	r9, r2
 801ba58:	b219      	sxth	r1, r3
 801ba5a:	fa0f f289 	sxth.w	r2, r9
 801ba5e:	428a      	cmp	r2, r1
 801ba60:	da15      	bge.n	801ba8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ba62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ba66:	eba3 0309 	sub.w	r3, r3, r9
 801ba6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ba6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ba72:	4631      	mov	r1, r6
 801ba74:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ba78:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ba7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba80:	69ea      	ldr	r2, [r5, #28]
 801ba82:	e001      	b.n	801ba88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ba84:	69ea      	ldr	r2, [r5, #28]
 801ba86:	4621      	mov	r1, r4
 801ba88:	4640      	mov	r0, r8
 801ba8a:	f7ff ff2b 	bl	801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba8e:	4628      	mov	r0, r5
 801ba90:	f7ff fe94 	bl	801b7bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ba94:	6861      	ldr	r1, [r4, #4]
 801ba96:	4602      	mov	r2, r0
 801ba98:	4633      	mov	r3, r6
 801ba9a:	6820      	ldr	r0, [r4, #0]
 801ba9c:	c303      	stmia	r3!, {r0, r1}
 801ba9e:	4611      	mov	r1, r2
 801baa0:	4630      	mov	r0, r6
 801baa2:	f7f6 faf9 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801baa6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	f77f af33 	ble.w	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bab0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	f77f af2e 	ble.w	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801baba:	4628      	mov	r0, r5
 801babc:	f7ff fe9a 	bl	801b7f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bac0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bac4:	1a18      	subs	r0, r3, r0
 801bac6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801baca:	4628      	mov	r0, r5
 801bacc:	f7ff fea6 	bl	801b81c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bad0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bad4:	4631      	mov	r1, r6
 801bad6:	1a18      	subs	r0, r3, r0
 801bad8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801badc:	4628      	mov	r0, r5
 801bade:	682b      	ldr	r3, [r5, #0]
 801bae0:	689b      	ldr	r3, [r3, #8]
 801bae2:	4798      	blx	r3
 801bae4:	e717      	b.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801bae6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bae6:	b570      	push	{r4, r5, r6, lr}
 801bae8:	1d06      	adds	r6, r0, #4
 801baea:	b086      	sub	sp, #24
 801baec:	460c      	mov	r4, r1
 801baee:	2300      	movs	r3, #0
 801baf0:	4631      	mov	r1, r6
 801baf2:	4605      	mov	r5, r0
 801baf4:	a802      	add	r0, sp, #8
 801baf6:	9301      	str	r3, [sp, #4]
 801baf8:	f7ff f898 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bafc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bb00:	8822      	ldrh	r2, [r4, #0]
 801bb02:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801bb06:	1ad2      	subs	r2, r2, r3
 801bb08:	8863      	ldrh	r3, [r4, #2]
 801bb0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bb0e:	1a5b      	subs	r3, r3, r1
 801bb10:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bb14:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bb18:	aa01      	add	r2, sp, #4
 801bb1a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bb1e:	4630      	mov	r0, r6
 801bb20:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bb24:	a904      	add	r1, sp, #16
 801bb26:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bb2a:	f7f6 fb8d 	bl	8012248 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bb2e:	9a01      	ldr	r2, [sp, #4]
 801bb30:	b11a      	cbz	r2, 801bb3a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801bb32:	4621      	mov	r1, r4
 801bb34:	4628      	mov	r0, r5
 801bb36:	f7ff fed5 	bl	801b8e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bb3a:	b006      	add	sp, #24
 801bb3c:	bd70      	pop	{r4, r5, r6, pc}

0801bb3e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bb3e:	4602      	mov	r2, r0
 801bb40:	b530      	push	{r4, r5, lr}
 801bb42:	4604      	mov	r4, r0
 801bb44:	b085      	sub	sp, #20
 801bb46:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bb4a:	460d      	mov	r5, r1
 801bb4c:	466b      	mov	r3, sp
 801bb4e:	6851      	ldr	r1, [r2, #4]
 801bb50:	c303      	stmia	r3!, {r0, r1}
 801bb52:	4629      	mov	r1, r5
 801bb54:	4668      	mov	r0, sp
 801bb56:	f7f6 fa9f 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 801bb5a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801bb5e:	b12b      	cbz	r3, 801bb6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801bb60:	4669      	mov	r1, sp
 801bb62:	4620      	mov	r0, r4
 801bb64:	f7ff ffbf 	bl	801bae6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bb68:	b005      	add	sp, #20
 801bb6a:	bd30      	pop	{r4, r5, pc}
 801bb6c:	3404      	adds	r4, #4
 801bb6e:	a802      	add	r0, sp, #8
 801bb70:	4621      	mov	r1, r4
 801bb72:	f7ff f85b 	bl	801ac2c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bb76:	f8bd 3000 	ldrh.w	r3, [sp]
 801bb7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb7e:	4669      	mov	r1, sp
 801bb80:	4620      	mov	r0, r4
 801bb82:	1a9b      	subs	r3, r3, r2
 801bb84:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bb88:	f8ad 3000 	strh.w	r3, [sp]
 801bb8c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bb90:	1a9b      	subs	r3, r3, r2
 801bb92:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bb96:	f7f6 fb1e 	bl	80121d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bb9a:	e7e5      	b.n	801bb68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801bb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bb9c:	460b      	mov	r3, r1
 801bb9e:	680a      	ldr	r2, [r1, #0]
 801bba0:	1d01      	adds	r1, r0, #4
 801bba2:	6992      	ldr	r2, [r2, #24]
 801bba4:	4618      	mov	r0, r3
 801bba6:	4710      	bx	r2

0801bba8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801bba8:	4298      	cmp	r0, r3
 801bbaa:	d200      	bcs.n	801bbae <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801bbac:	b913      	cbnz	r3, 801bbb4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801bbae:	440a      	add	r2, r1
 801bbb0:	b210      	sxth	r0, r2
 801bbb2:	4770      	bx	lr
 801bbb4:	ee07 0a90 	vmov	s15, r0
 801bbb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbbc:	ee07 3a90 	vmov	s15, r3
 801bbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbc8:	ee07 2a90 	vmov	s15, r2
 801bbcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bbd0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bbd4:	ee07 1a90 	vmov	s15, r1
 801bbd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbdc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bbe0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801bbe4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801bbe8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bbec:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bbf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf8:	bfcc      	ite	gt
 801bbfa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bbfe:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bc02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc06:	ee17 3a90 	vmov	r3, s15
 801bc0a:	b218      	sxth	r0, r3
 801bc0c:	4770      	bx	lr

0801bc0e <_ZN8touchgfx12TextProviderC1Ev>:
 801bc0e:	b538      	push	{r3, r4, r5, lr}
 801bc10:	2500      	movs	r5, #0
 801bc12:	2302      	movs	r3, #2
 801bc14:	4604      	mov	r4, r0
 801bc16:	220e      	movs	r2, #14
 801bc18:	7403      	strb	r3, [r0, #16]
 801bc1a:	4629      	mov	r1, r5
 801bc1c:	6145      	str	r5, [r0, #20]
 801bc1e:	7605      	strb	r5, [r0, #24]
 801bc20:	83c5      	strh	r5, [r0, #30]
 801bc22:	8405      	strh	r5, [r0, #32]
 801bc24:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801bc26:	8705      	strh	r5, [r0, #56]	@ 0x38
 801bc28:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801bc2a:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801bc2e:	e9c0 5500 	strd	r5, r5, [r0]
 801bc32:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801bc36:	304c      	adds	r0, #76	@ 0x4c
 801bc38:	f00d f872 	bl	8028d20 <memset>
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	4620      	mov	r0, r4
 801bc40:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801bc44:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bc48:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801bc4c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801bc50:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801bc54:	f7ec fc84 	bl	8008560 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bc58:	4620      	mov	r0, r4
 801bc5a:	bd38      	pop	{r3, r4, r5, pc}

0801bc5c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801bc5c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801bc5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bc62:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801bc64:	fab0 f080 	clz	r0, r0
 801bc68:	0940      	lsrs	r0, r0, #5
 801bc6a:	4770      	bx	lr

0801bc6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bc6c:	b530      	push	{r4, r5, lr}
 801bc6e:	2500      	movs	r5, #0
 801bc70:	2401      	movs	r4, #1
 801bc72:	6843      	ldr	r3, [r0, #4]
 801bc74:	b913      	cbnz	r3, 801bc7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bc76:	6803      	ldr	r3, [r0, #0]
 801bc78:	b313      	cbz	r3, 801bcc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bc7a:	6043      	str	r3, [r0, #4]
 801bc7c:	7e03      	ldrb	r3, [r0, #24]
 801bc7e:	b143      	cbz	r3, 801bc92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bc80:	6943      	ldr	r3, [r0, #20]
 801bc82:	b12b      	cbz	r3, 801bc90 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bc84:	881a      	ldrh	r2, [r3, #0]
 801bc86:	b11a      	cbz	r2, 801bc90 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bc88:	1c9a      	adds	r2, r3, #2
 801bc8a:	6142      	str	r2, [r0, #20]
 801bc8c:	8818      	ldrh	r0, [r3, #0]
 801bc8e:	bd30      	pop	{r4, r5, pc}
 801bc90:	7605      	strb	r5, [r0, #24]
 801bc92:	6843      	ldr	r3, [r0, #4]
 801bc94:	8819      	ldrh	r1, [r3, #0]
 801bc96:	b199      	cbz	r1, 801bcc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bc98:	1c9a      	adds	r2, r3, #2
 801bc9a:	2902      	cmp	r1, #2
 801bc9c:	6042      	str	r2, [r0, #4]
 801bc9e:	d1f5      	bne.n	801bc8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bca0:	7c03      	ldrb	r3, [r0, #16]
 801bca2:	2b01      	cmp	r3, #1
 801bca4:	d8e5      	bhi.n	801bc72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bca6:	1c5a      	adds	r2, r3, #1
 801bca8:	3302      	adds	r3, #2
 801bcaa:	7402      	strb	r2, [r0, #16]
 801bcac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bcb0:	6143      	str	r3, [r0, #20]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d0dd      	beq.n	801bc72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcb6:	881b      	ldrh	r3, [r3, #0]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d0da      	beq.n	801bc72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcbc:	7604      	strb	r4, [r0, #24]
 801bcbe:	e7d8      	b.n	801bc72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bcc0:	2000      	movs	r0, #0
 801bcc2:	e7e4      	b.n	801bc8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801bcc4:	6001      	str	r1, [r0, #0]
 801bcc6:	2100      	movs	r1, #0
 801bcc8:	b430      	push	{r4, r5}
 801bcca:	6041      	str	r1, [r0, #4]
 801bccc:	6815      	ldr	r5, [r2, #0]
 801bcce:	6085      	str	r5, [r0, #8]
 801bcd0:	6852      	ldr	r2, [r2, #4]
 801bcd2:	6443      	str	r3, [r0, #68]	@ 0x44
 801bcd4:	9b02      	ldr	r3, [sp, #8]
 801bcd6:	60c2      	str	r2, [r0, #12]
 801bcd8:	7401      	strb	r1, [r0, #16]
 801bcda:	6141      	str	r1, [r0, #20]
 801bcdc:	7601      	strb	r1, [r0, #24]
 801bcde:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bce0:	8401      	strh	r1, [r0, #32]
 801bce2:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801bce6:	6483      	str	r3, [r0, #72]	@ 0x48
 801bce8:	bc30      	pop	{r4, r5}
 801bcea:	f7ec bc39 	b.w	8008560 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bcee <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801bcee:	b408      	push	{r3}
 801bcf0:	b510      	push	{r4, lr}
 801bcf2:	b085      	sub	sp, #20
 801bcf4:	ac07      	add	r4, sp, #28
 801bcf6:	f854 3b04 	ldr.w	r3, [r4], #4
 801bcfa:	9300      	str	r3, [sp, #0]
 801bcfc:	4613      	mov	r3, r2
 801bcfe:	4622      	mov	r2, r4
 801bd00:	9403      	str	r4, [sp, #12]
 801bd02:	f7ff ffdf 	bl	801bcc4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bd06:	b005      	add	sp, #20
 801bd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd0c:	b001      	add	sp, #4
 801bd0e:	4770      	bx	lr

0801bd10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd12:	4605      	mov	r5, r0
 801bd14:	4608      	mov	r0, r1
 801bd16:	b1f1      	cbz	r1, 801bd56 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bd18:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801bd1c:	460b      	mov	r3, r1
 801bd1e:	f101 0708 	add.w	r7, r1, #8
 801bd22:	4622      	mov	r2, r4
 801bd24:	6818      	ldr	r0, [r3, #0]
 801bd26:	3308      	adds	r3, #8
 801bd28:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bd2c:	4626      	mov	r6, r4
 801bd2e:	42bb      	cmp	r3, r7
 801bd30:	c603      	stmia	r6!, {r0, r1}
 801bd32:	4634      	mov	r4, r6
 801bd34:	d1f6      	bne.n	801bd24 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bd36:	6818      	ldr	r0, [r3, #0]
 801bd38:	6030      	str	r0, [r6, #0]
 801bd3a:	4610      	mov	r0, r2
 801bd3c:	889b      	ldrh	r3, [r3, #4]
 801bd3e:	80b3      	strh	r3, [r6, #4]
 801bd40:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bd44:	015b      	lsls	r3, r3, #5
 801bd46:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bd4a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801bd4e:	430b      	orrs	r3, r1
 801bd50:	425b      	negs	r3, r3
 801bd52:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bd58:	b538      	push	{r3, r4, r5, lr}
 801bd5a:	460c      	mov	r4, r1
 801bd5c:	6811      	ldr	r1, [r2, #0]
 801bd5e:	4610      	mov	r0, r2
 801bd60:	68cd      	ldr	r5, [r1, #12]
 801bd62:	4619      	mov	r1, r3
 801bd64:	47a8      	blx	r5
 801bd66:	2800      	cmp	r0, #0
 801bd68:	bf08      	it	eq
 801bd6a:	4620      	moveq	r0, r4
 801bd6c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bd70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd74:	468c      	mov	ip, r1
 801bd76:	4604      	mov	r4, r0
 801bd78:	4615      	mov	r5, r2
 801bd7a:	b942      	cbnz	r2, 801bd8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801bd7c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801bd80:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801bd84:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801bd88:	4628      	mov	r0, r5
 801bd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd8e:	7b50      	ldrb	r0, [r2, #13]
 801bd90:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801bd94:	8893      	ldrh	r3, [r2, #4]
 801bd96:	0106      	lsls	r6, r0, #4
 801bd98:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bd9c:	79ee      	ldrb	r6, [r5, #7]
 801bd9e:	4316      	orrs	r6, r2
 801bda0:	185a      	adds	r2, r3, r1
 801bda2:	b291      	uxth	r1, r2
 801bda4:	b2b7      	uxth	r7, r6
 801bda6:	291d      	cmp	r1, #29
 801bda8:	d87f      	bhi.n	801beaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801bdaa:	2201      	movs	r2, #1
 801bdac:	10f6      	asrs	r6, r6, #3
 801bdae:	408a      	lsls	r2, r1
 801bdb0:	4974      	ldr	r1, [pc, #464]	@ (801bf84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801bdb2:	420a      	tst	r2, r1
 801bdb4:	d12e      	bne.n	801be14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801bdb6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801bdba:	d076      	beq.n	801beaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801bdbc:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801bdc0:	462b      	mov	r3, r5
 801bdc2:	f105 0e08 	add.w	lr, r5, #8
 801bdc6:	4615      	mov	r5, r2
 801bdc8:	6818      	ldr	r0, [r3, #0]
 801bdca:	3308      	adds	r3, #8
 801bdcc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bdd0:	4694      	mov	ip, r2
 801bdd2:	4573      	cmp	r3, lr
 801bdd4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bdd8:	4662      	mov	r2, ip
 801bdda:	d1f5      	bne.n	801bdc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bddc:	6818      	ldr	r0, [r3, #0]
 801bdde:	f8cc 0000 	str.w	r0, [ip]
 801bde2:	889b      	ldrh	r3, [r3, #4]
 801bde4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bde8:	b2b3      	uxth	r3, r6
 801bdea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801bdee:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801bdf2:	1aca      	subs	r2, r1, r3
 801bdf4:	1bcf      	subs	r7, r1, r7
 801bdf6:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801bdfa:	b292      	uxth	r2, r2
 801bdfc:	1afb      	subs	r3, r7, r3
 801bdfe:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801be02:	10d2      	asrs	r2, r2, #3
 801be04:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801be08:	4302      	orrs	r2, r0
 801be0a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801be0e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801be12:	e7b9      	b.n	801bd88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801be14:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801be18:	462b      	mov	r3, r5
 801be1a:	f105 0808 	add.w	r8, r5, #8
 801be1e:	4615      	mov	r5, r2
 801be20:	6818      	ldr	r0, [r3, #0]
 801be22:	3308      	adds	r3, #8
 801be24:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801be28:	4696      	mov	lr, r2
 801be2a:	4543      	cmp	r3, r8
 801be2c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801be30:	4672      	mov	r2, lr
 801be32:	d1f5      	bne.n	801be20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801be34:	6818      	ldr	r0, [r3, #0]
 801be36:	f8ce 0000 	str.w	r0, [lr]
 801be3a:	889b      	ldrh	r3, [r3, #4]
 801be3c:	f8ae 3004 	strh.w	r3, [lr, #4]
 801be40:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801be42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801be46:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801be48:	f640 6333 	movw	r3, #3635	@ 0xe33
 801be4c:	4299      	cmp	r1, r3
 801be4e:	d111      	bne.n	801be74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801be50:	f8dc 3000 	ldr.w	r3, [ip]
 801be54:	4660      	mov	r0, ip
 801be56:	68db      	ldr	r3, [r3, #12]
 801be58:	4798      	blx	r3
 801be5a:	7b41      	ldrb	r1, [r0, #13]
 801be5c:	00cb      	lsls	r3, r1, #3
 801be5e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801be62:	7a03      	ldrb	r3, [r0, #8]
 801be64:	4313      	orrs	r3, r2
 801be66:	064a      	lsls	r2, r1, #25
 801be68:	bf44      	itt	mi
 801be6a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be6e:	b21b      	sxthmi	r3, r3
 801be70:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801be74:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801be78:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801be7c:	443b      	add	r3, r7
 801be7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801be82:	4433      	add	r3, r6
 801be84:	b29b      	uxth	r3, r3
 801be86:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801be8a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801be8e:	10db      	asrs	r3, r3, #3
 801be90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801be94:	4313      	orrs	r3, r2
 801be96:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801be9a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801be9e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801bea2:	1a9b      	subs	r3, r3, r2
 801bea4:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801bea8:	e76e      	b.n	801bd88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801beaa:	f023 0204 	bic.w	r2, r3, #4
 801beae:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801beb2:	428a      	cmp	r2, r1
 801beb4:	d003      	beq.n	801bebe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801beb6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801beba:	4293      	cmp	r3, r2
 801bebc:	d120      	bne.n	801bf00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801bebe:	3b01      	subs	r3, #1
 801bec0:	4662      	mov	r2, ip
 801bec2:	4629      	mov	r1, r5
 801bec4:	4620      	mov	r0, r4
 801bec6:	b29b      	uxth	r3, r3
 801bec8:	f7ff ff46 	bl	801bd58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801becc:	7b41      	ldrb	r1, [r0, #13]
 801bece:	00cb      	lsls	r3, r1, #3
 801bed0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bed4:	7a03      	ldrb	r3, [r0, #8]
 801bed6:	0648      	lsls	r0, r1, #25
 801bed8:	ea43 0302 	orr.w	r3, r3, r2
 801bedc:	bf44      	itt	mi
 801bede:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bee2:	b21b      	sxthmi	r3, r3
 801bee4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bee8:	7b6b      	ldrb	r3, [r5, #13]
 801beea:	7aaa      	ldrb	r2, [r5, #10]
 801beec:	005b      	lsls	r3, r3, #1
 801beee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bef2:	4313      	orrs	r3, r2
 801bef4:	115a      	asrs	r2, r3, #5
 801bef6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801befa:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801befe:	e032      	b.n	801bf66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801bf00:	00c2      	lsls	r2, r0, #3
 801bf02:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801bf06:	7a2a      	ldrb	r2, [r5, #8]
 801bf08:	430a      	orrs	r2, r1
 801bf0a:	0641      	lsls	r1, r0, #25
 801bf0c:	f640 6109 	movw	r1, #3593	@ 0xe09
 801bf10:	bf44      	itt	mi
 801bf12:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801bf16:	b212      	sxthmi	r2, r2
 801bf18:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801bf1c:	f023 0210 	bic.w	r2, r3, #16
 801bf20:	428a      	cmp	r2, r1
 801bf22:	d003      	beq.n	801bf2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801bf24:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bf28:	4293      	cmp	r3, r2
 801bf2a:	d129      	bne.n	801bf80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801bf2c:	7b6e      	ldrb	r6, [r5, #13]
 801bf2e:	4629      	mov	r1, r5
 801bf30:	4620      	mov	r0, r4
 801bf32:	0076      	lsls	r6, r6, #1
 801bf34:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bf38:	7aae      	ldrb	r6, [r5, #10]
 801bf3a:	4316      	orrs	r6, r2
 801bf3c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bf40:	4293      	cmp	r3, r2
 801bf42:	4662      	mov	r2, ip
 801bf44:	bf16      	itet	ne
 801bf46:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bf4a:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801bf4e:	b29b      	uxthne	r3, r3
 801bf50:	f7ff ff02 	bl	801bd58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bf54:	7b43      	ldrb	r3, [r0, #13]
 801bf56:	7a82      	ldrb	r2, [r0, #10]
 801bf58:	005b      	lsls	r3, r3, #1
 801bf5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bf5e:	4313      	orrs	r3, r2
 801bf60:	1af6      	subs	r6, r6, r3
 801bf62:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801bf66:	7b69      	ldrb	r1, [r5, #13]
 801bf68:	00cb      	lsls	r3, r1, #3
 801bf6a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bf6e:	7a2b      	ldrb	r3, [r5, #8]
 801bf70:	4313      	orrs	r3, r2
 801bf72:	064a      	lsls	r2, r1, #25
 801bf74:	bf44      	itt	mi
 801bf76:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bf7a:	b21b      	sxthmi	r3, r3
 801bf7c:	1bdb      	subs	r3, r3, r7
 801bf7e:	e746      	b.n	801be0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bf80:	2300      	movs	r3, #0
 801bf82:	e7ba      	b.n	801befa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801bf84:	3fc00079 	.word	0x3fc00079

0801bf88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bf88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf8c:	4604      	mov	r4, r0
 801bf8e:	b942      	cbnz	r2, 801bfa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bf90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bf94:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bf98:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bf9c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bfa0:	e047      	b.n	801c032 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bfa2:	7b51      	ldrb	r1, [r2, #13]
 801bfa4:	8893      	ldrh	r3, [r2, #4]
 801bfa6:	010d      	lsls	r5, r1, #4
 801bfa8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bfac:	79d5      	ldrb	r5, [r2, #7]
 801bfae:	4305      	orrs	r5, r0
 801bfb0:	2d04      	cmp	r5, #4
 801bfb2:	bfcc      	ite	gt
 801bfb4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bfb8:	f04f 0e01 	movle.w	lr, #1
 801bfbc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801bfc0:	f200 80ab 	bhi.w	801c11a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bfc4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801bfc8:	4283      	cmp	r3, r0
 801bfca:	d216      	bcs.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfcc:	f240 605b 	movw	r0, #1627	@ 0x65b
 801bfd0:	4283      	cmp	r3, r0
 801bfd2:	d859      	bhi.n	801c088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bfd4:	f240 6057 	movw	r0, #1623	@ 0x657
 801bfd8:	4283      	cmp	r3, r0
 801bfda:	d20e      	bcs.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfdc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bfe0:	d24a      	bcs.n	801c078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bfe2:	f240 604e 	movw	r0, #1614	@ 0x64e
 801bfe6:	4283      	cmp	r3, r0
 801bfe8:	d207      	bcs.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfea:	f240 601a 	movw	r0, #1562	@ 0x61a
 801bfee:	4283      	cmp	r3, r0
 801bff0:	d02a      	beq.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bff2:	d821      	bhi.n	801c038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bff4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801bff8:	d35b      	bcc.n	801c0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bffa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801bffe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c002:	f040 80d0 	bne.w	801c1a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c006:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801c00a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c00e:	f040 80ca 	bne.w	801c1a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c012:	00cb      	lsls	r3, r1, #3
 801c014:	0649      	lsls	r1, r1, #25
 801c016:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c01a:	7a13      	ldrb	r3, [r2, #8]
 801c01c:	ea43 0300 	orr.w	r3, r3, r0
 801c020:	bf44      	itt	mi
 801c022:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c026:	b21b      	sxthmi	r3, r3
 801c028:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c02c:	1b5d      	subs	r5, r3, r5
 801c02e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c032:	4610      	mov	r0, r2
 801c034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c038:	f240 604b 	movw	r0, #1611	@ 0x64b
 801c03c:	4283      	cmp	r3, r0
 801c03e:	d338      	bcc.n	801c0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c040:	f240 604c 	movw	r0, #1612	@ 0x64c
 801c044:	4283      	cmp	r3, r0
 801c046:	d9d8      	bls.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c048:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801c04c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801c050:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c054:	f040 80f3 	bne.w	801c23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c058:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c05c:	f040 80ef 	bne.w	801c23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c060:	00cb      	lsls	r3, r1, #3
 801c062:	064e      	lsls	r6, r1, #25
 801c064:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c068:	7a13      	ldrb	r3, [r2, #8]
 801c06a:	ea43 0300 	orr.w	r3, r3, r0
 801c06e:	bf44      	itt	mi
 801c070:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c074:	b21b      	sxthmi	r3, r3
 801c076:	e7d9      	b.n	801c02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c078:	f240 6054 	movw	r0, #1620	@ 0x654
 801c07c:	4283      	cmp	r3, r0
 801c07e:	d8e3      	bhi.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c080:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801c084:	d9e0      	bls.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c086:	e7b8      	b.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c088:	f240 6074 	movw	r0, #1652	@ 0x674
 801c08c:	4283      	cmp	r3, r0
 801c08e:	d0b4      	beq.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c090:	d82d      	bhi.n	801c0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c092:	f240 605e 	movw	r0, #1630	@ 0x65e
 801c096:	4283      	cmp	r3, r0
 801c098:	d804      	bhi.n	801c0a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c09a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801c09e:	4283      	cmp	r3, r0
 801c0a0:	d3d2      	bcc.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0a2:	e7aa      	b.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0a4:	f240 605f 	movw	r0, #1631	@ 0x65f
 801c0a8:	4283      	cmp	r3, r0
 801c0aa:	d0cd      	beq.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0ac:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801c0b0:	d0a3      	beq.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0b2:	00cb      	lsls	r3, r1, #3
 801c0b4:	0649      	lsls	r1, r1, #25
 801c0b6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c0ba:	7a13      	ldrb	r3, [r2, #8]
 801c0bc:	ea43 0300 	orr.w	r3, r3, r0
 801c0c0:	bf44      	itt	mi
 801c0c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c0c6:	b21b      	sxthmi	r3, r3
 801c0c8:	1b5d      	subs	r5, r3, r5
 801c0ca:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c0ce:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c0d2:	7b53      	ldrb	r3, [r2, #13]
 801c0d4:	015b      	lsls	r3, r3, #5
 801c0d6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c0da:	7993      	ldrb	r3, [r2, #6]
 801c0dc:	430b      	orrs	r3, r1
 801c0de:	2105      	movs	r1, #5
 801c0e0:	005b      	lsls	r3, r3, #1
 801c0e2:	fb93 f3f1 	sdiv	r3, r3, r1
 801c0e6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c0ea:	440b      	add	r3, r1
 801c0ec:	e756      	b.n	801bf9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c0ee:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801c0f2:	4283      	cmp	r3, r0
 801c0f4:	d809      	bhi.n	801c10a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c0f6:	f240 60df 	movw	r0, #1759	@ 0x6df
 801c0fa:	4283      	cmp	r3, r0
 801c0fc:	f4bf af7d 	bcs.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c100:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801c104:	2b05      	cmp	r3, #5
 801c106:	d8d4      	bhi.n	801c0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c108:	e777      	b.n	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c10a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801c10e:	4283      	cmp	r3, r0
 801c110:	d09a      	beq.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c112:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801c116:	4283      	cmp	r3, r0
 801c118:	e7ca      	b.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c11a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801c11e:	d22b      	bcs.n	801c178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c120:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801c124:	4283      	cmp	r3, r0
 801c126:	d28f      	bcs.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c128:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c12c:	4283      	cmp	r3, r0
 801c12e:	d816      	bhi.n	801c15e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c130:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801c134:	4283      	cmp	r3, r0
 801c136:	f4bf af60 	bcs.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c13a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801c13e:	4283      	cmp	r3, r0
 801c140:	d80a      	bhi.n	801c158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c142:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801c146:	4283      	cmp	r3, r0
 801c148:	f4bf af57 	bcs.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c14c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801c150:	4283      	cmp	r3, r0
 801c152:	f43f af79 	beq.w	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c156:	e7ac      	b.n	801c0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c158:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801c15c:	e7f8      	b.n	801c150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c15e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801c162:	4283      	cmp	r3, r0
 801c164:	d802      	bhi.n	801c16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c166:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801c16a:	e798      	b.n	801c09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c16c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801c170:	4283      	cmp	r3, r0
 801c172:	f47f af42 	bne.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c176:	e767      	b.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c178:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801c17c:	4283      	cmp	r3, r0
 801c17e:	f43f af63 	beq.w	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c182:	d802      	bhi.n	801c18a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c184:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801c188:	e7f2      	b.n	801c170 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c18a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801c18e:	4283      	cmp	r3, r0
 801c190:	d805      	bhi.n	801c19e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c192:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801c196:	4283      	cmp	r3, r0
 801c198:	f4ff af2f 	bcc.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c19c:	e754      	b.n	801c048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c19e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801c1a2:	4283      	cmp	r3, r0
 801c1a4:	e7af      	b.n	801c106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c1a6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c1aa:	4617      	mov	r7, r2
 801c1ac:	f102 0808 	add.w	r8, r2, #8
 801c1b0:	4666      	mov	r6, ip
 801c1b2:	6838      	ldr	r0, [r7, #0]
 801c1b4:	3708      	adds	r7, #8
 801c1b6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c1ba:	46e6      	mov	lr, ip
 801c1bc:	4547      	cmp	r7, r8
 801c1be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c1c2:	46f4      	mov	ip, lr
 801c1c4:	d1f5      	bne.n	801c1b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c1c6:	6838      	ldr	r0, [r7, #0]
 801c1c8:	f8ce 0000 	str.w	r0, [lr]
 801c1cc:	88b9      	ldrh	r1, [r7, #4]
 801c1ce:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c1d2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c1d6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c1da:	d009      	beq.n	801c1f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801c1dc:	7b51      	ldrb	r1, [r2, #13]
 801c1de:	7992      	ldrb	r2, [r2, #6]
 801c1e0:	0149      	lsls	r1, r1, #5
 801c1e2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c1e6:	4311      	orrs	r1, r2
 801c1e8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c1ec:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c1f0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c1f4:	b2ad      	uxth	r5, r5
 801c1f6:	d00d      	beq.n	801c214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801c1f8:	442b      	add	r3, r5
 801c1fa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c1fe:	b29b      	uxth	r3, r3
 801c200:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c204:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c208:	10db      	asrs	r3, r3, #3
 801c20a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c20e:	4313      	orrs	r3, r2
 801c210:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c214:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c218:	00cb      	lsls	r3, r1, #3
 801c21a:	064f      	lsls	r7, r1, #25
 801c21c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c220:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c224:	ea43 0302 	orr.w	r3, r3, r2
 801c228:	bf44      	itt	mi
 801c22a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c22e:	b21b      	sxthmi	r3, r3
 801c230:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c234:	1b5b      	subs	r3, r3, r5
 801c236:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801c23a:	4632      	mov	r2, r6
 801c23c:	e6f9      	b.n	801c032 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c23e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c242:	4617      	mov	r7, r2
 801c244:	f102 0908 	add.w	r9, r2, #8
 801c248:	4666      	mov	r6, ip
 801c24a:	6838      	ldr	r0, [r7, #0]
 801c24c:	3708      	adds	r7, #8
 801c24e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c252:	46e0      	mov	r8, ip
 801c254:	454f      	cmp	r7, r9
 801c256:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c25a:	46c4      	mov	ip, r8
 801c25c:	d1f5      	bne.n	801c24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801c25e:	6838      	ldr	r0, [r7, #0]
 801c260:	f8c8 0000 	str.w	r0, [r8]
 801c264:	88b9      	ldrh	r1, [r7, #4]
 801c266:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c26a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c26e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c272:	d009      	beq.n	801c288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801c274:	7b51      	ldrb	r1, [r2, #13]
 801c276:	7992      	ldrb	r2, [r2, #6]
 801c278:	0149      	lsls	r1, r1, #5
 801c27a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c27e:	4311      	orrs	r1, r2
 801c280:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c284:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c288:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c28c:	d00e      	beq.n	801c2ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801c28e:	eba3 030e 	sub.w	r3, r3, lr
 801c292:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c296:	b29b      	uxth	r3, r3
 801c298:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c29c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c2a0:	10db      	asrs	r3, r3, #3
 801c2a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c2a6:	4313      	orrs	r3, r2
 801c2a8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c2ac:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c2b0:	00cb      	lsls	r3, r1, #3
 801c2b2:	0648      	lsls	r0, r1, #25
 801c2b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c2b8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c2bc:	ea43 0302 	orr.w	r3, r3, r2
 801c2c0:	bf44      	itt	mi
 801c2c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c2c6:	b21b      	sxthmi	r3, r3
 801c2c8:	1b5d      	subs	r5, r3, r5
 801c2ca:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c2ce:	e7b4      	b.n	801c23a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801c2d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2d4:	461e      	mov	r6, r3
 801c2d6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c2d8:	4604      	mov	r4, r0
 801c2da:	4617      	mov	r7, r2
 801c2dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c2e0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c2e4:	f7ec f8fa 	bl	80084dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	b918      	cbnz	r0, 801c2f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c2ec:	6030      	str	r0, [r6, #0]
 801c2ee:	4628      	mov	r0, r5
 801c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2f4:	683b      	ldr	r3, [r7, #0]
 801c2f6:	4601      	mov	r1, r0
 801c2f8:	4638      	mov	r0, r7
 801c2fa:	68db      	ldr	r3, [r3, #12]
 801c2fc:	4798      	blx	r3
 801c2fe:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c302:	4602      	mov	r2, r0
 801c304:	6030      	str	r0, [r6, #0]
 801c306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c30a:	d213      	bcs.n	801c334 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c30c:	4643      	mov	r3, r8
 801c30e:	4639      	mov	r1, r7
 801c310:	4620      	mov	r0, r4
 801c312:	f7ff fe39 	bl	801bf88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c316:	6030      	str	r0, [r6, #0]
 801c318:	6833      	ldr	r3, [r6, #0]
 801c31a:	b143      	cbz	r3, 801c32e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c31c:	7b5a      	ldrb	r2, [r3, #13]
 801c31e:	7a9b      	ldrb	r3, [r3, #10]
 801c320:	0052      	lsls	r2, r2, #1
 801c322:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c326:	4313      	orrs	r3, r2
 801c328:	bf0c      	ite	eq
 801c32a:	2301      	moveq	r3, #1
 801c32c:	2300      	movne	r3, #0
 801c32e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c332:	e7dc      	b.n	801c2ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c334:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c338:	b29b      	uxth	r3, r3
 801c33a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c33c:	d804      	bhi.n	801c348 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c33e:	4639      	mov	r1, r7
 801c340:	4620      	mov	r0, r4
 801c342:	f7ff fd15 	bl	801bd70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c346:	e7e6      	b.n	801c316 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c348:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d0e3      	beq.n	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c350:	f640 1302 	movw	r3, #2306	@ 0x902
 801c354:	429d      	cmp	r5, r3
 801c356:	d1df      	bne.n	801c318 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c358:	4601      	mov	r1, r0
 801c35a:	4620      	mov	r0, r4
 801c35c:	f7ff fcd8 	bl	801bd10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c360:	e7d9      	b.n	801c316 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c362 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c366:	461e      	mov	r6, r3
 801c368:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c36a:	4604      	mov	r4, r0
 801c36c:	4617      	mov	r7, r2
 801c36e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c372:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c376:	f7ec f8b1 	bl	80084dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c37a:	4605      	mov	r5, r0
 801c37c:	b918      	cbnz	r0, 801c386 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801c37e:	6030      	str	r0, [r6, #0]
 801c380:	4628      	mov	r0, r5
 801c382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	4601      	mov	r1, r0
 801c38a:	4638      	mov	r0, r7
 801c38c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c390:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c394:	47c8      	blx	r9
 801c396:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c39a:	4602      	mov	r2, r0
 801c39c:	6030      	str	r0, [r6, #0]
 801c39e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c3a2:	d213      	bcs.n	801c3cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801c3a4:	4643      	mov	r3, r8
 801c3a6:	4639      	mov	r1, r7
 801c3a8:	4620      	mov	r0, r4
 801c3aa:	f7ff fded 	bl	801bf88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c3ae:	6030      	str	r0, [r6, #0]
 801c3b0:	6833      	ldr	r3, [r6, #0]
 801c3b2:	b143      	cbz	r3, 801c3c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c3b4:	7b5a      	ldrb	r2, [r3, #13]
 801c3b6:	7a9b      	ldrb	r3, [r3, #10]
 801c3b8:	0052      	lsls	r2, r2, #1
 801c3ba:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c3be:	4313      	orrs	r3, r2
 801c3c0:	bf0c      	ite	eq
 801c3c2:	2301      	moveq	r3, #1
 801c3c4:	2300      	movne	r3, #0
 801c3c6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c3ca:	e7d9      	b.n	801c380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c3cc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c3d0:	b29b      	uxth	r3, r3
 801c3d2:	2b7f      	cmp	r3, #127	@ 0x7f
 801c3d4:	d804      	bhi.n	801c3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c3d6:	4639      	mov	r1, r7
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f7ff fcc9 	bl	801bd70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c3de:	e7e6      	b.n	801c3ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c3e0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d0e3      	beq.n	801c3b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c3e8:	f640 1302 	movw	r3, #2306	@ 0x902
 801c3ec:	429d      	cmp	r5, r3
 801c3ee:	d1df      	bne.n	801c3b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c3f0:	4601      	mov	r1, r0
 801c3f2:	4620      	mov	r0, r4
 801c3f4:	f7ff fc8c 	bl	801bd10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c3f8:	e7d9      	b.n	801c3ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c3fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c3fa:	b510      	push	{r4, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801c402:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c404:	b1e1      	cbz	r1, 801c440 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c406:	2b0a      	cmp	r3, #10
 801c408:	d02d      	beq.n	801c466 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c40a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801c40c:	3901      	subs	r1, #1
 801c40e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c412:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c414:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c418:	1c51      	adds	r1, r2, #1
 801c41a:	b289      	uxth	r1, r1
 801c41c:	2901      	cmp	r1, #1
 801c41e:	bf8a      	itet	hi
 801c420:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c424:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c426:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c428:	1c5a      	adds	r2, r3, #1
 801c42a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c42c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c42e:	4413      	add	r3, r2
 801c430:	b29b      	uxth	r3, r3
 801c432:	2b09      	cmp	r3, #9
 801c434:	bf88      	it	hi
 801c436:	3b0a      	subhi	r3, #10
 801c438:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c43c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c43e:	e7de      	b.n	801c3fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c440:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c442:	2b0a      	cmp	r3, #10
 801c444:	d00f      	beq.n	801c466 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c446:	4620      	mov	r0, r4
 801c448:	f7ff fc10 	bl	801bc6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c44c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c44e:	1c5a      	adds	r2, r3, #1
 801c450:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c452:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c454:	4413      	add	r3, r2
 801c456:	b29b      	uxth	r3, r3
 801c458:	2b09      	cmp	r3, #9
 801c45a:	bf88      	it	hi
 801c45c:	3b0a      	subhi	r3, #10
 801c45e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c462:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c464:	e7ec      	b.n	801c440 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c466:	bd10      	pop	{r4, pc}

0801c468 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c468:	b538      	push	{r3, r4, r5, lr}
 801c46a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c46c:	4604      	mov	r4, r0
 801c46e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c472:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c474:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c476:	3a01      	subs	r2, #1
 801c478:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c47a:	1c5a      	adds	r2, r3, #1
 801c47c:	b292      	uxth	r2, r2
 801c47e:	2a09      	cmp	r2, #9
 801c480:	bf8a      	itet	hi
 801c482:	3b09      	subhi	r3, #9
 801c484:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c486:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c488:	f7ff ffb7 	bl	801c3fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c48c:	8c23      	ldrh	r3, [r4, #32]
 801c48e:	2b01      	cmp	r3, #1
 801c490:	bf9c      	itt	ls
 801c492:	3301      	addls	r3, #1
 801c494:	8423      	strhls	r3, [r4, #32]
 801c496:	8be3      	ldrh	r3, [r4, #30]
 801c498:	b90b      	cbnz	r3, 801c49e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c49a:	2302      	movs	r3, #2
 801c49c:	83e3      	strh	r3, [r4, #30]
 801c49e:	8be3      	ldrh	r3, [r4, #30]
 801c4a0:	4628      	mov	r0, r5
 801c4a2:	3b01      	subs	r3, #1
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	83e3      	strh	r3, [r4, #30]
 801c4a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c4ac:	8365      	strh	r5, [r4, #26]
 801c4ae:	bd38      	pop	{r3, r4, r5, pc}

0801c4b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c4b0:	428a      	cmp	r2, r1
 801c4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4b6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c4b8:	d932      	bls.n	801c520 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c4ba:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c4bc:	1a54      	subs	r4, r2, r1
 801c4be:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c4c2:	19ee      	adds	r6, r5, r7
 801c4c4:	fa1f fe84 	uxth.w	lr, r4
 801c4c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c4cc:	3e01      	subs	r6, #1
 801c4ce:	b2b4      	uxth	r4, r6
 801c4d0:	eba4 090e 	sub.w	r9, r4, lr
 801c4d4:	fa1f f989 	uxth.w	r9, r9
 801c4d8:	2c09      	cmp	r4, #9
 801c4da:	4626      	mov	r6, r4
 801c4dc:	bf88      	it	hi
 801c4de:	f1a4 060a 	subhi.w	r6, r4, #10
 801c4e2:	f1bc 0f00 	cmp.w	ip, #0
 801c4e6:	f104 34ff 	add.w	r4, r4, #4294967295
 801c4ea:	bf08      	it	eq
 801c4ec:	f04f 0c02 	moveq.w	ip, #2
 801c4f0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c4f4:	b2a4      	uxth	r4, r4
 801c4f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c4fa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c4fe:	454c      	cmp	r4, r9
 801c500:	fa1f fc8c 	uxth.w	ip, ip
 801c504:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c508:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c50c:	d1e4      	bne.n	801c4d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c50e:	eba5 050e 	sub.w	r5, r5, lr
 801c512:	eb0e 0408 	add.w	r4, lr, r8
 801c516:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c51a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c51c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c520:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c522:	250a      	movs	r5, #10
 801c524:	1a64      	subs	r4, r4, r1
 801c526:	4439      	add	r1, r7
 801c528:	b289      	uxth	r1, r1
 801c52a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c52c:	2909      	cmp	r1, #9
 801c52e:	bf88      	it	hi
 801c530:	390a      	subhi	r1, #10
 801c532:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c534:	b18a      	cbz	r2, 801c55a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c536:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c538:	3a01      	subs	r2, #1
 801c53a:	3101      	adds	r1, #1
 801c53c:	b292      	uxth	r2, r2
 801c53e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c542:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c544:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c546:	b901      	cbnz	r1, 801c54a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c548:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c54a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c54c:	3901      	subs	r1, #1
 801c54e:	b289      	uxth	r1, r1
 801c550:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c552:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c556:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c558:	e7ec      	b.n	801c534 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c55a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c55e:	f7ff bf4c 	b.w	801c3fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c562 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c562:	b570      	push	{r4, r5, r6, lr}
 801c564:	2500      	movs	r5, #0
 801c566:	4295      	cmp	r5, r2
 801c568:	d011      	beq.n	801c58e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c56a:	8bc4      	ldrh	r4, [r0, #30]
 801c56c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c570:	4414      	add	r4, r2
 801c572:	3c01      	subs	r4, #1
 801c574:	1b64      	subs	r4, r4, r5
 801c576:	b2a4      	uxth	r4, r4
 801c578:	2c01      	cmp	r4, #1
 801c57a:	bf88      	it	hi
 801c57c:	3c02      	subhi	r4, #2
 801c57e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c582:	8b64      	ldrh	r4, [r4, #26]
 801c584:	42b4      	cmp	r4, r6
 801c586:	d117      	bne.n	801c5b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c588:	3501      	adds	r5, #1
 801c58a:	b2ad      	uxth	r5, r5
 801c58c:	e7eb      	b.n	801c566 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c58e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c592:	2400      	movs	r4, #0
 801c594:	4413      	add	r3, r2
 801c596:	b2a2      	uxth	r2, r4
 801c598:	429a      	cmp	r2, r3
 801c59a:	da0f      	bge.n	801c5bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c59c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c59e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c5a2:	3401      	adds	r4, #1
 801c5a4:	4432      	add	r2, r6
 801c5a6:	b292      	uxth	r2, r2
 801c5a8:	2a09      	cmp	r2, #9
 801c5aa:	bf88      	it	hi
 801c5ac:	3a0a      	subhi	r2, #10
 801c5ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c5b2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c5b4:	42aa      	cmp	r2, r5
 801c5b6:	d0ee      	beq.n	801c596 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c5b8:	2000      	movs	r0, #0
 801c5ba:	bd70      	pop	{r4, r5, r6, pc}
 801c5bc:	2001      	movs	r0, #1
 801c5be:	e7fc      	b.n	801c5ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c5c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c4:	4605      	mov	r5, r0
 801c5c6:	4616      	mov	r6, r2
 801c5c8:	1c8c      	adds	r4, r1, #2
 801c5ca:	8809      	ldrh	r1, [r1, #0]
 801c5cc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c5d0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c5d4:	42b3      	cmp	r3, r6
 801c5d6:	d124      	bne.n	801c622 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c5d8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c5dc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c5e0:	f001 070f 	and.w	r7, r1, #15
 801c5e4:	4652      	mov	r2, sl
 801c5e6:	f8cd 8000 	str.w	r8, [sp]
 801c5ea:	464b      	mov	r3, r9
 801c5ec:	4621      	mov	r1, r4
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	f7ff ffb7 	bl	801c562 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c5f4:	4683      	mov	fp, r0
 801c5f6:	b168      	cbz	r0, 801c614 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c5f8:	eb0a 0109 	add.w	r1, sl, r9
 801c5fc:	463a      	mov	r2, r7
 801c5fe:	4628      	mov	r0, r5
 801c600:	4441      	add	r1, r8
 801c602:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c606:	4649      	mov	r1, r9
 801c608:	f7ff ff52 	bl	801c4b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c60c:	4658      	mov	r0, fp
 801c60e:	b003      	add	sp, #12
 801c610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c614:	eb07 010a 	add.w	r1, r7, sl
 801c618:	4449      	add	r1, r9
 801c61a:	4441      	add	r1, r8
 801c61c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c620:	e7d2      	b.n	801c5c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c622:	f04f 0b00 	mov.w	fp, #0
 801c626:	e7f1      	b.n	801c60c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c628 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c628:	b570      	push	{r4, r5, r6, lr}
 801c62a:	8810      	ldrh	r0, [r2, #0]
 801c62c:	4298      	cmp	r0, r3
 801c62e:	d817      	bhi.n	801c660 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c630:	1e48      	subs	r0, r1, #1
 801c632:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c636:	4298      	cmp	r0, r3
 801c638:	d312      	bcc.n	801c660 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c63a:	2400      	movs	r4, #0
 801c63c:	428c      	cmp	r4, r1
 801c63e:	d20f      	bcs.n	801c660 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c640:	1860      	adds	r0, r4, r1
 801c642:	1040      	asrs	r0, r0, #1
 801c644:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c648:	0085      	lsls	r5, r0, #2
 801c64a:	42b3      	cmp	r3, r6
 801c64c:	d902      	bls.n	801c654 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c64e:	3001      	adds	r0, #1
 801c650:	b284      	uxth	r4, r0
 801c652:	e7f3      	b.n	801c63c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c654:	d201      	bcs.n	801c65a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c656:	b281      	uxth	r1, r0
 801c658:	e7f0      	b.n	801c63c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c65a:	442a      	add	r2, r5
 801c65c:	8850      	ldrh	r0, [r2, #2]
 801c65e:	bd70      	pop	{r4, r5, r6, pc}
 801c660:	2000      	movs	r0, #0
 801c662:	e7fc      	b.n	801c65e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c664 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c668:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c66a:	4604      	mov	r4, r0
 801c66c:	260b      	movs	r6, #11
 801c66e:	886f      	ldrh	r7, [r5, #2]
 801c670:	087f      	lsrs	r7, r7, #1
 801c672:	3e01      	subs	r6, #1
 801c674:	d013      	beq.n	801c69e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c676:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c678:	462a      	mov	r2, r5
 801c67a:	4639      	mov	r1, r7
 801c67c:	4620      	mov	r0, r4
 801c67e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c682:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c686:	4643      	mov	r3, r8
 801c688:	f7ff ffce 	bl	801c628 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c68c:	b138      	cbz	r0, 801c69e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c68e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c692:	4642      	mov	r2, r8
 801c694:	4620      	mov	r0, r4
 801c696:	f7ff ff93 	bl	801c5c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c69a:	2800      	cmp	r0, #0
 801c69c:	d1e9      	bne.n	801c672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c6a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c6a4:	b570      	push	{r4, r5, r6, lr}
 801c6a6:	694a      	ldr	r2, [r1, #20]
 801c6a8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c6aa:	684b      	ldr	r3, [r1, #4]
 801c6ac:	1b54      	subs	r4, r2, r5
 801c6ae:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c6b0:	f000 8106 	beq.w	801c8c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c6b4:	1b9b      	subs	r3, r3, r6
 801c6b6:	d003      	beq.n	801c6c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c6b8:	4363      	muls	r3, r4
 801c6ba:	2210      	movs	r2, #16
 801c6bc:	fb93 f3f2 	sdiv	r3, r3, r2
 801c6c0:	680c      	ldr	r4, [r1, #0]
 801c6c2:	698a      	ldr	r2, [r1, #24]
 801c6c4:	1b65      	subs	r5, r4, r5
 801c6c6:	f000 80fd 	beq.w	801c8c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c6ca:	1b92      	subs	r2, r2, r6
 801c6cc:	d003      	beq.n	801c6d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c6ce:	436a      	muls	r2, r5
 801c6d0:	2410      	movs	r4, #16
 801c6d2:	fb92 f2f4 	sdiv	r2, r2, r4
 801c6d6:	1a9b      	subs	r3, r3, r2
 801c6d8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c900 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c6dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c6e0:	460a      	mov	r2, r1
 801c6e2:	ee07 3a90 	vmov	s15, r3
 801c6e6:	f100 040c 	add.w	r4, r0, #12
 801c6ea:	4603      	mov	r3, r0
 801c6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6f0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c6f4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c6f8:	eeb1 6a43 	vneg.f32	s12, s6
 801c6fc:	edd2 7a02 	vldr	s15, [r2, #8]
 801c700:	3214      	adds	r2, #20
 801c702:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c706:	ece3 6a01 	vstmia	r3!, {s13}
 801c70a:	429c      	cmp	r4, r3
 801c70c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c714:	edc3 7a02 	vstr	s15, [r3, #8]
 801c718:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c71c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c720:	edc3 7a05 	vstr	s15, [r3, #20]
 801c724:	d1ea      	bne.n	801c6fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c726:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c728:	698b      	ldr	r3, [r1, #24]
 801c72a:	edd0 4a02 	vldr	s9, [r0, #8]
 801c72e:	1a9b      	subs	r3, r3, r2
 801c730:	edd0 3a00 	vldr	s7, [r0]
 801c734:	edd0 6a01 	vldr	s13, [r0, #4]
 801c738:	ee07 3a90 	vmov	s15, r3
 801c73c:	684b      	ldr	r3, [r1, #4]
 801c73e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c742:	ed90 5a05 	vldr	s10, [r0, #20]
 801c746:	1a9b      	subs	r3, r3, r2
 801c748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c74c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c750:	ed90 2a03 	vldr	s4, [r0, #12]
 801c754:	ee07 3a10 	vmov	s14, r3
 801c758:	edd0 5a04 	vldr	s11, [r0, #16]
 801c75c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c760:	ed90 1a07 	vldr	s2, [r0, #28]
 801c764:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c768:	edd0 2a06 	vldr	s5, [r0, #24]
 801c76c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c770:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c774:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c778:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c77c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c780:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c784:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c788:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c78a:	694a      	ldr	r2, [r1, #20]
 801c78c:	1b13      	subs	r3, r2, r4
 801c78e:	ee07 3a10 	vmov	s14, r3
 801c792:	680b      	ldr	r3, [r1, #0]
 801c794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c798:	1b1b      	subs	r3, r3, r4
 801c79a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c79e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c7a2:	ee07 3a10 	vmov	s14, r3
 801c7a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7ae:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c7b2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c7b6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c7ba:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c7bc:	698b      	ldr	r3, [r1, #24]
 801c7be:	1a9b      	subs	r3, r3, r2
 801c7c0:	ee06 3a90 	vmov	s13, r3
 801c7c4:	684b      	ldr	r3, [r1, #4]
 801c7c6:	1a9b      	subs	r3, r3, r2
 801c7c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c7cc:	ee07 3a10 	vmov	s14, r3
 801c7d0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c7d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7d8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c7dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c7e0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c7e4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c7e8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c7ec:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c7ee:	694a      	ldr	r2, [r1, #20]
 801c7f0:	1b13      	subs	r3, r2, r4
 801c7f2:	ee07 3a10 	vmov	s14, r3
 801c7f6:	680b      	ldr	r3, [r1, #0]
 801c7f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7fc:	1b1b      	subs	r3, r3, r4
 801c7fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c802:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c806:	ee07 3a10 	vmov	s14, r3
 801c80a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c80e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c812:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c816:	edd0 5a08 	vldr	s11, [r0, #32]
 801c81a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c81e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c822:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c826:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c82a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c82c:	698b      	ldr	r3, [r1, #24]
 801c82e:	1a9b      	subs	r3, r3, r2
 801c830:	ee07 3a10 	vmov	s14, r3
 801c834:	684b      	ldr	r3, [r1, #4]
 801c836:	1a9b      	subs	r3, r3, r2
 801c838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c83c:	ee01 3a90 	vmov	s3, r3
 801c840:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c844:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c848:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c84c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c850:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c854:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c858:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c85c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c85e:	694a      	ldr	r2, [r1, #20]
 801c860:	1b13      	subs	r3, r2, r4
 801c862:	ee03 3a10 	vmov	s6, r3
 801c866:	680b      	ldr	r3, [r1, #0]
 801c868:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c86c:	1b1b      	subs	r3, r3, r4
 801c86e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c872:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c876:	ee03 3a10 	vmov	s6, r3
 801c87a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c87e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c882:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c886:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c88a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c88e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c892:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c896:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c89e:	dd13      	ble.n	801c8c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c8a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c8a4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c8a8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c8aa:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c8ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8b6:	dd15      	ble.n	801c8e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c8b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c8bc:	6403      	str	r3, [r0, #64]	@ 0x40
 801c8be:	bd70      	pop	{r4, r5, r6, pc}
 801c8c0:	4623      	mov	r3, r4
 801c8c2:	e6fd      	b.n	801c6c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c8c4:	462a      	mov	r2, r5
 801c8c6:	e706      	b.n	801c6d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c8c8:	d502      	bpl.n	801c8d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c8ca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c8ce:	e7e9      	b.n	801c8a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c8d0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c8d4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c8d8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8e0:	dade      	bge.n	801c8a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c8e2:	e7f2      	b.n	801c8ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c8e4:	d502      	bpl.n	801c8ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c8e6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c8ea:	e7e7      	b.n	801c8bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c8ec:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c8f0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c8f4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8fc:	dadc      	bge.n	801c8b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c8fe:	e7f2      	b.n	801c8e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c900:	3d800000 	.word	0x3d800000

0801c904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c908:	2714      	movs	r7, #20
 801c90a:	435f      	muls	r7, r3
 801c90c:	eb02 0c07 	add.w	ip, r2, r7
 801c910:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c914:	f115 0e0f 	adds.w	lr, r5, #15
 801c918:	f100 80a2 	bmi.w	801ca60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c91c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c920:	9c08      	ldr	r4, [sp, #32]
 801c922:	2614      	movs	r6, #20
 801c924:	f8c0 e014 	str.w	lr, [r0, #20]
 801c928:	4366      	muls	r6, r4
 801c92a:	eb02 0806 	add.w	r8, r2, r6
 801c92e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c932:	f115 040f 	adds.w	r4, r5, #15
 801c936:	f100 809f 	bmi.w	801ca78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c93a:	1124      	asrs	r4, r4, #4
 801c93c:	eba4 040e 	sub.w	r4, r4, lr
 801c940:	6184      	str	r4, [r0, #24]
 801c942:	2c00      	cmp	r4, #0
 801c944:	f000 808a 	beq.w	801ca5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c948:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c94c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c950:	5995      	ldr	r5, [r2, r6]
 801c952:	eba4 0809 	sub.w	r8, r4, r9
 801c956:	59d4      	ldr	r4, [r2, r7]
 801c958:	eba5 0a04 	sub.w	sl, r5, r4
 801c95c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c960:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c964:	fb0e fe05 	mul.w	lr, lr, r5
 801c968:	fb0a ee19 	mls	lr, sl, r9, lr
 801c96c:	fb08 e404 	mla	r4, r8, r4, lr
 801c970:	3c01      	subs	r4, #1
 801c972:	19a4      	adds	r4, r4, r6
 801c974:	f100 808c 	bmi.w	801ca90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c978:	fb94 fef6 	sdiv	lr, r4, r6
 801c97c:	fb06 441e 	mls	r4, r6, lr, r4
 801c980:	f8c0 e000 	str.w	lr, [r0]
 801c984:	6104      	str	r4, [r0, #16]
 801c986:	2d00      	cmp	r5, #0
 801c988:	f2c0 8095 	blt.w	801cab6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c98c:	fb95 f4f6 	sdiv	r4, r5, r6
 801c990:	fb06 5514 	mls	r5, r6, r4, r5
 801c994:	6044      	str	r4, [r0, #4]
 801c996:	6085      	str	r5, [r0, #8]
 801c998:	60c6      	str	r6, [r0, #12]
 801c99a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c99e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c9a2:	6945      	ldr	r5, [r0, #20]
 801c9a4:	59d2      	ldr	r2, [r2, r7]
 801c9a6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c9aa:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801cad8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c9ae:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c9b2:	ee07 4a10 	vmov	s14, r4
 801c9b6:	6804      	ldr	r4, [r0, #0]
 801c9b8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c9bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c9c0:	ee07 2a90 	vmov	s15, r2
 801c9c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c9c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c9cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c9d0:	edd3 6a00 	vldr	s13, [r3]
 801c9d4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c9d8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c9dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c9e0:	edc0 6a07 	vstr	s13, [r0, #28]
 801c9e4:	edd0 6a01 	vldr	s13, [r0, #4]
 801c9e8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c9ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c9f0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c9f4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c9f8:	ed80 6a08 	vstr	s12, [r0, #32]
 801c9fc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c9fe:	6242      	str	r2, [r0, #36]	@ 0x24
 801ca00:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801ca04:	ed93 6a03 	vldr	s12, [r3, #12]
 801ca08:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ca0c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801ca10:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ca14:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801ca18:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801ca1c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801ca20:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ca24:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801ca28:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ca2a:	6302      	str	r2, [r0, #48]	@ 0x30
 801ca2c:	ed93 6a06 	vldr	s12, [r3, #24]
 801ca30:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801ca34:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ca38:	eeb0 7a46 	vmov.f32	s14, s12
 801ca3c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801ca40:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ca44:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801ca48:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801ca4c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801ca50:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca54:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801ca58:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801ca5a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801ca5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca60:	2410      	movs	r4, #16
 801ca62:	f1c5 0501 	rsb	r5, r5, #1
 801ca66:	fb9e fef4 	sdiv	lr, lr, r4
 801ca6a:	f015 050f 	ands.w	r5, r5, #15
 801ca6e:	bf18      	it	ne
 801ca70:	2501      	movne	r5, #1
 801ca72:	ebae 0e05 	sub.w	lr, lr, r5
 801ca76:	e753      	b.n	801c920 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801ca78:	f04f 0910 	mov.w	r9, #16
 801ca7c:	f1c5 0501 	rsb	r5, r5, #1
 801ca80:	fb94 f4f9 	sdiv	r4, r4, r9
 801ca84:	f015 050f 	ands.w	r5, r5, #15
 801ca88:	bf18      	it	ne
 801ca8a:	2501      	movne	r5, #1
 801ca8c:	1b64      	subs	r4, r4, r5
 801ca8e:	e755      	b.n	801c93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801ca90:	4264      	negs	r4, r4
 801ca92:	fb94 fef6 	sdiv	lr, r4, r6
 801ca96:	f1ce 0800 	rsb	r8, lr, #0
 801ca9a:	fb06 441e 	mls	r4, r6, lr, r4
 801ca9e:	f8c0 8000 	str.w	r8, [r0]
 801caa2:	6104      	str	r4, [r0, #16]
 801caa4:	2c00      	cmp	r4, #0
 801caa6:	f43f af6e 	beq.w	801c986 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801caaa:	ea6f 0e0e 	mvn.w	lr, lr
 801caae:	1b34      	subs	r4, r6, r4
 801cab0:	f8c0 e000 	str.w	lr, [r0]
 801cab4:	e766      	b.n	801c984 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801cab6:	426d      	negs	r5, r5
 801cab8:	fb95 f4f6 	sdiv	r4, r5, r6
 801cabc:	f1c4 0e00 	rsb	lr, r4, #0
 801cac0:	fb06 5514 	mls	r5, r6, r4, r5
 801cac4:	f8c0 e004 	str.w	lr, [r0, #4]
 801cac8:	6085      	str	r5, [r0, #8]
 801caca:	2d00      	cmp	r5, #0
 801cacc:	f43f af64 	beq.w	801c998 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801cad0:	43e4      	mvns	r4, r4
 801cad2:	1b75      	subs	r5, r6, r5
 801cad4:	6044      	str	r4, [r0, #4]
 801cad6:	e75e      	b.n	801c996 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801cad8:	3d800000 	.word	0x3d800000

0801cadc <_ZN8touchgfx7Unicode6strlenEPKt>:
 801cadc:	4602      	mov	r2, r0
 801cade:	b148      	cbz	r0, 801caf4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801cae0:	2300      	movs	r3, #0
 801cae2:	b298      	uxth	r0, r3
 801cae4:	3301      	adds	r3, #1
 801cae6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801caea:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801caee:	2900      	cmp	r1, #0
 801caf0:	d1f7      	bne.n	801cae2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801caf2:	4770      	bx	lr
 801caf4:	4770      	bx	lr

0801caf6 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801caf6:	b530      	push	{r4, r5, lr}
 801caf8:	4604      	mov	r4, r0
 801cafa:	b161      	cbz	r1, 801cb16 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801cafc:	b150      	cbz	r0, 801cb14 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801cafe:	2300      	movs	r3, #0
 801cb00:	b298      	uxth	r0, r3
 801cb02:	4290      	cmp	r0, r2
 801cb04:	d206      	bcs.n	801cb14 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801cb06:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801cb0a:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801cb0e:	3301      	adds	r3, #1
 801cb10:	2d00      	cmp	r5, #0
 801cb12:	d1f5      	bne.n	801cb00 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801cb14:	bd30      	pop	{r4, r5, pc}
 801cb16:	4608      	mov	r0, r1
 801cb18:	e7fc      	b.n	801cb14 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801cb1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801cb1a:	b530      	push	{r4, r5, lr}
 801cb1c:	4604      	mov	r4, r0
 801cb1e:	b159      	cbz	r1, 801cb38 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801cb20:	b148      	cbz	r0, 801cb36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cb22:	2300      	movs	r3, #0
 801cb24:	b298      	uxth	r0, r3
 801cb26:	4282      	cmp	r2, r0
 801cb28:	d905      	bls.n	801cb36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801cb2a:	5ccd      	ldrb	r5, [r1, r3]
 801cb2c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801cb30:	3301      	adds	r3, #1
 801cb32:	2d00      	cmp	r5, #0
 801cb34:	d1f6      	bne.n	801cb24 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801cb36:	bd30      	pop	{r4, r5, pc}
 801cb38:	4608      	mov	r0, r1
 801cb3a:	e7fc      	b.n	801cb36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801cb3c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801cb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb3e:	b08b      	sub	sp, #44	@ 0x2c
 801cb40:	468c      	mov	ip, r1
 801cb42:	4604      	mov	r4, r0
 801cb44:	2100      	movs	r1, #0
 801cb46:	261f      	movs	r6, #31
 801cb48:	af01      	add	r7, sp, #4
 801cb4a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801cb4e:	1e71      	subs	r1, r6, #1
 801cb50:	fb94 fef3 	sdiv	lr, r4, r3
 801cb54:	fb03 441e 	mls	r4, r3, lr, r4
 801cb58:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801cb5c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801cb60:	b2ec      	uxtb	r4, r5
 801cb62:	2d09      	cmp	r5, #9
 801cb64:	bfd4      	ite	le
 801cb66:	3430      	addle	r4, #48	@ 0x30
 801cb68:	3457      	addgt	r4, #87	@ 0x57
 801cb6a:	b2e4      	uxtb	r4, r4
 801cb6c:	55bc      	strb	r4, [r7, r6]
 801cb6e:	4674      	mov	r4, lr
 801cb70:	b974      	cbnz	r4, 801cb90 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801cb72:	2800      	cmp	r0, #0
 801cb74:	da05      	bge.n	801cb82 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801cb76:	ab0a      	add	r3, sp, #40	@ 0x28
 801cb78:	4419      	add	r1, r3
 801cb7a:	232d      	movs	r3, #45	@ 0x2d
 801cb7c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801cb80:	1eb1      	subs	r1, r6, #2
 801cb82:	3101      	adds	r1, #1
 801cb84:	4660      	mov	r0, ip
 801cb86:	4439      	add	r1, r7
 801cb88:	f7ff ffc7 	bl	801cb1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cb8c:	b00b      	add	sp, #44	@ 0x2c
 801cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb90:	460e      	mov	r6, r1
 801cb92:	e7dc      	b.n	801cb4e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801cb94 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801cb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb96:	468c      	mov	ip, r1
 801cb98:	b08b      	sub	sp, #44	@ 0x2c
 801cb9a:	2100      	movs	r1, #0
 801cb9c:	ae01      	add	r6, sp, #4
 801cb9e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801cba2:	211f      	movs	r1, #31
 801cba4:	fbb0 f7f3 	udiv	r7, r0, r3
 801cba8:	fb03 0517 	mls	r5, r3, r7, r0
 801cbac:	4638      	mov	r0, r7
 801cbae:	b2ec      	uxtb	r4, r5
 801cbb0:	2d09      	cmp	r5, #9
 801cbb2:	bfd4      	ite	le
 801cbb4:	3430      	addle	r4, #48	@ 0x30
 801cbb6:	3457      	addgt	r4, #87	@ 0x57
 801cbb8:	b2e4      	uxtb	r4, r4
 801cbba:	558c      	strb	r4, [r1, r6]
 801cbbc:	1e4c      	subs	r4, r1, #1
 801cbbe:	b92f      	cbnz	r7, 801cbcc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801cbc0:	4431      	add	r1, r6
 801cbc2:	4660      	mov	r0, ip
 801cbc4:	f7ff ffa9 	bl	801cb1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cbc8:	b00b      	add	sp, #44	@ 0x2c
 801cbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbcc:	4621      	mov	r1, r4
 801cbce:	e7e9      	b.n	801cba4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801cbd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbd4:	b085      	sub	sp, #20
 801cbd6:	4691      	mov	r9, r2
 801cbd8:	6802      	ldr	r2, [r0, #0]
 801cbda:	4688      	mov	r8, r1
 801cbdc:	461c      	mov	r4, r3
 801cbde:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801cbe2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801cbe6:	4683      	mov	fp, r0
 801cbe8:	4610      	mov	r0, r2
 801cbea:	9103      	str	r1, [sp, #12]
 801cbec:	9302      	str	r3, [sp, #8]
 801cbee:	9201      	str	r2, [sp, #4]
 801cbf0:	f7ff ff74 	bl	801cadc <_ZN8touchgfx7Unicode6strlenEPKt>
 801cbf4:	f1b8 0f00 	cmp.w	r8, #0
 801cbf8:	bf0c      	ite	eq
 801cbfa:	4684      	moveq	ip, r0
 801cbfc:	f100 0c01 	addne.w	ip, r0, #1
 801cc00:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801cc04:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801cc08:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801cc0a:	fa1f fc8c 	uxth.w	ip, ip
 801cc0e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cc10:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801cc14:	9903      	ldr	r1, [sp, #12]
 801cc16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cc1a:	d041      	beq.n	801cca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cc1c:	d834      	bhi.n	801cc88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801cc1e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801cc22:	d059      	beq.n	801ccd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801cc24:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801cc28:	d03a      	beq.n	801cca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801cc2a:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801cc2e:	d034      	beq.n	801cc9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cc30:	2400      	movs	r4, #0
 801cc32:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801cc36:	3a01      	subs	r2, #1
 801cc38:	b169      	cbz	r1, 801cc56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cc3a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801cc3c:	458c      	cmp	ip, r1
 801cc3e:	da09      	bge.n	801cc54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cc40:	eba1 010c 	sub.w	r1, r1, ip
 801cc44:	b289      	uxth	r1, r1
 801cc46:	b933      	cbnz	r3, 801cc56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cc48:	2e00      	cmp	r6, #0
 801cc4a:	d051      	beq.n	801ccf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cc4c:	2800      	cmp	r0, #0
 801cc4e:	d04f      	beq.n	801ccf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801cc50:	440c      	add	r4, r1
 801cc52:	b2a4      	uxth	r4, r4
 801cc54:	2100      	movs	r1, #0
 801cc56:	682b      	ldr	r3, [r5, #0]
 801cc58:	4293      	cmp	r3, r2
 801cc5a:	da07      	bge.n	801cc6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cc5c:	f1b8 0f00 	cmp.w	r8, #0
 801cc60:	d004      	beq.n	801cc6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801cc62:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801cc66:	682b      	ldr	r3, [r5, #0]
 801cc68:	3301      	adds	r3, #1
 801cc6a:	602b      	str	r3, [r5, #0]
 801cc6c:	2730      	movs	r7, #48	@ 0x30
 801cc6e:	2c00      	cmp	r4, #0
 801cc70:	d04e      	beq.n	801cd10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc72:	682e      	ldr	r6, [r5, #0]
 801cc74:	3c01      	subs	r4, #1
 801cc76:	42b2      	cmp	r2, r6
 801cc78:	b2a4      	uxth	r4, r4
 801cc7a:	dd49      	ble.n	801cd10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cc7c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cc80:	682b      	ldr	r3, [r5, #0]
 801cc82:	3301      	adds	r3, #1
 801cc84:	602b      	str	r3, [r5, #0]
 801cc86:	e7f2      	b.n	801cc6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801cc88:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801cc8c:	d01d      	beq.n	801ccca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801cc8e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801cc92:	d002      	beq.n	801cc9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801cc94:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801cc98:	e7c9      	b.n	801cc2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801cc9a:	4684      	mov	ip, r0
 801cc9c:	f04f 0800 	mov.w	r8, #0
 801cca0:	2c00      	cmp	r4, #0
 801cca2:	d0c6      	beq.n	801cc32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cca4:	b947      	cbnz	r7, 801ccb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801cca6:	2801      	cmp	r0, #1
 801cca8:	d106      	bne.n	801ccb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ccaa:	8814      	ldrh	r4, [r2, #0]
 801ccac:	2c30      	cmp	r4, #48	@ 0x30
 801ccae:	bf02      	ittt	eq
 801ccb0:	3202      	addeq	r2, #2
 801ccb2:	4638      	moveq	r0, r7
 801ccb4:	f8cb 2000 	streq.w	r2, [fp]
 801ccb8:	45bc      	cmp	ip, r7
 801ccba:	da14      	bge.n	801cce6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ccbc:	b2bf      	uxth	r7, r7
 801ccbe:	eba7 040c 	sub.w	r4, r7, ip
 801ccc2:	46bc      	mov	ip, r7
 801ccc4:	b2a4      	uxth	r4, r4
 801ccc6:	2600      	movs	r6, #0
 801ccc8:	e7b3      	b.n	801cc32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ccca:	4684      	mov	ip, r0
 801cccc:	b16c      	cbz	r4, 801ccea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ccce:	42b8      	cmp	r0, r7
 801ccd0:	dd00      	ble.n	801ccd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801ccd2:	b2b8      	uxth	r0, r7
 801ccd4:	2400      	movs	r4, #0
 801ccd6:	e003      	b.n	801cce0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ccd8:	f04f 0c01 	mov.w	ip, #1
 801ccdc:	2400      	movs	r4, #0
 801ccde:	4660      	mov	r0, ip
 801cce0:	4626      	mov	r6, r4
 801cce2:	46a0      	mov	r8, r4
 801cce4:	e7a5      	b.n	801cc32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cce6:	2400      	movs	r4, #0
 801cce8:	e7ed      	b.n	801ccc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ccea:	4626      	mov	r6, r4
 801ccec:	46a0      	mov	r8, r4
 801ccee:	e7a0      	b.n	801cc32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ccf0:	2900      	cmp	r1, #0
 801ccf2:	d0b0      	beq.n	801cc56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ccf4:	2720      	movs	r7, #32
 801ccf6:	682e      	ldr	r6, [r5, #0]
 801ccf8:	2900      	cmp	r1, #0
 801ccfa:	d0ac      	beq.n	801cc56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ccfc:	3901      	subs	r1, #1
 801ccfe:	4296      	cmp	r6, r2
 801cd00:	b289      	uxth	r1, r1
 801cd02:	daa7      	bge.n	801cc54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cd04:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cd08:	682b      	ldr	r3, [r5, #0]
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	602b      	str	r3, [r5, #0]
 801cd0e:	e7f2      	b.n	801ccf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801cd10:	b188      	cbz	r0, 801cd36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cd12:	682b      	ldr	r3, [r5, #0]
 801cd14:	3801      	subs	r0, #1
 801cd16:	429a      	cmp	r2, r3
 801cd18:	b280      	uxth	r0, r0
 801cd1a:	dd0c      	ble.n	801cd36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cd1c:	f8db 3000 	ldr.w	r3, [fp]
 801cd20:	1c9c      	adds	r4, r3, #2
 801cd22:	f8cb 4000 	str.w	r4, [fp]
 801cd26:	881c      	ldrh	r4, [r3, #0]
 801cd28:	682b      	ldr	r3, [r5, #0]
 801cd2a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801cd2e:	682b      	ldr	r3, [r5, #0]
 801cd30:	3301      	adds	r3, #1
 801cd32:	602b      	str	r3, [r5, #0]
 801cd34:	e7ec      	b.n	801cd10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cd36:	2620      	movs	r6, #32
 801cd38:	b151      	cbz	r1, 801cd50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cd3a:	6828      	ldr	r0, [r5, #0]
 801cd3c:	3901      	subs	r1, #1
 801cd3e:	4282      	cmp	r2, r0
 801cd40:	b289      	uxth	r1, r1
 801cd42:	dd05      	ble.n	801cd50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cd44:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801cd48:	682b      	ldr	r3, [r5, #0]
 801cd4a:	3301      	adds	r3, #1
 801cd4c:	602b      	str	r3, [r5, #0]
 801cd4e:	e7f3      	b.n	801cd38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801cd50:	b005      	add	sp, #20
 801cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801cd56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd5a:	2400      	movs	r4, #0
 801cd5c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801cd60:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801cd64:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801cd68:	8014      	strh	r4, [r2, #0]
 801cd6a:	701c      	strb	r4, [r3, #0]
 801cd6c:	f888 4000 	strb.w	r4, [r8]
 801cd70:	f88c 4000 	strb.w	r4, [ip]
 801cd74:	f88e 4000 	strb.w	r4, [lr]
 801cd78:	703c      	strb	r4, [r7, #0]
 801cd7a:	6804      	ldr	r4, [r0, #0]
 801cd7c:	b1a4      	cbz	r4, 801cda8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cd7e:	8824      	ldrh	r4, [r4, #0]
 801cd80:	f04f 0901 	mov.w	r9, #1
 801cd84:	b314      	cbz	r4, 801cdcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cd86:	2c2b      	cmp	r4, #43	@ 0x2b
 801cd88:	d001      	beq.n	801cd8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cd8a:	2c20      	cmp	r4, #32
 801cd8c:	d110      	bne.n	801cdb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cd8e:	8014      	strh	r4, [r2, #0]
 801cd90:	6804      	ldr	r4, [r0, #0]
 801cd92:	b10c      	cbz	r4, 801cd98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cd94:	3402      	adds	r4, #2
 801cd96:	6004      	str	r4, [r0, #0]
 801cd98:	680c      	ldr	r4, [r1, #0]
 801cd9a:	b10c      	cbz	r4, 801cda0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cd9c:	3401      	adds	r4, #1
 801cd9e:	600c      	str	r4, [r1, #0]
 801cda0:	6804      	ldr	r4, [r0, #0]
 801cda2:	b17c      	cbz	r4, 801cdc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cda4:	8824      	ldrh	r4, [r4, #0]
 801cda6:	e7ed      	b.n	801cd84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cda8:	680c      	ldr	r4, [r1, #0]
 801cdaa:	b17c      	cbz	r4, 801cdcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cdac:	7824      	ldrb	r4, [r4, #0]
 801cdae:	e7e7      	b.n	801cd80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cdb0:	2c2d      	cmp	r4, #45	@ 0x2d
 801cdb2:	d102      	bne.n	801cdba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cdb4:	f883 9000 	strb.w	r9, [r3]
 801cdb8:	e7ea      	b.n	801cd90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cdba:	2c23      	cmp	r4, #35	@ 0x23
 801cdbc:	d107      	bne.n	801cdce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cdbe:	f888 9000 	strb.w	r9, [r8]
 801cdc2:	e7e5      	b.n	801cd90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cdc4:	680c      	ldr	r4, [r1, #0]
 801cdc6:	b10c      	cbz	r4, 801cdcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cdc8:	7824      	ldrb	r4, [r4, #0]
 801cdca:	e7db      	b.n	801cd84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cdcc:	2400      	movs	r4, #0
 801cdce:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801cdd2:	2b09      	cmp	r3, #9
 801cdd4:	d901      	bls.n	801cdda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cdd6:	2c2a      	cmp	r4, #42	@ 0x2a
 801cdd8:	d122      	bne.n	801ce20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cdda:	2301      	movs	r3, #1
 801cddc:	2c30      	cmp	r4, #48	@ 0x30
 801cdde:	f88e 3000 	strb.w	r3, [lr]
 801cde2:	d10d      	bne.n	801ce00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cde4:	f88c 3000 	strb.w	r3, [ip]
 801cde8:	6803      	ldr	r3, [r0, #0]
 801cdea:	b10b      	cbz	r3, 801cdf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801cdec:	3302      	adds	r3, #2
 801cdee:	6003      	str	r3, [r0, #0]
 801cdf0:	680b      	ldr	r3, [r1, #0]
 801cdf2:	b10b      	cbz	r3, 801cdf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	600b      	str	r3, [r1, #0]
 801cdf8:	6803      	ldr	r3, [r0, #0]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d02f      	beq.n	801ce5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801cdfe:	881c      	ldrh	r4, [r3, #0]
 801ce00:	2c2a      	cmp	r4, #42	@ 0x2a
 801ce02:	d135      	bne.n	801ce70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ce04:	f04f 33ff 	mov.w	r3, #4294967295
 801ce08:	6033      	str	r3, [r6, #0]
 801ce0a:	6803      	ldr	r3, [r0, #0]
 801ce0c:	b10b      	cbz	r3, 801ce12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ce0e:	3302      	adds	r3, #2
 801ce10:	6003      	str	r3, [r0, #0]
 801ce12:	680b      	ldr	r3, [r1, #0]
 801ce14:	b10b      	cbz	r3, 801ce1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ce16:	3301      	adds	r3, #1
 801ce18:	600b      	str	r3, [r1, #0]
 801ce1a:	6803      	ldr	r3, [r0, #0]
 801ce1c:	b31b      	cbz	r3, 801ce66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ce1e:	881c      	ldrh	r4, [r3, #0]
 801ce20:	2c2e      	cmp	r4, #46	@ 0x2e
 801ce22:	d11a      	bne.n	801ce5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce24:	2301      	movs	r3, #1
 801ce26:	703b      	strb	r3, [r7, #0]
 801ce28:	6803      	ldr	r3, [r0, #0]
 801ce2a:	b10b      	cbz	r3, 801ce30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ce2c:	3302      	adds	r3, #2
 801ce2e:	6003      	str	r3, [r0, #0]
 801ce30:	680b      	ldr	r3, [r1, #0]
 801ce32:	b10b      	cbz	r3, 801ce38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ce34:	3301      	adds	r3, #1
 801ce36:	600b      	str	r3, [r1, #0]
 801ce38:	6803      	ldr	r3, [r0, #0]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d036      	beq.n	801ceac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ce3e:	881b      	ldrh	r3, [r3, #0]
 801ce40:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce42:	d137      	bne.n	801ceb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ce44:	f04f 33ff 	mov.w	r3, #4294967295
 801ce48:	602b      	str	r3, [r5, #0]
 801ce4a:	6803      	ldr	r3, [r0, #0]
 801ce4c:	b10b      	cbz	r3, 801ce52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ce4e:	3302      	adds	r3, #2
 801ce50:	6003      	str	r3, [r0, #0]
 801ce52:	680b      	ldr	r3, [r1, #0]
 801ce54:	b10b      	cbz	r3, 801ce5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce56:	3301      	adds	r3, #1
 801ce58:	600b      	str	r3, [r1, #0]
 801ce5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce5e:	680c      	ldr	r4, [r1, #0]
 801ce60:	b134      	cbz	r4, 801ce70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ce62:	7824      	ldrb	r4, [r4, #0]
 801ce64:	e7cc      	b.n	801ce00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ce66:	680b      	ldr	r3, [r1, #0]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d0f6      	beq.n	801ce5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ce6c:	781c      	ldrb	r4, [r3, #0]
 801ce6e:	e7d7      	b.n	801ce20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce70:	2300      	movs	r3, #0
 801ce72:	220a      	movs	r2, #10
 801ce74:	6033      	str	r3, [r6, #0]
 801ce76:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ce7a:	fa1f f38c 	uxth.w	r3, ip
 801ce7e:	2b09      	cmp	r3, #9
 801ce80:	d8ce      	bhi.n	801ce20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ce82:	6833      	ldr	r3, [r6, #0]
 801ce84:	fb02 c303 	mla	r3, r2, r3, ip
 801ce88:	6033      	str	r3, [r6, #0]
 801ce8a:	6803      	ldr	r3, [r0, #0]
 801ce8c:	b10b      	cbz	r3, 801ce92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ce8e:	3302      	adds	r3, #2
 801ce90:	6003      	str	r3, [r0, #0]
 801ce92:	680b      	ldr	r3, [r1, #0]
 801ce94:	b10b      	cbz	r3, 801ce9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ce96:	3301      	adds	r3, #1
 801ce98:	600b      	str	r3, [r1, #0]
 801ce9a:	6803      	ldr	r3, [r0, #0]
 801ce9c:	b10b      	cbz	r3, 801cea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ce9e:	881c      	ldrh	r4, [r3, #0]
 801cea0:	e7e9      	b.n	801ce76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cea2:	680c      	ldr	r4, [r1, #0]
 801cea4:	2c00      	cmp	r4, #0
 801cea6:	d0e6      	beq.n	801ce76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cea8:	7824      	ldrb	r4, [r4, #0]
 801ceaa:	e7e4      	b.n	801ce76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ceac:	680b      	ldr	r3, [r1, #0]
 801ceae:	b10b      	cbz	r3, 801ceb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	e7c5      	b.n	801ce40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	240a      	movs	r4, #10
 801ceb8:	602a      	str	r2, [r5, #0]
 801ceba:	3b30      	subs	r3, #48	@ 0x30
 801cebc:	682a      	ldr	r2, [r5, #0]
 801cebe:	b29e      	uxth	r6, r3
 801cec0:	2e09      	cmp	r6, #9
 801cec2:	d813      	bhi.n	801ceec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801cec4:	fb04 3302 	mla	r3, r4, r2, r3
 801cec8:	602b      	str	r3, [r5, #0]
 801ceca:	6803      	ldr	r3, [r0, #0]
 801cecc:	b10b      	cbz	r3, 801ced2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801cece:	3302      	adds	r3, #2
 801ced0:	6003      	str	r3, [r0, #0]
 801ced2:	680b      	ldr	r3, [r1, #0]
 801ced4:	b10b      	cbz	r3, 801ceda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ced6:	3301      	adds	r3, #1
 801ced8:	600b      	str	r3, [r1, #0]
 801ceda:	6803      	ldr	r3, [r0, #0]
 801cedc:	b10b      	cbz	r3, 801cee2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801cede:	881b      	ldrh	r3, [r3, #0]
 801cee0:	e7eb      	b.n	801ceba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cee2:	680b      	ldr	r3, [r1, #0]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d0e8      	beq.n	801ceba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cee8:	781b      	ldrb	r3, [r3, #0]
 801ceea:	e7e6      	b.n	801ceba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ceec:	2a06      	cmp	r2, #6
 801ceee:	bfa8      	it	ge
 801cef0:	2206      	movge	r2, #6
 801cef2:	602a      	str	r2, [r5, #0]
 801cef4:	e7b1      	b.n	801ce5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801cef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801cef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cefa:	b0a3      	sub	sp, #140	@ 0x8c
 801cefc:	2600      	movs	r6, #0
 801cefe:	4607      	mov	r7, r0
 801cf00:	4688      	mov	r8, r1
 801cf02:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801cf06:	4631      	mov	r1, r6
 801cf08:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801cf0a:	4648      	mov	r0, r9
 801cf0c:	960d      	str	r6, [sp, #52]	@ 0x34
 801cf0e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801cf12:	2242      	movs	r2, #66	@ 0x42
 801cf14:	f00b ff04 	bl	8028d20 <memset>
 801cf18:	b15f      	cbz	r7, 801cf32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801cf1a:	f108 3aff 	add.w	sl, r8, #4294967295
 801cf1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf22:	b152      	cbz	r2, 801cf3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801cf24:	8812      	ldrh	r2, [r2, #0]
 801cf26:	b10a      	cbz	r2, 801cf2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cf28:	459a      	cmp	sl, r3
 801cf2a:	dc2e      	bgt.n	801cf8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801cf2c:	2200      	movs	r2, #0
 801cf2e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cf32:	4638      	mov	r0, r7
 801cf34:	b023      	add	sp, #140	@ 0x8c
 801cf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf3a:	9a08      	ldr	r2, [sp, #32]
 801cf3c:	2a00      	cmp	r2, #0
 801cf3e:	d0f5      	beq.n	801cf2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cf40:	7812      	ldrb	r2, [r2, #0]
 801cf42:	e7f0      	b.n	801cf26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801cf44:	2d00      	cmp	r5, #0
 801cf46:	d0ea      	beq.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf48:	782a      	ldrb	r2, [r5, #0]
 801cf4a:	b142      	cbz	r2, 801cf5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801cf4c:	2a25      	cmp	r2, #37	@ 0x25
 801cf4e:	d001      	beq.n	801cf54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801cf50:	459a      	cmp	sl, r3
 801cf52:	dc08      	bgt.n	801cf66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801cf54:	f1bb 0f00 	cmp.w	fp, #0
 801cf58:	d121      	bne.n	801cf9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801cf5a:	2d00      	cmp	r5, #0
 801cf5c:	d0df      	beq.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cf5e:	782a      	ldrb	r2, [r5, #0]
 801cf60:	f04f 0b00 	mov.w	fp, #0
 801cf64:	e01d      	b.n	801cfa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cf66:	f1bb 0f00 	cmp.w	fp, #0
 801cf6a:	d077      	beq.n	801d05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801cf6c:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf70:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cf74:	f1bb 0f00 	cmp.w	fp, #0
 801cf78:	d002      	beq.n	801cf80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cf7a:	f10b 0202 	add.w	r2, fp, #2
 801cf7e:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf80:	b10d      	cbz	r5, 801cf86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cf82:	3501      	adds	r5, #1
 801cf84:	9508      	str	r5, [sp, #32]
 801cf86:	3301      	adds	r3, #1
 801cf88:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf8c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cf90:	f1bb 0f00 	cmp.w	fp, #0
 801cf94:	d0d6      	beq.n	801cf44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cf96:	f8bb 2000 	ldrh.w	r2, [fp]
 801cf9a:	2a00      	cmp	r2, #0
 801cf9c:	d1d6      	bne.n	801cf4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cf9e:	f8bb 2000 	ldrh.w	r2, [fp]
 801cfa2:	2a00      	cmp	r2, #0
 801cfa4:	d0bb      	beq.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cfa6:	459a      	cmp	sl, r3
 801cfa8:	ddb9      	ble.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cfaa:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801cfae:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801cfb2:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801cfb6:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801cfba:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801cfbe:	960e      	str	r6, [sp, #56]	@ 0x38
 801cfc0:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801cfc4:	960f      	str	r6, [sp, #60]	@ 0x3c
 801cfc6:	f1bb 0f00 	cmp.w	fp, #0
 801cfca:	d002      	beq.n	801cfd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cfcc:	f10b 0302 	add.w	r3, fp, #2
 801cfd0:	9309      	str	r3, [sp, #36]	@ 0x24
 801cfd2:	b10d      	cbz	r5, 801cfd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cfd4:	1c6b      	adds	r3, r5, #1
 801cfd6:	9308      	str	r3, [sp, #32]
 801cfd8:	ab0f      	add	r3, sp, #60	@ 0x3c
 801cfda:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801cfde:	a908      	add	r1, sp, #32
 801cfe0:	a809      	add	r0, sp, #36	@ 0x24
 801cfe2:	9305      	str	r3, [sp, #20]
 801cfe4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801cfe8:	9304      	str	r3, [sp, #16]
 801cfea:	ab0e      	add	r3, sp, #56	@ 0x38
 801cfec:	9303      	str	r3, [sp, #12]
 801cfee:	ab0c      	add	r3, sp, #48	@ 0x30
 801cff0:	9302      	str	r3, [sp, #8]
 801cff2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801cff6:	9301      	str	r3, [sp, #4]
 801cff8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801cffc:	9300      	str	r3, [sp, #0]
 801cffe:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801d002:	f7ff fea8 	bl	801cd56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d008:	2b00      	cmp	r3, #0
 801d00a:	bfbf      	itttt	lt
 801d00c:	6823      	ldrlt	r3, [r4, #0]
 801d00e:	3404      	addlt	r4, #4
 801d010:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d014:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801d016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d018:	2b00      	cmp	r3, #0
 801d01a:	bfbe      	ittt	lt
 801d01c:	6823      	ldrlt	r3, [r4, #0]
 801d01e:	3404      	addlt	r4, #4
 801d020:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d024:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d028:	bfb8      	it	lt
 801d02a:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801d02c:	b1d9      	cbz	r1, 801d066 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d02e:	880b      	ldrh	r3, [r1, #0]
 801d030:	2b69      	cmp	r3, #105	@ 0x69
 801d032:	d01f      	beq.n	801d074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d034:	d82f      	bhi.n	801d096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d036:	2b58      	cmp	r3, #88	@ 0x58
 801d038:	d01c      	beq.n	801d074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d03a:	d818      	bhi.n	801d06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d03c:	2b25      	cmp	r3, #37	@ 0x25
 801d03e:	d034      	beq.n	801d0aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d040:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d042:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d046:	f1bb 0f00 	cmp.w	fp, #0
 801d04a:	f000 80b7 	beq.w	801d1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d04e:	f8bb 5000 	ldrh.w	r5, [fp]
 801d052:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d056:	3301      	adds	r3, #1
 801d058:	930d      	str	r3, [sp, #52]	@ 0x34
 801d05a:	e029      	b.n	801d0b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d05c:	b10d      	cbz	r5, 801d062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d05e:	782a      	ldrb	r2, [r5, #0]
 801d060:	e786      	b.n	801cf70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d062:	462a      	mov	r2, r5
 801d064:	e784      	b.n	801cf70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d066:	2a00      	cmp	r2, #0
 801d068:	d0ea      	beq.n	801d040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d06a:	7813      	ldrb	r3, [r2, #0]
 801d06c:	e7e0      	b.n	801d030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d06e:	3b63      	subs	r3, #99	@ 0x63
 801d070:	2b01      	cmp	r3, #1
 801d072:	d8e5      	bhi.n	801d040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d074:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801d078:	b329      	cbz	r1, 801d0c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d07a:	880b      	ldrh	r3, [r1, #0]
 801d07c:	2b69      	cmp	r3, #105	@ 0x69
 801d07e:	d063      	beq.n	801d148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d080:	d825      	bhi.n	801d0ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d082:	2b63      	cmp	r3, #99	@ 0x63
 801d084:	d038      	beq.n	801d0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d086:	2b64      	cmp	r3, #100	@ 0x64
 801d088:	d05e      	beq.n	801d148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d08a:	2b58      	cmp	r3, #88	@ 0x58
 801d08c:	d07a      	beq.n	801d184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d08e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801d092:	4625      	mov	r5, r4
 801d094:	e036      	b.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d096:	2b73      	cmp	r3, #115	@ 0x73
 801d098:	d0ec      	beq.n	801d074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d09a:	d802      	bhi.n	801d0a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d09c:	2b6f      	cmp	r3, #111	@ 0x6f
 801d09e:	d1cf      	bne.n	801d040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d0a0:	e7e8      	b.n	801d074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d0a2:	2b75      	cmp	r3, #117	@ 0x75
 801d0a4:	d0e6      	beq.n	801d074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d0a6:	2b78      	cmp	r3, #120	@ 0x78
 801d0a8:	e7f9      	b.n	801d09e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d0aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d0ac:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0b2:	b10b      	cbz	r3, 801d0b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d0b4:	3302      	adds	r3, #2
 801d0b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0b8:	9b08      	ldr	r3, [sp, #32]
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	f43f af2f 	beq.w	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d0c0:	3301      	adds	r3, #1
 801d0c2:	9308      	str	r3, [sp, #32]
 801d0c4:	e72b      	b.n	801cf1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d0c6:	2a00      	cmp	r2, #0
 801d0c8:	d0e1      	beq.n	801d08e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d0ca:	7813      	ldrb	r3, [r2, #0]
 801d0cc:	e7d6      	b.n	801d07c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d0ce:	2b73      	cmp	r3, #115	@ 0x73
 801d0d0:	d036      	beq.n	801d140 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d0d2:	d807      	bhi.n	801d0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d0d4:	2b6f      	cmp	r3, #111	@ 0x6f
 801d0d6:	d1da      	bne.n	801d08e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d0d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d0da:	1d25      	adds	r5, r4, #4
 801d0dc:	2308      	movs	r3, #8
 801d0de:	eba8 0202 	sub.w	r2, r8, r2
 801d0e2:	e049      	b.n	801d178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d0e4:	2b75      	cmp	r3, #117	@ 0x75
 801d0e6:	d042      	beq.n	801d16e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d0e8:	2b78      	cmp	r3, #120	@ 0x78
 801d0ea:	d1d0      	bne.n	801d08e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d0ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d0ee:	1d25      	adds	r5, r4, #4
 801d0f0:	2310      	movs	r3, #16
 801d0f2:	eba8 0202 	sub.w	r2, r8, r2
 801d0f6:	e03f      	b.n	801d178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d0f8:	6823      	ldr	r3, [r4, #0]
 801d0fa:	1d25      	adds	r5, r4, #4
 801d0fc:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801d100:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801d104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d106:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d051      	beq.n	801d1b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d10e:	881a      	ldrh	r2, [r3, #0]
 801d110:	a80d      	add	r0, sp, #52	@ 0x34
 801d112:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801d116:	462c      	mov	r4, r5
 801d118:	9005      	str	r0, [sp, #20]
 801d11a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801d11e:	9004      	str	r0, [sp, #16]
 801d120:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d122:	9003      	str	r0, [sp, #12]
 801d124:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801d128:	9002      	str	r0, [sp, #8]
 801d12a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d12c:	9001      	str	r0, [sp, #4]
 801d12e:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801d132:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d136:	9000      	str	r0, [sp, #0]
 801d138:	a810      	add	r0, sp, #64	@ 0x40
 801d13a:	f7ff fd49 	bl	801cbd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d13e:	e7b7      	b.n	801d0b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d140:	1d25      	adds	r5, r4, #4
 801d142:	6823      	ldr	r3, [r4, #0]
 801d144:	9310      	str	r3, [sp, #64]	@ 0x40
 801d146:	e7dd      	b.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d148:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d14a:	230a      	movs	r3, #10
 801d14c:	4649      	mov	r1, r9
 801d14e:	6820      	ldr	r0, [r4, #0]
 801d150:	eba8 0202 	sub.w	r2, r8, r2
 801d154:	1d25      	adds	r5, r4, #4
 801d156:	b292      	uxth	r2, r2
 801d158:	f7ff fcf0 	bl	801cb3c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801d15c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801d160:	2b2d      	cmp	r3, #45	@ 0x2d
 801d162:	d1cf      	bne.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d164:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d168:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d16a:	3302      	adds	r3, #2
 801d16c:	e7ea      	b.n	801d144 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d16e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d170:	1d25      	adds	r5, r4, #4
 801d172:	230a      	movs	r3, #10
 801d174:	eba8 0202 	sub.w	r2, r8, r2
 801d178:	b292      	uxth	r2, r2
 801d17a:	4649      	mov	r1, r9
 801d17c:	6820      	ldr	r0, [r4, #0]
 801d17e:	f7ff fd09 	bl	801cb94 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801d182:	e7bf      	b.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d186:	2310      	movs	r3, #16
 801d188:	4649      	mov	r1, r9
 801d18a:	6820      	ldr	r0, [r4, #0]
 801d18c:	eba8 0202 	sub.w	r2, r8, r2
 801d190:	1d25      	adds	r5, r4, #4
 801d192:	b292      	uxth	r2, r2
 801d194:	f7ff fcfe 	bl	801cb94 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801d198:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801d19c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d0af      	beq.n	801d104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d1a4:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801d1a8:	2919      	cmp	r1, #25
 801d1aa:	d8f7      	bhi.n	801d19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d1ac:	3b20      	subs	r3, #32
 801d1ae:	8013      	strh	r3, [r2, #0]
 801d1b0:	e7f4      	b.n	801d19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d1b2:	9a08      	ldr	r2, [sp, #32]
 801d1b4:	2a00      	cmp	r2, #0
 801d1b6:	d0ab      	beq.n	801d110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d1b8:	7812      	ldrb	r2, [r2, #0]
 801d1ba:	e7a9      	b.n	801d110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d1bc:	2d00      	cmp	r5, #0
 801d1be:	f43f af48 	beq.w	801d052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d1c2:	782d      	ldrb	r5, [r5, #0]
 801d1c4:	e745      	b.n	801d052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d1c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d1c6:	b507      	push	{r0, r1, r2, lr}
 801d1c8:	9300      	str	r3, [sp, #0]
 801d1ca:	4613      	mov	r3, r2
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	f7ff fe92 	bl	801cef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d1d2:	b003      	add	sp, #12
 801d1d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801d1d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d1d8:	b40c      	push	{r2, r3}
 801d1da:	b507      	push	{r0, r1, r2, lr}
 801d1dc:	ab04      	add	r3, sp, #16
 801d1de:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1e2:	9301      	str	r3, [sp, #4]
 801d1e4:	f7ff ffef 	bl	801d1c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d1e8:	b003      	add	sp, #12
 801d1ea:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1ee:	b002      	add	sp, #8
 801d1f0:	4770      	bx	lr
	...

0801d1f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d1f4:	4b01      	ldr	r3, [pc, #4]	@ (801d1fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d1f6:	6018      	str	r0, [r3, #0]
 801d1f8:	4770      	bx	lr
 801d1fa:	bf00      	nop
 801d1fc:	24028588 	.word	0x24028588

0801d200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d200:	4b06      	ldr	r3, [pc, #24]	@ (801d21c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d202:	881a      	ldrh	r2, [r3, #0]
 801d204:	4282      	cmp	r2, r0
 801d206:	d807      	bhi.n	801d218 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d208:	4b05      	ldr	r3, [pc, #20]	@ (801d220 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d20a:	881b      	ldrh	r3, [r3, #0]
 801d20c:	4413      	add	r3, r2
 801d20e:	4298      	cmp	r0, r3
 801d210:	bfac      	ite	ge
 801d212:	2000      	movge	r0, #0
 801d214:	2001      	movlt	r0, #1
 801d216:	4770      	bx	lr
 801d218:	2000      	movs	r0, #0
 801d21a:	4770      	bx	lr
 801d21c:	240285a8 	.word	0x240285a8
 801d220:	240285ac 	.word	0x240285ac

0801d224 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d224:	b508      	push	{r3, lr}
 801d226:	4601      	mov	r1, r0
 801d228:	f7ff ffea 	bl	801d200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d22c:	b118      	cbz	r0, 801d236 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d22e:	4b02      	ldr	r3, [pc, #8]	@ (801d238 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d236:	bd08      	pop	{r3, pc}
 801d238:	2402858c 	.word	0x2402858c

0801d23c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801d23c:	b538      	push	{r3, r4, r5, lr}
 801d23e:	4604      	mov	r4, r0
 801d240:	f7ff ffde 	bl	801d200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d244:	b1d8      	cbz	r0, 801d27e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801d246:	4b0f      	ldr	r3, [pc, #60]	@ (801d284 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801d248:	881b      	ldrh	r3, [r3, #0]
 801d24a:	1ae4      	subs	r4, r4, r3
 801d24c:	230e      	movs	r3, #14
 801d24e:	4363      	muls	r3, r4
 801d250:	4c0d      	ldr	r4, [pc, #52]	@ (801d288 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801d252:	6825      	ldr	r5, [r4, #0]
 801d254:	18ea      	adds	r2, r5, r3
 801d256:	7b12      	ldrb	r2, [r2, #12]
 801d258:	f012 0220 	ands.w	r2, r2, #32
 801d25c:	d010      	beq.n	801d280 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801d25e:	f9b1 2000 	ldrsh.w	r2, [r1]
 801d262:	52ea      	strh	r2, [r5, r3]
 801d264:	6822      	ldr	r2, [r4, #0]
 801d266:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801d26a:	441a      	add	r2, r3
 801d26c:	8055      	strh	r5, [r2, #2]
 801d26e:	6822      	ldr	r2, [r4, #0]
 801d270:	4413      	add	r3, r2
 801d272:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801d276:	809a      	strh	r2, [r3, #4]
 801d278:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801d27c:	80da      	strh	r2, [r3, #6]
 801d27e:	bd38      	pop	{r3, r4, r5, pc}
 801d280:	4610      	mov	r0, r2
 801d282:	e7fc      	b.n	801d27e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801d284:	240285a8 	.word	0x240285a8
 801d288:	24028590 	.word	0x24028590

0801d28c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801d28c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d290:	4606      	mov	r6, r0
 801d292:	460c      	mov	r4, r1
 801d294:	f7ff ffb4 	bl	801d200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d298:	b918      	cbnz	r0, 801d2a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801d29a:	2000      	movs	r0, #0
 801d29c:	b002      	add	sp, #8
 801d29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2a2:	4608      	mov	r0, r1
 801d2a4:	f7f4 ff3b 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	d1f6      	bne.n	801d29a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d2ac:	4b3f      	ldr	r3, [pc, #252]	@ (801d3ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801d2ae:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801d3b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801d2b2:	881d      	ldrh	r5, [r3, #0]
 801d2b4:	f8d9 a000 	ldr.w	sl, [r9]
 801d2b8:	46c8      	mov	r8, r9
 801d2ba:	1b73      	subs	r3, r6, r5
 801d2bc:	250e      	movs	r5, #14
 801d2be:	435d      	muls	r5, r3
 801d2c0:	eb0a 0705 	add.w	r7, sl, r5
 801d2c4:	7b3b      	ldrb	r3, [r7, #12]
 801d2c6:	f013 0f20 	tst.w	r3, #32
 801d2ca:	d0e6      	beq.n	801d29a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d2cc:	4621      	mov	r1, r4
 801d2ce:	4638      	mov	r0, r7
 801d2d0:	f7fc fb28 	bl	8019924 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	d1e1      	bne.n	801d29c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d2d8:	4639      	mov	r1, r7
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f7fc fb22 	bl	8019924 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d2e0:	b108      	cbz	r0, 801d2e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801d2e2:	4621      	mov	r1, r4
 801d2e4:	e020      	b.n	801d328 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801d2e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d2ea:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801d2ee:	429a      	cmp	r2, r3
 801d2f0:	d11e      	bne.n	801d330 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d2f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d2f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d2fa:	429a      	cmp	r2, r3
 801d2fc:	d118      	bne.n	801d330 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d2fe:	6820      	ldr	r0, [r4, #0]
 801d300:	466b      	mov	r3, sp
 801d302:	6861      	ldr	r1, [r4, #4]
 801d304:	c303      	stmia	r3!, {r0, r1}
 801d306:	4639      	mov	r1, r7
 801d308:	4668      	mov	r0, sp
 801d30a:	f7f5 fa47 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d30e:	f8d9 3000 	ldr.w	r3, [r9]
 801d312:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d316:	442b      	add	r3, r5
 801d318:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d31c:	4413      	add	r3, r2
 801d31e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801d322:	4293      	cmp	r3, r2
 801d324:	dc04      	bgt.n	801d330 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d326:	4669      	mov	r1, sp
 801d328:	4630      	mov	r0, r6
 801d32a:	f7ff ff87 	bl	801d23c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801d32e:	e7b5      	b.n	801d29c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d330:	f8d8 3000 	ldr.w	r3, [r8]
 801d334:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d338:	442b      	add	r3, r5
 801d33a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d33e:	4291      	cmp	r1, r2
 801d340:	d119      	bne.n	801d376 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d342:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d346:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d34a:	4291      	cmp	r1, r2
 801d34c:	d113      	bne.n	801d376 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d34e:	6820      	ldr	r0, [r4, #0]
 801d350:	466a      	mov	r2, sp
 801d352:	6861      	ldr	r1, [r4, #4]
 801d354:	c203      	stmia	r2!, {r0, r1}
 801d356:	4619      	mov	r1, r3
 801d358:	4668      	mov	r0, sp
 801d35a:	f7f5 fa1f 	bl	801279c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d35e:	f8d8 3000 	ldr.w	r3, [r8]
 801d362:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d366:	442b      	add	r3, r5
 801d368:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d36c:	4413      	add	r3, r2
 801d36e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d372:	4293      	cmp	r3, r2
 801d374:	ddd7      	ble.n	801d326 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801d376:	4620      	mov	r0, r4
 801d378:	f7f4 fed1 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d37c:	b990      	cbnz	r0, 801d3a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801d37e:	88a7      	ldrh	r7, [r4, #4]
 801d380:	88e3      	ldrh	r3, [r4, #6]
 801d382:	fb17 f703 	smulbb	r7, r7, r3
 801d386:	f8d8 3000 	ldr.w	r3, [r8]
 801d38a:	441d      	add	r5, r3
 801d38c:	4628      	mov	r0, r5
 801d38e:	f7f4 fec6 	bl	801211e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d392:	b948      	cbnz	r0, 801d3a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801d394:	88ab      	ldrh	r3, [r5, #4]
 801d396:	88ea      	ldrh	r2, [r5, #6]
 801d398:	fb13 f302 	smulbb	r3, r3, r2
 801d39c:	42bb      	cmp	r3, r7
 801d39e:	f6bf af7c 	bge.w	801d29a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d3a2:	e79e      	b.n	801d2e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801d3a4:	2700      	movs	r7, #0
 801d3a6:	e7ee      	b.n	801d386 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	e7f7      	b.n	801d39c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801d3ac:	240285a8 	.word	0x240285a8
 801d3b0:	24028590 	.word	0x24028590

0801d3b4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3b6:	4c24      	ldr	r4, [pc, #144]	@ (801d448 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801d3b8:	6823      	ldr	r3, [r4, #0]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d042      	beq.n	801d444 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d3be:	4a23      	ldr	r2, [pc, #140]	@ (801d44c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801d3c0:	4d23      	ldr	r5, [pc, #140]	@ (801d450 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801d3c2:	8811      	ldrh	r1, [r2, #0]
 801d3c4:	f8b5 c000 	ldrh.w	ip, [r5]
 801d3c8:	4822      	ldr	r0, [pc, #136]	@ (801d454 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801d3ca:	4461      	add	r1, ip
 801d3cc:	1c4a      	adds	r2, r1, #1
 801d3ce:	008f      	lsls	r7, r1, #2
 801d3d0:	f022 0201 	bic.w	r2, r2, #1
 801d3d4:	19de      	adds	r6, r3, r7
 801d3d6:	0412      	lsls	r2, r2, #16
 801d3d8:	6006      	str	r6, [r0, #0]
 801d3da:	4e1f      	ldr	r6, [pc, #124]	@ (801d458 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801d3dc:	0c12      	lsrs	r2, r2, #16
 801d3de:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801d3e2:	19da      	adds	r2, r3, r7
 801d3e4:	6032      	str	r2, [r6, #0]
 801d3e6:	220e      	movs	r2, #14
 801d3e8:	fb02 f20c 	mul.w	r2, r2, ip
 801d3ec:	3203      	adds	r2, #3
 801d3ee:	f022 0203 	bic.w	r2, r2, #3
 801d3f2:	443a      	add	r2, r7
 801d3f4:	4f19      	ldr	r7, [pc, #100]	@ (801d45c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d3f6:	4413      	add	r3, r2
 801d3f8:	603b      	str	r3, [r7, #0]
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	4f18      	ldr	r7, [pc, #96]	@ (801d460 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d3fe:	469c      	mov	ip, r3
 801d400:	803b      	strh	r3, [r7, #0]
 801d402:	4f18      	ldr	r7, [pc, #96]	@ (801d464 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d404:	683f      	ldr	r7, [r7, #0]
 801d406:	1aba      	subs	r2, r7, r2
 801d408:	4f17      	ldr	r7, [pc, #92]	@ (801d468 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d40a:	603a      	str	r2, [r7, #0]
 801d40c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801d410:	4a16      	ldr	r2, [pc, #88]	@ (801d46c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d412:	8013      	strh	r3, [r2, #0]
 801d414:	428b      	cmp	r3, r1
 801d416:	d10d      	bne.n	801d434 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801d418:	882d      	ldrh	r5, [r5, #0]
 801d41a:	2300      	movs	r3, #0
 801d41c:	6830      	ldr	r0, [r6, #0]
 801d41e:	240e      	movs	r4, #14
 801d420:	429d      	cmp	r5, r3
 801d422:	d90f      	bls.n	801d444 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d424:	fb04 0203 	mla	r2, r4, r3, r0
 801d428:	3301      	adds	r3, #1
 801d42a:	7b11      	ldrb	r1, [r2, #12]
 801d42c:	f36f 1145 	bfc	r1, #5, #1
 801d430:	7311      	strb	r1, [r2, #12]
 801d432:	e7f5      	b.n	801d420 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801d434:	6822      	ldr	r2, [r4, #0]
 801d436:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d43a:	6802      	ldr	r2, [r0, #0]
 801d43c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801d440:	3301      	adds	r3, #1
 801d442:	e7e7      	b.n	801d414 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d446:	bf00      	nop
 801d448:	2402858c 	.word	0x2402858c
 801d44c:	240285a8 	.word	0x240285a8
 801d450:	240285ac 	.word	0x240285ac
 801d454:	240285a0 	.word	0x240285a0
 801d458:	24028590 	.word	0x24028590
 801d45c:	24028598 	.word	0x24028598
 801d460:	240285aa 	.word	0x240285aa
 801d464:	24028594 	.word	0x24028594
 801d468:	240285a4 	.word	0x240285a4
 801d46c:	2402859c 	.word	0x2402859c

0801d470 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d470:	4b06      	ldr	r3, [pc, #24]	@ (801d48c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	b943      	cbnz	r3, 801d488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d476:	b139      	cbz	r1, 801d488 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d478:	4b05      	ldr	r3, [pc, #20]	@ (801d490 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801d47a:	801a      	strh	r2, [r3, #0]
 801d47c:	4b05      	ldr	r3, [pc, #20]	@ (801d494 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801d47e:	6019      	str	r1, [r3, #0]
 801d480:	4b05      	ldr	r3, [pc, #20]	@ (801d498 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801d482:	6018      	str	r0, [r3, #0]
 801d484:	f7ff bf96 	b.w	801d3b4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop
 801d48c:	24028598 	.word	0x24028598
 801d490:	240285ac 	.word	0x240285ac
 801d494:	24028594 	.word	0x24028594
 801d498:	2402858c 	.word	0x2402858c

0801d49c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d49c:	b470      	push	{r4, r5, r6}
 801d49e:	4c07      	ldr	r4, [pc, #28]	@ (801d4bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d4a0:	4605      	mov	r5, r0
 801d4a2:	4610      	mov	r0, r2
 801d4a4:	9a03      	ldr	r2, [sp, #12]
 801d4a6:	6826      	ldr	r6, [r4, #0]
 801d4a8:	b936      	cbnz	r6, 801d4b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d4aa:	6025      	str	r5, [r4, #0]
 801d4ac:	4c04      	ldr	r4, [pc, #16]	@ (801d4c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d4ae:	8021      	strh	r1, [r4, #0]
 801d4b0:	4619      	mov	r1, r3
 801d4b2:	bc70      	pop	{r4, r5, r6}
 801d4b4:	f7ff bfdc 	b.w	801d470 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d4b8:	bc70      	pop	{r4, r5, r6}
 801d4ba:	4770      	bx	lr
 801d4bc:	240285b0 	.word	0x240285b0
 801d4c0:	240285a8 	.word	0x240285a8

0801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d4c4:	4a12      	ldr	r2, [pc, #72]	@ (801d510 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801d4c6:	8803      	ldrh	r3, [r0, #0]
 801d4c8:	8812      	ldrh	r2, [r2, #0]
 801d4ca:	4293      	cmp	r3, r2
 801d4cc:	d207      	bcs.n	801d4de <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801d4ce:	4a11      	ldr	r2, [pc, #68]	@ (801d514 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d4d0:	2114      	movs	r1, #20
 801d4d2:	6812      	ldr	r2, [r2, #0]
 801d4d4:	fb01 2303 	mla	r3, r1, r3, r2
 801d4d8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d4dc:	4770      	bx	lr
 801d4de:	490e      	ldr	r1, [pc, #56]	@ (801d518 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d4e0:	8809      	ldrh	r1, [r1, #0]
 801d4e2:	4411      	add	r1, r2
 801d4e4:	428b      	cmp	r3, r1
 801d4e6:	da04      	bge.n	801d4f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801d4e8:	1a9b      	subs	r3, r3, r2
 801d4ea:	4a0c      	ldr	r2, [pc, #48]	@ (801d51c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d4ec:	210e      	movs	r1, #14
 801d4ee:	6812      	ldr	r2, [r2, #0]
 801d4f0:	e7f0      	b.n	801d4d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801d4f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d4f6:	4293      	cmp	r3, r2
 801d4f8:	d108      	bne.n	801d50c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801d4fa:	4b09      	ldr	r3, [pc, #36]	@ (801d520 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d4fc:	781b      	ldrb	r3, [r3, #0]
 801d4fe:	b91b      	cbnz	r3, 801d508 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801d500:	4b08      	ldr	r3, [pc, #32]	@ (801d524 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d502:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d506:	4770      	bx	lr
 801d508:	4b07      	ldr	r3, [pc, #28]	@ (801d528 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d50a:	e7fa      	b.n	801d502 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801d50c:	2000      	movs	r0, #0
 801d50e:	4770      	bx	lr
 801d510:	240285a8 	.word	0x240285a8
 801d514:	240285b0 	.word	0x240285b0
 801d518:	240285ac 	.word	0x240285ac
 801d51c:	24028590 	.word	0x24028590
 801d520:	24028518 	.word	0x24028518
 801d524:	2402851a 	.word	0x2402851a
 801d528:	2402851c 	.word	0x2402851c

0801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d52c:	4a12      	ldr	r2, [pc, #72]	@ (801d578 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801d52e:	8803      	ldrh	r3, [r0, #0]
 801d530:	8812      	ldrh	r2, [r2, #0]
 801d532:	4293      	cmp	r3, r2
 801d534:	d207      	bcs.n	801d546 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801d536:	4a11      	ldr	r2, [pc, #68]	@ (801d57c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d538:	2114      	movs	r1, #20
 801d53a:	6812      	ldr	r2, [r2, #0]
 801d53c:	fb01 2303 	mla	r3, r1, r3, r2
 801d540:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d544:	4770      	bx	lr
 801d546:	490e      	ldr	r1, [pc, #56]	@ (801d580 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d548:	8809      	ldrh	r1, [r1, #0]
 801d54a:	4411      	add	r1, r2
 801d54c:	428b      	cmp	r3, r1
 801d54e:	da04      	bge.n	801d55a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801d550:	1a9b      	subs	r3, r3, r2
 801d552:	4a0c      	ldr	r2, [pc, #48]	@ (801d584 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d554:	210e      	movs	r1, #14
 801d556:	6812      	ldr	r2, [r2, #0]
 801d558:	e7f0      	b.n	801d53c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801d55a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d55e:	4293      	cmp	r3, r2
 801d560:	d108      	bne.n	801d574 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801d562:	4b09      	ldr	r3, [pc, #36]	@ (801d588 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d564:	781b      	ldrb	r3, [r3, #0]
 801d566:	b91b      	cbnz	r3, 801d570 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801d568:	4b08      	ldr	r3, [pc, #32]	@ (801d58c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d56a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d56e:	4770      	bx	lr
 801d570:	4b07      	ldr	r3, [pc, #28]	@ (801d590 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d572:	e7fa      	b.n	801d56a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801d574:	2000      	movs	r0, #0
 801d576:	4770      	bx	lr
 801d578:	240285a8 	.word	0x240285a8
 801d57c:	240285b0 	.word	0x240285b0
 801d580:	240285ac 	.word	0x240285ac
 801d584:	24028590 	.word	0x24028590
 801d588:	24028518 	.word	0x24028518
 801d58c:	2402851c 	.word	0x2402851c
 801d590:	2402851a 	.word	0x2402851a

0801d594 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d594:	4a22      	ldr	r2, [pc, #136]	@ (801d620 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801d596:	b530      	push	{r4, r5, lr}
 801d598:	880b      	ldrh	r3, [r1, #0]
 801d59a:	8812      	ldrh	r2, [r2, #0]
 801d59c:	4293      	cmp	r3, r2
 801d59e:	d213      	bcs.n	801d5c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801d5a0:	4a20      	ldr	r2, [pc, #128]	@ (801d624 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d5a2:	2114      	movs	r1, #20
 801d5a4:	6812      	ldr	r2, [r2, #0]
 801d5a6:	fb01 2303 	mla	r3, r1, r3, r2
 801d5aa:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d5ae:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d5b2:	8a1a      	ldrh	r2, [r3, #16]
 801d5b4:	8a5b      	ldrh	r3, [r3, #18]
 801d5b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d5ba:	8004      	strh	r4, [r0, #0]
 801d5bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d5c0:	8041      	strh	r1, [r0, #2]
 801d5c2:	8082      	strh	r2, [r0, #4]
 801d5c4:	80c3      	strh	r3, [r0, #6]
 801d5c6:	e024      	b.n	801d612 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801d5c8:	4917      	ldr	r1, [pc, #92]	@ (801d628 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d5ca:	8809      	ldrh	r1, [r1, #0]
 801d5cc:	4411      	add	r1, r2
 801d5ce:	428b      	cmp	r3, r1
 801d5d0:	da10      	bge.n	801d5f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801d5d2:	1a9b      	subs	r3, r3, r2
 801d5d4:	220e      	movs	r2, #14
 801d5d6:	4353      	muls	r3, r2
 801d5d8:	4a14      	ldr	r2, [pc, #80]	@ (801d62c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d5da:	6811      	ldr	r1, [r2, #0]
 801d5dc:	18ca      	adds	r2, r1, r3
 801d5de:	5ecd      	ldrsh	r5, [r1, r3]
 801d5e0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801d5e4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801d5e8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801d5ec:	8005      	strh	r5, [r0, #0]
 801d5ee:	8044      	strh	r4, [r0, #2]
 801d5f0:	8081      	strh	r1, [r0, #4]
 801d5f2:	e7e7      	b.n	801d5c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d5f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d5f8:	4293      	cmp	r3, r2
 801d5fa:	d10b      	bne.n	801d614 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801d5fc:	4b0c      	ldr	r3, [pc, #48]	@ (801d630 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d5fe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d602:	4b0c      	ldr	r3, [pc, #48]	@ (801d634 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d604:	8081      	strh	r1, [r0, #4]
 801d606:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d60a:	2300      	movs	r3, #0
 801d60c:	80c2      	strh	r2, [r0, #6]
 801d60e:	8003      	strh	r3, [r0, #0]
 801d610:	8043      	strh	r3, [r0, #2]
 801d612:	bd30      	pop	{r4, r5, pc}
 801d614:	2300      	movs	r3, #0
 801d616:	8003      	strh	r3, [r0, #0]
 801d618:	8043      	strh	r3, [r0, #2]
 801d61a:	8083      	strh	r3, [r0, #4]
 801d61c:	e7d2      	b.n	801d5c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d61e:	bf00      	nop
 801d620:	240285a8 	.word	0x240285a8
 801d624:	240285b0 	.word	0x240285b0
 801d628:	240285ac 	.word	0x240285ac
 801d62c:	24028590 	.word	0x24028590
 801d630:	24028514 	.word	0x24028514
 801d634:	24028516 	.word	0x24028516

0801d638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d638:	4a17      	ldr	r2, [pc, #92]	@ (801d698 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d63a:	8803      	ldrh	r3, [r0, #0]
 801d63c:	8812      	ldrh	r2, [r2, #0]
 801d63e:	4293      	cmp	r3, r2
 801d640:	d213      	bcs.n	801d66a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801d642:	4a16      	ldr	r2, [pc, #88]	@ (801d69c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d644:	2114      	movs	r1, #20
 801d646:	6812      	ldr	r2, [r2, #0]
 801d648:	fb01 2303 	mla	r3, r1, r3, r2
 801d64c:	8a1a      	ldrh	r2, [r3, #16]
 801d64e:	8919      	ldrh	r1, [r3, #8]
 801d650:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d654:	428a      	cmp	r2, r1
 801d656:	db1d      	blt.n	801d694 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d658:	8a58      	ldrh	r0, [r3, #18]
 801d65a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d65e:	895b      	ldrh	r3, [r3, #10]
 801d660:	4298      	cmp	r0, r3
 801d662:	bfac      	ite	ge
 801d664:	2000      	movge	r0, #0
 801d666:	2001      	movlt	r0, #1
 801d668:	4770      	bx	lr
 801d66a:	490d      	ldr	r1, [pc, #52]	@ (801d6a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d66c:	8809      	ldrh	r1, [r1, #0]
 801d66e:	4411      	add	r1, r2
 801d670:	428b      	cmp	r3, r1
 801d672:	da0d      	bge.n	801d690 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d674:	1a9b      	subs	r3, r3, r2
 801d676:	4a0b      	ldr	r2, [pc, #44]	@ (801d6a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d678:	210e      	movs	r1, #14
 801d67a:	6812      	ldr	r2, [r2, #0]
 801d67c:	fb01 2303 	mla	r3, r1, r3, r2
 801d680:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d684:	891a      	ldrh	r2, [r3, #8]
 801d686:	4291      	cmp	r1, r2
 801d688:	db04      	blt.n	801d694 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d68a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d68e:	e7e6      	b.n	801d65e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801d690:	2000      	movs	r0, #0
 801d692:	4770      	bx	lr
 801d694:	2001      	movs	r0, #1
 801d696:	4770      	bx	lr
 801d698:	240285a8 	.word	0x240285a8
 801d69c:	240285b0 	.word	0x240285b0
 801d6a0:	240285ac 	.word	0x240285ac
 801d6a4:	24028590 	.word	0x24028590

0801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d6a8:	4a12      	ldr	r2, [pc, #72]	@ (801d6f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d6aa:	8803      	ldrh	r3, [r0, #0]
 801d6ac:	8811      	ldrh	r1, [r2, #0]
 801d6ae:	428b      	cmp	r3, r1
 801d6b0:	d20b      	bcs.n	801d6ca <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d6b2:	4a11      	ldr	r2, [pc, #68]	@ (801d6f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d6b4:	6812      	ldr	r2, [r2, #0]
 801d6b6:	b112      	cbz	r2, 801d6be <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d6b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d6bc:	b9c0      	cbnz	r0, 801d6f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d6be:	4a0f      	ldr	r2, [pc, #60]	@ (801d6fc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d6c0:	6811      	ldr	r1, [r2, #0]
 801d6c2:	2214      	movs	r2, #20
 801d6c4:	4353      	muls	r3, r2
 801d6c6:	58c8      	ldr	r0, [r1, r3]
 801d6c8:	4770      	bx	lr
 801d6ca:	4a0d      	ldr	r2, [pc, #52]	@ (801d700 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d6cc:	8812      	ldrh	r2, [r2, #0]
 801d6ce:	440a      	add	r2, r1
 801d6d0:	4293      	cmp	r3, r2
 801d6d2:	da04      	bge.n	801d6de <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d6d4:	4a08      	ldr	r2, [pc, #32]	@ (801d6f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d6d6:	6812      	ldr	r2, [r2, #0]
 801d6d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d6dc:	4770      	bx	lr
 801d6de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	d103      	bne.n	801d6ee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d6e6:	4b07      	ldr	r3, [pc, #28]	@ (801d704 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801d6ec:	4770      	bx	lr
 801d6ee:	2000      	movs	r0, #0
 801d6f0:	4770      	bx	lr
 801d6f2:	bf00      	nop
 801d6f4:	240285a8 	.word	0x240285a8
 801d6f8:	2402858c 	.word	0x2402858c
 801d6fc:	240285b0 	.word	0x240285b0
 801d700:	240285ac 	.word	0x240285ac
 801d704:	24028520 	.word	0x24028520

0801d708 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d708:	4b24      	ldr	r3, [pc, #144]	@ (801d79c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d70a:	8802      	ldrh	r2, [r0, #0]
 801d70c:	8818      	ldrh	r0, [r3, #0]
 801d70e:	4282      	cmp	r2, r0
 801d710:	d221      	bcs.n	801d756 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d712:	4b23      	ldr	r3, [pc, #140]	@ (801d7a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d714:	6819      	ldr	r1, [r3, #0]
 801d716:	2314      	movs	r3, #20
 801d718:	fb03 1302 	mla	r3, r3, r2, r1
 801d71c:	6858      	ldr	r0, [r3, #4]
 801d71e:	2800      	cmp	r0, #0
 801d720:	d03a      	beq.n	801d798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d722:	4920      	ldr	r1, [pc, #128]	@ (801d7a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d724:	6809      	ldr	r1, [r1, #0]
 801d726:	2900      	cmp	r1, #0
 801d728:	d036      	beq.n	801d798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d72a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d72e:	2900      	cmp	r1, #0
 801d730:	d032      	beq.n	801d798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d732:	891a      	ldrh	r2, [r3, #8]
 801d734:	8958      	ldrh	r0, [r3, #10]
 801d736:	4350      	muls	r0, r2
 801d738:	7c5a      	ldrb	r2, [r3, #17]
 801d73a:	7cdb      	ldrb	r3, [r3, #19]
 801d73c:	0952      	lsrs	r2, r2, #5
 801d73e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d742:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d746:	2b0b      	cmp	r3, #11
 801d748:	bf18      	it	ne
 801d74a:	0040      	lslne	r0, r0, #1
 801d74c:	3003      	adds	r0, #3
 801d74e:	f020 0003 	bic.w	r0, r0, #3
 801d752:	4408      	add	r0, r1
 801d754:	4770      	bx	lr
 801d756:	4b14      	ldr	r3, [pc, #80]	@ (801d7a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d758:	881b      	ldrh	r3, [r3, #0]
 801d75a:	4403      	add	r3, r0
 801d75c:	429a      	cmp	r2, r3
 801d75e:	da1a      	bge.n	801d796 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d760:	4b12      	ldr	r3, [pc, #72]	@ (801d7ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d762:	1a10      	subs	r0, r2, r0
 801d764:	210e      	movs	r1, #14
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	fb01 3000 	mla	r0, r1, r0, r3
 801d76c:	7b03      	ldrb	r3, [r0, #12]
 801d76e:	f003 031f 	and.w	r3, r3, #31
 801d772:	2b0b      	cmp	r3, #11
 801d774:	d10b      	bne.n	801d78e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d776:	8903      	ldrh	r3, [r0, #8]
 801d778:	8940      	ldrh	r0, [r0, #10]
 801d77a:	4358      	muls	r0, r3
 801d77c:	4b09      	ldr	r3, [pc, #36]	@ (801d7a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d77e:	3003      	adds	r0, #3
 801d780:	6819      	ldr	r1, [r3, #0]
 801d782:	f020 0303 	bic.w	r3, r0, #3
 801d786:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d78a:	4418      	add	r0, r3
 801d78c:	4770      	bx	lr
 801d78e:	2b0d      	cmp	r3, #13
 801d790:	d101      	bne.n	801d796 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d792:	300d      	adds	r0, #13
 801d794:	4770      	bx	lr
 801d796:	2000      	movs	r0, #0
 801d798:	4770      	bx	lr
 801d79a:	bf00      	nop
 801d79c:	240285a8 	.word	0x240285a8
 801d7a0:	240285b0 	.word	0x240285b0
 801d7a4:	2402858c 	.word	0x2402858c
 801d7a8:	240285ac 	.word	0x240285ac
 801d7ac:	24028590 	.word	0x24028590

0801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d7b0:	4b1f      	ldr	r3, [pc, #124]	@ (801d830 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801d7b2:	b510      	push	{r4, lr}
 801d7b4:	8802      	ldrh	r2, [r0, #0]
 801d7b6:	881b      	ldrh	r3, [r3, #0]
 801d7b8:	429a      	cmp	r2, r3
 801d7ba:	d21a      	bcs.n	801d7f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801d7bc:	4b1d      	ldr	r3, [pc, #116]	@ (801d834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801d7be:	2114      	movs	r1, #20
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	fb01 3102 	mla	r1, r1, r2, r3
 801d7c6:	7c4b      	ldrb	r3, [r1, #17]
 801d7c8:	0958      	lsrs	r0, r3, #5
 801d7ca:	7ccb      	ldrb	r3, [r1, #19]
 801d7cc:	491a      	ldr	r1, [pc, #104]	@ (801d838 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801d7ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d7d2:	6809      	ldr	r1, [r1, #0]
 801d7d4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801d7d8:	b2d8      	uxtb	r0, r3
 801d7da:	b149      	cbz	r1, 801d7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d7dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d7e0:	b132      	cbz	r2, 801d7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d7e2:	2b0e      	cmp	r3, #14
 801d7e4:	d021      	beq.n	801d82a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d7e6:	280f      	cmp	r0, #15
 801d7e8:	d01d      	beq.n	801d826 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801d7ea:	2810      	cmp	r0, #16
 801d7ec:	bf08      	it	eq
 801d7ee:	2002      	moveq	r0, #2
 801d7f0:	bd10      	pop	{r4, pc}
 801d7f2:	4912      	ldr	r1, [pc, #72]	@ (801d83c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801d7f4:	8809      	ldrh	r1, [r1, #0]
 801d7f6:	4419      	add	r1, r3
 801d7f8:	428a      	cmp	r2, r1
 801d7fa:	da09      	bge.n	801d810 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801d7fc:	1ad3      	subs	r3, r2, r3
 801d7fe:	4a10      	ldr	r2, [pc, #64]	@ (801d840 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801d800:	210e      	movs	r1, #14
 801d802:	6812      	ldr	r2, [r2, #0]
 801d804:	fb01 2303 	mla	r3, r1, r3, r2
 801d808:	7b18      	ldrb	r0, [r3, #12]
 801d80a:	f000 001f 	and.w	r0, r0, #31
 801d80e:	e7ef      	b.n	801d7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d810:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801d814:	429a      	cmp	r2, r3
 801d816:	d108      	bne.n	801d82a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d818:	f7e9 ffce 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 801d81c:	6803      	ldr	r3, [r0, #0]
 801d81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d824:	4718      	bx	r3
 801d826:	2001      	movs	r0, #1
 801d828:	e7e2      	b.n	801d7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d82a:	2000      	movs	r0, #0
 801d82c:	e7e0      	b.n	801d7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d82e:	bf00      	nop
 801d830:	240285a8 	.word	0x240285a8
 801d834:	240285b0 	.word	0x240285b0
 801d838:	2402858c 	.word	0x2402858c
 801d83c:	240285ac 	.word	0x240285ac
 801d840:	24028590 	.word	0x24028590

0801d844 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d844:	2018      	movs	r0, #24
 801d846:	4770      	bx	lr

0801d848 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d848:	2001      	movs	r0, #1
 801d84a:	4770      	bx	lr

0801d84c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d84c:	4b02      	ldr	r3, [pc, #8]	@ (801d858 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801d84e:	8818      	ldrh	r0, [r3, #0]
 801d850:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d854:	b280      	uxth	r0, r0
 801d856:	4770      	bx	lr
 801d858:	2402851a 	.word	0x2402851a

0801d85c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d85c:	2bff      	cmp	r3, #255	@ 0xff
 801d85e:	d04c      	beq.n	801d8fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d860:	2a2c      	cmp	r2, #44	@ 0x2c
 801d862:	d030      	beq.n	801d8c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801d864:	d80f      	bhi.n	801d886 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801d866:	2a08      	cmp	r2, #8
 801d868:	d043      	beq.n	801d8f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d86a:	d805      	bhi.n	801d878 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801d86c:	2a04      	cmp	r2, #4
 801d86e:	d03e      	beq.n	801d8ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d870:	2a05      	cmp	r2, #5
 801d872:	d03a      	beq.n	801d8ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801d874:	2300      	movs	r3, #0
 801d876:	e024      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d878:	2a0a      	cmp	r2, #10
 801d87a:	d03a      	beq.n	801d8f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d87c:	d301      	bcc.n	801d882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801d87e:	2a0b      	cmp	r2, #11
 801d880:	d1f8      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d882:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d884:	e01d      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d886:	2a30      	cmp	r2, #48	@ 0x30
 801d888:	d035      	beq.n	801d8f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d88a:	d80a      	bhi.n	801d8a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801d88c:	2a2e      	cmp	r2, #46	@ 0x2e
 801d88e:	684b      	ldr	r3, [r1, #4]
 801d890:	d023      	beq.n	801d8da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d892:	d90d      	bls.n	801d8b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801d894:	781a      	ldrb	r2, [r3, #0]
 801d896:	785b      	ldrb	r3, [r3, #1]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d1eb      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d89c:	b98a      	cbnz	r2, 801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d89e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d8a0:	e00f      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8a2:	2a32      	cmp	r2, #50	@ 0x32
 801d8a4:	d027      	beq.n	801d8f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d8a6:	d301      	bcc.n	801d8ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801d8a8:	2a33      	cmp	r2, #51	@ 0x33
 801d8aa:	d1e3      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d8ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d8ae:	e008      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8b0:	781a      	ldrb	r2, [r3, #0]
 801d8b2:	785b      	ldrb	r3, [r3, #1]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d1dd      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d8b8:	2a00      	cmp	r2, #0
 801d8ba:	d0f0      	beq.n	801d89e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801d8bc:	2a01      	cmp	r2, #1
 801d8be:	d1d9      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d8c0:	6943      	ldr	r3, [r0, #20]
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	4770      	bx	lr
 801d8c6:	684b      	ldr	r3, [r1, #4]
 801d8c8:	781a      	ldrb	r2, [r3, #0]
 801d8ca:	785b      	ldrb	r3, [r3, #1]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d1d1      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d8d0:	b14a      	cbz	r2, 801d8e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801d8d2:	2a01      	cmp	r2, #1
 801d8d4:	bf08      	it	eq
 801d8d6:	68c3      	ldreq	r3, [r0, #12]
 801d8d8:	e7f3      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8da:	781a      	ldrb	r2, [r3, #0]
 801d8dc:	785b      	ldrb	r3, [r3, #1]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d1c8      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d8e2:	2a00      	cmp	r2, #0
 801d8e4:	d1ed      	bne.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8e6:	69c3      	ldr	r3, [r0, #28]
 801d8e8:	e7eb      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d8ec:	e7e9      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801d8f0:	e7e7      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801d8f4:	e7e5      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8f6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801d8f8:	e7e3      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d8fa:	2a2c      	cmp	r2, #44	@ 0x2c
 801d8fc:	d030      	beq.n	801d960 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801d8fe:	d80f      	bhi.n	801d920 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801d900:	2a08      	cmp	r2, #8
 801d902:	d042      	beq.n	801d98a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d904:	d805      	bhi.n	801d912 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801d906:	2a04      	cmp	r2, #4
 801d908:	d03d      	beq.n	801d986 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d90a:	2a05      	cmp	r2, #5
 801d90c:	d1b2      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d90e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801d910:	e7d7      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d912:	2a0a      	cmp	r2, #10
 801d914:	d039      	beq.n	801d98a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d916:	d301      	bcc.n	801d91c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801d918:	2a0b      	cmp	r2, #11
 801d91a:	d1ab      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d91c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801d91e:	e7d0      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d920:	2a30      	cmp	r2, #48	@ 0x30
 801d922:	d034      	beq.n	801d98e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d924:	d80b      	bhi.n	801d93e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801d926:	2a2e      	cmp	r2, #46	@ 0x2e
 801d928:	684b      	ldr	r3, [r1, #4]
 801d92a:	d023      	beq.n	801d974 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801d92c:	d90e      	bls.n	801d94c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801d92e:	781a      	ldrb	r2, [r3, #0]
 801d930:	785b      	ldrb	r3, [r3, #1]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d19e      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d936:	2a00      	cmp	r2, #0
 801d938:	d1c3      	bne.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d93a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801d93c:	e7c1      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d93e:	2a32      	cmp	r2, #50	@ 0x32
 801d940:	d025      	beq.n	801d98e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d942:	d301      	bcc.n	801d948 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801d944:	2a33      	cmp	r2, #51	@ 0x33
 801d946:	d195      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d948:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801d94a:	e7ba      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d94c:	781a      	ldrb	r2, [r3, #0]
 801d94e:	785b      	ldrb	r3, [r3, #1]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d18f      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d954:	2a00      	cmp	r2, #0
 801d956:	d0f0      	beq.n	801d93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801d958:	2a01      	cmp	r2, #1
 801d95a:	d18b      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d95c:	6983      	ldr	r3, [r0, #24]
 801d95e:	e7b0      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d960:	684b      	ldr	r3, [r1, #4]
 801d962:	781a      	ldrb	r2, [r3, #0]
 801d964:	785b      	ldrb	r3, [r3, #1]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d184      	bne.n	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d96a:	b152      	cbz	r2, 801d982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d96c:	2a01      	cmp	r2, #1
 801d96e:	bf08      	it	eq
 801d970:	6903      	ldreq	r3, [r0, #16]
 801d972:	e7a6      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d974:	781a      	ldrb	r2, [r3, #0]
 801d976:	785b      	ldrb	r3, [r3, #1]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f47f af7b 	bne.w	801d874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d97e:	2a00      	cmp	r2, #0
 801d980:	d19f      	bne.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d982:	6a03      	ldr	r3, [r0, #32]
 801d984:	e79d      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d986:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d988:	e79b      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d98a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801d98c:	e799      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d98e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801d990:	e797      	b.n	801d8c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801d992 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d996:	b085      	sub	sp, #20
 801d998:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d99a:	9203      	str	r2, [sp, #12]
 801d99c:	6870      	ldr	r0, [r6, #4]
 801d99e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801d9a2:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801d9a6:	9101      	str	r1, [sp, #4]
 801d9a8:	fa1f f885 	uxth.w	r8, r5
 801d9ac:	43ed      	mvns	r5, r5
 801d9ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d9b2:	b2ed      	uxtb	r5, r5
 801d9b4:	fb00 2404 	mla	r4, r0, r4, r2
 801d9b8:	6832      	ldr	r2, [r6, #0]
 801d9ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d9be:	4414      	add	r4, r2
 801d9c0:	f8dc 2000 	ldr.w	r2, [ip]
 801d9c4:	9202      	str	r2, [sp, #8]
 801d9c6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d9ca:	f102 0e04 	add.w	lr, r2, #4
 801d9ce:	9a01      	ldr	r2, [sp, #4]
 801d9d0:	2a00      	cmp	r2, #0
 801d9d2:	dc03      	bgt.n	801d9dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d9d4:	9a03      	ldr	r2, [sp, #12]
 801d9d6:	2a00      	cmp	r2, #0
 801d9d8:	f340 8116 	ble.w	801dc08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d9dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d9de:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d9e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d9e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d9e8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d9ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	dd0e      	ble.n	801da12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d9f4:	1406      	asrs	r6, r0, #16
 801d9f6:	d405      	bmi.n	801da04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9f8:	4556      	cmp	r6, sl
 801d9fa:	da03      	bge.n	801da04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9fc:	1416      	asrs	r6, r2, #16
 801d9fe:	d401      	bmi.n	801da04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da00:	454e      	cmp	r6, r9
 801da02:	db07      	blt.n	801da14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801da04:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801da06:	3b01      	subs	r3, #1
 801da08:	3403      	adds	r4, #3
 801da0a:	4430      	add	r0, r6
 801da0c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801da0e:	4432      	add	r2, r6
 801da10:	e7ee      	b.n	801d9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801da12:	d063      	beq.n	801dadc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801da14:	1e5e      	subs	r6, r3, #1
 801da16:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801da18:	fb07 0706 	mla	r7, r7, r6, r0
 801da1c:	143f      	asrs	r7, r7, #16
 801da1e:	d454      	bmi.n	801daca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da20:	4557      	cmp	r7, sl
 801da22:	da52      	bge.n	801daca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da24:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801da26:	fb07 2606 	mla	r6, r7, r6, r2
 801da2a:	1436      	asrs	r6, r6, #16
 801da2c:	d44d      	bmi.n	801daca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da2e:	454e      	cmp	r6, r9
 801da30:	da4b      	bge.n	801daca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da32:	1ce6      	adds	r6, r4, #3
 801da34:	4699      	mov	r9, r3
 801da36:	f1b9 0f00 	cmp.w	r9, #0
 801da3a:	f106 0603 	add.w	r6, r6, #3
 801da3e:	dd48      	ble.n	801dad2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801da40:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801da44:	1417      	asrs	r7, r2, #16
 801da46:	9902      	ldr	r1, [sp, #8]
 801da48:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801da4c:	f109 39ff 	add.w	r9, r9, #4294967295
 801da50:	fb0b 1707 	mla	r7, fp, r7, r1
 801da54:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801da58:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801da5a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801da5e:	fb1b fb05 	smulbb	fp, fp, r5
 801da62:	4408      	add	r0, r1
 801da64:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801da66:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801da6a:	440a      	add	r2, r1
 801da6c:	eb0e 0a07 	add.w	sl, lr, r7
 801da70:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801da74:	fb07 b708 	mla	r7, r7, r8, fp
 801da78:	b2bf      	uxth	r7, r7
 801da7a:	f107 0b01 	add.w	fp, r7, #1
 801da7e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801da82:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801da86:	fb1b fb05 	smulbb	fp, fp, r5
 801da8a:	123f      	asrs	r7, r7, #8
 801da8c:	f806 7c06 	strb.w	r7, [r6, #-6]
 801da90:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801da94:	fb07 b708 	mla	r7, r7, r8, fp
 801da98:	b2bf      	uxth	r7, r7
 801da9a:	f107 0b01 	add.w	fp, r7, #1
 801da9e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801daa2:	123f      	asrs	r7, r7, #8
 801daa4:	f806 7c05 	strb.w	r7, [r6, #-5]
 801daa8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801daac:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801dab0:	fb1a fa05 	smulbb	sl, sl, r5
 801dab4:	fb07 a708 	mla	r7, r7, r8, sl
 801dab8:	b2bf      	uxth	r7, r7
 801daba:	f107 0a01 	add.w	sl, r7, #1
 801dabe:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801dac2:	123f      	asrs	r7, r7, #8
 801dac4:	f806 7c04 	strb.w	r7, [r6, #-4]
 801dac8:	e7b5      	b.n	801da36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801daca:	2700      	movs	r7, #0
 801dacc:	1bde      	subs	r6, r3, r7
 801dace:	2e00      	cmp	r6, #0
 801dad0:	dc42      	bgt.n	801db58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801dad2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dad6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dada:	441c      	add	r4, r3
 801dadc:	9b01      	ldr	r3, [sp, #4]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	f340 8092 	ble.w	801dc08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801dae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801daea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801daee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801daf2:	eef0 6a62 	vmov.f32	s13, s5
 801daf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dafa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dafe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db02:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801db06:	eef0 6a43 	vmov.f32	s13, s6
 801db0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db0e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801db12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db2a:	ee12 2a90 	vmov	r2, s5
 801db2e:	eef0 2a47 	vmov.f32	s5, s14
 801db32:	fb92 f3f3 	sdiv	r3, r2, r3
 801db36:	ee13 2a10 	vmov	r2, s6
 801db3a:	9311      	str	r3, [sp, #68]	@ 0x44
 801db3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db3e:	eeb0 3a67 	vmov.f32	s6, s15
 801db42:	fb92 f3f3 	sdiv	r3, r2, r3
 801db46:	9312      	str	r3, [sp, #72]	@ 0x48
 801db48:	9b01      	ldr	r3, [sp, #4]
 801db4a:	9a03      	ldr	r2, [sp, #12]
 801db4c:	3b01      	subs	r3, #1
 801db4e:	9301      	str	r3, [sp, #4]
 801db50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db52:	bf08      	it	eq
 801db54:	4613      	moveq	r3, r2
 801db56:	e73a      	b.n	801d9ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db58:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801db5c:	d44e      	bmi.n	801dbfc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801db5e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801db62:	4556      	cmp	r6, sl
 801db64:	dd4a      	ble.n	801dbfc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801db66:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801db6a:	d447      	bmi.n	801dbfc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801db6c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801db70:	4559      	cmp	r1, fp
 801db72:	dd43      	ble.n	801dbfc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801db74:	fa0f f986 	sxth.w	r9, r6
 801db78:	9902      	ldr	r1, [sp, #8]
 801db7a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801db7e:	fb0b 1909 	mla	r9, fp, r9, r1
 801db82:	f814 b006 	ldrb.w	fp, [r4, r6]
 801db86:	f819 900a 	ldrb.w	r9, [r9, sl]
 801db8a:	fb1b fb05 	smulbb	fp, fp, r5
 801db8e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801db92:	eb0e 0a09 	add.w	sl, lr, r9
 801db96:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801db9a:	fb09 b908 	mla	r9, r9, r8, fp
 801db9e:	fa1f f989 	uxth.w	r9, r9
 801dba2:	f109 0b01 	add.w	fp, r9, #1
 801dba6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbae:	f804 9006 	strb.w	r9, [r4, r6]
 801dbb2:	4426      	add	r6, r4
 801dbb4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dbb8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801dbbc:	fb1b fb05 	smulbb	fp, fp, r5
 801dbc0:	fb09 b908 	mla	r9, r9, r8, fp
 801dbc4:	fa1f f989 	uxth.w	r9, r9
 801dbc8:	f109 0b01 	add.w	fp, r9, #1
 801dbcc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbd4:	f886 9001 	strb.w	r9, [r6, #1]
 801dbd8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dbdc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801dbe0:	fb1a fa05 	smulbb	sl, sl, r5
 801dbe4:	fb09 a908 	mla	r9, r9, r8, sl
 801dbe8:	fa1f f989 	uxth.w	r9, r9
 801dbec:	f109 0a01 	add.w	sl, r9, #1
 801dbf0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801dbf4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbf8:	f886 9002 	strb.w	r9, [r6, #2]
 801dbfc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dbfe:	3701      	adds	r7, #1
 801dc00:	4408      	add	r0, r1
 801dc02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dc04:	440a      	add	r2, r1
 801dc06:	e761      	b.n	801dacc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801dc08:	b005      	add	sp, #20
 801dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc12:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dc14:	4693      	mov	fp, r2
 801dc16:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801dc18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc1c:	6868      	ldr	r0, [r5, #4]
 801dc1e:	6877      	ldr	r7, [r6, #4]
 801dc20:	9100      	str	r1, [sp, #0]
 801dc22:	3704      	adds	r7, #4
 801dc24:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801dc28:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801dc2c:	fb00 2404 	mla	r4, r0, r4, r2
 801dc30:	682a      	ldr	r2, [r5, #0]
 801dc32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc36:	4414      	add	r4, r2
 801dc38:	6832      	ldr	r2, [r6, #0]
 801dc3a:	9201      	str	r2, [sp, #4]
 801dc3c:	9a00      	ldr	r2, [sp, #0]
 801dc3e:	2a00      	cmp	r2, #0
 801dc40:	dc03      	bgt.n	801dc4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dc42:	f1bb 0f00 	cmp.w	fp, #0
 801dc46:	f340 80bc 	ble.w	801ddc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dc4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dc4c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801dc50:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801dc54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc56:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801dc5a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	dd0c      	ble.n	801dc7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dc62:	1405      	asrs	r5, r0, #16
 801dc64:	d405      	bmi.n	801dc72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dc66:	4555      	cmp	r5, sl
 801dc68:	da03      	bge.n	801dc72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dc6a:	1415      	asrs	r5, r2, #16
 801dc6c:	d401      	bmi.n	801dc72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dc6e:	454d      	cmp	r5, r9
 801dc70:	db05      	blt.n	801dc7e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dc72:	4440      	add	r0, r8
 801dc74:	4472      	add	r2, lr
 801dc76:	3b01      	subs	r3, #1
 801dc78:	3403      	adds	r4, #3
 801dc7a:	e7f0      	b.n	801dc5e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801dc7c:	d03f      	beq.n	801dcfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801dc7e:	1e5d      	subs	r5, r3, #1
 801dc80:	fb08 0c05 	mla	ip, r8, r5, r0
 801dc84:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dc88:	d42e      	bmi.n	801dce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dc8a:	45d4      	cmp	ip, sl
 801dc8c:	da2c      	bge.n	801dce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dc8e:	fb0e 2505 	mla	r5, lr, r5, r2
 801dc92:	142d      	asrs	r5, r5, #16
 801dc94:	d428      	bmi.n	801dce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dc96:	454d      	cmp	r5, r9
 801dc98:	da26      	bge.n	801dce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dc9a:	1ce5      	adds	r5, r4, #3
 801dc9c:	469c      	mov	ip, r3
 801dc9e:	f1bc 0f00 	cmp.w	ip, #0
 801dca2:	f105 0503 	add.w	r5, r5, #3
 801dca6:	dd25      	ble.n	801dcf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801dca8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801dcac:	ea4f 4922 	mov.w	r9, r2, asr #16
 801dcb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dcb4:	4472      	add	r2, lr
 801dcb6:	468a      	mov	sl, r1
 801dcb8:	9901      	ldr	r1, [sp, #4]
 801dcba:	fb0a 1909 	mla	r9, sl, r9, r1
 801dcbe:	1401      	asrs	r1, r0, #16
 801dcc0:	4440      	add	r0, r8
 801dcc2:	f819 9001 	ldrb.w	r9, [r9, r1]
 801dcc6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801dcca:	eb07 0a09 	add.w	sl, r7, r9
 801dcce:	f817 9009 	ldrb.w	r9, [r7, r9]
 801dcd2:	f805 9c06 	strb.w	r9, [r5, #-6]
 801dcd6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dcda:	f805 9c05 	strb.w	r9, [r5, #-5]
 801dcde:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dce2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801dce6:	e7da      	b.n	801dc9e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dce8:	2500      	movs	r5, #0
 801dcea:	eba3 0c05 	sub.w	ip, r3, r5
 801dcee:	f1bc 0f00 	cmp.w	ip, #0
 801dcf2:	dc3b      	bgt.n	801dd6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dcf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dcf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcfc:	441c      	add	r4, r3
 801dcfe:	9b00      	ldr	r3, [sp, #0]
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	dd5e      	ble.n	801ddc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dd04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd0e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd1e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801dd22:	eeb0 6a43 	vmov.f32	s12, s6
 801dd26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd2a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801dd2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd36:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd46:	ee12 2a90 	vmov	r2, s5
 801dd4a:	eef0 2a47 	vmov.f32	s5, s14
 801dd4e:	fb92 f8f3 	sdiv	r8, r2, r3
 801dd52:	ee13 2a10 	vmov	r2, s6
 801dd56:	eeb0 3a67 	vmov.f32	s6, s15
 801dd5a:	fb92 fef3 	sdiv	lr, r2, r3
 801dd5e:	9b00      	ldr	r3, [sp, #0]
 801dd60:	3b01      	subs	r3, #1
 801dd62:	9300      	str	r3, [sp, #0]
 801dd64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd66:	bf08      	it	eq
 801dd68:	465b      	moveq	r3, fp
 801dd6a:	e767      	b.n	801dc3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801dd6c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dd70:	d423      	bmi.n	801ddba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dd72:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801dd76:	45cc      	cmp	ip, r9
 801dd78:	dd1f      	ble.n	801ddba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dd7a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801dd7e:	d41c      	bmi.n	801ddba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dd80:	68f1      	ldr	r1, [r6, #12]
 801dd82:	4551      	cmp	r1, sl
 801dd84:	dd19      	ble.n	801ddba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dd86:	fa0f fc8c 	sxth.w	ip, ip
 801dd8a:	9901      	ldr	r1, [sp, #4]
 801dd8c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801dd90:	f81c c009 	ldrb.w	ip, [ip, r9]
 801dd94:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dd98:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801dd9c:	eb07 090c 	add.w	r9, r7, ip
 801dda0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801dda4:	f804 a00c 	strb.w	sl, [r4, ip]
 801dda8:	44a4      	add	ip, r4
 801ddaa:	f899 a001 	ldrb.w	sl, [r9, #1]
 801ddae:	f88c a001 	strb.w	sl, [ip, #1]
 801ddb2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801ddb6:	f88c 9002 	strb.w	r9, [ip, #2]
 801ddba:	4440      	add	r0, r8
 801ddbc:	4472      	add	r2, lr
 801ddbe:	3501      	adds	r5, #1
 801ddc0:	e793      	b.n	801dcea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801ddc2:	b003      	add	sp, #12
 801ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ddc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddcc:	b085      	sub	sp, #20
 801ddce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddd2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ddd4:	9202      	str	r2, [sp, #8]
 801ddd6:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ddda:	6860      	ldr	r0, [r4, #4]
 801dddc:	9203      	str	r2, [sp, #12]
 801ddde:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801dde2:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801dde6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ddea:	fb00 2505 	mla	r5, r0, r5, r2
 801ddee:	6822      	ldr	r2, [r4, #0]
 801ddf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ddf4:	4415      	add	r5, r2
 801ddf6:	f8dc 2000 	ldr.w	r2, [ip]
 801ddfa:	9200      	str	r2, [sp, #0]
 801ddfc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801de00:	3204      	adds	r2, #4
 801de02:	9201      	str	r2, [sp, #4]
 801de04:	2900      	cmp	r1, #0
 801de06:	dc03      	bgt.n	801de10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801de08:	9a02      	ldr	r2, [sp, #8]
 801de0a:	2a00      	cmp	r2, #0
 801de0c:	f340 8127 	ble.w	801e05e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801de10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801de12:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801de16:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801de1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801de1c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801de20:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801de24:	2b00      	cmp	r3, #0
 801de26:	dd0d      	ble.n	801de44 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de28:	1422      	asrs	r2, r4, #16
 801de2a:	d405      	bmi.n	801de38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de2c:	4542      	cmp	r2, r8
 801de2e:	da03      	bge.n	801de38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de30:	1402      	asrs	r2, r0, #16
 801de32:	d401      	bmi.n	801de38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de34:	42ba      	cmp	r2, r7
 801de36:	db06      	blt.n	801de46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801de38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801de3a:	4474      	add	r4, lr
 801de3c:	3b01      	subs	r3, #1
 801de3e:	3503      	adds	r5, #3
 801de40:	4410      	add	r0, r2
 801de42:	e7ef      	b.n	801de24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801de44:	d075      	beq.n	801df32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801de46:	1e5a      	subs	r2, r3, #1
 801de48:	fb0e 4602 	mla	r6, lr, r2, r4
 801de4c:	1436      	asrs	r6, r6, #16
 801de4e:	d465      	bmi.n	801df1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801de50:	4546      	cmp	r6, r8
 801de52:	da63      	bge.n	801df1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801de54:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801de56:	fb06 0202 	mla	r2, r6, r2, r0
 801de5a:	1412      	asrs	r2, r2, #16
 801de5c:	d45e      	bmi.n	801df1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801de5e:	42ba      	cmp	r2, r7
 801de60:	da5c      	bge.n	801df1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801de62:	1cef      	adds	r7, r5, #3
 801de64:	4699      	mov	r9, r3
 801de66:	f1b9 0f00 	cmp.w	r9, #0
 801de6a:	dd5d      	ble.n	801df28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801de6c:	1402      	asrs	r2, r0, #16
 801de6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801de72:	1426      	asrs	r6, r4, #16
 801de74:	4692      	mov	sl, r2
 801de76:	9a00      	ldr	r2, [sp, #0]
 801de78:	fb08 220a 	mla	r2, r8, sl, r2
 801de7c:	5d92      	ldrb	r2, [r2, r6]
 801de7e:	9e01      	ldr	r6, [sp, #4]
 801de80:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801de84:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801de88:	d041      	beq.n	801df0e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801de8a:	9a03      	ldr	r2, [sp, #12]
 801de8c:	fa5f fb86 	uxtb.w	fp, r6
 801de90:	fb02 f808 	mul.w	r8, r2, r8
 801de94:	f108 0201 	add.w	r2, r8, #1
 801de98:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801de9c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801dea0:	1212      	asrs	r2, r2, #8
 801dea2:	fa1f fa82 	uxth.w	sl, r2
 801dea6:	43d2      	mvns	r2, r2
 801dea8:	fb1b fb0a 	smulbb	fp, fp, sl
 801deac:	b2d2      	uxtb	r2, r2
 801deae:	fb08 b802 	mla	r8, r8, r2, fp
 801deb2:	fa1f f888 	uxth.w	r8, r8
 801deb6:	f108 0b01 	add.w	fp, r8, #1
 801deba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801debe:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801dec2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801dec6:	fb1b fb0a 	smulbb	fp, fp, sl
 801deca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dece:	fb16 fa0a 	smulbb	sl, r6, sl
 801ded2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ded6:	f807 8c03 	strb.w	r8, [r7, #-3]
 801deda:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801dede:	fb06 aa02 	mla	sl, r6, r2, sl
 801dee2:	fb08 b802 	mla	r8, r8, r2, fp
 801dee6:	fa1f fa8a 	uxth.w	sl, sl
 801deea:	fa1f f888 	uxth.w	r8, r8
 801deee:	f10a 0601 	add.w	r6, sl, #1
 801def2:	f108 0b01 	add.w	fp, r8, #1
 801def6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801defa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801defe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df02:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df06:	f807 ac01 	strb.w	sl, [r7, #-1]
 801df0a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801df0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801df10:	4474      	add	r4, lr
 801df12:	3703      	adds	r7, #3
 801df14:	f109 39ff 	add.w	r9, r9, #4294967295
 801df18:	4410      	add	r0, r2
 801df1a:	e7a4      	b.n	801de66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801df1c:	f04f 0800 	mov.w	r8, #0
 801df20:	eba3 0208 	sub.w	r2, r3, r8
 801df24:	2a00      	cmp	r2, #0
 801df26:	dc3b      	bgt.n	801dfa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801df28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df30:	441d      	add	r5, r3
 801df32:	2900      	cmp	r1, #0
 801df34:	f340 8093 	ble.w	801e05e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801df38:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df42:	3901      	subs	r1, #1
 801df44:	eeb0 6a62 	vmov.f32	s12, s5
 801df48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df54:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801df58:	eeb0 6a43 	vmov.f32	s12, s6
 801df5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df60:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801df64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df7c:	ee12 2a90 	vmov	r2, s5
 801df80:	eef0 2a47 	vmov.f32	s5, s14
 801df84:	fb92 fef3 	sdiv	lr, r2, r3
 801df88:	ee13 2a10 	vmov	r2, s6
 801df8c:	eeb0 3a67 	vmov.f32	s6, s15
 801df90:	fb92 f3f3 	sdiv	r3, r2, r3
 801df94:	9a02      	ldr	r2, [sp, #8]
 801df96:	9312      	str	r3, [sp, #72]	@ 0x48
 801df98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df9a:	bf08      	it	eq
 801df9c:	4613      	moveq	r3, r2
 801df9e:	e731      	b.n	801de04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dfa0:	1427      	asrs	r7, r4, #16
 801dfa2:	d456      	bmi.n	801e052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dfa4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dfa8:	42be      	cmp	r6, r7
 801dfaa:	dd52      	ble.n	801e052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dfac:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dfb0:	d44f      	bmi.n	801e052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dfb2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801dfb6:	454a      	cmp	r2, r9
 801dfb8:	dd4b      	ble.n	801e052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dfba:	9a00      	ldr	r2, [sp, #0]
 801dfbc:	b236      	sxth	r6, r6
 801dfbe:	fb09 2606 	mla	r6, r9, r6, r2
 801dfc2:	5df2      	ldrb	r2, [r6, r7]
 801dfc4:	9e01      	ldr	r6, [sp, #4]
 801dfc6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801dfca:	0e3a      	lsrs	r2, r7, #24
 801dfcc:	d041      	beq.n	801e052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dfce:	9e03      	ldr	r6, [sp, #12]
 801dfd0:	fa5f fb87 	uxtb.w	fp, r7
 801dfd4:	4372      	muls	r2, r6
 801dfd6:	1c56      	adds	r6, r2, #1
 801dfd8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801dfdc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801dfe0:	1212      	asrs	r2, r2, #8
 801dfe2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801dfe6:	fa1f fa82 	uxth.w	sl, r2
 801dfea:	43d2      	mvns	r2, r2
 801dfec:	fb1b fb0a 	smulbb	fp, fp, sl
 801dff0:	b2d2      	uxtb	r2, r2
 801dff2:	fb09 b902 	mla	r9, r9, r2, fp
 801dff6:	fa1f f989 	uxth.w	r9, r9
 801dffa:	f109 0b01 	add.w	fp, r9, #1
 801dffe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e002:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e006:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e00a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e00e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e012:	fb17 fa0a 	smulbb	sl, r7, sl
 801e016:	f805 9006 	strb.w	r9, [r5, r6]
 801e01a:	442e      	add	r6, r5
 801e01c:	78b7      	ldrb	r7, [r6, #2]
 801e01e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e022:	fb07 aa02 	mla	sl, r7, r2, sl
 801e026:	fb09 b902 	mla	r9, r9, r2, fp
 801e02a:	fa1f fa8a 	uxth.w	sl, sl
 801e02e:	fa1f f989 	uxth.w	r9, r9
 801e032:	f10a 0701 	add.w	r7, sl, #1
 801e036:	f109 0b01 	add.w	fp, r9, #1
 801e03a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e03e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e042:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e046:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e04a:	f886 a002 	strb.w	sl, [r6, #2]
 801e04e:	f886 9001 	strb.w	r9, [r6, #1]
 801e052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e054:	4474      	add	r4, lr
 801e056:	f108 0801 	add.w	r8, r8, #1
 801e05a:	4410      	add	r0, r2
 801e05c:	e760      	b.n	801df20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801e05e:	b005      	add	sp, #20
 801e060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e064 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e068:	b085      	sub	sp, #20
 801e06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e06e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e070:	9203      	str	r2, [sp, #12]
 801e072:	6868      	ldr	r0, [r5, #4]
 801e074:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801e078:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801e07c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e080:	fb00 2404 	mla	r4, r0, r4, r2
 801e084:	682a      	ldr	r2, [r5, #0]
 801e086:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e08a:	4414      	add	r4, r2
 801e08c:	f8dc 2000 	ldr.w	r2, [ip]
 801e090:	9201      	str	r2, [sp, #4]
 801e092:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e096:	3204      	adds	r2, #4
 801e098:	9202      	str	r2, [sp, #8]
 801e09a:	2900      	cmp	r1, #0
 801e09c:	dc03      	bgt.n	801e0a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e09e:	9a03      	ldr	r2, [sp, #12]
 801e0a0:	2a00      	cmp	r2, #0
 801e0a2:	f340 8137 	ble.w	801e314 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e0a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e0a8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e0ac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e0b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e0b2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e0b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	dd0d      	ble.n	801e0da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e0be:	1405      	asrs	r5, r0, #16
 801e0c0:	d405      	bmi.n	801e0ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e0c2:	4545      	cmp	r5, r8
 801e0c4:	da03      	bge.n	801e0ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e0c6:	1415      	asrs	r5, r2, #16
 801e0c8:	d401      	bmi.n	801e0ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e0ca:	42bd      	cmp	r5, r7
 801e0cc:	db06      	blt.n	801e0dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e0ce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e0d0:	4470      	add	r0, lr
 801e0d2:	3b01      	subs	r3, #1
 801e0d4:	3403      	adds	r4, #3
 801e0d6:	442a      	add	r2, r5
 801e0d8:	e7ef      	b.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e0da:	d070      	beq.n	801e1be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e0dc:	1e5d      	subs	r5, r3, #1
 801e0de:	fb0e 0605 	mla	r6, lr, r5, r0
 801e0e2:	1436      	asrs	r6, r6, #16
 801e0e4:	d462      	bmi.n	801e1ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e0e6:	4546      	cmp	r6, r8
 801e0e8:	da60      	bge.n	801e1ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e0ea:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e0ec:	fb06 2505 	mla	r5, r6, r5, r2
 801e0f0:	142d      	asrs	r5, r5, #16
 801e0f2:	d45b      	bmi.n	801e1ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e0f4:	42bd      	cmp	r5, r7
 801e0f6:	da59      	bge.n	801e1ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e0f8:	1ce5      	adds	r5, r4, #3
 801e0fa:	469a      	mov	sl, r3
 801e0fc:	f1ba 0f00 	cmp.w	sl, #0
 801e100:	dd58      	ble.n	801e1b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801e102:	1416      	asrs	r6, r2, #16
 801e104:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e108:	1407      	asrs	r7, r0, #16
 801e10a:	46b1      	mov	r9, r6
 801e10c:	9e01      	ldr	r6, [sp, #4]
 801e10e:	fb08 6609 	mla	r6, r8, r9, r6
 801e112:	5df6      	ldrb	r6, [r6, r7]
 801e114:	9f02      	ldr	r7, [sp, #8]
 801e116:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801e11a:	0e37      	lsrs	r7, r6, #24
 801e11c:	2fff      	cmp	r7, #255	@ 0xff
 801e11e:	f000 80f0 	beq.w	801e302 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e122:	fa5f f887 	uxtb.w	r8, r7
 801e126:	b3d7      	cbz	r7, 801e19e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e128:	fa1f f788 	uxth.w	r7, r8
 801e12c:	ea6f 0808 	mvn.w	r8, r8
 801e130:	fa5f fb86 	uxtb.w	fp, r6
 801e134:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801e138:	fa5f f888 	uxtb.w	r8, r8
 801e13c:	fb1b fb07 	smulbb	fp, fp, r7
 801e140:	fb09 b908 	mla	r9, r9, r8, fp
 801e144:	fa1f f989 	uxth.w	r9, r9
 801e148:	f109 0b01 	add.w	fp, r9, #1
 801e14c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e150:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e154:	fb1b fb08 	smulbb	fp, fp, r8
 801e158:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e15c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801e160:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801e164:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e168:	fb09 b907 	mla	r9, r9, r7, fp
 801e16c:	fa1f f989 	uxth.w	r9, r9
 801e170:	f109 0b01 	add.w	fp, r9, #1
 801e174:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e178:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e17c:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e180:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801e184:	fb19 f808 	smulbb	r8, r9, r8
 801e188:	fb06 8607 	mla	r6, r6, r7, r8
 801e18c:	b2b6      	uxth	r6, r6
 801e18e:	f106 0801 	add.w	r8, r6, #1
 801e192:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801e196:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e19a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801e19e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e1a0:	4470      	add	r0, lr
 801e1a2:	3503      	adds	r5, #3
 801e1a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1a8:	4432      	add	r2, r6
 801e1aa:	e7a7      	b.n	801e0fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e1ac:	2600      	movs	r6, #0
 801e1ae:	1b9d      	subs	r5, r3, r6
 801e1b0:	2d00      	cmp	r5, #0
 801e1b2:	dc3b      	bgt.n	801e22c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e1b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1bc:	441c      	add	r4, r3
 801e1be:	2900      	cmp	r1, #0
 801e1c0:	f340 80a8 	ble.w	801e314 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e1c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1ce:	3901      	subs	r1, #1
 801e1d0:	eeb0 6a62 	vmov.f32	s12, s5
 801e1d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e1d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e1e4:	eeb0 6a43 	vmov.f32	s12, s6
 801e1e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1ec:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e1f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e1f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e1f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e1fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e200:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e204:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e208:	ee12 2a90 	vmov	r2, s5
 801e20c:	eef0 2a47 	vmov.f32	s5, s14
 801e210:	fb92 fef3 	sdiv	lr, r2, r3
 801e214:	ee13 2a10 	vmov	r2, s6
 801e218:	eeb0 3a67 	vmov.f32	s6, s15
 801e21c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e220:	9a03      	ldr	r2, [sp, #12]
 801e222:	9312      	str	r3, [sp, #72]	@ 0x48
 801e224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e226:	bf08      	it	eq
 801e228:	4613      	moveq	r3, r2
 801e22a:	e736      	b.n	801e09a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e22c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e230:	d457      	bmi.n	801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e232:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801e236:	4547      	cmp	r7, r8
 801e238:	dd53      	ble.n	801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e23a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e23e:	d450      	bmi.n	801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e240:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801e244:	454d      	cmp	r5, r9
 801e246:	dd4c      	ble.n	801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e248:	9d01      	ldr	r5, [sp, #4]
 801e24a:	b23f      	sxth	r7, r7
 801e24c:	fb09 5707 	mla	r7, r9, r7, r5
 801e250:	f817 5008 	ldrb.w	r5, [r7, r8]
 801e254:	9f02      	ldr	r7, [sp, #8]
 801e256:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e25a:	0e2f      	lsrs	r7, r5, #24
 801e25c:	2fff      	cmp	r7, #255	@ 0xff
 801e25e:	d045      	beq.n	801e2ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e260:	fa5f f987 	uxtb.w	r9, r7
 801e264:	b3ef      	cbz	r7, 801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e266:	fa1f f889 	uxth.w	r8, r9
 801e26a:	ea6f 0909 	mvn.w	r9, r9
 801e26e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e272:	fa5f fb85 	uxtb.w	fp, r5
 801e276:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e27a:	fa5f f989 	uxtb.w	r9, r9
 801e27e:	fb1b fb08 	smulbb	fp, fp, r8
 801e282:	fb0a ba09 	mla	sl, sl, r9, fp
 801e286:	fa1f fa8a 	uxth.w	sl, sl
 801e28a:	f10a 0b01 	add.w	fp, sl, #1
 801e28e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e292:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e296:	f804 a007 	strb.w	sl, [r4, r7]
 801e29a:	4427      	add	r7, r4
 801e29c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e2a0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e2a4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e2a8:	fb1b fb09 	smulbb	fp, fp, r9
 801e2ac:	fb0a ba08 	mla	sl, sl, r8, fp
 801e2b0:	fa1f fa8a 	uxth.w	sl, sl
 801e2b4:	f10a 0b01 	add.w	fp, sl, #1
 801e2b8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e2bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e2c0:	f887 a001 	strb.w	sl, [r7, #1]
 801e2c4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e2c8:	fb1a f909 	smulbb	r9, sl, r9
 801e2cc:	fb05 9508 	mla	r5, r5, r8, r9
 801e2d0:	b2ad      	uxth	r5, r5
 801e2d2:	f105 0901 	add.w	r9, r5, #1
 801e2d6:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e2da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2de:	f887 9002 	strb.w	r9, [r7, #2]
 801e2e2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e2e4:	4470      	add	r0, lr
 801e2e6:	3601      	adds	r6, #1
 801e2e8:	442a      	add	r2, r5
 801e2ea:	e760      	b.n	801e1ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e2ec:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e2f0:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801e2f4:	55e5      	strb	r5, [r4, r7]
 801e2f6:	4427      	add	r7, r4
 801e2f8:	0c2d      	lsrs	r5, r5, #16
 801e2fa:	f887 8001 	strb.w	r8, [r7, #1]
 801e2fe:	70bd      	strb	r5, [r7, #2]
 801e300:	e7ef      	b.n	801e2e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e302:	0a37      	lsrs	r7, r6, #8
 801e304:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e308:	0c36      	lsrs	r6, r6, #16
 801e30a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e30e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e312:	e744      	b.n	801e19e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e314:	b005      	add	sp, #20
 801e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e31a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e31e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e320:	9201      	str	r2, [sp, #4]
 801e322:	6870      	ldr	r0, [r6, #4]
 801e324:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801e328:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801e32c:	fa1f fe85 	uxth.w	lr, r5
 801e330:	43ed      	mvns	r5, r5
 801e332:	f8dc 8000 	ldr.w	r8, [ip]
 801e336:	b2ed      	uxtb	r5, r5
 801e338:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801e33c:	fb00 2404 	mla	r4, r0, r4, r2
 801e340:	6832      	ldr	r2, [r6, #0]
 801e342:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e346:	4414      	add	r4, r2
 801e348:	2900      	cmp	r1, #0
 801e34a:	dc03      	bgt.n	801e354 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e34c:	9a01      	ldr	r2, [sp, #4]
 801e34e:	2a00      	cmp	r2, #0
 801e350:	f340 810d 	ble.w	801e56e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e354:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e356:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e35a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e35e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e360:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e364:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e368:	2b00      	cmp	r3, #0
 801e36a:	dd0e      	ble.n	801e38a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e36c:	1406      	asrs	r6, r0, #16
 801e36e:	d405      	bmi.n	801e37c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e370:	4556      	cmp	r6, sl
 801e372:	da03      	bge.n	801e37c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e374:	1416      	asrs	r6, r2, #16
 801e376:	d401      	bmi.n	801e37c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e378:	454e      	cmp	r6, r9
 801e37a:	db07      	blt.n	801e38c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e37c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801e37e:	3b01      	subs	r3, #1
 801e380:	3403      	adds	r4, #3
 801e382:	4430      	add	r0, r6
 801e384:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801e386:	4432      	add	r2, r6
 801e388:	e7ee      	b.n	801e368 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e38a:	d060      	beq.n	801e44e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801e38c:	1e5e      	subs	r6, r3, #1
 801e38e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e390:	fb07 0706 	mla	r7, r7, r6, r0
 801e394:	143f      	asrs	r7, r7, #16
 801e396:	d451      	bmi.n	801e43c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e398:	4557      	cmp	r7, sl
 801e39a:	da4f      	bge.n	801e43c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e39c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e39e:	fb07 2606 	mla	r6, r7, r6, r2
 801e3a2:	1436      	asrs	r6, r6, #16
 801e3a4:	d44a      	bmi.n	801e43c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3a6:	454e      	cmp	r6, r9
 801e3a8:	da48      	bge.n	801e43c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3aa:	1ce6      	adds	r6, r4, #3
 801e3ac:	4699      	mov	r9, r3
 801e3ae:	f1b9 0f00 	cmp.w	r9, #0
 801e3b2:	f106 0603 	add.w	r6, r6, #3
 801e3b6:	dd45      	ble.n	801e444 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801e3b8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e3bc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e3c0:	1417      	asrs	r7, r2, #16
 801e3c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3c6:	fb0b a707 	mla	r7, fp, r7, sl
 801e3ca:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e3ce:	fb1b fb05 	smulbb	fp, fp, r5
 801e3d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e3d6:	eb08 0a07 	add.w	sl, r8, r7
 801e3da:	f818 7007 	ldrb.w	r7, [r8, r7]
 801e3de:	fb07 b70e 	mla	r7, r7, lr, fp
 801e3e2:	b2bf      	uxth	r7, r7
 801e3e4:	f107 0b01 	add.w	fp, r7, #1
 801e3e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e3ec:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e3f0:	fb1b fb05 	smulbb	fp, fp, r5
 801e3f4:	123f      	asrs	r7, r7, #8
 801e3f6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e3fa:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e3fe:	fb07 b70e 	mla	r7, r7, lr, fp
 801e402:	b2bf      	uxth	r7, r7
 801e404:	f107 0b01 	add.w	fp, r7, #1
 801e408:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e40c:	123f      	asrs	r7, r7, #8
 801e40e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e412:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e416:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e41a:	fb1a fa05 	smulbb	sl, sl, r5
 801e41e:	fb07 a70e 	mla	r7, r7, lr, sl
 801e422:	b2bf      	uxth	r7, r7
 801e424:	f107 0a01 	add.w	sl, r7, #1
 801e428:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e42c:	123f      	asrs	r7, r7, #8
 801e42e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e432:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e434:	4438      	add	r0, r7
 801e436:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e438:	443a      	add	r2, r7
 801e43a:	e7b8      	b.n	801e3ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e43c:	2700      	movs	r7, #0
 801e43e:	1bde      	subs	r6, r3, r7
 801e440:	2e00      	cmp	r6, #0
 801e442:	dc3f      	bgt.n	801e4c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e44c:	441c      	add	r4, r3
 801e44e:	2900      	cmp	r1, #0
 801e450:	f340 808d 	ble.w	801e56e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e45a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e45e:	3901      	subs	r1, #1
 801e460:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e464:	eef0 6a62 	vmov.f32	s13, s5
 801e468:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e46c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e470:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e474:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801e478:	eef0 6a43 	vmov.f32	s13, s6
 801e47c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e480:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801e484:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e488:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e48c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e490:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e494:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e498:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e49c:	ee12 2a90 	vmov	r2, s5
 801e4a0:	eef0 2a47 	vmov.f32	s5, s14
 801e4a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4a8:	ee13 2a10 	vmov	r2, s6
 801e4ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4b0:	eeb0 3a67 	vmov.f32	s6, s15
 801e4b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4b8:	9a01      	ldr	r2, [sp, #4]
 801e4ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4be:	bf08      	it	eq
 801e4c0:	4613      	moveq	r3, r2
 801e4c2:	e741      	b.n	801e348 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e4c4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e4c8:	d44b      	bmi.n	801e562 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e4ca:	f8dc b008 	ldr.w	fp, [ip, #8]
 801e4ce:	45cb      	cmp	fp, r9
 801e4d0:	dd47      	ble.n	801e562 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e4d2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e4d6:	d444      	bmi.n	801e562 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e4d8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801e4dc:	4556      	cmp	r6, sl
 801e4de:	dd40      	ble.n	801e562 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e4e0:	fa0f f68b 	sxth.w	r6, fp
 801e4e4:	fb0a 9906 	mla	r9, sl, r6, r9
 801e4e8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e4ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e4f0:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e4f4:	fb1b fb05 	smulbb	fp, fp, r5
 801e4f8:	eb08 0a09 	add.w	sl, r8, r9
 801e4fc:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e500:	fb09 b90e 	mla	r9, r9, lr, fp
 801e504:	fa1f f989 	uxth.w	r9, r9
 801e508:	f109 0b01 	add.w	fp, r9, #1
 801e50c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e510:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e514:	f804 9006 	strb.w	r9, [r4, r6]
 801e518:	4426      	add	r6, r4
 801e51a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e51e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e522:	fb1b fb05 	smulbb	fp, fp, r5
 801e526:	fb09 b90e 	mla	r9, r9, lr, fp
 801e52a:	fa1f f989 	uxth.w	r9, r9
 801e52e:	f109 0b01 	add.w	fp, r9, #1
 801e532:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e536:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e53a:	f886 9001 	strb.w	r9, [r6, #1]
 801e53e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e542:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e546:	fb1a fa05 	smulbb	sl, sl, r5
 801e54a:	fb09 a90e 	mla	r9, r9, lr, sl
 801e54e:	fa1f f989 	uxth.w	r9, r9
 801e552:	f109 0a01 	add.w	sl, r9, #1
 801e556:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e55a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e55e:	f886 9002 	strb.w	r9, [r6, #2]
 801e562:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801e564:	3701      	adds	r7, #1
 801e566:	4430      	add	r0, r6
 801e568:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801e56a:	4432      	add	r2, r6
 801e56c:	e767      	b.n	801e43e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e56e:	b003      	add	sp, #12
 801e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e574 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e578:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e57a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e57e:	9201      	str	r2, [sp, #4]
 801e580:	6868      	ldr	r0, [r5, #4]
 801e582:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e584:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801e588:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801e58c:	fb00 2404 	mla	r4, r0, r4, r2
 801e590:	682a      	ldr	r2, [r5, #0]
 801e592:	f8d7 8000 	ldr.w	r8, [r7]
 801e596:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e59a:	4414      	add	r4, r2
 801e59c:	2900      	cmp	r1, #0
 801e59e:	dc03      	bgt.n	801e5a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e5a0:	9a01      	ldr	r2, [sp, #4]
 801e5a2:	2a00      	cmp	r2, #0
 801e5a4:	f340 80af 	ble.w	801e706 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e5a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e5aa:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801e5ae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e5b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e5b4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801e5b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	dd0c      	ble.n	801e5da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e5c0:	1405      	asrs	r5, r0, #16
 801e5c2:	d405      	bmi.n	801e5d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e5c4:	4555      	cmp	r5, sl
 801e5c6:	da03      	bge.n	801e5d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e5c8:	1415      	asrs	r5, r2, #16
 801e5ca:	d401      	bmi.n	801e5d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e5cc:	454d      	cmp	r5, r9
 801e5ce:	db05      	blt.n	801e5dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e5d0:	4470      	add	r0, lr
 801e5d2:	4462      	add	r2, ip
 801e5d4:	3b01      	subs	r3, #1
 801e5d6:	3403      	adds	r4, #3
 801e5d8:	e7f0      	b.n	801e5bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e5da:	d038      	beq.n	801e64e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e5dc:	1e5d      	subs	r5, r3, #1
 801e5de:	fb0e 0605 	mla	r6, lr, r5, r0
 801e5e2:	1436      	asrs	r6, r6, #16
 801e5e4:	d42a      	bmi.n	801e63c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e5e6:	4556      	cmp	r6, sl
 801e5e8:	da28      	bge.n	801e63c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e5ea:	fb0c 2505 	mla	r5, ip, r5, r2
 801e5ee:	142d      	asrs	r5, r5, #16
 801e5f0:	d424      	bmi.n	801e63c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e5f2:	454d      	cmp	r5, r9
 801e5f4:	da22      	bge.n	801e63c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e5f6:	1ce6      	adds	r6, r4, #3
 801e5f8:	4699      	mov	r9, r3
 801e5fa:	f1b9 0f00 	cmp.w	r9, #0
 801e5fe:	f106 0603 	add.w	r6, r6, #3
 801e602:	dd1f      	ble.n	801e644 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801e604:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801e608:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e60c:	1415      	asrs	r5, r2, #16
 801e60e:	4470      	add	r0, lr
 801e610:	4462      	add	r2, ip
 801e612:	f109 39ff 	add.w	r9, r9, #4294967295
 801e616:	fb0b a505 	mla	r5, fp, r5, sl
 801e61a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e61e:	eb08 0a05 	add.w	sl, r8, r5
 801e622:	f818 5005 	ldrb.w	r5, [r8, r5]
 801e626:	f806 5c06 	strb.w	r5, [r6, #-6]
 801e62a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e62e:	f806 5c05 	strb.w	r5, [r6, #-5]
 801e632:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801e636:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e63a:	e7de      	b.n	801e5fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e63c:	2600      	movs	r6, #0
 801e63e:	1b9d      	subs	r5, r3, r6
 801e640:	2d00      	cmp	r5, #0
 801e642:	dc38      	bgt.n	801e6b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e64c:	441c      	add	r4, r3
 801e64e:	2900      	cmp	r1, #0
 801e650:	dd59      	ble.n	801e706 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e652:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e658:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e65c:	3901      	subs	r1, #1
 801e65e:	eeb0 6a62 	vmov.f32	s12, s5
 801e662:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e666:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e66a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e66e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801e672:	eeb0 6a43 	vmov.f32	s12, s6
 801e676:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e67a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801e67e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e682:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e686:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e68a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e68e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e692:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e696:	ee12 2a90 	vmov	r2, s5
 801e69a:	eef0 2a47 	vmov.f32	s5, s14
 801e69e:	fb92 fef3 	sdiv	lr, r2, r3
 801e6a2:	ee13 2a10 	vmov	r2, s6
 801e6a6:	eeb0 3a67 	vmov.f32	s6, s15
 801e6aa:	fb92 fcf3 	sdiv	ip, r2, r3
 801e6ae:	9a01      	ldr	r2, [sp, #4]
 801e6b0:	bf08      	it	eq
 801e6b2:	4613      	moveq	r3, r2
 801e6b4:	e772      	b.n	801e59c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801e6b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e6ba:	d420      	bmi.n	801e6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e6bc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801e6c0:	45cb      	cmp	fp, r9
 801e6c2:	dd1c      	ble.n	801e6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e6c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e6c8:	d419      	bmi.n	801e6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e6ca:	68fd      	ldr	r5, [r7, #12]
 801e6cc:	4555      	cmp	r5, sl
 801e6ce:	dd16      	ble.n	801e6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e6d0:	fa0f f58b 	sxth.w	r5, fp
 801e6d4:	fb0a 9505 	mla	r5, sl, r5, r9
 801e6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6dc:	f818 9005 	ldrb.w	r9, [r8, r5]
 801e6e0:	eb08 0b05 	add.w	fp, r8, r5
 801e6e4:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801e6e8:	f804 9005 	strb.w	r9, [r4, r5]
 801e6ec:	4425      	add	r5, r4
 801e6ee:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801e6f2:	f885 9001 	strb.w	r9, [r5, #1]
 801e6f6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e6fa:	f885 9002 	strb.w	r9, [r5, #2]
 801e6fe:	4470      	add	r0, lr
 801e700:	4462      	add	r2, ip
 801e702:	3601      	adds	r6, #1
 801e704:	e79b      	b.n	801e63e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801e706:	b003      	add	sp, #12
 801e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e70c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e710:	b085      	sub	sp, #20
 801e712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e716:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e718:	9202      	str	r2, [sp, #8]
 801e71a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e71e:	6860      	ldr	r0, [r4, #4]
 801e720:	9203      	str	r2, [sp, #12]
 801e722:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801e726:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801e72a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801e72e:	fb00 2505 	mla	r5, r0, r5, r2
 801e732:	6822      	ldr	r2, [r4, #0]
 801e734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e738:	4415      	add	r5, r2
 801e73a:	f8dc 2000 	ldr.w	r2, [ip]
 801e73e:	9201      	str	r2, [sp, #4]
 801e740:	2900      	cmp	r1, #0
 801e742:	dc03      	bgt.n	801e74c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e744:	9a02      	ldr	r2, [sp, #8]
 801e746:	2a00      	cmp	r2, #0
 801e748:	f340 8122 	ble.w	801e990 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e74c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e74e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e752:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801e756:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e758:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e75c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e760:	2b00      	cmp	r3, #0
 801e762:	dd0d      	ble.n	801e780 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e764:	1422      	asrs	r2, r4, #16
 801e766:	d405      	bmi.n	801e774 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e768:	4542      	cmp	r2, r8
 801e76a:	da03      	bge.n	801e774 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e76c:	1402      	asrs	r2, r0, #16
 801e76e:	d401      	bmi.n	801e774 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e770:	42ba      	cmp	r2, r7
 801e772:	db06      	blt.n	801e782 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e774:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e776:	4474      	add	r4, lr
 801e778:	3b01      	subs	r3, #1
 801e77a:	3503      	adds	r5, #3
 801e77c:	4410      	add	r0, r2
 801e77e:	e7ef      	b.n	801e760 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e780:	d072      	beq.n	801e868 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e782:	1e5a      	subs	r2, r3, #1
 801e784:	fb0e 4602 	mla	r6, lr, r2, r4
 801e788:	1436      	asrs	r6, r6, #16
 801e78a:	d462      	bmi.n	801e852 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e78c:	4546      	cmp	r6, r8
 801e78e:	da60      	bge.n	801e852 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e790:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e792:	fb06 0202 	mla	r2, r6, r2, r0
 801e796:	1412      	asrs	r2, r2, #16
 801e798:	d45b      	bmi.n	801e852 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e79a:	42ba      	cmp	r2, r7
 801e79c:	da59      	bge.n	801e852 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e79e:	1cef      	adds	r7, r5, #3
 801e7a0:	4699      	mov	r9, r3
 801e7a2:	f1b9 0f00 	cmp.w	r9, #0
 801e7a6:	dd5a      	ble.n	801e85e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e7a8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e7ac:	1426      	asrs	r6, r4, #16
 801e7ae:	1402      	asrs	r2, r0, #16
 801e7b0:	fb08 6202 	mla	r2, r8, r2, r6
 801e7b4:	9e01      	ldr	r6, [sp, #4]
 801e7b6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e7ba:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801e7be:	d041      	beq.n	801e844 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e7c0:	9a03      	ldr	r2, [sp, #12]
 801e7c2:	fa5f fb86 	uxtb.w	fp, r6
 801e7c6:	fb02 f808 	mul.w	r8, r2, r8
 801e7ca:	f108 0201 	add.w	r2, r8, #1
 801e7ce:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801e7d2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801e7d6:	1212      	asrs	r2, r2, #8
 801e7d8:	fa1f fa82 	uxth.w	sl, r2
 801e7dc:	43d2      	mvns	r2, r2
 801e7de:	fb1b fb0a 	smulbb	fp, fp, sl
 801e7e2:	b2d2      	uxtb	r2, r2
 801e7e4:	fb08 b802 	mla	r8, r8, r2, fp
 801e7e8:	fa1f f888 	uxth.w	r8, r8
 801e7ec:	f108 0b01 	add.w	fp, r8, #1
 801e7f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e7f4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e7f8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e7fc:	fb1b fb0a 	smulbb	fp, fp, sl
 801e800:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e804:	fb16 fa0a 	smulbb	sl, r6, sl
 801e808:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e80c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801e810:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801e814:	fb06 aa02 	mla	sl, r6, r2, sl
 801e818:	fb08 b802 	mla	r8, r8, r2, fp
 801e81c:	fa1f fa8a 	uxth.w	sl, sl
 801e820:	fa1f f888 	uxth.w	r8, r8
 801e824:	f10a 0601 	add.w	r6, sl, #1
 801e828:	f108 0b01 	add.w	fp, r8, #1
 801e82c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e830:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e834:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e838:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e83c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e840:	f807 8c02 	strb.w	r8, [r7, #-2]
 801e844:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e846:	4474      	add	r4, lr
 801e848:	3703      	adds	r7, #3
 801e84a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e84e:	4410      	add	r0, r2
 801e850:	e7a7      	b.n	801e7a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e852:	f04f 0800 	mov.w	r8, #0
 801e856:	eba3 0208 	sub.w	r2, r3, r8
 801e85a:	2a00      	cmp	r2, #0
 801e85c:	dc3b      	bgt.n	801e8d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e85e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e866:	441d      	add	r5, r3
 801e868:	2900      	cmp	r1, #0
 801e86a:	f340 8091 	ble.w	801e990 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e86e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e874:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e878:	3901      	subs	r1, #1
 801e87a:	eeb0 6a62 	vmov.f32	s12, s5
 801e87e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e882:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e886:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e88a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e88e:	eeb0 6a43 	vmov.f32	s12, s6
 801e892:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e896:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e89a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e89e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8b2:	ee12 2a90 	vmov	r2, s5
 801e8b6:	eef0 2a47 	vmov.f32	s5, s14
 801e8ba:	fb92 fef3 	sdiv	lr, r2, r3
 801e8be:	ee13 2a10 	vmov	r2, s6
 801e8c2:	eeb0 3a67 	vmov.f32	s6, s15
 801e8c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8ca:	9a02      	ldr	r2, [sp, #8]
 801e8cc:	9312      	str	r3, [sp, #72]	@ 0x48
 801e8ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8d0:	bf08      	it	eq
 801e8d2:	4613      	moveq	r3, r2
 801e8d4:	e734      	b.n	801e740 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e8d6:	1427      	asrs	r7, r4, #16
 801e8d8:	d454      	bmi.n	801e984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e8da:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e8de:	42be      	cmp	r6, r7
 801e8e0:	dd50      	ble.n	801e984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e8e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e8e6:	d44d      	bmi.n	801e984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e8e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e8ec:	454a      	cmp	r2, r9
 801e8ee:	dd49      	ble.n	801e984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e8f0:	b236      	sxth	r6, r6
 801e8f2:	9a01      	ldr	r2, [sp, #4]
 801e8f4:	fb09 7606 	mla	r6, r9, r6, r7
 801e8f8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801e8fc:	0e3a      	lsrs	r2, r7, #24
 801e8fe:	d041      	beq.n	801e984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e900:	9e03      	ldr	r6, [sp, #12]
 801e902:	fa5f fb87 	uxtb.w	fp, r7
 801e906:	4372      	muls	r2, r6
 801e908:	1c56      	adds	r6, r2, #1
 801e90a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e90e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801e912:	1212      	asrs	r2, r2, #8
 801e914:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e918:	fa1f fa82 	uxth.w	sl, r2
 801e91c:	43d2      	mvns	r2, r2
 801e91e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e922:	b2d2      	uxtb	r2, r2
 801e924:	fb09 b902 	mla	r9, r9, r2, fp
 801e928:	fa1f f989 	uxth.w	r9, r9
 801e92c:	f109 0b01 	add.w	fp, r9, #1
 801e930:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e934:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e938:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e93c:	fb1b fb0a 	smulbb	fp, fp, sl
 801e940:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e944:	fb17 fa0a 	smulbb	sl, r7, sl
 801e948:	f805 9006 	strb.w	r9, [r5, r6]
 801e94c:	442e      	add	r6, r5
 801e94e:	78b7      	ldrb	r7, [r6, #2]
 801e950:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e954:	fb07 aa02 	mla	sl, r7, r2, sl
 801e958:	fb09 b902 	mla	r9, r9, r2, fp
 801e95c:	fa1f fa8a 	uxth.w	sl, sl
 801e960:	fa1f f989 	uxth.w	r9, r9
 801e964:	f10a 0701 	add.w	r7, sl, #1
 801e968:	f109 0b01 	add.w	fp, r9, #1
 801e96c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e970:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e974:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e978:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e97c:	f886 a002 	strb.w	sl, [r6, #2]
 801e980:	f886 9001 	strb.w	r9, [r6, #1]
 801e984:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e986:	4474      	add	r4, lr
 801e988:	f108 0801 	add.w	r8, r8, #1
 801e98c:	4410      	add	r0, r2
 801e98e:	e762      	b.n	801e856 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e990:	b005      	add	sp, #20
 801e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e996 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e99a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e99c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9a0:	9201      	str	r2, [sp, #4]
 801e9a2:	6860      	ldr	r0, [r4, #4]
 801e9a4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801e9a8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801e9ac:	fb00 2505 	mla	r5, r0, r5, r2
 801e9b0:	6822      	ldr	r2, [r4, #0]
 801e9b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e9b6:	4415      	add	r5, r2
 801e9b8:	f8dc 2000 	ldr.w	r2, [ip]
 801e9bc:	9200      	str	r2, [sp, #0]
 801e9be:	2900      	cmp	r1, #0
 801e9c0:	dc03      	bgt.n	801e9ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e9c2:	9a01      	ldr	r2, [sp, #4]
 801e9c4:	2a00      	cmp	r2, #0
 801e9c6:	f340 812b 	ble.w	801ec20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e9ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e9cc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e9d0:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801e9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e9d6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e9da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	dd0e      	ble.n	801ea00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e9e2:	1422      	asrs	r2, r4, #16
 801e9e4:	d405      	bmi.n	801e9f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e9e6:	4572      	cmp	r2, lr
 801e9e8:	da03      	bge.n	801e9f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e9ea:	1402      	asrs	r2, r0, #16
 801e9ec:	d401      	bmi.n	801e9f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e9ee:	42ba      	cmp	r2, r7
 801e9f0:	db07      	blt.n	801ea02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e9f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e9f4:	3b01      	subs	r3, #1
 801e9f6:	3503      	adds	r5, #3
 801e9f8:	4414      	add	r4, r2
 801e9fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e9fc:	4410      	add	r0, r2
 801e9fe:	e7ee      	b.n	801e9de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ea00:	d06f      	beq.n	801eae2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ea02:	1e5a      	subs	r2, r3, #1
 801ea04:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801ea06:	fb06 4602 	mla	r6, r6, r2, r4
 801ea0a:	1436      	asrs	r6, r6, #16
 801ea0c:	d45e      	bmi.n	801eacc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea0e:	4576      	cmp	r6, lr
 801ea10:	da5c      	bge.n	801eacc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea12:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ea14:	fb06 0202 	mla	r2, r6, r2, r0
 801ea18:	1412      	asrs	r2, r2, #16
 801ea1a:	d457      	bmi.n	801eacc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea1c:	42ba      	cmp	r2, r7
 801ea1e:	da55      	bge.n	801eacc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea20:	1cee      	adds	r6, r5, #3
 801ea22:	469a      	mov	sl, r3
 801ea24:	f1ba 0f00 	cmp.w	sl, #0
 801ea28:	dd56      	ble.n	801ead8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ea2a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ea2e:	1427      	asrs	r7, r4, #16
 801ea30:	1402      	asrs	r2, r0, #16
 801ea32:	fb0e 7202 	mla	r2, lr, r2, r7
 801ea36:	9f00      	ldr	r7, [sp, #0]
 801ea38:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ea3c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801ea40:	d03c      	beq.n	801eabc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ea42:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ea46:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ea4a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ea4e:	fa5f f28e 	uxtb.w	r2, lr
 801ea52:	b2ff      	uxtb	r7, r7
 801ea54:	f000 80dd 	beq.w	801ec12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ea58:	fa1f f882 	uxth.w	r8, r2
 801ea5c:	43d2      	mvns	r2, r2
 801ea5e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801ea62:	fb17 f708 	smulbb	r7, r7, r8
 801ea66:	b2d2      	uxtb	r2, r2
 801ea68:	fb19 f908 	smulbb	r9, r9, r8
 801ea6c:	fb0e 7702 	mla	r7, lr, r2, r7
 801ea70:	fb1b f808 	smulbb	r8, fp, r8
 801ea74:	b2bf      	uxth	r7, r7
 801ea76:	f107 0e01 	add.w	lr, r7, #1
 801ea7a:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ea7e:	123f      	asrs	r7, r7, #8
 801ea80:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ea84:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ea88:	fb07 9902 	mla	r9, r7, r2, r9
 801ea8c:	fa1f f989 	uxth.w	r9, r9
 801ea90:	f109 0701 	add.w	r7, r9, #1
 801ea94:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ea98:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ea9c:	fb07 8802 	mla	r8, r7, r2, r8
 801eaa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eaa4:	fa1f f888 	uxth.w	r8, r8
 801eaa8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801eaac:	f108 0201 	add.w	r2, r8, #1
 801eab0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801eab4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eab8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801eabc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801eabe:	3603      	adds	r6, #3
 801eac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eac4:	4414      	add	r4, r2
 801eac6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eac8:	4410      	add	r0, r2
 801eaca:	e7ab      	b.n	801ea24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801eacc:	f04f 0e00 	mov.w	lr, #0
 801ead0:	eba3 020e 	sub.w	r2, r3, lr
 801ead4:	2a00      	cmp	r2, #0
 801ead6:	dc3d      	bgt.n	801eb54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ead8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eadc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eae0:	441d      	add	r5, r3
 801eae2:	2900      	cmp	r1, #0
 801eae4:	f340 809c 	ble.w	801ec20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eae8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eaec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaf2:	3901      	subs	r1, #1
 801eaf4:	eeb0 6a62 	vmov.f32	s12, s5
 801eaf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eafc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb04:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801eb08:	eeb0 6a43 	vmov.f32	s12, s6
 801eb0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb10:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801eb14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb2c:	ee12 2a90 	vmov	r2, s5
 801eb30:	eef0 2a47 	vmov.f32	s5, s14
 801eb34:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb38:	ee13 2a10 	vmov	r2, s6
 801eb3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eb3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb40:	eeb0 3a67 	vmov.f32	s6, s15
 801eb44:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb48:	9a01      	ldr	r2, [sp, #4]
 801eb4a:	9310      	str	r3, [sp, #64]	@ 0x40
 801eb4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb4e:	bf08      	it	eq
 801eb50:	4613      	moveq	r3, r2
 801eb52:	e734      	b.n	801e9be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801eb54:	1427      	asrs	r7, r4, #16
 801eb56:	d44d      	bmi.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801eb58:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801eb5c:	42be      	cmp	r6, r7
 801eb5e:	dd49      	ble.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801eb60:	ea5f 4820 	movs.w	r8, r0, asr #16
 801eb64:	d446      	bmi.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801eb66:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eb6a:	4542      	cmp	r2, r8
 801eb6c:	dd42      	ble.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801eb6e:	b236      	sxth	r6, r6
 801eb70:	9a00      	ldr	r2, [sp, #0]
 801eb72:	fb08 7606 	mla	r6, r8, r6, r7
 801eb76:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801eb7a:	0e3a      	lsrs	r2, r7, #24
 801eb7c:	d03a      	beq.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801eb7e:	2aff      	cmp	r2, #255	@ 0xff
 801eb80:	b2d6      	uxtb	r6, r2
 801eb82:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801eb86:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801eb8a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801eb8e:	b2ff      	uxtb	r7, r7
 801eb90:	d037      	beq.n	801ec02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801eb92:	fa1f f986 	uxth.w	r9, r6
 801eb96:	4472      	add	r2, lr
 801eb98:	43f6      	mvns	r6, r6
 801eb9a:	f815 8002 	ldrb.w	r8, [r5, r2]
 801eb9e:	fb17 f709 	smulbb	r7, r7, r9
 801eba2:	fb1a fa09 	smulbb	sl, sl, r9
 801eba6:	b2f6      	uxtb	r6, r6
 801eba8:	fb1b f909 	smulbb	r9, fp, r9
 801ebac:	fb08 7706 	mla	r7, r8, r6, r7
 801ebb0:	b2bf      	uxth	r7, r7
 801ebb2:	f107 0801 	add.w	r8, r7, #1
 801ebb6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ebba:	123f      	asrs	r7, r7, #8
 801ebbc:	54af      	strb	r7, [r5, r2]
 801ebbe:	442a      	add	r2, r5
 801ebc0:	7857      	ldrb	r7, [r2, #1]
 801ebc2:	fb07 aa06 	mla	sl, r7, r6, sl
 801ebc6:	fa1f fa8a 	uxth.w	sl, sl
 801ebca:	f10a 0701 	add.w	r7, sl, #1
 801ebce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ebd2:	7897      	ldrb	r7, [r2, #2]
 801ebd4:	fb07 9906 	mla	r9, r7, r6, r9
 801ebd8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ebdc:	fa1f f989 	uxth.w	r9, r9
 801ebe0:	f882 a001 	strb.w	sl, [r2, #1]
 801ebe4:	f109 0601 	add.w	r6, r9, #1
 801ebe8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ebec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebf0:	f882 9002 	strb.w	r9, [r2, #2]
 801ebf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ebf6:	f10e 0e01 	add.w	lr, lr, #1
 801ebfa:	4414      	add	r4, r2
 801ebfc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ebfe:	4410      	add	r0, r2
 801ec00:	e766      	b.n	801ead0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ec02:	4472      	add	r2, lr
 801ec04:	54af      	strb	r7, [r5, r2]
 801ec06:	442a      	add	r2, r5
 801ec08:	f882 a001 	strb.w	sl, [r2, #1]
 801ec0c:	f882 b002 	strb.w	fp, [r2, #2]
 801ec10:	e7f0      	b.n	801ebf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ec12:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ec16:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ec1a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ec1e:	e74d      	b.n	801eabc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ec20:	b003      	add	sp, #12
 801ec22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ec28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec2c:	b087      	sub	sp, #28
 801ec2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec32:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ec34:	9204      	str	r2, [sp, #16]
 801ec36:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ec3a:	6860      	ldr	r0, [r4, #4]
 801ec3c:	9205      	str	r2, [sp, #20]
 801ec3e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801ec42:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801ec46:	9101      	str	r1, [sp, #4]
 801ec48:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801ec4c:	fb00 2505 	mla	r5, r0, r5, r2
 801ec50:	6822      	ldr	r2, [r4, #0]
 801ec52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec56:	4415      	add	r5, r2
 801ec58:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ec5c:	3201      	adds	r2, #1
 801ec5e:	f022 0201 	bic.w	r2, r2, #1
 801ec62:	9202      	str	r2, [sp, #8]
 801ec64:	f8dc 2000 	ldr.w	r2, [ip]
 801ec68:	9203      	str	r2, [sp, #12]
 801ec6a:	9a01      	ldr	r2, [sp, #4]
 801ec6c:	2a00      	cmp	r2, #0
 801ec6e:	dc03      	bgt.n	801ec78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ec70:	9a04      	ldr	r2, [sp, #16]
 801ec72:	2a00      	cmp	r2, #0
 801ec74:	f340 8135 	ble.w	801eee2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ec78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ec7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ec7e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ec82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ec84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ec88:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	dd0d      	ble.n	801ecac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ec90:	1422      	asrs	r2, r4, #16
 801ec92:	d405      	bmi.n	801eca0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ec94:	4542      	cmp	r2, r8
 801ec96:	da03      	bge.n	801eca0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ec98:	1402      	asrs	r2, r0, #16
 801ec9a:	d401      	bmi.n	801eca0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ec9c:	42ba      	cmp	r2, r7
 801ec9e:	db06      	blt.n	801ecae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eca0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eca2:	4474      	add	r4, lr
 801eca4:	3b01      	subs	r3, #1
 801eca6:	3503      	adds	r5, #3
 801eca8:	4410      	add	r0, r2
 801ecaa:	e7ef      	b.n	801ec8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ecac:	d077      	beq.n	801ed9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ecae:	1e5a      	subs	r2, r3, #1
 801ecb0:	fb0e 4602 	mla	r6, lr, r2, r4
 801ecb4:	1436      	asrs	r6, r6, #16
 801ecb6:	d469      	bmi.n	801ed8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ecb8:	4546      	cmp	r6, r8
 801ecba:	da67      	bge.n	801ed8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ecbc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ecbe:	fb06 0202 	mla	r2, r6, r2, r0
 801ecc2:	1412      	asrs	r2, r2, #16
 801ecc4:	d462      	bmi.n	801ed8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ecc6:	42ba      	cmp	r2, r7
 801ecc8:	da60      	bge.n	801ed8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ecca:	1cee      	adds	r6, r5, #3
 801eccc:	4699      	mov	r9, r3
 801ecce:	f1b9 0f00 	cmp.w	r9, #0
 801ecd2:	dd5f      	ble.n	801ed94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ecd4:	1422      	asrs	r2, r4, #16
 801ecd6:	9902      	ldr	r1, [sp, #8]
 801ecd8:	1407      	asrs	r7, r0, #16
 801ecda:	fb01 2707 	mla	r7, r1, r7, r2
 801ecde:	9903      	ldr	r1, [sp, #12]
 801ece0:	087a      	lsrs	r2, r7, #1
 801ece2:	5c8a      	ldrb	r2, [r1, r2]
 801ece4:	07f9      	lsls	r1, r7, #31
 801ece6:	bf54      	ite	pl
 801ece8:	f002 020f 	andpl.w	r2, r2, #15
 801ecec:	1112      	asrmi	r2, r2, #4
 801ecee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ecf2:	b2d2      	uxtb	r2, r2
 801ecf4:	2a00      	cmp	r2, #0
 801ecf6:	d042      	beq.n	801ed7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ecf8:	497b      	ldr	r1, [pc, #492]	@ (801eee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ecfa:	680f      	ldr	r7, [r1, #0]
 801ecfc:	9905      	ldr	r1, [sp, #20]
 801ecfe:	fa5f fb87 	uxtb.w	fp, r7
 801ed02:	434a      	muls	r2, r1
 801ed04:	f102 0801 	add.w	r8, r2, #1
 801ed08:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801ed0c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801ed10:	1212      	asrs	r2, r2, #8
 801ed12:	fa1f fa82 	uxth.w	sl, r2
 801ed16:	43d2      	mvns	r2, r2
 801ed18:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed1c:	b2d2      	uxtb	r2, r2
 801ed1e:	fb08 b802 	mla	r8, r8, r2, fp
 801ed22:	fa1f f888 	uxth.w	r8, r8
 801ed26:	f108 0b01 	add.w	fp, r8, #1
 801ed2a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed2e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ed32:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ed36:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed3e:	fb17 fa0a 	smulbb	sl, r7, sl
 801ed42:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ed46:	f806 8c03 	strb.w	r8, [r6, #-3]
 801ed4a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801ed4e:	fb07 aa02 	mla	sl, r7, r2, sl
 801ed52:	fb08 b802 	mla	r8, r8, r2, fp
 801ed56:	fa1f fa8a 	uxth.w	sl, sl
 801ed5a:	fa1f f888 	uxth.w	r8, r8
 801ed5e:	f10a 0701 	add.w	r7, sl, #1
 801ed62:	f108 0b01 	add.w	fp, r8, #1
 801ed66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ed6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed6e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ed72:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed76:	f806 ac01 	strb.w	sl, [r6, #-1]
 801ed7a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801ed7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ed80:	4474      	add	r4, lr
 801ed82:	3603      	adds	r6, #3
 801ed84:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed88:	4410      	add	r0, r2
 801ed8a:	e7a0      	b.n	801ecce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ed8c:	2700      	movs	r7, #0
 801ed8e:	1bda      	subs	r2, r3, r7
 801ed90:	2a00      	cmp	r2, #0
 801ed92:	dc3e      	bgt.n	801ee12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed9c:	441d      	add	r5, r3
 801ed9e:	9b01      	ldr	r3, [sp, #4]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	f340 809e 	ble.w	801eee2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801eda6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edb0:	eeb0 6a62 	vmov.f32	s12, s5
 801edb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edc0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801edc4:	eeb0 6a43 	vmov.f32	s12, s6
 801edc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edcc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801edd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eddc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ede0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ede4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ede8:	ee12 2a90 	vmov	r2, s5
 801edec:	eef0 2a47 	vmov.f32	s5, s14
 801edf0:	fb92 fef3 	sdiv	lr, r2, r3
 801edf4:	ee13 2a10 	vmov	r2, s6
 801edf8:	eeb0 3a67 	vmov.f32	s6, s15
 801edfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee00:	9314      	str	r3, [sp, #80]	@ 0x50
 801ee02:	9b01      	ldr	r3, [sp, #4]
 801ee04:	9a04      	ldr	r2, [sp, #16]
 801ee06:	3b01      	subs	r3, #1
 801ee08:	9301      	str	r3, [sp, #4]
 801ee0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee0c:	bf08      	it	eq
 801ee0e:	4613      	moveq	r3, r2
 801ee10:	e72b      	b.n	801ec6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ee12:	1426      	asrs	r6, r4, #16
 801ee14:	d460      	bmi.n	801eed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee16:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ee1a:	42b2      	cmp	r2, r6
 801ee1c:	dd5c      	ble.n	801eed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee1e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ee22:	d459      	bmi.n	801eed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee24:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ee28:	4542      	cmp	r2, r8
 801ee2a:	dd55      	ble.n	801eed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee2c:	9a02      	ldr	r2, [sp, #8]
 801ee2e:	9903      	ldr	r1, [sp, #12]
 801ee30:	fb08 6602 	mla	r6, r8, r2, r6
 801ee34:	0872      	lsrs	r2, r6, #1
 801ee36:	07f6      	lsls	r6, r6, #31
 801ee38:	5c8a      	ldrb	r2, [r1, r2]
 801ee3a:	bf54      	ite	pl
 801ee3c:	f002 020f 	andpl.w	r2, r2, #15
 801ee40:	1112      	asrmi	r2, r2, #4
 801ee42:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ee46:	b2d2      	uxtb	r2, r2
 801ee48:	2a00      	cmp	r2, #0
 801ee4a:	d045      	beq.n	801eed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee4c:	4926      	ldr	r1, [pc, #152]	@ (801eee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ee4e:	f8d1 8000 	ldr.w	r8, [r1]
 801ee52:	9905      	ldr	r1, [sp, #20]
 801ee54:	fa5f fb88 	uxtb.w	fp, r8
 801ee58:	434a      	muls	r2, r1
 801ee5a:	1c56      	adds	r6, r2, #1
 801ee5c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ee60:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ee64:	1212      	asrs	r2, r2, #8
 801ee66:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ee6a:	fa1f fa82 	uxth.w	sl, r2
 801ee6e:	43d2      	mvns	r2, r2
 801ee70:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee74:	b2d2      	uxtb	r2, r2
 801ee76:	fb09 b902 	mla	r9, r9, r2, fp
 801ee7a:	fa1f f989 	uxth.w	r9, r9
 801ee7e:	f109 0b01 	add.w	fp, r9, #1
 801ee82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ee86:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801ee8a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ee8e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee96:	fb18 fa0a 	smulbb	sl, r8, sl
 801ee9a:	f805 9006 	strb.w	r9, [r5, r6]
 801ee9e:	442e      	add	r6, r5
 801eea0:	f896 8002 	ldrb.w	r8, [r6, #2]
 801eea4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801eea8:	fb08 aa02 	mla	sl, r8, r2, sl
 801eeac:	fb09 b902 	mla	r9, r9, r2, fp
 801eeb0:	fa1f fa8a 	uxth.w	sl, sl
 801eeb4:	fa1f f989 	uxth.w	r9, r9
 801eeb8:	f10a 0801 	add.w	r8, sl, #1
 801eebc:	f109 0b01 	add.w	fp, r9, #1
 801eec0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801eec4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eec8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eecc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eed0:	f886 a002 	strb.w	sl, [r6, #2]
 801eed4:	f886 9001 	strb.w	r9, [r6, #1]
 801eed8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eeda:	4474      	add	r4, lr
 801eedc:	3701      	adds	r7, #1
 801eede:	4410      	add	r0, r2
 801eee0:	e755      	b.n	801ed8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801eee2:	b007      	add	sp, #28
 801eee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eee8:	24028530 	.word	0x24028530

0801eeec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eef0:	b085      	sub	sp, #20
 801eef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eef6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eef8:	9203      	str	r2, [sp, #12]
 801eefa:	6860      	ldr	r0, [r4, #4]
 801eefc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ef00:	9100      	str	r1, [sp, #0]
 801ef02:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801ef06:	fb00 2606 	mla	r6, r0, r6, r2
 801ef0a:	6822      	ldr	r2, [r4, #0]
 801ef0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef10:	4416      	add	r6, r2
 801ef12:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ef16:	3201      	adds	r2, #1
 801ef18:	f022 0201 	bic.w	r2, r2, #1
 801ef1c:	9201      	str	r2, [sp, #4]
 801ef1e:	f8dc 2000 	ldr.w	r2, [ip]
 801ef22:	9202      	str	r2, [sp, #8]
 801ef24:	9a00      	ldr	r2, [sp, #0]
 801ef26:	2a00      	cmp	r2, #0
 801ef28:	dc03      	bgt.n	801ef32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ef2a:	9a03      	ldr	r2, [sp, #12]
 801ef2c:	2a00      	cmp	r2, #0
 801ef2e:	f340 8140 	ble.w	801f1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ef32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ef34:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ef38:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801ef3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef3e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ef42:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	dd0e      	ble.n	801ef68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef4a:	142a      	asrs	r2, r5, #16
 801ef4c:	d405      	bmi.n	801ef5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef4e:	4572      	cmp	r2, lr
 801ef50:	da03      	bge.n	801ef5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef52:	1422      	asrs	r2, r4, #16
 801ef54:	d401      	bmi.n	801ef5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef56:	42ba      	cmp	r2, r7
 801ef58:	db07      	blt.n	801ef6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ef5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef5c:	3b01      	subs	r3, #1
 801ef5e:	3603      	adds	r6, #3
 801ef60:	4415      	add	r5, r2
 801ef62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ef64:	4414      	add	r4, r2
 801ef66:	e7ee      	b.n	801ef46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ef68:	d072      	beq.n	801f050 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ef6a:	1e5a      	subs	r2, r3, #1
 801ef6c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ef6e:	fb00 5002 	mla	r0, r0, r2, r5
 801ef72:	1400      	asrs	r0, r0, #16
 801ef74:	d463      	bmi.n	801f03e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ef76:	4570      	cmp	r0, lr
 801ef78:	da61      	bge.n	801f03e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ef7a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ef7c:	fb00 4202 	mla	r2, r0, r2, r4
 801ef80:	1412      	asrs	r2, r2, #16
 801ef82:	d45c      	bmi.n	801f03e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ef84:	42ba      	cmp	r2, r7
 801ef86:	da5a      	bge.n	801f03e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ef88:	1cf0      	adds	r0, r6, #3
 801ef8a:	469a      	mov	sl, r3
 801ef8c:	f1ba 0f00 	cmp.w	sl, #0
 801ef90:	dd59      	ble.n	801f046 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ef92:	142a      	asrs	r2, r5, #16
 801ef94:	9901      	ldr	r1, [sp, #4]
 801ef96:	1427      	asrs	r7, r4, #16
 801ef98:	fb01 2707 	mla	r7, r1, r7, r2
 801ef9c:	9902      	ldr	r1, [sp, #8]
 801ef9e:	087a      	lsrs	r2, r7, #1
 801efa0:	5c8a      	ldrb	r2, [r1, r2]
 801efa2:	07f9      	lsls	r1, r7, #31
 801efa4:	bf54      	ite	pl
 801efa6:	f002 020f 	andpl.w	r2, r2, #15
 801efaa:	1112      	asrmi	r2, r2, #4
 801efac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801efb0:	b2d2      	uxtb	r2, r2
 801efb2:	2a00      	cmp	r2, #0
 801efb4:	d03b      	beq.n	801f02e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801efb6:	4980      	ldr	r1, [pc, #512]	@ (801f1b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801efb8:	2aff      	cmp	r2, #255	@ 0xff
 801efba:	680f      	ldr	r7, [r1, #0]
 801efbc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801efc0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801efc4:	b2ff      	uxtb	r7, r7
 801efc6:	f000 80ed 	beq.w	801f1a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801efca:	fa1f f882 	uxth.w	r8, r2
 801efce:	43d2      	mvns	r2, r2
 801efd0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801efd4:	fb17 f708 	smulbb	r7, r7, r8
 801efd8:	b2d2      	uxtb	r2, r2
 801efda:	fb19 f908 	smulbb	r9, r9, r8
 801efde:	fb0e 7702 	mla	r7, lr, r2, r7
 801efe2:	fb1b f808 	smulbb	r8, fp, r8
 801efe6:	b2bf      	uxth	r7, r7
 801efe8:	f107 0e01 	add.w	lr, r7, #1
 801efec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801eff0:	123f      	asrs	r7, r7, #8
 801eff2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801eff6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801effa:	fb07 9902 	mla	r9, r7, r2, r9
 801effe:	fa1f f989 	uxth.w	r9, r9
 801f002:	f109 0701 	add.w	r7, r9, #1
 801f006:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f00a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801f00e:	fb07 8802 	mla	r8, r7, r2, r8
 801f012:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f016:	fa1f f888 	uxth.w	r8, r8
 801f01a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f01e:	f108 0201 	add.w	r2, r8, #1
 801f022:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f026:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f02a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801f02e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f030:	3003      	adds	r0, #3
 801f032:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f036:	4415      	add	r5, r2
 801f038:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f03a:	4414      	add	r4, r2
 801f03c:	e7a6      	b.n	801ef8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f03e:	2700      	movs	r7, #0
 801f040:	1bda      	subs	r2, r3, r7
 801f042:	2a00      	cmp	r2, #0
 801f044:	dc40      	bgt.n	801f0c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f04a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f04e:	441e      	add	r6, r3
 801f050:	9b00      	ldr	r3, [sp, #0]
 801f052:	2b00      	cmp	r3, #0
 801f054:	f340 80ad 	ble.w	801f1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801f058:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f05e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f062:	eeb0 6a62 	vmov.f32	s12, s5
 801f066:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f06a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f06e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f072:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f076:	eeb0 6a43 	vmov.f32	s12, s6
 801f07a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f07e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f082:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f086:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f08a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f08e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f092:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f096:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f09a:	ee12 2a90 	vmov	r2, s5
 801f09e:	eef0 2a47 	vmov.f32	s5, s14
 801f0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0a6:	ee13 2a10 	vmov	r2, s6
 801f0aa:	9311      	str	r3, [sp, #68]	@ 0x44
 801f0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0ae:	eeb0 3a67 	vmov.f32	s6, s15
 801f0b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0b6:	9312      	str	r3, [sp, #72]	@ 0x48
 801f0b8:	9b00      	ldr	r3, [sp, #0]
 801f0ba:	9a03      	ldr	r2, [sp, #12]
 801f0bc:	3b01      	subs	r3, #1
 801f0be:	9300      	str	r3, [sp, #0]
 801f0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0c2:	bf08      	it	eq
 801f0c4:	4613      	moveq	r3, r2
 801f0c6:	e72d      	b.n	801ef24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f0c8:	1428      	asrs	r0, r5, #16
 801f0ca:	d45c      	bmi.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f0cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f0d0:	4282      	cmp	r2, r0
 801f0d2:	dd58      	ble.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f0d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f0d8:	d455      	bmi.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f0da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f0de:	4572      	cmp	r2, lr
 801f0e0:	dd51      	ble.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f0e2:	9a01      	ldr	r2, [sp, #4]
 801f0e4:	9902      	ldr	r1, [sp, #8]
 801f0e6:	fb0e 0002 	mla	r0, lr, r2, r0
 801f0ea:	0842      	lsrs	r2, r0, #1
 801f0ec:	07c0      	lsls	r0, r0, #31
 801f0ee:	5c8a      	ldrb	r2, [r1, r2]
 801f0f0:	bf54      	ite	pl
 801f0f2:	f002 020f 	andpl.w	r2, r2, #15
 801f0f6:	1112      	asrmi	r2, r2, #4
 801f0f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f0fc:	b2d2      	uxtb	r2, r2
 801f0fe:	2a00      	cmp	r2, #0
 801f100:	d041      	beq.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f102:	492d      	ldr	r1, [pc, #180]	@ (801f1b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801f104:	2aff      	cmp	r2, #255	@ 0xff
 801f106:	6808      	ldr	r0, [r1, #0]
 801f108:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801f10c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f110:	fa5f fe80 	uxtb.w	lr, r0
 801f114:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801f118:	d03b      	beq.n	801f192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f11a:	fa1f f982 	uxth.w	r9, r2
 801f11e:	4438      	add	r0, r7
 801f120:	43d2      	mvns	r2, r2
 801f122:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f126:	fb1e fe09 	smulbb	lr, lr, r9
 801f12a:	fb1a fa09 	smulbb	sl, sl, r9
 801f12e:	b2d2      	uxtb	r2, r2
 801f130:	fb1b f909 	smulbb	r9, fp, r9
 801f134:	fb08 ee02 	mla	lr, r8, r2, lr
 801f138:	fa1f fe8e 	uxth.w	lr, lr
 801f13c:	f10e 0801 	add.w	r8, lr, #1
 801f140:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801f144:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f148:	f806 e000 	strb.w	lr, [r6, r0]
 801f14c:	4430      	add	r0, r6
 801f14e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801f152:	fb0e aa02 	mla	sl, lr, r2, sl
 801f156:	fa1f fa8a 	uxth.w	sl, sl
 801f15a:	f10a 0e01 	add.w	lr, sl, #1
 801f15e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801f162:	f890 e002 	ldrb.w	lr, [r0, #2]
 801f166:	fb0e 9902 	mla	r9, lr, r2, r9
 801f16a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f16e:	fa1f f989 	uxth.w	r9, r9
 801f172:	f880 a001 	strb.w	sl, [r0, #1]
 801f176:	f109 0201 	add.w	r2, r9, #1
 801f17a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f17e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f182:	f880 9002 	strb.w	r9, [r0, #2]
 801f186:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f188:	3701      	adds	r7, #1
 801f18a:	4415      	add	r5, r2
 801f18c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f18e:	4414      	add	r4, r2
 801f190:	e756      	b.n	801f040 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f192:	4438      	add	r0, r7
 801f194:	f806 e000 	strb.w	lr, [r6, r0]
 801f198:	4430      	add	r0, r6
 801f19a:	f880 a001 	strb.w	sl, [r0, #1]
 801f19e:	f880 b002 	strb.w	fp, [r0, #2]
 801f1a2:	e7f0      	b.n	801f186 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f1a4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f1a8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f1ac:	f800 bc01 	strb.w	fp, [r0, #-1]
 801f1b0:	e73d      	b.n	801f02e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f1b2:	b005      	add	sp, #20
 801f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b8:	24028530 	.word	0x24028530

0801f1bc <_ZN8touchgfx8LCD24bppD1Ev>:
 801f1bc:	4770      	bx	lr

0801f1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801f1be:	4770      	bx	lr

0801f1c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801f1c0:	4770      	bx	lr

0801f1c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801f1c2:	4770      	bx	lr

0801f1c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801f1c4:	4770      	bx	lr

0801f1c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f1c6:	4770      	bx	lr

0801f1c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f1c8:	4770      	bx	lr

0801f1ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f1ca:	4770      	bx	lr

0801f1cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f1cc:	4770      	bx	lr

0801f1ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f1ce:	4770      	bx	lr

0801f1d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f1d0:	4770      	bx	lr

0801f1d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f1d2:	4770      	bx	lr

0801f1d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f1d4:	4770      	bx	lr

0801f1d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f1d6:	4770      	bx	lr

0801f1d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f1d8:	4770      	bx	lr

0801f1da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f1da:	4770      	bx	lr

0801f1dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f1dc:	4770      	bx	lr

0801f1de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f1de:	4770      	bx	lr

0801f1e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f1e0:	4770      	bx	lr

0801f1e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f1e2:	4770      	bx	lr

0801f1e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f1e4:	4770      	bx	lr

0801f1e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f1e6:	4770      	bx	lr

0801f1e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f1e8:	4770      	bx	lr

0801f1ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f1ea:	4770      	bx	lr

0801f1ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f1ec:	4770      	bx	lr
	...

0801f1f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1f2:	4606      	mov	r6, r0
 801f1f4:	b087      	sub	sp, #28
 801f1f6:	4615      	mov	r5, r2
 801f1f8:	461f      	mov	r7, r3
 801f1fa:	b353      	cbz	r3, 801f252 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f1fc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f200:	2b00      	cmp	r3, #0
 801f202:	dd26      	ble.n	801f252 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f204:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f208:	2b00      	cmp	r3, #0
 801f20a:	dd22      	ble.n	801f252 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f20c:	6808      	ldr	r0, [r1, #0]
 801f20e:	aa04      	add	r2, sp, #16
 801f210:	6849      	ldr	r1, [r1, #4]
 801f212:	4c1b      	ldr	r4, [pc, #108]	@ (801f280 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f214:	c203      	stmia	r2!, {r0, r1}
 801f216:	a804      	add	r0, sp, #16
 801f218:	f7fa fa3c 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f21c:	6820      	ldr	r0, [r4, #0]
 801f21e:	6803      	ldr	r3, [r0, #0]
 801f220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f222:	4798      	blx	r3
 801f224:	2fff      	cmp	r7, #255	@ 0xff
 801f226:	d016      	beq.n	801f256 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f228:	f010 0f08 	tst.w	r0, #8
 801f22c:	6820      	ldr	r0, [r4, #0]
 801f22e:	d015      	beq.n	801f25c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f230:	2400      	movs	r4, #0
 801f232:	6801      	ldr	r1, [r0, #0]
 801f234:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f238:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f23c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801f240:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f244:	9401      	str	r4, [sp, #4]
 801f246:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f24a:	9400      	str	r4, [sp, #0]
 801f24c:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801f24e:	4629      	mov	r1, r5
 801f250:	47a0      	blx	r4
 801f252:	b007      	add	sp, #28
 801f254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f256:	f010 0f02 	tst.w	r0, #2
 801f25a:	e7e7      	b.n	801f22c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801f25c:	6803      	ldr	r3, [r0, #0]
 801f25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f260:	4798      	blx	r3
 801f262:	4b08      	ldr	r3, [pc, #32]	@ (801f284 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801f264:	4601      	mov	r1, r0
 801f266:	4630      	mov	r0, r6
 801f268:	881a      	ldrh	r2, [r3, #0]
 801f26a:	6833      	ldr	r3, [r6, #0]
 801f26c:	e9cd 5700 	strd	r5, r7, [sp]
 801f270:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801f272:	ab04      	add	r3, sp, #16
 801f274:	47a8      	blx	r5
 801f276:	6820      	ldr	r0, [r4, #0]
 801f278:	6803      	ldr	r3, [r0, #0]
 801f27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f27c:	4798      	blx	r3
 801f27e:	e7e8      	b.n	801f252 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f280:	24028520 	.word	0x24028520
 801f284:	2402851a 	.word	0x2402851a

0801f288 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f28c:	b08b      	sub	sp, #44	@ 0x2c
 801f28e:	460d      	mov	r5, r1
 801f290:	4616      	mov	r6, r2
 801f292:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801f296:	f1b8 0f00 	cmp.w	r8, #0
 801f29a:	d047      	beq.n	801f32c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f29c:	6810      	ldr	r0, [r2, #0]
 801f29e:	ac06      	add	r4, sp, #24
 801f2a0:	6851      	ldr	r1, [r2, #4]
 801f2a2:	4f51      	ldr	r7, [pc, #324]	@ (801f3e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801f2a4:	c403      	stmia	r4!, {r0, r1}
 801f2a6:	6818      	ldr	r0, [r3, #0]
 801f2a8:	ac08      	add	r4, sp, #32
 801f2aa:	6859      	ldr	r1, [r3, #4]
 801f2ac:	c403      	stmia	r4!, {r0, r1}
 801f2ae:	a806      	add	r0, sp, #24
 801f2b0:	f7fa f9f0 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2b4:	4631      	mov	r1, r6
 801f2b6:	a808      	add	r0, sp, #32
 801f2b8:	f7fa fa30 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f2c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f2c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f2c8:	6838      	ldr	r0, [r7, #0]
 801f2ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f2ce:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801f2d2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801f2d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f2da:	440d      	add	r5, r1
 801f2dc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f2e0:	440a      	add	r2, r1
 801f2e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f2e6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f2ea:	4413      	add	r3, r2
 801f2ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f2f0:	6803      	ldr	r3, [r0, #0]
 801f2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f2f4:	4798      	blx	r3
 801f2f6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f2fa:	d01a      	beq.n	801f332 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801f2fc:	f010 0f04 	tst.w	r0, #4
 801f300:	6838      	ldr	r0, [r7, #0]
 801f302:	d019      	beq.n	801f338 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801f304:	2100      	movs	r1, #0
 801f306:	6807      	ldr	r7, [r0, #0]
 801f308:	b2a4      	uxth	r4, r4
 801f30a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f30e:	b2b6      	uxth	r6, r6
 801f310:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f314:	9401      	str	r4, [sp, #4]
 801f316:	9600      	str	r6, [sp, #0]
 801f318:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f31c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801f320:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f324:	9102      	str	r1, [sp, #8]
 801f326:	4629      	mov	r1, r5
 801f328:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801f32a:	47a0      	blx	r4
 801f32c:	b00b      	add	sp, #44	@ 0x2c
 801f32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f332:	f010 0f01 	tst.w	r0, #1
 801f336:	e7e3      	b.n	801f300 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801f338:	6803      	ldr	r3, [r0, #0]
 801f33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f33c:	4798      	blx	r3
 801f33e:	4a2b      	ldr	r2, [pc, #172]	@ (801f3ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801f340:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801f344:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f348:	8813      	ldrh	r3, [r2, #0]
 801f34a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801f34e:	fb03 f404 	mul.w	r4, r3, r4
 801f352:	fb03 c101 	mla	r1, r3, r1, ip
 801f356:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f35a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f35e:	4408      	add	r0, r1
 801f360:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801f364:	4404      	add	r4, r0
 801f366:	d02e      	beq.n	801f3c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f368:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f36c:	1b9b      	subs	r3, r3, r6
 801f36e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801f372:	1b96      	subs	r6, r2, r6
 801f374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f378:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f37c:	42a0      	cmp	r0, r4
 801f37e:	d22d      	bcs.n	801f3dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f380:	eb00 0e01 	add.w	lr, r0, r1
 801f384:	4570      	cmp	r0, lr
 801f386:	d210      	bcs.n	801f3aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801f388:	f890 9000 	ldrb.w	r9, [r0]
 801f38c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801f390:	fb19 f90c 	smulbb	r9, r9, ip
 801f394:	fb02 9208 	mla	r2, r2, r8, r9
 801f398:	b292      	uxth	r2, r2
 801f39a:	f102 0901 	add.w	r9, r2, #1
 801f39e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801f3a2:	1212      	asrs	r2, r2, #8
 801f3a4:	f800 2b01 	strb.w	r2, [r0], #1
 801f3a8:	e7ec      	b.n	801f384 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801f3aa:	4418      	add	r0, r3
 801f3ac:	4435      	add	r5, r6
 801f3ae:	e7e5      	b.n	801f37c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801f3b0:	8813      	ldrh	r3, [r2, #0]
 801f3b2:	1b9b      	subs	r3, r3, r6
 801f3b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3b8:	4418      	add	r0, r3
 801f3ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f3be:	1b9b      	subs	r3, r3, r6
 801f3c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3c4:	441d      	add	r5, r3
 801f3c6:	42a0      	cmp	r0, r4
 801f3c8:	d208      	bcs.n	801f3dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f3ca:	eb00 0c01 	add.w	ip, r0, r1
 801f3ce:	4560      	cmp	r0, ip
 801f3d0:	d2ee      	bcs.n	801f3b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801f3d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f3d6:	f800 3b01 	strb.w	r3, [r0], #1
 801f3da:	e7f8      	b.n	801f3ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801f3dc:	6838      	ldr	r0, [r7, #0]
 801f3de:	6803      	ldr	r3, [r0, #0]
 801f3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3e2:	4798      	blx	r3
 801f3e4:	e7a2      	b.n	801f32c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f3e6:	bf00      	nop
 801f3e8:	24028520 	.word	0x24028520
 801f3ec:	2402851a 	.word	0x2402851a

0801f3f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	b085      	sub	sp, #20
 801f3f6:	9300      	str	r3, [sp, #0]
 801f3f8:	4b41      	ldr	r3, [pc, #260]	@ (801f500 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801f3fa:	781b      	ldrb	r3, [r3, #0]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d136      	bne.n	801f46e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801f400:	4a40      	ldr	r2, [pc, #256]	@ (801f504 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f402:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f406:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d131      	bne.n	801f472 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801f40e:	4b3e      	ldr	r3, [pc, #248]	@ (801f508 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f410:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f414:	ac02      	add	r4, sp, #8
 801f416:	6808      	ldr	r0, [r1, #0]
 801f418:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f41c:	ab02      	add	r3, sp, #8
 801f41e:	6849      	ldr	r1, [r1, #4]
 801f420:	4d3a      	ldr	r5, [pc, #232]	@ (801f50c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801f422:	c303      	stmia	r3!, {r0, r1}
 801f424:	4669      	mov	r1, sp
 801f426:	4620      	mov	r0, r4
 801f428:	f7fa f978 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f42c:	4668      	mov	r0, sp
 801f42e:	f7fa f931 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f432:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f436:	f8bd 2000 	ldrh.w	r2, [sp]
 801f43a:	462e      	mov	r6, r5
 801f43c:	6828      	ldr	r0, [r5, #0]
 801f43e:	4413      	add	r3, r2
 801f440:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f444:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f448:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f44c:	4413      	add	r3, r2
 801f44e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f452:	6803      	ldr	r3, [r0, #0]
 801f454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f456:	4798      	blx	r3
 801f458:	f010 0f01 	tst.w	r0, #1
 801f45c:	d00b      	beq.n	801f476 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801f45e:	6828      	ldr	r0, [r5, #0]
 801f460:	6803      	ldr	r3, [r0, #0]
 801f462:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f468:	4798      	blx	r3
 801f46a:	b005      	add	sp, #20
 801f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f46e:	4a26      	ldr	r2, [pc, #152]	@ (801f508 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f470:	e7c7      	b.n	801f402 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f472:	4b24      	ldr	r3, [pc, #144]	@ (801f504 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f474:	e7cc      	b.n	801f410 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f476:	6830      	ldr	r0, [r6, #0]
 801f478:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f47c:	6803      	ldr	r3, [r0, #0]
 801f47e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801f482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f484:	4798      	blx	r3
 801f486:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f48a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f48e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801f492:	fb14 3402 	smlabb	r4, r4, r2, r3
 801f496:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f49a:	4404      	add	r4, r0
 801f49c:	6830      	ldr	r0, [r6, #0]
 801f49e:	6803      	ldr	r3, [r0, #0]
 801f4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4a2:	4798      	blx	r3
 801f4a4:	4917      	ldr	r1, [pc, #92]	@ (801f504 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f4a6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801f4aa:	880b      	ldrh	r3, [r1, #0]
 801f4ac:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801f4b0:	fb03 c202 	mla	r2, r3, r2, ip
 801f4b4:	437b      	muls	r3, r7
 801f4b6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801f4ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4c2:	4410      	add	r0, r2
 801f4c4:	18c2      	adds	r2, r0, r3
 801f4c6:	4290      	cmp	r0, r2
 801f4c8:	d214      	bcs.n	801f4f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801f4ca:	eb00 0c07 	add.w	ip, r0, r7
 801f4ce:	4560      	cmp	r0, ip
 801f4d0:	d204      	bcs.n	801f4dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801f4d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f4d6:	f800 3b01 	strb.w	r3, [r0], #1
 801f4da:	e7f8      	b.n	801f4ce <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801f4dc:	880b      	ldrh	r3, [r1, #0]
 801f4de:	1b5b      	subs	r3, r3, r5
 801f4e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4e4:	4418      	add	r0, r3
 801f4e6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f4ea:	1b5b      	subs	r3, r3, r5
 801f4ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4f0:	441c      	add	r4, r3
 801f4f2:	e7e8      	b.n	801f4c6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801f4f4:	6830      	ldr	r0, [r6, #0]
 801f4f6:	6803      	ldr	r3, [r0, #0]
 801f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4fa:	4798      	blx	r3
 801f4fc:	e7b5      	b.n	801f46a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f4fe:	bf00      	nop
 801f500:	24028518 	.word	0x24028518
 801f504:	2402851a 	.word	0x2402851a
 801f508:	2402851c 	.word	0x2402851c
 801f50c:	24028520 	.word	0x24028520

0801f510 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f514:	b08f      	sub	sp, #60	@ 0x3c
 801f516:	461c      	mov	r4, r3
 801f518:	9203      	str	r2, [sp, #12]
 801f51a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f51e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f520:	6820      	ldr	r0, [r4, #0]
 801f522:	9100      	str	r1, [sp, #0]
 801f524:	9204      	str	r2, [sp, #16]
 801f526:	aa0a      	add	r2, sp, #40	@ 0x28
 801f528:	6861      	ldr	r1, [r4, #4]
 801f52a:	c203      	stmia	r2!, {r0, r1}
 801f52c:	6818      	ldr	r0, [r3, #0]
 801f52e:	aa0c      	add	r2, sp, #48	@ 0x30
 801f530:	6859      	ldr	r1, [r3, #4]
 801f532:	c203      	stmia	r2!, {r0, r1}
 801f534:	a80a      	add	r0, sp, #40	@ 0x28
 801f536:	f7fa f8ad 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f53a:	4621      	mov	r1, r4
 801f53c:	a80c      	add	r0, sp, #48	@ 0x30
 801f53e:	f7fa f8ed 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f542:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801f546:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801f54a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f54e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801f552:	bfdb      	ittet	le
 801f554:	b2b3      	uxthle	r3, r6
 801f556:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f55a:	2301      	movgt	r3, #1
 801f55c:	fb92 f3f3 	sdivle	r3, r2, r3
 801f560:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f564:	441d      	add	r5, r3
 801f566:	fb92 f1f3 	sdiv	r1, r2, r3
 801f56a:	fa1f fc81 	uxth.w	ip, r1
 801f56e:	3d01      	subs	r5, #1
 801f570:	fb0c 2413 	mls	r4, ip, r3, r2
 801f574:	4661      	mov	r1, ip
 801f576:	fb14 f406 	smulbb	r4, r4, r6
 801f57a:	4404      	add	r4, r0
 801f57c:	fb95 f5f3 	sdiv	r5, r5, r3
 801f580:	b2a4      	uxth	r4, r4
 801f582:	b131      	cbz	r1, 801f592 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801f584:	9b03      	ldr	r3, [sp, #12]
 801f586:	9900      	ldr	r1, [sp, #0]
 801f588:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f58c:	ba1b      	rev	r3, r3
 801f58e:	4419      	add	r1, r3
 801f590:	9100      	str	r1, [sp, #0]
 801f592:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f596:	b2ad      	uxth	r5, r5
 801f598:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801f59c:	4418      	add	r0, r3
 801f59e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f5a2:	00ad      	lsls	r5, r5, #2
 801f5a4:	441a      	add	r2, r3
 801f5a6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f5aa:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f5ae:	9301      	str	r3, [sp, #4]
 801f5b0:	4b79      	ldr	r3, [pc, #484]	@ (801f798 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f5b2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f5b6:	6818      	ldr	r0, [r3, #0]
 801f5b8:	6803      	ldr	r3, [r0, #0]
 801f5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f5bc:	4798      	blx	r3
 801f5be:	4a77      	ldr	r2, [pc, #476]	@ (801f79c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801f5c0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f5c4:	2c00      	cmp	r4, #0
 801f5c6:	8813      	ldrh	r3, [r2, #0]
 801f5c8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f5cc:	9209      	str	r2, [sp, #36]	@ 0x24
 801f5ce:	fb03 c101 	mla	r1, r3, r1, ip
 801f5d2:	fb06 f303 	mul.w	r3, r6, r3
 801f5d6:	bf18      	it	ne
 801f5d8:	2600      	movne	r6, #0
 801f5da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f5de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5e2:	4408      	add	r0, r1
 801f5e4:	4403      	add	r3, r0
 801f5e6:	9306      	str	r3, [sp, #24]
 801f5e8:	f105 0304 	add.w	r3, r5, #4
 801f5ec:	9305      	str	r3, [sp, #20]
 801f5ee:	9b01      	ldr	r3, [sp, #4]
 801f5f0:	bf08      	it	eq
 801f5f2:	461e      	moveq	r6, r3
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	b2b6      	uxth	r6, r6
 801f5f8:	9302      	str	r3, [sp, #8]
 801f5fa:	9a06      	ldr	r2, [sp, #24]
 801f5fc:	4290      	cmp	r0, r2
 801f5fe:	f080 80c2 	bcs.w	801f786 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801f602:	b963      	cbnz	r3, 801f61e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f604:	9b00      	ldr	r3, [sp, #0]
 801f606:	781a      	ldrb	r2, [r3, #0]
 801f608:	0993      	lsrs	r3, r2, #6
 801f60a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f60e:	9202      	str	r2, [sp, #8]
 801f610:	1e5a      	subs	r2, r3, #1
 801f612:	2a02      	cmp	r2, #2
 801f614:	d815      	bhi.n	801f642 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801f616:	9a00      	ldr	r2, [sp, #0]
 801f618:	b29b      	uxth	r3, r3
 801f61a:	3201      	adds	r2, #1
 801f61c:	9200      	str	r2, [sp, #0]
 801f61e:	b1b4      	cbz	r4, 801f64e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801f620:	429c      	cmp	r4, r3
 801f622:	bf91      	iteee	ls
 801f624:	1b1c      	subls	r4, r3, r4
 801f626:	1ae4      	subhi	r4, r4, r3
 801f628:	4635      	movhi	r5, r6
 801f62a:	f04f 0e00 	movhi.w	lr, #0
 801f62e:	bf9b      	ittet	ls
 801f630:	fa1f fe84 	uxthls.w	lr, r4
 801f634:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801f638:	b2a4      	uxthhi	r4, r4
 801f63a:	2400      	movls	r4, #0
 801f63c:	4673      	mov	r3, lr
 801f63e:	462e      	mov	r6, r5
 801f640:	e7db      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801f642:	9a00      	ldr	r2, [sp, #0]
 801f644:	9b00      	ldr	r3, [sp, #0]
 801f646:	3202      	adds	r2, #2
 801f648:	785b      	ldrb	r3, [r3, #1]
 801f64a:	9200      	str	r2, [sp, #0]
 801f64c:	e7e7      	b.n	801f61e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f64e:	2204      	movs	r2, #4
 801f650:	9905      	ldr	r1, [sp, #20]
 801f652:	429e      	cmp	r6, r3
 801f654:	4615      	mov	r5, r2
 801f656:	9a02      	ldr	r2, [sp, #8]
 801f658:	bf94      	ite	ls
 801f65a:	eba3 0e06 	subls.w	lr, r3, r6
 801f65e:	46a6      	movhi	lr, r4
 801f660:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f664:	9903      	ldr	r1, [sp, #12]
 801f666:	bf8c      	ite	hi
 801f668:	1af5      	subhi	r5, r6, r3
 801f66a:	fa1f fe8e 	uxthls.w	lr, lr
 801f66e:	f851 c002 	ldr.w	ip, [r1, r2]
 801f672:	bf9a      	itte	ls
 801f674:	4625      	movls	r5, r4
 801f676:	4632      	movls	r2, r6
 801f678:	b2ad      	uxthhi	r5, r5
 801f67a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801f67e:	bf88      	it	hi
 801f680:	461a      	movhi	r2, r3
 801f682:	b179      	cbz	r1, 801f6a4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f684:	29ff      	cmp	r1, #255	@ 0xff
 801f686:	fa5f f98c 	uxtb.w	r9, ip
 801f68a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801f68e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801f692:	d126      	bne.n	801f6e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f694:	9f04      	ldr	r7, [sp, #16]
 801f696:	2fff      	cmp	r7, #255	@ 0xff
 801f698:	d123      	bne.n	801f6e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f69a:	4682      	mov	sl, r0
 801f69c:	4611      	mov	r1, r2
 801f69e:	f10a 0a03 	add.w	sl, sl, #3
 801f6a2:	b9a9      	cbnz	r1, 801f6d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801f6a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6a8:	429e      	cmp	r6, r3
 801f6aa:	4410      	add	r0, r2
 801f6ac:	d8c6      	bhi.n	801f63c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f6ae:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801f6b2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6b8:	1b64      	subs	r4, r4, r5
 801f6ba:	9a01      	ldr	r2, [sp, #4]
 801f6bc:	881b      	ldrh	r3, [r3, #0]
 801f6be:	b2a4      	uxth	r4, r4
 801f6c0:	1a9b      	subs	r3, r3, r2
 801f6c2:	2c00      	cmp	r4, #0
 801f6c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6c8:	bf18      	it	ne
 801f6ca:	2500      	movne	r5, #0
 801f6cc:	4418      	add	r0, r3
 801f6ce:	e7b5      	b.n	801f63c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f6d0:	3901      	subs	r1, #1
 801f6d2:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801f6d6:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801f6da:	f80a cc01 	strb.w	ip, [sl, #-1]
 801f6de:	b289      	uxth	r1, r1
 801f6e0:	e7dd      	b.n	801f69e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f6e2:	9f04      	ldr	r7, [sp, #16]
 801f6e4:	fb07 fa01 	mul.w	sl, r7, r1
 801f6e8:	f10a 0101 	add.w	r1, sl, #1
 801f6ec:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801f6f0:	1209      	asrs	r1, r1, #8
 801f6f2:	ea6f 0a01 	mvn.w	sl, r1
 801f6f6:	b289      	uxth	r1, r1
 801f6f8:	fb19 f901 	smulbb	r9, r9, r1
 801f6fc:	fa5f fa8a 	uxtb.w	sl, sl
 801f700:	fb18 f801 	smulbb	r8, r8, r1
 801f704:	fb1c f101 	smulbb	r1, ip, r1
 801f708:	fa1f f789 	uxth.w	r7, r9
 801f70c:	4684      	mov	ip, r0
 801f70e:	4691      	mov	r9, r2
 801f710:	9707      	str	r7, [sp, #28]
 801f712:	b289      	uxth	r1, r1
 801f714:	fa1f f788 	uxth.w	r7, r8
 801f718:	9708      	str	r7, [sp, #32]
 801f71a:	f10c 0c03 	add.w	ip, ip, #3
 801f71e:	f1b9 0f00 	cmp.w	r9, #0
 801f722:	d0bf      	beq.n	801f6a4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f724:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801f728:	f109 39ff 	add.w	r9, r9, #4294967295
 801f72c:	9f07      	ldr	r7, [sp, #28]
 801f72e:	fa1f f989 	uxth.w	r9, r9
 801f732:	fb08 780a 	mla	r8, r8, sl, r7
 801f736:	9f08      	ldr	r7, [sp, #32]
 801f738:	fa1f f888 	uxth.w	r8, r8
 801f73c:	f108 0b01 	add.w	fp, r8, #1
 801f740:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f744:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f748:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801f74c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801f750:	fb08 780a 	mla	r8, r8, sl, r7
 801f754:	fa1f f888 	uxth.w	r8, r8
 801f758:	f108 0b01 	add.w	fp, r8, #1
 801f75c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f760:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f764:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801f768:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801f76c:	fb08 180a 	mla	r8, r8, sl, r1
 801f770:	fa1f f888 	uxth.w	r8, r8
 801f774:	f108 0b01 	add.w	fp, r8, #1
 801f778:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f77c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f780:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801f784:	e7c9      	b.n	801f71a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f786:	4b04      	ldr	r3, [pc, #16]	@ (801f798 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f788:	6818      	ldr	r0, [r3, #0]
 801f78a:	6803      	ldr	r3, [r0, #0]
 801f78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f78e:	4798      	blx	r3
 801f790:	b00f      	add	sp, #60	@ 0x3c
 801f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f796:	bf00      	nop
 801f798:	24028520 	.word	0x24028520
 801f79c:	2402851a 	.word	0x2402851a

0801f7a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a4:	b089      	sub	sp, #36	@ 0x24
 801f7a6:	4607      	mov	r7, r0
 801f7a8:	4689      	mov	r9, r1
 801f7aa:	4692      	mov	sl, r2
 801f7ac:	ac08      	add	r4, sp, #32
 801f7ae:	461e      	mov	r6, r3
 801f7b0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f7b4:	4620      	mov	r0, r4
 801f7b6:	f7fd ff77 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	4605      	mov	r5, r0
 801f7be:	4620      	mov	r0, r4
 801f7c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801f7c4:	f7fd fe7e 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f7c8:	4683      	mov	fp, r0
 801f7ca:	4620      	mov	r0, r4
 801f7cc:	f7fd feae 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f7d0:	4653      	mov	r3, sl
 801f7d2:	464a      	mov	r2, r9
 801f7d4:	4639      	mov	r1, r7
 801f7d6:	9500      	str	r5, [sp, #0]
 801f7d8:	e9cd b001 	strd	fp, r0, [sp, #4]
 801f7dc:	a806      	add	r0, sp, #24
 801f7de:	47c0      	blx	r8
 801f7e0:	a906      	add	r1, sp, #24
 801f7e2:	4630      	mov	r0, r6
 801f7e4:	f7fd fd52 	bl	801d28c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801f7e8:	4628      	mov	r0, r5
 801f7ea:	b009      	add	sp, #36	@ 0x24
 801f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7f0 <_ZN8touchgfx8LCD24bppD0Ev>:
 801f7f0:	b510      	push	{r4, lr}
 801f7f2:	4604      	mov	r4, r0
 801f7f4:	216c      	movs	r1, #108	@ 0x6c
 801f7f6:	f008 fc7f 	bl	80280f8 <_ZdlPvj>
 801f7fa:	4620      	mov	r0, r4
 801f7fc:	bd10      	pop	{r4, pc}

0801f7fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801f7fe:	b510      	push	{r4, lr}
 801f800:	4604      	mov	r4, r0
 801f802:	2104      	movs	r1, #4
 801f804:	f008 fc78 	bl	80280f8 <_ZdlPvj>
 801f808:	4620      	mov	r0, r4
 801f80a:	bd10      	pop	{r4, pc}

0801f80c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801f80c:	b510      	push	{r4, lr}
 801f80e:	4604      	mov	r4, r0
 801f810:	2104      	movs	r1, #4
 801f812:	f008 fc71 	bl	80280f8 <_ZdlPvj>
 801f816:	4620      	mov	r0, r4
 801f818:	bd10      	pop	{r4, pc}

0801f81a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801f81a:	b510      	push	{r4, lr}
 801f81c:	4604      	mov	r4, r0
 801f81e:	f640 0144 	movw	r1, #2116	@ 0x844
 801f822:	f008 fc69 	bl	80280f8 <_ZdlPvj>
 801f826:	4620      	mov	r0, r4
 801f828:	bd10      	pop	{r4, pc}

0801f82a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801f82a:	b510      	push	{r4, lr}
 801f82c:	4604      	mov	r4, r0
 801f82e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801f832:	f008 fc61 	bl	80280f8 <_ZdlPvj>
 801f836:	4620      	mov	r0, r4
 801f838:	bd10      	pop	{r4, pc}

0801f83a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f83a:	b510      	push	{r4, lr}
 801f83c:	4604      	mov	r4, r0
 801f83e:	2104      	movs	r1, #4
 801f840:	f008 fc5a 	bl	80280f8 <_ZdlPvj>
 801f844:	4620      	mov	r0, r4
 801f846:	bd10      	pop	{r4, pc}

0801f848 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f848:	b510      	push	{r4, lr}
 801f84a:	4604      	mov	r4, r0
 801f84c:	2104      	movs	r1, #4
 801f84e:	f008 fc53 	bl	80280f8 <_ZdlPvj>
 801f852:	4620      	mov	r0, r4
 801f854:	bd10      	pop	{r4, pc}

0801f856 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f856:	b510      	push	{r4, lr}
 801f858:	4604      	mov	r4, r0
 801f85a:	2104      	movs	r1, #4
 801f85c:	f008 fc4c 	bl	80280f8 <_ZdlPvj>
 801f860:	4620      	mov	r0, r4
 801f862:	bd10      	pop	{r4, pc}

0801f864 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f864:	b510      	push	{r4, lr}
 801f866:	4604      	mov	r4, r0
 801f868:	2104      	movs	r1, #4
 801f86a:	f008 fc45 	bl	80280f8 <_ZdlPvj>
 801f86e:	4620      	mov	r0, r4
 801f870:	bd10      	pop	{r4, pc}

0801f872 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f872:	b510      	push	{r4, lr}
 801f874:	4604      	mov	r4, r0
 801f876:	2104      	movs	r1, #4
 801f878:	f008 fc3e 	bl	80280f8 <_ZdlPvj>
 801f87c:	4620      	mov	r0, r4
 801f87e:	bd10      	pop	{r4, pc}

0801f880 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f880:	b510      	push	{r4, lr}
 801f882:	4604      	mov	r4, r0
 801f884:	2104      	movs	r1, #4
 801f886:	f008 fc37 	bl	80280f8 <_ZdlPvj>
 801f88a:	4620      	mov	r0, r4
 801f88c:	bd10      	pop	{r4, pc}

0801f88e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f88e:	b510      	push	{r4, lr}
 801f890:	4604      	mov	r4, r0
 801f892:	2104      	movs	r1, #4
 801f894:	f008 fc30 	bl	80280f8 <_ZdlPvj>
 801f898:	4620      	mov	r0, r4
 801f89a:	bd10      	pop	{r4, pc}

0801f89c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f89c:	b510      	push	{r4, lr}
 801f89e:	4604      	mov	r4, r0
 801f8a0:	2104      	movs	r1, #4
 801f8a2:	f008 fc29 	bl	80280f8 <_ZdlPvj>
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	bd10      	pop	{r4, pc}

0801f8aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f8aa:	b510      	push	{r4, lr}
 801f8ac:	4604      	mov	r4, r0
 801f8ae:	2104      	movs	r1, #4
 801f8b0:	f008 fc22 	bl	80280f8 <_ZdlPvj>
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	bd10      	pop	{r4, pc}

0801f8b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f8b8:	b510      	push	{r4, lr}
 801f8ba:	4604      	mov	r4, r0
 801f8bc:	2104      	movs	r1, #4
 801f8be:	f008 fc1b 	bl	80280f8 <_ZdlPvj>
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	bd10      	pop	{r4, pc}

0801f8c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f8c6:	b510      	push	{r4, lr}
 801f8c8:	4604      	mov	r4, r0
 801f8ca:	2104      	movs	r1, #4
 801f8cc:	f008 fc14 	bl	80280f8 <_ZdlPvj>
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	bd10      	pop	{r4, pc}

0801f8d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f8d4:	b510      	push	{r4, lr}
 801f8d6:	4604      	mov	r4, r0
 801f8d8:	2104      	movs	r1, #4
 801f8da:	f008 fc0d 	bl	80280f8 <_ZdlPvj>
 801f8de:	4620      	mov	r0, r4
 801f8e0:	bd10      	pop	{r4, pc}

0801f8e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f8e2:	b510      	push	{r4, lr}
 801f8e4:	4604      	mov	r4, r0
 801f8e6:	2104      	movs	r1, #4
 801f8e8:	f008 fc06 	bl	80280f8 <_ZdlPvj>
 801f8ec:	4620      	mov	r0, r4
 801f8ee:	bd10      	pop	{r4, pc}

0801f8f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f8f0:	b510      	push	{r4, lr}
 801f8f2:	4604      	mov	r4, r0
 801f8f4:	2104      	movs	r1, #4
 801f8f6:	f008 fbff 	bl	80280f8 <_ZdlPvj>
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	bd10      	pop	{r4, pc}

0801f8fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f8fe:	b510      	push	{r4, lr}
 801f900:	4604      	mov	r4, r0
 801f902:	2104      	movs	r1, #4
 801f904:	f008 fbf8 	bl	80280f8 <_ZdlPvj>
 801f908:	4620      	mov	r0, r4
 801f90a:	bd10      	pop	{r4, pc}

0801f90c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f90c:	b510      	push	{r4, lr}
 801f90e:	4604      	mov	r4, r0
 801f910:	2104      	movs	r1, #4
 801f912:	f008 fbf1 	bl	80280f8 <_ZdlPvj>
 801f916:	4620      	mov	r0, r4
 801f918:	bd10      	pop	{r4, pc}

0801f91a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f91a:	b510      	push	{r4, lr}
 801f91c:	4604      	mov	r4, r0
 801f91e:	2104      	movs	r1, #4
 801f920:	f008 fbea 	bl	80280f8 <_ZdlPvj>
 801f924:	4620      	mov	r0, r4
 801f926:	bd10      	pop	{r4, pc}

0801f928 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f928:	b510      	push	{r4, lr}
 801f92a:	4604      	mov	r4, r0
 801f92c:	2104      	movs	r1, #4
 801f92e:	f008 fbe3 	bl	80280f8 <_ZdlPvj>
 801f932:	4620      	mov	r0, r4
 801f934:	bd10      	pop	{r4, pc}

0801f936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f936:	b510      	push	{r4, lr}
 801f938:	4604      	mov	r4, r0
 801f93a:	2104      	movs	r1, #4
 801f93c:	f008 fbdc 	bl	80280f8 <_ZdlPvj>
 801f940:	4620      	mov	r0, r4
 801f942:	bd10      	pop	{r4, pc}

0801f944 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f944:	b510      	push	{r4, lr}
 801f946:	4604      	mov	r4, r0
 801f948:	2104      	movs	r1, #4
 801f94a:	f008 fbd5 	bl	80280f8 <_ZdlPvj>
 801f94e:	4620      	mov	r0, r4
 801f950:	bd10      	pop	{r4, pc}
	...

0801f954 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f958:	b08f      	sub	sp, #60	@ 0x3c
 801f95a:	461c      	mov	r4, r3
 801f95c:	460e      	mov	r6, r1
 801f95e:	9206      	str	r2, [sp, #24]
 801f960:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f964:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f966:	9202      	str	r2, [sp, #8]
 801f968:	2a00      	cmp	r2, #0
 801f96a:	f000 8128 	beq.w	801fbbe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801f96e:	6820      	ldr	r0, [r4, #0]
 801f970:	aa0a      	add	r2, sp, #40	@ 0x28
 801f972:	6861      	ldr	r1, [r4, #4]
 801f974:	c203      	stmia	r2!, {r0, r1}
 801f976:	6818      	ldr	r0, [r3, #0]
 801f978:	aa0c      	add	r2, sp, #48	@ 0x30
 801f97a:	6859      	ldr	r1, [r3, #4]
 801f97c:	c203      	stmia	r2!, {r0, r1}
 801f97e:	a80a      	add	r0, sp, #40	@ 0x28
 801f980:	f7f9 fe88 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f984:	4621      	mov	r1, r4
 801f986:	a80c      	add	r0, sp, #48	@ 0x30
 801f988:	f7f9 fec8 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f98c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801f990:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801f994:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801f998:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801f99c:	bfdb      	ittet	le
 801f99e:	b2bb      	uxthle	r3, r7
 801f9a0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f9a4:	2301      	movgt	r3, #1
 801f9a6:	fb92 f3f3 	sdivle	r3, r2, r3
 801f9aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f9ae:	441d      	add	r5, r3
 801f9b0:	fb92 f1f3 	sdiv	r1, r2, r3
 801f9b4:	fa1f fc81 	uxth.w	ip, r1
 801f9b8:	3d01      	subs	r5, #1
 801f9ba:	fb0c 2413 	mls	r4, ip, r3, r2
 801f9be:	4661      	mov	r1, ip
 801f9c0:	fb14 f407 	smulbb	r4, r4, r7
 801f9c4:	4404      	add	r4, r0
 801f9c6:	fb95 f5f3 	sdiv	r5, r5, r3
 801f9ca:	b2a4      	uxth	r4, r4
 801f9cc:	b121      	cbz	r1, 801f9d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801f9ce:	9b06      	ldr	r3, [sp, #24]
 801f9d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f9d4:	ba1b      	rev	r3, r3
 801f9d6:	441e      	add	r6, r3
 801f9d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f9dc:	b2ad      	uxth	r5, r5
 801f9de:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801f9e2:	4418      	add	r0, r3
 801f9e4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f9e8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801f9ec:	00ad      	lsls	r5, r5, #2
 801f9ee:	441a      	add	r2, r3
 801f9f0:	4b74      	ldr	r3, [pc, #464]	@ (801fbc4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f9f2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f9f6:	6818      	ldr	r0, [r3, #0]
 801f9f8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f9fc:	6803      	ldr	r3, [r0, #0]
 801f9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa00:	4798      	blx	r3
 801fa02:	4a71      	ldr	r2, [pc, #452]	@ (801fbc8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801fa04:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801fa08:	2c00      	cmp	r4, #0
 801fa0a:	8813      	ldrh	r3, [r2, #0]
 801fa0c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801fa10:	9209      	str	r2, [sp, #36]	@ 0x24
 801fa12:	fb03 c101 	mla	r1, r3, r1, ip
 801fa16:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fa1a:	fb03 f307 	mul.w	r3, r3, r7
 801fa1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fa22:	9204      	str	r2, [sp, #16]
 801fa24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa28:	9a02      	ldr	r2, [sp, #8]
 801fa2a:	4408      	add	r0, r1
 801fa2c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801fa30:	4403      	add	r3, r0
 801fa32:	b292      	uxth	r2, r2
 801fa34:	9307      	str	r3, [sp, #28]
 801fa36:	f105 0304 	add.w	r3, r5, #4
 801fa3a:	bf0c      	ite	eq
 801fa3c:	4645      	moveq	r5, r8
 801fa3e:	2500      	movne	r5, #0
 801fa40:	9308      	str	r3, [sp, #32]
 801fa42:	2300      	movs	r3, #0
 801fa44:	b2ad      	uxth	r5, r5
 801fa46:	9205      	str	r2, [sp, #20]
 801fa48:	9303      	str	r3, [sp, #12]
 801fa4a:	9a07      	ldr	r2, [sp, #28]
 801fa4c:	4282      	cmp	r2, r0
 801fa4e:	f240 80b1 	bls.w	801fbb4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801fa52:	b95b      	cbnz	r3, 801fa6c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801fa54:	7832      	ldrb	r2, [r6, #0]
 801fa56:	0993      	lsrs	r3, r2, #6
 801fa58:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fa5c:	9203      	str	r2, [sp, #12]
 801fa5e:	1e5a      	subs	r2, r3, #1
 801fa60:	2a02      	cmp	r2, #2
 801fa62:	bf8d      	iteet	hi
 801fa64:	7873      	ldrbhi	r3, [r6, #1]
 801fa66:	3601      	addls	r6, #1
 801fa68:	b29b      	uxthls	r3, r3
 801fa6a:	3602      	addhi	r6, #2
 801fa6c:	b184      	cbz	r4, 801fa90 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801fa6e:	429c      	cmp	r4, r3
 801fa70:	bf91      	iteee	ls
 801fa72:	1b1c      	subls	r4, r3, r4
 801fa74:	1ae4      	subhi	r4, r4, r3
 801fa76:	4629      	movhi	r1, r5
 801fa78:	f04f 0e00 	movhi.w	lr, #0
 801fa7c:	bf9b      	ittet	ls
 801fa7e:	fa1f fe84 	uxthls.w	lr, r4
 801fa82:	2400      	movls	r4, #0
 801fa84:	b2a4      	uxthhi	r4, r4
 801fa86:	fa1f f188 	uxthls.w	r1, r8
 801fa8a:	4673      	mov	r3, lr
 801fa8c:	460d      	mov	r5, r1
 801fa8e:	e7dc      	b.n	801fa4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801fa90:	2203      	movs	r2, #3
 801fa92:	9908      	ldr	r1, [sp, #32]
 801fa94:	42ab      	cmp	r3, r5
 801fa96:	4617      	mov	r7, r2
 801fa98:	9a03      	ldr	r2, [sp, #12]
 801fa9a:	bf24      	itt	cs
 801fa9c:	eba3 0e05 	subcs.w	lr, r3, r5
 801faa0:	9501      	strcs	r5, [sp, #4]
 801faa2:	fb17 1702 	smlabb	r7, r7, r2, r1
 801faa6:	9a06      	ldr	r2, [sp, #24]
 801faa8:	bf34      	ite	cc
 801faaa:	1ae9      	subcc	r1, r5, r3
 801faac:	fa1f fe8e 	uxthcs.w	lr, lr
 801fab0:	4417      	add	r7, r2
 801fab2:	9a02      	ldr	r2, [sp, #8]
 801fab4:	bf2f      	iteee	cs
 801fab6:	4621      	movcs	r1, r4
 801fab8:	b289      	uxthcc	r1, r1
 801faba:	9301      	strcc	r3, [sp, #4]
 801fabc:	46a6      	movcc	lr, r4
 801fabe:	2aff      	cmp	r2, #255	@ 0xff
 801fac0:	d11e      	bne.n	801fb00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801fac2:	4681      	mov	r9, r0
 801fac4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fac8:	f109 0903 	add.w	r9, r9, #3
 801facc:	f1bc 0f00 	cmp.w	ip, #0
 801fad0:	d15f      	bne.n	801fb92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801fad2:	9a01      	ldr	r2, [sp, #4]
 801fad4:	42ab      	cmp	r3, r5
 801fad6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fada:	4410      	add	r0, r2
 801fadc:	d3d5      	bcc.n	801fa8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801fade:	fa1f f188 	uxth.w	r1, r8
 801fae2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801fae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fae8:	1a64      	subs	r4, r4, r1
 801faea:	881b      	ldrh	r3, [r3, #0]
 801faec:	b2a4      	uxth	r4, r4
 801faee:	eba3 0308 	sub.w	r3, r3, r8
 801faf2:	2c00      	cmp	r4, #0
 801faf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801faf8:	bf18      	it	ne
 801fafa:	2100      	movne	r1, #0
 801fafc:	4418      	add	r0, r3
 801fafe:	e7c4      	b.n	801fa8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801fb00:	4684      	mov	ip, r0
 801fb02:	f8dd a004 	ldr.w	sl, [sp, #4]
 801fb06:	f10c 0c03 	add.w	ip, ip, #3
 801fb0a:	f1ba 0f00 	cmp.w	sl, #0
 801fb0e:	d0e0      	beq.n	801fad2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801fb10:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801fb14:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fb18:	9a05      	ldr	r2, [sp, #20]
 801fb1a:	f897 9000 	ldrb.w	r9, [r7]
 801fb1e:	fa1f fa8a 	uxth.w	sl, sl
 801fb22:	fb1b fb02 	smulbb	fp, fp, r2
 801fb26:	9a04      	ldr	r2, [sp, #16]
 801fb28:	fb09 b902 	mla	r9, r9, r2, fp
 801fb2c:	9a05      	ldr	r2, [sp, #20]
 801fb2e:	fa1f f989 	uxth.w	r9, r9
 801fb32:	f109 0b01 	add.w	fp, r9, #1
 801fb36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fb3a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801fb3e:	fb1b fb02 	smulbb	fp, fp, r2
 801fb42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb46:	9a04      	ldr	r2, [sp, #16]
 801fb48:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801fb4c:	f897 9001 	ldrb.w	r9, [r7, #1]
 801fb50:	fb09 b902 	mla	r9, r9, r2, fp
 801fb54:	9a05      	ldr	r2, [sp, #20]
 801fb56:	fa1f f989 	uxth.w	r9, r9
 801fb5a:	f109 0b01 	add.w	fp, r9, #1
 801fb5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fb62:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801fb66:	fb1b fb02 	smulbb	fp, fp, r2
 801fb6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb6e:	9a04      	ldr	r2, [sp, #16]
 801fb70:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801fb74:	f897 9002 	ldrb.w	r9, [r7, #2]
 801fb78:	fb09 b902 	mla	r9, r9, r2, fp
 801fb7c:	fa1f f989 	uxth.w	r9, r9
 801fb80:	f109 0b01 	add.w	fp, r9, #1
 801fb84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fb88:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb8c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801fb90:	e7b9      	b.n	801fb06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801fb92:	f897 a000 	ldrb.w	sl, [r7]
 801fb96:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb9a:	f809 ac03 	strb.w	sl, [r9, #-3]
 801fb9e:	fa1f fc8c 	uxth.w	ip, ip
 801fba2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801fba6:	f809 ac02 	strb.w	sl, [r9, #-2]
 801fbaa:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fbae:	f809 ac01 	strb.w	sl, [r9, #-1]
 801fbb2:	e789      	b.n	801fac8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801fbb4:	4b03      	ldr	r3, [pc, #12]	@ (801fbc4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801fbb6:	6818      	ldr	r0, [r3, #0]
 801fbb8:	6803      	ldr	r3, [r0, #0]
 801fbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbbc:	4798      	blx	r3
 801fbbe:	b00f      	add	sp, #60	@ 0x3c
 801fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbc4:	24028520 	.word	0x24028520
 801fbc8:	2402851a 	.word	0x2402851a

0801fbcc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd0:	b09b      	sub	sp, #108	@ 0x6c
 801fbd2:	461d      	mov	r5, r3
 801fbd4:	4604      	mov	r4, r0
 801fbd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fbd8:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801fbdc:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801fbe0:	9208      	str	r2, [sp, #32]
 801fbe2:	2a00      	cmp	r2, #0
 801fbe4:	f000 81f3 	beq.w	801ffce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801fbe8:	6828      	ldr	r0, [r5, #0]
 801fbea:	aa16      	add	r2, sp, #88	@ 0x58
 801fbec:	6869      	ldr	r1, [r5, #4]
 801fbee:	c203      	stmia	r2!, {r0, r1}
 801fbf0:	6818      	ldr	r0, [r3, #0]
 801fbf2:	aa18      	add	r2, sp, #96	@ 0x60
 801fbf4:	6859      	ldr	r1, [r3, #4]
 801fbf6:	c203      	stmia	r2!, {r0, r1}
 801fbf8:	a816      	add	r0, sp, #88	@ 0x58
 801fbfa:	f7f9 fd4b 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fbfe:	4629      	mov	r1, r5
 801fc00:	a818      	add	r0, sp, #96	@ 0x60
 801fc02:	f7f9 fd8b 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc06:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801fc0a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801fc0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fc12:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801fc16:	bfdb      	ittet	le
 801fc18:	b29a      	uxthle	r2, r3
 801fc1a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801fc1e:	f04f 0a01 	movgt.w	sl, #1
 801fc22:	fb91 faf2 	sdivle	sl, r1, r2
 801fc26:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801fc2a:	4456      	add	r6, sl
 801fc2c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801fc30:	3e01      	subs	r6, #1
 801fc32:	fb92 f0fa 	sdiv	r0, r2, sl
 801fc36:	b280      	uxth	r0, r0
 801fc38:	fb00 281a 	mls	r8, r0, sl, r2
 801fc3c:	900e      	str	r0, [sp, #56]	@ 0x38
 801fc3e:	fb18 f803 	smulbb	r8, r8, r3
 801fc42:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801fc46:	4488      	add	r8, r1
 801fc48:	4419      	add	r1, r3
 801fc4a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801fc4e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801fc52:	fa1f f888 	uxth.w	r8, r8
 801fc56:	441a      	add	r2, r3
 801fc58:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801fc5c:	9303      	str	r3, [sp, #12]
 801fc5e:	4b9c      	ldr	r3, [pc, #624]	@ (801fed0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801fc60:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801fc64:	6818      	ldr	r0, [r3, #0]
 801fc66:	6803      	ldr	r3, [r0, #0]
 801fc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc6a:	4798      	blx	r3
 801fc6c:	4b99      	ldr	r3, [pc, #612]	@ (801fed4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801fc6e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801fc72:	f1b8 0f00 	cmp.w	r8, #0
 801fc76:	881a      	ldrh	r2, [r3, #0]
 801fc78:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801fc7c:	fb02 f505 	mul.w	r5, r2, r5
 801fc80:	fb02 7101 	mla	r1, r2, r1, r7
 801fc84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc88:	9314      	str	r3, [sp, #80]	@ 0x50
 801fc8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fc8e:	9b08      	ldr	r3, [sp, #32]
 801fc90:	fb96 f6fa 	sdiv	r6, r6, sl
 801fc94:	4408      	add	r0, r1
 801fc96:	f106 0601 	add.w	r6, r6, #1
 801fc9a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801fc9e:	f04f 0100 	mov.w	r1, #0
 801fca2:	eb00 0205 	add.w	r2, r0, r5
 801fca6:	b2b6      	uxth	r6, r6
 801fca8:	b29b      	uxth	r3, r3
 801fcaa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fcac:	9209      	str	r2, [sp, #36]	@ 0x24
 801fcae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fcb0:	930d      	str	r3, [sp, #52]	@ 0x34
 801fcb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fcb6:	4b88      	ldr	r3, [pc, #544]	@ (801fed8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801fcb8:	f106 0204 	add.w	r2, r6, #4
 801fcbc:	eba3 0304 	sub.w	r3, r3, r4
 801fcc0:	9205      	str	r2, [sp, #20]
 801fcc2:	9a03      	ldr	r2, [sp, #12]
 801fcc4:	bf18      	it	ne
 801fcc6:	2200      	movne	r2, #0
 801fcc8:	9315      	str	r3, [sp, #84]	@ 0x54
 801fcca:	b292      	uxth	r2, r2
 801fccc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fcd0:	fa11 f383 	uxtah	r3, r1, r3
 801fcd4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fcd6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fcda:	3304      	adds	r3, #4
 801fcdc:	9306      	str	r3, [sp, #24]
 801fcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fce0:	4283      	cmp	r3, r0
 801fce2:	f240 816f 	bls.w	801ffc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801fce6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801fcea:	f04f 0900 	mov.w	r9, #0
 801fcee:	9d06      	ldr	r5, [sp, #24]
 801fcf0:	fbb8 f3f3 	udiv	r3, r8, r3
 801fcf4:	ebaa 0303 	sub.w	r3, sl, r3
 801fcf8:	782d      	ldrb	r5, [r5, #0]
 801fcfa:	b29b      	uxth	r3, r3
 801fcfc:	950f      	str	r5, [sp, #60]	@ 0x3c
 801fcfe:	3501      	adds	r5, #1
 801fd00:	9312      	str	r3, [sp, #72]	@ 0x48
 801fd02:	9b06      	ldr	r3, [sp, #24]
 801fd04:	9504      	str	r5, [sp, #16]
 801fd06:	7859      	ldrb	r1, [r3, #1]
 801fd08:	789b      	ldrb	r3, [r3, #2]
 801fd0a:	021b      	lsls	r3, r3, #8
 801fd0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801fd10:	9906      	ldr	r1, [sp, #24]
 801fd12:	78c9      	ldrb	r1, [r1, #3]
 801fd14:	430b      	orrs	r3, r1
 801fd16:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fd18:	4419      	add	r1, r3
 801fd1a:	1c4d      	adds	r5, r1, #1
 801fd1c:	7849      	ldrb	r1, [r1, #1]
 801fd1e:	9502      	str	r5, [sp, #8]
 801fd20:	0209      	lsls	r1, r1, #8
 801fd22:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801fd24:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801fd28:	5ceb      	ldrb	r3, [r5, r3]
 801fd2a:	4319      	orrs	r1, r3
 801fd2c:	b28b      	uxth	r3, r1
 801fd2e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801fd32:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd34:	2300      	movs	r3, #0
 801fd36:	9307      	str	r3, [sp, #28]
 801fd38:	2301      	movs	r3, #1
 801fd3a:	e9cd 3300 	strd	r3, r3, [sp]
 801fd3e:	469c      	mov	ip, r3
 801fd40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fd44:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd46:	f1b8 0f00 	cmp.w	r8, #0
 801fd4a:	f000 8082 	beq.w	801fe52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801fd4e:	45c4      	cmp	ip, r8
 801fd50:	d270      	bcs.n	801fe34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801fd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd54:	eba8 080c 	sub.w	r8, r8, ip
 801fd58:	4611      	mov	r1, r2
 801fd5a:	4283      	cmp	r3, r0
 801fd5c:	fa1f f888 	uxth.w	r8, r8
 801fd60:	d802      	bhi.n	801fd68 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801fd62:	e074      	b.n	801fe4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d15f      	bne.n	801fe28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801fd68:	9b02      	ldr	r3, [sp, #8]
 801fd6a:	9a01      	ldr	r2, [sp, #4]
 801fd6c:	785b      	ldrb	r3, [r3, #1]
 801fd6e:	f1c2 0207 	rsb	r2, r2, #7
 801fd72:	9d01      	ldr	r5, [sp, #4]
 801fd74:	4093      	lsls	r3, r2
 801fd76:	005b      	lsls	r3, r3, #1
 801fd78:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801fd7c:	9b02      	ldr	r3, [sp, #8]
 801fd7e:	781b      	ldrb	r3, [r3, #0]
 801fd80:	412b      	asrs	r3, r5
 801fd82:	b2db      	uxtb	r3, r3
 801fd84:	4313      	orrs	r3, r2
 801fd86:	462a      	mov	r2, r5
 801fd88:	3201      	adds	r2, #1
 801fd8a:	b29e      	uxth	r6, r3
 801fd8c:	b2d2      	uxtb	r2, r2
 801fd8e:	2a08      	cmp	r2, #8
 801fd90:	9201      	str	r2, [sp, #4]
 801fd92:	9a02      	ldr	r2, [sp, #8]
 801fd94:	bf09      	itett	eq
 801fd96:	3202      	addeq	r2, #2
 801fd98:	3201      	addne	r2, #1
 801fd9a:	9202      	streq	r2, [sp, #8]
 801fd9c:	2200      	moveq	r2, #0
 801fd9e:	bf14      	ite	ne
 801fda0:	9202      	strne	r2, [sp, #8]
 801fda2:	9201      	streq	r2, [sp, #4]
 801fda4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fda6:	42b2      	cmp	r2, r6
 801fda8:	d309      	bcc.n	801fdbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801fdaa:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801fdae:	2301      	movs	r3, #1
 801fdb0:	9a04      	ldr	r2, [sp, #16]
 801fdb2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801fdb6:	d30e      	bcc.n	801fdd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801fdb8:	9300      	str	r3, [sp, #0]
 801fdba:	2500      	movs	r5, #0
 801fdbc:	e035      	b.n	801fe2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801fdbe:	9b04      	ldr	r3, [sp, #16]
 801fdc0:	429e      	cmp	r6, r3
 801fdc2:	d318      	bcc.n	801fdf6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801fdc4:	9b00      	ldr	r3, [sp, #0]
 801fdc6:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801fdca:	18e3      	adds	r3, r4, r3
 801fdcc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801fdd0:	9b00      	ldr	r3, [sp, #0]
 801fdd2:	3301      	adds	r3, #1
 801fdd4:	b29b      	uxth	r3, r3
 801fdd6:	9a04      	ldr	r2, [sp, #16]
 801fdd8:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801fddc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fde0:	9f00      	ldr	r7, [sp, #0]
 801fde2:	7115      	strb	r5, [r2, #4]
 801fde4:	3701      	adds	r7, #1
 801fde6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fde8:	7157      	strb	r7, [r2, #5]
 801fdea:	80d5      	strh	r5, [r2, #6]
 801fdec:	9a04      	ldr	r2, [sp, #16]
 801fdee:	3201      	adds	r2, #1
 801fdf0:	b292      	uxth	r2, r2
 801fdf2:	9204      	str	r2, [sp, #16]
 801fdf4:	e7e0      	b.n	801fdb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801fdf6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fdfa:	4632      	mov	r2, r6
 801fdfc:	795b      	ldrb	r3, [r3, #5]
 801fdfe:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801fe02:	4425      	add	r5, r4
 801fe04:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801fe06:	eb07 0c05 	add.w	ip, r7, r5
 801fe0a:	f1bc 0f00 	cmp.w	ip, #0
 801fe0e:	dd07      	ble.n	801fe20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801fe10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fe14:	f892 c004 	ldrb.w	ip, [r2, #4]
 801fe18:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801fe1c:	88d2      	ldrh	r2, [r2, #6]
 801fe1e:	e7f1      	b.n	801fe04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801fe20:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801fe24:	b29b      	uxth	r3, r3
 801fe26:	e7c3      	b.n	801fdb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801fe28:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fe2a:	460a      	mov	r2, r1
 801fe2c:	960a      	str	r6, [sp, #40]	@ 0x28
 801fe2e:	46a9      	mov	r9, r5
 801fe30:	469c      	mov	ip, r3
 801fe32:	e788      	b.n	801fd46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801fe34:	ebac 0308 	sub.w	r3, ip, r8
 801fe38:	eb09 0508 	add.w	r5, r9, r8
 801fe3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801fe40:	b29b      	uxth	r3, r3
 801fe42:	b2ad      	uxth	r5, r5
 801fe44:	f04f 0800 	mov.w	r8, #0
 801fe48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe4a:	4282      	cmp	r2, r0
 801fe4c:	d88a      	bhi.n	801fd64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801fe4e:	460a      	mov	r2, r1
 801fe50:	e745      	b.n	801fcde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801fe52:	4594      	cmp	ip, r2
 801fe54:	9d08      	ldr	r5, [sp, #32]
 801fe56:	4686      	mov	lr, r0
 801fe58:	bf27      	ittee	cs
 801fe5a:	ebac 0302 	subcs.w	r3, ip, r2
 801fe5e:	4616      	movcs	r6, r2
 801fe60:	eba2 010c 	subcc.w	r1, r2, ip
 801fe64:	4666      	movcc	r6, ip
 801fe66:	bf27      	ittee	cs
 801fe68:	b29b      	uxthcs	r3, r3
 801fe6a:	4641      	movcs	r1, r8
 801fe6c:	b289      	uxthcc	r1, r1
 801fe6e:	4643      	movcc	r3, r8
 801fe70:	2dff      	cmp	r5, #255	@ 0xff
 801fe72:	eb09 0506 	add.w	r5, r9, r6
 801fe76:	b2ad      	uxth	r5, r5
 801fe78:	d130      	bne.n	801fedc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801fe7a:	45a9      	cmp	r9, r5
 801fe7c:	f10e 0e03 	add.w	lr, lr, #3
 801fe80:	d17a      	bne.n	801ff78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801fe82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fe86:	4594      	cmp	ip, r2
 801fe88:	4430      	add	r0, r6
 801fe8a:	d3db      	bcc.n	801fe44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801fe8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fe8e:	9903      	ldr	r1, [sp, #12]
 801fe90:	8812      	ldrh	r2, [r2, #0]
 801fe92:	1a52      	subs	r2, r2, r1
 801fe94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fe96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe9a:	4410      	add	r0, r2
 801fe9c:	9a07      	ldr	r2, [sp, #28]
 801fe9e:	3201      	adds	r2, #1
 801fea0:	428a      	cmp	r2, r1
 801fea2:	9207      	str	r2, [sp, #28]
 801fea4:	f040 8081 	bne.w	801ffaa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801fea8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801feac:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801feb0:	9b03      	ldr	r3, [sp, #12]
 801feb2:	eba8 080c 	sub.w	r8, r8, ip
 801feb6:	fa1f f888 	uxth.w	r8, r8
 801feba:	f1b8 0f00 	cmp.w	r8, #0
 801febe:	bf08      	it	eq
 801fec0:	461a      	moveq	r2, r3
 801fec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fec4:	bf18      	it	ne
 801fec6:	2200      	movne	r2, #0
 801fec8:	3301      	adds	r3, #1
 801feca:	b292      	uxth	r2, r2
 801fecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fece:	e6fd      	b.n	801fccc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801fed0:	24028520 	.word	0x24028520
 801fed4:	2402851a 	.word	0x2402851a
 801fed8:	fffff7fb 	.word	0xfffff7fb
 801fedc:	45a9      	cmp	r9, r5
 801fede:	f10e 0e03 	add.w	lr, lr, #3
 801fee2:	d0ce      	beq.n	801fe82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801fee4:	f109 0701 	add.w	r7, r9, #1
 801fee8:	44a1      	add	r9, r4
 801feea:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801feee:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801fef2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801fef4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fef8:	9f05      	ldr	r7, [sp, #20]
 801fefa:	eb07 0908 	add.w	r9, r7, r8
 801fefe:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ff02:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ff04:	fb1b fb07 	smulbb	fp, fp, r7
 801ff08:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ff0a:	fb08 b807 	mla	r8, r8, r7, fp
 801ff0e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ff10:	fa1f f888 	uxth.w	r8, r8
 801ff14:	f108 0b01 	add.w	fp, r8, #1
 801ff18:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff1c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801ff20:	fb1b fb07 	smulbb	fp, fp, r7
 801ff24:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff28:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ff2a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ff2e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ff32:	fb08 b807 	mla	r8, r8, r7, fp
 801ff36:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ff38:	fa1f f888 	uxth.w	r8, r8
 801ff3c:	f108 0b01 	add.w	fp, r8, #1
 801ff40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff44:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff48:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ff4c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ff50:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801ff54:	fb19 f907 	smulbb	r9, r9, r7
 801ff58:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ff5a:	fb08 9807 	mla	r8, r8, r7, r9
 801ff5e:	fa1f f888 	uxth.w	r8, r8
 801ff62:	f108 0901 	add.w	r9, r8, #1
 801ff66:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801ff6a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801ff6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff72:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ff76:	e7b1      	b.n	801fedc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801ff78:	f109 0b01 	add.w	fp, r9, #1
 801ff7c:	44a1      	add	r9, r4
 801ff7e:	9f05      	ldr	r7, [sp, #20]
 801ff80:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801ff84:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ff88:	eb07 0908 	add.w	r9, r7, r8
 801ff8c:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ff90:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ff94:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ff98:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ff9c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ffa0:	fa1f f98b 	uxth.w	r9, fp
 801ffa4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ffa8:	e767      	b.n	801fe7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801ffaa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ffae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801ffb2:	eba8 0801 	sub.w	r8, r8, r1
 801ffb6:	fa1f f888 	uxth.w	r8, r8
 801ffba:	f1b8 0f00 	cmp.w	r8, #0
 801ffbe:	bf18      	it	ne
 801ffc0:	2100      	movne	r1, #0
 801ffc2:	e741      	b.n	801fe48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801ffc4:	4b03      	ldr	r3, [pc, #12]	@ (801ffd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801ffc6:	6818      	ldr	r0, [r3, #0]
 801ffc8:	6803      	ldr	r3, [r0, #0]
 801ffca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffcc:	4798      	blx	r3
 801ffce:	b01b      	add	sp, #108	@ 0x6c
 801ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffd4:	24028520 	.word	0x24028520

0801ffd8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffdc:	b09d      	sub	sp, #116	@ 0x74
 801ffde:	461d      	mov	r5, r3
 801ffe0:	4604      	mov	r4, r0
 801ffe2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ffe4:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801ffe8:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ffec:	920c      	str	r2, [sp, #48]	@ 0x30
 801ffee:	2a00      	cmp	r2, #0
 801fff0:	f000 81de 	beq.w	80203b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801fff4:	6828      	ldr	r0, [r5, #0]
 801fff6:	aa18      	add	r2, sp, #96	@ 0x60
 801fff8:	6869      	ldr	r1, [r5, #4]
 801fffa:	c203      	stmia	r2!, {r0, r1}
 801fffc:	6818      	ldr	r0, [r3, #0]
 801fffe:	aa1a      	add	r2, sp, #104	@ 0x68
 8020000:	6859      	ldr	r1, [r3, #4]
 8020002:	c203      	stmia	r2!, {r0, r1}
 8020004:	a818      	add	r0, sp, #96	@ 0x60
 8020006:	f7f9 fb45 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802000a:	4629      	mov	r1, r5
 802000c:	a81a      	add	r0, sp, #104	@ 0x68
 802000e:	f7f9 fb85 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020012:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020016:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 802001a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802001e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8020022:	bfdb      	ittet	le
 8020024:	b29a      	uxthle	r2, r3
 8020026:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802002a:	2201      	movgt	r2, #1
 802002c:	fb91 f2f2 	sdivle	r2, r1, r2
 8020030:	9201      	str	r2, [sp, #4]
 8020032:	9801      	ldr	r0, [sp, #4]
 8020034:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8020038:	9901      	ldr	r1, [sp, #4]
 802003a:	fb92 f0f0 	sdiv	r0, r2, r0
 802003e:	b280      	uxth	r0, r0
 8020040:	440f      	add	r7, r1
 8020042:	900d      	str	r0, [sp, #52]	@ 0x34
 8020044:	3f01      	subs	r7, #1
 8020046:	9801      	ldr	r0, [sp, #4]
 8020048:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802004a:	fb05 2510 	mls	r5, r5, r0, r2
 802004e:	fb97 f7f1 	sdiv	r7, r7, r1
 8020052:	fb15 f503 	smulbb	r5, r5, r3
 8020056:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802005a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802005e:	3701      	adds	r7, #1
 8020060:	440d      	add	r5, r1
 8020062:	4419      	add	r1, r3
 8020064:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8020068:	b2bf      	uxth	r7, r7
 802006a:	441a      	add	r2, r3
 802006c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8020070:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8020074:	00bf      	lsls	r7, r7, #2
 8020076:	9304      	str	r3, [sp, #16]
 8020078:	b2ad      	uxth	r5, r5
 802007a:	4bb0      	ldr	r3, [pc, #704]	@ (802033c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 802007c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8020080:	6818      	ldr	r0, [r3, #0]
 8020082:	6803      	ldr	r3, [r0, #0]
 8020084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020086:	4798      	blx	r3
 8020088:	4bad      	ldr	r3, [pc, #692]	@ (8020340 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 802008a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 802008e:	2d00      	cmp	r5, #0
 8020090:	881a      	ldrh	r2, [r3, #0]
 8020092:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8020096:	fb02 f606 	mul.w	r6, r2, r6
 802009a:	fb02 c101 	mla	r1, r2, r1, ip
 802009e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80200a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200a8:	4ba6      	ldr	r3, [pc, #664]	@ (8020344 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80200aa:	eb00 0801 	add.w	r8, r0, r1
 80200ae:	bf18      	it	ne
 80200b0:	2100      	movne	r1, #0
 80200b2:	eba3 0304 	sub.w	r3, r3, r4
 80200b6:	eb08 0206 	add.w	r2, r8, r6
 80200ba:	9317      	str	r3, [sp, #92]	@ 0x5c
 80200bc:	9208      	str	r2, [sp, #32]
 80200be:	f107 0204 	add.w	r2, r7, #4
 80200c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80200c4:	9a04      	ldr	r2, [sp, #16]
 80200c6:	bf08      	it	eq
 80200c8:	4611      	moveq	r1, r2
 80200ca:	2200      	movs	r2, #0
 80200cc:	b289      	uxth	r1, r1
 80200ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80200d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80200d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80200d4:	fa12 f383 	uxtah	r3, r2, r3
 80200d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80200da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80200de:	3304      	adds	r3, #4
 80200e0:	9306      	str	r3, [sp, #24]
 80200e2:	9b08      	ldr	r3, [sp, #32]
 80200e4:	4543      	cmp	r3, r8
 80200e6:	f240 815e 	bls.w	80203a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 80200ea:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80200ee:	f04f 0b01 	mov.w	fp, #1
 80200f2:	9a01      	ldr	r2, [sp, #4]
 80200f4:	9806      	ldr	r0, [sp, #24]
 80200f6:	465e      	mov	r6, fp
 80200f8:	f8cd b008 	str.w	fp, [sp, #8]
 80200fc:	7800      	ldrb	r0, [r0, #0]
 80200fe:	fbb5 f3f3 	udiv	r3, r5, r3
 8020102:	1ad3      	subs	r3, r2, r3
 8020104:	900e      	str	r0, [sp, #56]	@ 0x38
 8020106:	3001      	adds	r0, #1
 8020108:	b29b      	uxth	r3, r3
 802010a:	9005      	str	r0, [sp, #20]
 802010c:	9312      	str	r3, [sp, #72]	@ 0x48
 802010e:	9b06      	ldr	r3, [sp, #24]
 8020110:	785a      	ldrb	r2, [r3, #1]
 8020112:	789b      	ldrb	r3, [r3, #2]
 8020114:	021b      	lsls	r3, r3, #8
 8020116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802011a:	9a06      	ldr	r2, [sp, #24]
 802011c:	78d2      	ldrb	r2, [r2, #3]
 802011e:	4313      	orrs	r3, r2
 8020120:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020122:	441a      	add	r2, r3
 8020124:	1c50      	adds	r0, r2, #1
 8020126:	7852      	ldrb	r2, [r2, #1]
 8020128:	9003      	str	r0, [sp, #12]
 802012a:	0212      	lsls	r2, r2, #8
 802012c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802012e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020132:	5cc3      	ldrb	r3, [r0, r3]
 8020134:	431a      	orrs	r2, r3
 8020136:	b293      	uxth	r3, r2
 8020138:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802013c:	930a      	str	r3, [sp, #40]	@ 0x28
 802013e:	2300      	movs	r3, #0
 8020140:	461a      	mov	r2, r3
 8020142:	9307      	str	r3, [sp, #28]
 8020144:	2d00      	cmp	r5, #0
 8020146:	d07c      	beq.n	8020242 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020148:	42ae      	cmp	r6, r5
 802014a:	d26c      	bcs.n	8020226 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 802014c:	9b08      	ldr	r3, [sp, #32]
 802014e:	1bad      	subs	r5, r5, r6
 8020150:	4608      	mov	r0, r1
 8020152:	4543      	cmp	r3, r8
 8020154:	b2ad      	uxth	r5, r5
 8020156:	d802      	bhi.n	802015e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8020158:	e071      	b.n	802023e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 802015a:	2b00      	cmp	r3, #0
 802015c:	d15d      	bne.n	802021a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 802015e:	9b03      	ldr	r3, [sp, #12]
 8020160:	9a02      	ldr	r2, [sp, #8]
 8020162:	785b      	ldrb	r3, [r3, #1]
 8020164:	f1c2 0207 	rsb	r2, r2, #7
 8020168:	9902      	ldr	r1, [sp, #8]
 802016a:	4093      	lsls	r3, r2
 802016c:	005b      	lsls	r3, r3, #1
 802016e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020172:	9b03      	ldr	r3, [sp, #12]
 8020174:	781b      	ldrb	r3, [r3, #0]
 8020176:	410b      	asrs	r3, r1
 8020178:	3101      	adds	r1, #1
 802017a:	b2c9      	uxtb	r1, r1
 802017c:	b2db      	uxtb	r3, r3
 802017e:	2908      	cmp	r1, #8
 8020180:	9102      	str	r1, [sp, #8]
 8020182:	9903      	ldr	r1, [sp, #12]
 8020184:	ea43 0302 	orr.w	r3, r3, r2
 8020188:	bf0c      	ite	eq
 802018a:	3102      	addeq	r1, #2
 802018c:	3101      	addne	r1, #1
 802018e:	b29a      	uxth	r2, r3
 8020190:	bf05      	ittet	eq
 8020192:	9103      	streq	r1, [sp, #12]
 8020194:	2100      	moveq	r1, #0
 8020196:	9103      	strne	r1, [sp, #12]
 8020198:	9102      	streq	r1, [sp, #8]
 802019a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802019c:	4291      	cmp	r1, r2
 802019e:	d30a      	bcc.n	80201b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80201a0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80201a4:	2301      	movs	r3, #1
 80201a6:	9905      	ldr	r1, [sp, #20]
 80201a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80201ac:	d30f      	bcc.n	80201ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80201ae:	469b      	mov	fp, r3
 80201b0:	f04f 0c00 	mov.w	ip, #0
 80201b4:	e032      	b.n	802021c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80201b6:	9b05      	ldr	r3, [sp, #20]
 80201b8:	429a      	cmp	r2, r3
 80201ba:	d318      	bcc.n	80201ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80201bc:	eb04 030b 	add.w	r3, r4, fp
 80201c0:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80201c4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80201c8:	f10b 0301 	add.w	r3, fp, #1
 80201cc:	b29b      	uxth	r3, r3
 80201ce:	9905      	ldr	r1, [sp, #20]
 80201d0:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80201d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80201d8:	710e      	strb	r6, [r1, #4]
 80201da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80201dc:	80ce      	strh	r6, [r1, #6]
 80201de:	f10b 0601 	add.w	r6, fp, #1
 80201e2:	714e      	strb	r6, [r1, #5]
 80201e4:	9905      	ldr	r1, [sp, #20]
 80201e6:	3101      	adds	r1, #1
 80201e8:	b289      	uxth	r1, r1
 80201ea:	9105      	str	r1, [sp, #20]
 80201ec:	e7df      	b.n	80201ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80201ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80201f2:	4611      	mov	r1, r2
 80201f4:	795b      	ldrb	r3, [r3, #5]
 80201f6:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80201fa:	4426      	add	r6, r4
 80201fc:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80201fe:	4437      	add	r7, r6
 8020200:	2f00      	cmp	r7, #0
 8020202:	dd06      	ble.n	8020212 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020204:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020208:	790f      	ldrb	r7, [r1, #4]
 802020a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802020e:	88c9      	ldrh	r1, [r1, #6]
 8020210:	e7f4      	b.n	80201fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8020212:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020216:	b29b      	uxth	r3, r3
 8020218:	e7c5      	b.n	80201a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 802021a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802021c:	920a      	str	r2, [sp, #40]	@ 0x28
 802021e:	4601      	mov	r1, r0
 8020220:	4662      	mov	r2, ip
 8020222:	461e      	mov	r6, r3
 8020224:	e78e      	b.n	8020144 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8020226:	1b73      	subs	r3, r6, r5
 8020228:	eb02 0c05 	add.w	ip, r2, r5
 802022c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8020230:	b29b      	uxth	r3, r3
 8020232:	fa1f fc8c 	uxth.w	ip, ip
 8020236:	2500      	movs	r5, #0
 8020238:	9a08      	ldr	r2, [sp, #32]
 802023a:	4542      	cmp	r2, r8
 802023c:	d88d      	bhi.n	802015a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 802023e:	4601      	mov	r1, r0
 8020240:	e74f      	b.n	80200e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8020242:	428e      	cmp	r6, r1
 8020244:	bf2b      	itete	cs
 8020246:	468e      	movcs	lr, r1
 8020248:	46b6      	movcc	lr, r6
 802024a:	1a73      	subcs	r3, r6, r1
 802024c:	1b88      	subcc	r0, r1, r6
 802024e:	eb02 0c0e 	add.w	ip, r2, lr
 8020252:	bf2b      	itete	cs
 8020254:	4628      	movcs	r0, r5
 8020256:	462b      	movcc	r3, r5
 8020258:	b29b      	uxthcs	r3, r3
 802025a:	b280      	uxthcc	r0, r0
 802025c:	f108 0503 	add.w	r5, r8, #3
 8020260:	fa1f fc8c 	uxth.w	ip, ip
 8020264:	4562      	cmp	r2, ip
 8020266:	d06f      	beq.n	8020348 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8020268:	1c57      	adds	r7, r2, #1
 802026a:	4422      	add	r2, r4
 802026c:	b2bf      	uxth	r7, r7
 802026e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8020272:	9713      	str	r7, [sp, #76]	@ 0x4c
 8020274:	2704      	movs	r7, #4
 8020276:	46b9      	mov	r9, r7
 8020278:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802027a:	fb19 7202 	smlabb	r2, r9, r2, r7
 802027e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020280:	58bf      	ldr	r7, [r7, r2]
 8020282:	0e3a      	lsrs	r2, r7, #24
 8020284:	9209      	str	r2, [sp, #36]	@ 0x24
 8020286:	d016      	beq.n	80202b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8020288:	f3c7 2907 	ubfx	r9, r7, #8, #8
 802028c:	fa5f fa87 	uxtb.w	sl, r7
 8020290:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020294:	fa5f f289 	uxtb.w	r2, r9
 8020298:	9214      	str	r2, [sp, #80]	@ 0x50
 802029a:	b2fa      	uxtb	r2, r7
 802029c:	9215      	str	r2, [sp, #84]	@ 0x54
 802029e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80202a0:	2aff      	cmp	r2, #255	@ 0xff
 80202a2:	d10b      	bne.n	80202bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80202a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80202a6:	2aff      	cmp	r2, #255	@ 0xff
 80202a8:	d108      	bne.n	80202bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80202aa:	f805 ac03 	strb.w	sl, [r5, #-3]
 80202ae:	f805 9c02 	strb.w	r9, [r5, #-2]
 80202b2:	f805 7c01 	strb.w	r7, [r5, #-1]
 80202b6:	3503      	adds	r5, #3
 80202b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80202ba:	e7d3      	b.n	8020264 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80202bc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80202be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80202c0:	437a      	muls	r2, r7
 80202c2:	1c57      	adds	r7, r2, #1
 80202c4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80202c8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80202cc:	1212      	asrs	r2, r2, #8
 80202ce:	fa1f f982 	uxth.w	r9, r2
 80202d2:	43d2      	mvns	r2, r2
 80202d4:	fb1a fa09 	smulbb	sl, sl, r9
 80202d8:	b2d2      	uxtb	r2, r2
 80202da:	fb07 a702 	mla	r7, r7, r2, sl
 80202de:	9209      	str	r2, [sp, #36]	@ 0x24
 80202e0:	b2bf      	uxth	r7, r7
 80202e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80202e4:	f107 0a01 	add.w	sl, r7, #1
 80202e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80202ec:	fb12 fa09 	smulbb	sl, r2, r9
 80202f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80202f2:	123f      	asrs	r7, r7, #8
 80202f4:	f805 7c03 	strb.w	r7, [r5, #-3]
 80202f8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 80202fc:	fb07 aa02 	mla	sl, r7, r2, sl
 8020300:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020302:	fb12 f909 	smulbb	r9, r2, r9
 8020306:	fa1f fa8a 	uxth.w	sl, sl
 802030a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802030c:	f10a 0701 	add.w	r7, sl, #1
 8020310:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020314:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8020318:	fb07 9902 	mla	r9, r7, r2, r9
 802031c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020320:	fa1f f989 	uxth.w	r9, r9
 8020324:	f805 ac02 	strb.w	sl, [r5, #-2]
 8020328:	f109 0201 	add.w	r2, r9, #1
 802032c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020330:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020334:	f805 9c01 	strb.w	r9, [r5, #-1]
 8020338:	e7bd      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 802033a:	bf00      	nop
 802033c:	24028520 	.word	0x24028520
 8020340:	2402851a 	.word	0x2402851a
 8020344:	fffff7fb 	.word	0xfffff7fb
 8020348:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802034c:	428e      	cmp	r6, r1
 802034e:	44f0      	add	r8, lr
 8020350:	f4ff af71 	bcc.w	8020236 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8020354:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020356:	9904      	ldr	r1, [sp, #16]
 8020358:	8812      	ldrh	r2, [r2, #0]
 802035a:	1a52      	subs	r2, r2, r1
 802035c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802035e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020362:	4490      	add	r8, r2
 8020364:	9a07      	ldr	r2, [sp, #28]
 8020366:	3201      	adds	r2, #1
 8020368:	428a      	cmp	r2, r1
 802036a:	9207      	str	r2, [sp, #28]
 802036c:	d111      	bne.n	8020392 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 802036e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8020372:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8020376:	9b04      	ldr	r3, [sp, #16]
 8020378:	eba5 050c 	sub.w	r5, r5, ip
 802037c:	b2ad      	uxth	r5, r5
 802037e:	2d00      	cmp	r5, #0
 8020380:	bf08      	it	eq
 8020382:	4619      	moveq	r1, r3
 8020384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020386:	bf18      	it	ne
 8020388:	2100      	movne	r1, #0
 802038a:	3301      	adds	r3, #1
 802038c:	b289      	uxth	r1, r1
 802038e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020390:	e69e      	b.n	80200d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8020392:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8020396:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 802039a:	1a2d      	subs	r5, r5, r0
 802039c:	b2ad      	uxth	r5, r5
 802039e:	2d00      	cmp	r5, #0
 80203a0:	bf18      	it	ne
 80203a2:	2000      	movne	r0, #0
 80203a4:	e748      	b.n	8020238 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80203a6:	4b04      	ldr	r3, [pc, #16]	@ (80203b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80203a8:	6818      	ldr	r0, [r3, #0]
 80203aa:	6803      	ldr	r3, [r0, #0]
 80203ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80203ae:	4798      	blx	r3
 80203b0:	b01d      	add	sp, #116	@ 0x74
 80203b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203b6:	bf00      	nop
 80203b8:	24028520 	.word	0x24028520

080203bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 80203bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203c0:	b08f      	sub	sp, #60	@ 0x3c
 80203c2:	4616      	mov	r6, r2
 80203c4:	4681      	mov	r9, r0
 80203c6:	460d      	mov	r5, r1
 80203c8:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80203cc:	9205      	str	r2, [sp, #20]
 80203ce:	2a00      	cmp	r2, #0
 80203d0:	f000 82a8 	beq.w	8020924 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 80203d4:	6830      	ldr	r0, [r6, #0]
 80203d6:	ac0a      	add	r4, sp, #40	@ 0x28
 80203d8:	6871      	ldr	r1, [r6, #4]
 80203da:	c403      	stmia	r4!, {r0, r1}
 80203dc:	6818      	ldr	r0, [r3, #0]
 80203de:	ac0c      	add	r4, sp, #48	@ 0x30
 80203e0:	6859      	ldr	r1, [r3, #4]
 80203e2:	c403      	stmia	r4!, {r0, r1}
 80203e4:	a80a      	add	r0, sp, #40	@ 0x28
 80203e6:	f7f9 f955 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203ea:	4631      	mov	r1, r6
 80203ec:	a80c      	add	r0, sp, #48	@ 0x30
 80203ee:	f7f9 f995 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80203f6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80203fa:	bfdb      	ittet	le
 80203fc:	b293      	uxthle	r3, r2
 80203fe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020402:	2301      	movgt	r3, #1
 8020404:	fb91 f3f3 	sdivle	r3, r1, r3
 8020408:	9300      	str	r3, [sp, #0]
 802040a:	f105 0308 	add.w	r3, r5, #8
 802040e:	9900      	ldr	r1, [sp, #0]
 8020410:	9306      	str	r3, [sp, #24]
 8020412:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8020416:	440b      	add	r3, r1
 8020418:	3b01      	subs	r3, #1
 802041a:	fb93 f3f1 	sdiv	r3, r3, r1
 802041e:	3b01      	subs	r3, #1
 8020420:	9906      	ldr	r1, [sp, #24]
 8020422:	b29b      	uxth	r3, r3
 8020424:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020428:	9900      	ldr	r1, [sp, #0]
 802042a:	9307      	str	r3, [sp, #28]
 802042c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020430:	fb93 f0f1 	sdiv	r0, r3, r1
 8020434:	b284      	uxth	r4, r0
 8020436:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802043a:	b280      	uxth	r0, r0
 802043c:	9402      	str	r4, [sp, #8]
 802043e:	9d02      	ldr	r5, [sp, #8]
 8020440:	9c00      	ldr	r4, [sp, #0]
 8020442:	fb05 3514 	mls	r5, r5, r4, r3
 8020446:	fb15 f502 	smulbb	r5, r5, r2
 802044a:	440d      	add	r5, r1
 802044c:	b2ad      	uxth	r5, r5
 802044e:	2800      	cmp	r0, #0
 8020450:	d071      	beq.n	8020536 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8020452:	1e42      	subs	r2, r0, #1
 8020454:	9806      	ldr	r0, [sp, #24]
 8020456:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 802045a:	9a07      	ldr	r2, [sp, #28]
 802045c:	fa98 f888 	rev.w	r8, r8
 8020460:	4490      	add	r8, r2
 8020462:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8020466:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 802046a:	4411      	add	r1, r2
 802046c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020470:	f8df b348 	ldr.w	fp, [pc, #840]	@ 80207bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8020474:	4413      	add	r3, r2
 8020476:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 802047a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 802047e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020482:	9301      	str	r3, [sp, #4]
 8020484:	4bcb      	ldr	r3, [pc, #812]	@ (80207b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8020486:	6818      	ldr	r0, [r3, #0]
 8020488:	6803      	ldr	r3, [r0, #0]
 802048a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802048c:	4798      	blx	r3
 802048e:	4bca      	ldr	r3, [pc, #808]	@ (80207b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8020490:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020494:	881b      	ldrh	r3, [r3, #0]
 8020496:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 802049a:	fb03 2707 	mla	r7, r3, r7, r2
 802049e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80204a2:	4363      	muls	r3, r4
 80204a4:	2400      	movs	r4, #0
 80204a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80204aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204ae:	4621      	mov	r1, r4
 80204b0:	4407      	add	r7, r0
 80204b2:	18fb      	adds	r3, r7, r3
 80204b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80204b6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80204ba:	fb95 f3f3 	sdiv	r3, r5, r3
 80204be:	9304      	str	r3, [sp, #16]
 80204c0:	f109 0304 	add.w	r3, r9, #4
 80204c4:	4618      	mov	r0, r3
 80204c6:	9308      	str	r3, [sp, #32]
 80204c8:	f008 fc2a 	bl	8028d20 <memset>
 80204cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204ce:	42bb      	cmp	r3, r7
 80204d0:	f240 8223 	bls.w	802091a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 80204d4:	2003      	movs	r0, #3
 80204d6:	f04f 0c07 	mov.w	ip, #7
 80204da:	f04f 0e0b 	mov.w	lr, #11
 80204de:	2d00      	cmp	r5, #0
 80204e0:	f000 813c 	beq.w	802075c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 80204e4:	f898 3000 	ldrb.w	r3, [r8]
 80204e8:	b2db      	uxtb	r3, r3
 80204ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80204ec:	d126      	bne.n	802053c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 80204ee:	f898 1001 	ldrb.w	r1, [r8, #1]
 80204f2:	f108 0604 	add.w	r6, r8, #4
 80204f6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80204fa:	3d01      	subs	r5, #1
 80204fc:	b2c9      	uxtb	r1, r1
 80204fe:	f898 8003 	ldrb.w	r8, [r8, #3]
 8020502:	b2d2      	uxtb	r2, r2
 8020504:	f361 0407 	bfi	r4, r1, #0, #8
 8020508:	fa5f f888 	uxtb.w	r8, r8
 802050c:	b2ad      	uxth	r5, r5
 802050e:	f362 240f 	bfi	r4, r2, #8, #8
 8020512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020516:	fb10 2208 	smlabb	r2, r0, r8, r2
 802051a:	f368 4417 	bfi	r4, r8, #16, #8
 802051e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8020522:	0e23      	lsrs	r3, r4, #24
 8020524:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8020528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802052c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8020530:	605c      	str	r4, [r3, #4]
 8020532:	46b0      	mov	r8, r6
 8020534:	e7d3      	b.n	80204de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 8020536:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802053a:	e792      	b.n	8020462 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 802053c:	2bff      	cmp	r3, #255	@ 0xff
 802053e:	d127      	bne.n	8020590 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8020540:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020544:	f108 0605 	add.w	r6, r8, #5
 8020548:	f898 3002 	ldrb.w	r3, [r8, #2]
 802054c:	3d01      	subs	r5, #1
 802054e:	b2d2      	uxtb	r2, r2
 8020550:	f898 1003 	ldrb.w	r1, [r8, #3]
 8020554:	b2db      	uxtb	r3, r3
 8020556:	f898 8004 	ldrb.w	r8, [r8, #4]
 802055a:	f362 0407 	bfi	r4, r2, #0, #8
 802055e:	b2c9      	uxtb	r1, r1
 8020560:	fa5f f888 	uxtb.w	r8, r8
 8020564:	f363 240f 	bfi	r4, r3, #8, #8
 8020568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802056c:	b2ad      	uxth	r5, r5
 802056e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8020572:	f361 4417 	bfi	r4, r1, #16, #8
 8020576:	fb1c 3302 	smlabb	r3, ip, r2, r3
 802057a:	f368 641f 	bfi	r4, r8, #24, #8
 802057e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8020582:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8020586:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 802058a:	f8c8 4004 	str.w	r4, [r8, #4]
 802058e:	e7d0      	b.n	8020532 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8020590:	119a      	asrs	r2, r3, #6
 8020592:	f108 0601 	add.w	r6, r8, #1
 8020596:	d107      	bne.n	80205a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8020598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802059c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80205a0:	685c      	ldr	r4, [r3, #4]
 80205a2:	3d01      	subs	r5, #1
 80205a4:	b2ad      	uxth	r5, r5
 80205a6:	e7c4      	b.n	8020532 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80205a8:	2a01      	cmp	r2, #1
 80205aa:	d129      	bne.n	8020600 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 80205ac:	f003 0203 	and.w	r2, r3, #3
 80205b0:	1ea1      	subs	r1, r4, #2
 80205b2:	4411      	add	r1, r2
 80205b4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80205b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80205bc:	b2c9      	uxtb	r1, r1
 80205be:	3a02      	subs	r2, #2
 80205c0:	3b02      	subs	r3, #2
 80205c2:	f361 0407 	bfi	r4, r1, #0, #8
 80205c6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80205ca:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80205ce:	f362 240f 	bfi	r4, r2, #8, #8
 80205d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80205d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80205da:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80205de:	fb10 2203 	smlabb	r2, r0, r3, r2
 80205e2:	f363 4417 	bfi	r4, r3, #16, #8
 80205e6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80205ea:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80205ee:	fb1e 2808 	smlabb	r8, lr, r8, r2
 80205f2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80205f6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80205fa:	f8c8 4004 	str.w	r4, [r8, #4]
 80205fe:	e7d0      	b.n	80205a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8020600:	2a02      	cmp	r2, #2
 8020602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020606:	d12e      	bne.n	8020666 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8020608:	f898 2001 	ldrb.w	r2, [r8, #1]
 802060c:	f1a3 0a20 	sub.w	sl, r3, #32
 8020610:	f108 0602 	add.w	r6, r8, #2
 8020614:	b2d2      	uxtb	r2, r2
 8020616:	f002 010f 	and.w	r1, r2, #15
 802061a:	1112      	asrs	r2, r2, #4
 802061c:	3908      	subs	r1, #8
 802061e:	3a08      	subs	r2, #8
 8020620:	4451      	add	r1, sl
 8020622:	4492      	add	sl, r2
 8020624:	4421      	add	r1, r4
 8020626:	b2c9      	uxtb	r1, r1
 8020628:	f361 0407 	bfi	r4, r1, #0, #8
 802062c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8020630:	f1a8 0820 	sub.w	r8, r8, #32
 8020634:	4443      	add	r3, r8
 8020636:	b2db      	uxtb	r3, r3
 8020638:	f363 240f 	bfi	r4, r3, #8, #8
 802063c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020640:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8020644:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8020648:	fb10 330a 	smlabb	r3, r0, sl, r3
 802064c:	f36a 4417 	bfi	r4, sl, #16, #8
 8020650:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8020654:	0e22      	lsrs	r2, r4, #24
 8020656:	fb1e 3202 	smlabb	r2, lr, r2, r3
 802065a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802065e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8020662:	6054      	str	r4, [r2, #4]
 8020664:	e79d      	b.n	80205a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8020666:	3301      	adds	r3, #1
 8020668:	42ab      	cmp	r3, r5
 802066a:	dd59      	ble.n	8020720 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 802066c:	1b5d      	subs	r5, r3, r5
 802066e:	2d00      	cmp	r5, #0
 8020670:	dc58      	bgt.n	8020724 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8020672:	f8dd a004 	ldr.w	sl, [sp, #4]
 8020676:	f04f 0800 	mov.w	r8, #0
 802067a:	f1ba 0f00 	cmp.w	sl, #0
 802067e:	f340 8108 	ble.w	8020892 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8020682:	1c73      	adds	r3, r6, #1
 8020684:	9303      	str	r3, [sp, #12]
 8020686:	7833      	ldrb	r3, [r6, #0]
 8020688:	b2db      	uxtb	r3, r3
 802068a:	2bfe      	cmp	r3, #254	@ 0xfe
 802068c:	d16a      	bne.n	8020764 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 802068e:	7871      	ldrb	r1, [r6, #1]
 8020690:	1d33      	adds	r3, r6, #4
 8020692:	78b2      	ldrb	r2, [r6, #2]
 8020694:	b2c9      	uxtb	r1, r1
 8020696:	78f0      	ldrb	r0, [r6, #3]
 8020698:	b2d2      	uxtb	r2, r2
 802069a:	9303      	str	r3, [sp, #12]
 802069c:	f361 0407 	bfi	r4, r1, #0, #8
 80206a0:	b2c0      	uxtb	r0, r0
 80206a2:	2303      	movs	r3, #3
 80206a4:	f362 240f 	bfi	r4, r2, #8, #8
 80206a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80206ac:	fb13 2200 	smlabb	r2, r3, r0, r2
 80206b0:	f360 4417 	bfi	r4, r0, #16, #8
 80206b4:	2307      	movs	r3, #7
 80206b6:	0e25      	lsrs	r5, r4, #24
 80206b8:	fb13 2101 	smlabb	r1, r3, r1, r2
 80206bc:	230b      	movs	r3, #11
 80206be:	fb13 1305 	smlabb	r3, r3, r5, r1
 80206c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80206c6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80206ca:	605c      	str	r4, [r3, #4]
 80206cc:	2501      	movs	r5, #1
 80206ce:	462e      	mov	r6, r5
 80206d0:	eb06 0308 	add.w	r3, r6, r8
 80206d4:	ebaa 0a06 	sub.w	sl, sl, r6
 80206d8:	1bad      	subs	r5, r5, r6
 80206da:	2b40      	cmp	r3, #64	@ 0x40
 80206dc:	dd16      	ble.n	802070c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 80206de:	4658      	mov	r0, fp
 80206e0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80206e4:	f7e2 fbda 	bl	8002e9c <_ZN8touchgfx5paint9flushLineEPmi>
 80206e8:	4659      	mov	r1, fp
 80206ea:	9b05      	ldr	r3, [sp, #20]
 80206ec:	4642      	mov	r2, r8
 80206ee:	4638      	mov	r0, r7
 80206f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80206f4:	f7e2 fc3a 	bl	8002f6c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80206f8:	4b30      	ldr	r3, [pc, #192]	@ (80207bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 80206fa:	4447      	add	r7, r8
 80206fc:	f04f 0800 	mov.w	r8, #0
 8020700:	459b      	cmp	fp, r3
 8020702:	bf0c      	ite	eq
 8020704:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 80207c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8020708:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 80207bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 802070c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8020710:	4633      	mov	r3, r6
 8020712:	3b01      	subs	r3, #1
 8020714:	f842 4b04 	str.w	r4, [r2], #4
 8020718:	d1fb      	bne.n	8020712 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 802071a:	44b0      	add	r8, r6
 802071c:	9e03      	ldr	r6, [sp, #12]
 802071e:	e7ac      	b.n	802067a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8020720:	1aed      	subs	r5, r5, r3
 8020722:	e73f      	b.n	80205a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8020724:	9b01      	ldr	r3, [sp, #4]
 8020726:	42ab      	cmp	r3, r5
 8020728:	bfa8      	it	ge
 802072a:	462b      	movge	r3, r5
 802072c:	4698      	mov	r8, r3
 802072e:	9b01      	ldr	r3, [sp, #4]
 8020730:	eba3 0a08 	sub.w	sl, r3, r8
 8020734:	0e23      	lsrs	r3, r4, #24
 8020736:	eba5 0508 	sub.w	r5, r5, r8
 802073a:	d00b      	beq.n	8020754 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 802073c:	9a05      	ldr	r2, [sp, #20]
 802073e:	4641      	mov	r1, r8
 8020740:	4638      	mov	r0, r7
 8020742:	4353      	muls	r3, r2
 8020744:	1c5a      	adds	r2, r3, #1
 8020746:	eb02 2323 	add.w	r3, r2, r3, asr #8
 802074a:	4622      	mov	r2, r4
 802074c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020750:	f7e2 fbbe 	bl	8002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8020754:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020758:	4447      	add	r7, r8
 802075a:	e78c      	b.n	8020676 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 802075c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8020760:	4646      	mov	r6, r8
 8020762:	e788      	b.n	8020676 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8020764:	2bff      	cmp	r3, #255	@ 0xff
 8020766:	d11d      	bne.n	80207a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8020768:	7870      	ldrb	r0, [r6, #1]
 802076a:	1d73      	adds	r3, r6, #5
 802076c:	78b2      	ldrb	r2, [r6, #2]
 802076e:	b2c0      	uxtb	r0, r0
 8020770:	78f5      	ldrb	r5, [r6, #3]
 8020772:	b2d2      	uxtb	r2, r2
 8020774:	9303      	str	r3, [sp, #12]
 8020776:	f360 0407 	bfi	r4, r0, #0, #8
 802077a:	7933      	ldrb	r3, [r6, #4]
 802077c:	b2ed      	uxtb	r5, r5
 802077e:	b2d9      	uxtb	r1, r3
 8020780:	f362 240f 	bfi	r4, r2, #8, #8
 8020784:	2303      	movs	r3, #3
 8020786:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802078a:	f365 4417 	bfi	r4, r5, #16, #8
 802078e:	fb13 2205 	smlabb	r2, r3, r5, r2
 8020792:	2307      	movs	r3, #7
 8020794:	f361 641f 	bfi	r4, r1, #24, #8
 8020798:	fb13 2000 	smlabb	r0, r3, r0, r2
 802079c:	230b      	movs	r3, #11
 802079e:	fb13 0301 	smlabb	r3, r3, r1, r0
 80207a2:	e78e      	b.n	80206c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80207a4:	119d      	asrs	r5, r3, #6
 80207a6:	d10d      	bne.n	80207c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 80207a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80207ac:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80207b0:	685c      	ldr	r4, [r3, #4]
 80207b2:	e78b      	b.n	80206cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80207b4:	24028520 	.word	0x24028520
 80207b8:	2402851a 	.word	0x2402851a
 80207bc:	24000140 	.word	0x24000140
 80207c0:	24000240 	.word	0x24000240
 80207c4:	2d01      	cmp	r5, #1
 80207c6:	d12a      	bne.n	802081e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 80207c8:	f003 0203 	and.w	r2, r3, #3
 80207cc:	1ea1      	subs	r1, r4, #2
 80207ce:	2603      	movs	r6, #3
 80207d0:	4411      	add	r1, r2
 80207d2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80207d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80207da:	b2c9      	uxtb	r1, r1
 80207dc:	3a02      	subs	r2, #2
 80207de:	3b02      	subs	r3, #2
 80207e0:	f361 0407 	bfi	r4, r1, #0, #8
 80207e4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80207e8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80207ec:	f362 240f 	bfi	r4, r2, #8, #8
 80207f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80207f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80207f8:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80207fc:	fb16 2203 	smlabb	r2, r6, r3, r2
 8020800:	f363 4417 	bfi	r4, r3, #16, #8
 8020804:	2307      	movs	r3, #7
 8020806:	0e20      	lsrs	r0, r4, #24
 8020808:	fb13 2101 	smlabb	r1, r3, r1, r2
 802080c:	230b      	movs	r3, #11
 802080e:	fb13 1300 	smlabb	r3, r3, r0, r1
 8020812:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020816:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802081a:	605c      	str	r4, [r3, #4]
 802081c:	e757      	b.n	80206ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 802081e:	2d02      	cmp	r5, #2
 8020820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020824:	d12f      	bne.n	8020886 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 8020826:	1cb2      	adds	r2, r6, #2
 8020828:	f1a3 0020 	sub.w	r0, r3, #32
 802082c:	9203      	str	r2, [sp, #12]
 802082e:	7872      	ldrb	r2, [r6, #1]
 8020830:	b2d2      	uxtb	r2, r2
 8020832:	f002 010f 	and.w	r1, r2, #15
 8020836:	1112      	asrs	r2, r2, #4
 8020838:	3908      	subs	r1, #8
 802083a:	3a08      	subs	r2, #8
 802083c:	4401      	add	r1, r0
 802083e:	4402      	add	r2, r0
 8020840:	4421      	add	r1, r4
 8020842:	b2c9      	uxtb	r1, r1
 8020844:	f361 0407 	bfi	r4, r1, #0, #8
 8020848:	f3c4 2507 	ubfx	r5, r4, #8, #8
 802084c:	3d20      	subs	r5, #32
 802084e:	442b      	add	r3, r5
 8020850:	2503      	movs	r5, #3
 8020852:	b2db      	uxtb	r3, r3
 8020854:	f363 240f 	bfi	r4, r3, #8, #8
 8020858:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802085c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8020860:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8020864:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020868:	f362 4417 	bfi	r4, r2, #16, #8
 802086c:	2207      	movs	r2, #7
 802086e:	0e20      	lsrs	r0, r4, #24
 8020870:	fb12 3201 	smlabb	r2, r2, r1, r3
 8020874:	210b      	movs	r1, #11
 8020876:	fb11 2100 	smlabb	r1, r1, r0, r2
 802087a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802087e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8020882:	604c      	str	r4, [r1, #4]
 8020884:	e722      	b.n	80206cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8020886:	1c5d      	adds	r5, r3, #1
 8020888:	4656      	mov	r6, sl
 802088a:	45aa      	cmp	sl, r5
 802088c:	bfa8      	it	ge
 802088e:	462e      	movge	r6, r5
 8020890:	e71e      	b.n	80206d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8020892:	f1b8 0f00 	cmp.w	r8, #0
 8020896:	d00d      	beq.n	80208b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8020898:	ea4f 0188 	mov.w	r1, r8, lsl #2
 802089c:	4658      	mov	r0, fp
 802089e:	f7e2 fafd 	bl	8002e9c <_ZN8touchgfx5paint9flushLineEPmi>
 80208a2:	4642      	mov	r2, r8
 80208a4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80208a8:	4638      	mov	r0, r7
 80208aa:	9b05      	ldr	r3, [sp, #20]
 80208ac:	4659      	mov	r1, fp
 80208ae:	4447      	add	r7, r8
 80208b0:	f7e2 fb5c 	bl	8002f6c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80208b4:	4b1d      	ldr	r3, [pc, #116]	@ (802092c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 80208b6:	9a01      	ldr	r2, [sp, #4]
 80208b8:	881b      	ldrh	r3, [r3, #0]
 80208ba:	1a9b      	subs	r3, r3, r2
 80208bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208c0:	441f      	add	r7, r3
 80208c2:	9b04      	ldr	r3, [sp, #16]
 80208c4:	3301      	adds	r3, #1
 80208c6:	9304      	str	r3, [sp, #16]
 80208c8:	9a04      	ldr	r2, [sp, #16]
 80208ca:	9b00      	ldr	r3, [sp, #0]
 80208cc:	4293      	cmp	r3, r2
 80208ce:	d11d      	bne.n	802090c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 80208d0:	9b02      	ldr	r3, [sp, #8]
 80208d2:	2400      	movs	r4, #0
 80208d4:	9a02      	ldr	r2, [sp, #8]
 80208d6:	f103 0801 	add.w	r8, r3, #1
 80208da:	9b06      	ldr	r3, [sp, #24]
 80208dc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80208e0:	4621      	mov	r1, r4
 80208e2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80208e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80208ea:	9b07      	ldr	r3, [sp, #28]
 80208ec:	ba36      	rev	r6, r6
 80208ee:	9808      	ldr	r0, [sp, #32]
 80208f0:	441e      	add	r6, r3
 80208f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80208f6:	1aed      	subs	r5, r5, r3
 80208f8:	f008 fa12 	bl	8028d20 <memset>
 80208fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8020900:	b2ad      	uxth	r5, r5
 8020902:	9404      	str	r4, [sp, #16]
 8020904:	f7e2 fac0 	bl	8002e88 <_ZN8touchgfx5paint8tearDownEv>
 8020908:	46b0      	mov	r8, r6
 802090a:	e5df      	b.n	80204cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 802090c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8020910:	9a01      	ldr	r2, [sp, #4]
 8020912:	1a9b      	subs	r3, r3, r2
 8020914:	1b5d      	subs	r5, r3, r5
 8020916:	b2ad      	uxth	r5, r5
 8020918:	e7f4      	b.n	8020904 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 802091a:	4b05      	ldr	r3, [pc, #20]	@ (8020930 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 802091c:	6818      	ldr	r0, [r3, #0]
 802091e:	6803      	ldr	r3, [r0, #0]
 8020920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020922:	4798      	blx	r3
 8020924:	b00f      	add	sp, #60	@ 0x3c
 8020926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802092a:	bf00      	nop
 802092c:	2402851a 	.word	0x2402851a
 8020930:	24028520 	.word	0x24028520

08020934 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8020934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020938:	b093      	sub	sp, #76	@ 0x4c
 802093a:	460d      	mov	r5, r1
 802093c:	4616      	mov	r6, r2
 802093e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8020942:	9000      	str	r0, [sp, #0]
 8020944:	f1bb 0f00 	cmp.w	fp, #0
 8020948:	f000 82ac 	beq.w	8020ea4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 802094c:	6810      	ldr	r0, [r2, #0]
 802094e:	ac0e      	add	r4, sp, #56	@ 0x38
 8020950:	6851      	ldr	r1, [r2, #4]
 8020952:	c403      	stmia	r4!, {r0, r1}
 8020954:	6818      	ldr	r0, [r3, #0]
 8020956:	ac10      	add	r4, sp, #64	@ 0x40
 8020958:	6859      	ldr	r1, [r3, #4]
 802095a:	c403      	stmia	r4!, {r0, r1}
 802095c:	a80e      	add	r0, sp, #56	@ 0x38
 802095e:	f7f8 fe99 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020962:	4631      	mov	r1, r6
 8020964:	a810      	add	r0, sp, #64	@ 0x40
 8020966:	f7f8 fed9 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802096a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802096e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8020972:	bfdb      	ittet	le
 8020974:	b293      	uxthle	r3, r2
 8020976:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802097a:	2301      	movgt	r3, #1
 802097c:	fb91 f3f3 	sdivle	r3, r1, r3
 8020980:	9301      	str	r3, [sp, #4]
 8020982:	f105 0308 	add.w	r3, r5, #8
 8020986:	9901      	ldr	r1, [sp, #4]
 8020988:	9305      	str	r3, [sp, #20]
 802098a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802098e:	440b      	add	r3, r1
 8020990:	3b01      	subs	r3, #1
 8020992:	fb93 f3f1 	sdiv	r3, r3, r1
 8020996:	3b01      	subs	r3, #1
 8020998:	9905      	ldr	r1, [sp, #20]
 802099a:	b29b      	uxth	r3, r3
 802099c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80209a0:	9901      	ldr	r1, [sp, #4]
 80209a2:	9306      	str	r3, [sp, #24]
 80209a4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80209a8:	fb93 f0f1 	sdiv	r0, r3, r1
 80209ac:	b284      	uxth	r4, r0
 80209ae:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80209b2:	9403      	str	r4, [sp, #12]
 80209b4:	9d03      	ldr	r5, [sp, #12]
 80209b6:	9c01      	ldr	r4, [sp, #4]
 80209b8:	fb05 3714 	mls	r7, r5, r4, r3
 80209bc:	fb17 f702 	smulbb	r7, r7, r2
 80209c0:	440f      	add	r7, r1
 80209c2:	b2bf      	uxth	r7, r7
 80209c4:	2d00      	cmp	r5, #0
 80209c6:	d06b      	beq.n	8020aa0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 80209c8:	1e6a      	subs	r2, r5, #1
 80209ca:	9805      	ldr	r0, [sp, #20]
 80209cc:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 80209d0:	9a06      	ldr	r2, [sp, #24]
 80209d2:	fa99 f989 	rev.w	r9, r9
 80209d6:	4491      	add	r9, r2
 80209d8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80209dc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80209e0:	4411      	add	r1, r2
 80209e2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80209e6:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8020d44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 80209ea:	4413      	add	r3, r2
 80209ec:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80209f0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80209f4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80209f8:	9302      	str	r3, [sp, #8]
 80209fa:	4bd0      	ldr	r3, [pc, #832]	@ (8020d3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 80209fc:	6818      	ldr	r0, [r3, #0]
 80209fe:	6803      	ldr	r3, [r0, #0]
 8020a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020a02:	4798      	blx	r3
 8020a04:	4bce      	ldr	r3, [pc, #824]	@ (8020d40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8020a06:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8020a0a:	881b      	ldrh	r3, [r3, #0]
 8020a0c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8020a10:	fb03 2404 	mla	r4, r3, r4, r2
 8020a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020a18:	436b      	muls	r3, r5
 8020a1a:	2500      	movs	r5, #0
 8020a1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a24:	4629      	mov	r1, r5
 8020a26:	4404      	add	r4, r0
 8020a28:	18e3      	adds	r3, r4, r3
 8020a2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020a2c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020a30:	fb97 f3f3 	sdiv	r3, r7, r3
 8020a34:	9304      	str	r3, [sp, #16]
 8020a36:	9b00      	ldr	r3, [sp, #0]
 8020a38:	3304      	adds	r3, #4
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a3e:	f008 f96f 	bl	8028d20 <memset>
 8020a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020a44:	42a3      	cmp	r3, r4
 8020a46:	f240 8228 	bls.w	8020e9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8020a4a:	2003      	movs	r0, #3
 8020a4c:	2607      	movs	r6, #7
 8020a4e:	2f00      	cmp	r7, #0
 8020a50:	f000 80cb 	beq.w	8020bea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8020a54:	f899 3000 	ldrb.w	r3, [r9]
 8020a58:	b2db      	uxtb	r3, r3
 8020a5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8020a5c:	d123      	bne.n	8020aa6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8020a5e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020a62:	3f01      	subs	r7, #1
 8020a64:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020a68:	f109 0804 	add.w	r8, r9, #4
 8020a6c:	b2db      	uxtb	r3, r3
 8020a6e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8020a72:	b2d2      	uxtb	r2, r2
 8020a74:	f363 0507 	bfi	r5, r3, #0, #8
 8020a78:	b2c9      	uxtb	r1, r1
 8020a7a:	b2bf      	uxth	r7, r7
 8020a7c:	f362 250f 	bfi	r5, r2, #8, #8
 8020a80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020a84:	fb10 2201 	smlabb	r2, r0, r1, r2
 8020a88:	f361 4517 	bfi	r5, r1, #16, #8
 8020a8c:	fb16 2303 	smlabb	r3, r6, r3, r2
 8020a90:	9a00      	ldr	r2, [sp, #0]
 8020a92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020a9a:	605d      	str	r5, [r3, #4]
 8020a9c:	46c1      	mov	r9, r8
 8020a9e:	e7d6      	b.n	8020a4e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8020aa0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8020aa4:	e798      	b.n	80209d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8020aa6:	119a      	asrs	r2, r3, #6
 8020aa8:	f109 0801 	add.w	r8, r9, #1
 8020aac:	d108      	bne.n	8020ac0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8020aae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020ab2:	9a00      	ldr	r2, [sp, #0]
 8020ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020ab8:	685d      	ldr	r5, [r3, #4]
 8020aba:	3f01      	subs	r7, #1
 8020abc:	b2bf      	uxth	r7, r7
 8020abe:	e7ed      	b.n	8020a9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8020ac0:	2a01      	cmp	r2, #1
 8020ac2:	d125      	bne.n	8020b10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8020ac4:	f003 0103 	and.w	r1, r3, #3
 8020ac8:	1eaa      	subs	r2, r5, #2
 8020aca:	440a      	add	r2, r1
 8020acc:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8020ad0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020ad4:	b2d2      	uxtb	r2, r2
 8020ad6:	3902      	subs	r1, #2
 8020ad8:	3b02      	subs	r3, #2
 8020ada:	f362 0507 	bfi	r5, r2, #0, #8
 8020ade:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8020ae2:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020ae6:	f361 250f 	bfi	r5, r1, #8, #8
 8020aea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8020aee:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8020af2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8020af6:	fb10 1103 	smlabb	r1, r0, r3, r1
 8020afa:	f363 4517 	bfi	r5, r3, #16, #8
 8020afe:	9b00      	ldr	r3, [sp, #0]
 8020b00:	fb16 1202 	smlabb	r2, r6, r2, r1
 8020b04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020b08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8020b0c:	6055      	str	r5, [r2, #4]
 8020b0e:	e7d4      	b.n	8020aba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8020b10:	2a02      	cmp	r2, #2
 8020b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020b16:	d12c      	bne.n	8020b72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8020b18:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020b1c:	f1a3 0c20 	sub.w	ip, r3, #32
 8020b20:	f109 0802 	add.w	r8, r9, #2
 8020b24:	b2d2      	uxtb	r2, r2
 8020b26:	f002 010f 	and.w	r1, r2, #15
 8020b2a:	1112      	asrs	r2, r2, #4
 8020b2c:	3908      	subs	r1, #8
 8020b2e:	3a08      	subs	r2, #8
 8020b30:	4461      	add	r1, ip
 8020b32:	4494      	add	ip, r2
 8020b34:	4429      	add	r1, r5
 8020b36:	b2c9      	uxtb	r1, r1
 8020b38:	f361 0507 	bfi	r5, r1, #0, #8
 8020b3c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8020b40:	f1ae 0e20 	sub.w	lr, lr, #32
 8020b44:	4473      	add	r3, lr
 8020b46:	b2db      	uxtb	r3, r3
 8020b48:	f363 250f 	bfi	r5, r3, #8, #8
 8020b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020b50:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8020b54:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8020b58:	fb10 330c 	smlabb	r3, r0, ip, r3
 8020b5c:	f36c 4517 	bfi	r5, ip, #16, #8
 8020b60:	fb16 3101 	smlabb	r1, r6, r1, r3
 8020b64:	9b00      	ldr	r3, [sp, #0]
 8020b66:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020b6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020b6e:	604d      	str	r5, [r1, #4]
 8020b70:	e7a3      	b.n	8020aba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8020b72:	3301      	adds	r3, #1
 8020b74:	42bb      	cmp	r3, r7
 8020b76:	dd23      	ble.n	8020bc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8020b78:	eba3 0907 	sub.w	r9, r3, r7
 8020b7c:	f1b9 0f00 	cmp.w	r9, #0
 8020b80:	dc20      	bgt.n	8020bc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8020b82:	9e02      	ldr	r6, [sp, #8]
 8020b84:	2700      	movs	r7, #0
 8020b86:	2e00      	cmp	r6, #0
 8020b88:	f340 8142 	ble.w	8020e10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8020b8c:	f108 0301 	add.w	r3, r8, #1
 8020b90:	9307      	str	r3, [sp, #28]
 8020b92:	f898 3000 	ldrb.w	r3, [r8]
 8020b96:	b2db      	uxtb	r3, r3
 8020b98:	119a      	asrs	r2, r3, #6
 8020b9a:	d12a      	bne.n	8020bf2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8020b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020ba0:	9a00      	ldr	r2, [sp, #0]
 8020ba2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020ba6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020baa:	685d      	ldr	r5, [r3, #4]
 8020bac:	f040 811f 	bne.w	8020dee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020bb0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020bb4:	7025      	strb	r5, [r4, #0]
 8020bb6:	7063      	strb	r3, [r4, #1]
 8020bb8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020bbc:	70a3      	strb	r3, [r4, #2]
 8020bbe:	e04e      	b.n	8020c5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020bc0:	1aff      	subs	r7, r7, r3
 8020bc2:	e77b      	b.n	8020abc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8020bc4:	9b02      	ldr	r3, [sp, #8]
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	462a      	mov	r2, r5
 8020bca:	454b      	cmp	r3, r9
 8020bcc:	bfa8      	it	ge
 8020bce:	464b      	movge	r3, r9
 8020bd0:	461f      	mov	r7, r3
 8020bd2:	9b02      	ldr	r3, [sp, #8]
 8020bd4:	4639      	mov	r1, r7
 8020bd6:	1bde      	subs	r6, r3, r7
 8020bd8:	eba9 0907 	sub.w	r9, r9, r7
 8020bdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020be0:	465b      	mov	r3, fp
 8020be2:	f7e2 f975 	bl	8002ed0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8020be6:	443c      	add	r4, r7
 8020be8:	e7cc      	b.n	8020b84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8020bea:	46c8      	mov	r8, r9
 8020bec:	9e02      	ldr	r6, [sp, #8]
 8020bee:	46b9      	mov	r9, r7
 8020bf0:	e7c8      	b.n	8020b84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8020bf2:	2a01      	cmp	r2, #1
 8020bf4:	d136      	bne.n	8020c64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8020bf6:	f003 0103 	and.w	r1, r3, #3
 8020bfa:	1ea8      	subs	r0, r5, #2
 8020bfc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020c00:	4408      	add	r0, r1
 8020c02:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8020c06:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020c0a:	b2c0      	uxtb	r0, r0
 8020c0c:	f1a1 0102 	sub.w	r1, r1, #2
 8020c10:	f1a3 0302 	sub.w	r3, r3, #2
 8020c14:	f360 0507 	bfi	r5, r0, #0, #8
 8020c18:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8020c1c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020c20:	f361 250f 	bfi	r5, r1, #8, #8
 8020c24:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8020c28:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8020c2c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8020c30:	f04f 0303 	mov.w	r3, #3
 8020c34:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8020c38:	f04f 0c07 	mov.w	ip, #7
 8020c3c:	9b00      	ldr	r3, [sp, #0]
 8020c3e:	f368 4517 	bfi	r5, r8, #16, #8
 8020c42:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8020c46:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8020c4a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8020c4e:	f8cc 5004 	str.w	r5, [ip, #4]
 8020c52:	f040 80cd 	bne.w	8020df0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8020c56:	7020      	strb	r0, [r4, #0]
 8020c58:	7061      	strb	r1, [r4, #1]
 8020c5a:	f884 8002 	strb.w	r8, [r4, #2]
 8020c5e:	3e01      	subs	r6, #1
 8020c60:	3403      	adds	r4, #3
 8020c62:	e0c1      	b.n	8020de8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8020c64:	2a02      	cmp	r2, #2
 8020c66:	d13d      	bne.n	8020ce4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8020c68:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020c70:	f108 0202 	add.w	r2, r8, #2
 8020c74:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020c78:	b2c9      	uxtb	r1, r1
 8020c7a:	f1a3 0c20 	sub.w	ip, r3, #32
 8020c7e:	9207      	str	r2, [sp, #28]
 8020c80:	f001 000f 	and.w	r0, r1, #15
 8020c84:	f1a0 0008 	sub.w	r0, r0, #8
 8020c88:	4460      	add	r0, ip
 8020c8a:	4428      	add	r0, r5
 8020c8c:	b2c0      	uxtb	r0, r0
 8020c8e:	f360 0507 	bfi	r5, r0, #0, #8
 8020c92:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8020c96:	f1a2 0220 	sub.w	r2, r2, #32
 8020c9a:	4413      	add	r3, r2
 8020c9c:	ea4f 1221 	mov.w	r2, r1, asr #4
 8020ca0:	b2db      	uxtb	r3, r3
 8020ca2:	f1a2 0208 	sub.w	r2, r2, #8
 8020ca6:	f363 250f 	bfi	r5, r3, #8, #8
 8020caa:	4462      	add	r2, ip
 8020cac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8020cb0:	f04f 0c03 	mov.w	ip, #3
 8020cb4:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8020cb8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8020cbc:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8020cc0:	f04f 0107 	mov.w	r1, #7
 8020cc4:	f362 4517 	bfi	r5, r2, #16, #8
 8020cc8:	fb11 c100 	smlabb	r1, r1, r0, ip
 8020ccc:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8020cd0:	9900      	ldr	r1, [sp, #0]
 8020cd2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8020cd6:	604d      	str	r5, [r1, #4]
 8020cd8:	f040 8089 	bne.w	8020dee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020cdc:	7020      	strb	r0, [r4, #0]
 8020cde:	7063      	strb	r3, [r4, #1]
 8020ce0:	70a2      	strb	r2, [r4, #2]
 8020ce2:	e7bc      	b.n	8020c5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020ce4:	2bfe      	cmp	r3, #254	@ 0xfe
 8020ce6:	d12f      	bne.n	8020d48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8020ce8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020cec:	f108 0304 	add.w	r3, r8, #4
 8020cf0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020cf4:	f04f 0c03 	mov.w	ip, #3
 8020cf8:	f898 1003 	ldrb.w	r1, [r8, #3]
 8020cfc:	b2c0      	uxtb	r0, r0
 8020cfe:	b2d2      	uxtb	r2, r2
 8020d00:	9307      	str	r3, [sp, #28]
 8020d02:	b2c9      	uxtb	r1, r1
 8020d04:	f360 0507 	bfi	r5, r0, #0, #8
 8020d08:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8020d0c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020d10:	f362 250f 	bfi	r5, r2, #8, #8
 8020d14:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8020d18:	f04f 0307 	mov.w	r3, #7
 8020d1c:	f361 4517 	bfi	r5, r1, #16, #8
 8020d20:	fb13 c300 	smlabb	r3, r3, r0, ip
 8020d24:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8020d28:	9b00      	ldr	r3, [sp, #0]
 8020d2a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8020d2e:	605d      	str	r5, [r3, #4]
 8020d30:	d15d      	bne.n	8020dee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020d32:	7020      	strb	r0, [r4, #0]
 8020d34:	7062      	strb	r2, [r4, #1]
 8020d36:	70a1      	strb	r1, [r4, #2]
 8020d38:	e791      	b.n	8020c5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020d3a:	bf00      	nop
 8020d3c:	24028520 	.word	0x24028520
 8020d40:	2402851a 	.word	0x2402851a
 8020d44:	24000140 	.word	0x24000140
 8020d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020d4c:	1c5a      	adds	r2, r3, #1
 8020d4e:	b94b      	cbnz	r3, 8020d64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8020d50:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020d54:	d14c      	bne.n	8020df0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8020d56:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8020d5a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020d5e:	7025      	strb	r5, [r4, #0]
 8020d60:	7062      	strb	r2, [r4, #1]
 8020d62:	e72b      	b.n	8020bbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8020d64:	4296      	cmp	r6, r2
 8020d66:	46b0      	mov	r8, r6
 8020d68:	bfa8      	it	ge
 8020d6a:	4690      	movge	r8, r2
 8020d6c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020d70:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020d74:	eba6 0608 	sub.w	r6, r6, r8
 8020d78:	eba2 0908 	sub.w	r9, r2, r8
 8020d7c:	9308      	str	r3, [sp, #32]
 8020d7e:	b2eb      	uxtb	r3, r5
 8020d80:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d82:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d88:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d8e:	9b08      	ldr	r3, [sp, #32]
 8020d90:	d030      	beq.n	8020df4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8020d92:	18fb      	adds	r3, r7, r3
 8020d94:	2bc0      	cmp	r3, #192	@ 0xc0
 8020d96:	dd15      	ble.n	8020dc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8020d98:	4650      	mov	r0, sl
 8020d9a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8020d9e:	f7e2 f87d 	bl	8002e9c <_ZN8touchgfx5paint9flushLineEPmi>
 8020da2:	2203      	movs	r2, #3
 8020da4:	4651      	mov	r1, sl
 8020da6:	465b      	mov	r3, fp
 8020da8:	4620      	mov	r0, r4
 8020daa:	443c      	add	r4, r7
 8020dac:	fb97 f2f2 	sdiv	r2, r7, r2
 8020db0:	f7e2 f8b8 	bl	8002f24 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8020db4:	4b3d      	ldr	r3, [pc, #244]	@ (8020eac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8020db6:	2700      	movs	r7, #0
 8020db8:	459a      	cmp	sl, r3
 8020dba:	bf0c      	ite	eq
 8020dbc:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8020eb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8020dc0:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8020eac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8020dc4:	eb0a 0307 	add.w	r3, sl, r7
 8020dc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020dca:	f1b8 0801 	subs.w	r8, r8, #1
 8020dce:	f103 0303 	add.w	r3, r3, #3
 8020dd2:	f803 2c03 	strb.w	r2, [r3, #-3]
 8020dd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020dd8:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020dde:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020de2:	d1f1      	bne.n	8020dc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8020de4:	9b08      	ldr	r3, [sp, #32]
 8020de6:	441f      	add	r7, r3
 8020de8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020dec:	e6cb      	b.n	8020b86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8020dee:	2201      	movs	r2, #1
 8020df0:	4690      	mov	r8, r2
 8020df2:	e7bb      	b.n	8020d6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8020df4:	4423      	add	r3, r4
 8020df6:	42a3      	cmp	r3, r4
 8020df8:	d9f6      	bls.n	8020de8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8020dfa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020dfc:	3403      	adds	r4, #3
 8020dfe:	f804 2c03 	strb.w	r2, [r4, #-3]
 8020e02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020e04:	f804 2c02 	strb.w	r2, [r4, #-2]
 8020e08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e0a:	f804 2c01 	strb.w	r2, [r4, #-1]
 8020e0e:	e7f2      	b.n	8020df6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8020e10:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020e14:	d00e      	beq.n	8020e34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8020e16:	b16f      	cbz	r7, 8020e34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8020e18:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8020e1c:	4650      	mov	r0, sl
 8020e1e:	f7e2 f83d 	bl	8002e9c <_ZN8touchgfx5paint9flushLineEPmi>
 8020e22:	2203      	movs	r2, #3
 8020e24:	4620      	mov	r0, r4
 8020e26:	443c      	add	r4, r7
 8020e28:	465b      	mov	r3, fp
 8020e2a:	4651      	mov	r1, sl
 8020e2c:	fb97 f2f2 	sdiv	r2, r7, r2
 8020e30:	f7e2 f878 	bl	8002f24 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8020e34:	4b1e      	ldr	r3, [pc, #120]	@ (8020eb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8020e36:	9a02      	ldr	r2, [sp, #8]
 8020e38:	881b      	ldrh	r3, [r3, #0]
 8020e3a:	1a9b      	subs	r3, r3, r2
 8020e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e40:	441c      	add	r4, r3
 8020e42:	9b04      	ldr	r3, [sp, #16]
 8020e44:	3301      	adds	r3, #1
 8020e46:	9304      	str	r3, [sp, #16]
 8020e48:	9a04      	ldr	r2, [sp, #16]
 8020e4a:	9b01      	ldr	r3, [sp, #4]
 8020e4c:	4293      	cmp	r3, r2
 8020e4e:	d11c      	bne.n	8020e8a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8020e50:	9b03      	ldr	r3, [sp, #12]
 8020e52:	2500      	movs	r5, #0
 8020e54:	9a03      	ldr	r2, [sp, #12]
 8020e56:	1c5e      	adds	r6, r3, #1
 8020e58:	9b05      	ldr	r3, [sp, #20]
 8020e5a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8020e5e:	4629      	mov	r1, r5
 8020e60:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8020e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020e68:	9b06      	ldr	r3, [sp, #24]
 8020e6a:	fa98 f888 	rev.w	r8, r8
 8020e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020e70:	4498      	add	r8, r3
 8020e72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020e76:	1aff      	subs	r7, r7, r3
 8020e78:	f007 ff52 	bl	8028d20 <memset>
 8020e7c:	b2bf      	uxth	r7, r7
 8020e7e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8020e82:	f7e2 f801 	bl	8002e88 <_ZN8touchgfx5paint8tearDownEv>
 8020e86:	46c1      	mov	r9, r8
 8020e88:	e5db      	b.n	8020a42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8020e8a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8020e8e:	9b02      	ldr	r3, [sp, #8]
 8020e90:	1aff      	subs	r7, r7, r3
 8020e92:	eba7 0709 	sub.w	r7, r7, r9
 8020e96:	b2bf      	uxth	r7, r7
 8020e98:	e7f3      	b.n	8020e82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8020e9a:	4b06      	ldr	r3, [pc, #24]	@ (8020eb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8020e9c:	6818      	ldr	r0, [r3, #0]
 8020e9e:	6803      	ldr	r3, [r0, #0]
 8020ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020ea2:	4798      	blx	r3
 8020ea4:	b013      	add	sp, #76	@ 0x4c
 8020ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eaa:	bf00      	nop
 8020eac:	24000140 	.word	0x24000140
 8020eb0:	2402851a 	.word	0x2402851a
 8020eb4:	24028520 	.word	0x24028520
 8020eb8:	24000240 	.word	0x24000240

08020ebc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ec0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8020ec4:	9c06      	ldr	r4, [sp, #24]
 8020ec6:	2800      	cmp	r0, #0
 8020ec8:	d06e      	beq.n	8020fa8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020eca:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8020ece:	2d00      	cmp	r5, #0
 8020ed0:	dd6a      	ble.n	8020fa8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020ed2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8020ed6:	f1bc 0f00 	cmp.w	ip, #0
 8020eda:	dd65      	ble.n	8020fa8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020edc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8020ee0:	28ff      	cmp	r0, #255	@ 0xff
 8020ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ee6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8020eea:	fb02 3306 	mla	r3, r2, r6, r3
 8020eee:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8020ef2:	b2e4      	uxtb	r4, r4
 8020ef4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ef8:	4419      	add	r1, r3
 8020efa:	fb02 f30c 	mul.w	r3, r2, ip
 8020efe:	eba2 0205 	sub.w	r2, r2, r5
 8020f02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f0e:	440b      	add	r3, r1
 8020f10:	d03e      	beq.n	8020f90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8020f12:	fa1f fc80 	uxth.w	ip, r0
 8020f16:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8020f1a:	fb06 f60c 	mul.w	r6, r6, ip
 8020f1e:	b280      	uxth	r0, r0
 8020f20:	fb07 f70c 	mul.w	r7, r7, ip
 8020f24:	fb04 f40c 	mul.w	r4, r4, ip
 8020f28:	4299      	cmp	r1, r3
 8020f2a:	d23d      	bcs.n	8020fa8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020f2c:	eb01 0c05 	add.w	ip, r1, r5
 8020f30:	458c      	cmp	ip, r1
 8020f32:	f101 0e03 	add.w	lr, r1, #3
 8020f36:	d928      	bls.n	8020f8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8020f38:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020f3c:	fb11 f100 	smulbb	r1, r1, r0
 8020f40:	4421      	add	r1, r4
 8020f42:	b289      	uxth	r1, r1
 8020f44:	f101 0801 	add.w	r8, r1, #1
 8020f48:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020f4c:	1209      	asrs	r1, r1, #8
 8020f4e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020f52:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8020f56:	fb11 f100 	smulbb	r1, r1, r0
 8020f5a:	4439      	add	r1, r7
 8020f5c:	b289      	uxth	r1, r1
 8020f5e:	f101 0801 	add.w	r8, r1, #1
 8020f62:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020f66:	1209      	asrs	r1, r1, #8
 8020f68:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020f6c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020f70:	fb11 f100 	smulbb	r1, r1, r0
 8020f74:	4431      	add	r1, r6
 8020f76:	b289      	uxth	r1, r1
 8020f78:	f101 0801 	add.w	r8, r1, #1
 8020f7c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020f80:	1209      	asrs	r1, r1, #8
 8020f82:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8020f86:	4671      	mov	r1, lr
 8020f88:	e7d2      	b.n	8020f30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8020f8a:	4411      	add	r1, r2
 8020f8c:	e7cc      	b.n	8020f28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8020f8e:	4411      	add	r1, r2
 8020f90:	4299      	cmp	r1, r3
 8020f92:	d209      	bcs.n	8020fa8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020f94:	1948      	adds	r0, r1, r5
 8020f96:	4281      	cmp	r1, r0
 8020f98:	d2f9      	bcs.n	8020f8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8020f9a:	700c      	strb	r4, [r1, #0]
 8020f9c:	3103      	adds	r1, #3
 8020f9e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8020fa2:	f801 6c01 	strb.w	r6, [r1, #-1]
 8020fa6:	e7f6      	b.n	8020f96 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8020fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020fac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb0:	b093      	sub	sp, #76	@ 0x4c
 8020fb2:	4699      	mov	r9, r3
 8020fb4:	4617      	mov	r7, r2
 8020fb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020fba:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8020fbe:	4604      	mov	r4, r0
 8020fc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020fc4:	a80c      	add	r0, sp, #48	@ 0x30
 8020fc6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8020fca:	460d      	mov	r5, r1
 8020fcc:	4649      	mov	r1, r9
 8020fce:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020fd2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020fd6:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8020fda:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8020fde:	f7f1 f85b 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8020fe2:	4639      	mov	r1, r7
 8020fe4:	a80c      	add	r0, sp, #48	@ 0x30
 8020fe6:	f7f1 f857 	bl	8012098 <_ZN8touchgfx4RectaNERKS0_>
 8020fea:	4b78      	ldr	r3, [pc, #480]	@ (80211cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020fec:	8818      	ldrh	r0, [r3, #0]
 8020fee:	4b78      	ldr	r3, [pc, #480]	@ (80211d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8020ff0:	b202      	sxth	r2, r0
 8020ff2:	8819      	ldrh	r1, [r3, #0]
 8020ff4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8020ff8:	b20f      	sxth	r7, r1
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	da07      	bge.n	802100e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8020ffe:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8021002:	4463      	add	r3, ip
 8021004:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021008:	2300      	movs	r3, #0
 802100a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 802100e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021012:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8021016:	1ad2      	subs	r2, r2, r3
 8021018:	4594      	cmp	ip, r2
 802101a:	bfc4      	itt	gt
 802101c:	1ac2      	subgt	r2, r0, r3
 802101e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8021022:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021026:	2a00      	cmp	r2, #0
 8021028:	da07      	bge.n	802103a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 802102a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 802102e:	4462      	add	r2, ip
 8021030:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8021034:	2200      	movs	r2, #0
 8021036:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802103a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802103e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8021042:	1abf      	subs	r7, r7, r2
 8021044:	45bc      	cmp	ip, r7
 8021046:	f8df c190 	ldr.w	ip, [pc, #400]	@ 80211d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 802104a:	bfc8      	it	gt
 802104c:	1a8f      	subgt	r7, r1, r2
 802104e:	f89c c000 	ldrb.w	ip, [ip]
 8021052:	bfc8      	it	gt
 8021054:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8021058:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802105c:	f1bc 0f00 	cmp.w	ip, #0
 8021060:	d176      	bne.n	8021150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8021062:	4287      	cmp	r7, r0
 8021064:	bf14      	ite	ne
 8021066:	2100      	movne	r1, #0
 8021068:	2101      	moveq	r1, #1
 802106a:	2f00      	cmp	r7, #0
 802106c:	9107      	str	r1, [sp, #28]
 802106e:	dd73      	ble.n	8021158 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021070:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8021074:	2900      	cmp	r1, #0
 8021076:	9104      	str	r1, [sp, #16]
 8021078:	dd6e      	ble.n	8021158 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 802107a:	f8b9 1000 	ldrh.w	r1, [r9]
 802107e:	a80e      	add	r0, sp, #56	@ 0x38
 8021080:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8021084:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8021088:	1a5b      	subs	r3, r3, r1
 802108a:	a910      	add	r1, sp, #64	@ 0x40
 802108c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8021090:	b21b      	sxth	r3, r3
 8021092:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8021096:	f8df a144 	ldr.w	sl, [pc, #324]	@ 80211dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802109a:	9305      	str	r3, [sp, #20]
 802109c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80210a0:	1ad2      	subs	r2, r2, r3
 80210a2:	b213      	sxth	r3, r2
 80210a4:	9306      	str	r3, [sp, #24]
 80210a6:	9b05      	ldr	r3, [sp, #20]
 80210a8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80210ac:	9b06      	ldr	r3, [sp, #24]
 80210ae:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80210b2:	9b04      	ldr	r3, [sp, #16]
 80210b4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80210b8:	2300      	movs	r3, #0
 80210ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80210bc:	f7f8 fb2e 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80210c0:	4640      	mov	r0, r8
 80210c2:	f7f8 fae7 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210c6:	a810      	add	r0, sp, #64	@ 0x40
 80210c8:	f7f8 fae4 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210cc:	4b41      	ldr	r3, [pc, #260]	@ (80211d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80210ce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80210d2:	4628      	mov	r0, r5
 80210d4:	881b      	ldrh	r3, [r3, #0]
 80210d6:	9308      	str	r3, [sp, #32]
 80210d8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80210dc:	b21b      	sxth	r3, r3
 80210de:	9303      	str	r3, [sp, #12]
 80210e0:	682b      	ldr	r3, [r5, #0]
 80210e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80210e4:	4798      	blx	r3
 80210e6:	9a03      	ldr	r2, [sp, #12]
 80210e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80210ec:	4681      	mov	r9, r0
 80210ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80210f2:	fb13 f302 	smulbb	r3, r3, r2
 80210f6:	2203      	movs	r2, #3
 80210f8:	f8da 0000 	ldr.w	r0, [sl]
 80210fc:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021100:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8021102:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021104:	441d      	add	r5, r3
 8021106:	6803      	ldr	r3, [r0, #0]
 8021108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802110a:	4798      	blx	r3
 802110c:	9009      	str	r0, [sp, #36]	@ 0x24
 802110e:	f8da 0000 	ldr.w	r0, [sl]
 8021112:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021116:	6803      	ldr	r3, [r0, #0]
 8021118:	910a      	str	r1, [sp, #40]	@ 0x28
 802111a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802111c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8021120:	4798      	blx	r3
 8021122:	f010 0f01 	tst.w	r0, #1
 8021126:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 802112a:	d01e      	beq.n	802116a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 802112c:	f8da 0000 	ldr.w	r0, [sl]
 8021130:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021134:	6803      	ldr	r3, [r0, #0]
 8021136:	9200      	str	r2, [sp, #0]
 8021138:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 802113a:	462b      	mov	r3, r5
 802113c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021140:	47b0      	blx	r6
 8021142:	9b05      	ldr	r3, [sp, #20]
 8021144:	80a7      	strh	r7, [r4, #4]
 8021146:	8023      	strh	r3, [r4, #0]
 8021148:	9b06      	ldr	r3, [sp, #24]
 802114a:	8063      	strh	r3, [r4, #2]
 802114c:	9b04      	ldr	r3, [sp, #16]
 802114e:	e007      	b.n	8021160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8021150:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8021154:	4288      	cmp	r0, r1
 8021156:	e785      	b.n	8021064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8021158:	2300      	movs	r3, #0
 802115a:	8023      	strh	r3, [r4, #0]
 802115c:	8063      	strh	r3, [r4, #2]
 802115e:	80a3      	strh	r3, [r4, #4]
 8021160:	4620      	mov	r0, r4
 8021162:	80e3      	strh	r3, [r4, #6]
 8021164:	b013      	add	sp, #76	@ 0x4c
 8021166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802116a:	fb09 f606 	mul.w	r6, r9, r6
 802116e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021170:	fb11 6602 	smlabb	r6, r1, r2, r6
 8021174:	9a07      	ldr	r2, [sp, #28]
 8021176:	4433      	add	r3, r6
 8021178:	461e      	mov	r6, r3
 802117a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802117e:	b16a      	cbz	r2, 802119c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021180:	9a08      	ldr	r2, [sp, #32]
 8021182:	4593      	cmp	fp, r2
 8021184:	d10a      	bne.n	802119c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021186:	f8da 0000 	ldr.w	r0, [sl]
 802118a:	fb09 f303 	mul.w	r3, r9, r3
 802118e:	4629      	mov	r1, r5
 8021190:	6802      	ldr	r2, [r0, #0]
 8021192:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8021196:	4632      	mov	r2, r6
 8021198:	47d0      	blx	sl
 802119a:	e7d2      	b.n	8021142 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 802119c:	9a03      	ldr	r2, [sp, #12]
 802119e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80211dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80211a2:	fb02 5803 	mla	r8, r2, r3, r5
 80211a6:	4545      	cmp	r5, r8
 80211a8:	d2cb      	bcs.n	8021142 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80211aa:	f8db 0000 	ldr.w	r0, [fp]
 80211ae:	4629      	mov	r1, r5
 80211b0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80211b4:	6802      	ldr	r2, [r0, #0]
 80211b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80211be:	4632      	mov	r2, r6
 80211c0:	47d0      	blx	sl
 80211c2:	9b03      	ldr	r3, [sp, #12]
 80211c4:	444e      	add	r6, r9
 80211c6:	441d      	add	r5, r3
 80211c8:	e7ed      	b.n	80211a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80211ca:	bf00      	nop
 80211cc:	24028514 	.word	0x24028514
 80211d0:	24028516 	.word	0x24028516
 80211d4:	2402851a 	.word	0x2402851a
 80211d8:	24028518 	.word	0x24028518
 80211dc:	24028520 	.word	0x24028520

080211e0 <_ZN8touchgfx8LCD24bppC1Ev>:
 80211e0:	2200      	movs	r2, #0
 80211e2:	490e      	ldr	r1, [pc, #56]	@ (802121c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 80211e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80211e8:	6001      	str	r1, [r0, #0]
 80211ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80211ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80211f2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80211f6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80211fa:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80211fe:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8021202:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8021206:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 802120a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 802120e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8021212:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8021216:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 802121a:	4770      	bx	lr
 802121c:	0802d7fc 	.word	0x0802d7fc

08021220 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021224:	b091      	sub	sp, #68	@ 0x44
 8021226:	4607      	mov	r7, r0
 8021228:	4688      	mov	r8, r1
 802122a:	6810      	ldr	r0, [r2, #0]
 802122c:	6851      	ldr	r1, [r2, #4]
 802122e:	ac0c      	add	r4, sp, #48	@ 0x30
 8021230:	4616      	mov	r6, r2
 8021232:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8021236:	4d64      	ldr	r5, [pc, #400]	@ (80213c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021238:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80213cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802123c:	c403      	stmia	r4!, {r0, r1}
 802123e:	6818      	ldr	r0, [r3, #0]
 8021240:	ac0e      	add	r4, sp, #56	@ 0x38
 8021242:	6859      	ldr	r1, [r3, #4]
 8021244:	c403      	stmia	r4!, {r0, r1}
 8021246:	a80c      	add	r0, sp, #48	@ 0x30
 8021248:	f7f8 fa24 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802124c:	4631      	mov	r1, r6
 802124e:	a80e      	add	r0, sp, #56	@ 0x38
 8021250:	f7f8 fa64 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021254:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8021258:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802125c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8021260:	6828      	ldr	r0, [r5, #0]
 8021262:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021266:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 802126a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 802126e:	440f      	add	r7, r1
 8021270:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021274:	440a      	add	r2, r1
 8021276:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802127a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802127e:	4413      	add	r3, r2
 8021280:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021284:	6803      	ldr	r3, [r0, #0]
 8021286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021288:	4798      	blx	r3
 802128a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802128e:	6828      	ldr	r0, [r5, #0]
 8021290:	d01f      	beq.n	80212d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8021292:	2201      	movs	r2, #1
 8021294:	2500      	movs	r5, #0
 8021296:	6801      	ldr	r1, [r0, #0]
 8021298:	b2a4      	uxth	r4, r4
 802129a:	b2b6      	uxth	r6, r6
 802129c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80212a0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80212a4:	250b      	movs	r5, #11
 80212a6:	9507      	str	r5, [sp, #28]
 80212a8:	f8ba 5000 	ldrh.w	r5, [sl]
 80212ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80212b0:	9602      	str	r6, [sp, #8]
 80212b2:	9401      	str	r4, [sp, #4]
 80212b4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80212b8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80212bc:	9203      	str	r2, [sp, #12]
 80212be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80212c2:	9200      	str	r2, [sp, #0]
 80212c4:	4642      	mov	r2, r8
 80212c6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80212c8:	4639      	mov	r1, r7
 80212ca:	47a0      	blx	r4
 80212cc:	b011      	add	sp, #68	@ 0x44
 80212ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212d2:	6803      	ldr	r3, [r0, #0]
 80212d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212d6:	4798      	blx	r3
 80212d8:	f8ba 5000 	ldrh.w	r5, [sl]
 80212dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80212e0:	f04f 0e04 	mov.w	lr, #4
 80212e4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80212e8:	436e      	muls	r6, r5
 80212ea:	fb05 2303 	mla	r3, r5, r3, r2
 80212ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80212f2:	1b2d      	subs	r5, r5, r4
 80212f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212fc:	4418      	add	r0, r3
 80212fe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021302:	1982      	adds	r2, r0, r6
 8021304:	1b1b      	subs	r3, r3, r4
 8021306:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802130a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802130c:	4290      	cmp	r0, r2
 802130e:	d254      	bcs.n	80213ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8021310:	eb00 0a04 	add.w	sl, r0, r4
 8021314:	4550      	cmp	r0, sl
 8021316:	d24c      	bcs.n	80213b2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8021318:	f817 1b01 	ldrb.w	r1, [r7], #1
 802131c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8021320:	eb08 0c01 	add.w	ip, r8, r1
 8021324:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021328:	b173      	cbz	r3, 8021348 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802132a:	2bff      	cmp	r3, #255	@ 0xff
 802132c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8021330:	d10c      	bne.n	802134c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021332:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021336:	d109      	bne.n	802134c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021338:	f880 b000 	strb.w	fp, [r0]
 802133c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021340:	7043      	strb	r3, [r0, #1]
 8021342:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021346:	7083      	strb	r3, [r0, #2]
 8021348:	3003      	adds	r0, #3
 802134a:	e7e3      	b.n	8021314 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 802134c:	fb09 f103 	mul.w	r1, r9, r3
 8021350:	1c4b      	adds	r3, r1, #1
 8021352:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021356:	7801      	ldrb	r1, [r0, #0]
 8021358:	121b      	asrs	r3, r3, #8
 802135a:	b29e      	uxth	r6, r3
 802135c:	43db      	mvns	r3, r3
 802135e:	fb1b fb06 	smulbb	fp, fp, r6
 8021362:	b2db      	uxtb	r3, r3
 8021364:	fb01 b103 	mla	r1, r1, r3, fp
 8021368:	b289      	uxth	r1, r1
 802136a:	f101 0b01 	add.w	fp, r1, #1
 802136e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021372:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021376:	fb1b fb03 	smulbb	fp, fp, r3
 802137a:	1209      	asrs	r1, r1, #8
 802137c:	7001      	strb	r1, [r0, #0]
 802137e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021382:	fb01 b106 	mla	r1, r1, r6, fp
 8021386:	b289      	uxth	r1, r1
 8021388:	f101 0b01 	add.w	fp, r1, #1
 802138c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021390:	1209      	asrs	r1, r1, #8
 8021392:	7041      	strb	r1, [r0, #1]
 8021394:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021398:	f890 c002 	ldrb.w	ip, [r0, #2]
 802139c:	fb1c f303 	smulbb	r3, ip, r3
 80213a0:	fb01 3606 	mla	r6, r1, r6, r3
 80213a4:	b2b6      	uxth	r6, r6
 80213a6:	1c73      	adds	r3, r6, #1
 80213a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80213ac:	1236      	asrs	r6, r6, #8
 80213ae:	7086      	strb	r6, [r0, #2]
 80213b0:	e7ca      	b.n	8021348 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80213b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80213b4:	4428      	add	r0, r5
 80213b6:	441f      	add	r7, r3
 80213b8:	e7a8      	b.n	802130c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80213ba:	4b03      	ldr	r3, [pc, #12]	@ (80213c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80213bc:	6818      	ldr	r0, [r3, #0]
 80213be:	6803      	ldr	r3, [r0, #0]
 80213c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80213c2:	4798      	blx	r3
 80213c4:	e782      	b.n	80212cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80213c6:	bf00      	nop
 80213c8:	24028520 	.word	0x24028520
 80213cc:	2402851a 	.word	0x2402851a

080213d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80213d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d4:	b091      	sub	sp, #68	@ 0x44
 80213d6:	4680      	mov	r8, r0
 80213d8:	460e      	mov	r6, r1
 80213da:	6810      	ldr	r0, [r2, #0]
 80213dc:	6851      	ldr	r1, [r2, #4]
 80213de:	ad0c      	add	r5, sp, #48	@ 0x30
 80213e0:	4614      	mov	r4, r2
 80213e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80213e6:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8021580 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80213ea:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8021584 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80213ee:	c503      	stmia	r5!, {r0, r1}
 80213f0:	6818      	ldr	r0, [r3, #0]
 80213f2:	ad0e      	add	r5, sp, #56	@ 0x38
 80213f4:	6859      	ldr	r1, [r3, #4]
 80213f6:	c503      	stmia	r5!, {r0, r1}
 80213f8:	a80c      	add	r0, sp, #48	@ 0x30
 80213fa:	f7f8 f94b 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213fe:	4621      	mov	r1, r4
 8021400:	a80e      	add	r0, sp, #56	@ 0x38
 8021402:	f7f8 f98b 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021406:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802140a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802140e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8021412:	f8d9 0000 	ldr.w	r0, [r9]
 8021416:	fb11 2103 	smlabb	r1, r1, r3, r2
 802141a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802141e:	eb08 0401 	add.w	r4, r8, r1
 8021422:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021426:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802142a:	440a      	add	r2, r1
 802142c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021430:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8021434:	4413      	add	r3, r2
 8021436:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802143a:	6803      	ldr	r3, [r0, #0]
 802143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802143e:	4798      	blx	r3
 8021440:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8021444:	f8d9 0000 	ldr.w	r0, [r9]
 8021448:	d022      	beq.n	8021490 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 802144a:	2200      	movs	r2, #0
 802144c:	f04f 0c01 	mov.w	ip, #1
 8021450:	6801      	ldr	r1, [r0, #0]
 8021452:	b2ad      	uxth	r5, r5
 8021454:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021458:	e9cd c208 	strd	ip, r2, [sp, #32]
 802145c:	f04f 0c0b 	mov.w	ip, #11
 8021460:	f8cd c01c 	str.w	ip, [sp, #28]
 8021464:	f8ba c000 	ldrh.w	ip, [sl]
 8021468:	9704      	str	r7, [sp, #16]
 802146a:	9502      	str	r5, [sp, #8]
 802146c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8021470:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8021474:	9203      	str	r2, [sp, #12]
 8021476:	fa1f f288 	uxth.w	r2, r8
 802147a:	9201      	str	r2, [sp, #4]
 802147c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021480:	9200      	str	r2, [sp, #0]
 8021482:	4632      	mov	r2, r6
 8021484:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8021486:	4621      	mov	r1, r4
 8021488:	47a8      	blx	r5
 802148a:	b011      	add	sp, #68	@ 0x44
 802148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021490:	6803      	ldr	r3, [r0, #0]
 8021492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021494:	4798      	blx	r3
 8021496:	f8ba 2000 	ldrh.w	r2, [sl]
 802149a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802149e:	f04f 0e03 	mov.w	lr, #3
 80214a2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80214a6:	4355      	muls	r5, r2
 80214a8:	fa1f fc87 	uxth.w	ip, r7
 80214ac:	fb02 1303 	mla	r3, r2, r3, r1
 80214b0:	eba2 0208 	sub.w	r2, r2, r8
 80214b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80214b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80214c0:	4418      	add	r0, r3
 80214c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80214c4:	1943      	adds	r3, r0, r5
 80214c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80214ca:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80214ce:	eba2 0208 	sub.w	r2, r2, r8
 80214d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80214d6:	b2ad      	uxth	r5, r5
 80214d8:	4298      	cmp	r0, r3
 80214da:	d24a      	bcs.n	8021572 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80214dc:	eb00 0908 	add.w	r9, r0, r8
 80214e0:	4621      	mov	r1, r4
 80214e2:	4548      	cmp	r0, r9
 80214e4:	460c      	mov	r4, r1
 80214e6:	d240      	bcs.n	802156a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80214e8:	f04f 0a04 	mov.w	sl, #4
 80214ec:	7824      	ldrb	r4, [r4, #0]
 80214ee:	2fff      	cmp	r7, #255	@ 0xff
 80214f0:	f101 0101 	add.w	r1, r1, #1
 80214f4:	fb1e a404 	smlabb	r4, lr, r4, sl
 80214f8:	eb06 0a04 	add.w	sl, r6, r4
 80214fc:	f816 b004 	ldrb.w	fp, [r6, r4]
 8021500:	d02b      	beq.n	802155a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8021502:	7804      	ldrb	r4, [r0, #0]
 8021504:	fb14 f405 	smulbb	r4, r4, r5
 8021508:	fb0b 440c 	mla	r4, fp, ip, r4
 802150c:	b2a4      	uxth	r4, r4
 802150e:	f104 0b01 	add.w	fp, r4, #1
 8021512:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021516:	f890 b001 	ldrb.w	fp, [r0, #1]
 802151a:	fb1b fb05 	smulbb	fp, fp, r5
 802151e:	1224      	asrs	r4, r4, #8
 8021520:	7004      	strb	r4, [r0, #0]
 8021522:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021526:	fb04 b40c 	mla	r4, r4, ip, fp
 802152a:	b2a4      	uxth	r4, r4
 802152c:	f104 0b01 	add.w	fp, r4, #1
 8021530:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021534:	1224      	asrs	r4, r4, #8
 8021536:	7044      	strb	r4, [r0, #1]
 8021538:	f89a 4002 	ldrb.w	r4, [sl, #2]
 802153c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021540:	fb1a fa05 	smulbb	sl, sl, r5
 8021544:	fb04 a40c 	mla	r4, r4, ip, sl
 8021548:	b2a4      	uxth	r4, r4
 802154a:	f104 0a01 	add.w	sl, r4, #1
 802154e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021552:	1224      	asrs	r4, r4, #8
 8021554:	7084      	strb	r4, [r0, #2]
 8021556:	3003      	adds	r0, #3
 8021558:	e7c3      	b.n	80214e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 802155a:	f880 b000 	strb.w	fp, [r0]
 802155e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021562:	7044      	strb	r4, [r0, #1]
 8021564:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021568:	e7f4      	b.n	8021554 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 802156a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802156c:	4420      	add	r0, r4
 802156e:	188c      	adds	r4, r1, r2
 8021570:	e7b2      	b.n	80214d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8021572:	4b03      	ldr	r3, [pc, #12]	@ (8021580 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021574:	6818      	ldr	r0, [r3, #0]
 8021576:	6803      	ldr	r3, [r0, #0]
 8021578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802157a:	4798      	blx	r3
 802157c:	e785      	b.n	802148a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 802157e:	bf00      	nop
 8021580:	24028520 	.word	0x24028520
 8021584:	2402851a 	.word	0x2402851a

08021588 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021588:	b4f0      	push	{r4, r5, r6, r7}
 802158a:	460c      	mov	r4, r1
 802158c:	4611      	mov	r1, r2
 802158e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8021592:	461a      	mov	r2, r3
 8021594:	780f      	ldrb	r7, [r1, #0]
 8021596:	9b04      	ldr	r3, [sp, #16]
 8021598:	784e      	ldrb	r6, [r1, #1]
 802159a:	b11f      	cbz	r7, 80215a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 802159c:	2f01      	cmp	r7, #1
 802159e:	d01d      	beq.n	80215dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80215a0:	bcf0      	pop	{r4, r5, r6, r7}
 80215a2:	4770      	bx	lr
 80215a4:	2e03      	cmp	r6, #3
 80215a6:	d8fb      	bhi.n	80215a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80215a8:	e8df f006 	tbb	[pc, r6]
 80215ac:	16140702 	.word	0x16140702
 80215b0:	9504      	str	r5, [sp, #16]
 80215b2:	4620      	mov	r0, r4
 80215b4:	bcf0      	pop	{r4, r5, r6, r7}
 80215b6:	f7ff be33 	b.w	8021220 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80215ba:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80215bc:	2800      	cmp	r0, #0
 80215be:	d0ef      	beq.n	80215a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80215c0:	6806      	ldr	r6, [r0, #0]
 80215c2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80215c6:	68f5      	ldr	r5, [r6, #12]
 80215c8:	4613      	mov	r3, r2
 80215ca:	46ac      	mov	ip, r5
 80215cc:	460a      	mov	r2, r1
 80215ce:	4621      	mov	r1, r4
 80215d0:	bcf0      	pop	{r4, r5, r6, r7}
 80215d2:	4760      	bx	ip
 80215d4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80215d6:	e7f1      	b.n	80215bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80215d8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80215da:	e7ef      	b.n	80215bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80215dc:	2e03      	cmp	r6, #3
 80215de:	d8df      	bhi.n	80215a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80215e0:	e8df f006 	tbb	[pc, r6]
 80215e4:	110f0702 	.word	0x110f0702
 80215e8:	9504      	str	r5, [sp, #16]
 80215ea:	4620      	mov	r0, r4
 80215ec:	bcf0      	pop	{r4, r5, r6, r7}
 80215ee:	f7ff beef 	b.w	80213d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80215f2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80215f4:	2800      	cmp	r0, #0
 80215f6:	d0d3      	beq.n	80215a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80215f8:	6806      	ldr	r6, [r0, #0]
 80215fa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80215fe:	68b5      	ldr	r5, [r6, #8]
 8021600:	e7e2      	b.n	80215c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8021602:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8021604:	e7f6      	b.n	80215f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8021606:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8021608:	e7f4      	b.n	80215f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0802160c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 802160c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021610:	4605      	mov	r5, r0
 8021612:	b08f      	sub	sp, #60	@ 0x3c
 8021614:	460c      	mov	r4, r1
 8021616:	461f      	mov	r7, r3
 8021618:	2b00      	cmp	r3, #0
 802161a:	d052      	beq.n	80216c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802161c:	6808      	ldr	r0, [r1, #0]
 802161e:	ab0a      	add	r3, sp, #40	@ 0x28
 8021620:	6849      	ldr	r1, [r1, #4]
 8021622:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80217ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8021626:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 80217f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 802162a:	c303      	stmia	r3!, {r0, r1}
 802162c:	6810      	ldr	r0, [r2, #0]
 802162e:	ab0c      	add	r3, sp, #48	@ 0x30
 8021630:	6851      	ldr	r1, [r2, #4]
 8021632:	c303      	stmia	r3!, {r0, r1}
 8021634:	a80a      	add	r0, sp, #40	@ 0x28
 8021636:	f7f8 f82d 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802163a:	4621      	mov	r1, r4
 802163c:	a80c      	add	r0, sp, #48	@ 0x30
 802163e:	f7f8 f86d 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021642:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021646:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802164a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802164e:	f8d8 0000 	ldr.w	r0, [r8]
 8021652:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021656:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 802165a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 802165e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8021662:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8021666:	440a      	add	r2, r1
 8021668:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802166c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021670:	4413      	add	r3, r2
 8021672:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021676:	6803      	ldr	r3, [r0, #0]
 8021678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802167a:	4798      	blx	r3
 802167c:	2fff      	cmp	r7, #255	@ 0xff
 802167e:	d023      	beq.n	80216c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021680:	f010 0f04 	tst.w	r0, #4
 8021684:	f8d8 0000 	ldr.w	r0, [r8]
 8021688:	d021      	beq.n	80216ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 802168a:	2100      	movs	r1, #0
 802168c:	f04f 0e01 	mov.w	lr, #1
 8021690:	f8d0 c000 	ldr.w	ip, [r0]
 8021694:	b2a4      	uxth	r4, r4
 8021696:	9106      	str	r1, [sp, #24]
 8021698:	b2b6      	uxth	r6, r6
 802169a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802169e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80216a2:	e9cd e107 	strd	lr, r1, [sp, #28]
 80216a6:	f8b9 e000 	ldrh.w	lr, [r9]
 80216aa:	9703      	str	r7, [sp, #12]
 80216ac:	9401      	str	r4, [sp, #4]
 80216ae:	9600      	str	r6, [sp, #0]
 80216b0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80216b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80216b8:	9102      	str	r1, [sp, #8]
 80216ba:	4629      	mov	r1, r5
 80216bc:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 80216c0:	47a0      	blx	r4
 80216c2:	b00f      	add	sp, #60	@ 0x3c
 80216c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80216c8:	f010 0f01 	tst.w	r0, #1
 80216cc:	e7da      	b.n	8021684 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80216ce:	6803      	ldr	r3, [r0, #0]
 80216d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216d2:	4798      	blx	r3
 80216d4:	f8b9 1000 	ldrh.w	r1, [r9]
 80216d8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80216dc:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80216e0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80216e4:	434c      	muls	r4, r1
 80216e6:	2fff      	cmp	r7, #255	@ 0xff
 80216e8:	fb01 2303 	mla	r3, r1, r3, r2
 80216ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80216f0:	eba1 0106 	sub.w	r1, r1, r6
 80216f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80216fc:	4418      	add	r0, r3
 80216fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021702:	eba3 0606 	sub.w	r6, r3, r6
 8021706:	4404      	add	r4, r0
 8021708:	ea4f 0646 	mov.w	r6, r6, lsl #1
 802170c:	d04a      	beq.n	80217a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 802170e:	43fa      	mvns	r2, r7
 8021710:	b2bb      	uxth	r3, r7
 8021712:	b2d7      	uxtb	r7, r2
 8021714:	42a0      	cmp	r0, r4
 8021716:	d263      	bcs.n	80217e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021718:	eb00 0e0c 	add.w	lr, r0, ip
 802171c:	4586      	cmp	lr, r0
 802171e:	f100 0803 	add.w	r8, r0, #3
 8021722:	d93a      	bls.n	802179a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8021724:	f835 2b02 	ldrh.w	r2, [r5], #2
 8021728:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 802172c:	00d0      	lsls	r0, r2, #3
 802172e:	fb19 f907 	smulbb	r9, r9, r7
 8021732:	b2c0      	uxtb	r0, r0
 8021734:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021738:	fb00 9003 	mla	r0, r0, r3, r9
 802173c:	b280      	uxth	r0, r0
 802173e:	f100 0901 	add.w	r9, r0, #1
 8021742:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021746:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 802174a:	fb19 f907 	smulbb	r9, r9, r7
 802174e:	1200      	asrs	r0, r0, #8
 8021750:	f808 0c03 	strb.w	r0, [r8, #-3]
 8021754:	10d0      	asrs	r0, r2, #3
 8021756:	1212      	asrs	r2, r2, #8
 8021758:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802175c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021760:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8021764:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021768:	fb00 9003 	mla	r0, r0, r3, r9
 802176c:	b280      	uxth	r0, r0
 802176e:	f100 0901 	add.w	r9, r0, #1
 8021772:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8021776:	1200      	asrs	r0, r0, #8
 8021778:	f808 0c02 	strb.w	r0, [r8, #-2]
 802177c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8021780:	fb10 f007 	smulbb	r0, r0, r7
 8021784:	fb02 0203 	mla	r2, r2, r3, r0
 8021788:	b292      	uxth	r2, r2
 802178a:	1c50      	adds	r0, r2, #1
 802178c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021790:	4640      	mov	r0, r8
 8021792:	1212      	asrs	r2, r2, #8
 8021794:	f808 2c01 	strb.w	r2, [r8, #-1]
 8021798:	e7c0      	b.n	802171c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802179a:	4408      	add	r0, r1
 802179c:	4435      	add	r5, r6
 802179e:	e7b9      	b.n	8021714 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80217a0:	4408      	add	r0, r1
 80217a2:	4435      	add	r5, r6
 80217a4:	42a0      	cmp	r0, r4
 80217a6:	d21b      	bcs.n	80217e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80217a8:	eb00 070c 	add.w	r7, r0, ip
 80217ac:	42b8      	cmp	r0, r7
 80217ae:	d2f7      	bcs.n	80217a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80217b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80217b4:	3003      	adds	r0, #3
 80217b6:	00da      	lsls	r2, r3, #3
 80217b8:	b2d2      	uxtb	r2, r2
 80217ba:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80217be:	f800 2c03 	strb.w	r2, [r0, #-3]
 80217c2:	10da      	asrs	r2, r3, #3
 80217c4:	121b      	asrs	r3, r3, #8
 80217c6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80217ca:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80217ce:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80217d2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80217d6:	f800 2c02 	strb.w	r2, [r0, #-2]
 80217da:	f800 3c01 	strb.w	r3, [r0, #-1]
 80217de:	e7e5      	b.n	80217ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80217e0:	4b02      	ldr	r3, [pc, #8]	@ (80217ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80217e2:	6818      	ldr	r0, [r3, #0]
 80217e4:	6803      	ldr	r3, [r0, #0]
 80217e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217e8:	4798      	blx	r3
 80217ea:	e76a      	b.n	80216c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80217ec:	24028520 	.word	0x24028520
 80217f0:	2402851a 	.word	0x2402851a

080217f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80217f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217f8:	b08a      	sub	sp, #40	@ 0x28
 80217fa:	460d      	mov	r5, r1
 80217fc:	4604      	mov	r4, r0
 80217fe:	461e      	mov	r6, r3
 8021800:	6808      	ldr	r0, [r1, #0]
 8021802:	ab06      	add	r3, sp, #24
 8021804:	6849      	ldr	r1, [r1, #4]
 8021806:	4f5d      	ldr	r7, [pc, #372]	@ (802197c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021808:	c303      	stmia	r3!, {r0, r1}
 802180a:	6810      	ldr	r0, [r2, #0]
 802180c:	ab08      	add	r3, sp, #32
 802180e:	6851      	ldr	r1, [r2, #4]
 8021810:	c303      	stmia	r3!, {r0, r1}
 8021812:	a806      	add	r0, sp, #24
 8021814:	f7f7 ff3e 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021818:	4629      	mov	r1, r5
 802181a:	a808      	add	r0, sp, #32
 802181c:	f7f7 ff7e 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021820:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021824:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8021828:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802182c:	6838      	ldr	r0, [r7, #0]
 802182e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021832:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8021836:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 802183a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802183e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021842:	440a      	add	r2, r1
 8021844:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021848:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802184c:	4413      	add	r3, r2
 802184e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8021852:	6803      	ldr	r3, [r0, #0]
 8021854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021856:	4798      	blx	r3
 8021858:	2eff      	cmp	r6, #255	@ 0xff
 802185a:	d119      	bne.n	8021890 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 802185c:	f010 0f20 	tst.w	r0, #32
 8021860:	6838      	ldr	r0, [r7, #0]
 8021862:	d018      	beq.n	8021896 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8021864:	b2ad      	uxth	r5, r5
 8021866:	2700      	movs	r7, #0
 8021868:	6801      	ldr	r1, [r0, #0]
 802186a:	9501      	str	r5, [sp, #4]
 802186c:	fa1f f588 	uxth.w	r5, r8
 8021870:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021874:	9500      	str	r5, [sp, #0]
 8021876:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802187a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 802187e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021882:	9602      	str	r6, [sp, #8]
 8021884:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8021886:	4621      	mov	r1, r4
 8021888:	47a8      	blx	r5
 802188a:	b00a      	add	sp, #40	@ 0x28
 802188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021890:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021894:	e7e4      	b.n	8021860 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8021896:	6803      	ldr	r3, [r0, #0]
 8021898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802189a:	4798      	blx	r3
 802189c:	4b38      	ldr	r3, [pc, #224]	@ (8021980 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802189e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80218a2:	f8b3 c000 	ldrh.w	ip, [r3]
 80218a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80218aa:	fb0c f505 	mul.w	r5, ip, r5
 80218ae:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80218b2:	fb0c 2303 	mla	r3, ip, r3, r2
 80218b6:	ebac 0c08 	sub.w	ip, ip, r8
 80218ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80218be:	ebae 0e08 	sub.w	lr, lr, r8
 80218c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80218ca:	4418      	add	r0, r3
 80218cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80218d0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80218d4:	4405      	add	r5, r0
 80218d6:	42a8      	cmp	r0, r5
 80218d8:	d24a      	bcs.n	8021970 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80218da:	eb00 0803 	add.w	r8, r0, r3
 80218de:	4540      	cmp	r0, r8
 80218e0:	d243      	bcs.n	802196a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80218e2:	78e2      	ldrb	r2, [r4, #3]
 80218e4:	b15a      	cbz	r2, 80218fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80218e6:	2aff      	cmp	r2, #255	@ 0xff
 80218e8:	f894 9000 	ldrb.w	r9, [r4]
 80218ec:	d10a      	bne.n	8021904 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80218ee:	2eff      	cmp	r6, #255	@ 0xff
 80218f0:	d108      	bne.n	8021904 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80218f2:	f880 9000 	strb.w	r9, [r0]
 80218f6:	7862      	ldrb	r2, [r4, #1]
 80218f8:	7042      	strb	r2, [r0, #1]
 80218fa:	78a2      	ldrb	r2, [r4, #2]
 80218fc:	7082      	strb	r2, [r0, #2]
 80218fe:	3003      	adds	r0, #3
 8021900:	3404      	adds	r4, #4
 8021902:	e7ec      	b.n	80218de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8021904:	4372      	muls	r2, r6
 8021906:	1c51      	adds	r1, r2, #1
 8021908:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802190c:	1209      	asrs	r1, r1, #8
 802190e:	fa1f fa81 	uxth.w	sl, r1
 8021912:	43c9      	mvns	r1, r1
 8021914:	fb19 f90a 	smulbb	r9, r9, sl
 8021918:	b2ca      	uxtb	r2, r1
 802191a:	7801      	ldrb	r1, [r0, #0]
 802191c:	fb01 9902 	mla	r9, r1, r2, r9
 8021920:	fa1f f989 	uxth.w	r9, r9
 8021924:	f109 0101 	add.w	r1, r9, #1
 8021928:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802192c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021930:	f880 9000 	strb.w	r9, [r0]
 8021934:	f890 9001 	ldrb.w	r9, [r0, #1]
 8021938:	7861      	ldrb	r1, [r4, #1]
 802193a:	fb19 f902 	smulbb	r9, r9, r2
 802193e:	fb01 910a 	mla	r1, r1, sl, r9
 8021942:	b289      	uxth	r1, r1
 8021944:	f101 0901 	add.w	r9, r1, #1
 8021948:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 802194c:	1209      	asrs	r1, r1, #8
 802194e:	7041      	strb	r1, [r0, #1]
 8021950:	7881      	ldrb	r1, [r0, #2]
 8021952:	f894 9002 	ldrb.w	r9, [r4, #2]
 8021956:	fb11 f202 	smulbb	r2, r1, r2
 802195a:	fb09 220a 	mla	r2, r9, sl, r2
 802195e:	b292      	uxth	r2, r2
 8021960:	1c51      	adds	r1, r2, #1
 8021962:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021966:	1212      	asrs	r2, r2, #8
 8021968:	e7c8      	b.n	80218fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 802196a:	4460      	add	r0, ip
 802196c:	4474      	add	r4, lr
 802196e:	e7b2      	b.n	80218d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8021970:	6838      	ldr	r0, [r7, #0]
 8021972:	6803      	ldr	r3, [r0, #0]
 8021974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021976:	4798      	blx	r3
 8021978:	e787      	b.n	802188a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802197a:	bf00      	nop
 802197c:	24028520 	.word	0x24028520
 8021980:	2402851a 	.word	0x2402851a

08021984 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021988:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 802198c:	4607      	mov	r7, r0
 802198e:	460c      	mov	r4, r1
 8021990:	4692      	mov	sl, r2
 8021992:	4699      	mov	r9, r3
 8021994:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021996:	b335      	cbz	r5, 80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021998:	4608      	mov	r0, r1
 802199a:	f7fb fd93 	bl	801d4c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802199e:	4680      	mov	r8, r0
 80219a0:	4620      	mov	r0, r4
 80219a2:	f7fb fdc3 	bl	801d52c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80219a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80219aa:	4620      	mov	r0, r4
 80219ac:	f8ad a008 	strh.w	sl, [sp, #8]
 80219b0:	f8ad 900a 	strh.w	r9, [sp, #10]
 80219b4:	f8ad 800c 	strh.w	r8, [sp, #12]
 80219b8:	f7fb fefa 	bl	801d7b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80219bc:	2810      	cmp	r0, #16
 80219be:	d812      	bhi.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80219c0:	e8df f000 	tbb	[pc, r0]
 80219c4:	11092d24 	.word	0x11092d24
 80219c8:	11111111 	.word	0x11111111
 80219cc:	14111111 	.word	0x14111111
 80219d0:	4c111111 	.word	0x4c111111
 80219d4:	3c          	.byte	0x3c
 80219d5:	00          	.byte	0x00
 80219d6:	4620      	mov	r0, r4
 80219d8:	f7fb fe66 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80219dc:	462b      	mov	r3, r5
 80219de:	4632      	mov	r2, r6
 80219e0:	a902      	add	r1, sp, #8
 80219e2:	f7ff ff07 	bl	80217f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80219e6:	b004      	add	sp, #16
 80219e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219ec:	4620      	mov	r0, r4
 80219ee:	f7fb fe5b 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80219f2:	4680      	mov	r8, r0
 80219f4:	4620      	mov	r0, r4
 80219f6:	f7fb fe87 	bl	801d708 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80219fa:	ab02      	add	r3, sp, #8
 80219fc:	4602      	mov	r2, r0
 80219fe:	4641      	mov	r1, r8
 8021a00:	4638      	mov	r0, r7
 8021a02:	e9cd 6500 	strd	r6, r5, [sp]
 8021a06:	f7ff fdbf 	bl	8021588 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021a0a:	e7ec      	b.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	f7fb fe4b 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021a12:	462b      	mov	r3, r5
 8021a14:	4632      	mov	r2, r6
 8021a16:	a902      	add	r1, sp, #8
 8021a18:	f7ff fdf8 	bl	802160c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021a1c:	e7e3      	b.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a1e:	683b      	ldr	r3, [r7, #0]
 8021a20:	4620      	mov	r0, r4
 8021a22:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8021a26:	f7fb fe3f 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	4601      	mov	r1, r0
 8021a2e:	aa02      	add	r2, sp, #8
 8021a30:	4638      	mov	r0, r7
 8021a32:	e9cd 5300 	strd	r5, r3, [sp]
 8021a36:	4633      	mov	r3, r6
 8021a38:	47c0      	blx	r8
 8021a3a:	e7d4      	b.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a3c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8021a3e:	2f00      	cmp	r7, #0
 8021a40:	d0d1      	beq.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a42:	683b      	ldr	r3, [r7, #0]
 8021a44:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8021a48:	4620      	mov	r0, r4
 8021a4a:	f7fb fe2d 	bl	801d6a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021a4e:	9500      	str	r5, [sp, #0]
 8021a50:	4601      	mov	r1, r0
 8021a52:	4633      	mov	r3, r6
 8021a54:	aa02      	add	r2, sp, #8
 8021a56:	4638      	mov	r0, r7
 8021a58:	47c0      	blx	r8
 8021a5a:	e7c4      	b.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a5c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8021a5e:	2f00      	cmp	r7, #0
 8021a60:	d0c1      	beq.n	80219e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021a62:	683b      	ldr	r3, [r7, #0]
 8021a64:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8021a68:	e7ee      	b.n	8021a48 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08021a6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021a6a:	b4f0      	push	{r4, r5, r6, r7}
 8021a6c:	4616      	mov	r6, r2
 8021a6e:	461c      	mov	r4, r3
 8021a70:	460d      	mov	r5, r1
 8021a72:	9a04      	ldr	r2, [sp, #16]
 8021a74:	2e01      	cmp	r6, #1
 8021a76:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021a7a:	d00e      	beq.n	8021a9a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8021a7c:	d303      	bcc.n	8021a86 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8021a7e:	2e02      	cmp	r6, #2
 8021a80:	d006      	beq.n	8021a90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8021a82:	bcf0      	pop	{r4, r5, r6, r7}
 8021a84:	4770      	bx	lr
 8021a86:	4621      	mov	r1, r4
 8021a88:	4628      	mov	r0, r5
 8021a8a:	bcf0      	pop	{r4, r5, r6, r7}
 8021a8c:	f7ff bdbe 	b.w	802160c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021a90:	4621      	mov	r1, r4
 8021a92:	4628      	mov	r0, r5
 8021a94:	bcf0      	pop	{r4, r5, r6, r7}
 8021a96:	f7ff bead 	b.w	80217f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021a9a:	6805      	ldr	r5, [r0, #0]
 8021a9c:	2600      	movs	r6, #0
 8021a9e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021aa2:	68ed      	ldr	r5, [r5, #12]
 8021aa4:	4613      	mov	r3, r2
 8021aa6:	4622      	mov	r2, r4
 8021aa8:	46ac      	mov	ip, r5
 8021aaa:	bcf0      	pop	{r4, r5, r6, r7}
 8021aac:	4760      	bx	ip
	...

08021ab0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8021ab0:	b160      	cbz	r0, 8021acc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8021ab2:	2903      	cmp	r1, #3
 8021ab4:	d818      	bhi.n	8021ae8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021ab6:	e8df f001 	tbb	[pc, r1]
 8021aba:	1902      	.short	0x1902
 8021abc:	1b06      	.short	0x1b06
 8021abe:	4b0e      	ldr	r3, [pc, #56]	@ (8021af8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021ac0:	8818      	ldrh	r0, [r3, #0]
 8021ac2:	4240      	negs	r0, r0
 8021ac4:	4770      	bx	lr
 8021ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8021af8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021ac8:	8818      	ldrh	r0, [r3, #0]
 8021aca:	4770      	bx	lr
 8021acc:	2903      	cmp	r1, #3
 8021ace:	d80b      	bhi.n	8021ae8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021ad0:	a301      	add	r3, pc, #4	@ (adr r3, 8021ad8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8021ad2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021ad6:	bf00      	nop
 8021ad8:	08021aed 	.word	0x08021aed
 8021adc:	08021ac7 	.word	0x08021ac7
 8021ae0:	08021af1 	.word	0x08021af1
 8021ae4:	08021abf 	.word	0x08021abf
 8021ae8:	2000      	movs	r0, #0
 8021aea:	4770      	bx	lr
 8021aec:	2001      	movs	r0, #1
 8021aee:	4770      	bx	lr
 8021af0:	f04f 30ff 	mov.w	r0, #4294967295
 8021af4:	4770      	bx	lr
 8021af6:	bf00      	nop
 8021af8:	2402851a 	.word	0x2402851a

08021afc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8021afc:	b160      	cbz	r0, 8021b18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8021afe:	2903      	cmp	r1, #3
 8021b00:	d818      	bhi.n	8021b34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8021b02:	e8df f001 	tbb	[pc, r1]
 8021b06:	0219      	.short	0x0219
 8021b08:	051b      	.short	0x051b
 8021b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8021b44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021b0c:	8818      	ldrh	r0, [r3, #0]
 8021b0e:	4770      	bx	lr
 8021b10:	4b0c      	ldr	r3, [pc, #48]	@ (8021b44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021b12:	8818      	ldrh	r0, [r3, #0]
 8021b14:	4240      	negs	r0, r0
 8021b16:	4770      	bx	lr
 8021b18:	2903      	cmp	r1, #3
 8021b1a:	d80b      	bhi.n	8021b34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8021b1c:	a301      	add	r3, pc, #4	@ (adr r3, 8021b24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8021b1e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021b22:	bf00      	nop
 8021b24:	08021b0b 	.word	0x08021b0b
 8021b28:	08021b3d 	.word	0x08021b3d
 8021b2c:	08021b11 	.word	0x08021b11
 8021b30:	08021b39 	.word	0x08021b39
 8021b34:	2000      	movs	r0, #0
 8021b36:	4770      	bx	lr
 8021b38:	2001      	movs	r0, #1
 8021b3a:	4770      	bx	lr
 8021b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8021b40:	4770      	bx	lr
 8021b42:	bf00      	nop
 8021b44:	2402851a 	.word	0x2402851a

08021b48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b4c:	b097      	sub	sp, #92	@ 0x5c
 8021b4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021b50:	a912      	add	r1, sp, #72	@ 0x48
 8021b52:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8021b56:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8021b5a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8021b5e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8021b62:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8021b66:	e881 000c 	stmia.w	r1, {r2, r3}
 8021b6a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8021b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b70:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8021b74:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8021b78:	9311      	str	r3, [sp, #68]	@ 0x44
 8021b7a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8021b7e:	798d      	ldrb	r5, [r1, #6]
 8021b80:	930c      	str	r3, [sp, #48]	@ 0x30
 8021b82:	7b4b      	ldrb	r3, [r1, #13]
 8021b84:	0158      	lsls	r0, r3, #5
 8021b86:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8021b8a:	4328      	orrs	r0, r5
 8021b8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8021b8e:	f000 817c 	beq.w	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021b92:	011b      	lsls	r3, r3, #4
 8021b94:	79c8      	ldrb	r0, [r1, #7]
 8021b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021b9a:	4303      	orrs	r3, r0
 8021b9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8021b9e:	f000 8174 	beq.w	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021ba2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021ba6:	b29b      	uxth	r3, r3
 8021ba8:	2f00      	cmp	r7, #0
 8021baa:	f000 8116 	beq.w	8021dda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8021bae:	1aff      	subs	r7, r7, r3
 8021bb0:	b2bf      	uxth	r7, r7
 8021bb2:	043b      	lsls	r3, r7, #16
 8021bb4:	d502      	bpl.n	8021bbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021bb6:	1bf6      	subs	r6, r6, r7
 8021bb8:	2700      	movs	r7, #0
 8021bba:	b236      	sxth	r6, r6
 8021bbc:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021bc0:	a812      	add	r0, sp, #72	@ 0x48
 8021bc2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8021bc6:	428e      	cmp	r6, r1
 8021bc8:	b28b      	uxth	r3, r1
 8021bca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021bce:	bfbf      	itttt	lt
 8021bd0:	18ff      	addlt	r7, r7, r3
 8021bd2:	1bbe      	sublt	r6, r7, r6
 8021bd4:	b2b7      	uxthlt	r7, r6
 8021bd6:	460e      	movlt	r6, r1
 8021bd8:	8891      	ldrh	r1, [r2, #4]
 8021bda:	440b      	add	r3, r1
 8021bdc:	4631      	mov	r1, r6
 8021bde:	b21b      	sxth	r3, r3
 8021be0:	9310      	str	r3, [sp, #64]	@ 0x40
 8021be2:	88d3      	ldrh	r3, [r2, #6]
 8021be4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021be6:	449a      	add	sl, r3
 8021be8:	fa0f f38a 	sxth.w	r3, sl
 8021bec:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8021bf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021bf2:	4bb5      	ldr	r3, [pc, #724]	@ (8021ec8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8021bf4:	f893 b000 	ldrb.w	fp, [r3]
 8021bf8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021bfc:	f1dc 0300 	rsbs	r3, ip, #0
 8021c00:	eb43 030c 	adc.w	r3, r3, ip
 8021c04:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c06:	464b      	mov	r3, r9
 8021c08:	f7f7 fbb9 	bl	801937e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021c0c:	4631      	mov	r1, r6
 8021c0e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8021c12:	464b      	mov	r3, r9
 8021c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c16:	a812      	add	r0, sp, #72	@ 0x48
 8021c18:	f7f7 fbce 	bl	80193b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021c1c:	a916      	add	r1, sp, #88	@ 0x58
 8021c1e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021c22:	a815      	add	r0, sp, #84	@ 0x54
 8021c24:	f7f7 fcf4 	bl	8019610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021c28:	f1b9 0f00 	cmp.w	r9, #0
 8021c2c:	f040 80d8 	bne.w	8021de0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8021c30:	f1bb 0f01 	cmp.w	fp, #1
 8021c34:	f040 80dc 	bne.w	8021df0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8021c38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021c3a:	b153      	cbz	r3, 8021c52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021c3c:	2508      	movs	r5, #8
 8021c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c40:	fb95 f3f8 	sdiv	r3, r5, r8
 8021c44:	1e5d      	subs	r5, r3, #1
 8021c46:	4415      	add	r5, r2
 8021c48:	fb95 f5f3 	sdiv	r5, r5, r3
 8021c4c:	fb15 f503 	smulbb	r5, r5, r3
 8021c50:	b2ad      	uxth	r5, r5
 8021c52:	b907      	cbnz	r7, 8021c56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8021c54:	b16c      	cbz	r4, 8021c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8021c56:	fb04 7305 	mla	r3, r4, r5, r7
 8021c5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021c5c:	ebaa 0a04 	sub.w	sl, sl, r4
 8021c60:	fb08 f303 	mul.w	r3, r8, r3
 8021c64:	fa1f fa8a 	uxth.w	sl, sl
 8021c68:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021c6c:	f003 0407 	and.w	r4, r3, #7
 8021c70:	9226      	str	r2, [sp, #152]	@ 0x98
 8021c72:	4649      	mov	r1, r9
 8021c74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021c76:	f7ff ff1b 	bl	8021ab0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8021c7a:	4683      	mov	fp, r0
 8021c7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021c7e:	f7ff ff3d 	bl	8021afc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8021c82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021c84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c86:	4681      	mov	r9, r0
 8021c88:	1a9b      	subs	r3, r3, r2
 8021c8a:	459a      	cmp	sl, r3
 8021c8c:	bfa8      	it	ge
 8021c8e:	469a      	movge	sl, r3
 8021c90:	f1ba 0f00 	cmp.w	sl, #0
 8021c94:	f340 80f9 	ble.w	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021c98:	1bf6      	subs	r6, r6, r7
 8021c9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c9c:	1b9e      	subs	r6, r3, r6
 8021c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ca0:	429e      	cmp	r6, r3
 8021ca2:	bfd4      	ite	le
 8021ca4:	ebc7 0706 	rsble	r7, r7, r6
 8021ca8:	ebc7 0703 	rsbgt	r7, r7, r3
 8021cac:	2f00      	cmp	r7, #0
 8021cae:	f340 80ec 	ble.w	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021cb2:	1bed      	subs	r5, r5, r7
 8021cb4:	fb08 f305 	mul.w	r3, r8, r5
 8021cb8:	930d      	str	r3, [sp, #52]	@ 0x34
 8021cba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021cbc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021cc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8021cc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021cc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021cc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021cca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021ccc:	b2db      	uxtb	r3, r3
 8021cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8021cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	f040 80de 	bne.w	8021e94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8021cd8:	4b7c      	ldr	r3, [pc, #496]	@ (8021ecc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8021cda:	6818      	ldr	r0, [r3, #0]
 8021cdc:	6803      	ldr	r3, [r0, #0]
 8021cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ce0:	4798      	blx	r3
 8021ce2:	2301      	movs	r3, #1
 8021ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8021ed0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8021ce6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8021cea:	fb07 9b1b 	mls	fp, r7, fp, r9
 8021cee:	fa03 f308 	lsl.w	r3, r3, r8
 8021cf2:	8811      	ldrh	r1, [r2, #0]
 8021cf4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8021cf8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8021cfc:	3b01      	subs	r3, #1
 8021cfe:	fb06 bb07 	mla	fp, r6, r7, fp
 8021d02:	b2db      	uxtb	r3, r3
 8021d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8021d06:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8021d0a:	fb01 2303 	mla	r3, r1, r3, r2
 8021d0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d12:	18c3      	adds	r3, r0, r3
 8021d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021d18:	781a      	ldrb	r2, [r3, #0]
 8021d1a:	4122      	asrs	r2, r4
 8021d1c:	b2d2      	uxtb	r2, r2
 8021d1e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021d22:	f0c0 80d7 	bcc.w	8021ed4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8021d26:	46be      	mov	lr, r7
 8021d28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021d2a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8021d2e:	f0c0 80ba 	bcc.w	8021ea6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8021d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021d34:	4013      	ands	r3, r2
 8021d36:	d041      	beq.n	8021dbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8021d38:	20ff      	movs	r0, #255	@ 0xff
 8021d3a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021d3c:	fb90 f5f5 	sdiv	r5, r0, r5
 8021d40:	436b      	muls	r3, r5
 8021d42:	2bfe      	cmp	r3, #254	@ 0xfe
 8021d44:	dd03      	ble.n	8021d4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8021d46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021d48:	4285      	cmp	r5, r0
 8021d4a:	f000 80a5 	beq.w	8021e98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8021d4e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021d50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021d52:	fb15 f303 	smulbb	r3, r5, r3
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	1c5d      	adds	r5, r3, #1
 8021d5a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021d5e:	780d      	ldrb	r5, [r1, #0]
 8021d60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d64:	fa1f fc83 	uxth.w	ip, r3
 8021d68:	43db      	mvns	r3, r3
 8021d6a:	fb10 f90c 	smulbb	r9, r0, ip
 8021d6e:	b2db      	uxtb	r3, r3
 8021d70:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021d72:	fb05 9503 	mla	r5, r5, r3, r9
 8021d76:	b2ad      	uxth	r5, r5
 8021d78:	f105 0901 	add.w	r9, r5, #1
 8021d7c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021d80:	fb10 f90c 	smulbb	r9, r0, ip
 8021d84:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021d86:	122d      	asrs	r5, r5, #8
 8021d88:	fb10 fc0c 	smulbb	ip, r0, ip
 8021d8c:	700d      	strb	r5, [r1, #0]
 8021d8e:	784d      	ldrb	r5, [r1, #1]
 8021d90:	fb05 9503 	mla	r5, r5, r3, r9
 8021d94:	b2ad      	uxth	r5, r5
 8021d96:	f105 0901 	add.w	r9, r5, #1
 8021d9a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021d9e:	122d      	asrs	r5, r5, #8
 8021da0:	704d      	strb	r5, [r1, #1]
 8021da2:	788d      	ldrb	r5, [r1, #2]
 8021da4:	fb05 cc03 	mla	ip, r5, r3, ip
 8021da8:	fa1f fc8c 	uxth.w	ip, ip
 8021dac:	f10c 0301 	add.w	r3, ip, #1
 8021db0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021db4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021db8:	f881 c002 	strb.w	ip, [r1, #2]
 8021dbc:	4444      	add	r4, r8
 8021dbe:	4431      	add	r1, r6
 8021dc0:	b2a4      	uxth	r4, r4
 8021dc2:	2c07      	cmp	r4, #7
 8021dc4:	bf89      	itett	hi
 8021dc6:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8021dc8:	fa42 f208 	asrls.w	r2, r2, r8
 8021dcc:	2400      	movhi	r4, #0
 8021dce:	785a      	ldrbhi	r2, [r3, #1]
 8021dd0:	bf8a      	itet	hi
 8021dd2:	3301      	addhi	r3, #1
 8021dd4:	b2d2      	uxtbls	r2, r2
 8021dd6:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8021dd8:	e7a7      	b.n	8021d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8021dda:	441e      	add	r6, r3
 8021ddc:	b236      	sxth	r6, r6
 8021dde:	e6ed      	b.n	8021bbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021de0:	f1b9 0f01 	cmp.w	r9, #1
 8021de4:	f47f af28 	bne.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021de8:	f1bb 0f01 	cmp.w	fp, #1
 8021dec:	f47f af24 	bne.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021df0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8021ecc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8021df4:	f8db 0000 	ldr.w	r0, [fp]
 8021df8:	6803      	ldr	r3, [r0, #0]
 8021dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021dfc:	4798      	blx	r3
 8021dfe:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8021e02:	465a      	mov	r2, fp
 8021e04:	d006      	beq.n	8021e14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021e06:	f1b8 0f04 	cmp.w	r8, #4
 8021e0a:	d141      	bne.n	8021e90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8021e0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021e0e:	3300      	adds	r3, #0
 8021e10:	bf18      	it	ne
 8021e12:	2301      	movne	r3, #1
 8021e14:	0580      	lsls	r0, r0, #22
 8021e16:	d566      	bpl.n	8021ee6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021e18:	f1b8 0f08 	cmp.w	r8, #8
 8021e1c:	d163      	bne.n	8021ee6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	bf0c      	ite	eq
 8021e22:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8021e26:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8021e2a:	2f00      	cmp	r7, #0
 8021e2c:	f47f af04 	bne.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021e30:	2c00      	cmp	r4, #0
 8021e32:	f47f af01 	bne.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021e3a:	18f3      	adds	r3, r6, r3
 8021e3c:	4283      	cmp	r3, r0
 8021e3e:	f73f aefb 	bgt.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021e42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e46:	4403      	add	r3, r0
 8021e48:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021e4a:	4283      	cmp	r3, r0
 8021e4c:	f73f aef4 	bgt.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021e50:	f1b8 0f08 	cmp.w	r8, #8
 8021e54:	6810      	ldr	r0, [r2, #0]
 8021e56:	f04f 0600 	mov.w	r6, #0
 8021e5a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8021e5e:	bf18      	it	ne
 8021e60:	3501      	addne	r5, #1
 8021e62:	6804      	ldr	r4, [r0, #0]
 8021e64:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8021e68:	bf18      	it	ne
 8021e6a:	f025 0501 	bicne.w	r5, r5, #1
 8021e6e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021e72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021e74:	bf18      	it	ne
 8021e76:	b2ad      	uxthne	r5, r5
 8021e78:	9104      	str	r1, [sp, #16]
 8021e7a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021e7c:	e9cd 5a00 	strd	r5, sl, [sp]
 8021e80:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021e84:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8021e86:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8021e88:	47a0      	blx	r4
 8021e8a:	b017      	add	sp, #92	@ 0x5c
 8021e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e90:	2300      	movs	r3, #0
 8021e92:	e7bf      	b.n	8021e14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021e94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021e96:	e724      	b.n	8021ce2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8021e98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e9a:	700b      	strb	r3, [r1, #0]
 8021e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e9e:	704b      	strb	r3, [r1, #1]
 8021ea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ea2:	708b      	strb	r3, [r1, #2]
 8021ea4:	e78a      	b.n	8021dbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8021ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ea8:	b153      	cbz	r3, 8021ec0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021eaa:	441c      	add	r4, r3
 8021eac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021eae:	b2a4      	uxth	r4, r4
 8021eb0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021eb4:	f004 0407 	and.w	r4, r4, #7
 8021eb8:	781a      	ldrb	r2, [r3, #0]
 8021eba:	9326      	str	r3, [sp, #152]	@ 0x98
 8021ebc:	4122      	asrs	r2, r4
 8021ebe:	b2d2      	uxtb	r2, r2
 8021ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ec2:	445b      	add	r3, fp
 8021ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ec6:	e72a      	b.n	8021d1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8021ec8:	24028518 	.word	0x24028518
 8021ecc:	24028520 	.word	0x24028520
 8021ed0:	2402851a 	.word	0x2402851a
 8021ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	d1d7      	bne.n	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021eda:	4b06      	ldr	r3, [pc, #24]	@ (8021ef4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8021edc:	6818      	ldr	r0, [r3, #0]
 8021ede:	6803      	ldr	r3, [r0, #0]
 8021ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ee2:	4798      	blx	r3
 8021ee4:	e7d1      	b.n	8021e8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	f43f aea6 	beq.w	8021c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021ef0:	e79b      	b.n	8021e2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8021ef2:	bf00      	nop
 8021ef4:	24028520 	.word	0x24028520

08021ef8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021ef8:	b538      	push	{r3, r4, r5, lr}
 8021efa:	4c15      	ldr	r4, [pc, #84]	@ (8021f50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021efc:	4605      	mov	r5, r0
 8021efe:	7823      	ldrb	r3, [r4, #0]
 8021f00:	f3bf 8f5b 	dmb	ish
 8021f04:	07da      	lsls	r2, r3, #31
 8021f06:	d40b      	bmi.n	8021f20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021f08:	4620      	mov	r0, r4
 8021f0a:	f006 f8f7 	bl	80280fc <__cxa_guard_acquire>
 8021f0e:	b138      	cbz	r0, 8021f20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021f10:	4620      	mov	r0, r4
 8021f12:	f006 f8ff 	bl	8028114 <__cxa_guard_release>
 8021f16:	4a0f      	ldr	r2, [pc, #60]	@ (8021f54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021f18:	490f      	ldr	r1, [pc, #60]	@ (8021f58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021f1a:	4810      	ldr	r0, [pc, #64]	@ (8021f5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021f1c:	f006 f8e7 	bl	80280ee <__aeabi_atexit>
 8021f20:	4c0f      	ldr	r4, [pc, #60]	@ (8021f60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021f22:	7823      	ldrb	r3, [r4, #0]
 8021f24:	f3bf 8f5b 	dmb	ish
 8021f28:	07db      	lsls	r3, r3, #31
 8021f2a:	d40b      	bmi.n	8021f44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021f2c:	4620      	mov	r0, r4
 8021f2e:	f006 f8e5 	bl	80280fc <__cxa_guard_acquire>
 8021f32:	b138      	cbz	r0, 8021f44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021f34:	4620      	mov	r0, r4
 8021f36:	f006 f8ed 	bl	8028114 <__cxa_guard_release>
 8021f3a:	4a06      	ldr	r2, [pc, #24]	@ (8021f54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021f3c:	4909      	ldr	r1, [pc, #36]	@ (8021f64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021f3e:	480a      	ldr	r0, [pc, #40]	@ (8021f68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021f40:	f006 f8d5 	bl	80280ee <__aeabi_atexit>
 8021f44:	4b05      	ldr	r3, [pc, #20]	@ (8021f5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021f46:	616b      	str	r3, [r5, #20]
 8021f48:	4b07      	ldr	r3, [pc, #28]	@ (8021f68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021f4a:	61ab      	str	r3, [r5, #24]
 8021f4c:	bd38      	pop	{r3, r4, r5, pc}
 8021f4e:	bf00      	nop
 8021f50:	24028604 	.word	0x24028604
 8021f54:	24000000 	.word	0x24000000
 8021f58:	0801f1e9 	.word	0x0801f1e9
 8021f5c:	240000c8 	.word	0x240000c8
 8021f60:	24028608 	.word	0x24028608
 8021f64:	0801f1e7 	.word	0x0801f1e7
 8021f68:	240000cc 	.word	0x240000cc

08021f6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021f6c:	b538      	push	{r3, r4, r5, lr}
 8021f6e:	4c15      	ldr	r4, [pc, #84]	@ (8021fc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021f70:	4605      	mov	r5, r0
 8021f72:	7823      	ldrb	r3, [r4, #0]
 8021f74:	f3bf 8f5b 	dmb	ish
 8021f78:	07da      	lsls	r2, r3, #31
 8021f7a:	d40b      	bmi.n	8021f94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021f7c:	4620      	mov	r0, r4
 8021f7e:	f006 f8bd 	bl	80280fc <__cxa_guard_acquire>
 8021f82:	b138      	cbz	r0, 8021f94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021f84:	4620      	mov	r0, r4
 8021f86:	f006 f8c5 	bl	8028114 <__cxa_guard_release>
 8021f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8021fc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021f8c:	490f      	ldr	r1, [pc, #60]	@ (8021fcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021f8e:	4810      	ldr	r0, [pc, #64]	@ (8021fd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021f90:	f006 f8ad 	bl	80280ee <__aeabi_atexit>
 8021f94:	4c0f      	ldr	r4, [pc, #60]	@ (8021fd4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021f96:	7823      	ldrb	r3, [r4, #0]
 8021f98:	f3bf 8f5b 	dmb	ish
 8021f9c:	07db      	lsls	r3, r3, #31
 8021f9e:	d40b      	bmi.n	8021fb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021fa0:	4620      	mov	r0, r4
 8021fa2:	f006 f8ab 	bl	80280fc <__cxa_guard_acquire>
 8021fa6:	b138      	cbz	r0, 8021fb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021fa8:	4620      	mov	r0, r4
 8021faa:	f006 f8b3 	bl	8028114 <__cxa_guard_release>
 8021fae:	4a06      	ldr	r2, [pc, #24]	@ (8021fc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021fb0:	4909      	ldr	r1, [pc, #36]	@ (8021fd8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021fb2:	480a      	ldr	r0, [pc, #40]	@ (8021fdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021fb4:	f006 f89b 	bl	80280ee <__aeabi_atexit>
 8021fb8:	4b05      	ldr	r3, [pc, #20]	@ (8021fd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021fba:	60eb      	str	r3, [r5, #12]
 8021fbc:	4b07      	ldr	r3, [pc, #28]	@ (8021fdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021fbe:	612b      	str	r3, [r5, #16]
 8021fc0:	bd38      	pop	{r3, r4, r5, pc}
 8021fc2:	bf00      	nop
 8021fc4:	240285e4 	.word	0x240285e4
 8021fc8:	24000000 	.word	0x24000000
 8021fcc:	0801f1ed 	.word	0x0801f1ed
 8021fd0:	240000a8 	.word	0x240000a8
 8021fd4:	240285e8 	.word	0x240285e8
 8021fd8:	0801f1eb 	.word	0x0801f1eb
 8021fdc:	240000ac 	.word	0x240000ac

08021fe0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8021fe0:	b510      	push	{r4, lr}
 8021fe2:	4604      	mov	r4, r0
 8021fe4:	f7ff ff88 	bl	8021ef8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021fe8:	4620      	mov	r0, r4
 8021fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fee:	f7ff bfbd 	b.w	8021f6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021ff4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021ff4:	b538      	push	{r3, r4, r5, lr}
 8021ff6:	4c15      	ldr	r4, [pc, #84]	@ (802204c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021ff8:	4605      	mov	r5, r0
 8021ffa:	7823      	ldrb	r3, [r4, #0]
 8021ffc:	f3bf 8f5b 	dmb	ish
 8022000:	07da      	lsls	r2, r3, #31
 8022002:	d40b      	bmi.n	802201c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022004:	4620      	mov	r0, r4
 8022006:	f006 f879 	bl	80280fc <__cxa_guard_acquire>
 802200a:	b138      	cbz	r0, 802201c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802200c:	4620      	mov	r0, r4
 802200e:	f006 f881 	bl	8028114 <__cxa_guard_release>
 8022012:	4a0f      	ldr	r2, [pc, #60]	@ (8022050 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022014:	490f      	ldr	r1, [pc, #60]	@ (8022054 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022016:	4810      	ldr	r0, [pc, #64]	@ (8022058 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022018:	f006 f869 	bl	80280ee <__aeabi_atexit>
 802201c:	4c0f      	ldr	r4, [pc, #60]	@ (802205c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802201e:	7823      	ldrb	r3, [r4, #0]
 8022020:	f3bf 8f5b 	dmb	ish
 8022024:	07db      	lsls	r3, r3, #31
 8022026:	d40b      	bmi.n	8022040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022028:	4620      	mov	r0, r4
 802202a:	f006 f867 	bl	80280fc <__cxa_guard_acquire>
 802202e:	b138      	cbz	r0, 8022040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022030:	4620      	mov	r0, r4
 8022032:	f006 f86f 	bl	8028114 <__cxa_guard_release>
 8022036:	4a06      	ldr	r2, [pc, #24]	@ (8022050 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022038:	4909      	ldr	r1, [pc, #36]	@ (8022060 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802203a:	480a      	ldr	r0, [pc, #40]	@ (8022064 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802203c:	f006 f857 	bl	80280ee <__aeabi_atexit>
 8022040:	4b05      	ldr	r3, [pc, #20]	@ (8022058 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022042:	626b      	str	r3, [r5, #36]	@ 0x24
 8022044:	4b07      	ldr	r3, [pc, #28]	@ (8022064 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022046:	62ab      	str	r3, [r5, #40]	@ 0x28
 8022048:	bd38      	pop	{r3, r4, r5, pc}
 802204a:	bf00      	nop
 802204c:	2402860c 	.word	0x2402860c
 8022050:	24000000 	.word	0x24000000
 8022054:	0801f1e1 	.word	0x0801f1e1
 8022058:	240000d0 	.word	0x240000d0
 802205c:	24028610 	.word	0x24028610
 8022060:	0801f1df 	.word	0x0801f1df
 8022064:	240000d4 	.word	0x240000d4

08022068 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022068:	b538      	push	{r3, r4, r5, lr}
 802206a:	4c15      	ldr	r4, [pc, #84]	@ (80220c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802206c:	4605      	mov	r5, r0
 802206e:	7823      	ldrb	r3, [r4, #0]
 8022070:	f3bf 8f5b 	dmb	ish
 8022074:	07da      	lsls	r2, r3, #31
 8022076:	d40b      	bmi.n	8022090 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022078:	4620      	mov	r0, r4
 802207a:	f006 f83f 	bl	80280fc <__cxa_guard_acquire>
 802207e:	b138      	cbz	r0, 8022090 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022080:	4620      	mov	r0, r4
 8022082:	f006 f847 	bl	8028114 <__cxa_guard_release>
 8022086:	4a0f      	ldr	r2, [pc, #60]	@ (80220c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022088:	490f      	ldr	r1, [pc, #60]	@ (80220c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802208a:	4810      	ldr	r0, [pc, #64]	@ (80220cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802208c:	f006 f82f 	bl	80280ee <__aeabi_atexit>
 8022090:	4c0f      	ldr	r4, [pc, #60]	@ (80220d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022092:	7823      	ldrb	r3, [r4, #0]
 8022094:	f3bf 8f5b 	dmb	ish
 8022098:	07db      	lsls	r3, r3, #31
 802209a:	d40b      	bmi.n	80220b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802209c:	4620      	mov	r0, r4
 802209e:	f006 f82d 	bl	80280fc <__cxa_guard_acquire>
 80220a2:	b138      	cbz	r0, 80220b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80220a4:	4620      	mov	r0, r4
 80220a6:	f006 f835 	bl	8028114 <__cxa_guard_release>
 80220aa:	4a06      	ldr	r2, [pc, #24]	@ (80220c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80220ac:	4909      	ldr	r1, [pc, #36]	@ (80220d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80220ae:	480a      	ldr	r0, [pc, #40]	@ (80220d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80220b0:	f006 f81d 	bl	80280ee <__aeabi_atexit>
 80220b4:	4b05      	ldr	r3, [pc, #20]	@ (80220cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80220b6:	61eb      	str	r3, [r5, #28]
 80220b8:	4b07      	ldr	r3, [pc, #28]	@ (80220d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80220ba:	622b      	str	r3, [r5, #32]
 80220bc:	bd38      	pop	{r3, r4, r5, pc}
 80220be:	bf00      	nop
 80220c0:	240285ec 	.word	0x240285ec
 80220c4:	24000000 	.word	0x24000000
 80220c8:	0801f1e5 	.word	0x0801f1e5
 80220cc:	240000b0 	.word	0x240000b0
 80220d0:	240285f0 	.word	0x240285f0
 80220d4:	0801f1e3 	.word	0x0801f1e3
 80220d8:	240000b4 	.word	0x240000b4

080220dc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80220dc:	b510      	push	{r4, lr}
 80220de:	4604      	mov	r4, r0
 80220e0:	f7ff ff88 	bl	8021ff4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80220e4:	4620      	mov	r0, r4
 80220e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220ea:	f7ff bfbd 	b.w	8022068 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080220f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80220f0:	b538      	push	{r3, r4, r5, lr}
 80220f2:	4c15      	ldr	r4, [pc, #84]	@ (8022148 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80220f4:	4605      	mov	r5, r0
 80220f6:	7823      	ldrb	r3, [r4, #0]
 80220f8:	f3bf 8f5b 	dmb	ish
 80220fc:	07da      	lsls	r2, r3, #31
 80220fe:	d40b      	bmi.n	8022118 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022100:	4620      	mov	r0, r4
 8022102:	f005 fffb 	bl	80280fc <__cxa_guard_acquire>
 8022106:	b138      	cbz	r0, 8022118 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022108:	4620      	mov	r0, r4
 802210a:	f006 f803 	bl	8028114 <__cxa_guard_release>
 802210e:	4a0f      	ldr	r2, [pc, #60]	@ (802214c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022110:	490f      	ldr	r1, [pc, #60]	@ (8022150 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8022112:	4810      	ldr	r0, [pc, #64]	@ (8022154 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022114:	f005 ffeb 	bl	80280ee <__aeabi_atexit>
 8022118:	4c0f      	ldr	r4, [pc, #60]	@ (8022158 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802211a:	7823      	ldrb	r3, [r4, #0]
 802211c:	f3bf 8f5b 	dmb	ish
 8022120:	07db      	lsls	r3, r3, #31
 8022122:	d40b      	bmi.n	802213c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022124:	4620      	mov	r0, r4
 8022126:	f005 ffe9 	bl	80280fc <__cxa_guard_acquire>
 802212a:	b138      	cbz	r0, 802213c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802212c:	4620      	mov	r0, r4
 802212e:	f005 fff1 	bl	8028114 <__cxa_guard_release>
 8022132:	4a06      	ldr	r2, [pc, #24]	@ (802214c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022134:	4909      	ldr	r1, [pc, #36]	@ (802215c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8022136:	480a      	ldr	r0, [pc, #40]	@ (8022160 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022138:	f005 ffd9 	bl	80280ee <__aeabi_atexit>
 802213c:	4b05      	ldr	r3, [pc, #20]	@ (8022154 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802213e:	636b      	str	r3, [r5, #52]	@ 0x34
 8022140:	4b07      	ldr	r3, [pc, #28]	@ (8022160 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022142:	63ab      	str	r3, [r5, #56]	@ 0x38
 8022144:	bd38      	pop	{r3, r4, r5, pc}
 8022146:	bf00      	nop
 8022148:	240285f4 	.word	0x240285f4
 802214c:	24000000 	.word	0x24000000
 8022150:	0801f1d9 	.word	0x0801f1d9
 8022154:	240000b8 	.word	0x240000b8
 8022158:	240285f8 	.word	0x240285f8
 802215c:	0801f1d7 	.word	0x0801f1d7
 8022160:	240000bc 	.word	0x240000bc

08022164 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8022164:	b538      	push	{r3, r4, r5, lr}
 8022166:	4c15      	ldr	r4, [pc, #84]	@ (80221bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022168:	4605      	mov	r5, r0
 802216a:	7823      	ldrb	r3, [r4, #0]
 802216c:	f3bf 8f5b 	dmb	ish
 8022170:	07da      	lsls	r2, r3, #31
 8022172:	d40b      	bmi.n	802218c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022174:	4620      	mov	r0, r4
 8022176:	f005 ffc1 	bl	80280fc <__cxa_guard_acquire>
 802217a:	b138      	cbz	r0, 802218c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802217c:	4620      	mov	r0, r4
 802217e:	f005 ffc9 	bl	8028114 <__cxa_guard_release>
 8022182:	4a0f      	ldr	r2, [pc, #60]	@ (80221c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022184:	490f      	ldr	r1, [pc, #60]	@ (80221c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022186:	4810      	ldr	r0, [pc, #64]	@ (80221c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022188:	f005 ffb1 	bl	80280ee <__aeabi_atexit>
 802218c:	4c0f      	ldr	r4, [pc, #60]	@ (80221cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802218e:	7823      	ldrb	r3, [r4, #0]
 8022190:	f3bf 8f5b 	dmb	ish
 8022194:	07db      	lsls	r3, r3, #31
 8022196:	d40b      	bmi.n	80221b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022198:	4620      	mov	r0, r4
 802219a:	f005 ffaf 	bl	80280fc <__cxa_guard_acquire>
 802219e:	b138      	cbz	r0, 80221b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80221a0:	4620      	mov	r0, r4
 80221a2:	f005 ffb7 	bl	8028114 <__cxa_guard_release>
 80221a6:	4a06      	ldr	r2, [pc, #24]	@ (80221c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80221a8:	4909      	ldr	r1, [pc, #36]	@ (80221d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80221aa:	480a      	ldr	r0, [pc, #40]	@ (80221d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80221ac:	f005 ff9f 	bl	80280ee <__aeabi_atexit>
 80221b0:	4b05      	ldr	r3, [pc, #20]	@ (80221c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80221b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80221b4:	4b07      	ldr	r3, [pc, #28]	@ (80221d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80221b6:	632b      	str	r3, [r5, #48]	@ 0x30
 80221b8:	bd38      	pop	{r3, r4, r5, pc}
 80221ba:	bf00      	nop
 80221bc:	240285cc 	.word	0x240285cc
 80221c0:	24000000 	.word	0x24000000
 80221c4:	0801f1dd 	.word	0x0801f1dd
 80221c8:	24000090 	.word	0x24000090
 80221cc:	240285d0 	.word	0x240285d0
 80221d0:	0801f1db 	.word	0x0801f1db
 80221d4:	24000094 	.word	0x24000094

080221d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80221d8:	b510      	push	{r4, lr}
 80221da:	4604      	mov	r4, r0
 80221dc:	f7ff ff88 	bl	80220f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80221e0:	4620      	mov	r0, r4
 80221e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221e6:	f7ff bfbd 	b.w	8022164 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080221ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80221ec:	b538      	push	{r3, r4, r5, lr}
 80221ee:	4c15      	ldr	r4, [pc, #84]	@ (8022244 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80221f0:	4605      	mov	r5, r0
 80221f2:	7823      	ldrb	r3, [r4, #0]
 80221f4:	f3bf 8f5b 	dmb	ish
 80221f8:	07da      	lsls	r2, r3, #31
 80221fa:	d40b      	bmi.n	8022214 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80221fc:	4620      	mov	r0, r4
 80221fe:	f005 ff7d 	bl	80280fc <__cxa_guard_acquire>
 8022202:	b138      	cbz	r0, 8022214 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022204:	4620      	mov	r0, r4
 8022206:	f005 ff85 	bl	8028114 <__cxa_guard_release>
 802220a:	4a0f      	ldr	r2, [pc, #60]	@ (8022248 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802220c:	490f      	ldr	r1, [pc, #60]	@ (802224c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802220e:	4810      	ldr	r0, [pc, #64]	@ (8022250 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022210:	f005 ff6d 	bl	80280ee <__aeabi_atexit>
 8022214:	4c0f      	ldr	r4, [pc, #60]	@ (8022254 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022216:	7823      	ldrb	r3, [r4, #0]
 8022218:	f3bf 8f5b 	dmb	ish
 802221c:	07db      	lsls	r3, r3, #31
 802221e:	d40b      	bmi.n	8022238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022220:	4620      	mov	r0, r4
 8022222:	f005 ff6b 	bl	80280fc <__cxa_guard_acquire>
 8022226:	b138      	cbz	r0, 8022238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022228:	4620      	mov	r0, r4
 802222a:	f005 ff73 	bl	8028114 <__cxa_guard_release>
 802222e:	4a06      	ldr	r2, [pc, #24]	@ (8022248 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022230:	4909      	ldr	r1, [pc, #36]	@ (8022258 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022232:	480a      	ldr	r0, [pc, #40]	@ (802225c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022234:	f005 ff5b 	bl	80280ee <__aeabi_atexit>
 8022238:	4b05      	ldr	r3, [pc, #20]	@ (8022250 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802223a:	646b      	str	r3, [r5, #68]	@ 0x44
 802223c:	4b07      	ldr	r3, [pc, #28]	@ (802225c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802223e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8022240:	bd38      	pop	{r3, r4, r5, pc}
 8022242:	bf00      	nop
 8022244:	240285fc 	.word	0x240285fc
 8022248:	24000000 	.word	0x24000000
 802224c:	0801f1d1 	.word	0x0801f1d1
 8022250:	240000c0 	.word	0x240000c0
 8022254:	24028600 	.word	0x24028600
 8022258:	0801f1cf 	.word	0x0801f1cf
 802225c:	240000c4 	.word	0x240000c4

08022260 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022260:	b538      	push	{r3, r4, r5, lr}
 8022262:	4c15      	ldr	r4, [pc, #84]	@ (80222b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022264:	4605      	mov	r5, r0
 8022266:	7823      	ldrb	r3, [r4, #0]
 8022268:	f3bf 8f5b 	dmb	ish
 802226c:	07da      	lsls	r2, r3, #31
 802226e:	d40b      	bmi.n	8022288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022270:	4620      	mov	r0, r4
 8022272:	f005 ff43 	bl	80280fc <__cxa_guard_acquire>
 8022276:	b138      	cbz	r0, 8022288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022278:	4620      	mov	r0, r4
 802227a:	f005 ff4b 	bl	8028114 <__cxa_guard_release>
 802227e:	4a0f      	ldr	r2, [pc, #60]	@ (80222bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022280:	490f      	ldr	r1, [pc, #60]	@ (80222c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022282:	4810      	ldr	r0, [pc, #64]	@ (80222c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022284:	f005 ff33 	bl	80280ee <__aeabi_atexit>
 8022288:	4c0f      	ldr	r4, [pc, #60]	@ (80222c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802228a:	7823      	ldrb	r3, [r4, #0]
 802228c:	f3bf 8f5b 	dmb	ish
 8022290:	07db      	lsls	r3, r3, #31
 8022292:	d40b      	bmi.n	80222ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022294:	4620      	mov	r0, r4
 8022296:	f005 ff31 	bl	80280fc <__cxa_guard_acquire>
 802229a:	b138      	cbz	r0, 80222ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802229c:	4620      	mov	r0, r4
 802229e:	f005 ff39 	bl	8028114 <__cxa_guard_release>
 80222a2:	4a06      	ldr	r2, [pc, #24]	@ (80222bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80222a4:	4909      	ldr	r1, [pc, #36]	@ (80222cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80222a6:	480a      	ldr	r0, [pc, #40]	@ (80222d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80222a8:	f005 ff21 	bl	80280ee <__aeabi_atexit>
 80222ac:	4b05      	ldr	r3, [pc, #20]	@ (80222c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80222ae:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80222b0:	4b07      	ldr	r3, [pc, #28]	@ (80222d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80222b2:	642b      	str	r3, [r5, #64]	@ 0x40
 80222b4:	bd38      	pop	{r3, r4, r5, pc}
 80222b6:	bf00      	nop
 80222b8:	240285dc 	.word	0x240285dc
 80222bc:	24000000 	.word	0x24000000
 80222c0:	0801f1d5 	.word	0x0801f1d5
 80222c4:	240000a0 	.word	0x240000a0
 80222c8:	240285e0 	.word	0x240285e0
 80222cc:	0801f1d3 	.word	0x0801f1d3
 80222d0:	240000a4 	.word	0x240000a4

080222d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80222d4:	b510      	push	{r4, lr}
 80222d6:	4604      	mov	r4, r0
 80222d8:	f7ff ff88 	bl	80221ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80222dc:	4620      	mov	r0, r4
 80222de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222e2:	f7ff bfbd 	b.w	8022260 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080222e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80222e8:	b538      	push	{r3, r4, r5, lr}
 80222ea:	4c15      	ldr	r4, [pc, #84]	@ (8022340 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80222ec:	4605      	mov	r5, r0
 80222ee:	7823      	ldrb	r3, [r4, #0]
 80222f0:	f3bf 8f5b 	dmb	ish
 80222f4:	07da      	lsls	r2, r3, #31
 80222f6:	d40b      	bmi.n	8022310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80222f8:	4620      	mov	r0, r4
 80222fa:	f005 feff 	bl	80280fc <__cxa_guard_acquire>
 80222fe:	b138      	cbz	r0, 8022310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022300:	4620      	mov	r0, r4
 8022302:	f005 ff07 	bl	8028114 <__cxa_guard_release>
 8022306:	4a0f      	ldr	r2, [pc, #60]	@ (8022344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022308:	490f      	ldr	r1, [pc, #60]	@ (8022348 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802230a:	4810      	ldr	r0, [pc, #64]	@ (802234c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802230c:	f005 feef 	bl	80280ee <__aeabi_atexit>
 8022310:	4c0f      	ldr	r4, [pc, #60]	@ (8022350 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022312:	7823      	ldrb	r3, [r4, #0]
 8022314:	f3bf 8f5b 	dmb	ish
 8022318:	07db      	lsls	r3, r3, #31
 802231a:	d40b      	bmi.n	8022334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802231c:	4620      	mov	r0, r4
 802231e:	f005 feed 	bl	80280fc <__cxa_guard_acquire>
 8022322:	b138      	cbz	r0, 8022334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022324:	4620      	mov	r0, r4
 8022326:	f005 fef5 	bl	8028114 <__cxa_guard_release>
 802232a:	4a06      	ldr	r2, [pc, #24]	@ (8022344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802232c:	4909      	ldr	r1, [pc, #36]	@ (8022354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802232e:	480a      	ldr	r0, [pc, #40]	@ (8022358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022330:	f005 fedd 	bl	80280ee <__aeabi_atexit>
 8022334:	4b05      	ldr	r3, [pc, #20]	@ (802234c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022336:	656b      	str	r3, [r5, #84]	@ 0x54
 8022338:	4b07      	ldr	r3, [pc, #28]	@ (8022358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802233a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802233c:	bd38      	pop	{r3, r4, r5, pc}
 802233e:	bf00      	nop
 8022340:	240285d4 	.word	0x240285d4
 8022344:	24000000 	.word	0x24000000
 8022348:	0801f1c9 	.word	0x0801f1c9
 802234c:	24000098 	.word	0x24000098
 8022350:	240285d8 	.word	0x240285d8
 8022354:	0801f1c7 	.word	0x0801f1c7
 8022358:	2400009c 	.word	0x2400009c

0802235c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 802235c:	b538      	push	{r3, r4, r5, lr}
 802235e:	4c15      	ldr	r4, [pc, #84]	@ (80223b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022360:	4605      	mov	r5, r0
 8022362:	7823      	ldrb	r3, [r4, #0]
 8022364:	f3bf 8f5b 	dmb	ish
 8022368:	07da      	lsls	r2, r3, #31
 802236a:	d40b      	bmi.n	8022384 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802236c:	4620      	mov	r0, r4
 802236e:	f005 fec5 	bl	80280fc <__cxa_guard_acquire>
 8022372:	b138      	cbz	r0, 8022384 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022374:	4620      	mov	r0, r4
 8022376:	f005 fecd 	bl	8028114 <__cxa_guard_release>
 802237a:	4a0f      	ldr	r2, [pc, #60]	@ (80223b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802237c:	490f      	ldr	r1, [pc, #60]	@ (80223bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802237e:	4810      	ldr	r0, [pc, #64]	@ (80223c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022380:	f005 feb5 	bl	80280ee <__aeabi_atexit>
 8022384:	4c0f      	ldr	r4, [pc, #60]	@ (80223c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022386:	7823      	ldrb	r3, [r4, #0]
 8022388:	f3bf 8f5b 	dmb	ish
 802238c:	07db      	lsls	r3, r3, #31
 802238e:	d40b      	bmi.n	80223a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022390:	4620      	mov	r0, r4
 8022392:	f005 feb3 	bl	80280fc <__cxa_guard_acquire>
 8022396:	b138      	cbz	r0, 80223a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022398:	4620      	mov	r0, r4
 802239a:	f005 febb 	bl	8028114 <__cxa_guard_release>
 802239e:	4a06      	ldr	r2, [pc, #24]	@ (80223b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80223a0:	4909      	ldr	r1, [pc, #36]	@ (80223c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80223a2:	480a      	ldr	r0, [pc, #40]	@ (80223cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223a4:	f005 fea3 	bl	80280ee <__aeabi_atexit>
 80223a8:	4b05      	ldr	r3, [pc, #20]	@ (80223c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80223aa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80223ac:	4b07      	ldr	r3, [pc, #28]	@ (80223cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223ae:	652b      	str	r3, [r5, #80]	@ 0x50
 80223b0:	bd38      	pop	{r3, r4, r5, pc}
 80223b2:	bf00      	nop
 80223b4:	240285c4 	.word	0x240285c4
 80223b8:	24000000 	.word	0x24000000
 80223bc:	0801f1cd 	.word	0x0801f1cd
 80223c0:	24000088 	.word	0x24000088
 80223c4:	240285c8 	.word	0x240285c8
 80223c8:	0801f1cb 	.word	0x0801f1cb
 80223cc:	2400008c 	.word	0x2400008c

080223d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80223d0:	b510      	push	{r4, lr}
 80223d2:	4604      	mov	r4, r0
 80223d4:	f7ff ff88 	bl	80222e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80223d8:	4620      	mov	r0, r4
 80223da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223de:	f7ff bfbd 	b.w	802235c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080223e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80223e2:	b510      	push	{r4, lr}
 80223e4:	4604      	mov	r4, r0
 80223e6:	f7ff fff3 	bl	80223d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80223ea:	4620      	mov	r0, r4
 80223ec:	f7ff ff72 	bl	80222d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80223f0:	4620      	mov	r0, r4
 80223f2:	f7ff fe73 	bl	80220dc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80223f6:	4620      	mov	r0, r4
 80223f8:	f7ff fdf2 	bl	8021fe0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80223fc:	4620      	mov	r0, r4
 80223fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022402:	f7ff bee9 	b.w	80221d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08022408 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8022408:	b538      	push	{r3, r4, r5, lr}
 802240a:	4c0b      	ldr	r4, [pc, #44]	@ (8022438 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 802240c:	4605      	mov	r5, r0
 802240e:	7823      	ldrb	r3, [r4, #0]
 8022410:	f3bf 8f5b 	dmb	ish
 8022414:	07db      	lsls	r3, r3, #31
 8022416:	d40b      	bmi.n	8022430 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8022418:	4620      	mov	r0, r4
 802241a:	f005 fe6f 	bl	80280fc <__cxa_guard_acquire>
 802241e:	b138      	cbz	r0, 8022430 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8022420:	4620      	mov	r0, r4
 8022422:	f005 fe77 	bl	8028114 <__cxa_guard_release>
 8022426:	4a05      	ldr	r2, [pc, #20]	@ (802243c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8022428:	4905      	ldr	r1, [pc, #20]	@ (8022440 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 802242a:	4806      	ldr	r0, [pc, #24]	@ (8022444 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802242c:	f005 fe5f 	bl	80280ee <__aeabi_atexit>
 8022430:	4b04      	ldr	r3, [pc, #16]	@ (8022444 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8022432:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8022434:	bd38      	pop	{r3, r4, r5, pc}
 8022436:	bf00      	nop
 8022438:	240285b8 	.word	0x240285b8
 802243c:	24000000 	.word	0x24000000
 8022440:	0801f1c5 	.word	0x0801f1c5
 8022444:	24000080 	.word	0x24000080

08022448 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8022448:	b538      	push	{r3, r4, r5, lr}
 802244a:	4c0b      	ldr	r4, [pc, #44]	@ (8022478 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 802244c:	4605      	mov	r5, r0
 802244e:	7823      	ldrb	r3, [r4, #0]
 8022450:	f3bf 8f5b 	dmb	ish
 8022454:	07db      	lsls	r3, r3, #31
 8022456:	d40b      	bmi.n	8022470 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8022458:	4620      	mov	r0, r4
 802245a:	f005 fe4f 	bl	80280fc <__cxa_guard_acquire>
 802245e:	b138      	cbz	r0, 8022470 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8022460:	4620      	mov	r0, r4
 8022462:	f005 fe57 	bl	8028114 <__cxa_guard_release>
 8022466:	4a05      	ldr	r2, [pc, #20]	@ (802247c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8022468:	4905      	ldr	r1, [pc, #20]	@ (8022480 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 802246a:	4806      	ldr	r0, [pc, #24]	@ (8022484 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802246c:	f005 fe3f 	bl	80280ee <__aeabi_atexit>
 8022470:	4b04      	ldr	r3, [pc, #16]	@ (8022484 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022472:	662b      	str	r3, [r5, #96]	@ 0x60
 8022474:	bd38      	pop	{r3, r4, r5, pc}
 8022476:	bf00      	nop
 8022478:	240285bc 	.word	0x240285bc
 802247c:	24000000 	.word	0x24000000
 8022480:	0801f1c3 	.word	0x0801f1c3
 8022484:	24000084 	.word	0x24000084

08022488 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8022488:	b570      	push	{r4, r5, r6, lr}
 802248a:	4d0c      	ldr	r5, [pc, #48]	@ (80224bc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 802248c:	4606      	mov	r6, r0
 802248e:	4c0c      	ldr	r4, [pc, #48]	@ (80224c0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022490:	782b      	ldrb	r3, [r5, #0]
 8022492:	f3bf 8f5b 	dmb	ish
 8022496:	f013 0f01 	tst.w	r3, #1
 802249a:	d10d      	bne.n	80224b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 802249c:	4628      	mov	r0, r5
 802249e:	f005 fe2d 	bl	80280fc <__cxa_guard_acquire>
 80224a2:	b148      	cbz	r0, 80224b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 80224a4:	4b07      	ldr	r3, [pc, #28]	@ (80224c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80224a6:	4628      	mov	r0, r5
 80224a8:	6023      	str	r3, [r4, #0]
 80224aa:	f005 fe33 	bl	8028114 <__cxa_guard_release>
 80224ae:	4a06      	ldr	r2, [pc, #24]	@ (80224c8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80224b0:	4620      	mov	r0, r4
 80224b2:	4906      	ldr	r1, [pc, #24]	@ (80224cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80224b4:	f005 fe1b 	bl	80280ee <__aeabi_atexit>
 80224b8:	6674      	str	r4, [r6, #100]	@ 0x64
 80224ba:	bd70      	pop	{r4, r5, r6, pc}
 80224bc:	240285c0 	.word	0x240285c0
 80224c0:	24028718 	.word	0x24028718
 80224c4:	0802d63c 	.word	0x0802d63c
 80224c8:	24000000 	.word	0x24000000
 80224cc:	0801f1c1 	.word	0x0801f1c1

080224d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80224d0:	b510      	push	{r4, lr}
 80224d2:	4604      	mov	r4, r0
 80224d4:	f7ff ff98 	bl	8022408 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80224d8:	4620      	mov	r0, r4
 80224da:	f7ff ffb5 	bl	8022448 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80224de:	4620      	mov	r0, r4
 80224e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224e4:	f7ff bfd0 	b.w	8022488 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080224e8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 80224e8:	b570      	push	{r4, r5, r6, lr}
 80224ea:	4d0c      	ldr	r5, [pc, #48]	@ (802251c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 80224ec:	4606      	mov	r6, r0
 80224ee:	4c0c      	ldr	r4, [pc, #48]	@ (8022520 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 80224f0:	782b      	ldrb	r3, [r5, #0]
 80224f2:	f3bf 8f5b 	dmb	ish
 80224f6:	f013 0f01 	tst.w	r3, #1
 80224fa:	d10d      	bne.n	8022518 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80224fc:	4628      	mov	r0, r5
 80224fe:	f005 fdfd 	bl	80280fc <__cxa_guard_acquire>
 8022502:	b148      	cbz	r0, 8022518 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8022504:	4b07      	ldr	r3, [pc, #28]	@ (8022524 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8022506:	4628      	mov	r0, r5
 8022508:	6023      	str	r3, [r4, #0]
 802250a:	f005 fe03 	bl	8028114 <__cxa_guard_release>
 802250e:	4a06      	ldr	r2, [pc, #24]	@ (8022528 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8022510:	4620      	mov	r0, r4
 8022512:	4906      	ldr	r1, [pc, #24]	@ (802252c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8022514:	f005 fdeb 	bl	80280ee <__aeabi_atexit>
 8022518:	66b4      	str	r4, [r6, #104]	@ 0x68
 802251a:	bd70      	pop	{r4, r5, r6, pc}
 802251c:	240285b4 	.word	0x240285b4
 8022520:	24028614 	.word	0x24028614
 8022524:	0802d654 	.word	0x0802d654
 8022528:	24000000 	.word	0x24000000
 802252c:	0801f1bf 	.word	0x0801f1bf

08022530 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8022530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022534:	b087      	sub	sp, #28
 8022536:	788d      	ldrb	r5, [r1, #2]
 8022538:	f891 9000 	ldrb.w	r9, [r1]
 802253c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022540:	9501      	str	r5, [sp, #4]
 8022542:	784d      	ldrb	r5, [r1, #1]
 8022544:	9203      	str	r2, [sp, #12]
 8022546:	9502      	str	r5, [sp, #8]
 8022548:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 802254c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8022550:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8022554:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8022558:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802255c:	fb06 0708 	mla	r7, r6, r8, r0
 8022560:	2e00      	cmp	r6, #0
 8022562:	eb02 0a07 	add.w	sl, r2, r7
 8022566:	ea4f 2205 	mov.w	r2, r5, lsl #8
 802256a:	9d01      	ldr	r5, [sp, #4]
 802256c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022570:	ea45 0509 	orr.w	r5, r5, r9
 8022574:	9505      	str	r5, [sp, #20]
 8022576:	f2c0 80b2 	blt.w	80226de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 802257a:	45b3      	cmp	fp, r6
 802257c:	f340 80af 	ble.w	80226de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022580:	2800      	cmp	r0, #0
 8022582:	f2c0 80aa 	blt.w	80226da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022586:	4580      	cmp	r8, r0
 8022588:	f340 80a7 	ble.w	80226da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802258c:	9a03      	ldr	r2, [sp, #12]
 802258e:	5dd7      	ldrb	r7, [r2, r7]
 8022590:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022594:	441f      	add	r7, r3
 8022596:	1c42      	adds	r2, r0, #1
 8022598:	f100 80a4 	bmi.w	80226e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802259c:	4590      	cmp	r8, r2
 802259e:	f340 80a1 	ble.w	80226e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80225a2:	2c00      	cmp	r4, #0
 80225a4:	f000 809e 	beq.w	80226e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80225a8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80225ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80225b0:	441d      	add	r5, r3
 80225b2:	3601      	adds	r6, #1
 80225b4:	f100 809a 	bmi.w	80226ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80225b8:	45b3      	cmp	fp, r6
 80225ba:	f340 8097 	ble.w	80226ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80225be:	f1bc 0f00 	cmp.w	ip, #0
 80225c2:	f000 8093 	beq.w	80226ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80225c6:	2800      	cmp	r0, #0
 80225c8:	f2c0 808e 	blt.w	80226e8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80225cc:	4580      	cmp	r8, r0
 80225ce:	f340 808b 	ble.w	80226e8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80225d2:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80225d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80225da:	441e      	add	r6, r3
 80225dc:	3001      	adds	r0, #1
 80225de:	f100 8088 	bmi.w	80226f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80225e2:	4580      	cmp	r8, r0
 80225e4:	f340 8085 	ble.w	80226f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80225e8:	2c00      	cmp	r4, #0
 80225ea:	f000 8082 	beq.w	80226f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80225ee:	44d0      	add	r8, sl
 80225f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80225f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225f8:	4413      	add	r3, r2
 80225fa:	b2a4      	uxth	r4, r4
 80225fc:	f895 a000 	ldrb.w	sl, [r5]
 8022600:	fa1f fc8c 	uxth.w	ip, ip
 8022604:	fb04 fb0c 	mul.w	fp, r4, ip
 8022608:	0124      	lsls	r4, r4, #4
 802260a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 802260e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8022612:	eba4 040b 	sub.w	r4, r4, fp
 8022616:	fa1f f08c 	uxth.w	r0, ip
 802261a:	b2a2      	uxth	r2, r4
 802261c:	783c      	ldrb	r4, [r7, #0]
 802261e:	eba8 0800 	sub.w	r8, r8, r0
 8022622:	fa1f fc8e 	uxth.w	ip, lr
 8022626:	fb02 fa0a 	mul.w	sl, r2, sl
 802262a:	ea6f 0e0e 	mvn.w	lr, lr
 802262e:	fa1f f888 	uxth.w	r8, r8
 8022632:	fa5f fe8e 	uxtb.w	lr, lr
 8022636:	fb08 aa04 	mla	sl, r8, r4, sl
 802263a:	7834      	ldrb	r4, [r6, #0]
 802263c:	fb19 f90e 	smulbb	r9, r9, lr
 8022640:	fb00 aa04 	mla	sl, r0, r4, sl
 8022644:	781c      	ldrb	r4, [r3, #0]
 8022646:	fb0b a404 	mla	r4, fp, r4, sl
 802264a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802264e:	fb04 990c 	mla	r9, r4, ip, r9
 8022652:	fa1f f989 	uxth.w	r9, r9
 8022656:	f109 0401 	add.w	r4, r9, #1
 802265a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802265e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022662:	f881 9000 	strb.w	r9, [r1]
 8022666:	f895 9001 	ldrb.w	r9, [r5, #1]
 802266a:	787c      	ldrb	r4, [r7, #1]
 802266c:	fb02 f909 	mul.w	r9, r2, r9
 8022670:	fb08 9904 	mla	r9, r8, r4, r9
 8022674:	7874      	ldrb	r4, [r6, #1]
 8022676:	fb00 9904 	mla	r9, r0, r4, r9
 802267a:	785c      	ldrb	r4, [r3, #1]
 802267c:	fb0b 9404 	mla	r4, fp, r4, r9
 8022680:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8022684:	9c02      	ldr	r4, [sp, #8]
 8022686:	fb14 f90e 	smulbb	r9, r4, lr
 802268a:	fb0a 940c 	mla	r4, sl, ip, r9
 802268e:	b2a4      	uxth	r4, r4
 8022690:	f104 0901 	add.w	r9, r4, #1
 8022694:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8022698:	1224      	asrs	r4, r4, #8
 802269a:	704c      	strb	r4, [r1, #1]
 802269c:	78ad      	ldrb	r5, [r5, #2]
 802269e:	78bc      	ldrb	r4, [r7, #2]
 80226a0:	436a      	muls	r2, r5
 80226a2:	789b      	ldrb	r3, [r3, #2]
 80226a4:	fb08 2204 	mla	r2, r8, r4, r2
 80226a8:	78b4      	ldrb	r4, [r6, #2]
 80226aa:	fb00 2004 	mla	r0, r0, r4, r2
 80226ae:	fb0b 0b03 	mla	fp, fp, r3, r0
 80226b2:	9b01      	ldr	r3, [sp, #4]
 80226b4:	fb13 fe0e 	smulbb	lr, r3, lr
 80226b8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80226bc:	fb0b ec0c 	mla	ip, fp, ip, lr
 80226c0:	fa1f fc8c 	uxth.w	ip, ip
 80226c4:	f10c 0e01 	add.w	lr, ip, #1
 80226c8:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80226cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80226d0:	f881 c002 	strb.w	ip, [r1, #2]
 80226d4:	b007      	add	sp, #28
 80226d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226da:	af05      	add	r7, sp, #20
 80226dc:	e75b      	b.n	8022596 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80226de:	ad05      	add	r5, sp, #20
 80226e0:	462f      	mov	r7, r5
 80226e2:	e766      	b.n	80225b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80226e4:	ad05      	add	r5, sp, #20
 80226e6:	e764      	b.n	80225b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80226e8:	ae05      	add	r6, sp, #20
 80226ea:	e777      	b.n	80225dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80226ec:	ab05      	add	r3, sp, #20
 80226ee:	461e      	mov	r6, r3
 80226f0:	e783      	b.n	80225fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80226f2:	ab05      	add	r3, sp, #20
 80226f4:	e781      	b.n	80225fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080226f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226fa:	b093      	sub	sp, #76	@ 0x4c
 80226fc:	9210      	str	r2, [sp, #64]	@ 0x40
 80226fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8022700:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022702:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8022706:	9011      	str	r0, [sp, #68]	@ 0x44
 8022708:	930e      	str	r3, [sp, #56]	@ 0x38
 802270a:	6850      	ldr	r0, [r2, #4]
 802270c:	910d      	str	r1, [sp, #52]	@ 0x34
 802270e:	6812      	ldr	r2, [r2, #0]
 8022710:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8022714:	fb00 1303 	mla	r3, r0, r3, r1
 8022718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802271c:	18d3      	adds	r3, r2, r3
 802271e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022720:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022722:	681b      	ldr	r3, [r3, #0]
 8022724:	930c      	str	r3, [sp, #48]	@ 0x30
 8022726:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022728:	685c      	ldr	r4, [r3, #4]
 802272a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802272c:	3404      	adds	r4, #4
 802272e:	43db      	mvns	r3, r3
 8022730:	b2db      	uxtb	r3, r3
 8022732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022736:	2b00      	cmp	r3, #0
 8022738:	dc03      	bgt.n	8022742 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802273a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802273c:	2b00      	cmp	r3, #0
 802273e:	f340 8250 	ble.w	8022be2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022742:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022744:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022748:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802274c:	1e48      	subs	r0, r1, #1
 802274e:	1e55      	subs	r5, r2, #1
 8022750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022752:	2b00      	cmp	r3, #0
 8022754:	f340 80ee 	ble.w	8022934 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022758:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802275a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802275c:	1436      	asrs	r6, r6, #16
 802275e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022762:	d406      	bmi.n	8022772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022764:	4286      	cmp	r6, r0
 8022766:	da04      	bge.n	8022772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022768:	2b00      	cmp	r3, #0
 802276a:	db02      	blt.n	8022772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802276c:	42ab      	cmp	r3, r5
 802276e:	f2c0 80e2 	blt.w	8022936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022772:	3601      	adds	r6, #1
 8022774:	f100 80cf 	bmi.w	8022916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022778:	42b1      	cmp	r1, r6
 802277a:	f2c0 80cc 	blt.w	8022916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802277e:	3301      	adds	r3, #1
 8022780:	f100 80c9 	bmi.w	8022916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022784:	429a      	cmp	r2, r3
 8022786:	f2c0 80c6 	blt.w	8022916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802278a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 802278e:	f1bb 0f00 	cmp.w	fp, #0
 8022792:	f340 80f1 	ble.w	8022978 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022796:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022798:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802279a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802279c:	141d      	asrs	r5, r3, #16
 802279e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80227a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80227a4:	68c7      	ldr	r7, [r0, #12]
 80227a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80227a8:	1418      	asrs	r0, r3, #16
 80227aa:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80227ae:	6892      	ldr	r2, [r2, #8]
 80227b0:	f100 8137 	bmi.w	8022a22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80227b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80227b8:	4560      	cmp	r0, ip
 80227ba:	f280 8132 	bge.w	8022a22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80227be:	2d00      	cmp	r5, #0
 80227c0:	f2c0 812f 	blt.w	8022a22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80227c4:	f107 3cff 	add.w	ip, r7, #4294967295
 80227c8:	4565      	cmp	r5, ip
 80227ca:	f280 812a 	bge.w	8022a22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80227ce:	b212      	sxth	r2, r2
 80227d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80227d2:	fb05 0002 	mla	r0, r5, r2, r0
 80227d6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80227d8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80227dc:	4405      	add	r5, r0
 80227de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80227e2:	eb04 0e0c 	add.w	lr, r4, ip
 80227e6:	f1b8 0f00 	cmp.w	r8, #0
 80227ea:	f000 810c 	beq.w	8022a06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80227ee:	786f      	ldrb	r7, [r5, #1]
 80227f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80227f4:	4427      	add	r7, r4
 80227f6:	2900      	cmp	r1, #0
 80227f8:	f000 810d 	beq.w	8022a16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80227fc:	18a8      	adds	r0, r5, r2
 80227fe:	5caa      	ldrb	r2, [r5, r2]
 8022800:	7840      	ldrb	r0, [r0, #1]
 8022802:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022806:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802280a:	4422      	add	r2, r4
 802280c:	4420      	add	r0, r4
 802280e:	fa1f f388 	uxth.w	r3, r8
 8022812:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8022816:	b289      	uxth	r1, r1
 8022818:	f897 c000 	ldrb.w	ip, [r7]
 802281c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8022820:	fb03 f901 	mul.w	r9, r3, r1
 8022824:	011b      	lsls	r3, r3, #4
 8022826:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802282a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802282e:	eba3 0309 	sub.w	r3, r3, r9
 8022832:	b289      	uxth	r1, r1
 8022834:	b29b      	uxth	r3, r3
 8022836:	eba8 0801 	sub.w	r8, r8, r1
 802283a:	fb03 fc0c 	mul.w	ip, r3, ip
 802283e:	fa1f f888 	uxth.w	r8, r8
 8022842:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022846:	fb08 cc0a 	mla	ip, r8, sl, ip
 802284a:	f892 a000 	ldrb.w	sl, [r2]
 802284e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022852:	f890 a000 	ldrb.w	sl, [r0]
 8022856:	fb09 cc0a 	mla	ip, r9, sl, ip
 802285a:	f896 a000 	ldrb.w	sl, [r6]
 802285e:	fb1a fa03 	smulbb	sl, sl, r3
 8022862:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022868:	fb0c ac05 	mla	ip, ip, r5, sl
 802286c:	fa1f fc8c 	uxth.w	ip, ip
 8022870:	f10c 0a01 	add.w	sl, ip, #1
 8022874:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8022878:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802287c:	f886 a000 	strb.w	sl, [r6]
 8022880:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022884:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022888:	fb03 fc0c 	mul.w	ip, r3, ip
 802288c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802288e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022892:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022896:	fb01 cc0a 	mla	ip, r1, sl, ip
 802289a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802289e:	fb09 cc0a 	mla	ip, r9, sl, ip
 80228a2:	f896 a001 	ldrb.w	sl, [r6, #1]
 80228a6:	fb1a fa03 	smulbb	sl, sl, r3
 80228aa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80228ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80228b0:	fb0c ac05 	mla	ip, ip, r5, sl
 80228b4:	fa1f fc8c 	uxth.w	ip, ip
 80228b8:	f10c 0a01 	add.w	sl, ip, #1
 80228bc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80228c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80228c4:	f886 c001 	strb.w	ip, [r6, #1]
 80228c8:	78bf      	ldrb	r7, [r7, #2]
 80228ca:	f89e c002 	ldrb.w	ip, [lr, #2]
 80228ce:	437b      	muls	r3, r7
 80228d0:	fb08 330c 	mla	r3, r8, ip, r3
 80228d4:	f892 c002 	ldrb.w	ip, [r2, #2]
 80228d8:	7882      	ldrb	r2, [r0, #2]
 80228da:	fb01 310c 	mla	r1, r1, ip, r3
 80228de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228e0:	fb09 1902 	mla	r9, r9, r2, r1
 80228e4:	78b1      	ldrb	r1, [r6, #2]
 80228e6:	fb11 f103 	smulbb	r1, r1, r3
 80228ea:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80228ee:	fb09 1505 	mla	r5, r9, r5, r1
 80228f2:	b2ad      	uxth	r5, r5
 80228f4:	1c6b      	adds	r3, r5, #1
 80228f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80228fa:	122d      	asrs	r5, r5, #8
 80228fc:	70b5      	strb	r5, [r6, #2]
 80228fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022900:	3603      	adds	r6, #3
 8022902:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8022904:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022908:	4413      	add	r3, r2
 802290a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802290c:	931d      	str	r3, [sp, #116]	@ 0x74
 802290e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022910:	4413      	add	r3, r2
 8022912:	931e      	str	r3, [sp, #120]	@ 0x78
 8022914:	e73b      	b.n	802278e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022916:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022918:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802291a:	4433      	add	r3, r6
 802291c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802291e:	931d      	str	r3, [sp, #116]	@ 0x74
 8022920:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022922:	4433      	add	r3, r6
 8022924:	931e      	str	r3, [sp, #120]	@ 0x78
 8022926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022928:	3b01      	subs	r3, #1
 802292a:	9309      	str	r3, [sp, #36]	@ 0x24
 802292c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802292e:	3303      	adds	r3, #3
 8022930:	930a      	str	r3, [sp, #40]	@ 0x28
 8022932:	e70d      	b.n	8022750 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022934:	d028      	beq.n	8022988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022938:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802293a:	3b01      	subs	r3, #1
 802293c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802293e:	fb00 5003 	mla	r0, r0, r3, r5
 8022942:	1400      	asrs	r0, r0, #16
 8022944:	f53f af21 	bmi.w	802278a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022948:	3901      	subs	r1, #1
 802294a:	4288      	cmp	r0, r1
 802294c:	f6bf af1d 	bge.w	802278a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022950:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022952:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8022954:	fb01 0303 	mla	r3, r1, r3, r0
 8022958:	141b      	asrs	r3, r3, #16
 802295a:	f53f af16 	bmi.w	802278a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802295e:	3a01      	subs	r2, #1
 8022960:	4293      	cmp	r3, r2
 8022962:	f6bf af12 	bge.w	802278a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022968:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802296c:	1cdf      	adds	r7, r3, #3
 802296e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8022972:	f1b9 0f00 	cmp.w	r9, #0
 8022976:	dc73      	bgt.n	8022a60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802297a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802297c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022984:	441a      	add	r2, r3
 8022986:	920a      	str	r2, [sp, #40]	@ 0x28
 8022988:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802298a:	2b00      	cmp	r3, #0
 802298c:	f340 8129 	ble.w	8022be2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022994:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022996:	ee30 0a04 	vadd.f32	s0, s0, s8
 802299a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802299e:	eef0 6a62 	vmov.f32	s13, s5
 80229a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80229aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229ae:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80229b2:	eef0 6a43 	vmov.f32	s13, s6
 80229b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229ba:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80229be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80229c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80229c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80229ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80229ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80229d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229d6:	ee12 2a90 	vmov	r2, s5
 80229da:	eef0 2a47 	vmov.f32	s5, s14
 80229de:	fb92 f3f3 	sdiv	r3, r2, r3
 80229e2:	ee13 2a10 	vmov	r2, s6
 80229e6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80229e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80229ea:	eeb0 3a67 	vmov.f32	s6, s15
 80229ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80229f2:	9320      	str	r3, [sp, #128]	@ 0x80
 80229f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80229f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80229f8:	3b01      	subs	r3, #1
 80229fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80229fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80229fe:	bf08      	it	eq
 8022a00:	4613      	moveq	r3, r2
 8022a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a04:	e696      	b.n	8022734 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022a06:	b149      	cbz	r1, 8022a1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022a08:	5caa      	ldrb	r2, [r5, r2]
 8022a0a:	4670      	mov	r0, lr
 8022a0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a10:	4422      	add	r2, r4
 8022a12:	4677      	mov	r7, lr
 8022a14:	e6fb      	b.n	802280e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022a16:	4670      	mov	r0, lr
 8022a18:	4672      	mov	r2, lr
 8022a1a:	e6f8      	b.n	802280e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022a1c:	4670      	mov	r0, lr
 8022a1e:	4672      	mov	r2, lr
 8022a20:	e7f7      	b.n	8022a12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022a22:	f110 0c01 	adds.w	ip, r0, #1
 8022a26:	f53f af6a 	bmi.w	80228fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022a2a:	4562      	cmp	r2, ip
 8022a2c:	f6ff af67 	blt.w	80228fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022a30:	f115 0c01 	adds.w	ip, r5, #1
 8022a34:	f53f af63 	bmi.w	80228fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022a38:	4567      	cmp	r7, ip
 8022a3a:	f6ff af60 	blt.w	80228fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a40:	b23f      	sxth	r7, r7
 8022a42:	b212      	sxth	r2, r2
 8022a44:	9002      	str	r0, [sp, #8]
 8022a46:	9701      	str	r7, [sp, #4]
 8022a48:	9200      	str	r2, [sp, #0]
 8022a4a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022a4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022a4e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022a52:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8022a56:	4623      	mov	r3, r4
 8022a58:	4631      	mov	r1, r6
 8022a5a:	f7ff fd69 	bl	8022530 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8022a5e:	e74e      	b.n	80228fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022a60:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022a62:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8022a64:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022a68:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8022a6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022a6c:	1400      	asrs	r0, r0, #16
 8022a6e:	142d      	asrs	r5, r5, #16
 8022a70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022a72:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022a76:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022a7a:	fb02 5000 	mla	r0, r2, r0, r5
 8022a7e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022a80:	f815 e000 	ldrb.w	lr, [r5, r0]
 8022a84:	eb05 0c00 	add.w	ip, r5, r0
 8022a88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022a8c:	eb04 060e 	add.w	r6, r4, lr
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	f000 8097 	beq.w	8022bc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8022a96:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a9e:	4425      	add	r5, r4
 8022aa0:	2900      	cmp	r1, #0
 8022aa2:	f000 8098 	beq.w	8022bd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8022aa6:	eb0c 0002 	add.w	r0, ip, r2
 8022aaa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022aae:	7840      	ldrb	r0, [r0, #1]
 8022ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022ab8:	4422      	add	r2, r4
 8022aba:	4420      	add	r0, r4
 8022abc:	b29b      	uxth	r3, r3
 8022abe:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022ac2:	b289      	uxth	r1, r1
 8022ac4:	f895 e000 	ldrb.w	lr, [r5]
 8022ac8:	3703      	adds	r7, #3
 8022aca:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ace:	fb03 f801 	mul.w	r8, r3, r1
 8022ad2:	011b      	lsls	r3, r3, #4
 8022ad4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022ad8:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8022adc:	eba3 0308 	sub.w	r3, r3, r8
 8022ae0:	b289      	uxth	r1, r1
 8022ae2:	b29b      	uxth	r3, r3
 8022ae4:	ebac 0c01 	sub.w	ip, ip, r1
 8022ae8:	fb03 fe0e 	mul.w	lr, r3, lr
 8022aec:	fa1f fc8c 	uxth.w	ip, ip
 8022af0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022af4:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022af8:	f892 b000 	ldrb.w	fp, [r2]
 8022afc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022b00:	f890 b000 	ldrb.w	fp, [r0]
 8022b04:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022b08:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8022b0c:	fb1b fb03 	smulbb	fp, fp, r3
 8022b10:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022b16:	fb0e be0a 	mla	lr, lr, sl, fp
 8022b1a:	fa1f fe8e 	uxth.w	lr, lr
 8022b1e:	f10e 0b01 	add.w	fp, lr, #1
 8022b22:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022b26:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b2a:	f807 ec06 	strb.w	lr, [r7, #-6]
 8022b2e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8022b32:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022b36:	fb03 fe0e 	mul.w	lr, r3, lr
 8022b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b3c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022b40:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022b44:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022b48:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022b4c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022b50:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8022b54:	fb1b fb03 	smulbb	fp, fp, r3
 8022b58:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022b5e:	fb0e be0a 	mla	lr, lr, sl, fp
 8022b62:	fa1f fe8e 	uxth.w	lr, lr
 8022b66:	f10e 0b01 	add.w	fp, lr, #1
 8022b6a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022b6e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b72:	f807 ec05 	strb.w	lr, [r7, #-5]
 8022b76:	78ad      	ldrb	r5, [r5, #2]
 8022b78:	78b6      	ldrb	r6, [r6, #2]
 8022b7a:	436b      	muls	r3, r5
 8022b7c:	7895      	ldrb	r5, [r2, #2]
 8022b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022b80:	fb0c 3306 	mla	r3, ip, r6, r3
 8022b84:	fb01 3305 	mla	r3, r1, r5, r3
 8022b88:	7885      	ldrb	r5, [r0, #2]
 8022b8a:	fb08 3805 	mla	r8, r8, r5, r3
 8022b8e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8022b92:	fb13 f302 	smulbb	r3, r3, r2
 8022b96:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022b9a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8022b9c:	fb08 380a 	mla	r8, r8, sl, r3
 8022ba0:	fa1f f888 	uxth.w	r8, r8
 8022ba4:	f108 0301 	add.w	r3, r8, #1
 8022ba8:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8022bac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022bae:	4413      	add	r3, r2
 8022bb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022bb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022bb6:	931d      	str	r3, [sp, #116]	@ 0x74
 8022bb8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022bba:	f807 8c04 	strb.w	r8, [r7, #-4]
 8022bbe:	4413      	add	r3, r2
 8022bc0:	931e      	str	r3, [sp, #120]	@ 0x78
 8022bc2:	e6d6      	b.n	8022972 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022bc4:	b151      	cbz	r1, 8022bdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022bc6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022bca:	4630      	mov	r0, r6
 8022bcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bd0:	4422      	add	r2, r4
 8022bd2:	4635      	mov	r5, r6
 8022bd4:	e772      	b.n	8022abc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022bd6:	4630      	mov	r0, r6
 8022bd8:	4632      	mov	r2, r6
 8022bda:	e76f      	b.n	8022abc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022bdc:	4630      	mov	r0, r6
 8022bde:	4632      	mov	r2, r6
 8022be0:	e7f7      	b.n	8022bd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022be2:	b013      	add	sp, #76	@ 0x4c
 8022be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022be8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8022be8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022bec:	784c      	ldrb	r4, [r1, #1]
 8022bee:	f891 a002 	ldrb.w	sl, [r1, #2]
 8022bf2:	0224      	lsls	r4, r4, #8
 8022bf4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8022bf8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8022bfc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022c00:	f891 a000 	ldrb.w	sl, [r1]
 8022c04:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8022c08:	ea44 040a 	orr.w	r4, r4, sl
 8022c0c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8022c10:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8022c14:	9401      	str	r4, [sp, #4]
 8022c16:	fb05 c70e 	mla	r7, r5, lr, ip
 8022c1a:	2d00      	cmp	r5, #0
 8022c1c:	eb02 0807 	add.w	r8, r2, r7
 8022c20:	db72      	blt.n	8022d08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8022c22:	45a9      	cmp	r9, r5
 8022c24:	dd70      	ble.n	8022d08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8022c26:	f1bc 0f00 	cmp.w	ip, #0
 8022c2a:	db6b      	blt.n	8022d04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8022c2c:	45e6      	cmp	lr, ip
 8022c2e:	dd69      	ble.n	8022d04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8022c30:	5dd7      	ldrb	r7, [r2, r7]
 8022c32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022c36:	441f      	add	r7, r3
 8022c38:	f11c 0201 	adds.w	r2, ip, #1
 8022c3c:	d467      	bmi.n	8022d0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022c3e:	4596      	cmp	lr, r2
 8022c40:	dd65      	ble.n	8022d0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022c42:	2800      	cmp	r0, #0
 8022c44:	d063      	beq.n	8022d0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022c46:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022c4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022c4e:	441c      	add	r4, r3
 8022c50:	3501      	adds	r5, #1
 8022c52:	d460      	bmi.n	8022d16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022c54:	45a9      	cmp	r9, r5
 8022c56:	dd5e      	ble.n	8022d16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022c58:	2e00      	cmp	r6, #0
 8022c5a:	d05c      	beq.n	8022d16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022c5c:	f1bc 0f00 	cmp.w	ip, #0
 8022c60:	db57      	blt.n	8022d12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8022c62:	45e6      	cmp	lr, ip
 8022c64:	dd55      	ble.n	8022d12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8022c66:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c6e:	441d      	add	r5, r3
 8022c70:	f11c 0201 	adds.w	r2, ip, #1
 8022c74:	d452      	bmi.n	8022d1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022c76:	4596      	cmp	lr, r2
 8022c78:	dd50      	ble.n	8022d1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022c7a:	2800      	cmp	r0, #0
 8022c7c:	d04e      	beq.n	8022d1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022c7e:	44c6      	add	lr, r8
 8022c80:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022c84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c88:	4413      	add	r3, r2
 8022c8a:	b280      	uxth	r0, r0
 8022c8c:	f897 8000 	ldrb.w	r8, [r7]
 8022c90:	b2b2      	uxth	r2, r6
 8022c92:	fb00 f602 	mul.w	r6, r0, r2
 8022c96:	0100      	lsls	r0, r0, #4
 8022c98:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022c9c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8022ca0:	1b80      	subs	r0, r0, r6
 8022ca2:	fa1f fc82 	uxth.w	ip, r2
 8022ca6:	b282      	uxth	r2, r0
 8022ca8:	7820      	ldrb	r0, [r4, #0]
 8022caa:	ebae 0e0c 	sub.w	lr, lr, ip
 8022cae:	4350      	muls	r0, r2
 8022cb0:	fa1f fe8e 	uxth.w	lr, lr
 8022cb4:	fb0e 0808 	mla	r8, lr, r8, r0
 8022cb8:	7828      	ldrb	r0, [r5, #0]
 8022cba:	fb0c 8800 	mla	r8, ip, r0, r8
 8022cbe:	7818      	ldrb	r0, [r3, #0]
 8022cc0:	fb06 8000 	mla	r0, r6, r0, r8
 8022cc4:	1200      	asrs	r0, r0, #8
 8022cc6:	7008      	strb	r0, [r1, #0]
 8022cc8:	7860      	ldrb	r0, [r4, #1]
 8022cca:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022cce:	4350      	muls	r0, r2
 8022cd0:	fb0e 0808 	mla	r8, lr, r8, r0
 8022cd4:	7868      	ldrb	r0, [r5, #1]
 8022cd6:	fb0c 8800 	mla	r8, ip, r0, r8
 8022cda:	7858      	ldrb	r0, [r3, #1]
 8022cdc:	fb06 8000 	mla	r0, r6, r0, r8
 8022ce0:	1200      	asrs	r0, r0, #8
 8022ce2:	7048      	strb	r0, [r1, #1]
 8022ce4:	78a0      	ldrb	r0, [r4, #2]
 8022ce6:	78bf      	ldrb	r7, [r7, #2]
 8022ce8:	4350      	muls	r0, r2
 8022cea:	78aa      	ldrb	r2, [r5, #2]
 8022cec:	fb0e 0007 	mla	r0, lr, r7, r0
 8022cf0:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022cf4:	789a      	ldrb	r2, [r3, #2]
 8022cf6:	fb06 c202 	mla	r2, r6, r2, ip
 8022cfa:	1212      	asrs	r2, r2, #8
 8022cfc:	708a      	strb	r2, [r1, #2]
 8022cfe:	b002      	add	sp, #8
 8022d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d04:	af01      	add	r7, sp, #4
 8022d06:	e797      	b.n	8022c38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8022d08:	ac01      	add	r4, sp, #4
 8022d0a:	4627      	mov	r7, r4
 8022d0c:	e7a0      	b.n	8022c50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022d0e:	ac01      	add	r4, sp, #4
 8022d10:	e79e      	b.n	8022c50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022d12:	ad01      	add	r5, sp, #4
 8022d14:	e7ac      	b.n	8022c70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8022d16:	ab01      	add	r3, sp, #4
 8022d18:	461d      	mov	r5, r3
 8022d1a:	e7b6      	b.n	8022c8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8022d1c:	ab01      	add	r3, sp, #4
 8022d1e:	e7b4      	b.n	8022c8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08022d20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d24:	b08d      	sub	sp, #52	@ 0x34
 8022d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022d2a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8022d2e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022d30:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022d32:	9306      	str	r3, [sp, #24]
 8022d34:	6850      	ldr	r0, [r2, #4]
 8022d36:	6812      	ldr	r2, [r2, #0]
 8022d38:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022d3a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8022d3e:	fb00 1303 	mla	r3, r0, r3, r1
 8022d42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d46:	18d3      	adds	r3, r2, r3
 8022d48:	9307      	str	r3, [sp, #28]
 8022d4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	9308      	str	r3, [sp, #32]
 8022d50:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022d52:	685d      	ldr	r5, [r3, #4]
 8022d54:	3504      	adds	r5, #4
 8022d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	dc03      	bgt.n	8022d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	f340 81e6 	ble.w	8023130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8022d64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022d66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d6e:	1e48      	subs	r0, r1, #1
 8022d70:	1e56      	subs	r6, r2, #1
 8022d72:	9b06      	ldr	r3, [sp, #24]
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	f340 80bd 	ble.w	8022ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022d7c:	1427      	asrs	r7, r4, #16
 8022d7e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022d82:	d406      	bmi.n	8022d92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022d84:	4287      	cmp	r7, r0
 8022d86:	da04      	bge.n	8022d92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	db02      	blt.n	8022d92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022d8c:	42b3      	cmp	r3, r6
 8022d8e:	f2c0 80b2 	blt.w	8022ef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8022d92:	3701      	adds	r7, #1
 8022d94:	f100 80a1 	bmi.w	8022eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022d98:	42b9      	cmp	r1, r7
 8022d9a:	f2c0 809e 	blt.w	8022eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022d9e:	3301      	adds	r3, #1
 8022da0:	f100 809b 	bmi.w	8022eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022da4:	429a      	cmp	r2, r3
 8022da6:	f2c0 8098 	blt.w	8022eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022daa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8022dae:	f1bb 0f00 	cmp.w	fp, #0
 8022db2:	f340 80bf 	ble.w	8022f34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022db6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022db8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8022dba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022dbc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022dc0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8022dc4:	1420      	asrs	r0, r4, #16
 8022dc6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022dc8:	ea4f 4723 	mov.w	r7, r3, asr #16
 8022dcc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022dd0:	6892      	ldr	r2, [r2, #8]
 8022dd2:	f100 8103 	bmi.w	8022fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022dd6:	f102 3eff 	add.w	lr, r2, #4294967295
 8022dda:	4570      	cmp	r0, lr
 8022ddc:	f280 80fe 	bge.w	8022fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022de0:	2f00      	cmp	r7, #0
 8022de2:	f2c0 80fb 	blt.w	8022fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022de6:	f10c 3eff 	add.w	lr, ip, #4294967295
 8022dea:	4577      	cmp	r7, lr
 8022dec:	f280 80f6 	bge.w	8022fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022df0:	b212      	sxth	r2, r2
 8022df2:	fb07 0002 	mla	r0, r7, r2, r0
 8022df6:	9f08      	ldr	r7, [sp, #32]
 8022df8:	f817 8000 	ldrb.w	r8, [r7, r0]
 8022dfc:	eb07 0e00 	add.w	lr, r7, r0
 8022e00:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022e04:	eb05 0c08 	add.w	ip, r5, r8
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	f000 80d8 	beq.w	8022fbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022e0e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8022e12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022e16:	442f      	add	r7, r5
 8022e18:	2900      	cmp	r1, #0
 8022e1a:	f000 80d9 	beq.w	8022fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022e1e:	eb0e 0002 	add.w	r0, lr, r2
 8022e22:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022e26:	7840      	ldrb	r0, [r0, #1]
 8022e28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e30:	442a      	add	r2, r5
 8022e32:	4428      	add	r0, r5
 8022e34:	b29b      	uxth	r3, r3
 8022e36:	f815 a008 	ldrb.w	sl, [r5, r8]
 8022e3a:	b289      	uxth	r1, r1
 8022e3c:	f897 8000 	ldrb.w	r8, [r7]
 8022e40:	fb03 f901 	mul.w	r9, r3, r1
 8022e44:	011b      	lsls	r3, r3, #4
 8022e46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022e4a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022e4e:	eba3 0309 	sub.w	r3, r3, r9
 8022e52:	b289      	uxth	r1, r1
 8022e54:	b29b      	uxth	r3, r3
 8022e56:	ebae 0e01 	sub.w	lr, lr, r1
 8022e5a:	fb03 f808 	mul.w	r8, r3, r8
 8022e5e:	fa1f fe8e 	uxth.w	lr, lr
 8022e62:	fb0e 880a 	mla	r8, lr, sl, r8
 8022e66:	f892 a000 	ldrb.w	sl, [r2]
 8022e6a:	fb01 880a 	mla	r8, r1, sl, r8
 8022e6e:	f890 a000 	ldrb.w	sl, [r0]
 8022e72:	fb09 880a 	mla	r8, r9, sl, r8
 8022e76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e7a:	f886 8000 	strb.w	r8, [r6]
 8022e7e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022e82:	f89c a001 	ldrb.w	sl, [ip, #1]
 8022e86:	fb03 f808 	mul.w	r8, r3, r8
 8022e8a:	fb0e 880a 	mla	r8, lr, sl, r8
 8022e8e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022e92:	fb01 880a 	mla	r8, r1, sl, r8
 8022e96:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022e9a:	fb09 880a 	mla	r8, r9, sl, r8
 8022e9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022ea2:	f886 8001 	strb.w	r8, [r6, #1]
 8022ea6:	78bf      	ldrb	r7, [r7, #2]
 8022ea8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022eac:	437b      	muls	r3, r7
 8022eae:	7892      	ldrb	r2, [r2, #2]
 8022eb0:	fb0e 330c 	mla	r3, lr, ip, r3
 8022eb4:	fb01 3102 	mla	r1, r1, r2, r3
 8022eb8:	7882      	ldrb	r2, [r0, #2]
 8022eba:	fb09 1902 	mla	r9, r9, r2, r1
 8022ebe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022ec2:	f886 9002 	strb.w	r9, [r6, #2]
 8022ec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ec8:	3603      	adds	r6, #3
 8022eca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022ecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022ed0:	441c      	add	r4, r3
 8022ed2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ed4:	4413      	add	r3, r2
 8022ed6:	9318      	str	r3, [sp, #96]	@ 0x60
 8022ed8:	e769      	b.n	8022dae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022eda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022edc:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022ede:	441c      	add	r4, r3
 8022ee0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ee2:	443b      	add	r3, r7
 8022ee4:	9318      	str	r3, [sp, #96]	@ 0x60
 8022ee6:	9b06      	ldr	r3, [sp, #24]
 8022ee8:	3b01      	subs	r3, #1
 8022eea:	9306      	str	r3, [sp, #24]
 8022eec:	9b07      	ldr	r3, [sp, #28]
 8022eee:	3303      	adds	r3, #3
 8022ef0:	9307      	str	r3, [sp, #28]
 8022ef2:	e73e      	b.n	8022d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022ef4:	d026      	beq.n	8022f44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022ef6:	9b06      	ldr	r3, [sp, #24]
 8022ef8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022efa:	3b01      	subs	r3, #1
 8022efc:	fb00 4003 	mla	r0, r0, r3, r4
 8022f00:	1400      	asrs	r0, r0, #16
 8022f02:	f53f af52 	bmi.w	8022daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022f06:	3901      	subs	r1, #1
 8022f08:	4288      	cmp	r0, r1
 8022f0a:	f6bf af4e 	bge.w	8022daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022f0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022f10:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8022f12:	fb01 0303 	mla	r3, r1, r3, r0
 8022f16:	141b      	asrs	r3, r3, #16
 8022f18:	f53f af47 	bmi.w	8022daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022f1c:	3a01      	subs	r2, #1
 8022f1e:	4293      	cmp	r3, r2
 8022f20:	f6bf af43 	bge.w	8022daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022f24:	9b07      	ldr	r3, [sp, #28]
 8022f26:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022f2a:	f103 0803 	add.w	r8, r3, #3
 8022f2e:	f1ba 0f00 	cmp.w	sl, #0
 8022f32:	dc71      	bgt.n	8023018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022f34:	9b06      	ldr	r3, [sp, #24]
 8022f36:	9a07      	ldr	r2, [sp, #28]
 8022f38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022f3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f40:	441a      	add	r2, r3
 8022f42:	9207      	str	r2, [sp, #28]
 8022f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f46:	2b00      	cmp	r3, #0
 8022f48:	f340 80f2 	ble.w	8023130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8022f4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022f52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f56:	eeb0 6a62 	vmov.f32	s12, s5
 8022f5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022f5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022f66:	ee16 4a10 	vmov	r4, s12
 8022f6a:	eeb0 6a43 	vmov.f32	s12, s6
 8022f6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022f72:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8022f76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022f7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022f82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022f86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022f8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022f8e:	ee12 2a90 	vmov	r2, s5
 8022f92:	eef0 2a47 	vmov.f32	s5, s14
 8022f96:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f9a:	ee13 2a10 	vmov	r2, s6
 8022f9e:	9319      	str	r3, [sp, #100]	@ 0x64
 8022fa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022fa2:	eeb0 3a67 	vmov.f32	s6, s15
 8022fa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022faa:	931a      	str	r3, [sp, #104]	@ 0x68
 8022fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fb0:	3b01      	subs	r3, #1
 8022fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8022fb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022fb6:	bf08      	it	eq
 8022fb8:	4613      	moveq	r3, r2
 8022fba:	9306      	str	r3, [sp, #24]
 8022fbc:	e6cb      	b.n	8022d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022fbe:	b151      	cbz	r1, 8022fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022fc0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022fc4:	4660      	mov	r0, ip
 8022fc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022fca:	442a      	add	r2, r5
 8022fcc:	4667      	mov	r7, ip
 8022fce:	e731      	b.n	8022e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022fd0:	4660      	mov	r0, ip
 8022fd2:	4662      	mov	r2, ip
 8022fd4:	e72e      	b.n	8022e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022fd6:	4660      	mov	r0, ip
 8022fd8:	4662      	mov	r2, ip
 8022fda:	e7f7      	b.n	8022fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8022fdc:	f110 0e01 	adds.w	lr, r0, #1
 8022fe0:	f53f af71 	bmi.w	8022ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022fe4:	4572      	cmp	r2, lr
 8022fe6:	f6ff af6e 	blt.w	8022ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022fea:	f117 0e01 	adds.w	lr, r7, #1
 8022fee:	f53f af6a 	bmi.w	8022ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022ff2:	45f4      	cmp	ip, lr
 8022ff4:	f6ff af67 	blt.w	8022ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022ff8:	b212      	sxth	r2, r2
 8022ffa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022ffe:	fa0f f38c 	sxth.w	r3, ip
 8023002:	9200      	str	r2, [sp, #0]
 8023004:	4631      	mov	r1, r6
 8023006:	9a08      	ldr	r2, [sp, #32]
 8023008:	9301      	str	r3, [sp, #4]
 802300a:	462b      	mov	r3, r5
 802300c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8023010:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023012:	f7ff fde9 	bl	8022be8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8023016:	e756      	b.n	8022ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023018:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802301a:	1426      	asrs	r6, r4, #16
 802301c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802301e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023022:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023026:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023028:	1400      	asrs	r0, r0, #16
 802302a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802302e:	fb02 6000 	mla	r0, r2, r0, r6
 8023032:	9e08      	ldr	r6, [sp, #32]
 8023034:	f816 e000 	ldrb.w	lr, [r6, r0]
 8023038:	eb06 0c00 	add.w	ip, r6, r0
 802303c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023040:	eb05 070e 	add.w	r7, r5, lr
 8023044:	2b00      	cmp	r3, #0
 8023046:	d064      	beq.n	8023112 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023048:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802304c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023050:	442e      	add	r6, r5
 8023052:	2900      	cmp	r1, #0
 8023054:	d066      	beq.n	8023124 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023056:	eb0c 0002 	add.w	r0, ip, r2
 802305a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802305e:	7840      	ldrb	r0, [r0, #1]
 8023060:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023064:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023068:	442a      	add	r2, r5
 802306a:	4428      	add	r0, r5
 802306c:	b29b      	uxth	r3, r3
 802306e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8023072:	b289      	uxth	r1, r1
 8023074:	f896 e000 	ldrb.w	lr, [r6]
 8023078:	f108 0803 	add.w	r8, r8, #3
 802307c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023080:	fb03 f901 	mul.w	r9, r3, r1
 8023084:	011b      	lsls	r3, r3, #4
 8023086:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802308a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802308e:	eba3 0309 	sub.w	r3, r3, r9
 8023092:	b289      	uxth	r1, r1
 8023094:	b29b      	uxth	r3, r3
 8023096:	ebac 0c01 	sub.w	ip, ip, r1
 802309a:	fb03 fe0e 	mul.w	lr, r3, lr
 802309e:	fa1f fc8c 	uxth.w	ip, ip
 80230a2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80230a6:	f892 b000 	ldrb.w	fp, [r2]
 80230aa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80230ae:	f890 b000 	ldrb.w	fp, [r0]
 80230b2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80230b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80230ba:	f808 ec06 	strb.w	lr, [r8, #-6]
 80230be:	f896 e001 	ldrb.w	lr, [r6, #1]
 80230c2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80230c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80230ca:	fb0c ee0b 	mla	lr, ip, fp, lr
 80230ce:	f892 b001 	ldrb.w	fp, [r2, #1]
 80230d2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80230d6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80230da:	fb09 ee0b 	mla	lr, r9, fp, lr
 80230de:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80230e2:	f808 ec05 	strb.w	lr, [r8, #-5]
 80230e6:	78b6      	ldrb	r6, [r6, #2]
 80230e8:	78bf      	ldrb	r7, [r7, #2]
 80230ea:	4373      	muls	r3, r6
 80230ec:	7896      	ldrb	r6, [r2, #2]
 80230ee:	7882      	ldrb	r2, [r0, #2]
 80230f0:	fb0c 3307 	mla	r3, ip, r7, r3
 80230f4:	fb01 3306 	mla	r3, r1, r6, r3
 80230f8:	fb09 3902 	mla	r9, r9, r2, r3
 80230fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80230fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023100:	441c      	add	r4, r3
 8023102:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023104:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023108:	4413      	add	r3, r2
 802310a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802310e:	9318      	str	r3, [sp, #96]	@ 0x60
 8023110:	e70d      	b.n	8022f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023112:	b151      	cbz	r1, 802312a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023114:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023118:	4638      	mov	r0, r7
 802311a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802311e:	442a      	add	r2, r5
 8023120:	463e      	mov	r6, r7
 8023122:	e7a3      	b.n	802306c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023124:	4638      	mov	r0, r7
 8023126:	463a      	mov	r2, r7
 8023128:	e7a0      	b.n	802306c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802312a:	4638      	mov	r0, r7
 802312c:	463a      	mov	r2, r7
 802312e:	e7f7      	b.n	8023120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023130:	b00d      	add	sp, #52	@ 0x34
 8023132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023136 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8023136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802313a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802313e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8023142:	2d00      	cmp	r5, #0
 8023144:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8023148:	fb05 700c 	mla	r0, r5, ip, r7
 802314c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8023150:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8023154:	eb02 0800 	add.w	r8, r2, r0
 8023158:	f2c0 8118 	blt.w	802338c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802315c:	45a9      	cmp	r9, r5
 802315e:	f340 8115 	ble.w	802338c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023162:	2f00      	cmp	r7, #0
 8023164:	f2c0 8110 	blt.w	8023388 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023168:	45bc      	cmp	ip, r7
 802316a:	f340 810d 	ble.w	8023388 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802316e:	5c12      	ldrb	r2, [r2, r0]
 8023170:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023174:	1c7a      	adds	r2, r7, #1
 8023176:	f100 810c 	bmi.w	8023392 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802317a:	4594      	cmp	ip, r2
 802317c:	f340 8109 	ble.w	8023392 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023180:	2c00      	cmp	r4, #0
 8023182:	f000 8108 	beq.w	8023396 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8023186:	f898 2001 	ldrb.w	r2, [r8, #1]
 802318a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802318e:	3501      	adds	r5, #1
 8023190:	f100 8105 	bmi.w	802339e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023194:	45a9      	cmp	r9, r5
 8023196:	f340 8102 	ble.w	802339e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802319a:	f1be 0f00 	cmp.w	lr, #0
 802319e:	f000 8101 	beq.w	80233a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 80231a2:	2f00      	cmp	r7, #0
 80231a4:	f2c0 80f9 	blt.w	802339a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80231a8:	45bc      	cmp	ip, r7
 80231aa:	f340 80f6 	ble.w	802339a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80231ae:	f818 200c 	ldrb.w	r2, [r8, ip]
 80231b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80231b6:	3701      	adds	r7, #1
 80231b8:	f100 80f7 	bmi.w	80233aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80231bc:	45bc      	cmp	ip, r7
 80231be:	f340 80f4 	ble.w	80233aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80231c2:	2c00      	cmp	r4, #0
 80231c4:	f000 80f3 	beq.w	80233ae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 80231c8:	44c4      	add	ip, r8
 80231ca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80231ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80231d2:	fa1f fc84 	uxth.w	ip, r4
 80231d6:	fa1f f48e 	uxth.w	r4, lr
 80231da:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80231de:	fb04 fe0c 	mul.w	lr, r4, ip
 80231e2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80231e6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80231ea:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80231ee:	ebac 070e 	sub.w	r7, ip, lr
 80231f2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80231f6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80231fa:	b2a4      	uxth	r4, r4
 80231fc:	b2bf      	uxth	r7, r7
 80231fe:	1b1b      	subs	r3, r3, r4
 8023200:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023204:	fb07 fc0a 	mul.w	ip, r7, sl
 8023208:	b29b      	uxth	r3, r3
 802320a:	fb03 cc0b 	mla	ip, r3, fp, ip
 802320e:	9300      	str	r3, [sp, #0]
 8023210:	fb04 cc09 	mla	ip, r4, r9, ip
 8023214:	fb0e cc08 	mla	ip, lr, r8, ip
 8023218:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802321c:	9301      	str	r3, [sp, #4]
 802321e:	2b00      	cmp	r3, #0
 8023220:	f000 80af 	beq.w	8023382 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8023224:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8023228:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802322c:	fb0b fc0c 	mul.w	ip, fp, ip
 8023230:	fb0b f606 	mul.w	r6, fp, r6
 8023234:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023238:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802323c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8023240:	44dc      	add	ip, fp
 8023242:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8023246:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802324a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802324e:	fb0a fb0b 	mul.w	fp, sl, fp
 8023252:	fb0a fa00 	mul.w	sl, sl, r0
 8023256:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802325a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802325e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8023262:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023266:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802326a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802326e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023272:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023276:	0a36      	lsrs	r6, r6, #8
 8023278:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802327c:	44dc      	add	ip, fp
 802327e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023282:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023286:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802328a:	fb09 fb0b 	mul.w	fp, r9, fp
 802328e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023292:	fb09 f905 	mul.w	r9, r9, r5
 8023296:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802329a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802329e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80232a2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80232a6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80232aa:	fb0c fc07 	mul.w	ip, ip, r7
 80232ae:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80232b2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80232b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80232ba:	4458      	add	r0, fp
 80232bc:	fb08 f505 	mul.w	r5, r8, r5
 80232c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80232c4:	fb08 f802 	mul.w	r8, r8, r2
 80232c8:	0a00      	lsrs	r0, r0, #8
 80232ca:	0a2a      	lsrs	r2, r5, #8
 80232cc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80232d0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80232d4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80232d8:	4415      	add	r5, r2
 80232da:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80232de:	0a2d      	lsrs	r5, r5, #8
 80232e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80232e4:	9a00      	ldr	r2, [sp, #0]
 80232e6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80232ea:	fb03 cc02 	mla	ip, r3, r2, ip
 80232ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80232f2:	9b01      	ldr	r3, [sp, #4]
 80232f4:	fb05 c50e 	mla	r5, r5, lr, ip
 80232f8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80232fc:	fb00 5004 	mla	r0, r0, r4, r5
 8023300:	0a00      	lsrs	r0, r0, #8
 8023302:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023306:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802330a:	4378      	muls	r0, r7
 802330c:	fb02 0006 	mla	r0, r2, r6, r0
 8023310:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023314:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8023318:	fb04 e000 	mla	r0, r4, r0, lr
 802331c:	0a00      	lsrs	r0, r0, #8
 802331e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023322:	4328      	orrs	r0, r5
 8023324:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8023328:	b2ad      	uxth	r5, r5
 802332a:	b2c4      	uxtb	r4, r0
 802332c:	436b      	muls	r3, r5
 802332e:	fb14 f405 	smulbb	r4, r4, r5
 8023332:	1c5a      	adds	r2, r3, #1
 8023334:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023338:	780b      	ldrb	r3, [r1, #0]
 802333a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802333e:	b2d2      	uxtb	r2, r2
 8023340:	fb03 4302 	mla	r3, r3, r2, r4
 8023344:	b29b      	uxth	r3, r3
 8023346:	1c5c      	adds	r4, r3, #1
 8023348:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802334c:	784c      	ldrb	r4, [r1, #1]
 802334e:	fb14 f402 	smulbb	r4, r4, r2
 8023352:	121b      	asrs	r3, r3, #8
 8023354:	700b      	strb	r3, [r1, #0]
 8023356:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802335a:	fb03 4305 	mla	r3, r3, r5, r4
 802335e:	b29b      	uxth	r3, r3
 8023360:	1c5c      	adds	r4, r3, #1
 8023362:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023366:	0c04      	lsrs	r4, r0, #16
 8023368:	7888      	ldrb	r0, [r1, #2]
 802336a:	121b      	asrs	r3, r3, #8
 802336c:	fb10 f002 	smulbb	r0, r0, r2
 8023370:	704b      	strb	r3, [r1, #1]
 8023372:	fb04 0005 	mla	r0, r4, r5, r0
 8023376:	b280      	uxth	r0, r0
 8023378:	1c43      	adds	r3, r0, #1
 802337a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802337e:	1200      	asrs	r0, r0, #8
 8023380:	7088      	strb	r0, [r1, #2]
 8023382:	b003      	add	sp, #12
 8023384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023388:	2600      	movs	r6, #0
 802338a:	e6f3      	b.n	8023174 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802338c:	2000      	movs	r0, #0
 802338e:	4606      	mov	r6, r0
 8023390:	e6fd      	b.n	802318e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023392:	2000      	movs	r0, #0
 8023394:	e6fb      	b.n	802318e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023396:	4620      	mov	r0, r4
 8023398:	e6f9      	b.n	802318e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802339a:	2500      	movs	r5, #0
 802339c:	e70b      	b.n	80231b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 802339e:	2200      	movs	r2, #0
 80233a0:	4615      	mov	r5, r2
 80233a2:	e716      	b.n	80231d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80233a4:	4672      	mov	r2, lr
 80233a6:	4675      	mov	r5, lr
 80233a8:	e713      	b.n	80231d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80233aa:	2200      	movs	r2, #0
 80233ac:	e711      	b.n	80231d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80233ae:	4622      	mov	r2, r4
 80233b0:	e70f      	b.n	80231d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080233b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80233b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233b6:	b09f      	sub	sp, #124	@ 0x7c
 80233b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80233ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80233bc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80233be:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80233c2:	901d      	str	r0, [sp, #116]	@ 0x74
 80233c4:	931c      	str	r3, [sp, #112]	@ 0x70
 80233c6:	6850      	ldr	r0, [r2, #4]
 80233c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80233ca:	6812      	ldr	r2, [r2, #0]
 80233cc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80233ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80233d2:	fb00 1303 	mla	r3, r0, r3, r1
 80233d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233da:	18d3      	adds	r3, r2, r3
 80233dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80233de:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80233e4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80233e6:	685e      	ldr	r6, [r3, #4]
 80233e8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80233ec:	3604      	adds	r6, #4
 80233ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80233f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	dc03      	bgt.n	80233fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80233f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	f340 8378 	ble.w	8023aee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80233fe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023400:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023404:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023408:	1e48      	subs	r0, r1, #1
 802340a:	1e57      	subs	r7, r2, #1
 802340c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802340e:	2b00      	cmp	r3, #0
 8023410:	f340 818c 	ble.w	802372c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023414:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023416:	142b      	asrs	r3, r5, #16
 8023418:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802341c:	d406      	bmi.n	802342c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802341e:	4584      	cmp	ip, r0
 8023420:	da04      	bge.n	802342c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023422:	2b00      	cmp	r3, #0
 8023424:	db02      	blt.n	802342c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023426:	42bb      	cmp	r3, r7
 8023428:	f2c0 8181 	blt.w	802372e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802342c:	f11c 0c01 	adds.w	ip, ip, #1
 8023430:	f100 816f 	bmi.w	8023712 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023434:	4561      	cmp	r1, ip
 8023436:	f2c0 816c 	blt.w	8023712 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802343a:	3301      	adds	r3, #1
 802343c:	f100 8169 	bmi.w	8023712 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023440:	429a      	cmp	r2, r3
 8023442:	f2c0 8166 	blt.w	8023712 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023448:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802344a:	931a      	str	r3, [sp, #104]	@ 0x68
 802344c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802344e:	2b00      	cmp	r3, #0
 8023450:	f340 818c 	ble.w	802376c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8023454:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023456:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802345a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802345e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023462:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023464:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023468:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802346a:	141b      	asrs	r3, r3, #16
 802346c:	f100 81d0 	bmi.w	8023810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023470:	f100 38ff 	add.w	r8, r0, #4294967295
 8023474:	4543      	cmp	r3, r8
 8023476:	f280 81cb 	bge.w	8023810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802347a:	f1bc 0f00 	cmp.w	ip, #0
 802347e:	f2c0 81c7 	blt.w	8023810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023482:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023486:	45c4      	cmp	ip, r8
 8023488:	f280 81c2 	bge.w	8023810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802348c:	b200      	sxth	r0, r0
 802348e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023490:	fb0c 3300 	mla	r3, ip, r0, r3
 8023494:	eb04 0803 	add.w	r8, r4, r3
 8023498:	5ce3      	ldrb	r3, [r4, r3]
 802349a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802349e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80234a2:	2a00      	cmp	r2, #0
 80234a4:	f000 81a9 	beq.w	80237fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80234a8:	f898 c001 	ldrb.w	ip, [r8, #1]
 80234ac:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80234b0:	940e      	str	r4, [sp, #56]	@ 0x38
 80234b2:	0e24      	lsrs	r4, r4, #24
 80234b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80234b6:	b179      	cbz	r1, 80234d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80234b8:	eb08 0c00 	add.w	ip, r8, r0
 80234bc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80234c0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80234c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80234c6:	0e00      	lsrs	r0, r0, #24
 80234c8:	9013      	str	r0, [sp, #76]	@ 0x4c
 80234ca:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80234ce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80234d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80234d4:	0e00      	lsrs	r0, r0, #24
 80234d6:	9016      	str	r0, [sp, #88]	@ 0x58
 80234d8:	b292      	uxth	r2, r2
 80234da:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80234dc:	b289      	uxth	r1, r1
 80234de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80234e0:	fb02 f901 	mul.w	r9, r2, r1
 80234e4:	0112      	lsls	r2, r2, #4
 80234e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80234ea:	eba2 0809 	sub.w	r8, r2, r9
 80234ee:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80234f2:	b289      	uxth	r1, r1
 80234f4:	fa1f f888 	uxth.w	r8, r8
 80234f8:	1a52      	subs	r2, r2, r1
 80234fa:	fb08 f000 	mul.w	r0, r8, r0
 80234fe:	b292      	uxth	r2, r2
 8023500:	fb02 000e 	mla	r0, r2, lr, r0
 8023504:	fb01 0004 	mla	r0, r1, r4, r0
 8023508:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802350a:	fb09 0004 	mla	r0, r9, r4, r0
 802350e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023512:	2800      	cmp	r0, #0
 8023514:	f000 80f2 	beq.w	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023518:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802351c:	d01b      	beq.n	8023556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802351e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023522:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023526:	fb0e fa0a 	mul.w	sl, lr, sl
 802352a:	fb0e fe03 	mul.w	lr, lr, r3
 802352e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023532:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023536:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802353a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802353e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023542:	4453      	add	r3, sl
 8023544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023548:	0a1b      	lsrs	r3, r3, #8
 802354a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802354e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023552:	ea43 030c 	orr.w	r3, r3, ip
 8023556:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023558:	2cff      	cmp	r4, #255	@ 0xff
 802355a:	d021      	beq.n	80235a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802355c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802355e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023562:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023564:	fb04 fb0b 	mul.w	fp, r4, fp
 8023568:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802356a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802356e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023570:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023574:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023578:	fb04 fa0a 	mul.w	sl, r4, sl
 802357c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023580:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023584:	44de      	add	lr, fp
 8023586:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802358a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802358e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023592:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023596:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802359a:	ea4e 040a 	orr.w	r4, lr, sl
 802359e:	940e      	str	r4, [sp, #56]	@ 0x38
 80235a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80235a2:	2cff      	cmp	r4, #255	@ 0xff
 80235a4:	d021      	beq.n	80235ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80235a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80235a8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80235ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80235ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80235b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80235b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80235b8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80235ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80235be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80235c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80235c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80235ce:	44de      	add	lr, fp
 80235d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80235d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80235e4:	ea4e 040a 	orr.w	r4, lr, sl
 80235e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80235ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80235ec:	2cff      	cmp	r4, #255	@ 0xff
 80235ee:	d021      	beq.n	8023634 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80235f0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80235f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80235f6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80235f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80235fc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80235fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023602:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023604:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023608:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802360c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023610:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023614:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023618:	44de      	add	lr, fp
 802361a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802361e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023622:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023626:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802362a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802362e:	ea4e 040a 	orr.w	r4, lr, sl
 8023632:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023634:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023636:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802363a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802363e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023642:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023644:	fb08 fc0c 	mul.w	ip, r8, ip
 8023648:	fb02 cc0e 	mla	ip, r2, lr, ip
 802364c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023650:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023652:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023656:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802365a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802365c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023660:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023664:	fb08 f80e 	mul.w	r8, r8, lr
 8023668:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802366c:	fb02 8303 	mla	r3, r2, r3, r8
 8023670:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023672:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023676:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802367a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802367c:	fb01 330a 	mla	r3, r1, sl, r3
 8023680:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8023684:	fb09 3901 	mla	r9, r9, r1, r3
 8023688:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802368a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802368c:	4343      	muls	r3, r0
 802368e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023692:	1c58      	adds	r0, r3, #1
 8023694:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023698:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802369c:	ea4c 0c09 	orr.w	ip, ip, r9
 80236a0:	783b      	ldrb	r3, [r7, #0]
 80236a2:	fa5f f28c 	uxtb.w	r2, ip
 80236a6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80236aa:	fb12 f201 	smulbb	r2, r2, r1
 80236ae:	b2c0      	uxtb	r0, r0
 80236b0:	fb03 2300 	mla	r3, r3, r0, r2
 80236b4:	b29b      	uxth	r3, r3
 80236b6:	1c5a      	adds	r2, r3, #1
 80236b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80236bc:	787a      	ldrb	r2, [r7, #1]
 80236be:	fb12 f200 	smulbb	r2, r2, r0
 80236c2:	121b      	asrs	r3, r3, #8
 80236c4:	703b      	strb	r3, [r7, #0]
 80236c6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80236ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80236ce:	fb03 2301 	mla	r3, r3, r1, r2
 80236d2:	b29b      	uxth	r3, r3
 80236d4:	1c5a      	adds	r2, r3, #1
 80236d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80236da:	121b      	asrs	r3, r3, #8
 80236dc:	707b      	strb	r3, [r7, #1]
 80236de:	78bb      	ldrb	r3, [r7, #2]
 80236e0:	fb13 f000 	smulbb	r0, r3, r0
 80236e4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80236e8:	fa1f fc8c 	uxth.w	ip, ip
 80236ec:	f10c 0301 	add.w	r3, ip, #1
 80236f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80236f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80236f8:	f887 c002 	strb.w	ip, [r7, #2]
 80236fc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80236fe:	3703      	adds	r7, #3
 8023700:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023702:	441a      	add	r2, r3
 8023704:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023706:	441d      	add	r5, r3
 8023708:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802370a:	9229      	str	r2, [sp, #164]	@ 0xa4
 802370c:	3b01      	subs	r3, #1
 802370e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023710:	e69c      	b.n	802344c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023712:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023714:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023716:	441c      	add	r4, r3
 8023718:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802371a:	441d      	add	r5, r3
 802371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802371e:	9429      	str	r4, [sp, #164]	@ 0xa4
 8023720:	3b01      	subs	r3, #1
 8023722:	9309      	str	r3, [sp, #36]	@ 0x24
 8023724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023726:	3303      	adds	r3, #3
 8023728:	930c      	str	r3, [sp, #48]	@ 0x30
 802372a:	e66f      	b.n	802340c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802372c:	d026      	beq.n	802377c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802372e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023730:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8023732:	3b01      	subs	r3, #1
 8023734:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023736:	fb00 4003 	mla	r0, r0, r3, r4
 802373a:	1400      	asrs	r0, r0, #16
 802373c:	f53f ae83 	bmi.w	8023446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023740:	3901      	subs	r1, #1
 8023742:	4288      	cmp	r0, r1
 8023744:	f6bf ae7f 	bge.w	8023446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023748:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802374a:	fb01 5303 	mla	r3, r1, r3, r5
 802374e:	141b      	asrs	r3, r3, #16
 8023750:	f53f ae79 	bmi.w	8023446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023754:	3a01      	subs	r2, #1
 8023756:	4293      	cmp	r3, r2
 8023758:	f6bf ae75 	bge.w	8023446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802375c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802375e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023762:	f103 0e03 	add.w	lr, r3, #3
 8023766:	f1bb 0f00 	cmp.w	fp, #0
 802376a:	dc71      	bgt.n	8023850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802376c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802376e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023772:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023774:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023778:	4423      	add	r3, r4
 802377a:	930c      	str	r3, [sp, #48]	@ 0x30
 802377c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802377e:	2b00      	cmp	r3, #0
 8023780:	f340 81b5 	ble.w	8023aee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023788:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802378a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802378e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023792:	eef0 6a62 	vmov.f32	s13, s5
 8023796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802379a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802379e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237a2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80237a6:	eef0 6a43 	vmov.f32	s13, s6
 80237aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237ae:	ee16 5a90 	vmov	r5, s13
 80237b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80237b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80237ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80237be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80237c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80237c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80237ca:	ee12 2a90 	vmov	r2, s5
 80237ce:	eef0 2a47 	vmov.f32	s5, s14
 80237d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80237d6:	ee13 2a10 	vmov	r2, s6
 80237da:	932b      	str	r3, [sp, #172]	@ 0xac
 80237dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80237de:	eeb0 3a67 	vmov.f32	s6, s15
 80237e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80237e6:	932c      	str	r3, [sp, #176]	@ 0xb0
 80237e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80237ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80237ec:	3b01      	subs	r3, #1
 80237ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80237f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80237f2:	bf08      	it	eq
 80237f4:	4613      	moveq	r3, r2
 80237f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80237f8:	e5fa      	b.n	80233f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80237fa:	2900      	cmp	r1, #0
 80237fc:	f43f ae6c 	beq.w	80234d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023800:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023804:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023808:	900a      	str	r0, [sp, #40]	@ 0x28
 802380a:	0e00      	lsrs	r0, r0, #24
 802380c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802380e:	e663      	b.n	80234d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023810:	f113 0801 	adds.w	r8, r3, #1
 8023814:	f53f af72 	bmi.w	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023818:	4540      	cmp	r0, r8
 802381a:	f6ff af6f 	blt.w	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802381e:	f11c 0801 	adds.w	r8, ip, #1
 8023822:	f53f af6b 	bmi.w	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023826:	45c6      	cmp	lr, r8
 8023828:	f6ff af68 	blt.w	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802382c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802382e:	b200      	sxth	r0, r0
 8023830:	9302      	str	r3, [sp, #8]
 8023832:	fa0f f38e 	sxth.w	r3, lr
 8023836:	9000      	str	r0, [sp, #0]
 8023838:	9301      	str	r3, [sp, #4]
 802383a:	4633      	mov	r3, r6
 802383c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802383e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023842:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023846:	4639      	mov	r1, r7
 8023848:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802384a:	f7ff fc74 	bl	8023136 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802384e:	e755      	b.n	80236fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023850:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023852:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023856:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023858:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802385c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802385e:	1427      	asrs	r7, r4, #16
 8023860:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023862:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023866:	142b      	asrs	r3, r5, #16
 8023868:	fb01 7303 	mla	r3, r1, r3, r7
 802386c:	18e7      	adds	r7, r4, r3
 802386e:	5ce3      	ldrb	r3, [r4, r3]
 8023870:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023874:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023878:	2a00      	cmp	r2, #0
 802387a:	f000 812e 	beq.w	8023ada <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802387e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023882:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023886:	9410      	str	r4, [sp, #64]	@ 0x40
 8023888:	0e24      	lsrs	r4, r4, #24
 802388a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802388c:	b170      	cbz	r0, 80238ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802388e:	eb07 0801 	add.w	r8, r7, r1
 8023892:	5c79      	ldrb	r1, [r7, r1]
 8023894:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023898:	910b      	str	r1, [sp, #44]	@ 0x2c
 802389a:	0e09      	lsrs	r1, r1, #24
 802389c:	9114      	str	r1, [sp, #80]	@ 0x50
 802389e:	f898 1001 	ldrb.w	r1, [r8, #1]
 80238a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80238a6:	9111      	str	r1, [sp, #68]	@ 0x44
 80238a8:	0e09      	lsrs	r1, r1, #24
 80238aa:	9118      	str	r1, [sp, #96]	@ 0x60
 80238ac:	b292      	uxth	r2, r2
 80238ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80238b0:	b280      	uxth	r0, r0
 80238b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80238b4:	fb02 f900 	mul.w	r9, r2, r0
 80238b8:	0112      	lsls	r2, r2, #4
 80238ba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80238be:	eba2 0809 	sub.w	r8, r2, r9
 80238c2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80238c6:	b280      	uxth	r0, r0
 80238c8:	fa1f f888 	uxth.w	r8, r8
 80238cc:	1a12      	subs	r2, r2, r0
 80238ce:	fb08 f101 	mul.w	r1, r8, r1
 80238d2:	b292      	uxth	r2, r2
 80238d4:	fb02 110c 	mla	r1, r2, ip, r1
 80238d8:	fb00 1104 	mla	r1, r0, r4, r1
 80238dc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80238de:	fb09 1104 	mla	r1, r9, r4, r1
 80238e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80238e6:	2900      	cmp	r1, #0
 80238e8:	f000 80ec 	beq.w	8023ac4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80238ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80238f0:	d019      	beq.n	8023926 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80238f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80238f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80238fa:	fb0c fa0a 	mul.w	sl, ip, sl
 80238fe:	fb0c fc03 	mul.w	ip, ip, r3
 8023902:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023906:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802390a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802390e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023912:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023916:	4453      	add	r3, sl
 8023918:	0a3f      	lsrs	r7, r7, #8
 802391a:	0a1b      	lsrs	r3, r3, #8
 802391c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023920:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023924:	433b      	orrs	r3, r7
 8023926:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023928:	2cff      	cmp	r4, #255	@ 0xff
 802392a:	d020      	beq.n	802396e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 802392c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802392e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023932:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023934:	4367      	muls	r7, r4
 8023936:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023938:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802393c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023940:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023942:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023946:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802394a:	fb04 fa0a 	mul.w	sl, r4, sl
 802394e:	44bc      	add	ip, r7
 8023950:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023958:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802395c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023960:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023964:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023968:	ea4c 040a 	orr.w	r4, ip, sl
 802396c:	9410      	str	r4, [sp, #64]	@ 0x40
 802396e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023970:	2cff      	cmp	r4, #255	@ 0xff
 8023972:	d020      	beq.n	80239b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8023974:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023976:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802397a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802397c:	4367      	muls	r7, r4
 802397e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023980:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023984:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023988:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802398a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802398e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023992:	fb04 fa0a 	mul.w	sl, r4, sl
 8023996:	44bc      	add	ip, r7
 8023998:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802399c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80239a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239b0:	ea4c 040a 	orr.w	r4, ip, sl
 80239b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80239b6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80239b8:	2cff      	cmp	r4, #255	@ 0xff
 80239ba:	d020      	beq.n	80239fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80239bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80239be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80239c2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80239c4:	4367      	muls	r7, r4
 80239c6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80239c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80239cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80239d0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80239d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80239d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239da:	fb04 fa0a 	mul.w	sl, r4, sl
 80239de:	44bc      	add	ip, r7
 80239e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80239e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80239ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239f8:	ea4c 040a 	orr.w	r4, ip, sl
 80239fc:	9411      	str	r4, [sp, #68]	@ 0x44
 80239fe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023a00:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023a04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023a08:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023a0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023a0e:	fb08 f707 	mul.w	r7, r8, r7
 8023a12:	fb02 770c 	mla	r7, r2, ip, r7
 8023a16:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a1a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a1c:	fb00 770c 	mla	r7, r0, ip, r7
 8023a20:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a24:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023a26:	fb09 770c 	mla	r7, r9, ip, r7
 8023a2a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8023a2e:	fb08 f80c 	mul.w	r8, r8, ip
 8023a32:	0a3f      	lsrs	r7, r7, #8
 8023a34:	fb02 8303 	mla	r3, r2, r3, r8
 8023a38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023a3a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023a3e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023a42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023a44:	fb00 330a 	mla	r3, r0, sl, r3
 8023a48:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023a4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023a4e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a58:	434b      	muls	r3, r1
 8023a5a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023a5e:	1c59      	adds	r1, r3, #1
 8023a60:	ea47 070c 	orr.w	r7, r7, ip
 8023a64:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023a68:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023a6c:	b2fa      	uxtb	r2, r7
 8023a6e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023a72:	fb12 f200 	smulbb	r2, r2, r0
 8023a76:	b2c9      	uxtb	r1, r1
 8023a78:	fb03 2301 	mla	r3, r3, r1, r2
 8023a7c:	b29b      	uxth	r3, r3
 8023a7e:	1c5a      	adds	r2, r3, #1
 8023a80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023a84:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023a88:	fb12 f201 	smulbb	r2, r2, r1
 8023a8c:	121b      	asrs	r3, r3, #8
 8023a8e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023a92:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023a96:	0c3f      	lsrs	r7, r7, #16
 8023a98:	fb03 2300 	mla	r3, r3, r0, r2
 8023a9c:	b29b      	uxth	r3, r3
 8023a9e:	1c5a      	adds	r2, r3, #1
 8023aa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023aa4:	121b      	asrs	r3, r3, #8
 8023aa6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023aaa:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023aae:	fb13 f101 	smulbb	r1, r3, r1
 8023ab2:	fb07 1700 	mla	r7, r7, r0, r1
 8023ab6:	b2bf      	uxth	r7, r7
 8023ab8:	1c7b      	adds	r3, r7, #1
 8023aba:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023abe:	123f      	asrs	r7, r7, #8
 8023ac0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8023ac4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023ac6:	f10e 0e03 	add.w	lr, lr, #3
 8023aca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023ad0:	441a      	add	r2, r3
 8023ad2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023ad4:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023ad6:	441d      	add	r5, r3
 8023ad8:	e645      	b.n	8023766 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023ada:	2800      	cmp	r0, #0
 8023adc:	f43f aee6 	beq.w	80238ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023ae0:	5c79      	ldrb	r1, [r7, r1]
 8023ae2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023ae6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023ae8:	0e09      	lsrs	r1, r1, #24
 8023aea:	9114      	str	r1, [sp, #80]	@ 0x50
 8023aec:	e6de      	b.n	80238ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023aee:	b01f      	add	sp, #124	@ 0x7c
 8023af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023af4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8023af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023af8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8023afc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8023b00:	2d00      	cmp	r5, #0
 8023b02:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8023b06:	fb05 700e 	mla	r0, r5, lr, r7
 8023b0a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8023b0e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8023b12:	eb02 0800 	add.w	r8, r2, r0
 8023b16:	f2c0 8105 	blt.w	8023d24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8023b1a:	45a9      	cmp	r9, r5
 8023b1c:	f340 8102 	ble.w	8023d24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8023b20:	2f00      	cmp	r7, #0
 8023b22:	f2c0 80fd 	blt.w	8023d20 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8023b26:	45be      	cmp	lr, r7
 8023b28:	f340 80fa 	ble.w	8023d20 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8023b2c:	5c12      	ldrb	r2, [r2, r0]
 8023b2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023b32:	1c7a      	adds	r2, r7, #1
 8023b34:	f100 80f9 	bmi.w	8023d2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023b38:	4596      	cmp	lr, r2
 8023b3a:	f340 80f6 	ble.w	8023d2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023b3e:	2c00      	cmp	r4, #0
 8023b40:	f000 80f5 	beq.w	8023d2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8023b44:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023b48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023b4c:	3501      	adds	r5, #1
 8023b4e:	f100 80f2 	bmi.w	8023d36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8023b52:	45a9      	cmp	r9, r5
 8023b54:	f340 80ef 	ble.w	8023d36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8023b58:	f1bc 0f00 	cmp.w	ip, #0
 8023b5c:	f000 80ee 	beq.w	8023d3c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8023b60:	2f00      	cmp	r7, #0
 8023b62:	f2c0 80e6 	blt.w	8023d32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8023b66:	45be      	cmp	lr, r7
 8023b68:	f340 80e3 	ble.w	8023d32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8023b6c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8023b70:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023b74:	3701      	adds	r7, #1
 8023b76:	f100 80e4 	bmi.w	8023d42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8023b7a:	45be      	cmp	lr, r7
 8023b7c:	f340 80e1 	ble.w	8023d42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8023b80:	2c00      	cmp	r4, #0
 8023b82:	f000 80e0 	beq.w	8023d46 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8023b86:	44c6      	add	lr, r8
 8023b88:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023b8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023b90:	b2a3      	uxth	r3, r4
 8023b92:	fa1f fc8c 	uxth.w	ip, ip
 8023b96:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023b9a:	fb0c fe03 	mul.w	lr, ip, r3
 8023b9e:	011b      	lsls	r3, r3, #4
 8023ba0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023ba4:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8023ba8:	eba3 070e 	sub.w	r7, r3, lr
 8023bac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8023bb0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023bb4:	fa1f f48c 	uxth.w	r4, ip
 8023bb8:	b2bf      	uxth	r7, r7
 8023bba:	1b1b      	subs	r3, r3, r4
 8023bbc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023bc0:	fb07 fc0a 	mul.w	ip, r7, sl
 8023bc4:	b29b      	uxth	r3, r3
 8023bc6:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023bca:	9300      	str	r3, [sp, #0]
 8023bcc:	fb04 cc09 	mla	ip, r4, r9, ip
 8023bd0:	fb0e cc08 	mla	ip, lr, r8, ip
 8023bd4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023bd8:	9301      	str	r3, [sp, #4]
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	f000 809d 	beq.w	8023d1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8023be0:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8023be4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023be8:	fb0b fc0c 	mul.w	ip, fp, ip
 8023bec:	fb0b f606 	mul.w	r6, fp, r6
 8023bf0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023bf4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023bf8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8023bfc:	44dc      	add	ip, fp
 8023bfe:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8023c02:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023c06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c0a:	fb0a fb0b 	mul.w	fp, sl, fp
 8023c0e:	fb0a fa00 	mul.w	sl, sl, r0
 8023c12:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8023c16:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8023c1a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8023c1e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023c22:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023c26:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023c2a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023c2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023c32:	0a36      	lsrs	r6, r6, #8
 8023c34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c38:	44dc      	add	ip, fp
 8023c3a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023c3e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023c42:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023c46:	fb09 fb0b 	mul.w	fp, r9, fp
 8023c4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c4e:	fb09 f905 	mul.w	r9, r9, r5
 8023c52:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023c56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023c5a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8023c5e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023c62:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023c66:	fb0c fc07 	mul.w	ip, ip, r7
 8023c6a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8023c6e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8023c72:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023c76:	4458      	add	r0, fp
 8023c78:	fb08 f505 	mul.w	r5, r8, r5
 8023c7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c80:	fb08 f802 	mul.w	r8, r8, r2
 8023c84:	0a00      	lsrs	r0, r0, #8
 8023c86:	0a2a      	lsrs	r2, r5, #8
 8023c88:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023c8c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023c90:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023c94:	4415      	add	r5, r2
 8023c96:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023c9a:	0a2d      	lsrs	r5, r5, #8
 8023c9c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023ca0:	9a00      	ldr	r2, [sp, #0]
 8023ca2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023ca6:	fb03 cc02 	mla	ip, r3, r2, ip
 8023caa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023cae:	9b01      	ldr	r3, [sp, #4]
 8023cb0:	fb05 c50e 	mla	r5, r5, lr, ip
 8023cb4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8023cb8:	43db      	mvns	r3, r3
 8023cba:	fb00 5004 	mla	r0, r0, r4, r5
 8023cbe:	b2db      	uxtb	r3, r3
 8023cc0:	0a00      	lsrs	r0, r0, #8
 8023cc2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023cc6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8023cca:	4378      	muls	r0, r7
 8023ccc:	fb02 0006 	mla	r0, r2, r6, r0
 8023cd0:	780a      	ldrb	r2, [r1, #0]
 8023cd2:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023cd6:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8023cda:	fb04 e000 	mla	r0, r4, r0, lr
 8023cde:	fb02 f403 	mul.w	r4, r2, r3
 8023ce2:	0a00      	lsrs	r0, r0, #8
 8023ce4:	1c62      	adds	r2, r4, #1
 8023ce6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023cea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023cee:	4328      	orrs	r0, r5
 8023cf0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023cf4:	700a      	strb	r2, [r1, #0]
 8023cf6:	784a      	ldrb	r2, [r1, #1]
 8023cf8:	435a      	muls	r2, r3
 8023cfa:	1c54      	adds	r4, r2, #1
 8023cfc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8023d00:	0a02      	lsrs	r2, r0, #8
 8023d02:	0c00      	lsrs	r0, r0, #16
 8023d04:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023d08:	704a      	strb	r2, [r1, #1]
 8023d0a:	788a      	ldrb	r2, [r1, #2]
 8023d0c:	4353      	muls	r3, r2
 8023d0e:	1c5a      	adds	r2, r3, #1
 8023d10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023d18:	7088      	strb	r0, [r1, #2]
 8023d1a:	b003      	add	sp, #12
 8023d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d20:	2600      	movs	r6, #0
 8023d22:	e706      	b.n	8023b32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8023d24:	2000      	movs	r0, #0
 8023d26:	4606      	mov	r6, r0
 8023d28:	e710      	b.n	8023b4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023d2a:	2000      	movs	r0, #0
 8023d2c:	e70e      	b.n	8023b4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023d2e:	4620      	mov	r0, r4
 8023d30:	e70c      	b.n	8023b4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023d32:	2500      	movs	r5, #0
 8023d34:	e71e      	b.n	8023b74 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8023d36:	2200      	movs	r2, #0
 8023d38:	4615      	mov	r5, r2
 8023d3a:	e729      	b.n	8023b90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023d3c:	4662      	mov	r2, ip
 8023d3e:	4665      	mov	r5, ip
 8023d40:	e726      	b.n	8023b90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023d42:	2200      	movs	r2, #0
 8023d44:	e724      	b.n	8023b90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023d46:	4622      	mov	r2, r4
 8023d48:	e722      	b.n	8023b90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08023d4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d4e:	b09b      	sub	sp, #108	@ 0x6c
 8023d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023d54:	9218      	str	r2, [sp, #96]	@ 0x60
 8023d56:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023d58:	9019      	str	r0, [sp, #100]	@ 0x64
 8023d5a:	9116      	str	r1, [sp, #88]	@ 0x58
 8023d5c:	6850      	ldr	r0, [r2, #4]
 8023d5e:	9307      	str	r3, [sp, #28]
 8023d60:	6812      	ldr	r2, [r2, #0]
 8023d62:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8023d64:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8023d68:	fb00 1303 	mla	r3, r0, r3, r1
 8023d6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d70:	18d3      	adds	r3, r2, r3
 8023d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8023d74:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023d76:	681b      	ldr	r3, [r3, #0]
 8023d78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023d7a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023d7c:	685e      	ldr	r6, [r3, #4]
 8023d7e:	3604      	adds	r6, #4
 8023d80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	dc03      	bgt.n	8023d8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023d86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	f340 834f 	ble.w	802442c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8023d8e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023d90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d98:	1e48      	subs	r0, r1, #1
 8023d9a:	1e57      	subs	r7, r2, #1
 8023d9c:	9b07      	ldr	r3, [sp, #28]
 8023d9e:	2b00      	cmp	r3, #0
 8023da0:	f340 8178 	ble.w	8024094 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023da4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023da6:	142b      	asrs	r3, r5, #16
 8023da8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023dac:	d406      	bmi.n	8023dbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023dae:	4584      	cmp	ip, r0
 8023db0:	da04      	bge.n	8023dbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	db02      	blt.n	8023dbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023db6:	42bb      	cmp	r3, r7
 8023db8:	f2c0 816d 	blt.w	8024096 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023dbc:	f11c 0c01 	adds.w	ip, ip, #1
 8023dc0:	f100 815b 	bmi.w	802407a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023dc4:	4561      	cmp	r1, ip
 8023dc6:	f2c0 8158 	blt.w	802407a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023dca:	3301      	adds	r3, #1
 8023dcc:	f100 8155 	bmi.w	802407a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023dd0:	429a      	cmp	r2, r3
 8023dd2:	f2c0 8152 	blt.w	802407a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023dd6:	9b07      	ldr	r3, [sp, #28]
 8023dd8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023dda:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023ddc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	f340 8178 	ble.w	80240d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023de4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023de6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023dea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023dee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023df2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023df4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023df8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023dfa:	141b      	asrs	r3, r3, #16
 8023dfc:	f100 81ba 	bmi.w	8024174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023e00:	f101 38ff 	add.w	r8, r1, #4294967295
 8023e04:	4543      	cmp	r3, r8
 8023e06:	f280 81b5 	bge.w	8024174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023e0a:	f1bc 0f00 	cmp.w	ip, #0
 8023e0e:	f2c0 81b1 	blt.w	8024174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023e12:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023e16:	45c4      	cmp	ip, r8
 8023e18:	f280 81ac 	bge.w	8024174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023e1c:	b209      	sxth	r1, r1
 8023e1e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023e20:	fb0c 3301 	mla	r3, ip, r1, r3
 8023e24:	eb04 0803 	add.w	r8, r4, r3
 8023e28:	5ce3      	ldrb	r3, [r4, r3]
 8023e2a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e2e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023e32:	2a00      	cmp	r2, #0
 8023e34:	f000 8193 	beq.w	802415e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8023e38:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023e3c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023e40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023e42:	0e24      	lsrs	r4, r4, #24
 8023e44:	9412      	str	r4, [sp, #72]	@ 0x48
 8023e46:	b178      	cbz	r0, 8023e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023e48:	eb08 0c01 	add.w	ip, r8, r1
 8023e4c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023e50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e54:	9108      	str	r1, [sp, #32]
 8023e56:	0e09      	lsrs	r1, r1, #24
 8023e58:	9110      	str	r1, [sp, #64]	@ 0x40
 8023e5a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023e5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e62:	910c      	str	r1, [sp, #48]	@ 0x30
 8023e64:	0e09      	lsrs	r1, r1, #24
 8023e66:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023e68:	b292      	uxth	r2, r2
 8023e6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023e6c:	b280      	uxth	r0, r0
 8023e6e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023e70:	fb02 f900 	mul.w	r9, r2, r0
 8023e74:	0112      	lsls	r2, r2, #4
 8023e76:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023e7a:	eba2 0809 	sub.w	r8, r2, r9
 8023e7e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023e82:	b280      	uxth	r0, r0
 8023e84:	fa1f f888 	uxth.w	r8, r8
 8023e88:	1a12      	subs	r2, r2, r0
 8023e8a:	fb08 f101 	mul.w	r1, r8, r1
 8023e8e:	b292      	uxth	r2, r2
 8023e90:	fb02 110e 	mla	r1, r2, lr, r1
 8023e94:	fb00 1104 	mla	r1, r0, r4, r1
 8023e98:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023e9a:	fb09 1104 	mla	r1, r9, r4, r1
 8023e9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023ea2:	2900      	cmp	r1, #0
 8023ea4:	f000 80de 	beq.w	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023ea8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023eac:	d01b      	beq.n	8023ee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023eae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023eb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023eb6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023eba:	fb0e fe03 	mul.w	lr, lr, r3
 8023ebe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ec2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023ec6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023eca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023ece:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023ed2:	4453      	add	r3, sl
 8023ed4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ed8:	0a1b      	lsrs	r3, r3, #8
 8023eda:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023ede:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023ee2:	ea43 030c 	orr.w	r3, r3, ip
 8023ee6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ee8:	2cff      	cmp	r4, #255	@ 0xff
 8023eea:	d021      	beq.n	8023f30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023eec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023eee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023ef2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ef4:	fb04 fb0b 	mul.w	fp, r4, fp
 8023ef8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023efa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023efe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023f00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023f08:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023f14:	44de      	add	lr, fp
 8023f16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023f2a:	ea4e 040a 	orr.w	r4, lr, sl
 8023f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023f30:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023f32:	2cff      	cmp	r4, #255	@ 0xff
 8023f34:	d021      	beq.n	8023f7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023f36:	9c08      	ldr	r4, [sp, #32]
 8023f38:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023f3c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023f3e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023f42:	9c08      	ldr	r4, [sp, #32]
 8023f44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023f48:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023f4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023f52:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f5a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023f5e:	44de      	add	lr, fp
 8023f60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023f74:	ea4e 040a 	orr.w	r4, lr, sl
 8023f78:	9408      	str	r4, [sp, #32]
 8023f7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f7c:	2cff      	cmp	r4, #255	@ 0xff
 8023f7e:	d021      	beq.n	8023fc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023f80:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023f82:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023f86:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f88:	fb04 fb0b 	mul.w	fp, r4, fp
 8023f8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023f8e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023f92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f98:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023f9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023fa0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023fa4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023fa8:	44de      	add	lr, fp
 8023faa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023fae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023fb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023fba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023fbe:	ea4e 040a 	orr.w	r4, lr, sl
 8023fc2:	940c      	str	r4, [sp, #48]	@ 0x30
 8023fc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023fc6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023fca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023fce:	43c9      	mvns	r1, r1
 8023fd0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023fd4:	9c08      	ldr	r4, [sp, #32]
 8023fd6:	b2c9      	uxtb	r1, r1
 8023fd8:	fb08 fc0c 	mul.w	ip, r8, ip
 8023fdc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023fe0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023fe4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023fe6:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023fea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023fee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023ff0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023ff4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023ff8:	fb08 f80e 	mul.w	r8, r8, lr
 8023ffc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024000:	fb02 8303 	mla	r3, r2, r3, r8
 8024004:	9a08      	ldr	r2, [sp, #32]
 8024006:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802400a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802400e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024010:	fb00 330a 	mla	r3, r0, sl, r3
 8024014:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8024018:	fb09 3900 	mla	r9, r9, r0, r3
 802401c:	783b      	ldrb	r3, [r7, #0]
 802401e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024022:	fb03 f201 	mul.w	r2, r3, r1
 8024026:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802402a:	1c53      	adds	r3, r2, #1
 802402c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024030:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024034:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024038:	703b      	strb	r3, [r7, #0]
 802403a:	787b      	ldrb	r3, [r7, #1]
 802403c:	434b      	muls	r3, r1
 802403e:	1c5a      	adds	r2, r3, #1
 8024040:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024044:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024048:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802404c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024050:	707b      	strb	r3, [r7, #1]
 8024052:	78bb      	ldrb	r3, [r7, #2]
 8024054:	4359      	muls	r1, r3
 8024056:	1c4b      	adds	r3, r1, #1
 8024058:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802405c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024060:	f887 c002 	strb.w	ip, [r7, #2]
 8024064:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024066:	3703      	adds	r7, #3
 8024068:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802406a:	441a      	add	r2, r3
 802406c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802406e:	441d      	add	r5, r3
 8024070:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024072:	9225      	str	r2, [sp, #148]	@ 0x94
 8024074:	3b01      	subs	r3, #1
 8024076:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024078:	e6b0      	b.n	8023ddc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802407a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802407c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802407e:	441c      	add	r4, r3
 8024080:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024082:	441d      	add	r5, r3
 8024084:	9b07      	ldr	r3, [sp, #28]
 8024086:	9425      	str	r4, [sp, #148]	@ 0x94
 8024088:	3b01      	subs	r3, #1
 802408a:	9307      	str	r3, [sp, #28]
 802408c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802408e:	3303      	adds	r3, #3
 8024090:	930a      	str	r3, [sp, #40]	@ 0x28
 8024092:	e683      	b.n	8023d9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024094:	d026      	beq.n	80240e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024096:	9b07      	ldr	r3, [sp, #28]
 8024098:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802409a:	3b01      	subs	r3, #1
 802409c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802409e:	fb00 4003 	mla	r0, r0, r3, r4
 80240a2:	1400      	asrs	r0, r0, #16
 80240a4:	f53f ae97 	bmi.w	8023dd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80240a8:	3901      	subs	r1, #1
 80240aa:	4288      	cmp	r0, r1
 80240ac:	f6bf ae93 	bge.w	8023dd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80240b0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80240b2:	fb01 5303 	mla	r3, r1, r3, r5
 80240b6:	141b      	asrs	r3, r3, #16
 80240b8:	f53f ae8d 	bmi.w	8023dd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80240bc:	3a01      	subs	r2, #1
 80240be:	4293      	cmp	r3, r2
 80240c0:	f6bf ae89 	bge.w	8023dd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80240c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80240ca:	f103 0e03 	add.w	lr, r3, #3
 80240ce:	f1bb 0f00 	cmp.w	fp, #0
 80240d2:	dc6d      	bgt.n	80241b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80240d4:	9b07      	ldr	r3, [sp, #28]
 80240d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80240da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80240e0:	4423      	add	r3, r4
 80240e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80240e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	f340 81a0 	ble.w	802442c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80240ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80240f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80240f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80240f6:	eeb0 6a62 	vmov.f32	s12, s5
 80240fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80240fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024106:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802410a:	eeb0 6a43 	vmov.f32	s12, s6
 802410e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024112:	ee16 5a10 	vmov	r5, s12
 8024116:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802411a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802411e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024122:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024126:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802412a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802412e:	ee12 2a90 	vmov	r2, s5
 8024132:	eef0 2a47 	vmov.f32	s5, s14
 8024136:	fb92 f3f3 	sdiv	r3, r2, r3
 802413a:	ee13 2a10 	vmov	r2, s6
 802413e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024140:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024142:	eeb0 3a67 	vmov.f32	s6, s15
 8024146:	fb92 f3f3 	sdiv	r3, r2, r3
 802414a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802414c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802414e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024150:	3b01      	subs	r3, #1
 8024152:	9316      	str	r3, [sp, #88]	@ 0x58
 8024154:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024156:	bf08      	it	eq
 8024158:	4613      	moveq	r3, r2
 802415a:	9307      	str	r3, [sp, #28]
 802415c:	e610      	b.n	8023d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802415e:	2800      	cmp	r0, #0
 8024160:	f43f ae82 	beq.w	8023e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024164:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024168:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802416c:	9108      	str	r1, [sp, #32]
 802416e:	0e09      	lsrs	r1, r1, #24
 8024170:	9110      	str	r1, [sp, #64]	@ 0x40
 8024172:	e679      	b.n	8023e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024174:	f113 0801 	adds.w	r8, r3, #1
 8024178:	f53f af74 	bmi.w	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802417c:	4541      	cmp	r1, r8
 802417e:	f6ff af71 	blt.w	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024182:	f11c 0801 	adds.w	r8, ip, #1
 8024186:	f53f af6d 	bmi.w	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802418a:	45c6      	cmp	lr, r8
 802418c:	f6ff af6a 	blt.w	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024190:	b209      	sxth	r1, r1
 8024192:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024196:	fa0f f38e 	sxth.w	r3, lr
 802419a:	9100      	str	r1, [sp, #0]
 802419c:	4639      	mov	r1, r7
 802419e:	9301      	str	r3, [sp, #4]
 80241a0:	4633      	mov	r3, r6
 80241a2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80241a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80241a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80241aa:	f7ff fca3 	bl	8023af4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80241ae:	e759      	b.n	8024064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80241b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80241b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80241b6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80241b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80241bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80241be:	1427      	asrs	r7, r4, #16
 80241c0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80241c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241c6:	142b      	asrs	r3, r5, #16
 80241c8:	fb01 7303 	mla	r3, r1, r3, r7
 80241cc:	18e7      	adds	r7, r4, r3
 80241ce:	5ce3      	ldrb	r3, [r4, r3]
 80241d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80241d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80241d8:	2a00      	cmp	r2, #0
 80241da:	f000 811d 	beq.w	8024418 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80241de:	f897 8001 	ldrb.w	r8, [r7, #1]
 80241e2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80241e6:	940d      	str	r4, [sp, #52]	@ 0x34
 80241e8:	0e24      	lsrs	r4, r4, #24
 80241ea:	9414      	str	r4, [sp, #80]	@ 0x50
 80241ec:	b170      	cbz	r0, 802420c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80241ee:	eb07 0801 	add.w	r8, r7, r1
 80241f2:	5c79      	ldrb	r1, [r7, r1]
 80241f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80241fa:	0e09      	lsrs	r1, r1, #24
 80241fc:	9111      	str	r1, [sp, #68]	@ 0x44
 80241fe:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024202:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024206:	910e      	str	r1, [sp, #56]	@ 0x38
 8024208:	0e09      	lsrs	r1, r1, #24
 802420a:	9115      	str	r1, [sp, #84]	@ 0x54
 802420c:	b292      	uxth	r2, r2
 802420e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024210:	b280      	uxth	r0, r0
 8024212:	fb02 f900 	mul.w	r9, r2, r0
 8024216:	0112      	lsls	r2, r2, #4
 8024218:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802421c:	eba2 0809 	sub.w	r8, r2, r9
 8024220:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8024224:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024226:	b280      	uxth	r0, r0
 8024228:	fa1f f888 	uxth.w	r8, r8
 802422c:	1a09      	subs	r1, r1, r0
 802422e:	fb08 f202 	mul.w	r2, r8, r2
 8024232:	b289      	uxth	r1, r1
 8024234:	fb01 220c 	mla	r2, r1, ip, r2
 8024238:	fb00 2204 	mla	r2, r0, r4, r2
 802423c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802423e:	fb09 2204 	mla	r2, r9, r4, r2
 8024242:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024246:	2a00      	cmp	r2, #0
 8024248:	f000 80db 	beq.w	8024402 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802424c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024250:	d019      	beq.n	8024286 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8024252:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024256:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802425a:	fb0c fa0a 	mul.w	sl, ip, sl
 802425e:	fb0c fc03 	mul.w	ip, ip, r3
 8024262:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024266:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802426a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802426e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024272:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024276:	4453      	add	r3, sl
 8024278:	0a3f      	lsrs	r7, r7, #8
 802427a:	0a1b      	lsrs	r3, r3, #8
 802427c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024280:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024284:	433b      	orrs	r3, r7
 8024286:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024288:	2cff      	cmp	r4, #255	@ 0xff
 802428a:	d020      	beq.n	80242ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802428c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802428e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024292:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024294:	4367      	muls	r7, r4
 8024296:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024298:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802429c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80242a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80242a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80242a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80242ae:	44bc      	add	ip, r7
 80242b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80242b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80242c8:	ea4c 040a 	orr.w	r4, ip, sl
 80242cc:	940d      	str	r4, [sp, #52]	@ 0x34
 80242ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80242d0:	2cff      	cmp	r4, #255	@ 0xff
 80242d2:	d020      	beq.n	8024316 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80242d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80242d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80242da:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80242dc:	4367      	muls	r7, r4
 80242de:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80242e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80242e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80242ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80242ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80242f6:	44bc      	add	ip, r7
 80242f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80242fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024300:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024304:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802430c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024310:	ea4c 040a 	orr.w	r4, ip, sl
 8024314:	9409      	str	r4, [sp, #36]	@ 0x24
 8024316:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024318:	2cff      	cmp	r4, #255	@ 0xff
 802431a:	d020      	beq.n	802435e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 802431c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802431e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024322:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024324:	4367      	muls	r7, r4
 8024326:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024328:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802432c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024330:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024332:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024336:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802433a:	fb04 fa0a 	mul.w	sl, r4, sl
 802433e:	44bc      	add	ip, r7
 8024340:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024344:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024348:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802434c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024350:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024354:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024358:	ea4c 040a 	orr.w	r4, ip, sl
 802435c:	940e      	str	r4, [sp, #56]	@ 0x38
 802435e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024360:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024364:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024368:	43d2      	mvns	r2, r2
 802436a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802436e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024370:	b2d2      	uxtb	r2, r2
 8024372:	fb08 f707 	mul.w	r7, r8, r7
 8024376:	fb01 770c 	mla	r7, r1, ip, r7
 802437a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802437e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024380:	fb00 770c 	mla	r7, r0, ip, r7
 8024384:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024388:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802438a:	fb09 770c 	mla	r7, r9, ip, r7
 802438e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024392:	fb08 f80c 	mul.w	r8, r8, ip
 8024396:	0a3f      	lsrs	r7, r7, #8
 8024398:	fb01 8303 	mla	r3, r1, r3, r8
 802439c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802439e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80243a2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80243a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80243a8:	fb00 330a 	mla	r3, r0, sl, r3
 80243ac:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80243b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80243b4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80243b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243bc:	fb03 f102 	mul.w	r1, r3, r2
 80243c0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80243c4:	1c4b      	adds	r3, r1, #1
 80243c6:	ea47 070c 	orr.w	r7, r7, ip
 80243ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80243ce:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80243d2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80243d6:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80243da:	4353      	muls	r3, r2
 80243dc:	1c59      	adds	r1, r3, #1
 80243de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80243e2:	0a3b      	lsrs	r3, r7, #8
 80243e4:	0c3f      	lsrs	r7, r7, #16
 80243e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80243ea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80243ee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80243f2:	435a      	muls	r2, r3
 80243f4:	1c53      	adds	r3, r2, #1
 80243f6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80243fa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80243fe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024402:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024404:	f10e 0e03 	add.w	lr, lr, #3
 8024408:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802440a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802440e:	441a      	add	r2, r3
 8024410:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024412:	9225      	str	r2, [sp, #148]	@ 0x94
 8024414:	441d      	add	r5, r3
 8024416:	e65a      	b.n	80240ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8024418:	2800      	cmp	r0, #0
 802441a:	f43f aef7 	beq.w	802420c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802441e:	5c79      	ldrb	r1, [r7, r1]
 8024420:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024424:	9109      	str	r1, [sp, #36]	@ 0x24
 8024426:	0e09      	lsrs	r1, r1, #24
 8024428:	9111      	str	r1, [sp, #68]	@ 0x44
 802442a:	e6ef      	b.n	802420c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802442c:	b01b      	add	sp, #108	@ 0x6c
 802442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024432 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8024432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024436:	b08d      	sub	sp, #52	@ 0x34
 8024438:	468b      	mov	fp, r1
 802443a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 802443e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8024442:	fb0c 5703 	mla	r7, ip, r3, r5
 8024446:	f1bc 0f00 	cmp.w	ip, #0
 802444a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802444c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024450:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8024454:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8024458:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 802445c:	eb02 0607 	add.w	r6, r2, r7
 8024460:	f89b 4000 	ldrb.w	r4, [fp]
 8024464:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8024468:	f89b 1002 	ldrb.w	r1, [fp, #2]
 802446c:	f2c0 80c1 	blt.w	80245f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024470:	45e6      	cmp	lr, ip
 8024472:	f340 80be 	ble.w	80245f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024476:	2d00      	cmp	r5, #0
 8024478:	f2c0 80b7 	blt.w	80245ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802447c:	42ab      	cmp	r3, r5
 802447e:	f340 80b4 	ble.w	80245ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024482:	5dd2      	ldrb	r2, [r2, r7]
 8024484:	9205      	str	r2, [sp, #20]
 8024486:	7872      	ldrb	r2, [r6, #1]
 8024488:	9206      	str	r2, [sp, #24]
 802448a:	78b2      	ldrb	r2, [r6, #2]
 802448c:	9207      	str	r2, [sp, #28]
 802448e:	1c6a      	adds	r2, r5, #1
 8024490:	f100 80b6 	bmi.w	8024600 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024494:	4293      	cmp	r3, r2
 8024496:	f340 80b3 	ble.w	8024600 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802449a:	f1b8 0f00 	cmp.w	r8, #0
 802449e:	f000 80af 	beq.w	8024600 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80244a2:	78f2      	ldrb	r2, [r6, #3]
 80244a4:	9201      	str	r2, [sp, #4]
 80244a6:	7932      	ldrb	r2, [r6, #4]
 80244a8:	9202      	str	r2, [sp, #8]
 80244aa:	7972      	ldrb	r2, [r6, #5]
 80244ac:	9203      	str	r2, [sp, #12]
 80244ae:	f11c 0c01 	adds.w	ip, ip, #1
 80244b2:	f100 80ad 	bmi.w	8024610 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80244b6:	45e6      	cmp	lr, ip
 80244b8:	f340 80aa 	ble.w	8024610 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80244bc:	f1ba 0f00 	cmp.w	sl, #0
 80244c0:	f000 80a6 	beq.w	8024610 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80244c4:	2d00      	cmp	r5, #0
 80244c6:	f2c0 809f 	blt.w	8024608 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80244ca:	42ab      	cmp	r3, r5
 80244cc:	f340 809c 	ble.w	8024608 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80244d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80244d4:	f816 9002 	ldrb.w	r9, [r6, r2]
 80244d8:	2203      	movs	r2, #3
 80244da:	fb03 6c02 	mla	ip, r3, r2, r6
 80244de:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80244e2:	f89c e002 	ldrb.w	lr, [ip, #2]
 80244e6:	9704      	str	r7, [sp, #16]
 80244e8:	3501      	adds	r5, #1
 80244ea:	f100 8098 	bmi.w	802461e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80244ee:	42ab      	cmp	r3, r5
 80244f0:	f340 8095 	ble.w	802461e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80244f4:	f1b8 0f00 	cmp.w	r8, #0
 80244f8:	f000 8091 	beq.w	802461e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80244fc:	f04f 0c03 	mov.w	ip, #3
 8024500:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8024504:	5cb5      	ldrb	r5, [r6, r2]
 8024506:	fb03 620c 	mla	r2, r3, ip, r6
 802450a:	fb03 630c 	mla	r3, r3, ip, r6
 802450e:	7912      	ldrb	r2, [r2, #4]
 8024510:	795e      	ldrb	r6, [r3, #5]
 8024512:	fa1f f388 	uxth.w	r3, r8
 8024516:	fa1f fc8a 	uxth.w	ip, sl
 802451a:	fb03 f70c 	mul.w	r7, r3, ip
 802451e:	011b      	lsls	r3, r3, #4
 8024520:	9708      	str	r7, [sp, #32]
 8024522:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8024526:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 802452a:	1bdb      	subs	r3, r3, r7
 802452c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8024530:	fa1f fc8c 	uxth.w	ip, ip
 8024534:	b29b      	uxth	r3, r3
 8024536:	9709      	str	r7, [sp, #36]	@ 0x24
 8024538:	ebaa 0a0c 	sub.w	sl, sl, ip
 802453c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802453e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024540:	fa1f fa8a 	uxth.w	sl, sl
 8024544:	ea6f 0807 	mvn.w	r8, r7
 8024548:	9f01      	ldr	r7, [sp, #4]
 802454a:	435f      	muls	r7, r3
 802454c:	9b05      	ldr	r3, [sp, #20]
 802454e:	fa5f f888 	uxtb.w	r8, r8
 8024552:	fb0a 7703 	mla	r7, sl, r3, r7
 8024556:	9b08      	ldr	r3, [sp, #32]
 8024558:	fb14 f408 	smulbb	r4, r4, r8
 802455c:	fb0c 7709 	mla	r7, ip, r9, r7
 8024560:	fb10 f008 	smulbb	r0, r0, r8
 8024564:	fb11 f108 	smulbb	r1, r1, r8
 8024568:	fb03 7705 	mla	r7, r3, r5, r7
 802456c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802456e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024572:	fb07 4703 	mla	r7, r7, r3, r4
 8024576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024578:	b2bf      	uxth	r7, r7
 802457a:	1c7c      	adds	r4, r7, #1
 802457c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8024580:	1224      	asrs	r4, r4, #8
 8024582:	f88b 4000 	strb.w	r4, [fp]
 8024586:	9c02      	ldr	r4, [sp, #8]
 8024588:	435c      	muls	r4, r3
 802458a:	9b06      	ldr	r3, [sp, #24]
 802458c:	fb0a 4403 	mla	r4, sl, r3, r4
 8024590:	9b04      	ldr	r3, [sp, #16]
 8024592:	fb0c 4403 	mla	r4, ip, r3, r4
 8024596:	9b08      	ldr	r3, [sp, #32]
 8024598:	fb03 4402 	mla	r4, r3, r2, r4
 802459c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802459e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80245a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80245a4:	fb04 0403 	mla	r4, r4, r3, r0
 80245a8:	9b03      	ldr	r3, [sp, #12]
 80245aa:	435a      	muls	r2, r3
 80245ac:	b2a4      	uxth	r4, r4
 80245ae:	4613      	mov	r3, r2
 80245b0:	9a07      	ldr	r2, [sp, #28]
 80245b2:	1c60      	adds	r0, r4, #1
 80245b4:	fb0a 3a02 	mla	sl, sl, r2, r3
 80245b8:	9b08      	ldr	r3, [sp, #32]
 80245ba:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80245be:	fb0c ac0e 	mla	ip, ip, lr, sl
 80245c2:	1224      	asrs	r4, r4, #8
 80245c4:	fb03 c606 	mla	r6, r3, r6, ip
 80245c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245ca:	f88b 4001 	strb.w	r4, [fp, #1]
 80245ce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80245d2:	fb06 1103 	mla	r1, r6, r3, r1
 80245d6:	b289      	uxth	r1, r1
 80245d8:	1c4e      	adds	r6, r1, #1
 80245da:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80245de:	1209      	asrs	r1, r1, #8
 80245e0:	f88b 1002 	strb.w	r1, [fp, #2]
 80245e4:	b00d      	add	sp, #52	@ 0x34
 80245e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80245ee:	9405      	str	r4, [sp, #20]
 80245f0:	e74d      	b.n	802448e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80245f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80245f6:	9401      	str	r4, [sp, #4]
 80245f8:	9405      	str	r4, [sp, #20]
 80245fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80245fe:	e756      	b.n	80244ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024604:	9401      	str	r4, [sp, #4]
 8024606:	e752      	b.n	80244ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8024608:	468e      	mov	lr, r1
 802460a:	9004      	str	r0, [sp, #16]
 802460c:	46a1      	mov	r9, r4
 802460e:	e76b      	b.n	80244e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8024610:	460e      	mov	r6, r1
 8024612:	4602      	mov	r2, r0
 8024614:	4625      	mov	r5, r4
 8024616:	468e      	mov	lr, r1
 8024618:	9004      	str	r0, [sp, #16]
 802461a:	46a1      	mov	r9, r4
 802461c:	e779      	b.n	8024512 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 802461e:	460e      	mov	r6, r1
 8024620:	4602      	mov	r2, r0
 8024622:	4625      	mov	r5, r4
 8024624:	e775      	b.n	8024512 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08024626 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802462a:	b09f      	sub	sp, #124	@ 0x7c
 802462c:	920e      	str	r2, [sp, #56]	@ 0x38
 802462e:	9307      	str	r3, [sp, #28]
 8024630:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024632:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8024636:	901d      	str	r0, [sp, #116]	@ 0x74
 8024638:	930c      	str	r3, [sp, #48]	@ 0x30
 802463a:	6850      	ldr	r0, [r2, #4]
 802463c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802463e:	6812      	ldr	r2, [r2, #0]
 8024640:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024644:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8024648:	fb00 1303 	mla	r3, r0, r3, r1
 802464c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024650:	18d3      	adds	r3, r2, r3
 8024652:	9308      	str	r3, [sp, #32]
 8024654:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024656:	681b      	ldr	r3, [r3, #0]
 8024658:	930a      	str	r3, [sp, #40]	@ 0x28
 802465a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802465c:	43db      	mvns	r3, r3
 802465e:	b2db      	uxtb	r3, r3
 8024660:	9309      	str	r3, [sp, #36]	@ 0x24
 8024662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024664:	2b00      	cmp	r3, #0
 8024666:	dc03      	bgt.n	8024670 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802466a:	2b00      	cmp	r3, #0
 802466c:	f340 81f5 	ble.w	8024a5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024670:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024672:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024676:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802467a:	1e48      	subs	r0, r1, #1
 802467c:	1e54      	subs	r4, r2, #1
 802467e:	9b07      	ldr	r3, [sp, #28]
 8024680:	2b00      	cmp	r3, #0
 8024682:	f340 80d5 	ble.w	8024830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024686:	ea5f 452a 	movs.w	r5, sl, asr #16
 802468a:	ea4f 4328 	mov.w	r3, r8, asr #16
 802468e:	d406      	bmi.n	802469e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024690:	4285      	cmp	r5, r0
 8024692:	da04      	bge.n	802469e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024694:	2b00      	cmp	r3, #0
 8024696:	db02      	blt.n	802469e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024698:	42a3      	cmp	r3, r4
 802469a:	f2c0 80ca 	blt.w	8024832 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802469e:	3501      	adds	r5, #1
 80246a0:	f100 80bb 	bmi.w	802481a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80246a4:	42a9      	cmp	r1, r5
 80246a6:	f2c0 80b8 	blt.w	802481a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80246aa:	3301      	adds	r3, #1
 80246ac:	f100 80b5 	bmi.w	802481a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80246b0:	429a      	cmp	r2, r3
 80246b2:	f2c0 80b2 	blt.w	802481a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80246b6:	9b07      	ldr	r3, [sp, #28]
 80246b8:	9d08      	ldr	r5, [sp, #32]
 80246ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80246bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246be:	2b00      	cmp	r3, #0
 80246c0:	f340 80d6 	ble.w	8024870 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80246c4:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 80246c6:	ea4f 4428 	mov.w	r4, r8, asr #16
 80246ca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80246cc:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80246d0:	68c6      	ldr	r6, [r0, #12]
 80246d2:	ea5f 402a 	movs.w	r0, sl, asr #16
 80246d6:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80246da:	689b      	ldr	r3, [r3, #8]
 80246dc:	f100 810f 	bmi.w	80248fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80246e0:	1e5f      	subs	r7, r3, #1
 80246e2:	42b8      	cmp	r0, r7
 80246e4:	f280 810b 	bge.w	80248fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80246e8:	2c00      	cmp	r4, #0
 80246ea:	f2c0 8108 	blt.w	80248fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80246ee:	1e77      	subs	r7, r6, #1
 80246f0:	42bc      	cmp	r4, r7
 80246f2:	f280 8104 	bge.w	80248fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80246f6:	b21b      	sxth	r3, r3
 80246f8:	fb04 0003 	mla	r0, r4, r3, r0
 80246fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80246fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024702:	1826      	adds	r6, r4, r0
 8024704:	5c24      	ldrb	r4, [r4, r0]
 8024706:	78b7      	ldrb	r7, [r6, #2]
 8024708:	7870      	ldrb	r0, [r6, #1]
 802470a:	970f      	str	r7, [sp, #60]	@ 0x3c
 802470c:	7977      	ldrb	r7, [r6, #5]
 802470e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8024712:	f896 c004 	ldrb.w	ip, [r6, #4]
 8024716:	9710      	str	r7, [sp, #64]	@ 0x40
 8024718:	b1c9      	cbz	r1, 802474e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802471a:	f04f 0b03 	mov.w	fp, #3
 802471e:	f06f 0904 	mvn.w	r9, #4
 8024722:	3605      	adds	r6, #5
 8024724:	fb13 930b 	smlabb	r3, r3, fp, r9
 8024728:	eb06 0b03 	add.w	fp, r6, r3
 802472c:	5cf3      	ldrb	r3, [r6, r3]
 802472e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024730:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8024734:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024736:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802473a:	9315      	str	r3, [sp, #84]	@ 0x54
 802473c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8024740:	9312      	str	r3, [sp, #72]	@ 0x48
 8024742:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8024746:	9314      	str	r3, [sp, #80]	@ 0x50
 8024748:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802474c:	9316      	str	r3, [sp, #88]	@ 0x58
 802474e:	b292      	uxth	r2, r2
 8024750:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8024752:	b289      	uxth	r1, r1
 8024754:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8024758:	fb02 f601 	mul.w	r6, r2, r1
 802475c:	0112      	lsls	r2, r2, #4
 802475e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8024762:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8024766:	1b92      	subs	r2, r2, r6
 8024768:	b289      	uxth	r1, r1
 802476a:	b292      	uxth	r2, r2
 802476c:	eba9 0901 	sub.w	r9, r9, r1
 8024770:	fb02 fe0e 	mul.w	lr, r2, lr
 8024774:	fa1f f989 	uxth.w	r9, r9
 8024778:	fb02 fc0c 	mul.w	ip, r2, ip
 802477c:	fb09 e404 	mla	r4, r9, r4, lr
 8024780:	f895 e000 	ldrb.w	lr, [r5]
 8024784:	fb09 c000 	mla	r0, r9, r0, ip
 8024788:	fb01 4407 	mla	r4, r1, r7, r4
 802478c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802478e:	fb06 4407 	mla	r4, r6, r7, r4
 8024792:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8024794:	fb1e fe07 	smulbb	lr, lr, r7
 8024798:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802479c:	fb04 e403 	mla	r4, r4, r3, lr
 80247a0:	b2a4      	uxth	r4, r4
 80247a2:	f104 0e01 	add.w	lr, r4, #1
 80247a6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80247aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80247ac:	fb01 0004 	mla	r0, r1, r4, r0
 80247b0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80247b2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80247b6:	fb06 0004 	mla	r0, r6, r4, r0
 80247ba:	786c      	ldrb	r4, [r5, #1]
 80247bc:	f885 e000 	strb.w	lr, [r5]
 80247c0:	fb14 f407 	smulbb	r4, r4, r7
 80247c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247c8:	fb00 4003 	mla	r0, r0, r3, r4
 80247cc:	b280      	uxth	r0, r0
 80247ce:	1c44      	adds	r4, r0, #1
 80247d0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80247d4:	1200      	asrs	r0, r0, #8
 80247d6:	7068      	strb	r0, [r5, #1]
 80247d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80247da:	4342      	muls	r2, r0
 80247dc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80247de:	fb09 2200 	mla	r2, r9, r0, r2
 80247e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80247e4:	fb01 2100 	mla	r1, r1, r0, r2
 80247e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80247ea:	fb06 1602 	mla	r6, r6, r2, r1
 80247ee:	78a9      	ldrb	r1, [r5, #2]
 80247f0:	fb11 f107 	smulbb	r1, r1, r7
 80247f4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80247f8:	fb06 1303 	mla	r3, r6, r3, r1
 80247fc:	b29b      	uxth	r3, r3
 80247fe:	1c5e      	adds	r6, r3, #1
 8024800:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8024804:	121b      	asrs	r3, r3, #8
 8024806:	70ab      	strb	r3, [r5, #2]
 8024808:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802480a:	3503      	adds	r5, #3
 802480c:	449a      	add	sl, r3
 802480e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024810:	4498      	add	r8, r3
 8024812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024814:	3b01      	subs	r3, #1
 8024816:	930d      	str	r3, [sp, #52]	@ 0x34
 8024818:	e750      	b.n	80246bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802481a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802481c:	449a      	add	sl, r3
 802481e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024820:	4498      	add	r8, r3
 8024822:	9b07      	ldr	r3, [sp, #28]
 8024824:	3b01      	subs	r3, #1
 8024826:	9307      	str	r3, [sp, #28]
 8024828:	9b08      	ldr	r3, [sp, #32]
 802482a:	3303      	adds	r3, #3
 802482c:	9308      	str	r3, [sp, #32]
 802482e:	e726      	b.n	802467e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024830:	d026      	beq.n	8024880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024832:	9b07      	ldr	r3, [sp, #28]
 8024834:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8024836:	3b01      	subs	r3, #1
 8024838:	fb00 a003 	mla	r0, r0, r3, sl
 802483c:	1400      	asrs	r0, r0, #16
 802483e:	f53f af3a 	bmi.w	80246b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024842:	3901      	subs	r1, #1
 8024844:	4288      	cmp	r0, r1
 8024846:	f6bf af36 	bge.w	80246b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802484a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802484c:	fb01 8303 	mla	r3, r1, r3, r8
 8024850:	141b      	asrs	r3, r3, #16
 8024852:	f53f af30 	bmi.w	80246b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024856:	3a01      	subs	r2, #1
 8024858:	4293      	cmp	r3, r2
 802485a:	f6bf af2c 	bge.w	80246b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802485e:	9b08      	ldr	r3, [sp, #32]
 8024860:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024864:	1cdd      	adds	r5, r3, #3
 8024866:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802486a:	f1bc 0f00 	cmp.w	ip, #0
 802486e:	dc5f      	bgt.n	8024930 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8024870:	9b07      	ldr	r3, [sp, #28]
 8024872:	9a08      	ldr	r2, [sp, #32]
 8024874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802487c:	441a      	add	r2, r3
 802487e:	9208      	str	r2, [sp, #32]
 8024880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024882:	2b00      	cmp	r3, #0
 8024884:	f340 80e9 	ble.w	8024a5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802488c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802488e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024892:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024896:	eef0 6a62 	vmov.f32	s13, s5
 802489a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802489e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80248a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80248a6:	ee16 aa90 	vmov	sl, s13
 80248aa:	eef0 6a43 	vmov.f32	s13, s6
 80248ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80248b2:	ee16 8a90 	vmov	r8, s13
 80248b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80248ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80248be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80248c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80248c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80248ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80248ce:	ee12 2a90 	vmov	r2, s5
 80248d2:	eef0 2a47 	vmov.f32	s5, s14
 80248d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80248da:	ee13 2a10 	vmov	r2, s6
 80248de:	932b      	str	r3, [sp, #172]	@ 0xac
 80248e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80248e2:	eeb0 3a67 	vmov.f32	s6, s15
 80248e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80248ea:	932c      	str	r3, [sp, #176]	@ 0xb0
 80248ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80248ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80248f0:	3b01      	subs	r3, #1
 80248f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80248f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80248f6:	bf08      	it	eq
 80248f8:	4613      	moveq	r3, r2
 80248fa:	9307      	str	r3, [sp, #28]
 80248fc:	e6b1      	b.n	8024662 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80248fe:	1c47      	adds	r7, r0, #1
 8024900:	d482      	bmi.n	8024808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024902:	42bb      	cmp	r3, r7
 8024904:	db80      	blt.n	8024808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024906:	1c67      	adds	r7, r4, #1
 8024908:	f53f af7e 	bmi.w	8024808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802490c:	42be      	cmp	r6, r7
 802490e:	f6ff af7b 	blt.w	8024808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024912:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024914:	b236      	sxth	r6, r6
 8024916:	9001      	str	r0, [sp, #4]
 8024918:	b21b      	sxth	r3, r3
 802491a:	9600      	str	r6, [sp, #0]
 802491c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802491e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8024922:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8024926:	4629      	mov	r1, r5
 8024928:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802492a:	f7ff fd82 	bl	8024432 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802492e:	e76b      	b.n	8024808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024930:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8024932:	ea4f 402a 	mov.w	r0, sl, asr #16
 8024936:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802493a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802493e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8024942:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024946:	fb07 0101 	mla	r1, r7, r1, r0
 802494a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802494c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024950:	1844      	adds	r4, r0, r1
 8024952:	5c40      	ldrb	r0, [r0, r1]
 8024954:	78a6      	ldrb	r6, [r4, #2]
 8024956:	7861      	ldrb	r1, [r4, #1]
 8024958:	960f      	str	r6, [sp, #60]	@ 0x3c
 802495a:	78e6      	ldrb	r6, [r4, #3]
 802495c:	910d      	str	r1, [sp, #52]	@ 0x34
 802495e:	9610      	str	r6, [sp, #64]	@ 0x40
 8024960:	f894 9004 	ldrb.w	r9, [r4, #4]
 8024964:	f894 b005 	ldrb.w	fp, [r4, #5]
 8024968:	b192      	cbz	r2, 8024990 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802496a:	f06f 0604 	mvn.w	r6, #4
 802496e:	2103      	movs	r1, #3
 8024970:	3405      	adds	r4, #5
 8024972:	fb17 6701 	smlabb	r7, r7, r1, r6
 8024976:	19e6      	adds	r6, r4, r7
 8024978:	5de4      	ldrb	r4, [r4, r7]
 802497a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802497c:	7874      	ldrb	r4, [r6, #1]
 802497e:	9419      	str	r4, [sp, #100]	@ 0x64
 8024980:	78b4      	ldrb	r4, [r6, #2]
 8024982:	941b      	str	r4, [sp, #108]	@ 0x6c
 8024984:	78f4      	ldrb	r4, [r6, #3]
 8024986:	9418      	str	r4, [sp, #96]	@ 0x60
 8024988:	7934      	ldrb	r4, [r6, #4]
 802498a:	941a      	str	r4, [sp, #104]	@ 0x68
 802498c:	7974      	ldrb	r4, [r6, #5]
 802498e:	941c      	str	r4, [sp, #112]	@ 0x70
 8024990:	b29b      	uxth	r3, r3
 8024992:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8024994:	b292      	uxth	r2, r2
 8024996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024998:	3503      	adds	r5, #3
 802499a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802499e:	fb03 f402 	mul.w	r4, r3, r2
 80249a2:	011b      	lsls	r3, r3, #4
 80249a4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80249a8:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 80249ac:	1b1b      	subs	r3, r3, r4
 80249ae:	b292      	uxth	r2, r2
 80249b0:	b29b      	uxth	r3, r3
 80249b2:	1ab6      	subs	r6, r6, r2
 80249b4:	435f      	muls	r7, r3
 80249b6:	b2b6      	uxth	r6, r6
 80249b8:	fb03 f909 	mul.w	r9, r3, r9
 80249bc:	fb03 fb0b 	mul.w	fp, r3, fp
 80249c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80249c2:	fb06 7000 	mla	r0, r6, r0, r7
 80249c6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80249c8:	fb06 bb03 	mla	fp, r6, r3, fp
 80249cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80249ce:	fb02 0007 	mla	r0, r2, r7, r0
 80249d2:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80249d4:	fb02 bb03 	mla	fp, r2, r3, fp
 80249d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80249da:	fb04 0007 	mla	r0, r4, r7, r0
 80249de:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80249e2:	fb17 f701 	smulbb	r7, r7, r1
 80249e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80249ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80249ec:	fb00 700e 	mla	r0, r0, lr, r7
 80249f0:	fb06 9101 	mla	r1, r6, r1, r9
 80249f4:	b280      	uxth	r0, r0
 80249f6:	1c47      	adds	r7, r0, #1
 80249f8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80249fc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80249fe:	1200      	asrs	r0, r0, #8
 8024a00:	f805 0c06 	strb.w	r0, [r5, #-6]
 8024a04:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024a06:	fb02 1100 	mla	r1, r2, r0, r1
 8024a0a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8024a0c:	fb04 1100 	mla	r1, r4, r0, r1
 8024a10:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8024a14:	fb04 b403 	mla	r4, r4, r3, fp
 8024a18:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8024a1c:	fb10 f007 	smulbb	r0, r0, r7
 8024a20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a24:	fb13 f307 	smulbb	r3, r3, r7
 8024a28:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024a2c:	fb01 010e 	mla	r1, r1, lr, r0
 8024a30:	fb04 340e 	mla	r4, r4, lr, r3
 8024a34:	b289      	uxth	r1, r1
 8024a36:	b2a4      	uxth	r4, r4
 8024a38:	1c48      	adds	r0, r1, #1
 8024a3a:	1c63      	adds	r3, r4, #1
 8024a3c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024a40:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024a44:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024a46:	1209      	asrs	r1, r1, #8
 8024a48:	1224      	asrs	r4, r4, #8
 8024a4a:	449a      	add	sl, r3
 8024a4c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024a4e:	f805 1c05 	strb.w	r1, [r5, #-5]
 8024a52:	f805 4c04 	strb.w	r4, [r5, #-4]
 8024a56:	4498      	add	r8, r3
 8024a58:	e707      	b.n	802486a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024a5a:	b01f      	add	sp, #124	@ 0x7c
 8024a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8024a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a64:	b087      	sub	sp, #28
 8024a66:	780d      	ldrb	r5, [r1, #0]
 8024a68:	784c      	ldrb	r4, [r1, #1]
 8024a6a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8024a6e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8024a72:	9004      	str	r0, [sp, #16]
 8024a74:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8024a78:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8024a7c:	9005      	str	r0, [sp, #20]
 8024a7e:	fb06 bc03 	mla	ip, r6, r3, fp
 8024a82:	2e00      	cmp	r6, #0
 8024a84:	7888      	ldrb	r0, [r1, #2]
 8024a86:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024a8a:	eb02 090c 	add.w	r9, r2, ip
 8024a8e:	f2c0 8084 	blt.w	8024b9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8024a92:	42b7      	cmp	r7, r6
 8024a94:	f340 8081 	ble.w	8024b9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8024a98:	f1bb 0f00 	cmp.w	fp, #0
 8024a9c:	db79      	blt.n	8024b92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8024a9e:	455b      	cmp	r3, fp
 8024aa0:	dd77      	ble.n	8024b92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8024aa2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024aa6:	9201      	str	r2, [sp, #4]
 8024aa8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024aac:	9202      	str	r2, [sp, #8]
 8024aae:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024ab2:	9203      	str	r2, [sp, #12]
 8024ab4:	f11b 0201 	adds.w	r2, fp, #1
 8024ab8:	d476      	bmi.n	8024ba8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024aba:	4293      	cmp	r3, r2
 8024abc:	dd74      	ble.n	8024ba8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024abe:	9a04      	ldr	r2, [sp, #16]
 8024ac0:	2a00      	cmp	r2, #0
 8024ac2:	d071      	beq.n	8024ba8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024ac4:	f899 8003 	ldrb.w	r8, [r9, #3]
 8024ac8:	f899 c004 	ldrb.w	ip, [r9, #4]
 8024acc:	f899 a005 	ldrb.w	sl, [r9, #5]
 8024ad0:	3601      	adds	r6, #1
 8024ad2:	d471      	bmi.n	8024bb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024ad4:	42b7      	cmp	r7, r6
 8024ad6:	dd6f      	ble.n	8024bb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024ad8:	9a05      	ldr	r2, [sp, #20]
 8024ada:	2a00      	cmp	r2, #0
 8024adc:	d06c      	beq.n	8024bb8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8024ade:	f1bb 0f00 	cmp.w	fp, #0
 8024ae2:	db65      	blt.n	8024bb0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8024ae4:	455b      	cmp	r3, fp
 8024ae6:	dd63      	ble.n	8024bb0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8024ae8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024aec:	f819 e002 	ldrb.w	lr, [r9, r2]
 8024af0:	2203      	movs	r2, #3
 8024af2:	fb03 9602 	mla	r6, r3, r2, r9
 8024af6:	7877      	ldrb	r7, [r6, #1]
 8024af8:	78b6      	ldrb	r6, [r6, #2]
 8024afa:	f11b 0b01 	adds.w	fp, fp, #1
 8024afe:	d40c      	bmi.n	8024b1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024b00:	455b      	cmp	r3, fp
 8024b02:	dd0a      	ble.n	8024b1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024b04:	9a04      	ldr	r2, [sp, #16]
 8024b06:	b142      	cbz	r2, 8024b1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8024b08:	2203      	movs	r2, #3
 8024b0a:	fb13 2002 	smlabb	r0, r3, r2, r2
 8024b0e:	f819 5000 	ldrb.w	r5, [r9, r0]
 8024b12:	fb03 9002 	mla	r0, r3, r2, r9
 8024b16:	7904      	ldrb	r4, [r0, #4]
 8024b18:	7940      	ldrb	r0, [r0, #5]
 8024b1a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024b1e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8024b22:	fb03 fb02 	mul.w	fp, r3, r2
 8024b26:	011b      	lsls	r3, r3, #4
 8024b28:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8024b2c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8024b30:	eba3 030b 	sub.w	r3, r3, fp
 8024b34:	b292      	uxth	r2, r2
 8024b36:	b29b      	uxth	r3, r3
 8024b38:	eba9 0902 	sub.w	r9, r9, r2
 8024b3c:	9304      	str	r3, [sp, #16]
 8024b3e:	fa1f f989 	uxth.w	r9, r9
 8024b42:	fb03 f808 	mul.w	r8, r3, r8
 8024b46:	9b01      	ldr	r3, [sp, #4]
 8024b48:	fb09 8803 	mla	r8, r9, r3, r8
 8024b4c:	9b04      	ldr	r3, [sp, #16]
 8024b4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8024b52:	9b02      	ldr	r3, [sp, #8]
 8024b54:	fb02 880e 	mla	r8, r2, lr, r8
 8024b58:	fb09 cc03 	mla	ip, r9, r3, ip
 8024b5c:	9b04      	ldr	r3, [sp, #16]
 8024b5e:	fb0b 8805 	mla	r8, fp, r5, r8
 8024b62:	fb02 c707 	mla	r7, r2, r7, ip
 8024b66:	fb03 f30a 	mul.w	r3, r3, sl
 8024b6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024b6e:	fb0b 7404 	mla	r4, fp, r4, r7
 8024b72:	f881 8000 	strb.w	r8, [r1]
 8024b76:	1224      	asrs	r4, r4, #8
 8024b78:	704c      	strb	r4, [r1, #1]
 8024b7a:	9c03      	ldr	r4, [sp, #12]
 8024b7c:	fb09 3904 	mla	r9, r9, r4, r3
 8024b80:	fb02 9206 	mla	r2, r2, r6, r9
 8024b84:	fb0b 2000 	mla	r0, fp, r0, r2
 8024b88:	1200      	asrs	r0, r0, #8
 8024b8a:	7088      	strb	r0, [r1, #2]
 8024b8c:	b007      	add	sp, #28
 8024b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b92:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8024b96:	9501      	str	r5, [sp, #4]
 8024b98:	e78c      	b.n	8024ab4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8024b9a:	4682      	mov	sl, r0
 8024b9c:	46a4      	mov	ip, r4
 8024b9e:	46a8      	mov	r8, r5
 8024ba0:	9501      	str	r5, [sp, #4]
 8024ba2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8024ba6:	e793      	b.n	8024ad0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8024ba8:	4682      	mov	sl, r0
 8024baa:	46a4      	mov	ip, r4
 8024bac:	46a8      	mov	r8, r5
 8024bae:	e78f      	b.n	8024ad0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8024bb0:	4606      	mov	r6, r0
 8024bb2:	4627      	mov	r7, r4
 8024bb4:	46ae      	mov	lr, r5
 8024bb6:	e7a0      	b.n	8024afa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8024bb8:	4606      	mov	r6, r0
 8024bba:	4627      	mov	r7, r4
 8024bbc:	46ae      	mov	lr, r5
 8024bbe:	e7ac      	b.n	8024b1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08024bc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc4:	b09b      	sub	sp, #108	@ 0x6c
 8024bc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024bc8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024bca:	9019      	str	r0, [sp, #100]	@ 0x64
 8024bcc:	9109      	str	r1, [sp, #36]	@ 0x24
 8024bce:	6850      	ldr	r0, [r2, #4]
 8024bd0:	9306      	str	r3, [sp, #24]
 8024bd2:	6812      	ldr	r2, [r2, #0]
 8024bd4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8024bd8:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8024bdc:	fb00 1303 	mla	r3, r0, r3, r1
 8024be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024be4:	18d3      	adds	r3, r2, r3
 8024be6:	9307      	str	r3, [sp, #28]
 8024be8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	9308      	str	r3, [sp, #32]
 8024bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	dc03      	bgt.n	8024bfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024bf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	f340 81ab 	ble.w	8024f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024bfc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024bfe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c06:	1e48      	subs	r0, r1, #1
 8024c08:	1e55      	subs	r5, r2, #1
 8024c0a:	9b06      	ldr	r3, [sp, #24]
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	f340 80b1 	ble.w	8024d74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024c12:	ea5f 462b 	movs.w	r6, fp, asr #16
 8024c16:	ea4f 4324 	mov.w	r3, r4, asr #16
 8024c1a:	d406      	bmi.n	8024c2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024c1c:	4286      	cmp	r6, r0
 8024c1e:	da04      	bge.n	8024c2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	db02      	blt.n	8024c2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024c24:	42ab      	cmp	r3, r5
 8024c26:	f2c0 80a6 	blt.w	8024d76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024c2a:	3601      	adds	r6, #1
 8024c2c:	f100 8097 	bmi.w	8024d5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024c30:	42b1      	cmp	r1, r6
 8024c32:	f2c0 8094 	blt.w	8024d5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024c36:	3301      	adds	r3, #1
 8024c38:	f100 8091 	bmi.w	8024d5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024c3c:	429a      	cmp	r2, r3
 8024c3e:	f2c0 808e 	blt.w	8024d5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024c42:	9b06      	ldr	r3, [sp, #24]
 8024c44:	9e07      	ldr	r6, [sp, #28]
 8024c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	f340 80b0 	ble.w	8024db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8024c50:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8024c52:	1425      	asrs	r5, r4, #16
 8024c54:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c56:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024c5a:	68c7      	ldr	r7, [r0, #12]
 8024c5c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024c60:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024c64:	689b      	ldr	r3, [r3, #8]
 8024c66:	f100 80ea 	bmi.w	8024e3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024c6a:	f103 3cff 	add.w	ip, r3, #4294967295
 8024c6e:	4560      	cmp	r0, ip
 8024c70:	f280 80e5 	bge.w	8024e3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024c74:	2d00      	cmp	r5, #0
 8024c76:	f2c0 80e2 	blt.w	8024e3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024c7a:	f107 3cff 	add.w	ip, r7, #4294967295
 8024c7e:	4565      	cmp	r5, ip
 8024c80:	f280 80dd 	bge.w	8024e3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024c84:	b21b      	sxth	r3, r3
 8024c86:	fb05 0003 	mla	r0, r5, r3, r0
 8024c8a:	9d08      	ldr	r5, [sp, #32]
 8024c8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024c90:	182f      	adds	r7, r5, r0
 8024c92:	5c2d      	ldrb	r5, [r5, r0]
 8024c94:	7878      	ldrb	r0, [r7, #1]
 8024c96:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024c9a:	900c      	str	r0, [sp, #48]	@ 0x30
 8024c9c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8024ca0:	f897 8004 	ldrb.w	r8, [r7, #4]
 8024ca4:	f897 a005 	ldrb.w	sl, [r7, #5]
 8024ca8:	b1c9      	cbz	r1, 8024cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024caa:	f04f 0c03 	mov.w	ip, #3
 8024cae:	f06f 0004 	mvn.w	r0, #4
 8024cb2:	3705      	adds	r7, #5
 8024cb4:	fb13 030c 	smlabb	r3, r3, ip, r0
 8024cb8:	eb07 0c03 	add.w	ip, r7, r3
 8024cbc:	5cfb      	ldrb	r3, [r7, r3]
 8024cbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8024cc0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024cc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024cc6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8024cca:	9311      	str	r3, [sp, #68]	@ 0x44
 8024ccc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8024cd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8024cd2:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8024cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8024cd8:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8024cdc:	9312      	str	r3, [sp, #72]	@ 0x48
 8024cde:	b292      	uxth	r2, r2
 8024ce0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024ce2:	b289      	uxth	r1, r1
 8024ce4:	fb02 f301 	mul.w	r3, r2, r1
 8024ce8:	0112      	lsls	r2, r2, #4
 8024cea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024cee:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8024cf2:	1ad2      	subs	r2, r2, r3
 8024cf4:	b289      	uxth	r1, r1
 8024cf6:	b292      	uxth	r2, r2
 8024cf8:	1a7f      	subs	r7, r7, r1
 8024cfa:	fb02 f909 	mul.w	r9, r2, r9
 8024cfe:	b2bf      	uxth	r7, r7
 8024d00:	fb02 f808 	mul.w	r8, r2, r8
 8024d04:	fb02 fa0a 	mul.w	sl, r2, sl
 8024d08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024d0a:	fb07 9905 	mla	r9, r7, r5, r9
 8024d0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024d10:	fb07 8800 	mla	r8, r7, r0, r8
 8024d14:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024d16:	fb07 aa0e 	mla	sl, r7, lr, sl
 8024d1a:	fb01 9905 	mla	r9, r1, r5, r9
 8024d1e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024d20:	fb01 8800 	mla	r8, r1, r0, r8
 8024d24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024d26:	fb01 a102 	mla	r1, r1, r2, sl
 8024d2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024d2c:	fb03 9905 	mla	r9, r3, r5, r9
 8024d30:	fb03 8800 	mla	r8, r3, r0, r8
 8024d34:	fb03 1302 	mla	r3, r3, r2, r1
 8024d38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024d3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024d40:	121b      	asrs	r3, r3, #8
 8024d42:	f886 9000 	strb.w	r9, [r6]
 8024d46:	f886 8001 	strb.w	r8, [r6, #1]
 8024d4a:	70b3      	strb	r3, [r6, #2]
 8024d4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024d4e:	3603      	adds	r6, #3
 8024d50:	449b      	add	fp, r3
 8024d52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024d54:	441c      	add	r4, r3
 8024d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d58:	3b01      	subs	r3, #1
 8024d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d5c:	e774      	b.n	8024c48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024d5e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024d60:	449b      	add	fp, r3
 8024d62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024d64:	441c      	add	r4, r3
 8024d66:	9b06      	ldr	r3, [sp, #24]
 8024d68:	3b01      	subs	r3, #1
 8024d6a:	9306      	str	r3, [sp, #24]
 8024d6c:	9b07      	ldr	r3, [sp, #28]
 8024d6e:	3303      	adds	r3, #3
 8024d70:	9307      	str	r3, [sp, #28]
 8024d72:	e74a      	b.n	8024c0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024d74:	d024      	beq.n	8024dc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024d76:	9b06      	ldr	r3, [sp, #24]
 8024d78:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024d7a:	3b01      	subs	r3, #1
 8024d7c:	fb00 b003 	mla	r0, r0, r3, fp
 8024d80:	1400      	asrs	r0, r0, #16
 8024d82:	f53f af5e 	bmi.w	8024c42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024d86:	3901      	subs	r1, #1
 8024d88:	4288      	cmp	r0, r1
 8024d8a:	f6bf af5a 	bge.w	8024c42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024d8e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024d90:	fb01 4303 	mla	r3, r1, r3, r4
 8024d94:	141b      	asrs	r3, r3, #16
 8024d96:	f53f af54 	bmi.w	8024c42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024d9a:	3a01      	subs	r2, #1
 8024d9c:	4293      	cmp	r3, r2
 8024d9e:	f6bf af50 	bge.w	8024c42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024da2:	9b07      	ldr	r3, [sp, #28]
 8024da4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024da8:	1cde      	adds	r6, r3, #3
 8024daa:	f1be 0f00 	cmp.w	lr, #0
 8024dae:	dc5f      	bgt.n	8024e70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8024db0:	9b06      	ldr	r3, [sp, #24]
 8024db2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024db6:	9b07      	ldr	r3, [sp, #28]
 8024db8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024dbc:	4423      	add	r3, r4
 8024dbe:	9307      	str	r3, [sp, #28]
 8024dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024dc2:	2b00      	cmp	r3, #0
 8024dc4:	f340 80c5 	ble.w	8024f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024dcc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024dce:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024dd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024dd6:	eef0 6a62 	vmov.f32	s13, s5
 8024dda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024dde:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024de2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024de6:	ee16 ba90 	vmov	fp, s13
 8024dea:	eef0 6a43 	vmov.f32	s13, s6
 8024dee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024df2:	ee16 4a90 	vmov	r4, s13
 8024df6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024dfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024dfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024e02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024e06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024e0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024e0e:	ee12 2a90 	vmov	r2, s5
 8024e12:	eef0 2a47 	vmov.f32	s5, s14
 8024e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e1a:	ee13 2a10 	vmov	r2, s6
 8024e1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024e20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024e22:	eeb0 3a67 	vmov.f32	s6, s15
 8024e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e2a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024e30:	3b01      	subs	r3, #1
 8024e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024e36:	bf08      	it	eq
 8024e38:	4613      	moveq	r3, r2
 8024e3a:	9306      	str	r3, [sp, #24]
 8024e3c:	e6d7      	b.n	8024bee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8024e3e:	f110 0c01 	adds.w	ip, r0, #1
 8024e42:	d483      	bmi.n	8024d4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024e44:	4563      	cmp	r3, ip
 8024e46:	db81      	blt.n	8024d4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024e48:	f115 0c01 	adds.w	ip, r5, #1
 8024e4c:	f53f af7e 	bmi.w	8024d4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024e50:	4567      	cmp	r7, ip
 8024e52:	f6ff af7b 	blt.w	8024d4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024e56:	b23f      	sxth	r7, r7
 8024e58:	b21b      	sxth	r3, r3
 8024e5a:	9700      	str	r7, [sp, #0]
 8024e5c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8024e60:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8024e64:	9a08      	ldr	r2, [sp, #32]
 8024e66:	4631      	mov	r1, r6
 8024e68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024e6a:	f7ff fdf9 	bl	8024a60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024e6e:	e76d      	b.n	8024d4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024e70:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024e72:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024e76:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024e7a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024e7e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8024e82:	1421      	asrs	r1, r4, #16
 8024e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8024e86:	fb0c 0101 	mla	r1, ip, r1, r0
 8024e8a:	9808      	ldr	r0, [sp, #32]
 8024e8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024e90:	1845      	adds	r5, r0, r1
 8024e92:	5c40      	ldrb	r0, [r0, r1]
 8024e94:	796f      	ldrb	r7, [r5, #5]
 8024e96:	7869      	ldrb	r1, [r5, #1]
 8024e98:	f895 8002 	ldrb.w	r8, [r5, #2]
 8024e9c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8024ea0:	f895 9004 	ldrb.w	r9, [r5, #4]
 8024ea4:	970c      	str	r7, [sp, #48]	@ 0x30
 8024ea6:	b1a2      	cbz	r2, 8024ed2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8024ea8:	2703      	movs	r7, #3
 8024eaa:	f06f 0304 	mvn.w	r3, #4
 8024eae:	3505      	adds	r5, #5
 8024eb0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8024eb4:	eb05 070c 	add.w	r7, r5, ip
 8024eb8:	f815 500c 	ldrb.w	r5, [r5, ip]
 8024ebc:	9513      	str	r5, [sp, #76]	@ 0x4c
 8024ebe:	787d      	ldrb	r5, [r7, #1]
 8024ec0:	9515      	str	r5, [sp, #84]	@ 0x54
 8024ec2:	78bd      	ldrb	r5, [r7, #2]
 8024ec4:	9517      	str	r5, [sp, #92]	@ 0x5c
 8024ec6:	78fd      	ldrb	r5, [r7, #3]
 8024ec8:	9514      	str	r5, [sp, #80]	@ 0x50
 8024eca:	793d      	ldrb	r5, [r7, #4]
 8024ecc:	9516      	str	r5, [sp, #88]	@ 0x58
 8024ece:	797d      	ldrb	r5, [r7, #5]
 8024ed0:	9518      	str	r5, [sp, #96]	@ 0x60
 8024ed2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024ed6:	b292      	uxth	r2, r2
 8024ed8:	3603      	adds	r6, #3
 8024eda:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024ede:	fb03 f502 	mul.w	r5, r3, r2
 8024ee2:	011b      	lsls	r3, r3, #4
 8024ee4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024ee8:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8024eec:	1b5b      	subs	r3, r3, r5
 8024eee:	b292      	uxth	r2, r2
 8024ef0:	b29b      	uxth	r3, r3
 8024ef2:	1abf      	subs	r7, r7, r2
 8024ef4:	fb03 f909 	mul.w	r9, r3, r9
 8024ef8:	b2bf      	uxth	r7, r7
 8024efa:	fb03 fa0a 	mul.w	sl, r3, sl
 8024efe:	fb07 9901 	mla	r9, r7, r1, r9
 8024f02:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8024f04:	fb07 aa00 	mla	sl, r7, r0, sl
 8024f08:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024f0a:	fb02 9901 	mla	r9, r2, r1, r9
 8024f0e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8024f10:	fb02 aa00 	mla	sl, r2, r0, sl
 8024f14:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024f16:	fb05 9901 	mla	r9, r5, r1, r9
 8024f1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024f1c:	fb05 aa00 	mla	sl, r5, r0, sl
 8024f20:	434b      	muls	r3, r1
 8024f22:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024f24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024f28:	fb07 3308 	mla	r3, r7, r8, r3
 8024f2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024f30:	f806 ac06 	strb.w	sl, [r6, #-6]
 8024f34:	fb02 3201 	mla	r2, r2, r1, r3
 8024f38:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024f3a:	f806 9c05 	strb.w	r9, [r6, #-5]
 8024f3e:	fb05 2503 	mla	r5, r5, r3, r2
 8024f42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024f44:	122d      	asrs	r5, r5, #8
 8024f46:	449b      	add	fp, r3
 8024f48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024f4a:	f806 5c04 	strb.w	r5, [r6, #-4]
 8024f4e:	441c      	add	r4, r3
 8024f50:	e72b      	b.n	8024daa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024f52:	b01b      	add	sp, #108	@ 0x6c
 8024f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024f58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f5c:	b087      	sub	sp, #28
 8024f5e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8024f62:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8024f66:	fb05 7003 	mla	r0, r5, r3, r7
 8024f6a:	2d00      	cmp	r5, #0
 8024f6c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8024f70:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8024f74:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024f78:	f2c0 811f 	blt.w	80251ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024f7c:	45a8      	cmp	r8, r5
 8024f7e:	f340 811c 	ble.w	80251ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024f82:	2f00      	cmp	r7, #0
 8024f84:	f2c0 8117 	blt.w	80251b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024f88:	42bb      	cmp	r3, r7
 8024f8a:	f340 8114 	ble.w	80251b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024f8e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8024f92:	1c7a      	adds	r2, r7, #1
 8024f94:	f100 8114 	bmi.w	80251c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024f98:	4293      	cmp	r3, r2
 8024f9a:	f340 8111 	ble.w	80251c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024f9e:	2c00      	cmp	r4, #0
 8024fa0:	f000 8110 	beq.w	80251c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8024fa4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024fa8:	3501      	adds	r5, #1
 8024faa:	f100 810f 	bmi.w	80251cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024fae:	45a8      	cmp	r8, r5
 8024fb0:	f340 810c 	ble.w	80251cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024fb4:	f1be 0f00 	cmp.w	lr, #0
 8024fb8:	f000 810b 	beq.w	80251d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8024fbc:	2f00      	cmp	r7, #0
 8024fbe:	f2c0 8103 	blt.w	80251c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024fc2:	42bb      	cmp	r3, r7
 8024fc4:	f340 8100 	ble.w	80251c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024fc8:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024fcc:	3701      	adds	r7, #1
 8024fce:	f100 8103 	bmi.w	80251d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024fd2:	42bb      	cmp	r3, r7
 8024fd4:	f340 8100 	ble.w	80251d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024fd8:	2c00      	cmp	r4, #0
 8024fda:	f000 80ff 	beq.w	80251dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8024fde:	3301      	adds	r3, #1
 8024fe0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024fe4:	fa1f fc84 	uxth.w	ip, r4
 8024fe8:	fa1f fe8e 	uxth.w	lr, lr
 8024fec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024ff0:	fb0c f90e 	mul.w	r9, ip, lr
 8024ff4:	0e13      	lsrs	r3, r2, #24
 8024ff6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024ffa:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8024ffe:	9302      	str	r3, [sp, #8]
 8025000:	ebac 0709 	sub.w	r7, ip, r9
 8025004:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8025008:	fa1f f48e 	uxth.w	r4, lr
 802500c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8025010:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025014:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8025018:	fb0a fe0e 	mul.w	lr, sl, lr
 802501c:	1b1b      	subs	r3, r3, r4
 802501e:	fb0a f606 	mul.w	r6, sl, r6
 8025022:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8025026:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802502a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802502e:	b29b      	uxth	r3, r3
 8025030:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025034:	b2bf      	uxth	r7, r7
 8025036:	9301      	str	r3, [sp, #4]
 8025038:	44e6      	add	lr, ip
 802503a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802503e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025042:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025046:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802504a:	9303      	str	r3, [sp, #12]
 802504c:	0a33      	lsrs	r3, r6, #8
 802504e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8025052:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025056:	9304      	str	r3, [sp, #16]
 8025058:	fb0b f606 	mul.w	r6, fp, r6
 802505c:	fb0b f000 	mul.w	r0, fp, r0
 8025060:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025064:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025068:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802506c:	44b6      	add	lr, r6
 802506e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8025072:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025076:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802507a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802507e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025082:	fb08 f606 	mul.w	r6, r8, r6
 8025086:	0a03      	lsrs	r3, r0, #8
 8025088:	fb08 f505 	mul.w	r5, r8, r5
 802508c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025090:	0a30      	lsrs	r0, r6, #8
 8025092:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025096:	9305      	str	r3, [sp, #20]
 8025098:	0e13      	lsrs	r3, r2, #24
 802509a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802509e:	fb0e fe07 	mul.w	lr, lr, r7
 80250a2:	4430      	add	r0, r6
 80250a4:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80250a8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80250ac:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80250b0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80250b4:	0a00      	lsrs	r0, r0, #8
 80250b6:	435e      	muls	r6, r3
 80250b8:	0a2d      	lsrs	r5, r5, #8
 80250ba:	435a      	muls	r2, r3
 80250bc:	9b03      	ldr	r3, [sp, #12]
 80250be:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80250c2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80250c6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80250ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80250ce:	44b4      	add	ip, r6
 80250d0:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80250d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250d8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80250dc:	9e01      	ldr	r6, [sp, #4]
 80250de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80250e2:	fb03 ee06 	mla	lr, r3, r6, lr
 80250e6:	9b04      	ldr	r3, [sp, #16]
 80250e8:	0a12      	lsrs	r2, r2, #8
 80250ea:	fb0c ee09 	mla	lr, ip, r9, lr
 80250ee:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80250f2:	9b05      	ldr	r3, [sp, #20]
 80250f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80250f8:	fb00 ee04 	mla	lr, r0, r4, lr
 80250fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025100:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8025104:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8025108:	9b01      	ldr	r3, [sp, #4]
 802510a:	fb07 fe0e 	mul.w	lr, r7, lr
 802510e:	fb07 f70b 	mul.w	r7, r7, fp
 8025112:	fb03 ee06 	mla	lr, r3, r6, lr
 8025116:	fb03 730a 	mla	r3, r3, sl, r7
 802511a:	fb09 e202 	mla	r2, r9, r2, lr
 802511e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8025122:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025126:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 802512a:	fb04 3408 	mla	r4, r4, r8, r3
 802512e:	9b02      	ldr	r3, [sp, #8]
 8025130:	b292      	uxth	r2, r2
 8025132:	fb09 4903 	mla	r9, r9, r3, r4
 8025136:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802513a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802513e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8025142:	fb09 f902 	mul.w	r9, r9, r2
 8025146:	ea40 0e0e 	orr.w	lr, r0, lr
 802514a:	f109 0301 	add.w	r3, r9, #1
 802514e:	fa5f f08e 	uxtb.w	r0, lr
 8025152:	fb10 f002 	smulbb	r0, r0, r2
 8025156:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802515a:	780b      	ldrb	r3, [r1, #0]
 802515c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8025160:	fa5f f989 	uxtb.w	r9, r9
 8025164:	fb03 0309 	mla	r3, r3, r9, r0
 8025168:	b29b      	uxth	r3, r3
 802516a:	1c58      	adds	r0, r3, #1
 802516c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025170:	7848      	ldrb	r0, [r1, #1]
 8025172:	fb10 f009 	smulbb	r0, r0, r9
 8025176:	121b      	asrs	r3, r3, #8
 8025178:	700b      	strb	r3, [r1, #0]
 802517a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802517e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025182:	fb03 0302 	mla	r3, r3, r2, r0
 8025186:	b29b      	uxth	r3, r3
 8025188:	1c58      	adds	r0, r3, #1
 802518a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802518e:	121b      	asrs	r3, r3, #8
 8025190:	704b      	strb	r3, [r1, #1]
 8025192:	788b      	ldrb	r3, [r1, #2]
 8025194:	fb13 f909 	smulbb	r9, r3, r9
 8025198:	fb0e 9e02 	mla	lr, lr, r2, r9
 802519c:	fa1f fe8e 	uxth.w	lr, lr
 80251a0:	f10e 0301 	add.w	r3, lr, #1
 80251a4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80251a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80251ac:	f881 e002 	strb.w	lr, [r1, #2]
 80251b0:	b007      	add	sp, #28
 80251b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251b6:	2600      	movs	r6, #0
 80251b8:	e6eb      	b.n	8024f92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80251ba:	2000      	movs	r0, #0
 80251bc:	4606      	mov	r6, r0
 80251be:	e6f3      	b.n	8024fa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80251c0:	2000      	movs	r0, #0
 80251c2:	e6f1      	b.n	8024fa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80251c4:	4620      	mov	r0, r4
 80251c6:	e6ef      	b.n	8024fa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80251c8:	2500      	movs	r5, #0
 80251ca:	e6ff      	b.n	8024fcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80251cc:	2200      	movs	r2, #0
 80251ce:	4615      	mov	r5, r2
 80251d0:	e708      	b.n	8024fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80251d2:	4672      	mov	r2, lr
 80251d4:	4675      	mov	r5, lr
 80251d6:	e705      	b.n	8024fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80251d8:	2200      	movs	r2, #0
 80251da:	e703      	b.n	8024fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80251dc:	4622      	mov	r2, r4
 80251de:	e701      	b.n	8024fe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080251e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80251e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251e4:	b09d      	sub	sp, #116	@ 0x74
 80251e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80251e8:	9307      	str	r3, [sp, #28]
 80251ea:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80251ec:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80251f0:	901b      	str	r0, [sp, #108]	@ 0x6c
 80251f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80251f4:	6850      	ldr	r0, [r2, #4]
 80251f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80251f8:	6812      	ldr	r2, [r2, #0]
 80251fa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80251fe:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8025202:	fb00 1303 	mla	r3, r0, r3, r1
 8025206:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802520a:	18d3      	adds	r3, r2, r3
 802520c:	930a      	str	r3, [sp, #40]	@ 0x28
 802520e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025210:	681b      	ldr	r3, [r3, #0]
 8025212:	9310      	str	r3, [sp, #64]	@ 0x40
 8025214:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8025218:	930b      	str	r3, [sp, #44]	@ 0x2c
 802521a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802521c:	2b00      	cmp	r3, #0
 802521e:	dc03      	bgt.n	8025228 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025222:	2b00      	cmp	r3, #0
 8025224:	f340 8368 	ble.w	80258f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025228:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802522a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802522e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025232:	1e48      	subs	r0, r1, #1
 8025234:	1e57      	subs	r7, r2, #1
 8025236:	9b07      	ldr	r3, [sp, #28]
 8025238:	2b00      	cmp	r3, #0
 802523a:	f340 8187 	ble.w	802554c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802523e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025242:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025246:	d406      	bmi.n	8025256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025248:	4584      	cmp	ip, r0
 802524a:	da04      	bge.n	8025256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802524c:	2b00      	cmp	r3, #0
 802524e:	db02      	blt.n	8025256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025250:	42bb      	cmp	r3, r7
 8025252:	f2c0 817c 	blt.w	802554e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025256:	f11c 0c01 	adds.w	ip, ip, #1
 802525a:	f100 816c 	bmi.w	8025536 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802525e:	4561      	cmp	r1, ip
 8025260:	f2c0 8169 	blt.w	8025536 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025264:	3301      	adds	r3, #1
 8025266:	f100 8166 	bmi.w	8025536 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802526a:	429a      	cmp	r2, r3
 802526c:	f2c0 8163 	blt.w	8025536 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025270:	9b07      	ldr	r3, [sp, #28]
 8025272:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025274:	9318      	str	r3, [sp, #96]	@ 0x60
 8025276:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025278:	2b00      	cmp	r3, #0
 802527a:	f340 8186 	ble.w	802558a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802527e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025280:	142a      	asrs	r2, r5, #16
 8025282:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025286:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802528a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802528e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025292:	f100 81cb 	bmi.w	802562c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025296:	f10e 38ff 	add.w	r8, lr, #4294967295
 802529a:	4542      	cmp	r2, r8
 802529c:	f280 81c6 	bge.w	802562c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80252a0:	2800      	cmp	r0, #0
 80252a2:	f2c0 81c3 	blt.w	802562c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80252a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80252aa:	4540      	cmp	r0, r8
 80252ac:	f280 81be 	bge.w	802562c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80252b0:	fa0f f38e 	sxth.w	r3, lr
 80252b4:	fb00 2203 	mla	r2, r0, r3, r2
 80252b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80252ba:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80252be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80252c2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80252c6:	2900      	cmp	r1, #0
 80252c8:	f000 81a6 	beq.w	8025618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80252cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80252d0:	900c      	str	r0, [sp, #48]	@ 0x30
 80252d2:	0e00      	lsrs	r0, r0, #24
 80252d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80252d6:	f1bc 0f00 	cmp.w	ip, #0
 80252da:	d00f      	beq.n	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80252dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80252e0:	3b01      	subs	r3, #1
 80252e2:	009b      	lsls	r3, r3, #2
 80252e4:	3304      	adds	r3, #4
 80252e6:	eb08 0003 	add.w	r0, r8, r3
 80252ea:	f858 3003 	ldr.w	r3, [r8, r3]
 80252ee:	9308      	str	r3, [sp, #32]
 80252f0:	0e1b      	lsrs	r3, r3, #24
 80252f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80252f4:	6843      	ldr	r3, [r0, #4]
 80252f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80252f8:	0e1b      	lsrs	r3, r3, #24
 80252fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80252fc:	b289      	uxth	r1, r1
 80252fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025300:	fa1f fc8c 	uxth.w	ip, ip
 8025304:	0108      	lsls	r0, r1, #4
 8025306:	fb01 f90c 	mul.w	r9, r1, ip
 802530a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802530e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8025312:	eba0 0809 	sub.w	r8, r0, r9
 8025316:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025318:	fa1f f18c 	uxth.w	r1, ip
 802531c:	fa1f f888 	uxth.w	r8, r8
 8025320:	1a5b      	subs	r3, r3, r1
 8025322:	fb08 f000 	mul.w	r0, r8, r0
 8025326:	b29b      	uxth	r3, r3
 8025328:	fb03 000e 	mla	r0, r3, lr, r0
 802532c:	fb01 0004 	mla	r0, r1, r4, r0
 8025330:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025332:	fb09 0004 	mla	r0, r9, r4, r0
 8025336:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802533a:	2800      	cmp	r0, #0
 802533c:	f000 80f2 	beq.w	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025340:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025344:	d01b      	beq.n	802537e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025346:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802534a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802534e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025352:	fb0e fe02 	mul.w	lr, lr, r2
 8025356:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802535a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802535e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025362:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025366:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802536a:	4452      	add	r2, sl
 802536c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025370:	0a12      	lsrs	r2, r2, #8
 8025372:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025376:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802537a:	ea42 020c 	orr.w	r2, r2, ip
 802537e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025380:	2cff      	cmp	r4, #255	@ 0xff
 8025382:	d021      	beq.n	80253c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025384:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025386:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802538a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802538c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025390:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025392:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025396:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025398:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802539c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80253a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80253a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80253ac:	44de      	add	lr, fp
 80253ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80253b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80253b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80253c2:	ea4e 040a 	orr.w	r4, lr, sl
 80253c6:	940c      	str	r4, [sp, #48]	@ 0x30
 80253c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80253ca:	2cff      	cmp	r4, #255	@ 0xff
 80253cc:	d021      	beq.n	8025412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80253ce:	9c08      	ldr	r4, [sp, #32]
 80253d0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80253d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80253d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80253da:	9c08      	ldr	r4, [sp, #32]
 80253dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80253e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80253e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80253e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80253ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80253ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80253f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80253f6:	44de      	add	lr, fp
 80253f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80253fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025400:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025404:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025408:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802540c:	ea4e 040a 	orr.w	r4, lr, sl
 8025410:	9408      	str	r4, [sp, #32]
 8025412:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025414:	2cff      	cmp	r4, #255	@ 0xff
 8025416:	d021      	beq.n	802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025418:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802541a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802541e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025420:	fb04 fb0b 	mul.w	fp, r4, fp
 8025424:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025426:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802542a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802542c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025430:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025434:	fb04 fa0a 	mul.w	sl, r4, sl
 8025438:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802543c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025440:	44de      	add	lr, fp
 8025442:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025446:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802544a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802544e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025452:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025456:	ea4e 040a 	orr.w	r4, lr, sl
 802545a:	940d      	str	r4, [sp, #52]	@ 0x34
 802545c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802545e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8025462:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025466:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802546a:	9c08      	ldr	r4, [sp, #32]
 802546c:	fb08 fc0c 	mul.w	ip, r8, ip
 8025470:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025474:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025478:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802547a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802547e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025482:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025484:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025488:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802548c:	fb08 f80e 	mul.w	r8, r8, lr
 8025490:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025494:	fb03 8202 	mla	r2, r3, r2, r8
 8025498:	9b08      	ldr	r3, [sp, #32]
 802549a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802549e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80254a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80254a4:	fb01 220a 	mla	r2, r1, sl, r2
 80254a8:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80254ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80254ae:	fb09 2901 	mla	r9, r9, r1, r2
 80254b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80254b4:	4343      	muls	r3, r0
 80254b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80254ba:	1c58      	adds	r0, r3, #1
 80254bc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80254c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80254c4:	783b      	ldrb	r3, [r7, #0]
 80254c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80254ca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80254ce:	fa5f f28c 	uxtb.w	r2, ip
 80254d2:	b2c0      	uxtb	r0, r0
 80254d4:	fb12 f201 	smulbb	r2, r2, r1
 80254d8:	fb03 2300 	mla	r3, r3, r0, r2
 80254dc:	b29b      	uxth	r3, r3
 80254de:	1c5a      	adds	r2, r3, #1
 80254e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80254e4:	787a      	ldrb	r2, [r7, #1]
 80254e6:	fb12 f200 	smulbb	r2, r2, r0
 80254ea:	121b      	asrs	r3, r3, #8
 80254ec:	703b      	strb	r3, [r7, #0]
 80254ee:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80254f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80254f6:	fb03 2301 	mla	r3, r3, r1, r2
 80254fa:	b29b      	uxth	r3, r3
 80254fc:	1c5a      	adds	r2, r3, #1
 80254fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025502:	121b      	asrs	r3, r3, #8
 8025504:	707b      	strb	r3, [r7, #1]
 8025506:	78bb      	ldrb	r3, [r7, #2]
 8025508:	fb13 f000 	smulbb	r0, r3, r0
 802550c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025510:	fa1f fc8c 	uxth.w	ip, ip
 8025514:	f10c 0301 	add.w	r3, ip, #1
 8025518:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802551c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025520:	f887 c002 	strb.w	ip, [r7, #2]
 8025524:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025526:	3703      	adds	r7, #3
 8025528:	441d      	add	r5, r3
 802552a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802552c:	441e      	add	r6, r3
 802552e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025530:	3b01      	subs	r3, #1
 8025532:	9318      	str	r3, [sp, #96]	@ 0x60
 8025534:	e69f      	b.n	8025276 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025536:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025538:	441d      	add	r5, r3
 802553a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802553c:	441e      	add	r6, r3
 802553e:	9b07      	ldr	r3, [sp, #28]
 8025540:	3b01      	subs	r3, #1
 8025542:	9307      	str	r3, [sp, #28]
 8025544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025546:	3303      	adds	r3, #3
 8025548:	930a      	str	r3, [sp, #40]	@ 0x28
 802554a:	e674      	b.n	8025236 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802554c:	d025      	beq.n	802559a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802554e:	9b07      	ldr	r3, [sp, #28]
 8025550:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8025552:	3b01      	subs	r3, #1
 8025554:	fb00 5003 	mla	r0, r0, r3, r5
 8025558:	1400      	asrs	r0, r0, #16
 802555a:	f53f ae89 	bmi.w	8025270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802555e:	3901      	subs	r1, #1
 8025560:	4288      	cmp	r0, r1
 8025562:	f6bf ae85 	bge.w	8025270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025566:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8025568:	fb01 6303 	mla	r3, r1, r3, r6
 802556c:	141b      	asrs	r3, r3, #16
 802556e:	f53f ae7f 	bmi.w	8025270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025572:	3a01      	subs	r2, #1
 8025574:	4293      	cmp	r3, r2
 8025576:	f6bf ae7b 	bge.w	8025270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802557a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802557c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025580:	f103 0e03 	add.w	lr, r3, #3
 8025584:	f1bb 0f00 	cmp.w	fp, #0
 8025588:	dc6e      	bgt.n	8025668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802558a:	9b07      	ldr	r3, [sp, #28]
 802558c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025592:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025596:	4423      	add	r3, r4
 8025598:	930a      	str	r3, [sp, #40]	@ 0x28
 802559a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802559c:	2b00      	cmp	r3, #0
 802559e:	f340 81ab 	ble.w	80258f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80255a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80255a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80255a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80255ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80255b0:	eef0 6a62 	vmov.f32	s13, s5
 80255b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80255b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80255bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80255c0:	ee16 5a90 	vmov	r5, s13
 80255c4:	eef0 6a43 	vmov.f32	s13, s6
 80255c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80255cc:	ee16 6a90 	vmov	r6, s13
 80255d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80255d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80255d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80255dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80255e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80255e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80255e8:	ee12 2a90 	vmov	r2, s5
 80255ec:	eef0 2a47 	vmov.f32	s5, s14
 80255f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80255f4:	ee13 2a10 	vmov	r2, s6
 80255f8:	9329      	str	r3, [sp, #164]	@ 0xa4
 80255fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80255fc:	eeb0 3a67 	vmov.f32	s6, s15
 8025600:	fb92 f3f3 	sdiv	r3, r2, r3
 8025604:	932a      	str	r3, [sp, #168]	@ 0xa8
 8025606:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025608:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802560a:	3b01      	subs	r3, #1
 802560c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802560e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025610:	bf08      	it	eq
 8025612:	4613      	moveq	r3, r2
 8025614:	9307      	str	r3, [sp, #28]
 8025616:	e600      	b.n	802521a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025618:	f1bc 0f00 	cmp.w	ip, #0
 802561c:	f43f ae6e 	beq.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025620:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025624:	9308      	str	r3, [sp, #32]
 8025626:	0e1b      	lsrs	r3, r3, #24
 8025628:	9311      	str	r3, [sp, #68]	@ 0x44
 802562a:	e667      	b.n	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802562c:	f112 0801 	adds.w	r8, r2, #1
 8025630:	f53f af78 	bmi.w	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025634:	45c6      	cmp	lr, r8
 8025636:	f6ff af75 	blt.w	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802563a:	f110 0801 	adds.w	r8, r0, #1
 802563e:	f53f af71 	bmi.w	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025642:	4543      	cmp	r3, r8
 8025644:	f6ff af6e 	blt.w	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025648:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802564a:	b21b      	sxth	r3, r3
 802564c:	9201      	str	r2, [sp, #4]
 802564e:	9300      	str	r3, [sp, #0]
 8025650:	fa0f f38e 	sxth.w	r3, lr
 8025654:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802565a:	e9cd c404 	strd	ip, r4, [sp, #16]
 802565e:	4639      	mov	r1, r7
 8025660:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8025662:	f7ff fc79 	bl	8024f58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025666:	e75d      	b.n	8025524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025668:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802566a:	142f      	asrs	r7, r5, #16
 802566c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802566e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025672:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8025676:	1433      	asrs	r3, r6, #16
 8025678:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802567c:	fb02 7303 	mla	r3, r2, r3, r7
 8025680:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8025684:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025688:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802568c:	2900      	cmp	r1, #0
 802568e:	f000 812a 	beq.w	80258e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8025692:	687c      	ldr	r4, [r7, #4]
 8025694:	940e      	str	r4, [sp, #56]	@ 0x38
 8025696:	0e24      	lsrs	r4, r4, #24
 8025698:	9415      	str	r4, [sp, #84]	@ 0x54
 802569a:	b178      	cbz	r0, 80256bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802569c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80256a0:	3a01      	subs	r2, #1
 80256a2:	0092      	lsls	r2, r2, #2
 80256a4:	3204      	adds	r2, #4
 80256a6:	eb07 0802 	add.w	r8, r7, r2
 80256aa:	58ba      	ldr	r2, [r7, r2]
 80256ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80256ae:	0e12      	lsrs	r2, r2, #24
 80256b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80256b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80256b6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80256b8:	0e12      	lsrs	r2, r2, #24
 80256ba:	9216      	str	r2, [sp, #88]	@ 0x58
 80256bc:	b289      	uxth	r1, r1
 80256be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80256c0:	b280      	uxth	r0, r0
 80256c2:	fb01 f900 	mul.w	r9, r1, r0
 80256c6:	0109      	lsls	r1, r1, #4
 80256c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80256cc:	eba1 0809 	sub.w	r8, r1, r9
 80256d0:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 80256d4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80256d6:	b280      	uxth	r0, r0
 80256d8:	fa1f f888 	uxth.w	r8, r8
 80256dc:	1a12      	subs	r2, r2, r0
 80256de:	fb08 f101 	mul.w	r1, r8, r1
 80256e2:	b292      	uxth	r2, r2
 80256e4:	fb02 110c 	mla	r1, r2, ip, r1
 80256e8:	fb00 1104 	mla	r1, r0, r4, r1
 80256ec:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256ee:	fb09 1104 	mla	r1, r9, r4, r1
 80256f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80256f6:	2900      	cmp	r1, #0
 80256f8:	f000 80ec 	beq.w	80258d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80256fc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025700:	d019      	beq.n	8025736 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025702:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025706:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802570a:	fb0c fa0a 	mul.w	sl, ip, sl
 802570e:	fb0c fc03 	mul.w	ip, ip, r3
 8025712:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025716:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802571a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802571e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025722:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025726:	4453      	add	r3, sl
 8025728:	0a3f      	lsrs	r7, r7, #8
 802572a:	0a1b      	lsrs	r3, r3, #8
 802572c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025730:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025734:	433b      	orrs	r3, r7
 8025736:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025738:	2cff      	cmp	r4, #255	@ 0xff
 802573a:	d020      	beq.n	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802573c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802573e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025742:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025744:	4367      	muls	r7, r4
 8025746:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025748:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802574c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025750:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025752:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025756:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802575a:	fb04 fa0a 	mul.w	sl, r4, sl
 802575e:	44bc      	add	ip, r7
 8025760:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025764:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025768:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802576c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025770:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025774:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025778:	ea4c 040a 	orr.w	r4, ip, sl
 802577c:	940e      	str	r4, [sp, #56]	@ 0x38
 802577e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025780:	2cff      	cmp	r4, #255	@ 0xff
 8025782:	d020      	beq.n	80257c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8025784:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025786:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802578a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802578c:	4367      	muls	r7, r4
 802578e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025790:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025794:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025798:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802579a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802579e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80257a6:	44bc      	add	ip, r7
 80257a8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80257ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80257b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257bc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257c0:	ea4c 040a 	orr.w	r4, ip, sl
 80257c4:	9409      	str	r4, [sp, #36]	@ 0x24
 80257c6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80257c8:	2cff      	cmp	r4, #255	@ 0xff
 80257ca:	d020      	beq.n	802580e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80257cc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80257ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80257d2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80257d4:	4367      	muls	r7, r4
 80257d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80257d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80257dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80257e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80257e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80257e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80257ee:	44bc      	add	ip, r7
 80257f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80257f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80257fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025804:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025808:	ea4c 040a 	orr.w	r4, ip, sl
 802580c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802580e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025810:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025814:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025818:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802581c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802581e:	fb08 f707 	mul.w	r7, r8, r7
 8025822:	fb02 770c 	mla	r7, r2, ip, r7
 8025826:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802582a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802582c:	fb00 770c 	mla	r7, r0, ip, r7
 8025830:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025834:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025836:	fb09 770c 	mla	r7, r9, ip, r7
 802583a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802583e:	fb08 f80c 	mul.w	r8, r8, ip
 8025842:	0a3f      	lsrs	r7, r7, #8
 8025844:	fb02 8303 	mla	r3, r2, r3, r8
 8025848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802584a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802584e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025852:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025854:	fb00 330a 	mla	r3, r0, sl, r3
 8025858:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802585c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802585e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025868:	434b      	muls	r3, r1
 802586a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802586e:	1c59      	adds	r1, r3, #1
 8025870:	ea47 070c 	orr.w	r7, r7, ip
 8025874:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025878:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802587c:	b2fa      	uxtb	r2, r7
 802587e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025882:	fb12 f200 	smulbb	r2, r2, r0
 8025886:	b2c9      	uxtb	r1, r1
 8025888:	fb03 2301 	mla	r3, r3, r1, r2
 802588c:	b29b      	uxth	r3, r3
 802588e:	1c5a      	adds	r2, r3, #1
 8025890:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025894:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025898:	fb12 f201 	smulbb	r2, r2, r1
 802589c:	121b      	asrs	r3, r3, #8
 802589e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80258a2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80258a6:	0c3f      	lsrs	r7, r7, #16
 80258a8:	fb03 2300 	mla	r3, r3, r0, r2
 80258ac:	b29b      	uxth	r3, r3
 80258ae:	1c5a      	adds	r2, r3, #1
 80258b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80258b4:	121b      	asrs	r3, r3, #8
 80258b6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80258ba:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80258be:	fb13 f101 	smulbb	r1, r3, r1
 80258c2:	fb07 1700 	mla	r7, r7, r0, r1
 80258c6:	b2bf      	uxth	r7, r7
 80258c8:	1c79      	adds	r1, r7, #1
 80258ca:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80258ce:	123f      	asrs	r7, r7, #8
 80258d0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80258d4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80258d6:	f10e 0e03 	add.w	lr, lr, #3
 80258da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80258de:	441d      	add	r5, r3
 80258e0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80258e2:	441e      	add	r6, r3
 80258e4:	e64e      	b.n	8025584 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80258e6:	2800      	cmp	r0, #0
 80258e8:	f43f aee8 	beq.w	80256bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80258ec:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80258f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80258f2:	0e12      	lsrs	r2, r2, #24
 80258f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80258f6:	e6e1      	b.n	80256bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80258f8:	b01d      	add	sp, #116	@ 0x74
 80258fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080258fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80258fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025902:	b087      	sub	sp, #28
 8025904:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8025908:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802590c:	fb05 7003 	mla	r0, r5, r3, r7
 8025910:	2d00      	cmp	r5, #0
 8025912:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8025916:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802591a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802591e:	f2c0 810a 	blt.w	8025b36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025922:	45a8      	cmp	r8, r5
 8025924:	f340 8107 	ble.w	8025b36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025928:	2f00      	cmp	r7, #0
 802592a:	f2c0 8102 	blt.w	8025b32 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802592e:	42bb      	cmp	r3, r7
 8025930:	f340 80ff 	ble.w	8025b32 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025934:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025938:	1c7a      	adds	r2, r7, #1
 802593a:	f100 80ff 	bmi.w	8025b3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802593e:	4293      	cmp	r3, r2
 8025940:	f340 80fc 	ble.w	8025b3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025944:	2c00      	cmp	r4, #0
 8025946:	f000 80fb 	beq.w	8025b40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802594a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802594e:	3501      	adds	r5, #1
 8025950:	f100 80fa 	bmi.w	8025b48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025954:	45a8      	cmp	r8, r5
 8025956:	f340 80f7 	ble.w	8025b48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802595a:	f1be 0f00 	cmp.w	lr, #0
 802595e:	f000 80f6 	beq.w	8025b4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8025962:	2f00      	cmp	r7, #0
 8025964:	f2c0 80ee 	blt.w	8025b44 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025968:	42bb      	cmp	r3, r7
 802596a:	f340 80eb 	ble.w	8025b44 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802596e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8025972:	3701      	adds	r7, #1
 8025974:	f100 80ee 	bmi.w	8025b54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025978:	42bb      	cmp	r3, r7
 802597a:	f340 80eb 	ble.w	8025b54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802597e:	2c00      	cmp	r4, #0
 8025980:	f000 80ea 	beq.w	8025b58 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8025984:	3301      	adds	r3, #1
 8025986:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802598a:	fa1f fc84 	uxth.w	ip, r4
 802598e:	fa1f fe8e 	uxth.w	lr, lr
 8025992:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025996:	fb0c f90e 	mul.w	r9, ip, lr
 802599a:	0e13      	lsrs	r3, r2, #24
 802599c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80259a0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80259a4:	9302      	str	r3, [sp, #8]
 80259a6:	ebac 0709 	sub.w	r7, ip, r9
 80259aa:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80259ae:	fa1f f48e 	uxth.w	r4, lr
 80259b2:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80259b6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80259ba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80259be:	fb0a fe0e 	mul.w	lr, sl, lr
 80259c2:	1b1b      	subs	r3, r3, r4
 80259c4:	fb0a f606 	mul.w	r6, sl, r6
 80259c8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80259cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80259d0:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80259d4:	b29b      	uxth	r3, r3
 80259d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80259da:	b2bf      	uxth	r7, r7
 80259dc:	9301      	str	r3, [sp, #4]
 80259de:	44e6      	add	lr, ip
 80259e0:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80259e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80259ec:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80259f0:	9303      	str	r3, [sp, #12]
 80259f2:	0a33      	lsrs	r3, r6, #8
 80259f4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80259f8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80259fc:	9304      	str	r3, [sp, #16]
 80259fe:	fb0b f606 	mul.w	r6, fp, r6
 8025a02:	fb0b f000 	mul.w	r0, fp, r0
 8025a06:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025a0a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025a0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a12:	44b6      	add	lr, r6
 8025a14:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8025a18:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025a1c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8025a20:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025a24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a28:	fb08 f606 	mul.w	r6, r8, r6
 8025a2c:	0a03      	lsrs	r3, r0, #8
 8025a2e:	fb08 f505 	mul.w	r5, r8, r5
 8025a32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a36:	0a30      	lsrs	r0, r6, #8
 8025a38:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025a3c:	9305      	str	r3, [sp, #20]
 8025a3e:	0e13      	lsrs	r3, r2, #24
 8025a40:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025a44:	fb0e fe07 	mul.w	lr, lr, r7
 8025a48:	4430      	add	r0, r6
 8025a4a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8025a4e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025a52:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8025a56:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025a5a:	0a00      	lsrs	r0, r0, #8
 8025a5c:	435e      	muls	r6, r3
 8025a5e:	0a2d      	lsrs	r5, r5, #8
 8025a60:	435a      	muls	r2, r3
 8025a62:	9b03      	ldr	r3, [sp, #12]
 8025a64:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025a68:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025a6c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025a70:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a74:	44b4      	add	ip, r6
 8025a76:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8025a7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a7e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8025a82:	9e01      	ldr	r6, [sp, #4]
 8025a84:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a88:	fb03 ee06 	mla	lr, r3, r6, lr
 8025a8c:	9b04      	ldr	r3, [sp, #16]
 8025a8e:	0a12      	lsrs	r2, r2, #8
 8025a90:	fb0c ee09 	mla	lr, ip, r9, lr
 8025a94:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8025a98:	9b05      	ldr	r3, [sp, #20]
 8025a9a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025a9e:	fb00 ee04 	mla	lr, r0, r4, lr
 8025aa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025aa6:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8025aaa:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8025aae:	9b01      	ldr	r3, [sp, #4]
 8025ab0:	fb07 fe0e 	mul.w	lr, r7, lr
 8025ab4:	fb07 f70b 	mul.w	r7, r7, fp
 8025ab8:	fb03 ee06 	mla	lr, r3, r6, lr
 8025abc:	fb03 730a 	mla	r3, r3, sl, r7
 8025ac0:	fb09 e202 	mla	r2, r9, r2, lr
 8025ac4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8025ac8:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025acc:	fb04 3408 	mla	r4, r4, r8, r3
 8025ad0:	9b02      	ldr	r3, [sp, #8]
 8025ad2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ad6:	fb09 4903 	mla	r9, r9, r3, r4
 8025ada:	780b      	ldrb	r3, [r1, #0]
 8025adc:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8025ae0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025ae4:	ea40 0e0e 	orr.w	lr, r0, lr
 8025ae8:	fa5f f989 	uxtb.w	r9, r9
 8025aec:	fb03 f209 	mul.w	r2, r3, r9
 8025af0:	1c53      	adds	r3, r2, #1
 8025af2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025af6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025afa:	700b      	strb	r3, [r1, #0]
 8025afc:	784b      	ldrb	r3, [r1, #1]
 8025afe:	fb03 f309 	mul.w	r3, r3, r9
 8025b02:	1c5a      	adds	r2, r3, #1
 8025b04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025b08:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8025b0c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025b10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b14:	704b      	strb	r3, [r1, #1]
 8025b16:	788b      	ldrb	r3, [r1, #2]
 8025b18:	fb03 f909 	mul.w	r9, r3, r9
 8025b1c:	f109 0301 	add.w	r3, r9, #1
 8025b20:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025b24:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8025b28:	f881 e002 	strb.w	lr, [r1, #2]
 8025b2c:	b007      	add	sp, #28
 8025b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b32:	2600      	movs	r6, #0
 8025b34:	e700      	b.n	8025938 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8025b36:	2000      	movs	r0, #0
 8025b38:	4606      	mov	r6, r0
 8025b3a:	e708      	b.n	802594e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025b3c:	2000      	movs	r0, #0
 8025b3e:	e706      	b.n	802594e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025b40:	4620      	mov	r0, r4
 8025b42:	e704      	b.n	802594e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025b44:	2500      	movs	r5, #0
 8025b46:	e714      	b.n	8025972 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8025b48:	2200      	movs	r2, #0
 8025b4a:	4615      	mov	r5, r2
 8025b4c:	e71d      	b.n	802598a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025b4e:	4672      	mov	r2, lr
 8025b50:	4675      	mov	r5, lr
 8025b52:	e71a      	b.n	802598a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025b54:	2200      	movs	r2, #0
 8025b56:	e718      	b.n	802598a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025b58:	4622      	mov	r2, r4
 8025b5a:	e716      	b.n	802598a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08025b5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b60:	b099      	sub	sp, #100	@ 0x64
 8025b62:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8025b66:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8025b68:	9017      	str	r0, [sp, #92]	@ 0x5c
 8025b6a:	9306      	str	r3, [sp, #24]
 8025b6c:	6850      	ldr	r0, [r2, #4]
 8025b6e:	6812      	ldr	r2, [r2, #0]
 8025b70:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8025b74:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8025b78:	fb00 1303 	mla	r3, r0, r3, r1
 8025b7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025b80:	18d3      	adds	r3, r2, r3
 8025b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b84:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025b86:	681b      	ldr	r3, [r3, #0]
 8025b88:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	dc03      	bgt.n	8025b98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025b90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	f340 8360 	ble.w	8026258 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8025b98:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025b9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ba2:	1e48      	subs	r0, r1, #1
 8025ba4:	1e57      	subs	r7, r2, #1
 8025ba6:	9b06      	ldr	r3, [sp, #24]
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	f340 817b 	ble.w	8025ea4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8025bae:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025bb2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025bb6:	d406      	bmi.n	8025bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025bb8:	4584      	cmp	ip, r0
 8025bba:	da04      	bge.n	8025bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025bbc:	2b00      	cmp	r3, #0
 8025bbe:	db02      	blt.n	8025bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025bc0:	42bb      	cmp	r3, r7
 8025bc2:	f2c0 8170 	blt.w	8025ea6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025bc6:	f11c 0c01 	adds.w	ip, ip, #1
 8025bca:	f100 8160 	bmi.w	8025e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025bce:	4561      	cmp	r1, ip
 8025bd0:	f2c0 815d 	blt.w	8025e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025bd4:	3301      	adds	r3, #1
 8025bd6:	f100 815a 	bmi.w	8025e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025bda:	429a      	cmp	r2, r3
 8025bdc:	f2c0 8157 	blt.w	8025e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025be0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025be4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025be6:	f1b8 0f00 	cmp.w	r8, #0
 8025bea:	f340 8179 	ble.w	8025ee0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025bee:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8025bf0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025bf4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025bf6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025bfa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025bfe:	142a      	asrs	r2, r5, #16
 8025c00:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025c04:	689b      	ldr	r3, [r3, #8]
 8025c06:	f100 81be 	bmi.w	8025f86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025c0a:	f103 39ff 	add.w	r9, r3, #4294967295
 8025c0e:	454a      	cmp	r2, r9
 8025c10:	f280 81b9 	bge.w	8025f86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025c14:	f1bc 0f00 	cmp.w	ip, #0
 8025c18:	f2c0 81b5 	blt.w	8025f86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025c1c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8025c20:	45cc      	cmp	ip, r9
 8025c22:	f280 81b0 	bge.w	8025f86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025c26:	b21b      	sxth	r3, r3
 8025c28:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8025c2e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8025c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025c36:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025c3a:	2900      	cmp	r1, #0
 8025c3c:	f000 8197 	beq.w	8025f6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025c40:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8025c44:	940a      	str	r4, [sp, #40]	@ 0x28
 8025c46:	0e24      	lsrs	r4, r4, #24
 8025c48:	9411      	str	r4, [sp, #68]	@ 0x44
 8025c4a:	b180      	cbz	r0, 8025c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025c50:	3b01      	subs	r3, #1
 8025c52:	009b      	lsls	r3, r3, #2
 8025c54:	3304      	adds	r3, #4
 8025c56:	eb09 0c03 	add.w	ip, r9, r3
 8025c5a:	f859 3003 	ldr.w	r3, [r9, r3]
 8025c5e:	9307      	str	r3, [sp, #28]
 8025c60:	0e1b      	lsrs	r3, r3, #24
 8025c62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025c64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025c6a:	0e1b      	lsrs	r3, r3, #24
 8025c6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8025c6e:	b289      	uxth	r1, r1
 8025c70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c72:	b280      	uxth	r0, r0
 8025c74:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025c76:	fb01 fa00 	mul.w	sl, r1, r0
 8025c7a:	0109      	lsls	r1, r1, #4
 8025c7c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025c80:	eba1 090a 	sub.w	r9, r1, sl
 8025c84:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8025c88:	b280      	uxth	r0, r0
 8025c8a:	fa1f f989 	uxth.w	r9, r9
 8025c8e:	1a09      	subs	r1, r1, r0
 8025c90:	fb09 f303 	mul.w	r3, r9, r3
 8025c94:	b289      	uxth	r1, r1
 8025c96:	fb01 330e 	mla	r3, r1, lr, r3
 8025c9a:	fb00 3304 	mla	r3, r0, r4, r3
 8025c9e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025ca0:	fb0a 3304 	mla	r3, sl, r4, r3
 8025ca4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	f000 80e8 	beq.w	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025cae:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025cb2:	d01b      	beq.n	8025cec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8025cb4:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8025cb8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025cbc:	fb0e fb0b 	mul.w	fp, lr, fp
 8025cc0:	fb0e fe02 	mul.w	lr, lr, r2
 8025cc4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8025cc8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025ccc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025cd0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025cd4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025cd8:	445a      	add	r2, fp
 8025cda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cde:	0a12      	lsrs	r2, r2, #8
 8025ce0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025ce4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025ce8:	ea42 020c 	orr.w	r2, r2, ip
 8025cec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025cee:	2cff      	cmp	r4, #255	@ 0xff
 8025cf0:	d021      	beq.n	8025d36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025cf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025cf4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025cf8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025cfa:	fb04 fc0c 	mul.w	ip, r4, ip
 8025cfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025d00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025d04:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025d08:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025d0a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025d0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d12:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d16:	44e6      	add	lr, ip
 8025d18:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025d1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d20:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025d24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025d2c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025d30:	ea4e 040b 	orr.w	r4, lr, fp
 8025d34:	940a      	str	r4, [sp, #40]	@ 0x28
 8025d36:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025d38:	2cff      	cmp	r4, #255	@ 0xff
 8025d3a:	d021      	beq.n	8025d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025d3c:	9c07      	ldr	r4, [sp, #28]
 8025d3e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025d42:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025d44:	fb04 fc0c 	mul.w	ip, r4, ip
 8025d48:	9c07      	ldr	r4, [sp, #28]
 8025d4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025d4e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025d52:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025d54:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025d58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d60:	44e6      	add	lr, ip
 8025d62:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025d66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d6a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025d6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025d72:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025d76:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025d7a:	ea4e 040b 	orr.w	r4, lr, fp
 8025d7e:	9407      	str	r4, [sp, #28]
 8025d80:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d82:	2cff      	cmp	r4, #255	@ 0xff
 8025d84:	d021      	beq.n	8025dca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8025d86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d88:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025d8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d8e:	fb04 fc0c 	mul.w	ip, r4, ip
 8025d92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d94:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025d98:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025d9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d9e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025da2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025da6:	fb04 fb0b 	mul.w	fp, r4, fp
 8025daa:	44e6      	add	lr, ip
 8025dac:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025db0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025db4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025db8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025dbc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025dc0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025dc4:	ea4e 040b 	orr.w	r4, lr, fp
 8025dc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025dca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025dcc:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8025dd0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025dd4:	2bff      	cmp	r3, #255	@ 0xff
 8025dd6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025dda:	9c07      	ldr	r4, [sp, #28]
 8025ddc:	fb09 fc0c 	mul.w	ip, r9, ip
 8025de0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025de4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025de8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dea:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025dee:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025df2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025df4:	fb0a cc0e 	mla	ip, sl, lr, ip
 8025df8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025dfc:	fb09 f90e 	mul.w	r9, r9, lr
 8025e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e04:	fb01 9202 	mla	r2, r1, r2, r9
 8025e08:	9907      	ldr	r1, [sp, #28]
 8025e0a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e0e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8025e12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025e14:	fb00 220b 	mla	r2, r0, fp, r2
 8025e18:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8025e1c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8025e20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025e28:	ea4c 0c0a 	orr.w	ip, ip, sl
 8025e2c:	fa5f f08c 	uxtb.w	r0, ip
 8025e30:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8025e34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025e38:	f000 80a2 	beq.w	8025f80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025e3c:	43db      	mvns	r3, r3
 8025e3e:	783a      	ldrb	r2, [r7, #0]
 8025e40:	f897 a002 	ldrb.w	sl, [r7, #2]
 8025e44:	b2db      	uxtb	r3, r3
 8025e46:	fb02 fe03 	mul.w	lr, r2, r3
 8025e4a:	fb0a fa03 	mul.w	sl, sl, r3
 8025e4e:	f10e 0201 	add.w	r2, lr, #1
 8025e52:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8025e56:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025e5a:	703a      	strb	r2, [r7, #0]
 8025e5c:	787a      	ldrb	r2, [r7, #1]
 8025e5e:	fb02 f003 	mul.w	r0, r2, r3
 8025e62:	f10a 0301 	add.w	r3, sl, #1
 8025e66:	1c42      	adds	r2, r0, #1
 8025e68:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025e6c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025e70:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025e74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025e78:	707a      	strb	r2, [r7, #1]
 8025e7a:	f887 c002 	strb.w	ip, [r7, #2]
 8025e7e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025e80:	3703      	adds	r7, #3
 8025e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8025e86:	441d      	add	r5, r3
 8025e88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025e8a:	441e      	add	r6, r3
 8025e8c:	e6ab      	b.n	8025be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025e8e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025e90:	441d      	add	r5, r3
 8025e92:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025e94:	441e      	add	r6, r3
 8025e96:	9b06      	ldr	r3, [sp, #24]
 8025e98:	3b01      	subs	r3, #1
 8025e9a:	9306      	str	r3, [sp, #24]
 8025e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e9e:	3303      	adds	r3, #3
 8025ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ea2:	e680      	b.n	8025ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025ea4:	d024      	beq.n	8025ef0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ea6:	9b06      	ldr	r3, [sp, #24]
 8025ea8:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8025eaa:	3b01      	subs	r3, #1
 8025eac:	fb00 5003 	mla	r0, r0, r3, r5
 8025eb0:	1400      	asrs	r0, r0, #16
 8025eb2:	f53f ae95 	bmi.w	8025be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025eb6:	3901      	subs	r1, #1
 8025eb8:	4288      	cmp	r0, r1
 8025eba:	f6bf ae91 	bge.w	8025be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ebe:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8025ec0:	fb01 6303 	mla	r3, r1, r3, r6
 8025ec4:	141b      	asrs	r3, r3, #16
 8025ec6:	f53f ae8b 	bmi.w	8025be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025eca:	3a01      	subs	r2, #1
 8025ecc:	4293      	cmp	r3, r2
 8025ece:	f6bf ae87 	bge.w	8025be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ed4:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025ed8:	1cdf      	adds	r7, r3, #3
 8025eda:	f1bb 0f00 	cmp.w	fp, #0
 8025ede:	dc6e      	bgt.n	8025fbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8025ee0:	9b06      	ldr	r3, [sp, #24]
 8025ee2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ee8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025eec:	4423      	add	r3, r4
 8025eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ef0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025ef2:	2b00      	cmp	r3, #0
 8025ef4:	f340 81b0 	ble.w	8026258 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8025ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025efc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025efe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f06:	eef0 6a62 	vmov.f32	s13, s5
 8025f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f16:	ee16 5a90 	vmov	r5, s13
 8025f1a:	eef0 6a43 	vmov.f32	s13, s6
 8025f1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f22:	ee16 6a90 	vmov	r6, s13
 8025f26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f3e:	ee12 2a90 	vmov	r2, s5
 8025f42:	eef0 2a47 	vmov.f32	s5, s14
 8025f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f4a:	ee13 2a10 	vmov	r2, s6
 8025f4e:	9325      	str	r3, [sp, #148]	@ 0x94
 8025f50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025f52:	eeb0 3a67 	vmov.f32	s6, s15
 8025f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f5a:	9326      	str	r3, [sp, #152]	@ 0x98
 8025f5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025f5e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025f60:	3b01      	subs	r3, #1
 8025f62:	9315      	str	r3, [sp, #84]	@ 0x54
 8025f64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025f66:	bf08      	it	eq
 8025f68:	4613      	moveq	r3, r2
 8025f6a:	9306      	str	r3, [sp, #24]
 8025f6c:	e60d      	b.n	8025b8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025f6e:	2800      	cmp	r0, #0
 8025f70:	f43f ae7d 	beq.w	8025c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025f74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025f78:	9307      	str	r3, [sp, #28]
 8025f7a:	0e1b      	lsrs	r3, r3, #24
 8025f7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025f7e:	e676      	b.n	8025c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025f80:	7038      	strb	r0, [r7, #0]
 8025f82:	7079      	strb	r1, [r7, #1]
 8025f84:	e779      	b.n	8025e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025f86:	f112 0901 	adds.w	r9, r2, #1
 8025f8a:	f53f af78 	bmi.w	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025f8e:	454b      	cmp	r3, r9
 8025f90:	f6ff af75 	blt.w	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025f94:	f11c 0901 	adds.w	r9, ip, #1
 8025f98:	f53f af71 	bmi.w	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025f9c:	45ce      	cmp	lr, r9
 8025f9e:	f6ff af6e 	blt.w	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025fa2:	b21b      	sxth	r3, r3
 8025fa4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025fa8:	fa0f f28e 	sxth.w	r2, lr
 8025fac:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025fb0:	9200      	str	r2, [sp, #0]
 8025fb2:	4639      	mov	r1, r7
 8025fb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025fb6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8025fb8:	f7ff fca1 	bl	80258fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025fbc:	e75f      	b.n	8025e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025fbe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025fc0:	1429      	asrs	r1, r5, #16
 8025fc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025fc4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025fc8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8025fcc:	1433      	asrs	r3, r6, #16
 8025fce:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025fd2:	fb0c 1303 	mla	r3, ip, r3, r1
 8025fd6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025fd8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025fdc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025fe0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025fe4:	2a00      	cmp	r2, #0
 8025fe6:	f000 8129 	beq.w	802623c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025fea:	684c      	ldr	r4, [r1, #4]
 8025fec:	940c      	str	r4, [sp, #48]	@ 0x30
 8025fee:	0e24      	lsrs	r4, r4, #24
 8025ff0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8025ff2:	b198      	cbz	r0, 802601c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8025ff4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8025ff8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025ffc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8026000:	f10c 0c04 	add.w	ip, ip, #4
 8026004:	eb01 080c 	add.w	r8, r1, ip
 8026008:	f851 100c 	ldr.w	r1, [r1, ip]
 802600c:	9108      	str	r1, [sp, #32]
 802600e:	0e09      	lsrs	r1, r1, #24
 8026010:	9110      	str	r1, [sp, #64]	@ 0x40
 8026012:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026016:	910d      	str	r1, [sp, #52]	@ 0x34
 8026018:	0e09      	lsrs	r1, r1, #24
 802601a:	9114      	str	r1, [sp, #80]	@ 0x50
 802601c:	b292      	uxth	r2, r2
 802601e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026020:	b280      	uxth	r0, r0
 8026022:	fb02 f900 	mul.w	r9, r2, r0
 8026026:	0112      	lsls	r2, r2, #4
 8026028:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802602c:	eba2 0809 	sub.w	r8, r2, r9
 8026030:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8026034:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026036:	b280      	uxth	r0, r0
 8026038:	fa1f f888 	uxth.w	r8, r8
 802603c:	1a09      	subs	r1, r1, r0
 802603e:	fb08 f202 	mul.w	r2, r8, r2
 8026042:	b289      	uxth	r1, r1
 8026044:	fb01 220e 	mla	r2, r1, lr, r2
 8026048:	fb00 2204 	mla	r2, r0, r4, r2
 802604c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802604e:	fb09 2204 	mla	r2, r9, r4, r2
 8026052:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026056:	2a00      	cmp	r2, #0
 8026058:	f000 80e8 	beq.w	802622c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802605c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026060:	d01b      	beq.n	802609a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8026062:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026066:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802606a:	fb0e fa0a 	mul.w	sl, lr, sl
 802606e:	fb0e fe03 	mul.w	lr, lr, r3
 8026072:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026076:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802607a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802607e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026082:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026086:	4453      	add	r3, sl
 8026088:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802608c:	0a1b      	lsrs	r3, r3, #8
 802608e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026092:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026096:	ea43 030c 	orr.w	r3, r3, ip
 802609a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802609c:	2cff      	cmp	r4, #255	@ 0xff
 802609e:	d021      	beq.n	80260e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80260a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260a2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80260a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260a8:	fb04 fc0c 	mul.w	ip, r4, ip
 80260ac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80260b2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80260b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260b8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80260bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80260c4:	44e6      	add	lr, ip
 80260c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80260ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260de:	ea4e 040a 	orr.w	r4, lr, sl
 80260e2:	940c      	str	r4, [sp, #48]	@ 0x30
 80260e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260e6:	2cff      	cmp	r4, #255	@ 0xff
 80260e8:	d021      	beq.n	802612e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80260ea:	9c08      	ldr	r4, [sp, #32]
 80260ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80260f0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260f2:	fb04 fc0c 	mul.w	ip, r4, ip
 80260f6:	9c08      	ldr	r4, [sp, #32]
 80260f8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80260fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260fe:	fb04 fa0e 	mul.w	sl, r4, lr
 8026102:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026106:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802610a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802610e:	44e6      	add	lr, ip
 8026110:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026114:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026118:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802611c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026120:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026124:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026128:	ea4e 040a 	orr.w	r4, lr, sl
 802612c:	9408      	str	r4, [sp, #32]
 802612e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026130:	2cff      	cmp	r4, #255	@ 0xff
 8026132:	d021      	beq.n	8026178 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026134:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026136:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802613a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802613c:	fb04 fc0c 	mul.w	ip, r4, ip
 8026140:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026142:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026146:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802614a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802614c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026150:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026154:	fb04 fa0a 	mul.w	sl, r4, sl
 8026158:	44e6      	add	lr, ip
 802615a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802615e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026162:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026166:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802616a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802616e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026172:	ea4e 040a 	orr.w	r4, lr, sl
 8026176:	940d      	str	r4, [sp, #52]	@ 0x34
 8026178:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802617a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802617e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026182:	2aff      	cmp	r2, #255	@ 0xff
 8026184:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026188:	9c08      	ldr	r4, [sp, #32]
 802618a:	fb08 fc0c 	mul.w	ip, r8, ip
 802618e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026192:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026196:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026198:	fb00 cc0e 	mla	ip, r0, lr, ip
 802619c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80261a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80261a2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80261a6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80261aa:	fb08 f80e 	mul.w	r8, r8, lr
 80261ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261b2:	fb01 8303 	mla	r3, r1, r3, r8
 80261b6:	9908      	ldr	r1, [sp, #32]
 80261b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80261bc:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80261c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80261c2:	fb00 330a 	mla	r3, r0, sl, r3
 80261c6:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80261ca:	fb09 3e0e 	mla	lr, r9, lr, r3
 80261ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261d2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80261d6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80261da:	fa5f f08c 	uxtb.w	r0, ip
 80261de:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80261e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80261e6:	d032      	beq.n	802624e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80261e8:	43d2      	mvns	r2, r2
 80261ea:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80261ee:	b2d2      	uxtb	r2, r2
 80261f0:	fb0e fe02 	mul.w	lr, lr, r2
 80261f4:	f10e 0301 	add.w	r3, lr, #1
 80261f8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80261fc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026200:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8026204:	4350      	muls	r0, r2
 8026206:	f807 3c03 	strb.w	r3, [r7, #-3]
 802620a:	1c43      	adds	r3, r0, #1
 802620c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026210:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026214:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8026218:	4353      	muls	r3, r2
 802621a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802621e:	1c5a      	adds	r2, r3, #1
 8026220:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026224:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8026228:	f807 cc01 	strb.w	ip, [r7, #-1]
 802622c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802622e:	3703      	adds	r7, #3
 8026230:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026234:	441d      	add	r5, r3
 8026236:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026238:	441e      	add	r6, r3
 802623a:	e64e      	b.n	8025eda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802623c:	2800      	cmp	r0, #0
 802623e:	f43f aeed 	beq.w	802601c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026242:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8026246:	9108      	str	r1, [sp, #32]
 8026248:	0e09      	lsrs	r1, r1, #24
 802624a:	9110      	str	r1, [sp, #64]	@ 0x40
 802624c:	e6e6      	b.n	802601c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802624e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8026252:	f807 1c02 	strb.w	r1, [r7, #-2]
 8026256:	e7e7      	b.n	8026228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8026258:	b019      	add	sp, #100	@ 0x64
 802625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026260 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8026260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026264:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8026268:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802626c:	2c00      	cmp	r4, #0
 802626e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8026272:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8026276:	fb00 4e03 	mla	lr, r0, r3, r4
 802627a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802627e:	f2c0 80b8 	blt.w	80263f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026282:	45a1      	cmp	r9, r4
 8026284:	f340 80b5 	ble.w	80263f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026288:	2800      	cmp	r0, #0
 802628a:	f2c0 80b2 	blt.w	80263f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802628e:	4580      	cmp	r8, r0
 8026290:	f340 80af 	ble.w	80263f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026294:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8026298:	f01e 0f01 	tst.w	lr, #1
 802629c:	5d56      	ldrb	r6, [r2, r5]
 802629e:	bf0c      	ite	eq
 80262a0:	f006 060f 	andeq.w	r6, r6, #15
 80262a4:	1136      	asrne	r6, r6, #4
 80262a6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80262aa:	b2f6      	uxtb	r6, r6
 80262ac:	f114 0a01 	adds.w	sl, r4, #1
 80262b0:	f100 80a1 	bmi.w	80263f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80262b4:	45d1      	cmp	r9, sl
 80262b6:	f340 809e 	ble.w	80263f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80262ba:	2800      	cmp	r0, #0
 80262bc:	f2c0 809b 	blt.w	80263f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80262c0:	4580      	cmp	r8, r0
 80262c2:	f340 8098 	ble.w	80263f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80262c6:	2f00      	cmp	r7, #0
 80262c8:	f000 8097 	beq.w	80263fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80262cc:	f10e 0b01 	add.w	fp, lr, #1
 80262d0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80262d4:	f01b 0f01 	tst.w	fp, #1
 80262d8:	5d55      	ldrb	r5, [r2, r5]
 80262da:	bf0c      	ite	eq
 80262dc:	f005 050f 	andeq.w	r5, r5, #15
 80262e0:	112d      	asrne	r5, r5, #4
 80262e2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80262e6:	b2ed      	uxtb	r5, r5
 80262e8:	f1bc 0f00 	cmp.w	ip, #0
 80262ec:	f000 8089 	beq.w	8026402 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80262f0:	2c00      	cmp	r4, #0
 80262f2:	f100 0001 	add.w	r0, r0, #1
 80262f6:	f2c0 8082 	blt.w	80263fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80262fa:	45a1      	cmp	r9, r4
 80262fc:	dd7f      	ble.n	80263fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80262fe:	2800      	cmp	r0, #0
 8026300:	db7d      	blt.n	80263fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026302:	4580      	cmp	r8, r0
 8026304:	dd7b      	ble.n	80263fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8026306:	eb03 0b0e 	add.w	fp, r3, lr
 802630a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802630e:	f01b 0f01 	tst.w	fp, #1
 8026312:	5d14      	ldrb	r4, [r2, r4]
 8026314:	bf0c      	ite	eq
 8026316:	f004 040f 	andeq.w	r4, r4, #15
 802631a:	1124      	asrne	r4, r4, #4
 802631c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026320:	b2e4      	uxtb	r4, r4
 8026322:	f1ba 0f00 	cmp.w	sl, #0
 8026326:	db6f      	blt.n	8026408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026328:	45d1      	cmp	r9, sl
 802632a:	dd6d      	ble.n	8026408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802632c:	2800      	cmp	r0, #0
 802632e:	db6b      	blt.n	8026408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026330:	4580      	cmp	r8, r0
 8026332:	dd69      	ble.n	8026408 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026334:	2f00      	cmp	r7, #0
 8026336:	d069      	beq.n	802640c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8026338:	3301      	adds	r3, #1
 802633a:	449e      	add	lr, r3
 802633c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026340:	f01e 0f01 	tst.w	lr, #1
 8026344:	5cd0      	ldrb	r0, [r2, r3]
 8026346:	bf0c      	ite	eq
 8026348:	f000 000f 	andeq.w	r0, r0, #15
 802634c:	1100      	asrne	r0, r0, #4
 802634e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026352:	b2c3      	uxtb	r3, r0
 8026354:	b2ba      	uxth	r2, r7
 8026356:	fa1f fc8c 	uxth.w	ip, ip
 802635a:	fb02 f00c 	mul.w	r0, r2, ip
 802635e:	0112      	lsls	r2, r2, #4
 8026360:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026364:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8026368:	1a12      	subs	r2, r2, r0
 802636a:	fa1f fc8c 	uxth.w	ip, ip
 802636e:	b292      	uxth	r2, r2
 8026370:	eba7 070c 	sub.w	r7, r7, ip
 8026374:	436a      	muls	r2, r5
 8026376:	b2bf      	uxth	r7, r7
 8026378:	fb06 2207 	mla	r2, r6, r7, r2
 802637c:	fb0c 2404 	mla	r4, ip, r4, r2
 8026380:	fb00 4303 	mla	r3, r0, r3, r4
 8026384:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026388:	b38b      	cbz	r3, 80263ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802638a:	4a21      	ldr	r2, [pc, #132]	@ (8026410 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802638c:	6814      	ldr	r4, [r2, #0]
 802638e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8026392:	b2e5      	uxtb	r5, r4
 8026394:	4353      	muls	r3, r2
 8026396:	1c5a      	adds	r2, r3, #1
 8026398:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802639c:	1212      	asrs	r2, r2, #8
 802639e:	b290      	uxth	r0, r2
 80263a0:	43d2      	mvns	r2, r2
 80263a2:	fb15 f500 	smulbb	r5, r5, r0
 80263a6:	b2d3      	uxtb	r3, r2
 80263a8:	780a      	ldrb	r2, [r1, #0]
 80263aa:	fb02 5203 	mla	r2, r2, r3, r5
 80263ae:	b292      	uxth	r2, r2
 80263b0:	1c55      	adds	r5, r2, #1
 80263b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80263b6:	784d      	ldrb	r5, [r1, #1]
 80263b8:	fb15 f503 	smulbb	r5, r5, r3
 80263bc:	1212      	asrs	r2, r2, #8
 80263be:	700a      	strb	r2, [r1, #0]
 80263c0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80263c4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80263c8:	fb02 5200 	mla	r2, r2, r0, r5
 80263cc:	b292      	uxth	r2, r2
 80263ce:	1c55      	adds	r5, r2, #1
 80263d0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80263d4:	1212      	asrs	r2, r2, #8
 80263d6:	704a      	strb	r2, [r1, #1]
 80263d8:	788a      	ldrb	r2, [r1, #2]
 80263da:	fb12 f303 	smulbb	r3, r2, r3
 80263de:	fb04 3300 	mla	r3, r4, r0, r3
 80263e2:	b29b      	uxth	r3, r3
 80263e4:	1c5a      	adds	r2, r3, #1
 80263e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80263ea:	121b      	asrs	r3, r3, #8
 80263ec:	708b      	strb	r3, [r1, #2]
 80263ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263f2:	2600      	movs	r6, #0
 80263f4:	e75a      	b.n	80262ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80263f6:	2500      	movs	r5, #0
 80263f8:	e776      	b.n	80262e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80263fa:	463d      	mov	r5, r7
 80263fc:	e774      	b.n	80262e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80263fe:	2400      	movs	r4, #0
 8026400:	e78f      	b.n	8026322 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8026402:	4663      	mov	r3, ip
 8026404:	4664      	mov	r4, ip
 8026406:	e7a5      	b.n	8026354 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026408:	2300      	movs	r3, #0
 802640a:	e7a3      	b.n	8026354 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802640c:	463b      	mov	r3, r7
 802640e:	e7a1      	b.n	8026354 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8026410:	24028530 	.word	0x24028530

08026414 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026418:	b097      	sub	sp, #92	@ 0x5c
 802641a:	9214      	str	r2, [sp, #80]	@ 0x50
 802641c:	9309      	str	r3, [sp, #36]	@ 0x24
 802641e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026420:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8026424:	9015      	str	r0, [sp, #84]	@ 0x54
 8026426:	910c      	str	r1, [sp, #48]	@ 0x30
 8026428:	6850      	ldr	r0, [r2, #4]
 802642a:	930e      	str	r3, [sp, #56]	@ 0x38
 802642c:	6812      	ldr	r2, [r2, #0]
 802642e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8026432:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8026436:	fb00 1303 	mla	r3, r0, r3, r1
 802643a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802643e:	eb02 0a03 	add.w	sl, r2, r3
 8026442:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026444:	689b      	ldr	r3, [r3, #8]
 8026446:	3301      	adds	r3, #1
 8026448:	f023 0301 	bic.w	r3, r3, #1
 802644c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802644e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026450:	681f      	ldr	r7, [r3, #0]
 8026452:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026454:	2b00      	cmp	r3, #0
 8026456:	dc03      	bgt.n	8026460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026458:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802645a:	2b00      	cmp	r3, #0
 802645c:	f340 8247 	ble.w	80268ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026460:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026462:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026466:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802646a:	1e48      	subs	r0, r1, #1
 802646c:	f102 3cff 	add.w	ip, r2, #4294967295
 8026470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026472:	2b00      	cmp	r3, #0
 8026474:	f340 80e5 	ble.w	8026642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026478:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802647c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026480:	d406      	bmi.n	8026490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026482:	4586      	cmp	lr, r0
 8026484:	da04      	bge.n	8026490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026486:	2b00      	cmp	r3, #0
 8026488:	db02      	blt.n	8026490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802648a:	4563      	cmp	r3, ip
 802648c:	f2c0 80da 	blt.w	8026644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026490:	f11e 0e01 	adds.w	lr, lr, #1
 8026494:	f100 80cb 	bmi.w	802662e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026498:	4571      	cmp	r1, lr
 802649a:	f2c0 80c8 	blt.w	802662e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802649e:	3301      	adds	r3, #1
 80264a0:	f100 80c5 	bmi.w	802662e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80264a4:	429a      	cmp	r2, r3
 80264a6:	f2c0 80c2 	blt.w	802662e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80264aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264ac:	46d0      	mov	r8, sl
 80264ae:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80264b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80264b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	f340 80e3 	ble.w	8026682 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80264bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80264be:	1430      	asrs	r0, r6, #16
 80264c0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80264c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80264c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80264cc:	142b      	asrs	r3, r5, #16
 80264ce:	f100 812e 	bmi.w	802672e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80264d2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80264d6:	455b      	cmp	r3, fp
 80264d8:	f280 8129 	bge.w	802672e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80264dc:	2800      	cmp	r0, #0
 80264de:	f2c0 8126 	blt.w	802672e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80264e2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80264e6:	4558      	cmp	r0, fp
 80264e8:	f280 8121 	bge.w	802672e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80264ec:	fb00 3309 	mla	r3, r0, r9, r3
 80264f0:	0858      	lsrs	r0, r3, #1
 80264f2:	07dc      	lsls	r4, r3, #31
 80264f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80264f8:	bf54      	ite	pl
 80264fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80264fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026502:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026506:	fa5f fc8c 	uxtb.w	ip, ip
 802650a:	2a00      	cmp	r2, #0
 802650c:	f000 80fe 	beq.w	802670c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026510:	1c58      	adds	r0, r3, #1
 8026512:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026516:	07c0      	lsls	r0, r0, #31
 8026518:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802651c:	bf54      	ite	pl
 802651e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026522:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026526:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802652a:	fa5f f08e 	uxtb.w	r0, lr
 802652e:	9010      	str	r0, [sp, #64]	@ 0x40
 8026530:	b1d9      	cbz	r1, 802656a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026532:	444b      	add	r3, r9
 8026534:	0858      	lsrs	r0, r3, #1
 8026536:	07dc      	lsls	r4, r3, #31
 8026538:	f103 0301 	add.w	r3, r3, #1
 802653c:	5c38      	ldrb	r0, [r7, r0]
 802653e:	bf54      	ite	pl
 8026540:	f000 000f 	andpl.w	r0, r0, #15
 8026544:	1100      	asrmi	r0, r0, #4
 8026546:	07dc      	lsls	r4, r3, #31
 8026548:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802654c:	b2c0      	uxtb	r0, r0
 802654e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026550:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026554:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026558:	bf54      	ite	pl
 802655a:	f00e 030f 	andpl.w	r3, lr, #15
 802655e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026562:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026566:	b2db      	uxtb	r3, r3
 8026568:	9311      	str	r3, [sp, #68]	@ 0x44
 802656a:	b292      	uxth	r2, r2
 802656c:	b289      	uxth	r1, r1
 802656e:	0113      	lsls	r3, r2, #4
 8026570:	fb02 f001 	mul.w	r0, r2, r1
 8026574:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026576:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802657a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802657e:	1a1b      	subs	r3, r3, r0
 8026580:	b289      	uxth	r1, r1
 8026582:	b29b      	uxth	r3, r3
 8026584:	ebae 0e01 	sub.w	lr, lr, r1
 8026588:	4353      	muls	r3, r2
 802658a:	fa1f fe8e 	uxth.w	lr, lr
 802658e:	fb0c 320e 	mla	r2, ip, lr, r3
 8026592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026594:	fb01 2203 	mla	r2, r1, r3, r2
 8026598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802659a:	fb00 2203 	mla	r2, r0, r3, r2
 802659e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80265a2:	2a00      	cmp	r2, #0
 80265a4:	d039      	beq.n	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80265a6:	4bc7      	ldr	r3, [pc, #796]	@ (80268c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80265a8:	6819      	ldr	r1, [r3, #0]
 80265aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80265ac:	fa5f fc81 	uxtb.w	ip, r1
 80265b0:	435a      	muls	r2, r3
 80265b2:	1c53      	adds	r3, r2, #1
 80265b4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80265b8:	1212      	asrs	r2, r2, #8
 80265ba:	b290      	uxth	r0, r2
 80265bc:	43d2      	mvns	r2, r2
 80265be:	fb1c fc00 	smulbb	ip, ip, r0
 80265c2:	b2d3      	uxtb	r3, r2
 80265c4:	f898 2000 	ldrb.w	r2, [r8]
 80265c8:	fb02 c203 	mla	r2, r2, r3, ip
 80265cc:	b292      	uxth	r2, r2
 80265ce:	f102 0c01 	add.w	ip, r2, #1
 80265d2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80265d6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80265da:	fb1c fc03 	smulbb	ip, ip, r3
 80265de:	1212      	asrs	r2, r2, #8
 80265e0:	f888 2000 	strb.w	r2, [r8]
 80265e4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80265e8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80265ec:	fb02 c200 	mla	r2, r2, r0, ip
 80265f0:	b292      	uxth	r2, r2
 80265f2:	f102 0c01 	add.w	ip, r2, #1
 80265f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80265fa:	1212      	asrs	r2, r2, #8
 80265fc:	f888 2001 	strb.w	r2, [r8, #1]
 8026600:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026604:	fb12 f303 	smulbb	r3, r2, r3
 8026608:	fb01 3300 	mla	r3, r1, r0, r3
 802660c:	b29b      	uxth	r3, r3
 802660e:	1c5a      	adds	r2, r3, #1
 8026610:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026614:	121b      	asrs	r3, r3, #8
 8026616:	f888 3002 	strb.w	r3, [r8, #2]
 802661a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802661c:	f108 0803 	add.w	r8, r8, #3
 8026620:	441d      	add	r5, r3
 8026622:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026624:	441e      	add	r6, r3
 8026626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026628:	3b01      	subs	r3, #1
 802662a:	930d      	str	r3, [sp, #52]	@ 0x34
 802662c:	e742      	b.n	80264b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802662e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026630:	f10a 0a03 	add.w	sl, sl, #3
 8026634:	441d      	add	r5, r3
 8026636:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026638:	441e      	add	r6, r3
 802663a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802663c:	3b01      	subs	r3, #1
 802663e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026640:	e716      	b.n	8026470 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8026642:	d024      	beq.n	802668e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026646:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026648:	3b01      	subs	r3, #1
 802664a:	fb00 5003 	mla	r0, r0, r3, r5
 802664e:	1400      	asrs	r0, r0, #16
 8026650:	f53f af2b 	bmi.w	80264aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026654:	3901      	subs	r1, #1
 8026656:	4288      	cmp	r0, r1
 8026658:	f6bf af27 	bge.w	80264aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802665c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802665e:	fb01 6303 	mla	r3, r1, r3, r6
 8026662:	141b      	asrs	r3, r3, #16
 8026664:	f53f af21 	bmi.w	80264aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026668:	3a01      	subs	r2, #1
 802666a:	4293      	cmp	r3, r2
 802666c:	f6bf af1d 	bge.w	80264aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026670:	f10a 0e03 	add.w	lr, sl, #3
 8026674:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8026678:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802667c:	f1b8 0f00 	cmp.w	r8, #0
 8026680:	dc76      	bgt.n	8026770 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8026682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026684:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026688:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802668c:	44a2      	add	sl, r4
 802668e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026690:	2b00      	cmp	r3, #0
 8026692:	f340 812c 	ble.w	80268ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802669a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802669c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266a4:	eef0 6a62 	vmov.f32	s13, s5
 80266a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266b4:	ee16 5a90 	vmov	r5, s13
 80266b8:	eef0 6a43 	vmov.f32	s13, s6
 80266bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266c0:	ee16 6a90 	vmov	r6, s13
 80266c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80266c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80266cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80266d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80266d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80266d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80266dc:	ee12 2a90 	vmov	r2, s5
 80266e0:	eef0 2a47 	vmov.f32	s5, s14
 80266e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80266e8:	ee13 2a10 	vmov	r2, s6
 80266ec:	9323      	str	r3, [sp, #140]	@ 0x8c
 80266ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80266f0:	eeb0 3a67 	vmov.f32	s6, s15
 80266f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80266f8:	9324      	str	r3, [sp, #144]	@ 0x90
 80266fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80266fe:	3b01      	subs	r3, #1
 8026700:	930c      	str	r3, [sp, #48]	@ 0x30
 8026702:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026704:	bf08      	it	eq
 8026706:	4613      	moveq	r3, r2
 8026708:	9309      	str	r3, [sp, #36]	@ 0x24
 802670a:	e6a2      	b.n	8026452 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802670c:	2900      	cmp	r1, #0
 802670e:	f43f af2c 	beq.w	802656a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026712:	eb09 0003 	add.w	r0, r9, r3
 8026716:	0843      	lsrs	r3, r0, #1
 8026718:	07c0      	lsls	r0, r0, #31
 802671a:	5cfb      	ldrb	r3, [r7, r3]
 802671c:	bf54      	ite	pl
 802671e:	f003 030f 	andpl.w	r3, r3, #15
 8026722:	111b      	asrmi	r3, r3, #4
 8026724:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026728:	b2db      	uxtb	r3, r3
 802672a:	930a      	str	r3, [sp, #40]	@ 0x28
 802672c:	e71d      	b.n	802656a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802672e:	f113 0b01 	adds.w	fp, r3, #1
 8026732:	f53f af72 	bmi.w	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026736:	45dc      	cmp	ip, fp
 8026738:	f6ff af6f 	blt.w	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802673c:	f110 0b01 	adds.w	fp, r0, #1
 8026740:	f53f af6b 	bmi.w	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026744:	45de      	cmp	lr, fp
 8026746:	f6ff af68 	blt.w	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802674a:	9302      	str	r3, [sp, #8]
 802674c:	fa0f f38e 	sxth.w	r3, lr
 8026750:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026752:	9301      	str	r3, [sp, #4]
 8026754:	fa0f f38c 	sxth.w	r3, ip
 8026758:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802675c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026760:	9300      	str	r3, [sp, #0]
 8026762:	463a      	mov	r2, r7
 8026764:	464b      	mov	r3, r9
 8026766:	4641      	mov	r1, r8
 8026768:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802676a:	f7ff fd79 	bl	8026260 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802676e:	e754      	b.n	802661a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026770:	142a      	asrs	r2, r5, #16
 8026772:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026776:	1433      	asrs	r3, r6, #16
 8026778:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802677c:	fb09 2303 	mla	r3, r9, r3, r2
 8026780:	085a      	lsrs	r2, r3, #1
 8026782:	07dc      	lsls	r4, r3, #31
 8026784:	5cba      	ldrb	r2, [r7, r2]
 8026786:	bf54      	ite	pl
 8026788:	f002 020f 	andpl.w	r2, r2, #15
 802678c:	1112      	asrmi	r2, r2, #4
 802678e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026792:	b2d2      	uxtb	r2, r2
 8026794:	2900      	cmp	r1, #0
 8026796:	f000 8097 	beq.w	80268c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802679a:	f103 0b01 	add.w	fp, r3, #1
 802679e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80267a2:	f01b 0f01 	tst.w	fp, #1
 80267a6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80267aa:	bf0c      	ite	eq
 80267ac:	f00c 0c0f 	andeq.w	ip, ip, #15
 80267b0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80267b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80267b8:	fa5f f48c 	uxtb.w	r4, ip
 80267bc:	9412      	str	r4, [sp, #72]	@ 0x48
 80267be:	b300      	cbz	r0, 8026802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80267c0:	444b      	add	r3, r9
 80267c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80267c6:	07dc      	lsls	r4, r3, #31
 80267c8:	f103 0301 	add.w	r3, r3, #1
 80267cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80267d0:	bf54      	ite	pl
 80267d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80267d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80267da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80267de:	fa5f f48c 	uxtb.w	r4, ip
 80267e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80267e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80267e8:	07dc      	lsls	r4, r3, #31
 80267ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80267ee:	bf54      	ite	pl
 80267f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80267f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80267f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80267fc:	fa5f f38c 	uxtb.w	r3, ip
 8026800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026802:	b289      	uxth	r1, r1
 8026804:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026806:	b280      	uxth	r0, r0
 8026808:	fb01 f300 	mul.w	r3, r1, r0
 802680c:	0109      	lsls	r1, r1, #4
 802680e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026812:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8026816:	1ac9      	subs	r1, r1, r3
 8026818:	b280      	uxth	r0, r0
 802681a:	b289      	uxth	r1, r1
 802681c:	ebac 0c00 	sub.w	ip, ip, r0
 8026820:	4361      	muls	r1, r4
 8026822:	fa1f fc8c 	uxth.w	ip, ip
 8026826:	fb02 120c 	mla	r2, r2, ip, r1
 802682a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802682c:	fb00 2001 	mla	r0, r0, r1, r2
 8026830:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026832:	fb03 0302 	mla	r3, r3, r2, r0
 8026836:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802683a:	2b00      	cmp	r3, #0
 802683c:	d039      	beq.n	80268b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802683e:	4a21      	ldr	r2, [pc, #132]	@ (80268c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026840:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8026844:	6810      	ldr	r0, [r2, #0]
 8026846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026848:	fa5f fc80 	uxtb.w	ip, r0
 802684c:	4353      	muls	r3, r2
 802684e:	1c5a      	adds	r2, r3, #1
 8026850:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026854:	121b      	asrs	r3, r3, #8
 8026856:	b29a      	uxth	r2, r3
 8026858:	43db      	mvns	r3, r3
 802685a:	fb1c fc02 	smulbb	ip, ip, r2
 802685e:	b2db      	uxtb	r3, r3
 8026860:	fb01 c103 	mla	r1, r1, r3, ip
 8026864:	b289      	uxth	r1, r1
 8026866:	f101 0c01 	add.w	ip, r1, #1
 802686a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802686e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026872:	fb1c fc03 	smulbb	ip, ip, r3
 8026876:	1209      	asrs	r1, r1, #8
 8026878:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802687c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026880:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8026884:	fb01 c102 	mla	r1, r1, r2, ip
 8026888:	b289      	uxth	r1, r1
 802688a:	f101 0c01 	add.w	ip, r1, #1
 802688e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026892:	1209      	asrs	r1, r1, #8
 8026894:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026898:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802689c:	fb11 f303 	smulbb	r3, r1, r3
 80268a0:	fb00 3002 	mla	r0, r0, r2, r3
 80268a4:	b280      	uxth	r0, r0
 80268a6:	1c42      	adds	r2, r0, #1
 80268a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80268ac:	1200      	asrs	r0, r0, #8
 80268ae:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80268b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80268b4:	f10e 0e03 	add.w	lr, lr, #3
 80268b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80268bc:	441d      	add	r5, r3
 80268be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80268c0:	441e      	add	r6, r3
 80268c2:	e6db      	b.n	802667c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80268c4:	24028530 	.word	0x24028530
 80268c8:	2800      	cmp	r0, #0
 80268ca:	d09a      	beq.n	8026802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80268cc:	444b      	add	r3, r9
 80268ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80268d2:	07db      	lsls	r3, r3, #31
 80268d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80268d8:	bf54      	ite	pl
 80268da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80268de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80268e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80268e6:	fa5f f38c 	uxtb.w	r3, ip
 80268ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80268ec:	e789      	b.n	8026802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80268ee:	b017      	add	sp, #92	@ 0x5c
 80268f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080268f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80268f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268f8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80268fc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026900:	2d00      	cmp	r5, #0
 8026902:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8026906:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802690a:	fb04 5e03 	mla	lr, r4, r3, r5
 802690e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8026912:	f2c0 80b1 	blt.w	8026a78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026916:	45a9      	cmp	r9, r5
 8026918:	f340 80ae 	ble.w	8026a78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802691c:	2c00      	cmp	r4, #0
 802691e:	f2c0 80ab 	blt.w	8026a78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026922:	45a0      	cmp	r8, r4
 8026924:	f340 80a8 	ble.w	8026a78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026928:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802692c:	f01e 0f01 	tst.w	lr, #1
 8026930:	5d97      	ldrb	r7, [r2, r6]
 8026932:	bf0c      	ite	eq
 8026934:	f007 070f 	andeq.w	r7, r7, #15
 8026938:	113f      	asrne	r7, r7, #4
 802693a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802693e:	b2ff      	uxtb	r7, r7
 8026940:	f115 0a01 	adds.w	sl, r5, #1
 8026944:	f100 809a 	bmi.w	8026a7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026948:	45d1      	cmp	r9, sl
 802694a:	f340 8097 	ble.w	8026a7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802694e:	2c00      	cmp	r4, #0
 8026950:	f2c0 8094 	blt.w	8026a7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026954:	45a0      	cmp	r8, r4
 8026956:	f340 8091 	ble.w	8026a7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802695a:	2800      	cmp	r0, #0
 802695c:	f000 8090 	beq.w	8026a80 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8026960:	f10e 0b01 	add.w	fp, lr, #1
 8026964:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8026968:	f01b 0f01 	tst.w	fp, #1
 802696c:	5d96      	ldrb	r6, [r2, r6]
 802696e:	bf0c      	ite	eq
 8026970:	f006 060f 	andeq.w	r6, r6, #15
 8026974:	1136      	asrne	r6, r6, #4
 8026976:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802697a:	b2f6      	uxtb	r6, r6
 802697c:	f1bc 0f00 	cmp.w	ip, #0
 8026980:	f000 8082 	beq.w	8026a88 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8026984:	2d00      	cmp	r5, #0
 8026986:	f104 0401 	add.w	r4, r4, #1
 802698a:	db7b      	blt.n	8026a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802698c:	45a9      	cmp	r9, r5
 802698e:	dd79      	ble.n	8026a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026990:	2c00      	cmp	r4, #0
 8026992:	db77      	blt.n	8026a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026994:	45a0      	cmp	r8, r4
 8026996:	dd75      	ble.n	8026a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026998:	eb03 0b0e 	add.w	fp, r3, lr
 802699c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80269a0:	f01b 0f01 	tst.w	fp, #1
 80269a4:	5d55      	ldrb	r5, [r2, r5]
 80269a6:	bf0c      	ite	eq
 80269a8:	f005 050f 	andeq.w	r5, r5, #15
 80269ac:	112d      	asrne	r5, r5, #4
 80269ae:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80269b2:	b2ed      	uxtb	r5, r5
 80269b4:	f1ba 0f00 	cmp.w	sl, #0
 80269b8:	db69      	blt.n	8026a8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80269ba:	45d1      	cmp	r9, sl
 80269bc:	dd67      	ble.n	8026a8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80269be:	2c00      	cmp	r4, #0
 80269c0:	db65      	blt.n	8026a8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80269c2:	45a0      	cmp	r8, r4
 80269c4:	dd63      	ble.n	8026a8e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80269c6:	2800      	cmp	r0, #0
 80269c8:	d063      	beq.n	8026a92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80269ca:	3301      	adds	r3, #1
 80269cc:	449e      	add	lr, r3
 80269ce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80269d2:	f01e 0f01 	tst.w	lr, #1
 80269d6:	5cd4      	ldrb	r4, [r2, r3]
 80269d8:	bf0c      	ite	eq
 80269da:	f004 040f 	andeq.w	r4, r4, #15
 80269de:	1124      	asrne	r4, r4, #4
 80269e0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80269e4:	b2e3      	uxtb	r3, r4
 80269e6:	b282      	uxth	r2, r0
 80269e8:	fa1f fc8c 	uxth.w	ip, ip
 80269ec:	fb02 f40c 	mul.w	r4, r2, ip
 80269f0:	0112      	lsls	r2, r2, #4
 80269f2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80269f6:	fa1f f08c 	uxth.w	r0, ip
 80269fa:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80269fe:	1b12      	subs	r2, r2, r4
 8026a00:	ebac 0c00 	sub.w	ip, ip, r0
 8026a04:	b292      	uxth	r2, r2
 8026a06:	fa1f fc8c 	uxth.w	ip, ip
 8026a0a:	4372      	muls	r2, r6
 8026a0c:	fb07 220c 	mla	r2, r7, ip, r2
 8026a10:	fb00 2005 	mla	r0, r0, r5, r2
 8026a14:	fb04 0303 	mla	r3, r4, r3, r0
 8026a18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026a1c:	b353      	cbz	r3, 8026a74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8026a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8026a98 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8026a20:	7808      	ldrb	r0, [r1, #0]
 8026a22:	6814      	ldr	r4, [r2, #0]
 8026a24:	b29a      	uxth	r2, r3
 8026a26:	43db      	mvns	r3, r3
 8026a28:	b2e5      	uxtb	r5, r4
 8026a2a:	b2db      	uxtb	r3, r3
 8026a2c:	fb15 f502 	smulbb	r5, r5, r2
 8026a30:	fb00 5003 	mla	r0, r0, r3, r5
 8026a34:	b280      	uxth	r0, r0
 8026a36:	1c45      	adds	r5, r0, #1
 8026a38:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026a3c:	784d      	ldrb	r5, [r1, #1]
 8026a3e:	fb15 f503 	smulbb	r5, r5, r3
 8026a42:	1200      	asrs	r0, r0, #8
 8026a44:	7008      	strb	r0, [r1, #0]
 8026a46:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8026a4a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026a4e:	fb00 5002 	mla	r0, r0, r2, r5
 8026a52:	b280      	uxth	r0, r0
 8026a54:	1c45      	adds	r5, r0, #1
 8026a56:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026a5a:	1200      	asrs	r0, r0, #8
 8026a5c:	7048      	strb	r0, [r1, #1]
 8026a5e:	7888      	ldrb	r0, [r1, #2]
 8026a60:	fb10 f303 	smulbb	r3, r0, r3
 8026a64:	fb04 3202 	mla	r2, r4, r2, r3
 8026a68:	b292      	uxth	r2, r2
 8026a6a:	1c53      	adds	r3, r2, #1
 8026a6c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026a70:	1212      	asrs	r2, r2, #8
 8026a72:	708a      	strb	r2, [r1, #2]
 8026a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a78:	2700      	movs	r7, #0
 8026a7a:	e761      	b.n	8026940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8026a7c:	2600      	movs	r6, #0
 8026a7e:	e77d      	b.n	802697c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8026a80:	4606      	mov	r6, r0
 8026a82:	e77b      	b.n	802697c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8026a84:	2500      	movs	r5, #0
 8026a86:	e795      	b.n	80269b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8026a88:	4663      	mov	r3, ip
 8026a8a:	4665      	mov	r5, ip
 8026a8c:	e7ab      	b.n	80269e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026a8e:	2300      	movs	r3, #0
 8026a90:	e7a9      	b.n	80269e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026a92:	4603      	mov	r3, r0
 8026a94:	e7a7      	b.n	80269e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026a96:	bf00      	nop
 8026a98:	24028530 	.word	0x24028530

08026a9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026aa0:	b093      	sub	sp, #76	@ 0x4c
 8026aa2:	461c      	mov	r4, r3
 8026aa4:	920c      	str	r2, [sp, #48]	@ 0x30
 8026aa6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8026aa8:	9011      	str	r0, [sp, #68]	@ 0x44
 8026aaa:	9107      	str	r1, [sp, #28]
 8026aac:	6850      	ldr	r0, [r2, #4]
 8026aae:	6812      	ldr	r2, [r2, #0]
 8026ab0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8026ab4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8026ab8:	fb00 1303 	mla	r3, r0, r3, r1
 8026abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ac0:	eb02 0b03 	add.w	fp, r2, r3
 8026ac4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026ac6:	689b      	ldr	r3, [r3, #8]
 8026ac8:	3301      	adds	r3, #1
 8026aca:	f023 0301 	bic.w	r3, r3, #1
 8026ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8026ad0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026ad2:	f8d3 8000 	ldr.w	r8, [r3]
 8026ad6:	9b07      	ldr	r3, [sp, #28]
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	dc03      	bgt.n	8026ae4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ade:	2b00      	cmp	r3, #0
 8026ae0:	f340 822b 	ble.w	8026f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026ae4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026ae6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026aea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026aee:	1e48      	subs	r0, r1, #1
 8026af0:	1e57      	subs	r7, r2, #1
 8026af2:	2c00      	cmp	r4, #0
 8026af4:	f340 80d7 	ble.w	8026ca6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026af8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026afc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b00:	d406      	bmi.n	8026b10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026b02:	4584      	cmp	ip, r0
 8026b04:	da04      	bge.n	8026b10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	db02      	blt.n	8026b10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026b0a:	42bb      	cmp	r3, r7
 8026b0c:	f2c0 80cc 	blt.w	8026ca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026b10:	f11c 0c01 	adds.w	ip, ip, #1
 8026b14:	f100 80bf 	bmi.w	8026c96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026b18:	4561      	cmp	r1, ip
 8026b1a:	f2c0 80bc 	blt.w	8026c96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026b1e:	3301      	adds	r3, #1
 8026b20:	f100 80b9 	bmi.w	8026c96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026b24:	429a      	cmp	r2, r3
 8026b26:	f2c0 80b6 	blt.w	8026c96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026b2a:	46a2      	mov	sl, r4
 8026b2c:	465f      	mov	r7, fp
 8026b2e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026b32:	f1ba 0f00 	cmp.w	sl, #0
 8026b36:	f340 80d4 	ble.w	8026ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026b3a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8026b3e:	1430      	asrs	r0, r6, #16
 8026b40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026b44:	9308      	str	r3, [sp, #32]
 8026b46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026b48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026b4c:	142b      	asrs	r3, r5, #16
 8026b4e:	f100 8124 	bmi.w	8026d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026b52:	f10c 32ff 	add.w	r2, ip, #4294967295
 8026b56:	4293      	cmp	r3, r2
 8026b58:	f280 811f 	bge.w	8026d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026b5c:	2800      	cmp	r0, #0
 8026b5e:	f2c0 811c 	blt.w	8026d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026b62:	f10e 32ff 	add.w	r2, lr, #4294967295
 8026b66:	4290      	cmp	r0, r2
 8026b68:	f280 8117 	bge.w	8026d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026b6c:	fb00 3309 	mla	r3, r0, r9, r3
 8026b70:	0858      	lsrs	r0, r3, #1
 8026b72:	07da      	lsls	r2, r3, #31
 8026b74:	9a08      	ldr	r2, [sp, #32]
 8026b76:	f818 c000 	ldrb.w	ip, [r8, r0]
 8026b7a:	bf54      	ite	pl
 8026b7c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026b80:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026b84:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026b88:	fa5f fc8c 	uxtb.w	ip, ip
 8026b8c:	2a00      	cmp	r2, #0
 8026b8e:	f000 80ed 	beq.w	8026d6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8026b92:	1c58      	adds	r0, r3, #1
 8026b94:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026b98:	07c0      	lsls	r0, r0, #31
 8026b9a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8026b9e:	bf54      	ite	pl
 8026ba0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026ba4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026ba8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026bac:	fa5f fe8e 	uxtb.w	lr, lr
 8026bb0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8026bb4:	b1c9      	cbz	r1, 8026bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026bb6:	444b      	add	r3, r9
 8026bb8:	0858      	lsrs	r0, r3, #1
 8026bba:	07da      	lsls	r2, r3, #31
 8026bbc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026bc0:	bf54      	ite	pl
 8026bc2:	f000 000f 	andpl.w	r0, r0, #15
 8026bc6:	1100      	asrmi	r0, r0, #4
 8026bc8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026bcc:	b2c0      	uxtb	r0, r0
 8026bce:	900a      	str	r0, [sp, #40]	@ 0x28
 8026bd0:	1c58      	adds	r0, r3, #1
 8026bd2:	0843      	lsrs	r3, r0, #1
 8026bd4:	07c2      	lsls	r2, r0, #31
 8026bd6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8026bda:	bf54      	ite	pl
 8026bdc:	f003 030f 	andpl.w	r3, r3, #15
 8026be0:	111b      	asrmi	r3, r3, #4
 8026be2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026be6:	b2db      	uxtb	r3, r3
 8026be8:	930e      	str	r3, [sp, #56]	@ 0x38
 8026bea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8026bee:	b289      	uxth	r1, r1
 8026bf0:	fb02 f301 	mul.w	r3, r2, r1
 8026bf4:	0112      	lsls	r2, r2, #4
 8026bf6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026bfa:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8026bfe:	1ad2      	subs	r2, r2, r3
 8026c00:	b289      	uxth	r1, r1
 8026c02:	b292      	uxth	r2, r2
 8026c04:	1a40      	subs	r0, r0, r1
 8026c06:	fa1f fe80 	uxth.w	lr, r0
 8026c0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026c0c:	4342      	muls	r2, r0
 8026c0e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8026c12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c14:	fb01 c102 	mla	r1, r1, r2, ip
 8026c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026c1a:	fb03 1302 	mla	r3, r3, r2, r1
 8026c1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026c22:	b383      	cbz	r3, 8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026c24:	4ac6      	ldr	r2, [pc, #792]	@ (8026f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8026c26:	2bff      	cmp	r3, #255	@ 0xff
 8026c28:	6812      	ldr	r2, [r2, #0]
 8026c2a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8026c2e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8026c32:	b2d2      	uxtb	r2, r2
 8026c34:	f000 80ac 	beq.w	8026d90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026c38:	b299      	uxth	r1, r3
 8026c3a:	43db      	mvns	r3, r3
 8026c3c:	f897 c000 	ldrb.w	ip, [r7]
 8026c40:	fb12 f201 	smulbb	r2, r2, r1
 8026c44:	b2db      	uxtb	r3, r3
 8026c46:	fb10 f001 	smulbb	r0, r0, r1
 8026c4a:	fb0c 2203 	mla	r2, ip, r3, r2
 8026c4e:	fb1e f101 	smulbb	r1, lr, r1
 8026c52:	b292      	uxth	r2, r2
 8026c54:	f102 0c01 	add.w	ip, r2, #1
 8026c58:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026c5c:	1212      	asrs	r2, r2, #8
 8026c5e:	703a      	strb	r2, [r7, #0]
 8026c60:	787a      	ldrb	r2, [r7, #1]
 8026c62:	fb02 0003 	mla	r0, r2, r3, r0
 8026c66:	b280      	uxth	r0, r0
 8026c68:	1c42      	adds	r2, r0, #1
 8026c6a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026c6e:	78ba      	ldrb	r2, [r7, #2]
 8026c70:	fb02 1303 	mla	r3, r2, r3, r1
 8026c74:	1200      	asrs	r0, r0, #8
 8026c76:	b29b      	uxth	r3, r3
 8026c78:	7078      	strb	r0, [r7, #1]
 8026c7a:	f103 0e01 	add.w	lr, r3, #1
 8026c7e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026c82:	121b      	asrs	r3, r3, #8
 8026c84:	70bb      	strb	r3, [r7, #2]
 8026c86:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026c88:	3703      	adds	r7, #3
 8026c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026c8e:	441d      	add	r5, r3
 8026c90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026c92:	441e      	add	r6, r3
 8026c94:	e74d      	b.n	8026b32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026c96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026c98:	3c01      	subs	r4, #1
 8026c9a:	f10b 0b03 	add.w	fp, fp, #3
 8026c9e:	441d      	add	r5, r3
 8026ca0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026ca2:	441e      	add	r6, r3
 8026ca4:	e725      	b.n	8026af2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026ca6:	d021      	beq.n	8026cec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026ca8:	1e63      	subs	r3, r4, #1
 8026caa:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026cac:	fb00 5003 	mla	r0, r0, r3, r5
 8026cb0:	1400      	asrs	r0, r0, #16
 8026cb2:	f53f af3a 	bmi.w	8026b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026cb6:	3901      	subs	r1, #1
 8026cb8:	4288      	cmp	r0, r1
 8026cba:	f6bf af36 	bge.w	8026b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026cbe:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8026cc0:	fb01 6303 	mla	r3, r1, r3, r6
 8026cc4:	141b      	asrs	r3, r3, #16
 8026cc6:	f53f af30 	bmi.w	8026b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026cca:	3a01      	subs	r2, #1
 8026ccc:	4293      	cmp	r3, r2
 8026cce:	f6bf af2c 	bge.w	8026b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026cd2:	f10b 0c03 	add.w	ip, fp, #3
 8026cd6:	46a6      	mov	lr, r4
 8026cd8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026cdc:	f1be 0f00 	cmp.w	lr, #0
 8026ce0:	dc79      	bgt.n	8026dd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026ce2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026ce6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026cea:	44a3      	add	fp, r4
 8026cec:	9b07      	ldr	r3, [sp, #28]
 8026cee:	2b00      	cmp	r3, #0
 8026cf0:	f340 8123 	ble.w	8026f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026cf8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026cfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026cfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d02:	eef0 6a62 	vmov.f32	s13, s5
 8026d06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d12:	ee16 5a90 	vmov	r5, s13
 8026d16:	eef0 6a43 	vmov.f32	s13, s6
 8026d1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d1e:	ee16 6a90 	vmov	r6, s13
 8026d22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026d32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026d36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026d3a:	ee12 2a90 	vmov	r2, s5
 8026d3e:	eef0 2a47 	vmov.f32	s5, s14
 8026d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d46:	ee13 2a10 	vmov	r2, s6
 8026d4a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026d4c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d4e:	eeb0 3a67 	vmov.f32	s6, s15
 8026d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d56:	9320      	str	r3, [sp, #128]	@ 0x80
 8026d58:	9b07      	ldr	r3, [sp, #28]
 8026d5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026d5c:	3b01      	subs	r3, #1
 8026d5e:	9307      	str	r3, [sp, #28]
 8026d60:	bf08      	it	eq
 8026d62:	4614      	moveq	r4, r2
 8026d64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d66:	bf18      	it	ne
 8026d68:	461c      	movne	r4, r3
 8026d6a:	e6b4      	b.n	8026ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026d6c:	2900      	cmp	r1, #0
 8026d6e:	f43f af3c 	beq.w	8026bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026d72:	eb09 0003 	add.w	r0, r9, r3
 8026d76:	0843      	lsrs	r3, r0, #1
 8026d78:	07c0      	lsls	r0, r0, #31
 8026d7a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8026d7e:	bf54      	ite	pl
 8026d80:	f003 030f 	andpl.w	r3, r3, #15
 8026d84:	111b      	asrmi	r3, r3, #4
 8026d86:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026d8a:	b2db      	uxtb	r3, r3
 8026d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d8e:	e72c      	b.n	8026bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026d90:	703a      	strb	r2, [r7, #0]
 8026d92:	7078      	strb	r0, [r7, #1]
 8026d94:	f887 e002 	strb.w	lr, [r7, #2]
 8026d98:	e775      	b.n	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026d9a:	1c5a      	adds	r2, r3, #1
 8026d9c:	f53f af73 	bmi.w	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026da0:	4594      	cmp	ip, r2
 8026da2:	f6ff af70 	blt.w	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026da6:	1c42      	adds	r2, r0, #1
 8026da8:	f53f af6d 	bmi.w	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026dac:	4596      	cmp	lr, r2
 8026dae:	f6ff af6a 	blt.w	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026db2:	9302      	str	r3, [sp, #8]
 8026db4:	fa0f f38e 	sxth.w	r3, lr
 8026db8:	9a08      	ldr	r2, [sp, #32]
 8026dba:	9301      	str	r3, [sp, #4]
 8026dbc:	fa0f f38c 	sxth.w	r3, ip
 8026dc0:	9105      	str	r1, [sp, #20]
 8026dc2:	4639      	mov	r1, r7
 8026dc4:	9300      	str	r3, [sp, #0]
 8026dc6:	464b      	mov	r3, r9
 8026dc8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026dcc:	4642      	mov	r2, r8
 8026dce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026dd0:	f7ff fd90 	bl	80268f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026dd4:	e757      	b.n	8026c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026dd6:	142a      	asrs	r2, r5, #16
 8026dd8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ddc:	1433      	asrs	r3, r6, #16
 8026dde:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8026de2:	fb09 2303 	mla	r3, r9, r3, r2
 8026de6:	085a      	lsrs	r2, r3, #1
 8026de8:	07d9      	lsls	r1, r3, #31
 8026dea:	f818 2002 	ldrb.w	r2, [r8, r2]
 8026dee:	bf54      	ite	pl
 8026df0:	f002 020f 	andpl.w	r2, r2, #15
 8026df4:	1112      	asrmi	r2, r2, #4
 8026df6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026dfa:	b2d2      	uxtb	r2, r2
 8026dfc:	2800      	cmp	r0, #0
 8026dfe:	f000 8085 	beq.w	8026f0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8026e02:	f103 0a01 	add.w	sl, r3, #1
 8026e06:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8026e0a:	f01a 0f01 	tst.w	sl, #1
 8026e0e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026e12:	bf0c      	ite	eq
 8026e14:	f001 010f 	andeq.w	r1, r1, #15
 8026e18:	1109      	asrne	r1, r1, #4
 8026e1a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026e1e:	b2c9      	uxtb	r1, r1
 8026e20:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026e22:	b1df      	cbz	r7, 8026e5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026e24:	444b      	add	r3, r9
 8026e26:	0859      	lsrs	r1, r3, #1
 8026e28:	f013 0f01 	tst.w	r3, #1
 8026e2c:	f103 0301 	add.w	r3, r3, #1
 8026e30:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026e34:	bf0c      	ite	eq
 8026e36:	f001 010f 	andeq.w	r1, r1, #15
 8026e3a:	1109      	asrne	r1, r1, #4
 8026e3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026e40:	b2c9      	uxtb	r1, r1
 8026e42:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e44:	0859      	lsrs	r1, r3, #1
 8026e46:	07db      	lsls	r3, r3, #31
 8026e48:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026e4c:	bf54      	ite	pl
 8026e4e:	f001 010f 	andpl.w	r1, r1, #15
 8026e52:	1109      	asrmi	r1, r1, #4
 8026e54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026e58:	b2c9      	uxtb	r1, r1
 8026e5a:	9110      	str	r1, [sp, #64]	@ 0x40
 8026e5c:	b280      	uxth	r0, r0
 8026e5e:	b2bf      	uxth	r7, r7
 8026e60:	fb00 f307 	mul.w	r3, r0, r7
 8026e64:	0100      	lsls	r0, r0, #4
 8026e66:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8026e6a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8026e6e:	1ac0      	subs	r0, r0, r3
 8026e70:	b2bf      	uxth	r7, r7
 8026e72:	b280      	uxth	r0, r0
 8026e74:	1bc9      	subs	r1, r1, r7
 8026e76:	fa1f fa81 	uxth.w	sl, r1
 8026e7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8026e7c:	4348      	muls	r0, r1
 8026e7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026e80:	fb02 020a 	mla	r2, r2, sl, r0
 8026e84:	fb07 2701 	mla	r7, r7, r1, r2
 8026e88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026e8a:	fb03 7302 	mla	r3, r3, r2, r7
 8026e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e92:	b393      	cbz	r3, 8026efa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026e94:	4a2a      	ldr	r2, [pc, #168]	@ (8026f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8026e96:	2bff      	cmp	r3, #255	@ 0xff
 8026e98:	6811      	ldr	r1, [r2, #0]
 8026e9a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8026e9e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8026ea2:	b2c9      	uxtb	r1, r1
 8026ea4:	d042      	beq.n	8026f2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026ea6:	b298      	uxth	r0, r3
 8026ea8:	43db      	mvns	r3, r3
 8026eaa:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8026eae:	fb11 f100 	smulbb	r1, r1, r0
 8026eb2:	b2db      	uxtb	r3, r3
 8026eb4:	fb17 f700 	smulbb	r7, r7, r0
 8026eb8:	fb02 1103 	mla	r1, r2, r3, r1
 8026ebc:	fb1a f000 	smulbb	r0, sl, r0
 8026ec0:	b289      	uxth	r1, r1
 8026ec2:	1c4a      	adds	r2, r1, #1
 8026ec4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026ec8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8026ecc:	fb02 7703 	mla	r7, r2, r3, r7
 8026ed0:	1209      	asrs	r1, r1, #8
 8026ed2:	b2bf      	uxth	r7, r7
 8026ed4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026ed8:	1c7a      	adds	r2, r7, #1
 8026eda:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8026ede:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8026ee2:	fb02 0303 	mla	r3, r2, r3, r0
 8026ee6:	123f      	asrs	r7, r7, #8
 8026ee8:	b29b      	uxth	r3, r3
 8026eea:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026eee:	1c5a      	adds	r2, r3, #1
 8026ef0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ef4:	121b      	asrs	r3, r3, #8
 8026ef6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8026efa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026efc:	f10c 0c03 	add.w	ip, ip, #3
 8026f00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026f04:	441d      	add	r5, r3
 8026f06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026f08:	441e      	add	r6, r3
 8026f0a:	e6e7      	b.n	8026cdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026f0c:	2f00      	cmp	r7, #0
 8026f0e:	d0a5      	beq.n	8026e5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026f10:	444b      	add	r3, r9
 8026f12:	0859      	lsrs	r1, r3, #1
 8026f14:	07db      	lsls	r3, r3, #31
 8026f16:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026f1a:	bf54      	ite	pl
 8026f1c:	f001 010f 	andpl.w	r1, r1, #15
 8026f20:	1109      	asrmi	r1, r1, #4
 8026f22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026f26:	b2c9      	uxtb	r1, r1
 8026f28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f2a:	e797      	b.n	8026e5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026f2c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026f30:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026f34:	f80c ac01 	strb.w	sl, [ip, #-1]
 8026f38:	e7df      	b.n	8026efa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026f3a:	b013      	add	sp, #76	@ 0x4c
 8026f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f40:	24028530 	.word	0x24028530

08026f44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8026f44:	b530      	push	{r4, r5, lr}
 8026f46:	b29d      	uxth	r5, r3
 8026f48:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8026f4c:	780c      	ldrb	r4, [r1, #0]
 8026f4e:	b298      	uxth	r0, r3
 8026f50:	7813      	ldrb	r3, [r2, #0]
 8026f52:	fb14 f405 	smulbb	r4, r4, r5
 8026f56:	fb13 f300 	smulbb	r3, r3, r0
 8026f5a:	441c      	add	r4, r3
 8026f5c:	b2a4      	uxth	r4, r4
 8026f5e:	1c63      	adds	r3, r4, #1
 8026f60:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026f64:	7853      	ldrb	r3, [r2, #1]
 8026f66:	fb13 f300 	smulbb	r3, r3, r0
 8026f6a:	1224      	asrs	r4, r4, #8
 8026f6c:	7014      	strb	r4, [r2, #0]
 8026f6e:	784c      	ldrb	r4, [r1, #1]
 8026f70:	fb14 f405 	smulbb	r4, r4, r5
 8026f74:	441c      	add	r4, r3
 8026f76:	b2a4      	uxth	r4, r4
 8026f78:	1c63      	adds	r3, r4, #1
 8026f7a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026f7e:	1224      	asrs	r4, r4, #8
 8026f80:	7054      	strb	r4, [r2, #1]
 8026f82:	788b      	ldrb	r3, [r1, #2]
 8026f84:	7891      	ldrb	r1, [r2, #2]
 8026f86:	fb13 f305 	smulbb	r3, r3, r5
 8026f8a:	fb11 f000 	smulbb	r0, r1, r0
 8026f8e:	4403      	add	r3, r0
 8026f90:	b29b      	uxth	r3, r3
 8026f92:	1c59      	adds	r1, r3, #1
 8026f94:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026f98:	121b      	asrs	r3, r3, #8
 8026f9a:	7093      	strb	r3, [r2, #2]
 8026f9c:	bd30      	pop	{r4, r5, pc}
	...

08026fa0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8026fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fa4:	461c      	mov	r4, r3
 8026fa6:	b08b      	sub	sp, #44	@ 0x2c
 8026fa8:	460e      	mov	r6, r1
 8026faa:	4615      	mov	r5, r2
 8026fac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026fae:	4682      	mov	sl, r0
 8026fb0:	6861      	ldr	r1, [r4, #4]
 8026fb2:	aa06      	add	r2, sp, #24
 8026fb4:	6820      	ldr	r0, [r4, #0]
 8026fb6:	2702      	movs	r7, #2
 8026fb8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8026fbc:	3504      	adds	r5, #4
 8026fbe:	c203      	stmia	r2!, {r0, r1}
 8026fc0:	6818      	ldr	r0, [r3, #0]
 8026fc2:	aa08      	add	r2, sp, #32
 8026fc4:	6859      	ldr	r1, [r3, #4]
 8026fc6:	c203      	stmia	r2!, {r0, r1}
 8026fc8:	a806      	add	r0, sp, #24
 8026fca:	f7f2 fb63 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026fce:	4621      	mov	r1, r4
 8026fd0:	a808      	add	r0, sp, #32
 8026fd2:	f7f2 fba3 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026fd6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8026fda:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8026fde:	f002 0301 	and.w	r3, r2, #1
 8026fe2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8026fe6:	9302      	str	r3, [sp, #8]
 8026fe8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8026fec:	f003 0101 	and.w	r1, r3, #1
 8026ff0:	9101      	str	r1, [sp, #4]
 8026ff2:	9801      	ldr	r0, [sp, #4]
 8026ff4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8026ff8:	4403      	add	r3, r0
 8026ffa:	fb01 2303 	mla	r3, r1, r3, r2
 8026ffe:	fb93 f3f7 	sdiv	r3, r3, r7
 8027002:	441e      	add	r6, r3
 8027004:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8027008:	441a      	add	r2, r3
 802700a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802700e:	4419      	add	r1, r3
 8027010:	4b70      	ldr	r3, [pc, #448]	@ (80271d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8027012:	f8ad 2020 	strh.w	r2, [sp, #32]
 8027016:	6818      	ldr	r0, [r3, #0]
 8027018:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802701c:	6803      	ldr	r3, [r0, #0]
 802701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027020:	4798      	blx	r3
 8027022:	4a6d      	ldr	r2, [pc, #436]	@ (80271d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8027024:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8027028:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802702c:	8813      	ldrh	r3, [r2, #0]
 802702e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8027032:	fb03 1404 	mla	r4, r3, r4, r1
 8027036:	4611      	mov	r1, r2
 8027038:	fb0b f303 	mul.w	r3, fp, r3
 802703c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027044:	4404      	add	r4, r0
 8027046:	4423      	add	r3, r4
 8027048:	d073      	beq.n	8027132 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802704a:	9705      	str	r7, [sp, #20]
 802704c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027050:	9b03      	ldr	r3, [sp, #12]
 8027052:	429c      	cmp	r4, r3
 8027054:	f080 80b5 	bcs.w	80271c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027058:	9b02      	ldr	r3, [sp, #8]
 802705a:	b35b      	cbz	r3, 80270b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802705c:	7831      	ldrb	r1, [r6, #0]
 802705e:	4622      	mov	r2, r4
 8027060:	1c77      	adds	r7, r6, #1
 8027062:	3403      	adds	r4, #3
 8027064:	f001 010f 	and.w	r1, r1, #15
 8027068:	f108 3bff 	add.w	fp, r8, #4294967295
 802706c:	464b      	mov	r3, r9
 802706e:	4650      	mov	r0, sl
 8027070:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027074:	4429      	add	r1, r5
 8027076:	f7ff ff65 	bl	8026f44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802707a:	f1bb 0f01 	cmp.w	fp, #1
 802707e:	dd1c      	ble.n	80270ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8027080:	7839      	ldrb	r1, [r7, #0]
 8027082:	4622      	mov	r2, r4
 8027084:	464b      	mov	r3, r9
 8027086:	4650      	mov	r0, sl
 8027088:	0909      	lsrs	r1, r1, #4
 802708a:	f1ab 0b02 	sub.w	fp, fp, #2
 802708e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027092:	4429      	add	r1, r5
 8027094:	f7ff ff56 	bl	8026f44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027098:	f817 1b01 	ldrb.w	r1, [r7], #1
 802709c:	1ce2      	adds	r2, r4, #3
 802709e:	464b      	mov	r3, r9
 80270a0:	f001 010f 	and.w	r1, r1, #15
 80270a4:	4650      	mov	r0, sl
 80270a6:	3406      	adds	r4, #6
 80270a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80270ac:	4429      	add	r1, r5
 80270ae:	f7ff ff49 	bl	8026f44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80270b2:	e7e2      	b.n	802707a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80270b4:	4637      	mov	r7, r6
 80270b6:	46c3      	mov	fp, r8
 80270b8:	e7df      	b.n	802707a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80270ba:	d10a      	bne.n	80270d2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80270bc:	7839      	ldrb	r1, [r7, #0]
 80270be:	4622      	mov	r2, r4
 80270c0:	3403      	adds	r4, #3
 80270c2:	464b      	mov	r3, r9
 80270c4:	0909      	lsrs	r1, r1, #4
 80270c6:	4650      	mov	r0, sl
 80270c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80270cc:	4429      	add	r1, r5
 80270ce:	f7ff ff39 	bl	8026f44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80270d2:	9b04      	ldr	r3, [sp, #16]
 80270d4:	9a01      	ldr	r2, [sp, #4]
 80270d6:	881b      	ldrh	r3, [r3, #0]
 80270d8:	eba3 0308 	sub.w	r3, r3, r8
 80270dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80270e0:	441c      	add	r4, r3
 80270e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80270e6:	4413      	add	r3, r2
 80270e8:	9a05      	ldr	r2, [sp, #20]
 80270ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80270ee:	441e      	add	r6, r3
 80270f0:	e7ae      	b.n	8027050 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80270f2:	4632      	mov	r2, r6
 80270f4:	46c4      	mov	ip, r8
 80270f6:	e037      	b.n	8027168 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80270f8:	d10e      	bne.n	8027118 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80270fa:	7812      	ldrb	r2, [r2, #0]
 80270fc:	3003      	adds	r0, #3
 80270fe:	0912      	lsrs	r2, r2, #4
 8027100:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027104:	18ac      	adds	r4, r5, r2
 8027106:	5caa      	ldrb	r2, [r5, r2]
 8027108:	f800 2c03 	strb.w	r2, [r0, #-3]
 802710c:	7862      	ldrb	r2, [r4, #1]
 802710e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8027112:	78a2      	ldrb	r2, [r4, #2]
 8027114:	f800 2c01 	strb.w	r2, [r0, #-1]
 8027118:	880c      	ldrh	r4, [r1, #0]
 802711a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802711e:	eba4 0408 	sub.w	r4, r4, r8
 8027122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027126:	4404      	add	r4, r0
 8027128:	9801      	ldr	r0, [sp, #4]
 802712a:	4402      	add	r2, r0
 802712c:	fb92 f2f7 	sdiv	r2, r2, r7
 8027130:	4416      	add	r6, r2
 8027132:	429c      	cmp	r4, r3
 8027134:	d245      	bcs.n	80271c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027136:	9a02      	ldr	r2, [sp, #8]
 8027138:	2a00      	cmp	r2, #0
 802713a:	d0da      	beq.n	80270f2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802713c:	7830      	ldrb	r0, [r6, #0]
 802713e:	1c72      	adds	r2, r6, #1
 8027140:	3403      	adds	r4, #3
 8027142:	f000 000f 	and.w	r0, r0, #15
 8027146:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802714a:	eb05 0c00 	add.w	ip, r5, r0
 802714e:	5c28      	ldrb	r0, [r5, r0]
 8027150:	f804 0c03 	strb.w	r0, [r4, #-3]
 8027154:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027158:	f804 0c02 	strb.w	r0, [r4, #-2]
 802715c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8027160:	f108 3cff 	add.w	ip, r8, #4294967295
 8027164:	f804 0c01 	strb.w	r0, [r4, #-1]
 8027168:	f1bc 0f01 	cmp.w	ip, #1
 802716c:	4620      	mov	r0, r4
 802716e:	f104 0406 	add.w	r4, r4, #6
 8027172:	ddc1      	ble.n	80270f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8027174:	7810      	ldrb	r0, [r2, #0]
 8027176:	f1ac 0c02 	sub.w	ip, ip, #2
 802717a:	0900      	lsrs	r0, r0, #4
 802717c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027180:	eb05 0e00 	add.w	lr, r5, r0
 8027184:	5c28      	ldrb	r0, [r5, r0]
 8027186:	f804 0c06 	strb.w	r0, [r4, #-6]
 802718a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802718e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8027192:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8027196:	f804 0c04 	strb.w	r0, [r4, #-4]
 802719a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802719e:	f000 000f 	and.w	r0, r0, #15
 80271a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80271a6:	eb05 0e00 	add.w	lr, r5, r0
 80271aa:	5c28      	ldrb	r0, [r5, r0]
 80271ac:	f804 0c03 	strb.w	r0, [r4, #-3]
 80271b0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80271b4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80271b8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80271bc:	f804 0c01 	strb.w	r0, [r4, #-1]
 80271c0:	e7d2      	b.n	8027168 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80271c2:	4b04      	ldr	r3, [pc, #16]	@ (80271d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80271c4:	6818      	ldr	r0, [r3, #0]
 80271c6:	6803      	ldr	r3, [r0, #0]
 80271c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80271ca:	4798      	blx	r3
 80271cc:	b00b      	add	sp, #44	@ 0x2c
 80271ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271d2:	bf00      	nop
 80271d4:	24028520 	.word	0x24028520
 80271d8:	2402851a 	.word	0x2402851a

080271dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80271dc:	b530      	push	{r4, r5, lr}
 80271de:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80271e2:	780d      	ldrb	r5, [r1, #0]
 80271e4:	28ff      	cmp	r0, #255	@ 0xff
 80271e6:	d107      	bne.n	80271f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80271e8:	2bff      	cmp	r3, #255	@ 0xff
 80271ea:	d105      	bne.n	80271f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80271ec:	7015      	strb	r5, [r2, #0]
 80271ee:	784b      	ldrb	r3, [r1, #1]
 80271f0:	7053      	strb	r3, [r2, #1]
 80271f2:	788b      	ldrb	r3, [r1, #2]
 80271f4:	7093      	strb	r3, [r2, #2]
 80271f6:	bd30      	pop	{r4, r5, pc}
 80271f8:	fb10 f003 	smulbb	r0, r0, r3
 80271fc:	b283      	uxth	r3, r0
 80271fe:	1c58      	adds	r0, r3, #1
 8027200:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027204:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027208:	b284      	uxth	r4, r0
 802720a:	43c0      	mvns	r0, r0
 802720c:	fb15 f504 	smulbb	r5, r5, r4
 8027210:	b2c3      	uxtb	r3, r0
 8027212:	7810      	ldrb	r0, [r2, #0]
 8027214:	fb00 5003 	mla	r0, r0, r3, r5
 8027218:	b280      	uxth	r0, r0
 802721a:	1c45      	adds	r5, r0, #1
 802721c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027220:	7855      	ldrb	r5, [r2, #1]
 8027222:	fb15 f503 	smulbb	r5, r5, r3
 8027226:	1200      	asrs	r0, r0, #8
 8027228:	7010      	strb	r0, [r2, #0]
 802722a:	7848      	ldrb	r0, [r1, #1]
 802722c:	fb00 5004 	mla	r0, r0, r4, r5
 8027230:	b280      	uxth	r0, r0
 8027232:	1c45      	adds	r5, r0, #1
 8027234:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027238:	1200      	asrs	r0, r0, #8
 802723a:	7050      	strb	r0, [r2, #1]
 802723c:	7888      	ldrb	r0, [r1, #2]
 802723e:	7891      	ldrb	r1, [r2, #2]
 8027240:	fb11 f303 	smulbb	r3, r1, r3
 8027244:	fb00 3304 	mla	r3, r0, r4, r3
 8027248:	b29b      	uxth	r3, r3
 802724a:	1c59      	adds	r1, r3, #1
 802724c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027250:	121b      	asrs	r3, r3, #8
 8027252:	e7cf      	b.n	80271f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08027254 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8027254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027258:	461d      	mov	r5, r3
 802725a:	b08f      	sub	sp, #60	@ 0x3c
 802725c:	460c      	mov	r4, r1
 802725e:	4616      	mov	r6, r2
 8027260:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027262:	4680      	mov	r8, r0
 8027264:	6869      	ldr	r1, [r5, #4]
 8027266:	aa0a      	add	r2, sp, #40	@ 0x28
 8027268:	6828      	ldr	r0, [r5, #0]
 802726a:	3604      	adds	r6, #4
 802726c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8027270:	4f57      	ldr	r7, [pc, #348]	@ (80273d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8027272:	c203      	stmia	r2!, {r0, r1}
 8027274:	6818      	ldr	r0, [r3, #0]
 8027276:	aa0c      	add	r2, sp, #48	@ 0x30
 8027278:	6859      	ldr	r1, [r3, #4]
 802727a:	c203      	stmia	r2!, {r0, r1}
 802727c:	a80a      	add	r0, sp, #40	@ 0x28
 802727e:	f7f2 fa09 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027282:	4629      	mov	r1, r5
 8027284:	a80c      	add	r0, sp, #48	@ 0x30
 8027286:	2502      	movs	r5, #2
 8027288:	f7f2 fa48 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802728c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8027290:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8027294:	f002 0301 	and.w	r3, r2, #1
 8027298:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802729c:	9304      	str	r3, [sp, #16]
 802729e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80272a2:	f003 0101 	and.w	r1, r3, #1
 80272a6:	9103      	str	r1, [sp, #12]
 80272a8:	9803      	ldr	r0, [sp, #12]
 80272aa:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80272ae:	4403      	add	r3, r0
 80272b0:	6838      	ldr	r0, [r7, #0]
 80272b2:	fb01 2303 	mla	r3, r1, r3, r2
 80272b6:	fb93 f3f5 	sdiv	r3, r3, r5
 80272ba:	18e5      	adds	r5, r4, r3
 80272bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80272c0:	441a      	add	r2, r3
 80272c2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80272c6:	4419      	add	r1, r3
 80272c8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80272cc:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80272d0:	6803      	ldr	r3, [r0, #0]
 80272d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80272d4:	4798      	blx	r3
 80272d6:	4a3f      	ldr	r2, [pc, #252]	@ (80273d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80272d8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80272dc:	8813      	ldrh	r3, [r2, #0]
 80272de:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80272e2:	9207      	str	r2, [sp, #28]
 80272e4:	fb03 1404 	mla	r4, r3, r4, r1
 80272e8:	fb0a f303 	mul.w	r3, sl, r3
 80272ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80272f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80272f4:	4404      	add	r4, r0
 80272f6:	18e3      	adds	r3, r4, r3
 80272f8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80272fc:	9b05      	ldr	r3, [sp, #20]
 80272fe:	429c      	cmp	r4, r3
 8027300:	d25d      	bcs.n	80273be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8027302:	9b04      	ldr	r3, [sp, #16]
 8027304:	2b00      	cmp	r3, #0
 8027306:	d037      	beq.n	8027378 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8027308:	782b      	ldrb	r3, [r5, #0]
 802730a:	1c6f      	adds	r7, r5, #1
 802730c:	f003 030f 	and.w	r3, r3, #15
 8027310:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027314:	9309      	str	r3, [sp, #36]	@ 0x24
 8027316:	0e1b      	lsrs	r3, r3, #24
 8027318:	d006      	beq.n	8027328 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802731a:	9300      	str	r3, [sp, #0]
 802731c:	4622      	mov	r2, r4
 802731e:	464b      	mov	r3, r9
 8027320:	a909      	add	r1, sp, #36	@ 0x24
 8027322:	4640      	mov	r0, r8
 8027324:	f7ff ff5a 	bl	80271dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027328:	3403      	adds	r4, #3
 802732a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802732e:	f1ba 0f01 	cmp.w	sl, #1
 8027332:	dd24      	ble.n	802737e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8027334:	783b      	ldrb	r3, [r7, #0]
 8027336:	091b      	lsrs	r3, r3, #4
 8027338:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802733c:	9308      	str	r3, [sp, #32]
 802733e:	0e1b      	lsrs	r3, r3, #24
 8027340:	d006      	beq.n	8027350 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8027342:	9300      	str	r3, [sp, #0]
 8027344:	4622      	mov	r2, r4
 8027346:	464b      	mov	r3, r9
 8027348:	a908      	add	r1, sp, #32
 802734a:	4640      	mov	r0, r8
 802734c:	f7ff ff46 	bl	80271dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027350:	f817 3b01 	ldrb.w	r3, [r7], #1
 8027354:	f003 030f 	and.w	r3, r3, #15
 8027358:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802735c:	9309      	str	r3, [sp, #36]	@ 0x24
 802735e:	0e1b      	lsrs	r3, r3, #24
 8027360:	d006      	beq.n	8027370 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8027362:	9300      	str	r3, [sp, #0]
 8027364:	1ce2      	adds	r2, r4, #3
 8027366:	464b      	mov	r3, r9
 8027368:	a909      	add	r1, sp, #36	@ 0x24
 802736a:	4640      	mov	r0, r8
 802736c:	f7ff ff36 	bl	80271dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027370:	3406      	adds	r4, #6
 8027372:	f1aa 0a02 	sub.w	sl, sl, #2
 8027376:	e7da      	b.n	802732e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8027378:	462f      	mov	r7, r5
 802737a:	46da      	mov	sl, fp
 802737c:	e7d7      	b.n	802732e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802737e:	d10e      	bne.n	802739e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8027380:	783b      	ldrb	r3, [r7, #0]
 8027382:	091b      	lsrs	r3, r3, #4
 8027384:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027388:	9309      	str	r3, [sp, #36]	@ 0x24
 802738a:	0e1b      	lsrs	r3, r3, #24
 802738c:	d006      	beq.n	802739c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802738e:	9300      	str	r3, [sp, #0]
 8027390:	4622      	mov	r2, r4
 8027392:	464b      	mov	r3, r9
 8027394:	a909      	add	r1, sp, #36	@ 0x24
 8027396:	4640      	mov	r0, r8
 8027398:	f7ff ff20 	bl	80271dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802739c:	3403      	adds	r4, #3
 802739e:	9b07      	ldr	r3, [sp, #28]
 80273a0:	9a03      	ldr	r2, [sp, #12]
 80273a2:	881b      	ldrh	r3, [r3, #0]
 80273a4:	eba3 030b 	sub.w	r3, r3, fp
 80273a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80273ac:	441c      	add	r4, r3
 80273ae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80273b2:	4413      	add	r3, r2
 80273b4:	2202      	movs	r2, #2
 80273b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80273ba:	441d      	add	r5, r3
 80273bc:	e79e      	b.n	80272fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80273be:	9b06      	ldr	r3, [sp, #24]
 80273c0:	6818      	ldr	r0, [r3, #0]
 80273c2:	6803      	ldr	r3, [r0, #0]
 80273c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80273c6:	4798      	blx	r3
 80273c8:	b00f      	add	sp, #60	@ 0x3c
 80273ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273ce:	bf00      	nop
 80273d0:	24028520 	.word	0x24028520
 80273d4:	2402851a 	.word	0x2402851a

080273d8 <CRC_Lock>:
 80273d8:	4a2d      	ldr	r2, [pc, #180]	@ (8027490 <CRC_Lock+0xb8>)
 80273da:	b530      	push	{r4, r5, lr}
 80273dc:	6813      	ldr	r3, [r2, #0]
 80273de:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80273e2:	f023 0301 	bic.w	r3, r3, #1
 80273e6:	6013      	str	r3, [r2, #0]
 80273e8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80273ec:	4b29      	ldr	r3, [pc, #164]	@ (8027494 <CRC_Lock+0xbc>)
 80273ee:	681c      	ldr	r4, [r3, #0]
 80273f0:	4014      	ands	r4, r2
 80273f2:	42ac      	cmp	r4, r5
 80273f4:	d005      	beq.n	8027402 <CRC_Lock+0x2a>
 80273f6:	681c      	ldr	r4, [r3, #0]
 80273f8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80273fc:	4014      	ands	r4, r2
 80273fe:	42ac      	cmp	r4, r5
 8027400:	d125      	bne.n	802744e <CRC_Lock+0x76>
 8027402:	4b25      	ldr	r3, [pc, #148]	@ (8027498 <CRC_Lock+0xc0>)
 8027404:	681b      	ldr	r3, [r3, #0]
 8027406:	2b00      	cmp	r3, #0
 8027408:	d139      	bne.n	802747e <CRC_Lock+0xa6>
 802740a:	4b24      	ldr	r3, [pc, #144]	@ (802749c <CRC_Lock+0xc4>)
 802740c:	681a      	ldr	r2, [r3, #0]
 802740e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027412:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8027416:	d00d      	beq.n	8027434 <CRC_Lock+0x5c>
 8027418:	681a      	ldr	r2, [r3, #0]
 802741a:	f240 4483 	movw	r4, #1155	@ 0x483
 802741e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027422:	42a2      	cmp	r2, r4
 8027424:	d006      	beq.n	8027434 <CRC_Lock+0x5c>
 8027426:	681b      	ldr	r3, [r3, #0]
 8027428:	f240 4285 	movw	r2, #1157	@ 0x485
 802742c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027430:	4293      	cmp	r3, r2
 8027432:	d124      	bne.n	802747e <CRC_Lock+0xa6>
 8027434:	4b1a      	ldr	r3, [pc, #104]	@ (80274a0 <CRC_Lock+0xc8>)
 8027436:	2201      	movs	r2, #1
 8027438:	601a      	str	r2, [r3, #0]
 802743a:	681a      	ldr	r2, [r3, #0]
 802743c:	2a00      	cmp	r2, #0
 802743e:	d1fc      	bne.n	802743a <CRC_Lock+0x62>
 8027440:	4b18      	ldr	r3, [pc, #96]	@ (80274a4 <CRC_Lock+0xcc>)
 8027442:	6018      	str	r0, [r3, #0]
 8027444:	6818      	ldr	r0, [r3, #0]
 8027446:	1a43      	subs	r3, r0, r1
 8027448:	4258      	negs	r0, r3
 802744a:	4158      	adcs	r0, r3
 802744c:	e00e      	b.n	802746c <CRC_Lock+0x94>
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	4013      	ands	r3, r2
 8027452:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8027456:	4293      	cmp	r3, r2
 8027458:	d111      	bne.n	802747e <CRC_Lock+0xa6>
 802745a:	4b13      	ldr	r3, [pc, #76]	@ (80274a8 <CRC_Lock+0xd0>)
 802745c:	f240 4286 	movw	r2, #1158	@ 0x486
 8027460:	681b      	ldr	r3, [r3, #0]
 8027462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027466:	4293      	cmp	r3, r2
 8027468:	d001      	beq.n	802746e <CRC_Lock+0x96>
 802746a:	2000      	movs	r0, #0
 802746c:	bd30      	pop	{r4, r5, pc}
 802746e:	4b0f      	ldr	r3, [pc, #60]	@ (80274ac <CRC_Lock+0xd4>)
 8027470:	2201      	movs	r2, #1
 8027472:	601a      	str	r2, [r3, #0]
 8027474:	681a      	ldr	r2, [r3, #0]
 8027476:	2a00      	cmp	r2, #0
 8027478:	d1fc      	bne.n	8027474 <CRC_Lock+0x9c>
 802747a:	4b0d      	ldr	r3, [pc, #52]	@ (80274b0 <CRC_Lock+0xd8>)
 802747c:	e7e1      	b.n	8027442 <CRC_Lock+0x6a>
 802747e:	4b0d      	ldr	r3, [pc, #52]	@ (80274b4 <CRC_Lock+0xdc>)
 8027480:	2201      	movs	r2, #1
 8027482:	601a      	str	r2, [r3, #0]
 8027484:	681a      	ldr	r2, [r3, #0]
 8027486:	2a00      	cmp	r2, #0
 8027488:	d1fc      	bne.n	8027484 <CRC_Lock+0xac>
 802748a:	4b0b      	ldr	r3, [pc, #44]	@ (80274b8 <CRC_Lock+0xe0>)
 802748c:	e7d9      	b.n	8027442 <CRC_Lock+0x6a>
 802748e:	bf00      	nop
 8027490:	e0002000 	.word	0xe0002000
 8027494:	e000ed00 	.word	0xe000ed00
 8027498:	e0042000 	.word	0xe0042000
 802749c:	5c001000 	.word	0x5c001000
 80274a0:	58024c08 	.word	0x58024c08
 80274a4:	58024c00 	.word	0x58024c00
 80274a8:	46008ff0 	.word	0x46008ff0
 80274ac:	46024c08 	.word	0x46024c08
 80274b0:	46024c00 	.word	0x46024c00
 80274b4:	40023008 	.word	0x40023008
 80274b8:	40023000 	.word	0x40023000

080274bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80274bc:	6101      	str	r1, [r0, #16]
 80274be:	4770      	bx	lr

080274c0 <_ZN8touchgfx8Gestures4tickEv>:
 80274c0:	7b83      	ldrb	r3, [r0, #14]
 80274c2:	b14b      	cbz	r3, 80274d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80274c4:	8903      	ldrh	r3, [r0, #8]
 80274c6:	3301      	adds	r3, #1
 80274c8:	b29b      	uxth	r3, r3
 80274ca:	2b07      	cmp	r3, #7
 80274cc:	8103      	strh	r3, [r0, #8]
 80274ce:	bf81      	itttt	hi
 80274d0:	2300      	movhi	r3, #0
 80274d2:	8143      	strhhi	r3, [r0, #10]
 80274d4:	8183      	strhhi	r3, [r0, #12]
 80274d6:	7383      	strbhi	r3, [r0, #14]
 80274d8:	4770      	bx	lr
	...

080274dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80274dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80274e0:	4698      	mov	r8, r3
 80274e2:	8883      	ldrh	r3, [r0, #4]
 80274e4:	4604      	mov	r4, r0
 80274e6:	4617      	mov	r7, r2
 80274e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80274ec:	eba8 0303 	sub.w	r3, r8, r3
 80274f0:	4a19      	ldr	r2, [pc, #100]	@ (8027558 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80274f2:	460e      	mov	r6, r1
 80274f4:	b21b      	sxth	r3, r3
 80274f6:	88c1      	ldrh	r1, [r0, #6]
 80274f8:	9200      	str	r2, [sp, #0]
 80274fa:	2000      	movs	r0, #0
 80274fc:	2b00      	cmp	r3, #0
 80274fe:	8aa2      	ldrh	r2, [r4, #20]
 8027500:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8027504:	bfb8      	it	lt
 8027506:	425b      	neglt	r3, r3
 8027508:	f88d 0004 	strb.w	r0, [sp, #4]
 802750c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8027510:	b21b      	sxth	r3, r3
 8027512:	f8ad 800a 	strh.w	r8, [sp, #10]
 8027516:	f8ad 500c 	strh.w	r5, [sp, #12]
 802751a:	4293      	cmp	r3, r2
 802751c:	dc07      	bgt.n	802752e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802751e:	1a69      	subs	r1, r5, r1
 8027520:	b209      	sxth	r1, r1
 8027522:	2900      	cmp	r1, #0
 8027524:	bfb8      	it	lt
 8027526:	4249      	neglt	r1, r1
 8027528:	b209      	sxth	r1, r1
 802752a:	428a      	cmp	r2, r1
 802752c:	da10      	bge.n	8027550 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802752e:	6920      	ldr	r0, [r4, #16]
 8027530:	4669      	mov	r1, sp
 8027532:	eba8 0606 	sub.w	r6, r8, r6
 8027536:	1bef      	subs	r7, r5, r7
 8027538:	6803      	ldr	r3, [r0, #0]
 802753a:	685b      	ldr	r3, [r3, #4]
 802753c:	4798      	blx	r3
 802753e:	2300      	movs	r3, #0
 8027540:	2001      	movs	r0, #1
 8027542:	8166      	strh	r6, [r4, #10]
 8027544:	8123      	strh	r3, [r4, #8]
 8027546:	81a7      	strh	r7, [r4, #12]
 8027548:	f8a4 8004 	strh.w	r8, [r4, #4]
 802754c:	80e5      	strh	r5, [r4, #6]
 802754e:	73a0      	strb	r0, [r4, #14]
 8027550:	b004      	add	sp, #16
 8027552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027556:	bf00      	nop
 8027558:	0802ccd0 	.word	0x0802ccd0

0802755c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802755e:	461e      	mov	r6, r3
 8027560:	1e4b      	subs	r3, r1, #1
 8027562:	b085      	sub	sp, #20
 8027564:	4604      	mov	r4, r0
 8027566:	2b01      	cmp	r3, #1
 8027568:	460d      	mov	r5, r1
 802756a:	4617      	mov	r7, r2
 802756c:	d84b      	bhi.n	8027606 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802756e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8027572:	1cd3      	adds	r3, r2, #3
 8027574:	b29b      	uxth	r3, r3
 8027576:	2b06      	cmp	r3, #6
 8027578:	d916      	bls.n	80275a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802757a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802761c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802757e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027582:	f8cd c004 	str.w	ip, [sp, #4]
 8027586:	f04f 0c00 	mov.w	ip, #0
 802758a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802758e:	6900      	ldr	r0, [r0, #16]
 8027590:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027594:	a901      	add	r1, sp, #4
 8027596:	f88d c008 	strb.w	ip, [sp, #8]
 802759a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802759e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80275a2:	6803      	ldr	r3, [r0, #0]
 80275a4:	689b      	ldr	r3, [r3, #8]
 80275a6:	4798      	blx	r3
 80275a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80275ac:	1cd3      	adds	r3, r2, #3
 80275ae:	b29b      	uxth	r3, r3
 80275b0:	2b06      	cmp	r3, #6
 80275b2:	d916      	bls.n	80275e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80275b4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802761c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80275b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80275bc:	f8cd c004 	str.w	ip, [sp, #4]
 80275c0:	f04f 0c01 	mov.w	ip, #1
 80275c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80275c8:	6920      	ldr	r0, [r4, #16]
 80275ca:	f8ad 100c 	strh.w	r1, [sp, #12]
 80275ce:	a901      	add	r1, sp, #4
 80275d0:	f88d c008 	strb.w	ip, [sp, #8]
 80275d4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80275d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80275dc:	6803      	ldr	r3, [r0, #0]
 80275de:	689b      	ldr	r3, [r3, #8]
 80275e0:	4798      	blx	r3
 80275e2:	4b0d      	ldr	r3, [pc, #52]	@ (8027618 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80275e4:	a901      	add	r1, sp, #4
 80275e6:	6920      	ldr	r0, [r4, #16]
 80275e8:	9301      	str	r3, [sp, #4]
 80275ea:	2300      	movs	r3, #0
 80275ec:	f88d 5008 	strb.w	r5, [sp, #8]
 80275f0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80275f4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80275f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80275fc:	6803      	ldr	r3, [r0, #0]
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	4798      	blx	r3
 8027602:	b005      	add	sp, #20
 8027604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027606:	2900      	cmp	r1, #0
 8027608:	d1eb      	bne.n	80275e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802760a:	80a2      	strh	r2, [r4, #4]
 802760c:	80c6      	strh	r6, [r0, #6]
 802760e:	60a1      	str	r1, [r4, #8]
 8027610:	81a1      	strh	r1, [r4, #12]
 8027612:	73a1      	strb	r1, [r4, #14]
 8027614:	e7e5      	b.n	80275e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027616:	bf00      	nop
 8027618:	0802ccbc 	.word	0x0802ccbc
 802761c:	0802d5c4 	.word	0x0802d5c4

08027620 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8027620:	10c9      	asrs	r1, r1, #3
 8027622:	2900      	cmp	r1, #0
 8027624:	bfb8      	it	lt
 8027626:	4249      	neglt	r1, r1
 8027628:	2801      	cmp	r0, #1
 802762a:	d108      	bne.n	802763e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802762c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8027630:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8027634:	4601      	mov	r1, r0
 8027636:	dd02      	ble.n	802763e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8027638:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802763c:	4770      	bx	lr
 802763e:	29ff      	cmp	r1, #255	@ 0xff
 8027640:	bfa8      	it	ge
 8027642:	21ff      	movge	r1, #255	@ 0xff
 8027644:	4608      	mov	r0, r1
 8027646:	4770      	bx	lr

08027648 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8027648:	b410      	push	{r4}
 802764a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802764e:	429c      	cmp	r4, r3
 8027650:	d803      	bhi.n	802765a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8027652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027656:	f7f0 bb13 	b.w	8017c80 <_ZN8touchgfx7Outline6lineToEii>
 802765a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802765e:	4770      	bx	lr

08027660 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8027660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027664:	b08b      	sub	sp, #44	@ 0x2c
 8027666:	4606      	mov	r6, r0
 8027668:	468a      	mov	sl, r1
 802766a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802766e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8027672:	9308      	str	r3, [sp, #32]
 8027674:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8027678:	9309      	str	r3, [sp, #36]	@ 0x24
 802767a:	f7f0 fc6c 	bl	8017f56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802767e:	68b5      	ldr	r5, [r6, #8]
 8027680:	4604      	mov	r4, r0
 8027682:	2d00      	cmp	r5, #0
 8027684:	d044      	beq.n	8027710 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8027686:	6873      	ldr	r3, [r6, #4]
 8027688:	42ab      	cmp	r3, r5
 802768a:	d33d      	bcc.n	8027708 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802768c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8027690:	f04f 0800 	mov.w	r8, #0
 8027694:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8027698:	eb02 0b03 	add.w	fp, r2, r3
 802769c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80276a0:	fb02 1203 	mla	r2, r2, r3, r1
 80276a4:	9205      	str	r2, [sp, #20]
 80276a6:	1e6a      	subs	r2, r5, #1
 80276a8:	9204      	str	r2, [sp, #16]
 80276aa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80276ae:	f9b4 7000 	ldrsh.w	r7, [r4]
 80276b2:	454b      	cmp	r3, r9
 80276b4:	463a      	mov	r2, r7
 80276b6:	d008      	beq.n	80276ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80276b8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80276bc:	eb03 0b09 	add.w	fp, r3, r9
 80276c0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80276c4:	fb03 1309 	mla	r3, r3, r9, r1
 80276c8:	9305      	str	r3, [sp, #20]
 80276ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80276ce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80276d2:	4498      	add	r8, r3
 80276d4:	9b04      	ldr	r3, [sp, #16]
 80276d6:	3b01      	subs	r3, #1
 80276d8:	9304      	str	r3, [sp, #16]
 80276da:	9b04      	ldr	r3, [sp, #16]
 80276dc:	3301      	adds	r3, #1
 80276de:	d015      	beq.n	802770c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80276e0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80276e4:	42bb      	cmp	r3, r7
 80276e6:	d117      	bne.n	8027718 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80276e8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80276ec:	9b04      	ldr	r3, [sp, #16]
 80276ee:	4548      	cmp	r0, r9
 80276f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80276f4:	d17d      	bne.n	80277f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80276f6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80276fa:	4401      	add	r1, r0
 80276fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8027700:	4480      	add	r8, r0
 8027702:	e7e9      	b.n	80276d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8027704:	461f      	mov	r7, r3
 8027706:	e042      	b.n	802778e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8027708:	2000      	movs	r0, #0
 802770a:	e002      	b.n	8027712 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802770c:	2900      	cmp	r1, #0
 802770e:	d16d      	bne.n	80277ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8027710:	2001      	movs	r0, #1
 8027712:	b00b      	add	sp, #44	@ 0x2c
 8027714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027718:	b379      	cbz	r1, 802777a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802771a:	2f00      	cmp	r7, #0
 802771c:	db29      	blt.n	8027772 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802771e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8027722:	42bb      	cmp	r3, r7
 8027724:	dd25      	ble.n	8027772 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8027726:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802772a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802772e:	f7ff ff77 	bl	8027620 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8027732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027734:	fb10 f003 	smulbb	r0, r0, r3
 8027738:	b280      	uxth	r0, r0
 802773a:	1c41      	adds	r1, r0, #1
 802773c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027740:	1209      	asrs	r1, r1, #8
 8027742:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8027746:	d014      	beq.n	8027772 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8027748:	b2c9      	uxtb	r1, r1
 802774a:	9808      	ldr	r0, [sp, #32]
 802774c:	b2ba      	uxth	r2, r7
 802774e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8027750:	9102      	str	r1, [sp, #8]
 8027752:	2101      	movs	r1, #1
 8027754:	4413      	add	r3, r2
 8027756:	4402      	add	r2, r0
 8027758:	9101      	str	r1, [sp, #4]
 802775a:	fa0f f18b 	sxth.w	r1, fp
 802775e:	f8da 0000 	ldr.w	r0, [sl]
 8027762:	b21b      	sxth	r3, r3
 8027764:	9100      	str	r1, [sp, #0]
 8027766:	b212      	sxth	r2, r2
 8027768:	6941      	ldr	r1, [r0, #20]
 802776a:	4650      	mov	r0, sl
 802776c:	460d      	mov	r5, r1
 802776e:	9905      	ldr	r1, [sp, #20]
 8027770:	47a8      	blx	r5
 8027772:	9b04      	ldr	r3, [sp, #16]
 8027774:	1c7a      	adds	r2, r7, #1
 8027776:	3301      	adds	r3, #1
 8027778:	d0ca      	beq.n	8027710 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802777a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802777e:	1abb      	subs	r3, r7, r2
 8027780:	2b00      	cmp	r3, #0
 8027782:	dd31      	ble.n	80277e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8027784:	2a00      	cmp	r2, #0
 8027786:	dabd      	bge.n	8027704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8027788:	2f00      	cmp	r7, #0
 802778a:	dd2d      	ble.n	80277e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802778c:	2200      	movs	r2, #0
 802778e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8027792:	19d1      	adds	r1, r2, r7
 8027794:	4299      	cmp	r1, r3
 8027796:	db02      	blt.n	802779e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8027798:	1a9f      	subs	r7, r3, r2
 802779a:	2f00      	cmp	r7, #0
 802779c:	dd24      	ble.n	80277e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802779e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80277a2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80277a6:	f7ff ff3b 	bl	8027620 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80277aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80277ac:	fb10 f003 	smulbb	r0, r0, r3
 80277b0:	b280      	uxth	r0, r0
 80277b2:	1c41      	adds	r1, r0, #1
 80277b4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80277b8:	1209      	asrs	r1, r1, #8
 80277ba:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80277be:	d013      	beq.n	80277e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80277c0:	b292      	uxth	r2, r2
 80277c2:	9808      	ldr	r0, [sp, #32]
 80277c4:	b2c9      	uxtb	r1, r1
 80277c6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80277c8:	b23f      	sxth	r7, r7
 80277ca:	4413      	add	r3, r2
 80277cc:	9102      	str	r1, [sp, #8]
 80277ce:	4402      	add	r2, r0
 80277d0:	fa0f f18b 	sxth.w	r1, fp
 80277d4:	f8da 0000 	ldr.w	r0, [sl]
 80277d8:	b21b      	sxth	r3, r3
 80277da:	9100      	str	r1, [sp, #0]
 80277dc:	b212      	sxth	r2, r2
 80277de:	9701      	str	r7, [sp, #4]
 80277e0:	9905      	ldr	r1, [sp, #20]
 80277e2:	6947      	ldr	r7, [r0, #20]
 80277e4:	4650      	mov	r0, sl
 80277e6:	47b8      	blx	r7
 80277e8:	464b      	mov	r3, r9
 80277ea:	e75e      	b.n	80276aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80277ec:	2f00      	cmp	r7, #0
 80277ee:	da96      	bge.n	802771e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80277f0:	e78e      	b.n	8027710 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80277f2:	2900      	cmp	r1, #0
 80277f4:	d0f8      	beq.n	80277e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80277f6:	e790      	b.n	802771a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080277f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80277f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80277fc:	461e      	mov	r6, r3
 80277fe:	4b36      	ldr	r3, [pc, #216]	@ (80278d8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8027800:	2500      	movs	r5, #0
 8027802:	f100 0814 	add.w	r8, r0, #20
 8027806:	4604      	mov	r4, r0
 8027808:	4617      	mov	r7, r2
 802780a:	e9c0 3100 	strd	r3, r1, [r0]
 802780e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8027812:	8185      	strh	r5, [r0, #12]
 8027814:	8103      	strh	r3, [r0, #8]
 8027816:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802781a:	81c5      	strh	r5, [r0, #14]
 802781c:	7283      	strb	r3, [r0, #10]
 802781e:	8205      	strh	r5, [r0, #16]
 8027820:	8245      	strh	r5, [r0, #18]
 8027822:	4640      	mov	r0, r8
 8027824:	f7ef fd72 	bl	801730c <_ZN8touchgfx7OutlineC1Ev>
 8027828:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802782c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8027830:	466b      	mov	r3, sp
 8027832:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8027836:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802783a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802783e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8027842:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8027846:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802784a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802784e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8027852:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8027856:	6830      	ldr	r0, [r6, #0]
 8027858:	6871      	ldr	r1, [r6, #4]
 802785a:	8872      	ldrh	r2, [r6, #2]
 802785c:	8835      	ldrh	r5, [r6, #0]
 802785e:	c303      	stmia	r3!, {r0, r1}
 8027860:	887b      	ldrh	r3, [r7, #2]
 8027862:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8027866:	4413      	add	r3, r2
 8027868:	883a      	ldrh	r2, [r7, #0]
 802786a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802786e:	442a      	add	r2, r5
 8027870:	81e3      	strh	r3, [r4, #14]
 8027872:	8220      	strh	r0, [r4, #16]
 8027874:	4668      	mov	r0, sp
 8027876:	81a2      	strh	r2, [r4, #12]
 8027878:	8261      	strh	r1, [r4, #18]
 802787a:	4639      	mov	r1, r7
 802787c:	f7f1 ff4e 	bl	801971c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027880:	f104 000c 	add.w	r0, r4, #12
 8027884:	f7f1 ff06 	bl	8019694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027888:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802788c:	f8bd 2000 	ldrh.w	r2, [sp]
 8027890:	4640      	mov	r0, r8
 8027892:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8027896:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802789a:	f7ef fd1b 	bl	80172d4 <_ZN8touchgfx7Outline5resetEv>
 802789e:	f9bd 3000 	ldrsh.w	r3, [sp]
 80278a2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80278a6:	4620      	mov	r0, r4
 80278a8:	015b      	lsls	r3, r3, #5
 80278aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80278ac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80278b0:	015b      	lsls	r3, r3, #5
 80278b2:	6523      	str	r3, [r4, #80]	@ 0x50
 80278b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80278b8:	015b      	lsls	r3, r3, #5
 80278ba:	6563      	str	r3, [r4, #84]	@ 0x54
 80278bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80278c0:	015b      	lsls	r3, r3, #5
 80278c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80278c4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80278c8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80278cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80278d0:	b002      	add	sp, #8
 80278d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278d6:	bf00      	nop
 80278d8:	0802d854 	.word	0x0802d854

080278dc <_ZN8touchgfx6Canvas5closeEv>:
 80278dc:	b538      	push	{r3, r4, r5, lr}
 80278de:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80278e2:	4604      	mov	r4, r0
 80278e4:	b193      	cbz	r3, 802790c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80278e6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80278ea:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80278ee:	4213      	tst	r3, r2
 80278f0:	d10c      	bne.n	802790c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80278f2:	f100 0514 	add.w	r5, r0, #20
 80278f6:	b123      	cbz	r3, 8027902 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80278f8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80278fc:	4628      	mov	r0, r5
 80278fe:	f7ff fea3 	bl	8027648 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027902:	4628      	mov	r0, r5
 8027904:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8027908:	f7ff fe9e 	bl	8027648 <_ZN8touchgfx10Rasterizer6lineToEii>
 802790c:	2300      	movs	r3, #0
 802790e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8027912:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8027916:	4298      	cmp	r0, r3
 8027918:	bf34      	ite	cc
 802791a:	2000      	movcc	r0, #0
 802791c:	2001      	movcs	r0, #1
 802791e:	bd38      	pop	{r3, r4, r5, pc}

08027920 <_ZN8touchgfx6Canvas6renderEh>:
 8027920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8027924:	7a85      	ldrb	r5, [r0, #10]
 8027926:	4604      	mov	r4, r0
 8027928:	4369      	muls	r1, r5
 802792a:	1c4d      	adds	r5, r1, #1
 802792c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027930:	122d      	asrs	r5, r5, #8
 8027932:	f000 8098 	beq.w	8027a66 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8027936:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802793a:	2b00      	cmp	r3, #0
 802793c:	f000 8093 	beq.w	8027a66 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8027940:	f7ff ffcc 	bl	80278dc <_ZN8touchgfx6Canvas5closeEv>
 8027944:	4607      	mov	r7, r0
 8027946:	2800      	cmp	r0, #0
 8027948:	d045      	beq.n	80279d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802794a:	6860      	ldr	r0, [r4, #4]
 802794c:	4e47      	ldr	r6, [pc, #284]	@ (8027a6c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802794e:	6803      	ldr	r3, [r0, #0]
 8027950:	6837      	ldr	r7, [r6, #0]
 8027952:	689b      	ldr	r3, [r3, #8]
 8027954:	4798      	blx	r3
 8027956:	4601      	mov	r1, r0
 8027958:	4638      	mov	r0, r7
 802795a:	f7ec f90d 	bl	8013b78 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802795e:	4607      	mov	r7, r0
 8027960:	f7df ff2a 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8027964:	6803      	ldr	r3, [r0, #0]
 8027966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027968:	4798      	blx	r3
 802796a:	4680      	mov	r8, r0
 802796c:	f7df ff24 	bl	80077b8 <_ZN8touchgfx3HAL3lcdEv>
 8027970:	6803      	ldr	r3, [r0, #0]
 8027972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027974:	4798      	blx	r3
 8027976:	280b      	cmp	r0, #11
 8027978:	d85a      	bhi.n	8027a30 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802797a:	e8df f000 	tbb	[pc, r0]
 802797e:	5b50      	.short	0x5b50
 8027980:	3059066b 	.word	0x3059066b
 8027984:	64646440 	.word	0x64646440
 8027988:	6464      	.short	0x6464
 802798a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802798e:	2208      	movs	r2, #8
 8027990:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027994:	fb91 f2f2 	sdiv	r2, r1, r2
 8027998:	fb08 2303 	mla	r3, r8, r3, r2
 802799c:	441f      	add	r7, r3
 802799e:	424b      	negs	r3, r1
 80279a0:	f001 0107 	and.w	r1, r1, #7
 80279a4:	f003 0307 	and.w	r3, r3, #7
 80279a8:	bf58      	it	pl
 80279aa:	4259      	negpl	r1, r3
 80279ac:	b2c9      	uxtb	r1, r1
 80279ae:	b2ed      	uxtb	r5, r5
 80279b0:	463a      	mov	r2, r7
 80279b2:	fa0f f388 	sxth.w	r3, r8
 80279b6:	f104 0014 	add.w	r0, r4, #20
 80279ba:	e9cd 1500 	strd	r1, r5, [sp]
 80279be:	6861      	ldr	r1, [r4, #4]
 80279c0:	f7ff fe4e 	bl	8027660 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80279c4:	4607      	mov	r7, r0
 80279c6:	6860      	ldr	r0, [r4, #4]
 80279c8:	6803      	ldr	r3, [r0, #0]
 80279ca:	691b      	ldr	r3, [r3, #16]
 80279cc:	4798      	blx	r3
 80279ce:	6830      	ldr	r0, [r6, #0]
 80279d0:	6803      	ldr	r3, [r0, #0]
 80279d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80279d4:	4798      	blx	r3
 80279d6:	4638      	mov	r0, r7
 80279d8:	b002      	add	sp, #8
 80279da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80279de:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80279e2:	2204      	movs	r2, #4
 80279e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80279e8:	fb91 f2f2 	sdiv	r2, r1, r2
 80279ec:	fb08 2303 	mla	r3, r8, r3, r2
 80279f0:	441f      	add	r7, r3
 80279f2:	424b      	negs	r3, r1
 80279f4:	f001 0103 	and.w	r1, r1, #3
 80279f8:	f003 0303 	and.w	r3, r3, #3
 80279fc:	e7d4      	b.n	80279a8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80279fe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8027a02:	2202      	movs	r2, #2
 8027a04:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027a08:	2900      	cmp	r1, #0
 8027a0a:	fb91 f2f2 	sdiv	r2, r1, r2
 8027a0e:	f001 0101 	and.w	r1, r1, #1
 8027a12:	fb08 2303 	mla	r3, r8, r3, r2
 8027a16:	bfb8      	it	lt
 8027a18:	4249      	neglt	r1, r1
 8027a1a:	441f      	add	r7, r3
 8027a1c:	e7c6      	b.n	80279ac <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8027a1e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a26:	fb08 f303 	mul.w	r3, r8, r3
 8027a2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8027a2e:	441f      	add	r7, r3
 8027a30:	2100      	movs	r1, #0
 8027a32:	e7bc      	b.n	80279ae <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8027a34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027a38:	2103      	movs	r1, #3
 8027a3a:	fb08 f203 	mul.w	r2, r8, r3
 8027a3e:	89a3      	ldrh	r3, [r4, #12]
 8027a40:	fb13 2301 	smlabb	r3, r3, r1, r2
 8027a44:	e7f3      	b.n	8027a2e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8027a46:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a4e:	fb08 2303 	mla	r3, r8, r3, r2
 8027a52:	e7ec      	b.n	8027a2e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8027a54:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a5c:	fb08 f303 	mul.w	r3, r8, r3
 8027a60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8027a64:	e7e3      	b.n	8027a2e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8027a66:	2701      	movs	r7, #1
 8027a68:	e7b5      	b.n	80279d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8027a6a:	bf00      	nop
 8027a6c:	24028520 	.word	0x24028520

08027a70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8027a70:	4b06      	ldr	r3, [pc, #24]	@ (8027a8c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8027a72:	b510      	push	{r4, lr}
 8027a74:	781b      	ldrb	r3, [r3, #0]
 8027a76:	2b01      	cmp	r3, #1
 8027a78:	d107      	bne.n	8027a8a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8027a7a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8027a7e:	680b      	ldr	r3, [r1, #0]
 8027a80:	6814      	ldr	r4, [r2, #0]
 8027a82:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8027a86:	6013      	str	r3, [r2, #0]
 8027a88:	600c      	str	r4, [r1, #0]
 8027a8a:	bd10      	pop	{r4, pc}
 8027a8c:	24028518 	.word	0x24028518

08027a90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8027a90:	b513      	push	{r0, r1, r4, lr}
 8027a92:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8027a96:	4604      	mov	r4, r0
 8027a98:	e9cd 2100 	strd	r2, r1, [sp]
 8027a9c:	b9a3      	cbnz	r3, 8027ac8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8027a9e:	466a      	mov	r2, sp
 8027aa0:	a901      	add	r1, sp, #4
 8027aa2:	4620      	mov	r0, r4
 8027aa4:	f7ff ffe4 	bl	8027a70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027aa8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027aaa:	9901      	ldr	r1, [sp, #4]
 8027aac:	9a00      	ldr	r2, [sp, #0]
 8027aae:	1ac9      	subs	r1, r1, r3
 8027ab0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027ab2:	1ad2      	subs	r2, r2, r3
 8027ab4:	9101      	str	r1, [sp, #4]
 8027ab6:	2a00      	cmp	r2, #0
 8027ab8:	9200      	str	r2, [sp, #0]
 8027aba:	da0b      	bge.n	8027ad4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8027abc:	2301      	movs	r3, #1
 8027abe:	2900      	cmp	r1, #0
 8027ac0:	da0e      	bge.n	8027ae0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8027ac2:	f043 0304 	orr.w	r3, r3, #4
 8027ac6:	e013      	b.n	8027af0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8027ac8:	f7ff ff08 	bl	80278dc <_ZN8touchgfx6Canvas5closeEv>
 8027acc:	2800      	cmp	r0, #0
 8027ace:	d1e6      	bne.n	8027a9e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8027ad0:	b002      	add	sp, #8
 8027ad2:	bd10      	pop	{r4, pc}
 8027ad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8027ad6:	429a      	cmp	r2, r3
 8027ad8:	bfac      	ite	ge
 8027ada:	2302      	movge	r3, #2
 8027adc:	2300      	movlt	r3, #0
 8027ade:	e7ee      	b.n	8027abe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8027ae0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8027ae2:	4281      	cmp	r1, r0
 8027ae4:	bfac      	ite	ge
 8027ae6:	2008      	movge	r0, #8
 8027ae8:	2000      	movlt	r0, #0
 8027aea:	4318      	orrs	r0, r3
 8027aec:	b2c3      	uxtb	r3, r0
 8027aee:	b158      	cbz	r0, 8027b08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8027af0:	2200      	movs	r2, #0
 8027af2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8027af6:	9901      	ldr	r1, [sp, #4]
 8027af8:	9a00      	ldr	r2, [sp, #0]
 8027afa:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8027afc:	6722      	str	r2, [r4, #112]	@ 0x70
 8027afe:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8027b02:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8027b06:	e7e3      	b.n	8027ad0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8027b08:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8027b0c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8027b10:	4298      	cmp	r0, r3
 8027b12:	d803      	bhi.n	8027b1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8027b14:	f104 0014 	add.w	r0, r4, #20
 8027b18:	f7f0 f8cc 	bl	8017cb4 <_ZN8touchgfx7Outline6moveToEii>
 8027b1c:	2301      	movs	r3, #1
 8027b1e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8027b22:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8027b26:	2300      	movs	r3, #0
 8027b28:	e7e5      	b.n	8027af6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08027b2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8027b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027b2c:	ab02      	add	r3, sp, #8
 8027b2e:	4604      	mov	r4, r0
 8027b30:	9101      	str	r1, [sp, #4]
 8027b32:	a901      	add	r1, sp, #4
 8027b34:	f843 2d08 	str.w	r2, [r3, #-8]!
 8027b38:	461a      	mov	r2, r3
 8027b3a:	f7ff ff99 	bl	8027a70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027b3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027b40:	9901      	ldr	r1, [sp, #4]
 8027b42:	9a00      	ldr	r2, [sp, #0]
 8027b44:	1ac9      	subs	r1, r1, r3
 8027b46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027b48:	1ad2      	subs	r2, r2, r3
 8027b4a:	9101      	str	r1, [sp, #4]
 8027b4c:	2a00      	cmp	r2, #0
 8027b4e:	9200      	str	r2, [sp, #0]
 8027b50:	db1c      	blt.n	8027b8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8027b52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8027b54:	429a      	cmp	r2, r3
 8027b56:	bfac      	ite	ge
 8027b58:	2002      	movge	r0, #2
 8027b5a:	2000      	movlt	r0, #0
 8027b5c:	2900      	cmp	r1, #0
 8027b5e:	db17      	blt.n	8027b90 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8027b60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8027b62:	4299      	cmp	r1, r3
 8027b64:	bfac      	ite	ge
 8027b66:	2308      	movge	r3, #8
 8027b68:	2300      	movlt	r3, #0
 8027b6a:	4303      	orrs	r3, r0
 8027b6c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8027b70:	b2dd      	uxtb	r5, r3
 8027b72:	b978      	cbnz	r0, 8027b94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8027b74:	f104 0014 	add.w	r0, r4, #20
 8027b78:	f7ff fd66 	bl	8027648 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027b7c:	9b01      	ldr	r3, [sp, #4]
 8027b7e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8027b82:	6623      	str	r3, [r4, #96]	@ 0x60
 8027b84:	9b00      	ldr	r3, [sp, #0]
 8027b86:	6663      	str	r3, [r4, #100]	@ 0x64
 8027b88:	b002      	add	sp, #8
 8027b8a:	bd70      	pop	{r4, r5, r6, pc}
 8027b8c:	2001      	movs	r0, #1
 8027b8e:	e7e5      	b.n	8027b5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8027b90:	2304      	movs	r3, #4
 8027b92:	e7ea      	b.n	8027b6a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8027b94:	b113      	cbz	r3, 8027b9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8027b96:	ea10 0305 	ands.w	r3, r0, r5
 8027b9a:	d11c      	bne.n	8027bd6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8027b9c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8027ba0:	f104 0614 	add.w	r6, r4, #20
 8027ba4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8027ba8:	b98b      	cbnz	r3, 8027bce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8027baa:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8027bae:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8027bb2:	4298      	cmp	r0, r3
 8027bb4:	d802      	bhi.n	8027bbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8027bb6:	4630      	mov	r0, r6
 8027bb8:	f7f0 f87c 	bl	8017cb4 <_ZN8touchgfx7Outline6moveToEii>
 8027bbc:	2301      	movs	r3, #1
 8027bbe:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8027bc2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8027bc6:	4630      	mov	r0, r6
 8027bc8:	e9dd 2100 	ldrd	r2, r1, [sp]
 8027bcc:	e7d4      	b.n	8027b78 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8027bce:	4630      	mov	r0, r6
 8027bd0:	f7ff fd3a 	bl	8027648 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027bd4:	e7f7      	b.n	8027bc6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8027bd6:	461d      	mov	r5, r3
 8027bd8:	e7d0      	b.n	8027b7c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08027bdc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8027bdc:	b538      	push	{r3, r4, r5, lr}
 8027bde:	ed2d 8b10 	vpush	{d8-d15}
 8027be2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8027be6:	4605      	mov	r5, r0
 8027be8:	eeb0 ca40 	vmov.f32	s24, s0
 8027bec:	460c      	mov	r4, r1
 8027bee:	eef0 ca60 	vmov.f32	s25, s1
 8027bf2:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8027d50 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8027bf6:	eeb0 da41 	vmov.f32	s26, s2
 8027bfa:	eef0 da61 	vmov.f32	s27, s3
 8027bfe:	eeb0 ea42 	vmov.f32	s28, s4
 8027c02:	eef0 ea62 	vmov.f32	s29, s5
 8027c06:	eef0 aa6b 	vmov.f32	s21, s23
 8027c0a:	2c08      	cmp	r4, #8
 8027c0c:	d86e      	bhi.n	8027cec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8027c0e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8027c12:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8027c16:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8027c1a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8027c1e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8027c22:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8027c26:	ee7c faad 	vadd.f32	s31, s25, s27
 8027c2a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027c2e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8027c32:	ee3d aaae 	vadd.f32	s20, s27, s29
 8027c36:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8027c3a:	ee6f faab 	vmul.f32	s31, s31, s23
 8027c3e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8027c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027c46:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8027c4a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8027c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c52:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8027c56:	ee68 8aab 	vmul.f32	s17, s17, s23
 8027c5a:	bf48      	it	mi
 8027c5c:	eef1 7a67 	vnegmi.f32	s15, s15
 8027c60:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8027c64:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8027c68:	eef4 7acb 	vcmpe.f32	s15, s22
 8027c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c70:	dd3f      	ble.n	8027cf2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8027c72:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027c76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027c7a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8027c7e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8027c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8027c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c8a:	d847      	bhi.n	8027d1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8027c8c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8027c90:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8027c94:	f000 fa57 	bl	8028146 <atan2f>
 8027c98:	eeb0 8a40 	vmov.f32	s16, s0
 8027c9c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8027ca0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8027ca4:	f000 fa4f 	bl	8028146 <atan2f>
 8027ca8:	ee38 0a40 	vsub.f32	s0, s16, s0
 8027cac:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8027d54 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8027cb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cb8:	bf48      	it	mi
 8027cba:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027cbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cc6:	bfa4      	itt	ge
 8027cc8:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8027d58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8027ccc:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8027cd0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8027d5c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8027cd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cdc:	d51e      	bpl.n	8027d1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8027cde:	eef0 0a49 	vmov.f32	s1, s18
 8027ce2:	4628      	mov	r0, r5
 8027ce4:	eeb0 0a68 	vmov.f32	s0, s17
 8027ce8:	f7ec fdc6 	bl	8014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027cec:	ecbd 8b10 	vpop	{d8-d15}
 8027cf0:	bd38      	pop	{r3, r4, r5, pc}
 8027cf2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8027cf6:	eeb0 7a68 	vmov.f32	s14, s17
 8027cfa:	eef0 6a49 	vmov.f32	s13, s18
 8027cfe:	eea7 7aea 	vfms.f32	s14, s15, s21
 8027d02:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8027d06:	eee7 6aea 	vfms.f32	s13, s15, s21
 8027d0a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8027d0e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8027d12:	eef4 7ac6 	vcmpe.f32	s15, s12
 8027d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d1a:	d9e0      	bls.n	8027cde <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8027d1c:	3401      	adds	r4, #1
 8027d1e:	eef0 0a6c 	vmov.f32	s1, s25
 8027d22:	eeb0 0a4c 	vmov.f32	s0, s24
 8027d26:	4628      	mov	r0, r5
 8027d28:	4621      	mov	r1, r4
 8027d2a:	eef0 2a49 	vmov.f32	s5, s18
 8027d2e:	eeb0 2a68 	vmov.f32	s4, s17
 8027d32:	eef0 1a6f 	vmov.f32	s3, s31
 8027d36:	eeb0 1a4f 	vmov.f32	s2, s30
 8027d3a:	f7ff ff4f 	bl	8027bdc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8027d3e:	eef0 da4a 	vmov.f32	s27, s20
 8027d42:	eeb0 da69 	vmov.f32	s26, s19
 8027d46:	eef0 ca49 	vmov.f32	s25, s18
 8027d4a:	eeb0 ca68 	vmov.f32	s24, s17
 8027d4e:	e75c      	b.n	8027c0a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8027d50:	2edbe6ff 	.word	0x2edbe6ff
 8027d54:	40490fdb 	.word	0x40490fdb
 8027d58:	40c90fdb 	.word	0x40c90fdb
 8027d5c:	3dcccccd 	.word	0x3dcccccd

08027d60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8027d60:	b530      	push	{r4, r5, lr}
 8027d62:	ed2d 8b10 	vpush	{d8-d15}
 8027d66:	eef0 8a40 	vmov.f32	s17, s0
 8027d6a:	b085      	sub	sp, #20
 8027d6c:	eef0 9a60 	vmov.f32	s19, s1
 8027d70:	4604      	mov	r4, r0
 8027d72:	eef0 fa41 	vmov.f32	s31, s2
 8027d76:	460d      	mov	r5, r1
 8027d78:	eeb0 fa61 	vmov.f32	s30, s3
 8027d7c:	eef0 ba42 	vmov.f32	s23, s4
 8027d80:	eeb0 ca62 	vmov.f32	s24, s5
 8027d84:	eef0 aa43 	vmov.f32	s21, s6
 8027d88:	eeb0 ba63 	vmov.f32	s22, s7
 8027d8c:	2d08      	cmp	r5, #8
 8027d8e:	f200 8113 	bhi.w	8027fb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8027d92:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8027d96:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8027d9a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8027d9e:	ee38 daaf 	vadd.f32	s26, s17, s31
 8027da2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8027da6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8027daa:	ee2d da27 	vmul.f32	s26, s26, s15
 8027dae:	ed8d 6a01 	vstr	s12, [sp, #4]
 8027db2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8027db6:	ee6c caa7 	vmul.f32	s25, s25, s15
 8027dba:	eeb0 ea4d 	vmov.f32	s28, s26
 8027dbe:	ee79 da8f 	vadd.f32	s27, s19, s30
 8027dc2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8027dc6:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8027dca:	ee66 6a27 	vmul.f32	s13, s12, s15
 8027dce:	ee6d daa7 	vmul.f32	s27, s27, s15
 8027dd2:	edcd 6a03 	vstr	s13, [sp, #12]
 8027dd6:	eef0 6a6c 	vmov.f32	s13, s25
 8027dda:	eef0 ea6d 	vmov.f32	s29, s27
 8027dde:	ee2e ea27 	vmul.f32	s28, s28, s15
 8027de2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8027de6:	eee7 ea27 	vfma.f32	s29, s14, s15
 8027dea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8027dee:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8027df2:	eef0 6a67 	vmov.f32	s13, s15
 8027df6:	ed8d 7a02 	vstr	s14, [sp, #8]
 8027dfa:	ed9d 7a03 	vldr	s14, [sp, #12]
 8027dfe:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8027e02:	ed9d 7a02 	vldr	s14, [sp, #8]
 8027e06:	ee3e aa87 	vadd.f32	s20, s29, s14
 8027e0a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8027e0e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8027e12:	2d00      	cmp	r5, #0
 8027e14:	f000 810b 	beq.w	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027e18:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8027e1c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8028074 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8027e20:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8027e24:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8027e28:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8027e2c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8027e30:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8027e34:	eea6 7a27 	vfma.f32	s14, s12, s15
 8027e38:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8027e3c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8027e40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027e44:	eea5 6a27 	vfma.f32	s12, s10, s15
 8027e48:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8027e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e50:	bf48      	it	mi
 8027e52:	eeb1 7a47 	vnegmi.f32	s14, s14
 8027e56:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8027e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e5e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8027e62:	bf48      	it	mi
 8027e64:	eeb1 6a46 	vnegmi.f32	s12, s12
 8027e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e6c:	f340 80a8 	ble.w	8027fc0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8027e70:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8027e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e78:	dd5a      	ble.n	8027f30 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8027e7a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8027e7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8027e82:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8027e86:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027e8a:	ee65 7a85 	vmul.f32	s15, s11, s10
 8027e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e96:	f200 80ca 	bhi.w	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027e9a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027e9e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8027ea2:	f000 f950 	bl	8028146 <atan2f>
 8027ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8027eaa:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8027eae:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8027eb2:	f000 f948 	bl	8028146 <atan2f>
 8027eb6:	ee38 fa40 	vsub.f32	s30, s16, s0
 8027eba:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8027ebe:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8027ec2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8027ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eca:	bf48      	it	mi
 8027ecc:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8027ed0:	f000 f939 	bl	8028146 <atan2f>
 8027ed4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8027ed8:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8028078 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027edc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ee4:	eeb4 fae7 	vcmpe.f32	s30, s15
 8027ee8:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8028078 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027eec:	bf48      	it	mi
 8027eee:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ef6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027efa:	eddf 7a60 	vldr	s15, [pc, #384]	@ 802807c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8027efe:	bfa4      	itt	ge
 8027f00:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8028080 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027f04:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8027f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f0c:	bfa4      	itt	ge
 8027f0e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8028080 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027f12:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8027f16:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8027f1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f22:	f140 8084 	bpl.w	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027f26:	eef0 0a4a 	vmov.f32	s1, s20
 8027f2a:	eeb0 0a49 	vmov.f32	s0, s18
 8027f2e:	e040      	b.n	8027fb2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8027f30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027f34:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027f38:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8027f3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f48:	d871      	bhi.n	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027f4a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027f4e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8027f52:	f000 f8f8 	bl	8028146 <atan2f>
 8027f56:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8027f5a:	eeb0 8a40 	vmov.f32	s16, s0
 8027f5e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8027f62:	f000 f8f0 	bl	8028146 <atan2f>
 8027f66:	ee38 0a40 	vsub.f32	s0, s16, s0
 8027f6a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8028078 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027f6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f76:	bf48      	it	mi
 8027f78:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027f7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f84:	bfa4      	itt	ge
 8027f86:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8028080 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027f8a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8027f8e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802807c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8027f92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f9a:	d548      	bpl.n	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027f9c:	eef0 0a4f 	vmov.f32	s1, s30
 8027fa0:	4620      	mov	r0, r4
 8027fa2:	eeb0 0a6f 	vmov.f32	s0, s31
 8027fa6:	f7ec fc67 	bl	8014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027faa:	eef0 0a4c 	vmov.f32	s1, s24
 8027fae:	eeb0 0a6b 	vmov.f32	s0, s23
 8027fb2:	4620      	mov	r0, r4
 8027fb4:	f7ec fc60 	bl	8014878 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027fb8:	b005      	add	sp, #20
 8027fba:	ecbd 8b10 	vpop	{d8-d15}
 8027fbe:	bd30      	pop	{r4, r5, pc}
 8027fc0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8028074 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8027fc4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8027fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fcc:	dd19      	ble.n	8028002 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8027fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027fd2:	ee26 7a06 	vmul.f32	s14, s12, s12
 8027fd6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8027fda:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fe6:	d822      	bhi.n	802802e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027fe8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8027fec:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8027ff0:	f000 f8a9 	bl	8028146 <atan2f>
 8027ff4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027ff8:	eeb0 8a40 	vmov.f32	s16, s0
 8027ffc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028000:	e7af      	b.n	8027f62 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8028002:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8028006:	eeb0 7a49 	vmov.f32	s14, s18
 802800a:	eeb0 6a4a 	vmov.f32	s12, s20
 802800e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8028012:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8028016:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802801a:	ee66 7a06 	vmul.f32	s15, s12, s12
 802801e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8028022:	eef4 7ac5 	vcmpe.f32	s15, s10
 8028026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802802a:	f67f af7c 	bls.w	8027f26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802802e:	3501      	adds	r5, #1
 8028030:	eef0 0a69 	vmov.f32	s1, s19
 8028034:	eeb0 0a68 	vmov.f32	s0, s17
 8028038:	4620      	mov	r0, r4
 802803a:	4629      	mov	r1, r5
 802803c:	eef0 3a4a 	vmov.f32	s7, s20
 8028040:	eeb0 3a49 	vmov.f32	s6, s18
 8028044:	eef0 2a6e 	vmov.f32	s5, s29
 8028048:	eeb0 2a4e 	vmov.f32	s4, s28
 802804c:	eef0 1a6d 	vmov.f32	s3, s27
 8028050:	eeb0 1a4d 	vmov.f32	s2, s26
 8028054:	f7ff fe84 	bl	8027d60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8028058:	eeb0 ca6c 	vmov.f32	s24, s25
 802805c:	eddd ba01 	vldr	s23, [sp, #4]
 8028060:	eef0 9a4a 	vmov.f32	s19, s20
 8028064:	ed9d fa02 	vldr	s30, [sp, #8]
 8028068:	eef0 8a49 	vmov.f32	s17, s18
 802806c:	eddd fa03 	vldr	s31, [sp, #12]
 8028070:	e68c      	b.n	8027d8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8028072:	bf00      	nop
 8028074:	2edbe6ff 	.word	0x2edbe6ff
 8028078:	40490fdb 	.word	0x40490fdb
 802807c:	3dcccccd 	.word	0x3dcccccd
 8028080:	40c90fdb 	.word	0x40c90fdb

08028084 <_ZN8touchgfx6CanvasD1Ev>:
 8028084:	4b04      	ldr	r3, [pc, #16]	@ (8028098 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8028086:	b510      	push	{r4, lr}
 8028088:	4604      	mov	r4, r0
 802808a:	f840 3b14 	str.w	r3, [r0], #20
 802808e:	f7ef f919 	bl	80172c4 <_ZN8touchgfx7OutlineD1Ev>
 8028092:	4620      	mov	r0, r4
 8028094:	bd10      	pop	{r4, pc}
 8028096:	bf00      	nop
 8028098:	0802d854 	.word	0x0802d854

0802809c <_ZN8touchgfx6CanvasD0Ev>:
 802809c:	b510      	push	{r4, lr}
 802809e:	4604      	mov	r4, r0
 80280a0:	f7ff fff0 	bl	8028084 <_ZN8touchgfx6CanvasD1Ev>
 80280a4:	2174      	movs	r1, #116	@ 0x74
 80280a6:	4620      	mov	r0, r4
 80280a8:	f000 f826 	bl	80280f8 <_ZdlPvj>
 80280ac:	4620      	mov	r0, r4
 80280ae:	bd10      	pop	{r4, pc}

080280b0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80280b0:	790b      	ldrb	r3, [r1, #4]
 80280b2:	2b00      	cmp	r3, #0
 80280b4:	bf0c      	ite	eq
 80280b6:	2301      	moveq	r3, #1
 80280b8:	2300      	movne	r3, #0
 80280ba:	b570      	push	{r4, r5, r6, lr}
 80280bc:	4604      	mov	r4, r0
 80280be:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80280c2:	460e      	mov	r6, r1
 80280c4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80280c8:	d109      	bne.n	80280de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80280ca:	b14d      	cbz	r5, 80280e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80280cc:	7933      	ldrb	r3, [r6, #4]
 80280ce:	2b01      	cmp	r3, #1
 80280d0:	d10c      	bne.n	80280ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80280d2:	6823      	ldr	r3, [r4, #0]
 80280d4:	4620      	mov	r0, r4
 80280d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80280d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80280dc:	4718      	bx	r3
 80280de:	b12d      	cbz	r5, 80280ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80280e0:	6823      	ldr	r3, [r4, #0]
 80280e2:	4620      	mov	r0, r4
 80280e4:	695b      	ldr	r3, [r3, #20]
 80280e6:	4798      	blx	r3
 80280e8:	2d00      	cmp	r5, #0
 80280ea:	d1ef      	bne.n	80280cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80280ec:	bd70      	pop	{r4, r5, r6, pc}

080280ee <__aeabi_atexit>:
 80280ee:	460b      	mov	r3, r1
 80280f0:	4601      	mov	r1, r0
 80280f2:	4618      	mov	r0, r3
 80280f4:	f000 bc5a 	b.w	80289ac <__cxa_atexit>

080280f8 <_ZdlPvj>:
 80280f8:	f000 b812 	b.w	8028120 <_ZdlPv>

080280fc <__cxa_guard_acquire>:
 80280fc:	6802      	ldr	r2, [r0, #0]
 80280fe:	07d2      	lsls	r2, r2, #31
 8028100:	4603      	mov	r3, r0
 8028102:	d405      	bmi.n	8028110 <__cxa_guard_acquire+0x14>
 8028104:	7842      	ldrb	r2, [r0, #1]
 8028106:	b102      	cbz	r2, 802810a <__cxa_guard_acquire+0xe>
 8028108:	deff      	udf	#255	@ 0xff
 802810a:	2001      	movs	r0, #1
 802810c:	7058      	strb	r0, [r3, #1]
 802810e:	4770      	bx	lr
 8028110:	2000      	movs	r0, #0
 8028112:	4770      	bx	lr

08028114 <__cxa_guard_release>:
 8028114:	2301      	movs	r3, #1
 8028116:	6003      	str	r3, [r0, #0]
 8028118:	4770      	bx	lr

0802811a <__cxa_pure_virtual>:
 802811a:	b508      	push	{r3, lr}
 802811c:	f000 f80e 	bl	802813c <_ZSt9terminatev>

08028120 <_ZdlPv>:
 8028120:	f000 bb8e 	b.w	8028840 <free>

08028124 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028124:	b508      	push	{r3, lr}
 8028126:	4780      	blx	r0
 8028128:	f000 fb57 	bl	80287da <abort>

0802812c <_ZSt13get_terminatev>:
 802812c:	4b02      	ldr	r3, [pc, #8]	@ (8028138 <_ZSt13get_terminatev+0xc>)
 802812e:	6818      	ldr	r0, [r3, #0]
 8028130:	f3bf 8f5b 	dmb	ish
 8028134:	4770      	bx	lr
 8028136:	bf00      	nop
 8028138:	240000d8 	.word	0x240000d8

0802813c <_ZSt9terminatev>:
 802813c:	b508      	push	{r3, lr}
 802813e:	f7ff fff5 	bl	802812c <_ZSt13get_terminatev>
 8028142:	f7ff ffef 	bl	8028124 <_ZN10__cxxabiv111__terminateEPFvvE>

08028146 <atan2f>:
 8028146:	f000 b9cf 	b.w	80284e8 <__ieee754_atan2f>
	...

0802814c <sqrtf>:
 802814c:	b508      	push	{r3, lr}
 802814e:	ed2d 8b02 	vpush	{d8}
 8028152:	eeb0 8a40 	vmov.f32	s16, s0
 8028156:	f000 f9c4 	bl	80284e2 <__ieee754_sqrtf>
 802815a:	eeb4 8a48 	vcmp.f32	s16, s16
 802815e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028162:	d60c      	bvs.n	802817e <sqrtf+0x32>
 8028164:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8028184 <sqrtf+0x38>
 8028168:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802816c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028170:	d505      	bpl.n	802817e <sqrtf+0x32>
 8028172:	f000 fe89 	bl	8028e88 <__errno>
 8028176:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802817a:	2321      	movs	r3, #33	@ 0x21
 802817c:	6003      	str	r3, [r0, #0]
 802817e:	ecbd 8b02 	vpop	{d8}
 8028182:	bd08      	pop	{r3, pc}
 8028184:	00000000 	.word	0x00000000

08028188 <sinf_poly>:
 8028188:	07cb      	lsls	r3, r1, #31
 802818a:	d412      	bmi.n	80281b2 <sinf_poly+0x2a>
 802818c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8028190:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8028194:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8028198:	eea6 7b01 	vfma.f64	d7, d6, d1
 802819c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80281a0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80281a4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80281a8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80281ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80281b0:	4770      	bx	lr
 80281b2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80281b6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80281ba:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80281be:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80281c2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80281c6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80281ca:	eea1 0b06 	vfma.f64	d0, d1, d6
 80281ce:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80281d2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80281d6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80281da:	e7e5      	b.n	80281a8 <sinf_poly+0x20>
 80281dc:	0000      	movs	r0, r0
	...

080281e0 <sinf>:
 80281e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80281e2:	ee10 4a10 	vmov	r4, s0
 80281e6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80281ea:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80281ee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80281f2:	eef0 7a40 	vmov.f32	s15, s0
 80281f6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80281fa:	d218      	bcs.n	802822e <sinf+0x4e>
 80281fc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8028200:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8028204:	d20a      	bcs.n	802821c <sinf+0x3c>
 8028206:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802820a:	d103      	bne.n	8028214 <sinf+0x34>
 802820c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8028210:	ed8d 1a01 	vstr	s2, [sp, #4]
 8028214:	eeb0 0a67 	vmov.f32	s0, s15
 8028218:	b003      	add	sp, #12
 802821a:	bd30      	pop	{r4, r5, pc}
 802821c:	483a      	ldr	r0, [pc, #232]	@ (8028308 <sinf+0x128>)
 802821e:	eeb0 0b46 	vmov.f64	d0, d6
 8028222:	2100      	movs	r1, #0
 8028224:	b003      	add	sp, #12
 8028226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802822a:	f7ff bfad 	b.w	8028188 <sinf_poly>
 802822e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8028232:	4293      	cmp	r3, r2
 8028234:	d824      	bhi.n	8028280 <sinf+0xa0>
 8028236:	4b34      	ldr	r3, [pc, #208]	@ (8028308 <sinf+0x128>)
 8028238:	ed93 7b08 	vldr	d7, [r3, #32]
 802823c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028240:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028244:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8028248:	ee17 1a90 	vmov	r1, s15
 802824c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8028250:	1609      	asrs	r1, r1, #24
 8028252:	ee07 1a90 	vmov	s15, r1
 8028256:	f001 0203 	and.w	r2, r1, #3
 802825a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802825e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8028262:	ed92 0b00 	vldr	d0, [r2]
 8028266:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802826a:	f011 0f02 	tst.w	r1, #2
 802826e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8028272:	bf08      	it	eq
 8028274:	4618      	moveq	r0, r3
 8028276:	ee26 1b06 	vmul.f64	d1, d6, d6
 802827a:	ee20 0b06 	vmul.f64	d0, d0, d6
 802827e:	e7d1      	b.n	8028224 <sinf+0x44>
 8028280:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8028284:	d237      	bcs.n	80282f6 <sinf+0x116>
 8028286:	4921      	ldr	r1, [pc, #132]	@ (802830c <sinf+0x12c>)
 8028288:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802828c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8028290:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8028294:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8028298:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802829c:	6a10      	ldr	r0, [r2, #32]
 802829e:	6912      	ldr	r2, [r2, #16]
 80282a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80282a4:	40ab      	lsls	r3, r5
 80282a6:	fba0 5003 	umull	r5, r0, r0, r3
 80282aa:	4359      	muls	r1, r3
 80282ac:	fbe3 0102 	umlal	r0, r1, r3, r2
 80282b0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80282b4:	0f9d      	lsrs	r5, r3, #30
 80282b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80282ba:	1ac9      	subs	r1, r1, r3
 80282bc:	f7d8 f9ee 	bl	800069c <__aeabi_l2d>
 80282c0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80282c4:	4b10      	ldr	r3, [pc, #64]	@ (8028308 <sinf+0x128>)
 80282c6:	f004 0203 	and.w	r2, r4, #3
 80282ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80282ce:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8028300 <sinf+0x120>
 80282d2:	ed92 0b00 	vldr	d0, [r2]
 80282d6:	ec41 0b17 	vmov	d7, r0, r1
 80282da:	f014 0f02 	tst.w	r4, #2
 80282de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80282e2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80282e6:	4629      	mov	r1, r5
 80282e8:	bf08      	it	eq
 80282ea:	4618      	moveq	r0, r3
 80282ec:	ee27 1b07 	vmul.f64	d1, d7, d7
 80282f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80282f4:	e796      	b.n	8028224 <sinf+0x44>
 80282f6:	b003      	add	sp, #12
 80282f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80282fc:	f000 b8e2 	b.w	80284c4 <__math_invalidf>
 8028300:	54442d18 	.word	0x54442d18
 8028304:	3c1921fb 	.word	0x3c1921fb
 8028308:	0802d8c0 	.word	0x0802d8c0
 802830c:	0802d860 	.word	0x0802d860

08028310 <sinf_poly>:
 8028310:	07cb      	lsls	r3, r1, #31
 8028312:	d412      	bmi.n	802833a <sinf_poly+0x2a>
 8028314:	ee21 5b00 	vmul.f64	d5, d1, d0
 8028318:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802831c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8028320:	eea6 7b01 	vfma.f64	d7, d6, d1
 8028324:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8028328:	ee21 1b05 	vmul.f64	d1, d1, d5
 802832c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8028330:	eea7 0b01 	vfma.f64	d0, d7, d1
 8028334:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028338:	4770      	bx	lr
 802833a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802833e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8028342:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8028346:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802834a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802834e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8028352:	eea1 0b06 	vfma.f64	d0, d1, d6
 8028356:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802835a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802835e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8028362:	e7e5      	b.n	8028330 <sinf_poly+0x20>
 8028364:	0000      	movs	r0, r0
	...

08028368 <cosf>:
 8028368:	b538      	push	{r3, r4, r5, lr}
 802836a:	ee10 4a10 	vmov	r4, s0
 802836e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8028372:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8028376:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802837a:	d21f      	bcs.n	80283bc <cosf+0x54>
 802837c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8028380:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8028384:	f0c0 8082 	bcc.w	802848c <cosf+0x124>
 8028388:	ee27 4b07 	vmul.f64	d4, d7, d7
 802838c:	4b44      	ldr	r3, [pc, #272]	@ (80284a0 <cosf+0x138>)
 802838e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8028392:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8028396:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802839a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802839e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80283a2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80283a6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80283aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80283ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 80283b2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80283b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80283ba:	bd38      	pop	{r3, r4, r5, pc}
 80283bc:	f240 422e 	movw	r2, #1070	@ 0x42e
 80283c0:	4293      	cmp	r3, r2
 80283c2:	d829      	bhi.n	8028418 <cosf+0xb0>
 80283c4:	4b36      	ldr	r3, [pc, #216]	@ (80284a0 <cosf+0x138>)
 80283c6:	ed93 6b08 	vldr	d6, [r3, #32]
 80283ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80283ce:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80283d2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80283d6:	ee16 1a90 	vmov	r1, s13
 80283da:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80283de:	1609      	asrs	r1, r1, #24
 80283e0:	ee06 1a90 	vmov	s13, r1
 80283e4:	f001 0203 	and.w	r2, r1, #3
 80283e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80283ec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80283f0:	ed92 0b00 	vldr	d0, [r2]
 80283f4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80283f8:	f011 0f02 	tst.w	r1, #2
 80283fc:	f081 0101 	eor.w	r1, r1, #1
 8028400:	eea5 7b46 	vfms.f64	d7, d5, d6
 8028404:	bf08      	it	eq
 8028406:	4618      	moveq	r0, r3
 8028408:	ee27 1b07 	vmul.f64	d1, d7, d7
 802840c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028410:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028414:	f7ff bf7c 	b.w	8028310 <sinf_poly>
 8028418:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802841c:	d232      	bcs.n	8028484 <cosf+0x11c>
 802841e:	4921      	ldr	r1, [pc, #132]	@ (80284a4 <cosf+0x13c>)
 8028420:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8028424:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8028428:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802842c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8028430:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028434:	6a10      	ldr	r0, [r2, #32]
 8028436:	6912      	ldr	r2, [r2, #16]
 8028438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802843c:	40ab      	lsls	r3, r5
 802843e:	fba0 5003 	umull	r5, r0, r0, r3
 8028442:	4359      	muls	r1, r3
 8028444:	fbe3 0102 	umlal	r0, r1, r3, r2
 8028448:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802844c:	0f9d      	lsrs	r5, r3, #30
 802844e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8028452:	1ac9      	subs	r1, r1, r3
 8028454:	f7d8 f922 	bl	800069c <__aeabi_l2d>
 8028458:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802845c:	4b10      	ldr	r3, [pc, #64]	@ (80284a0 <cosf+0x138>)
 802845e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8028498 <cosf+0x130>
 8028462:	ec41 0b17 	vmov	d7, r0, r1
 8028466:	f004 0203 	and.w	r2, r4, #3
 802846a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802846e:	ed92 0b00 	vldr	d0, [r2]
 8028472:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028476:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802847a:	f014 0f02 	tst.w	r4, #2
 802847e:	f085 0101 	eor.w	r1, r5, #1
 8028482:	e7bf      	b.n	8028404 <cosf+0x9c>
 8028484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028488:	f000 b81c 	b.w	80284c4 <__math_invalidf>
 802848c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028490:	e793      	b.n	80283ba <cosf+0x52>
 8028492:	bf00      	nop
 8028494:	f3af 8000 	nop.w
 8028498:	54442d18 	.word	0x54442d18
 802849c:	3c1921fb 	.word	0x3c1921fb
 80284a0:	0802d8c0 	.word	0x0802d8c0
 80284a4:	0802d860 	.word	0x0802d860

080284a8 <with_errnof>:
 80284a8:	b510      	push	{r4, lr}
 80284aa:	ed2d 8b02 	vpush	{d8}
 80284ae:	eeb0 8a40 	vmov.f32	s16, s0
 80284b2:	4604      	mov	r4, r0
 80284b4:	f000 fce8 	bl	8028e88 <__errno>
 80284b8:	eeb0 0a48 	vmov.f32	s0, s16
 80284bc:	ecbd 8b02 	vpop	{d8}
 80284c0:	6004      	str	r4, [r0, #0]
 80284c2:	bd10      	pop	{r4, pc}

080284c4 <__math_invalidf>:
 80284c4:	eef0 7a40 	vmov.f32	s15, s0
 80284c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80284cc:	eef4 7a67 	vcmp.f32	s15, s15
 80284d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80284d8:	d602      	bvs.n	80284e0 <__math_invalidf+0x1c>
 80284da:	2021      	movs	r0, #33	@ 0x21
 80284dc:	f7ff bfe4 	b.w	80284a8 <with_errnof>
 80284e0:	4770      	bx	lr

080284e2 <__ieee754_sqrtf>:
 80284e2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80284e6:	4770      	bx	lr

080284e8 <__ieee754_atan2f>:
 80284e8:	ee10 2a90 	vmov	r2, s1
 80284ec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80284f0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80284f4:	b510      	push	{r4, lr}
 80284f6:	eef0 7a40 	vmov.f32	s15, s0
 80284fa:	d806      	bhi.n	802850a <__ieee754_atan2f+0x22>
 80284fc:	ee10 0a10 	vmov	r0, s0
 8028500:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8028504:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8028508:	d904      	bls.n	8028514 <__ieee754_atan2f+0x2c>
 802850a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802850e:	eeb0 0a67 	vmov.f32	s0, s15
 8028512:	bd10      	pop	{r4, pc}
 8028514:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8028518:	d103      	bne.n	8028522 <__ieee754_atan2f+0x3a>
 802851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802851e:	f000 b881 	b.w	8028624 <atanf>
 8028522:	1794      	asrs	r4, r2, #30
 8028524:	f004 0402 	and.w	r4, r4, #2
 8028528:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802852c:	b93b      	cbnz	r3, 802853e <__ieee754_atan2f+0x56>
 802852e:	2c02      	cmp	r4, #2
 8028530:	d05c      	beq.n	80285ec <__ieee754_atan2f+0x104>
 8028532:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8028600 <__ieee754_atan2f+0x118>
 8028536:	2c03      	cmp	r4, #3
 8028538:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802853c:	e7e7      	b.n	802850e <__ieee754_atan2f+0x26>
 802853e:	b939      	cbnz	r1, 8028550 <__ieee754_atan2f+0x68>
 8028540:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8028604 <__ieee754_atan2f+0x11c>
 8028544:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8028608 <__ieee754_atan2f+0x120>
 8028548:	2800      	cmp	r0, #0
 802854a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802854e:	e7de      	b.n	802850e <__ieee754_atan2f+0x26>
 8028550:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8028554:	d110      	bne.n	8028578 <__ieee754_atan2f+0x90>
 8028556:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802855a:	f104 34ff 	add.w	r4, r4, #4294967295
 802855e:	d107      	bne.n	8028570 <__ieee754_atan2f+0x88>
 8028560:	2c02      	cmp	r4, #2
 8028562:	d846      	bhi.n	80285f2 <__ieee754_atan2f+0x10a>
 8028564:	4b29      	ldr	r3, [pc, #164]	@ (802860c <__ieee754_atan2f+0x124>)
 8028566:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802856a:	edd3 7a00 	vldr	s15, [r3]
 802856e:	e7ce      	b.n	802850e <__ieee754_atan2f+0x26>
 8028570:	2c02      	cmp	r4, #2
 8028572:	d841      	bhi.n	80285f8 <__ieee754_atan2f+0x110>
 8028574:	4b26      	ldr	r3, [pc, #152]	@ (8028610 <__ieee754_atan2f+0x128>)
 8028576:	e7f6      	b.n	8028566 <__ieee754_atan2f+0x7e>
 8028578:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802857c:	d0e0      	beq.n	8028540 <__ieee754_atan2f+0x58>
 802857e:	1a5b      	subs	r3, r3, r1
 8028580:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8028584:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8028588:	da1a      	bge.n	80285c0 <__ieee754_atan2f+0xd8>
 802858a:	2a00      	cmp	r2, #0
 802858c:	da01      	bge.n	8028592 <__ieee754_atan2f+0xaa>
 802858e:	313c      	adds	r1, #60	@ 0x3c
 8028590:	db19      	blt.n	80285c6 <__ieee754_atan2f+0xde>
 8028592:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8028596:	f000 f919 	bl	80287cc <fabsf>
 802859a:	f000 f843 	bl	8028624 <atanf>
 802859e:	eef0 7a40 	vmov.f32	s15, s0
 80285a2:	2c01      	cmp	r4, #1
 80285a4:	d012      	beq.n	80285cc <__ieee754_atan2f+0xe4>
 80285a6:	2c02      	cmp	r4, #2
 80285a8:	d017      	beq.n	80285da <__ieee754_atan2f+0xf2>
 80285aa:	2c00      	cmp	r4, #0
 80285ac:	d0af      	beq.n	802850e <__ieee754_atan2f+0x26>
 80285ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8028614 <__ieee754_atan2f+0x12c>
 80285b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80285b6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8028618 <__ieee754_atan2f+0x130>
 80285ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80285be:	e7a6      	b.n	802850e <__ieee754_atan2f+0x26>
 80285c0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8028604 <__ieee754_atan2f+0x11c>
 80285c4:	e7ed      	b.n	80285a2 <__ieee754_atan2f+0xba>
 80285c6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802861c <__ieee754_atan2f+0x134>
 80285ca:	e7ea      	b.n	80285a2 <__ieee754_atan2f+0xba>
 80285cc:	ee17 3a90 	vmov	r3, s15
 80285d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80285d4:	ee07 3a90 	vmov	s15, r3
 80285d8:	e799      	b.n	802850e <__ieee754_atan2f+0x26>
 80285da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8028614 <__ieee754_atan2f+0x12c>
 80285de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80285e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8028618 <__ieee754_atan2f+0x130>
 80285e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80285ea:	e790      	b.n	802850e <__ieee754_atan2f+0x26>
 80285ec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8028618 <__ieee754_atan2f+0x130>
 80285f0:	e78d      	b.n	802850e <__ieee754_atan2f+0x26>
 80285f2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8028620 <__ieee754_atan2f+0x138>
 80285f6:	e78a      	b.n	802850e <__ieee754_atan2f+0x26>
 80285f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802861c <__ieee754_atan2f+0x134>
 80285fc:	e787      	b.n	802850e <__ieee754_atan2f+0x26>
 80285fe:	bf00      	nop
 8028600:	c0490fdb 	.word	0xc0490fdb
 8028604:	3fc90fdb 	.word	0x3fc90fdb
 8028608:	bfc90fdb 	.word	0xbfc90fdb
 802860c:	0802d9ac 	.word	0x0802d9ac
 8028610:	0802d9a0 	.word	0x0802d9a0
 8028614:	33bbbd2e 	.word	0x33bbbd2e
 8028618:	40490fdb 	.word	0x40490fdb
 802861c:	00000000 	.word	0x00000000
 8028620:	3f490fdb 	.word	0x3f490fdb

08028624 <atanf>:
 8028624:	b538      	push	{r3, r4, r5, lr}
 8028626:	ee10 5a10 	vmov	r5, s0
 802862a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802862e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8028632:	eef0 7a40 	vmov.f32	s15, s0
 8028636:	d30f      	bcc.n	8028658 <atanf+0x34>
 8028638:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802863c:	d904      	bls.n	8028648 <atanf+0x24>
 802863e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8028642:	eeb0 0a67 	vmov.f32	s0, s15
 8028646:	bd38      	pop	{r3, r4, r5, pc}
 8028648:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8028780 <atanf+0x15c>
 802864c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8028784 <atanf+0x160>
 8028650:	2d00      	cmp	r5, #0
 8028652:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8028656:	e7f4      	b.n	8028642 <atanf+0x1e>
 8028658:	4b4b      	ldr	r3, [pc, #300]	@ (8028788 <atanf+0x164>)
 802865a:	429c      	cmp	r4, r3
 802865c:	d810      	bhi.n	8028680 <atanf+0x5c>
 802865e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8028662:	d20a      	bcs.n	802867a <atanf+0x56>
 8028664:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802878c <atanf+0x168>
 8028668:	ee30 7a07 	vadd.f32	s14, s0, s14
 802866c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028670:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8028674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028678:	dce3      	bgt.n	8028642 <atanf+0x1e>
 802867a:	f04f 33ff 	mov.w	r3, #4294967295
 802867e:	e013      	b.n	80286a8 <atanf+0x84>
 8028680:	f000 f8a4 	bl	80287cc <fabsf>
 8028684:	4b42      	ldr	r3, [pc, #264]	@ (8028790 <atanf+0x16c>)
 8028686:	429c      	cmp	r4, r3
 8028688:	d84f      	bhi.n	802872a <atanf+0x106>
 802868a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802868e:	429c      	cmp	r4, r3
 8028690:	d841      	bhi.n	8028716 <atanf+0xf2>
 8028692:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8028696:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802869a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802869e:	2300      	movs	r3, #0
 80286a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80286a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80286a8:	1c5a      	adds	r2, r3, #1
 80286aa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80286ae:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8028794 <atanf+0x170>
 80286b2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8028798 <atanf+0x174>
 80286b6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802879c <atanf+0x178>
 80286ba:	ee66 6a06 	vmul.f32	s13, s12, s12
 80286be:	eee6 5a87 	vfma.f32	s11, s13, s14
 80286c2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80287a0 <atanf+0x17c>
 80286c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80286ca:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80287a4 <atanf+0x180>
 80286ce:	eee7 5a26 	vfma.f32	s11, s14, s13
 80286d2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80287a8 <atanf+0x184>
 80286d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80286da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80287ac <atanf+0x188>
 80286de:	eee7 5a26 	vfma.f32	s11, s14, s13
 80286e2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80287b0 <atanf+0x18c>
 80286e6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80286ea:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80287b4 <atanf+0x190>
 80286ee:	eea5 7a26 	vfma.f32	s14, s10, s13
 80286f2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80287b8 <atanf+0x194>
 80286f6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80286fa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80287bc <atanf+0x198>
 80286fe:	eea5 7a26 	vfma.f32	s14, s10, s13
 8028702:	ee27 7a26 	vmul.f32	s14, s14, s13
 8028706:	eea5 7a86 	vfma.f32	s14, s11, s12
 802870a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802870e:	d121      	bne.n	8028754 <atanf+0x130>
 8028710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028714:	e795      	b.n	8028642 <atanf+0x1e>
 8028716:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802871a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802871e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8028722:	2301      	movs	r3, #1
 8028724:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028728:	e7be      	b.n	80286a8 <atanf+0x84>
 802872a:	4b25      	ldr	r3, [pc, #148]	@ (80287c0 <atanf+0x19c>)
 802872c:	429c      	cmp	r4, r3
 802872e:	d80b      	bhi.n	8028748 <atanf+0x124>
 8028730:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8028734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028738:	eea0 7a27 	vfma.f32	s14, s0, s15
 802873c:	2302      	movs	r3, #2
 802873e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8028742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028746:	e7af      	b.n	80286a8 <atanf+0x84>
 8028748:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802874c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028750:	2303      	movs	r3, #3
 8028752:	e7a9      	b.n	80286a8 <atanf+0x84>
 8028754:	4a1b      	ldr	r2, [pc, #108]	@ (80287c4 <atanf+0x1a0>)
 8028756:	491c      	ldr	r1, [pc, #112]	@ (80287c8 <atanf+0x1a4>)
 8028758:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802875c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8028760:	edd3 6a00 	vldr	s13, [r3]
 8028764:	ee37 7a66 	vsub.f32	s14, s14, s13
 8028768:	2d00      	cmp	r5, #0
 802876a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802876e:	edd2 7a00 	vldr	s15, [r2]
 8028772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028776:	bfb8      	it	lt
 8028778:	eef1 7a67 	vneglt.f32	s15, s15
 802877c:	e761      	b.n	8028642 <atanf+0x1e>
 802877e:	bf00      	nop
 8028780:	bfc90fdb 	.word	0xbfc90fdb
 8028784:	3fc90fdb 	.word	0x3fc90fdb
 8028788:	3edfffff 	.word	0x3edfffff
 802878c:	7149f2ca 	.word	0x7149f2ca
 8028790:	3f97ffff 	.word	0x3f97ffff
 8028794:	3c8569d7 	.word	0x3c8569d7
 8028798:	3d4bda59 	.word	0x3d4bda59
 802879c:	bd6ef16b 	.word	0xbd6ef16b
 80287a0:	3d886b35 	.word	0x3d886b35
 80287a4:	3dba2e6e 	.word	0x3dba2e6e
 80287a8:	3e124925 	.word	0x3e124925
 80287ac:	3eaaaaab 	.word	0x3eaaaaab
 80287b0:	bd15a221 	.word	0xbd15a221
 80287b4:	bd9d8795 	.word	0xbd9d8795
 80287b8:	bde38e38 	.word	0xbde38e38
 80287bc:	be4ccccd 	.word	0xbe4ccccd
 80287c0:	401bffff 	.word	0x401bffff
 80287c4:	0802d9c8 	.word	0x0802d9c8
 80287c8:	0802d9b8 	.word	0x0802d9b8

080287cc <fabsf>:
 80287cc:	ee10 3a10 	vmov	r3, s0
 80287d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80287d4:	ee00 3a10 	vmov	s0, r3
 80287d8:	4770      	bx	lr

080287da <abort>:
 80287da:	b508      	push	{r3, lr}
 80287dc:	2006      	movs	r0, #6
 80287de:	f000 fae1 	bl	8028da4 <raise>
 80287e2:	2001      	movs	r0, #1
 80287e4:	f7d8 ff5a 	bl	800169c <_exit>

080287e8 <__assert_func>:
 80287e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80287ea:	4614      	mov	r4, r2
 80287ec:	461a      	mov	r2, r3
 80287ee:	4b09      	ldr	r3, [pc, #36]	@ (8028814 <__assert_func+0x2c>)
 80287f0:	681b      	ldr	r3, [r3, #0]
 80287f2:	4605      	mov	r5, r0
 80287f4:	68d8      	ldr	r0, [r3, #12]
 80287f6:	b954      	cbnz	r4, 802880e <__assert_func+0x26>
 80287f8:	4b07      	ldr	r3, [pc, #28]	@ (8028818 <__assert_func+0x30>)
 80287fa:	461c      	mov	r4, r3
 80287fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028800:	9100      	str	r1, [sp, #0]
 8028802:	462b      	mov	r3, r5
 8028804:	4905      	ldr	r1, [pc, #20]	@ (802881c <__assert_func+0x34>)
 8028806:	f000 f983 	bl	8028b10 <fiprintf>
 802880a:	f7ff ffe6 	bl	80287da <abort>
 802880e:	4b04      	ldr	r3, [pc, #16]	@ (8028820 <__assert_func+0x38>)
 8028810:	e7f4      	b.n	80287fc <__assert_func+0x14>
 8028812:	bf00      	nop
 8028814:	240000e8 	.word	0x240000e8
 8028818:	0802da13 	.word	0x0802da13
 802881c:	0802d9e5 	.word	0x0802d9e5
 8028820:	0802d9d8 	.word	0x0802d9d8

08028824 <atexit>:
 8028824:	2300      	movs	r3, #0
 8028826:	4601      	mov	r1, r0
 8028828:	461a      	mov	r2, r3
 802882a:	4618      	mov	r0, r3
 802882c:	f000 bb68 	b.w	8028f00 <__register_exitproc>

08028830 <malloc>:
 8028830:	4b02      	ldr	r3, [pc, #8]	@ (802883c <malloc+0xc>)
 8028832:	4601      	mov	r1, r0
 8028834:	6818      	ldr	r0, [r3, #0]
 8028836:	f000 b82d 	b.w	8028894 <_malloc_r>
 802883a:	bf00      	nop
 802883c:	240000e8 	.word	0x240000e8

08028840 <free>:
 8028840:	4b02      	ldr	r3, [pc, #8]	@ (802884c <free+0xc>)
 8028842:	4601      	mov	r1, r0
 8028844:	6818      	ldr	r0, [r3, #0]
 8028846:	f000 bbb7 	b.w	8028fb8 <_free_r>
 802884a:	bf00      	nop
 802884c:	240000e8 	.word	0x240000e8

08028850 <sbrk_aligned>:
 8028850:	b570      	push	{r4, r5, r6, lr}
 8028852:	4e0f      	ldr	r6, [pc, #60]	@ (8028890 <sbrk_aligned+0x40>)
 8028854:	460c      	mov	r4, r1
 8028856:	6831      	ldr	r1, [r6, #0]
 8028858:	4605      	mov	r5, r0
 802885a:	b911      	cbnz	r1, 8028862 <sbrk_aligned+0x12>
 802885c:	f000 faf2 	bl	8028e44 <_sbrk_r>
 8028860:	6030      	str	r0, [r6, #0]
 8028862:	4621      	mov	r1, r4
 8028864:	4628      	mov	r0, r5
 8028866:	f000 faed 	bl	8028e44 <_sbrk_r>
 802886a:	1c43      	adds	r3, r0, #1
 802886c:	d103      	bne.n	8028876 <sbrk_aligned+0x26>
 802886e:	f04f 34ff 	mov.w	r4, #4294967295
 8028872:	4620      	mov	r0, r4
 8028874:	bd70      	pop	{r4, r5, r6, pc}
 8028876:	1cc4      	adds	r4, r0, #3
 8028878:	f024 0403 	bic.w	r4, r4, #3
 802887c:	42a0      	cmp	r0, r4
 802887e:	d0f8      	beq.n	8028872 <sbrk_aligned+0x22>
 8028880:	1a21      	subs	r1, r4, r0
 8028882:	4628      	mov	r0, r5
 8028884:	f000 fade 	bl	8028e44 <_sbrk_r>
 8028888:	3001      	adds	r0, #1
 802888a:	d1f2      	bne.n	8028872 <sbrk_aligned+0x22>
 802888c:	e7ef      	b.n	802886e <sbrk_aligned+0x1e>
 802888e:	bf00      	nop
 8028890:	24028f5c 	.word	0x24028f5c

08028894 <_malloc_r>:
 8028894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028898:	1ccd      	adds	r5, r1, #3
 802889a:	f025 0503 	bic.w	r5, r5, #3
 802889e:	3508      	adds	r5, #8
 80288a0:	2d0c      	cmp	r5, #12
 80288a2:	bf38      	it	cc
 80288a4:	250c      	movcc	r5, #12
 80288a6:	2d00      	cmp	r5, #0
 80288a8:	4606      	mov	r6, r0
 80288aa:	db01      	blt.n	80288b0 <_malloc_r+0x1c>
 80288ac:	42a9      	cmp	r1, r5
 80288ae:	d904      	bls.n	80288ba <_malloc_r+0x26>
 80288b0:	230c      	movs	r3, #12
 80288b2:	6033      	str	r3, [r6, #0]
 80288b4:	2000      	movs	r0, #0
 80288b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80288ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028990 <_malloc_r+0xfc>
 80288be:	f000 f869 	bl	8028994 <__malloc_lock>
 80288c2:	f8d8 3000 	ldr.w	r3, [r8]
 80288c6:	461c      	mov	r4, r3
 80288c8:	bb44      	cbnz	r4, 802891c <_malloc_r+0x88>
 80288ca:	4629      	mov	r1, r5
 80288cc:	4630      	mov	r0, r6
 80288ce:	f7ff ffbf 	bl	8028850 <sbrk_aligned>
 80288d2:	1c43      	adds	r3, r0, #1
 80288d4:	4604      	mov	r4, r0
 80288d6:	d158      	bne.n	802898a <_malloc_r+0xf6>
 80288d8:	f8d8 4000 	ldr.w	r4, [r8]
 80288dc:	4627      	mov	r7, r4
 80288de:	2f00      	cmp	r7, #0
 80288e0:	d143      	bne.n	802896a <_malloc_r+0xd6>
 80288e2:	2c00      	cmp	r4, #0
 80288e4:	d04b      	beq.n	802897e <_malloc_r+0xea>
 80288e6:	6823      	ldr	r3, [r4, #0]
 80288e8:	4639      	mov	r1, r7
 80288ea:	4630      	mov	r0, r6
 80288ec:	eb04 0903 	add.w	r9, r4, r3
 80288f0:	f000 faa8 	bl	8028e44 <_sbrk_r>
 80288f4:	4581      	cmp	r9, r0
 80288f6:	d142      	bne.n	802897e <_malloc_r+0xea>
 80288f8:	6821      	ldr	r1, [r4, #0]
 80288fa:	1a6d      	subs	r5, r5, r1
 80288fc:	4629      	mov	r1, r5
 80288fe:	4630      	mov	r0, r6
 8028900:	f7ff ffa6 	bl	8028850 <sbrk_aligned>
 8028904:	3001      	adds	r0, #1
 8028906:	d03a      	beq.n	802897e <_malloc_r+0xea>
 8028908:	6823      	ldr	r3, [r4, #0]
 802890a:	442b      	add	r3, r5
 802890c:	6023      	str	r3, [r4, #0]
 802890e:	f8d8 3000 	ldr.w	r3, [r8]
 8028912:	685a      	ldr	r2, [r3, #4]
 8028914:	bb62      	cbnz	r2, 8028970 <_malloc_r+0xdc>
 8028916:	f8c8 7000 	str.w	r7, [r8]
 802891a:	e00f      	b.n	802893c <_malloc_r+0xa8>
 802891c:	6822      	ldr	r2, [r4, #0]
 802891e:	1b52      	subs	r2, r2, r5
 8028920:	d420      	bmi.n	8028964 <_malloc_r+0xd0>
 8028922:	2a0b      	cmp	r2, #11
 8028924:	d917      	bls.n	8028956 <_malloc_r+0xc2>
 8028926:	1961      	adds	r1, r4, r5
 8028928:	42a3      	cmp	r3, r4
 802892a:	6025      	str	r5, [r4, #0]
 802892c:	bf18      	it	ne
 802892e:	6059      	strne	r1, [r3, #4]
 8028930:	6863      	ldr	r3, [r4, #4]
 8028932:	bf08      	it	eq
 8028934:	f8c8 1000 	streq.w	r1, [r8]
 8028938:	5162      	str	r2, [r4, r5]
 802893a:	604b      	str	r3, [r1, #4]
 802893c:	4630      	mov	r0, r6
 802893e:	f000 f82f 	bl	80289a0 <__malloc_unlock>
 8028942:	f104 000b 	add.w	r0, r4, #11
 8028946:	1d23      	adds	r3, r4, #4
 8028948:	f020 0007 	bic.w	r0, r0, #7
 802894c:	1ac2      	subs	r2, r0, r3
 802894e:	bf1c      	itt	ne
 8028950:	1a1b      	subne	r3, r3, r0
 8028952:	50a3      	strne	r3, [r4, r2]
 8028954:	e7af      	b.n	80288b6 <_malloc_r+0x22>
 8028956:	6862      	ldr	r2, [r4, #4]
 8028958:	42a3      	cmp	r3, r4
 802895a:	bf0c      	ite	eq
 802895c:	f8c8 2000 	streq.w	r2, [r8]
 8028960:	605a      	strne	r2, [r3, #4]
 8028962:	e7eb      	b.n	802893c <_malloc_r+0xa8>
 8028964:	4623      	mov	r3, r4
 8028966:	6864      	ldr	r4, [r4, #4]
 8028968:	e7ae      	b.n	80288c8 <_malloc_r+0x34>
 802896a:	463c      	mov	r4, r7
 802896c:	687f      	ldr	r7, [r7, #4]
 802896e:	e7b6      	b.n	80288de <_malloc_r+0x4a>
 8028970:	461a      	mov	r2, r3
 8028972:	685b      	ldr	r3, [r3, #4]
 8028974:	42a3      	cmp	r3, r4
 8028976:	d1fb      	bne.n	8028970 <_malloc_r+0xdc>
 8028978:	2300      	movs	r3, #0
 802897a:	6053      	str	r3, [r2, #4]
 802897c:	e7de      	b.n	802893c <_malloc_r+0xa8>
 802897e:	230c      	movs	r3, #12
 8028980:	6033      	str	r3, [r6, #0]
 8028982:	4630      	mov	r0, r6
 8028984:	f000 f80c 	bl	80289a0 <__malloc_unlock>
 8028988:	e794      	b.n	80288b4 <_malloc_r+0x20>
 802898a:	6005      	str	r5, [r0, #0]
 802898c:	e7d6      	b.n	802893c <_malloc_r+0xa8>
 802898e:	bf00      	nop
 8028990:	24028f60 	.word	0x24028f60

08028994 <__malloc_lock>:
 8028994:	4801      	ldr	r0, [pc, #4]	@ (802899c <__malloc_lock+0x8>)
 8028996:	f000 baa2 	b.w	8028ede <__retarget_lock_acquire_recursive>
 802899a:	bf00      	nop
 802899c:	240290a4 	.word	0x240290a4

080289a0 <__malloc_unlock>:
 80289a0:	4801      	ldr	r0, [pc, #4]	@ (80289a8 <__malloc_unlock+0x8>)
 80289a2:	f000 ba9d 	b.w	8028ee0 <__retarget_lock_release_recursive>
 80289a6:	bf00      	nop
 80289a8:	240290a4 	.word	0x240290a4

080289ac <__cxa_atexit>:
 80289ac:	b510      	push	{r4, lr}
 80289ae:	4604      	mov	r4, r0
 80289b0:	4804      	ldr	r0, [pc, #16]	@ (80289c4 <__cxa_atexit+0x18>)
 80289b2:	4613      	mov	r3, r2
 80289b4:	b120      	cbz	r0, 80289c0 <__cxa_atexit+0x14>
 80289b6:	460a      	mov	r2, r1
 80289b8:	2002      	movs	r0, #2
 80289ba:	4621      	mov	r1, r4
 80289bc:	f000 faa0 	bl	8028f00 <__register_exitproc>
 80289c0:	bd10      	pop	{r4, pc}
 80289c2:	bf00      	nop
 80289c4:	08028f01 	.word	0x08028f01

080289c8 <std>:
 80289c8:	2300      	movs	r3, #0
 80289ca:	b510      	push	{r4, lr}
 80289cc:	4604      	mov	r4, r0
 80289ce:	e9c0 3300 	strd	r3, r3, [r0]
 80289d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80289d6:	6083      	str	r3, [r0, #8]
 80289d8:	8181      	strh	r1, [r0, #12]
 80289da:	6643      	str	r3, [r0, #100]	@ 0x64
 80289dc:	81c2      	strh	r2, [r0, #14]
 80289de:	6183      	str	r3, [r0, #24]
 80289e0:	4619      	mov	r1, r3
 80289e2:	2208      	movs	r2, #8
 80289e4:	305c      	adds	r0, #92	@ 0x5c
 80289e6:	f000 f99b 	bl	8028d20 <memset>
 80289ea:	4b0d      	ldr	r3, [pc, #52]	@ (8028a20 <std+0x58>)
 80289ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80289ee:	4b0d      	ldr	r3, [pc, #52]	@ (8028a24 <std+0x5c>)
 80289f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80289f2:	4b0d      	ldr	r3, [pc, #52]	@ (8028a28 <std+0x60>)
 80289f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80289f6:	4b0d      	ldr	r3, [pc, #52]	@ (8028a2c <std+0x64>)
 80289f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80289fa:	4b0d      	ldr	r3, [pc, #52]	@ (8028a30 <std+0x68>)
 80289fc:	6224      	str	r4, [r4, #32]
 80289fe:	429c      	cmp	r4, r3
 8028a00:	d006      	beq.n	8028a10 <std+0x48>
 8028a02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8028a06:	4294      	cmp	r4, r2
 8028a08:	d002      	beq.n	8028a10 <std+0x48>
 8028a0a:	33d0      	adds	r3, #208	@ 0xd0
 8028a0c:	429c      	cmp	r4, r3
 8028a0e:	d105      	bne.n	8028a1c <std+0x54>
 8028a10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8028a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028a18:	f000 ba60 	b.w	8028edc <__retarget_lock_init_recursive>
 8028a1c:	bd10      	pop	{r4, pc}
 8028a1e:	bf00      	nop
 8028a20:	08028b71 	.word	0x08028b71
 8028a24:	08028b93 	.word	0x08028b93
 8028a28:	08028bcb 	.word	0x08028bcb
 8028a2c:	08028bef 	.word	0x08028bef
 8028a30:	24028f64 	.word	0x24028f64

08028a34 <stdio_exit_handler>:
 8028a34:	4a02      	ldr	r2, [pc, #8]	@ (8028a40 <stdio_exit_handler+0xc>)
 8028a36:	4903      	ldr	r1, [pc, #12]	@ (8028a44 <stdio_exit_handler+0x10>)
 8028a38:	4803      	ldr	r0, [pc, #12]	@ (8028a48 <stdio_exit_handler+0x14>)
 8028a3a:	f000 b87b 	b.w	8028b34 <_fwalk_sglue>
 8028a3e:	bf00      	nop
 8028a40:	240000dc 	.word	0x240000dc
 8028a44:	080296f5 	.word	0x080296f5
 8028a48:	240000ec 	.word	0x240000ec

08028a4c <cleanup_stdio>:
 8028a4c:	6841      	ldr	r1, [r0, #4]
 8028a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8028a80 <cleanup_stdio+0x34>)
 8028a50:	4299      	cmp	r1, r3
 8028a52:	b510      	push	{r4, lr}
 8028a54:	4604      	mov	r4, r0
 8028a56:	d001      	beq.n	8028a5c <cleanup_stdio+0x10>
 8028a58:	f000 fe4c 	bl	80296f4 <_fflush_r>
 8028a5c:	68a1      	ldr	r1, [r4, #8]
 8028a5e:	4b09      	ldr	r3, [pc, #36]	@ (8028a84 <cleanup_stdio+0x38>)
 8028a60:	4299      	cmp	r1, r3
 8028a62:	d002      	beq.n	8028a6a <cleanup_stdio+0x1e>
 8028a64:	4620      	mov	r0, r4
 8028a66:	f000 fe45 	bl	80296f4 <_fflush_r>
 8028a6a:	68e1      	ldr	r1, [r4, #12]
 8028a6c:	4b06      	ldr	r3, [pc, #24]	@ (8028a88 <cleanup_stdio+0x3c>)
 8028a6e:	4299      	cmp	r1, r3
 8028a70:	d004      	beq.n	8028a7c <cleanup_stdio+0x30>
 8028a72:	4620      	mov	r0, r4
 8028a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028a78:	f000 be3c 	b.w	80296f4 <_fflush_r>
 8028a7c:	bd10      	pop	{r4, pc}
 8028a7e:	bf00      	nop
 8028a80:	24028f64 	.word	0x24028f64
 8028a84:	24028fcc 	.word	0x24028fcc
 8028a88:	24029034 	.word	0x24029034

08028a8c <global_stdio_init.part.0>:
 8028a8c:	b510      	push	{r4, lr}
 8028a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8028abc <global_stdio_init.part.0+0x30>)
 8028a90:	4c0b      	ldr	r4, [pc, #44]	@ (8028ac0 <global_stdio_init.part.0+0x34>)
 8028a92:	4a0c      	ldr	r2, [pc, #48]	@ (8028ac4 <global_stdio_init.part.0+0x38>)
 8028a94:	601a      	str	r2, [r3, #0]
 8028a96:	4620      	mov	r0, r4
 8028a98:	2200      	movs	r2, #0
 8028a9a:	2104      	movs	r1, #4
 8028a9c:	f7ff ff94 	bl	80289c8 <std>
 8028aa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028aa4:	2201      	movs	r2, #1
 8028aa6:	2109      	movs	r1, #9
 8028aa8:	f7ff ff8e 	bl	80289c8 <std>
 8028aac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8028ab0:	2202      	movs	r2, #2
 8028ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028ab6:	2112      	movs	r1, #18
 8028ab8:	f7ff bf86 	b.w	80289c8 <std>
 8028abc:	2402909c 	.word	0x2402909c
 8028ac0:	24028f64 	.word	0x24028f64
 8028ac4:	08028a35 	.word	0x08028a35

08028ac8 <__sfp_lock_acquire>:
 8028ac8:	4801      	ldr	r0, [pc, #4]	@ (8028ad0 <__sfp_lock_acquire+0x8>)
 8028aca:	f000 ba08 	b.w	8028ede <__retarget_lock_acquire_recursive>
 8028ace:	bf00      	nop
 8028ad0:	240290a6 	.word	0x240290a6

08028ad4 <__sfp_lock_release>:
 8028ad4:	4801      	ldr	r0, [pc, #4]	@ (8028adc <__sfp_lock_release+0x8>)
 8028ad6:	f000 ba03 	b.w	8028ee0 <__retarget_lock_release_recursive>
 8028ada:	bf00      	nop
 8028adc:	240290a6 	.word	0x240290a6

08028ae0 <__sinit>:
 8028ae0:	b510      	push	{r4, lr}
 8028ae2:	4604      	mov	r4, r0
 8028ae4:	f7ff fff0 	bl	8028ac8 <__sfp_lock_acquire>
 8028ae8:	6a23      	ldr	r3, [r4, #32]
 8028aea:	b11b      	cbz	r3, 8028af4 <__sinit+0x14>
 8028aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028af0:	f7ff bff0 	b.w	8028ad4 <__sfp_lock_release>
 8028af4:	4b04      	ldr	r3, [pc, #16]	@ (8028b08 <__sinit+0x28>)
 8028af6:	6223      	str	r3, [r4, #32]
 8028af8:	4b04      	ldr	r3, [pc, #16]	@ (8028b0c <__sinit+0x2c>)
 8028afa:	681b      	ldr	r3, [r3, #0]
 8028afc:	2b00      	cmp	r3, #0
 8028afe:	d1f5      	bne.n	8028aec <__sinit+0xc>
 8028b00:	f7ff ffc4 	bl	8028a8c <global_stdio_init.part.0>
 8028b04:	e7f2      	b.n	8028aec <__sinit+0xc>
 8028b06:	bf00      	nop
 8028b08:	08028a4d 	.word	0x08028a4d
 8028b0c:	2402909c 	.word	0x2402909c

08028b10 <fiprintf>:
 8028b10:	b40e      	push	{r1, r2, r3}
 8028b12:	b503      	push	{r0, r1, lr}
 8028b14:	4601      	mov	r1, r0
 8028b16:	ab03      	add	r3, sp, #12
 8028b18:	4805      	ldr	r0, [pc, #20]	@ (8028b30 <fiprintf+0x20>)
 8028b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028b1e:	6800      	ldr	r0, [r0, #0]
 8028b20:	9301      	str	r3, [sp, #4]
 8028b22:	f000 fabd 	bl	80290a0 <_vfiprintf_r>
 8028b26:	b002      	add	sp, #8
 8028b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8028b2c:	b003      	add	sp, #12
 8028b2e:	4770      	bx	lr
 8028b30:	240000e8 	.word	0x240000e8

08028b34 <_fwalk_sglue>:
 8028b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028b38:	4607      	mov	r7, r0
 8028b3a:	4688      	mov	r8, r1
 8028b3c:	4614      	mov	r4, r2
 8028b3e:	2600      	movs	r6, #0
 8028b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028b44:	f1b9 0901 	subs.w	r9, r9, #1
 8028b48:	d505      	bpl.n	8028b56 <_fwalk_sglue+0x22>
 8028b4a:	6824      	ldr	r4, [r4, #0]
 8028b4c:	2c00      	cmp	r4, #0
 8028b4e:	d1f7      	bne.n	8028b40 <_fwalk_sglue+0xc>
 8028b50:	4630      	mov	r0, r6
 8028b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b56:	89ab      	ldrh	r3, [r5, #12]
 8028b58:	2b01      	cmp	r3, #1
 8028b5a:	d907      	bls.n	8028b6c <_fwalk_sglue+0x38>
 8028b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028b60:	3301      	adds	r3, #1
 8028b62:	d003      	beq.n	8028b6c <_fwalk_sglue+0x38>
 8028b64:	4629      	mov	r1, r5
 8028b66:	4638      	mov	r0, r7
 8028b68:	47c0      	blx	r8
 8028b6a:	4306      	orrs	r6, r0
 8028b6c:	3568      	adds	r5, #104	@ 0x68
 8028b6e:	e7e9      	b.n	8028b44 <_fwalk_sglue+0x10>

08028b70 <__sread>:
 8028b70:	b510      	push	{r4, lr}
 8028b72:	460c      	mov	r4, r1
 8028b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028b78:	f000 f93e 	bl	8028df8 <_read_r>
 8028b7c:	2800      	cmp	r0, #0
 8028b7e:	bfab      	itete	ge
 8028b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8028b82:	89a3      	ldrhlt	r3, [r4, #12]
 8028b84:	181b      	addge	r3, r3, r0
 8028b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8028b8a:	bfac      	ite	ge
 8028b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8028b8e:	81a3      	strhlt	r3, [r4, #12]
 8028b90:	bd10      	pop	{r4, pc}

08028b92 <__swrite>:
 8028b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b96:	461f      	mov	r7, r3
 8028b98:	898b      	ldrh	r3, [r1, #12]
 8028b9a:	05db      	lsls	r3, r3, #23
 8028b9c:	4605      	mov	r5, r0
 8028b9e:	460c      	mov	r4, r1
 8028ba0:	4616      	mov	r6, r2
 8028ba2:	d505      	bpl.n	8028bb0 <__swrite+0x1e>
 8028ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ba8:	2302      	movs	r3, #2
 8028baa:	2200      	movs	r2, #0
 8028bac:	f000 f912 	bl	8028dd4 <_lseek_r>
 8028bb0:	89a3      	ldrh	r3, [r4, #12]
 8028bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8028bba:	81a3      	strh	r3, [r4, #12]
 8028bbc:	4632      	mov	r2, r6
 8028bbe:	463b      	mov	r3, r7
 8028bc0:	4628      	mov	r0, r5
 8028bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028bc6:	f000 b94d 	b.w	8028e64 <_write_r>

08028bca <__sseek>:
 8028bca:	b510      	push	{r4, lr}
 8028bcc:	460c      	mov	r4, r1
 8028bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028bd2:	f000 f8ff 	bl	8028dd4 <_lseek_r>
 8028bd6:	1c43      	adds	r3, r0, #1
 8028bd8:	89a3      	ldrh	r3, [r4, #12]
 8028bda:	bf15      	itete	ne
 8028bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8028bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8028be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8028be6:	81a3      	strheq	r3, [r4, #12]
 8028be8:	bf18      	it	ne
 8028bea:	81a3      	strhne	r3, [r4, #12]
 8028bec:	bd10      	pop	{r4, pc}

08028bee <__sclose>:
 8028bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028bf2:	f000 b8df 	b.w	8028db4 <_close_r>

08028bf6 <__swbuf_r>:
 8028bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bf8:	460e      	mov	r6, r1
 8028bfa:	4614      	mov	r4, r2
 8028bfc:	4605      	mov	r5, r0
 8028bfe:	b118      	cbz	r0, 8028c08 <__swbuf_r+0x12>
 8028c00:	6a03      	ldr	r3, [r0, #32]
 8028c02:	b90b      	cbnz	r3, 8028c08 <__swbuf_r+0x12>
 8028c04:	f7ff ff6c 	bl	8028ae0 <__sinit>
 8028c08:	69a3      	ldr	r3, [r4, #24]
 8028c0a:	60a3      	str	r3, [r4, #8]
 8028c0c:	89a3      	ldrh	r3, [r4, #12]
 8028c0e:	071a      	lsls	r2, r3, #28
 8028c10:	d501      	bpl.n	8028c16 <__swbuf_r+0x20>
 8028c12:	6923      	ldr	r3, [r4, #16]
 8028c14:	b943      	cbnz	r3, 8028c28 <__swbuf_r+0x32>
 8028c16:	4621      	mov	r1, r4
 8028c18:	4628      	mov	r0, r5
 8028c1a:	f000 f82b 	bl	8028c74 <__swsetup_r>
 8028c1e:	b118      	cbz	r0, 8028c28 <__swbuf_r+0x32>
 8028c20:	f04f 37ff 	mov.w	r7, #4294967295
 8028c24:	4638      	mov	r0, r7
 8028c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028c28:	6823      	ldr	r3, [r4, #0]
 8028c2a:	6922      	ldr	r2, [r4, #16]
 8028c2c:	1a98      	subs	r0, r3, r2
 8028c2e:	6963      	ldr	r3, [r4, #20]
 8028c30:	b2f6      	uxtb	r6, r6
 8028c32:	4283      	cmp	r3, r0
 8028c34:	4637      	mov	r7, r6
 8028c36:	dc05      	bgt.n	8028c44 <__swbuf_r+0x4e>
 8028c38:	4621      	mov	r1, r4
 8028c3a:	4628      	mov	r0, r5
 8028c3c:	f000 fd5a 	bl	80296f4 <_fflush_r>
 8028c40:	2800      	cmp	r0, #0
 8028c42:	d1ed      	bne.n	8028c20 <__swbuf_r+0x2a>
 8028c44:	68a3      	ldr	r3, [r4, #8]
 8028c46:	3b01      	subs	r3, #1
 8028c48:	60a3      	str	r3, [r4, #8]
 8028c4a:	6823      	ldr	r3, [r4, #0]
 8028c4c:	1c5a      	adds	r2, r3, #1
 8028c4e:	6022      	str	r2, [r4, #0]
 8028c50:	701e      	strb	r6, [r3, #0]
 8028c52:	6962      	ldr	r2, [r4, #20]
 8028c54:	1c43      	adds	r3, r0, #1
 8028c56:	429a      	cmp	r2, r3
 8028c58:	d004      	beq.n	8028c64 <__swbuf_r+0x6e>
 8028c5a:	89a3      	ldrh	r3, [r4, #12]
 8028c5c:	07db      	lsls	r3, r3, #31
 8028c5e:	d5e1      	bpl.n	8028c24 <__swbuf_r+0x2e>
 8028c60:	2e0a      	cmp	r6, #10
 8028c62:	d1df      	bne.n	8028c24 <__swbuf_r+0x2e>
 8028c64:	4621      	mov	r1, r4
 8028c66:	4628      	mov	r0, r5
 8028c68:	f000 fd44 	bl	80296f4 <_fflush_r>
 8028c6c:	2800      	cmp	r0, #0
 8028c6e:	d0d9      	beq.n	8028c24 <__swbuf_r+0x2e>
 8028c70:	e7d6      	b.n	8028c20 <__swbuf_r+0x2a>
	...

08028c74 <__swsetup_r>:
 8028c74:	b538      	push	{r3, r4, r5, lr}
 8028c76:	4b29      	ldr	r3, [pc, #164]	@ (8028d1c <__swsetup_r+0xa8>)
 8028c78:	4605      	mov	r5, r0
 8028c7a:	6818      	ldr	r0, [r3, #0]
 8028c7c:	460c      	mov	r4, r1
 8028c7e:	b118      	cbz	r0, 8028c88 <__swsetup_r+0x14>
 8028c80:	6a03      	ldr	r3, [r0, #32]
 8028c82:	b90b      	cbnz	r3, 8028c88 <__swsetup_r+0x14>
 8028c84:	f7ff ff2c 	bl	8028ae0 <__sinit>
 8028c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028c8c:	0719      	lsls	r1, r3, #28
 8028c8e:	d422      	bmi.n	8028cd6 <__swsetup_r+0x62>
 8028c90:	06da      	lsls	r2, r3, #27
 8028c92:	d407      	bmi.n	8028ca4 <__swsetup_r+0x30>
 8028c94:	2209      	movs	r2, #9
 8028c96:	602a      	str	r2, [r5, #0]
 8028c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028c9c:	81a3      	strh	r3, [r4, #12]
 8028c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8028ca2:	e033      	b.n	8028d0c <__swsetup_r+0x98>
 8028ca4:	0758      	lsls	r0, r3, #29
 8028ca6:	d512      	bpl.n	8028cce <__swsetup_r+0x5a>
 8028ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028caa:	b141      	cbz	r1, 8028cbe <__swsetup_r+0x4a>
 8028cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028cb0:	4299      	cmp	r1, r3
 8028cb2:	d002      	beq.n	8028cba <__swsetup_r+0x46>
 8028cb4:	4628      	mov	r0, r5
 8028cb6:	f000 f97f 	bl	8028fb8 <_free_r>
 8028cba:	2300      	movs	r3, #0
 8028cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8028cbe:	89a3      	ldrh	r3, [r4, #12]
 8028cc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8028cc4:	81a3      	strh	r3, [r4, #12]
 8028cc6:	2300      	movs	r3, #0
 8028cc8:	6063      	str	r3, [r4, #4]
 8028cca:	6923      	ldr	r3, [r4, #16]
 8028ccc:	6023      	str	r3, [r4, #0]
 8028cce:	89a3      	ldrh	r3, [r4, #12]
 8028cd0:	f043 0308 	orr.w	r3, r3, #8
 8028cd4:	81a3      	strh	r3, [r4, #12]
 8028cd6:	6923      	ldr	r3, [r4, #16]
 8028cd8:	b94b      	cbnz	r3, 8028cee <__swsetup_r+0x7a>
 8028cda:	89a3      	ldrh	r3, [r4, #12]
 8028cdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8028ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028ce4:	d003      	beq.n	8028cee <__swsetup_r+0x7a>
 8028ce6:	4621      	mov	r1, r4
 8028ce8:	4628      	mov	r0, r5
 8028cea:	f000 fd51 	bl	8029790 <__smakebuf_r>
 8028cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028cf2:	f013 0201 	ands.w	r2, r3, #1
 8028cf6:	d00a      	beq.n	8028d0e <__swsetup_r+0x9a>
 8028cf8:	2200      	movs	r2, #0
 8028cfa:	60a2      	str	r2, [r4, #8]
 8028cfc:	6962      	ldr	r2, [r4, #20]
 8028cfe:	4252      	negs	r2, r2
 8028d00:	61a2      	str	r2, [r4, #24]
 8028d02:	6922      	ldr	r2, [r4, #16]
 8028d04:	b942      	cbnz	r2, 8028d18 <__swsetup_r+0xa4>
 8028d06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8028d0a:	d1c5      	bne.n	8028c98 <__swsetup_r+0x24>
 8028d0c:	bd38      	pop	{r3, r4, r5, pc}
 8028d0e:	0799      	lsls	r1, r3, #30
 8028d10:	bf58      	it	pl
 8028d12:	6962      	ldrpl	r2, [r4, #20]
 8028d14:	60a2      	str	r2, [r4, #8]
 8028d16:	e7f4      	b.n	8028d02 <__swsetup_r+0x8e>
 8028d18:	2000      	movs	r0, #0
 8028d1a:	e7f7      	b.n	8028d0c <__swsetup_r+0x98>
 8028d1c:	240000e8 	.word	0x240000e8

08028d20 <memset>:
 8028d20:	4402      	add	r2, r0
 8028d22:	4603      	mov	r3, r0
 8028d24:	4293      	cmp	r3, r2
 8028d26:	d100      	bne.n	8028d2a <memset+0xa>
 8028d28:	4770      	bx	lr
 8028d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8028d2e:	e7f9      	b.n	8028d24 <memset+0x4>

08028d30 <strncmp>:
 8028d30:	b510      	push	{r4, lr}
 8028d32:	b16a      	cbz	r2, 8028d50 <strncmp+0x20>
 8028d34:	3901      	subs	r1, #1
 8028d36:	1884      	adds	r4, r0, r2
 8028d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028d3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8028d40:	429a      	cmp	r2, r3
 8028d42:	d103      	bne.n	8028d4c <strncmp+0x1c>
 8028d44:	42a0      	cmp	r0, r4
 8028d46:	d001      	beq.n	8028d4c <strncmp+0x1c>
 8028d48:	2a00      	cmp	r2, #0
 8028d4a:	d1f5      	bne.n	8028d38 <strncmp+0x8>
 8028d4c:	1ad0      	subs	r0, r2, r3
 8028d4e:	bd10      	pop	{r4, pc}
 8028d50:	4610      	mov	r0, r2
 8028d52:	e7fc      	b.n	8028d4e <strncmp+0x1e>

08028d54 <_raise_r>:
 8028d54:	291f      	cmp	r1, #31
 8028d56:	b538      	push	{r3, r4, r5, lr}
 8028d58:	4605      	mov	r5, r0
 8028d5a:	460c      	mov	r4, r1
 8028d5c:	d904      	bls.n	8028d68 <_raise_r+0x14>
 8028d5e:	2316      	movs	r3, #22
 8028d60:	6003      	str	r3, [r0, #0]
 8028d62:	f04f 30ff 	mov.w	r0, #4294967295
 8028d66:	bd38      	pop	{r3, r4, r5, pc}
 8028d68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028d6a:	b112      	cbz	r2, 8028d72 <_raise_r+0x1e>
 8028d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028d70:	b94b      	cbnz	r3, 8028d86 <_raise_r+0x32>
 8028d72:	4628      	mov	r0, r5
 8028d74:	f000 f864 	bl	8028e40 <_getpid_r>
 8028d78:	4622      	mov	r2, r4
 8028d7a:	4601      	mov	r1, r0
 8028d7c:	4628      	mov	r0, r5
 8028d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028d82:	f000 b84b 	b.w	8028e1c <_kill_r>
 8028d86:	2b01      	cmp	r3, #1
 8028d88:	d00a      	beq.n	8028da0 <_raise_r+0x4c>
 8028d8a:	1c59      	adds	r1, r3, #1
 8028d8c:	d103      	bne.n	8028d96 <_raise_r+0x42>
 8028d8e:	2316      	movs	r3, #22
 8028d90:	6003      	str	r3, [r0, #0]
 8028d92:	2001      	movs	r0, #1
 8028d94:	e7e7      	b.n	8028d66 <_raise_r+0x12>
 8028d96:	2100      	movs	r1, #0
 8028d98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028d9c:	4620      	mov	r0, r4
 8028d9e:	4798      	blx	r3
 8028da0:	2000      	movs	r0, #0
 8028da2:	e7e0      	b.n	8028d66 <_raise_r+0x12>

08028da4 <raise>:
 8028da4:	4b02      	ldr	r3, [pc, #8]	@ (8028db0 <raise+0xc>)
 8028da6:	4601      	mov	r1, r0
 8028da8:	6818      	ldr	r0, [r3, #0]
 8028daa:	f7ff bfd3 	b.w	8028d54 <_raise_r>
 8028dae:	bf00      	nop
 8028db0:	240000e8 	.word	0x240000e8

08028db4 <_close_r>:
 8028db4:	b538      	push	{r3, r4, r5, lr}
 8028db6:	4d06      	ldr	r5, [pc, #24]	@ (8028dd0 <_close_r+0x1c>)
 8028db8:	2300      	movs	r3, #0
 8028dba:	4604      	mov	r4, r0
 8028dbc:	4608      	mov	r0, r1
 8028dbe:	602b      	str	r3, [r5, #0]
 8028dc0:	f7d8 fc8e 	bl	80016e0 <_close>
 8028dc4:	1c43      	adds	r3, r0, #1
 8028dc6:	d102      	bne.n	8028dce <_close_r+0x1a>
 8028dc8:	682b      	ldr	r3, [r5, #0]
 8028dca:	b103      	cbz	r3, 8028dce <_close_r+0x1a>
 8028dcc:	6023      	str	r3, [r4, #0]
 8028dce:	bd38      	pop	{r3, r4, r5, pc}
 8028dd0:	240290a0 	.word	0x240290a0

08028dd4 <_lseek_r>:
 8028dd4:	b538      	push	{r3, r4, r5, lr}
 8028dd6:	4d07      	ldr	r5, [pc, #28]	@ (8028df4 <_lseek_r+0x20>)
 8028dd8:	4604      	mov	r4, r0
 8028dda:	4608      	mov	r0, r1
 8028ddc:	4611      	mov	r1, r2
 8028dde:	2200      	movs	r2, #0
 8028de0:	602a      	str	r2, [r5, #0]
 8028de2:	461a      	mov	r2, r3
 8028de4:	f7d8 fc86 	bl	80016f4 <_lseek>
 8028de8:	1c43      	adds	r3, r0, #1
 8028dea:	d102      	bne.n	8028df2 <_lseek_r+0x1e>
 8028dec:	682b      	ldr	r3, [r5, #0]
 8028dee:	b103      	cbz	r3, 8028df2 <_lseek_r+0x1e>
 8028df0:	6023      	str	r3, [r4, #0]
 8028df2:	bd38      	pop	{r3, r4, r5, pc}
 8028df4:	240290a0 	.word	0x240290a0

08028df8 <_read_r>:
 8028df8:	b538      	push	{r3, r4, r5, lr}
 8028dfa:	4d07      	ldr	r5, [pc, #28]	@ (8028e18 <_read_r+0x20>)
 8028dfc:	4604      	mov	r4, r0
 8028dfe:	4608      	mov	r0, r1
 8028e00:	4611      	mov	r1, r2
 8028e02:	2200      	movs	r2, #0
 8028e04:	602a      	str	r2, [r5, #0]
 8028e06:	461a      	mov	r2, r3
 8028e08:	f7d8 fc4e 	bl	80016a8 <_read>
 8028e0c:	1c43      	adds	r3, r0, #1
 8028e0e:	d102      	bne.n	8028e16 <_read_r+0x1e>
 8028e10:	682b      	ldr	r3, [r5, #0]
 8028e12:	b103      	cbz	r3, 8028e16 <_read_r+0x1e>
 8028e14:	6023      	str	r3, [r4, #0]
 8028e16:	bd38      	pop	{r3, r4, r5, pc}
 8028e18:	240290a0 	.word	0x240290a0

08028e1c <_kill_r>:
 8028e1c:	b538      	push	{r3, r4, r5, lr}
 8028e1e:	4d07      	ldr	r5, [pc, #28]	@ (8028e3c <_kill_r+0x20>)
 8028e20:	2300      	movs	r3, #0
 8028e22:	4604      	mov	r4, r0
 8028e24:	4608      	mov	r0, r1
 8028e26:	4611      	mov	r1, r2
 8028e28:	602b      	str	r3, [r5, #0]
 8028e2a:	f7d8 fc2f 	bl	800168c <_kill>
 8028e2e:	1c43      	adds	r3, r0, #1
 8028e30:	d102      	bne.n	8028e38 <_kill_r+0x1c>
 8028e32:	682b      	ldr	r3, [r5, #0]
 8028e34:	b103      	cbz	r3, 8028e38 <_kill_r+0x1c>
 8028e36:	6023      	str	r3, [r4, #0]
 8028e38:	bd38      	pop	{r3, r4, r5, pc}
 8028e3a:	bf00      	nop
 8028e3c:	240290a0 	.word	0x240290a0

08028e40 <_getpid_r>:
 8028e40:	f7d8 bc22 	b.w	8001688 <_getpid>

08028e44 <_sbrk_r>:
 8028e44:	b538      	push	{r3, r4, r5, lr}
 8028e46:	4d06      	ldr	r5, [pc, #24]	@ (8028e60 <_sbrk_r+0x1c>)
 8028e48:	2300      	movs	r3, #0
 8028e4a:	4604      	mov	r4, r0
 8028e4c:	4608      	mov	r0, r1
 8028e4e:	602b      	str	r3, [r5, #0]
 8028e50:	f7d8 fc52 	bl	80016f8 <_sbrk>
 8028e54:	1c43      	adds	r3, r0, #1
 8028e56:	d102      	bne.n	8028e5e <_sbrk_r+0x1a>
 8028e58:	682b      	ldr	r3, [r5, #0]
 8028e5a:	b103      	cbz	r3, 8028e5e <_sbrk_r+0x1a>
 8028e5c:	6023      	str	r3, [r4, #0]
 8028e5e:	bd38      	pop	{r3, r4, r5, pc}
 8028e60:	240290a0 	.word	0x240290a0

08028e64 <_write_r>:
 8028e64:	b538      	push	{r3, r4, r5, lr}
 8028e66:	4d07      	ldr	r5, [pc, #28]	@ (8028e84 <_write_r+0x20>)
 8028e68:	4604      	mov	r4, r0
 8028e6a:	4608      	mov	r0, r1
 8028e6c:	4611      	mov	r1, r2
 8028e6e:	2200      	movs	r2, #0
 8028e70:	602a      	str	r2, [r5, #0]
 8028e72:	461a      	mov	r2, r3
 8028e74:	f7d8 fc26 	bl	80016c4 <_write>
 8028e78:	1c43      	adds	r3, r0, #1
 8028e7a:	d102      	bne.n	8028e82 <_write_r+0x1e>
 8028e7c:	682b      	ldr	r3, [r5, #0]
 8028e7e:	b103      	cbz	r3, 8028e82 <_write_r+0x1e>
 8028e80:	6023      	str	r3, [r4, #0]
 8028e82:	bd38      	pop	{r3, r4, r5, pc}
 8028e84:	240290a0 	.word	0x240290a0

08028e88 <__errno>:
 8028e88:	4b01      	ldr	r3, [pc, #4]	@ (8028e90 <__errno+0x8>)
 8028e8a:	6818      	ldr	r0, [r3, #0]
 8028e8c:	4770      	bx	lr
 8028e8e:	bf00      	nop
 8028e90:	240000e8 	.word	0x240000e8

08028e94 <__libc_init_array>:
 8028e94:	b570      	push	{r4, r5, r6, lr}
 8028e96:	4d0d      	ldr	r5, [pc, #52]	@ (8028ecc <__libc_init_array+0x38>)
 8028e98:	4c0d      	ldr	r4, [pc, #52]	@ (8028ed0 <__libc_init_array+0x3c>)
 8028e9a:	1b64      	subs	r4, r4, r5
 8028e9c:	10a4      	asrs	r4, r4, #2
 8028e9e:	2600      	movs	r6, #0
 8028ea0:	42a6      	cmp	r6, r4
 8028ea2:	d109      	bne.n	8028eb8 <__libc_init_array+0x24>
 8028ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8028ed4 <__libc_init_array+0x40>)
 8028ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8028ed8 <__libc_init_array+0x44>)
 8028ea8:	f000 fcd0 	bl	802984c <_init>
 8028eac:	1b64      	subs	r4, r4, r5
 8028eae:	10a4      	asrs	r4, r4, #2
 8028eb0:	2600      	movs	r6, #0
 8028eb2:	42a6      	cmp	r6, r4
 8028eb4:	d105      	bne.n	8028ec2 <__libc_init_array+0x2e>
 8028eb6:	bd70      	pop	{r4, r5, r6, pc}
 8028eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8028ebc:	4798      	blx	r3
 8028ebe:	3601      	adds	r6, #1
 8028ec0:	e7ee      	b.n	8028ea0 <__libc_init_array+0xc>
 8028ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8028ec6:	4798      	blx	r3
 8028ec8:	3601      	adds	r6, #1
 8028eca:	e7f2      	b.n	8028eb2 <__libc_init_array+0x1e>
 8028ecc:	08048e1c 	.word	0x08048e1c
 8028ed0:	08048e1c 	.word	0x08048e1c
 8028ed4:	08048e1c 	.word	0x08048e1c
 8028ed8:	08048e38 	.word	0x08048e38

08028edc <__retarget_lock_init_recursive>:
 8028edc:	4770      	bx	lr

08028ede <__retarget_lock_acquire_recursive>:
 8028ede:	4770      	bx	lr

08028ee0 <__retarget_lock_release_recursive>:
 8028ee0:	4770      	bx	lr

08028ee2 <memcpy>:
 8028ee2:	440a      	add	r2, r1
 8028ee4:	4291      	cmp	r1, r2
 8028ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8028eea:	d100      	bne.n	8028eee <memcpy+0xc>
 8028eec:	4770      	bx	lr
 8028eee:	b510      	push	{r4, lr}
 8028ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028ef8:	4291      	cmp	r1, r2
 8028efa:	d1f9      	bne.n	8028ef0 <memcpy+0xe>
 8028efc:	bd10      	pop	{r4, pc}
	...

08028f00 <__register_exitproc>:
 8028f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028f04:	4d27      	ldr	r5, [pc, #156]	@ (8028fa4 <__register_exitproc+0xa4>)
 8028f06:	4607      	mov	r7, r0
 8028f08:	6828      	ldr	r0, [r5, #0]
 8028f0a:	4691      	mov	r9, r2
 8028f0c:	460e      	mov	r6, r1
 8028f0e:	4698      	mov	r8, r3
 8028f10:	f7ff ffe5 	bl	8028ede <__retarget_lock_acquire_recursive>
 8028f14:	4a24      	ldr	r2, [pc, #144]	@ (8028fa8 <__register_exitproc+0xa8>)
 8028f16:	6814      	ldr	r4, [r2, #0]
 8028f18:	b93c      	cbnz	r4, 8028f2a <__register_exitproc+0x2a>
 8028f1a:	4b24      	ldr	r3, [pc, #144]	@ (8028fac <__register_exitproc+0xac>)
 8028f1c:	6013      	str	r3, [r2, #0]
 8028f1e:	4a24      	ldr	r2, [pc, #144]	@ (8028fb0 <__register_exitproc+0xb0>)
 8028f20:	b112      	cbz	r2, 8028f28 <__register_exitproc+0x28>
 8028f22:	6812      	ldr	r2, [r2, #0]
 8028f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8028f28:	4c20      	ldr	r4, [pc, #128]	@ (8028fac <__register_exitproc+0xac>)
 8028f2a:	6863      	ldr	r3, [r4, #4]
 8028f2c:	2b1f      	cmp	r3, #31
 8028f2e:	dd06      	ble.n	8028f3e <__register_exitproc+0x3e>
 8028f30:	6828      	ldr	r0, [r5, #0]
 8028f32:	f7ff ffd5 	bl	8028ee0 <__retarget_lock_release_recursive>
 8028f36:	f04f 30ff 	mov.w	r0, #4294967295
 8028f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028f3e:	b32f      	cbz	r7, 8028f8c <__register_exitproc+0x8c>
 8028f40:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8028f44:	b968      	cbnz	r0, 8028f62 <__register_exitproc+0x62>
 8028f46:	4b1b      	ldr	r3, [pc, #108]	@ (8028fb4 <__register_exitproc+0xb4>)
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d0f1      	beq.n	8028f30 <__register_exitproc+0x30>
 8028f4c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8028f50:	f7ff fc6e 	bl	8028830 <malloc>
 8028f54:	2800      	cmp	r0, #0
 8028f56:	d0eb      	beq.n	8028f30 <__register_exitproc+0x30>
 8028f58:	2300      	movs	r3, #0
 8028f5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8028f5e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8028f62:	6863      	ldr	r3, [r4, #4]
 8028f64:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028f68:	2201      	movs	r2, #1
 8028f6a:	409a      	lsls	r2, r3
 8028f6c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028f70:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8028f74:	4313      	orrs	r3, r2
 8028f76:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8028f7a:	2f02      	cmp	r7, #2
 8028f7c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8028f80:	bf02      	ittt	eq
 8028f82:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8028f86:	4313      	orreq	r3, r2
 8028f88:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8028f8c:	6863      	ldr	r3, [r4, #4]
 8028f8e:	6828      	ldr	r0, [r5, #0]
 8028f90:	1c5a      	adds	r2, r3, #1
 8028f92:	3302      	adds	r3, #2
 8028f94:	6062      	str	r2, [r4, #4]
 8028f96:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028f9a:	f7ff ffa1 	bl	8028ee0 <__retarget_lock_release_recursive>
 8028f9e:	2000      	movs	r0, #0
 8028fa0:	e7cb      	b.n	8028f3a <__register_exitproc+0x3a>
 8028fa2:	bf00      	nop
 8028fa4:	24000138 	.word	0x24000138
 8028fa8:	24029134 	.word	0x24029134
 8028fac:	240290a8 	.word	0x240290a8
 8028fb0:	0802da14 	.word	0x0802da14
 8028fb4:	08028831 	.word	0x08028831

08028fb8 <_free_r>:
 8028fb8:	b538      	push	{r3, r4, r5, lr}
 8028fba:	4605      	mov	r5, r0
 8028fbc:	2900      	cmp	r1, #0
 8028fbe:	d041      	beq.n	8029044 <_free_r+0x8c>
 8028fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028fc4:	1f0c      	subs	r4, r1, #4
 8028fc6:	2b00      	cmp	r3, #0
 8028fc8:	bfb8      	it	lt
 8028fca:	18e4      	addlt	r4, r4, r3
 8028fcc:	f7ff fce2 	bl	8028994 <__malloc_lock>
 8028fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8029048 <_free_r+0x90>)
 8028fd2:	6813      	ldr	r3, [r2, #0]
 8028fd4:	b933      	cbnz	r3, 8028fe4 <_free_r+0x2c>
 8028fd6:	6063      	str	r3, [r4, #4]
 8028fd8:	6014      	str	r4, [r2, #0]
 8028fda:	4628      	mov	r0, r5
 8028fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028fe0:	f7ff bcde 	b.w	80289a0 <__malloc_unlock>
 8028fe4:	42a3      	cmp	r3, r4
 8028fe6:	d908      	bls.n	8028ffa <_free_r+0x42>
 8028fe8:	6820      	ldr	r0, [r4, #0]
 8028fea:	1821      	adds	r1, r4, r0
 8028fec:	428b      	cmp	r3, r1
 8028fee:	bf01      	itttt	eq
 8028ff0:	6819      	ldreq	r1, [r3, #0]
 8028ff2:	685b      	ldreq	r3, [r3, #4]
 8028ff4:	1809      	addeq	r1, r1, r0
 8028ff6:	6021      	streq	r1, [r4, #0]
 8028ff8:	e7ed      	b.n	8028fd6 <_free_r+0x1e>
 8028ffa:	461a      	mov	r2, r3
 8028ffc:	685b      	ldr	r3, [r3, #4]
 8028ffe:	b10b      	cbz	r3, 8029004 <_free_r+0x4c>
 8029000:	42a3      	cmp	r3, r4
 8029002:	d9fa      	bls.n	8028ffa <_free_r+0x42>
 8029004:	6811      	ldr	r1, [r2, #0]
 8029006:	1850      	adds	r0, r2, r1
 8029008:	42a0      	cmp	r0, r4
 802900a:	d10b      	bne.n	8029024 <_free_r+0x6c>
 802900c:	6820      	ldr	r0, [r4, #0]
 802900e:	4401      	add	r1, r0
 8029010:	1850      	adds	r0, r2, r1
 8029012:	4283      	cmp	r3, r0
 8029014:	6011      	str	r1, [r2, #0]
 8029016:	d1e0      	bne.n	8028fda <_free_r+0x22>
 8029018:	6818      	ldr	r0, [r3, #0]
 802901a:	685b      	ldr	r3, [r3, #4]
 802901c:	6053      	str	r3, [r2, #4]
 802901e:	4408      	add	r0, r1
 8029020:	6010      	str	r0, [r2, #0]
 8029022:	e7da      	b.n	8028fda <_free_r+0x22>
 8029024:	d902      	bls.n	802902c <_free_r+0x74>
 8029026:	230c      	movs	r3, #12
 8029028:	602b      	str	r3, [r5, #0]
 802902a:	e7d6      	b.n	8028fda <_free_r+0x22>
 802902c:	6820      	ldr	r0, [r4, #0]
 802902e:	1821      	adds	r1, r4, r0
 8029030:	428b      	cmp	r3, r1
 8029032:	bf04      	itt	eq
 8029034:	6819      	ldreq	r1, [r3, #0]
 8029036:	685b      	ldreq	r3, [r3, #4]
 8029038:	6063      	str	r3, [r4, #4]
 802903a:	bf04      	itt	eq
 802903c:	1809      	addeq	r1, r1, r0
 802903e:	6021      	streq	r1, [r4, #0]
 8029040:	6054      	str	r4, [r2, #4]
 8029042:	e7ca      	b.n	8028fda <_free_r+0x22>
 8029044:	bd38      	pop	{r3, r4, r5, pc}
 8029046:	bf00      	nop
 8029048:	24028f60 	.word	0x24028f60

0802904c <__sfputc_r>:
 802904c:	6893      	ldr	r3, [r2, #8]
 802904e:	3b01      	subs	r3, #1
 8029050:	2b00      	cmp	r3, #0
 8029052:	b410      	push	{r4}
 8029054:	6093      	str	r3, [r2, #8]
 8029056:	da08      	bge.n	802906a <__sfputc_r+0x1e>
 8029058:	6994      	ldr	r4, [r2, #24]
 802905a:	42a3      	cmp	r3, r4
 802905c:	db01      	blt.n	8029062 <__sfputc_r+0x16>
 802905e:	290a      	cmp	r1, #10
 8029060:	d103      	bne.n	802906a <__sfputc_r+0x1e>
 8029062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029066:	f7ff bdc6 	b.w	8028bf6 <__swbuf_r>
 802906a:	6813      	ldr	r3, [r2, #0]
 802906c:	1c58      	adds	r0, r3, #1
 802906e:	6010      	str	r0, [r2, #0]
 8029070:	7019      	strb	r1, [r3, #0]
 8029072:	4608      	mov	r0, r1
 8029074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029078:	4770      	bx	lr

0802907a <__sfputs_r>:
 802907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802907c:	4606      	mov	r6, r0
 802907e:	460f      	mov	r7, r1
 8029080:	4614      	mov	r4, r2
 8029082:	18d5      	adds	r5, r2, r3
 8029084:	42ac      	cmp	r4, r5
 8029086:	d101      	bne.n	802908c <__sfputs_r+0x12>
 8029088:	2000      	movs	r0, #0
 802908a:	e007      	b.n	802909c <__sfputs_r+0x22>
 802908c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029090:	463a      	mov	r2, r7
 8029092:	4630      	mov	r0, r6
 8029094:	f7ff ffda 	bl	802904c <__sfputc_r>
 8029098:	1c43      	adds	r3, r0, #1
 802909a:	d1f3      	bne.n	8029084 <__sfputs_r+0xa>
 802909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080290a0 <_vfiprintf_r>:
 80290a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290a4:	460d      	mov	r5, r1
 80290a6:	b09d      	sub	sp, #116	@ 0x74
 80290a8:	4614      	mov	r4, r2
 80290aa:	4698      	mov	r8, r3
 80290ac:	4606      	mov	r6, r0
 80290ae:	b118      	cbz	r0, 80290b8 <_vfiprintf_r+0x18>
 80290b0:	6a03      	ldr	r3, [r0, #32]
 80290b2:	b90b      	cbnz	r3, 80290b8 <_vfiprintf_r+0x18>
 80290b4:	f7ff fd14 	bl	8028ae0 <__sinit>
 80290b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80290ba:	07d9      	lsls	r1, r3, #31
 80290bc:	d405      	bmi.n	80290ca <_vfiprintf_r+0x2a>
 80290be:	89ab      	ldrh	r3, [r5, #12]
 80290c0:	059a      	lsls	r2, r3, #22
 80290c2:	d402      	bmi.n	80290ca <_vfiprintf_r+0x2a>
 80290c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80290c6:	f7ff ff0a 	bl	8028ede <__retarget_lock_acquire_recursive>
 80290ca:	89ab      	ldrh	r3, [r5, #12]
 80290cc:	071b      	lsls	r3, r3, #28
 80290ce:	d501      	bpl.n	80290d4 <_vfiprintf_r+0x34>
 80290d0:	692b      	ldr	r3, [r5, #16]
 80290d2:	b99b      	cbnz	r3, 80290fc <_vfiprintf_r+0x5c>
 80290d4:	4629      	mov	r1, r5
 80290d6:	4630      	mov	r0, r6
 80290d8:	f7ff fdcc 	bl	8028c74 <__swsetup_r>
 80290dc:	b170      	cbz	r0, 80290fc <_vfiprintf_r+0x5c>
 80290de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80290e0:	07dc      	lsls	r4, r3, #31
 80290e2:	d504      	bpl.n	80290ee <_vfiprintf_r+0x4e>
 80290e4:	f04f 30ff 	mov.w	r0, #4294967295
 80290e8:	b01d      	add	sp, #116	@ 0x74
 80290ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290ee:	89ab      	ldrh	r3, [r5, #12]
 80290f0:	0598      	lsls	r0, r3, #22
 80290f2:	d4f7      	bmi.n	80290e4 <_vfiprintf_r+0x44>
 80290f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80290f6:	f7ff fef3 	bl	8028ee0 <__retarget_lock_release_recursive>
 80290fa:	e7f3      	b.n	80290e4 <_vfiprintf_r+0x44>
 80290fc:	2300      	movs	r3, #0
 80290fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8029100:	2320      	movs	r3, #32
 8029102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029106:	f8cd 800c 	str.w	r8, [sp, #12]
 802910a:	2330      	movs	r3, #48	@ 0x30
 802910c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80292bc <_vfiprintf_r+0x21c>
 8029110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029114:	f04f 0901 	mov.w	r9, #1
 8029118:	4623      	mov	r3, r4
 802911a:	469a      	mov	sl, r3
 802911c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029120:	b10a      	cbz	r2, 8029126 <_vfiprintf_r+0x86>
 8029122:	2a25      	cmp	r2, #37	@ 0x25
 8029124:	d1f9      	bne.n	802911a <_vfiprintf_r+0x7a>
 8029126:	ebba 0b04 	subs.w	fp, sl, r4
 802912a:	d00b      	beq.n	8029144 <_vfiprintf_r+0xa4>
 802912c:	465b      	mov	r3, fp
 802912e:	4622      	mov	r2, r4
 8029130:	4629      	mov	r1, r5
 8029132:	4630      	mov	r0, r6
 8029134:	f7ff ffa1 	bl	802907a <__sfputs_r>
 8029138:	3001      	adds	r0, #1
 802913a:	f000 80a7 	beq.w	802928c <_vfiprintf_r+0x1ec>
 802913e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029140:	445a      	add	r2, fp
 8029142:	9209      	str	r2, [sp, #36]	@ 0x24
 8029144:	f89a 3000 	ldrb.w	r3, [sl]
 8029148:	2b00      	cmp	r3, #0
 802914a:	f000 809f 	beq.w	802928c <_vfiprintf_r+0x1ec>
 802914e:	2300      	movs	r3, #0
 8029150:	f04f 32ff 	mov.w	r2, #4294967295
 8029154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029158:	f10a 0a01 	add.w	sl, sl, #1
 802915c:	9304      	str	r3, [sp, #16]
 802915e:	9307      	str	r3, [sp, #28]
 8029160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029164:	931a      	str	r3, [sp, #104]	@ 0x68
 8029166:	4654      	mov	r4, sl
 8029168:	2205      	movs	r2, #5
 802916a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802916e:	4853      	ldr	r0, [pc, #332]	@ (80292bc <_vfiprintf_r+0x21c>)
 8029170:	f7d7 f8b6 	bl	80002e0 <memchr>
 8029174:	9a04      	ldr	r2, [sp, #16]
 8029176:	b9d8      	cbnz	r0, 80291b0 <_vfiprintf_r+0x110>
 8029178:	06d1      	lsls	r1, r2, #27
 802917a:	bf44      	itt	mi
 802917c:	2320      	movmi	r3, #32
 802917e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029182:	0713      	lsls	r3, r2, #28
 8029184:	bf44      	itt	mi
 8029186:	232b      	movmi	r3, #43	@ 0x2b
 8029188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802918c:	f89a 3000 	ldrb.w	r3, [sl]
 8029190:	2b2a      	cmp	r3, #42	@ 0x2a
 8029192:	d015      	beq.n	80291c0 <_vfiprintf_r+0x120>
 8029194:	9a07      	ldr	r2, [sp, #28]
 8029196:	4654      	mov	r4, sl
 8029198:	2000      	movs	r0, #0
 802919a:	f04f 0c0a 	mov.w	ip, #10
 802919e:	4621      	mov	r1, r4
 80291a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80291a4:	3b30      	subs	r3, #48	@ 0x30
 80291a6:	2b09      	cmp	r3, #9
 80291a8:	d94b      	bls.n	8029242 <_vfiprintf_r+0x1a2>
 80291aa:	b1b0      	cbz	r0, 80291da <_vfiprintf_r+0x13a>
 80291ac:	9207      	str	r2, [sp, #28]
 80291ae:	e014      	b.n	80291da <_vfiprintf_r+0x13a>
 80291b0:	eba0 0308 	sub.w	r3, r0, r8
 80291b4:	fa09 f303 	lsl.w	r3, r9, r3
 80291b8:	4313      	orrs	r3, r2
 80291ba:	9304      	str	r3, [sp, #16]
 80291bc:	46a2      	mov	sl, r4
 80291be:	e7d2      	b.n	8029166 <_vfiprintf_r+0xc6>
 80291c0:	9b03      	ldr	r3, [sp, #12]
 80291c2:	1d19      	adds	r1, r3, #4
 80291c4:	681b      	ldr	r3, [r3, #0]
 80291c6:	9103      	str	r1, [sp, #12]
 80291c8:	2b00      	cmp	r3, #0
 80291ca:	bfbb      	ittet	lt
 80291cc:	425b      	neglt	r3, r3
 80291ce:	f042 0202 	orrlt.w	r2, r2, #2
 80291d2:	9307      	strge	r3, [sp, #28]
 80291d4:	9307      	strlt	r3, [sp, #28]
 80291d6:	bfb8      	it	lt
 80291d8:	9204      	strlt	r2, [sp, #16]
 80291da:	7823      	ldrb	r3, [r4, #0]
 80291dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80291de:	d10a      	bne.n	80291f6 <_vfiprintf_r+0x156>
 80291e0:	7863      	ldrb	r3, [r4, #1]
 80291e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80291e4:	d132      	bne.n	802924c <_vfiprintf_r+0x1ac>
 80291e6:	9b03      	ldr	r3, [sp, #12]
 80291e8:	1d1a      	adds	r2, r3, #4
 80291ea:	681b      	ldr	r3, [r3, #0]
 80291ec:	9203      	str	r2, [sp, #12]
 80291ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80291f2:	3402      	adds	r4, #2
 80291f4:	9305      	str	r3, [sp, #20]
 80291f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80292cc <_vfiprintf_r+0x22c>
 80291fa:	7821      	ldrb	r1, [r4, #0]
 80291fc:	2203      	movs	r2, #3
 80291fe:	4650      	mov	r0, sl
 8029200:	f7d7 f86e 	bl	80002e0 <memchr>
 8029204:	b138      	cbz	r0, 8029216 <_vfiprintf_r+0x176>
 8029206:	9b04      	ldr	r3, [sp, #16]
 8029208:	eba0 000a 	sub.w	r0, r0, sl
 802920c:	2240      	movs	r2, #64	@ 0x40
 802920e:	4082      	lsls	r2, r0
 8029210:	4313      	orrs	r3, r2
 8029212:	3401      	adds	r4, #1
 8029214:	9304      	str	r3, [sp, #16]
 8029216:	f814 1b01 	ldrb.w	r1, [r4], #1
 802921a:	4829      	ldr	r0, [pc, #164]	@ (80292c0 <_vfiprintf_r+0x220>)
 802921c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029220:	2206      	movs	r2, #6
 8029222:	f7d7 f85d 	bl	80002e0 <memchr>
 8029226:	2800      	cmp	r0, #0
 8029228:	d03f      	beq.n	80292aa <_vfiprintf_r+0x20a>
 802922a:	4b26      	ldr	r3, [pc, #152]	@ (80292c4 <_vfiprintf_r+0x224>)
 802922c:	bb1b      	cbnz	r3, 8029276 <_vfiprintf_r+0x1d6>
 802922e:	9b03      	ldr	r3, [sp, #12]
 8029230:	3307      	adds	r3, #7
 8029232:	f023 0307 	bic.w	r3, r3, #7
 8029236:	3308      	adds	r3, #8
 8029238:	9303      	str	r3, [sp, #12]
 802923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802923c:	443b      	add	r3, r7
 802923e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029240:	e76a      	b.n	8029118 <_vfiprintf_r+0x78>
 8029242:	fb0c 3202 	mla	r2, ip, r2, r3
 8029246:	460c      	mov	r4, r1
 8029248:	2001      	movs	r0, #1
 802924a:	e7a8      	b.n	802919e <_vfiprintf_r+0xfe>
 802924c:	2300      	movs	r3, #0
 802924e:	3401      	adds	r4, #1
 8029250:	9305      	str	r3, [sp, #20]
 8029252:	4619      	mov	r1, r3
 8029254:	f04f 0c0a 	mov.w	ip, #10
 8029258:	4620      	mov	r0, r4
 802925a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802925e:	3a30      	subs	r2, #48	@ 0x30
 8029260:	2a09      	cmp	r2, #9
 8029262:	d903      	bls.n	802926c <_vfiprintf_r+0x1cc>
 8029264:	2b00      	cmp	r3, #0
 8029266:	d0c6      	beq.n	80291f6 <_vfiprintf_r+0x156>
 8029268:	9105      	str	r1, [sp, #20]
 802926a:	e7c4      	b.n	80291f6 <_vfiprintf_r+0x156>
 802926c:	fb0c 2101 	mla	r1, ip, r1, r2
 8029270:	4604      	mov	r4, r0
 8029272:	2301      	movs	r3, #1
 8029274:	e7f0      	b.n	8029258 <_vfiprintf_r+0x1b8>
 8029276:	ab03      	add	r3, sp, #12
 8029278:	9300      	str	r3, [sp, #0]
 802927a:	462a      	mov	r2, r5
 802927c:	4b12      	ldr	r3, [pc, #72]	@ (80292c8 <_vfiprintf_r+0x228>)
 802927e:	a904      	add	r1, sp, #16
 8029280:	4630      	mov	r0, r6
 8029282:	f3af 8000 	nop.w
 8029286:	4607      	mov	r7, r0
 8029288:	1c78      	adds	r0, r7, #1
 802928a:	d1d6      	bne.n	802923a <_vfiprintf_r+0x19a>
 802928c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802928e:	07d9      	lsls	r1, r3, #31
 8029290:	d405      	bmi.n	802929e <_vfiprintf_r+0x1fe>
 8029292:	89ab      	ldrh	r3, [r5, #12]
 8029294:	059a      	lsls	r2, r3, #22
 8029296:	d402      	bmi.n	802929e <_vfiprintf_r+0x1fe>
 8029298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802929a:	f7ff fe21 	bl	8028ee0 <__retarget_lock_release_recursive>
 802929e:	89ab      	ldrh	r3, [r5, #12]
 80292a0:	065b      	lsls	r3, r3, #25
 80292a2:	f53f af1f 	bmi.w	80290e4 <_vfiprintf_r+0x44>
 80292a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80292a8:	e71e      	b.n	80290e8 <_vfiprintf_r+0x48>
 80292aa:	ab03      	add	r3, sp, #12
 80292ac:	9300      	str	r3, [sp, #0]
 80292ae:	462a      	mov	r2, r5
 80292b0:	4b05      	ldr	r3, [pc, #20]	@ (80292c8 <_vfiprintf_r+0x228>)
 80292b2:	a904      	add	r1, sp, #16
 80292b4:	4630      	mov	r0, r6
 80292b6:	f000 f879 	bl	80293ac <_printf_i>
 80292ba:	e7e4      	b.n	8029286 <_vfiprintf_r+0x1e6>
 80292bc:	0802da18 	.word	0x0802da18
 80292c0:	0802da22 	.word	0x0802da22
 80292c4:	00000000 	.word	0x00000000
 80292c8:	0802907b 	.word	0x0802907b
 80292cc:	0802da1e 	.word	0x0802da1e

080292d0 <_printf_common>:
 80292d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80292d4:	4616      	mov	r6, r2
 80292d6:	4698      	mov	r8, r3
 80292d8:	688a      	ldr	r2, [r1, #8]
 80292da:	690b      	ldr	r3, [r1, #16]
 80292dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80292e0:	4293      	cmp	r3, r2
 80292e2:	bfb8      	it	lt
 80292e4:	4613      	movlt	r3, r2
 80292e6:	6033      	str	r3, [r6, #0]
 80292e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80292ec:	4607      	mov	r7, r0
 80292ee:	460c      	mov	r4, r1
 80292f0:	b10a      	cbz	r2, 80292f6 <_printf_common+0x26>
 80292f2:	3301      	adds	r3, #1
 80292f4:	6033      	str	r3, [r6, #0]
 80292f6:	6823      	ldr	r3, [r4, #0]
 80292f8:	0699      	lsls	r1, r3, #26
 80292fa:	bf42      	ittt	mi
 80292fc:	6833      	ldrmi	r3, [r6, #0]
 80292fe:	3302      	addmi	r3, #2
 8029300:	6033      	strmi	r3, [r6, #0]
 8029302:	6825      	ldr	r5, [r4, #0]
 8029304:	f015 0506 	ands.w	r5, r5, #6
 8029308:	d106      	bne.n	8029318 <_printf_common+0x48>
 802930a:	f104 0a19 	add.w	sl, r4, #25
 802930e:	68e3      	ldr	r3, [r4, #12]
 8029310:	6832      	ldr	r2, [r6, #0]
 8029312:	1a9b      	subs	r3, r3, r2
 8029314:	42ab      	cmp	r3, r5
 8029316:	dc26      	bgt.n	8029366 <_printf_common+0x96>
 8029318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802931c:	6822      	ldr	r2, [r4, #0]
 802931e:	3b00      	subs	r3, #0
 8029320:	bf18      	it	ne
 8029322:	2301      	movne	r3, #1
 8029324:	0692      	lsls	r2, r2, #26
 8029326:	d42b      	bmi.n	8029380 <_printf_common+0xb0>
 8029328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802932c:	4641      	mov	r1, r8
 802932e:	4638      	mov	r0, r7
 8029330:	47c8      	blx	r9
 8029332:	3001      	adds	r0, #1
 8029334:	d01e      	beq.n	8029374 <_printf_common+0xa4>
 8029336:	6823      	ldr	r3, [r4, #0]
 8029338:	6922      	ldr	r2, [r4, #16]
 802933a:	f003 0306 	and.w	r3, r3, #6
 802933e:	2b04      	cmp	r3, #4
 8029340:	bf02      	ittt	eq
 8029342:	68e5      	ldreq	r5, [r4, #12]
 8029344:	6833      	ldreq	r3, [r6, #0]
 8029346:	1aed      	subeq	r5, r5, r3
 8029348:	68a3      	ldr	r3, [r4, #8]
 802934a:	bf0c      	ite	eq
 802934c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029350:	2500      	movne	r5, #0
 8029352:	4293      	cmp	r3, r2
 8029354:	bfc4      	itt	gt
 8029356:	1a9b      	subgt	r3, r3, r2
 8029358:	18ed      	addgt	r5, r5, r3
 802935a:	2600      	movs	r6, #0
 802935c:	341a      	adds	r4, #26
 802935e:	42b5      	cmp	r5, r6
 8029360:	d11a      	bne.n	8029398 <_printf_common+0xc8>
 8029362:	2000      	movs	r0, #0
 8029364:	e008      	b.n	8029378 <_printf_common+0xa8>
 8029366:	2301      	movs	r3, #1
 8029368:	4652      	mov	r2, sl
 802936a:	4641      	mov	r1, r8
 802936c:	4638      	mov	r0, r7
 802936e:	47c8      	blx	r9
 8029370:	3001      	adds	r0, #1
 8029372:	d103      	bne.n	802937c <_printf_common+0xac>
 8029374:	f04f 30ff 	mov.w	r0, #4294967295
 8029378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802937c:	3501      	adds	r5, #1
 802937e:	e7c6      	b.n	802930e <_printf_common+0x3e>
 8029380:	18e1      	adds	r1, r4, r3
 8029382:	1c5a      	adds	r2, r3, #1
 8029384:	2030      	movs	r0, #48	@ 0x30
 8029386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802938a:	4422      	add	r2, r4
 802938c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029394:	3302      	adds	r3, #2
 8029396:	e7c7      	b.n	8029328 <_printf_common+0x58>
 8029398:	2301      	movs	r3, #1
 802939a:	4622      	mov	r2, r4
 802939c:	4641      	mov	r1, r8
 802939e:	4638      	mov	r0, r7
 80293a0:	47c8      	blx	r9
 80293a2:	3001      	adds	r0, #1
 80293a4:	d0e6      	beq.n	8029374 <_printf_common+0xa4>
 80293a6:	3601      	adds	r6, #1
 80293a8:	e7d9      	b.n	802935e <_printf_common+0x8e>
	...

080293ac <_printf_i>:
 80293ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80293b0:	7e0f      	ldrb	r7, [r1, #24]
 80293b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80293b4:	2f78      	cmp	r7, #120	@ 0x78
 80293b6:	4691      	mov	r9, r2
 80293b8:	4680      	mov	r8, r0
 80293ba:	460c      	mov	r4, r1
 80293bc:	469a      	mov	sl, r3
 80293be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80293c2:	d807      	bhi.n	80293d4 <_printf_i+0x28>
 80293c4:	2f62      	cmp	r7, #98	@ 0x62
 80293c6:	d80a      	bhi.n	80293de <_printf_i+0x32>
 80293c8:	2f00      	cmp	r7, #0
 80293ca:	f000 80d2 	beq.w	8029572 <_printf_i+0x1c6>
 80293ce:	2f58      	cmp	r7, #88	@ 0x58
 80293d0:	f000 80b9 	beq.w	8029546 <_printf_i+0x19a>
 80293d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80293d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80293dc:	e03a      	b.n	8029454 <_printf_i+0xa8>
 80293de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80293e2:	2b15      	cmp	r3, #21
 80293e4:	d8f6      	bhi.n	80293d4 <_printf_i+0x28>
 80293e6:	a101      	add	r1, pc, #4	@ (adr r1, 80293ec <_printf_i+0x40>)
 80293e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80293ec:	08029445 	.word	0x08029445
 80293f0:	08029459 	.word	0x08029459
 80293f4:	080293d5 	.word	0x080293d5
 80293f8:	080293d5 	.word	0x080293d5
 80293fc:	080293d5 	.word	0x080293d5
 8029400:	080293d5 	.word	0x080293d5
 8029404:	08029459 	.word	0x08029459
 8029408:	080293d5 	.word	0x080293d5
 802940c:	080293d5 	.word	0x080293d5
 8029410:	080293d5 	.word	0x080293d5
 8029414:	080293d5 	.word	0x080293d5
 8029418:	08029559 	.word	0x08029559
 802941c:	08029483 	.word	0x08029483
 8029420:	08029513 	.word	0x08029513
 8029424:	080293d5 	.word	0x080293d5
 8029428:	080293d5 	.word	0x080293d5
 802942c:	0802957b 	.word	0x0802957b
 8029430:	080293d5 	.word	0x080293d5
 8029434:	08029483 	.word	0x08029483
 8029438:	080293d5 	.word	0x080293d5
 802943c:	080293d5 	.word	0x080293d5
 8029440:	0802951b 	.word	0x0802951b
 8029444:	6833      	ldr	r3, [r6, #0]
 8029446:	1d1a      	adds	r2, r3, #4
 8029448:	681b      	ldr	r3, [r3, #0]
 802944a:	6032      	str	r2, [r6, #0]
 802944c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029454:	2301      	movs	r3, #1
 8029456:	e09d      	b.n	8029594 <_printf_i+0x1e8>
 8029458:	6833      	ldr	r3, [r6, #0]
 802945a:	6820      	ldr	r0, [r4, #0]
 802945c:	1d19      	adds	r1, r3, #4
 802945e:	6031      	str	r1, [r6, #0]
 8029460:	0606      	lsls	r6, r0, #24
 8029462:	d501      	bpl.n	8029468 <_printf_i+0xbc>
 8029464:	681d      	ldr	r5, [r3, #0]
 8029466:	e003      	b.n	8029470 <_printf_i+0xc4>
 8029468:	0645      	lsls	r5, r0, #25
 802946a:	d5fb      	bpl.n	8029464 <_printf_i+0xb8>
 802946c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029470:	2d00      	cmp	r5, #0
 8029472:	da03      	bge.n	802947c <_printf_i+0xd0>
 8029474:	232d      	movs	r3, #45	@ 0x2d
 8029476:	426d      	negs	r5, r5
 8029478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802947c:	4859      	ldr	r0, [pc, #356]	@ (80295e4 <_printf_i+0x238>)
 802947e:	230a      	movs	r3, #10
 8029480:	e011      	b.n	80294a6 <_printf_i+0xfa>
 8029482:	6821      	ldr	r1, [r4, #0]
 8029484:	6833      	ldr	r3, [r6, #0]
 8029486:	0608      	lsls	r0, r1, #24
 8029488:	f853 5b04 	ldr.w	r5, [r3], #4
 802948c:	d402      	bmi.n	8029494 <_printf_i+0xe8>
 802948e:	0649      	lsls	r1, r1, #25
 8029490:	bf48      	it	mi
 8029492:	b2ad      	uxthmi	r5, r5
 8029494:	2f6f      	cmp	r7, #111	@ 0x6f
 8029496:	4853      	ldr	r0, [pc, #332]	@ (80295e4 <_printf_i+0x238>)
 8029498:	6033      	str	r3, [r6, #0]
 802949a:	bf14      	ite	ne
 802949c:	230a      	movne	r3, #10
 802949e:	2308      	moveq	r3, #8
 80294a0:	2100      	movs	r1, #0
 80294a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80294a6:	6866      	ldr	r6, [r4, #4]
 80294a8:	60a6      	str	r6, [r4, #8]
 80294aa:	2e00      	cmp	r6, #0
 80294ac:	bfa2      	ittt	ge
 80294ae:	6821      	ldrge	r1, [r4, #0]
 80294b0:	f021 0104 	bicge.w	r1, r1, #4
 80294b4:	6021      	strge	r1, [r4, #0]
 80294b6:	b90d      	cbnz	r5, 80294bc <_printf_i+0x110>
 80294b8:	2e00      	cmp	r6, #0
 80294ba:	d04b      	beq.n	8029554 <_printf_i+0x1a8>
 80294bc:	4616      	mov	r6, r2
 80294be:	fbb5 f1f3 	udiv	r1, r5, r3
 80294c2:	fb03 5711 	mls	r7, r3, r1, r5
 80294c6:	5dc7      	ldrb	r7, [r0, r7]
 80294c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80294cc:	462f      	mov	r7, r5
 80294ce:	42bb      	cmp	r3, r7
 80294d0:	460d      	mov	r5, r1
 80294d2:	d9f4      	bls.n	80294be <_printf_i+0x112>
 80294d4:	2b08      	cmp	r3, #8
 80294d6:	d10b      	bne.n	80294f0 <_printf_i+0x144>
 80294d8:	6823      	ldr	r3, [r4, #0]
 80294da:	07df      	lsls	r7, r3, #31
 80294dc:	d508      	bpl.n	80294f0 <_printf_i+0x144>
 80294de:	6923      	ldr	r3, [r4, #16]
 80294e0:	6861      	ldr	r1, [r4, #4]
 80294e2:	4299      	cmp	r1, r3
 80294e4:	bfde      	ittt	le
 80294e6:	2330      	movle	r3, #48	@ 0x30
 80294e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80294ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80294f0:	1b92      	subs	r2, r2, r6
 80294f2:	6122      	str	r2, [r4, #16]
 80294f4:	f8cd a000 	str.w	sl, [sp]
 80294f8:	464b      	mov	r3, r9
 80294fa:	aa03      	add	r2, sp, #12
 80294fc:	4621      	mov	r1, r4
 80294fe:	4640      	mov	r0, r8
 8029500:	f7ff fee6 	bl	80292d0 <_printf_common>
 8029504:	3001      	adds	r0, #1
 8029506:	d14a      	bne.n	802959e <_printf_i+0x1f2>
 8029508:	f04f 30ff 	mov.w	r0, #4294967295
 802950c:	b004      	add	sp, #16
 802950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029512:	6823      	ldr	r3, [r4, #0]
 8029514:	f043 0320 	orr.w	r3, r3, #32
 8029518:	6023      	str	r3, [r4, #0]
 802951a:	4833      	ldr	r0, [pc, #204]	@ (80295e8 <_printf_i+0x23c>)
 802951c:	2778      	movs	r7, #120	@ 0x78
 802951e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029522:	6823      	ldr	r3, [r4, #0]
 8029524:	6831      	ldr	r1, [r6, #0]
 8029526:	061f      	lsls	r7, r3, #24
 8029528:	f851 5b04 	ldr.w	r5, [r1], #4
 802952c:	d402      	bmi.n	8029534 <_printf_i+0x188>
 802952e:	065f      	lsls	r7, r3, #25
 8029530:	bf48      	it	mi
 8029532:	b2ad      	uxthmi	r5, r5
 8029534:	6031      	str	r1, [r6, #0]
 8029536:	07d9      	lsls	r1, r3, #31
 8029538:	bf44      	itt	mi
 802953a:	f043 0320 	orrmi.w	r3, r3, #32
 802953e:	6023      	strmi	r3, [r4, #0]
 8029540:	b11d      	cbz	r5, 802954a <_printf_i+0x19e>
 8029542:	2310      	movs	r3, #16
 8029544:	e7ac      	b.n	80294a0 <_printf_i+0xf4>
 8029546:	4827      	ldr	r0, [pc, #156]	@ (80295e4 <_printf_i+0x238>)
 8029548:	e7e9      	b.n	802951e <_printf_i+0x172>
 802954a:	6823      	ldr	r3, [r4, #0]
 802954c:	f023 0320 	bic.w	r3, r3, #32
 8029550:	6023      	str	r3, [r4, #0]
 8029552:	e7f6      	b.n	8029542 <_printf_i+0x196>
 8029554:	4616      	mov	r6, r2
 8029556:	e7bd      	b.n	80294d4 <_printf_i+0x128>
 8029558:	6833      	ldr	r3, [r6, #0]
 802955a:	6825      	ldr	r5, [r4, #0]
 802955c:	6961      	ldr	r1, [r4, #20]
 802955e:	1d18      	adds	r0, r3, #4
 8029560:	6030      	str	r0, [r6, #0]
 8029562:	062e      	lsls	r6, r5, #24
 8029564:	681b      	ldr	r3, [r3, #0]
 8029566:	d501      	bpl.n	802956c <_printf_i+0x1c0>
 8029568:	6019      	str	r1, [r3, #0]
 802956a:	e002      	b.n	8029572 <_printf_i+0x1c6>
 802956c:	0668      	lsls	r0, r5, #25
 802956e:	d5fb      	bpl.n	8029568 <_printf_i+0x1bc>
 8029570:	8019      	strh	r1, [r3, #0]
 8029572:	2300      	movs	r3, #0
 8029574:	6123      	str	r3, [r4, #16]
 8029576:	4616      	mov	r6, r2
 8029578:	e7bc      	b.n	80294f4 <_printf_i+0x148>
 802957a:	6833      	ldr	r3, [r6, #0]
 802957c:	1d1a      	adds	r2, r3, #4
 802957e:	6032      	str	r2, [r6, #0]
 8029580:	681e      	ldr	r6, [r3, #0]
 8029582:	6862      	ldr	r2, [r4, #4]
 8029584:	2100      	movs	r1, #0
 8029586:	4630      	mov	r0, r6
 8029588:	f7d6 feaa 	bl	80002e0 <memchr>
 802958c:	b108      	cbz	r0, 8029592 <_printf_i+0x1e6>
 802958e:	1b80      	subs	r0, r0, r6
 8029590:	6060      	str	r0, [r4, #4]
 8029592:	6863      	ldr	r3, [r4, #4]
 8029594:	6123      	str	r3, [r4, #16]
 8029596:	2300      	movs	r3, #0
 8029598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802959c:	e7aa      	b.n	80294f4 <_printf_i+0x148>
 802959e:	6923      	ldr	r3, [r4, #16]
 80295a0:	4632      	mov	r2, r6
 80295a2:	4649      	mov	r1, r9
 80295a4:	4640      	mov	r0, r8
 80295a6:	47d0      	blx	sl
 80295a8:	3001      	adds	r0, #1
 80295aa:	d0ad      	beq.n	8029508 <_printf_i+0x15c>
 80295ac:	6823      	ldr	r3, [r4, #0]
 80295ae:	079b      	lsls	r3, r3, #30
 80295b0:	d413      	bmi.n	80295da <_printf_i+0x22e>
 80295b2:	68e0      	ldr	r0, [r4, #12]
 80295b4:	9b03      	ldr	r3, [sp, #12]
 80295b6:	4298      	cmp	r0, r3
 80295b8:	bfb8      	it	lt
 80295ba:	4618      	movlt	r0, r3
 80295bc:	e7a6      	b.n	802950c <_printf_i+0x160>
 80295be:	2301      	movs	r3, #1
 80295c0:	4632      	mov	r2, r6
 80295c2:	4649      	mov	r1, r9
 80295c4:	4640      	mov	r0, r8
 80295c6:	47d0      	blx	sl
 80295c8:	3001      	adds	r0, #1
 80295ca:	d09d      	beq.n	8029508 <_printf_i+0x15c>
 80295cc:	3501      	adds	r5, #1
 80295ce:	68e3      	ldr	r3, [r4, #12]
 80295d0:	9903      	ldr	r1, [sp, #12]
 80295d2:	1a5b      	subs	r3, r3, r1
 80295d4:	42ab      	cmp	r3, r5
 80295d6:	dcf2      	bgt.n	80295be <_printf_i+0x212>
 80295d8:	e7eb      	b.n	80295b2 <_printf_i+0x206>
 80295da:	2500      	movs	r5, #0
 80295dc:	f104 0619 	add.w	r6, r4, #25
 80295e0:	e7f5      	b.n	80295ce <_printf_i+0x222>
 80295e2:	bf00      	nop
 80295e4:	0802da29 	.word	0x0802da29
 80295e8:	0802da3a 	.word	0x0802da3a

080295ec <__sflush_r>:
 80295ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80295f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295f4:	0716      	lsls	r6, r2, #28
 80295f6:	4605      	mov	r5, r0
 80295f8:	460c      	mov	r4, r1
 80295fa:	d454      	bmi.n	80296a6 <__sflush_r+0xba>
 80295fc:	684b      	ldr	r3, [r1, #4]
 80295fe:	2b00      	cmp	r3, #0
 8029600:	dc02      	bgt.n	8029608 <__sflush_r+0x1c>
 8029602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029604:	2b00      	cmp	r3, #0
 8029606:	dd48      	ble.n	802969a <__sflush_r+0xae>
 8029608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802960a:	2e00      	cmp	r6, #0
 802960c:	d045      	beq.n	802969a <__sflush_r+0xae>
 802960e:	2300      	movs	r3, #0
 8029610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029614:	682f      	ldr	r7, [r5, #0]
 8029616:	6a21      	ldr	r1, [r4, #32]
 8029618:	602b      	str	r3, [r5, #0]
 802961a:	d030      	beq.n	802967e <__sflush_r+0x92>
 802961c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802961e:	89a3      	ldrh	r3, [r4, #12]
 8029620:	0759      	lsls	r1, r3, #29
 8029622:	d505      	bpl.n	8029630 <__sflush_r+0x44>
 8029624:	6863      	ldr	r3, [r4, #4]
 8029626:	1ad2      	subs	r2, r2, r3
 8029628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802962a:	b10b      	cbz	r3, 8029630 <__sflush_r+0x44>
 802962c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802962e:	1ad2      	subs	r2, r2, r3
 8029630:	2300      	movs	r3, #0
 8029632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029634:	6a21      	ldr	r1, [r4, #32]
 8029636:	4628      	mov	r0, r5
 8029638:	47b0      	blx	r6
 802963a:	1c43      	adds	r3, r0, #1
 802963c:	89a3      	ldrh	r3, [r4, #12]
 802963e:	d106      	bne.n	802964e <__sflush_r+0x62>
 8029640:	6829      	ldr	r1, [r5, #0]
 8029642:	291d      	cmp	r1, #29
 8029644:	d82b      	bhi.n	802969e <__sflush_r+0xb2>
 8029646:	4a2a      	ldr	r2, [pc, #168]	@ (80296f0 <__sflush_r+0x104>)
 8029648:	410a      	asrs	r2, r1
 802964a:	07d6      	lsls	r6, r2, #31
 802964c:	d427      	bmi.n	802969e <__sflush_r+0xb2>
 802964e:	2200      	movs	r2, #0
 8029650:	6062      	str	r2, [r4, #4]
 8029652:	04d9      	lsls	r1, r3, #19
 8029654:	6922      	ldr	r2, [r4, #16]
 8029656:	6022      	str	r2, [r4, #0]
 8029658:	d504      	bpl.n	8029664 <__sflush_r+0x78>
 802965a:	1c42      	adds	r2, r0, #1
 802965c:	d101      	bne.n	8029662 <__sflush_r+0x76>
 802965e:	682b      	ldr	r3, [r5, #0]
 8029660:	b903      	cbnz	r3, 8029664 <__sflush_r+0x78>
 8029662:	6560      	str	r0, [r4, #84]	@ 0x54
 8029664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029666:	602f      	str	r7, [r5, #0]
 8029668:	b1b9      	cbz	r1, 802969a <__sflush_r+0xae>
 802966a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802966e:	4299      	cmp	r1, r3
 8029670:	d002      	beq.n	8029678 <__sflush_r+0x8c>
 8029672:	4628      	mov	r0, r5
 8029674:	f7ff fca0 	bl	8028fb8 <_free_r>
 8029678:	2300      	movs	r3, #0
 802967a:	6363      	str	r3, [r4, #52]	@ 0x34
 802967c:	e00d      	b.n	802969a <__sflush_r+0xae>
 802967e:	2301      	movs	r3, #1
 8029680:	4628      	mov	r0, r5
 8029682:	47b0      	blx	r6
 8029684:	4602      	mov	r2, r0
 8029686:	1c50      	adds	r0, r2, #1
 8029688:	d1c9      	bne.n	802961e <__sflush_r+0x32>
 802968a:	682b      	ldr	r3, [r5, #0]
 802968c:	2b00      	cmp	r3, #0
 802968e:	d0c6      	beq.n	802961e <__sflush_r+0x32>
 8029690:	2b1d      	cmp	r3, #29
 8029692:	d001      	beq.n	8029698 <__sflush_r+0xac>
 8029694:	2b16      	cmp	r3, #22
 8029696:	d11e      	bne.n	80296d6 <__sflush_r+0xea>
 8029698:	602f      	str	r7, [r5, #0]
 802969a:	2000      	movs	r0, #0
 802969c:	e022      	b.n	80296e4 <__sflush_r+0xf8>
 802969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80296a2:	b21b      	sxth	r3, r3
 80296a4:	e01b      	b.n	80296de <__sflush_r+0xf2>
 80296a6:	690f      	ldr	r7, [r1, #16]
 80296a8:	2f00      	cmp	r7, #0
 80296aa:	d0f6      	beq.n	802969a <__sflush_r+0xae>
 80296ac:	0793      	lsls	r3, r2, #30
 80296ae:	680e      	ldr	r6, [r1, #0]
 80296b0:	bf08      	it	eq
 80296b2:	694b      	ldreq	r3, [r1, #20]
 80296b4:	600f      	str	r7, [r1, #0]
 80296b6:	bf18      	it	ne
 80296b8:	2300      	movne	r3, #0
 80296ba:	eba6 0807 	sub.w	r8, r6, r7
 80296be:	608b      	str	r3, [r1, #8]
 80296c0:	f1b8 0f00 	cmp.w	r8, #0
 80296c4:	dde9      	ble.n	802969a <__sflush_r+0xae>
 80296c6:	6a21      	ldr	r1, [r4, #32]
 80296c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80296ca:	4643      	mov	r3, r8
 80296cc:	463a      	mov	r2, r7
 80296ce:	4628      	mov	r0, r5
 80296d0:	47b0      	blx	r6
 80296d2:	2800      	cmp	r0, #0
 80296d4:	dc08      	bgt.n	80296e8 <__sflush_r+0xfc>
 80296d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80296da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80296de:	81a3      	strh	r3, [r4, #12]
 80296e0:	f04f 30ff 	mov.w	r0, #4294967295
 80296e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80296e8:	4407      	add	r7, r0
 80296ea:	eba8 0800 	sub.w	r8, r8, r0
 80296ee:	e7e7      	b.n	80296c0 <__sflush_r+0xd4>
 80296f0:	dfbffffe 	.word	0xdfbffffe

080296f4 <_fflush_r>:
 80296f4:	b538      	push	{r3, r4, r5, lr}
 80296f6:	690b      	ldr	r3, [r1, #16]
 80296f8:	4605      	mov	r5, r0
 80296fa:	460c      	mov	r4, r1
 80296fc:	b913      	cbnz	r3, 8029704 <_fflush_r+0x10>
 80296fe:	2500      	movs	r5, #0
 8029700:	4628      	mov	r0, r5
 8029702:	bd38      	pop	{r3, r4, r5, pc}
 8029704:	b118      	cbz	r0, 802970e <_fflush_r+0x1a>
 8029706:	6a03      	ldr	r3, [r0, #32]
 8029708:	b90b      	cbnz	r3, 802970e <_fflush_r+0x1a>
 802970a:	f7ff f9e9 	bl	8028ae0 <__sinit>
 802970e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029712:	2b00      	cmp	r3, #0
 8029714:	d0f3      	beq.n	80296fe <_fflush_r+0xa>
 8029716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029718:	07d0      	lsls	r0, r2, #31
 802971a:	d404      	bmi.n	8029726 <_fflush_r+0x32>
 802971c:	0599      	lsls	r1, r3, #22
 802971e:	d402      	bmi.n	8029726 <_fflush_r+0x32>
 8029720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029722:	f7ff fbdc 	bl	8028ede <__retarget_lock_acquire_recursive>
 8029726:	4628      	mov	r0, r5
 8029728:	4621      	mov	r1, r4
 802972a:	f7ff ff5f 	bl	80295ec <__sflush_r>
 802972e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029730:	07da      	lsls	r2, r3, #31
 8029732:	4605      	mov	r5, r0
 8029734:	d4e4      	bmi.n	8029700 <_fflush_r+0xc>
 8029736:	89a3      	ldrh	r3, [r4, #12]
 8029738:	059b      	lsls	r3, r3, #22
 802973a:	d4e1      	bmi.n	8029700 <_fflush_r+0xc>
 802973c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802973e:	f7ff fbcf 	bl	8028ee0 <__retarget_lock_release_recursive>
 8029742:	e7dd      	b.n	8029700 <_fflush_r+0xc>

08029744 <__swhatbuf_r>:
 8029744:	b570      	push	{r4, r5, r6, lr}
 8029746:	460c      	mov	r4, r1
 8029748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802974c:	2900      	cmp	r1, #0
 802974e:	b096      	sub	sp, #88	@ 0x58
 8029750:	4615      	mov	r5, r2
 8029752:	461e      	mov	r6, r3
 8029754:	da0d      	bge.n	8029772 <__swhatbuf_r+0x2e>
 8029756:	89a3      	ldrh	r3, [r4, #12]
 8029758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802975c:	f04f 0100 	mov.w	r1, #0
 8029760:	bf14      	ite	ne
 8029762:	2340      	movne	r3, #64	@ 0x40
 8029764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029768:	2000      	movs	r0, #0
 802976a:	6031      	str	r1, [r6, #0]
 802976c:	602b      	str	r3, [r5, #0]
 802976e:	b016      	add	sp, #88	@ 0x58
 8029770:	bd70      	pop	{r4, r5, r6, pc}
 8029772:	466a      	mov	r2, sp
 8029774:	f000 f848 	bl	8029808 <_fstat_r>
 8029778:	2800      	cmp	r0, #0
 802977a:	dbec      	blt.n	8029756 <__swhatbuf_r+0x12>
 802977c:	9901      	ldr	r1, [sp, #4]
 802977e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029786:	4259      	negs	r1, r3
 8029788:	4159      	adcs	r1, r3
 802978a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802978e:	e7eb      	b.n	8029768 <__swhatbuf_r+0x24>

08029790 <__smakebuf_r>:
 8029790:	898b      	ldrh	r3, [r1, #12]
 8029792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029794:	079d      	lsls	r5, r3, #30
 8029796:	4606      	mov	r6, r0
 8029798:	460c      	mov	r4, r1
 802979a:	d507      	bpl.n	80297ac <__smakebuf_r+0x1c>
 802979c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80297a0:	6023      	str	r3, [r4, #0]
 80297a2:	6123      	str	r3, [r4, #16]
 80297a4:	2301      	movs	r3, #1
 80297a6:	6163      	str	r3, [r4, #20]
 80297a8:	b003      	add	sp, #12
 80297aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80297ac:	ab01      	add	r3, sp, #4
 80297ae:	466a      	mov	r2, sp
 80297b0:	f7ff ffc8 	bl	8029744 <__swhatbuf_r>
 80297b4:	9f00      	ldr	r7, [sp, #0]
 80297b6:	4605      	mov	r5, r0
 80297b8:	4639      	mov	r1, r7
 80297ba:	4630      	mov	r0, r6
 80297bc:	f7ff f86a 	bl	8028894 <_malloc_r>
 80297c0:	b948      	cbnz	r0, 80297d6 <__smakebuf_r+0x46>
 80297c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80297c6:	059a      	lsls	r2, r3, #22
 80297c8:	d4ee      	bmi.n	80297a8 <__smakebuf_r+0x18>
 80297ca:	f023 0303 	bic.w	r3, r3, #3
 80297ce:	f043 0302 	orr.w	r3, r3, #2
 80297d2:	81a3      	strh	r3, [r4, #12]
 80297d4:	e7e2      	b.n	802979c <__smakebuf_r+0xc>
 80297d6:	89a3      	ldrh	r3, [r4, #12]
 80297d8:	6020      	str	r0, [r4, #0]
 80297da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80297de:	81a3      	strh	r3, [r4, #12]
 80297e0:	9b01      	ldr	r3, [sp, #4]
 80297e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80297e6:	b15b      	cbz	r3, 8029800 <__smakebuf_r+0x70>
 80297e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80297ec:	4630      	mov	r0, r6
 80297ee:	f000 f81d 	bl	802982c <_isatty_r>
 80297f2:	b128      	cbz	r0, 8029800 <__smakebuf_r+0x70>
 80297f4:	89a3      	ldrh	r3, [r4, #12]
 80297f6:	f023 0303 	bic.w	r3, r3, #3
 80297fa:	f043 0301 	orr.w	r3, r3, #1
 80297fe:	81a3      	strh	r3, [r4, #12]
 8029800:	89a3      	ldrh	r3, [r4, #12]
 8029802:	431d      	orrs	r5, r3
 8029804:	81a5      	strh	r5, [r4, #12]
 8029806:	e7cf      	b.n	80297a8 <__smakebuf_r+0x18>

08029808 <_fstat_r>:
 8029808:	b538      	push	{r3, r4, r5, lr}
 802980a:	4d07      	ldr	r5, [pc, #28]	@ (8029828 <_fstat_r+0x20>)
 802980c:	2300      	movs	r3, #0
 802980e:	4604      	mov	r4, r0
 8029810:	4608      	mov	r0, r1
 8029812:	4611      	mov	r1, r2
 8029814:	602b      	str	r3, [r5, #0]
 8029816:	f7d7 ff66 	bl	80016e6 <_fstat>
 802981a:	1c43      	adds	r3, r0, #1
 802981c:	d102      	bne.n	8029824 <_fstat_r+0x1c>
 802981e:	682b      	ldr	r3, [r5, #0]
 8029820:	b103      	cbz	r3, 8029824 <_fstat_r+0x1c>
 8029822:	6023      	str	r3, [r4, #0]
 8029824:	bd38      	pop	{r3, r4, r5, pc}
 8029826:	bf00      	nop
 8029828:	240290a0 	.word	0x240290a0

0802982c <_isatty_r>:
 802982c:	b538      	push	{r3, r4, r5, lr}
 802982e:	4d06      	ldr	r5, [pc, #24]	@ (8029848 <_isatty_r+0x1c>)
 8029830:	2300      	movs	r3, #0
 8029832:	4604      	mov	r4, r0
 8029834:	4608      	mov	r0, r1
 8029836:	602b      	str	r3, [r5, #0]
 8029838:	f7d7 ff5a 	bl	80016f0 <_isatty>
 802983c:	1c43      	adds	r3, r0, #1
 802983e:	d102      	bne.n	8029846 <_isatty_r+0x1a>
 8029840:	682b      	ldr	r3, [r5, #0]
 8029842:	b103      	cbz	r3, 8029846 <_isatty_r+0x1a>
 8029844:	6023      	str	r3, [r4, #0]
 8029846:	bd38      	pop	{r3, r4, r5, pc}
 8029848:	240290a0 	.word	0x240290a0

0802984c <_init>:
 802984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802984e:	bf00      	nop
 8029850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029852:	bc08      	pop	{r3}
 8029854:	469e      	mov	lr, r3
 8029856:	4770      	bx	lr

08029858 <_fini>:
 8029858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802985a:	bf00      	nop
 802985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802985e:	bc08      	pop	{r3}
 8029860:	469e      	mov	lr, r3
 8029862:	4770      	bx	lr
