
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000231a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033a4  08023448  08023448  00024448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000234c  080267ec  080267ec  000277ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000003c  08028b38  08028b38  00029b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00360000  90000000  90000000  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000006e  90360000  90360000  0038b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08028b74  08028b74  0038b06e  2**0
                  CONTENTS
  8 .ARM          00000008  08028b74  08028b74  00029b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08028b7c  08028b7c  0038b06e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08028b7c  08028b7c  00029b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08028b98  08028b98  00029b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08028ba0  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08028cdc  0002a140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  08028ddc  0002a240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00028e84  24000340  08028edc  0002a340  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  240291c4  08028edc  0002b1c4  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0038b06e  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  0038c000  2**2
                  ALLOC
 19 .debug_info   000e4960  00000000  00000000  0038b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00017bf0  00000000  00000000  0046f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003ca8  00000000  00000000  004875f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000594c  00000000  00000000  0048b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00052934  00000000  00000000  00490be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0006cde5  00000000  00000000  004e3518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e46aa  00000000  00000000  005502fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  007349a7  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000aab8  00000000  00000000  00734a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00028357  00000000  00000000  0073f524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000084  00000000  00000000  0076787b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802342c 	.word	0x0802342c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802342c 	.word	0x0802342c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c ba48 	b.w	800cb90 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f022 f8f7 	bl	8022900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f022 f8f2 	bl	8022900 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fbdd 	bl	8008edc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f008 fea8 	bl	80094d8 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 fa32 	bl	8009c10 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 f93a 	bl	8009a30 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f022 f892 	bl	8022900 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fd4e 	bl	800627c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fd61 	bl	80062b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fd59 	bl	80062b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fd4b 	bl	80062b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fd3c 	bl	80062b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fd31 	bl	80062b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fd24 	bl	80062b8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fd11 	bl	8006298 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fbf7 	bl	8009118 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 ff7d 	bl	800583c <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 ff24 	bl	8005794 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 fd34 	bl	80063d2 <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f006 fc0e 	bl	8007198 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fc01 	bl	8006184 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f006 fc06 	bl	8007198 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fbf9 	bl	8006184 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f021 ffb2 	bl	8022900 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f021 ffad 	bl	8022900 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f021 ffa8 	bl	8022900 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f021 ffa3 	bl	8022900 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f005 fe4a 	bl	800666c <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f006 f8a6 	bl	8006b44 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 f858 	bl	8006aca <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f006 f840 	bl	8006aa8 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f006 fa0f 	bl	8006e56 <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f005 fdb0 	bl	80065a6 <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f005 ffce 	bl	8006a40 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f005 ff43 	bl	800695c <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240003c8 	.word	0x240003c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000608 	.word	0x24000608
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240005ec 	.word	0x240005ec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f005 ff16 	bl	800693a <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f021 feef 	bl	8022900 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f007 fe8b 	bl	800887c <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f007 ff37 	bl	8008a14 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f006 f829 	bl	8006c10 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fbd8 	bl	8005384 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f004 f843 	bl	8004c64 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 f845 	bl	8006c76 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f005 ff1b 	bl	8006a40 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f007 ff2d 	bl	8008a70 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f005 fb6f 	bl	8006310 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f007 f805 	bl	8007c4c <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00a fa42 	bl	800b0d8 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00a fa69 	bl	800b130 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00a fa62 	bl	800b130 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00a fa44 	bl	800b0fc <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240005ec 	.word	0x240005ec
 8000c7c:	24000414 	.word	0x24000414
 8000c80:	2400035c 	.word	0x2400035c
 8000c84:	08005765 	.word	0x08005765
 8000c88:	2400036c 	.word	0x2400036c
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	24000670 	.word	0x24000670
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000594 	.word	0x24000594
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080234c4 	.word	0x080234c4
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24000390 	.word	0x24000390
 8000cb0:	080234a0 	.word	0x080234a0
 8000cb4:	080038b5 	.word	0x080038b5
 8000cb8:	2400038c 	.word	0x2400038c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f021 fe1a 	bl	8022900 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 f9e0 	bl	8007198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f006 f9db 	bl	8007198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f006 f9d5 	bl	8007198 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f006 f841 	bl	8006e84 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f006 f837 	bl	8006e84 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f006 f82f 	bl	8006e84 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f006 f827 	bl	8006e84 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f005 f9bf 	bl	80061d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f005 f9ee 	bl	800623c <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f009 fe45 	bl	800ab38 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f004 fe7b 	bl	8005bb0 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f004 fec6 	bl	8005c4c <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f005 f91a 	bl	8006104 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f006 f961 	bl	80071b4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f006 f96b 	bl	80071d0 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000394 	.word	0x24000394
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f005 b912 	b.w	8006160 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f005 b933 	b.w	80061d8 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f005 f901 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f005 b92d 	b.w	800623c <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f021 fc80 	bl	8022900 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f021 fc7b 	bl	8022900 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f009 f87d 	bl	800a11c <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f005 ff08 	bl	8006e84 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f005 f8ad 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f005 f8dc 	bl	800623c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f007 fd28 	bl	8008b46 <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f007 fdae 	bl	8008c62 <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f007 fcfc 	bl	8008b46 <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f007 fd82 	bl	8008c62 <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f005 f833 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f005 b85f 	b.w	800623c <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000528 	.word	0x24000528
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240004bc 	.word	0x240004bc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f021 fbaa 	bl	8022900 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f008 ffa0 	bl	800a11c <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f004 ffe9 	bl	80061d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f005 f818 	bl	800623c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f021 fb6c 	bl	8022900 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f021 fb67 	bl	8022900 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f008 ff68 	bl	800a11c <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f005 fdc1 	bl	8006e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 fdb7 	bl	8006e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f005 fdad 	bl	8006e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f005 fda2 	bl	8006e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f005 fd98 	bl	8006e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f005 fd8e 	bl	8006e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f005 fd83 	bl	8006e84 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f021 faa9 	bl	8022900 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f021 fa9f 	bl	8022900 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f008 fea5 	bl	800a11c <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f005 fd3a 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f005 fd30 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f005 fd25 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f005 fd1a 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f005 fd0f 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f005 fd04 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f005 fcf9 	bl	8006e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f005 fcef 	bl	8006e84 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000698 	.word	0x24000698
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f005 fdae 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f005 fdaa 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f005 fda5 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f005 fda0 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f005 fd9b 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f005 fd96 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f005 fd91 	bl	8007054 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f005 bd8b 	b.w	8007054 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000694 	.word	0x24000694
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f004 fe2b 	bl	80061d8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f004 fe5a 	bl	800623c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f008 fc9d 	bl	8009ee8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f008 fc75 	bl	8009ea0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f009 fca6 	bl	800af24 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f009 fb53 	bl	800ac88 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f008 fc5c 	bl	8009ea0 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	2400069c 	.word	0x2400069c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f009 bb7d 	b.w	800ad0c <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	2400069c 	.word	0x2400069c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f007 b99e 	b.w	800895a <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000414 	.word	0x24000414

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f004 bf13 	b.w	8006450 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000608 	.word	0x24000608

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f007 b843 	b.w	80086bc <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000594 	.word	0x24000594

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f007 fb94 	bl	8008d6c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f007 bb8f 	b.w	8008d6c <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240004bc 	.word	0x240004bc
 8001654:	24000528 	.word	0x24000528

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f005 b8fc 	b.w	8006856 <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240005ec 	.word	0x240005ec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f021 f9fd 	bl	8022a68 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f021 f9f5 	bl	8022a68 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f021 f9ba 	bl	8022a68 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240006e8 	.word	0x240006e8
 8001708:	240291c8 	.word	0x240291c8
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f004 fc84 	bl	8006024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f021 f997 	bl	8022a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	08028ba0 	.word	0x08028ba0
  ldr r2, =_sbss
 800175c:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001760:	240291c4 	.word	0x240291c4

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd19 	bl	80031a0 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc9b 	b.w	80030ac <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd15 	b.w	80031a4 <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240006ec 	.word	0x240006ec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f008 fb32 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 f967 	bl	8009acc <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f009 fb8d 	bl	800af24 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f009 b9ff 	b.w	800ac14 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f008 fb43 	bl	8009ea0 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240006ec 	.word	0x240006ec
 8001828:	08025994 	.word	0x08025994

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f020 fa50 	bl	8021cd6 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f004 fb7a 	bl	8005f6c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000748 	.word	0x24000748
 800188c:	24000738 	.word	0x24000738

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f020 fa1e 	bl	8021cd6 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f004 fac7 	bl	8005e4c <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f020 fd77 	bl	80223c8 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000744 	.word	0x24000744
 80018e0:	24000748 	.word	0x24000748
 80018e4:	08023510 	.word	0x08023510
 80018e8:	08023523 	.word	0x08023523
 80018ec:	0802354d 	.word	0x0802354d

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f005 bc45 	b.w	8007198 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400074c 	.word	0x2400074c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f005 bc15 	b.w	8007198 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400074c 	.word	0x2400074c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f005 bbef 	b.w	80071a2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f005 fbc9 	bl	800718c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	2400074c 	.word	0x2400074c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	240284a3 	.word	0x240284a3

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000770 	.word	0x24000770

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc80 	b.w	800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bc0f 	b.w	80032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bde1 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bdd3 	b.w	8003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd96 	bl	80035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bc02 	b.w	80032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f00c ffb4 	bl	800ea3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00c fb31 	bl	800e14c <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00c b9ff 	b.w	800def8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f020 f8e9 	bl	8021cd6 <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00c ba2f 	b.w	800df70 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fbff 	bl	8003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	24000760 	.word	0x24000760

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f005 f886 	bl	8006c76 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240005ec 	.word	0x240005ec

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	2402849c 	.word	0x2402849c
 8001bbc:	2402849a 	.word	0x2402849a
 8001bc0:	24028498 	.word	0x24028498

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f020 fbf3 	bl	80223c8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	24028498 	.word	0x24028498
 8001bf0:	2402849a 	.word	0x2402849a
 8001bf4:	080235cc 	.word	0x080235cc
 8001bf8:	0802362f 	.word	0x0802362f
 8001bfc:	08023672 	.word	0x08023672
 8001c00:	2402849e 	.word	0x2402849e
 8001c04:	240284a0 	.word	0x240284a0

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f020 fbc9 	bl	80223c8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	24000770 	.word	0x24000770
 8001c54:	080236c5 	.word	0x080236c5
 8001c58:	080236fd 	.word	0x080236fd
 8001c5c:	08023672 	.word	0x08023672
 8001c60:	240284a2 	.word	0x240284a2

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	240284a4 	.word	0x240284a4
 8001cf8:	24028498 	.word	0x24028498
 8001cfc:	2402849e 	.word	0x2402849e
 8001d00:	2402849a 	.word	0x2402849a
 8001d04:	240284a0 	.word	0x240284a0
 8001d08:	2402849c 	.word	0x2402849c
 8001d0c:	08023754 	.word	0x08023754

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f004 ffa8 	bl	8006c76 <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f004 ffab 	bl	8006c98 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240005ec 	.word	0x240005ec

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f004 ffff 	bl	8006d58 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240005ec 	.word	0x240005ec

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f004 ff84 	bl	8006c98 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f004 ff6c 	bl	8006c76 <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240005ec 	.word	0x240005ec

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240005ec 	.word	0x240005ec
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f004 ff3b 	bl	8006c76 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	2400075c 	.word	0x2400075c
 8001e0c:	240005ec 	.word	0x240005ec

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f004 ff39 	bl	8006c98 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240005ec 	.word	0x240005ec

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f004 ff27 	bl	8006c98 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240005ec 	.word	0x240005ec

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f004 fede 	bl	8006c56 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	240284a4 	.word	0x240284a4
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000778 	.word	0x24000778
 8001eb8:	24000774 	.word	0x24000774

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f004 f94e 	bl	8006184 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f004 be7c 	b.w	8006c56 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000778 	.word	0x24000778
 8001fe8:	24000770 	.word	0x24000770
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	240284a4 	.word	0x240284a4
 8002008:	24000774 	.word	0x24000774
 800200c:	24000414 	.word	0x24000414

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00c fd28 	bl	800ea70 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	240284a4 	.word	0x240284a4

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000760 	.word	0x24000760
 800203c:	080234f0 	.word	0x080234f0

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f020 f9a2 	bl	80223c8 <__assert_func>
 8002084:	08023824 	.word	0x08023824
 8002088:	080255af 	.word	0x080255af
 800208c:	0802387f 	.word	0x0802387f

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f01f fe1e 	bl	8021cd6 <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f009 f8ec 	bl	800b2ac <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08023ac8 	.word	0x08023ac8
 80020e0:	24000798 	.word	0x24000798

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f020 bc08 	b.w	8022910 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219e      	movs	r1, #158	@ 0x9e
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f020 f922 	bl	80223c8 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	08023902 	.word	0x08023902
 80021b0:	0802387f 	.word	0x0802387f
 80021b4:	080238ef 	.word	0x080238ef

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e4      	movs	r1, #228	@ 0xe4
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f020 f8fd 	bl	80223c8 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	08023944 	.word	0x08023944
 8002250:	0802398d 	.word	0x0802398d
 8002254:	0802387f 	.word	0x0802387f

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f020 f876 	bl	80223c8 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f240 1141 	movw	r1, #321	@ 0x141
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	080239c0 	.word	0x080239c0
 8002450:	080239de 	.word	0x080239de
 8002454:	080239c5 	.word	0x080239c5
 8002458:	0802387f 	.word	0x0802387f
 800245c:	08023a0b 	.word	0x08023a0b
 8002460:	08023a10 	.word	0x08023a10
 8002464:	08023a28 	.word	0x08023a28
 8002468:	08023a2d 	.word	0x08023a2d
 800246c:	08023a43 	.word	0x08023a43
 8002470:	08023a4f 	.word	0x08023a4f
 8002474:	08023a54 	.word	0x08023a54
 8002478:	08023a59 	.word	0x08023a59
 800247c:	08023a5e 	.word	0x08023a5e

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f005 fd57 	bl	8007fa8 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009dc4 	.word	0x24009dc4
 8002504:	24009da0 	.word	0x24009da0
 8002508:	24009db0 	.word	0x24009db0
 800250c:	24000794 	.word	0x24000794
 8002510:	24009dc0 	.word	0x24009dc0
 8002514:	24009db8 	.word	0x24009db8
 8002518:	24009dbc 	.word	0x24009dbc
 800251c:	2400079c 	.word	0x2400079c
 8002520:	24000010 	.word	0x24000010
 8002524:	2400077c 	.word	0x2400077c

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009da8 	.word	0x24009da8

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f005 bd56 	b.w	800806c <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009dc0 	.word	0x24009dc0
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009db8 	.word	0x24009db8

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f005 fcf9 	bl	8008010 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f005 fd1c 	bl	8008072 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f008 bea3 	b.w	800b398 <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009da0 	.word	0x24009da0
 8002658:	24000010 	.word	0x24000010
 800265c:	2400077c 	.word	0x2400077c
 8002660:	2400079c 	.word	0x2400079c
 8002664:	24009db0 	.word	0x24009db0
 8002668:	24009da4 	.word	0x24009da4
 800266c:	24000798 	.word	0x24000798

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009db4 	.word	0x24009db4

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f005 fefd 	bl	80084ce <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009db4 	.word	0x24009db4
 80026e0:	24000790 	.word	0x24000790
 80026e4:	24009da4 	.word	0x24009da4
 80026e8:	24000794 	.word	0x24000794
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009db0 	.word	0x24009db0
 80026f4:	24009da0 	.word	0x24009da0

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f008 fdf2 	bl	800b340 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	2400077c 	.word	0x2400077c
 8002774:	24000594 	.word	0x24000594
 8002778:	24009dac 	.word	0x24009dac
 800277c:	24009da4 	.word	0x24009da4
 8002780:	24000798 	.word	0x24000798
 8002784:	24009db4 	.word	0x24009db4
 8002788:	24000790 	.word	0x24000790

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b0      	movs	r1, #176	@ 0xb0
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f01f fe0f 	bl	80223c8 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	08023944 	.word	0x08023944
 8002848:	08023a63 	.word	0x08023a63
 800284c:	0802387f 	.word	0x0802387f

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009dac 	.word	0x24009dac
 80028a0:	24000594 	.word	0x24000594

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	2400077c 	.word	0x2400077c
 8002918:	52001000 	.word	0x52001000
 800291c:	24009da8 	.word	0x24009da8
 8002920:	24009dc4 	.word	0x24009dc4
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00012301 	.word	0x00012301

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f008 bd1c 	b.w	800b398 <osSemaphoreRelease>
 8002960:	24000794 	.word	0x24000794
 8002964:	24009da8 	.word	0x24009da8
 8002968:	2400077c 	.word	0x2400077c
 800296c:	24000790 	.word	0x24000790
 8002970:	24000798 	.word	0x24000798

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f008 fc96 	bl	800b2ac <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f01f fd1b 	bl	80223c8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f008 fd27 	bl	800b3ea <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009dcc 	.word	0x24009dcc
 80029b0:	08023b04 	.word	0x08023b04
 80029b4:	08023b4d 	.word	0x08023b4d
 80029b8:	08023b7c 	.word	0x08023b7c
 80029bc:	24009dc8 	.word	0x24009dc8
 80029c0:	08023be2 	.word	0x08023be2

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f008 bcb8 	b.w	800b340 <osSemaphoreAcquire>
 80029d0:	24009dcc 	.word	0x24009dcc

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f008 bcde 	b.w	800b398 <osSemaphoreRelease>
 80029dc:	24009dcc 	.word	0x24009dcc

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f008 bcab 	b.w	800b340 <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009dcc 	.word	0x24009dcc

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f008 bd2f 	b.w	800b460 <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009dc8 	.word	0x24009dc8
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f008 fd53 	bl	800b4c2 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f008 fd4c 	bl	800b4c2 <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009dc8 	.word	0x24009dc8

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a3e:	e7fe      	b.n	8002a3e <DMA2D_XferErrorCallback>

08002a40 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a40:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a54:	f008 fbe8 	bl	800b228 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a58:	6860      	ldr	r0, [r4, #4]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4798      	blx	r3
 8002a60:	b978      	cbnz	r0, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a63      	ldrb	r3, [r4, #9]
 8002a64:	b16b      	cbz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a66:	7a23      	ldrb	r3, [r4, #8]
 8002a68:	b95b      	cbnz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a6a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6e:	4620      	mov	r0, r4
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a76:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7e:	f008 bbf6 	b.w	800b26e <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a82:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x68>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <_ZN8STM32DMA5startEv+0x6c>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f2      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a90:	7a20      	ldrb	r0, [r4, #8]
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1ef      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a96:	7aa0      	ldrb	r0, [r4, #10]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ec      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa8:	f7ff fefc 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aac:	e7e3      	b.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002aae:	bf00      	nop
 8002ab0:	24000794 	.word	0x24000794
 8002ab4:	24000010 	.word	0x24000010

08002ab8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	4770      	bx	lr
 8002ad0:	08023d98 	.word	0x08023d98
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
}
 8002adc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002ae0:	f7ff ffea 	bl	8002ab8 <_ZN8STM32DMAD1Ev>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f01f f8f6 	bl	8021cd6 <_ZdlPvj>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002af2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b04:	f002 0210 	and.w	r2, r2, #16
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	24000608 	.word	0x24000608
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002a3f 	.word	0x08002a3f
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	280a      	cmp	r0, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b4e:	e8df f000 	tbb	[pc, r0]
 8002b52:	1006      	.short	0x1006
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	10101008 	.word	0x10101008
 8002b5c:	10          	.byte	0x10
 8002b5d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b64:	2191      	movs	r1, #145	@ 0x91
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b6a:	f01f fc2d 	bl	80223c8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b76:	bf00      	nop
 8002b78:	08023c24 	.word	0x08023c24
 8002b7c:	08023c3f 	.word	0x08023c3f
 8002b80:	08023c8a 	.word	0x08023c8a

08002b84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b88:	7f88      	ldrb	r0, [r1, #30]
 8002b8a:	f7ff ffdd 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	8aa5      	ldrh	r5, [r4, #20]
 8002b92:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b94:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b9a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b9e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ba0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	2d08      	cmp	r5, #8
 8002baa:	d10e      	bne.n	8002bca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bb0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bb4:	7f20      	ldrb	r0, [r4, #28]
 8002bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bba:	61da      	str	r2, [r3, #28]
        return color;
 8002bbc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bbe:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc0:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc6:	601a      	str	r2, [r3, #0]
    }
}
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bcc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bd4:	4a03      	ldr	r2, [pc, #12]	@ (8002be4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bd6:	e7f6      	b.n	8002bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bd8:	52001000 	.word	0x52001000
 8002bdc:	00010009 	.word	0x00010009
 8002be0:	00022301 	.word	0x00022301
 8002be4:	00032301 	.word	0x00032301

08002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002be8:	b508      	push	{r3, lr}
    switch (format)
 8002bea:	280b      	cmp	r0, #11
 8002bec:	d80b      	bhi.n	8002c06 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002bee:	e8df f000 	tbb	[pc, r0]
 8002bf2:	1206      	.short	0x1206
 8002bf4:	0a0a0a10 	.word	0x0a0a0a10
 8002bf8:	0808080a 	.word	0x0808080a
 8002bfc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c02:	2005      	movs	r0, #5
        break;
 8002c04:	e7fc      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c08:	2170      	movs	r1, #112	@ 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c0e:	f01f fbdb 	bl	80223c8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f4      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f2      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	08023c24 	.word	0x08023c24
 8002c20:	08023cee 	.word	0x08023cee
 8002c24:	08023c8a 	.word	0x08023c8a

08002c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c2e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ffd9 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c36:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c3a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ffd3 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff ff7f 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c4e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c52:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c56:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c58:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c5a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c62:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c76:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c78:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c7a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c7e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c82:	2c80      	cmp	r4, #128	@ 0x80
 8002c84:	d022      	beq.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c86:	d80f      	bhi.n	8002ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d066      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c8c:	2c40      	cmp	r4, #64	@ 0x40
 8002c8e:	d064      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	d05c      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c94:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c9a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c9c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ca2:	d060      	beq.n	8002d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002ca6:	e03f      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ca8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cac:	d004      	beq.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cae:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cb2:	d1ef      	bne.n	8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	482f      	ldr	r0, [pc, #188]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cb6:	e000      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cba:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cc4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cc6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc8:	6159      	str	r1, [r3, #20]
 8002cca:	e02c      	b.n	8002d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ccc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cd0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cd8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cda:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cdc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cde:	1d21      	adds	r1, r4, #4
 8002ce0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002ce2:	7821      	ldrb	r1, [r4, #0]
 8002ce4:	b141      	cbz	r1, 8002cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002ce6:	2901      	cmp	r1, #1
 8002ce8:	d021      	beq.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002cec:	f240 110b 	movw	r1, #267	@ 0x10b
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002cf4:	f01f fb68 	bl	80223c8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8861      	ldrh	r1, [r4, #2]
 8002cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d00:	3901      	subs	r1, #1
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d0c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	f041 0120 	orr.w	r1, r1, #32
 8002d16:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	0689      	lsls	r1, r1, #26
 8002d1c:	d4fc      	bmi.n	8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d0be      	beq.n	8002ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d2e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d30:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d32:	8860      	ldrh	r0, [r4, #2]
 8002d34:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d38:	bf18      	it	ne
 8002d3a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d3c:	3801      	subs	r0, #1
 8002d3e:	f021 0110 	bic.w	r1, r1, #16
 8002d42:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d46:	f041 0110 	orr.w	r1, r1, #16
 8002d4a:	61d9      	str	r1, [r3, #28]
                break;
 8002d4c:	e7df      	b.n	8002d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d56:	61da      	str	r2, [r3, #28]
 8002d58:	e7b5      	b.n	8002cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d5a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d5e:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d64:	e7f7      	b.n	8002d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d66:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d6a:	e7dd      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	00012301 	.word	0x00012301
 8002d74:	00020009 	.word	0x00020009
 8002d78:	0002000a 	.word	0x0002000a
 8002d7c:	08023d38 	.word	0x08023d38
 8002d80:	08023d52 	.word	0x08023d52
 8002d84:	08023c8a 	.word	0x08023c8a
 8002d88:	00022301 	.word	0x00022301

08002d8c <DMA2D_XferCpltCallback>:
 8002d8c:	4b02      	ldr	r3, [pc, #8]	@ (8002d98 <DMA2D_XferCpltCallback+0xc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4718      	bx	r3
 8002d98:	240284a4 	.word	0x240284a4

08002d9c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d9c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002da4:	b9d3      	cbnz	r3, 8002ddc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dac:	4919      	ldr	r1, [pc, #100]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	bb38      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc0:	7a20      	ldrb	r0, [r4, #8]
 8002dc2:	bb28      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc4:	7aa0      	ldrb	r0, [r4, #10]
 8002dc6:	bb18      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	f7ff bd64 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002ddc:	7a03      	ldrb	r3, [r0, #8]
 8002dde:	b143      	cbz	r3, 8002df2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002dee:	f7ff fd9d 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002df2:	6860      	ldr	r0, [r4, #4]
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
 8002dfa:	b948      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dfc:	7a63      	ldrb	r3, [r4, #9]
 8002dfe:	b13b      	cbz	r3, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e00:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e02:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e06:	4620      	mov	r0, r4
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e0e:	4718      	bx	r3
    }
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	24000794 	.word	0x24000794
 8002e18:	24000010 	.word	0x24000010
 8002e1c:	24000790 	.word	0x24000790

08002e20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_ZN8STM32DMAC1Ev+0x40>)
 8002e26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4625      	mov	r5, r4
 8002e2c:	2260      	movs	r2, #96	@ 0x60
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	7226      	strb	r6, [r4, #8]
 8002e32:	7266      	strb	r6, [r4, #9]
 8002e34:	f845 3b20 	str.w	r3, [r5], #32
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f00b ff5d 	bl	800ecf8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e3e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e42:	60ee      	str	r6, [r5, #12]
 8002e44:	3524      	adds	r5, #36	@ 0x24
 8002e46:	429d      	cmp	r5, r3
 8002e48:	d1fb      	bne.n	8002e42 <_ZN8STM32DMAC1Ev+0x22>
 8002e4a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e4e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e50:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e54:	f008 f9b3 	bl	800b1be <osMutexNew>
 8002e58:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	08023d98 	.word	0x08023d98

08002e64 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	07d2      	lsls	r2, r2, #31
 8002e6a:	d4fc      	bmi.n	8002e66 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6c:	2223      	movs	r2, #35	@ 0x23
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	52001000 	.word	0x52001000

08002e78 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	d511      	bpl.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e80:	2900      	cmp	r1, #0
 8002e82:	dd0f      	ble.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e84:	f000 031f 	and.w	r3, r0, #31
 8002e88:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e8e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e90:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e94:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e96:	1a0b      	subs	r3, r1, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dcf9      	bgt.n	8002e90 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002eae:	4c10      	ldr	r4, [pc, #64]	@ (8002ef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	07ed      	lsls	r5, r5, #31
 8002eb4:	d4fc      	bmi.n	8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ebe:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ecc:	d00c      	beq.n	8002ee8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ece:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ed0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ed4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002eda:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ede:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ee0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ee2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ee4:	6023      	str	r3, [r4, #0]
    }
}
 8002ee6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ee8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eec:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eee:	e7f9      	b.n	8002ee4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002ef0:	52001000 	.word	0x52001000
 8002ef4:	00010009 	.word	0x00010009
 8002ef8:	00020001 	.word	0x00020001
 8002efc:	00030001 	.word	0x00030001

08002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f00:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f02:	4c0e      	ldr	r4, [pc, #56]	@ (8002f3c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	07ed      	lsls	r5, r5, #31
 8002f08:	d4fc      	bmi.n	8002f04 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f0a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f0c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f12:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f16:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f1a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f1e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f20:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f22:	d007      	beq.n	8002f34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f26:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f2a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f2c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f2e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f30:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f32:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f36:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f38:	6025      	str	r5, [r4, #0]
}
 8002f3a:	e7fa      	b.n	8002f32 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00020001 	.word	0x00020001
 8002f44:	ff020001 	.word	0xff020001

08002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	07ed      	lsls	r5, r5, #31
 8002f50:	d4fc      	bmi.n	8002f4c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f54:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f56:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f60:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f64:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f68:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f6a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f6e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f70:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	52001000 	.word	0x52001000
 8002f7c:	00020001 	.word	0x00020001

08002f80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f80:	2001      	movs	r0, #1
 8002f82:	4770      	bx	lr

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f84:	200c      	movs	r0, #12
 8002f86:	4770      	bx	lr

08002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f88:	230c      	movs	r3, #12
 8002f8a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f8e:	3008      	adds	r0, #8
 8002f90:	4770      	bx	lr

08002f92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f92:	230c      	movs	r3, #12
 8002f94:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f98:	3008      	adds	r0, #8
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fa0:	f243 4038 	movw	r0, #13368	@ 0x3438
 8002fa4:	4770      	bx	lr

08002fa6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fa6:	f243 4338 	movw	r3, #13368	@ 0x3438
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fb2:	f243 4338 	movw	r3, #13368	@ 0x3438
 8002fb6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fba:	3008      	adds	r0, #8
 8002fbc:	4770      	bx	lr

08002fbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fca:	3008      	adds	r0, #8
 8002fcc:	4770      	bx	lr

08002fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f000 be4e 	b.w	8003c78 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	6003      	str	r3, [r0, #0]
 8002fe4:	f00a fa43 	bl	800d46e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	08023e50 	.word	0x08023e50

08002ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff2 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f01e fe6b 	bl	8021cd6 <_ZdlPvj>
 8003000:	4620      	mov	r0, r4
 8003002:	bd10      	pop	{r4, pc}

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	f00a fa2f 	bl	800d46e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003010:	4620      	mov	r0, r4
 8003012:	bd10      	pop	{r4, pc}
 8003014:	08023e1c 	.word	0x08023e1c

08003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff2 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003020:	f44f 5151 	mov.w	r1, #13376	@ 0x3440
 8003024:	4620      	mov	r0, r4
 8003026:	f01e fe56 	bl	8021cd6 <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f00a fa19 	bl	800d46e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	08023de8 	.word	0x08023de8

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	f7ff fff2 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800304c:	2118      	movs	r1, #24
 800304e:	4620      	mov	r0, r4
 8003050:	f01e fe41 	bl	8021cd6 <_ZdlPvj>
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}

08003058 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <_ZN12FrontendHeapD1Ev+0x28>)
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f500 5051 	add.w	r0, r0, #13376	@ 0x3440
 8003064:	302c      	adds	r0, #44	@ 0x2c
 8003066:	f7ff ffb9 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800306a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800306e:	f7ff ffc9 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003072:	f104 0014 	add.w	r0, r4, #20
 8003076:	f7ff ffdb 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	4620      	mov	r0, r4
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	08023e84 	.word	0x08023e84

08003084 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003084:	b508      	push	{r3, lr}
 8003086:	4802      	ldr	r0, [pc, #8]	@ (8003090 <__tcf_0+0xc>)
 8003088:	f7ff ffe6 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800308c:	bd08      	pop	{r3, pc}
 800308e:	bf00      	nop
 8003090:	2400ac88 	.word	0x2400ac88

08003094 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	f7ff ffde 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800309c:	f243 51e0 	movw	r1, #13792	@ 0x35e0
 80030a0:	4620      	mov	r0, r4
 80030a2:	f01e fe18 	bl	8021cd6 <_ZdlPvj>
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030b0:	f000 fc58 	bl	8003964 <_ZN14BitmapDatabase11getInstanceEv>
 80030b4:	2400      	movs	r4, #0
 80030b6:	4605      	mov	r5, r0
 80030b8:	f000 fc58 	bl	800396c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030bc:	4623      	mov	r3, r4
 80030be:	4601      	mov	r1, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f013 fff7 	bl	80170b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030ca:	4b28      	ldr	r3, [pc, #160]	@ (800316c <touchgfx_init+0xc0>)
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <touchgfx_init+0xc4>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ce:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030d0:	4d28      	ldr	r5, [pc, #160]	@ (8003174 <touchgfx_init+0xc8>)
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f001 f904 	bl	80042e0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030d8:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <touchgfx_init+0xcc>)
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <touchgfx_init+0xd0>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030dc:	4828      	ldr	r0, [pc, #160]	@ (8003180 <touchgfx_init+0xd4>)
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	f013 fe96 	bl	8016e10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	f3bf 8f5b 	dmb	ish
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d437      	bmi.n	800315e <touchgfx_init+0xb2>
 80030ee:	4628      	mov	r0, r5
 80030f0:	f01e fdf3 	bl	8021cda <__cxa_guard_acquire>
 80030f4:	b398      	cbz	r0, 800315e <touchgfx_init+0xb2>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80030f6:	4c23      	ldr	r4, [pc, #140]	@ (8003184 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80030f8:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <touchgfx_init+0xdc>)
          screenStorage(scr),
 80030fa:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 80030fe:	f104 0014 	add.w	r0, r4, #20
 8003102:	6023      	str	r3, [r4, #0]
          transitionStorage(tra),
 8003104:	f508 5751 	add.w	r7, r8, #13376	@ 0x3440
        : presenterStorage(pres),
 8003108:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800310a:	f8c4 8008 	str.w	r8, [r4, #8]
          frontendApplication(app)
 800310e:	f107 0618 	add.w	r6, r7, #24
          transitionStorage(tra),
 8003112:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003114:	6126      	str	r6, [r4, #16]
 8003116:	f00a f9ab 	bl	800d470 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800311a:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <touchgfx_init+0xe0>)
 800311c:	4640      	mov	r0, r8
 800311e:	6163      	str	r3, [r4, #20]
 8003120:	f00a f9a6 	bl	800d470 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <touchgfx_init+0xe4>)
 8003126:	4638      	mov	r0, r7
 8003128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800312a:	f00a f9a1 	bl	800d470 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800312e:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003132:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <touchgfx_init+0xe8>)
 8003134:	f504 5052 	add.w	r0, r4, #13440	@ 0x3480
 8003138:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
 800313c:	f001 f958 	bl	80043f0 <_ZN5ModelC1Ev>
 8003140:	4622      	mov	r2, r4
 8003142:	f504 5152 	add.w	r1, r4, #13440	@ 0x3480
 8003146:	4630      	mov	r0, r6
 8003148:	f001 f948 	bl	80043dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800314c:	4630      	mov	r0, r6
 800314e:	f000 fd93 	bl	8003c78 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8003152:	4811      	ldr	r0, [pc, #68]	@ (8003198 <touchgfx_init+0xec>)
 8003154:	f01f f956 	bl	8022404 <atexit>
 8003158:	4628      	mov	r0, r5
 800315a:	f01e fdca 	bl	8021cf2 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800315e:	480f      	ldr	r0, [pc, #60]	@ (800319c <touchgfx_init+0xf0>)
}
 8003160:	b002      	add	sp, #8
 8003162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003166:	f7fe bcd7 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 800316a:	bf00      	nop
 800316c:	24028508 	.word	0x24028508
 8003170:	24009e4c 	.word	0x24009e4c
 8003174:	2400ac84 	.word	0x2400ac84
 8003178:	24009e6c 	.word	0x24009e6c
 800317c:	24009e50 	.word	0x24009e50
 8003180:	24000034 	.word	0x24000034
 8003184:	2400ac88 	.word	0x2400ac88
 8003188:	08023e84 	.word	0x08023e84
 800318c:	08023de8 	.word	0x08023de8
 8003190:	08023e1c 	.word	0x08023e1c
 8003194:	08023e50 	.word	0x08023e50
 8003198:	08003085 	.word	0x08003085
 800319c:	24009dd0 	.word	0x24009dd0

080031a0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031a0:	4770      	bx	lr
	...

080031a4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <touchgfx_taskEntry+0x8>)
 80031a6:	f7fe bcc9 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80031aa:	bf00      	nop
 80031ac:	24009dd0 	.word	0x24009dd0

080031b0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031b2:	4c0e      	ldr	r4, [pc, #56]	@ (80031ec <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031b8:	4620      	mov	r0, r4
static LCD24bpp display;
 80031ba:	4d0f      	ldr	r5, [pc, #60]	@ (80031f8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031bc:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031be:	f7ff fe2f 	bl	8002e20 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031c2:	4628      	mov	r0, r5
 80031c4:	f017 fe1a 	bl	801adfc <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031c8:	480c      	ldr	r0, [pc, #48]	@ (80031fc <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031ca:	f011 fc6b 	bl	8014aa4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031d6:	4621      	mov	r1, r4
 80031d8:	4809      	ldr	r0, [pc, #36]	@ (8003200 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031da:	e9cd 3200 	strd	r3, r2, [sp]
 80031de:	4633      	mov	r3, r6
 80031e0:	462a      	mov	r2, r5
 80031e2:	f7fe fd3f 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031e6:	b002      	add	sp, #8
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop
 80031ec:	24009ed8 	.word	0x24009ed8
 80031f0:	080235bc 	.word	0x080235bc
 80031f4:	2400ac80 	.word	0x2400ac80
 80031f8:	24009e6c 	.word	0x24009e6c
 80031fc:	24009e50 	.word	0x24009e50
 8003200:	24009dd0 	.word	0x24009dd0

08003204 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003204:	4801      	ldr	r0, [pc, #4]	@ (800320c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003206:	f7ff bc57 	b.w	8002ab8 <_ZN8STM32DMAD1Ev>
 800320a:	bf00      	nop
 800320c:	24009ed8 	.word	0x24009ed8

08003210 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003210:	2000      	movs	r0, #0
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003214:	8081      	strh	r1, [r0, #4]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003218:	80c1      	strh	r1, [r0, #6]
    }
 800321a:	4770      	bx	lr

0800321c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800321c:	8101      	strh	r1, [r0, #8]
    }
 800321e:	4770      	bx	lr

08003220 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003220:	8141      	strh	r1, [r0, #10]
    }
 8003222:	4770      	bx	lr

08003224 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003226:	4770      	bx	lr

08003228 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003228:	4770      	bx	lr

0800322a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800322c:	4770      	bx	lr

0800322e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800322e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003230:	88c4      	ldrh	r4, [r0, #6]
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	1b12      	subs	r2, r2, r4
 8003236:	8884      	ldrh	r4, [r0, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	1b09      	subs	r1, r1, r4
 800323c:	b212      	sxth	r2, r2
    }
 800323e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003242:	b209      	sxth	r1, r1
 8003244:	4718      	bx	r3

08003246 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800324a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003256:	6010      	str	r0, [r2, #0]
    }
 8003258:	4770      	bx	lr

0800325a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800325a:	2000      	movs	r0, #0
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800325e:	888b      	ldrh	r3, [r1, #4]
 8003260:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003266:	4770      	bx	lr

08003268 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003268:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 800326c:	4770      	bx	lr

0800326e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800326e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003272:	4770      	bx	lr

08003274 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003274:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003276:	b510      	push	{r4, lr}
        return rect.width;
 8003278:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 800327c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003280:	8002      	strh	r2, [r0, #0]
 8003282:	8042      	strh	r2, [r0, #2]
 8003284:	8084      	strh	r4, [r0, #4]
 8003286:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003288:	bd10      	pop	{r4, pc}

0800328a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800328a:	2200      	movs	r2, #0
 800328c:	8002      	strh	r2, [r0, #0]
 800328e:	8042      	strh	r2, [r0, #2]
 8003290:	8082      	strh	r2, [r0, #4]
 8003292:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003294:	4770      	bx	lr

08003296 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003296:	7701      	strb	r1, [r0, #28]
    }
 8003298:	4770      	bx	lr

0800329a <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800329a:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 800329e:	4770      	bx	lr

080032a0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032a0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032a4:	4770      	bx	lr

080032a6 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032a6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032aa:	4770      	bx	lr

080032ac <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032b0:	3098      	adds	r0, #152	@ 0x98
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032b4:	308c      	adds	r0, #140	@ 0x8c
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032b8:	3084      	adds	r0, #132	@ 0x84
 80032ba:	4770      	bx	lr

080032bc <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032bc:	4770      	bx	lr
	...

080032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032c2:	2290      	movs	r2, #144	@ 0x90
 80032c4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032d0:	4770      	bx	lr

080032d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032d2:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032d4:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032d8:	4770      	bx	lr

080032da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032dc:	4770      	bx	lr

080032de <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032de:	4770      	bx	lr

080032e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032e4:	4611      	mov	r1, r2
 80032e6:	6840      	ldr	r0, [r0, #4]
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4718      	bx	r3

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80032ee:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80032f2:	4770      	bx	lr

080032f4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	212c      	movs	r1, #44	@ 0x2c
 80032fa:	f01e fcec 	bl	8021cd6 <_ZdlPvj>
 80032fe:	4620      	mov	r0, r4
 8003300:	bd10      	pop	{r4, pc}

08003302 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	2148      	movs	r1, #72	@ 0x48
 8003308:	f01e fce5 	bl	8021cd6 <_ZdlPvj>
 800330c:	4620      	mov	r0, r4
 800330e:	bd10      	pop	{r4, pc}

08003310 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003310:	b510      	push	{r4, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	21bc      	movs	r1, #188	@ 0xbc
 8003316:	f01e fcde 	bl	8021cd6 <_ZdlPvj>
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
	...

08003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4604      	mov	r4, r0
    HAL::initialize();
 8003324:	f00a fe3d 	bl	800dfa2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800332c:	f010 fa8c 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 8003330:	4601      	mov	r1, r0
 8003332:	4620      	mov	r0, r4
 8003334:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	4908      	ldr	r1, [pc, #32]	@ (800335c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800333a:	4620      	mov	r0, r4
 800333c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003340:	2300      	movs	r3, #0
 8003342:	461a      	mov	r2, r3
 8003344:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800334e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003350:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	d0119400 	.word	0xd0119400
 8003360:	2400e370 	.word	0x2400e370
 8003364:	2400e328 	.word	0x2400e328
 8003368:	d0000000 	.word	0xd0000000
 800336c:	00119400 	.word	0x00119400

08003370 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003376:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	f007 ff54 	bl	800b228 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003380:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003382:	f007 ff74 	bl	800b26e <osMutexRelease>
        streams[handle].isActive = false;
 8003386:	2324      	movs	r3, #36	@ 0x24
 8003388:	fb03 4505 	mla	r5, r3, r5, r4
 800338c:	2300      	movs	r3, #0
 800338e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003392:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003396:	b90b      	cbnz	r3, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003398:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800339a:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 800339c:	bd38      	pop	{r3, r4, r5, pc}

0800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800339e:	f00a bdb1 	b.w	800df04 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033a2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033a2:	f00a bf12 	b.w	800e1ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033aa:	b112      	cbz	r2, 80033b2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033ac:	6803      	ldr	r3, [r0, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4718      	bx	r3
    }
 80033b2:	4770      	bx	lr

080033b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033b6:	6953      	ldr	r3, [r2, #20]
 80033b8:	03db      	lsls	r3, r3, #15
{
 80033ba:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033bc:	d51e      	bpl.n	80033fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033c4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033cc:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033d0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033d4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033d8:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033da:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033de:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033e4:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e6:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80033ea:	d2f9      	bcs.n	80033e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80033ec:	3b20      	subs	r3, #32
 80033ee:	f113 0f20 	cmn.w	r3, #32
 80033f2:	d1f2      	bne.n	80033da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80033f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033f8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003404:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003406:	b131      	cbz	r1, 8003416 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800340a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003412:	f01e ffd9 	bl	80223c8 <__assert_func>
    }
 8003416:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800341a:	bd08      	pop	{r3, pc}
 800341c:	08023e90 	.word	0x08023e90
 8003420:	08023ea4 	.word	0x08023ea4
 8003424:	0802402e 	.word	0x0802402e

08003428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003428:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800342a:	b131      	cbz	r1, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800342e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003436:	f01e ffc7 	bl	80223c8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800343a:	6840      	ldr	r0, [r0, #4]
 800343c:	4611      	mov	r1, r2
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4718      	bx	r3
 8003448:	08023e90 	.word	0x08023e90
 800344c:	08024078 	.word	0x08024078
 8003450:	0802402e 	.word	0x0802402e

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800345a:	2179      	movs	r1, #121	@ 0x79
 800345c:	4a03      	ldr	r2, [pc, #12]	@ (800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800345e:	4804      	ldr	r0, [pc, #16]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003460:	f01e ffb2 	bl	80223c8 <__assert_func>
    }
 8003464:	68c0      	ldr	r0, [r0, #12]
 8003466:	bd08      	pop	{r3, pc}
 8003468:	08023e90 	.word	0x08023e90
 800346c:	08024226 	.word	0x08024226
 8003470:	0802402e 	.word	0x0802402e

08003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003478:	b129      	cbz	r1, 8003486 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800347c:	21a2      	movs	r1, #162	@ 0xa2
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003480:	4819      	ldr	r0, [pc, #100]	@ (80034e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003482:	f01e ffa1 	bl	80223c8 <__assert_func>
        switch (cmd)
 8003486:	2a05      	cmp	r2, #5
 8003488:	d815      	bhi.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800348a:	e8df f002 	tbb	[pc, r2]
 800348e:	1103      	.short	0x1103
 8003490:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003494:	6840      	ldr	r0, [r0, #4]
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4798      	blx	r3
 800349c:	b158      	cbz	r0, 80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034a8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034ae:	e002      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034b6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034b8:	6203      	str	r3, [r0, #32]
 80034ba:	e7f5      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034bc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034be:	2301      	movs	r3, #1
 80034c0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034c4:	e7f0      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	6203      	str	r3, [r0, #32]
            break;
 80034d0:	e7f1      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034dc:	e7eb      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034de:	bf00      	nop
 80034e0:	08023e90 	.word	0x08023e90
 80034e4:	080243db 	.word	0x080243db
 80034e8:	0802402e 	.word	0x0802402e

080034ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80034ec:	b510      	push	{r4, lr}
 80034ee:	460c      	mov	r4, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80034f4:	b12c      	cbz	r4, 8003502 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80034f8:	2190      	movs	r1, #144	@ 0x90
 80034fa:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80034fc:	4806      	ldr	r0, [pc, #24]	@ (8003518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80034fe:	f01e ff63 	bl	80223c8 <__assert_func>
        stream.frameNumber = 0;
 8003502:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003504:	6840      	ldr	r0, [r0, #4]
 8003506:	6803      	ldr	r3, [r0, #0]
    }
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4718      	bx	r3
 8003510:	08023e90 	.word	0x08023e90
 8003514:	080245af 	.word	0x080245af
 8003518:	0802402e 	.word	0x0802402e

0800351c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800351c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800351e:	b129      	cbz	r1, 800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003522:	2182      	movs	r1, #130	@ 0x82
 8003524:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003526:	4806      	ldr	r0, [pc, #24]	@ (8003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003528:	f01e ff4e 	bl	80223c8 <__assert_func>
        stream.tickCount = 0;
 800352c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003530:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	08023e90 	.word	0x08023e90
 800353c:	0802478a 	.word	0x0802478a
 8003540:	0802402e 	.word	0x0802402e

08003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003544:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800354c:	b153      	cbz	r3, 8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800354e:	f04f 31ff 	mov.w	r1, #4294967295
 8003552:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003554:	f007 fe68 	bl	800b228 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003558:	2300      	movs	r3, #0
 800355a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800355e:	2301      	movs	r3, #1
 8003560:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003564:	bd10      	pop	{r4, pc}

08003566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003566:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800356a:	b11a      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800356c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003570:	b102      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003572:	6018      	str	r0, [r3, #0]
        }
    }
 8003574:	4770      	bx	lr
	...

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800357e:	b129      	cbz	r1, 800358c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003582:	21d0      	movs	r1, #208	@ 0xd0
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003586:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003588:	f01e ff1e 	bl	80223c8 <__assert_func>
        if (stream.isPlaying)
 800358c:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003590:	b133      	cbz	r3, 80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	4413      	add	r3, r2
 800359e:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035a0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035a4:	b90b      	cbnz	r3, 80035aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035a6:	2001      	movs	r0, #1
    }
 80035a8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035ae:	6803      	ldr	r3, [r0, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035b4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035ba:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035be:	2800      	cmp	r0, #0
 80035c0:	d1f1      	bne.n	80035a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035ca:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035ce:	e7eb      	b.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035d0:	08023e90 	.word	0x08023e90
 80035d4:	08024946 	.word	0x08024946
 80035d8:	0802402e 	.word	0x0802402e
 80035dc:	240284a4 	.word	0x240284a4

080035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035e2:	4c1a      	ldr	r4, [pc, #104]	@ (800364c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035e4:	4605      	mov	r5, r0
    HAL::endFrame();
 80035e6:	f00a fccf 	bl	800df88 <_ZN8touchgfx3HAL8endFrameEv>
 80035ea:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035ee:	b913      	cbnz	r3, 80035f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80035f0:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80035f4:	b1ab      	cbz	r3, 8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80035f6:	69e1      	ldr	r1, [r4, #28]
 80035f8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80035fc:	4353      	muls	r3, r2
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	434a      	muls	r2, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	d30d      	bcc.n	8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003606:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800360a:	b138      	cbz	r0, 800361c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003612:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003614:	bf98      	it	ls
 8003616:	f102 32ff 	addls.w	r2, r2, #4294967295
 800361a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800361c:	2301      	movs	r3, #1
 800361e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003622:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003624:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800362a:	f007 feb5 	bl	800b398 <osSemaphoreRelease>
        if (uiHasMutex)
 800362e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003632:	b12b      	cbz	r3, 8003640 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003634:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003636:	f007 fe1a 	bl	800b26e <osMutexRelease>
            uiHasMutex = false;
 800363a:	2300      	movs	r3, #0
 800363c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003640:	6868      	ldr	r0, [r5, #4]
 8003642:	6803      	ldr	r3, [r0, #0]
}
 8003644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4718      	bx	r3
 800364c:	2400e328 	.word	0x2400e328

08003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003652:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800365a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800365e:	f3bf 8f6f 	isb	sy
}
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b02      	ldr	r3, [pc, #8]	@ (8003674 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800367c:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003680:	b9d8      	cbnz	r0, 80036ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003682:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003686:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003688:	2501      	movs	r5, #1
                streams[i] = Stream();
 800368a:	60d8      	str	r0, [r3, #12]
 800368c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800368e:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003692:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003694:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003698:	6158      	str	r0, [r3, #20]
 800369a:	6198      	str	r0, [r3, #24]
 800369c:	61d8      	str	r0, [r3, #28]
 800369e:	6218      	str	r0, [r3, #32]
 80036a0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036a2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036a4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036ac:	443c      	add	r4, r7
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	d90a      	bls.n	80036c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036b4:	2152      	movs	r1, #82	@ 0x52
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036b8:	e003      	b.n	80036c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036bc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036c2:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036c4:	f01e fe80 	bl	80223c8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036c8:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036d0:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036d4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036da:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036dc:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	08024c9e 	.word	0x08024c9e
 80036e4:	08024cd9 	.word	0x08024cd9
 80036e8:	08024ae7 	.word	0x08024ae7
 80036ec:	08024b17 	.word	0x08024b17
 80036f0:	0802402e 	.word	0x0802402e

080036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80036f4:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036f6:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036f8:	4e12      	ldr	r6, [pc, #72]	@ (8003744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80036fa:	4604      	mov	r4, r0
 80036fc:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003700:	6003      	str	r3, [r0, #0]
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003708:	b10a      	cbz	r2, 800370e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800370a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800370c:	b900      	cbnz	r0, 8003710 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800370e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4798      	blx	r3
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	425d      	negs	r5, r3
 800371a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003720:	b130      	cbz	r0, 8003730 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4798      	blx	r3
 8003728:	2801      	cmp	r0, #1
 800372a:	bf08      	it	eq
 800372c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003730:	b92d      	cbnz	r5, 800373e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003734:	2127      	movs	r1, #39	@ 0x27
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003738:	4806      	ldr	r0, [pc, #24]	@ (8003754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800373a:	f01e fe45 	bl	80223c8 <__assert_func>
    }
 800373e:	4620      	mov	r0, r4
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	bf00      	nop
 8003744:	240284a4 	.word	0x240284a4
 8003748:	08024f8c 	.word	0x08024f8c
 800374c:	08024e7c 	.word	0x08024e7c
 8003750:	08024eda 	.word	0x08024eda
 8003754:	08024f13 	.word	0x08024f13

08003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800375a:	4e24      	ldr	r6, [pc, #144]	@ (80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 800375c:	6835      	ldr	r5, [r6, #0]
 800375e:	f3bf 8f5b 	dmb	ish
 8003762:	f015 0501 	ands.w	r5, r5, #1
 8003766:	d13f      	bne.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003768:	4630      	mov	r0, r6
 800376a:	f01e fab6 	bl	8021cda <__cxa_guard_acquire>
 800376e:	2800      	cmp	r0, #0
 8003770:	d03a      	beq.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003772:	4c1f      	ldr	r4, [pc, #124]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003776:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800377a:	6125      	str	r5, [r4, #16]
 800377c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 800377e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003780:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003782:	e9c4 3500 	strd	r3, r5, [r4]
 8003786:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800378a:	f011 fbea 	bl	8014f62 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 800378e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003792:	f00c fe37 	bl	8010404 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003798:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800379a:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 800379e:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037a2:	f7ff ffa7 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037a8:	4816      	ldr	r0, [pc, #88]	@ (8003804 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037ae:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037b0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037b4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037b8:	2364      	movs	r3, #100	@ 0x64
 80037ba:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037be:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037c2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037cc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037d0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037d4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037da:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037de:	f01e fe11 	bl	8022404 <atexit>
 80037e2:	4630      	mov	r0, r6
 80037e4:	f01e fa85 	bl	8021cf2 <__cxa_guard_release>
}
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	2400e268 	.word	0x2400e268
 80037f0:	2400e26c 	.word	0x2400e26c
 80037f4:	08025f8c 	.word	0x08025f8c
 80037f8:	08024fac 	.word	0x08024fac
 80037fc:	08025024 	.word	0x08025024
 8003800:	08025fd8 	.word	0x08025fd8
 8003804:	080032bd 	.word	0x080032bd
 8003808:	08026010 	.word	0x08026010

0800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003810:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003812:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003814:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800381e:	f007 fd8f 	bl	800b340 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003828:	f007 fcfe 	bl	800b228 <osMutexAcquire>
                if (stream.doDecode)
 800382c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003830:	b343      	cbz	r3, 8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003832:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003834:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003838:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800383a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	d023      	beq.n	800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4641      	mov	r1, r8
 8003848:	4628      	mov	r0, r5
 800384a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003856:	9700      	str	r7, [sp, #0]
 8003858:	4628      	mov	r0, r5
 800385a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800385e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003862:	68a1      	ldr	r1, [r4, #8]
 8003864:	47c0      	blx	r8
                    stream.frameCount++;
 8003866:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003868:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 800386c:	3301      	adds	r3, #1
 800386e:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003870:	b1f0      	cbz	r0, 80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	4798      	blx	r3
 800387a:	3801      	subs	r0, #1
                    stream.doDecode = false;
 800387c:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800387e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003880:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003884:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003886:	f007 fcf2 	bl	800b26e <osMutexRelease>
        while (1)
 800388a:	e7c5      	b.n	8003818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 800388c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800388e:	2a00      	cmp	r2, #0
 8003890:	d0de      	beq.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003892:	4628      	mov	r0, r5
 8003894:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003898:	4798      	blx	r3
 800389a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800389c:	4401      	add	r1, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038a6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038aa:	4413      	add	r3, r2
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	e7cf      	b.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7e3      	b.n	800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038b4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <videoTaskFunc+0x8>)
{
 80038b6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038b8:	f7ff ffa8 	bl	800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038bc:	2400e328 	.word	0x2400e328

080038c0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038c0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038c2:	4814      	ldr	r0, [pc, #80]	@ (8003914 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038c4:	2500      	movs	r5, #0
 80038c6:	f7fe fbeb 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ca:	4c13      	ldr	r4, [pc, #76]	@ (8003918 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ce:	462a      	mov	r2, r5
 80038d0:	4629      	mov	r1, r5
 80038d2:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038da:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038dc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038de:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e0:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80038e4:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e8:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ec:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80038f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038f4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80038fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003900:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003904:	f007 fcd2 	bl	800b2ac <osSemaphoreNew>
 8003908:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800390a:	4628      	mov	r0, r5
 800390c:	f007 fc57 	bl	800b1be <osMutexNew>
 8003910:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	2400e370 	.word	0x2400e370
 8003918:	2400e328 	.word	0x2400e328
 800391c:	08025070 	.word	0x08025070

08003920 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_17_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003920:	4770      	bx	lr

08003922 <_ZN23ApplicationFontProviderD0Ev>:
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	2104      	movs	r1, #4
 8003928:	f01e f9d5 	bl	8021cd6 <_ZdlPvj>
 800392c:	4620      	mov	r0, r4
 800392e:	bd10      	pop	{r4, pc}

08003930 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003930:	b508      	push	{r3, lr}
    switch (typography)
 8003932:	2903      	cmp	r1, #3
 8003934:	d813      	bhi.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8003936:	e8df f001 	tbb	[pc, r1]
 800393a:	0602      	.short	0x0602
 800393c:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800393e:	f000 fd1b 	bl	8004378 <_ZN17TypedTextDatabase8getFontsEv>
 8003942:	6800      	ldr	r0, [r0, #0]
        // verdana_17_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8003944:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003946:	f000 fd17 	bl	8004378 <_ZN17TypedTextDatabase8getFontsEv>
 800394a:	6840      	ldr	r0, [r0, #4]
 800394c:	e7fa      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800394e:	f000 fd13 	bl	8004378 <_ZN17TypedTextDatabase8getFontsEv>
 8003952:	6880      	ldr	r0, [r0, #8]
 8003954:	e7f6      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003956:	f000 fd0f 	bl	8004378 <_ZN17TypedTextDatabase8getFontsEv>
 800395a:	68c0      	ldr	r0, [r0, #12]
 800395c:	e7f2      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800395e:	2000      	movs	r0, #0
 8003960:	e7f0      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003964 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003964:	4800      	ldr	r0, [pc, #0]	@ (8003968 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003966:	4770      	bx	lr
 8003968:	080250c0 	.word	0x080250c0

0800396c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800396c:	2003      	movs	r0, #3
 800396e:	4770      	bx	lr

08003970 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003970:	b513      	push	{r0, r1, r4, lr}
 8003972:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003974:	b151      	cbz	r1, 800398c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800397a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800397c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003980:	689c      	ldr	r4, [r3, #8]
 8003982:	f10d 0303 	add.w	r3, sp, #3
 8003986:	47a0      	blx	r4
        return glyph;
    }
 8003988:	b002      	add	sp, #8
 800398a:	bd10      	pop	{r4, pc}
            return 0;
 800398c:	4608      	mov	r0, r1
 800398e:	e7fb      	b.n	8003988 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003990 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003990:	89c0      	ldrh	r0, [r0, #14]
 8003992:	4770      	bx	lr

08003994 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003994:	8a00      	ldrh	r0, [r0, #16]
 8003996:	4770      	bx	lr

08003998 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003998:	88c0      	ldrh	r0, [r0, #6]
 800399a:	4770      	bx	lr

0800399c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800399c:	8880      	ldrh	r0, [r0, #4]
 800399e:	4770      	bx	lr

080039a0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039a0:	7a80      	ldrb	r0, [r0, #10]
    }
 80039a2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039a6:	4770      	bx	lr

080039a8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039a8:	7a80      	ldrb	r0, [r0, #10]
    }
 80039aa:	09c0      	lsrs	r0, r0, #7
 80039ac:	4770      	bx	lr

080039ae <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
	...

080039b4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039bc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	00000000 	.word	0x00000000

080039c0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039c0:	4770      	bx	lr

080039c2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80039c2:	b510      	push	{r4, lr}
 80039c4:	4604      	mov	r4, r0
    }
 80039c6:	2108      	movs	r1, #8
 80039c8:	f01e f985 	bl	8021cd6 <_ZdlPvj>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039d0:	4770      	bx	lr

080039d2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039d2:	4770      	bx	lr

080039d4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039d4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039d8:	6808      	ldr	r0, [r1, #0]
 80039da:	6849      	ldr	r1, [r1, #4]
 80039dc:	c303      	stmia	r3!, {r0, r1}
    }
 80039de:	4770      	bx	lr

080039e0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039e0:	4770      	bx	lr

080039e2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039e2:	4770      	bx	lr

080039e4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80039e4:	6041      	str	r1, [r0, #4]
    }
 80039e6:	4770      	bx	lr

080039e8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80039e8:	4770      	bx	lr
	...

080039ec <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80039ee:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80039f2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80039fc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a00:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	08003aad 	.word	0x08003aad

08003a0c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	7203      	strb	r3, [r0, #8]
    }
 8003a10:	4770      	bx	lr

08003a12 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a12:	4770      	bx	lr

08003a14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003a14:	4770      	bx	lr

08003a16 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a16:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a18:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a1a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a1c:	68c2      	ldr	r2, [r0, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	1054      	asrs	r4, r2, #1
 8003a22:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a26:	07d2      	lsls	r2, r2, #31
 8003a28:	bf48      	it	mi
 8003a2a:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a30:	bf48      	it	mi
 8003a32:	58d3      	ldrmi	r3, [r2, r3]
 8003a34:	4718      	bx	r3

08003a36 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a36:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a38:	6840      	ldr	r0, [r0, #4]
 8003a3a:	b130      	cbz	r0, 8003a4a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	b91a      	cbnz	r2, 8003a48 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a40:	68d8      	ldr	r0, [r3, #12]
 8003a42:	f000 0001 	and.w	r0, r0, #1
 8003a46:	4770      	bx	lr
 8003a48:	2001      	movs	r0, #1
    }
 8003a4a:	4770      	bx	lr

08003a4c <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4604      	mov	r4, r0
 8003a50:	210c      	movs	r1, #12
 8003a52:	f01e f940 	bl	8021cd6 <_ZdlPvj>
 8003a56:	4620      	mov	r0, r4
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	2110      	movs	r1, #16
 8003a60:	f01e f939 	bl	8021cd6 <_ZdlPvj>
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003a70:	f01e f931 	bl	8021cd6 <_ZdlPvj>
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003a78:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003a7a:	f00f fee5 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 8003a7e:	6803      	ldr	r3, [r0, #0]
    }
 8003a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	4718      	bx	r3

08003a88 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003a8c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003a90:	b158      	cbz	r0, 8003aaa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4798      	blx	r3
 8003a98:	b138      	cbz	r0, 8003aaa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003a9a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003aaa:	bd10      	pop	{r4, pc}

08003aac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003aac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ab0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ab4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ab6:	68b0      	ldr	r0, [r6, #8]
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4798      	blx	r3
 8003abe:	f5b0 7fe2 	cmp.w	r0, #452	@ 0x1c4
 8003ac2:	d205      	bcs.n	8003ad0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003ac4:	4b44      	ldr	r3, [pc, #272]	@ (8003bd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003ac6:	21a3      	movs	r1, #163	@ 0xa3
 8003ac8:	4a44      	ldr	r2, [pc, #272]	@ (8003bdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003aca:	4845      	ldr	r0, [pc, #276]	@ (8003be0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003acc:	f01e fc7c 	bl	80223c8 <__assert_func>
 8003ad0:	6870      	ldr	r0, [r6, #4]
 8003ad2:	6803      	ldr	r3, [r0, #0]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4798      	blx	r3
 8003ad8:	280f      	cmp	r0, #15
 8003ada:	d803      	bhi.n	8003ae4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003adc:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003ade:	21a4      	movs	r1, #164	@ 0xa4
 8003ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8003bdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003ae2:	e7f2      	b.n	8003aca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003ae4:	68f0      	ldr	r0, [r6, #12]
 8003ae6:	6803      	ldr	r3, [r0, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4798      	blx	r3
 8003aec:	280b      	cmp	r0, #11
 8003aee:	d803      	bhi.n	8003af8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003af0:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003af2:	21a5      	movs	r1, #165	@ 0xa5
 8003af4:	4a39      	ldr	r2, [pc, #228]	@ (8003bdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003af6:	e7e8      	b.n	8003aca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003af8:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003bf0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003afc:	f00f fea4 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003b00:	3004      	adds	r0, #4
 8003b02:	f00f fec6 	bl	8013892 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003b06:	f8d9 0000 	ldr.w	r0, [r9]
 8003b0a:	b110      	cbz	r0, 8003b12 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4798      	blx	r3
    if (*currentTrans)
 8003b12:	f8d9 0000 	ldr.w	r0, [r9]
 8003b16:	b110      	cbz	r0, 8003b1e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003b18:	6803      	ldr	r3, [r0, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4798      	blx	r3
    if (*currentScreen)
 8003b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003b22:	f8d8 0000 	ldr.w	r0, [r8]
 8003b26:	b110      	cbz	r0, 8003b2e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	4798      	blx	r3
    if (*currentPresenter)
 8003b2e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b32:	b110      	cbz	r0, 8003b3a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4798      	blx	r3
    if (*currentScreen)
 8003b3a:	f8d8 0000 	ldr.w	r0, [r8]
 8003b3e:	b110      	cbz	r0, 8003b46 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4798      	blx	r3
    if (*currentPresenter)
 8003b46:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b4a:	b110      	cbz	r0, 8003b52 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003b4c:	6803      	ldr	r3, [r0, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003b52:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003b54:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003b56:	f04f 0b00 	mov.w	fp, #0
 8003b5a:	6803      	ldr	r3, [r0, #0]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	4798      	blx	r3
 8003b60:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003b62:	4604      	mov	r4, r0
 8003b64:	f8c0 b004 	str.w	fp, [r0, #4]
 8003b68:	f880 b008 	strb.w	fp, [r0, #8]
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003b70:	68b0      	ldr	r0, [r6, #8]
 8003b72:	6803      	ldr	r3, [r0, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	4798      	blx	r3
 8003b78:	4605      	mov	r5, r0
 8003b7a:	f000 fc6d 	bl	8004458 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003b7e:	6870      	ldr	r0, [r6, #4]
 8003b80:	4659      	mov	r1, fp
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	4798      	blx	r3
 8003b88:	4606      	mov	r6, r0
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f000 fc42 	bl	8004414 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003b90:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003b92:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003b96:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003b98:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003b9c:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003ba0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ba4:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ba6:	f8c6 a008 	str.w	sl, [r6, #8]
 8003baa:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003bac:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003bae:	4798      	blx	r3
    newPresenter->activate();
 8003bb0:	6833      	ldr	r3, [r6, #0]
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f011 fe42 	bl	8015844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4798      	blx	r3
    newTransition->invalidate();
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	695b      	ldr	r3, [r3, #20]
}
 8003bce:	b001      	add	sp, #4
 8003bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	4718      	bx	r3
 8003bd6:	bf00      	nop
 8003bd8:	0802510c 	.word	0x0802510c
 8003bdc:	0802519a 	.word	0x0802519a
 8003be0:	0802526c 	.word	0x0802526c
 8003be4:	080252c1 	.word	0x080252c1
 8003be8:	08025364 	.word	0x08025364
 8003bec:	0802547c 	.word	0x0802547c
 8003bf0:	240284ec 	.word	0x240284ec
 8003bf4:	240284e8 	.word	0x240284e8

08003bf8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bf8:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c00:	b10a      	cbz	r2, 8003c06 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003c02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c04:	b900      	cbnz	r0, 8003c08 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003c06:	6898      	ldr	r0, [r3, #8]
    }
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	240284a4 	.word	0x240284a4

08003c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4617      	mov	r7, r2
 8003c14:	4604      	mov	r4, r0
 8003c16:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003c18:	f00f fedc 	bl	80139d4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003c1e:	2500      	movs	r5, #0
        instance = this;
 8003c20:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c22:	4629      	mov	r1, r5
      model(m)
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003c26:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003c2a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c36:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003c38:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003c3c:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003c3e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c42:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 fb4b 	bl	80042e0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003c4a:	f7ff ffd5 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c4e:	f018 f9d6 	bl	801bffe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003c52:	f7ff ffd1 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c56:	f018 fa49 	bl	801c0ec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003c5a:	f7ff ffcd 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8003c5e:	f018 fa51 	bl	801c104 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003c62:	4620      	mov	r0, r4
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	240284f8 	.word	0x240284f8
 8003c6c:	08025428 	.word	0x08025428
 8003c70:	08025410 	.word	0x08025410
 8003c74:	240284a4 	.word	0x240284a4

08003c78 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c78:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003c7a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003c7e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003c88:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003c8c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	08003aad 	.word	0x08003aad

08003c98 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003c98:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003c9a:	4770      	bx	lr

08003c9c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003c9c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003ca0:	4770      	bx	lr

08003ca2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003ca2:	888b      	ldrh	r3, [r1, #4]
 8003ca4:	69c0      	ldr	r0, [r0, #28]
 8003ca6:	0adb      	lsrs	r3, r3, #11
 8003ca8:	680a      	ldr	r2, [r1, #0]
 8003caa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003cae:	4410      	add	r0, r2
 8003cb0:	4770      	bx	lr

08003cb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003cb6:	b1ba      	cbz	r2, 8003ce8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003cb8:	7b10      	ldrb	r0, [r2, #12]
 8003cba:	b168      	cbz	r0, 8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003cbc:	7b53      	ldrb	r3, [r2, #13]
 8003cbe:	7ad2      	ldrb	r2, [r2, #11]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	6a23      	ldr	r3, [r4, #32]
 8003cca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	428a      	cmp	r2, r1
 8003cd2:	d102      	bne.n	8003cda <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003cd4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003cd8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003cda:	d805      	bhi.n	8003ce8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003cdc:	3801      	subs	r0, #1
 8003cde:	3304      	adds	r3, #4
 8003ce0:	b280      	uxth	r0, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1f3      	bne.n	8003cce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003ce6:	e7f7      	b.n	8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e7f5      	b.n	8003cd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003cec <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4604      	mov	r4, r0
 8003cf0:	212c      	movs	r1, #44	@ 0x2c
 8003cf2:	f01d fff0 	bl	8021cd6 <_ZdlPvj>
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	bd10      	pop	{r4, pc}
	...

08003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003cfc:	b530      	push	{r4, r5, lr}
 8003cfe:	b08b      	sub	sp, #44	@ 0x2c
 8003d00:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003d02:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003d06:	9508      	str	r5, [sp, #32]
 8003d08:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003d0c:	9507      	str	r5, [sp, #28]
 8003d0e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003d12:	9506      	str	r5, [sp, #24]
 8003d14:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003d18:	9505      	str	r5, [sp, #20]
 8003d1a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003d1e:	9504      	str	r5, [sp, #16]
 8003d20:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003d24:	9503      	str	r5, [sp, #12]
 8003d26:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003d2a:	9502      	str	r5, [sp, #8]
 8003d2c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003d30:	9501      	str	r5, [sp, #4]
 8003d32:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003d36:	9500      	str	r5, [sp, #0]
 8003d38:	f011 f9d0 	bl	80150dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003d3e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003d40:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d44:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003d46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d48:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d4c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003d4e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003d50:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003d52:	b00b      	add	sp, #44	@ 0x2c
 8003d54:	bd30      	pop	{r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	080254a0 	.word	0x080254a0

08003d5c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003d5c:	4770      	bx	lr

08003d5e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003d5e:	4770      	bx	lr

08003d60 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003d60:	4770      	bx	lr

08003d62 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003d62:	4770      	bx	lr

08003d64 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003d64:	4770      	bx	lr

08003d66 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003d66:	4770      	bx	lr

08003d68 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003d68:	4770      	bx	lr

08003d6a <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 8003d6a:	4770      	bx	lr

08003d6c <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED0Ev>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4604      	mov	r4, r0
 8003d70:	2130      	movs	r1, #48	@ 0x30
 8003d72:	f01d ffb0 	bl	8021cd6 <_ZdlPvj>
 8003d76:	4620      	mov	r0, r4
 8003d78:	bd10      	pop	{r4, pc}

08003d7a <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	4604      	mov	r4, r0
}
 8003d7e:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8003d82:	f01d ffa8 	bl	8021cd6 <_ZdlPvj>
 8003d86:	4620      	mov	r0, r4
 8003d88:	bd10      	pop	{r4, pc}

08003d8a <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8003d8a:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8003d8c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8003d90:	b10b      	cbz	r3, 8003d96 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8003d92:	f7ff fb08 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8003d96:	bd08      	pop	{r3, pc}

08003d98 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 8003d9c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
 8003d9e:	460d      	mov	r5, r1
        if (clickAction && clickAction->isValid())
 8003da0:	b158      	cbz	r0, 8003dba <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
 8003da2:	6803      	ldr	r3, [r0, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4798      	blx	r3
 8003da8:	b138      	cbz	r0, 8003dba <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
        {
            clickAction->execute(*this, event);
 8003daa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003dac:	462a      	mov	r2, r5
 8003dae:	4621      	mov	r1, r4
 8003db0:	6803      	ldr	r3, [r0, #0]
        }
    }
 8003db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4718      	bx	r3
    }
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc0:	461d      	mov	r5, r3
        setX(x);
 8003dc2:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	4616      	mov	r6, r2
        setX(x);
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003dca:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8003dce:	4798      	blx	r3
        setY(y);
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd8:	4798      	blx	r3
        setWidth(width);
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4620      	mov	r0, r4
 8003de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de2:	4798      	blx	r3
        setHeight(height);
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	4639      	mov	r1, r7
 8003de8:	4620      	mov	r0, r4
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8003df0:	4718      	bx	r3
	...

08003df4 <_ZN8touchgfx8TextAreaC1Ev>:
          touchable(false),
 8003df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003df8:	2200      	movs	r2, #0
 8003dfa:	8481      	strh	r1, [r0, #36]	@ 0x24
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003dfc:	490c      	ldr	r1, [pc, #48]	@ (8003e30 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
        : color(col)
 8003dfe:	6302      	str	r2, [r0, #48]	@ 0x30
 8003e00:	6001      	str	r1, [r0, #0]
        : typedTextId(id)
 8003e02:	490c      	ldr	r1, [pc, #48]	@ (8003e34 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003e04:	8702      	strh	r2, [r0, #56]	@ 0x38
 8003e06:	6281      	str	r1, [r0, #40]	@ 0x28
 8003e08:	f64f 71ff 	movw	r1, #65535	@ 0xffff
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003e0c:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8003e0e:	8581      	strh	r1, [r0, #44]	@ 0x2c
 8003e10:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 8003e14:	6341      	str	r1, [r0, #52]	@ 0x34
 8003e16:	f04f 31ff 	mov.w	r1, #4294967295
        : x(0), y(0), width(0), height(0)
 8003e1a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003e1e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003e22:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003e26:	e9c0 2207 	strd	r2, r2, [r0, #28]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003e2a:	e9c0 1210 	strd	r1, r2, [r0, #64]	@ 0x40
    }
 8003e2e:	4770      	bx	lr
 8003e30:	0802611c 	.word	0x0802611c
 8003e34:	08025104 	.word	0x08025104

08003e38 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	b089      	sub	sp, #36	@ 0x24
        : presenter(0)
 8003e40:	2500      	movs	r5, #0
 8003e42:	f011 fb53 	bl	80154ec <_ZN8touchgfx6ScreenC1Ev>
 8003e46:	46a3      	mov	fp, r4
 8003e48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <_ZN15Screen1ViewBaseC1Ev+0x1c0>)
 8003e4a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003e4c:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 8003e50:	f84b 3b40 	str.w	r3, [fp], #64
        : T(), clickAction(0)
 8003e54:	a906      	add	r1, sp, #24
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003e56:	4b69      	ldr	r3, [pc, #420]	@ (8003ffc <_ZN15Screen1ViewBaseC1Ev+0x1c4>)
 8003e58:	4650      	mov	r0, sl
 8003e5a:	6625      	str	r5, [r4, #96]	@ 0x60
 8003e5c:	f104 069c 	add.w	r6, r4, #156	@ 0x9c
        : color(col)
 8003e60:	66a5      	str	r5, [r4, #104]	@ 0x68
 8003e62:	f504 799a 	add.w	r9, r4, #308	@ 0x134
 8003e66:	f504 78be 	add.w	r8, r4, #380	@ 0x17c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003e6a:	1d27      	adds	r7, r4, #4
        : x(0), y(0), width(0), height(0)
 8003e6c:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 8003e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e74:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8003e78:	23ff      	movs	r3, #255	@ 0xff
 8003e7a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e82:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
          parent(0),
 8003e86:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8003e8a:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 8003e8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8003e92:	f00c fb19 	bl	80104c8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003e96:	4b5a      	ldr	r3, [pc, #360]	@ (8004000 <_ZN15Screen1ViewBaseC1Ev+0x1c8>)
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 8003e9e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        touchable = touch;
 8003ea0:	f04f 0301 	mov.w	r3, #1
 8003ea4:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 8003ea8:	f009 fc6a 	bl	800d780 <_ZN8touchgfx12DigitalClockC1Ev>
 8003eac:	4648      	mov	r0, r9
 8003eae:	f7ff ffa1 	bl	8003df4 <_ZN8touchgfx8TextAreaC1Ev>
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	f7ff ff9e 	bl	8003df4 <_ZN8touchgfx8TextAreaC1Ev>
    __background.setPosition(0, 0, 800, 480);
 8003eb8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003ebc:	462a      	mov	r2, r5
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	4658      	mov	r0, fp
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003ec8:	f7ff ff78 	bl	8003dbc <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003ecc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003ed6:	f009 fd15 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003eda:	2302      	movs	r3, #2
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_CROPPED_ID));
 8003edc:	a906      	add	r1, sp, #24
 8003ede:	4650      	mov	r0, sl
 8003ee0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8003ee4:	f00d f8fb 	bl	80110de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(87, 100, 114, 107);
 8003ee8:	236b      	movs	r3, #107	@ 0x6b
 8003eea:	2264      	movs	r2, #100	@ 0x64
 8003eec:	4650      	mov	r0, sl
 8003eee:	2157      	movs	r1, #87	@ 0x57
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2372      	movs	r3, #114	@ 0x72
 8003ef4:	f7ff ff62 	bl	8003dbc <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003ef8:	4629      	mov	r1, r5
 8003efa:	4650      	mov	r0, sl
 8003efc:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8004004 <_ZN15Screen1ViewBaseC1Ev+0x1cc>
 8003f00:	f00c fa9c 	bl	801043c <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003f04:	4651      	mov	r1, sl
 8003f06:	4638      	mov	r0, r7
 8003f08:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 8004008 <_ZN15Screen1ViewBaseC1Ev+0x1d0>
 8003f0c:	f009 fcfa 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digitalClock1.setPosition(529, 12, 256, 72);
 8003f10:	2348      	movs	r3, #72	@ 0x48
 8003f12:	220c      	movs	r2, #12
 8003f14:	4630      	mov	r0, r6
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f240 2111 	movw	r1, #529	@ 0x211
 8003f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f20:	f7ff ff4c 	bl	8003dbc <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8003f24:	4659      	mov	r1, fp
 8003f26:	4630      	mov	r0, r6
 8003f28:	f009 fb58 	bl	800d5dc <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8003f2c:	2304      	movs	r3, #4
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NI1A));
 8003f2e:	a906      	add	r1, sp, #24
 8003f30:	4630      	mov	r0, r6
 8003f32:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003f36:	f8cd a018 	str.w	sl, [sp, #24]
 8003f3a:	f009 fb6a 	bl	800d612 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8003f3e:	4630      	mov	r0, r6
 8003f40:	2101      	movs	r1, #1
 8003f42:	f009 fc6b 	bl	800d81c <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setTime24Hour(10, 10, 0);
 8003f46:	220a      	movs	r2, #10
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 8003f52:	462b      	mov	r3, r5
 8003f54:	f009 fc65 	bl	800d822 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8003f5c:	ae02      	add	r6, sp, #8
 8003f5e:	f009 fcd1 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(87, 214, 114, 26);
 8003f62:	231a      	movs	r3, #26
 8003f64:	22d6      	movs	r2, #214	@ 0xd6
 8003f66:	4648      	mov	r0, r9
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2157      	movs	r1, #87	@ 0x57
 8003f6c:	2372      	movs	r3, #114	@ 0x72
 8003f6e:	f7ff ff25 	bl	8003dbc <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f72:	4649      	mov	r1, r9
 8003f74:	4630      	mov	r0, r6
        color = newColor;
 8003f76:	f8c4 b164 	str.w	fp, [r4, #356]	@ 0x164
        linespace = space;
 8003f7a:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
        boundingArea = calculateBoundingArea();
 8003f7e:	f00c fd4d 	bl	8010a1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003f82:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8003f86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f8e:	f04f 0301 	mov.w	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6UML));
 8003f92:	a906      	add	r1, sp, #24
 8003f94:	4648      	mov	r0, r9
 8003f96:	f8cd a018 	str.w	sl, [sp, #24]
 8003f9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003f9e:	f00c ffd7 	bl	8010f50 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f009 fcad 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setPosition(0, 12, 566, 69);
 8003faa:	2345      	movs	r3, #69	@ 0x45
 8003fac:	220c      	movs	r2, #12
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	f240 2336 	movw	r3, #566	@ 0x236
 8003fb8:	f7ff ff00 	bl	8003dbc <_ZN8touchgfx8Drawable11setPositionEssss>
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	4630      	mov	r0, r6
        color = newColor;
 8003fc0:	f8c4 b1ac 	str.w	fp, [r4, #428]	@ 0x1ac
        linespace = space;
 8003fc4:	f8a4 51b0 	strh.w	r5, [r4, #432]	@ 0x1b0
        boundingArea = calculateBoundingArea();
 8003fc8:	f00c fd28 	bl	8010a1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003fcc:	f504 73dc 	add.w	r3, r4, #440	@ 0x1b8
 8003fd0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 8003fd8:	a906      	add	r1, sp, #24
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f8cd a018 	str.w	sl, [sp, #24]
 8003fe0:	f8ad 501c 	strh.w	r5, [sp, #28]
 8003fe4:	f00c ffb4 	bl	8010f50 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003fe8:	4638      	mov	r0, r7
 8003fea:	4641      	mov	r1, r8
 8003fec:	f009 fc8a 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	b009      	add	sp, #36	@ 0x24
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	0802557c 	.word	0x0802557c
 8003ffc:	080261ac 	.word	0x080261ac
 8004000:	08025508 	.word	0x08025508
 8004004:	ffa3baff 	.word	0xffa3baff
 8004008:	08025104 	.word	0x08025104

0800400c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 800400c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800400e:	4770      	bx	lr

08004010 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004010:	4770      	bx	lr
	...

08004014 <_Z23getFont_verdana_10_4bppv>:
{
 8004014:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004016:	4d16      	ldr	r5, [pc, #88]	@ (8004070 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004018:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800401a:	682c      	ldr	r4, [r5, #0]
 800401c:	f3bf 8f5b 	dmb	ish
 8004020:	f014 0401 	ands.w	r4, r4, #1
 8004024:	d120      	bne.n	8004068 <_Z23getFont_verdana_10_4bppv+0x54>
 8004026:	4628      	mov	r0, r5
 8004028:	f01d fe57 	bl	8021cda <__cxa_guard_acquire>
 800402c:	b1e0      	cbz	r0, 8004068 <_Z23getFont_verdana_10_4bppv+0x54>
 800402e:	233f      	movs	r3, #63	@ 0x3f
 8004030:	2201      	movs	r2, #1
 8004032:	4910      	ldr	r1, [pc, #64]	@ (8004074 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004034:	9309      	str	r3, [sp, #36]	@ 0x24
 8004036:	4b10      	ldr	r3, [pc, #64]	@ (8004078 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004038:	4810      	ldr	r0, [pc, #64]	@ (800407c <_Z23getFont_verdana_10_4bppv+0x68>)
 800403a:	9308      	str	r3, [sp, #32]
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800403e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004040:	9405      	str	r4, [sp, #20]
 8004042:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004046:	2304      	movs	r3, #4
 8004048:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800404c:	230a      	movs	r3, #10
 800404e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004058:	f7ff fe50 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800405c:	4809      	ldr	r0, [pc, #36]	@ (8004084 <_Z23getFont_verdana_10_4bppv+0x70>)
 800405e:	f01e f9d1 	bl	8022404 <atexit>
 8004062:	4628      	mov	r0, r5
 8004064:	f01d fe45 	bl	8021cf2 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004068:	4804      	ldr	r0, [pc, #16]	@ (800407c <_Z23getFont_verdana_10_4bppv+0x68>)
 800406a:	b00f      	add	sp, #60	@ 0x3c
 800406c:	bd30      	pop	{r4, r5, pc}
 800406e:	bf00      	nop
 8004070:	2400e3b8 	.word	0x2400e3b8
 8004074:	08028920 	.word	0x08028920
 8004078:	08028b38 	.word	0x08028b38
 800407c:	2400e3bc 	.word	0x2400e3bc
 8004080:	08028b64 	.word	0x08028b64
 8004084:	08004011 	.word	0x08004011

08004088 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_17_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_17_4bpp();

touchgfx::GeneratedFont& getFont_verdana_17_4bpp()
{
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 1, 17, 17, 0, 0, 4, 1, 0, 0, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 8004088:	4770      	bx	lr
	...

0800408c <_Z23getFont_verdana_17_4bppv>:
{
 800408c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 1, 17, 17, 0, 0, 4, 1, 0, 0, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 800408e:	4d16      	ldr	r5, [pc, #88]	@ (80040e8 <_Z23getFont_verdana_17_4bppv+0x5c>)
{
 8004090:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 1, 17, 17, 0, 0, 4, 1, 0, 0, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 8004092:	682c      	ldr	r4, [r5, #0]
 8004094:	f3bf 8f5b 	dmb	ish
 8004098:	f014 0401 	ands.w	r4, r4, #1
 800409c:	d120      	bne.n	80040e0 <_Z23getFont_verdana_17_4bppv+0x54>
 800409e:	4628      	mov	r0, r5
 80040a0:	f01d fe1b 	bl	8021cda <__cxa_guard_acquire>
 80040a4:	b1e0      	cbz	r0, 80040e0 <_Z23getFont_verdana_17_4bppv+0x54>
 80040a6:	233f      	movs	r3, #63	@ 0x3f
 80040a8:	2201      	movs	r2, #1
 80040aa:	4910      	ldr	r1, [pc, #64]	@ (80040ec <_Z23getFont_verdana_17_4bppv+0x60>)
 80040ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <_Z23getFont_verdana_17_4bppv+0x64>)
 80040b0:	4810      	ldr	r0, [pc, #64]	@ (80040f4 <_Z23getFont_verdana_17_4bppv+0x68>)
 80040b2:	9308      	str	r3, [sp, #32]
 80040b4:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <_Z23getFont_verdana_17_4bppv+0x6c>)
 80040b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80040b8:	9405      	str	r4, [sp, #20]
 80040ba:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80040be:	2304      	movs	r3, #4
 80040c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80040c4:	2311      	movs	r3, #17
 80040c6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80040d0:	f7ff fe14 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80040d4:	4809      	ldr	r0, [pc, #36]	@ (80040fc <_Z23getFont_verdana_17_4bppv+0x70>)
 80040d6:	f01e f995 	bl	8022404 <atexit>
 80040da:	4628      	mov	r0, r5
 80040dc:	f01d fe09 	bl	8021cf2 <__cxa_guard_release>
    return verdana_17_4bpp;
}
 80040e0:	4804      	ldr	r0, [pc, #16]	@ (80040f4 <_Z23getFont_verdana_17_4bppv+0x68>)
 80040e2:	b00f      	add	sp, #60	@ 0x3c
 80040e4:	bd30      	pop	{r4, r5, pc}
 80040e6:	bf00      	nop
 80040e8:	2400e3e8 	.word	0x2400e3e8
 80040ec:	08028930 	.word	0x08028930
 80040f0:	08028b3c 	.word	0x08028b3c
 80040f4:	2400e3ec 	.word	0x2400e3ec
 80040f8:	08028b68 	.word	0x08028b68
 80040fc:	08004089 	.word	0x08004089

08004100 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004100:	4770      	bx	lr
	...

08004104 <_Z23getFont_verdana_20_4bppv>:
{
 8004104:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004106:	4d16      	ldr	r5, [pc, #88]	@ (8004160 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004108:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800410a:	682c      	ldr	r4, [r5, #0]
 800410c:	f3bf 8f5b 	dmb	ish
 8004110:	f014 0401 	ands.w	r4, r4, #1
 8004114:	d121      	bne.n	800415a <_Z23getFont_verdana_20_4bppv+0x56>
 8004116:	4628      	mov	r0, r5
 8004118:	f01d fddf 	bl	8021cda <__cxa_guard_acquire>
 800411c:	b1e8      	cbz	r0, 800415a <_Z23getFont_verdana_20_4bppv+0x56>
 800411e:	233f      	movs	r3, #63	@ 0x3f
 8004120:	2208      	movs	r2, #8
 8004122:	4910      	ldr	r1, [pc, #64]	@ (8004164 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004124:	9309      	str	r3, [sp, #36]	@ 0x24
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004128:	4810      	ldr	r0, [pc, #64]	@ (800416c <_Z23getFont_verdana_20_4bppv+0x68>)
 800412a:	9308      	str	r3, [sp, #32]
 800412c:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800412e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004130:	9307      	str	r3, [sp, #28]
 8004132:	2301      	movs	r3, #1
 8004134:	9401      	str	r4, [sp, #4]
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800413c:	2304      	movs	r3, #4
 800413e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004142:	2314      	movs	r3, #20
 8004144:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f7ff fdd7 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800414e:	4809      	ldr	r0, [pc, #36]	@ (8004174 <_Z23getFont_verdana_20_4bppv+0x70>)
 8004150:	f01e f958 	bl	8022404 <atexit>
 8004154:	4628      	mov	r0, r5
 8004156:	f01d fdcc 	bl	8021cf2 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800415a:	4804      	ldr	r0, [pc, #16]	@ (800416c <_Z23getFont_verdana_20_4bppv+0x68>)
 800415c:	b00f      	add	sp, #60	@ 0x3c
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	2400e418 	.word	0x2400e418
 8004164:	08028940 	.word	0x08028940
 8004168:	08028b40 	.word	0x08028b40
 800416c:	2400e41c 	.word	0x2400e41c
 8004170:	08028b6c 	.word	0x08028b6c
 8004174:	08004101 	.word	0x08004101

08004178 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 28, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004178:	4770      	bx	lr
	...

0800417c <_Z23getFont_verdana_40_4bppv>:
{
 800417c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 28, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800417e:	4d17      	ldr	r5, [pc, #92]	@ (80041dc <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8004180:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 28, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004182:	682c      	ldr	r4, [r5, #0]
 8004184:	f3bf 8f5b 	dmb	ish
 8004188:	f014 0401 	ands.w	r4, r4, #1
 800418c:	d122      	bne.n	80041d4 <_Z23getFont_verdana_40_4bppv+0x58>
 800418e:	4628      	mov	r0, r5
 8004190:	f01d fda3 	bl	8021cda <__cxa_guard_acquire>
 8004194:	b1f0      	cbz	r0, 80041d4 <_Z23getFont_verdana_40_4bppv+0x58>
 8004196:	233f      	movs	r3, #63	@ 0x3f
 8004198:	221c      	movs	r2, #28
 800419a:	4911      	ldr	r1, [pc, #68]	@ (80041e0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800419c:	9309      	str	r3, [sp, #36]	@ 0x24
 800419e:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80041a0:	4811      	ldr	r0, [pc, #68]	@ (80041e8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80041a2:	9308      	str	r3, [sp, #32]
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <_Z23getFont_verdana_40_4bppv+0x70>)
 80041a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80041a8:	9307      	str	r3, [sp, #28]
 80041aa:	2301      	movs	r3, #1
 80041ac:	9401      	str	r4, [sp, #4]
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80041b4:	2304      	movs	r3, #4
 80041b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80041ba:	2328      	movs	r3, #40	@ 0x28
 80041bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2330      	movs	r3, #48	@ 0x30
 80041c4:	f7ff fd9a 	bl	8003cfc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041c8:	4809      	ldr	r0, [pc, #36]	@ (80041f0 <_Z23getFont_verdana_40_4bppv+0x74>)
 80041ca:	f01e f91b 	bl	8022404 <atexit>
 80041ce:	4628      	mov	r0, r5
 80041d0:	f01d fd8f 	bl	8021cf2 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80041d4:	4804      	ldr	r0, [pc, #16]	@ (80041e8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80041d6:	b00f      	add	sp, #60	@ 0x3c
 80041d8:	bd30      	pop	{r4, r5, pc}
 80041da:	bf00      	nop
 80041dc:	2400e448 	.word	0x2400e448
 80041e0:	080289b0 	.word	0x080289b0
 80041e4:	08028b50 	.word	0x08028b50
 80041e8:	2400e44c 	.word	0x2400e44c
 80041ec:	08028b70 	.word	0x08028b70
 80041f0:	08004179 	.word	0x08004179

080041f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80041f4:	2000      	movs	r0, #0
 80041f6:	4770      	bx	lr

080041f8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80041f8:	2000      	movs	r0, #0
 80041fa:	4770      	bx	lr

080041fc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80041fc:	b40e      	push	{r1, r2, r3}
 80041fe:	b503      	push	{r0, r1, lr}
 8004200:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004202:	2100      	movs	r1, #0
{
 8004204:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004208:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800420a:	f010 fa6b 	bl	80146e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800420e:	b002      	add	sp, #8
 8004210:	f85d eb04 	ldr.w	lr, [sp], #4
 8004214:	b003      	add	sp, #12
 8004216:	4770      	bx	lr

08004218 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004218:	b40c      	push	{r2, r3}
 800421a:	b507      	push	{r0, r1, r2, lr}
 800421c:	ab04      	add	r3, sp, #16
 800421e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004222:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004224:	f010 fa5e 	bl	80146e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004228:	b003      	add	sp, #12
 800422a:	f85d eb04 	ldr.w	lr, [sp], #4
 800422e:	b002      	add	sp, #8
 8004230:	4770      	bx	lr
	...

08004234 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004234:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004236:	b510      	push	{r4, lr}
 8004238:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800423a:	b373      	cbz	r3, 800429a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800423c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800423e:	b92b      	cbnz	r3, 800424c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004240:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004242:	21c5      	movs	r1, #197	@ 0xc5
 8004244:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004246:	4819      	ldr	r0, [pc, #100]	@ (80042ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004248:	f01e f8be 	bl	80223c8 <__assert_func>
            return buffer[pos];
 800424c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800424e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004252:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004254:	b30b      	cbz	r3, 800429a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004256:	f012 f825 	bl	80162a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800425a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800425c:	2b01      	cmp	r3, #1
 800425e:	d803      	bhi.n	8004268 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004260:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004262:	21cb      	movs	r1, #203	@ 0xcb
 8004264:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004266:	e7ee      	b.n	8004246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004268:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800426a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800426e:	1c53      	adds	r3, r2, #1
 8004270:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004272:	2b09      	cmp	r3, #9
 8004274:	4619      	mov	r1, r3
 8004276:	bf88      	it	hi
 8004278:	f1a3 010a 	subhi.w	r1, r3, #10
 800427c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004280:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004282:	4281      	cmp	r1, r0
 8004284:	d109      	bne.n	800429a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8004286:	2b0a      	cmp	r3, #10
 8004288:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800428c:	bf28      	it	cs
 800428e:	2300      	movcs	r3, #0
            return buffer[pos];
 8004290:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004292:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004296:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004298:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800429a:	4620      	mov	r0, r4
}
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80042a0:	f011 bf02 	b.w	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80042a4:	080255a8 	.word	0x080255a8
 80042a8:	080255b1 	.word	0x080255b1
 80042ac:	0802565c 	.word	0x0802565c
 80042b0:	080256b4 	.word	0x080256b4
 80042b4:	080256c2 	.word	0x080256c2

080042b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80042b8:	f011 bebf 	b.w	801603a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080042bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80042bc:	b510      	push	{r4, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	ac02      	add	r4, sp, #8
 80042c2:	e884 0006 	stmia.w	r4, {r1, r2}
 80042c6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80042c8:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80042ca:	4621      	mov	r1, r4
    va_start(pArg, format);
 80042cc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	9b08      	ldr	r3, [sp, #32]
 80042d6:	f00e fe7f 	bl	8012fd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80042da:	b006      	add	sp, #24
 80042dc:	bd10      	pop	{r4, pc}
	...

080042e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80042e0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80042e2:	bb18      	cbnz	r0, 800432c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80042e6:	4813      	ldr	r0, [pc, #76]	@ (8004334 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80042e8:	681c      	ldr	r4, [r3, #0]
 80042ea:	4913      	ldr	r1, [pc, #76]	@ (8004338 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80042ec:	b1b4      	cbz	r4, 800431c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	4422      	add	r2, r4
 80042f8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80042fa:	68a2      	ldr	r2, [r4, #8]
 80042fc:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80042fe:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004304:	f000 f838 	bl	8004378 <_ZN17TypedTextDatabase8getFontsEv>
 8004308:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800430a:	f000 f833 	bl	8004374 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800430e:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004310:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004312:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004314:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004316:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004318:	8018      	strh	r0, [r3, #0]
    }
}
 800431a:	e007      	b.n	800432c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800431e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004322:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004326:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004328:	2c00      	cmp	r4, #0
 800432a:	d1e8      	bne.n	80042fe <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800432c:	bd38      	pop	{r3, r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	2400e484 	.word	0x2400e484
 8004334:	2400e47c 	.word	0x2400e47c
 8004338:	2400e478 	.word	0x2400e478
 800433c:	2400e480 	.word	0x2400e480
 8004340:	240284fc 	.word	0x240284fc
 8004344:	24028504 	.word	0x24028504
 8004348:	24028500 	.word	0x24028500
 800434c:	90360014 	.word	0x90360014
 8004350:	90360000 	.word	0x90360000
 8004354:	90360060 	.word	0x90360060

08004358 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004358:	4b04      	ldr	r3, [pc, #16]	@ (800436c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2400e478 	.word	0x2400e478
 8004370:	2400e47c 	.word	0x2400e47c

08004374 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004374:	2005      	movs	r0, #5
 8004376:	4770      	bx	lr

08004378 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004378:	4800      	ldr	r0, [pc, #0]	@ (800437c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800437a:	4770      	bx	lr
 800437c:	2400e488 	.word	0x2400e488

08004380 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_17_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004380:	b510      	push	{r4, lr}
};
 8004382:	4c07      	ldr	r4, [pc, #28]	@ (80043a0 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 8004384:	f7ff febe 	bl	8004104 <_Z23getFont_verdana_20_4bppv>
};
 8004388:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800438a:	f7ff fef7 	bl	800417c <_Z23getFont_verdana_40_4bppv>
};
 800438e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004390:	f7ff fe40 	bl	8004014 <_Z23getFont_verdana_10_4bppv>
};
 8004394:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_17_4bpp())
 8004396:	f7ff fe79 	bl	800408c <_Z23getFont_verdana_17_4bppv>
};
 800439a:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 800439c:	bd10      	pop	{r4, pc}
 800439e:	bf00      	nop
 80043a0:	2400e488 	.word	0x2400e488

080043a4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 80043a4:	b510      	push	{r4, lr}
    pointArray = 0;
 80043a6:	2400      	movs	r4, #0
 80043a8:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80043aa:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80043ac:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80043ae:	601c      	str	r4, [r3, #0]
}
 80043b0:	bd10      	pop	{r4, pc}

080043b2 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80043b2:	4770      	bx	lr

080043b4 <_ZN19FrontendApplicationD0Ev>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4604      	mov	r4, r0
 80043b8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80043bc:	f01d fc8b 	bl	8021cd6 <_ZdlPvj>
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4604      	mov	r4, r0
    {
        model.tick();
 80043c8:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80043cc:	f000 f813 	bl	80043f6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80043d0:	4620      	mov	r0, r4
    }
 80043d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80043d6:	f00f bab9 	b.w	801394c <_ZN8touchgfx11Application15handleTickEventEv>
	...

080043dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80043dc:	b510      	push	{r4, lr}
 80043de:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80043e0:	f7ff fc16 	bl	8003c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80043e4:	4b01      	ldr	r3, [pc, #4]	@ (80043ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80043e6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80043e8:	6023      	str	r3, [r4, #0]
}
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	0802579c 	.word	0x0802579c

080043f0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80043f0:	2200      	movs	r2, #0
 80043f2:	6002      	str	r2, [r0, #0]
{

}
 80043f4:	4770      	bx	lr

080043f6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80043f6:	4770      	bx	lr

080043f8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80043f8:	4770      	bx	lr

080043fa <_ZThn4_N16Screen1PresenterD1Ev>:
 80043fa:	3804      	subs	r0, #4
 80043fc:	4770      	bx	lr

080043fe <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80043fe:	4770      	bx	lr

08004400 <_ZN16Screen1PresenterD0Ev>:
 8004400:	b510      	push	{r4, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	2110      	movs	r1, #16
 8004406:	f01d fc66 	bl	8021cd6 <_ZdlPvj>
 800440a:	4620      	mov	r0, r4
 800440c:	bd10      	pop	{r4, pc}

0800440e <_ZThn4_N16Screen1PresenterD0Ev>:
 800440e:	f1a0 0004 	sub.w	r0, r0, #4
 8004412:	e7f5      	b.n	8004400 <_ZN16Screen1PresenterD0Ev>

08004414 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004414:	2200      	movs	r2, #0
    : view(v)
 8004416:	60c1      	str	r1, [r0, #12]
 8004418:	6082      	str	r2, [r0, #8]
 800441a:	4a02      	ldr	r2, [pc, #8]	@ (8004424 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800441c:	6002      	str	r2, [r0, #0]
 800441e:	3218      	adds	r2, #24
 8004420:	6042      	str	r2, [r0, #4]
}
 8004422:	4770      	bx	lr
 8004424:	080257f0 	.word	0x080257f0

08004428 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004428:	4770      	bx	lr
	...

0800442c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <_ZN11Screen1ViewD1Ev+0x10>)
 800442e:	b510      	push	{r4, lr}
 8004430:	4604      	mov	r4, r0
 8004432:	6003      	str	r3, [r0, #0]
 8004434:	f7ff fc97 	bl	8003d66 <_ZN15Screen1ViewBaseD1Ev>
 8004438:	4620      	mov	r0, r4
 800443a:	bd10      	pop	{r4, pc}
 800443c:	08025818 	.word	0x08025818

08004440 <_ZN11Screen1ViewD0Ev>:
 8004440:	b510      	push	{r4, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	f7ff fff2 	bl	800442c <_ZN11Screen1ViewD1Ev>
 8004448:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800444c:	4620      	mov	r0, r4
 800444e:	f01d fc42 	bl	8021cd6 <_ZdlPvj>
 8004452:	4620      	mov	r0, r4
 8004454:	bd10      	pop	{r4, pc}
	...

08004458 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004458:	b510      	push	{r4, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	f7ff fcec 	bl	8003e38 <_ZN15Screen1ViewBaseC1Ev>
 8004460:	4b01      	ldr	r3, [pc, #4]	@ (8004468 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8004462:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004464:	6023      	str	r3, [r4, #0]
}
 8004466:	bd10      	pop	{r4, pc}
 8004468:	08025818 	.word	0x08025818

0800446c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800446c:	f7ff bc7c 	b.w	8003d68 <_ZN15Screen1ViewBase11setupScreenEv>

08004470 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004470:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004472:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8004476:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004478:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800447a:	2302      	movs	r3, #2
 800447c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800447e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004482:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004486:	4770      	bx	lr

08004488 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004488:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800448c:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800448e:	bf04      	itt	eq
 8004490:	2300      	moveq	r3, #0
 8004492:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004496:	2000      	movs	r0, #0
 8004498:	4770      	bx	lr

0800449a <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800449a:	2000      	movs	r0, #0
 800449c:	4770      	bx	lr

0800449e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800449e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044a0:	6904      	ldr	r4, [r0, #16]
 80044a2:	8900      	ldrh	r0, [r0, #8]
 80044a4:	46a4      	mov	ip, r4
}
 80044a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044aa:	4760      	bx	ip

080044ac <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80044ac:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80044ae:	68c4      	ldr	r4, [r0, #12]
 80044b0:	8900      	ldrh	r0, [r0, #8]
 80044b2:	46a4      	mov	ip, r4
}
 80044b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80044b8:	4760      	bx	ip

080044ba <FT6X06_GestureConfig>:
{
 80044ba:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80044bc:	f100 0518 	add.w	r5, r0, #24
{
 80044c0:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80044c2:	7809      	ldrb	r1, [r1, #0]
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f911 	bl	80046ec <ft6x06_radian_value>
 80044ca:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80044cc:	7931      	ldrb	r1, [r6, #4]
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 f918 	bl	8004704 <ft6x06_offset_left_right>
 80044d4:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80044d6:	7a31      	ldrb	r1, [r6, #8]
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 f91f 	bl	800471c <ft6x06_offset_up_down>
 80044de:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80044e0:	7b31      	ldrb	r1, [r6, #12]
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f926 	bl	8004734 <ft6x06_disatnce_left_right>
 80044e8:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80044ea:	7c31      	ldrb	r1, [r6, #16]
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f92d 	bl	800474c <ft6x06_distance_up_down>
 80044f2:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80044f4:	7d31      	ldrb	r1, [r6, #20]
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f934 	bl	8004764 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80044fc:	42c4      	cmn	r4, r0
}
 80044fe:	bf14      	ite	ne
 8004500:	f04f 30ff 	movne.w	r0, #4294967295
 8004504:	2000      	moveq	r0, #0
 8004506:	bd70      	pop	{r4, r5, r6, pc}

08004508 <FT6X06_ReadID>:
{
 8004508:	b513      	push	{r0, r1, r4, lr}
 800450a:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800450c:	3018      	adds	r0, #24
 800450e:	f10d 0107 	add.w	r1, sp, #7
 8004512:	f000 f93f 	bl	8004794 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8004516:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800451a:	6023      	str	r3, [r4, #0]
}
 800451c:	b002      	add	sp, #8
 800451e:	bd10      	pop	{r4, pc}

08004520 <FT6X06_GetState>:
{
 8004520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004522:	f100 0518 	add.w	r5, r0, #24
{
 8004526:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004528:	a901      	add	r1, sp, #4
 800452a:	4628      	mov	r0, r5
 800452c:	f000 f8d1 	bl	80046d2 <ft6x06_td_status>
 8004530:	bb08      	cbnz	r0, 8004576 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004532:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004536:	2b02      	cmp	r3, #2
 8004538:	bf98      	it	ls
 800453a:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800453c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800453e:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004540:	2103      	movs	r1, #3
 8004542:	4628      	mov	r0, r5
 8004544:	eb0d 0203 	add.w	r2, sp, r3
 8004548:	f000 f8b0 	bl	80046ac <ft6x06_read_reg>
 800454c:	b9b0      	cbnz	r0, 800457c <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800454e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004552:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800455c:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800455e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004562:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004564:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800456e:	4313      	orrs	r3, r2
 8004570:	60a3      	str	r3, [r4, #8]
}
 8004572:	b003      	add	sp, #12
 8004574:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004576:	f04f 30ff 	mov.w	r0, #4294967295
 800457a:	e7df      	b.n	800453c <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004580:	e7f7      	b.n	8004572 <FT6X06_GetState+0x52>

08004582 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004582:	3018      	adds	r0, #24
 8004584:	f000 b8a0 	b.w	80046c8 <ft6x06_gest_id>

08004588 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004588:	2101      	movs	r1, #1
 800458a:	3018      	adds	r0, #24
 800458c:	f000 b8f6 	b.w	800477c <ft6x06_g_mode>

08004590 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004590:	2100      	movs	r1, #0
 8004592:	3018      	adds	r0, #24
 8004594:	f000 b8f2 	b.w	800477c <ft6x06_g_mode>

08004598 <FT6X06_Init>:
{
 8004598:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800459a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800459e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80045a0:	b96b      	cbnz	r3, 80045be <FT6X06_Init+0x26>
    pObj->IO.Init();
 80045a2:	6803      	ldr	r3, [r0, #0]
 80045a4:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff fff2 	bl	8004590 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80045ac:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80045ae:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80045b2:	bf18      	it	ne
 80045b4:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80045b6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80045ba:	4240      	negs	r0, r0
}
 80045bc:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 80045be:	2000      	movs	r0, #0
  return ret;
 80045c0:	e7fc      	b.n	80045bc <FT6X06_Init+0x24>

080045c2 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80045c2:	2000      	movs	r0, #0
 80045c4:	4770      	bx	lr

080045c6 <FT6X06_GetMultiTouchState>:
{
 80045c6:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045c8:	f100 0518 	add.w	r5, r0, #24
{
 80045cc:	b085      	sub	sp, #20
 80045ce:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045d0:	4628      	mov	r0, r5
 80045d2:	a901      	add	r1, sp, #4
 80045d4:	f000 f87d 	bl	80046d2 <ft6x06_td_status>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d145      	bne.n	8004668 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80045dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	bf98      	it	ls
 80045e4:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80045e6:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80045e8:	230c      	movs	r3, #12
 80045ea:	aa01      	add	r2, sp, #4
 80045ec:	2103      	movs	r1, #3
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f85c 	bl	80046ac <ft6x06_read_reg>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d13a      	bne.n	800466e <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80045f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045fc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004600:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004602:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004604:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004608:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800460a:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800460c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004610:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004614:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004616:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004620:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004622:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004626:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004628:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800462c:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800462e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004636:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004638:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800463a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800463e:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004640:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004642:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004646:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004648:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004652:	430b      	orrs	r3, r1
 8004654:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004656:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800465a:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 800465c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004664:	b005      	add	sp, #20
 8004666:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e7bb      	b.n	80045e6 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004672:	e7f7      	b.n	8004664 <FT6X06_GetMultiTouchState+0x9e>

08004674 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004674:	b190      	cbz	r0, 800469c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004676:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004678:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800467a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 800467c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800467e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004680:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004682:	68ca      	ldr	r2, [r1, #12]
 8004684:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004686:	690a      	ldr	r2, [r1, #16]
 8004688:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800468a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800468c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800468e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <FT6X06_RegisterBusIO+0x30>)
 8004692:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <FT6X06_RegisterBusIO+0x34>)
 8004696:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004698:	b103      	cbz	r3, 800469c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800469a:	4718      	bx	r3
}
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	0800449f 	.word	0x0800449f
 80046a8:	080044ad 	.word	0x080044ad

080046ac <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80046ac:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80046ae:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80046b2:	46a4      	mov	ip, r4
}
 80046b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80046b8:	4760      	bx	ip

080046ba <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80046ba:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80046bc:	6804      	ldr	r4, [r0, #0]
 80046be:	6880      	ldr	r0, [r0, #8]
 80046c0:	46a4      	mov	ip, r4
}
 80046c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80046c6:	4760      	bx	ip

080046c8 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80046c8:	2301      	movs	r3, #1
{
 80046ca:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80046cc:	4619      	mov	r1, r3
 80046ce:	f7ff bfed 	b.w	80046ac <ft6x06_read_reg>

080046d2 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80046d2:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80046d4:	460a      	mov	r2, r1
{
 80046d6:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80046d8:	2301      	movs	r3, #1
 80046da:	2102      	movs	r1, #2
 80046dc:	f7ff ffe6 	bl	80046ac <ft6x06_read_reg>
  
  if(ret == 0)
 80046e0:	b918      	cbnz	r0, 80046ea <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80046e2:	7823      	ldrb	r3, [r4, #0]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80046ea:	bd10      	pop	{r4, pc}

080046ec <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046ec:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80046ee:	2301      	movs	r3, #1
{
 80046f0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80046f4:	f10d 0207 	add.w	r2, sp, #7
 80046f8:	2191      	movs	r1, #145	@ 0x91
 80046fa:	f7ff ffde 	bl	80046ba <ft6x06_write_reg>
}
 80046fe:	b003      	add	sp, #12
 8004700:	f85d fb04 	ldr.w	pc, [sp], #4

08004704 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004704:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004706:	2301      	movs	r3, #1
{
 8004708:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800470c:	f10d 0207 	add.w	r2, sp, #7
 8004710:	2192      	movs	r1, #146	@ 0x92
 8004712:	f7ff ffd2 	bl	80046ba <ft6x06_write_reg>
}
 8004716:	b003      	add	sp, #12
 8004718:	f85d fb04 	ldr.w	pc, [sp], #4

0800471c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800471c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800471e:	2301      	movs	r3, #1
{
 8004720:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004724:	f10d 0207 	add.w	r2, sp, #7
 8004728:	2193      	movs	r1, #147	@ 0x93
 800472a:	f7ff ffc6 	bl	80046ba <ft6x06_write_reg>
}
 800472e:	b003      	add	sp, #12
 8004730:	f85d fb04 	ldr.w	pc, [sp], #4

08004734 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004734:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004736:	2301      	movs	r3, #1
{
 8004738:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800473c:	f10d 0207 	add.w	r2, sp, #7
 8004740:	2194      	movs	r1, #148	@ 0x94
 8004742:	f7ff ffba 	bl	80046ba <ft6x06_write_reg>
}
 8004746:	b003      	add	sp, #12
 8004748:	f85d fb04 	ldr.w	pc, [sp], #4

0800474c <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800474c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800474e:	2301      	movs	r3, #1
{
 8004750:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004754:	f10d 0207 	add.w	r2, sp, #7
 8004758:	2195      	movs	r1, #149	@ 0x95
 800475a:	f7ff ffae 	bl	80046ba <ft6x06_write_reg>
}
 800475e:	b003      	add	sp, #12
 8004760:	f85d fb04 	ldr.w	pc, [sp], #4

08004764 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004764:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004766:	2301      	movs	r3, #1
{
 8004768:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800476c:	f10d 0207 	add.w	r2, sp, #7
 8004770:	2196      	movs	r1, #150	@ 0x96
 8004772:	f7ff ffa2 	bl	80046ba <ft6x06_write_reg>
}
 8004776:	b003      	add	sp, #12
 8004778:	f85d fb04 	ldr.w	pc, [sp], #4

0800477c <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 800477c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800477e:	2301      	movs	r3, #1
{
 8004780:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004784:	f10d 0207 	add.w	r2, sp, #7
 8004788:	21a4      	movs	r1, #164	@ 0xa4
 800478a:	f7ff ff96 	bl	80046ba <ft6x06_write_reg>
}
 800478e:	b003      	add	sp, #12
 8004790:	f85d fb04 	ldr.w	pc, [sp], #4

08004794 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004794:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004796:	2301      	movs	r3, #1
 8004798:	21a8      	movs	r1, #168	@ 0xa8
 800479a:	f7ff bf87 	b.w	80046ac <ft6x06_read_reg>
	...

080047a0 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80047a0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80047a2:	2201      	movs	r2, #1
 80047a4:	4b07      	ldr	r3, [pc, #28]	@ (80047c4 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80047a6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80047aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80047ac:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047ae:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80047b0:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047b6:	f006 f9f5 	bl	800aba4 <HAL_SDRAM_SendCommand>
 80047ba:	3800      	subs	r0, #0
 80047bc:	bf18      	it	ne
 80047be:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047c0:	4240      	negs	r0, r0
 80047c2:	bd08      	pop	{r3, pc}
 80047c4:	2400e498 	.word	0x2400e498

080047c8 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80047c8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80047ca:	2202      	movs	r2, #2
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80047ce:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80047d2:	2101      	movs	r1, #1
 80047d4:	2200      	movs	r2, #0
 80047d6:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047de:	4619      	mov	r1, r3
 80047e0:	f006 f9e0 	bl	800aba4 <HAL_SDRAM_SendCommand>
 80047e4:	3800      	subs	r0, #0
 80047e6:	bf18      	it	ne
 80047e8:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047ea:	4240      	negs	r0, r0
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop
 80047f0:	2400e498 	.word	0x2400e498

080047f4 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80047f4:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80047f6:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80047fa:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80047fc:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80047fe:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004800:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004802:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004804:	6991      	ldr	r1, [r2, #24]
 8004806:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004808:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800480a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800480c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800480e:	4907      	ldr	r1, [pc, #28]	@ (800482c <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004810:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004812:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004814:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004816:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800481a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800481e:	f006 f9c1 	bl	800aba4 <HAL_SDRAM_SendCommand>
 8004822:	3800      	subs	r0, #0
 8004824:	bf18      	it	ne
 8004826:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004828:	4240      	negs	r0, r0
 800482a:	bd10      	pop	{r4, pc}
 800482c:	2400e498 	.word	0x2400e498

08004830 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004830:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004832:	4b08      	ldr	r3, [pc, #32]	@ (8004854 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004834:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004838:	2108      	movs	r1, #8
 800483a:	2200      	movs	r2, #0
 800483c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004844:	4619      	mov	r1, r3
 8004846:	f006 f9ad 	bl	800aba4 <HAL_SDRAM_SendCommand>
 800484a:	3800      	subs	r0, #0
 800484c:	bf18      	it	ne
 800484e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004850:	4240      	negs	r0, r0
 8004852:	bd08      	pop	{r3, pc}
 8004854:	2400e498 	.word	0x2400e498

08004858 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004858:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800485a:	f006 f9c2 	bl	800abe2 <HAL_SDRAM_ProgramRefreshRate>
 800485e:	3800      	subs	r0, #0
 8004860:	bf18      	it	ne
 8004862:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004864:	4240      	negs	r0, r0
 8004866:	bd08      	pop	{r3, pc}

08004868 <IS42S32800J_Init>:
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800486c:	6809      	ldr	r1, [r1, #0]
{
 800486e:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004870:	f7ff ff96 	bl	80047a0 <IS42S32800J_ClockEnable>
 8004874:	b110      	cbz	r0, 800487c <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004876:	f04f 30ff 	mov.w	r0, #4294967295
}
 800487a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800487c:	f001 fc7c 	bl	8006178 <HAL_GetTick>
 8004880:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004882:	f001 fc79 	bl	8006178 <HAL_GetTick>
 8004886:	4286      	cmp	r6, r0
 8004888:	d0fb      	beq.n	8004882 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	4628      	mov	r0, r5
 800488e:	f7ff ff9b 	bl	80047c8 <IS42S32800J_Precharge>
 8004892:	2800      	cmp	r0, #0
 8004894:	d1ef      	bne.n	8004876 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004896:	4628      	mov	r0, r5
 8004898:	e9d4 1200 	ldrd	r1, r2, [r4]
 800489c:	f7ff ffc8 	bl	8004830 <IS42S32800J_RefreshMode>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1e8      	bne.n	8004876 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff ffa4 	bl	80047f4 <IS42S32800J_ModeRegConfig>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d1e2      	bne.n	8004876 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80048b0:	68a1      	ldr	r1, [r4, #8]
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff ffd0 	bl	8004858 <IS42S32800J_RefreshRate>
 80048b8:	3800      	subs	r0, #0
 80048ba:	bf18      	it	ne
 80048bc:	2001      	movne	r0, #1
 80048be:	4240      	negs	r0, r0
  return ret;
 80048c0:	e7db      	b.n	800487a <IS42S32800J_Init+0x12>

080048c2 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80048c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80048ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80048ce:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80048d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048d6:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80048da:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80048de:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80048e0:	2000      	movs	r0, #0
 80048e2:	4770      	bx	lr

080048e4 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80048e4:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80048e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80048ea:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048ec:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80048f0:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80048f2:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048f4:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80048f6:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80048f8:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80048fa:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80048fc:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048fe:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004900:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004902:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004904:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004906:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004908:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800490a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800490e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004912:	2310      	movs	r3, #16
 8004914:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800491a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800491c:	f240 1301 	movw	r3, #257	@ 0x101
 8004920:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004922:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004926:	f004 fd44 	bl	80093b2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800492a:	2800      	cmp	r0, #0

}
 800492c:	bf14      	ite	ne
 800492e:	f06f 0004 	mvnne.w	r0, #4
 8004932:	2000      	moveq	r0, #0
 8004934:	b015      	add	sp, #84	@ 0x54
 8004936:	f85d fb04 	ldr.w	pc, [sp], #4

0800493a <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800493a:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800493c:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004940:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004942:	bf08      	it	eq
 8004944:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004948:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800494a:	bf18      	it	ne
 800494c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004950:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004952:	a906      	add	r1, sp, #24
{
 8004954:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004956:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004958:	2306      	movs	r3, #6
 800495a:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800495c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800495e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004962:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004964:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004966:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004968:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800496c:	f004 fc20 	bl	80091b0 <HAL_QSPI_Command>
 8004970:	bb20      	cbnz	r0, 80049bc <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004972:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004976:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004978:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800497a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800497e:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004980:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004982:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004986:	f04f 0310 	mov.w	r3, #16
 800498a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800498e:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004992:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004994:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004998:	bf14      	ite	ne
 800499a:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800499e:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049a2:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80049a4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049aa:	f004 fd02 	bl	80093b2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80049ae:	2800      	cmp	r0, #0
 80049b0:	bf14      	ite	ne
 80049b2:	f06f 0004 	mvnne.w	r0, #4
 80049b6:	2000      	moveq	r0, #0
}
 80049b8:	b015      	add	sp, #84	@ 0x54
 80049ba:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80049bc:	f06f 0001 	mvn.w	r0, #1
 80049c0:	e7fa      	b.n	80049b8 <MT25TL01G_WriteEnable+0x7e>

080049c2 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049c2:	2903      	cmp	r1, #3
{
 80049c4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049c6:	bf08      	it	eq
 80049c8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80049cc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049ce:	bf18      	it	ne
 80049d0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80049d4:	4604      	mov	r4, r0
 80049d6:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049d8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80049da:	23b7      	movs	r3, #183	@ 0xb7
 80049dc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049de:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80049e6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049e8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049ea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80049ee:	f7ff ffa4 	bl	800493a <MT25TL01G_WriteEnable>
 80049f2:	b118      	cbz	r0, 80049fc <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80049f4:	f06f 0001 	mvn.w	r0, #1
}
 80049f8:	b00f      	add	sp, #60	@ 0x3c
 80049fa:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a00:	4669      	mov	r1, sp
 8004a02:	4620      	mov	r0, r4
 8004a04:	f004 fbd4 	bl	80091b0 <HAL_QSPI_Command>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d1f3      	bne.n	80049f4 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7ff ff68 	bl	80048e4 <MT25TL01G_AutoPollingMemReady>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d0ef      	beq.n	80049f8 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004a18:	e7ec      	b.n	80049f4 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004a1a <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004a1a:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004a20:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a26:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004a28:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a2a:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004a2c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a2e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a30:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a34:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004a36:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a38:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a3a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a3e:	f004 fbb7 	bl	80091b0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004a42:	2800      	cmp	r0, #0
}
 8004a44:	bf14      	ite	ne
 8004a46:	f06f 0001 	mvnne.w	r0, #1
 8004a4a:	2000      	moveq	r0, #0
 8004a4c:	b00f      	add	sp, #60	@ 0x3c
 8004a4e:	f85d fb04 	ldr.w	pc, [sp], #4

08004a52 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004a52:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004a58:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a5e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004a60:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a62:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004a64:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a66:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a68:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a6c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004a6e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a70:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a72:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a76:	f004 fb9b 	bl	80091b0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004a7a:	2800      	cmp	r0, #0
}
 8004a7c:	bf14      	ite	ne
 8004a7e:	f06f 0001 	mvnne.w	r0, #1
 8004a82:	2000      	moveq	r0, #0
 8004a84:	b00f      	add	sp, #60	@ 0x3c
 8004a86:	f85d fb04 	ldr.w	pc, [sp], #4

08004a8a <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004a8a:	b500      	push	{lr}
 8004a8c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004a8e:	2903      	cmp	r1, #3
 8004a90:	d80e      	bhi.n	8004ab0 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004a92:	e8df f001 	tbb	[pc, r1]
 8004a96:	2902      	.short	0x2902
 8004a98:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a9e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004aa0:	230e      	movs	r3, #14
 8004aa2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004aaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004aae:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004ab0:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004ab2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004ab6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004aba:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004abc:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004abe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004ac2:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ac4:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004ac6:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004aca:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004acc:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ace:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004ad0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ad4:	f004 fcbe 	bl	8009454 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004ad8:	2800      	cmp	r0, #0
}
 8004ada:	bf14      	ite	ne
 8004adc:	f06f 0005 	mvnne.w	r0, #5
 8004ae0:	2000      	moveq	r0, #0
 8004ae2:	b011      	add	sp, #68	@ 0x44
 8004ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aec:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004aee:	233d      	movs	r3, #61	@ 0x3d
 8004af0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004af6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004afc:	e7d7      	b.n	8004aae <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b02:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004b04:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004b06:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004b08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b0c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b0e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004b12:	e7cc      	b.n	8004aae <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b18:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004b1a:	23ed      	movs	r3, #237	@ 0xed
 8004b1c:	e7f3      	b.n	8004b06 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004b1e <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004b1e:	b500      	push	{lr}
 8004b20:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004b22:	2903      	cmp	r1, #3
 8004b24:	d80e      	bhi.n	8004b44 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004b26:	e8df f001 	tbb	[pc, r1]
 8004b2a:	2502      	.short	0x2502
 8004b2c:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b32:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004b34:	230c      	movs	r3, #12
 8004b36:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b42:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004b44:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b46:	466a      	mov	r2, sp
 8004b48:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004b4a:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b4c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004b50:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b56:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b58:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004b5c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b60:	f004 fc78 	bl	8009454 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004b64:	2800      	cmp	r0, #0
}
 8004b66:	bf14      	ite	ne
 8004b68:	f06f 0005 	mvnne.w	r0, #5
 8004b6c:	2000      	moveq	r0, #0
 8004b6e:	b011      	add	sp, #68	@ 0x44
 8004b70:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b78:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004b7a:	23bc      	movs	r3, #188	@ 0xbc
 8004b7c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004b7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b82:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004b84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b88:	e7db      	b.n	8004b42 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b8e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004b90:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004b92:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004b94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b98:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b9a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004b9e:	e7d0      	b.n	8004b42 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004ba0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ba4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004ba6:	23eb      	movs	r3, #235	@ 0xeb
 8004ba8:	e7f3      	b.n	8004b92 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004baa <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004baa:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bac:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004bb0:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bb2:	bf18      	it	ne
 8004bb4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004bb8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bba:	bf08      	it	eq
 8004bbc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bc0:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bc2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004bc4:	2366      	movs	r3, #102	@ 0x66
 8004bc6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004bc8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bca:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bce:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004bd0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bd2:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bd4:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bd8:	f004 faea 	bl	80091b0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004bdc:	2800      	cmp	r0, #0
}
 8004bde:	bf14      	ite	ne
 8004be0:	f06f 0001 	mvnne.w	r0, #1
 8004be4:	2000      	moveq	r0, #0
 8004be6:	b00f      	add	sp, #60	@ 0x3c
 8004be8:	f85d fb04 	ldr.w	pc, [sp], #4

08004bec <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bec:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004bf2:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bf4:	bf18      	it	ne
 8004bf6:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004bfa:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bfc:	bf08      	it	eq
 8004bfe:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c02:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c04:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004c06:	2399      	movs	r3, #153	@ 0x99
 8004c08:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c0a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c10:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004c12:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c14:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c16:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c1a:	f004 fac9 	bl	80091b0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004c1e:	2800      	cmp	r0, #0
}
 8004c20:	bf14      	ite	ne
 8004c22:	f06f 0001 	mvnne.w	r0, #1
 8004c26:	2000      	moveq	r0, #0
 8004c28:	b00f      	add	sp, #60	@ 0x3c
 8004c2a:	f85d fb04 	ldr.w	pc, [sp], #4

08004c2e <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004c2e:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c30:	6884      	ldr	r4, [r0, #8]
 8004c32:	8800      	ldrh	r0, [r0, #0]
 8004c34:	46a4      	mov	ip, r4
}
 8004c36:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c3a:	4760      	bx	ip

08004c3c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c3c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c3e:	6844      	ldr	r4, [r0, #4]
 8004c40:	8800      	ldrh	r0, [r0, #0]
 8004c42:	46a4      	mov	ip, r4
}
 8004c44:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c48:	4760      	bx	ip

08004c4a <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004c4a:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004c4c:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004c4e:	4604      	mov	r4, r0
 8004c50:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004c52:	4798      	blx	r3
 8004c54:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	4798      	blx	r3
 8004c5a:	1b83      	subs	r3, r0, r6
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	d3fa      	bcc.n	8004c56 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c64 <OTM8009A_Init>:
{
 8004c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f100 0510 	add.w	r5, r0, #16
{
 8004c6e:	4607      	mov	r7, r0
 8004c70:	460e      	mov	r6, r1
 8004c72:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c74:	4619      	mov	r1, r3
 8004c76:	4ade      	ldr	r2, [pc, #888]	@ (8004ff0 <OTM8009A_Init+0x38c>)
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 fb99 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c7e:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c82:	4adc      	ldr	r2, [pc, #880]	@ (8004ff4 <OTM8009A_Init+0x390>)
 8004c84:	21ff      	movs	r1, #255	@ 0xff
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 fb92 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c90:	4ad9      	ldr	r2, [pc, #868]	@ (8004ff8 <OTM8009A_Init+0x394>)
 8004c92:	4619      	mov	r1, r3
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 fb8b 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c9a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c9e:	4ad7      	ldr	r2, [pc, #860]	@ (8004ffc <OTM8009A_Init+0x398>)
 8004ca0:	21ff      	movs	r1, #255	@ 0xff
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 fb84 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ca8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004caa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004cac:	4ad2      	ldr	r2, [pc, #840]	@ (8004ff8 <OTM8009A_Init+0x394>)
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 fb7d 	bl	80053b0 <otm8009a_write_reg>
 8004cb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4ad1      	ldr	r2, [pc, #836]	@ (8005000 <OTM8009A_Init+0x39c>)
 8004cbc:	21c4      	movs	r1, #196	@ 0xc4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fb76 	bl	80053b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004cc4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004cc6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ffbe 	bl	8004c4a <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4acc      	ldr	r2, [pc, #816]	@ (8005004 <OTM8009A_Init+0x3a0>)
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f000 fb6b 	bl	80053b0 <otm8009a_write_reg>
 8004cda:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4aca      	ldr	r2, [pc, #808]	@ (8005008 <OTM8009A_Init+0x3a4>)
 8004ce0:	21c4      	movs	r1, #196	@ 0xc4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 fb64 	bl	80053b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004ce8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004cea:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff ffac 	bl	8004c4a <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4ac5      	ldr	r2, [pc, #788]	@ (800500c <OTM8009A_Init+0x3a8>)
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f000 fb59 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004cfe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004d00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004d02:	4ac3      	ldr	r2, [pc, #780]	@ (8005010 <OTM8009A_Init+0x3ac>)
 8004d04:	21c5      	movs	r1, #197	@ 0xc5
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fb52 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004d0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d10:	4ac0      	ldr	r2, [pc, #768]	@ (8005014 <OTM8009A_Init+0x3b0>)
 8004d12:	4619      	mov	r1, r3
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 fb4b 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d1a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d1e:	4abe      	ldr	r2, [pc, #760]	@ (8005018 <OTM8009A_Init+0x3b4>)
 8004d20:	21c5      	movs	r1, #197	@ 0xc5
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fb44 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d2c:	4abb      	ldr	r2, [pc, #748]	@ (800501c <OTM8009A_Init+0x3b8>)
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 fb3d 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d3a:	4ab9      	ldr	r2, [pc, #740]	@ (8005020 <OTM8009A_Init+0x3bc>)
 8004d3c:	21c0      	movs	r1, #192	@ 0xc0
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fb36 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d48:	4aa9      	ldr	r2, [pc, #676]	@ (8004ff0 <OTM8009A_Init+0x38c>)
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 fb2f 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d52:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d56:	4ab3      	ldr	r2, [pc, #716]	@ (8005024 <OTM8009A_Init+0x3c0>)
 8004d58:	21d9      	movs	r1, #217	@ 0xd9
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 fb28 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d64:	4ab0      	ldr	r2, [pc, #704]	@ (8005028 <OTM8009A_Init+0x3c4>)
 8004d66:	4619      	mov	r1, r3
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f000 fb21 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d72:	4aae      	ldr	r2, [pc, #696]	@ (800502c <OTM8009A_Init+0x3c8>)
 8004d74:	21c1      	movs	r1, #193	@ 0xc1
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fb1a 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d80:	4aab      	ldr	r2, [pc, #684]	@ (8005030 <OTM8009A_Init+0x3cc>)
 8004d82:	4619      	mov	r1, r3
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 fb13 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d8e:	4aa9      	ldr	r2, [pc, #676]	@ (8005034 <OTM8009A_Init+0x3d0>)
 8004d90:	21c5      	movs	r1, #197	@ 0xc5
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 fb0c 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d9c:	4aa6      	ldr	r2, [pc, #664]	@ (8005038 <OTM8009A_Init+0x3d4>)
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 fb05 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004da6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004da8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004daa:	4a9b      	ldr	r2, [pc, #620]	@ (8005018 <OTM8009A_Init+0x3b4>)
 8004dac:	21c5      	movs	r1, #197	@ 0xc5
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 fafe 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004db4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004db6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004db8:	4a8d      	ldr	r2, [pc, #564]	@ (8004ff0 <OTM8009A_Init+0x38c>)
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 faf7 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dc2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800503c <OTM8009A_Init+0x3d8>)
 8004dc8:	21d8      	movs	r1, #216	@ 0xd8
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 faf0 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004dd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004dd4:	4a9a      	ldr	r2, [pc, #616]	@ (8005040 <OTM8009A_Init+0x3dc>)
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f000 fae9 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004dde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004de0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004de2:	4a98      	ldr	r2, [pc, #608]	@ (8005044 <OTM8009A_Init+0x3e0>)
 8004de4:	21c5      	movs	r1, #197	@ 0xc5
 8004de6:	4628      	mov	r0, r5
 8004de8:	f000 fae2 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004dec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004dee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004df0:	4a95      	ldr	r2, [pc, #596]	@ (8005048 <OTM8009A_Init+0x3e4>)
 8004df2:	4619      	mov	r1, r3
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 fadb 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004dfa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004dfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004dfe:	4a93      	ldr	r2, [pc, #588]	@ (800504c <OTM8009A_Init+0x3e8>)
 8004e00:	21c0      	movs	r1, #192	@ 0xc0
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 fad4 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004e0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e0c:	4a90      	ldr	r2, [pc, #576]	@ (8005050 <OTM8009A_Init+0x3ec>)
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 facd 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e1a:	4a8e      	ldr	r2, [pc, #568]	@ (8005054 <OTM8009A_Init+0x3f0>)
 8004e1c:	21c5      	movs	r1, #197	@ 0xc5
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 fac6 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e28:	4a8b      	ldr	r2, [pc, #556]	@ (8005058 <OTM8009A_Init+0x3f4>)
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 fabf 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e36:	4a89      	ldr	r2, [pc, #548]	@ (800505c <OTM8009A_Init+0x3f8>)
 8004e38:	21c4      	movs	r1, #196	@ 0xc4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fab8 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e44:	4a78      	ldr	r2, [pc, #480]	@ (8005028 <OTM8009A_Init+0x3c4>)
 8004e46:	4619      	mov	r1, r3
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fab1 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e52:	4a83      	ldr	r2, [pc, #524]	@ (8005060 <OTM8009A_Init+0x3fc>)
 8004e54:	21c1      	movs	r1, #193	@ 0xc1
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 faaa 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e60:	4a80      	ldr	r2, [pc, #512]	@ (8005064 <OTM8009A_Init+0x400>)
 8004e62:	4619      	mov	r1, r3
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 faa3 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e6a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005068 <OTM8009A_Init+0x404>)
 8004e70:	21b3      	movs	r1, #179	@ 0xb3
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fa9c 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff8 <OTM8009A_Init+0x394>)
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 fa95 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e86:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e8a:	4a78      	ldr	r2, [pc, #480]	@ (800506c <OTM8009A_Init+0x408>)
 8004e8c:	21ce      	movs	r1, #206	@ 0xce
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fa8e 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e98:	4a75      	ldr	r2, [pc, #468]	@ (8005070 <OTM8009A_Init+0x40c>)
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fa87 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004ea2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ea4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004ea6:	4a73      	ldr	r2, [pc, #460]	@ (8005074 <OTM8009A_Init+0x410>)
 8004ea8:	21ce      	movs	r1, #206	@ 0xce
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 fa80 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004eb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eb4:	4a70      	ldr	r2, [pc, #448]	@ (8005078 <OTM8009A_Init+0x414>)
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 fa79 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ebe:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ec0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800507c <OTM8009A_Init+0x418>)
 8004ec4:	21ce      	movs	r1, #206	@ 0xce
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fa72 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ecc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ece:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8005080 <OTM8009A_Init+0x41c>)
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 fa6b 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004eda:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004edc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ede:	4a69      	ldr	r2, [pc, #420]	@ (8005084 <OTM8009A_Init+0x420>)
 8004ee0:	21cf      	movs	r1, #207	@ 0xcf
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 fa64 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ee8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004eea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004eec:	4a66      	ldr	r2, [pc, #408]	@ (8005088 <OTM8009A_Init+0x424>)
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 fa5d 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004ef6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ef8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004efa:	4a64      	ldr	r2, [pc, #400]	@ (800508c <OTM8009A_Init+0x428>)
 8004efc:	21cf      	movs	r1, #207	@ 0xcf
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fa56 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004f06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f08:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff8 <OTM8009A_Init+0x394>)
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fa4f 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f12:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f16:	4a5e      	ldr	r2, [pc, #376]	@ (8005090 <OTM8009A_Init+0x42c>)
 8004f18:	21cb      	movs	r1, #203	@ 0xcb
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 fa48 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f24:	4a5b      	ldr	r2, [pc, #364]	@ (8005094 <OTM8009A_Init+0x430>)
 8004f26:	4619      	mov	r1, r3
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 fa41 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f2e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f32:	4a59      	ldr	r2, [pc, #356]	@ (8005098 <OTM8009A_Init+0x434>)
 8004f34:	21cb      	movs	r1, #203	@ 0xcb
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 fa3a 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f40:	4a4b      	ldr	r2, [pc, #300]	@ (8005070 <OTM8009A_Init+0x40c>)
 8004f42:	4619      	mov	r1, r3
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 fa33 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f4a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f4e:	4a53      	ldr	r2, [pc, #332]	@ (800509c <OTM8009A_Init+0x438>)
 8004f50:	21cb      	movs	r1, #203	@ 0xcb
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 fa2c 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f5c:	4a46      	ldr	r2, [pc, #280]	@ (8005078 <OTM8009A_Init+0x414>)
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fa25 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f66:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80050a0 <OTM8009A_Init+0x43c>)
 8004f6c:	21cb      	movs	r1, #203	@ 0xcb
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 fa1e 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f78:	4a41      	ldr	r2, [pc, #260]	@ (8005080 <OTM8009A_Init+0x41c>)
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fa17 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f82:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f86:	4a47      	ldr	r2, [pc, #284]	@ (80050a4 <OTM8009A_Init+0x440>)
 8004f88:	21cb      	movs	r1, #203	@ 0xcb
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fa10 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f94:	4a3c      	ldr	r2, [pc, #240]	@ (8005088 <OTM8009A_Init+0x424>)
 8004f96:	4619      	mov	r1, r3
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 fa09 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f9e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fa0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fa2:	4a41      	ldr	r2, [pc, #260]	@ (80050a8 <OTM8009A_Init+0x444>)
 8004fa4:	21cb      	movs	r1, #203	@ 0xcb
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fa02 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80050ac <OTM8009A_Init+0x448>)
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 f9fb 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80050b0 <OTM8009A_Init+0x44c>)
 8004fc0:	21cb      	movs	r1, #203	@ 0xcb
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f9f4 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fcc:	4a39      	ldr	r2, [pc, #228]	@ (80050b4 <OTM8009A_Init+0x450>)
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 f9ed 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fd6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fda:	4a37      	ldr	r2, [pc, #220]	@ (80050b8 <OTM8009A_Init+0x454>)
 8004fdc:	21cb      	movs	r1, #203	@ 0xcb
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f9e6 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fe4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fe6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fe8:	4a03      	ldr	r2, [pc, #12]	@ (8004ff8 <OTM8009A_Init+0x394>)
 8004fea:	4619      	mov	r1, r3
 8004fec:	4628      	mov	r0, r5
 8004fee:	e065      	b.n	80050bc <OTM8009A_Init+0x458>
 8004ff0:	08025951 	.word	0x08025951
 8004ff4:	0802594d 	.word	0x0802594d
 8004ff8:	08025952 	.word	0x08025952
 8004ffc:	0802594b 	.word	0x0802594b
 8005000:	08025953 	.word	0x08025953
 8005004:	08025954 	.word	0x08025954
 8005008:	08025955 	.word	0x08025955
 800500c:	08025956 	.word	0x08025956
 8005010:	08025957 	.word	0x08025957
 8005014:	08025958 	.word	0x08025958
 8005018:	08025959 	.word	0x08025959
 800501c:	0802595a 	.word	0x0802595a
 8005020:	0802595b 	.word	0x0802595b
 8005024:	0802595c 	.word	0x0802595c
 8005028:	0802595f 	.word	0x0802595f
 800502c:	08025960 	.word	0x08025960
 8005030:	08025961 	.word	0x08025961
 8005034:	08025962 	.word	0x08025962
 8005038:	08025963 	.word	0x08025963
 800503c:	08025949 	.word	0x08025949
 8005040:	08025964 	.word	0x08025964
 8005044:	08025965 	.word	0x08025965
 8005048:	08025966 	.word	0x08025966
 800504c:	08025967 	.word	0x08025967
 8005050:	08025968 	.word	0x08025968
 8005054:	08025969 	.word	0x08025969
 8005058:	0802595d 	.word	0x0802595d
 800505c:	0802596a 	.word	0x0802596a
 8005060:	0802596b 	.word	0x0802596b
 8005064:	0802596c 	.word	0x0802596c
 8005068:	08025947 	.word	0x08025947
 800506c:	08025941 	.word	0x08025941
 8005070:	0802596d 	.word	0x0802596d
 8005074:	08025933 	.word	0x08025933
 8005078:	0802596e 	.word	0x0802596e
 800507c:	08025925 	.word	0x08025925
 8005080:	0802596f 	.word	0x0802596f
 8005084:	0802591b 	.word	0x0802591b
 8005088:	08025970 	.word	0x08025970
 800508c:	0802597d 	.word	0x0802597d
 8005090:	08025911 	.word	0x08025911
 8005094:	08025971 	.word	0x08025971
 8005098:	08025902 	.word	0x08025902
 800509c:	080258f3 	.word	0x080258f3
 80050a0:	080258e9 	.word	0x080258e9
 80050a4:	080258da 	.word	0x080258da
 80050a8:	080258cb 	.word	0x080258cb
 80050ac:	08025972 	.word	0x08025972
 80050b0:	080258c1 	.word	0x080258c1
 80050b4:	08025973 	.word	0x08025973
 80050b8:	080258b7 	.word	0x080258b7
 80050bc:	f000 f978 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050c0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050c4:	4a8e      	ldr	r2, [pc, #568]	@ (8005300 <OTM8009A_Init+0x69c>)
 80050c6:	21cc      	movs	r1, #204	@ 0xcc
 80050c8:	4628      	mov	r0, r5
 80050ca:	f000 f971 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050d2:	4a8c      	ldr	r2, [pc, #560]	@ (8005304 <OTM8009A_Init+0x6a0>)
 80050d4:	4619      	mov	r1, r3
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 f96a 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050dc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050e0:	4a89      	ldr	r2, [pc, #548]	@ (8005308 <OTM8009A_Init+0x6a4>)
 80050e2:	21cc      	movs	r1, #204	@ 0xcc
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f963 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050ee:	4a87      	ldr	r2, [pc, #540]	@ (800530c <OTM8009A_Init+0x6a8>)
 80050f0:	4619      	mov	r1, r3
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f95c 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050f8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050fc:	4a84      	ldr	r2, [pc, #528]	@ (8005310 <OTM8009A_Init+0x6ac>)
 80050fe:	21cc      	movs	r1, #204	@ 0xcc
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f955 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005106:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005108:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800510a:	4a82      	ldr	r2, [pc, #520]	@ (8005314 <OTM8009A_Init+0x6b0>)
 800510c:	4619      	mov	r1, r3
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f94e 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005114:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005116:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005118:	4a7f      	ldr	r2, [pc, #508]	@ (8005318 <OTM8009A_Init+0x6b4>)
 800511a:	21cc      	movs	r1, #204	@ 0xcc
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f947 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005122:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005124:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005126:	4a7d      	ldr	r2, [pc, #500]	@ (800531c <OTM8009A_Init+0x6b8>)
 8005128:	4619      	mov	r1, r3
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f940 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005130:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005132:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005134:	4a7a      	ldr	r2, [pc, #488]	@ (8005320 <OTM8009A_Init+0x6bc>)
 8005136:	21cc      	movs	r1, #204	@ 0xcc
 8005138:	4628      	mov	r0, r5
 800513a:	f000 f939 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800513e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005140:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005142:	4a78      	ldr	r2, [pc, #480]	@ (8005324 <OTM8009A_Init+0x6c0>)
 8005144:	4619      	mov	r1, r3
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f932 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800514c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800514e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005150:	4a75      	ldr	r2, [pc, #468]	@ (8005328 <OTM8009A_Init+0x6c4>)
 8005152:	21cc      	movs	r1, #204	@ 0xcc
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f92b 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800515a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800515c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800515e:	4a73      	ldr	r2, [pc, #460]	@ (800532c <OTM8009A_Init+0x6c8>)
 8005160:	4619      	mov	r1, r3
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f924 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005168:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800516a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800516c:	4a70      	ldr	r2, [pc, #448]	@ (8005330 <OTM8009A_Init+0x6cc>)
 800516e:	21c5      	movs	r1, #197	@ 0xc5
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f91d 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005176:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005178:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800517a:	4a6e      	ldr	r2, [pc, #440]	@ (8005334 <OTM8009A_Init+0x6d0>)
 800517c:	4619      	mov	r1, r3
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f916 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005184:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005186:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005188:	4a6b      	ldr	r2, [pc, #428]	@ (8005338 <OTM8009A_Init+0x6d4>)
 800518a:	21f5      	movs	r1, #245	@ 0xf5
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f90f 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005192:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005194:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005196:	4a69      	ldr	r2, [pc, #420]	@ (800533c <OTM8009A_Init+0x6d8>)
 8005198:	4619      	mov	r1, r3
 800519a:	4628      	mov	r0, r5
 800519c:	f000 f908 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80051a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80051a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80051a4:	4a66      	ldr	r2, [pc, #408]	@ (8005340 <OTM8009A_Init+0x6dc>)
 80051a6:	21c6      	movs	r1, #198	@ 0xc6
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 f901 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80051b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051b2:	4a64      	ldr	r2, [pc, #400]	@ (8005344 <OTM8009A_Init+0x6e0>)
 80051b4:	4619      	mov	r1, r3
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f8fa 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051bc:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051c0:	4a61      	ldr	r2, [pc, #388]	@ (8005348 <OTM8009A_Init+0x6e4>)
 80051c2:	21ff      	movs	r1, #255	@ 0xff
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 f8f3 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005344 <OTM8009A_Init+0x6e0>)
 80051d0:	4619      	mov	r1, r3
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f8ec 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051dc:	4a59      	ldr	r2, [pc, #356]	@ (8005344 <OTM8009A_Init+0x6e0>)
 80051de:	4619      	mov	r1, r3
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f8e5 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051e6:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051ea:	4a58      	ldr	r2, [pc, #352]	@ (800534c <OTM8009A_Init+0x6e8>)
 80051ec:	21e1      	movs	r1, #225	@ 0xe1
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f8de 	bl	80053b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051f8:	4a52      	ldr	r2, [pc, #328]	@ (8005344 <OTM8009A_Init+0x6e0>)
 80051fa:	4619      	mov	r1, r3
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f8d7 	bl	80053b0 <otm8009a_write_reg>
 8005202:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005204:	2310      	movs	r3, #16
 8005206:	4a52      	ldr	r2, [pc, #328]	@ (8005350 <OTM8009A_Init+0x6ec>)
 8005208:	21e2      	movs	r1, #226	@ 0xe2
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f8d0 	bl	80053b0 <otm8009a_write_reg>
 8005210:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005212:	2300      	movs	r3, #0
 8005214:	4a4f      	ldr	r2, [pc, #316]	@ (8005354 <OTM8009A_Init+0x6f0>)
 8005216:	2111      	movs	r1, #17
 8005218:	4628      	mov	r0, r5
 800521a:	f000 f8c9 	bl	80053b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800521e:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005220:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005222:	4638      	mov	r0, r7
 8005224:	f7ff fd11 	bl	8004c4a <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005228:	4f4b      	ldr	r7, [pc, #300]	@ (8005358 <OTM8009A_Init+0x6f4>)
 800522a:	2e00      	cmp	r6, #0
 800522c:	d061      	beq.n	80052f2 <OTM8009A_Init+0x68e>
 800522e:	2e02      	cmp	r6, #2
 8005230:	d107      	bne.n	8005242 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005232:	2300      	movs	r3, #0
 8005234:	4a49      	ldr	r2, [pc, #292]	@ (800535c <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005236:	213a      	movs	r1, #58	@ 0x3a
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f8b9 	bl	80053b0 <otm8009a_write_reg>
 800523e:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005240:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005242:	f1b8 0f01 	cmp.w	r8, #1
 8005246:	d157      	bne.n	80052f8 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005248:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800524a:	f10d 0207 	add.w	r2, sp, #7
 800524e:	2136      	movs	r1, #54	@ 0x36
 8005250:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005252:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005256:	2300      	movs	r3, #0
 8005258:	f000 f8aa 	bl	80053b0 <otm8009a_write_reg>
 800525c:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800525e:	2304      	movs	r3, #4
 8005260:	4a3f      	ldr	r2, [pc, #252]	@ (8005360 <OTM8009A_Init+0x6fc>)
 8005262:	212a      	movs	r1, #42	@ 0x2a
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f8a3 	bl	80053b0 <otm8009a_write_reg>
 800526a:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800526c:	2304      	movs	r3, #4
 800526e:	4a3d      	ldr	r2, [pc, #244]	@ (8005364 <OTM8009A_Init+0x700>)
 8005270:	212b      	movs	r1, #43	@ 0x2b
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f89c 	bl	80053b0 <otm8009a_write_reg>
 8005278:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800527a:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800527e:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005280:	2300      	movs	r3, #0
 8005282:	4a39      	ldr	r2, [pc, #228]	@ (8005368 <OTM8009A_Init+0x704>)
 8005284:	2151      	movs	r1, #81	@ 0x51
 8005286:	4628      	mov	r0, r5
 8005288:	f000 f892 	bl	80053b0 <otm8009a_write_reg>
 800528c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800528e:	4633      	mov	r3, r6
 8005290:	4a36      	ldr	r2, [pc, #216]	@ (800536c <OTM8009A_Init+0x708>)
 8005292:	2153      	movs	r1, #83	@ 0x53
 8005294:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005296:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005298:	f000 f88a 	bl	80053b0 <otm8009a_write_reg>
 800529c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800529e:	4633      	mov	r3, r6
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <OTM8009A_Init+0x70c>)
 80052a2:	2155      	movs	r1, #85	@ 0x55
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 f883 	bl	80053b0 <otm8009a_write_reg>
 80052aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80052ac:	4633      	mov	r3, r6
 80052ae:	4a31      	ldr	r2, [pc, #196]	@ (8005374 <OTM8009A_Init+0x710>)
 80052b0:	215e      	movs	r1, #94	@ 0x5e
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f87c 	bl	80053b0 <otm8009a_write_reg>
 80052b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80052ba:	4633      	mov	r3, r6
 80052bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005378 <OTM8009A_Init+0x714>)
 80052be:	2129      	movs	r1, #41	@ 0x29
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f875 	bl	80053b0 <otm8009a_write_reg>
 80052c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c8:	4633      	mov	r3, r6
 80052ca:	4631      	mov	r1, r6
 80052cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <OTM8009A_Init+0x6e0>)
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 f86e 	bl	80053b0 <otm8009a_write_reg>
 80052d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80052d6:	4633      	mov	r3, r6
 80052d8:	4a28      	ldr	r2, [pc, #160]	@ (800537c <OTM8009A_Init+0x718>)
 80052da:	212c      	movs	r1, #44	@ 0x2c
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f867 	bl	80053b0 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80052e2:	42c4      	cmn	r4, r0
}
 80052e4:	bf14      	ite	ne
 80052e6:	f04f 30ff 	movne.w	r0, #4294967295
 80052ea:	4630      	moveq	r0, r6
 80052ec:	b002      	add	sp, #8
 80052ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80052f2:	4633      	mov	r3, r6
 80052f4:	4a22      	ldr	r2, [pc, #136]	@ (8005380 <OTM8009A_Init+0x71c>)
 80052f6:	e79e      	b.n	8005236 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80052f8:	2300      	movs	r3, #0
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	e7bf      	b.n	800527e <OTM8009A_Init+0x61a>
 80052fe:	bf00      	nop
 8005300:	080258ad 	.word	0x080258ad
 8005304:	08025971 	.word	0x08025971
 8005308:	0802589e 	.word	0x0802589e
 800530c:	0802596d 	.word	0x0802596d
 8005310:	0802588f 	.word	0x0802588f
 8005314:	0802596e 	.word	0x0802596e
 8005318:	08025885 	.word	0x08025885
 800531c:	0802596f 	.word	0x0802596f
 8005320:	08025876 	.word	0x08025876
 8005324:	08025970 	.word	0x08025970
 8005328:	08025867 	.word	0x08025867
 800532c:	0802595d 	.word	0x0802595d
 8005330:	0802597e 	.word	0x0802597e
 8005334:	0802597f 	.word	0x0802597f
 8005338:	08025980 	.word	0x08025980
 800533c:	08025981 	.word	0x08025981
 8005340:	08025982 	.word	0x08025982
 8005344:	08025951 	.word	0x08025951
 8005348:	08025864 	.word	0x08025864
 800534c:	08025854 	.word	0x08025854
 8005350:	08025844 	.word	0x08025844
 8005354:	08025974 	.word	0x08025974
 8005358:	2400e4a8 	.word	0x2400e4a8
 800535c:	08025975 	.word	0x08025975
 8005360:	08025987 	.word	0x08025987
 8005364:	08025983 	.word	0x08025983
 8005368:	08025977 	.word	0x08025977
 800536c:	08025978 	.word	0x08025978
 8005370:	08025979 	.word	0x08025979
 8005374:	0802597a 	.word	0x0802597a
 8005378:	0802597b 	.word	0x0802597b
 800537c:	0802597c 	.word	0x0802597c
 8005380:	08025976 	.word	0x08025976

08005384 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005384:	b160      	cbz	r0, 80053a0 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005386:	684b      	ldr	r3, [r1, #4]
 8005388:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800538a:	688b      	ldr	r3, [r1, #8]
 800538c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800538e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005390:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005392:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005394:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <OTM8009A_RegisterBusIO+0x24>)
 8005396:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005398:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <OTM8009A_RegisterBusIO+0x28>)
 800539a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800539c:	2000      	movs	r0, #0
 800539e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	08004c2f 	.word	0x08004c2f
 80053ac:	08004c3d 	.word	0x08004c3d

080053b0 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80053b0:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80053b2:	6804      	ldr	r4, [r0, #0]
 80053b4:	6880      	ldr	r0, [r0, #8]
 80053b6:	46a4      	mov	ip, r4
}
 80053b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80053bc:	4760      	bx	ip
	...

080053c0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80053c0:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <BSP_I2C4_DeInit+0x44>)
{
 80053c2:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80053ca:	b10b      	cbz	r3, 80053d0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80053cc:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80053ce:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80053d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053d4:	480c      	ldr	r0, [pc, #48]	@ (8005408 <BSP_I2C4_DeInit+0x48>)
 80053d6:	f001 fe3d 	bl	8007054 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80053da:	480b      	ldr	r0, [pc, #44]	@ (8005408 <BSP_I2C4_DeInit+0x48>)
 80053dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053e0:	f001 fe38 	bl	8007054 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80053e4:	4a09      	ldr	r2, [pc, #36]	@ (800540c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80053e6:	480a      	ldr	r0, [pc, #40]	@ (8005410 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80053e8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80053ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80053f4:	f002 f87e 	bl	80074f4 <HAL_I2C_DeInit>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d0e7      	beq.n	80053cc <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80053fc:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005400:	e7e5      	b.n	80053ce <BSP_I2C4_DeInit+0xe>
 8005402:	bf00      	nop
 8005404:	2400ef0c 	.word	0x2400ef0c
 8005408:	58020c00 	.word	0x58020c00
 800540c:	58024400 	.word	0x58024400
 8005410:	2400e4b4 	.word	0x2400e4b4

08005414 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005414:	2300      	movs	r3, #0
 8005416:	2201      	movs	r2, #1
{
 8005418:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800541a:	6041      	str	r1, [r0, #4]
{
 800541c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800541e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005420:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005424:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005428:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800542c:	f002 f80c 	bl	8007448 <HAL_I2C_Init>
 8005430:	4601      	mov	r1, r0
 8005432:	b108      	cbz	r0, 8005438 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005434:	2001      	movs	r0, #1
}
 8005436:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005438:	4620      	mov	r0, r4
 800543a:	f002 fa32 	bl	80078a2 <HAL_I2CEx_ConfigAnalogFilter>
 800543e:	4601      	mov	r1, r0
 8005440:	2800      	cmp	r0, #0
 8005442:	d1f7      	bne.n	8005434 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005444:	4620      	mov	r0, r4
 8005446:	f002 fa52 	bl	80078ee <HAL_I2CEx_ConfigDigitalFilter>
 800544a:	3800      	subs	r0, #0
 800544c:	bf18      	it	ne
 800544e:	2001      	movne	r0, #1
 8005450:	e7f1      	b.n	8005436 <MX_I2C4_Init+0x22>
	...

08005454 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005454:	4ba1      	ldr	r3, [pc, #644]	@ (80056dc <BSP_I2C4_Init+0x288>)
 8005456:	48a2      	ldr	r0, [pc, #648]	@ (80056e0 <BSP_I2C4_Init+0x28c>)
{
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800545c:	6003      	str	r3, [r0, #0]
{
 800545e:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8005460:	4ba0      	ldr	r3, [pc, #640]	@ (80056e4 <BSP_I2C4_Init+0x290>)
 8005462:	681c      	ldr	r4, [r3, #0]
 8005464:	b11c      	cbz	r4, 800546e <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005466:	2000      	movs	r0, #0
}
 8005468:	b013      	add	sp, #76	@ 0x4c
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005472:	f002 fa11 	bl	8007898 <HAL_I2C_GetState>
 8005476:	2800      	cmp	r0, #0
 8005478:	d1f5      	bne.n	8005466 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800547a:	4d9b      	ldr	r5, [pc, #620]	@ (80056e8 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800547c:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005480:	2702      	movs	r7, #2
 8005482:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005484:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005488:	a90d      	add	r1, sp, #52	@ 0x34
 800548a:	4898      	ldr	r0, [pc, #608]	@ (80056ec <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800548c:	f043 0308 	orr.w	r3, r3, #8
 8005490:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005494:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	930a      	str	r3, [sp, #40]	@ 0x28
 800549e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80054a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80054ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80054b0:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80054be:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054c2:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80054c6:	f001 fcdd 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80054ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80054ce:	a90d      	add	r1, sp, #52	@ 0x34
 80054d0:	4886      	ldr	r0, [pc, #536]	@ (80056ec <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80054d2:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054d4:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054d8:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80054dc:	f001 fcd2 	bl	8006e84 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80054e0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80054e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e8:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80054ec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80054f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80054f8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80054fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005500:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005504:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005510:	f004 fcd8 	bl	8009ec4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005514:	2800      	cmp	r0, #0
 8005516:	d06f      	beq.n	80055f8 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005518:	4b75      	ldr	r3, [pc, #468]	@ (80056f0 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 800551a:	4622      	mov	r2, r4
 800551c:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800551e:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005522:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005526:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80056f8 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800552a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800552e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005532:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8005536:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005538:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800553c:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005540:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005544:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005548:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800554a:	4b6a      	ldr	r3, [pc, #424]	@ (80056f4 <BSP_I2C4_Init+0x2a0>)
 800554c:	681b      	ldr	r3, [r3, #0]
{
 800554e:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005550:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005554:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005558:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800555c:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005560:	d35d      	bcc.n	800561e <BSP_I2C4_Init+0x1ca>
 8005562:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005564:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005566:	9d00      	ldr	r5, [sp, #0]
 8005568:	42bd      	cmp	r5, r7
 800556a:	d852      	bhi.n	8005612 <BSP_I2C4_Init+0x1be>
 800556c:	42be      	cmp	r6, r7
 800556e:	d350      	bcc.n	8005612 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8005570:	4591      	cmp	r9, r2
 8005572:	d04e      	beq.n	8005612 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005574:	2514      	movs	r5, #20
 8005576:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 800557a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800557c:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800557e:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005582:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005584:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005588:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800558c:	d93e      	bls.n	800560c <BSP_I2C4_Init+0x1b8>
 800558e:	4a59      	ldr	r2, [pc, #356]	@ (80056f4 <BSP_I2C4_Init+0x2a0>)
 8005590:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005592:	4b58      	ldr	r3, [pc, #352]	@ (80056f4 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005594:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	4956      	ldr	r1, [pc, #344]	@ (80056f8 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800559e:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80055a0:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80055a2:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80055a4:	0043      	lsls	r3, r0, #1
 80055a6:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80055aa:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80055ae:	f10b 0b01 	add.w	fp, fp, #1
 80055b2:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 80055b6:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80055ba:	9508      	str	r5, [sp, #32]
 80055bc:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80055be:	9b05      	ldr	r3, [sp, #20]
 80055c0:	429f      	cmp	r7, r3
 80055c2:	d138      	bne.n	8005636 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c8:	d816      	bhi.n	80055f8 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055ca:	2114      	movs	r1, #20
 80055cc:	9a01      	ldr	r2, [sp, #4]
 80055ce:	4b4a      	ldr	r3, [pc, #296]	@ (80056f8 <BSP_I2C4_Init+0x2a4>)
 80055d0:	434a      	muls	r2, r1
 80055d2:	1899      	adds	r1, r3, r2
 80055d4:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80055d6:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055d8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80055dc:	684b      	ldr	r3, [r1, #4]
 80055de:	051b      	lsls	r3, r3, #20
 80055e0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055e4:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80055e6:	688b      	ldr	r3, [r1, #8]
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055ee:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80055f0:	68cb      	ldr	r3, [r1, #12]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055f6:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80055f8:	4621      	mov	r1, r4
 80055fa:	4839      	ldr	r0, [pc, #228]	@ (80056e0 <BSP_I2C4_Init+0x28c>)
 80055fc:	f7ff ff0a 	bl	8005414 <MX_I2C4_Init>
 8005600:	2800      	cmp	r0, #0
 8005602:	f43f af30 	beq.w	8005466 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8005606:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800560a:	e72d      	b.n	8005468 <BSP_I2C4_Init+0x14>
 800560c:	4691      	mov	r9, r2
 800560e:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005612:	f10e 0e01 	add.w	lr, lr, #1
 8005616:	440f      	add	r7, r1
 8005618:	f1be 0f10 	cmp.w	lr, #16
 800561c:	d1a3      	bne.n	8005566 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800561e:	f1bc 0f10 	cmp.w	ip, #16
 8005622:	4488      	add	r8, r1
 8005624:	d196      	bne.n	8005554 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005626:	3201      	adds	r2, #1
 8005628:	4401      	add	r1, r0
 800562a:	2a10      	cmp	r2, #16
 800562c:	d18f      	bne.n	800554e <BSP_I2C4_Init+0xfa>
 800562e:	f1ba 0f00 	cmp.w	sl, #0
 8005632:	d1ac      	bne.n	800558e <BSP_I2C4_Init+0x13a>
 8005634:	e7ad      	b.n	8005592 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005636:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005638:	f04f 0c00 	mov.w	ip, #0
 800563c:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800563e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005642:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005644:	441d      	add	r5, r3
 8005646:	441e      	add	r6, r3
 8005648:	9503      	str	r5, [sp, #12]
 800564a:	ebab 0503 	sub.w	r5, fp, r3
 800564e:	9607      	str	r6, [sp, #28]
 8005650:	006d      	lsls	r5, r5, #1
 8005652:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005654:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005656:	f240 5214 	movw	r2, #1300	@ 0x514
 800565a:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800565e:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005662:	4295      	cmp	r5, r2
 8005664:	d92f      	bls.n	80056c6 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005666:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800566a:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800566e:	d22a      	bcs.n	80056c6 <BSP_I2C4_Init+0x272>
 8005670:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005672:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005676:	f8dd 9000 	ldr.w	r9, [sp]
 800567a:	442e      	add	r6, r5
 800567c:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005680:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005684:	f240 4212 	movw	r2, #1042	@ 0x412
 8005688:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800568c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005690:	4592      	cmp	sl, r2
 8005692:	d811      	bhi.n	80056b8 <BSP_I2C4_Init+0x264>
 8005694:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005698:	d30e      	bcc.n	80056b8 <BSP_I2C4_Init+0x264>
 800569a:	4580      	cmp	r8, r0
 800569c:	d90c      	bls.n	80056b8 <BSP_I2C4_Init+0x264>
              error = -error;
 800569e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80056a2:	bf28      	it	cs
 80056a4:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80056a6:	9a02      	ldr	r2, [sp, #8]
 80056a8:	4592      	cmp	sl, r2
 80056aa:	d205      	bcs.n	80056b8 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80056ac:	9a04      	ldr	r2, [sp, #16]
 80056ae:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80056b0:	9a06      	ldr	r2, [sp, #24]
 80056b2:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80056b6:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80056b8:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80056bc:	4498      	add	r8, r3
 80056be:	441e      	add	r6, r3
 80056c0:	eba9 0903 	sub.w	r9, r9, r3
 80056c4:	d1dc      	bne.n	8005680 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80056c6:	9a00      	ldr	r2, [sp, #0]
 80056c8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80056cc:	441d      	add	r5, r3
 80056ce:	eba2 0203 	sub.w	r2, r2, r3
 80056d2:	9200      	str	r2, [sp, #0]
 80056d4:	d1bf      	bne.n	8005656 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056d6:	3701      	adds	r7, #1
 80056d8:	3114      	adds	r1, #20
 80056da:	e770      	b.n	80055be <BSP_I2C4_Init+0x16a>
 80056dc:	58001c00 	.word	0x58001c00
 80056e0:	2400e4b4 	.word	0x2400e4b4
 80056e4:	2400ef0c 	.word	0x2400ef0c
 80056e8:	58024400 	.word	0x58024400
 80056ec:	58020c00 	.word	0x58020c00
 80056f0:	3b9aca00 	.word	0x3b9aca00
 80056f4:	2400e508 	.word	0x2400e508
 80056f8:	2400e50c 	.word	0x2400e50c

080056fc <BSP_I2C4_WriteReg>:
{
 80056fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80056fe:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005702:	9200      	str	r2, [sp, #0]
 8005704:	460a      	mov	r2, r1
 8005706:	4601      	mov	r1, r0
 8005708:	4808      	ldr	r0, [pc, #32]	@ (800572c <BSP_I2C4_WriteReg+0x30>)
 800570a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800570e:	2301      	movs	r3, #1
 8005710:	f001 ff0a 	bl	8007528 <HAL_I2C_Mem_Write>
 8005714:	b140      	cbz	r0, 8005728 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005716:	4805      	ldr	r0, [pc, #20]	@ (800572c <BSP_I2C4_WriteReg+0x30>)
 8005718:	f002 f8c1 	bl	800789e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800571c:	2804      	cmp	r0, #4
 800571e:	bf14      	ite	ne
 8005720:	f06f 0003 	mvnne.w	r0, #3
 8005724:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005728:	b004      	add	sp, #16
 800572a:	bd10      	pop	{r4, pc}
 800572c:	2400e4b4 	.word	0x2400e4b4

08005730 <BSP_I2C4_ReadReg>:
{
 8005730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005732:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005736:	9200      	str	r2, [sp, #0]
 8005738:	460a      	mov	r2, r1
 800573a:	4601      	mov	r1, r0
 800573c:	4808      	ldr	r0, [pc, #32]	@ (8005760 <BSP_I2C4_ReadReg+0x30>)
 800573e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005742:	2301      	movs	r3, #1
 8005744:	f001 ffca 	bl	80076dc <HAL_I2C_Mem_Read>
 8005748:	b140      	cbz	r0, 800575c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <BSP_I2C4_ReadReg+0x30>)
 800574c:	f002 f8a7 	bl	800789e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005750:	2804      	cmp	r0, #4
 8005752:	bf14      	ite	ne
 8005754:	f06f 0003 	mvnne.w	r0, #3
 8005758:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800575c:	b004      	add	sp, #16
 800575e:	bd10      	pop	{r4, pc}
 8005760:	2400e4b4 	.word	0x2400e4b4

08005764 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005764:	f000 bd08 	b.w	8006178 <HAL_GetTick>

08005768 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800576a:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800576e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005770:	684a      	ldr	r2, [r1, #4]
 8005772:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005774:	2201      	movs	r2, #1
 8005776:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005778:	688a      	ldr	r2, [r1, #8]
 800577a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800577c:	680a      	ldr	r2, [r1, #0]
 800577e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005780:	2200      	movs	r2, #0
 8005782:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005786:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005788:	68ca      	ldr	r2, [r1, #12]
 800578a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800578c:	f003 bcc4 	b.w	8009118 <HAL_QSPI_Init>
 8005790:	52005000 	.word	0x52005000

08005794 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005794:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005796:	b988      	cbnz	r0, 80057bc <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005798:	4c0a      	ldr	r4, [pc, #40]	@ (80057c4 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800579a:	480b      	ldr	r0, [pc, #44]	@ (80057c8 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800579c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800579e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80057a0:	b94b      	cbnz	r3, 80057b6 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80057a2:	f7ff f9bc 	bl	8004b1e <MT25TL01G_EnableMemoryMappedModeSTR>
 80057a6:	b110      	cbz	r0, 80057ae <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057a8:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80057ac:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80057ae:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80057b0:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80057b2:	7023      	strb	r3, [r4, #0]
 80057b4:	e7fa      	b.n	80057ac <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80057b6:	f7ff f968 	bl	8004a8a <MT25TL01G_EnableMemoryMappedModeDTR>
 80057ba:	e7f4      	b.n	80057a6 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80057bc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80057c0:	e7f4      	b.n	80057ac <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80057c2:	bf00      	nop
 80057c4:	2400ef10 	.word	0x2400ef10
 80057c8:	240003c8 	.word	0x240003c8

080057cc <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	460c      	mov	r4, r1
 80057d0:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80057d2:	bb30      	cbnz	r0, 8005822 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80057d4:	4d17      	ldr	r5, [pc, #92]	@ (8005834 <BSP_QSPI_ConfigFlash+0x68>)
 80057d6:	782b      	ldrb	r3, [r5, #0]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d025      	beq.n	8005828 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057dc:	fab2 f382 	clz	r3, r2
 80057e0:	4e15      	ldr	r6, [pc, #84]	@ (8005838 <BSP_QSPI_ConfigFlash+0x6c>)
 80057e2:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80057e4:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80057ea:	f003 fc95 	bl	8009118 <HAL_QSPI_Init>
 80057ee:	b9f0      	cbnz	r0, 800582e <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80057f0:	786b      	ldrb	r3, [r5, #1]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d10f      	bne.n	8005816 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80057f6:	2c03      	cmp	r4, #3
 80057f8:	d105      	bne.n	8005806 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80057fa:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80057fc:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80057fe:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005800:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005802:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff f923 	bl	8004a52 <MT25TL01G_ExitQPIMode>
 800580c:	2800      	cmp	r0, #0
 800580e:	d0f4      	beq.n	80057fa <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005810:	f06f 0004 	mvn.w	r0, #4
 8005814:	e7f6      	b.n	8005804 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8005816:	2c03      	cmp	r4, #3
 8005818:	d1ef      	bne.n	80057fa <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff f8fd 	bl	8004a1a <MT25TL01G_EnterQPIMode>
 8005820:	e7f4      	b.n	800580c <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005822:	f06f 0001 	mvn.w	r0, #1
 8005826:	e7ed      	b.n	8005804 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005828:	f06f 0019 	mvn.w	r0, #25
 800582c:	e7ea      	b.n	8005804 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800582e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005832:	e7e7      	b.n	8005804 <BSP_QSPI_ConfigFlash+0x38>
 8005834:	2400ef10 	.word	0x2400ef10
 8005838:	240003c8 	.word	0x240003c8

0800583c <BSP_QSPI_Init>:
{
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	460c      	mov	r4, r1
 8005842:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005844:	2800      	cmp	r0, #0
 8005846:	f040 81ac 	bne.w	8005ba2 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800584a:	4d03      	ldr	r5, [pc, #12]	@ (8005858 <BSP_QSPI_Init+0x1c>)
 800584c:	782f      	ldrb	r7, [r5, #0]
 800584e:	b12f      	cbz	r7, 800585c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005850:	2000      	movs	r0, #0
}
 8005852:	b024      	add	sp, #144	@ 0x90
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	2400ef10 	.word	0x2400ef10
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800585c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b6c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800585e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005862:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005864:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005866:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800586a:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800586e:	48c0      	ldr	r0, [pc, #768]	@ (8005b70 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005870:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005874:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005878:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800587c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005880:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005888:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800588a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800588e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005890:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005892:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005896:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005898:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800589c:	f042 0202 	orr.w	r2, r2, #2
 80058a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058a8:	f002 0202 	and.w	r2, r2, #2
 80058ac:	9202      	str	r2, [sp, #8]
 80058ae:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80058b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058c0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80058c4:	9203      	str	r2, [sp, #12]
 80058c6:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80058c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058cc:	f042 0208 	orr.w	r2, r2, #8
 80058d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058d8:	f002 0208 	and.w	r2, r2, #8
 80058dc:	9204      	str	r2, [sp, #16]
 80058de:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80058e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058e4:	f042 0220 	orr.w	r2, r2, #32
 80058e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058f0:	f002 0220 	and.w	r2, r2, #32
 80058f4:	9205      	str	r2, [sp, #20]
 80058f6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80058f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058fc:	f042 0220 	orr.w	r2, r2, #32
 8005900:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005904:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005908:	f002 0220 	and.w	r2, r2, #32
 800590c:	9206      	str	r2, [sp, #24]
 800590e:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005910:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005914:	f042 0220 	orr.w	r2, r2, #32
 8005918:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800591c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005920:	f002 0220 	and.w	r2, r2, #32
 8005924:	9207      	str	r2, [sp, #28]
 8005926:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005928:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800592c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005930:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005934:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005938:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800593c:	9208      	str	r2, [sp, #32]
 800593e:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005940:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005944:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005948:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800594c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005950:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005954:	9209      	str	r2, [sp, #36]	@ 0x24
 8005956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800595c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005960:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005968:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800596c:	920a      	str	r2, [sp, #40]	@ 0x28
 800596e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005978:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800597c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005980:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005984:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800598c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005990:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	930c      	str	r3, [sp, #48]	@ 0x30
 800599e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80059a0:	2302      	movs	r3, #2
 80059a2:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a6:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059a8:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059aa:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80059ae:	f001 fa69 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059b2:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80059b4:	a916      	add	r1, sp, #88	@ 0x58
 80059b6:	486f      	ldr	r0, [pc, #444]	@ (8005b74 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059b8:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80059ba:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80059be:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80059c2:	f001 fa5f 	bl	8006e84 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80059c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80059ca:	a916      	add	r1, sp, #88	@ 0x58
 80059cc:	486a      	ldr	r0, [pc, #424]	@ (8005b78 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80059ce:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059d0:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059d2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80059d4:	f001 fa56 	bl	8006e84 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059d8:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80059da:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059de:	4867      	ldr	r0, [pc, #412]	@ (8005b7c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80059e0:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059e4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059e6:	f001 fa4d 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80059ea:	a916      	add	r1, sp, #88	@ 0x58
 80059ec:	4864      	ldr	r0, [pc, #400]	@ (8005b80 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80059ee:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80059f2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80059f6:	f001 fa45 	bl	8006e84 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80059fa:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80059fc:	a916      	add	r1, sp, #88	@ 0x58
 80059fe:	485f      	ldr	r0, [pc, #380]	@ (8005b7c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005a00:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a02:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005a04:	f001 fa3e 	bl	8006e84 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005a08:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005a0a:	a916      	add	r1, sp, #88	@ 0x58
 8005a0c:	485c      	ldr	r0, [pc, #368]	@ (8005b80 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005a0e:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a10:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005a12:	f001 fa37 	bl	8006e84 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005a16:	a916      	add	r1, sp, #88	@ 0x58
 8005a18:	4856      	ldr	r0, [pc, #344]	@ (8005b74 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005a1a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005a1e:	f001 fa31 	bl	8006e84 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005a22:	a916      	add	r1, sp, #88	@ 0x58
 8005a24:	4856      	ldr	r0, [pc, #344]	@ (8005b80 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005a26:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005a2a:	f001 fa2b 	bl	8006e84 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005a2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005a32:	a916      	add	r1, sp, #88	@ 0x58
 8005a34:	484f      	ldr	r0, [pc, #316]	@ (8005b74 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005a36:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005a38:	f001 fa24 	bl	8006e84 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005a3c:	463a      	mov	r2, r7
 8005a3e:	210f      	movs	r1, #15
 8005a40:	205c      	movs	r0, #92	@ 0x5c
 8005a42:	f000 fbc9 	bl	80061d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005a46:	205c      	movs	r0, #92	@ 0x5c
 8005a48:	f000 fbf8 	bl	800623c <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005a4c:	a811      	add	r0, sp, #68	@ 0x44
 8005a4e:	f7fe ff38 	bl	80048c2 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005a52:	7863      	ldrb	r3, [r4, #1]
 8005a54:	4a4b      	ldr	r2, [pc, #300]	@ (8005b84 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005a56:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005a5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a5e:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005a62:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a66:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005a6a:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005a6e:	a90d      	add	r1, sp, #52	@ 0x34
 8005a70:	4845      	ldr	r0, [pc, #276]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a72:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005a74:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a76:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005a78:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005a7c:	f7ff fe74 	bl	8005768 <MX_QSPI_Init>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f040 8091 	bne.w	8005ba8 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005a86:	2103      	movs	r1, #3
 8005a88:	483f      	ldr	r0, [pc, #252]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005a8a:	f7ff f88e 	bl	8004baa <MT25TL01G_ResetEnable>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f040 8084 	bne.w	8005b9c <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005a94:	2103      	movs	r1, #3
 8005a96:	483c      	ldr	r0, [pc, #240]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005a98:	f7ff f8a8 	bl	8004bec <MT25TL01G_ResetMemory>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d17d      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005aa0:	7869      	ldrb	r1, [r5, #1]
 8005aa2:	4839      	ldr	r0, [pc, #228]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005aa4:	f7fe ff1e 	bl	80048e4 <MT25TL01G_AutoPollingMemReady>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d176      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005aae:	4836      	ldr	r0, [pc, #216]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005ab0:	f7ff f87b 	bl	8004baa <MT25TL01G_ResetEnable>
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d170      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005aba:	4833      	ldr	r0, [pc, #204]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005abc:	f7ff f896 	bl	8004bec <MT25TL01G_ResetMemory>
 8005ac0:	4601      	mov	r1, r0
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d16a      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005ac6:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005ac8:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005aca:	482f      	ldr	r0, [pc, #188]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005acc:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ace:	f7fe ff09 	bl	80048e4 <MT25TL01G_AutoPollingMemReady>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d162      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ad6:	7869      	ldrb	r1, [r5, #1]
 8005ad8:	482b      	ldr	r0, [pc, #172]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005ada:	f7fe ff72 	bl	80049c2 <MT25TL01G_Enter4BytesAddressMode>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d15c      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ae2:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005ae6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005aea:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aec:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005af0:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005af2:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005af4:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005af6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005af8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005afc:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005afe:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b00:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005b04:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b08:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b0c:	481e      	ldr	r0, [pc, #120]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005b0e:	f003 fb4f 	bl	80091b0 <HAL_QSPI_Command>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d142      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1a:	f10d 0102 	add.w	r1, sp, #2
 8005b1e:	481a      	ldr	r0, [pc, #104]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005b20:	f003 fbe7 	bl	80092f2 <HAL_QSPI_Receive>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d139      	bne.n	8005b9c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b28:	7869      	ldrb	r1, [r5, #1]
 8005b2a:	4817      	ldr	r0, [pc, #92]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005b2c:	f7fe ff05 	bl	800493a <MT25TL01G_WriteEnable>
 8005b30:	bba0      	cbnz	r0, 8005b9c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005b32:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	a916      	add	r1, sp, #88	@ 0x58
 8005b3a:	4813      	ldr	r0, [pc, #76]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005b3c:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005b3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b46:	051b      	lsls	r3, r3, #20
 8005b48:	0d1b      	lsrs	r3, r3, #20
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b52:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b56:	f003 fb2b 	bl	80091b0 <HAL_QSPI_Command>
 8005b5a:	b9f8      	cbnz	r0, 8005b9c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b60:	f10d 0102 	add.w	r1, sp, #2
 8005b64:	4808      	ldr	r0, [pc, #32]	@ (8005b88 <BSP_QSPI_Init+0x34c>)
 8005b66:	f003 fb68 	bl	800923a <HAL_QSPI_Transmit>
 8005b6a:	e00f      	b.n	8005b8c <BSP_QSPI_Init+0x350>
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	58020400 	.word	0x58020400
 8005b74:	58021800 	.word	0x58021800
 8005b78:	58020c00 	.word	0x58020c00
 8005b7c:	58021c00 	.word	0x58021c00
 8005b80:	58021400 	.word	0x58021400
 8005b84:	0802598c 	.word	0x0802598c
 8005b88:	240003c8 	.word	0x240003c8
 8005b8c:	b930      	cbnz	r0, 8005b9c <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005b8e:	7862      	ldrb	r2, [r4, #1]
 8005b90:	7821      	ldrb	r1, [r4, #0]
 8005b92:	f7ff fe1b 	bl	80057cc <BSP_QSPI_ConfigFlash>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f43f ae5a 	beq.w	8005850 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b9c:	f06f 0004 	mvn.w	r0, #4
 8005ba0:	e657      	b.n	8005852 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005ba2:	f06f 0001 	mvn.w	r0, #1
 8005ba6:	e654      	b.n	8005852 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005ba8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005bac:	e651      	b.n	8005852 <BSP_QSPI_Init+0x16>
 8005bae:	bf00      	nop

08005bb0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005bb0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	b970      	cbnz	r0, 8005bd4 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <BSP_SDRAM_DeInit+0x2c>)
 8005bb8:	4809      	ldr	r0, [pc, #36]	@ (8005be0 <BSP_SDRAM_DeInit+0x30>)
 8005bba:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005bbc:	f004 ffe4 	bl	800ab88 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005bc0:	207a      	movs	r0, #122	@ 0x7a
 8005bc2:	f000 fb49 	bl	8006258 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005bc6:	4807      	ldr	r0, [pc, #28]	@ (8005be4 <BSP_SDRAM_DeInit+0x34>)
 8005bc8:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <BSP_SDRAM_DeInit+0x38>)
 8005bca:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005bcc:	f003 f82a 	bl	8008c24 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005bd0:	4620      	mov	r0, r4
}
 8005bd2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005bd4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005bd8:	e7fb      	b.n	8005bd2 <BSP_SDRAM_DeInit+0x22>
 8005bda:	bf00      	nop
 8005bdc:	52004140 	.word	0x52004140
 8005be0:	2400f014 	.word	0x2400f014
 8005be4:	2400ef1c 	.word	0x2400ef1c
 8005be8:	52000040 	.word	0x52000040

08005bec <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005bec:	2201      	movs	r2, #1
 8005bee:	4915      	ldr	r1, [pc, #84]	@ (8005c44 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005bf0:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <MX_SDRAM_Init+0x5c>)
{
 8005bf2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005bf4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005bf8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005bfe:	2440      	movs	r4, #64	@ 0x40
{
 8005c00:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005c02:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005c06:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005c0a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005c14:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005c18:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005c1c:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005c20:	2207      	movs	r2, #7
 8005c22:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005c24:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005c28:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005c2a:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005c2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005c30:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005c34:	f004 ff80 	bl	800ab38 <HAL_SDRAM_Init>
}
 8005c38:	3800      	subs	r0, #0
 8005c3a:	bf18      	it	ne
 8005c3c:	2001      	movne	r0, #1
 8005c3e:	b008      	add	sp, #32
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	bf00      	nop
 8005c44:	52004140 	.word	0x52004140
 8005c48:	2400f014 	.word	0x2400f014

08005c4c <BSP_SDRAM_Init>:
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c4e:	4605      	mov	r5, r0
{
 8005c50:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f040 80dd 	bne.w	8005e12 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c58:	4b71      	ldr	r3, [pc, #452]	@ (8005e20 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005c5a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c5c:	a909      	add	r1, sp, #36	@ 0x24
 8005c5e:	4871      	ldr	r0, [pc, #452]	@ (8005e24 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005c64:	4c70      	ldr	r4, [pc, #448]	@ (8005e28 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005c6a:	4e70      	ldr	r6, [pc, #448]	@ (8005e2c <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c6c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005c70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c74:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005c7c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005c88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c8c:	f002 0201 	and.w	r2, r2, #1
 8005c90:	9202      	str	r2, [sp, #8]
 8005c92:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ca4:	f002 0208 	and.w	r2, r2, #8
 8005ca8:	9203      	str	r2, [sp, #12]
 8005caa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cb0:	f042 0210 	orr.w	r2, r2, #16
 8005cb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cbc:	f002 0210 	and.w	r2, r2, #16
 8005cc0:	9204      	str	r2, [sp, #16]
 8005cc2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cc8:	f042 0220 	orr.w	r2, r2, #32
 8005ccc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cd4:	f002 0220 	and.w	r2, r2, #32
 8005cd8:	9205      	str	r2, [sp, #20]
 8005cda:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ce4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cec:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005cf0:	9206      	str	r2, [sp, #24]
 8005cf2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d04:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d18:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	9308      	str	r3, [sp, #32]
 8005d24:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005d32:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005d36:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005d38:	f001 f8a4 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d3c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005d40:	a909      	add	r1, sp, #36	@ 0x24
 8005d42:	483b      	ldr	r0, [pc, #236]	@ (8005e30 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d44:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005d46:	f001 f89d 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d4a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005d4e:	a909      	add	r1, sp, #36	@ 0x24
 8005d50:	4838      	ldr	r0, [pc, #224]	@ (8005e34 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d52:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005d54:	f001 f896 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005d58:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005d5c:	a909      	add	r1, sp, #36	@ 0x24
 8005d5e:	4836      	ldr	r0, [pc, #216]	@ (8005e38 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005d60:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005d62:	f001 f88f 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005d6a:	a909      	add	r1, sp, #36	@ 0x24
 8005d6c:	4833      	ldr	r0, [pc, #204]	@ (8005e3c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d6e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005d70:	f001 f888 	bl	8006e84 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d74:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005d78:	a909      	add	r1, sp, #36	@ 0x24
 8005d7a:	4831      	ldr	r0, [pc, #196]	@ (8005e40 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d7c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005d7e:	f001 f881 	bl	8006e84 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005d82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005d86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005d8a:	f240 2002 	movw	r0, #514	@ 0x202
 8005d8e:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d92:	6334      	str	r4, [r6, #48]	@ 0x30
 8005d94:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005d96:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005d9a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005d9e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005da0:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005da2:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005da4:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005da6:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005daa:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005db2:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005db4:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005db6:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005db8:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005dc0:	f002 ff30 	bl	8008c24 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f002 febe 	bl	8008b46 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005dca:	462a      	mov	r2, r5
 8005dcc:	210f      	movs	r1, #15
 8005dce:	207a      	movs	r0, #122	@ 0x7a
 8005dd0:	f000 fa02 	bl	80061d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005dd4:	207a      	movs	r0, #122	@ 0x7a
 8005dd6:	f000 fa31 	bl	800623c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ff06 	bl	8005bec <MX_SDRAM_Init>
 8005de0:	b9d0      	cbnz	r0, 8005e18 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005de2:	4919      	ldr	r1, [pc, #100]	@ (8005e48 <BSP_SDRAM_Init+0x1fc>)
 8005de4:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005de6:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005dea:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005dee:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005df0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005df4:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005df6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005dfe:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005e00:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005e02:	f7fe fd31 	bl	8004868 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005e06:	2800      	cmp	r0, #0
 8005e08:	bf18      	it	ne
 8005e0a:	f06f 0004 	mvnne.w	r0, #4
}
 8005e0e:	b00f      	add	sp, #60	@ 0x3c
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005e12:	f06f 0001 	mvn.w	r0, #1
 8005e16:	e7fa      	b.n	8005e0e <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005e1c:	e7f7      	b.n	8005e0e <BSP_SDRAM_Init+0x1c2>
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	58020c00 	.word	0x58020c00
 8005e28:	2400ef88 	.word	0x2400ef88
 8005e2c:	2400f014 	.word	0x2400f014
 8005e30:	58021000 	.word	0x58021000
 8005e34:	58021400 	.word	0x58021400
 8005e38:	58021800 	.word	0x58021800
 8005e3c:	58021c00 	.word	0x58021c00
 8005e40:	58022000 	.word	0x58022000
 8005e44:	52000040 	.word	0x52000040
 8005e48:	2400eff4 	.word	0x2400eff4

08005e4c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005e54:	4606      	mov	r6, r0
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d15c      	bne.n	8005f14 <BSP_TS_Init+0xc8>
 8005e5a:	680b      	ldr	r3, [r1, #0]
 8005e5c:	1e5a      	subs	r2, r3, #1
 8005e5e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005e62:	d257      	bcs.n	8005f14 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005e64:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005e66:	1e51      	subs	r1, r2, #1
 8005e68:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005e6c:	d252      	bcs.n	8005f14 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bf28      	it	cs
 8005e72:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005e74:	68e2      	ldr	r2, [r4, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d84c      	bhi.n	8005f14 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005e7a:	2370      	movs	r3, #112	@ 0x70
 8005e7c:	2254      	movs	r2, #84	@ 0x54
 8005e7e:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f58 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005e86:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f44 <BSP_TS_Init+0xf8>)
 8005e8c:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f48 <BSP_TS_Init+0xfc>)
 8005e90:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005e92:	4b2e      	ldr	r3, [pc, #184]	@ (8005f4c <BSP_TS_Init+0x100>)
 8005e94:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005e96:	4b2e      	ldr	r3, [pc, #184]	@ (8005f50 <BSP_TS_Init+0x104>)
 8005e98:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f54 <BSP_TS_Init+0x108>)
 8005e9c:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005e9e:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005ea2:	a906      	add	r1, sp, #24
 8005ea4:	482c      	ldr	r0, [pc, #176]	@ (8005f58 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005ea6:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005eaa:	f7fe fbe3 	bl	8004674 <FT6X06_RegisterBusIO>
 8005eae:	b9c0      	cbnz	r0, 8005ee2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005eb0:	4669      	mov	r1, sp
 8005eb2:	4829      	ldr	r0, [pc, #164]	@ (8005f58 <BSP_TS_Init+0x10c>)
 8005eb4:	f7fe fb28 	bl	8004508 <FT6X06_ReadID>
 8005eb8:	b998      	cbnz	r0, 8005ee2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	2b11      	cmp	r3, #17
 8005ebe:	d110      	bne.n	8005ee2 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005ec0:	a903      	add	r1, sp, #12
 8005ec2:	4825      	ldr	r0, [pc, #148]	@ (8005f58 <BSP_TS_Init+0x10c>)
 8005ec4:	f7fe fad4 	bl	8004470 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005ec8:	4f24      	ldr	r7, [pc, #144]	@ (8005f5c <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <BSP_TS_Init+0x114>)
 8005ecc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005f68 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005ed0:	4821      	ldr	r0, [pc, #132]	@ (8005f58 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005ed2:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005ed6:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4798      	blx	r3
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b1d8      	cbz	r0, 8005f1a <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005ee2:	b116      	cbz	r6, 8005eea <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ee8:	e010      	b.n	8005f0c <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8005eea:	2601      	movs	r6, #1
 8005eec:	e7d7      	b.n	8005e9e <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005eee:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ef0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005ef2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005ef4:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005ef6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005ef8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005efe:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005f00:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005f02:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005f04:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005f06:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005f08:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	b00c      	add	sp, #48	@ 0x30
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005f14:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005f18:	e7f8      	b.n	8005f0c <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f1a:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f1c:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f1e:	4e11      	ldr	r6, [pc, #68]	@ (8005f64 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f20:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f22:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005f28:	68a3      	ldr	r3, [r4, #8]
 8005f2a:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005f2c:	68e3      	ldr	r3, [r4, #12]
 8005f2e:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f30:	f8d8 3000 	ldr.w	r3, [r8]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4798      	blx	r3
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	dad8      	bge.n	8005eee <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f3c:	f06f 0504 	mvn.w	r5, #4
 8005f40:	e7e4      	b.n	8005f0c <BSP_TS_Init+0xc0>
 8005f42:	bf00      	nop
 8005f44:	08005455 	.word	0x08005455
 8005f48:	080053c1 	.word	0x080053c1
 8005f4c:	08005731 	.word	0x08005731
 8005f50:	080056fd 	.word	0x080056fd
 8005f54:	08005765 	.word	0x08005765
 8005f58:	2400f048 	.word	0x2400f048
 8005f5c:	2400f070 	.word	0x2400f070
 8005f60:	24000038 	.word	0x24000038
 8005f64:	2400f074 	.word	0x2400f074
 8005f68:	2400f09c 	.word	0x2400f09c

08005f6c <BSP_TS_GetState>:
{
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	460c      	mov	r4, r1
 8005f70:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d14d      	bne.n	8006012 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005f76:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <BSP_TS_GetState+0xac>)
 8005f78:	a901      	add	r1, sp, #4
 8005f7a:	4a28      	ldr	r2, [pc, #160]	@ (800601c <BSP_TS_GetState+0xb0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6810      	ldr	r0, [r2, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4798      	blx	r3
 8005f84:	2800      	cmp	r0, #0
 8005f86:	db41      	blt.n	800600c <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f88:	4925      	ldr	r1, [pc, #148]	@ (8006020 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8005f8a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f8c:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005f8e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	d037      	beq.n	8006004 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f94:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005f96:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f9a:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8005f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005fa2:	bf1e      	ittt	ne
 8005fa4:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8005fa6:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8005fa8:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005faa:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005fae:	bf1c      	itt	ne
 8005fb0:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8005fb4:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005fb8:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005fbc:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005fbe:	bf44      	itt	mi
 8005fc0:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8005fc4:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fc6:	680f      	ldr	r7, [r1, #0]
 8005fc8:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fca:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005fcc:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fce:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005fd0:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fd2:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fd6:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005fda:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fdc:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fde:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005fe0:	bf8c      	ite	hi
 8005fe2:	eba2 0c05 	subhi.w	ip, r2, r5
 8005fe6:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005fea:	4283      	cmp	r3, r0
 8005fec:	bf8c      	ite	hi
 8005fee:	1a1e      	subhi	r6, r3, r0
 8005ff0:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005ff2:	4567      	cmp	r7, ip
 8005ff4:	d301      	bcc.n	8005ffa <BSP_TS_GetState+0x8e>
 8005ff6:	42b7      	cmp	r7, r6
 8005ff8:	d205      	bcs.n	8006006 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005ffa:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005ffc:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005ffe:	2000      	movs	r0, #0
}
 8006000:	b005      	add	sp, #20
 8006002:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006004:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006006:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800600a:	e7f8      	b.n	8005ffe <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800600c:	f06f 0004 	mvn.w	r0, #4
 8006010:	e7f6      	b.n	8006000 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006012:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006016:	e7f3      	b.n	8006000 <BSP_TS_GetState+0x94>
 8006018:	2400f09c 	.word	0x2400f09c
 800601c:	2400f070 	.word	0x2400f070
 8006020:	2400f074 	.word	0x2400f074

08006024 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006024:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <SystemInit+0xb8>)
 8006026:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800602a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	f042 0210 	orr.w	r2, r2, #16
 8006038:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800603a:	4a29      	ldr	r2, [pc, #164]	@ (80060e0 <SystemInit+0xbc>)
 800603c:	6813      	ldr	r3, [r2, #0]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	2b06      	cmp	r3, #6
 8006044:	d805      	bhi.n	8006052 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	f023 030f 	bic.w	r3, r3, #15
 800604c:	f043 0307 	orr.w	r3, r3, #7
 8006050:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006052:	4b24      	ldr	r3, [pc, #144]	@ (80060e4 <SystemInit+0xc0>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006060:	4a21      	ldr	r2, [pc, #132]	@ (80060e8 <SystemInit+0xc4>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006066:	491e      	ldr	r1, [pc, #120]	@ (80060e0 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006068:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800606a:	680a      	ldr	r2, [r1, #0]
 800606c:	0712      	lsls	r2, r2, #28
 800606e:	d505      	bpl.n	800607c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006070:	680a      	ldr	r2, [r1, #0]
 8006072:	f022 020f 	bic.w	r2, r2, #15
 8006076:	f042 0207 	orr.w	r2, r2, #7
 800607a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800607c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800607e:	491b      	ldr	r1, [pc, #108]	@ (80060ec <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006080:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006082:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006084:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006086:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006088:	4919      	ldr	r1, [pc, #100]	@ (80060f0 <SystemInit+0xcc>)
 800608a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800608c:	4919      	ldr	r1, [pc, #100]	@ (80060f4 <SystemInit+0xd0>)
 800608e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006092:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006094:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006096:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006098:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800609a:	6819      	ldr	r1, [r3, #0]
 800609c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80060a0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80060a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80060a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060a8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80060ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80060b4:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <SystemInit+0xd4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	041b      	lsls	r3, r3, #16
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c0:	d203      	bcs.n	80060ca <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80060c2:	4b0e      	ldr	r3, [pc, #56]	@ (80060fc <SystemInit+0xd8>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80060ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <SystemInit+0xdc>)
 80060cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80060d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80060d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80060d6:	4b01      	ldr	r3, [pc, #4]	@ (80060dc <SystemInit+0xb8>)
 80060d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80060da:	4770      	bx	lr
 80060dc:	e000ed00 	.word	0xe000ed00
 80060e0:	52002000 	.word	0x52002000
 80060e4:	58024400 	.word	0x58024400
 80060e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80060ec:	02020200 	.word	0x02020200
 80060f0:	01ff0000 	.word	0x01ff0000
 80060f4:	01010280 	.word	0x01010280
 80060f8:	5c001000 	.word	0x5c001000
 80060fc:	51008000 	.word	0x51008000
 8006100:	52004000 	.word	0x52004000

08006104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006104:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006106:	2003      	movs	r0, #3
 8006108:	f000 f854 	bl	80061b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800610c:	f003 fcde 	bl	8009acc <HAL_RCC_GetSysClockFreq>
 8006110:	490f      	ldr	r1, [pc, #60]	@ (8006150 <HAL_Init+0x4c>)
 8006112:	4a10      	ldr	r2, [pc, #64]	@ (8006154 <HAL_Init+0x50>)
 8006114:	698b      	ldr	r3, [r1, #24]
 8006116:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800611a:	5cd3      	ldrb	r3, [r2, r3]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006122:	698b      	ldr	r3, [r1, #24]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	4a0b      	ldr	r2, [pc, #44]	@ (8006158 <HAL_Init+0x54>)
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa20 f303 	lsr.w	r3, r0, r3
 8006134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006136:	4b09      	ldr	r3, [pc, #36]	@ (800615c <HAL_Init+0x58>)
 8006138:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800613a:	2000      	movs	r0, #0
 800613c:	f7fb fa14 	bl	8001568 <HAL_InitTick>
 8006140:	4604      	mov	r4, r0
 8006142:	b918      	cbnz	r0, 800614c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006144:	f7fa ff00 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006148:	4620      	mov	r0, r4
 800614a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800614c:	2401      	movs	r4, #1
 800614e:	e7fb      	b.n	8006148 <HAL_Init+0x44>
 8006150:	58024400 	.word	0x58024400
 8006154:	08025994 	.word	0x08025994
 8006158:	24000068 	.word	0x24000068
 800615c:	2400006c 	.word	0x2400006c

08006160 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006160:	4a03      	ldr	r2, [pc, #12]	@ (8006170 <HAL_IncTick+0x10>)
 8006162:	4b04      	ldr	r3, [pc, #16]	@ (8006174 <HAL_IncTick+0x14>)
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	440b      	add	r3, r1
 800616a:	6013      	str	r3, [r2, #0]
}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	2400f0a0 	.word	0x2400f0a0
 8006174:	24000070 	.word	0x24000070

08006178 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006178:	4b01      	ldr	r3, [pc, #4]	@ (8006180 <HAL_GetTick+0x8>)
 800617a:	6818      	ldr	r0, [r3, #0]
}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	2400f0a0 	.word	0x2400f0a0

08006184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006188:	f7ff fff6 	bl	8006178 <HAL_GetTick>
 800618c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800618e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006190:	bf1e      	ittt	ne
 8006192:	4b04      	ldrne	r3, [pc, #16]	@ (80061a4 <HAL_Delay+0x20>)
 8006194:	781b      	ldrbne	r3, [r3, #0]
 8006196:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006198:	f7ff ffee 	bl	8006178 <HAL_GetTick>
 800619c:	1b43      	subs	r3, r0, r5
 800619e:	42a3      	cmp	r3, r4
 80061a0:	d3fa      	bcc.n	8006198 <HAL_Delay+0x14>
  {
  }
}
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	24000070 	.word	0x24000070

080061a8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80061a8:	4b01      	ldr	r3, [pc, #4]	@ (80061b0 <HAL_GetREVID+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
}
 80061ac:	0c00      	lsrs	r0, r0, #16
 80061ae:	4770      	bx	lr
 80061b0:	5c001000 	.word	0x5c001000

080061b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b4:	4907      	ldr	r1, [pc, #28]	@ (80061d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061b6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061c2:	0412      	lsls	r2, r2, #16
 80061c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80061d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80061d2:	4770      	bx	lr
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061d8:	4b16      	ldr	r3, [pc, #88]	@ (8006234 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061da:	b530      	push	{r4, r5, lr}
 80061dc:	68dc      	ldr	r4, [r3, #12]
 80061de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	bf28      	it	cs
 80061ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ee:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061f4:	bf8c      	ite	hi
 80061f6:	3c03      	subhi	r4, #3
 80061f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061fa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80061fe:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006204:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006208:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800620c:	fa03 f304 	lsl.w	r3, r3, r4
 8006210:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006214:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006218:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800621a:	db06      	blt.n	800622a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006220:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006224:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006228:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622a:	f000 000f 	and.w	r0, r0, #15
 800622e:	4a02      	ldr	r2, [pc, #8]	@ (8006238 <HAL_NVIC_SetPriority+0x60>)
 8006230:	5413      	strb	r3, [r2, r0]
 8006232:	e7f9      	b.n	8006228 <HAL_NVIC_SetPriority+0x50>
 8006234:	e000ed00 	.word	0xe000ed00
 8006238:	e000ed14 	.word	0xe000ed14

0800623c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800623c:	2800      	cmp	r0, #0
 800623e:	db07      	blt.n	8006250 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006240:	2301      	movs	r3, #1
 8006242:	0941      	lsrs	r1, r0, #5
 8006244:	f000 001f 	and.w	r0, r0, #31
 8006248:	4a02      	ldr	r2, [pc, #8]	@ (8006254 <HAL_NVIC_EnableIRQ+0x18>)
 800624a:	4083      	lsls	r3, r0
 800624c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	e000e100 	.word	0xe000e100

08006258 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006258:	2800      	cmp	r0, #0
 800625a:	db0c      	blt.n	8006276 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800625c:	0943      	lsrs	r3, r0, #5
 800625e:	2201      	movs	r2, #1
 8006260:	f000 001f 	and.w	r0, r0, #31
 8006264:	4904      	ldr	r1, [pc, #16]	@ (8006278 <HAL_NVIC_DisableIRQ+0x20>)
 8006266:	3320      	adds	r3, #32
 8006268:	4082      	lsls	r2, r0
 800626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800626e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006272:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006276:	4770      	bx	lr
 8006278:	e000e100 	.word	0xe000e100

0800627c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800627c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006280:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <HAL_MPU_Disable+0x18>)
 8006282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006284:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006298:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <HAL_MPU_Enable+0x1c>)
 800629a:	f040 0001 	orr.w	r0, r0, #1
 800629e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80062a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80062aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062ae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80062b2:	4770      	bx	lr
 80062b4:	e000ed00 	.word	0xe000ed00

080062b8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80062b8:	7843      	ldrb	r3, [r0, #1]
 80062ba:	4a14      	ldr	r2, [pc, #80]	@ (800630c <HAL_MPU_ConfigRegion+0x54>)
 80062bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80062c0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80062cc:	6843      	ldr	r3, [r0, #4]
 80062ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80062d2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80062d4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80062d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80062d8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80062dc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062de:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80062e0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062e2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80062e6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062e8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80062ec:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80062f2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80062f8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80062fe:	7a01      	ldrb	r1, [r0, #8]
 8006300:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006304:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006310:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006312:	4604      	mov	r4, r0
 8006314:	b908      	cbnz	r0, 800631a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006316:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006318:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800631a:	7f43      	ldrb	r3, [r0, #29]
 800631c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006320:	b913      	cbnz	r3, 8006328 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006322:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006324:	f7fa fe28 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006328:	2302      	movs	r3, #2
 800632a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800632c:	7923      	ldrb	r3, [r4, #4]
 800632e:	b9e3      	cbnz	r3, 800636a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	4a13      	ldr	r2, [pc, #76]	@ (8006380 <HAL_CRC_Init+0x70>)
 8006334:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	f022 0218 	bic.w	r2, r2, #24
 800633c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800633e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006340:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006342:	b9d2      	cbnz	r2, 800637a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006348:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800634a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	6961      	ldr	r1, [r4, #20]
 8006350:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006354:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006356:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006358:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006364:	2301      	movs	r3, #1
 8006366:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006368:	e7d6      	b.n	8006318 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800636a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f808 	bl	8006384 <HAL_CRCEx_Polynomial_Set>
 8006374:	2800      	cmp	r0, #0
 8006376:	d0e2      	beq.n	800633e <HAL_CRC_Init+0x2e>
 8006378:	e7cd      	b.n	8006316 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800637a:	6922      	ldr	r2, [r4, #16]
 800637c:	e7e4      	b.n	8006348 <HAL_CRC_Init+0x38>
 800637e:	bf00      	nop
 8006380:	04c11db7 	.word	0x04c11db7

08006384 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006384:	07cb      	lsls	r3, r1, #31
{
 8006386:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006388:	d50d      	bpl.n	80063a6 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800638a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800638c:	3b01      	subs	r3, #1
 800638e:	d31d      	bcc.n	80063cc <HAL_CRCEx_Polynomial_Set+0x48>
 8006390:	fa21 f403 	lsr.w	r4, r1, r3
 8006394:	07e4      	lsls	r4, r4, #31
 8006396:	d5f9      	bpl.n	800638c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006398:	2a10      	cmp	r2, #16
 800639a:	d013      	beq.n	80063c4 <HAL_CRCEx_Polynomial_Set+0x40>
 800639c:	2a10      	cmp	r2, #16
 800639e:	d804      	bhi.n	80063aa <HAL_CRCEx_Polynomial_Set+0x26>
 80063a0:	b13a      	cbz	r2, 80063b2 <HAL_CRCEx_Polynomial_Set+0x2e>
 80063a2:	2a08      	cmp	r2, #8
 80063a4:	d010      	beq.n	80063c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80063a6:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80063a8:	e00b      	b.n	80063c2 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80063aa:	2a18      	cmp	r2, #24
 80063ac:	d1fb      	bne.n	80063a6 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80063ae:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80063b0:	d8f9      	bhi.n	80063a6 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80063b6:	6883      	ldr	r3, [r0, #8]
 80063b8:	f023 0318 	bic.w	r3, r3, #24
 80063bc:	4313      	orrs	r3, r2
 80063be:	6083      	str	r3, [r0, #8]
 80063c0:	2000      	movs	r0, #0
}
 80063c2:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80063c4:	2b07      	cmp	r3, #7
 80063c6:	e7f3      	b.n	80063b0 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80063c8:	2b0f      	cmp	r3, #15
 80063ca:	e7f1      	b.n	80063b0 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80063cc:	2a10      	cmp	r2, #16
 80063ce:	d1e5      	bne.n	800639c <HAL_CRCEx_Polynomial_Set+0x18>
 80063d0:	e7e9      	b.n	80063a6 <HAL_CRCEx_Polynomial_Set+0x22>

080063d2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063d2:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063d4:	4604      	mov	r4, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d036      	beq.n	8006448 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063da:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80063de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063e2:	b91b      	cbnz	r3, 80063ec <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063e4:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063e8:	f7fa fdde 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063ec:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063ee:	69e0      	ldr	r0, [r4, #28]
 80063f0:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063f2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80063fa:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006402:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800640a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800640c:	68a2      	ldr	r2, [r4, #8]
 800640e:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8006412:	4302      	orrs	r2, r0
 8006414:	f021 0101 	bic.w	r1, r1, #1
 8006418:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800641a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800641c:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800641e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006420:	0c12      	lsrs	r2, r2, #16
 8006422:	0412      	lsls	r2, r2, #16
 8006424:	430a      	orrs	r2, r1
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006428:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800642a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800642e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006432:	0552      	lsls	r2, r2, #21
 8006434:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006438:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800643a:	430a      	orrs	r2, r1
 800643c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800643e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006440:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006442:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8006446:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006448:	2001      	movs	r0, #1
 800644a:	e7fc      	b.n	8006446 <HAL_DMA2D_Init+0x74>

0800644c <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800644c:	4770      	bx	lr

0800644e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800644e:	4770      	bx	lr

08006450 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006450:	6803      	ldr	r3, [r0, #0]
{
 8006452:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006454:	685e      	ldr	r6, [r3, #4]
{
 8006456:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006458:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800645a:	07f2      	lsls	r2, r6, #31
 800645c:	d514      	bpl.n	8006488 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800645e:	05e9      	lsls	r1, r5, #23
 8006460:	d512      	bpl.n	8006488 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006468:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800646a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006472:	2201      	movs	r2, #1
 8006474:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006476:	2304      	movs	r3, #4
 8006478:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800647c:	2300      	movs	r3, #0
 800647e:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006482:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006484:	b103      	cbz	r3, 8006488 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006486:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006488:	06b2      	lsls	r2, r6, #26
 800648a:	d516      	bpl.n	80064ba <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800648c:	04ab      	lsls	r3, r5, #18
 800648e:	d514      	bpl.n	80064ba <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006498:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800649a:	2220      	movs	r2, #32
 800649c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800649e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064a0:	f043 0302 	orr.w	r3, r3, #2
 80064a4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064a6:	2304      	movs	r3, #4
 80064a8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064ac:	2300      	movs	r3, #0
 80064ae:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80064b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80064b4:	b10b      	cbz	r3, 80064ba <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80064b6:	4620      	mov	r0, r4
 80064b8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064ba:	0730      	lsls	r0, r6, #28
 80064bc:	d516      	bpl.n	80064ec <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80064be:	0529      	lsls	r1, r5, #20
 80064c0:	d514      	bpl.n	80064ec <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80064cc:	2208      	movs	r2, #8
 80064ce:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064d8:	2304      	movs	r3, #4
 80064da:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064de:	2300      	movs	r3, #0
 80064e0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80064e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80064e6:	b10b      	cbz	r3, 80064ec <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80064e8:	4620      	mov	r0, r4
 80064ea:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80064ec:	0772      	lsls	r2, r6, #29
 80064ee:	d50b      	bpl.n	8006508 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80064f0:	056b      	lsls	r3, r5, #21
 80064f2:	d509      	bpl.n	8006508 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80064f4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80064f6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006500:	2204      	movs	r2, #4
 8006502:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006504:	f7ff ffa2 	bl	800644c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006508:	07b0      	lsls	r0, r6, #30
 800650a:	d514      	bpl.n	8006536 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800650c:	05a9      	lsls	r1, r5, #22
 800650e:	d512      	bpl.n	8006536 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006518:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800651a:	2202      	movs	r2, #2
 800651c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800651e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006520:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006522:	2301      	movs	r3, #1
 8006524:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006528:	2300      	movs	r3, #0
 800652a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800652e:	6a23      	ldr	r3, [r4, #32]
 8006530:	b10b      	cbz	r3, 8006536 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8006532:	4620      	mov	r0, r4
 8006534:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006536:	06f2      	lsls	r2, r6, #27
 8006538:	d513      	bpl.n	8006562 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800653a:	04eb      	lsls	r3, r5, #19
 800653c:	d511      	bpl.n	8006562 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800653e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006540:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006548:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800654a:	2210      	movs	r2, #16
 800654c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800654e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006550:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006552:	2301      	movs	r3, #1
 8006554:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006558:	2300      	movs	r3, #0
 800655a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800655e:	f7ff ff76 	bl	800644e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8006562:	bd70      	pop	{r4, r5, r6, pc}

08006564 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006568:	4607      	mov	r7, r0
 800656a:	460d      	mov	r5, r1
 800656c:	4614      	mov	r4, r2
 800656e:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7ff fe02 	bl	8006178 <HAL_GetTick>
 8006574:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800657a:	07d2      	lsls	r2, r2, #31
 800657c:	d50a      	bpl.n	8006594 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800657e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006582:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006584:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006586:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800658a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800658e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006594:	f7ff fdf0 	bl	8006178 <HAL_GetTick>
 8006598:	eba0 0008 	sub.w	r0, r0, r8
 800659c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80065a0:	d9e9      	bls.n	8006576 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 80065a2:	2003      	movs	r0, #3
 80065a4:	e7f4      	b.n	8006590 <DSI_ShortWrite.constprop.0+0x2c>

080065a6 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80065a6:	7c03      	ldrb	r3, [r0, #16]
{
 80065a8:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d05b      	beq.n	8006666 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80065b6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80065ba:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80065bc:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80065be:	d507      	bpl.n	80065d0 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80065c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80065c4:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80065c8:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80065cc:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80065d0:	0788      	lsls	r0, r1, #30
 80065d2:	d505      	bpl.n	80065e0 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80065d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80065d8:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80065dc:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80065e0:	0748      	lsls	r0, r1, #29
 80065e2:	d505      	bpl.n	80065f0 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80065e4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065e8:	f040 0001 	orr.w	r0, r0, #1
 80065ec:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80065f0:	0708      	lsls	r0, r1, #28
 80065f2:	d505      	bpl.n	8006600 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80065f4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065f8:	f040 0002 	orr.w	r0, r0, #2
 80065fc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006600:	06c8      	lsls	r0, r1, #27
 8006602:	d505      	bpl.n	8006610 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006604:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006608:	f040 000c 	orr.w	r0, r0, #12
 800660c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006610:	0688      	lsls	r0, r1, #26
 8006612:	d505      	bpl.n	8006620 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006614:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006618:	f040 0010 	orr.w	r0, r0, #16
 800661c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006620:	0648      	lsls	r0, r1, #25
 8006622:	d505      	bpl.n	8006630 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006624:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006628:	f040 0020 	orr.w	r0, r0, #32
 800662c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006630:	0608      	lsls	r0, r1, #24
 8006632:	d505      	bpl.n	8006640 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006634:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006638:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800663c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006640:	05c8      	lsls	r0, r1, #23
 8006642:	d505      	bpl.n	8006650 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006644:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006648:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800664c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006650:	0589      	lsls	r1, r1, #22
 8006652:	d505      	bpl.n	8006660 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006654:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006658:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800665c:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006660:	2000      	movs	r0, #0
 8006662:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006664:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006666:	2002      	movs	r0, #2
}
 8006668:	4770      	bx	lr
	...

0800666c <HAL_DSI_Init>:
{
 800666c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800666e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006670:	4604      	mov	r4, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	f000 80ea 	beq.w	800684c <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006678:	7c43      	ldrb	r3, [r0, #17]
 800667a:	b90b      	cbnz	r3, 8006680 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800667c:	f7fa fcb8 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006680:	2303      	movs	r3, #3
 8006682:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800668e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006692:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006696:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800669a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80066a2:	f7ff fd69 	bl	8006178 <HAL_GetTick>
 80066a6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 80066ae:	04d9      	lsls	r1, r3, #19
 80066b0:	d56e      	bpl.n	8006790 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80066b2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066b6:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80066ba:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80066be:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066c2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066c6:	e9d5 0300 	ldrd	r0, r3, [r5]
 80066ca:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066cc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80066d0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80066d6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066d8:	430b      	orrs	r3, r1
 80066da:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80066de:	2300      	movs	r3, #0
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80066ee:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80066fa:	f7ff fd43 	bl	8006184 <HAL_Delay>
  tickstart = HAL_GetTick();
 80066fe:	f7ff fd3b 	bl	8006178 <HAL_GetTick>
 8006702:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800670a:	05d2      	lsls	r2, r2, #23
 800670c:	d548      	bpl.n	80067a0 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800670e:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006710:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8006712:	9202      	str	r2, [sp, #8]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	f002 0201 	and.w	r2, r2, #1
 8006722:	9202      	str	r2, [sp, #8]
 8006724:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800672c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006732:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006734:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8006736:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800673a:	f042 0202 	orr.w	r2, r2, #2
 800673e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8006742:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006746:	f042 0204 	orr.w	r2, r2, #4
 800674a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800674e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006752:	f022 0203 	bic.w	r2, r2, #3
 8006756:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800675a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800675e:	430a      	orrs	r2, r1
 8006760:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8006764:	f7ff fd08 	bl	8006178 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006768:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800676a:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800676c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006770:	079b      	lsls	r3, r3, #30
 8006772:	d025      	beq.n	80067c0 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800677a:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800677e:	2b94      	cmp	r3, #148	@ 0x94
 8006780:	d025      	beq.n	80067ce <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006782:	f7ff fcf9 	bl	8006178 <HAL_GetTick>
 8006786:	1b80      	subs	r0, r0, r6
 8006788:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800678c:	d9f2      	bls.n	8006774 <HAL_DSI_Init+0x108>
 800678e:	e014      	b.n	80067ba <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006790:	f7ff fcf2 	bl	8006178 <HAL_GetTick>
 8006794:	1b80      	subs	r0, r0, r6
 8006796:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800679a:	d985      	bls.n	80066a8 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800679c:	2003      	movs	r0, #3
 800679e:	e053      	b.n	8006848 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067a0:	f7ff fcea 	bl	8006178 <HAL_GetTick>
 80067a4:	1b80      	subs	r0, r0, r6
 80067a6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067aa:	d9ab      	bls.n	8006704 <HAL_DSI_Init+0x98>
 80067ac:	e7f6      	b.n	800679c <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067ae:	f7ff fce3 	bl	8006178 <HAL_GetTick>
 80067b2:	1b80      	subs	r0, r0, r6
 80067b4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067b8:	d902      	bls.n	80067c0 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 80067ba:	2300      	movs	r3, #0
 80067bc:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 80067be:	e7ed      	b.n	800679c <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067c6:	f003 0314 	and.w	r3, r3, #20
 80067ca:	2b14      	cmp	r3, #20
 80067cc:	d1ef      	bne.n	80067ae <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067ce:	686b      	ldr	r3, [r5, #4]
 80067d0:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80067d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006850 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 80067d6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067d8:	2b01      	cmp	r3, #1
 80067da:	bf38      	it	cc
 80067dc:	2301      	movcc	r3, #1
 80067de:	435a      	muls	r2, r3
 80067e0:	68ab      	ldr	r3, [r5, #8]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	409a      	lsls	r2, r3
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	434b      	muls	r3, r1
 80067ec:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80067f6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80067fa:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80067fe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006802:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006804:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006806:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800680a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800680e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8006812:	9003      	str	r0, [sp, #12]
 8006814:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8006816:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	f002 0201 	and.w	r2, r2, #1
 8006824:	9203      	str	r2, [sp, #12]
 8006826:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006828:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800682c:	f022 0203 	bic.w	r2, r2, #3
 8006830:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006834:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006838:	430a      	orrs	r2, r1
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8006842:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006844:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8006846:	7463      	strb	r3, [r4, #17]
}
 8006848:	b004      	add	sp, #16
 800684a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800684c:	2001      	movs	r0, #1
 800684e:	e7fb      	b.n	8006848 <HAL_DSI_Init+0x1dc>
 8006850:	003d0900 	.word	0x003d0900

08006854 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8006854:	4770      	bx	lr

08006856 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006856:	6803      	ldr	r3, [r0, #0]
 8006858:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800685c:	07d1      	lsls	r1, r2, #31
{
 800685e:	b510      	push	{r4, lr}
 8006860:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006862:	d508      	bpl.n	8006876 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006864:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006868:	07d2      	lsls	r2, r2, #31
 800686a:	d504      	bpl.n	8006876 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800686c:	2201      	movs	r2, #1
 800686e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8006872:	f7fb faf1 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800687c:	0791      	lsls	r1, r2, #30
 800687e:	d509      	bpl.n	8006894 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006880:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006884:	0792      	lsls	r2, r2, #30
 8006886:	d505      	bpl.n	8006894 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006888:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800688a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800688c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006890:	f7fb fb14 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8006894:	69a3      	ldr	r3, [r4, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d04e      	beq.n	8006938 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80068a0:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 80068a4:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80068a6:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80068aa:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 80068ae:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80068b0:	b291      	uxth	r1, r2
 80068b2:	b119      	cbz	r1, 80068bc <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80068b4:	6961      	ldr	r1, [r4, #20]
 80068b6:	f041 0101 	orr.w	r1, r1, #1
 80068ba:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80068bc:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 80068c0:	d003      	beq.n	80068ca <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80068c2:	6962      	ldr	r2, [r4, #20]
 80068c4:	f042 0202 	orr.w	r2, r2, #2
 80068c8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80068ca:	07d8      	lsls	r0, r3, #31
 80068cc:	d503      	bpl.n	80068d6 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80068ce:	6962      	ldr	r2, [r4, #20]
 80068d0:	f042 0204 	orr.w	r2, r2, #4
 80068d4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80068d6:	0799      	lsls	r1, r3, #30
 80068d8:	d503      	bpl.n	80068e2 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80068da:	6962      	ldr	r2, [r4, #20]
 80068dc:	f042 0208 	orr.w	r2, r2, #8
 80068e0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80068e2:	f013 0f0c 	tst.w	r3, #12
 80068e6:	d003      	beq.n	80068f0 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80068e8:	6962      	ldr	r2, [r4, #20]
 80068ea:	f042 0210 	orr.w	r2, r2, #16
 80068ee:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80068f0:	06da      	lsls	r2, r3, #27
 80068f2:	d503      	bpl.n	80068fc <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80068f4:	6962      	ldr	r2, [r4, #20]
 80068f6:	f042 0220 	orr.w	r2, r2, #32
 80068fa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80068fc:	0698      	lsls	r0, r3, #26
 80068fe:	d503      	bpl.n	8006908 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006900:	6962      	ldr	r2, [r4, #20]
 8006902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006906:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006908:	0659      	lsls	r1, r3, #25
 800690a:	d503      	bpl.n	8006914 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800690c:	6962      	ldr	r2, [r4, #20]
 800690e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006912:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006914:	061a      	lsls	r2, r3, #24
 8006916:	d503      	bpl.n	8006920 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006918:	6962      	ldr	r2, [r4, #20]
 800691a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800691e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006920:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8006924:	d003      	beq.n	800692e <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006926:	6963      	ldr	r3, [r4, #20]
 8006928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800692c:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	b113      	cbz	r3, 8006938 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff ff8e 	bl	8006854 <HAL_DSI_ErrorCallback>
}
 8006938:	bd10      	pop	{r4, pc}

0800693a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800693a:	7c02      	ldrb	r2, [r0, #16]
{
 800693c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800693e:	2a01      	cmp	r2, #1
 8006940:	d00a      	beq.n	8006958 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006942:	6802      	ldr	r2, [r0, #0]
 8006944:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006946:	f020 0003 	bic.w	r0, r0, #3
 800694a:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800694c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800694e:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006950:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006952:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8006954:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006956:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006958:	2002      	movs	r0, #2
}
 800695a:	4770      	bx	lr

0800695c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800695c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800695e:	7c03      	ldrb	r3, [r0, #16]
{
 8006960:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006962:	2b01      	cmp	r3, #1
 8006964:	d069      	beq.n	8006a3a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006966:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006968:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800696a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006972:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800697e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	f022 0203 	bic.w	r2, r2, #3
 8006990:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	4302      	orrs	r2, r0
 8006996:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	f022 0207 	bic.w	r2, r2, #7
 800699e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80069a0:	6958      	ldr	r0, [r3, #20]
 80069a2:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80069a6:	432a      	orrs	r2, r5
 80069a8:	694d      	ldr	r5, [r1, #20]
 80069aa:	432a      	orrs	r2, r5
 80069ac:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80069ae:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80069b0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	f022 020f 	bic.w	r2, r2, #15
 80069b8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	4302      	orrs	r2, r0
 80069be:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80069c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069c4:	f022 020e 	bic.w	r2, r2, #14
 80069c8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80069cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069d0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80069d4:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80069d6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80069da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	0412      	lsls	r2, r2, #16
 80069e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80069e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80069e4:	4302      	orrs	r2, r0
 80069e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80069e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069ec:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80069f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80069f4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80069f8:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80069fc:	432a      	orrs	r2, r5
 80069fe:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006a00:	432a      	orrs	r2, r5
 8006a02:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a04:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a06:	432a      	orrs	r2, r5
 8006a08:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a0a:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a0c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006a10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006a1e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006a2a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a2e:	f042 0202 	orr.w	r2, r2, #2
 8006a32:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8006a36:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006a38:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a3a:	2002      	movs	r0, #2
 8006a3c:	e7fc      	b.n	8006a38 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006a40 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006a40:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a42:	7c03      	ldrb	r3, [r0, #16]
{
 8006a44:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d029      	beq.n	8006a9e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <HAL_DSI_ConfigCommand+0x64>)
 8006a4e:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006a50:	4023      	ands	r3, r4
 8006a52:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006a54:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006a56:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006a5a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006a5c:	688d      	ldr	r5, [r1, #8]
 8006a5e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8006a60:	68cd      	ldr	r5, [r1, #12]
 8006a62:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006a64:	690d      	ldr	r5, [r1, #16]
 8006a66:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006a68:	694d      	ldr	r5, [r1, #20]
 8006a6a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006a6c:	698d      	ldr	r5, [r1, #24]
 8006a6e:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8006a70:	69cd      	ldr	r5, [r1, #28]
 8006a72:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006a74:	6a0d      	ldr	r5, [r1, #32]
 8006a76:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006a78:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006a7a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006a7c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8006a7e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006a80:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006a82:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006a84:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006a86:	4323      	orrs	r3, r4
 8006a88:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006a8a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a8c:	f023 0302 	bic.w	r3, r3, #2
 8006a90:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006a92:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a98:	2000      	movs	r0, #0
 8006a9a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006a9c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	e7fc      	b.n	8006a9c <HAL_DSI_ConfigCommand+0x5c>
 8006aa2:	bf00      	nop
 8006aa4:	fef080ff 	.word	0xfef080ff

08006aa8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006aa8:	7c02      	ldrb	r2, [r0, #16]
{
 8006aaa:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006aac:	2a01      	cmp	r2, #1
 8006aae:	d00a      	beq.n	8006ac6 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006ab0:	6802      	ldr	r2, [r0, #0]
 8006ab2:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006ab4:	f020 001f 	bic.w	r0, r0, #31
 8006ab8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006aba:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006abc:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006abe:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006ac0:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8006ac2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006ac4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006ac6:	2002      	movs	r0, #2
}
 8006ac8:	4770      	bx	lr

08006aca <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006aca:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006acc:	7c03      	ldrb	r3, [r0, #16]
{
 8006ace:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d034      	beq.n	8006b3e <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006ad4:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	bf38      	it	cc
 8006adc:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006ae4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006ae8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006aec:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006af0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006af4:	4302      	orrs	r2, r0
 8006af6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006afa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006afe:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006b02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b06:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006b0a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006b0e:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b10:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006b14:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b16:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b18:	432a      	orrs	r2, r5
 8006b1a:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b1c:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006b22:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b26:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006b2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8006b3a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006b3c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006b3e:	2002      	movs	r0, #2
 8006b40:	e7fc      	b.n	8006b3c <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006b44 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006b44:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b46:	7c03      	ldrb	r3, [r0, #16]
{
 8006b48:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d05b      	beq.n	8006c06 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006b4e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006b50:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006b52:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006b54:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006b56:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006b5a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006b62:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006b64:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006b66:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006b68:	b292      	uxth	r2, r2
 8006b6a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006b6c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006b6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b72:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006b74:	4a25      	ldr	r2, [pc, #148]	@ (8006c0c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006b76:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006b78:	4010      	ands	r0, r2
 8006b7a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006b7c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006b7e:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b80:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006b82:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006b84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b86:	4010      	ands	r0, r2
 8006b88:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b8a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b8c:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b8e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b90:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006b92:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b96:	4010      	ands	r0, r2
 8006b98:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006ba0:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006ba2:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006ba4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006ba8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006bac:	4010      	ands	r0, r2
 8006bae:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006bb2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006bb6:	4328      	orrs	r0, r5
 8006bb8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006bbc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006bc0:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006bc4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006bc8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006bcc:	698d      	ldr	r5, [r1, #24]
 8006bce:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006bd0:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006bd2:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006bd4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006bd8:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006bdc:	4010      	ands	r0, r2
 8006bde:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006be2:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006be6:	4328      	orrs	r0, r5
 8006be8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006bec:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006bf0:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bf2:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8006c02:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006c04:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c06:	2002      	movs	r0, #2
 8006c08:	e7fc      	b.n	8006c04 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006c0a:	bf00      	nop
 8006c0c:	ffff0000 	.word	0xffff0000

08006c10 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c10:	7c03      	ldrb	r3, [r0, #16]
{
 8006c12:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d01c      	beq.n	8006c52 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006c18:	6802      	ldr	r2, [r0, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6851      	ldr	r1, [r2, #4]
 8006c20:	f041 0101 	orr.w	r1, r1, #1
 8006c24:	6051      	str	r1, [r2, #4]
 8006c26:	6851      	ldr	r1, [r2, #4]
 8006c28:	f001 0101 	and.w	r1, r1, #1
 8006c2c:	9100      	str	r1, [sp, #0]
 8006c2e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8006c36:	f041 0108 	orr.w	r1, r1, #8
 8006c3a:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8006c3e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c42:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006c44:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c46:	f002 0208 	and.w	r2, r2, #8
 8006c4a:	9201      	str	r2, [sp, #4]
 8006c4c:	9a01      	ldr	r2, [sp, #4]
}
 8006c4e:	b002      	add	sp, #8
 8006c50:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c52:	2002      	movs	r0, #2
 8006c54:	e7fb      	b.n	8006c4e <HAL_DSI_Start+0x3e>

08006c56 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c56:	7c02      	ldrb	r2, [r0, #16]
{
 8006c58:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	d009      	beq.n	8006c72 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006c5e:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c60:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006c62:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8006c66:	f042 0204 	orr.w	r2, r2, #4
 8006c6a:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8006c6e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006c70:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c72:	2002      	movs	r0, #2
}
 8006c74:	4770      	bx	lr

08006c76 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c78:	7c05      	ldrb	r5, [r0, #16]
{
 8006c7a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006c7c:	2d01      	cmp	r5, #1
 8006c7e:	d009      	beq.n	8006c94 <HAL_DSI_ShortWrite+0x1e>
 8006c80:	2501      	movs	r5, #1
 8006c82:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006c84:	9d06      	ldr	r5, [sp, #24]
 8006c86:	9500      	str	r5, [sp, #0]
 8006c88:	f7ff fc6c 	bl	8006564 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006c90:	b003      	add	sp, #12
 8006c92:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c94:	2002      	movs	r0, #2
 8006c96:	e7fb      	b.n	8006c90 <HAL_DSI_ShortWrite+0x1a>

08006c98 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8006c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c9e:	7c03      	ldrb	r3, [r0, #16]
{
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006ca4:	2b01      	cmp	r3, #1
{
 8006ca6:	4615      	mov	r5, r2
 8006ca8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006cac:	d052      	beq.n	8006d54 <HAL_DSI_LongWrite+0xbc>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cb2:	f7ff fa61 	bl	8006178 <HAL_GetTick>
 8006cb6:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006cb8:	6832      	ldr	r2, [r6, #0]
 8006cba:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006cbc:	f013 0a01 	ands.w	sl, r3, #1
 8006cc0:	d019      	beq.n	8006cf6 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006cc2:	2c03      	cmp	r4, #3
 8006cc4:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006cc6:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006cca:	bf28      	it	cs
 8006ccc:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006cce:	4283      	cmp	r3, r0
 8006cd0:	d11d      	bne.n	8006d0e <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006cd2:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006cd4:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006cd6:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006cda:	bb10      	cbnz	r0, 8006d22 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006cdc:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006cde:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006ce2:	0223      	lsls	r3, r4, #8
 8006ce4:	0224      	lsls	r4, r4, #8
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006cec:	431d      	orrs	r5, r3
 8006cee:	4325      	orrs	r5, r4
 8006cf0:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cf2:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006cf4:	e009      	b.n	8006d0a <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006cf6:	f7ff fa3f 	bl	8006178 <HAL_GetTick>
 8006cfa:	eba0 000b 	sub.w	r0, r0, fp
 8006cfe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d02:	d9d9      	bls.n	8006cb8 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006d04:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006d06:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006d0e:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006d12:	3301      	adds	r3, #1
 8006d14:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006d18:	fa01 f10c 	lsl.w	r1, r1, ip
 8006d1c:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006d20:	e7d5      	b.n	8006cce <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d22:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006d24:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d28:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006d2a:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d2c:	bf28      	it	cs
 8006d2e:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d32:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006d36:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006d3a:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d3c:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006d40:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d42:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006d46:	d1f4      	bne.n	8006d32 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006d48:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006d4c:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006d4e:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006d52:	e7c2      	b.n	8006cda <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006d54:	2002      	movs	r0, #2
 8006d56:	e7d8      	b.n	8006d0a <HAL_DSI_LongWrite+0x72>

08006d58 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d5e:	7c03      	ldrb	r3, [r0, #16]
{
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006d64:	2b01      	cmp	r3, #1
{
 8006d66:	4617      	mov	r7, r2
 8006d68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006d6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006d70:	d06f      	beq.n	8006e52 <HAL_DSI_Read+0xfa>
 8006d72:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006d74:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006d76:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006d78:	d90d      	bls.n	8006d96 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006d7a:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006d7e:	2237      	movs	r2, #55	@ 0x37
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	b2f3      	uxtb	r3, r6
 8006d84:	f7ff fbee 	bl	8006564 <DSI_ShortWrite.constprop.0>
 8006d88:	b128      	cbz	r0, 8006d96 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006d8a:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006d8c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006d8e:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006d90:	b003      	add	sp, #12
 8006d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006d96:	f1b9 0f06 	cmp.w	r9, #6
 8006d9a:	d10f      	bne.n	8006dbc <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006d9e:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006da6:	f043 0306 	orr.w	r3, r3, #6
 8006daa:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006dac:	f7ff f9e4 	bl	8006178 <HAL_GetTick>
 8006db0:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	dc27      	bgt.n	8006e06 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006db6:	2000      	movs	r0, #0
 8006db8:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006dba:	e7e9      	b.n	8006d90 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006dbc:	f1b9 0f04 	cmp.w	r9, #4
 8006dc0:	d105      	bne.n	8006dce <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dc2:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006dc4:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dc6:	f044 0404 	orr.w	r4, r4, #4
 8006dca:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006dcc:	e7ee      	b.n	8006dac <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006dce:	f1b9 0f14 	cmp.w	r9, #20
 8006dd2:	d108      	bne.n	8006de6 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006dd4:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dd8:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006dda:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006ddc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006de0:	f044 0414 	orr.w	r4, r4, #20
 8006de4:	e7f1      	b.n	8006dca <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006de6:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006dea:	d1ce      	bne.n	8006d8a <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006dec:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006df0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006df2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006df4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006df8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dfc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006e00:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006e04:	e7e1      	b.n	8006dca <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006e06:	682a      	ldr	r2, [r5, #0]
 8006e08:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006e0a:	f013 0310 	ands.w	r3, r3, #16
 8006e0e:	d10d      	bne.n	8006e2c <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e10:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006e12:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e14:	4632      	mov	r2, r6
 8006e16:	bf28      	it	cs
 8006e18:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006e1a:	00d9      	lsls	r1, r3, #3
 8006e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8006e20:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006e22:	3301      	adds	r3, #1
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d1f8      	bne.n	8006e1a <HAL_DSI_Read+0xc2>
        pdata++;
 8006e28:	4417      	add	r7, r2
        datasize--;
 8006e2a:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e2c:	f7ff f9a4 	bl	8006178 <HAL_GetTick>
 8006e30:	1b00      	subs	r0, r0, r4
 8006e32:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006e36:	d903      	bls.n	8006e40 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006e38:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006e3a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006e3c:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006e3e:	e7a7      	b.n	8006d90 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006e44:	0652      	lsls	r2, r2, #25
 8006e46:	d4b4      	bmi.n	8006db2 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006e4c:	069b      	lsls	r3, r3, #26
 8006e4e:	d49c      	bmi.n	8006d8a <HAL_DSI_Read+0x32>
 8006e50:	e7af      	b.n	8006db2 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006e52:	2002      	movs	r0, #2
 8006e54:	e79c      	b.n	8006d90 <HAL_DSI_Read+0x38>

08006e56 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e56:	7c02      	ldrb	r2, [r0, #16]
{
 8006e58:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006e5a:	2a01      	cmp	r2, #1
 8006e5c:	d00f      	beq.n	8006e7e <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006e5e:	6802      	ldr	r2, [r0, #0]
 8006e60:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006e64:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006e68:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006e6c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006e70:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e74:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006e76:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006e7a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006e7c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e7e:	2002      	movs	r0, #2
}
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006e88:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e8a:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8007050 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e8e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e92:	680a      	ldr	r2, [r1, #0]
 8006e94:	fa32 f503 	lsrs.w	r5, r2, r3
 8006e98:	d102      	bne.n	8006ea0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006e9a:	b003      	add	sp, #12
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ea0:	2501      	movs	r5, #1
 8006ea2:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006ea6:	ea18 0202 	ands.w	r2, r8, r2
 8006eaa:	f000 80bb 	beq.w	8007024 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006eae:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eb0:	2703      	movs	r7, #3
 8006eb2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006eb6:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eba:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ebe:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ec0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ec4:	2f01      	cmp	r7, #1
 8006ec6:	d834      	bhi.n	8006f32 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006ec8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eca:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ece:	68cf      	ldr	r7, [r1, #12]
 8006ed0:	fa07 f70e 	lsl.w	r7, r7, lr
 8006ed4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006ed8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006eda:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006edc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ee0:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006ee4:	409f      	lsls	r7, r3
 8006ee6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006eea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006eec:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eee:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ef0:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ef4:	688f      	ldr	r7, [r1, #8]
 8006ef6:	fa07 f70e 	lsl.w	r7, r7, lr
 8006efa:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006efe:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f00:	d119      	bne.n	8006f36 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006f02:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f06:	f003 0a07 	and.w	sl, r3, #7
 8006f0a:	f04f 0b0f 	mov.w	fp, #15
 8006f0e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006f12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006f16:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f1a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006f1e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f22:	690f      	ldr	r7, [r1, #16]
 8006f24:	fa07 f70a 	lsl.w	r7, r7, sl
 8006f28:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006f2c:	f8c8 7020 	str.w	r7, [r8, #32]
 8006f30:	e001      	b.n	8006f36 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f32:	2d03      	cmp	r5, #3
 8006f34:	d1da      	bne.n	8006eec <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006f36:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f38:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f3c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f40:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f44:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006f48:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f4a:	d06b      	beq.n	8007024 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f4c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006f50:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f54:	f003 0c03 	and.w	ip, r3, #3
 8006f58:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f5c:	f045 0502 	orr.w	r5, r5, #2
 8006f60:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f68:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006f6c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006f70:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f74:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f78:	f005 0502 	and.w	r5, r5, #2
 8006f7c:	9501      	str	r5, [sp, #4]
 8006f7e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f80:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f82:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f86:	4d31      	ldr	r5, [pc, #196]	@ (800704c <HAL_GPIO_Init+0x1c8>)
 8006f88:	42a8      	cmp	r0, r5
 8006f8a:	d04d      	beq.n	8007028 <HAL_GPIO_Init+0x1a4>
 8006f8c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f90:	42a8      	cmp	r0, r5
 8006f92:	d04b      	beq.n	800702c <HAL_GPIO_Init+0x1a8>
 8006f94:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f98:	42a8      	cmp	r0, r5
 8006f9a:	d049      	beq.n	8007030 <HAL_GPIO_Init+0x1ac>
 8006f9c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fa0:	42a8      	cmp	r0, r5
 8006fa2:	d047      	beq.n	8007034 <HAL_GPIO_Init+0x1b0>
 8006fa4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fa8:	42a8      	cmp	r0, r5
 8006faa:	d045      	beq.n	8007038 <HAL_GPIO_Init+0x1b4>
 8006fac:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fb0:	42a8      	cmp	r0, r5
 8006fb2:	d043      	beq.n	800703c <HAL_GPIO_Init+0x1b8>
 8006fb4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fb8:	42a8      	cmp	r0, r5
 8006fba:	d041      	beq.n	8007040 <HAL_GPIO_Init+0x1bc>
 8006fbc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fc0:	42a8      	cmp	r0, r5
 8006fc2:	d03f      	beq.n	8007044 <HAL_GPIO_Init+0x1c0>
 8006fc4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fc8:	42a8      	cmp	r0, r5
 8006fca:	d03d      	beq.n	8007048 <HAL_GPIO_Init+0x1c4>
 8006fcc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fd0:	42a8      	cmp	r0, r5
 8006fd2:	bf14      	ite	ne
 8006fd4:	250a      	movne	r5, #10
 8006fd6:	2509      	moveq	r5, #9
 8006fd8:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fdc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fe0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fe4:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006fe6:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8006fea:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006fec:	bf0c      	ite	eq
 8006fee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006ff0:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ff2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8006ff6:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006ff8:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8006ffa:	bf0c      	ite	eq
 8006ffc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006ffe:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007000:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007004:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007006:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800700a:	bf0c      	ite	eq
 800700c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800700e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007010:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007012:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007016:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800701a:	bf54      	ite	pl
 800701c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800701e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007020:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007024:	3301      	adds	r3, #1
 8007026:	e734      	b.n	8006e92 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007028:	2500      	movs	r5, #0
 800702a:	e7d5      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 800702c:	2501      	movs	r5, #1
 800702e:	e7d3      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007030:	2502      	movs	r5, #2
 8007032:	e7d1      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007034:	2503      	movs	r5, #3
 8007036:	e7cf      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007038:	2504      	movs	r5, #4
 800703a:	e7cd      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 800703c:	2505      	movs	r5, #5
 800703e:	e7cb      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007040:	2506      	movs	r5, #6
 8007042:	e7c9      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007044:	2507      	movs	r5, #7
 8007046:	e7c7      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 8007048:	2508      	movs	r5, #8
 800704a:	e7c5      	b.n	8006fd8 <HAL_GPIO_Init+0x154>
 800704c:	58020000 	.word	0x58020000
 8007050:	58024400 	.word	0x58024400

08007054 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007058:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800705a:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800705e:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007062:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007066:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800706a:	fa31 f302 	lsrs.w	r3, r1, r2
 800706e:	d101      	bne.n	8007074 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007074:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007078:	ea1c 0601 	ands.w	r6, ip, r1
 800707c:	d070      	beq.n	8007160 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800707e:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007082:	f002 0703 	and.w	r7, r2, #3
 8007086:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800708a:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800708c:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007090:	fa08 f907 	lsl.w	r9, r8, r7
 8007094:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007098:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800709c:	4b3a      	ldr	r3, [pc, #232]	@ (8007188 <HAL_GPIO_DeInit+0x134>)
 800709e:	4298      	cmp	r0, r3
 80070a0:	d060      	beq.n	8007164 <HAL_GPIO_DeInit+0x110>
 80070a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070a6:	4298      	cmp	r0, r3
 80070a8:	d05e      	beq.n	8007168 <HAL_GPIO_DeInit+0x114>
 80070aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ae:	4298      	cmp	r0, r3
 80070b0:	d05c      	beq.n	800716c <HAL_GPIO_DeInit+0x118>
 80070b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070b6:	4298      	cmp	r0, r3
 80070b8:	d05a      	beq.n	8007170 <HAL_GPIO_DeInit+0x11c>
 80070ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070be:	4298      	cmp	r0, r3
 80070c0:	d058      	beq.n	8007174 <HAL_GPIO_DeInit+0x120>
 80070c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070c6:	4298      	cmp	r0, r3
 80070c8:	d056      	beq.n	8007178 <HAL_GPIO_DeInit+0x124>
 80070ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ce:	4298      	cmp	r0, r3
 80070d0:	d054      	beq.n	800717c <HAL_GPIO_DeInit+0x128>
 80070d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070d6:	4298      	cmp	r0, r3
 80070d8:	d052      	beq.n	8007180 <HAL_GPIO_DeInit+0x12c>
 80070da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070de:	4298      	cmp	r0, r3
 80070e0:	d050      	beq.n	8007184 <HAL_GPIO_DeInit+0x130>
 80070e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070e6:	4298      	cmp	r0, r3
 80070e8:	bf0c      	ite	eq
 80070ea:	2309      	moveq	r3, #9
 80070ec:	230a      	movne	r3, #10
 80070ee:	40bb      	lsls	r3, r7
 80070f0:	4573      	cmp	r3, lr
 80070f2:	d117      	bne.n	8007124 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80070f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80070f8:	ea23 0306 	bic.w	r3, r3, r6
 80070fc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007100:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007104:	ea23 0306 	bic.w	r3, r3, r6
 8007108:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	ea23 0306 	bic.w	r3, r3, r6
 8007112:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	ea23 0306 	bic.w	r3, r3, r6
 800711a:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800711c:	68ab      	ldr	r3, [r5, #8]
 800711e:	ea23 0309 	bic.w	r3, r3, r9
 8007122:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007124:	0053      	lsls	r3, r2, #1
 8007126:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007128:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800712a:	fa0b f303 	lsl.w	r3, fp, r3
 800712e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007132:	431d      	orrs	r5, r3
 8007134:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007136:	f002 0507 	and.w	r5, r2, #7
 800713a:	6a37      	ldr	r7, [r6, #32]
 800713c:	00ad      	lsls	r5, r5, #2
 800713e:	fa08 f505 	lsl.w	r5, r8, r5
 8007142:	ea27 0705 	bic.w	r7, r7, r5
 8007146:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007148:	68c5      	ldr	r5, [r0, #12]
 800714a:	ea25 0503 	bic.w	r5, r5, r3
 800714e:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007150:	6845      	ldr	r5, [r0, #4]
 8007152:	ea25 050c 	bic.w	r5, r5, ip
 8007156:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007158:	6885      	ldr	r5, [r0, #8]
 800715a:	ea25 0303 	bic.w	r3, r5, r3
 800715e:	6083      	str	r3, [r0, #8]
    position++;
 8007160:	3201      	adds	r2, #1
 8007162:	e782      	b.n	800706a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007164:	2300      	movs	r3, #0
 8007166:	e7c2      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007168:	2301      	movs	r3, #1
 800716a:	e7c0      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 800716c:	2302      	movs	r3, #2
 800716e:	e7be      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007170:	2303      	movs	r3, #3
 8007172:	e7bc      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007174:	2304      	movs	r3, #4
 8007176:	e7ba      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007178:	2305      	movs	r3, #5
 800717a:	e7b8      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 800717c:	2306      	movs	r3, #6
 800717e:	e7b6      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007180:	2307      	movs	r3, #7
 8007182:	e7b4      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007184:	2308      	movs	r3, #8
 8007186:	e7b2      	b.n	80070ee <HAL_GPIO_DeInit+0x9a>
 8007188:	58020000 	.word	0x58020000

0800718c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800718c:	6903      	ldr	r3, [r0, #16]
 800718e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007190:	bf14      	ite	ne
 8007192:	2001      	movne	r0, #1
 8007194:	2000      	moveq	r0, #0
 8007196:	4770      	bx	lr

08007198 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007198:	b10a      	cbz	r2, 800719e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800719a:	6181      	str	r1, [r0, #24]
  }
}
 800719c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800719e:	0409      	lsls	r1, r1, #16
 80071a0:	e7fb      	b.n	800719a <HAL_GPIO_WritePin+0x2>

080071a2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071a2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071a4:	ea01 0203 	and.w	r2, r1, r3
 80071a8:	ea21 0103 	bic.w	r1, r1, r3
 80071ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071b0:	6181      	str	r1, [r0, #24]
}
 80071b2:	4770      	bx	lr

080071b4 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <HAL_HSEM_FastTake+0x14>)
 80071b6:	3020      	adds	r0, #32
 80071b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80071bc:	4b03      	ldr	r3, [pc, #12]	@ (80071cc <HAL_HSEM_FastTake+0x18>)
 80071be:	1ac0      	subs	r0, r0, r3
 80071c0:	bf18      	it	ne
 80071c2:	2001      	movne	r0, #1
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58026400 	.word	0x58026400
 80071cc:	80000300 	.word	0x80000300

080071d0 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80071d0:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80071d4:	4b01      	ldr	r3, [pc, #4]	@ (80071dc <HAL_HSEM_Release+0xc>)
 80071d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80071da:	4770      	bx	lr
 80071dc:	58026400 	.word	0x58026400

080071e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071e0:	6803      	ldr	r3, [r0, #0]
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	0791      	lsls	r1, r2, #30
 80071e6:	d501      	bpl.n	80071ec <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	07d2      	lsls	r2, r2, #31
 80071f0:	d403      	bmi.n	80071fa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	f042 0201 	orr.w	r2, r2, #1
 80071f8:	619a      	str	r2, [r3, #24]
  }
}
 80071fa:	4770      	bx	lr

080071fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071fc:	b530      	push	{r4, r5, lr}
 80071fe:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007200:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007204:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007206:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007208:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800720a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800720e:	4a05      	ldr	r2, [pc, #20]	@ (8007224 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007210:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007212:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800721a:	ea20 0002 	bic.w	r0, r0, r2
 800721e:	4303      	orrs	r3, r0
 8007220:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007222:	bd30      	pop	{r4, r5, pc}
 8007224:	03ff63ff 	.word	0x03ff63ff

08007228 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007228:	6803      	ldr	r3, [r0, #0]
{
 800722a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800722e:	699c      	ldr	r4, [r3, #24]
{
 8007230:	4605      	mov	r5, r0
 8007232:	460f      	mov	r7, r1
 8007234:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007236:	f014 0410 	ands.w	r4, r4, #16
 800723a:	d06f      	beq.n	800731c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800723c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007240:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007242:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	0690      	lsls	r0, r2, #26
 800724a:	d461      	bmi.n	8007310 <I2C_IsErrorOccurred+0xe8>
 800724c:	f1b8 0f00 	cmp.w	r8, #0
 8007250:	d035      	beq.n	80072be <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8007252:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8007256:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007258:	682e      	ldr	r6, [r5, #0]
 800725a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800725c:	05d9      	lsls	r1, r3, #23
 800725e:	d505      	bpl.n	800726c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007260:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007264:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007268:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800726a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800726c:	055a      	lsls	r2, r3, #21
 800726e:	d505      	bpl.n	800727c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007274:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007278:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800727a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	d54f      	bpl.n	8007320 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007280:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007284:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007288:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800728a:	4628      	mov	r0, r5
 800728c:	f7ff ffa8 	bl	80071e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007290:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8007292:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007294:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007298:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800729c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80072a6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80072a8:	4323      	orrs	r3, r4
 80072aa:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072ac:	2320      	movs	r3, #32
 80072ae:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80072b8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80072bc:	e032      	b.n	8007324 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80072be:	1c7a      	adds	r2, r7, #1
 80072c0:	d0c1      	beq.n	8007246 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fe ff59 	bl	8006178 <HAL_GetTick>
 80072c6:	1b80      	subs	r0, r0, r6
 80072c8:	42b8      	cmp	r0, r7
 80072ca:	d801      	bhi.n	80072d0 <I2C_IsErrorOccurred+0xa8>
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	d1b9      	bne.n	8007244 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80072d4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072d8:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80072da:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072dc:	0400      	lsls	r0, r0, #16
 80072de:	d50a      	bpl.n	80072f6 <I2C_IsErrorOccurred+0xce>
 80072e0:	0449      	lsls	r1, r1, #17
 80072e2:	d408      	bmi.n	80072f6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80072e4:	2a20      	cmp	r2, #32
 80072e6:	d006      	beq.n	80072f6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072ee:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80072f0:	f7fe ff42 	bl	8006178 <HAL_GetTick>
 80072f4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	069b      	lsls	r3, r3, #26
 80072fc:	d4a2      	bmi.n	8007244 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072fe:	f7fe ff3b 	bl	8006178 <HAL_GetTick>
 8007302:	1b80      	subs	r0, r0, r6
 8007304:	2819      	cmp	r0, #25
 8007306:	d9f6      	bls.n	80072f6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007308:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800730a:	f04f 0801 	mov.w	r8, #1
 800730e:	e799      	b.n	8007244 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007310:	f1b8 0f00 	cmp.w	r8, #0
 8007314:	d19d      	bne.n	8007252 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007316:	2220      	movs	r2, #32
 8007318:	61da      	str	r2, [r3, #28]
 800731a:	e79a      	b.n	8007252 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	4620      	mov	r0, r4
 800731e:	e79b      	b.n	8007258 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007320:	2800      	cmp	r0, #0
 8007322:	d1b2      	bne.n	800728a <I2C_IsErrorOccurred+0x62>
}
 8007324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007328 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	460d      	mov	r5, r1
 800732e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	079b      	lsls	r3, r3, #30
 8007336:	d501      	bpl.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007338:	2000      	movs	r0, #0
 800733a:	e01f      	b.n	800737c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800733c:	4632      	mov	r2, r6
 800733e:	4629      	mov	r1, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff ff71 	bl	8007228 <I2C_IsErrorOccurred>
 8007346:	b9c0      	cbnz	r0, 800737a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007348:	1c6a      	adds	r2, r5, #1
 800734a:	d0f1      	beq.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734c:	f7fe ff14 	bl	8006178 <HAL_GetTick>
 8007350:	1b80      	subs	r0, r0, r6
 8007352:	42a8      	cmp	r0, r5
 8007354:	d801      	bhi.n	800735a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007356:	2d00      	cmp	r5, #0
 8007358:	d1ea      	bne.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f013 0302 	ands.w	r3, r3, #2
 8007362:	d1e5      	bne.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007364:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8007366:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800736a:	f042 0220 	orr.w	r2, r2, #32
 800736e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007370:	2220      	movs	r2, #32
 8007372:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007376:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800737a:	2001      	movs	r0, #1
}
 800737c:	bd70      	pop	{r4, r5, r6, pc}

0800737e <I2C_WaitOnFlagUntilTimeout>:
{
 800737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007386:	4604      	mov	r4, r0
 8007388:	460f      	mov	r7, r1
 800738a:	4616      	mov	r6, r2
 800738c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	ea37 0303 	bics.w	r3, r7, r3
 8007396:	bf0c      	ite	eq
 8007398:	2301      	moveq	r3, #1
 800739a:	2300      	movne	r3, #0
 800739c:	42b3      	cmp	r3, r6
 800739e:	d001      	beq.n	80073a4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80073a0:	2000      	movs	r0, #0
 80073a2:	e025      	b.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a4:	4642      	mov	r2, r8
 80073a6:	4629      	mov	r1, r5
 80073a8:	4620      	mov	r0, r4
 80073aa:	f7ff ff3d 	bl	8007228 <I2C_IsErrorOccurred>
 80073ae:	b9f0      	cbnz	r0, 80073ee <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80073b0:	1c6b      	adds	r3, r5, #1
 80073b2:	d0ec      	beq.n	800738e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b4:	f7fe fee0 	bl	8006178 <HAL_GetTick>
 80073b8:	eba0 0008 	sub.w	r0, r0, r8
 80073bc:	42a8      	cmp	r0, r5
 80073be:	d801      	bhi.n	80073c4 <I2C_WaitOnFlagUntilTimeout+0x46>
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	d1e4      	bne.n	800738e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	ea37 0303 	bics.w	r3, r7, r3
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	42b3      	cmp	r3, r6
 80073d4:	d1db      	bne.n	800738e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073de:	2320      	movs	r3, #32
 80073e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80073ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80073ee:	2001      	movs	r0, #1
}
 80073f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	069b      	lsls	r3, r3, #26
 8007402:	d501      	bpl.n	8007408 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007404:	2000      	movs	r0, #0
 8007406:	e01d      	b.n	8007444 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007408:	4632      	mov	r2, r6
 800740a:	4629      	mov	r1, r5
 800740c:	4620      	mov	r0, r4
 800740e:	f7ff ff0b 	bl	8007228 <I2C_IsErrorOccurred>
 8007412:	b9b0      	cbnz	r0, 8007442 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007414:	f7fe feb0 	bl	8006178 <HAL_GetTick>
 8007418:	1b80      	subs	r0, r0, r6
 800741a:	42a8      	cmp	r0, r5
 800741c:	d801      	bhi.n	8007422 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800741e:	2d00      	cmp	r5, #0
 8007420:	d1ec      	bne.n	80073fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f013 0320 	ands.w	r3, r3, #32
 800742a:	d1e7      	bne.n	80073fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800742c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800742e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	f042 0220 	orr.w	r2, r2, #32
 8007436:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007438:	2220      	movs	r2, #32
 800743a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800743e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007442:	2001      	movs	r0, #1
}
 8007444:	bd70      	pop	{r4, r5, r6, pc}

08007446 <HAL_I2C_MspInit>:
}
 8007446:	4770      	bx	lr

08007448 <HAL_I2C_Init>:
{
 8007448:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800744a:	4604      	mov	r4, r0
 800744c:	2800      	cmp	r0, #0
 800744e:	d04e      	beq.n	80074ee <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007450:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007454:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007458:	b91b      	cbnz	r3, 8007462 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800745a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800745e:	f7ff fff2 	bl	8007446 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007462:	2324      	movs	r3, #36	@ 0x24
 8007464:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007478:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007480:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007482:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007486:	2901      	cmp	r1, #1
 8007488:	d106      	bne.n	8007498 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800748a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800748e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007496:	e007      	b.n	80074a8 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007498:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800749c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800749e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074a0:	d1f6      	bne.n	8007490 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074a8:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074aa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80074b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074b6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074be:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074c0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80074c4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074c6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80074cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074ce:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80074de:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074e6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80074ec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7fc      	b.n	80074ec <HAL_I2C_Init+0xa4>

080074f2 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80074f2:	4770      	bx	lr

080074f4 <HAL_I2C_DeInit>:
{
 80074f4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80074f6:	4604      	mov	r4, r0
 80074f8:	b198      	cbz	r0, 8007522 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80074fa:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074fc:	2324      	movs	r3, #36	@ 0x24
 80074fe:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007502:	6813      	ldr	r3, [r2, #0]
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800750a:	f7ff fff2 	bl	80074f2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750e:	2000      	movs	r0, #0
 8007510:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007512:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007516:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800751a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800751c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007520:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007522:	2001      	movs	r0, #1
 8007524:	e7fc      	b.n	8007520 <HAL_I2C_DeInit+0x2c>
	...

08007528 <HAL_I2C_Mem_Write>:
{
 8007528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800752e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007532:	4604      	mov	r4, r0
 8007534:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007536:	2b20      	cmp	r3, #32
{
 8007538:	4616      	mov	r6, r2
 800753a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800753e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007542:	f040 80c6 	bne.w	80076d2 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007548:	b113      	cbz	r3, 8007550 <HAL_I2C_Mem_Write+0x28>
 800754a:	f1ba 0f00 	cmp.w	sl, #0
 800754e:	d106      	bne.n	800755e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007554:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007556:	2001      	movs	r0, #1
}
 8007558:	b003      	add	sp, #12
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800755e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007562:	2b01      	cmp	r3, #1
 8007564:	f000 80b5 	beq.w	80076d2 <HAL_I2C_Mem_Write+0x1aa>
 8007568:	f04f 0b01 	mov.w	fp, #1
 800756c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007570:	f7fe fe02 	bl	8006178 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007574:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007576:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007578:	9000      	str	r0, [sp, #0]
 800757a:	465a      	mov	r2, fp
 800757c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff fefc 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 8007586:	2800      	cmp	r0, #0
 8007588:	d1e5      	bne.n	8007556 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800758a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800758c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800758e:	fa5f f289 	uxtb.w	r2, r9
 8007592:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007594:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007598:	2340      	movs	r3, #64	@ 0x40
 800759a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800759e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a0:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075a2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80075a4:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075a6:	4b4c      	ldr	r3, [pc, #304]	@ (80076d8 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80075a8:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075b2:	f7ff fe23 	bl	80071fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b6:	462a      	mov	r2, r5
 80075b8:	4641      	mov	r1, r8
 80075ba:	4620      	mov	r0, r4
 80075bc:	f7ff feb4 	bl	8007328 <I2C_WaitOnTXISFlagUntilTimeout>
 80075c0:	bb18      	cbnz	r0, 800760a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075c2:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075c6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075c8:	d115      	bne.n	80075f6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075ca:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075cc:	2200      	movs	r2, #0
 80075ce:	2180      	movs	r1, #128	@ 0x80
 80075d0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075d2:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075d4:	4643      	mov	r3, r8
 80075d6:	9500      	str	r5, [sp, #0]
 80075d8:	f7ff fed1 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 80075dc:	b9a8      	cbnz	r0, 800760a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2bff      	cmp	r3, #255	@ 0xff
 80075e4:	d815      	bhi.n	8007612 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80075e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80075ec:	b292      	uxth	r2, r2
 80075ee:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	9000      	str	r0, [sp, #0]
 80075f4:	e012      	b.n	800761c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075f6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075f8:	4641      	mov	r1, r8
 80075fa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fe:	462a      	mov	r2, r5
 8007600:	f7ff fe92 	bl	8007328 <I2C_WaitOnTXISFlagUntilTimeout>
 8007604:	b908      	cbnz	r0, 800760a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	e7df      	b.n	80075ca <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007610:	e7a1      	b.n	8007556 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007612:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007618:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800761a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800761c:	4639      	mov	r1, r7
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff fdec 	bl	80071fc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007624:	462a      	mov	r2, r5
 8007626:	4641      	mov	r1, r8
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff fe7d 	bl	8007328 <I2C_WaitOnTXISFlagUntilTimeout>
 800762e:	2800      	cmp	r0, #0
 8007630:	d191      	bne.n	8007556 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007632:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	f813 1b01 	ldrb.w	r1, [r3], #1
 800763a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800763c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800763e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007640:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007642:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007644:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007646:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007648:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800764a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800764c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800764e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007650:	b29b      	uxth	r3, r3
 8007652:	b1b3      	cbz	r3, 8007682 <HAL_I2C_Mem_Write+0x15a>
 8007654:	b9aa      	cbnz	r2, 8007682 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007656:	4643      	mov	r3, r8
 8007658:	2180      	movs	r1, #128	@ 0x80
 800765a:	4620      	mov	r0, r4
 800765c:	9500      	str	r5, [sp, #0]
 800765e:	f7ff fe8e 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 8007662:	2800      	cmp	r0, #0
 8007664:	f47f af77 	bne.w	8007556 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007668:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	2bff      	cmp	r3, #255	@ 0xff
 800766e:	d928      	bls.n	80076c2 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007670:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007672:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007676:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007678:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800767a:	4639      	mov	r1, r7
 800767c:	4620      	mov	r0, r4
 800767e:	f7ff fdbd 	bl	80071fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007682:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1cc      	bne.n	8007624 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768a:	462a      	mov	r2, r5
 800768c:	4641      	mov	r1, r8
 800768e:	4620      	mov	r0, r4
 8007690:	f7ff feb0 	bl	80073f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007694:	2800      	cmp	r0, #0
 8007696:	f47f af5e 	bne.w	8007556 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	2120      	movs	r1, #32
 800769e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80076a6:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80076aa:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80076ae:	f022 0201 	bic.w	r2, r2, #1
 80076b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076b4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80076b8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076bc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80076c0:	e74a      	b.n	8007558 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80076c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80076c8:	b292      	uxth	r2, r2
 80076ca:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	9000      	str	r0, [sp, #0]
 80076d0:	e7d3      	b.n	800767a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80076d2:	2002      	movs	r0, #2
 80076d4:	e740      	b.n	8007558 <HAL_I2C_Mem_Write+0x30>
 80076d6:	bf00      	nop
 80076d8:	80002000 	.word	0x80002000

080076dc <HAL_I2C_Mem_Read>:
{
 80076dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80076e6:	4604      	mov	r4, r0
 80076e8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ea:	2b20      	cmp	r3, #32
{
 80076ec:	4616      	mov	r6, r2
 80076ee:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80076f2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f6:	f040 80c9 	bne.w	800788c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80076fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076fc:	b113      	cbz	r3, 8007704 <HAL_I2C_Mem_Read+0x28>
 80076fe:	f1ba 0f00 	cmp.w	sl, #0
 8007702:	d106      	bne.n	8007712 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007708:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800770a:	2001      	movs	r0, #1
}
 800770c:	b003      	add	sp, #12
 800770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007712:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007716:	2b01      	cmp	r3, #1
 8007718:	f000 80b8 	beq.w	800788c <HAL_I2C_Mem_Read+0x1b0>
 800771c:	f04f 0b01 	mov.w	fp, #1
 8007720:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007724:	f7fe fd28 	bl	8006178 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007728:	2319      	movs	r3, #25
 800772a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800772c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800772e:	465a      	mov	r2, fp
 8007730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007734:	4620      	mov	r0, r4
 8007736:	f7ff fe22 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	d1e4      	bne.n	800770a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007740:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8007742:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007744:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007746:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800774a:	2240      	movs	r2, #64	@ 0x40
 800774c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007750:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007752:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007754:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007756:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007758:	4a4d      	ldr	r2, [pc, #308]	@ (8007890 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800775a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800775e:	9200      	str	r2, [sp, #0]
 8007760:	fa5f f289 	uxtb.w	r2, r9
 8007764:	f7ff fd4a 	bl	80071fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007768:	462a      	mov	r2, r5
 800776a:	4641      	mov	r1, r8
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff fddb 	bl	8007328 <I2C_WaitOnTXISFlagUntilTimeout>
 8007772:	bb20      	cbnz	r0, 80077be <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007774:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007778:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800777a:	d116      	bne.n	80077aa <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800777c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	2200      	movs	r2, #0
 8007780:	2140      	movs	r1, #64	@ 0x40
 8007782:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007784:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007786:	4643      	mov	r3, r8
 8007788:	9500      	str	r5, [sp, #0]
 800778a:	f7ff fdf8 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 800778e:	b9b0      	cbnz	r0, 80077be <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007790:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007792:	b29b      	uxth	r3, r3
 8007794:	2bff      	cmp	r3, #255	@ 0xff
 8007796:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <HAL_I2C_Mem_Read+0x1b8>)
 8007798:	d815      	bhi.n	80077c6 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800779a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800779c:	b292      	uxth	r2, r2
 800779e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077a8:	e012      	b.n	80077d0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077aa:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ac:	4641      	mov	r1, r8
 80077ae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b2:	462a      	mov	r2, r5
 80077b4:	f7ff fdb8 	bl	8007328 <I2C_WaitOnTXISFlagUntilTimeout>
 80077b8:	b908      	cbnz	r0, 80077be <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	e7de      	b.n	800777c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80077be:	2300      	movs	r3, #0
 80077c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80077c4:	e7a1      	b.n	800770a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077c6:	22ff      	movs	r2, #255	@ 0xff
 80077c8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077d0:	4639      	mov	r1, r7
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff fd12 	bl	80071fc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077d8:	4643      	mov	r3, r8
 80077da:	2200      	movs	r2, #0
 80077dc:	2104      	movs	r1, #4
 80077de:	4620      	mov	r0, r4
 80077e0:	9500      	str	r5, [sp, #0]
 80077e2:	f7ff fdcc 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d18f      	bne.n	800770a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80077f0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80077f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80077f4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80077f6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80077f8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80077fa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80077fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80077fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007800:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007802:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007804:	b29b      	uxth	r3, r3
 8007806:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007808:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	b1b3      	cbz	r3, 800783c <HAL_I2C_Mem_Read+0x160>
 800780e:	b9aa      	cbnz	r2, 800783c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007810:	4643      	mov	r3, r8
 8007812:	2180      	movs	r1, #128	@ 0x80
 8007814:	4620      	mov	r0, r4
 8007816:	9500      	str	r5, [sp, #0]
 8007818:	f7ff fdb1 	bl	800737e <I2C_WaitOnFlagUntilTimeout>
 800781c:	2800      	cmp	r0, #0
 800781e:	f47f af74 	bne.w	800770a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2bff      	cmp	r3, #255	@ 0xff
 8007828:	d928      	bls.n	800787c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800782a:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800782c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007830:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007832:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007834:	4639      	mov	r1, r7
 8007836:	4620      	mov	r0, r4
 8007838:	f7ff fce0 	bl	80071fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800783c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1c9      	bne.n	80077d8 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007844:	462a      	mov	r2, r5
 8007846:	4641      	mov	r1, r8
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff fdd3 	bl	80073f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800784e:	2800      	cmp	r0, #0
 8007850:	f47f af5b 	bne.w	800770a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	2120      	movs	r1, #32
 8007858:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007860:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007864:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007872:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007876:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800787a:	e747      	b.n	800770c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800787c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800787e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007882:	b292      	uxth	r2, r2
 8007884:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	9000      	str	r0, [sp, #0]
 800788a:	e7d3      	b.n	8007834 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800788c:	2002      	movs	r0, #2
 800788e:	e73d      	b.n	800770c <HAL_I2C_Mem_Read+0x30>
 8007890:	80002000 	.word	0x80002000
 8007894:	80002400 	.word	0x80002400

08007898 <HAL_I2C_GetState>:
  return hi2c->State;
 8007898:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800789c:	4770      	bx	lr

0800789e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800789e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 80078a0:	4770      	bx	lr

080078a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078a2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80078a8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80078aa:	2a20      	cmp	r2, #32
 80078ac:	b2d4      	uxtb	r4, r2
 80078ae:	d11c      	bne.n	80078ea <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80078b4:	2a01      	cmp	r2, #1
 80078b6:	d018      	beq.n	80078ea <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078b8:	2224      	movs	r2, #36	@ 0x24
 80078ba:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078be:	6802      	ldr	r2, [r0, #0]
 80078c0:	6810      	ldr	r0, [r2, #0]
 80078c2:	f020 0001 	bic.w	r0, r0, #1
 80078c6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078c8:	6810      	ldr	r0, [r2, #0]
 80078ca:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80078ce:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078d0:	6810      	ldr	r0, [r2, #0]
 80078d2:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d4:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80078d6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80078d8:	6811      	ldr	r1, [r2, #0]
 80078da:	f041 0101 	orr.w	r1, r1, #1
 80078de:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80078e0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80078e4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80078e8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80078ea:	2002      	movs	r0, #2
 80078ec:	e7fc      	b.n	80078e8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080078ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078ee:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80078f4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f6:	2a20      	cmp	r2, #32
 80078f8:	b2d4      	uxtb	r4, r2
 80078fa:	d11b      	bne.n	8007934 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007900:	2a01      	cmp	r2, #1
 8007902:	d017      	beq.n	8007934 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007904:	2224      	movs	r2, #36	@ 0x24
 8007906:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800790a:	6802      	ldr	r2, [r0, #0]
 800790c:	6810      	ldr	r0, [r2, #0]
 800790e:	f020 0001 	bic.w	r0, r0, #1
 8007912:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007914:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007916:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800791a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800791e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007920:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007922:	6811      	ldr	r1, [r2, #0]
 8007924:	f041 0101 	orr.w	r1, r1, #1
 8007928:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800792a:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800792e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007932:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007934:	2002      	movs	r0, #2
 8007936:	e7fc      	b.n	8007932 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007938 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800793a:	2401      	movs	r4, #1
 800793c:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800793e:	2500      	movs	r5, #0
 8007940:	194e      	adds	r6, r1, r5
 8007942:	443d      	add	r5, r7
 8007944:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8007946:	42be      	cmp	r6, r7
 8007948:	d112      	bne.n	8007970 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800794a:	2c10      	cmp	r4, #16
 800794c:	d108      	bne.n	8007960 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800794e:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007950:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8007952:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8007954:	601d      	str	r5, [r3, #0]
  p = 0;
 8007956:	4623      	mov	r3, r4
  si = Huffsize[0];
 8007958:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800795a:	5cc8      	ldrb	r0, [r1, r3]
 800795c:	b9d8      	cbnz	r0, 8007996 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8007960:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8007962:	3401      	adds	r4, #1
 8007964:	19ee      	adds	r6, r5, r7
 8007966:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800796a:	d9e9      	bls.n	8007940 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800796c:	2001      	movs	r0, #1
 800796e:	e7f6      	b.n	800795e <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8007970:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8007974:	e7e7      	b.n	8007946 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8007976:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800797a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800797c:	5cc8      	ldrb	r0, [r1, r3]
 800797e:	19dc      	adds	r4, r3, r7
 8007980:	42a8      	cmp	r0, r5
 8007982:	d0f8      	beq.n	8007976 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8007984:	2d1f      	cmp	r5, #31
 8007986:	d8f1      	bhi.n	800796c <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007988:	fa06 f005 	lsl.w	r0, r6, r5
 800798c:	42a0      	cmp	r0, r4
 800798e:	d9ed      	bls.n	800796c <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8007990:	0064      	lsls	r4, r4, #1
    si++;
 8007992:	3501      	adds	r5, #1
 8007994:	e7e1      	b.n	800795a <JPEG_Bits_To_SizeCodes+0x22>
 8007996:	1ae7      	subs	r7, r4, r3
 8007998:	e7f0      	b.n	800797c <JPEG_Bits_To_SizeCodes+0x44>

0800799a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800799a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800799c:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80079a0:	460d      	mov	r5, r1
 80079a2:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80079a4:	ab01      	add	r3, sp, #4
 80079a6:	aa43      	add	r2, sp, #268	@ 0x10c
 80079a8:	a902      	add	r1, sp, #8
 80079aa:	f7ff ffc5 	bl	8007938 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80079ae:	b938      	cbnz	r0, 80079c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 80079b0:	9e01      	ldr	r6, [sp, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	f104 010f 	add.w	r1, r4, #15
 80079b8:	360f      	adds	r6, #15
 80079ba:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80079bc:	42a1      	cmp	r1, r4
 80079be:	d102      	bne.n	80079c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80079c0:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 80079c6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80079ca:	2e0b      	cmp	r6, #11
 80079cc:	d80a      	bhi.n	80079e4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80079ce:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80079d2:	f852 cb04 	ldr.w	ip, [r2], #4
 80079d6:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80079da:	f813 7b01 	ldrb.w	r7, [r3], #1
 80079de:	3f01      	subs	r7, #1
 80079e0:	55af      	strb	r7, [r5, r6]
      k++;
 80079e2:	e7eb      	b.n	80079bc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80079e4:	2001      	movs	r0, #1
 80079e6:	e7eb      	b.n	80079c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

080079e8 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80079e8:	4603      	mov	r3, r0
 80079ea:	4608      	mov	r0, r1
 80079ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80079ee:	681c      	ldr	r4, [r3, #0]
{
 80079f0:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80079f2:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d125      	bne.n	8007a46 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80079fa:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80079fe:	a901      	add	r1, sp, #4
 8007a00:	f7ff ffcb 	bl	800799a <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007a04:	b9e8      	cbnz	r0, 8007a42 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007a06:	aa01      	add	r2, sp, #4
 8007a08:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007a0c:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007a10:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007a12:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007a14:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a16:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007a18:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a1a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8007a1e:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a20:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a22:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a26:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8007a2a:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a2c:	7b13      	ldrb	r3, [r2, #12]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a34:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007a3a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007a3e:	42b4      	cmp	r4, r6
 8007a40:	d1e9      	bne.n	8007a16 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a42:	b011      	add	sp, #68	@ 0x44
 8007a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007a46:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d102      	bne.n	8007a54 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007a4e:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8007a52:	e7d4      	b.n	80079fe <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007a54:	2001      	movs	r0, #1
 8007a56:	e7f4      	b.n	8007a42 <JPEG_Set_HuffDC_Mem+0x5a>

08007a58 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007a5c:	6804      	ldr	r4, [r0, #0]
{
 8007a5e:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8007a62:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007a64:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d149      	bne.n	8007b00 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007a6c:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007a70:	466b      	mov	r3, sp
 8007a72:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007a76:	a901      	add	r1, sp, #4
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff ff5d 	bl	8007938 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d13a      	bne.n	8007af8 <JPEG_Set_HuffAC_Mem+0xa0>
 8007a82:	9b00      	ldr	r3, [sp, #0]
 8007a84:	460d      	mov	r5, r1
 8007a86:	f106 0c0f 	add.w	ip, r6, #15
 8007a8a:	4617      	mov	r7, r2
 8007a8c:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007a8e:	f04f 0e0a 	mov.w	lr, #10
 8007a92:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007a94:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8007a96:	4561      	cmp	r1, ip
 8007a98:	d139      	bne.n	8007b0e <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007a9a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007a9e:	a942      	add	r1, sp, #264	@ 0x108
 8007aa0:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007aa4:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007aa6:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007aac:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007ab0:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007ab4:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007ab6:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007aba:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007abc:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007ac0:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007ac2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007ac6:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ac8:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007acc:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ace:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8007ad2:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ad4:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ad6:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ada:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007ade:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007ae0:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007aea:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007aec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007af4:	42b4      	cmp	r4, r6
 8007af6:	d1e7      	bne.n	8007ac8 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007af8:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007b00:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d10f      	bne.n	8007b28 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007b08:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007b0c:	e7b0      	b.n	8007a70 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007b0e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8007b12:	b15b      	cbz	r3, 8007b2c <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007b14:	2bf0      	cmp	r3, #240	@ 0xf0
 8007b16:	d015      	beq.n	8007b44 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007b18:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007b1a:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007b24:	2ba1      	cmp	r3, #161	@ 0xa1
 8007b26:	d902      	bls.n	8007b2e <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8007b28:	2001      	movs	r0, #1
 8007b2a:	e7e5      	b.n	8007af8 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8007b2c:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007b2e:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8007b32:	f857 8b04 	ldr.w	r8, [r7], #4
 8007b36:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007b3a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007b3e:	3a01      	subs	r2, #1
 8007b40:	54f2      	strb	r2, [r6, r3]
      k++;
 8007b42:	e7a8      	b.n	8007a96 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007b44:	23a1      	movs	r3, #161	@ 0xa1
 8007b46:	e7f2      	b.n	8007b2e <JPEG_Set_HuffAC_Mem+0xd6>

08007b48 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007b48:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007b4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007b4e:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007b50:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007b52:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007b54:	f002 0203 	and.w	r2, r2, #3
 8007b58:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	bf0c      	ite	eq
 8007b5e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007b62:	f022 0208 	bicne.w	r2, r2, #8
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b72:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007b76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b8a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	f042 0201 	orr.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007b98:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007b9a:	f002 020c 	and.w	r2, r2, #12
 8007b9e:	2a08      	cmp	r2, #8
 8007ba0:	d104      	bne.n	8007bac <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007baa:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007bac:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007bae:	f002 020c 	and.w	r2, r2, #12
 8007bb2:	2a0c      	cmp	r2, #12
 8007bb4:	d1f9      	bne.n	8007baa <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007bb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bb8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007bbc:	e7f4      	b.n	8007ba8 <JPEG_Init_Process+0x60>
	...

08007bc0 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007bc2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007bc4:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007bc6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007bc8:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007bca:	42aa      	cmp	r2, r5
 8007bcc:	d313      	bcc.n	8007bf6 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007bce:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007bd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007bd2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	d30e      	bcc.n	8007bf6 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007bd8:	4f18      	ldr	r7, [pc, #96]	@ (8007c3c <JPEG_DMA_StartProcess+0x7c>)
 8007bda:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007bdc:	4f18      	ldr	r7, [pc, #96]	@ (8007c40 <JPEG_DMA_StartProcess+0x80>)
 8007bde:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007be0:	4e18      	ldr	r6, [pc, #96]	@ (8007c44 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007be2:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007be4:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007be6:	4e18      	ldr	r6, [pc, #96]	@ (8007c48 <JPEG_DMA_StartProcess+0x88>)
 8007be8:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007bea:	b105      	cbz	r5, 8007bee <JPEG_DMA_StartProcess+0x2e>
 8007bec:	b931      	cbnz	r1, 8007bfc <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007bee:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007bf0:	f043 0304 	orr.w	r3, r3, #4
 8007bf4:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007bf8:	b003      	add	sp, #12
 8007bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007bfc:	fbb2 f6f5 	udiv	r6, r2, r5
 8007c00:	fb05 2516 	mls	r5, r5, r6, r2
 8007c04:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c06:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007c08:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c0a:	fbb3 f2f1 	udiv	r2, r3, r1
 8007c0e:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c12:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c14:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c16:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c1a:	9500      	str	r5, [sp, #0]
 8007c1c:	69e2      	ldr	r2, [r4, #28]
 8007c1e:	f001 f848 	bl	8008cb2 <HAL_MDMA_Start_IT>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d1e3      	bne.n	8007bee <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	9500      	str	r5, [sp, #0]
 8007c2a:	3240      	adds	r2, #64	@ 0x40
 8007c2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007c2e:	69a1      	ldr	r1, [r4, #24]
 8007c30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007c32:	f001 f83e 	bl	8008cb2 <HAL_MDMA_Start_IT>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0de      	beq.n	8007bf8 <JPEG_DMA_StartProcess+0x38>
 8007c3a:	e7d8      	b.n	8007bee <JPEG_DMA_StartProcess+0x2e>
 8007c3c:	08008183 	.word	0x08008183
 8007c40:	0800807b 	.word	0x0800807b
 8007c44:	08008641 	.word	0x08008641
 8007c48:	08008633 	.word	0x08008633

08007c4c <HAL_JPEG_Init>:
{
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007c4e:	4605      	mov	r5, r0
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f000 80f2 	beq.w	8007e3a <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007c56:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007c5a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007c5e:	b91b      	cbnz	r3, 8007c68 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007c60:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007c64:	f7f9 fa14 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007c68:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	4a86      	ldr	r2, [pc, #536]	@ (8007e88 <HAL_JPEG_Init+0x23c>)
 8007c6e:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007c72:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007c76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c78:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007c8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c8c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007c90:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007c92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c98:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007c9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ca0:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007ca2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ca4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ca8:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007caa:	4b78      	ldr	r3, [pc, #480]	@ (8007e8c <HAL_JPEG_Init+0x240>)
 8007cac:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007cae:	4b78      	ldr	r3, [pc, #480]	@ (8007e90 <HAL_JPEG_Init+0x244>)
 8007cb0:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007cb2:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007cb4:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007cb8:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007cba:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007cbc:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007cbe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007cc0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007cc4:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007cc6:	4333      	orrs	r3, r6
 8007cc8:	7c56      	ldrb	r6, [r2, #17]
 8007cca:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007cce:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007cd2:	4281      	cmp	r1, r0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8007e94 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007cd8:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8007e98 <HAL_JPEG_Init+0x24c>)
 8007cde:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ce2:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007ce6:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007cea:	4610      	mov	r0, r2
 8007cec:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007cee:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007cf2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007cf6:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007cfa:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007cfc:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007cfe:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007d02:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d04:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007d08:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007d0c:	ea43 030c 	orr.w	r3, r3, ip
 8007d10:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007d14:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d18:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007d1c:	42be      	cmp	r6, r7
 8007d1e:	d1ec      	bne.n	8007cfa <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007d20:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007d24:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007d2c:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007d30:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007d34:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007d38:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007d3c:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d3e:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007d42:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d44:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007d48:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007d4c:	4333      	orrs	r3, r6
 8007d4e:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007d52:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d56:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007d5a:	4281      	cmp	r1, r0
 8007d5c:	d1ec      	bne.n	8007d38 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007d5e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007d62:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007d66:	4a4d      	ldr	r2, [pc, #308]	@ (8007e9c <HAL_JPEG_Init+0x250>)
 8007d68:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007d6c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007d6e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007d72:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007d76:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007d7a:	4013      	ands	r3, r2
  *address = value;
 8007d7c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007d80:	2301      	movs	r3, #1
 8007d82:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007d86:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007d8a:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007d8e:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007d92:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007d96:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007d9c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007da0:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007da4:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007da6:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007daa:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007dae:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007db2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea0 <HAL_JPEG_Init+0x254>)
 8007db4:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007db8:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007dbc:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007dc0:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007dc4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007dca:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007dce:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007dd2:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007dd4:	4a33      	ldr	r2, [pc, #204]	@ (8007ea4 <HAL_JPEG_Init+0x258>)
 8007dd6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007dda:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007dde:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007de2:	4b31      	ldr	r3, [pc, #196]	@ (8007ea8 <HAL_JPEG_Init+0x25c>)
 8007de4:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007de8:	4b30      	ldr	r3, [pc, #192]	@ (8007eac <HAL_JPEG_Init+0x260>)
 8007dea:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007dee:	4b30      	ldr	r3, [pc, #192]	@ (8007eb0 <HAL_JPEG_Init+0x264>)
 8007df0:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007df4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007df8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007dfe:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007e02:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007e06:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007e08:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007e0c:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007e0e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007e12:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007e16:	4333      	orrs	r3, r6
 8007e18:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007e1c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007e20:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007e24:	4281      	cmp	r1, r0
 8007e26:	d1ec      	bne.n	8007e02 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007e28:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007e2c:	491a      	ldr	r1, [pc, #104]	@ (8007e98 <HAL_JPEG_Init+0x24c>)
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff fe12 	bl	8007a58 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007e34:	b118      	cbz	r0, 8007e3e <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007e36:	2301      	movs	r3, #1
 8007e38:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007e3a:	2001      	movs	r0, #1
}
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007e3e:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007e42:	4918      	ldr	r1, [pc, #96]	@ (8007ea4 <HAL_JPEG_Init+0x258>)
 8007e44:	4628      	mov	r0, r5
 8007e46:	f7ff fe07 	bl	8007a58 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d1f3      	bne.n	8007e36 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007e4e:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007e52:	490d      	ldr	r1, [pc, #52]	@ (8007e88 <HAL_JPEG_Init+0x23c>)
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fdc7 	bl	80079e8 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1eb      	bne.n	8007e36 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007e5e:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007e62:	4914      	ldr	r1, [pc, #80]	@ (8007eb4 <HAL_JPEG_Init+0x268>)
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff fdbf 	bl	80079e8 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e74:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007e76:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007e78:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007e7a:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007e7c:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007e80:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007e82:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007e84:	e7da      	b.n	8007e3c <HAL_JPEG_Init+0x1f0>
 8007e86:	bf00      	nop
 8007e88:	08025be4 	.word	0x08025be4
 8007e8c:	080259e4 	.word	0x080259e4
 8007e90:	080259a4 	.word	0x080259a4
 8007e94:	0b0a0908 	.word	0x0b0a0908
 8007e98:	08025b16 	.word	0x08025b16
 8007e9c:	ffff0000 	.word	0xffff0000
 8007ea0:	09080706 	.word	0x09080706
 8007ea4:	08025a64 	.word	0x08025a64
 8007ea8:	01000404 	.word	0x01000404
 8007eac:	05070403 	.word	0x05070403
 8007eb0:	04040201 	.word	0x04040201
 8007eb4:	08025bc8 	.word	0x08025bc8

08007eb8 <HAL_JPEG_GetInfo>:
{
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d06f      	beq.n	8007fa0 <HAL_JPEG_GetInfo+0xe8>
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d06d      	beq.n	8007fa0 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007ec4:	6804      	ldr	r4, [r0, #0]
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d047      	beq.n	8007f60 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	f013 0303 	ands.w	r3, r3, #3
 8007ed6:	d005      	beq.n	8007ee4 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d15e      	bne.n	8007fa0 <HAL_JPEG_GetInfo+0xe8>
 8007ee2:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007ee4:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007ee6:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007ee8:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007eec:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007eee:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007ef0:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007ef2:	68e2      	ldr	r2, [r4, #12]
 8007ef4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007ef8:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007efa:	d13c      	bne.n	8007f76 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007efc:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007efe:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007f00:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007f04:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007f06:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f08:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007f0a:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f0e:	d129      	bne.n	8007f64 <HAL_JPEG_GetInfo+0xac>
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f013 0f0f 	tst.w	r3, #15
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007f1e:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	3450      	adds	r4, #80	@ 0x50
 8007f24:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007fa4 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007f28:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007f2a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007f2e:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007f32:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007f36:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007f3a:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007f3c:	fa29 f206 	lsr.w	r2, r9, r6
 8007f40:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007f42:	2a01      	cmp	r2, #1
 8007f44:	d119      	bne.n	8007f7a <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007f46:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007f48:	3608      	adds	r6, #8
 8007f4a:	3701      	adds	r7, #1
 8007f4c:	2e20      	cmp	r6, #32
 8007f4e:	d1f5      	bne.n	8007f3c <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007f50:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007f52:	2d40      	cmp	r5, #64	@ 0x40
 8007f54:	d1ed      	bne.n	8007f32 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007f56:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007f58:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007f5a:	610b      	str	r3, [r1, #16]
}
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	2310      	movs	r3, #16
 8007f62:	e7bf      	b.n	8007ee4 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f64:	2d03      	cmp	r5, #3
 8007f66:	d106      	bne.n	8007f76 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f013 0f0f 	tst.w	r3, #15
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	e7d3      	b.n	8007f1e <HAL_JPEG_GetInfo+0x66>
 8007f76:	2300      	movs	r3, #0
 8007f78:	e7d1      	b.n	8007f1e <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007f7a:	fb0e fb02 	mul.w	fp, lr, r2
 8007f7e:	f897 a000 	ldrb.w	sl, [r7]
 8007f82:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f84:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007f88:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007f8c:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007f8e:	bf8b      	itete	hi
 8007f90:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007f94:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007f98:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007f9a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007f9e:	e7d3      	b.n	8007f48 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	e7db      	b.n	8007f5c <HAL_JPEG_GetInfo+0xa4>
 8007fa4:	08025a24 	.word	0x08025a24

08007fa8 <HAL_JPEG_Decode_DMA>:
{
 8007fa8:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007faa:	4604      	mov	r4, r0
 8007fac:	b348      	cbz	r0, 8008002 <HAL_JPEG_Decode_DMA+0x5a>
 8007fae:	b341      	cbz	r1, 8008002 <HAL_JPEG_Decode_DMA+0x5a>
 8007fb0:	b33b      	cbz	r3, 8008002 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007fb2:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007fb6:	2d01      	cmp	r5, #1
 8007fb8:	d028      	beq.n	800800c <HAL_JPEG_Decode_DMA+0x64>
 8007fba:	2501      	movs	r5, #1
 8007fbc:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007fc0:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8007fc4:	2d01      	cmp	r5, #1
 8007fc6:	d11e      	bne.n	8008006 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007fc8:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8007fca:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007fcc:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007fd0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007fd2:	f025 050f 	bic.w	r5, r5, #15
 8007fd6:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007fd8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007fda:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007fde:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007fe2:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007fe4:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007fe6:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007fe8:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8007fea:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8007fec:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007fee:	f7ff fdab 	bl	8007b48 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007ff2:	f7ff fde5 	bl	8007bc0 <JPEG_DMA_StartProcess>
 8007ff6:	b128      	cbz	r0, 8008004 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007ff8:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007ffa:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007ffe:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008002:	2001      	movs	r0, #1
}
 8008004:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8008006:	2300      	movs	r3, #0
 8008008:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800800c:	2002      	movs	r0, #2
 800800e:	e7f9      	b.n	8008004 <HAL_JPEG_Decode_DMA+0x5c>

08008010 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008010:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008012:	f003 030c 	and.w	r3, r3, #12
 8008016:	2b0c      	cmp	r3, #12
 8008018:	d10d      	bne.n	8008036 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800801a:	07cb      	lsls	r3, r1, #31
 800801c:	d503      	bpl.n	8008026 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800801e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008024:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008026:	0789      	lsls	r1, r1, #30
 8008028:	d503      	bpl.n	8008032 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800802a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800802c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008030:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8008032:	2000      	movs	r0, #0
 8008034:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008036:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008038:	f003 030c 	and.w	r3, r3, #12
 800803c:	2b08      	cmp	r3, #8
 800803e:	d1f8      	bne.n	8008032 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008040:	f011 0301 	ands.w	r3, r1, #1
 8008044:	d004      	beq.n	8008050 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008046:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008048:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800804c:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800804e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008050:	078a      	lsls	r2, r1, #30
 8008052:	d505      	bpl.n	8008060 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008054:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008056:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800805a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800805e:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008060:	6801      	ldr	r1, [r0, #0]
 8008062:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008064:	ea22 0303 	bic.w	r3, r2, r3
 8008068:	630b      	str	r3, [r1, #48]	@ 0x30
 800806a:	e7e2      	b.n	8008032 <HAL_JPEG_Pause+0x22>

0800806c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800806c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800806e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008070:	4770      	bx	lr

08008072 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008072:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008074:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008076:	4770      	bx	lr

08008078 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008078:	4770      	bx	lr

0800807a <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800807a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800807c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800807e:	6803      	ldr	r3, [r0, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800808a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008090:	2301      	movs	r3, #1
 8008092:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008096:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008098:	f043 0304 	orr.w	r3, r3, #4
 800809c:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800809e:	f7fa fae7 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80080a2:	bd08      	pop	{r3, pc}

080080a4 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80080a4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 80080a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80080ac:	b922      	cbnz	r2, 80080b8 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80080ae:	2101      	movs	r1, #1
 80080b0:	f7ff ffae 	bl	8008010 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 80080b4:	2200      	movs	r2, #0
 80080b6:	e004      	b.n	80080c2 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80080b8:	6a03      	ldr	r3, [r0, #32]
 80080ba:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80080bc:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80080be:	d924      	bls.n	800810a <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80080c0:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80080c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80080c4:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80080c8:	d11e      	bne.n	8008108 <JPEG_ReadInputData+0x64>
 80080ca:	b1ea      	cbz	r2, 8008108 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 80080cc:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 80080d0:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 80080d2:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 80080d6:	d827      	bhi.n	8008128 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080d8:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 80080da:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80080dc:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080de:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080e0:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 80080e2:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080e4:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080e6:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080ea:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80080ee:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080f0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80080f4:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080f8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080fc:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80080fe:	6a22      	ldr	r2, [r4, #32]
 8008100:	f102 0204 	add.w	r2, r2, #4
 8008104:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008106:	d1e8      	bne.n	80080da <JPEG_ReadInputData+0x36>
}
 8008108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800810a:	429a      	cmp	r2, r3
 800810c:	d1d2      	bne.n	80080b4 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800810e:	6a01      	ldr	r1, [r0, #32]
 8008110:	f7fa fa40 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008114:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008116:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008118:	bf84      	itt	hi
 800811a:	f023 0303 	bichi.w	r3, r3, #3
 800811e:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008120:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008122:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008124:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008126:	e7cc      	b.n	80080c2 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008128:	2a03      	cmp	r2, #3
 800812a:	d918      	bls.n	800815e <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800812c:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800812e:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008130:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008132:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008134:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8008136:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008138:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800813a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800813e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008142:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008144:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008148:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800814c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008150:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008152:	6a22      	ldr	r2, [r4, #32]
 8008154:	f102 0204 	add.w	r2, r2, #4
 8008158:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800815a:	d1e8      	bne.n	800812e <JPEG_ReadInputData+0x8a>
 800815c:	e7d4      	b.n	8008108 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800815e:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008160:	6a25      	ldr	r5, [r4, #32]
 8008162:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8008164:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008166:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8008168:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800816a:	fa05 f506 	lsl.w	r5, r5, r6
 800816e:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8008172:	6a25      	ldr	r5, [r4, #32]
 8008174:	f105 0501 	add.w	r5, r5, #1
 8008178:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800817a:	d1f1      	bne.n	8008160 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8008180:	e7c2      	b.n	8008108 <JPEG_ReadInputData+0x64>

08008182 <JPEG_MDMAInCpltCallback>:
{
 8008182:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008184:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800818a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800818e:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008190:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008192:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008196:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800819a:	041b      	lsls	r3, r3, #16
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	2b0c      	cmp	r3, #12
 80081a0:	d11a      	bne.n	80081d8 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80081a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80081a4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80081a6:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80081a8:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80081aa:	695a      	ldr	r2, [r3, #20]
 80081ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081ae:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80081b6:	6a21      	ldr	r1, [r4, #32]
 80081b8:	f7fa f9ec 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 80081bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081be:	42ab      	cmp	r3, r5
 80081c0:	d327      	bcc.n	8008212 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 80081c2:	b95d      	cbnz	r5, 80081dc <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80081c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 80081c6:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80081c8:	f043 0304 	orr.w	r3, r3, #4
 80081cc:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80081ce:	2306      	movs	r3, #6
 80081d0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80081d4:	f7fa fa4c 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80081d8:	b003      	add	sp, #12
 80081da:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80081dc:	fbb3 f2f5 	udiv	r2, r3, r5
 80081e0:	fb05 3212 	mls	r2, r5, r2, r3
 80081e4:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80081e6:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80081e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80081ea:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80081ec:	04db      	lsls	r3, r3, #19
 80081ee:	d40a      	bmi.n	8008206 <JPEG_MDMAInCpltCallback+0x84>
 80081f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081f2:	b143      	cbz	r3, 8008206 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80081f4:	2101      	movs	r1, #1
 80081f6:	3240      	adds	r2, #64	@ 0x40
 80081f8:	9100      	str	r1, [sp, #0]
 80081fa:	69a1      	ldr	r1, [r4, #24]
 80081fc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80081fe:	f000 fd58 	bl	8008cb2 <HAL_MDMA_Start_IT>
 8008202:	2800      	cmp	r0, #0
 8008204:	d1de      	bne.n	80081c4 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800820a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800820e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008210:	e7e2      	b.n	80081d8 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0e8      	beq.n	80081e8 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008216:	079a      	lsls	r2, r3, #30
 8008218:	d0e6      	beq.n	80081e8 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	3304      	adds	r3, #4
 8008220:	e7e1      	b.n	80081e6 <JPEG_MDMAInCpltCallback+0x64>

08008222 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008222:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008226:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800822a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800822c:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800822e:	4293      	cmp	r3, r2
 8008230:	d32a      	bcc.n	8008288 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008232:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008234:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008236:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008238:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800823a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800823c:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800823e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008240:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008242:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008244:	69e0      	ldr	r0, [r4, #28]
 8008246:	4428      	add	r0, r5
 8008248:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800824c:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800824e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008250:	69e0      	ldr	r0, [r4, #28]
 8008252:	4428      	add	r0, r5
 8008254:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008258:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800825c:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800825e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008260:	69e0      	ldr	r0, [r4, #28]
 8008262:	4428      	add	r0, r5
 8008264:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008266:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008268:	f103 0304 	add.w	r3, r3, #4
 800826c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800826e:	d1e1      	bne.n	8008234 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008270:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008272:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008274:	429a      	cmp	r2, r3
 8008276:	d106      	bne.n	8008286 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008278:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800827a:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800827c:	4620      	mov	r0, r4
 800827e:	f7fa f9a7 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008288:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800828a:	4293      	cmp	r3, r2
 800828c:	d9fb      	bls.n	8008286 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800828e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008290:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008296:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008298:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800829a:	d105      	bne.n	80082a8 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800829c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800829e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082a0:	429f      	cmp	r7, r3
 80082a2:	d119      	bne.n	80082d8 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80082a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082a6:	e7e9      	b.n	800827c <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 80082a8:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 80082aa:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 80082ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80082ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082b0:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80082b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082b4:	69e1      	ldr	r1, [r4, #28]
 80082b6:	4429      	add	r1, r5
 80082b8:	0a1d      	lsrs	r5, r3, #8
 80082ba:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80082bc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082be:	69e1      	ldr	r1, [r4, #28]
 80082c0:	4429      	add	r1, r5
 80082c2:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80082c4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80082c6:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80082c8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082ca:	69e1      	ldr	r1, [r4, #28]
 80082cc:	4429      	add	r1, r5
 80082ce:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80082d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082d2:	3304      	adds	r3, #4
 80082d4:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80082d6:	e7de      	b.n	8008296 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80082d8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80082da:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80082dc:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80082de:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80082e0:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80082e2:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80082e4:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80082e6:	d114      	bne.n	8008312 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80082e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7fa f970 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80082f4:	1d2b      	adds	r3, r5, #4
 80082f6:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d8c4      	bhi.n	8008286 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80082fc:	00da      	lsls	r2, r3, #3
 80082fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008300:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008302:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008304:	fa26 f202 	lsr.w	r2, r6, r2
 8008308:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800830a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800830c:	3201      	adds	r2, #1
 800830e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008310:	e7f2      	b.n	80082f8 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008312:	f002 0303 	and.w	r3, r2, #3
 8008316:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800831a:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	fa26 f303 	lsr.w	r3, r6, r3
 8008322:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8008326:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008328:	3301      	adds	r3, #1
 800832a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800832c:	e7d9      	b.n	80082e2 <JPEG_StoreOutputData+0xc0>

0800832e <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800832e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	2b02      	cmp	r3, #2
{
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800833a:	d114      	bne.n	8008366 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800833c:	6803      	ldr	r3, [r0, #0]
 800833e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008340:	065b      	lsls	r3, r3, #25
 8008342:	d510      	bpl.n	8008366 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008344:	1d01      	adds	r1, r0, #4
 8008346:	f7ff fdb7 	bl	8007eb8 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800834a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800834c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800834e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008350:	f7fa f8ea 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800835c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800835e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008364:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8008366:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008368:	04d9      	lsls	r1, r3, #19
 800836a:	d407      	bmi.n	800837c <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008370:	0792      	lsls	r2, r2, #30
 8008372:	d544      	bpl.n	80083fe <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008374:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fe94 	bl	80080a4 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800837c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800837e:	0499      	lsls	r1, r3, #18
 8008380:	d407      	bmi.n	8008392 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	0712      	lsls	r2, r2, #28
 8008388:	d53e      	bpl.n	8008408 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800838a:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800838c:	4620      	mov	r0, r4
 800838e:	f7ff ff48 	bl	8008222 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008396:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800839a:	2a20      	cmp	r2, #32
 800839c:	d13c      	bne.n	8008418 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80083a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083a8:	f002 020c 	and.w	r2, r2, #12
 80083ac:	2a08      	cmp	r2, #8
 80083ae:	d103      	bne.n	80083b8 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80083b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083b2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80083b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80083be:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80083c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083c2:	b133      	cbz	r3, 80083d2 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083c6:	4620      	mov	r0, r4
 80083c8:	69e1      	ldr	r1, [r4, #28]
 80083ca:	f7fa f901 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80083d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80083d4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083d8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083dc:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083e0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083e2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80083ec:	f04f 0201 	mov.w	r2, #1
 80083f0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083f4:	d10d      	bne.n	8008412 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80083f6:	f7fa f93d 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80083fa:	2001      	movs	r0, #1
}
 80083fc:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80083fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008400:	0758      	lsls	r0, r3, #29
 8008402:	d5bb      	bpl.n	800837c <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008404:	2101      	movs	r1, #1
 8008406:	e7b6      	b.n	8008376 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840a:	06db      	lsls	r3, r3, #27
 800840c:	d5c1      	bpl.n	8008392 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800840e:	2101      	movs	r1, #1
 8008410:	e7bc      	b.n	800838c <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008412:	f7ff fe31 	bl	8008078 <HAL_JPEG_EncodeCpltCallback>
 8008416:	e7f0      	b.n	80083fa <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8008418:	2000      	movs	r0, #0
 800841a:	e7ef      	b.n	80083fc <JPEG_Process+0xce>

0800841c <JPEG_DMA_PollResidualData>:
{
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008422:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008424:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008426:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800842a:	d122      	bne.n	8008472 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800842c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800842e:	06d0      	lsls	r0, r2, #27
 8008430:	d51f      	bpl.n	8008472 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008434:	69e1      	ldr	r1, [r4, #28]
 8008436:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008438:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800843a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800843c:	69e2      	ldr	r2, [r4, #28]
 800843e:	440a      	add	r2, r1
 8008440:	0a19      	lsrs	r1, r3, #8
 8008442:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008444:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008446:	69e2      	ldr	r2, [r4, #28]
 8008448:	440a      	add	r2, r1
 800844a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800844c:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800844e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008450:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008452:	69e2      	ldr	r2, [r4, #28]
 8008454:	440a      	add	r2, r1
 8008456:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8008458:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800845a:	3304      	adds	r3, #4
 800845c:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800845e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008460:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008462:	429a      	cmp	r2, r3
 8008464:	d105      	bne.n	8008472 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008466:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008468:	4620      	mov	r0, r4
 800846a:	69e1      	ldr	r1, [r4, #28]
 800846c:	f7fa f8b0 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008470:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008472:	3e01      	subs	r6, #1
 8008474:	d1d5      	bne.n	8008422 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008476:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8008478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800847a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800847c:	06c9      	lsls	r1, r1, #27
 800847e:	d501      	bpl.n	8008484 <JPEG_DMA_PollResidualData+0x68>
 8008480:	0492      	lsls	r2, r2, #18
 8008482:	d420      	bmi.n	80084c6 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	f022 0201 	bic.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800848c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800848e:	b133      	cbz	r3, 800849e <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008490:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008492:	4620      	mov	r0, r4
 8008494:	69e1      	ldr	r1, [r4, #28]
 8008496:	f7fa f89b 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800849e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80084a0:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084a4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084a8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084ac:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084ae:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80084b8:	f04f 0201 	mov.w	r2, #1
 80084bc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084c0:	d102      	bne.n	80084c8 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80084c2:	f7fa f8d7 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80084c8:	f7ff fdd6 	bl	8008078 <HAL_JPEG_EncodeCpltCallback>
}
 80084cc:	e7fb      	b.n	80084c6 <JPEG_DMA_PollResidualData+0xaa>

080084ce <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80084ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084d0:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 80084d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d6:	4604      	mov	r4, r0
 80084d8:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80084da:	d014      	beq.n	8008506 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80084dc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084de:	f003 030c 	and.w	r3, r3, #12
 80084e2:	2b0c      	cmp	r3, #12
 80084e4:	d146      	bne.n	8008574 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80084e6:	07cb      	lsls	r3, r1, #31
 80084e8:	d520      	bpl.n	800852c <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80084ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084f0:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80084f2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80084f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80084f6:	b941      	cbnz	r1, 800850a <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80084f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80084fa:	f043 0304 	orr.w	r3, r3, #4
 80084fe:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008500:	2306      	movs	r3, #6
 8008502:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008506:	2001      	movs	r0, #1
 8008508:	e01d      	b.n	8008546 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800850a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800850c:	fbb3 f2f1 	udiv	r2, r3, r1
 8008510:	fb01 3212 	mls	r2, r1, r2, r3
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008518:	b143      	cbz	r3, 800852c <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	2101      	movs	r1, #1
 800851e:	3240      	adds	r2, #64	@ 0x40
 8008520:	9100      	str	r1, [sp, #0]
 8008522:	69a1      	ldr	r1, [r4, #24]
 8008524:	f000 fbc5 	bl	8008cb2 <HAL_MDMA_Start_IT>
 8008528:	2800      	cmp	r0, #0
 800852a:	d1e5      	bne.n	80084f8 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800852c:	07a8      	lsls	r0, r5, #30
 800852e:	d509      	bpl.n	8008544 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008530:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008536:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008538:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800853a:	0419      	lsls	r1, r3, #16
 800853c:	d505      	bpl.n	800854a <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff ff6c 	bl	800841c <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008544:	2000      	movs	r0, #0
}
 8008546:	b003      	add	sp, #12
 8008548:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800854a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800854c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800854e:	2900      	cmp	r1, #0
 8008550:	d0d2      	beq.n	80084f8 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008552:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008554:	fbb3 f2f1 	udiv	r2, r3, r1
 8008558:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800855c:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800855e:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008560:	2201      	movs	r2, #1
 8008562:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008564:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008566:	9200      	str	r2, [sp, #0]
 8008568:	69e2      	ldr	r2, [r4, #28]
 800856a:	f000 fba2 	bl	8008cb2 <HAL_MDMA_Start_IT>
 800856e:	2800      	cmp	r0, #0
 8008570:	d0e8      	beq.n	8008544 <HAL_JPEG_Resume+0x76>
 8008572:	e7c1      	b.n	80084f8 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008574:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b08      	cmp	r3, #8
 800857c:	d1e2      	bne.n	8008544 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800857e:	f011 0301 	ands.w	r3, r1, #1
 8008582:	d004      	beq.n	800858e <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008584:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800858a:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800858c:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800858e:	07aa      	lsls	r2, r5, #30
 8008590:	d505      	bpl.n	800859e <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008592:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008594:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800859c:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80085a2:	4313      	orrs	r3, r2
 80085a4:	630b      	str	r3, [r1, #48]	@ 0x30
 80085a6:	e7cd      	b.n	8008544 <HAL_JPEG_Resume+0x76>

080085a8 <JPEG_DMA_EndProcess>:
{
 80085a8:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 80085ac:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085ae:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80085bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80085be:	429a      	cmp	r2, r3
 80085c0:	d105      	bne.n	80085ce <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085c2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80085c4:	69c1      	ldr	r1, [r0, #28]
 80085c6:	f7fa f803 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80085d2:	f015 0510 	ands.w	r5, r5, #16
 80085d6:	d124      	bne.n	8008622 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 80085d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085da:	b12b      	cbz	r3, 80085e8 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085de:	4620      	mov	r0, r4
 80085e0:	69e1      	ldr	r1, [r4, #28]
 80085e2:	f7f9 fff5 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80085e6:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80085e8:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80085ea:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80085ec:	6813      	ldr	r3, [r2, #0]
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80085f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80085f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80085f8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80085fc:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008600:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008602:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800860c:	f04f 0201 	mov.w	r2, #1
 8008610:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008614:	d102      	bne.n	800861c <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008616:	f7fa f82d 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800861a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800861c:	f7ff fd2c 	bl	8008078 <HAL_JPEG_EncodeCpltCallback>
 8008620:	e7fb      	b.n	800861a <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008622:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008624:	049b      	lsls	r3, r3, #18
 8008626:	d4f8      	bmi.n	800861a <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8008628:	4620      	mov	r0, r4
}
 800862a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800862e:	f7ff bef5 	b.w	800841c <JPEG_DMA_PollResidualData>

08008632 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008632:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008634:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	d501      	bpl.n	800863e <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800863a:	f7ff bfb5 	b.w	80085a8 <JPEG_DMA_EndProcess>
}
 800863e:	4770      	bx	lr

08008640 <JPEG_MDMAOutCpltCallback>:
{
 8008640:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008642:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008648:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800864c:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800864e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008650:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008654:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008658:	0412      	lsls	r2, r2, #16
 800865a:	0c12      	lsrs	r2, r2, #16
 800865c:	2a0c      	cmp	r2, #12
 800865e:	d125      	bne.n	80086ac <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008662:	069a      	lsls	r2, r3, #26
 8008664:	d424      	bmi.n	80086b0 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008666:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008668:	4620      	mov	r0, r4
 800866a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008670:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008678:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800867a:	f7f9 ffa9 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800867e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008680:	049b      	lsls	r3, r3, #18
 8008682:	d415      	bmi.n	80086b0 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008684:	6821      	ldr	r1, [r4, #0]
 8008686:	2301      	movs	r3, #1
 8008688:	3144      	adds	r1, #68	@ 0x44
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800868e:	69e2      	ldr	r2, [r4, #28]
 8008690:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008692:	f000 fb0e 	bl	8008cb2 <HAL_MDMA_Start_IT>
 8008696:	b158      	cbz	r0, 80086b0 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008698:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800869a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800869c:	f043 0304 	orr.w	r3, r3, #4
 80086a0:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80086a2:	2306      	movs	r3, #6
 80086a4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 80086a8:	f7f9 ffe2 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80086ac:	b002      	add	sp, #8
 80086ae:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80086b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80086b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80086ba:	e7f7      	b.n	80086ac <JPEG_MDMAOutCpltCallback+0x6c>

080086bc <HAL_JPEG_IRQHandler>:
{
 80086bc:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 80086be:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 80086c2:	4604      	mov	r4, r0
  switch (hjpeg->State)
 80086c4:	3b03      	subs	r3, #3
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d850      	bhi.n	800876c <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80086ca:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80086cc:	f003 030c 	and.w	r3, r3, #12
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d103      	bne.n	80086dc <HAL_JPEG_IRQHandler+0x20>
}
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 80086d8:	f7ff be29 	b.w	800832e <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80086dc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80086de:	f003 030c 	and.w	r3, r3, #12
 80086e2:	2b0c      	cmp	r3, #12
 80086e4:	d142      	bne.n	800876c <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80086e6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80086e8:	f003 0303 	and.w	r3, r3, #3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d114      	bne.n	800871a <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80086f0:	6803      	ldr	r3, [r0, #0]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f4:	0659      	lsls	r1, r3, #25
 80086f6:	d510      	bpl.n	800871a <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80086f8:	1d01      	adds	r1, r0, #4
 80086fa:	f7ff fbdd 	bl	8007eb8 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80086fe:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008700:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008702:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008704:	f7f9 ff10 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800870c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008710:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800871e:	0692      	lsls	r2, r2, #26
 8008720:	d524      	bpl.n	800876c <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008722:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008724:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800872a:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008736:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800873a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800873c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800873e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008742:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008744:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008748:	2b02      	cmp	r3, #2
 800874a:	d101      	bne.n	8008750 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800874c:	f000 fafa 	bl	8008d44 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8008750:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008752:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008756:	2b02      	cmp	r3, #2
 8008758:	d103      	bne.n	8008762 <HAL_JPEG_IRQHandler+0xa6>
}
 800875a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800875e:	f000 baf1 	b.w	8008d44 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8008762:	4620      	mov	r0, r4
}
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8008768:	f7ff bf1e 	b.w	80085a8 <JPEG_DMA_EndProcess>
}
 800876c:	bd10      	pop	{r4, pc}

0800876e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800876e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008770:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008772:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008776:	3284      	adds	r2, #132	@ 0x84
 8008778:	1883      	adds	r3, r0, r2
{
 800877a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800877e:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008780:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008784:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008786:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800878a:	684c      	ldr	r4, [r1, #4]
 800878c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008790:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008794:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008798:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800879a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800879c:	68c5      	ldr	r5, [r0, #12]
 800879e:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80087a2:	443d      	add	r5, r7
 80087a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80087a8:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087aa:	68c6      	ldr	r6, [r0, #12]
 80087ac:	68cd      	ldr	r5, [r1, #12]
 80087ae:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80087b2:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80087b4:	689d      	ldr	r5, [r3, #8]
 80087b6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80087ba:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80087bc:	688d      	ldr	r5, [r1, #8]
 80087be:	68c7      	ldr	r7, [r0, #12]
 80087c0:	3501      	adds	r5, #1
 80087c2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80087c6:	443d      	add	r5, r7
 80087c8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80087cc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80087ce:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80087d0:	691d      	ldr	r5, [r3, #16]
 80087d2:	f025 0507 	bic.w	r5, r5, #7
 80087d6:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80087d8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80087da:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80087dc:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80087e0:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80087e4:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80087e8:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80087ec:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80087f0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80087f4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80087f8:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80087fa:	695d      	ldr	r5, [r3, #20]
 80087fc:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008800:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008802:	694d      	ldr	r5, [r1, #20]
 8008804:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008806:	69dd      	ldr	r5, [r3, #28]
 8008808:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800880c:	f025 0507 	bic.w	r5, r5, #7
 8008810:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008812:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008816:	433d      	orrs	r5, r7
 8008818:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800881a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800881c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800881e:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008822:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008824:	b31e      	cbz	r6, 800886e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008826:	2e01      	cmp	r6, #1
 8008828:	d023      	beq.n	8008872 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800882a:	1eb5      	subs	r5, r6, #2
 800882c:	2d02      	cmp	r5, #2
 800882e:	d922      	bls.n	8008876 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008830:	2e07      	cmp	r6, #7
 8008832:	bf14      	ite	ne
 8008834:	2501      	movne	r5, #1
 8008836:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008838:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800883a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800883e:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008842:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008844:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008846:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008848:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800884a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800884c:	436e      	muls	r6, r5
 800884e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008852:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008854:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8008856:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800885a:	f024 0407 	bic.w	r4, r4, #7
 800885e:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008860:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008862:	5883      	ldr	r3, [r0, r2]
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	5083      	str	r3, [r0, r2]
}
 800886a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800886e:	2504      	movs	r5, #4
 8008870:	e7e2      	b.n	8008838 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008872:	2503      	movs	r5, #3
 8008874:	e7e0      	b.n	8008838 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8008876:	2502      	movs	r5, #2
 8008878:	e7de      	b.n	8008838 <LTDC_SetConfig+0xca>
	...

0800887c <HAL_LTDC_Init>:
{
 800887c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800887e:	4604      	mov	r4, r0
 8008880:	2800      	cmp	r0, #0
 8008882:	d063      	beq.n	800894c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008884:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8008888:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800888c:	b91b      	cbnz	r3, 8008896 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800888e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008892:	f7f8 fc83 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008896:	2302      	movs	r3, #2
 8008898:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80088a4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a6:	6999      	ldr	r1, [r3, #24]
 80088a8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80088ac:	4302      	orrs	r2, r0
 80088ae:	68e0      	ldr	r0, [r4, #12]
 80088b0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088b2:	6920      	ldr	r0, [r4, #16]
 80088b4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088b6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088b8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088ba:	4925      	ldr	r1, [pc, #148]	@ (8008950 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088bc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	400a      	ands	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80088ca:	69a0      	ldr	r0, [r4, #24]
 80088cc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80088ce:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088d0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	400a      	ands	r2, r1
 80088d6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80088de:	6a20      	ldr	r0, [r4, #32]
 80088e0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80088e2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088e4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	400a      	ands	r2, r1
 80088ea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80088f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80088f4:	4302      	orrs	r2, r0
 80088f6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80088fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80088fe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008900:	695a      	ldr	r2, [r3, #20]
 8008902:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008906:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008908:	430a      	orrs	r2, r1
 800890a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800890e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008912:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008916:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800891a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800891c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800891e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8008922:	432a      	orrs	r2, r5
 8008924:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008928:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800892a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800892e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008932:	f042 0206 	orr.w	r2, r2, #6
 8008936:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008938:	699a      	ldr	r2, [r3, #24]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008940:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008942:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008946:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800894a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800894c:	2001      	movs	r0, #1
 800894e:	e7fc      	b.n	800894a <HAL_LTDC_Init+0xce>
 8008950:	f000f800 	.word	0xf000f800

08008954 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8008954:	4770      	bx	lr

08008956 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8008956:	4770      	bx	lr

08008958 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8008958:	4770      	bx	lr

0800895a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800895a:	6803      	ldr	r3, [r0, #0]
{
 800895c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800895e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8008960:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008962:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008964:	0772      	lsls	r2, r6, #29
 8008966:	d514      	bpl.n	8008992 <HAL_LTDC_IRQHandler+0x38>
 8008968:	0769      	lsls	r1, r5, #29
 800896a:	d512      	bpl.n	8008992 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800896c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800896e:	f022 0204 	bic.w	r2, r2, #4
 8008972:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008974:	2204      	movs	r2, #4
 8008976:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008978:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8008984:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008986:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800898a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800898e:	f7ff ffe1 	bl	8008954 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008992:	07b2      	lsls	r2, r6, #30
 8008994:	d516      	bpl.n	80089c4 <HAL_LTDC_IRQHandler+0x6a>
 8008996:	07ab      	lsls	r3, r5, #30
 8008998:	d514      	bpl.n	80089c4 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800899a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800899c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800899e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089a0:	f022 0202 	bic.w	r2, r2, #2
 80089a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089a6:	2202      	movs	r2, #2
 80089a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80089aa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089b4:	2304      	movs	r3, #4
 80089b6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80089ba:	2300      	movs	r3, #0
 80089bc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80089c0:	f7ff ffc8 	bl	8008954 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80089c4:	07f0      	lsls	r0, r6, #31
 80089c6:	d510      	bpl.n	80089ea <HAL_LTDC_IRQHandler+0x90>
 80089c8:	07e9      	lsls	r1, r5, #31
 80089ca:	d50e      	bpl.n	80089ea <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80089cc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80089ce:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80089d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80089d8:	2201      	movs	r2, #1
 80089da:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80089dc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80089de:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80089e2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80089e6:	f7ff ffb6 	bl	8008956 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80089ea:	0732      	lsls	r2, r6, #28
 80089ec:	d511      	bpl.n	8008a12 <HAL_LTDC_IRQHandler+0xb8>
 80089ee:	072b      	lsls	r3, r5, #28
 80089f0:	d50f      	bpl.n	8008a12 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089f2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089f4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f8:	f022 0208 	bic.w	r2, r2, #8
 80089fc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089fe:	2208      	movs	r2, #8
 8008a00:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008a0e:	f7ff ffa3 	bl	8008958 <HAL_LTDC_ReloadEventCallback>
}
 8008a12:	bd70      	pop	{r4, r5, r6, pc}

08008a14 <HAL_LTDC_ConfigLayer>:
{
 8008a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008a18:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	460f      	mov	r7, r1
 8008a20:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	f04f 0002 	mov.w	r0, #2
 8008a28:	d01f      	beq.n	8008a6a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a2a:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8008a2c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a30:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a32:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a36:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008a3a:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a3e:	3438      	adds	r4, #56	@ 0x38
 8008a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4662      	mov	r2, ip
 8008a52:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a54:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a56:	f7ff fe8a 	bl	800876e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a5a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008a5c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a5e:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a62:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008a66:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8008a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008a70 <HAL_LTDC_SetPitch>:
{
 8008a70:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008a72:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	f04f 0302 	mov.w	r3, #2
 8008a7c:	d02c      	beq.n	8008ad8 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008a7e:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a80:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008a84:	fb04 0402 	mla	r4, r4, r2, r0
 8008a88:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008a8a:	b33c      	cbz	r4, 8008adc <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008a8c:	2c01      	cmp	r4, #1
 8008a8e:	d027      	beq.n	8008ae0 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008a90:	1ea5      	subs	r5, r4, #2
 8008a92:	429d      	cmp	r5, r3
 8008a94:	d902      	bls.n	8008a9c <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 8008a96:	2c07      	cmp	r4, #7
 8008a98:	bf18      	it	ne
 8008a9a:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008a9c:	01d2      	lsls	r2, r2, #7
 8008a9e:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008aa0:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008aa2:	3284      	adds	r2, #132	@ 0x84
 8008aa4:	4422      	add	r2, r4
 8008aa6:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8008aa8:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8008aac:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 8008ab0:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae4 <HAL_LTDC_SetPitch+0x74>)
 8008ab4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ab6:	f045 0501 	orr.w	r5, r5, #1
 8008aba:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008abc:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008abe:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008ac4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008adc:	2304      	movs	r3, #4
 8008ade:	e7dd      	b.n	8008a9c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e7db      	b.n	8008a9c <HAL_LTDC_SetPitch+0x2c>
 8008ae4:	50001000 	.word	0x50001000

08008ae8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008ae8:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008aea:	6804      	ldr	r4, [r0, #0]
 8008aec:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008af0:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008af4:	6965      	ldr	r5, [r4, #20]
 8008af6:	ea4f 4555 	mov.w	r5, r5, lsr #17
 8008afa:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8008afe:	ea45 0503 	orr.w	r5, r5, r3
 8008b02:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008b04:	9d03      	ldr	r5, [sp, #12]
 8008b06:	6963      	ldr	r3, [r4, #20]
 8008b08:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b10:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8008b14:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008b16:	f04f 031f 	mov.w	r3, #31
 8008b1a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008b1c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008b1e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008b20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b22:	bf0c      	ite	eq
 8008b24:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b28:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008b2c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b30:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008b32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b34:	bf0c      	ite	eq
 8008b36:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008b3a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008b3e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008b40:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008b42:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008b44:	bd30      	pop	{r4, r5, pc}

08008b46 <HAL_MDMA_Init>:
{
 8008b46:	b538      	push	{r3, r4, r5, lr}
 8008b48:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b4a:	f7fd fb15 	bl	8006178 <HAL_GetTick>
 8008b4e:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8008b50:	2c00      	cmp	r4, #0
 8008b52:	d061      	beq.n	8008c18 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008b54:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008b56:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008b58:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008b62:	68d3      	ldr	r3, [r2, #12]
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	07d2      	lsls	r2, r2, #31
 8008b70:	d448      	bmi.n	8008c04 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008b72:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008b7a:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	69e1      	ldr	r1, [r4, #28]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	6a21      	ldr	r1, [r4, #32]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008b92:	430a      	orrs	r2, r1
 8008b94:	68a1      	ldr	r1, [r4, #8]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008b9a:	3901      	subs	r1, #1
 8008b9c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ba0:	6861      	ldr	r1, [r4, #4]
 8008ba2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008ba6:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ba8:	d103      	bne.n	8008bb2 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008bb0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008bb6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	da04      	bge.n	8008bc6 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008bbc:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008bbe:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008bc0:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008bc4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008bc6:	b292      	uxth	r2, r2
 8008bc8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008bca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	da25      	bge.n	8008c1c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008bd0:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008bd2:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008bd4:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008bd8:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008bda:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008bdc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008be0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008be4:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008be6:	f04f 0200 	mov.w	r2, #0
 8008bea:	d019      	beq.n	8008c20 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008bec:	b2c9      	uxtb	r1, r1
 8008bee:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8008bf2:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008bf4:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8008bf6:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008bf8:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008bfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008bfe:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8008c02:	e00a      	b.n	8008c1a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008c04:	f7fd fab8 	bl	8006178 <HAL_GetTick>
 8008c08:	1b40      	subs	r0, r0, r5
 8008c0a:	2805      	cmp	r0, #5
 8008c0c:	d9ad      	bls.n	8008b6a <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008c0e:	2340      	movs	r3, #64	@ 0x40
 8008c10:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008c12:	2303      	movs	r3, #3
 8008c14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008c18:	2001      	movs	r0, #1
}
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008c1c:	6a18      	ldr	r0, [r3, #32]
 8008c1e:	e7dd      	b.n	8008bdc <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008c20:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c22:	e7e5      	b.n	8008bf0 <HAL_MDMA_Init+0xaa>

08008c24 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008c24:	b1d8      	cbz	r0, 8008c5e <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008c26:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008c28:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008c2a:	68d3      	ldr	r3, [r2, #12]
 8008c2c:	f023 0301 	bic.w	r3, r3, #1
 8008c30:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008c36:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008c38:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008c3a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008c3c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008c3e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008c40:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008c42:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008c44:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008c46:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008c48:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008c4a:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008c4c:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008c4e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008c52:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008c56:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	4770      	bx	lr
    return HAL_ERROR;
 8008c5e:	2001      	movs	r0, #1
}
 8008c60:	4770      	bx	lr

08008c62 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008c62:	4603      	mov	r3, r0
{
 8008c64:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008c66:	b300      	cbz	r0, 8008caa <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008c68:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008c6c:	2801      	cmp	r0, #1
 8008c6e:	d01e      	beq.n	8008cae <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008c70:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008c72:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008c76:	42a5      	cmp	r5, r4
 8008c78:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008c7a:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008c7e:	d112      	bne.n	8008ca6 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008c80:	681c      	ldr	r4, [r3, #0]
 8008c82:	6925      	ldr	r5, [r4, #16]
 8008c84:	006d      	lsls	r5, r5, #1
 8008c86:	d407      	bmi.n	8008c98 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008c88:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008c8a:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008c8c:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008c8e:	b939      	cbnz	r1, 8008ca0 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008c90:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008c94:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008c96:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008c9e:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008ca0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008ca4:	e7f6      	b.n	8008c94 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	e7f6      	b.n	8008c98 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7f7      	b.n	8008c9e <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008cae:	2002      	movs	r0, #2
 8008cb0:	e7f5      	b.n	8008c9e <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008cb2 <HAL_MDMA_Start_IT>:
{
 8008cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d042      	beq.n	8008d40 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008cba:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008cbe:	2d01      	cmp	r5, #1
 8008cc0:	d03c      	beq.n	8008d3c <HAL_MDMA_Start_IT+0x8a>
 8008cc2:	2501      	movs	r5, #1
 8008cc4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008cc8:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008ccc:	2d01      	cmp	r5, #1
 8008cce:	f04f 0500 	mov.w	r5, #0
 8008cd2:	d131      	bne.n	8008d38 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008cd4:	2602      	movs	r6, #2
 8008cd6:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008cda:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008cdc:	6805      	ldr	r5, [r0, #0]
 8008cde:	68ee      	ldr	r6, [r5, #12]
 8008ce0:	f026 0601 	bic.w	r6, r6, #1
 8008ce4:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008ce6:	9e06      	ldr	r6, [sp, #24]
 8008ce8:	9600      	str	r6, [sp, #0]
 8008cea:	f7ff fefd 	bl	8008ae8 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008cee:	68eb      	ldr	r3, [r5, #12]
 8008cf0:	f043 0306 	orr.w	r3, r3, #6
 8008cf4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008cf6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008cf8:	b11b      	cbz	r3, 8008d02 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008cfa:	68eb      	ldr	r3, [r5, #12]
 8008cfc:	f043 0310 	orr.w	r3, r3, #16
 8008d00:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008d02:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008d04:	b11b      	cbz	r3, 8008d0e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008d06:	68eb      	ldr	r3, [r5, #12]
 8008d08:	f043 0308 	orr.w	r3, r3, #8
 8008d0c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008d0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008d10:	b11b      	cbz	r3, 8008d1a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008d12:	68eb      	ldr	r3, [r5, #12]
 8008d14:	f043 0320 	orr.w	r3, r3, #32
 8008d18:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008d1a:	68eb      	ldr	r3, [r5, #12]
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008d22:	6863      	ldr	r3, [r4, #4]
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d28:	d103      	bne.n	8008d32 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008d2a:	68eb      	ldr	r3, [r5, #12]
 8008d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d30:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008d32:	2000      	movs	r0, #0
}
 8008d34:	b002      	add	sp, #8
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008d38:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008d3c:	2002      	movs	r0, #2
 8008d3e:	e7f9      	b.n	8008d34 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008d40:	2001      	movs	r0, #1
 8008d42:	e7f7      	b.n	8008d34 <HAL_MDMA_Start_IT+0x82>

08008d44 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008d44:	b128      	cbz	r0, 8008d52 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008d46:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d003      	beq.n	8008d56 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008d4e:	2380      	movs	r3, #128	@ 0x80
 8008d50:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008d52:	2001      	movs	r0, #1
 8008d54:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008d56:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008d5e:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008d60:	68d3      	ldr	r3, [r2, #12]
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	60d3      	str	r3, [r2, #12]
}
 8008d68:	4770      	bx	lr
	...

08008d6c <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008d6c:	2300      	movs	r3, #0
{
 8008d6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008d70:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008d72:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d76:	4b58      	ldr	r3, [pc, #352]	@ (8008ed8 <HAL_MDMA_IRQHandler+0x16c>)
{
 8008d78:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008d7a:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d7c:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008d7e:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008d80:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008d82:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008d86:	3a40      	subs	r2, #64	@ 0x40
 8008d88:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008d8c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008d90:	4202      	tst	r2, r0
 8008d92:	f000 809e 	beq.w	8008ed2 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	07d1      	lsls	r1, r2, #31
 8008d9a:	d529      	bpl.n	8008df0 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	0792      	lsls	r2, r2, #30
 8008da0:	d526      	bpl.n	8008df0 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	f022 0202 	bic.w	r2, r2, #2
 8008da8:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008daa:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008dac:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008dae:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008db0:	bf54      	ite	pl
 8008db2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008db6:	f041 0102 	orrmi.w	r1, r1, #2
 8008dba:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008dbc:	0591      	lsls	r1, r2, #22
 8008dbe:	d503      	bpl.n	8008dc8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008dc0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008dc2:	f041 0104 	orr.w	r1, r1, #4
 8008dc6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008dc8:	05d0      	lsls	r0, r2, #23
 8008dca:	d503      	bpl.n	8008dd4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008dcc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008dce:	f041 0108 	orr.w	r1, r1, #8
 8008dd2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008dd4:	0551      	lsls	r1, r2, #21
 8008dd6:	d503      	bpl.n	8008de0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008dd8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008dda:	f041 0110 	orr.w	r1, r1, #16
 8008dde:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008de0:	0512      	lsls	r2, r2, #20
 8008de2:	d503      	bpl.n	8008dec <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008de4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008de6:	f042 0220 	orr.w	r2, r2, #32
 8008dea:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008dec:	2201      	movs	r2, #1
 8008dee:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	d508      	bpl.n	8008e08 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	0691      	lsls	r1, r2, #26
 8008dfa:	d505      	bpl.n	8008e08 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008dfc:	2210      	movs	r2, #16
 8008dfe:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008e00:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008e02:	b10b      	cbz	r3, 8008e08 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008e04:	4620      	mov	r0, r4
 8008e06:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	0712      	lsls	r2, r2, #28
 8008e0e:	d508      	bpl.n	8008e22 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	06d0      	lsls	r0, r2, #27
 8008e14:	d505      	bpl.n	8008e22 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008e16:	2208      	movs	r2, #8
 8008e18:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008e1a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008e1c:	b10b      	cbz	r3, 8008e22 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	0751      	lsls	r1, r2, #29
 8008e28:	d508      	bpl.n	8008e3c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	0712      	lsls	r2, r2, #28
 8008e2e:	d505      	bpl.n	8008e3c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008e30:	2204      	movs	r2, #4
 8008e32:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008e34:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008e36:	b10b      	cbz	r3, 8008e3c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008e38:	4620      	mov	r0, r4
 8008e3a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	0790      	lsls	r0, r2, #30
 8008e42:	d524      	bpl.n	8008e8e <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	0751      	lsls	r1, r2, #29
 8008e48:	d521      	bpl.n	8008e8e <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008e50:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008e52:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008e56:	2a04      	cmp	r2, #4
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	d10c      	bne.n	8008e78 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008e5e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008e60:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008e64:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008e68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d031      	beq.n	8008ed2 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008e6e:	4620      	mov	r0, r4
}
 8008e70:	b003      	add	sp, #12
 8008e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008e76:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008e78:	2102      	movs	r1, #2
 8008e7a:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008e7c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008e7e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008e82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008e86:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e88:	b10b      	cbz	r3, 8008e8e <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008e8e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008e90:	b1fb      	cbz	r3, 8008ed2 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e92:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008e96:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008eaa:	9a01      	ldr	r2, [sp, #4]
 8008eac:	3201      	adds	r2, #1
 8008eae:	42aa      	cmp	r2, r5
 8008eb0:	9201      	str	r2, [sp, #4]
 8008eb2:	d802      	bhi.n	8008eba <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	07d2      	lsls	r2, r2, #31
 8008eb8:	d4f7      	bmi.n	8008eaa <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008ec4:	bf4c      	ite	mi
 8008ec6:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008ec8:	2301      	movpl	r3, #1
 8008eca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008ece:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ed0:	e7cb      	b.n	8008e6a <HAL_MDMA_IRQHandler+0xfe>
}
 8008ed2:	b003      	add	sp, #12
 8008ed4:	bd30      	pop	{r4, r5, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2400006c 	.word	0x2400006c

08008edc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008edc:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008ede:	4d1c      	ldr	r5, [pc, #112]	@ (8008f50 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008ee0:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008ee2:	68eb      	ldr	r3, [r5, #12]
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	2b06      	cmp	r3, #6
 8008eea:	d006      	beq.n	8008efa <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008eec:	68e8      	ldr	r0, [r5, #12]
 8008eee:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008ef2:	1b00      	subs	r0, r0, r4
 8008ef4:	bf18      	it	ne
 8008ef6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008efa:	68eb      	ldr	r3, [r5, #12]
 8008efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f00:	4303      	orrs	r3, r0
 8008f02:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008f04:	f7fd f938 	bl	8006178 <HAL_GetTick>
 8008f08:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f0a:	686b      	ldr	r3, [r5, #4]
 8008f0c:	049a      	lsls	r2, r3, #18
 8008f0e:	d508      	bpl.n	8008f22 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008f10:	f1a4 031d 	sub.w	r3, r4, #29
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d90c      	bls.n	8008f32 <HAL_PWREx_ConfigSupply+0x56>
 8008f18:	3c2d      	subs	r4, #45	@ 0x2d
 8008f1a:	2c01      	cmp	r4, #1
 8008f1c:	d909      	bls.n	8008f32 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e7ea      	b.n	8008ef8 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f22:	f7fd f929 	bl	8006178 <HAL_GetTick>
 8008f26:	1b80      	subs	r0, r0, r6
 8008f28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008f2c:	d9ed      	bls.n	8008f0a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008f2e:	2001      	movs	r0, #1
 8008f30:	e7e2      	b.n	8008ef8 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008f32:	f7fd f921 	bl	8006178 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008f36:	4d06      	ldr	r5, [pc, #24]	@ (8008f50 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008f38:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008f3a:	68eb      	ldr	r3, [r5, #12]
 8008f3c:	03db      	lsls	r3, r3, #15
 8008f3e:	d4ee      	bmi.n	8008f1e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f40:	f7fd f91a 	bl	8006178 <HAL_GetTick>
 8008f44:	1b00      	subs	r0, r0, r4
 8008f46:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008f4a:	d9f6      	bls.n	8008f3a <HAL_PWREx_ConfigSupply+0x5e>
 8008f4c:	e7ef      	b.n	8008f2e <HAL_PWREx_ConfigSupply+0x52>
 8008f4e:	bf00      	nop
 8008f50:	58024800 	.word	0x58024800

08008f54 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008f58:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8008f5a:	b136      	cbz	r6, 8008f6a <QSPI_Config+0x16>
 8008f5c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008f60:	d003      	beq.n	8008f6a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008f62:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008f64:	6804      	ldr	r4, [r0, #0]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008f6a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f6e:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008f72:	f1ba 0f00 	cmp.w	sl, #0
 8008f76:	d04c      	beq.n	8009012 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f78:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008f7a:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f7c:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8008f80:	ea4a 0406 	orr.w	r4, sl, r6
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8008f8a:	ea44 0a02 	orr.w	sl, r4, r2
 8008f8e:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f92:	f1be 0f00 	cmp.w	lr, #0
 8008f96:	d024      	beq.n	8008fe2 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f98:	688e      	ldr	r6, [r1, #8]
 8008f9a:	ea4a 040e 	orr.w	r4, sl, lr
 8008f9e:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fa0:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fa2:	b19f      	cbz	r7, 8008fcc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fa4:	433b      	orrs	r3, r7
 8008fa6:	4303      	orrs	r3, r0
 8008fa8:	68c8      	ldr	r0, [r1, #12]
 8008faa:	ea43 0309 	orr.w	r3, r3, r9
 8008fae:	ea43 0308 	orr.w	r3, r3, r8
 8008fb2:	4333      	orrs	r3, r6
 8008fb4:	4303      	orrs	r3, r0
 8008fb6:	ea43 030c 	orr.w	r3, r3, ip
 8008fba:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008fbc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fc0:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008fc2:	d001      	beq.n	8008fc8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008fc4:	684b      	ldr	r3, [r1, #4]
 8008fc6:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fcc:	4303      	orrs	r3, r0
 8008fce:	ea43 0309 	orr.w	r3, r3, r9
 8008fd2:	ea43 0308 	orr.w	r3, r3, r8
 8008fd6:	4333      	orrs	r3, r6
 8008fd8:	ea43 030c 	orr.w	r3, r3, ip
 8008fdc:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fde:	616b      	str	r3, [r5, #20]
 8008fe0:	e7f2      	b.n	8008fc8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fe2:	b167      	cbz	r7, 8008ffe <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fe4:	433b      	orrs	r3, r7
 8008fe6:	4303      	orrs	r3, r0
 8008fe8:	68c8      	ldr	r0, [r1, #12]
 8008fea:	ea43 0309 	orr.w	r3, r3, r9
 8008fee:	ea43 0308 	orr.w	r3, r3, r8
 8008ff2:	4303      	orrs	r3, r0
 8008ff4:	ea43 030c 	orr.w	r3, r3, ip
 8008ff8:	ea43 030a 	orr.w	r3, r3, sl
 8008ffc:	e7de      	b.n	8008fbc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ffe:	4303      	orrs	r3, r0
 8009000:	ea43 0309 	orr.w	r3, r3, r9
 8009004:	ea43 0408 	orr.w	r4, r3, r8
 8009008:	ea44 030c 	orr.w	r3, r4, ip
 800900c:	ea43 030a 	orr.w	r3, r3, sl
 8009010:	e7e5      	b.n	8008fde <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009012:	f1be 0f00 	cmp.w	lr, #0
 8009016:	d02c      	beq.n	8009072 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009018:	ea46 050e 	orr.w	r5, r6, lr
 800901c:	688b      	ldr	r3, [r1, #8]
 800901e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009020:	694e      	ldr	r6, [r1, #20]
 8009022:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009024:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009026:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800902a:	04b6      	lsls	r6, r6, #18
 800902c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800902e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009032:	b1a7      	cbz	r7, 800905e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009034:	433b      	orrs	r3, r7
 8009036:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009038:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800903c:	ea43 0308 	orr.w	r3, r3, r8
 8009040:	ea43 030e 	orr.w	r3, r3, lr
 8009044:	ea43 030c 	orr.w	r3, r3, ip
 8009048:	ea43 0300 	orr.w	r3, r3, r0
 800904c:	ea43 0306 	orr.w	r3, r3, r6
 8009050:	ea43 0305 	orr.w	r3, r3, r5
 8009054:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009056:	d0b7      	beq.n	8008fc8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009058:	684b      	ldr	r3, [r1, #4]
 800905a:	61a3      	str	r3, [r4, #24]
 800905c:	e7b4      	b.n	8008fc8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800905e:	ea43 0308 	orr.w	r3, r3, r8
 8009062:	ea43 030e 	orr.w	r3, r3, lr
 8009066:	ea43 030c 	orr.w	r3, r3, ip
 800906a:	4333      	orrs	r3, r6
 800906c:	432b      	orrs	r3, r5
 800906e:	6163      	str	r3, [r4, #20]
 8009070:	e7aa      	b.n	8008fc8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009072:	b1d7      	cbz	r7, 80090aa <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009074:	ea46 0307 	orr.w	r3, r6, r7
 8009078:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800907a:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800907c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009080:	ea43 0302 	orr.w	r3, r3, r2
 8009084:	ea43 0304 	orr.w	r3, r3, r4
 8009088:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800908a:	ea43 0304 	orr.w	r3, r3, r4
 800908e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009090:	ea43 0304 	orr.w	r3, r3, r4
 8009094:	68cc      	ldr	r4, [r1, #12]
 8009096:	ea43 0304 	orr.w	r3, r3, r4
 800909a:	694c      	ldr	r4, [r1, #20]
 800909c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80090a0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80090a2:	d091      	beq.n	8008fc8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80090a4:	684b      	ldr	r3, [r1, #4]
 80090a6:	6183      	str	r3, [r0, #24]
 80090a8:	e78e      	b.n	8008fc8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	d08c      	beq.n	8008fc8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090ae:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80090b0:	6800      	ldr	r0, [r0, #0]
 80090b2:	4333      	orrs	r3, r6
 80090b4:	4313      	orrs	r3, r2
 80090b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80090b8:	4313      	orrs	r3, r2
 80090ba:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80090bc:	4313      	orrs	r3, r2
 80090be:	694a      	ldr	r2, [r1, #20]
 80090c0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80090c4:	6143      	str	r3, [r0, #20]
}
 80090c6:	e77f      	b.n	8008fc8 <QSPI_Config+0x74>

080090c8 <QSPI_WaitFlagStateUntilTimeout>:
{
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80090d0:	4604      	mov	r4, r0
 80090d2:	460e      	mov	r6, r1
 80090d4:	4615      	mov	r5, r2
 80090d6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	6893      	ldr	r3, [r2, #8]
 80090dc:	4233      	tst	r3, r6
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	42ab      	cmp	r3, r5
 80090e6:	d101      	bne.n	80090ec <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80090e8:	2000      	movs	r0, #0
 80090ea:	e012      	b.n	8009112 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80090ec:	f1b8 3fff 	cmp.w	r8, #4294967295
 80090f0:	d0f3      	beq.n	80090da <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f2:	f7fd f841 	bl	8006178 <HAL_GetTick>
 80090f6:	1bc0      	subs	r0, r0, r7
 80090f8:	4540      	cmp	r0, r8
 80090fa:	d802      	bhi.n	8009102 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80090fc:	f1b8 0f00 	cmp.w	r8, #0
 8009100:	d1ea      	bne.n	80090d8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009102:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009104:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009106:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800910a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800910c:	f043 0301 	orr.w	r3, r3, #1
 8009110:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009118 <HAL_QSPI_Init>:
{
 8009118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800911a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800911c:	f7fd f82c 	bl	8006178 <HAL_GetTick>
 8009120:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009122:	2c00      	cmp	r4, #0
 8009124:	d03f      	beq.n	80091a6 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009126:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800912a:	b92b      	cbnz	r3, 8009138 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800912c:	4620      	mov	r0, r4
 800912e:	f7f8 f873 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009136:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009138:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800913a:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800913c:	68a3      	ldr	r3, [r4, #8]
 800913e:	680a      	ldr	r2, [r1, #0]
 8009140:	3b01      	subs	r3, #1
 8009142:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009146:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800914a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800914c:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800914e:	2200      	movs	r2, #0
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	2120      	movs	r1, #32
 8009154:	462b      	mov	r3, r5
 8009156:	f7ff ffb7 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800915a:	bb10      	cbnz	r0, 80091a2 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	69e5      	ldr	r5, [r4, #28]
 8009160:	68e3      	ldr	r3, [r4, #12]
 8009162:	6811      	ldr	r1, [r2, #0]
 8009164:	432b      	orrs	r3, r5
 8009166:	6a25      	ldr	r5, [r4, #32]
 8009168:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800916c:	432b      	orrs	r3, r5
 800916e:	6865      	ldr	r5, [r4, #4]
 8009170:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009174:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009178:	430b      	orrs	r3, r1
 800917a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800917c:	6855      	ldr	r5, [r2, #4]
 800917e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009182:	430b      	orrs	r3, r1
 8009184:	6921      	ldr	r1, [r4, #16]
 8009186:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800918a:	4908      	ldr	r1, [pc, #32]	@ (80091ac <HAL_QSPI_Init+0x94>)
 800918c:	4029      	ands	r1, r5
 800918e:	430b      	orrs	r3, r1
 8009190:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	f043 0301 	orr.w	r3, r3, #1
 8009198:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800919a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800919c:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800919e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80091a2:	b003      	add	sp, #12
 80091a4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7fb      	b.n	80091a2 <HAL_QSPI_Init+0x8a>
 80091aa:	bf00      	nop
 80091ac:	ffe0f8fe 	.word	0xffe0f8fe

080091b0 <HAL_QSPI_Command>:
{
 80091b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	4604      	mov	r4, r0
 80091b6:	468a      	mov	sl, r1
 80091b8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80091ba:	f7fc ffdd 	bl	8006178 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80091be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80091c2:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d036      	beq.n	8009236 <HAL_QSPI_Command+0x86>
 80091c8:	2301      	movs	r3, #1
 80091ca:	2602      	movs	r6, #2
 80091cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091d0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	fa5f f983 	uxtb.w	r9, r3
 80091da:	d128      	bne.n	800922e <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091dc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80091de:	4603      	mov	r3, r0
 80091e0:	2120      	movs	r1, #32
 80091e2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091e4:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80091e6:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80091ea:	f8cd 8000 	str.w	r8, [sp]
 80091ee:	f7ff ff6b 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80091f2:	4605      	mov	r5, r0
 80091f4:	b9a0      	cbnz	r0, 8009220 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80091f6:	4602      	mov	r2, r0
 80091f8:	4651      	mov	r1, sl
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff feaa 	bl	8008f54 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009200:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009204:	b953      	cbnz	r3, 800921c <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009206:	463b      	mov	r3, r7
 8009208:	464a      	mov	r2, r9
 800920a:	4631      	mov	r1, r6
 800920c:	4620      	mov	r0, r4
 800920e:	f8cd 8000 	str.w	r8, [sp]
 8009212:	f7ff ff59 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009216:	b960      	cbnz	r0, 8009232 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800921c:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009226:	4628      	mov	r0, r5
 8009228:	b002      	add	sp, #8
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800922e:	4635      	mov	r5, r6
 8009230:	e7f6      	b.n	8009220 <HAL_QSPI_Command+0x70>
 8009232:	4605      	mov	r5, r0
 8009234:	e7f4      	b.n	8009220 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8009236:	2502      	movs	r5, #2
 8009238:	e7f5      	b.n	8009226 <HAL_QSPI_Command+0x76>

0800923a <HAL_QSPI_Transmit>:
{
 800923a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	4688      	mov	r8, r1
 8009242:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009244:	f7fc ff98 	bl	8006178 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009248:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800924c:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800924e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009250:	2b01      	cmp	r3, #1
 8009252:	d04c      	beq.n	80092ee <HAL_QSPI_Transmit+0xb4>
 8009254:	2301      	movs	r3, #1
 8009256:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800925a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800925e:	2b01      	cmp	r3, #1
 8009260:	b2d8      	uxtb	r0, r3
 8009262:	d142      	bne.n	80092ea <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009264:	2300      	movs	r3, #0
 8009266:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	d038      	beq.n	80092e0 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800926e:	2312      	movs	r3, #18
 8009270:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009274:	692b      	ldr	r3, [r5, #16]
 8009276:	3301      	adds	r3, #1
 8009278:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800927a:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800927c:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009280:	3301      	adds	r3, #1
 8009282:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009284:	696b      	ldr	r3, [r5, #20]
 8009286:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800928a:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800928c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800928e:	b99b      	cbnz	r3, 80092b8 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009290:	4633      	mov	r3, r6
 8009292:	2201      	movs	r2, #1
 8009294:	2102      	movs	r1, #2
 8009296:	4620      	mov	r0, r4
 8009298:	9700      	str	r7, [sp, #0]
 800929a:	f7ff ff15 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800929e:	b910      	cbnz	r0, 80092a6 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	2202      	movs	r2, #2
 80092a4:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80092ac:	2300      	movs	r3, #0
 80092ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80092b2:	b002      	add	sp, #8
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80092b8:	4633      	mov	r3, r6
 80092ba:	2201      	movs	r2, #1
 80092bc:	2104      	movs	r1, #4
 80092be:	4620      	mov	r0, r4
 80092c0:	9700      	str	r7, [sp, #0]
 80092c2:	f7ff ff01 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1ed      	bne.n	80092a6 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80092ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 80092d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80092d4:	3301      	adds	r3, #1
 80092d6:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 80092d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80092da:	3b01      	subs	r3, #1
 80092dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092de:	e7d5      	b.n	800928c <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80092e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80092e2:	f043 0308 	orr.w	r3, r3, #8
 80092e6:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80092e8:	e7e0      	b.n	80092ac <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 80092ea:	2002      	movs	r0, #2
 80092ec:	e7de      	b.n	80092ac <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 80092ee:	2002      	movs	r0, #2
 80092f0:	e7df      	b.n	80092b2 <HAL_QSPI_Transmit+0x78>

080092f2 <HAL_QSPI_Receive>:
{
 80092f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	4617      	mov	r7, r2
 80092fa:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80092fc:	f7fc ff3c 	bl	8006178 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009300:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009302:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009304:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009306:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800930a:	2b01      	cmp	r3, #1
 800930c:	d04f      	beq.n	80093ae <HAL_QSPI_Receive+0xbc>
 800930e:	2301      	movs	r3, #1
 8009310:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009314:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009318:	2b01      	cmp	r3, #1
 800931a:	b2d8      	uxtb	r0, r3
 800931c:	d145      	bne.n	80093aa <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800931e:	2300      	movs	r3, #0
 8009320:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009322:	f1b8 0f00 	cmp.w	r8, #0
 8009326:	d03b      	beq.n	80093a0 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009328:	2322      	movs	r3, #34	@ 0x22
 800932a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800932e:	692b      	ldr	r3, [r5, #16]
 8009330:	3301      	adds	r3, #1
 8009332:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009334:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009336:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800933a:	3301      	adds	r3, #1
 800933c:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800933e:	6969      	ldr	r1, [r5, #20]
 8009340:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009344:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8009348:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800934a:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800934c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800934e:	b99b      	cbnz	r3, 8009378 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009350:	4633      	mov	r3, r6
 8009352:	2201      	movs	r2, #1
 8009354:	2102      	movs	r1, #2
 8009356:	4620      	mov	r0, r4
 8009358:	9700      	str	r7, [sp, #0]
 800935a:	f7ff feb5 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800935e:	b910      	cbnz	r0, 8009366 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	2202      	movs	r2, #2
 8009364:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009366:	2301      	movs	r3, #1
 8009368:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800936c:	2300      	movs	r3, #0
 800936e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009372:	b002      	add	sp, #8
 8009374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009378:	4633      	mov	r3, r6
 800937a:	2201      	movs	r2, #1
 800937c:	2106      	movs	r1, #6
 800937e:	4620      	mov	r0, r4
 8009380:	9700      	str	r7, [sp, #0]
 8009382:	f7ff fea1 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009386:	2800      	cmp	r0, #0
 8009388:	d1ed      	bne.n	8009366 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800938a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800938e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009390:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009392:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009394:	3301      	adds	r3, #1
 8009396:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009398:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800939a:	3b01      	subs	r3, #1
 800939c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800939e:	e7d5      	b.n	800934c <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80093a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80093a2:	f043 0308 	orr.w	r3, r3, #8
 80093a6:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80093a8:	e7e0      	b.n	800936c <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 80093aa:	2002      	movs	r0, #2
 80093ac:	e7de      	b.n	800936c <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 80093ae:	2002      	movs	r0, #2
 80093b0:	e7df      	b.n	8009372 <HAL_QSPI_Receive+0x80>

080093b2 <HAL_QSPI_AutoPolling>:
{
 80093b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	461f      	mov	r7, r3
 80093ba:	4689      	mov	r9, r1
 80093bc:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80093be:	f7fc fedb 	bl	8006178 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80093c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80093c6:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d041      	beq.n	8009450 <HAL_QSPI_AutoPolling+0x9e>
 80093cc:	2301      	movs	r3, #1
 80093ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80093d2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	fa5f f883 	uxtb.w	r8, r3
 80093dc:	d136      	bne.n	800944c <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80093de:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80093e0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80093e2:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80093e4:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80093e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80093ea:	4603      	mov	r3, r0
 80093ec:	9700      	str	r7, [sp, #0]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f7ff fe6a 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80093f4:	bb20      	cbnz	r0, 8009440 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80093f6:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80093f8:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80093fa:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80093fc:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80093fe:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009400:	686b      	ldr	r3, [r5, #4]
 8009402:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009404:	68ab      	ldr	r3, [r5, #8]
 8009406:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009408:	6813      	ldr	r3, [r2, #0]
 800940a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800940e:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009410:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009412:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009416:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009418:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800941c:	68eb      	ldr	r3, [r5, #12]
 800941e:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009422:	f7ff fd97 	bl	8008f54 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009426:	4633      	mov	r3, r6
 8009428:	4642      	mov	r2, r8
 800942a:	2108      	movs	r1, #8
 800942c:	4620      	mov	r0, r4
 800942e:	9700      	str	r7, [sp, #0]
 8009430:	f7ff fe4a 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009434:	b920      	cbnz	r0, 8009440 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	2208      	movs	r2, #8
 800943a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800943c:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009440:	2300      	movs	r3, #0
 8009442:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800944c:	2002      	movs	r0, #2
 800944e:	e7f7      	b.n	8009440 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8009450:	2002      	movs	r0, #2
 8009452:	e7f8      	b.n	8009446 <HAL_QSPI_AutoPolling+0x94>

08009454 <HAL_QSPI_MemoryMapped>:
{
 8009454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	4616      	mov	r6, r2
 800945a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800945c:	f7fc fe8c 	bl	8006178 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009460:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009464:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009466:	2a01      	cmp	r2, #1
 8009468:	d033      	beq.n	80094d2 <HAL_QSPI_MemoryMapped+0x7e>
 800946a:	2201      	movs	r2, #1
 800946c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009470:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009474:	2a01      	cmp	r2, #1
 8009476:	d12a      	bne.n	80094ce <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009478:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800947a:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800947c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800947e:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009480:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009484:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009486:	9100      	str	r1, [sp, #0]
 8009488:	2120      	movs	r1, #32
 800948a:	f7ff fe1d 	bl	80090c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800948e:	4605      	mov	r5, r0
 8009490:	b9b8      	cbnz	r0, 80094c2 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	6872      	ldr	r2, [r6, #4]
 8009496:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009498:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800949a:	f020 0008 	bic.w	r0, r0, #8
 800949e:	ea40 0002 	orr.w	r0, r0, r2
 80094a2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80094a4:	d107      	bne.n	80094b6 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80094a6:	6832      	ldr	r2, [r6, #0]
 80094a8:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80094aa:	2210      	movs	r2, #16
 80094ac:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80094b4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80094b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80094ba:	4639      	mov	r1, r7
 80094bc:	4620      	mov	r0, r4
 80094be:	f7ff fd49 	bl	8008f54 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80094c2:	2300      	movs	r3, #0
 80094c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80094c8:	4628      	mov	r0, r5
 80094ca:	b003      	add	sp, #12
 80094cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80094ce:	2502      	movs	r5, #2
 80094d0:	e7f7      	b.n	80094c2 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80094d2:	2502      	movs	r5, #2
 80094d4:	e7f8      	b.n	80094c8 <HAL_QSPI_MemoryMapped+0x74>
	...

080094d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094da:	4604      	mov	r4, r0
 80094dc:	2800      	cmp	r0, #0
 80094de:	d074      	beq.n	80095ca <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094e0:	6803      	ldr	r3, [r0, #0]
 80094e2:	07d8      	lsls	r0, r3, #31
 80094e4:	d45e      	bmi.n	80095a4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	0799      	lsls	r1, r3, #30
 80094ea:	f100 80ad 	bmi.w	8009648 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	06da      	lsls	r2, r3, #27
 80094f2:	d527      	bpl.n	8009544 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094f4:	4a9c      	ldr	r2, [pc, #624]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 80094f6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d007      	beq.n	8009512 <HAL_RCC_OscConfig+0x3a>
 8009502:	2b18      	cmp	r3, #24
 8009504:	f040 8103 	bne.w	800970e <HAL_RCC_OscConfig+0x236>
 8009508:	f001 0303 	and.w	r3, r1, #3
 800950c:	2b01      	cmp	r3, #1
 800950e:	f040 80fe 	bne.w	800970e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	05db      	lsls	r3, r3, #23
 8009516:	d502      	bpl.n	800951e <HAL_RCC_OscConfig+0x46>
 8009518:	69e3      	ldr	r3, [r4, #28]
 800951a:	2b80      	cmp	r3, #128	@ 0x80
 800951c:	d155      	bne.n	80095ca <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800951e:	f7fc fe43 	bl	80061a8 <HAL_GetREVID>
 8009522:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009526:	6a21      	ldr	r1, [r4, #32]
 8009528:	4298      	cmp	r0, r3
 800952a:	4b8f      	ldr	r3, [pc, #572]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 800952c:	f200 80e8 	bhi.w	8009700 <HAL_RCC_OscConfig+0x228>
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	2920      	cmp	r1, #32
 8009534:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009538:	bf0c      	ite	eq
 800953a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800953e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009542:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	0719      	lsls	r1, r3, #28
 8009548:	f100 8123 	bmi.w	8009792 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	069a      	lsls	r2, r3, #26
 8009550:	f100 8144 	bmi.w	80097dc <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	075d      	lsls	r5, r3, #29
 8009558:	d51e      	bpl.n	8009598 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800955a:	4d84      	ldr	r5, [pc, #528]	@ (800976c <HAL_RCC_OscConfig+0x294>)
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009562:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009564:	f7fc fe08 	bl	8006178 <HAL_GetTick>
 8009568:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800956a:	682b      	ldr	r3, [r5, #0]
 800956c:	05da      	lsls	r2, r3, #23
 800956e:	f140 815a 	bpl.w	8009826 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	4d7c      	ldr	r5, [pc, #496]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 8009576:	2b01      	cmp	r3, #1
 8009578:	f040 815c 	bne.w	8009834 <HAL_RCC_OscConfig+0x35c>
 800957c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009584:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009588:	f7fc fdf6 	bl	8006178 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800958c:	4e76      	ldr	r6, [pc, #472]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800958e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009590:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8009592:	079b      	lsls	r3, r3, #30
 8009594:	f140 8174 	bpl.w	8009880 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009598:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800959a:	2900      	cmp	r1, #0
 800959c:	f040 8177 	bne.w	800988e <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80095a0:	2000      	movs	r0, #0
 80095a2:	e02b      	b.n	80095fc <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095a4:	4a70      	ldr	r2, [pc, #448]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 80095a6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d005      	beq.n	80095be <HAL_RCC_OscConfig+0xe6>
 80095b2:	2b18      	cmp	r3, #24
 80095b4:	d10b      	bne.n	80095ce <HAL_RCC_OscConfig+0xf6>
 80095b6:	f001 0303 	and.w	r3, r1, #3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d107      	bne.n	80095ce <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	039a      	lsls	r2, r3, #14
 80095c2:	d590      	bpl.n	80094e6 <HAL_RCC_OscConfig+0xe>
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d18d      	bne.n	80094e6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80095ca:	2001      	movs	r0, #1
 80095cc:	e016      	b.n	80095fc <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	4d65      	ldr	r5, [pc, #404]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 80095d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d6:	d112      	bne.n	80095fe <HAL_RCC_OscConfig+0x126>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80095e0:	f7fc fdca 	bl	8006178 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095e4:	4e60      	ldr	r6, [pc, #384]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80095e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095e8:	6833      	ldr	r3, [r6, #0]
 80095ea:	039b      	lsls	r3, r3, #14
 80095ec:	f53f af7b 	bmi.w	80094e6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095f0:	f7fc fdc2 	bl	8006178 <HAL_GetTick>
 80095f4:	1b40      	subs	r0, r0, r5
 80095f6:	2864      	cmp	r0, #100	@ 0x64
 80095f8:	d9f6      	bls.n	80095e8 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80095fa:	2003      	movs	r0, #3
}
 80095fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095fe:	b9a3      	cbnz	r3, 800962a <HAL_RCC_OscConfig+0x152>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800960e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009610:	f7fc fdb2 	bl	8006178 <HAL_GetTick>
 8009614:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	039f      	lsls	r7, r3, #14
 800961a:	f57f af64 	bpl.w	80094e6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800961e:	f7fc fdab 	bl	8006178 <HAL_GetTick>
 8009622:	1b80      	subs	r0, r0, r6
 8009624:	2864      	cmp	r0, #100	@ 0x64
 8009626:	d9f6      	bls.n	8009616 <HAL_RCC_OscConfig+0x13e>
 8009628:	e7e7      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800962a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	d103      	bne.n	800963a <HAL_RCC_OscConfig+0x162>
 8009632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	e7ce      	b.n	80095d8 <HAL_RCC_OscConfig+0x100>
 800963a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009646:	e7ca      	b.n	80095de <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009648:	4947      	ldr	r1, [pc, #284]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 800964a:	68e2      	ldr	r2, [r4, #12]
 800964c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800964e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009650:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009654:	d003      	beq.n	800965e <HAL_RCC_OscConfig+0x186>
 8009656:	2b18      	cmp	r3, #24
 8009658:	d12a      	bne.n	80096b0 <HAL_RCC_OscConfig+0x1d8>
 800965a:	0780      	lsls	r0, r0, #30
 800965c:	d128      	bne.n	80096b0 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800965e:	680b      	ldr	r3, [r1, #0]
 8009660:	075b      	lsls	r3, r3, #29
 8009662:	d501      	bpl.n	8009668 <HAL_RCC_OscConfig+0x190>
 8009664:	2a00      	cmp	r2, #0
 8009666:	d0b0      	beq.n	80095ca <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009668:	4d3f      	ldr	r5, [pc, #252]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	f023 0319 	bic.w	r3, r3, #25
 8009670:	4313      	orrs	r3, r2
 8009672:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009674:	f7fc fd80 	bl	8006178 <HAL_GetTick>
 8009678:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	075f      	lsls	r7, r3, #29
 800967e:	d511      	bpl.n	80096a4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009680:	f7fc fd92 	bl	80061a8 <HAL_GetREVID>
 8009684:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009688:	6922      	ldr	r2, [r4, #16]
 800968a:	4298      	cmp	r0, r3
 800968c:	686b      	ldr	r3, [r5, #4]
 800968e:	d822      	bhi.n	80096d6 <HAL_RCC_OscConfig+0x1fe>
 8009690:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009694:	2a40      	cmp	r2, #64	@ 0x40
 8009696:	bf0c      	ite	eq
 8009698:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800969c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80096a0:	606b      	str	r3, [r5, #4]
 80096a2:	e724      	b.n	80094ee <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096a4:	f7fc fd68 	bl	8006178 <HAL_GetTick>
 80096a8:	1b80      	subs	r0, r0, r6
 80096aa:	2802      	cmp	r0, #2
 80096ac:	d9e5      	bls.n	800967a <HAL_RCC_OscConfig+0x1a2>
 80096ae:	e7a4      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096b0:	4d2d      	ldr	r5, [pc, #180]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096b2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096b4:	b1a2      	cbz	r2, 80096e0 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096b6:	f023 0319 	bic.w	r3, r3, #25
 80096ba:	4313      	orrs	r3, r2
 80096bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096be:	f7fc fd5b 	bl	8006178 <HAL_GetTick>
 80096c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	0758      	lsls	r0, r3, #29
 80096c8:	d4da      	bmi.n	8009680 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ca:	f7fc fd55 	bl	8006178 <HAL_GetTick>
 80096ce:	1b80      	subs	r0, r0, r6
 80096d0:	2802      	cmp	r0, #2
 80096d2:	d9f7      	bls.n	80096c4 <HAL_RCC_OscConfig+0x1ec>
 80096d4:	e791      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096d6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80096da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80096de:	e7df      	b.n	80096a0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096e6:	f7fc fd47 	bl	8006178 <HAL_GetTick>
 80096ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	0759      	lsls	r1, r3, #29
 80096f0:	f57f aefd 	bpl.w	80094ee <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096f4:	f7fc fd40 	bl	8006178 <HAL_GetTick>
 80096f8:	1b80      	subs	r0, r0, r6
 80096fa:	2802      	cmp	r0, #2
 80096fc:	d9f6      	bls.n	80096ec <HAL_RCC_OscConfig+0x214>
 80096fe:	e77c      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009706:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	e71a      	b.n	8009544 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800970e:	69e3      	ldr	r3, [r4, #28]
 8009710:	4d15      	ldr	r5, [pc, #84]	@ (8009768 <HAL_RCC_OscConfig+0x290>)
 8009712:	b36b      	cbz	r3, 8009770 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800971a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800971c:	f7fc fd2c 	bl	8006178 <HAL_GetTick>
 8009720:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	05df      	lsls	r7, r3, #23
 8009726:	d511      	bpl.n	800974c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009728:	f7fc fd3e 	bl	80061a8 <HAL_GetREVID>
 800972c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009730:	6a22      	ldr	r2, [r4, #32]
 8009732:	4298      	cmp	r0, r3
 8009734:	d810      	bhi.n	8009758 <HAL_RCC_OscConfig+0x280>
 8009736:	686b      	ldr	r3, [r5, #4]
 8009738:	2a20      	cmp	r2, #32
 800973a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800973e:	bf0c      	ite	eq
 8009740:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009744:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009748:	606b      	str	r3, [r5, #4]
 800974a:	e6fb      	b.n	8009544 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800974c:	f7fc fd14 	bl	8006178 <HAL_GetTick>
 8009750:	1b80      	subs	r0, r0, r6
 8009752:	2802      	cmp	r0, #2
 8009754:	d9e5      	bls.n	8009722 <HAL_RCC_OscConfig+0x24a>
 8009756:	e750      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009758:	68eb      	ldr	r3, [r5, #12]
 800975a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800975e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009762:	60eb      	str	r3, [r5, #12]
 8009764:	e6ee      	b.n	8009544 <HAL_RCC_OscConfig+0x6c>
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009776:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009778:	f7fc fcfe 	bl	8006178 <HAL_GetTick>
 800977c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	05d8      	lsls	r0, r3, #23
 8009782:	f57f aedf 	bpl.w	8009544 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009786:	f7fc fcf7 	bl	8006178 <HAL_GetTick>
 800978a:	1b80      	subs	r0, r0, r6
 800978c:	2802      	cmp	r0, #2
 800978e:	d9f6      	bls.n	800977e <HAL_RCC_OscConfig+0x2a6>
 8009790:	e733      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	4da5      	ldr	r5, [pc, #660]	@ (8009a2c <HAL_RCC_OscConfig+0x554>)
 8009796:	b183      	cbz	r3, 80097ba <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009798:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80097a0:	f7fc fcea 	bl	8006178 <HAL_GetTick>
 80097a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097a6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80097a8:	079b      	lsls	r3, r3, #30
 80097aa:	f53f aecf 	bmi.w	800954c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097ae:	f7fc fce3 	bl	8006178 <HAL_GetTick>
 80097b2:	1b80      	subs	r0, r0, r6
 80097b4:	2802      	cmp	r0, #2
 80097b6:	d9f6      	bls.n	80097a6 <HAL_RCC_OscConfig+0x2ce>
 80097b8:	e71f      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80097ba:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80097bc:	f023 0301 	bic.w	r3, r3, #1
 80097c0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80097c2:	f7fc fcd9 	bl	8006178 <HAL_GetTick>
 80097c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097c8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80097ca:	079f      	lsls	r7, r3, #30
 80097cc:	f57f aebe 	bpl.w	800954c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097d0:	f7fc fcd2 	bl	8006178 <HAL_GetTick>
 80097d4:	1b80      	subs	r0, r0, r6
 80097d6:	2802      	cmp	r0, #2
 80097d8:	d9f6      	bls.n	80097c8 <HAL_RCC_OscConfig+0x2f0>
 80097da:	e70e      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80097dc:	69a3      	ldr	r3, [r4, #24]
 80097de:	4d93      	ldr	r5, [pc, #588]	@ (8009a2c <HAL_RCC_OscConfig+0x554>)
 80097e0:	b183      	cbz	r3, 8009804 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80097e8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80097ea:	f7fc fcc5 	bl	8006178 <HAL_GetTick>
 80097ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	0498      	lsls	r0, r3, #18
 80097f4:	f53f aeae 	bmi.w	8009554 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097f8:	f7fc fcbe 	bl	8006178 <HAL_GetTick>
 80097fc:	1b80      	subs	r0, r0, r6
 80097fe:	2802      	cmp	r0, #2
 8009800:	d9f6      	bls.n	80097f0 <HAL_RCC_OscConfig+0x318>
 8009802:	e6fa      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800980a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800980c:	f7fc fcb4 	bl	8006178 <HAL_GetTick>
 8009810:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	0499      	lsls	r1, r3, #18
 8009816:	f57f ae9d 	bpl.w	8009554 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800981a:	f7fc fcad 	bl	8006178 <HAL_GetTick>
 800981e:	1b80      	subs	r0, r0, r6
 8009820:	2802      	cmp	r0, #2
 8009822:	d9f6      	bls.n	8009812 <HAL_RCC_OscConfig+0x33a>
 8009824:	e6e9      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009826:	f7fc fca7 	bl	8006178 <HAL_GetTick>
 800982a:	1b80      	subs	r0, r0, r6
 800982c:	2864      	cmp	r0, #100	@ 0x64
 800982e:	f67f ae9c 	bls.w	800956a <HAL_RCC_OscConfig+0x92>
 8009832:	e6e2      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009834:	b9b3      	cbnz	r3, 8009864 <HAL_RCC_OscConfig+0x38c>
 8009836:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009838:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800983c:	f023 0301 	bic.w	r3, r3, #1
 8009840:	672b      	str	r3, [r5, #112]	@ 0x70
 8009842:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009844:	f023 0304 	bic.w	r3, r3, #4
 8009848:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800984a:	f7fc fc95 	bl	8006178 <HAL_GetTick>
 800984e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009850:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009852:	0798      	lsls	r0, r3, #30
 8009854:	f57f aea0 	bpl.w	8009598 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009858:	f7fc fc8e 	bl	8006178 <HAL_GetTick>
 800985c:	1b80      	subs	r0, r0, r6
 800985e:	42b8      	cmp	r0, r7
 8009860:	d9f6      	bls.n	8009850 <HAL_RCC_OscConfig+0x378>
 8009862:	e6ca      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009864:	2b05      	cmp	r3, #5
 8009866:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009868:	d103      	bne.n	8009872 <HAL_RCC_OscConfig+0x39a>
 800986a:	f043 0304 	orr.w	r3, r3, #4
 800986e:	672b      	str	r3, [r5, #112]	@ 0x70
 8009870:	e684      	b.n	800957c <HAL_RCC_OscConfig+0xa4>
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	672b      	str	r3, [r5, #112]	@ 0x70
 8009878:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800987a:	f023 0304 	bic.w	r3, r3, #4
 800987e:	e680      	b.n	8009582 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009880:	f7fc fc7a 	bl	8006178 <HAL_GetTick>
 8009884:	1b40      	subs	r0, r0, r5
 8009886:	42b8      	cmp	r0, r7
 8009888:	f67f ae82 	bls.w	8009590 <HAL_RCC_OscConfig+0xb8>
 800988c:	e6b5      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800988e:	4d67      	ldr	r5, [pc, #412]	@ (8009a2c <HAL_RCC_OscConfig+0x554>)
 8009890:	692b      	ldr	r3, [r5, #16]
 8009892:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009896:	2b18      	cmp	r3, #24
 8009898:	d07a      	beq.n	8009990 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800989a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800989c:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800989e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098a2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098a4:	d167      	bne.n	8009976 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 80098a6:	f7fc fc67 	bl	8006178 <HAL_GetTick>
 80098aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	0199      	lsls	r1, r3, #6
 80098b0:	d45b      	bmi.n	800996a <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098b2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80098b4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80098b6:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	4313      	orrs	r3, r2
 80098c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80098c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80098c6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80098c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80098cc:	3b01      	subs	r3, #1
 80098ce:	3a01      	subs	r2, #1
 80098d0:	025b      	lsls	r3, r3, #9
 80098d2:	0412      	lsls	r2, r2, #16
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80098da:	4313      	orrs	r3, r2
 80098dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80098de:	3a01      	subs	r2, #1
 80098e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e4:	4313      	orrs	r3, r2
 80098e6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80098e8:	3a01      	subs	r2, #1
 80098ea:	0612      	lsls	r2, r2, #24
 80098ec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80098f0:	4313      	orrs	r3, r2
 80098f2:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80098f4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80098f6:	f023 0301 	bic.w	r3, r3, #1
 80098fa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098fc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80098fe:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009900:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009904:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009908:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800990c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800990e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009910:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009912:	f023 030c 	bic.w	r3, r3, #12
 8009916:	4313      	orrs	r3, r2
 8009918:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800991a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800991c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800991e:	f023 0302 	bic.w	r3, r3, #2
 8009922:	4313      	orrs	r3, r2
 8009924:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009926:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800992c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009934:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009936:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800993c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800993e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009940:	f043 0301 	orr.w	r3, r3, #1
 8009944:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800994c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800994e:	f7fc fc13 	bl	8006178 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009952:	4d36      	ldr	r5, [pc, #216]	@ (8009a2c <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8009954:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	019a      	lsls	r2, r3, #6
 800995a:	f53f ae21 	bmi.w	80095a0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800995e:	f7fc fc0b 	bl	8006178 <HAL_GetTick>
 8009962:	1b00      	subs	r0, r0, r4
 8009964:	2802      	cmp	r0, #2
 8009966:	d9f6      	bls.n	8009956 <HAL_RCC_OscConfig+0x47e>
 8009968:	e647      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800996a:	f7fc fc05 	bl	8006178 <HAL_GetTick>
 800996e:	1b80      	subs	r0, r0, r6
 8009970:	2802      	cmp	r0, #2
 8009972:	d99b      	bls.n	80098ac <HAL_RCC_OscConfig+0x3d4>
 8009974:	e641      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009976:	f7fc fbff 	bl	8006178 <HAL_GetTick>
 800997a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	019b      	lsls	r3, r3, #6
 8009980:	f57f ae0e 	bpl.w	80095a0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009984:	f7fc fbf8 	bl	8006178 <HAL_GetTick>
 8009988:	1b00      	subs	r0, r0, r4
 800998a:	2802      	cmp	r0, #2
 800998c:	d9f6      	bls.n	800997c <HAL_RCC_OscConfig+0x4a4>
 800998e:	e634      	b.n	80095fa <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009990:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009992:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009994:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009996:	f43f ae18 	beq.w	80095ca <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800999a:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800999e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80099a0:	4281      	cmp	r1, r0
 80099a2:	f47f ae12 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099a6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099ac:	428a      	cmp	r2, r1
 80099ae:	f47f ae0c 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80099b4:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80099b8:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099ba:	4291      	cmp	r1, r2
 80099bc:	f47f ae05 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099c0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099c2:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80099c6:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099c8:	4291      	cmp	r1, r2
 80099ca:	f47f adfe 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80099d0:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80099d4:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099d6:	4291      	cmp	r1, r2
 80099d8:	f47f adf7 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80099dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80099de:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099e2:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099e4:	4293      	cmp	r3, r2
 80099e6:	f47f adf0 	bne.w	80095ca <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80099ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80099ec:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80099ee:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80099f2:	429a      	cmp	r2, r3
 80099f4:	f43f add4 	beq.w	80095a0 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 80099f8:	4d0c      	ldr	r5, [pc, #48]	@ (8009a2c <HAL_RCC_OscConfig+0x554>)
 80099fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009a02:	f7fc fbb9 	bl	8006178 <HAL_GetTick>
 8009a06:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a08:	f7fc fbb6 	bl	8006178 <HAL_GetTick>
 8009a0c:	42b0      	cmp	r0, r6
 8009a0e:	d0fb      	beq.n	8009a08 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a10:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009a12:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009a14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009a20:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009a22:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009a2a:	e5b9      	b.n	80095a0 <HAL_RCC_OscConfig+0xc8>
 8009a2c:	58024400 	.word	0x58024400

08009a30 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4c23      	ldr	r4, [pc, #140]	@ (8009ac0 <HAL_RCC_MCOConfig+0x90>)
 8009a34:	b088      	sub	sp, #32
 8009a36:	460e      	mov	r6, r1
 8009a38:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009a3a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009a3e:	b9f8      	cbnz	r0, 8009a80 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009a40:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a44:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a48:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009a4a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009a4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a52:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a62:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a64:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a68:	4816      	ldr	r0, [pc, #88]	@ (8009ac4 <HAL_RCC_MCOConfig+0x94>)
 8009a6a:	f7fd fa0b 	bl	8006e84 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8009a74:	ea43 0106 	orr.w	r1, r3, r6
 8009a78:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009a7a:	6121      	str	r1, [r4, #16]
  }
}
 8009a7c:	b008      	add	sp, #32
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009a80:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a88:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009a8a:	480f      	ldr	r0, [pc, #60]	@ (8009ac8 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009a8c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009a90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009aa8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009aaa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009aac:	f7fd f9ea 	bl	8006e84 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009ab6:	ea43 0106 	orr.w	r1, r3, r6
 8009aba:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009abe:	e7dc      	b.n	8009a7a <HAL_RCC_MCOConfig+0x4a>
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	58020000 	.word	0x58020000
 8009ac8:	58020800 	.word	0x58020800

08009acc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009acc:	4b49      	ldr	r3, [pc, #292]	@ (8009bf4 <HAL_RCC_GetSysClockFreq+0x128>)
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009ad4:	2a10      	cmp	r2, #16
{
 8009ad6:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ad8:	f000 8088 	beq.w	8009bec <HAL_RCC_GetSysClockFreq+0x120>
 8009adc:	2a18      	cmp	r2, #24
 8009ade:	d00c      	beq.n	8009afa <HAL_RCC_GetSysClockFreq+0x2e>
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	f040 8085 	bne.w	8009bf0 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	4843      	ldr	r0, [pc, #268]	@ (8009bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009aea:	f012 0f20 	tst.w	r2, #32
 8009aee:	d003      	beq.n	8009af8 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009af6:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009af8:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009afa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009afc:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009afe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009b00:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b04:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009b0a:	d0f5      	beq.n	8009af8 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b0c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b10:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b14:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b18:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b1c:	4362      	muls	r2, r4
 8009b1e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009b22:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b28:	ee06 2a90 	vmov	s13, r2
 8009b2c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009b30:	d04e      	beq.n	8009bd0 <HAL_RCC_GetSysClockFreq+0x104>
 8009b32:	2902      	cmp	r1, #2
 8009b34:	d03e      	beq.n	8009bb4 <HAL_RCC_GetSysClockFreq+0xe8>
 8009b36:	2900      	cmp	r1, #0
 8009b38:	d14a      	bne.n	8009bd0 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	0692      	lsls	r2, r2, #26
 8009b3e:	d527      	bpl.n	8009b90 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b40:	6819      	ldr	r1, [r3, #0]
 8009b42:	4a2d      	ldr	r2, [pc, #180]	@ (8009bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009b44:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b50:	ee07 2a90 	vmov	s15, r2
 8009b54:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009b58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009b5c:	ee07 3a10 	vmov	s14, r3
 8009b60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009b68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b70:	4b20      	ldr	r3, [pc, #128]	@ (8009bf4 <HAL_RCC_GetSysClockFreq+0x128>)
 8009b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b78:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b7a:	ee07 3a10 	vmov	s14, r3
 8009b7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009b82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009b86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009b8a:	ee17 0a90 	vmov	r0, s15
 8009b8e:	e7b3      	b.n	8009af8 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009ba6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009bfc <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009baa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009bae:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009bb2:	e7dd      	b.n	8009b70 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009bca:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009c00 <HAL_RCC_GetSysClockFreq+0x134>
 8009bce:	e7ec      	b.n	8009baa <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009be6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009c04 <HAL_RCC_GetSysClockFreq+0x138>
 8009bea:	e7de      	b.n	8009baa <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bec:	4806      	ldr	r0, [pc, #24]	@ (8009c08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009bee:	e783      	b.n	8009af8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009bf0:	4806      	ldr	r0, [pc, #24]	@ (8009c0c <HAL_RCC_GetSysClockFreq+0x140>)
 8009bf2:	e781      	b.n	8009af8 <HAL_RCC_GetSysClockFreq+0x2c>
 8009bf4:	58024400 	.word	0x58024400
 8009bf8:	03d09000 	.word	0x03d09000
 8009bfc:	4c742400 	.word	0x4c742400
 8009c00:	4bbebc20 	.word	0x4bbebc20
 8009c04:	4a742400 	.word	0x4a742400
 8009c08:	017d7840 	.word	0x017d7840
 8009c0c:	003d0900 	.word	0x003d0900

08009c10 <HAL_RCC_ClockConfig>:
{
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009c16:	4604      	mov	r4, r0
 8009c18:	b910      	cbnz	r0, 8009c20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009c1a:	2001      	movs	r0, #1
}
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c20:	4a88      	ldr	r2, [pc, #544]	@ (8009e44 <HAL_RCC_ClockConfig+0x234>)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	428b      	cmp	r3, r1
 8009c2a:	f0c0 8093 	bcc.w	8009d54 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	075f      	lsls	r7, r3, #29
 8009c32:	f100 809b 	bmi.w	8009d6c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c36:	071e      	lsls	r6, r3, #28
 8009c38:	d50b      	bpl.n	8009c52 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c3a:	4983      	ldr	r1, [pc, #524]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009c3c:	6960      	ldr	r0, [r4, #20]
 8009c3e:	69ca      	ldr	r2, [r1, #28]
 8009c40:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c44:	4290      	cmp	r0, r2
 8009c46:	d904      	bls.n	8009c52 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c48:	69ca      	ldr	r2, [r1, #28]
 8009c4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c4e:	4302      	orrs	r2, r0
 8009c50:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c52:	06d8      	lsls	r0, r3, #27
 8009c54:	d50b      	bpl.n	8009c6e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c56:	497c      	ldr	r1, [pc, #496]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009c58:	69a0      	ldr	r0, [r4, #24]
 8009c5a:	69ca      	ldr	r2, [r1, #28]
 8009c5c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009c60:	4290      	cmp	r0, r2
 8009c62:	d904      	bls.n	8009c6e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c64:	69ca      	ldr	r2, [r1, #28]
 8009c66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c6a:	4302      	orrs	r2, r0
 8009c6c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c6e:	0699      	lsls	r1, r3, #26
 8009c70:	d50b      	bpl.n	8009c8a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c72:	4975      	ldr	r1, [pc, #468]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009c74:	69e0      	ldr	r0, [r4, #28]
 8009c76:	6a0a      	ldr	r2, [r1, #32]
 8009c78:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c7c:	4290      	cmp	r0, r2
 8009c7e:	d904      	bls.n	8009c8a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c80:	6a0a      	ldr	r2, [r1, #32]
 8009c82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c86:	4302      	orrs	r2, r0
 8009c88:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c8a:	079a      	lsls	r2, r3, #30
 8009c8c:	d50b      	bpl.n	8009ca6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c8e:	496e      	ldr	r1, [pc, #440]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009c90:	68e0      	ldr	r0, [r4, #12]
 8009c92:	698a      	ldr	r2, [r1, #24]
 8009c94:	f002 020f 	and.w	r2, r2, #15
 8009c98:	4290      	cmp	r0, r2
 8009c9a:	d904      	bls.n	8009ca6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c9c:	698a      	ldr	r2, [r1, #24]
 8009c9e:	f022 020f 	bic.w	r2, r2, #15
 8009ca2:	4302      	orrs	r2, r0
 8009ca4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ca6:	07df      	lsls	r7, r3, #31
 8009ca8:	d46e      	bmi.n	8009d88 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	079e      	lsls	r6, r3, #30
 8009cae:	f100 80a1 	bmi.w	8009df4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb2:	4964      	ldr	r1, [pc, #400]	@ (8009e44 <HAL_RCC_ClockConfig+0x234>)
 8009cb4:	680a      	ldr	r2, [r1, #0]
 8009cb6:	f002 020f 	and.w	r2, r2, #15
 8009cba:	42aa      	cmp	r2, r5
 8009cbc:	f200 80a8 	bhi.w	8009e10 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cc0:	0758      	lsls	r0, r3, #29
 8009cc2:	f100 80b1 	bmi.w	8009e28 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cc6:	0719      	lsls	r1, r3, #28
 8009cc8:	d50b      	bpl.n	8009ce2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009cca:	495f      	ldr	r1, [pc, #380]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009ccc:	6960      	ldr	r0, [r4, #20]
 8009cce:	69ca      	ldr	r2, [r1, #28]
 8009cd0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009cd4:	4290      	cmp	r0, r2
 8009cd6:	d204      	bcs.n	8009ce2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009cd8:	69ca      	ldr	r2, [r1, #28]
 8009cda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009cde:	4302      	orrs	r2, r0
 8009ce0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ce2:	06da      	lsls	r2, r3, #27
 8009ce4:	d50b      	bpl.n	8009cfe <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ce6:	4958      	ldr	r1, [pc, #352]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009ce8:	69a0      	ldr	r0, [r4, #24]
 8009cea:	69ca      	ldr	r2, [r1, #28]
 8009cec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009cf0:	4290      	cmp	r0, r2
 8009cf2:	d204      	bcs.n	8009cfe <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009cf4:	69ca      	ldr	r2, [r1, #28]
 8009cf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009cfa:	4302      	orrs	r2, r0
 8009cfc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cfe:	069b      	lsls	r3, r3, #26
 8009d00:	d50b      	bpl.n	8009d1a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d02:	4a51      	ldr	r2, [pc, #324]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009d04:	69e1      	ldr	r1, [r4, #28]
 8009d06:	6a13      	ldr	r3, [r2, #32]
 8009d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	d204      	bcs.n	8009d1a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d10:	6a13      	ldr	r3, [r2, #32]
 8009d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d16:	430b      	orrs	r3, r1
 8009d18:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009d1a:	f7ff fed7 	bl	8009acc <HAL_RCC_GetSysClockFreq>
 8009d1e:	494a      	ldr	r1, [pc, #296]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009d20:	4a4a      	ldr	r2, [pc, #296]	@ (8009e4c <HAL_RCC_ClockConfig+0x23c>)
 8009d22:	698b      	ldr	r3, [r1, #24]
 8009d24:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009d28:	5cd3      	ldrb	r3, [r2, r3]
 8009d2a:	f003 031f 	and.w	r3, r3, #31
 8009d2e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d30:	698b      	ldr	r3, [r1, #24]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	5cd3      	ldrb	r3, [r2, r3]
 8009d38:	4a45      	ldr	r2, [pc, #276]	@ (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009d3a:	f003 031f 	and.w	r3, r3, #31
 8009d3e:	fa20 f303 	lsr.w	r3, r0, r3
 8009d42:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009d44:	4b43      	ldr	r3, [pc, #268]	@ (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d46:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009d48:	4b43      	ldr	r3, [pc, #268]	@ (8009e58 <HAL_RCC_ClockConfig+0x248>)
}
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	f7f7 bc0a 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d54:	6813      	ldr	r3, [r2, #0]
 8009d56:	f023 030f 	bic.w	r3, r3, #15
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d5e:	6813      	ldr	r3, [r2, #0]
 8009d60:	f003 030f 	and.w	r3, r3, #15
 8009d64:	428b      	cmp	r3, r1
 8009d66:	f47f af58 	bne.w	8009c1a <HAL_RCC_ClockConfig+0xa>
 8009d6a:	e760      	b.n	8009c2e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d6c:	4936      	ldr	r1, [pc, #216]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009d6e:	6920      	ldr	r0, [r4, #16]
 8009d70:	698a      	ldr	r2, [r1, #24]
 8009d72:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009d76:	4290      	cmp	r0, r2
 8009d78:	f67f af5d 	bls.w	8009c36 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d7c:	698a      	ldr	r2, [r1, #24]
 8009d7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d82:	4302      	orrs	r2, r0
 8009d84:	618a      	str	r2, [r1, #24]
 8009d86:	e756      	b.n	8009c36 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d88:	4b2f      	ldr	r3, [pc, #188]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009d8a:	68a1      	ldr	r1, [r4, #8]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009d92:	430a      	orrs	r2, r1
 8009d94:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d96:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d98:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d9a:	2902      	cmp	r1, #2
 8009d9c:	d11d      	bne.n	8009dda <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d9e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009da2:	f43f af3a 	beq.w	8009c1a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009da6:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dac:	4f26      	ldr	r7, [pc, #152]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dae:	f022 0207 	bic.w	r2, r2, #7
 8009db2:	430a      	orrs	r2, r1
 8009db4:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009db6:	f7fc f9df 	bl	8006178 <HAL_GetTick>
 8009dba:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6862      	ldr	r2, [r4, #4]
 8009dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dc4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009dc8:	f43f af6f 	beq.w	8009caa <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dcc:	f7fc f9d4 	bl	8006178 <HAL_GetTick>
 8009dd0:	1b80      	subs	r0, r0, r6
 8009dd2:	4540      	cmp	r0, r8
 8009dd4:	d9f2      	bls.n	8009dbc <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009dd6:	2003      	movs	r0, #3
 8009dd8:	e720      	b.n	8009c1c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dda:	2903      	cmp	r1, #3
 8009ddc:	d102      	bne.n	8009de4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dde:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009de2:	e7de      	b.n	8009da2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009de4:	2901      	cmp	r1, #1
 8009de6:	d102      	bne.n	8009dee <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009de8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009dec:	e7d9      	b.n	8009da2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dee:	f012 0f04 	tst.w	r2, #4
 8009df2:	e7d6      	b.n	8009da2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009df4:	4914      	ldr	r1, [pc, #80]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009df6:	68e0      	ldr	r0, [r4, #12]
 8009df8:	698a      	ldr	r2, [r1, #24]
 8009dfa:	f002 020f 	and.w	r2, r2, #15
 8009dfe:	4290      	cmp	r0, r2
 8009e00:	f4bf af57 	bcs.w	8009cb2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e04:	698a      	ldr	r2, [r1, #24]
 8009e06:	f022 020f 	bic.w	r2, r2, #15
 8009e0a:	4302      	orrs	r2, r0
 8009e0c:	618a      	str	r2, [r1, #24]
 8009e0e:	e750      	b.n	8009cb2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e10:	680a      	ldr	r2, [r1, #0]
 8009e12:	f022 020f 	bic.w	r2, r2, #15
 8009e16:	432a      	orrs	r2, r5
 8009e18:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e1a:	680a      	ldr	r2, [r1, #0]
 8009e1c:	f002 020f 	and.w	r2, r2, #15
 8009e20:	42aa      	cmp	r2, r5
 8009e22:	f47f aefa 	bne.w	8009c1a <HAL_RCC_ClockConfig+0xa>
 8009e26:	e74b      	b.n	8009cc0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e28:	4907      	ldr	r1, [pc, #28]	@ (8009e48 <HAL_RCC_ClockConfig+0x238>)
 8009e2a:	6920      	ldr	r0, [r4, #16]
 8009e2c:	698a      	ldr	r2, [r1, #24]
 8009e2e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e32:	4290      	cmp	r0, r2
 8009e34:	f4bf af47 	bcs.w	8009cc6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e38:	698a      	ldr	r2, [r1, #24]
 8009e3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009e3e:	4302      	orrs	r2, r0
 8009e40:	618a      	str	r2, [r1, #24]
 8009e42:	e740      	b.n	8009cc6 <HAL_RCC_ClockConfig+0xb6>
 8009e44:	52002000 	.word	0x52002000
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	08025994 	.word	0x08025994
 8009e50:	24000068 	.word	0x24000068
 8009e54:	2400006c 	.word	0x2400006c
 8009e58:	24000074 	.word	0x24000074

08009e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e5c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e5e:	f7ff fe35 	bl	8009acc <HAL_RCC_GetSysClockFreq>
 8009e62:	4a0b      	ldr	r2, [pc, #44]	@ (8009e90 <HAL_RCC_GetHCLKFreq+0x34>)
 8009e64:	490b      	ldr	r1, [pc, #44]	@ (8009e94 <HAL_RCC_GetHCLKFreq+0x38>)
 8009e66:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e68:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e6a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e6e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e72:	5ccb      	ldrb	r3, [r1, r3]
 8009e74:	f003 031f 	and.w	r3, r3, #31
 8009e78:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e7c:	5c88      	ldrb	r0, [r1, r2]
 8009e7e:	4a06      	ldr	r2, [pc, #24]	@ (8009e98 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009e80:	f000 001f 	and.w	r0, r0, #31
 8009e84:	fa23 f000 	lsr.w	r0, r3, r0
 8009e88:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e8a:	4a04      	ldr	r2, [pc, #16]	@ (8009e9c <HAL_RCC_GetHCLKFreq+0x40>)
 8009e8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009e8e:	bd08      	pop	{r3, pc}
 8009e90:	58024400 	.word	0x58024400
 8009e94:	08025994 	.word	0x08025994
 8009e98:	24000068 	.word	0x24000068
 8009e9c:	2400006c 	.word	0x2400006c

08009ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ea0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ea2:	f7ff ffdb 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009ea6:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009ea8:	4a05      	ldr	r2, [pc, #20]	@ (8009ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009eb0:	5cd3      	ldrb	r3, [r2, r3]
 8009eb2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009eb6:	40d8      	lsrs	r0, r3
 8009eb8:	bd08      	pop	{r3, pc}
 8009eba:	bf00      	nop
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	08025994 	.word	0x08025994

08009ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ec4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ec6:	f7ff ffc9 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009eca:	4b05      	ldr	r3, [pc, #20]	@ (8009ee0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009ecc:	4a05      	ldr	r2, [pc, #20]	@ (8009ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009ed4:	5cd3      	ldrb	r3, [r2, r3]
 8009ed6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009eda:	40d8      	lsrs	r0, r3
 8009edc:	bd08      	pop	{r3, pc}
 8009ede:	bf00      	nop
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	08025994 	.word	0x08025994

08009ee8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009ee8:	233f      	movs	r3, #63	@ 0x3f
 8009eea:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009eec:	4b11      	ldr	r3, [pc, #68]	@ (8009f34 <HAL_RCC_GetClockConfig+0x4c>)
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	f002 0207 	and.w	r2, r2, #7
 8009ef4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009efc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009efe:	699a      	ldr	r2, [r3, #24]
 8009f00:	f002 020f 	and.w	r2, r2, #15
 8009f04:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009f06:	699a      	ldr	r2, [r3, #24]
 8009f08:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009f0c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009f0e:	69da      	ldr	r2, [r3, #28]
 8009f10:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009f14:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009f1c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f24:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009f26:	4b04      	ldr	r3, [pc, #16]	@ (8009f38 <HAL_RCC_GetClockConfig+0x50>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 030f 	and.w	r3, r3, #15
 8009f2e:	600b      	str	r3, [r1, #0]
}
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	58024400 	.word	0x58024400
 8009f38:	52002000 	.word	0x52002000

08009f3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f3e:	4c3a      	ldr	r4, [pc, #232]	@ (800a028 <RCCEx_PLL2_Config+0xec>)
{
 8009f40:	4606      	mov	r6, r0
 8009f42:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d069      	beq.n	800a022 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f56:	f7fc f90f 	bl	8006178 <HAL_GetTick>
 8009f5a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	011a      	lsls	r2, r3, #4
 8009f60:	d44b      	bmi.n	8009ffa <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f64:	6832      	ldr	r2, [r6, #0]
 8009f66:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009f6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009f6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f70:	68b3      	ldr	r3, [r6, #8]
 8009f72:	68f2      	ldr	r2, [r6, #12]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	3a01      	subs	r2, #1
 8009f78:	025b      	lsls	r3, r3, #9
 8009f7a:	0412      	lsls	r2, r2, #16
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f82:	4313      	orrs	r3, r2
 8009f84:	6872      	ldr	r2, [r6, #4]
 8009f86:	3a01      	subs	r2, #1
 8009f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	6932      	ldr	r2, [r6, #16]
 8009f90:	3a01      	subs	r2, #1
 8009f92:	0612      	lsls	r2, r2, #24
 8009f94:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f9e:	6972      	ldr	r2, [r6, #20]
 8009fa0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fa8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009faa:	69b2      	ldr	r2, [r6, #24]
 8009fac:	f023 0320 	bic.w	r3, r3, #32
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fb6:	f023 0310 	bic.w	r3, r3, #16
 8009fba:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009fbe:	69f2      	ldr	r2, [r6, #28]
 8009fc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fc4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009fc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009fcc:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009fce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fd0:	f043 0310 	orr.w	r3, r3, #16
 8009fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009fd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009fd8:	b9b5      	cbnz	r5, 800a008 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fde:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fe0:	4c11      	ldr	r4, [pc, #68]	@ (800a028 <RCCEx_PLL2_Config+0xec>)
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fe8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fea:	f7fc f8c5 	bl	8006178 <HAL_GetTick>
 8009fee:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	d50f      	bpl.n	800a016 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e005      	b.n	800a006 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ffa:	f7fc f8bd 	bl	8006178 <HAL_GetTick>
 8009ffe:	1bc0      	subs	r0, r0, r7
 800a000:	2802      	cmp	r0, #2
 800a002:	d9ab      	bls.n	8009f5c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a004:	2003      	movs	r0, #3
}
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a008:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a00a:	bf0c      	ite	eq
 800a00c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a010:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a014:	e7e3      	b.n	8009fde <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a016:	f7fc f8af 	bl	8006178 <HAL_GetTick>
 800a01a:	1b40      	subs	r0, r0, r5
 800a01c:	2802      	cmp	r0, #2
 800a01e:	d9e7      	bls.n	8009ff0 <RCCEx_PLL2_Config+0xb4>
 800a020:	e7f0      	b.n	800a004 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800a022:	2001      	movs	r0, #1
 800a024:	e7ef      	b.n	800a006 <RCCEx_PLL2_Config+0xca>
 800a026:	bf00      	nop
 800a028:	58024400 	.word	0x58024400

0800a02c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a02e:	4c3a      	ldr	r4, [pc, #232]	@ (800a118 <RCCEx_PLL3_Config+0xec>)
{
 800a030:	4606      	mov	r6, r0
 800a032:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a034:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d069      	beq.n	800a112 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a044:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a046:	f7fc f897 	bl	8006178 <HAL_GetTick>
 800a04a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	009a      	lsls	r2, r3, #2
 800a050:	d44b      	bmi.n	800a0ea <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a052:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a054:	6832      	ldr	r2, [r6, #0]
 800a056:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a05a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a05e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a060:	68b3      	ldr	r3, [r6, #8]
 800a062:	68f2      	ldr	r2, [r6, #12]
 800a064:	3b01      	subs	r3, #1
 800a066:	3a01      	subs	r2, #1
 800a068:	025b      	lsls	r3, r3, #9
 800a06a:	0412      	lsls	r2, r2, #16
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a072:	4313      	orrs	r3, r2
 800a074:	6872      	ldr	r2, [r6, #4]
 800a076:	3a01      	subs	r2, #1
 800a078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a07c:	4313      	orrs	r3, r2
 800a07e:	6932      	ldr	r2, [r6, #16]
 800a080:	3a01      	subs	r2, #1
 800a082:	0612      	lsls	r2, r2, #24
 800a084:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a088:	4313      	orrs	r3, r2
 800a08a:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a08c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a08e:	6972      	ldr	r2, [r6, #20]
 800a090:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a094:	4313      	orrs	r3, r2
 800a096:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a098:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a09a:	69b2      	ldr	r2, [r6, #24]
 800a09c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a0a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0aa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a0ae:	69f2      	ldr	r2, [r6, #28]
 800a0b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a0b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a0bc:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a0c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0c4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a0c8:	b9b5      	cbnz	r5, 800a0f8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a0ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0d0:	4c11      	ldr	r4, [pc, #68]	@ (800a118 <RCCEx_PLL3_Config+0xec>)
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0da:	f7fc f84d 	bl	8006178 <HAL_GetTick>
 800a0de:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	d50f      	bpl.n	800a106 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	e005      	b.n	800a0f6 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0ea:	f7fc f845 	bl	8006178 <HAL_GetTick>
 800a0ee:	1bc0      	subs	r0, r0, r7
 800a0f0:	2802      	cmp	r0, #2
 800a0f2:	d9ab      	bls.n	800a04c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a0f4:	2003      	movs	r0, #3
}
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0f8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a0fa:	bf0c      	ite	eq
 800a0fc:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a100:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a104:	e7e3      	b.n	800a0ce <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a106:	f7fc f837 	bl	8006178 <HAL_GetTick>
 800a10a:	1b40      	subs	r0, r0, r5
 800a10c:	2802      	cmp	r0, #2
 800a10e:	d9e7      	bls.n	800a0e0 <RCCEx_PLL3_Config+0xb4>
 800a110:	e7f0      	b.n	800a0f4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800a112:	2001      	movs	r0, #1
 800a114:	e7ef      	b.n	800a0f6 <RCCEx_PLL3_Config+0xca>
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400

0800a11c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a120:	6803      	ldr	r3, [r0, #0]
{
 800a122:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a124:	011c      	lsls	r4, r3, #4
 800a126:	d51e      	bpl.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a128:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a12a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a12e:	d02a      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a130:	d80f      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a132:	b1d3      	cbz	r3, 800a16a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a138:	d01d      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a13a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	05d8      	lsls	r0, r3, #23
 800a140:	d54f      	bpl.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a142:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a144:	2b04      	cmp	r3, #4
 800a146:	d84b      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a148:	e8df f003 	tbb	[pc, r3]
 800a14c:	27443d22 	.word	0x27443d22
 800a150:	27          	.byte	0x27
 800a151:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a156:	d1f0      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a158:	4a86      	ldr	r2, [pc, #536]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a15a:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a15c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a15e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a162:	430b      	orrs	r3, r1
 800a164:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a166:	2600      	movs	r6, #0
 800a168:	e7e8      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a16a:	4a82      	ldr	r2, [pc, #520]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a16c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a16e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a172:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a174:	e7f0      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a176:	2102      	movs	r1, #2
 800a178:	3008      	adds	r0, #8
 800a17a:	f7ff fedf 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a17e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a180:	2800      	cmp	r0, #0
 800a182:	d1db      	bne.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a184:	e7e8      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a186:	2102      	movs	r1, #2
 800a188:	3028      	adds	r0, #40	@ 0x28
 800a18a:	f7ff ff4f 	bl	800a02c <RCCEx_PLL3_Config>
 800a18e:	e7f6      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a190:	4a78      	ldr	r2, [pc, #480]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a192:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a19a:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a19c:	bb1c      	cbnz	r4, 800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a19e:	4a75      	ldr	r2, [pc, #468]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1a0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a1a2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1a4:	f023 0307 	bic.w	r3, r3, #7
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	0599      	lsls	r1, r3, #22
 800a1b0:	d528      	bpl.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a1b2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a1b4:	2b80      	cmp	r3, #128	@ 0x80
 800a1b6:	d043      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a1b8:	d817      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a1ba:	b3a3      	cbz	r3, 800a226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a1bc:	2b40      	cmp	r3, #64	@ 0x40
 800a1be:	d038      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a1c0:	2601      	movs	r6, #1
 800a1c2:	4634      	mov	r4, r6
 800a1c4:	e01e      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	f105 0008 	add.w	r0, r5, #8
 800a1cc:	f7ff feb6 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d0:	4604      	mov	r4, r0
        break;
 800a1d2:	e7e3      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a1da:	f7ff ff27 	bl	800a02c <RCCEx_PLL3_Config>
 800a1de:	e7f7      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a1e0:	2601      	movs	r6, #1
 800a1e2:	4634      	mov	r4, r6
 800a1e4:	e7e2      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a1e6:	4626      	mov	r6, r4
 800a1e8:	e7e0      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a1ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1ec:	d002      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a1ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1f2:	d1e5      	bne.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a1f4:	bb54      	cbnz	r4, 800a24c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a1f6:	4a5f      	ldr	r2, [pc, #380]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1f8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a1fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1fc:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a200:	430b      	orrs	r3, r1
 800a202:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	055a      	lsls	r2, r3, #21
 800a208:	d531      	bpl.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a20a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a20e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a212:	d049      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a214:	d81c      	bhi.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d039      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a21a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a21e:	d03c      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a220:	2601      	movs	r6, #1
 800a222:	4634      	mov	r4, r6
 800a224:	e023      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a226:	4a53      	ldr	r2, [pc, #332]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a228:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a22a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a22e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a230:	e7e0      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a232:	2100      	movs	r1, #0
 800a234:	f105 0008 	add.w	r0, r5, #8
 800a238:	f7ff fe80 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a23c:	4604      	mov	r4, r0
        break;
 800a23e:	e7d9      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a240:	2100      	movs	r1, #0
 800a242:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a246:	f7ff fef1 	bl	800a02c <RCCEx_PLL3_Config>
 800a24a:	e7f7      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a24c:	4626      	mov	r6, r4
 800a24e:	e7d9      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a250:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a254:	d002      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a256:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a25a:	d1e1      	bne.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a25c:	bb54      	cbnz	r4, 800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a25e:	4a45      	ldr	r2, [pc, #276]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a260:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a264:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a266:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a26a:	430b      	orrs	r3, r1
 800a26c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	051b      	lsls	r3, r3, #20
 800a272:	d530      	bpl.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a274:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a27c:	d045      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a27e:	d81b      	bhi.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a280:	b3b3      	cbz	r3, 800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a286:	d039      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a288:	2601      	movs	r6, #1
 800a28a:	4634      	mov	r4, r6
 800a28c:	e023      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28e:	4a39      	ldr	r2, [pc, #228]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a290:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a296:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a298:	e7e0      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a29a:	2100      	movs	r1, #0
 800a29c:	f105 0008 	add.w	r0, r5, #8
 800a2a0:	f7ff fe4c 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2a4:	4604      	mov	r4, r0
        break;
 800a2a6:	e7d9      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a2ae:	f7ff febd 	bl	800a02c <RCCEx_PLL3_Config>
 800a2b2:	e7f7      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a2b4:	4626      	mov	r6, r4
 800a2b6:	e7da      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a2b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2bc:	d002      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a2be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2c2:	d1e1      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a2c4:	bb3c      	cbnz	r4, 800a316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a2c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a2c8:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a2cc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a2ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	019f      	lsls	r7, r3, #6
 800a2da:	d528      	bpl.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a2dc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d03e      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a2e2:	d81a      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a2e4:	b1db      	cbz	r3, 800a31e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a2e6:	2b10      	cmp	r3, #16
 800a2e8:	d034      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a2ea:	2601      	movs	r6, #1
 800a2ec:	4634      	mov	r4, r6
 800a2ee:	e01e      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f0:	4a20      	ldr	r2, [pc, #128]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a2f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a2fa:	e7e3      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	f105 0008 	add.w	r0, r5, #8
 800a302:	f7ff fe1b 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a306:	4604      	mov	r4, r0
        break;
 800a308:	e7dc      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a30a:	2100      	movs	r1, #0
 800a30c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a310:	f7ff fe8c 	bl	800a02c <RCCEx_PLL3_Config>
 800a314:	e7f7      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a316:	4626      	mov	r6, r4
 800a318:	e7dd      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a31a:	2b30      	cmp	r3, #48	@ 0x30
 800a31c:	d1e5      	bne.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a31e:	bb34      	cbnz	r4, 800a36e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a320:	4a14      	ldr	r2, [pc, #80]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a322:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a324:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a326:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a32a:	430b      	orrs	r3, r1
 800a32c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	04d8      	lsls	r0, r3, #19
 800a332:	d530      	bpl.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a33a:	f000 8097 	beq.w	800a46c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a33e:	d81b      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8086 	beq.w	800a452 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a34a:	f000 8088 	beq.w	800a45e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a34e:	2601      	movs	r6, #1
 800a350:	4634      	mov	r4, r6
 800a352:	e020      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a354:	4a07      	ldr	r2, [pc, #28]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a356:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a35c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a35e:	e7de      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a360:	2102      	movs	r1, #2
 800a362:	f105 0008 	add.w	r0, r5, #8
 800a366:	f7ff fde9 	bl	8009f3c <RCCEx_PLL2_Config>
 800a36a:	4604      	mov	r4, r0
        break;
 800a36c:	e7d7      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a36e:	4626      	mov	r6, r4
 800a370:	e7dd      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a372:	bf00      	nop
 800a374:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a37c:	d002      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a37e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a382:	d1e4      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a384:	2c00      	cmp	r4, #0
 800a386:	d177      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a388:	4a9e      	ldr	r2, [pc, #632]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a38a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a38c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a392:	430b      	orrs	r3, r1
 800a394:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	0499      	lsls	r1, r3, #18
 800a39a:	d50c      	bpl.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a39c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a39e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a2:	f000 8083 	beq.w	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a3a6:	d869      	bhi.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d06f      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a3ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3b0:	d075      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a3b2:	2601      	movs	r6, #1
 800a3b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3b6:	682b      	ldr	r3, [r5, #0]
 800a3b8:	045a      	lsls	r2, r3, #17
 800a3ba:	d50e      	bpl.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c4:	f000 8093 	beq.w	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a3c8:	d878      	bhi.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d07e      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a3ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3d2:	f000 8085 	beq.w	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a3d6:	2601      	movs	r6, #1
 800a3d8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	015b      	lsls	r3, r3, #5
 800a3de:	d515      	bpl.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a3e0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a3e2:	b14b      	cbz	r3, 800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a3e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3e8:	f040 8089 	bne.w	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	f105 0008 	add.w	r0, r5, #8
 800a3f2:	f7ff fda3 	bl	8009f3c <RCCEx_PLL2_Config>
 800a3f6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	f040 8083 	bne.w	800a504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a3fe:	4a81      	ldr	r2, [pc, #516]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a400:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a402:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a408:	430b      	orrs	r3, r1
 800a40a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	041f      	lsls	r7, r3, #16
 800a410:	d511      	bpl.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a412:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a418:	d076      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41e:	d079      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d17e      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a424:	2c00      	cmp	r4, #0
 800a426:	d17f      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a428:	4a76      	ldr	r2, [pc, #472]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a42a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a42c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a42e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a432:	430b      	orrs	r3, r1
 800a434:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	01d8      	lsls	r0, r3, #7
 800a43a:	f140 8085 	bpl.w	800a548 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a43e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a440:	2b03      	cmp	r3, #3
 800a442:	f200 80e5 	bhi.w	800a610 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a446:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a44a:	0076      	.short	0x0076
 800a44c:	00d50071 	.word	0x00d50071
 800a450:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a452:	4a6c      	ldr	r2, [pc, #432]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a454:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a45a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a45c:	e792      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a45e:	2100      	movs	r1, #0
 800a460:	f105 0008 	add.w	r0, r5, #8
 800a464:	f7ff fd6a 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a468:	4604      	mov	r4, r0
        break;
 800a46a:	e78b      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a46c:	2100      	movs	r1, #0
 800a46e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a472:	f7ff fddb 	bl	800a02c <RCCEx_PLL3_Config>
 800a476:	e7f7      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a478:	4626      	mov	r6, r4
 800a47a:	e78c      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a47c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a480:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a484:	d002      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a486:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a48a:	d192      	bne.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a48c:	b9a4      	cbnz	r4, 800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a48e:	4a5d      	ldr	r2, [pc, #372]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a490:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a492:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a494:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a498:	430b      	orrs	r3, r1
 800a49a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a49c:	e78b      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a49e:	2101      	movs	r1, #1
 800a4a0:	f105 0008 	add.w	r0, r5, #8
 800a4a4:	f7ff fd4a 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4a8:	4604      	mov	r4, r0
        break;
 800a4aa:	e7ef      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a4b2:	f7ff fdbb 	bl	800a02c <RCCEx_PLL3_Config>
 800a4b6:	e7f7      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a4b8:	4626      	mov	r6, r4
 800a4ba:	e77c      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a4bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a4c0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a4c4:	d002      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a4c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4ca:	d184      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a4cc:	b9ac      	cbnz	r4, 800a4fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4ce:	4a4d      	ldr	r2, [pc, #308]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a4d0:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a4d4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a4d6:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4de:	e77c      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	f105 0008 	add.w	r0, r5, #8
 800a4e6:	f7ff fd29 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ea:	4604      	mov	r4, r0
        break;
 800a4ec:	e7ee      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a4f4:	f7ff fd9a 	bl	800a02c <RCCEx_PLL3_Config>
 800a4f8:	e7f7      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a4fa:	4626      	mov	r6, r4
 800a4fc:	e76d      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a4fe:	2601      	movs	r6, #1
 800a500:	4634      	mov	r4, r6
 800a502:	e783      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800a504:	4626      	mov	r6, r4
 800a506:	e781      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a508:	4a3e      	ldr	r2, [pc, #248]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a50a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a50c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a510:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a512:	e787      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a514:	2101      	movs	r1, #1
 800a516:	f105 0008 	add.w	r0, r5, #8
 800a51a:	f7ff fd0f 	bl	8009f3c <RCCEx_PLL2_Config>
 800a51e:	4604      	mov	r4, r0
        break;
 800a520:	e780      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a522:	2601      	movs	r6, #1
 800a524:	4634      	mov	r4, r6
 800a526:	e786      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800a528:	4626      	mov	r6, r4
 800a52a:	e784      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52c:	4a35      	ldr	r2, [pc, #212]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a52e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a534:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a536:	2c00      	cmp	r4, #0
 800a538:	d16d      	bne.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a53a:	4a32      	ldr	r2, [pc, #200]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a53c:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a53e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a540:	f023 0303 	bic.w	r3, r3, #3
 800a544:	430b      	orrs	r3, r1
 800a546:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	0259      	lsls	r1, r3, #9
 800a54c:	d539      	bpl.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a54e:	4f2e      	ldr	r7, [pc, #184]	@ (800a608 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a556:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a558:	f7fb fe0e 	bl	8006178 <HAL_GetTick>
 800a55c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	05da      	lsls	r2, r3, #23
 800a562:	d55a      	bpl.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800a564:	2c00      	cmp	r4, #0
 800a566:	d176      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a568:	4b26      	ldr	r3, [pc, #152]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a56a:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a56e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a570:	4042      	eors	r2, r0
 800a572:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a576:	d00b      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a57a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a57c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a580:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a584:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a586:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a588:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a58c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a58e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a590:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a594:	d04a      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a596:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a59a:	491a      	ldr	r1, [pc, #104]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a59c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a5a0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a5a4:	d153      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x532>
 800a5a6:	6908      	ldr	r0, [r1, #16]
 800a5a8:	4a18      	ldr	r2, [pc, #96]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800a5aa:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a5ae:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a5b2:	4302      	orrs	r2, r0
 800a5b4:	610a      	str	r2, [r1, #16]
 800a5b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ba:	4a12      	ldr	r2, [pc, #72]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a5bc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5c2:	682b      	ldr	r3, [r5, #0]
 800a5c4:	07d8      	lsls	r0, r3, #31
 800a5c6:	d50a      	bpl.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5c8:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a5cc:	2b10      	cmp	r3, #16
 800a5ce:	d05b      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a5d0:	d843      	bhi.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d047      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a5d6:	2b08      	cmp	r3, #8
 800a5d8:	d04f      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a5da:	2601      	movs	r6, #1
 800a5dc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	0799      	lsls	r1, r3, #30
 800a5e2:	d567      	bpl.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5e4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	d87a      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a5ea:	e8df f003 	tbb	[pc, r3]
 800a5ee:	555b      	.short	0x555b
 800a5f0:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5f4:	2102      	movs	r1, #2
 800a5f6:	f105 0008 	add.w	r0, r5, #8
 800a5fa:	f7ff fc9f 	bl	8009f3c <RCCEx_PLL2_Config>
 800a5fe:	4604      	mov	r4, r0
        break;
 800a600:	e799      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a602:	bf00      	nop
 800a604:	58024400 	.word	0x58024400
 800a608:	58024800 	.word	0x58024800
 800a60c:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800a610:	2601      	movs	r6, #1
 800a612:	4634      	mov	r4, r6
 800a614:	e798      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a616:	4626      	mov	r6, r4
 800a618:	e796      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a61a:	f7fb fdad 	bl	8006178 <HAL_GetTick>
 800a61e:	eba0 0008 	sub.w	r0, r0, r8
 800a622:	2864      	cmp	r0, #100	@ 0x64
 800a624:	d99b      	bls.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800a626:	2603      	movs	r6, #3
 800a628:	4634      	mov	r4, r6
 800a62a:	e7ca      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800a62c:	f7fb fda4 	bl	8006178 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a630:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a6ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800a634:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a636:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a63a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a63e:	079b      	lsls	r3, r3, #30
 800a640:	d4a9      	bmi.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a642:	f7fb fd99 	bl	8006178 <HAL_GetTick>
 800a646:	1bc0      	subs	r0, r0, r7
 800a648:	4548      	cmp	r0, r9
 800a64a:	d9f6      	bls.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a64c:	e7eb      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a64e:	690a      	ldr	r2, [r1, #16]
 800a650:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a654:	e7ae      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a656:	4626      	mov	r6, r4
 800a658:	e7b3      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a65a:	f023 0208 	bic.w	r2, r3, #8
 800a65e:	2a20      	cmp	r2, #32
 800a660:	d001      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a662:	2b18      	cmp	r3, #24
 800a664:	d1b9      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800a666:	b9ac      	cbnz	r4, 800a694 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a668:	4a20      	ldr	r2, [pc, #128]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a66a:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a66e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a670:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a674:	430b      	orrs	r3, r1
 800a676:	6553      	str	r3, [r2, #84]	@ 0x54
 800a678:	e7b1      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a67a:	2101      	movs	r1, #1
 800a67c:	f105 0008 	add.w	r0, r5, #8
 800a680:	f7ff fc5c 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a684:	4604      	mov	r4, r0
        break;
 800a686:	e7ee      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a688:	2101      	movs	r1, #1
 800a68a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a68e:	f7ff fccd 	bl	800a02c <RCCEx_PLL3_Config>
 800a692:	e7f7      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800a694:	4626      	mov	r6, r4
 800a696:	e7a2      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a698:	2101      	movs	r1, #1
 800a69a:	f105 0008 	add.w	r0, r5, #8
 800a69e:	f7ff fc4d 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6a2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a6a4:	b9fc      	cbnz	r4, 800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6a6:	4a11      	ldr	r2, [pc, #68]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6a8:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a6aa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6ac:	f023 0307 	bic.w	r3, r3, #7
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	075a      	lsls	r2, r3, #29
 800a6b8:	d52b      	bpl.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6ba:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a6be:	2b05      	cmp	r3, #5
 800a6c0:	f200 816e 	bhi.w	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a6c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a6c8:	0014001a 	.word	0x0014001a
 800a6cc:	001a0166 	.word	0x001a0166
 800a6d0:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a6da:	f7ff fca7 	bl	800a02c <RCCEx_PLL3_Config>
 800a6de:	e7e0      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6e0:	2601      	movs	r6, #1
 800a6e2:	4634      	mov	r4, r6
 800a6e4:	e7e6      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a6e6:	4626      	mov	r6, r4
 800a6e8:	e7e4      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a6ea:	bf00      	nop
 800a6ec:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	f105 0008 	add.w	r0, r5, #8
 800a6f6:	f7ff fc21 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6fa:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a6fc:	2c00      	cmp	r4, #0
 800a6fe:	f040 8152 	bne.w	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a702:	4aaa      	ldr	r2, [pc, #680]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a704:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a708:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	430b      	orrs	r3, r1
 800a710:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a712:	682b      	ldr	r3, [r5, #0]
 800a714:	069b      	lsls	r3, r3, #26
 800a716:	d510      	bpl.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a718:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a720:	f000 8160 	beq.w	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800a724:	f200 8144 	bhi.w	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 814a 	beq.w	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a72e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a732:	f000 8150 	beq.w	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a736:	2601      	movs	r6, #1
 800a738:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	065f      	lsls	r7, r3, #25
 800a73e:	d510      	bpl.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a740:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a748:	f000 816e 	beq.w	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a74c:	f200 8152 	bhi.w	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 8158 	beq.w	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a75a:	f000 815e 	beq.w	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a75e:	2601      	movs	r6, #1
 800a760:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	0618      	lsls	r0, r3, #24
 800a766:	d510      	bpl.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a768:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a76c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a770:	f000 817c 	beq.w	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a774:	f200 8160 	bhi.w	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8166 	beq.w	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a782:	f000 816c 	beq.w	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a786:	2601      	movs	r6, #1
 800a788:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a78a:	682b      	ldr	r3, [r5, #0]
 800a78c:	0719      	lsls	r1, r3, #28
 800a78e:	d514      	bpl.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a790:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a798:	d107      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a79a:	2102      	movs	r1, #2
 800a79c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7a0:	f7ff fc44 	bl	800a02c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	bf18      	it	ne
 800a7a8:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a7aa:	4a80      	ldr	r2, [pc, #512]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a7ac:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a7b0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a7b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a7ba:	682b      	ldr	r3, [r5, #0]
 800a7bc:	06da      	lsls	r2, r3, #27
 800a7be:	d514      	bpl.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a7c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c8:	d107      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7ca:	2102      	movs	r1, #2
 800a7cc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7d0:	f7ff fc2c 	bl	800a02c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	bf18      	it	ne
 800a7d8:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a7da:	4a74      	ldr	r2, [pc, #464]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a7dc:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a7e0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a7e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	031b      	lsls	r3, r3, #12
 800a7ee:	d51b      	bpl.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800a7f0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a7f4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a7f8:	f000 8140 	beq.w	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a7fc:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a800:	d007      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800a802:	2900      	cmp	r1, #0
 800a804:	f040 8140 	bne.w	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a808:	f105 0008 	add.w	r0, r5, #8
 800a80c:	f7ff fb96 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a810:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a812:	2c00      	cmp	r4, #0
 800a814:	f040 813b 	bne.w	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a818:	4a64      	ldr	r2, [pc, #400]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a81a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a81e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a820:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a824:	430b      	orrs	r3, r1
 800a826:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	035f      	lsls	r7, r3, #13
 800a82c:	d50f      	bpl.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800a82e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a836:	f000 813b 	beq.w	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800a83a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a83e:	f000 812d 	beq.w	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a846:	f000 8124 	beq.w	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a84a:	2601      	movs	r6, #1
 800a84c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	03d8      	lsls	r0, r3, #15
 800a852:	d509      	bpl.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a854:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 8133 	beq.w	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800a85c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a860:	f000 813d 	beq.w	800aade <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a864:	2601      	movs	r6, #1
 800a866:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	0099      	lsls	r1, r3, #2
 800a86c:	d507      	bpl.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a86e:	2102      	movs	r1, #2
 800a870:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a874:	f7ff fbda 	bl	800a02c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a878:	2800      	cmp	r0, #0
 800a87a:	bf18      	it	ne
 800a87c:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a87e:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a882:	039a      	lsls	r2, r3, #14
 800a884:	f140 8143 	bpl.w	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800a888:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a88c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a890:	f000 813f 	beq.w	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800a894:	f200 812c 	bhi.w	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a898:	2800      	cmp	r0, #0
 800a89a:	f000 812f 	beq.w	800aafc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800a89e:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8a0:	02df      	lsls	r7, r3, #11
 800a8a2:	d506      	bpl.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8a4:	4841      	ldr	r0, [pc, #260]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8a6:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a8a8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a8aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8ae:	4332      	orrs	r2, r6
 800a8b0:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8b2:	00de      	lsls	r6, r3, #3
 800a8b4:	d507      	bpl.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8b6:	483d      	ldr	r0, [pc, #244]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8b8:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a8bc:	6902      	ldr	r2, [r0, #16]
 800a8be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8c2:	4332      	orrs	r2, r6
 800a8c4:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8c6:	0298      	lsls	r0, r3, #10
 800a8c8:	d506      	bpl.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8ca:	4838      	ldr	r0, [pc, #224]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8cc:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a8ce:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a8d0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a8d4:	4332      	orrs	r2, r6
 800a8d6:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8d8:	005a      	lsls	r2, r3, #1
 800a8da:	d509      	bpl.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8dc:	4a33      	ldr	r2, [pc, #204]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8de:	6910      	ldr	r0, [r2, #16]
 800a8e0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a8e4:	6110      	str	r0, [r2, #16]
 800a8e6:	6910      	ldr	r0, [r2, #16]
 800a8e8:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a8ec:	4330      	orrs	r0, r6
 800a8ee:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da06      	bge.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8f4:	482d      	ldr	r0, [pc, #180]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8f6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a8f8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a8fa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a8fe:	4332      	orrs	r2, r6
 800a900:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a902:	021f      	lsls	r7, r3, #8
 800a904:	d507      	bpl.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a906:	4a29      	ldr	r2, [pc, #164]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a908:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a90c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a90e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a912:	4303      	orrs	r3, r0
 800a914:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a916:	07ce      	lsls	r6, r1, #31
 800a918:	d506      	bpl.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a91a:	2100      	movs	r1, #0
 800a91c:	f105 0008 	add.w	r0, r5, #8
 800a920:	f7ff fb0c 	bl	8009f3c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a924:	4607      	mov	r7, r0
 800a926:	b900      	cbnz	r0, 800a92a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800a928:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a92a:	686b      	ldr	r3, [r5, #4]
 800a92c:	079c      	lsls	r4, r3, #30
 800a92e:	d506      	bpl.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a930:	2101      	movs	r1, #1
 800a932:	f105 0008 	add.w	r0, r5, #8
 800a936:	f7ff fb01 	bl	8009f3c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a93a:	4606      	mov	r6, r0
 800a93c:	b900      	cbnz	r0, 800a940 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800a93e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a940:	686b      	ldr	r3, [r5, #4]
 800a942:	0758      	lsls	r0, r3, #29
 800a944:	d506      	bpl.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a946:	2102      	movs	r1, #2
 800a948:	f105 0008 	add.w	r0, r5, #8
 800a94c:	f7ff faf6 	bl	8009f3c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a950:	4604      	mov	r4, r0
 800a952:	b900      	cbnz	r0, 800a956 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800a954:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a956:	686b      	ldr	r3, [r5, #4]
 800a958:	0719      	lsls	r1, r3, #28
 800a95a:	d506      	bpl.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a95c:	2100      	movs	r1, #0
 800a95e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a962:	f7ff fb63 	bl	800a02c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a966:	4606      	mov	r6, r0
 800a968:	b900      	cbnz	r0, 800a96c <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800a96a:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a96c:	686b      	ldr	r3, [r5, #4]
 800a96e:	06da      	lsls	r2, r3, #27
 800a970:	d506      	bpl.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a972:	2101      	movs	r1, #1
 800a974:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a978:	f7ff fb58 	bl	800a02c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a97c:	4604      	mov	r4, r0
 800a97e:	b900      	cbnz	r0, 800a982 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800a980:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a982:	686b      	ldr	r3, [r5, #4]
 800a984:	069b      	lsls	r3, r3, #26
 800a986:	f100 80ca 	bmi.w	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800a98a:	1e20      	subs	r0, r4, #0
 800a98c:	bf18      	it	ne
 800a98e:	2001      	movne	r0, #1
}
 800a990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a994:	2101      	movs	r1, #1
 800a996:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a99a:	f7ff fb47 	bl	800a02c <RCCEx_PLL3_Config>
 800a99e:	e6ac      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a9a0:	2601      	movs	r6, #1
 800a9a2:	4634      	mov	r4, r6
 800a9a4:	e6b5      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a9a6:	4626      	mov	r6, r4
 800a9a8:	e6b3      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a9aa:	bf00      	nop
 800a9ac:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9b4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a9b8:	d003      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a9ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9be:	f47f aeba 	bne.w	800a736 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800a9c2:	b9ac      	cbnz	r4, 800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9c4:	4a5b      	ldr	r2, [pc, #364]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a9c6:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800a9ca:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a9cc:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9d4:	e6b1      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f105 0008 	add.w	r0, r5, #8
 800a9dc:	f7ff faae 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9e0:	4604      	mov	r4, r0
        break;
 800a9e2:	e7ee      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9e4:	2102      	movs	r1, #2
 800a9e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9ea:	f7ff fb1f 	bl	800a02c <RCCEx_PLL3_Config>
 800a9ee:	e7f7      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a9f0:	4626      	mov	r6, r4
 800a9f2:	e6a2      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a9f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a9f8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800a9fc:	d003      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a9fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa02:	f47f aeac 	bne.w	800a75e <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800aa06:	b9ac      	cbnz	r4, 800aa34 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa08:	4a4a      	ldr	r2, [pc, #296]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa0a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800aa0e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa10:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa18:	e6a3      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	f105 0008 	add.w	r0, r5, #8
 800aa20:	f7ff fa8c 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa24:	4604      	mov	r4, r0
        break;
 800aa26:	e7ee      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa28:	2102      	movs	r1, #2
 800aa2a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa2e:	f7ff fafd 	bl	800a02c <RCCEx_PLL3_Config>
 800aa32:	e7f7      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800aa34:	4626      	mov	r6, r4
 800aa36:	e694      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa3c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800aa42:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa46:	f47f ae9e 	bne.w	800a786 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800aa4a:	b9ac      	cbnz	r4, 800aa78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa4c:	4a39      	ldr	r2, [pc, #228]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa4e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800aa52:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa54:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa5c:	e695      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	f105 0008 	add.w	r0, r5, #8
 800aa64:	f7ff fa6a 	bl	8009f3c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa68:	4604      	mov	r4, r0
        break;
 800aa6a:	e7ee      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa72:	f7ff fadb 	bl	800a02c <RCCEx_PLL3_Config>
 800aa76:	e7f7      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800aa78:	4626      	mov	r6, r4
 800aa7a:	e686      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa82:	f7ff fad3 	bl	800a02c <RCCEx_PLL3_Config>
 800aa86:	e6c3      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800aa88:	2601      	movs	r6, #1
 800aa8a:	4634      	mov	r4, r6
 800aa8c:	e6cc      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800aa8e:	4626      	mov	r6, r4
 800aa90:	e6ca      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa92:	4a28      	ldr	r2, [pc, #160]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aa96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aa9c:	b97c      	cbnz	r4, 800aabe <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa9e:	4a25      	ldr	r2, [pc, #148]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aaa0:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800aaa4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aaa6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	6553      	str	r3, [r2, #84]	@ 0x54
 800aaae:	e6ce      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aab0:	2101      	movs	r1, #1
 800aab2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aab6:	f7ff fab9 	bl	800a02c <RCCEx_PLL3_Config>
 800aaba:	4604      	mov	r4, r0
        break;
 800aabc:	e7ee      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x980>
 800aabe:	4626      	mov	r6, r4
 800aac0:	e6c5      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac2:	4a1c      	ldr	r2, [pc, #112]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aac4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaca:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aacc:	b974      	cbnz	r4, 800aaec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aace:	4a19      	ldr	r2, [pc, #100]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aad0:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800aad2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad8:	430b      	orrs	r3, r1
 800aada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aadc:	e6c4      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aade:	2102      	movs	r1, #2
 800aae0:	f105 0008 	add.w	r0, r5, #8
 800aae4:	f7ff fa2a 	bl	8009f3c <RCCEx_PLL2_Config>
 800aae8:	4604      	mov	r4, r0
        break;
 800aaea:	e7ef      	b.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800aaec:	4626      	mov	r6, r4
 800aaee:	e6bb      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800aaf0:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800aaf4:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800aaf8:	f47f aed1 	bne.w	800a89e <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800aafc:	2c00      	cmp	r4, #0
 800aafe:	f47f aecf 	bne.w	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab02:	4c0c      	ldr	r4, [pc, #48]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab06:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ab0a:	4302      	orrs	r2, r0
 800ab0c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800ab0e:	4634      	mov	r4, r6
 800ab10:	e6c6      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab12:	4f08      	ldr	r7, [pc, #32]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ab1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800ab1c:	e7ee      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab1e:	2102      	movs	r1, #2
 800ab20:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab24:	f7ff fa82 	bl	800a02c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f43f af2e 	beq.w	800a98a <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800ab2e:	2001      	movs	r0, #1
 800ab30:	e72e      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800ab32:	bf00      	nop
 800ab34:	58024400 	.word	0x58024400

0800ab38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	b1f0      	cbz	r0, 800ab7e <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ab40:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ab44:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ab48:	b91b      	cbnz	r3, 800ab52 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ab4a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ab4e:	f7f6 fc27 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab52:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ab54:	1d21      	adds	r1, r4, #4
 800ab56:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab58:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ab5c:	f000 fa15 	bl	800af8a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ab60:	6862      	ldr	r2, [r4, #4]
 800ab62:	4629      	mov	r1, r5
 800ab64:	6820      	ldr	r0, [r4, #0]
 800ab66:	f000 fa48 	bl	800affa <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ab6a:	4a06      	ldr	r2, [pc, #24]	@ (800ab84 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800ab6c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800ab6e:	6813      	ldr	r3, [r2, #0]
 800ab70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab74:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ab76:	2301      	movs	r3, #1
 800ab78:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ab7e:	2001      	movs	r0, #1
 800ab80:	e7fc      	b.n	800ab7c <HAL_SDRAM_Init+0x44>
 800ab82:	bf00      	nop
 800ab84:	52004000 	.word	0x52004000

0800ab88 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800ab8c:	f7f6 fca2 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800ab90:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ab94:	f000 fa67 	bl	800b066 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800ab98:	2000      	movs	r0, #0
 800ab9a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800ab9e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800aba2:	bd10      	pop	{r4, pc}

0800aba4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aba4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aba6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800abaa:	4605      	mov	r5, r0
 800abac:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800abae:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800abb0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800abb2:	d010      	beq.n	800abd6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800abb4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800abb8:	2c01      	cmp	r4, #1
 800abba:	d110      	bne.n	800abde <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abbc:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800abbe:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abc0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800abc4:	f000 fa5e 	bl	800b084 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800abc8:	6833      	ldr	r3, [r6, #0]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d104      	bne.n	800abd8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800abce:	2305      	movs	r3, #5
 800abd0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800abd4:	2000      	movs	r0, #0
}
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800abd8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800abdc:	e7fa      	b.n	800abd4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800abde:	2001      	movs	r0, #1
 800abe0:	e7f9      	b.n	800abd6 <HAL_SDRAM_SendCommand+0x32>

0800abe2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800abe2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800abe4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800abe8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800abea:	2b02      	cmp	r3, #2
 800abec:	b2d8      	uxtb	r0, r3
 800abee:	d00d      	beq.n	800ac0c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800abf0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	b2dd      	uxtb	r5, r3
 800abf8:	d109      	bne.n	800ac0e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abfa:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800abfc:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abfe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ac02:	f000 fa51 	bl	800b0a8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ac06:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ac08:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ac0e:	2001      	movs	r0, #1
 800ac10:	e7fc      	b.n	800ac0c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ac12 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac14:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d12f      	bne.n	800ac7c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac1c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac1e:	4a18      	ldr	r2, [pc, #96]	@ (800ac80 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac24:	6803      	ldr	r3, [r0, #0]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d01a      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2e:	d017      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac30:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d013      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00f      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00b      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac48:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d007      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac50:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <HAL_TIM_Base_Start+0x4c>
 800ac58:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d107      	bne.n	800ac70 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac60:	6899      	ldr	r1, [r3, #8]
 800ac62:	4a08      	ldr	r2, [pc, #32]	@ (800ac84 <HAL_TIM_Base_Start+0x70>)
 800ac64:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac66:	2a06      	cmp	r2, #6
 800ac68:	d006      	beq.n	800ac78 <HAL_TIM_Base_Start+0x64>
 800ac6a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ac6e:	d003      	beq.n	800ac78 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	f042 0201 	orr.w	r2, r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ac78:	2000      	movs	r0, #0
 800ac7a:	4770      	bx	lr
    return HAL_ERROR;
 800ac7c:	2001      	movs	r0, #1
}
 800ac7e:	4770      	bx	lr
 800ac80:	40010000 	.word	0x40010000
 800ac84:	00010007 	.word	0x00010007

0800ac88 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d133      	bne.n	800acf8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac90:	2302      	movs	r3, #2
 800ac92:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac96:	6803      	ldr	r3, [r0, #0]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	f042 0201 	orr.w	r2, r2, #1
 800ac9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca0:	4a16      	ldr	r2, [pc, #88]	@ (800acfc <HAL_TIM_Base_Start_IT+0x74>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d01a      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800aca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acaa:	d017      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800acac:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d013      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800acb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800acb8:	4293      	cmp	r3, r2
 800acba:	d00f      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800acbc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d00b      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800acc4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800acc8:	4293      	cmp	r3, r2
 800acca:	d007      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800accc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d003      	beq.n	800acdc <HAL_TIM_Base_Start_IT+0x54>
 800acd4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800acd8:	4293      	cmp	r3, r2
 800acda:	d107      	bne.n	800acec <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acdc:	6899      	ldr	r1, [r3, #8]
 800acde:	4a08      	ldr	r2, [pc, #32]	@ (800ad00 <HAL_TIM_Base_Start_IT+0x78>)
 800ace0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ace2:	2a06      	cmp	r2, #6
 800ace4:	d006      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
 800ace6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800acea:	d003      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800acf4:	2000      	movs	r0, #0
 800acf6:	4770      	bx	lr
    return HAL_ERROR;
 800acf8:	2001      	movs	r0, #1
}
 800acfa:	4770      	bx	lr
 800acfc:	40010000 	.word	0x40010000
 800ad00:	00010007 	.word	0x00010007

0800ad04 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800ad04:	4770      	bx	lr

0800ad06 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800ad06:	4770      	bx	lr

0800ad08 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800ad08:	4770      	bx	lr

0800ad0a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800ad0c:	6803      	ldr	r3, [r0, #0]
{
 800ad0e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800ad10:	68dd      	ldr	r5, [r3, #12]
{
 800ad12:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800ad14:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad16:	07b2      	lsls	r2, r6, #30
 800ad18:	d50d      	bpl.n	800ad36 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad1a:	07a9      	lsls	r1, r5, #30
 800ad1c:	d50b      	bpl.n	800ad36 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad1e:	f06f 0202 	mvn.w	r2, #2
 800ad22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad24:	2201      	movs	r2, #1
 800ad26:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	079a      	lsls	r2, r3, #30
 800ad2c:	d075      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ad2e:	f7ff ffea 	bl	800ad06 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad32:	2300      	movs	r3, #0
 800ad34:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad36:	0773      	lsls	r3, r6, #29
 800ad38:	d510      	bpl.n	800ad5c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad3a:	0768      	lsls	r0, r5, #29
 800ad3c:	d50e      	bpl.n	800ad5c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ad44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad48:	2202      	movs	r2, #2
 800ad4a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ad52:	d068      	beq.n	800ae26 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ad54:	f7ff ffd7 	bl	800ad06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad5c:	0731      	lsls	r1, r6, #28
 800ad5e:	d50f      	bpl.n	800ad80 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad60:	072a      	lsls	r2, r5, #28
 800ad62:	d50d      	bpl.n	800ad80 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad6e:	2204      	movs	r2, #4
 800ad70:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	079b      	lsls	r3, r3, #30
 800ad76:	d05c      	beq.n	800ae32 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800ad78:	f7ff ffc5 	bl	800ad06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad80:	06f1      	lsls	r1, r6, #27
 800ad82:	d510      	bpl.n	800ada6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad84:	06ea      	lsls	r2, r5, #27
 800ad86:	d50e      	bpl.n	800ada6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ad8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad92:	2208      	movs	r2, #8
 800ad94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ad9c:	d04f      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800ad9e:	f7ff ffb2 	bl	800ad06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada2:	2300      	movs	r3, #0
 800ada4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ada6:	07f3      	lsls	r3, r6, #31
 800ada8:	d508      	bpl.n	800adbc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adaa:	07e8      	lsls	r0, r5, #31
 800adac:	d506      	bpl.n	800adbc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800adb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800adb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800adb8:	f7f6 f8ba 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adbc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800adc0:	d008      	beq.n	800add4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800adc2:	0629      	lsls	r1, r5, #24
 800adc4:	d506      	bpl.n	800add4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800adcc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800adce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800add0:	f000 f8d9 	bl	800af86 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800add4:	05f2      	lsls	r2, r6, #23
 800add6:	d508      	bpl.n	800adea <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800add8:	062b      	lsls	r3, r5, #24
 800adda:	d506      	bpl.n	800adea <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ade2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ade4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ade6:	f000 f8cf 	bl	800af88 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800adea:	0670      	lsls	r0, r6, #25
 800adec:	d508      	bpl.n	800ae00 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800adee:	0669      	lsls	r1, r5, #25
 800adf0:	d506      	bpl.n	800ae00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800adf8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800adfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800adfc:	f7ff ff85 	bl	800ad0a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae00:	06b2      	lsls	r2, r6, #26
 800ae02:	d522      	bpl.n	800ae4a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae04:	06ab      	lsls	r3, r5, #26
 800ae06:	d520      	bpl.n	800ae4a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ae0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae10:	611a      	str	r2, [r3, #16]
}
 800ae12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ae16:	f000 b8b5 	b.w	800af84 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae1a:	f7ff ff73 	bl	800ad04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f7ff ff72 	bl	800ad08 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae24:	e785      	b.n	800ad32 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae26:	f7ff ff6d 	bl	800ad04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff ff6c 	bl	800ad08 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae30:	e792      	b.n	800ad58 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae32:	f7ff ff67 	bl	800ad04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae36:	4620      	mov	r0, r4
 800ae38:	f7ff ff66 	bl	800ad08 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae3c:	e79e      	b.n	800ad7c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3e:	f7ff ff61 	bl	800ad04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae42:	4620      	mov	r0, r4
 800ae44:	f7ff ff60 	bl	800ad08 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae48:	e7ab      	b.n	800ada2 <HAL_TIM_IRQHandler+0x96>
}
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}

0800ae4c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae4c:	4a33      	ldr	r2, [pc, #204]	@ (800af1c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800ae4e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae50:	4290      	cmp	r0, r2
 800ae52:	d012      	beq.n	800ae7a <TIM_Base_SetConfig+0x2e>
 800ae54:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ae58:	d00f      	beq.n	800ae7a <TIM_Base_SetConfig+0x2e>
 800ae5a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ae5e:	4290      	cmp	r0, r2
 800ae60:	d00b      	beq.n	800ae7a <TIM_Base_SetConfig+0x2e>
 800ae62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae66:	4290      	cmp	r0, r2
 800ae68:	d007      	beq.n	800ae7a <TIM_Base_SetConfig+0x2e>
 800ae6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae6e:	4290      	cmp	r0, r2
 800ae70:	d003      	beq.n	800ae7a <TIM_Base_SetConfig+0x2e>
 800ae72:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ae76:	4290      	cmp	r0, r2
 800ae78:	d119      	bne.n	800aeae <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ae7a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ae80:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae82:	4a26      	ldr	r2, [pc, #152]	@ (800af1c <TIM_Base_SetConfig+0xd0>)
 800ae84:	4290      	cmp	r0, r2
 800ae86:	d01d      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800ae88:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ae8c:	d01a      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800ae8e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ae92:	4290      	cmp	r0, r2
 800ae94:	d016      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800ae96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae9a:	4290      	cmp	r0, r2
 800ae9c:	d012      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800ae9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aea2:	4290      	cmp	r0, r2
 800aea4:	d00e      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800aea6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800aeaa:	4290      	cmp	r0, r2
 800aeac:	d00a      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800aeae:	4a1c      	ldr	r2, [pc, #112]	@ (800af20 <TIM_Base_SetConfig+0xd4>)
 800aeb0:	4290      	cmp	r0, r2
 800aeb2:	d007      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800aeb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aeb8:	4290      	cmp	r0, r2
 800aeba:	d003      	beq.n	800aec4 <TIM_Base_SetConfig+0x78>
 800aebc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aec0:	4290      	cmp	r0, r2
 800aec2:	d103      	bne.n	800aecc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec8:	68ca      	ldr	r2, [r1, #12]
 800aeca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aecc:	694a      	ldr	r2, [r1, #20]
 800aece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aed2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800aed4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aed6:	688b      	ldr	r3, [r1, #8]
 800aed8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeda:	680b      	ldr	r3, [r1, #0]
 800aedc:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aede:	4b0f      	ldr	r3, [pc, #60]	@ (800af1c <TIM_Base_SetConfig+0xd0>)
 800aee0:	4298      	cmp	r0, r3
 800aee2:	d00f      	beq.n	800af04 <TIM_Base_SetConfig+0xb8>
 800aee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aee8:	4298      	cmp	r0, r3
 800aeea:	d00b      	beq.n	800af04 <TIM_Base_SetConfig+0xb8>
 800aeec:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800aef0:	4298      	cmp	r0, r3
 800aef2:	d007      	beq.n	800af04 <TIM_Base_SetConfig+0xb8>
 800aef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aef8:	4298      	cmp	r0, r3
 800aefa:	d003      	beq.n	800af04 <TIM_Base_SetConfig+0xb8>
 800aefc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af00:	4298      	cmp	r0, r3
 800af02:	d101      	bne.n	800af08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af04:	690b      	ldr	r3, [r1, #16]
 800af06:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	2301      	movs	r3, #1
 800af0a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af0c:	6903      	ldr	r3, [r0, #16]
 800af0e:	07db      	lsls	r3, r3, #31
 800af10:	d503      	bpl.n	800af1a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af12:	6903      	ldr	r3, [r0, #16]
 800af14:	f023 0301 	bic.w	r3, r3, #1
 800af18:	6103      	str	r3, [r0, #16]
  }
}
 800af1a:	4770      	bx	lr
 800af1c:	40010000 	.word	0x40010000
 800af20:	40014000 	.word	0x40014000

0800af24 <HAL_TIM_Base_Init>:
{
 800af24:	b510      	push	{r4, lr}
  if (htim == NULL)
 800af26:	4604      	mov	r4, r0
 800af28:	b350      	cbz	r0, 800af80 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800af2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800af2e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800af32:	b91b      	cbnz	r3, 800af3c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800af34:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800af38:	f7ff fe6b 	bl	800ac12 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800af3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800af42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af46:	f7ff ff81 	bl	800ae4c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af4a:	2301      	movs	r3, #1
  return HAL_OK;
 800af4c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af4e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800af56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800af5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800af5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800af62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800af6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800af72:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800af76:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800af7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800af7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800af80:	2001      	movs	r0, #1
 800af82:	e7fc      	b.n	800af7e <HAL_TIM_Base_Init+0x5a>

0800af84 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800af84:	4770      	bx	lr

0800af86 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800af86:	4770      	bx	lr

0800af88 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800af88:	4770      	bx	lr

0800af8a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af8e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800af92:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800af96:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800af9a:	ea43 0308 	orr.w	r3, r3, r8
 800af9e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800afa2:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800afa6:	6809      	ldr	r1, [r1, #0]
 800afa8:	b991      	cbnz	r1, 800afd0 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afaa:	ea43 030e 	orr.w	r3, r3, lr
 800afae:	6801      	ldr	r1, [r0, #0]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800afb6:	ea43 030c 	orr.w	r3, r3, ip
 800afba:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800afbe:	433b      	orrs	r3, r7
 800afc0:	4333      	orrs	r3, r6
 800afc2:	432b      	orrs	r3, r5
 800afc4:	4323      	orrs	r3, r4
 800afc6:	430b      	orrs	r3, r1
 800afc8:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800afca:	2000      	movs	r0, #0
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afd0:	6801      	ldr	r1, [r0, #0]
 800afd2:	ea43 030e 	orr.w	r3, r3, lr
 800afd6:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800afda:	430b      	orrs	r3, r1
 800afdc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800afde:	ea42 030c 	orr.w	r3, r2, ip
 800afe2:	6841      	ldr	r1, [r0, #4]
 800afe4:	433b      	orrs	r3, r7
 800afe6:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800afea:	4333      	orrs	r3, r6
 800afec:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800aff0:	432b      	orrs	r3, r5
 800aff2:	4323      	orrs	r3, r4
 800aff4:	4313      	orrs	r3, r2
 800aff6:	6043      	str	r3, [r0, #4]
 800aff8:	e7e7      	b.n	800afca <FMC_SDRAM_Init+0x40>

0800affa <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800affa:	68cb      	ldr	r3, [r1, #12]
 800affc:	f103 3cff 	add.w	ip, r3, #4294967295
 800b000:	694b      	ldr	r3, [r1, #20]
{
 800b002:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b004:	3b01      	subs	r3, #1
 800b006:	680f      	ldr	r7, [r1, #0]
 800b008:	684c      	ldr	r4, [r1, #4]
 800b00a:	688e      	ldr	r6, [r1, #8]
 800b00c:	051b      	lsls	r3, r3, #20
 800b00e:	690d      	ldr	r5, [r1, #16]
 800b010:	3c01      	subs	r4, #1
 800b012:	6989      	ldr	r1, [r1, #24]
 800b014:	3e01      	subs	r6, #1
 800b016:	3d01      	subs	r5, #1
 800b018:	3f01      	subs	r7, #1
 800b01a:	3901      	subs	r1, #1
 800b01c:	0124      	lsls	r4, r4, #4
 800b01e:	0236      	lsls	r6, r6, #8
 800b020:	042d      	lsls	r5, r5, #16
 800b022:	0609      	lsls	r1, r1, #24
 800b024:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b028:	b95a      	cbnz	r2, 800b042 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b02a:	433b      	orrs	r3, r7
 800b02c:	6882      	ldr	r2, [r0, #8]
 800b02e:	4323      	orrs	r3, r4
 800b030:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b034:	4333      	orrs	r3, r6
 800b036:	432b      	orrs	r3, r5
 800b038:	430b      	orrs	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b03e:	2000      	movs	r0, #0
 800b040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b042:	6882      	ldr	r2, [r0, #8]
 800b044:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b048:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800b04c:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b04e:	ea44 0306 	orr.w	r3, r4, r6
 800b052:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b054:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b056:	68c2      	ldr	r2, [r0, #12]
 800b058:	432b      	orrs	r3, r5
 800b05a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b05e:	430b      	orrs	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	60c3      	str	r3, [r0, #12]
 800b064:	e7eb      	b.n	800b03e <FMC_SDRAM_Timing_Init+0x44>

0800b066 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800b066:	4603      	mov	r3, r0
 800b068:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800b06c:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800b070:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800b074:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800b076:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b07a:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800b07c:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800b07e:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800b080:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800b082:	4770      	bx	lr

0800b084 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b084:	6902      	ldr	r2, [r0, #16]
{
 800b086:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b088:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b08c:	0d92      	lsrs	r2, r2, #22
 800b08e:	4323      	orrs	r3, r4
 800b090:	68cc      	ldr	r4, [r1, #12]
 800b092:	0592      	lsls	r2, r2, #22
 800b094:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b098:	4313      	orrs	r3, r2
 800b09a:	688a      	ldr	r2, [r1, #8]
 800b09c:	3a01      	subs	r2, #1
 800b09e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b0a2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b0a8:	6943      	ldr	r3, [r0, #20]
 800b0aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b0ae:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800b0b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b0b6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	4770      	bx	lr

0800b0bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b0bc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b0be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b0c2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b0c4:	f001 fee0 	bl	800ce88 <xTaskGetSchedulerState>
 800b0c8:	2801      	cmp	r0, #1
 800b0ca:	d003      	beq.n	800b0d4 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b0cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800b0d0:	f000 bc48 	b.w	800b964 <xPortSysTickHandler>
}
 800b0d4:	bd08      	pop	{r3, pc}
	...

0800b0d8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0d8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0dc:	b92b      	cbnz	r3, 800b0ea <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b0de:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <osKernelInitialize+0x20>)
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	b928      	cbnz	r0, 800b0f0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b0e8:	4770      	bx	lr
    stat = osErrorISR;
 800b0ea:	f06f 0005 	mvn.w	r0, #5
 800b0ee:	4770      	bx	lr
    } else {
      stat = osError;
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	2400f764 	.word	0x2400f764

0800b0fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b102:	b95c      	cbnz	r4, 800b11c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b104:	4b08      	ldr	r3, [pc, #32]	@ (800b128 <osKernelStart+0x2c>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	2a01      	cmp	r2, #1
 800b10a:	d10a      	bne.n	800b122 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b10c:	4a07      	ldr	r2, [pc, #28]	@ (800b12c <osKernelStart+0x30>)
 800b10e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b110:	2202      	movs	r2, #2
 800b112:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b114:	f001 fd58 	bl	800cbc8 <vTaskStartScheduler>
      stat = osOK;
 800b118:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b11a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b11c:	f06f 0005 	mvn.w	r0, #5
 800b120:	e7fb      	b.n	800b11a <osKernelStart+0x1e>
      stat = osError;
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b126:	e7f8      	b.n	800b11a <osKernelStart+0x1e>
 800b128:	2400f764 	.word	0x2400f764
 800b12c:	e000ed00 	.word	0xe000ed00

0800b130 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	4614      	mov	r4, r2
 800b134:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b136:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b138:	460b      	mov	r3, r1
  hTask = NULL;
 800b13a:	9205      	str	r2, [sp, #20]
 800b13c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b140:	b9ca      	cbnz	r2, 800b176 <osThreadNew+0x46>
 800b142:	b1c0      	cbz	r0, 800b176 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b144:	b36c      	cbz	r4, 800b1a2 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b146:	69a5      	ldr	r5, [r4, #24]
 800b148:	2d00      	cmp	r5, #0
 800b14a:	bf08      	it	eq
 800b14c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b14e:	1e69      	subs	r1, r5, #1
 800b150:	46ac      	mov	ip, r5
 800b152:	2937      	cmp	r1, #55	@ 0x37
 800b154:	d82a      	bhi.n	800b1ac <osThreadNew+0x7c>
 800b156:	6861      	ldr	r1, [r4, #4]
 800b158:	07c9      	lsls	r1, r1, #31
 800b15a:	d427      	bmi.n	800b1ac <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b15c:	6966      	ldr	r6, [r4, #20]
 800b15e:	b16e      	cbz	r6, 800b17c <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b160:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b162:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b164:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b168:	b157      	cbz	r7, 800b180 <osThreadNew+0x50>
 800b16a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800b16e:	d902      	bls.n	800b176 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b170:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b172:	b104      	cbz	r4, 800b176 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b174:	b9e6      	cbnz	r6, 800b1b0 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b176:	9805      	ldr	r0, [sp, #20]
}
 800b178:	b007      	add	sp, #28
 800b17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b17c:	2280      	movs	r2, #128	@ 0x80
 800b17e:	e7f0      	b.n	800b162 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b180:	f1be 0f00 	cmp.w	lr, #0
 800b184:	d1f7      	bne.n	800b176 <osThreadNew+0x46>
      if (mem == 0) {
 800b186:	6924      	ldr	r4, [r4, #16]
 800b188:	2c00      	cmp	r4, #0
 800b18a:	d1f4      	bne.n	800b176 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b18c:	ac05      	add	r4, sp, #20
 800b18e:	b292      	uxth	r2, r2
 800b190:	e9cd c400 	strd	ip, r4, [sp]
 800b194:	f001 fbb5 	bl	800c902 <xTaskCreate>
 800b198:	2801      	cmp	r0, #1
            hTask = NULL;
 800b19a:	bf1c      	itt	ne
 800b19c:	2300      	movne	r3, #0
 800b19e:	9305      	strne	r3, [sp, #20]
 800b1a0:	e7e9      	b.n	800b176 <osThreadNew+0x46>
    name = NULL;
 800b1a2:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800b1a4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b1a8:	2280      	movs	r2, #128	@ 0x80
 800b1aa:	e7ef      	b.n	800b18c <osThreadNew+0x5c>
        return (NULL);
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	e7e3      	b.n	800b178 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1b0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b1b4:	9500      	str	r5, [sp, #0]
 800b1b6:	f001 fb6c 	bl	800c892 <xTaskCreateStatic>
 800b1ba:	9005      	str	r0, [sp, #20]
 800b1bc:	e7db      	b.n	800b176 <osThreadNew+0x46>

0800b1be <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b1be:	b570      	push	{r4, r5, r6, lr}
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b1c6:	b116      	cbz	r6, 800b1ce <osMutexNew+0x10>
  hMutex = NULL;
 800b1c8:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800b1ce:	b110      	cbz	r0, 800b1d6 <osMutexNew+0x18>
      type = attr->attr_bits;
 800b1d0:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b1d2:	0733      	lsls	r3, r6, #28
 800b1d4:	d4f8      	bmi.n	800b1c8 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b1d6:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800b1da:	b17d      	cbz	r5, 800b1fc <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b1dc:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800b1e0:	b151      	cbz	r1, 800b1f8 <osMutexNew+0x3a>
 800b1e2:	2b4f      	cmp	r3, #79	@ 0x4f
 800b1e4:	d9f0      	bls.n	800b1c8 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b1e6:	b1de      	cbz	r6, 800b220 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b1e8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b1ea:	f000 fec4 	bl	800bf76 <xQueueCreateMutexStatic>
 800b1ee:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d0e9      	beq.n	800b1c8 <osMutexNew+0xa>
          name = attr->name;
 800b1f4:	682d      	ldr	r5, [r5, #0]
 800b1f6:	e00a      	b.n	800b20e <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e5      	bne.n	800b1c8 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800b1fc:	b196      	cbz	r6, 800b224 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b1fe:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800b200:	f000 feed 	bl	800bfde <xQueueCreateMutex>
 800b204:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b206:	2800      	cmp	r0, #0
 800b208:	d0de      	beq.n	800b1c8 <osMutexNew+0xa>
        if (attr != NULL) {
 800b20a:	2d00      	cmp	r5, #0
 800b20c:	d1f2      	bne.n	800b1f4 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800b20e:	4629      	mov	r1, r5
 800b210:	4620      	mov	r0, r4
 800b212:	f001 f979 	bl	800c508 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b216:	2e00      	cmp	r6, #0
 800b218:	d0d7      	beq.n	800b1ca <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b21a:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b21e:	e7d4      	b.n	800b1ca <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b220:	2001      	movs	r0, #1
 800b222:	e7e2      	b.n	800b1ea <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800b224:	2001      	movs	r0, #1
 800b226:	e7eb      	b.n	800b200 <osMutexNew+0x42>

0800b228 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4603      	mov	r3, r0
 800b22c:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b22e:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b232:	f003 0201 	and.w	r2, r3, #1
 800b236:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b23a:	b995      	cbnz	r5, 800b262 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d913      	bls.n	800b268 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b240:	b162      	cbz	r2, 800b25c <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b242:	f001 f8f2 	bl	800c42a <xQueueTakeMutexRecursive>
 800b246:	2801      	cmp	r0, #1
 800b248:	d101      	bne.n	800b24e <osMutexAcquire+0x26>
  stat = osOK;
 800b24a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b24e:	2c00      	cmp	r4, #0
 800b250:	bf14      	ite	ne
 800b252:	f06f 0001 	mvnne.w	r0, #1
 800b256:	f06f 0002 	mvneq.w	r0, #2
 800b25a:	e7f7      	b.n	800b24c <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b25c:	f001 f828 	bl	800c2b0 <xQueueSemaphoreTake>
 800b260:	e7f1      	b.n	800b246 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b262:	f06f 0005 	mvn.w	r0, #5
 800b266:	e7f1      	b.n	800b24c <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b268:	f06f 0003 	mvn.w	r0, #3
 800b26c:	e7ee      	b.n	800b24c <osMutexAcquire+0x24>

0800b26e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b26e:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b270:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b274:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b276:	f002 0301 	and.w	r3, r2, #1
 800b27a:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b27e:	b979      	cbnz	r1, 800b2a0 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b280:	2a01      	cmp	r2, #1
 800b282:	d910      	bls.n	800b2a6 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b284:	b13b      	cbz	r3, 800b296 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b286:	f000 fe8b 	bl	800bfa0 <xQueueGiveMutexRecursive>
 800b28a:	2801      	cmp	r0, #1
  stat = osOK;
 800b28c:	bf0c      	ite	eq
 800b28e:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b290:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b294:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b296:	461a      	mov	r2, r3
 800b298:	4619      	mov	r1, r3
 800b29a:	f000 fdba 	bl	800be12 <xQueueGenericSend>
 800b29e:	e7f4      	b.n	800b28a <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b2a0:	f06f 0005 	mvn.w	r0, #5
 800b2a4:	e7f6      	b.n	800b294 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b2a6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b2aa:	e7f3      	b.n	800b294 <osMutexRelease+0x26>

0800b2ac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b2b8:	b942      	cbnz	r2, 800b2cc <osSemaphoreNew+0x20>
 800b2ba:	b138      	cbz	r0, 800b2cc <osSemaphoreNew+0x20>
 800b2bc:	4288      	cmp	r0, r1
 800b2be:	d305      	bcc.n	800b2cc <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b2c0:	b155      	cbz	r5, 800b2d8 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b2c2:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b2c6:	b12b      	cbz	r3, 800b2d4 <osSemaphoreNew+0x28>
 800b2c8:	2f4f      	cmp	r7, #79	@ 0x4f
 800b2ca:	d822      	bhi.n	800b312 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b2cc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	b003      	add	sp, #12
 800b2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b2d4:	2f00      	cmp	r7, #0
 800b2d6:	d1f9      	bne.n	800b2cc <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b2d8:	2c01      	cmp	r4, #1
 800b2da:	d00c      	beq.n	800b2f6 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b2dc:	4620      	mov	r0, r4
 800b2de:	4631      	mov	r1, r6
 800b2e0:	f000 fd79 	bl	800bdd6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d0f0      	beq.n	800b2cc <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b2ea:	b985      	cbnz	r5, 800b30e <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f001 f90a 	bl	800c508 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b2f4:	e7eb      	b.n	800b2ce <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	f000 fd22 	bl	800bd44 <xQueueGenericCreate>
 800b300:	e00e      	b.n	800b320 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b302:	461a      	mov	r2, r3
 800b304:	f000 fd45 	bl	800bd92 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b308:	4604      	mov	r4, r0
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0de      	beq.n	800b2cc <osSemaphoreNew+0x20>
          name = attr->name;
 800b30e:	682d      	ldr	r5, [r5, #0]
 800b310:	e7ec      	b.n	800b2ec <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b312:	2801      	cmp	r0, #1
 800b314:	d1f5      	bne.n	800b302 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b316:	2103      	movs	r1, #3
 800b318:	9100      	str	r1, [sp, #0]
 800b31a:	4611      	mov	r1, r2
 800b31c:	f000 fcc4 	bl	800bca8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b320:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b322:	2800      	cmp	r0, #0
 800b324:	d0d2      	beq.n	800b2cc <osSemaphoreNew+0x20>
 800b326:	2e00      	cmp	r6, #0
 800b328:	d0df      	beq.n	800b2ea <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b32a:	2300      	movs	r3, #0
 800b32c:	461a      	mov	r2, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	f000 fd6f 	bl	800be12 <xQueueGenericSend>
 800b334:	2801      	cmp	r0, #1
 800b336:	d0d8      	beq.n	800b2ea <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b338:	4620      	mov	r0, r4
 800b33a:	f001 f90f 	bl	800c55c <vQueueDelete>
      if (hSemaphore != NULL) {
 800b33e:	e7c5      	b.n	800b2cc <osSemaphoreNew+0x20>

0800b340 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b340:	b513      	push	{r0, r1, r4, lr}
 800b342:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b344:	b328      	cbz	r0, 800b392 <osSemaphoreAcquire+0x52>
 800b346:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b34a:	b1cb      	cbz	r3, 800b380 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b34c:	bb09      	cbnz	r1, 800b392 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b34e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b350:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b352:	f001 f88b 	bl	800c46c <xQueueReceiveFromISR>
 800b356:	2801      	cmp	r0, #1
 800b358:	d003      	beq.n	800b362 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b35a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b35e:	b002      	add	sp, #8
 800b360:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	b90b      	cbnz	r3, 800b36a <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b366:	2000      	movs	r0, #0
 800b368:	e7f9      	b.n	800b35e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b36a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b372:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	e7f2      	b.n	800b366 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b380:	f000 ff96 	bl	800c2b0 <xQueueSemaphoreTake>
 800b384:	2801      	cmp	r0, #1
 800b386:	d0ee      	beq.n	800b366 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b388:	2c00      	cmp	r4, #0
 800b38a:	d0e6      	beq.n	800b35a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b38c:	f06f 0001 	mvn.w	r0, #1
 800b390:	e7e5      	b.n	800b35e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b392:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b396:	e7e2      	b.n	800b35e <osSemaphoreAcquire+0x1e>

0800b398 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b398:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b39a:	b318      	cbz	r0, 800b3e4 <osSemaphoreRelease+0x4c>
 800b39c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b3a0:	b1cb      	cbz	r3, 800b3d6 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b3a2:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b3a4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b3a6:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b3a8:	f000 fe93 	bl	800c0d2 <xQueueGiveFromISR>
 800b3ac:	2801      	cmp	r0, #1
 800b3ae:	d004      	beq.n	800b3ba <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b3b0:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b3b4:	b003      	add	sp, #12
 800b3b6:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	b14b      	cbz	r3, 800b3d2 <osSemaphoreRelease+0x3a>
 800b3be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	e7ee      	b.n	800b3b4 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f000 fd1a 	bl	800be12 <xQueueGenericSend>
 800b3de:	2801      	cmp	r0, #1
 800b3e0:	d0f7      	beq.n	800b3d2 <osSemaphoreRelease+0x3a>
 800b3e2:	e7e5      	b.n	800b3b0 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b3e4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b3e8:	e7e4      	b.n	800b3b4 <osSemaphoreRelease+0x1c>

0800b3ea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	460e      	mov	r6, r1
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b3f6:	b11f      	cbz	r7, 800b400 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b3f8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	b003      	add	sp, #12
 800b3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b400:	2800      	cmp	r0, #0
 800b402:	d0f9      	beq.n	800b3f8 <osMessageQueueNew+0xe>
 800b404:	2900      	cmp	r1, #0
 800b406:	d0f7      	beq.n	800b3f8 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b408:	b1da      	cbz	r2, 800b442 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b40a:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b40e:	b183      	cbz	r3, 800b432 <osMessageQueueNew+0x48>
 800b410:	2a4f      	cmp	r2, #79	@ 0x4f
 800b412:	d9f1      	bls.n	800b3f8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b414:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b416:	2a00      	cmp	r2, #0
 800b418:	d0ee      	beq.n	800b3f8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b41a:	434d      	muls	r5, r1
 800b41c:	6966      	ldr	r6, [r4, #20]
 800b41e:	42ae      	cmp	r6, r5
 800b420:	d3ea      	bcc.n	800b3f8 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b422:	9700      	str	r7, [sp, #0]
 800b424:	f000 fc40 	bl	800bca8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b428:	4605      	mov	r5, r0
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0e4      	beq.n	800b3f8 <osMessageQueueNew+0xe>
        name = attr->name;
 800b42e:	6824      	ldr	r4, [r4, #0]
 800b430:	e011      	b.n	800b456 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b432:	2a00      	cmp	r2, #0
 800b434:	d1e0      	bne.n	800b3f8 <osMessageQueueNew+0xe>
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1dd      	bne.n	800b3f8 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b43c:	6963      	ldr	r3, [r4, #20]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1da      	bne.n	800b3f8 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b442:	4628      	mov	r0, r5
 800b444:	2200      	movs	r2, #0
 800b446:	4631      	mov	r1, r6
 800b448:	f000 fc7c 	bl	800bd44 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b44c:	4605      	mov	r5, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	d0d2      	beq.n	800b3f8 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b452:	2c00      	cmp	r4, #0
 800b454:	d1eb      	bne.n	800b42e <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b456:	4621      	mov	r1, r4
 800b458:	4628      	mov	r0, r5
 800b45a:	f001 f855 	bl	800c508 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b45e:	e7cc      	b.n	800b3fa <osMessageQueueNew+0x10>

0800b460 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b462:	461c      	mov	r4, r3
 800b464:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b468:	b1de      	cbz	r6, 800b4a2 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b46a:	b338      	cbz	r0, 800b4bc <osMessageQueuePut+0x5c>
 800b46c:	b331      	cbz	r1, 800b4bc <osMessageQueuePut+0x5c>
 800b46e:	bb2b      	cbnz	r3, 800b4bc <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b470:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b472:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b474:	f000 fdd0 	bl	800c018 <xQueueGenericSendFromISR>
 800b478:	2801      	cmp	r0, #1
 800b47a:	d003      	beq.n	800b484 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b47c:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b480:	b002      	add	sp, #8
 800b482:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	b90b      	cbnz	r3, 800b48c <osMessageQueuePut+0x2c>
  stat = osOK;
 800b488:	2000      	movs	r0, #0
 800b48a:	e7f9      	b.n	800b480 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b48c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b494:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	e7f2      	b.n	800b488 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b4a2:	b158      	cbz	r0, 800b4bc <osMessageQueuePut+0x5c>
 800b4a4:	b151      	cbz	r1, 800b4bc <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b4a6:	4633      	mov	r3, r6
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	f000 fcb2 	bl	800be12 <xQueueGenericSend>
 800b4ae:	2801      	cmp	r0, #1
 800b4b0:	d0ea      	beq.n	800b488 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d0e2      	beq.n	800b47c <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b4b6:	f06f 0001 	mvn.w	r0, #1
 800b4ba:	e7e1      	b.n	800b480 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b4bc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b4c0:	e7de      	b.n	800b480 <osMessageQueuePut+0x20>

0800b4c2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b4c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c4:	461c      	mov	r4, r3
 800b4c6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b4ca:	b1db      	cbz	r3, 800b504 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4cc:	b330      	cbz	r0, 800b51c <osMessageQueueGet+0x5a>
 800b4ce:	b329      	cbz	r1, 800b51c <osMessageQueueGet+0x5a>
 800b4d0:	bb24      	cbnz	r4, 800b51c <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b4d2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b4d4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b4d6:	f000 ffc9 	bl	800c46c <xQueueReceiveFromISR>
 800b4da:	2801      	cmp	r0, #1
 800b4dc:	d003      	beq.n	800b4e6 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b4de:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b4e2:	b003      	add	sp, #12
 800b4e4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	b90b      	cbnz	r3, 800b4ee <osMessageQueueGet+0x2c>
  stat = osOK;
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e7f9      	b.n	800b4e2 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b4ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	e7f2      	b.n	800b4ea <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b504:	b150      	cbz	r0, 800b51c <osMessageQueueGet+0x5a>
 800b506:	b149      	cbz	r1, 800b51c <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b508:	4622      	mov	r2, r4
 800b50a:	f000 fe33 	bl	800c174 <xQueueReceive>
 800b50e:	2801      	cmp	r0, #1
 800b510:	d0eb      	beq.n	800b4ea <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b512:	2c00      	cmp	r4, #0
 800b514:	d0e3      	beq.n	800b4de <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b516:	f06f 0001 	mvn.w	r0, #1
 800b51a:	e7e2      	b.n	800b4e2 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b51c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b520:	e7df      	b.n	800b4e2 <osMessageQueueGet+0x20>
	...

0800b524 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b524:	4b03      	ldr	r3, [pc, #12]	@ (800b534 <vApplicationGetIdleTaskMemory+0x10>)
 800b526:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b528:	4b03      	ldr	r3, [pc, #12]	@ (800b538 <vApplicationGetIdleTaskMemory+0x14>)
 800b52a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b52c:	2380      	movs	r3, #128	@ 0x80
 800b52e:	6013      	str	r3, [r2, #0]
}
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	2400f704 	.word	0x2400f704
 800b538:	2400f504 	.word	0x2400f504

0800b53c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b53c:	4b03      	ldr	r3, [pc, #12]	@ (800b54c <vApplicationGetTimerTaskMemory+0x10>)
 800b53e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b540:	4b03      	ldr	r3, [pc, #12]	@ (800b550 <vApplicationGetTimerTaskMemory+0x14>)
 800b542:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b548:	6013      	str	r3, [r2, #0]
}
 800b54a:	4770      	bx	lr
 800b54c:	2400f4a4 	.word	0x2400f4a4
 800b550:	2400f0a4 	.word	0x2400f0a4

0800b554 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b554:	4b10      	ldr	r3, [pc, #64]	@ (800b598 <prvInsertBlockIntoFreeList+0x44>)
{
 800b556:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b558:	461a      	mov	r2, r3
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4283      	cmp	r3, r0
 800b55e:	d3fb      	bcc.n	800b558 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b560:	6854      	ldr	r4, [r2, #4]
 800b562:	1911      	adds	r1, r2, r4
 800b564:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b566:	bf01      	itttt	eq
 800b568:	6841      	ldreq	r1, [r0, #4]
 800b56a:	4610      	moveq	r0, r2
 800b56c:	1909      	addeq	r1, r1, r4
 800b56e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b570:	6844      	ldr	r4, [r0, #4]
 800b572:	1901      	adds	r1, r0, r4
 800b574:	428b      	cmp	r3, r1
 800b576:	d10c      	bne.n	800b592 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b578:	4908      	ldr	r1, [pc, #32]	@ (800b59c <prvInsertBlockIntoFreeList+0x48>)
 800b57a:	6809      	ldr	r1, [r1, #0]
 800b57c:	428b      	cmp	r3, r1
 800b57e:	d003      	beq.n	800b588 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b580:	6859      	ldr	r1, [r3, #4]
 800b582:	4421      	add	r1, r4
 800b584:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b586:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b588:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b58a:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b58c:	bf18      	it	ne
 800b58e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b590:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b592:	4619      	mov	r1, r3
 800b594:	e7f8      	b.n	800b588 <prvInsertBlockIntoFreeList+0x34>
 800b596:	bf00      	nop
 800b598:	2400f780 	.word	0x2400f780
 800b59c:	2400f77c 	.word	0x2400f77c

0800b5a0 <pvPortMalloc>:
{
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b5a6:	f001 f9db 	bl	800c960 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b5aa:	4940      	ldr	r1, [pc, #256]	@ (800b6ac <pvPortMalloc+0x10c>)
 800b5ac:	4d40      	ldr	r5, [pc, #256]	@ (800b6b0 <pvPortMalloc+0x110>)
 800b5ae:	680b      	ldr	r3, [r1, #0]
 800b5b0:	b9f3      	cbnz	r3, 800b5f0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b5b2:	4a40      	ldr	r2, [pc, #256]	@ (800b6b4 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b5b4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5b6:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5b8:	4e3f      	ldr	r6, [pc, #252]	@ (800b6b8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ba:	bf1b      	ittet	ne
 800b5bc:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5be:	4b3f      	ldrne	r3, [pc, #252]	@ (800b6bc <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5c0:	4b3f      	ldreq	r3, [pc, #252]	@ (800b6c0 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5c2:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b5c6:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5c8:	bf18      	it	ne
 800b5ca:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5cc:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5ce:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b5d0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b5d6:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5da:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b5dc:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5de:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5e2:	4b38      	ldr	r3, [pc, #224]	@ (800b6c4 <pvPortMalloc+0x124>)
 800b5e4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5e6:	4b38      	ldr	r3, [pc, #224]	@ (800b6c8 <pvPortMalloc+0x128>)
 800b5e8:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5ee:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5f0:	682e      	ldr	r6, [r5, #0]
 800b5f2:	4226      	tst	r6, r4
 800b5f4:	d155      	bne.n	800b6a2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b5f6:	2c00      	cmp	r4, #0
 800b5f8:	d046      	beq.n	800b688 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b5fa:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5fe:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b600:	bf1c      	itt	ne
 800b602:	f023 0307 	bicne.w	r3, r3, #7
 800b606:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d04a      	beq.n	800b6a2 <pvPortMalloc+0x102>
 800b60c:	4f2e      	ldr	r7, [pc, #184]	@ (800b6c8 <pvPortMalloc+0x128>)
 800b60e:	683c      	ldr	r4, [r7, #0]
 800b610:	429c      	cmp	r4, r3
 800b612:	d346      	bcc.n	800b6a2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b614:	4a28      	ldr	r2, [pc, #160]	@ (800b6b8 <pvPortMalloc+0x118>)
 800b616:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b618:	6868      	ldr	r0, [r5, #4]
 800b61a:	4298      	cmp	r0, r3
 800b61c:	d204      	bcs.n	800b628 <pvPortMalloc+0x88>
 800b61e:	f8d5 c000 	ldr.w	ip, [r5]
 800b622:	f1bc 0f00 	cmp.w	ip, #0
 800b626:	d115      	bne.n	800b654 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b628:	6809      	ldr	r1, [r1, #0]
 800b62a:	42a9      	cmp	r1, r5
 800b62c:	d039      	beq.n	800b6a2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b62e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b630:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b634:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b636:	1ac2      	subs	r2, r0, r3
 800b638:	2a10      	cmp	r2, #16
 800b63a:	d912      	bls.n	800b662 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b63c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b63e:	0741      	lsls	r1, r0, #29
 800b640:	d00b      	beq.n	800b65a <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	e7fe      	b.n	800b652 <pvPortMalloc+0xb2>
 800b654:	462a      	mov	r2, r5
 800b656:	4665      	mov	r5, ip
 800b658:	e7de      	b.n	800b618 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b65a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b65c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b65e:	f7ff ff79 	bl	800b554 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b662:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b664:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b666:	4917      	ldr	r1, [pc, #92]	@ (800b6c4 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b668:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b66a:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b66c:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b66e:	4a17      	ldr	r2, [pc, #92]	@ (800b6cc <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b670:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b672:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b674:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b676:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b678:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b67c:	bf38      	it	cc
 800b67e:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b680:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b684:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b686:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b688:	f001 fa0e 	bl	800caa8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b68c:	0763      	lsls	r3, r4, #29
 800b68e:	d00a      	beq.n	800b6a6 <pvPortMalloc+0x106>
 800b690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	e7fe      	b.n	800b6a0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	e7f0      	b.n	800b688 <pvPortMalloc+0xe8>
}
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	2400f77c 	.word	0x2400f77c
 800b6b0:	2400f768 	.word	0x2400f768
 800b6b4:	2400f788 	.word	0x2400f788
 800b6b8:	2400f780 	.word	0x2400f780
 800b6bc:	24027e28 	.word	0x24027e28
 800b6c0:	000186a0 	.word	0x000186a0
 800b6c4:	2400f774 	.word	0x2400f774
 800b6c8:	2400f778 	.word	0x2400f778
 800b6cc:	2400f770 	.word	0x2400f770

0800b6d0 <vPortFree>:
{
 800b6d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	b390      	cbz	r0, 800b73c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6d6:	4a1a      	ldr	r2, [pc, #104]	@ (800b740 <vPortFree+0x70>)
 800b6d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	4213      	tst	r3, r2
 800b6e0:	d108      	bne.n	800b6f4 <vPortFree+0x24>
 800b6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	e7fe      	b.n	800b6f2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6f4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b6f8:	b141      	cbz	r1, 800b70c <vPortFree+0x3c>
 800b6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	e7fe      	b.n	800b70a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b70c:	ea23 0302 	bic.w	r3, r3, r2
 800b710:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b714:	f001 f924 	bl	800c960 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b718:	4a0a      	ldr	r2, [pc, #40]	@ (800b744 <vPortFree+0x74>)
 800b71a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b71e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b722:	6811      	ldr	r1, [r2, #0]
 800b724:	440b      	add	r3, r1
 800b726:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b728:	f7ff ff14 	bl	800b554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b72c:	4a06      	ldr	r2, [pc, #24]	@ (800b748 <vPortFree+0x78>)
 800b72e:	6813      	ldr	r3, [r2, #0]
 800b730:	3301      	adds	r3, #1
}
 800b732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b736:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b738:	f001 b9b6 	b.w	800caa8 <xTaskResumeAll>
}
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	2400f768 	.word	0x2400f768
 800b744:	2400f778 	.word	0x2400f778
 800b748:	2400f76c 	.word	0x2400f76c

0800b74c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b74c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b750:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b754:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b756:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b758:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b760:	4770      	bx	lr

0800b762 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b766:	4770      	bx	lr

0800b768 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b768:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b76a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b76c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b76e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b770:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b772:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b774:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b776:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b778:	3301      	adds	r3, #1
 800b77a:	6003      	str	r3, [r0, #0]
}
 800b77c:	4770      	bx	lr

0800b77e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b77e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b780:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b782:	1c63      	adds	r3, r4, #1
 800b784:	d10a      	bne.n	800b79c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b786:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b78c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b78e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b790:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b792:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b794:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b796:	3301      	adds	r3, #1
 800b798:	6003      	str	r3, [r0, #0]
}
 800b79a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b79c:	f100 0208 	add.w	r2, r0, #8
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	6852      	ldr	r2, [r2, #4]
 800b7a4:	6815      	ldr	r5, [r2, #0]
 800b7a6:	42a5      	cmp	r5, r4
 800b7a8:	d9fa      	bls.n	800b7a0 <vListInsert+0x22>
 800b7aa:	e7ed      	b.n	800b788 <vListInsert+0xa>

0800b7ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7ae:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b7b2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7b6:	6859      	ldr	r1, [r3, #4]
 800b7b8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7ba:	bf08      	it	eq
 800b7bc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7be:	2200      	movs	r2, #0
 800b7c0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	3a01      	subs	r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7c8:	6818      	ldr	r0, [r3, #0]
}
 800b7ca:	4770      	bx	lr

0800b7cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b7cc:	4808      	ldr	r0, [pc, #32]	@ (800b7f0 <prvPortStartFirstTask+0x24>)
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	6800      	ldr	r0, [r0, #0]
 800b7d2:	f380 8808 	msr	MSP, r0
 800b7d6:	f04f 0000 	mov.w	r0, #0
 800b7da:	f380 8814 	msr	CONTROL, r0
 800b7de:	b662      	cpsie	i
 800b7e0:	b661      	cpsie	f
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	df00      	svc	0
 800b7ec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7ee:	0000      	.short	0x0000
 800b7f0:	e000ed08 	.word	0xe000ed08

0800b7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b804 <vPortEnableVFP+0x10>
 800b7f8:	6801      	ldr	r1, [r0, #0]
 800b7fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b7fe:	6001      	str	r1, [r0, #0]
 800b800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b802:	0000      	.short	0x0000
 800b804:	e000ed88 	.word	0xe000ed88

0800b808 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b808:	2300      	movs	r3, #0
{
 800b80a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b80c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b80e:	4b0d      	ldr	r3, [pc, #52]	@ (800b844 <prvTaskExitError+0x3c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	d008      	beq.n	800b828 <prvTaskExitError+0x20>
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	e7fe      	b.n	800b826 <prvTaskExitError+0x1e>
 800b828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b838:	9b01      	ldr	r3, [sp, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0fc      	beq.n	800b838 <prvTaskExitError+0x30>
}
 800b83e:	b002      	add	sp, #8
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	24000078 	.word	0x24000078

0800b848 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b84c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b850:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b854:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b856:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b858:	4b03      	ldr	r3, [pc, #12]	@ (800b868 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b85a:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b85c:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b85e:	f06f 0302 	mvn.w	r3, #2
 800b862:	6203      	str	r3, [r0, #32]
}
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	0800b809 	.word	0x0800b809
 800b86c:	00000000 	.word	0x00000000

0800b870 <SVC_Handler>:
	__asm volatile (
 800b870:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <pxCurrentTCBConst2>)
 800b872:	6819      	ldr	r1, [r3, #0]
 800b874:	6808      	ldr	r0, [r1, #0]
 800b876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	f380 8809 	msr	PSP, r0
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f04f 0000 	mov.w	r0, #0
 800b886:	f380 8811 	msr	BASEPRI, r0
 800b88a:	4770      	bx	lr
 800b88c:	f3af 8000 	nop.w

0800b890 <pxCurrentTCBConst2>:
 800b890:	24028368 	.word	0x24028368

0800b894 <vPortEnterCritical>:
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b8a4:	4a0a      	ldr	r2, [pc, #40]	@ (800b8d0 <vPortEnterCritical+0x3c>)
 800b8a6:	6813      	ldr	r3, [r2, #0]
 800b8a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b8aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b8ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b8ae:	d10e      	bne.n	800b8ce <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b8b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	b143      	cbz	r3, 800b8ce <vPortEnterCritical+0x3a>
 800b8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	e7fe      	b.n	800b8cc <vPortEnterCritical+0x38>
}
 800b8ce:	4770      	bx	lr
 800b8d0:	24000078 	.word	0x24000078

0800b8d4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b8d4:	4a08      	ldr	r2, [pc, #32]	@ (800b8f8 <vPortExitCritical+0x24>)
 800b8d6:	6813      	ldr	r3, [r2, #0]
 800b8d8:	b943      	cbnz	r3, 800b8ec <vPortExitCritical+0x18>
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	e7fe      	b.n	800b8ea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8f0:	b90b      	cbnz	r3, 800b8f6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8f2:	f383 8811 	msr	BASEPRI, r3
}
 800b8f6:	4770      	bx	lr
 800b8f8:	24000078 	.word	0x24000078
 800b8fc:	00000000 	.word	0x00000000

0800b900 <PendSV_Handler>:
	__asm volatile
 800b900:	f3ef 8009 	mrs	r0, PSP
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	4b15      	ldr	r3, [pc, #84]	@ (800b960 <pxCurrentTCBConst>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	f01e 0f10 	tst.w	lr, #16
 800b910:	bf08      	it	eq
 800b912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	6010      	str	r0, [r2, #0]
 800b91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b924:	f380 8811 	msr	BASEPRI, r0
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f001 f998 	bl	800cc64 <vTaskSwitchContext>
 800b934:	f04f 0000 	mov.w	r0, #0
 800b938:	f380 8811 	msr	BASEPRI, r0
 800b93c:	bc09      	pop	{r0, r3}
 800b93e:	6819      	ldr	r1, [r3, #0]
 800b940:	6808      	ldr	r0, [r1, #0]
 800b942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b946:	f01e 0f10 	tst.w	lr, #16
 800b94a:	bf08      	it	eq
 800b94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b950:	f380 8809 	msr	PSP, r0
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst>:
 800b960:	24028368 	.word	0x24028368

0800b964 <xPortSysTickHandler>:
{
 800b964:	b508      	push	{r3, lr}
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b976:	f001 f801 	bl	800c97c <xTaskIncrementTick>
 800b97a:	b128      	cbz	r0, 800b988 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b97c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b984:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b988:	2300      	movs	r3, #0
 800b98a:	f383 8811 	msr	BASEPRI, r3
}
 800b98e:	bd08      	pop	{r3, pc}

0800b990 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b990:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b994:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b996:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b99a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b99c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b99e:	4b04      	ldr	r3, [pc, #16]	@ (800b9b0 <vPortSetupTimerInterrupt+0x20>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9aa:	2307      	movs	r3, #7
 800b9ac:	6113      	str	r3, [r2, #16]
}
 800b9ae:	4770      	bx	lr
 800b9b0:	2400006c 	.word	0x2400006c

0800b9b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800b9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9ba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b9be:	4a38      	ldr	r2, [pc, #224]	@ (800baa0 <xPortStartScheduler+0xec>)
 800b9c0:	4291      	cmp	r1, r2
 800b9c2:	d108      	bne.n	800b9d6 <xPortStartScheduler+0x22>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	e7fe      	b.n	800b9d4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b9da:	4b32      	ldr	r3, [pc, #200]	@ (800baa4 <xPortStartScheduler+0xf0>)
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d108      	bne.n	800b9f2 <xPortStartScheduler+0x3e>
 800b9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	e7fe      	b.n	800b9f0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9f2:	4b2d      	ldr	r3, [pc, #180]	@ (800baa8 <xPortStartScheduler+0xf4>)
 800b9f4:	781a      	ldrb	r2, [r3, #0]
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9fa:	22ff      	movs	r2, #255	@ 0xff
 800b9fc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9fe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba00:	4a2a      	ldr	r2, [pc, #168]	@ (800baac <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba10:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba12:	2307      	movs	r3, #7
 800ba14:	4a26      	ldr	r2, [pc, #152]	@ (800bab0 <xPortStartScheduler+0xfc>)
 800ba16:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba18:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800ba1c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba1e:	0609      	lsls	r1, r1, #24
 800ba20:	d40a      	bmi.n	800ba38 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d011      	beq.n	800ba4a <xPortStartScheduler+0x96>
 800ba26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	e7fe      	b.n	800ba36 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba40:	005b      	lsls	r3, r3, #1
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f88d 3003 	strb.w	r3, [sp, #3]
 800ba48:	e7e6      	b.n	800ba18 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba4e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800ba52:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba54:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	4a13      	ldr	r2, [pc, #76]	@ (800baa8 <xPortStartScheduler+0xf4>)
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba5e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ba62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba66:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba6a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ba6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ba72:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ba76:	f7ff ff8b 	bl	800b990 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ba7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bab4 <xPortStartScheduler+0x100>)
 800ba7c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ba7e:	f7ff feb9 	bl	800b7f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba82:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800ba86:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba8a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ba8e:	f7ff fe9d 	bl	800b7cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ba92:	f001 f8e7 	bl	800cc64 <vTaskSwitchContext>
}
 800ba96:	4628      	mov	r0, r5
	prvTaskExitError();
 800ba98:	f7ff feb6 	bl	800b808 <prvTaskExitError>
}
 800ba9c:	b003      	add	sp, #12
 800ba9e:	bd30      	pop	{r4, r5, pc}
 800baa0:	410fc271 	.word	0x410fc271
 800baa4:	410fc270 	.word	0x410fc270
 800baa8:	e000e400 	.word	0xe000e400
 800baac:	24027e2c 	.word	0x24027e2c
 800bab0:	24027e28 	.word	0x24027e28
 800bab4:	24000078 	.word	0x24000078

0800bab8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bab8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800babc:	2b0f      	cmp	r3, #15
 800babe:	d90e      	bls.n	800bade <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bac0:	4a11      	ldr	r2, [pc, #68]	@ (800bb08 <vPortValidateInterruptPriority+0x50>)
 800bac2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bac4:	4a11      	ldr	r2, [pc, #68]	@ (800bb0c <vPortValidateInterruptPriority+0x54>)
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d908      	bls.n	800bade <vPortValidateInterruptPriority+0x26>
 800bacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	e7fe      	b.n	800badc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bade:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bae2:	4a0b      	ldr	r2, [pc, #44]	@ (800bb10 <vPortValidateInterruptPriority+0x58>)
 800bae4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800bae8:	6812      	ldr	r2, [r2, #0]
 800baea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800baee:	4293      	cmp	r3, r2
 800baf0:	d908      	bls.n	800bb04 <vPortValidateInterruptPriority+0x4c>
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	e7fe      	b.n	800bb02 <vPortValidateInterruptPriority+0x4a>
	}
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	e000e3f0 	.word	0xe000e3f0
 800bb0c:	24027e2c 	.word	0x24027e2c
 800bb10:	24027e28 	.word	0x24027e28

0800bb14 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb14:	b510      	push	{r4, lr}
 800bb16:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb18:	f7ff febc 	bl	800b894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb1c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bb1e:	f7ff fed9 	bl	800b8d4 <vPortExitCritical>

	return xReturn;
}
 800bb22:	fab4 f084 	clz	r0, r4
 800bb26:	0940      	lsrs	r0, r0, #5
 800bb28:	bd10      	pop	{r4, pc}

0800bb2a <prvCopyDataToQueue>:
{
 800bb2a:	b570      	push	{r4, r5, r6, lr}
 800bb2c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb2e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800bb30:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb32:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb34:	b942      	cbnz	r2, 800bb48 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb36:	6806      	ldr	r6, [r0, #0]
 800bb38:	b99e      	cbnz	r6, 800bb62 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb3a:	6880      	ldr	r0, [r0, #8]
 800bb3c:	f001 f9f2 	bl	800cf24 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb40:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb42:	3501      	adds	r5, #1
 800bb44:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800bb46:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800bb48:	b96e      	cbnz	r6, 800bb66 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb4a:	6840      	ldr	r0, [r0, #4]
 800bb4c:	f016 ffb9 	bl	8022ac2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb50:	6863      	ldr	r3, [r4, #4]
 800bb52:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bb54:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb56:	68a2      	ldr	r2, [r4, #8]
 800bb58:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb5a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb5c:	bf24      	itt	cs
 800bb5e:	6823      	ldrcs	r3, [r4, #0]
 800bb60:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800bb62:	2000      	movs	r0, #0
 800bb64:	e7ed      	b.n	800bb42 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb66:	68c0      	ldr	r0, [r0, #12]
 800bb68:	f016 ffab 	bl	8022ac2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb6c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bb6e:	68e3      	ldr	r3, [r4, #12]
 800bb70:	4251      	negs	r1, r2
 800bb72:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb78:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb7a:	bf3e      	ittt	cc
 800bb7c:	68a3      	ldrcc	r3, [r4, #8]
 800bb7e:	185b      	addcc	r3, r3, r1
 800bb80:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800bb82:	2e02      	cmp	r6, #2
 800bb84:	d1ed      	bne.n	800bb62 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb86:	b10d      	cbz	r5, 800bb8c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800bb88:	3d01      	subs	r5, #1
 800bb8a:	e7ea      	b.n	800bb62 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	e7d8      	b.n	800bb42 <prvCopyDataToQueue+0x18>

0800bb90 <prvCopyDataFromQueue>:
{
 800bb90:	4603      	mov	r3, r0
 800bb92:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800bb96:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb98:	b162      	cbz	r2, 800bbb4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb9a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb9c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb9e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bba0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bba2:	60dc      	str	r4, [r3, #12]
}
 800bba4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bba8:	bf24      	itt	cs
 800bbaa:	6819      	ldrcs	r1, [r3, #0]
 800bbac:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbae:	68d9      	ldr	r1, [r3, #12]
 800bbb0:	f016 bf87 	b.w	8022ac2 <memcpy>
}
 800bbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <prvUnlockQueue>:
{
 800bbba:	b570      	push	{r4, r5, r6, lr}
 800bbbc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bbbe:	f7ff fe69 	bl	800b894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800bbc2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbc6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800bbca:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbcc:	2d00      	cmp	r5, #0
 800bbce:	dc14      	bgt.n	800bbfa <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800bbd0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbd2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800bbd6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800bbda:	f7ff fe7b 	bl	800b8d4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800bbde:	f7ff fe59 	bl	800b894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bbe2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800bbe6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	dc12      	bgt.n	800bc12 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800bbec:	23ff      	movs	r3, #255	@ 0xff
 800bbee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800bbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800bbf6:	f7ff be6d 	b.w	800b8d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0e7      	beq.n	800bbd0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc00:	4630      	mov	r0, r6
 800bc02:	f001 f8ab 	bl	800cd5c <xTaskRemoveFromEventList>
 800bc06:	b108      	cbz	r0, 800bc0c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800bc08:	f001 f932 	bl	800ce70 <vTaskMissedYield>
			--cTxLock;
 800bc0c:	3d01      	subs	r5, #1
 800bc0e:	b26d      	sxtb	r5, r5
 800bc10:	e7dc      	b.n	800bbcc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0e9      	beq.n	800bbec <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f001 f89f 	bl	800cd5c <xTaskRemoveFromEventList>
 800bc1e:	b108      	cbz	r0, 800bc24 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800bc20:	f001 f926 	bl	800ce70 <vTaskMissedYield>
				--cRxLock;
 800bc24:	3d01      	subs	r5, #1
 800bc26:	b26d      	sxtb	r5, r5
 800bc28:	e7de      	b.n	800bbe8 <prvUnlockQueue+0x2e>

0800bc2a <xQueueGenericReset>:
{
 800bc2a:	b538      	push	{r3, r4, r5, lr}
 800bc2c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bc2e:	4604      	mov	r4, r0
 800bc30:	b940      	cbnz	r0, 800bc44 <xQueueGenericReset+0x1a>
 800bc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	e7fe      	b.n	800bc42 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800bc44:	f7ff fe26 	bl	800b894 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc48:	6822      	ldr	r2, [r4, #0]
 800bc4a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc4e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc50:	434b      	muls	r3, r1
 800bc52:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc54:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc56:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc58:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc5a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800bc5c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc5e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc60:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bc62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800bc6a:	b9a5      	cbnz	r5, 800bc96 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	b173      	cbz	r3, 800bc8e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc70:	f104 0010 	add.w	r0, r4, #16
 800bc74:	f001 f872 	bl	800cd5c <xTaskRemoveFromEventList>
 800bc78:	b148      	cbz	r0, 800bc8e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bc7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bc8e:	f7ff fe21 	bl	800b8d4 <vPortExitCritical>
}
 800bc92:	2001      	movs	r0, #1
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc96:	f104 0010 	add.w	r0, r4, #16
 800bc9a:	f7ff fd57 	bl	800b74c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bca2:	f7ff fd53 	bl	800b74c <vListInitialise>
 800bca6:	e7f2      	b.n	800bc8e <xQueueGenericReset+0x64>

0800bca8 <xQueueGenericCreateStatic>:
	{
 800bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcaa:	460d      	mov	r5, r1
 800bcac:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcae:	b940      	cbnz	r0, 800bcc2 <xQueueGenericCreateStatic+0x1a>
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800bcc2:	b943      	cbnz	r3, 800bcd6 <xQueueGenericCreateStatic+0x2e>
 800bcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcd6:	b14a      	cbz	r2, 800bcec <xQueueGenericCreateStatic+0x44>
 800bcd8:	b991      	cbnz	r1, 800bd00 <xQueueGenericCreateStatic+0x58>
 800bcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	e7fe      	b.n	800bcea <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcec:	b141      	cbz	r1, 800bd00 <xQueueGenericCreateStatic+0x58>
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	e7fe      	b.n	800bcfe <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd00:	2350      	movs	r3, #80	@ 0x50
 800bd02:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	2b50      	cmp	r3, #80	@ 0x50
 800bd08:	d008      	beq.n	800bd1c <xQueueGenericCreateStatic+0x74>
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	e7fe      	b.n	800bd1a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd1c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd1e:	2d00      	cmp	r5, #0
 800bd20:	bf08      	it	eq
 800bd22:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd24:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd26:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd2a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bd2c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7ff ff7a 	bl	800bc2a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bd36:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800bd3a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bd3c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bd40:	b003      	add	sp, #12
 800bd42:	bd30      	pop	{r4, r5, pc}

0800bd44 <xQueueGenericCreate>:
	{
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	460d      	mov	r5, r1
 800bd48:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	b940      	cbnz	r0, 800bd60 <xQueueGenericCreate+0x1c>
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	e7fe      	b.n	800bd5e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd60:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd62:	3050      	adds	r0, #80	@ 0x50
 800bd64:	f7ff fc1c 	bl	800b5a0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bd68:	4604      	mov	r4, r0
 800bd6a:	b170      	cbz	r0, 800bd8a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd72:	b165      	cbz	r5, 800bd8e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd74:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bd7e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd82:	f7ff ff52 	bl	800bc2a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bd86:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd8e:	4603      	mov	r3, r0
 800bd90:	e7f2      	b.n	800bd78 <xQueueGenericCreate+0x34>

0800bd92 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bd92:	b513      	push	{r0, r1, r4, lr}
 800bd94:	4613      	mov	r3, r2
 800bd96:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bd98:	b940      	cbnz	r0, 800bdac <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	e7fe      	b.n	800bdaa <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bdac:	4288      	cmp	r0, r1
 800bdae:	d208      	bcs.n	800bdc2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800bdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	e7fe      	b.n	800bdc0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	9200      	str	r2, [sp, #0]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4611      	mov	r1, r2
 800bdca:	f7ff ff6d 	bl	800bca8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bdce:	b100      	cbz	r0, 800bdd2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bdd0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bdd2:	b002      	add	sp, #8
 800bdd4:	bd10      	pop	{r4, pc}

0800bdd6 <xQueueCreateCountingSemaphore>:
	{
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bdda:	b940      	cbnz	r0, 800bdee <xQueueCreateCountingSemaphore+0x18>
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	e7fe      	b.n	800bdec <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bdee:	4288      	cmp	r0, r1
 800bdf0:	d208      	bcs.n	800be04 <xQueueCreateCountingSemaphore+0x2e>
 800bdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	e7fe      	b.n	800be02 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be04:	2202      	movs	r2, #2
 800be06:	2100      	movs	r1, #0
 800be08:	f7ff ff9c 	bl	800bd44 <xQueueGenericCreate>
		if( xHandle != NULL )
 800be0c:	b100      	cbz	r0, 800be10 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be0e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800be10:	bd10      	pop	{r4, pc}

0800be12 <xQueueGenericSend>:
{
 800be12:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800be16:	460f      	mov	r7, r1
 800be18:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800be1a:	4604      	mov	r4, r0
{
 800be1c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800be1e:	b940      	cbnz	r0, 800be32 <xQueueGenericSend+0x20>
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	e7fe      	b.n	800be30 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be32:	b951      	cbnz	r1, 800be4a <xQueueGenericSend+0x38>
 800be34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800be36:	b143      	cbz	r3, 800be4a <xQueueGenericSend+0x38>
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	e7fe      	b.n	800be48 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be4a:	2e02      	cmp	r6, #2
 800be4c:	d10b      	bne.n	800be66 <xQueueGenericSend+0x54>
 800be4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be50:	2b01      	cmp	r3, #1
 800be52:	d008      	beq.n	800be66 <xQueueGenericSend+0x54>
 800be54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	e7fe      	b.n	800be64 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be66:	f001 f80f 	bl	800ce88 <xTaskGetSchedulerState>
 800be6a:	4605      	mov	r5, r0
 800be6c:	b330      	cbz	r0, 800bebc <xQueueGenericSend+0xaa>
 800be6e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800be70:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800be74:	f7ff fd0e 	bl	800b894 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800be7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d301      	bcc.n	800be84 <xQueueGenericSend+0x72>
 800be80:	2e02      	cmp	r6, #2
 800be82:	d127      	bne.n	800bed4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be84:	4632      	mov	r2, r6
 800be86:	4639      	mov	r1, r7
 800be88:	4620      	mov	r0, r4
 800be8a:	f7ff fe4e 	bl	800bb2a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800be90:	b11b      	cbz	r3, 800be9a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be92:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800be96:	f000 ff61 	bl	800cd5c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800be9a:	b148      	cbz	r0, 800beb0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800be9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800beb0:	f7ff fd10 	bl	800b8d4 <vPortExitCritical>
				return pdPASS;
 800beb4:	2001      	movs	r0, #1
}
 800beb6:	b004      	add	sp, #16
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0d6      	beq.n	800be70 <xQueueGenericSend+0x5e>
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	e7fe      	b.n	800bed2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bed4:	9b01      	ldr	r3, [sp, #4]
 800bed6:	b91b      	cbnz	r3, 800bee0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800bed8:	f7ff fcfc 	bl	800b8d4 <vPortExitCritical>
					return errQUEUE_FULL;
 800bedc:	2000      	movs	r0, #0
 800bede:	e7ea      	b.n	800beb6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800bee0:	b915      	cbnz	r5, 800bee8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bee2:	a802      	add	r0, sp, #8
 800bee4:	f000 ff7c 	bl	800cde0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bee8:	f7ff fcf4 	bl	800b8d4 <vPortExitCritical>
		vTaskSuspendAll();
 800beec:	f000 fd38 	bl	800c960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bef0:	f7ff fcd0 	bl	800b894 <vPortEnterCritical>
 800bef4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bef8:	2bff      	cmp	r3, #255	@ 0xff
 800befa:	d101      	bne.n	800bf00 <xQueueGenericSend+0xee>
 800befc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bf00:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bf04:	2bff      	cmp	r3, #255	@ 0xff
 800bf06:	d101      	bne.n	800bf0c <xQueueGenericSend+0xfa>
 800bf08:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bf0c:	f7ff fce2 	bl	800b8d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf10:	a901      	add	r1, sp, #4
 800bf12:	a802      	add	r0, sp, #8
 800bf14:	f000 ff70 	bl	800cdf8 <xTaskCheckForTimeOut>
 800bf18:	bb38      	cbnz	r0, 800bf6a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf1a:	f7ff fcbb 	bl	800b894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf1e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bf20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d10e      	bne.n	800bf44 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bf26:	f7ff fcd5 	bl	800b8d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf2a:	9901      	ldr	r1, [sp, #4]
 800bf2c:	f104 0010 	add.w	r0, r4, #16
 800bf30:	f000 fedc 	bl	800ccec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf34:	4620      	mov	r0, r4
 800bf36:	f7ff fe40 	bl	800bbba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf3a:	f000 fdb5 	bl	800caa8 <xTaskResumeAll>
 800bf3e:	b148      	cbz	r0, 800bf54 <xQueueGenericSend+0x142>
 800bf40:	2501      	movs	r5, #1
 800bf42:	e797      	b.n	800be74 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800bf44:	f7ff fcc6 	bl	800b8d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff fe36 	bl	800bbba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf4e:	f000 fdab 	bl	800caa8 <xTaskResumeAll>
 800bf52:	e7f5      	b.n	800bf40 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800bf54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	e7ea      	b.n	800bf40 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff fe25 	bl	800bbba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf70:	f000 fd9a 	bl	800caa8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800bf74:	e7b2      	b.n	800bedc <xQueueGenericSend+0xca>

0800bf76 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bf76:	2200      	movs	r2, #0
	{
 800bf78:	460b      	mov	r3, r1
 800bf7a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	9000      	str	r0, [sp, #0]
 800bf80:	2001      	movs	r0, #1
 800bf82:	f7ff fe91 	bl	800bca8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800bf86:	4604      	mov	r4, r0
 800bf88:	b138      	cbz	r0, 800bf9a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf8a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf90:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bf92:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bf94:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf96:	f7ff ff3c 	bl	800be12 <xQueueGenericSend>
	}
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd10      	pop	{r4, pc}

0800bfa0 <xQueueGiveMutexRecursive>:
	{
 800bfa0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	b940      	cbnz	r0, 800bfb8 <xQueueGiveMutexRecursive+0x18>
 800bfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	e7fe      	b.n	800bfb6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bfb8:	6885      	ldr	r5, [r0, #8]
 800bfba:	f000 ff5f 	bl	800ce7c <xTaskGetCurrentTaskHandle>
 800bfbe:	4285      	cmp	r5, r0
 800bfc0:	d10b      	bne.n	800bfda <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bfc8:	b10b      	cbz	r3, 800bfce <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800bfca:	2001      	movs	r0, #1
	}
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7ff ff1d 	bl	800be12 <xQueueGenericSend>
 800bfd8:	e7f7      	b.n	800bfca <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800bfda:	2000      	movs	r0, #0
		return xReturn;
 800bfdc:	e7f6      	b.n	800bfcc <xQueueGiveMutexRecursive+0x2c>

0800bfde <xQueueCreateMutex>:
	{
 800bfde:	b570      	push	{r4, r5, r6, lr}
 800bfe0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bfe2:	2050      	movs	r0, #80	@ 0x50
 800bfe4:	f7ff fadc 	bl	800b5a0 <pvPortMalloc>
 800bfe8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800bfea:	b198      	cbz	r0, 800c014 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfec:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800bfee:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bff0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bff2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bff6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bffa:	f7ff fe16 	bl	800bc2a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bffe:	462b      	mov	r3, r5
 800c000:	462a      	mov	r2, r5
 800c002:	4629      	mov	r1, r5
 800c004:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c006:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c00a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c00c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c00e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c010:	f7ff feff 	bl	800be12 <xQueueGenericSend>
	}
 800c014:	4620      	mov	r0, r4
 800c016:	bd70      	pop	{r4, r5, r6, pc}

0800c018 <xQueueGenericSendFromISR>:
{
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	4689      	mov	r9, r1
 800c01e:	4617      	mov	r7, r2
 800c020:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800c022:	4604      	mov	r4, r0
 800c024:	b940      	cbnz	r0, 800c038 <xQueueGenericSendFromISR+0x20>
 800c026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	e7fe      	b.n	800c036 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c038:	b951      	cbnz	r1, 800c050 <xQueueGenericSendFromISR+0x38>
 800c03a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c03c:	b143      	cbz	r3, 800c050 <xQueueGenericSendFromISR+0x38>
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	e7fe      	b.n	800c04e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c050:	2e02      	cmp	r6, #2
 800c052:	d10b      	bne.n	800c06c <xQueueGenericSendFromISR+0x54>
 800c054:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c056:	2b01      	cmp	r3, #1
 800c058:	d008      	beq.n	800c06c <xQueueGenericSendFromISR+0x54>
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	e7fe      	b.n	800c06a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c06c:	f7ff fd24 	bl	800bab8 <vPortValidateInterruptPriority>
	__asm volatile
 800c070:	f3ef 8811 	mrs	r8, BASEPRI
 800c074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c084:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c086:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c088:	429a      	cmp	r2, r3
 800c08a:	d301      	bcc.n	800c090 <xQueueGenericSendFromISR+0x78>
 800c08c:	2e02      	cmp	r6, #2
 800c08e:	d11e      	bne.n	800c0ce <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c090:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c094:	4632      	mov	r2, r6
 800c096:	4649      	mov	r1, r9
 800c098:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c09a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c09c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c09e:	f7ff fd44 	bl	800bb2a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c0a2:	1c6b      	adds	r3, r5, #1
 800c0a4:	d10e      	bne.n	800c0c4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c0a8:	b13b      	cbz	r3, 800c0ba <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c0ae:	f000 fe55 	bl	800cd5c <xTaskRemoveFromEventList>
 800c0b2:	b110      	cbz	r0, 800c0ba <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800c0b4:	b10f      	cbz	r7, 800c0ba <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800c0ba:	2001      	movs	r0, #1
	__asm volatile
 800c0bc:	f388 8811 	msr	BASEPRI, r8
}
 800c0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	b26d      	sxtb	r5, r5
 800c0c8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800c0cc:	e7f5      	b.n	800c0ba <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	e7f4      	b.n	800c0bc <xQueueGenericSendFromISR+0xa4>

0800c0d2 <xQueueGiveFromISR>:
{
 800c0d2:	b570      	push	{r4, r5, r6, lr}
 800c0d4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	b940      	cbnz	r0, 800c0ec <xQueueGiveFromISR+0x1a>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	e7fe      	b.n	800c0ea <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c0ee:	b143      	cbz	r3, 800c102 <xQueueGiveFromISR+0x30>
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	e7fe      	b.n	800c100 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c102:	6803      	ldr	r3, [r0, #0]
 800c104:	b953      	cbnz	r3, 800c11c <xQueueGiveFromISR+0x4a>
 800c106:	6883      	ldr	r3, [r0, #8]
 800c108:	b143      	cbz	r3, 800c11c <xQueueGiveFromISR+0x4a>
 800c10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	e7fe      	b.n	800c11a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c11c:	f7ff fccc 	bl	800bab8 <vPortValidateInterruptPriority>
	__asm volatile
 800c120:	f3ef 8611 	mrs	r6, BASEPRI
 800c124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c134:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c136:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c138:	4293      	cmp	r3, r2
 800c13a:	d919      	bls.n	800c170 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c13c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c140:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c142:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c144:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c146:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c148:	d10d      	bne.n	800c166 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c14a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c14c:	b13b      	cbz	r3, 800c15e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c14e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c152:	f000 fe03 	bl	800cd5c <xTaskRemoveFromEventList>
 800c156:	b110      	cbz	r0, 800c15e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c158:	b10d      	cbz	r5, 800c15e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c15a:	2301      	movs	r3, #1
 800c15c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800c15e:	2001      	movs	r0, #1
	__asm volatile
 800c160:	f386 8811 	msr	BASEPRI, r6
}
 800c164:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c166:	3301      	adds	r3, #1
 800c168:	b25b      	sxtb	r3, r3
 800c16a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c16e:	e7f6      	b.n	800c15e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c170:	2000      	movs	r0, #0
 800c172:	e7f5      	b.n	800c160 <xQueueGiveFromISR+0x8e>

0800c174 <xQueueReceive>:
{
 800c174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c178:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800c17a:	4604      	mov	r4, r0
{
 800c17c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c17e:	b940      	cbnz	r0, 800c192 <xQueueReceive+0x1e>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	e7fe      	b.n	800c190 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c192:	b951      	cbnz	r1, 800c1aa <xQueueReceive+0x36>
 800c194:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c196:	b143      	cbz	r3, 800c1aa <xQueueReceive+0x36>
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	e7fe      	b.n	800c1a8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1aa:	f000 fe6d 	bl	800ce88 <xTaskGetSchedulerState>
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	b318      	cbz	r0, 800c1fa <xQueueReceive+0x86>
 800c1b2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c1b4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c1b8:	f7ff fb6c 	bl	800b894 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1bc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1be:	b347      	cbz	r7, 800c212 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1c0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7ff fce3 	bl	800bb90 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ca:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	b173      	cbz	r3, 800c1ee <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d0:	f104 0010 	add.w	r0, r4, #16
 800c1d4:	f000 fdc2 	bl	800cd5c <xTaskRemoveFromEventList>
 800c1d8:	b148      	cbz	r0, 800c1ee <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800c1da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c1ee:	f7ff fb71 	bl	800b8d4 <vPortExitCritical>
				return pdPASS;
 800c1f2:	2001      	movs	r0, #1
}
 800c1f4:	b004      	add	sp, #16
 800c1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1fa:	9b01      	ldr	r3, [sp, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0d9      	beq.n	800c1b4 <xQueueReceive+0x40>
 800c200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	e7fe      	b.n	800c210 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c212:	9b01      	ldr	r3, [sp, #4]
 800c214:	b91b      	cbnz	r3, 800c21e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800c216:	f7ff fb5d 	bl	800b8d4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c21a:	2000      	movs	r0, #0
 800c21c:	e7ea      	b.n	800c1f4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800c21e:	b915      	cbnz	r5, 800c226 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c220:	a802      	add	r0, sp, #8
 800c222:	f000 fddd 	bl	800cde0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c226:	f7ff fb55 	bl	800b8d4 <vPortExitCritical>
		vTaskSuspendAll();
 800c22a:	f000 fb99 	bl	800c960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c22e:	f7ff fb31 	bl	800b894 <vPortEnterCritical>
 800c232:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c236:	2bff      	cmp	r3, #255	@ 0xff
 800c238:	d101      	bne.n	800c23e <xQueueReceive+0xca>
 800c23a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c23e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c242:	2bff      	cmp	r3, #255	@ 0xff
 800c244:	d101      	bne.n	800c24a <xQueueReceive+0xd6>
 800c246:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c24a:	f7ff fb43 	bl	800b8d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c24e:	a901      	add	r1, sp, #4
 800c250:	a802      	add	r0, sp, #8
 800c252:	f000 fdd1 	bl	800cdf8 <xTaskCheckForTimeOut>
 800c256:	bb00      	cbnz	r0, 800c29a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff fc5b 	bl	800bb14 <prvIsQueueEmpty>
 800c25e:	b1b0      	cbz	r0, 800c28e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c260:	9901      	ldr	r1, [sp, #4]
 800c262:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c266:	f000 fd41 	bl	800ccec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7ff fca5 	bl	800bbba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c270:	f000 fc1a 	bl	800caa8 <xTaskResumeAll>
 800c274:	b948      	cbnz	r0, 800c28a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c276:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c27e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	2501      	movs	r5, #1
 800c28c:	e794      	b.n	800c1b8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c28e:	4620      	mov	r0, r4
 800c290:	f7ff fc93 	bl	800bbba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c294:	f000 fc08 	bl	800caa8 <xTaskResumeAll>
 800c298:	e7f7      	b.n	800c28a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff fc8d 	bl	800bbba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2a0:	f000 fc02 	bl	800caa8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f7ff fc35 	bl	800bb14 <prvIsQueueEmpty>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0ed      	beq.n	800c28a <xQueueReceive+0x116>
 800c2ae:	e7b4      	b.n	800c21a <xQueueReceive+0xa6>

0800c2b0 <xQueueSemaphoreTake>:
{
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c2b4:	4604      	mov	r4, r0
{
 800c2b6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c2b8:	b940      	cbnz	r0, 800c2cc <xQueueSemaphoreTake+0x1c>
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	e7fe      	b.n	800c2ca <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2cc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c2ce:	b145      	cbz	r5, 800c2e2 <xQueueSemaphoreTake+0x32>
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e2:	f000 fdd1 	bl	800ce88 <xTaskGetSchedulerState>
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	b320      	cbz	r0, 800c334 <xQueueSemaphoreTake+0x84>
 800c2ea:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c2ec:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c2ee:	f7ff fad1 	bl	800b894 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c2f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c2f4:	b353      	cbz	r3, 800c34c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	b913      	cbnz	r3, 800c304 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c2fe:	f000 fea1 	bl	800d044 <pvTaskIncrementMutexHeldCount>
 800c302:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	b173      	cbz	r3, 800c326 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c308:	f104 0010 	add.w	r0, r4, #16
 800c30c:	f000 fd26 	bl	800cd5c <xTaskRemoveFromEventList>
 800c310:	b148      	cbz	r0, 800c326 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c312:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c31a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c326:	f7ff fad5 	bl	800b8d4 <vPortExitCritical>
				return pdPASS;
 800c32a:	2001      	movs	r0, #1
}
 800c32c:	b005      	add	sp, #20
 800c32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c330:	4635      	mov	r5, r6
 800c332:	e7db      	b.n	800c2ec <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0fa      	beq.n	800c330 <xQueueSemaphoreTake+0x80>
 800c33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	e7fe      	b.n	800c34a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	b953      	cbnz	r3, 800c366 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c350:	2d00      	cmp	r5, #0
 800c352:	d066      	beq.n	800c422 <xQueueSemaphoreTake+0x172>
 800c354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	e7fe      	b.n	800c364 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c366:	b916      	cbnz	r6, 800c36e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c368:	a802      	add	r0, sp, #8
 800c36a:	f000 fd39 	bl	800cde0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c36e:	f7ff fab1 	bl	800b8d4 <vPortExitCritical>
		vTaskSuspendAll();
 800c372:	f000 faf5 	bl	800c960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c376:	f7ff fa8d 	bl	800b894 <vPortEnterCritical>
 800c37a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c37e:	2bff      	cmp	r3, #255	@ 0xff
 800c380:	d101      	bne.n	800c386 <xQueueSemaphoreTake+0xd6>
 800c382:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c386:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c38a:	2bff      	cmp	r3, #255	@ 0xff
 800c38c:	d101      	bne.n	800c392 <xQueueSemaphoreTake+0xe2>
 800c38e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c392:	f7ff fa9f 	bl	800b8d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c396:	a901      	add	r1, sp, #4
 800c398:	a802      	add	r0, sp, #8
 800c39a:	f000 fd2d 	bl	800cdf8 <xTaskCheckForTimeOut>
 800c39e:	bb50      	cbnz	r0, 800c3f6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f7ff fbb7 	bl	800bb14 <prvIsQueueEmpty>
 800c3a6:	b300      	cbz	r0, 800c3ea <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	b93b      	cbnz	r3, 800c3bc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c3ac:	f7ff fa72 	bl	800b894 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c3b0:	68a0      	ldr	r0, [r4, #8]
 800c3b2:	f000 fd79 	bl	800cea8 <xTaskPriorityInherit>
 800c3b6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c3b8:	f7ff fa8c 	bl	800b8d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3bc:	9901      	ldr	r1, [sp, #4]
 800c3be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c3c2:	f000 fc93 	bl	800ccec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7ff fbf7 	bl	800bbba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3cc:	f000 fb6c 	bl	800caa8 <xTaskResumeAll>
 800c3d0:	b948      	cbnz	r0, 800c3e6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c3d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	2601      	movs	r6, #1
 800c3e8:	e781      	b.n	800c2ee <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7ff fbe5 	bl	800bbba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3f0:	f000 fb5a 	bl	800caa8 <xTaskResumeAll>
 800c3f4:	e7f7      	b.n	800c3e6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f7ff fbdf 	bl	800bbba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3fc:	f000 fb54 	bl	800caa8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff fb87 	bl	800bb14 <prvIsQueueEmpty>
 800c406:	2800      	cmp	r0, #0
 800c408:	d0ed      	beq.n	800c3e6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c40a:	b165      	cbz	r5, 800c426 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c40c:	f7ff fa42 	bl	800b894 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c410:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c412:	b119      	cbz	r1, 800c41c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c414:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c41c:	68a0      	ldr	r0, [r4, #8]
 800c41e:	f000 fdc3 	bl	800cfa8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c422:	f7ff fa57 	bl	800b8d4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c426:	2000      	movs	r0, #0
 800c428:	e780      	b.n	800c32c <xQueueSemaphoreTake+0x7c>

0800c42a <xQueueTakeMutexRecursive>:
	{
 800c42a:	b570      	push	{r4, r5, r6, lr}
 800c42c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c42e:	4604      	mov	r4, r0
 800c430:	b940      	cbnz	r0, 800c444 <xQueueTakeMutexRecursive+0x1a>
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	e7fe      	b.n	800c442 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c444:	6886      	ldr	r6, [r0, #8]
 800c446:	f000 fd19 	bl	800ce7c <xTaskGetCurrentTaskHandle>
 800c44a:	4286      	cmp	r6, r0
 800c44c:	d104      	bne.n	800c458 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c44e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c450:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c452:	3301      	adds	r3, #1
 800c454:	60e3      	str	r3, [r4, #12]
	}
 800c456:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c458:	4629      	mov	r1, r5
 800c45a:	4620      	mov	r0, r4
 800c45c:	f7ff ff28 	bl	800c2b0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c460:	2800      	cmp	r0, #0
 800c462:	d0f8      	beq.n	800c456 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c464:	68e3      	ldr	r3, [r4, #12]
 800c466:	3301      	adds	r3, #1
 800c468:	60e3      	str	r3, [r4, #12]
 800c46a:	e7f4      	b.n	800c456 <xQueueTakeMutexRecursive+0x2c>

0800c46c <xQueueReceiveFromISR>:
{
 800c46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c470:	4689      	mov	r9, r1
 800c472:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c474:	4604      	mov	r4, r0
 800c476:	b940      	cbnz	r0, 800c48a <xQueueReceiveFromISR+0x1e>
 800c478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	e7fe      	b.n	800c488 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c48a:	b951      	cbnz	r1, 800c4a2 <xQueueReceiveFromISR+0x36>
 800c48c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c48e:	b143      	cbz	r3, 800c4a2 <xQueueReceiveFromISR+0x36>
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4a2:	f7ff fb09 	bl	800bab8 <vPortValidateInterruptPriority>
	__asm volatile
 800c4a6:	f3ef 8711 	mrs	r7, BASEPRI
 800c4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ba:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4bc:	b30d      	cbz	r5, 800c502 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4be:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4c2:	4649      	mov	r1, r9
 800c4c4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4c6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4c8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4ca:	f7ff fb61 	bl	800bb90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4ce:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c4d0:	1c73      	adds	r3, r6, #1
 800c4d2:	d111      	bne.n	800c4f8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	b153      	cbz	r3, 800c4ee <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4d8:	f104 0010 	add.w	r0, r4, #16
 800c4dc:	f000 fc3e 	bl	800cd5c <xTaskRemoveFromEventList>
 800c4e0:	b128      	cbz	r0, 800c4ee <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c4e2:	f1b8 0f00 	cmp.w	r8, #0
 800c4e6:	d002      	beq.n	800c4ee <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c4ee:	2001      	movs	r0, #1
	__asm volatile
 800c4f0:	f387 8811 	msr	BASEPRI, r7
}
 800c4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c4f8:	3601      	adds	r6, #1
 800c4fa:	b276      	sxtb	r6, r6
 800c4fc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c500:	e7f5      	b.n	800c4ee <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c502:	4628      	mov	r0, r5
 800c504:	e7f4      	b.n	800c4f0 <xQueueReceiveFromISR+0x84>
	...

0800c508 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c508:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c50a:	4a07      	ldr	r2, [pc, #28]	@ (800c528 <vQueueAddToRegistry+0x20>)
	{
 800c50c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c50e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c512:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c516:	b91d      	cbnz	r5, 800c520 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c518:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c51c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c51e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c520:	3301      	adds	r3, #1
 800c522:	2b08      	cmp	r3, #8
 800c524:	d1f3      	bne.n	800c50e <vQueueAddToRegistry+0x6>
 800c526:	e7fa      	b.n	800c51e <vQueueAddToRegistry+0x16>
 800c528:	24027e30 	.word	0x24027e30

0800c52c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c52c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c52e:	4a09      	ldr	r2, [pc, #36]	@ (800c554 <vQueueUnregisterQueue+0x28>)
	{
 800c530:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c532:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c536:	00dc      	lsls	r4, r3, #3
 800c538:	4281      	cmp	r1, r0
 800c53a:	d106      	bne.n	800c54a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c53c:	4a06      	ldr	r2, [pc, #24]	@ (800c558 <vQueueUnregisterQueue+0x2c>)
 800c53e:	2100      	movs	r1, #0
 800c540:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c544:	4422      	add	r2, r4
 800c546:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c548:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c54a:	3301      	adds	r3, #1
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	d1f0      	bne.n	800c532 <vQueueUnregisterQueue+0x6>
 800c550:	e7fa      	b.n	800c548 <vQueueUnregisterQueue+0x1c>
 800c552:	bf00      	nop
 800c554:	24027e34 	.word	0x24027e34
 800c558:	24027e30 	.word	0x24027e30

0800c55c <vQueueDelete>:
{
 800c55c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c55e:	b940      	cbnz	r0, 800c572 <vQueueDelete+0x16>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	e7fe      	b.n	800c570 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c572:	f7ff ffdb 	bl	800c52c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c576:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c57a:	b91b      	cbnz	r3, 800c584 <vQueueDelete+0x28>
}
 800c57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c580:	f7ff b8a6 	b.w	800b6d0 <vPortFree>
}
 800c584:	bd10      	pop	{r4, pc}

0800c586 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c586:	b570      	push	{r4, r5, r6, lr}
 800c588:	4604      	mov	r4, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c58e:	f7ff f981 	bl	800b894 <vPortEnterCritical>
 800c592:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c596:	2bff      	cmp	r3, #255	@ 0xff
 800c598:	d102      	bne.n	800c5a0 <vQueueWaitForMessageRestricted+0x1a>
 800c59a:	2300      	movs	r3, #0
 800c59c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c5a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c5a4:	2bff      	cmp	r3, #255	@ 0xff
 800c5a6:	d102      	bne.n	800c5ae <vQueueWaitForMessageRestricted+0x28>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c5ae:	f7ff f991 	bl	800b8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c5b4:	b92b      	cbnz	r3, 800c5c2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5b6:	4632      	mov	r2, r6
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c5be:	f000 fbaf 	bl	800cd20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5c2:	4620      	mov	r0, r4
	}
 800c5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c5c8:	f7ff baf7 	b.w	800bbba <prvUnlockQueue>

0800c5cc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5d2:	f7ff f95f 	bl	800b894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5d6:	4b2f      	ldr	r3, [pc, #188]	@ (800c694 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c5d8:	4e2f      	ldr	r6, [pc, #188]	@ (800c698 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	4f2f      	ldr	r7, [pc, #188]	@ (800c69c <prvAddNewTaskToReadyList+0xd0>)
 800c5de:	3201      	adds	r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c5e2:	6835      	ldr	r5, [r6, #0]
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	d14a      	bne.n	800c67e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5e8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d11f      	bne.n	800c630 <prvAddNewTaskToReadyList+0x64>
 800c5f0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5f2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	f7ff f8a9 	bl	800b74c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5fa:	f108 0814 	add.w	r8, r8, #20
 800c5fe:	2d38      	cmp	r5, #56	@ 0x38
 800c600:	d1f7      	bne.n	800c5f2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c602:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c6c4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c606:	4d26      	ldr	r5, [pc, #152]	@ (800c6a0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c608:	4640      	mov	r0, r8
 800c60a:	f7ff f89f 	bl	800b74c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c60e:	4628      	mov	r0, r5
 800c610:	f7ff f89c 	bl	800b74c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c614:	4823      	ldr	r0, [pc, #140]	@ (800c6a4 <prvAddNewTaskToReadyList+0xd8>)
 800c616:	f7ff f899 	bl	800b74c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c61a:	4823      	ldr	r0, [pc, #140]	@ (800c6a8 <prvAddNewTaskToReadyList+0xdc>)
 800c61c:	f7ff f896 	bl	800b74c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c620:	4822      	ldr	r0, [pc, #136]	@ (800c6ac <prvAddNewTaskToReadyList+0xe0>)
 800c622:	f7ff f893 	bl	800b74c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c626:	4b22      	ldr	r3, [pc, #136]	@ (800c6b0 <prvAddNewTaskToReadyList+0xe4>)
 800c628:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c62c:	4b21      	ldr	r3, [pc, #132]	@ (800c6b4 <prvAddNewTaskToReadyList+0xe8>)
 800c62e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c630:	4a21      	ldr	r2, [pc, #132]	@ (800c6b8 <prvAddNewTaskToReadyList+0xec>)
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	3301      	adds	r3, #1
 800c636:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c638:	4a20      	ldr	r2, [pc, #128]	@ (800c6bc <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c63a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c63c:	6811      	ldr	r1, [r2, #0]
 800c63e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c640:	428b      	cmp	r3, r1
 800c642:	d900      	bls.n	800c646 <prvAddNewTaskToReadyList+0x7a>
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	2014      	movs	r0, #20
 800c648:	1d21      	adds	r1, r4, #4
 800c64a:	fb00 7003 	mla	r0, r0, r3, r7
 800c64e:	f7ff f88b 	bl	800b768 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c652:	f7ff f93f 	bl	800b8d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c656:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c0 <prvAddNewTaskToReadyList+0xf4>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b173      	cbz	r3, 800c67a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c65c:	6833      	ldr	r3, [r6, #0]
 800c65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c660:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c662:	429a      	cmp	r2, r3
 800c664:	d209      	bcs.n	800c67a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c666:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c66e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	f3bf 8f6f 	isb	sy
}
 800c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c67e:	4b10      	ldr	r3, [pc, #64]	@ (800c6c0 <prvAddNewTaskToReadyList+0xf4>)
 800c680:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c682:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c684:	2a00      	cmp	r2, #0
 800c686:	d1d3      	bne.n	800c630 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c688:	6832      	ldr	r2, [r6, #0]
 800c68a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d8cf      	bhi.n	800c630 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c690:	6034      	str	r4, [r6, #0]
 800c692:	e7cd      	b.n	800c630 <prvAddNewTaskToReadyList+0x64>
 800c694:	24027e94 	.word	0x24027e94
 800c698:	24028368 	.word	0x24028368
 800c69c:	24027f08 	.word	0x24027f08
 800c6a0:	24027ee0 	.word	0x24027ee0
 800c6a4:	24027ec4 	.word	0x24027ec4
 800c6a8:	24027eb0 	.word	0x24027eb0
 800c6ac:	24027e98 	.word	0x24027e98
 800c6b0:	24027edc 	.word	0x24027edc
 800c6b4:	24027ed8 	.word	0x24027ed8
 800c6b8:	24027e78 	.word	0x24027e78
 800c6bc:	24027e8c 	.word	0x24027e8c
 800c6c0:	24027e88 	.word	0x24027e88
 800c6c4:	24027ef4 	.word	0x24027ef4

0800c6c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6ca:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c6cc:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ce:	4d15      	ldr	r5, [pc, #84]	@ (800c724 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c6d0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c6d2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6d4:	6828      	ldr	r0, [r5, #0]
 800c6d6:	3004      	adds	r0, #4
 800c6d8:	f7ff f868 	bl	800b7ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6dc:	1c73      	adds	r3, r6, #1
 800c6de:	d107      	bne.n	800c6f0 <prvAddCurrentTaskToDelayedList+0x28>
 800c6e0:	b137      	cbz	r7, 800c6f0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e2:	6829      	ldr	r1, [r5, #0]
 800c6e4:	4810      	ldr	r0, [pc, #64]	@ (800c728 <prvAddCurrentTaskToDelayedList+0x60>)
 800c6e6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6ec:	f7ff b83c 	b.w	800b768 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c6f6:	d307      	bcc.n	800c708 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c72c <prvAddCurrentTaskToDelayedList+0x64>)
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	6829      	ldr	r1, [r5, #0]
}
 800c6fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c702:	3104      	adds	r1, #4
 800c704:	f7ff b83b 	b.w	800b77e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c708:	4b09      	ldr	r3, [pc, #36]	@ (800c730 <prvAddCurrentTaskToDelayedList+0x68>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	6829      	ldr	r1, [r5, #0]
 800c70e:	3104      	adds	r1, #4
 800c710:	f7ff f835 	bl	800b77e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c714:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	42a2      	cmp	r2, r4
 800c71a:	d900      	bls.n	800c71e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c71c:	601c      	str	r4, [r3, #0]
}
 800c71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c720:	24027e90 	.word	0x24027e90
 800c724:	24028368 	.word	0x24028368
 800c728:	24027e98 	.word	0x24027e98
 800c72c:	24027ed8 	.word	0x24027ed8
 800c730:	24027edc 	.word	0x24027edc
 800c734:	24027e74 	.word	0x24027e74

0800c738 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c738:	4a06      	ldr	r2, [pc, #24]	@ (800c754 <prvResetNextTaskUnblockTime+0x1c>)
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	6819      	ldr	r1, [r3, #0]
 800c73e:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <prvResetNextTaskUnblockTime+0x20>)
 800c740:	b919      	cbnz	r1, 800c74a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c742:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c746:	601a      	str	r2, [r3, #0]
}
 800c748:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74a:	6812      	ldr	r2, [r2, #0]
 800c74c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c74e:	68d2      	ldr	r2, [r2, #12]
 800c750:	6852      	ldr	r2, [r2, #4]
 800c752:	e7f8      	b.n	800c746 <prvResetNextTaskUnblockTime+0xe>
 800c754:	24027edc 	.word	0x24027edc
 800c758:	24027e74 	.word	0x24027e74

0800c75c <prvDeleteTCB>:
	{
 800c75c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c75e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c762:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c764:	b93b      	cbnz	r3, 800c776 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c766:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c768:	f7fe ffb2 	bl	800b6d0 <vPortFree>
				vPortFree( pxTCB );
 800c76c:	4620      	mov	r0, r4
	}
 800c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c772:	f7fe bfad 	b.w	800b6d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c776:	2b01      	cmp	r3, #1
 800c778:	d0f9      	beq.n	800c76e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d008      	beq.n	800c790 <prvDeleteTCB+0x34>
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	e7fe      	b.n	800c78e <prvDeleteTCB+0x32>
	}
 800c790:	bd10      	pop	{r4, pc}
	...

0800c794 <prvIdleTask>:
{
 800c794:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c796:	4c14      	ldr	r4, [pc, #80]	@ (800c7e8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c798:	4f14      	ldr	r7, [pc, #80]	@ (800c7ec <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c79a:	4d15      	ldr	r5, [pc, #84]	@ (800c7f0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	b983      	cbnz	r3, 800c7c2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7a0:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <prvIdleTask+0x60>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d909      	bls.n	800c7bc <prvIdleTask+0x28>
				taskYIELD();
 800c7a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c7bc:	f7f3 ff9c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c7c0:	e7eb      	b.n	800c79a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c7c2:	f7ff f867 	bl	800b894 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7ca:	1d30      	adds	r0, r6, #4
 800c7cc:	f7fe ffee 	bl	800b7ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c7dc:	f7ff f87a 	bl	800b8d4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff ffbb 	bl	800c75c <prvDeleteTCB>
 800c7e6:	e7d9      	b.n	800c79c <prvIdleTask+0x8>
 800c7e8:	24027eac 	.word	0x24027eac
 800c7ec:	24027eb0 	.word	0x24027eb0
 800c7f0:	24027e94 	.word	0x24027e94
 800c7f4:	24027f08 	.word	0x24027f08

0800c7f8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c7fc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c7fe:	4607      	mov	r7, r0
 800c800:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c802:	21a5      	movs	r1, #165	@ 0xa5
 800c804:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c806:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c808:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c80a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c80e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c810:	f016 f876 	bl	8022900 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c814:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c816:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c818:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c81c:	b3b5      	cbz	r5, 800c88c <prvInitialiseNewTask.constprop.0+0x94>
 800c81e:	1e6b      	subs	r3, r5, #1
 800c820:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c824:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c826:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c82a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c82e:	b109      	cbz	r1, 800c834 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c830:	42ab      	cmp	r3, r5
 800c832:	d1f8      	bne.n	800c826 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c834:	2300      	movs	r3, #0
 800c836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c83a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c83c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c840:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c842:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c844:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c848:	bf28      	it	cs
 800c84a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c84c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c84e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c850:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c854:	f7fe ff85 	bl	800b762 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c858:	f104 0018 	add.w	r0, r4, #24
 800c85c:	f7fe ff81 	bl	800b762 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c860:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c864:	4642      	mov	r2, r8
 800c866:	4639      	mov	r1, r7
 800c868:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c86a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c86c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c86e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c870:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c874:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c878:	f7fe ffe6 	bl	800b848 <pxPortInitialiseStack>
 800c87c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c87e:	f1b9 0f00 	cmp.w	r9, #0
 800c882:	d001      	beq.n	800c888 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c884:	f8c9 4000 	str.w	r4, [r9]
}
 800c888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c88c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c890:	e7d3      	b.n	800c83a <prvInitialiseNewTask.constprop.0+0x42>

0800c892 <xTaskCreateStatic>:
	{
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	b086      	sub	sp, #24
 800c896:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c89a:	b945      	cbnz	r5, 800c8ae <xTaskCreateStatic+0x1c>
 800c89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	e7fe      	b.n	800c8ac <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c8ae:	b944      	cbnz	r4, 800c8c2 <xTaskCreateStatic+0x30>
 800c8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	e7fe      	b.n	800c8c0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8c2:	2660      	movs	r6, #96	@ 0x60
 800c8c4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8c6:	9e05      	ldr	r6, [sp, #20]
 800c8c8:	2e60      	cmp	r6, #96	@ 0x60
 800c8ca:	d008      	beq.n	800c8de <xTaskCreateStatic+0x4c>
 800c8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	e7fe      	b.n	800c8dc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8de:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8e0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8e2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8e4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8e8:	ad04      	add	r5, sp, #16
 800c8ea:	9402      	str	r4, [sp, #8]
 800c8ec:	9501      	str	r5, [sp, #4]
 800c8ee:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c8f0:	9500      	str	r5, [sp, #0]
 800c8f2:	f7ff ff81 	bl	800c7f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7ff fe68 	bl	800c5cc <prvAddNewTaskToReadyList>
	}
 800c8fc:	9804      	ldr	r0, [sp, #16]
 800c8fe:	b006      	add	sp, #24
 800c900:	bd70      	pop	{r4, r5, r6, pc}

0800c902 <xTaskCreate>:
	{
 800c902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c906:	4607      	mov	r7, r0
 800c908:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c90a:	0090      	lsls	r0, r2, #2
	{
 800c90c:	4688      	mov	r8, r1
 800c90e:	4616      	mov	r6, r2
 800c910:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c912:	f7fe fe45 	bl	800b5a0 <pvPortMalloc>
			if( pxStack != NULL )
 800c916:	4605      	mov	r5, r0
 800c918:	b920      	cbnz	r0, 800c924 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c91a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c91e:	b005      	add	sp, #20
 800c920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c924:	2060      	movs	r0, #96	@ 0x60
 800c926:	f7fe fe3b 	bl	800b5a0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c92a:	4604      	mov	r4, r0
 800c92c:	b198      	cbz	r0, 800c956 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c92e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c930:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c932:	4632      	mov	r2, r6
 800c934:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c936:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c93a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c93c:	9002      	str	r0, [sp, #8]
 800c93e:	4638      	mov	r0, r7
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	464b      	mov	r3, r9
 800c948:	f7ff ff56 	bl	800c7f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c94c:	4620      	mov	r0, r4
 800c94e:	f7ff fe3d 	bl	800c5cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c952:	2001      	movs	r0, #1
 800c954:	e7e3      	b.n	800c91e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c956:	4628      	mov	r0, r5
 800c958:	f7fe feba 	bl	800b6d0 <vPortFree>
		if( pxNewTCB != NULL )
 800c95c:	e7dd      	b.n	800c91a <xTaskCreate+0x18>
	...

0800c960 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c960:	4a02      	ldr	r2, [pc, #8]	@ (800c96c <vTaskSuspendAll+0xc>)
 800c962:	6813      	ldr	r3, [r2, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	6013      	str	r3, [r2, #0]
}
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	24027e70 	.word	0x24027e70

0800c970 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c970:	4b01      	ldr	r3, [pc, #4]	@ (800c978 <xTaskGetTickCount+0x8>)
 800c972:	6818      	ldr	r0, [r3, #0]
}
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	24027e90 	.word	0x24027e90

0800c97c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c97c:	4b3f      	ldr	r3, [pc, #252]	@ (800ca7c <xTaskIncrementTick+0x100>)
 800c97e:	681b      	ldr	r3, [r3, #0]
{
 800c980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c984:	2b00      	cmp	r3, #0
 800c986:	d172      	bne.n	800ca6e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c988:	4b3d      	ldr	r3, [pc, #244]	@ (800ca80 <xTaskIncrementTick+0x104>)
 800c98a:	681c      	ldr	r4, [r3, #0]
 800c98c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c98e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c990:	b9bc      	cbnz	r4, 800c9c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c992:	4b3c      	ldr	r3, [pc, #240]	@ (800ca84 <xTaskIncrementTick+0x108>)
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	6812      	ldr	r2, [r2, #0]
 800c998:	b142      	cbz	r2, 800c9ac <xTaskIncrementTick+0x30>
 800c99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	e7fe      	b.n	800c9aa <xTaskIncrementTick+0x2e>
 800c9ac:	4a36      	ldr	r2, [pc, #216]	@ (800ca88 <xTaskIncrementTick+0x10c>)
 800c9ae:	6819      	ldr	r1, [r3, #0]
 800c9b0:	6810      	ldr	r0, [r2, #0]
 800c9b2:	6018      	str	r0, [r3, #0]
 800c9b4:	6011      	str	r1, [r2, #0]
 800c9b6:	4a35      	ldr	r2, [pc, #212]	@ (800ca8c <xTaskIncrementTick+0x110>)
 800c9b8:	6813      	ldr	r3, [r2, #0]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	f7ff febb 	bl	800c738 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9c2:	4d33      	ldr	r5, [pc, #204]	@ (800ca90 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c9c4:	f04f 0b00 	mov.w	fp, #0
 800c9c8:	4e32      	ldr	r6, [pc, #200]	@ (800ca94 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9ca:	682b      	ldr	r3, [r5, #0]
 800c9cc:	4f32      	ldr	r7, [pc, #200]	@ (800ca98 <xTaskIncrementTick+0x11c>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d212      	bcs.n	800c9f8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	2114      	movs	r1, #20
 800c9d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c9d8:	434a      	muls	r2, r1
 800c9da:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800c9dc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800c9de:	4a2f      	ldr	r2, [pc, #188]	@ (800ca9c <xTaskIncrementTick+0x120>)
 800c9e0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800c9e2:	bf28      	it	cs
 800c9e4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	bf18      	it	ne
 800c9ec:	f04f 0b01 	movne.w	fp, #1
}
 800c9f0:	4658      	mov	r0, fp
 800c9f2:	b003      	add	sp, #12
 800c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9f8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800ca84 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c9fc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800caa4 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca00:	f8d9 2000 	ldr.w	r2, [r9]
 800ca04:	6812      	ldr	r2, [r2, #0]
 800ca06:	b91a      	cbnz	r2, 800ca10 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca08:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0c:	602a      	str	r2, [r5, #0]
					break;
 800ca0e:	e7e0      	b.n	800c9d2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca10:	f8d9 2000 	ldr.w	r2, [r9]
 800ca14:	68d2      	ldr	r2, [r2, #12]
 800ca16:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800ca1e:	428c      	cmp	r4, r1
 800ca20:	d201      	bcs.n	800ca26 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800ca22:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca24:	e7d5      	b.n	800c9d2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca26:	f108 0304 	add.w	r3, r8, #4
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	f7fe febd 	bl	800b7ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca32:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800ca36:	b119      	cbz	r1, 800ca40 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca38:	f108 0018 	add.w	r0, r8, #24
 800ca3c:	f7fe feb6 	bl	800b7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca40:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800ca44:	f8da 1000 	ldr.w	r1, [sl]
 800ca48:	4288      	cmp	r0, r1
 800ca4a:	d901      	bls.n	800ca50 <xTaskIncrementTick+0xd4>
 800ca4c:	f8ca 0000 	str.w	r0, [sl]
 800ca50:	2314      	movs	r3, #20
 800ca52:	9901      	ldr	r1, [sp, #4]
 800ca54:	fb03 6000 	mla	r0, r3, r0, r6
 800ca58:	f7fe fe86 	bl	800b768 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca5c:	6838      	ldr	r0, [r7, #0]
 800ca5e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800ca62:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800ca64:	4291      	cmp	r1, r2
 800ca66:	bf28      	it	cs
 800ca68:	f04f 0b01 	movcs.w	fp, #1
 800ca6c:	e7c8      	b.n	800ca00 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800ca6e:	4a0c      	ldr	r2, [pc, #48]	@ (800caa0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800ca70:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800ca74:	6813      	ldr	r3, [r2, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	e7b9      	b.n	800c9f0 <xTaskIncrementTick+0x74>
 800ca7c:	24027e70 	.word	0x24027e70
 800ca80:	24027e90 	.word	0x24027e90
 800ca84:	24027edc 	.word	0x24027edc
 800ca88:	24027ed8 	.word	0x24027ed8
 800ca8c:	24027e7c 	.word	0x24027e7c
 800ca90:	24027e74 	.word	0x24027e74
 800ca94:	24027f08 	.word	0x24027f08
 800ca98:	24028368 	.word	0x24028368
 800ca9c:	24027e80 	.word	0x24027e80
 800caa0:	24027e84 	.word	0x24027e84
 800caa4:	24027e8c 	.word	0x24027e8c

0800caa8 <xTaskResumeAll>:
{
 800caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800caac:	4c30      	ldr	r4, [pc, #192]	@ (800cb70 <xTaskResumeAll+0xc8>)
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	b943      	cbnz	r3, 800cac4 <xTaskResumeAll+0x1c>
 800cab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	e7fe      	b.n	800cac2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800cac4:	f7fe fee6 	bl	800b894 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	3b01      	subs	r3, #1
 800cacc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cace:	6824      	ldr	r4, [r4, #0]
 800cad0:	b12c      	cbz	r4, 800cade <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800cad2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cad4:	f7fe fefe 	bl	800b8d4 <vPortExitCritical>
}
 800cad8:	4620      	mov	r0, r4
 800cada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cade:	4b25      	ldr	r3, [pc, #148]	@ (800cb74 <xTaskResumeAll+0xcc>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0f5      	beq.n	800cad2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cae6:	4d24      	ldr	r5, [pc, #144]	@ (800cb78 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800cae8:	4e24      	ldr	r6, [pc, #144]	@ (800cb7c <xTaskResumeAll+0xd4>)
 800caea:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800cb8c <xTaskResumeAll+0xe4>
 800caee:	e01d      	b.n	800cb2c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf0:	68eb      	ldr	r3, [r5, #12]
 800caf2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caf4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800caf6:	f104 0018 	add.w	r0, r4, #24
 800cafa:	f7fe fe57 	bl	800b7ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cafe:	4638      	mov	r0, r7
 800cb00:	f7fe fe54 	bl	800b7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb06:	6832      	ldr	r2, [r6, #0]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d900      	bls.n	800cb0e <xTaskResumeAll+0x66>
 800cb0c:	6033      	str	r3, [r6, #0]
 800cb0e:	2014      	movs	r0, #20
 800cb10:	4639      	mov	r1, r7
 800cb12:	fb00 8003 	mla	r0, r0, r3, r8
 800cb16:	f7fe fe27 	bl	800b768 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb1a:	4b19      	ldr	r3, [pc, #100]	@ (800cb80 <xTaskResumeAll+0xd8>)
 800cb1c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d302      	bcc.n	800cb2c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800cb26:	4b17      	ldr	r3, [pc, #92]	@ (800cb84 <xTaskResumeAll+0xdc>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1de      	bne.n	800caf0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800cb32:	b10c      	cbz	r4, 800cb38 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800cb34:	f7ff fe00 	bl	800c738 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb38:	4d13      	ldr	r5, [pc, #76]	@ (800cb88 <xTaskResumeAll+0xe0>)
 800cb3a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800cb3c:	b144      	cbz	r4, 800cb50 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800cb3e:	4e11      	ldr	r6, [pc, #68]	@ (800cb84 <xTaskResumeAll+0xdc>)
 800cb40:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800cb42:	f7ff ff1b 	bl	800c97c <xTaskIncrementTick>
 800cb46:	b100      	cbz	r0, 800cb4a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800cb48:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb4a:	3c01      	subs	r4, #1
 800cb4c:	d1f9      	bne.n	800cb42 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800cb4e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800cb50:	4b0c      	ldr	r3, [pc, #48]	@ (800cb84 <xTaskResumeAll+0xdc>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d0bc      	beq.n	800cad2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800cb58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cb6c:	2401      	movs	r4, #1
 800cb6e:	e7b1      	b.n	800cad4 <xTaskResumeAll+0x2c>
 800cb70:	24027e70 	.word	0x24027e70
 800cb74:	24027e94 	.word	0x24027e94
 800cb78:	24027ec4 	.word	0x24027ec4
 800cb7c:	24027e8c 	.word	0x24027e8c
 800cb80:	24028368 	.word	0x24028368
 800cb84:	24027e80 	.word	0x24027e80
 800cb88:	24027e84 	.word	0x24027e84
 800cb8c:	24027f08 	.word	0x24027f08

0800cb90 <vTaskSetApplicationTaskTag>:
	{
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cb94:	4604      	mov	r4, r0
 800cb96:	b908      	cbnz	r0, 800cb9c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cb98:	4b04      	ldr	r3, [pc, #16]	@ (800cbac <vTaskSetApplicationTaskTag+0x1c>)
 800cb9a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cb9c:	f7fe fe7a 	bl	800b894 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800cba0:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800cba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800cba6:	f7fe be95 	b.w	800b8d4 <vPortExitCritical>
 800cbaa:	bf00      	nop
 800cbac:	24028368 	.word	0x24028368

0800cbb0 <xTaskCallApplicationTaskHook>:
	{
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cbb4:	b90b      	cbnz	r3, 800cbba <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cbb6:	4b03      	ldr	r3, [pc, #12]	@ (800cbc4 <xTaskCallApplicationTaskHook+0x14>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cbba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbbc:	b103      	cbz	r3, 800cbc0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800cbbe:	4718      	bx	r3
	}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	4770      	bx	lr
 800cbc4:	24028368 	.word	0x24028368

0800cbc8 <vTaskStartScheduler>:
{
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbcc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbce:	aa07      	add	r2, sp, #28
 800cbd0:	a906      	add	r1, sp, #24
 800cbd2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbd4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbd8:	f7fe fca4 	bl	800b524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	9a07      	ldr	r2, [sp, #28]
 800cbe0:	9302      	str	r3, [sp, #8]
 800cbe2:	9b06      	ldr	r3, [sp, #24]
 800cbe4:	4919      	ldr	r1, [pc, #100]	@ (800cc4c <vTaskStartScheduler+0x84>)
 800cbe6:	481a      	ldr	r0, [pc, #104]	@ (800cc50 <vTaskStartScheduler+0x88>)
 800cbe8:	e9cd 4300 	strd	r4, r3, [sp]
 800cbec:	4623      	mov	r3, r4
 800cbee:	f7ff fe50 	bl	800c892 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cbf2:	b340      	cbz	r0, 800cc46 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800cbf4:	f000 fa84 	bl	800d100 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cbf8:	2801      	cmp	r0, #1
 800cbfa:	d119      	bne.n	800cc30 <vTaskStartScheduler+0x68>
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc10:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800cc12:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc16:	4b10      	ldr	r3, [pc, #64]	@ (800cc58 <vTaskStartScheduler+0x90>)
 800cc18:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc1a:	4b10      	ldr	r3, [pc, #64]	@ (800cc5c <vTaskStartScheduler+0x94>)
 800cc1c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cc1e:	4b10      	ldr	r3, [pc, #64]	@ (800cc60 <vTaskStartScheduler+0x98>)
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f7ff ffc5 	bl	800cbb0 <xTaskCallApplicationTaskHook>
}
 800cc26:	b008      	add	sp, #32
 800cc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cc2c:	f7fe bec2 	b.w	800b9b4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc30:	3001      	adds	r0, #1
 800cc32:	d108      	bne.n	800cc46 <vTaskStartScheduler+0x7e>
 800cc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	e7fe      	b.n	800cc44 <vTaskStartScheduler+0x7c>
}
 800cc46:	b008      	add	sp, #32
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	08025c00 	.word	0x08025c00
 800cc50:	0800c795 	.word	0x0800c795
 800cc54:	24027e74 	.word	0x24027e74
 800cc58:	24027e88 	.word	0x24027e88
 800cc5c:	24027e90 	.word	0x24027e90
 800cc60:	24028368 	.word	0x24028368

0800cc64 <vTaskSwitchContext>:
{
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc66:	4b1c      	ldr	r3, [pc, #112]	@ (800ccd8 <vTaskSwitchContext+0x74>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b1c      	ldr	r3, [pc, #112]	@ (800ccdc <vTaskSwitchContext+0x78>)
 800cc6c:	b112      	cbz	r2, 800cc74 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800cc6e:	2201      	movs	r2, #1
 800cc70:	601a      	str	r2, [r3, #0]
}
 800cc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800cc74:	4c1a      	ldr	r4, [pc, #104]	@ (800cce0 <vTaskSwitchContext+0x7c>)
 800cc76:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4e1a      	ldr	r6, [pc, #104]	@ (800cce4 <vTaskSwitchContext+0x80>)
 800cc7a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800cc7c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800cc7e:	6820      	ldr	r0, [r4, #0]
 800cc80:	f7ff ff96 	bl	800cbb0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc84:	6832      	ldr	r2, [r6, #0]
 800cc86:	4918      	ldr	r1, [pc, #96]	@ (800cce8 <vTaskSwitchContext+0x84>)
 800cc88:	fb07 f302 	mul.w	r3, r7, r2
 800cc8c:	58cd      	ldr	r5, [r1, r3]
 800cc8e:	18c8      	adds	r0, r1, r3
 800cc90:	b1ad      	cbz	r5, 800ccbe <vTaskSwitchContext+0x5a>
 800cc92:	6845      	ldr	r5, [r0, #4]
 800cc94:	3308      	adds	r3, #8
 800cc96:	686d      	ldr	r5, [r5, #4]
 800cc98:	440b      	add	r3, r1
 800cc9a:	429d      	cmp	r5, r3
 800cc9c:	6045      	str	r5, [r0, #4]
 800cc9e:	bf04      	itt	eq
 800cca0:	686b      	ldreq	r3, [r5, #4]
 800cca2:	6043      	streq	r3, [r0, #4]
 800cca4:	2314      	movs	r3, #20
 800cca6:	fb03 1102 	mla	r1, r3, r2, r1
 800ccaa:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ccac:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ccb4:	6820      	ldr	r0, [r4, #0]
}
 800ccb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800ccba:	f7ff bf79 	b.w	800cbb0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccbe:	b942      	cbnz	r2, 800ccd2 <vTaskSwitchContext+0x6e>
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	e7fe      	b.n	800ccd0 <vTaskSwitchContext+0x6c>
 800ccd2:	3a01      	subs	r2, #1
 800ccd4:	e7d8      	b.n	800cc88 <vTaskSwitchContext+0x24>
 800ccd6:	bf00      	nop
 800ccd8:	24027e70 	.word	0x24027e70
 800ccdc:	24027e80 	.word	0x24027e80
 800cce0:	24028368 	.word	0x24028368
 800cce4:	24027e8c 	.word	0x24027e8c
 800cce8:	24027f08 	.word	0x24027f08

0800ccec <vTaskPlaceOnEventList>:
{
 800ccec:	b510      	push	{r4, lr}
 800ccee:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ccf0:	b940      	cbnz	r0, 800cd04 <vTaskPlaceOnEventList+0x18>
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	e7fe      	b.n	800cd02 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd04:	4b05      	ldr	r3, [pc, #20]	@ (800cd1c <vTaskPlaceOnEventList+0x30>)
 800cd06:	6819      	ldr	r1, [r3, #0]
 800cd08:	3118      	adds	r1, #24
 800cd0a:	f7fe fd38 	bl	800b77e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd0e:	4620      	mov	r0, r4
 800cd10:	2101      	movs	r1, #1
}
 800cd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd16:	f7ff bcd7 	b.w	800c6c8 <prvAddCurrentTaskToDelayedList>
 800cd1a:	bf00      	nop
 800cd1c:	24028368 	.word	0x24028368

0800cd20 <vTaskPlaceOnEventListRestricted>:
	{
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	460d      	mov	r5, r1
 800cd24:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cd26:	b940      	cbnz	r0, 800cd3a <vTaskPlaceOnEventListRestricted+0x1a>
 800cd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	e7fe      	b.n	800cd38 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd3a:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <vTaskPlaceOnEventListRestricted+0x38>)
 800cd3c:	6819      	ldr	r1, [r3, #0]
 800cd3e:	3118      	adds	r1, #24
 800cd40:	f7fe fd12 	bl	800b768 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cd44:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd46:	4621      	mov	r1, r4
 800cd48:	bf0c      	ite	eq
 800cd4a:	4628      	moveq	r0, r5
 800cd4c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd54:	f7ff bcb8 	b.w	800c6c8 <prvAddCurrentTaskToDelayedList>
 800cd58:	24028368 	.word	0x24028368

0800cd5c <xTaskRemoveFromEventList>:
{
 800cd5c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd5e:	68c3      	ldr	r3, [r0, #12]
 800cd60:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cd62:	b944      	cbnz	r4, 800cd76 <xTaskRemoveFromEventList+0x1a>
 800cd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	e7fe      	b.n	800cd74 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd76:	f104 0518 	add.w	r5, r4, #24
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f7fe fd16 	bl	800b7ac <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd80:	4b11      	ldr	r3, [pc, #68]	@ (800cdc8 <xTaskRemoveFromEventList+0x6c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	b9d3      	cbnz	r3, 800cdbc <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd86:	1d25      	adds	r5, r4, #4
 800cd88:	4628      	mov	r0, r5
 800cd8a:	f7fe fd0f 	bl	800b7ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd8e:	4a0f      	ldr	r2, [pc, #60]	@ (800cdcc <xTaskRemoveFromEventList+0x70>)
 800cd90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd92:	6811      	ldr	r1, [r2, #0]
 800cd94:	428b      	cmp	r3, r1
 800cd96:	d900      	bls.n	800cd9a <xTaskRemoveFromEventList+0x3e>
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	2014      	movs	r0, #20
 800cd9c:	4a0c      	ldr	r2, [pc, #48]	@ (800cdd0 <xTaskRemoveFromEventList+0x74>)
 800cd9e:	4629      	mov	r1, r5
 800cda0:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cda4:	f7fe fce0 	bl	800b768 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cda8:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd4 <xTaskRemoveFromEventList+0x78>)
 800cdaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d906      	bls.n	800cdc2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	4b08      	ldr	r3, [pc, #32]	@ (800cdd8 <xTaskRemoveFromEventList+0x7c>)
 800cdb8:	6018      	str	r0, [r3, #0]
}
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	4807      	ldr	r0, [pc, #28]	@ (800cddc <xTaskRemoveFromEventList+0x80>)
 800cdc0:	e7f0      	b.n	800cda4 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800cdc2:	2000      	movs	r0, #0
	return xReturn;
 800cdc4:	e7f9      	b.n	800cdba <xTaskRemoveFromEventList+0x5e>
 800cdc6:	bf00      	nop
 800cdc8:	24027e70 	.word	0x24027e70
 800cdcc:	24027e8c 	.word	0x24027e8c
 800cdd0:	24027f08 	.word	0x24027f08
 800cdd4:	24028368 	.word	0x24028368
 800cdd8:	24027e80 	.word	0x24027e80
 800cddc:	24027ec4 	.word	0x24027ec4

0800cde0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cde0:	4b03      	ldr	r3, [pc, #12]	@ (800cdf0 <vTaskInternalSetTimeOutState+0x10>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cde6:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <vTaskInternalSetTimeOutState+0x14>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6043      	str	r3, [r0, #4]
}
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	24027e7c 	.word	0x24027e7c
 800cdf4:	24027e90 	.word	0x24027e90

0800cdf8 <xTaskCheckForTimeOut>:
{
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	b940      	cbnz	r0, 800ce12 <xTaskCheckForTimeOut+0x1a>
 800ce00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	e7fe      	b.n	800ce10 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ce12:	b941      	cbnz	r1, 800ce26 <xTaskCheckForTimeOut+0x2e>
 800ce14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	e7fe      	b.n	800ce24 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ce26:	f7fe fd35 	bl	800b894 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce68 <xTaskCheckForTimeOut+0x70>)
 800ce2c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	d010      	beq.n	800ce56 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce34:	480d      	ldr	r0, [pc, #52]	@ (800ce6c <xTaskCheckForTimeOut+0x74>)
 800ce36:	682e      	ldr	r6, [r5, #0]
 800ce38:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce3a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce3c:	4286      	cmp	r6, r0
 800ce3e:	d001      	beq.n	800ce44 <xTaskCheckForTimeOut+0x4c>
 800ce40:	428a      	cmp	r2, r1
 800ce42:	d90f      	bls.n	800ce64 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce44:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce46:	4283      	cmp	r3, r0
 800ce48:	d90a      	bls.n	800ce60 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ce4a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce4c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ce4e:	4413      	add	r3, r2
 800ce50:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce52:	f7ff ffc5 	bl	800cde0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ce56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ce58:	f7fe fd3c 	bl	800b8d4 <vPortExitCritical>
}
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ce64:	2401      	movs	r4, #1
 800ce66:	e7f7      	b.n	800ce58 <xTaskCheckForTimeOut+0x60>
 800ce68:	24027e90 	.word	0x24027e90
 800ce6c:	24027e7c 	.word	0x24027e7c

0800ce70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ce70:	4b01      	ldr	r3, [pc, #4]	@ (800ce78 <vTaskMissedYield+0x8>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
}
 800ce76:	4770      	bx	lr
 800ce78:	24027e80 	.word	0x24027e80

0800ce7c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ce7c:	4b01      	ldr	r3, [pc, #4]	@ (800ce84 <xTaskGetCurrentTaskHandle+0x8>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
	}
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	24028368 	.word	0x24028368

0800ce88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ce88:	4b05      	ldr	r3, [pc, #20]	@ (800cea0 <xTaskGetSchedulerState+0x18>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	b133      	cbz	r3, 800ce9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8e:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <xTaskGetSchedulerState+0x1c>)
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	fab0 f080 	clz	r0, r0
 800ce96:	0940      	lsrs	r0, r0, #5
 800ce98:	0040      	lsls	r0, r0, #1
 800ce9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce9c:	2001      	movs	r0, #1
	}
 800ce9e:	4770      	bx	lr
 800cea0:	24027e88 	.word	0x24027e88
 800cea4:	24027e70 	.word	0x24027e70

0800cea8 <xTaskPriorityInherit>:
	{
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ceaa:	4604      	mov	r4, r0
 800ceac:	b338      	cbz	r0, 800cefe <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ceae:	4d1a      	ldr	r5, [pc, #104]	@ (800cf18 <xTaskPriorityInherit+0x70>)
 800ceb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ceb2:	682a      	ldr	r2, [r5, #0]
 800ceb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d226      	bcs.n	800cf08 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ceba:	6982      	ldr	r2, [r0, #24]
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	db04      	blt.n	800ceca <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec0:	682a      	ldr	r2, [r5, #0]
 800cec2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cec4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cec8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ceca:	2214      	movs	r2, #20
 800cecc:	4e13      	ldr	r6, [pc, #76]	@ (800cf1c <xTaskPriorityInherit+0x74>)
 800cece:	fb02 6303 	mla	r3, r2, r3, r6
 800ced2:	6962      	ldr	r2, [r4, #20]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d113      	bne.n	800cf00 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ced8:	1d27      	adds	r7, r4, #4
 800ceda:	4638      	mov	r0, r7
 800cedc:	f7fe fc66 	bl	800b7ac <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cee0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cee2:	4a0f      	ldr	r2, [pc, #60]	@ (800cf20 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cee6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ceea:	428b      	cmp	r3, r1
 800ceec:	d900      	bls.n	800cef0 <xTaskPriorityInherit+0x48>
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	2014      	movs	r0, #20
 800cef2:	4639      	mov	r1, r7
 800cef4:	fb00 6003 	mla	r0, r0, r3, r6
 800cef8:	f7fe fc36 	bl	800b768 <vListInsertEnd>
				xReturn = pdTRUE;
 800cefc:	2001      	movs	r0, #1
	}
 800cefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf06:	e7f9      	b.n	800cefc <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800cf0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0e:	4298      	cmp	r0, r3
 800cf10:	bf2c      	ite	cs
 800cf12:	2000      	movcs	r0, #0
 800cf14:	2001      	movcc	r0, #1
 800cf16:	e7f2      	b.n	800cefe <xTaskPriorityInherit+0x56>
 800cf18:	24028368 	.word	0x24028368
 800cf1c:	24027f08 	.word	0x24027f08
 800cf20:	24027e8c 	.word	0x24027e8c

0800cf24 <xTaskPriorityDisinherit>:
	{
 800cf24:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cf26:	b908      	cbnz	r0, 800cf2c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800cf28:	2000      	movs	r0, #0
	}
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800cf2c:	4b1b      	ldr	r3, [pc, #108]	@ (800cf9c <xTaskPriorityDisinherit+0x78>)
 800cf2e:	681c      	ldr	r4, [r3, #0]
 800cf30:	4284      	cmp	r4, r0
 800cf32:	d008      	beq.n	800cf46 <xTaskPriorityDisinherit+0x22>
 800cf34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	e7fe      	b.n	800cf44 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cf48:	b943      	cbnz	r3, 800cf5c <xTaskPriorityDisinherit+0x38>
 800cf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	e7fe      	b.n	800cf5a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cf5e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf60:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cf62:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf64:	4291      	cmp	r1, r2
 800cf66:	d0df      	beq.n	800cf28 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1dd      	bne.n	800cf28 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf6c:	1d25      	adds	r5, r4, #4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7fe fc1c 	bl	800b7ac <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf7e:	4a08      	ldr	r2, [pc, #32]	@ (800cfa0 <xTaskPriorityDisinherit+0x7c>)
 800cf80:	6811      	ldr	r1, [r2, #0]
 800cf82:	428b      	cmp	r3, r1
 800cf84:	d900      	bls.n	800cf88 <xTaskPriorityDisinherit+0x64>
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	4a06      	ldr	r2, [pc, #24]	@ (800cfa4 <xTaskPriorityDisinherit+0x80>)
 800cf8a:	2014      	movs	r0, #20
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	fb00 2003 	mla	r0, r0, r3, r2
 800cf92:	f7fe fbe9 	bl	800b768 <vListInsertEnd>
					xReturn = pdTRUE;
 800cf96:	2001      	movs	r0, #1
		return xReturn;
 800cf98:	e7c7      	b.n	800cf2a <xTaskPriorityDisinherit+0x6>
 800cf9a:	bf00      	nop
 800cf9c:	24028368 	.word	0x24028368
 800cfa0:	24027e8c 	.word	0x24027e8c
 800cfa4:	24027f08 	.word	0x24027f08

0800cfa8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cfa8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cfaa:	4604      	mov	r4, r0
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d042      	beq.n	800d036 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfb0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cfb2:	b942      	cbnz	r2, 800cfc6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	e7fe      	b.n	800cfc4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cfc6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	bf38      	it	cc
 800cfcc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cfce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cfd0:	428b      	cmp	r3, r1
 800cfd2:	d030      	beq.n	800d036 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cfd4:	2a01      	cmp	r2, #1
 800cfd6:	d12e      	bne.n	800d036 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800cfd8:	4a17      	ldr	r2, [pc, #92]	@ (800d038 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800cfda:	6812      	ldr	r2, [r2, #0]
 800cfdc:	4282      	cmp	r2, r0
 800cfde:	d108      	bne.n	800cff2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	e7fe      	b.n	800cff0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cff2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cff4:	4d11      	ldr	r5, [pc, #68]	@ (800d03c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cff6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cff8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cffc:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cffe:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d002:	bfa8      	it	ge
 800d004:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d008:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d00a:	bfa8      	it	ge
 800d00c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d00e:	429a      	cmp	r2, r3
 800d010:	d111      	bne.n	800d036 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d012:	1d06      	adds	r6, r0, #4
 800d014:	4630      	mov	r0, r6
 800d016:	f7fe fbc9 	bl	800b7ac <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d01a:	4a09      	ldr	r2, [pc, #36]	@ (800d040 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d01c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d01e:	6811      	ldr	r1, [r2, #0]
 800d020:	428b      	cmp	r3, r1
 800d022:	d900      	bls.n	800d026 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	2014      	movs	r0, #20
 800d028:	4631      	mov	r1, r6
 800d02a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800d032:	f7fe bb99 	b.w	800b768 <vListInsertEnd>
	}
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	24028368 	.word	0x24028368
 800d03c:	24027f08 	.word	0x24027f08
 800d040:	24027e8c 	.word	0x24027e8c

0800d044 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d044:	4b04      	ldr	r3, [pc, #16]	@ (800d058 <pvTaskIncrementMutexHeldCount+0x14>)
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	b11a      	cbz	r2, 800d052 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d04a:	6819      	ldr	r1, [r3, #0]
 800d04c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800d04e:	3201      	adds	r2, #1
 800d050:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800d052:	6818      	ldr	r0, [r3, #0]
	}
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	24028368 	.word	0x24028368

0800d05c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800d05c:	4291      	cmp	r1, r2
{
 800d05e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d060:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d062:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d064:	d80a      	bhi.n	800d07c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	6983      	ldr	r3, [r0, #24]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d20d      	bcs.n	800d08a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d06e:	1d01      	adds	r1, r0, #4
 800d070:	4b07      	ldr	r3, [pc, #28]	@ (800d090 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d072:	6818      	ldr	r0, [r3, #0]
 800d074:	f7fe fb83 	bl	800b77e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d078:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800d07a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d201      	bcs.n	800d084 <prvInsertTimerInActiveList+0x28>
 800d080:	4299      	cmp	r1, r3
 800d082:	d202      	bcs.n	800d08a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d084:	1d01      	adds	r1, r0, #4
 800d086:	4b03      	ldr	r3, [pc, #12]	@ (800d094 <prvInsertTimerInActiveList+0x38>)
 800d088:	e7f3      	b.n	800d072 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d08a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d08c:	e7f5      	b.n	800d07a <prvInsertTimerInActiveList+0x1e>
 800d08e:	bf00      	nop
 800d090:	24028468 	.word	0x24028468
 800d094:	2402846c 	.word	0x2402846c

0800d098 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d09a:	4c11      	ldr	r4, [pc, #68]	@ (800d0e0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d09c:	f7fe fbfa 	bl	800b894 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d0a0:	6825      	ldr	r5, [r4, #0]
 800d0a2:	b9bd      	cbnz	r5, 800d0d4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d0a4:	4f0f      	ldr	r7, [pc, #60]	@ (800d0e4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d0a6:	4e10      	ldr	r6, [pc, #64]	@ (800d0e8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7fe fb4f 	bl	800b74c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f7fe fb4c 	bl	800b74c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ec <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0b6:	4a0e      	ldr	r2, [pc, #56]	@ (800d0f0 <prvCheckForValidListAndQueue+0x58>)
 800d0b8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d0ba:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0bc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d0be:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f4 <prvCheckForValidListAndQueue+0x5c>)
 800d0c0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f8 <prvCheckForValidListAndQueue+0x60>)
 800d0c4:	9500      	str	r5, [sp, #0]
 800d0c6:	f7fe fdef 	bl	800bca8 <xQueueGenericCreateStatic>
 800d0ca:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0cc:	b110      	cbz	r0, 800d0d4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0ce:	490b      	ldr	r1, [pc, #44]	@ (800d0fc <prvCheckForValidListAndQueue+0x64>)
 800d0d0:	f7ff fa1a 	bl	800c508 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d0d4:	b003      	add	sp, #12
 800d0d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d0da:	f7fe bbfb 	b.w	800b8d4 <vPortExitCritical>
 800d0de:	bf00      	nop
 800d0e0:	24028464 	.word	0x24028464
 800d0e4:	24028484 	.word	0x24028484
 800d0e8:	24028470 	.word	0x24028470
 800d0ec:	2402846c 	.word	0x2402846c
 800d0f0:	240283bc 	.word	0x240283bc
 800d0f4:	24028468 	.word	0x24028468
 800d0f8:	2402836c 	.word	0x2402836c
 800d0fc:	08025c05 	.word	0x08025c05

0800d100 <xTimerCreateTimerTask>:
{
 800d100:	b510      	push	{r4, lr}
 800d102:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d104:	f7ff ffc8 	bl	800d098 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d108:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <xTimerCreateTimerTask+0x54>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	b1b3      	cbz	r3, 800d13c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d10e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d110:	aa07      	add	r2, sp, #28
 800d112:	a906      	add	r1, sp, #24
 800d114:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d116:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d11a:	f7fe fa0f 	bl	800b53c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d11e:	9b05      	ldr	r3, [sp, #20]
 800d120:	9a07      	ldr	r2, [sp, #28]
 800d122:	9302      	str	r3, [sp, #8]
 800d124:	9b06      	ldr	r3, [sp, #24]
 800d126:	490c      	ldr	r1, [pc, #48]	@ (800d158 <xTimerCreateTimerTask+0x58>)
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	2302      	movs	r3, #2
 800d12c:	480b      	ldr	r0, [pc, #44]	@ (800d15c <xTimerCreateTimerTask+0x5c>)
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	4623      	mov	r3, r4
 800d132:	f7ff fbae 	bl	800c892 <xTaskCreateStatic>
 800d136:	4b0a      	ldr	r3, [pc, #40]	@ (800d160 <xTimerCreateTimerTask+0x60>)
 800d138:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d13a:	b940      	cbnz	r0, 800d14e <xTimerCreateTimerTask+0x4e>
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d14c:	e7fe      	b.n	800d14c <xTimerCreateTimerTask+0x4c>
}
 800d14e:	2001      	movs	r0, #1
 800d150:	b008      	add	sp, #32
 800d152:	bd10      	pop	{r4, pc}
 800d154:	24028464 	.word	0x24028464
 800d158:	08025c0a 	.word	0x08025c0a
 800d15c:	0800d25d 	.word	0x0800d25d
 800d160:	24028460 	.word	0x24028460

0800d164 <xTimerGenericCommand>:
{
 800d164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d166:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d168:	4604      	mov	r4, r0
{
 800d16a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d16c:	b940      	cbnz	r0, 800d180 <xTimerGenericCommand+0x1c>
 800d16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	e7fe      	b.n	800d17e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800d180:	4d0c      	ldr	r5, [pc, #48]	@ (800d1b4 <xTimerGenericCommand+0x50>)
 800d182:	6828      	ldr	r0, [r5, #0]
 800d184:	b178      	cbz	r0, 800d1a6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d186:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d188:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d18a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d18e:	dc0c      	bgt.n	800d1aa <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d190:	f7ff fe7a 	bl	800ce88 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d194:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d196:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d198:	4669      	mov	r1, sp
 800d19a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d19c:	bf0c      	ite	eq
 800d19e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1a0:	461a      	movne	r2, r3
 800d1a2:	f7fe fe36 	bl	800be12 <xQueueGenericSend>
}
 800d1a6:	b004      	add	sp, #16
 800d1a8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	4669      	mov	r1, sp
 800d1ae:	f7fe ff33 	bl	800c018 <xQueueGenericSendFromISR>
 800d1b2:	e7f8      	b.n	800d1a6 <xTimerGenericCommand+0x42>
 800d1b4:	24028464 	.word	0x24028464

0800d1b8 <prvSampleTimeNow>:
{
 800d1b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d1bc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d258 <prvSampleTimeNow+0xa0>
{
 800d1c0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d1c2:	f7ff fbd5 	bl	800c970 <xTaskGetTickCount>
 800d1c6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d1cc:	4283      	cmp	r3, r0
 800d1ce:	d909      	bls.n	800d1e4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1d0:	4f1f      	ldr	r7, [pc, #124]	@ (800d250 <prvSampleTimeNow+0x98>)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	b96a      	cbnz	r2, 800d1f4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d1d8:	4a1e      	ldr	r2, [pc, #120]	@ (800d254 <prvSampleTimeNow+0x9c>)
 800d1da:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d1e0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d1e2:	e000      	b.n	800d1e6 <prvSampleTimeNow+0x2e>
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800d1e8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d1ea:	f8c8 5000 	str.w	r5, [r8]
}
 800d1ee:	b002      	add	sp, #8
 800d1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1f4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1f8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1fc:	f104 0a04 	add.w	sl, r4, #4
 800d200:	4650      	mov	r0, sl
 800d202:	f7fe fad3 	bl	800b7ac <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d206:	6a23      	ldr	r3, [r4, #32]
 800d208:	4620      	mov	r0, r4
 800d20a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d20c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d210:	075b      	lsls	r3, r3, #29
 800d212:	d5de      	bpl.n	800d1d2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d214:	69a3      	ldr	r3, [r4, #24]
 800d216:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800d218:	4599      	cmp	r9, r3
 800d21a:	d206      	bcs.n	800d22a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d21c:	4651      	mov	r1, sl
 800d21e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d220:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d222:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d224:	f7fe faab 	bl	800b77e <vListInsert>
 800d228:	e7d3      	b.n	800d1d2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d22a:	2300      	movs	r3, #0
 800d22c:	464a      	mov	r2, r9
 800d22e:	4620      	mov	r0, r4
 800d230:	4619      	mov	r1, r3
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	f7ff ff96 	bl	800d164 <xTimerGenericCommand>
				configASSERT( xResult );
 800d238:	2800      	cmp	r0, #0
 800d23a:	d1ca      	bne.n	800d1d2 <prvSampleTimeNow+0x1a>
 800d23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	e7fe      	b.n	800d24c <prvSampleTimeNow+0x94>
 800d24e:	bf00      	nop
 800d250:	2402846c 	.word	0x2402846c
 800d254:	24028468 	.word	0x24028468
 800d258:	2402845c 	.word	0x2402845c

0800d25c <prvTimerTask>:
{
 800d25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d260:	4d6e      	ldr	r5, [pc, #440]	@ (800d41c <prvTimerTask+0x1c0>)
{
 800d262:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d264:	4e6e      	ldr	r6, [pc, #440]	@ (800d420 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d266:	682b      	ldr	r3, [r5, #0]
 800d268:	f8d3 8000 	ldr.w	r8, [r3]
 800d26c:	f1b8 0f00 	cmp.w	r8, #0
 800d270:	d035      	beq.n	800d2de <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d272:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d274:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d276:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d27a:	f7ff fb71 	bl	800c960 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d27e:	a804      	add	r0, sp, #16
 800d280:	f7ff ff9a 	bl	800d1b8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d284:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d286:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d169      	bne.n	800d360 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d28c:	2c00      	cmp	r4, #0
 800d28e:	d14c      	bne.n	800d32a <prvTimerTask+0xce>
 800d290:	4540      	cmp	r0, r8
 800d292:	d350      	bcc.n	800d336 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d294:	f7ff fc08 	bl	800caa8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d29e:	1d38      	adds	r0, r7, #4
 800d2a0:	f7fe fa84 	bl	800b7ac <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d2a8:	0758      	lsls	r0, r3, #29
 800d2aa:	d51a      	bpl.n	800d2e2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2ac:	69b9      	ldr	r1, [r7, #24]
 800d2ae:	4643      	mov	r3, r8
 800d2b0:	464a      	mov	r2, r9
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	4441      	add	r1, r8
 800d2b6:	f7ff fed1 	bl	800d05c <prvInsertTimerInActiveList>
 800d2ba:	b1b0      	cbz	r0, 800d2ea <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2bc:	4623      	mov	r3, r4
 800d2be:	4642      	mov	r2, r8
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	9400      	str	r4, [sp, #0]
 800d2c6:	f7ff ff4d 	bl	800d164 <xTimerGenericCommand>
			configASSERT( xResult );
 800d2ca:	b970      	cbnz	r0, 800d2ea <prvTimerTask+0x8e>
 800d2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	e7fe      	b.n	800d2dc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2de:	2401      	movs	r4, #1
 800d2e0:	e7cb      	b.n	800d27a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2e2:	f023 0301 	bic.w	r3, r3, #1
 800d2e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	a904      	add	r1, sp, #16
 800d2f4:	6830      	ldr	r0, [r6, #0]
 800d2f6:	f7fe ff3d 	bl	800c174 <xQueueReceive>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d0b3      	beq.n	800d266 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2fe:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d300:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d302:	2b00      	cmp	r3, #0
 800d304:	db2f      	blt.n	800d366 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d306:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d308:	6963      	ldr	r3, [r4, #20]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d132      	bne.n	800d374 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d30e:	a803      	add	r0, sp, #12
 800d310:	f7ff ff52 	bl	800d1b8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d314:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d316:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d318:	2b09      	cmp	r3, #9
 800d31a:	d8e9      	bhi.n	800d2f0 <prvTimerTask+0x94>
 800d31c:	e8df f003 	tbb	[pc, r3]
 800d320:	572e2e2e 	.word	0x572e2e2e
 800d324:	2e2e765e 	.word	0x2e2e765e
 800d328:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d32a:	4b3e      	ldr	r3, [pc, #248]	@ (800d424 <prvTimerTask+0x1c8>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681c      	ldr	r4, [r3, #0]
 800d330:	fab4 f484 	clz	r4, r4
 800d334:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d336:	4622      	mov	r2, r4
 800d338:	eba8 0109 	sub.w	r1, r8, r9
 800d33c:	6830      	ldr	r0, [r6, #0]
 800d33e:	f7ff f922 	bl	800c586 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d342:	f7ff fbb1 	bl	800caa8 <xTaskResumeAll>
 800d346:	2800      	cmp	r0, #0
 800d348:	d1d2      	bne.n	800d2f0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d34a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d352:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	e7c7      	b.n	800d2f0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d360:	f7ff fba2 	bl	800caa8 <xTaskResumeAll>
}
 800d364:	e7c4      	b.n	800d2f0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d366:	9b05      	ldr	r3, [sp, #20]
 800d368:	9907      	ldr	r1, [sp, #28]
 800d36a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	dbbe      	blt.n	800d2f0 <prvTimerTask+0x94>
 800d372:	e7c8      	b.n	800d306 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d374:	1d20      	adds	r0, r4, #4
 800d376:	f7fe fa19 	bl	800b7ac <uxListRemove>
 800d37a:	e7c8      	b.n	800d30e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d37c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d380:	4620      	mov	r0, r4
 800d382:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d384:	f043 0301 	orr.w	r3, r3, #1
 800d388:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d38c:	9b05      	ldr	r3, [sp, #20]
 800d38e:	4419      	add	r1, r3
 800d390:	f7ff fe64 	bl	800d05c <prvInsertTimerInActiveList>
 800d394:	2800      	cmp	r0, #0
 800d396:	d0ab      	beq.n	800d2f0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d398:	6a23      	ldr	r3, [r4, #32]
 800d39a:	4620      	mov	r0, r4
 800d39c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d39e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d3a2:	0759      	lsls	r1, r3, #29
 800d3a4:	d5a4      	bpl.n	800d2f0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d3a6:	69a2      	ldr	r2, [r4, #24]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9905      	ldr	r1, [sp, #20]
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	440a      	add	r2, r1
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	f7ff fed6 	bl	800d164 <xTimerGenericCommand>
							configASSERT( xResult );
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d199      	bne.n	800d2f0 <prvTimerTask+0x94>
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	e7fe      	b.n	800d3cc <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3ce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3d2:	f023 0301 	bic.w	r3, r3, #1
 800d3d6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d3da:	e789      	b.n	800d2f0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3dc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d3e0:	f043 0301 	orr.w	r3, r3, #1
 800d3e4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3e8:	9905      	ldr	r1, [sp, #20]
 800d3ea:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3ec:	b941      	cbnz	r1, 800d400 <prvTimerTask+0x1a4>
 800d3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	e7fe      	b.n	800d3fe <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d400:	4603      	mov	r3, r0
 800d402:	4401      	add	r1, r0
 800d404:	4620      	mov	r0, r4
 800d406:	f7ff fe29 	bl	800d05c <prvInsertTimerInActiveList>
					break;
 800d40a:	e771      	b.n	800d2f0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d40c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d410:	079a      	lsls	r2, r3, #30
 800d412:	d4de      	bmi.n	800d3d2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d414:	4620      	mov	r0, r4
 800d416:	f7fe f95b 	bl	800b6d0 <vPortFree>
 800d41a:	e769      	b.n	800d2f0 <prvTimerTask+0x94>
 800d41c:	2402846c 	.word	0x2402846c
 800d420:	24028464 	.word	0x24028464
 800d424:	24028468 	.word	0x24028468

0800d428 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d428:	8880      	ldrh	r0, [r0, #4]
 800d42a:	4770      	bx	lr

0800d42c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	6803      	ldr	r3, [r0, #0]
 800d430:	460c      	mov	r4, r1
 800d432:	2100      	movs	r1, #0
 800d434:	4605      	mov	r5, r0
 800d436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d438:	4798      	blx	r3
 800d43a:	4606      	mov	r6, r0
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	4628      	mov	r0, r5
 800d440:	1ba4      	subs	r4, r4, r6
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	b2a4      	uxth	r4, r4
 800d446:	4798      	blx	r3
 800d448:	fbb4 f0f0 	udiv	r0, r4, r0
 800d44c:	bd70      	pop	{r4, r5, r6, pc}

0800d44e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d44e:	2300      	movs	r3, #0
 800d450:	8083      	strh	r3, [r0, #4]
 800d452:	4770      	bx	lr

0800d454 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d454:	b510      	push	{r4, lr}
 800d456:	6803      	ldr	r3, [r0, #0]
 800d458:	4604      	mov	r4, r0
 800d45a:	8881      	ldrh	r1, [r0, #4]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d45e:	4798      	blx	r3
 800d460:	88a3      	ldrh	r3, [r4, #4]
 800d462:	3301      	adds	r3, #1
 800d464:	80a3      	strh	r3, [r4, #4]
 800d466:	bd10      	pop	{r4, pc}

0800d468 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d468:	6803      	ldr	r3, [r0, #0]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46c:	4718      	bx	r3

0800d46e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d46e:	4770      	bx	lr

0800d470 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d470:	4a02      	ldr	r2, [pc, #8]	@ (800d47c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d472:	6002      	str	r2, [r0, #0]
 800d474:	2200      	movs	r2, #0
 800d476:	8082      	strh	r2, [r0, #4]
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	08025c1c 	.word	0x08025c1c

0800d480 <_ZN8touchgfx8TextArea8setWidthEs>:
 800d480:	b530      	push	{r4, r5, lr}
 800d482:	b085      	sub	sp, #20
 800d484:	6803      	ldr	r3, [r0, #0]
 800d486:	4604      	mov	r4, r0
 800d488:	8101      	strh	r1, [r0, #8]
 800d48a:	466d      	mov	r5, sp
 800d48c:	4601      	mov	r1, r0
 800d48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d492:	343c      	adds	r4, #60	@ 0x3c
 800d494:	4628      	mov	r0, r5
 800d496:	4798      	blx	r3
 800d498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d49c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4a0:	b005      	add	sp, #20
 800d4a2:	bd30      	pop	{r4, r5, pc}

0800d4a4 <_ZN8touchgfx8TextArea9setHeightEs>:
 800d4a4:	b530      	push	{r4, r5, lr}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	6803      	ldr	r3, [r0, #0]
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	8141      	strh	r1, [r0, #10]
 800d4ae:	466d      	mov	r5, sp
 800d4b0:	4601      	mov	r1, r0
 800d4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4b6:	343c      	adds	r4, #60	@ 0x3c
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	4798      	blx	r3
 800d4bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d4c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4c4:	b005      	add	sp, #20
 800d4c6:	bd30      	pop	{r4, r5, pc}

0800d4c8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	8002      	strh	r2, [r0, #0]
 800d4cc:	8042      	strh	r2, [r0, #2]
 800d4ce:	8082      	strh	r2, [r0, #4]
 800d4d0:	80c2      	strh	r2, [r0, #6]
 800d4d2:	4770      	bx	lr

0800d4d4 <_ZN8touchgfx8TextArea8setAlphaEh>:
 800d4d4:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 800d4d8:	4770      	bx	lr
	...

0800d4dc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800d4dc:	b570      	push	{r4, r5, r6, lr}
 800d4de:	6803      	ldr	r3, [r0, #0]
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800d4e4:	460d      	mov	r5, r1
 800d4e6:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 800d4e8:	4b08      	ldr	r3, [pc, #32]	@ (800d50c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800d4f0:	4b07      	ldr	r3, [pc, #28]	@ (800d510 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d4f8:	6803      	ldr	r3, [r0, #0]
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fc:	4798      	blx	r3
 800d4fe:	1a29      	subs	r1, r5, r0
 800d500:	4633      	mov	r3, r6
 800d502:	4620      	mov	r0, r4
 800d504:	b209      	sxth	r1, r1
 800d506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d50a:	4718      	bx	r3
 800d50c:	240284fc 	.word	0x240284fc
 800d510:	24028504 	.word	0x24028504

0800d514 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800d514:	b570      	push	{r4, r5, r6, lr}
 800d516:	6803      	ldr	r3, [r0, #0]
 800d518:	4604      	mov	r4, r0
 800d51a:	4615      	mov	r5, r2
 800d51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d51e:	4798      	blx	r3
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	4629      	mov	r1, r5
 800d524:	4620      	mov	r0, r4
 800d526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d52c:	4718      	bx	r3

0800d52e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800d52e:	2000      	movs	r0, #0
 800d530:	4770      	bx	lr

0800d532 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 800d532:	b508      	push	{r3, lr}
 800d534:	f7f5 ff37 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d538:	bd08      	pop	{r3, pc}

0800d53a <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
 800d53a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800d53c:	4770      	bx	lr

0800d53e <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 800d53e:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 800d542:	4770      	bx	lr

0800d544 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 800d544:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 800d548:	4770      	bx	lr

0800d54a <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 800d54a:	b510      	push	{r4, lr}
 800d54c:	6803      	ldr	r3, [r0, #0]
 800d54e:	4604      	mov	r4, r0
 800d550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d554:	4798      	blx	r3
 800d556:	b110      	cbz	r0, 800d55e <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 800d558:	4620      	mov	r0, r4
 800d55a:	f7f5 ff24 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d55e:	bd10      	pop	{r4, pc}

0800d560 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 800d560:	b508      	push	{r3, lr}
 800d562:	3034      	adds	r0, #52	@ 0x34
 800d564:	f820 1c2c 	strh.w	r1, [r0, #-44]
 800d568:	f7ff ff8a 	bl	800d480 <_ZN8touchgfx8TextArea8setWidthEs>
 800d56c:	bd08      	pop	{r3, pc}

0800d56e <_ZN8touchgfx12DigitalClock9setHeightEs>:
 800d56e:	b508      	push	{r3, lr}
 800d570:	3034      	adds	r0, #52	@ 0x34
 800d572:	f820 1c2a 	strh.w	r1, [r0, #-42]
 800d576:	f7ff ff95 	bl	800d4a4 <_ZN8touchgfx8TextArea9setHeightEs>
 800d57a:	bd08      	pop	{r3, pc}

0800d57c <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 800d57c:	4a11      	ldr	r2, [pc, #68]	@ (800d5c4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800d586:	4604      	mov	r4, r0
 800d588:	8812      	ldrh	r2, [r2, #0]
 800d58a:	460d      	mov	r5, r1
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d916      	bls.n	800d5be <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 800d590:	6802      	ldr	r2, [r0, #0]
 800d592:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800d596:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 800d598:	4a0b      	ldr	r2, [pc, #44]	@ (800d5c8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 800d59a:	6812      	ldr	r2, [r2, #0]
 800d59c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5cc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5a8:	6803      	ldr	r3, [r0, #0]
 800d5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ac:	4798      	blx	r3
 800d5ae:	1a2a      	subs	r2, r5, r0
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	4633      	mov	r3, r6
 800d5b6:	b212      	sxth	r2, r2
 800d5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5bc:	4718      	bx	r3
 800d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c2:	bf00      	nop
 800d5c4:	24028500 	.word	0x24028500
 800d5c8:	240284fc 	.word	0x240284fc
 800d5cc:	24028504 	.word	0x24028504

0800d5d0 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 800d5d0:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 800d5d4:	4770      	bx	lr

0800d5d6 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 800d5d6:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 800d5da:	4770      	bx	lr

0800d5dc <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 800d5dc:	b508      	push	{r3, lr}
 800d5de:	3034      	adds	r0, #52	@ 0x34
 800d5e0:	6301      	str	r1, [r0, #48]	@ 0x30
 800d5e2:	f7f5 fee0 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d5e6:	bd08      	pop	{r3, pc}

0800d5e8 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 800d5e8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800d5ea:	4770      	bx	lr

0800d5ec <_ZN8touchgfx12DigitalClockD1Ev>:
 800d5ec:	4770      	bx	lr

0800d5ee <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800d5ee:	4770      	bx	lr

0800d5f0 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 800d5f0:	3034      	adds	r0, #52	@ 0x34
 800d5f2:	f003 b971 	b.w	80108d8 <_ZNK8touchgfx8TextArea12getTextWidthEv>

0800d5f6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	214c      	movs	r1, #76	@ 0x4c
 800d5fc:	f014 fb6b 	bl	8021cd6 <_ZdlPvj>
 800d600:	4620      	mov	r0, r4
 800d602:	bd10      	pop	{r4, pc}

0800d604 <_ZN8touchgfx12DigitalClockD0Ev>:
 800d604:	b510      	push	{r4, lr}
 800d606:	4604      	mov	r4, r0
 800d608:	2198      	movs	r1, #152	@ 0x98
 800d60a:	f014 fb64 	bl	8021cd6 <_ZdlPvj>
 800d60e:	4620      	mov	r0, r4
 800d610:	bd10      	pop	{r4, pc}

0800d612 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 800d612:	b538      	push	{r3, r4, r5, lr}
 800d614:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800d618:	460d      	mov	r5, r1
 800d61a:	4620      	mov	r0, r4
 800d61c:	f7f5 fec3 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d620:	4620      	mov	r0, r4
 800d622:	4629      	mov	r1, r5
 800d624:	f003 fc94 	bl	8010f50 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800d628:	4620      	mov	r0, r4
 800d62a:	f7f5 febc 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d62e:	bd38      	pop	{r3, r4, r5, pc}

0800d630 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 800d630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d634:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 800d638:	4604      	mov	r4, r0
 800d63a:	4630      	mov	r0, r6
 800d63c:	f7f5 feb3 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d640:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800d644:	bb0b      	cbnz	r3, 800d68a <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 800d646:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d64a:	4620      	mov	r0, r4
 800d64c:	4a40      	ldr	r2, [pc, #256]	@ (800d750 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 800d64e:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800d652:	4d40      	ldr	r5, [pc, #256]	@ (800d754 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 800d654:	2b00      	cmp	r3, #0
 800d656:	bf08      	it	eq
 800d658:	4615      	moveq	r5, r2
 800d65a:	f000 f930 	bl	800d8be <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800d65e:	4680      	mov	r8, r0
 800d660:	4620      	mov	r0, r4
 800d662:	f000 f93f 	bl	800d8e4 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d666:	4681      	mov	r9, r0
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 f934 	bl	800d8d6 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800d66e:	2800      	cmp	r0, #0
 800d670:	462a      	mov	r2, r5
 800d672:	f04f 010c 	mov.w	r1, #12
 800d676:	bf14      	ite	ne
 800d678:	2341      	movne	r3, #65	@ 0x41
 800d67a:	2350      	moveq	r3, #80	@ 0x50
 800d67c:	4638      	mov	r0, r7
 800d67e:	e9cd 9300 	strd	r9, r3, [sp]
 800d682:	4643      	mov	r3, r8
 800d684:	f009 fbb6 	bl	8016df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800d688:	e017      	b.n	800d6ba <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d11b      	bne.n	800d6c6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 800d68e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d692:	4620      	mov	r0, r4
 800d694:	4a30      	ldr	r2, [pc, #192]	@ (800d758 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 800d696:	4d31      	ldr	r5, [pc, #196]	@ (800d75c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bf08      	it	eq
 800d69c:	4615      	moveq	r5, r2
 800d69e:	f000 f90b 	bl	800d8b8 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800d6a2:	4607      	mov	r7, r0
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f000 f91d 	bl	800d8e4 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	9000      	str	r0, [sp, #0]
 800d6ae:	463b      	mov	r3, r7
 800d6b0:	210c      	movs	r1, #12
 800d6b2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d6b6:	f009 fb9d 	bl	8016df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7f5 fe73 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d6c0:	b004      	add	sp, #16
 800d6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d126      	bne.n	800d718 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 800d6ca:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4a23      	ldr	r2, [pc, #140]	@ (800d760 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 800d6d2:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800d6d6:	4d23      	ldr	r5, [pc, #140]	@ (800d764 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bf08      	it	eq
 800d6dc:	4615      	moveq	r5, r2
 800d6de:	f000 f8ee 	bl	800d8be <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 f8fd 	bl	800d8e4 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d6ea:	4681      	mov	r9, r0
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 f8fc 	bl	800d8ea <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800d6f2:	4682      	mov	sl, r0
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 f8ee 	bl	800d8d6 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	f8cd 9000 	str.w	r9, [sp]
 800d700:	462a      	mov	r2, r5
 800d702:	bf14      	ite	ne
 800d704:	2341      	movne	r3, #65	@ 0x41
 800d706:	2350      	moveq	r3, #80	@ 0x50
 800d708:	210c      	movs	r1, #12
 800d70a:	4638      	mov	r0, r7
 800d70c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d710:	4643      	mov	r3, r8
 800d712:	f009 fb6f 	bl	8016df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800d716:	e7d0      	b.n	800d6ba <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d1ce      	bne.n	800d6ba <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 800d71c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d720:	4620      	mov	r0, r4
 800d722:	4a11      	ldr	r2, [pc, #68]	@ (800d768 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 800d724:	4d11      	ldr	r5, [pc, #68]	@ (800d76c <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 800d726:	2b00      	cmp	r3, #0
 800d728:	bf08      	it	eq
 800d72a:	4615      	moveq	r5, r2
 800d72c:	f000 f8c4 	bl	800d8b8 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800d730:	4607      	mov	r7, r0
 800d732:	4620      	mov	r0, r4
 800d734:	f000 f8d6 	bl	800d8e4 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d738:	4680      	mov	r8, r0
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 f8d5 	bl	800d8ea <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800d740:	463b      	mov	r3, r7
 800d742:	462a      	mov	r2, r5
 800d744:	210c      	movs	r1, #12
 800d746:	e9cd 8000 	strd	r8, r0, [sp]
 800d74a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d74e:	e799      	b.n	800d684 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 800d750:	08025cd8 	.word	0x08025cd8
 800d754:	08025d02 	.word	0x08025d02
 800d758:	08025ce4 	.word	0x08025ce4
 800d75c:	08025d22 	.word	0x08025d22
 800d760:	08025cff 	.word	0x08025cff
 800d764:	08025cec 	.word	0x08025cec
 800d768:	08025d1f 	.word	0x08025d1f
 800d76c:	08025d10 	.word	0x08025d10

0800d770 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
 800d770:	2200      	movs	r2, #0
 800d772:	f04f 31ff 	mov.w	r1, #4294967295
 800d776:	6082      	str	r2, [r0, #8]
 800d778:	e9c0 2100 	strd	r2, r1, [r0]
 800d77c:	4770      	bx	lr
	...

0800d780 <_ZN8touchgfx12DigitalClockC1Ev>:
 800d780:	b510      	push	{r4, lr}
 800d782:	4604      	mov	r4, r0
 800d784:	f000 f87c 	bl	800d880 <_ZN8touchgfx13AbstractClockC1Ev>
 800d788:	2201      	movs	r2, #1
 800d78a:	4b21      	ldr	r3, [pc, #132]	@ (800d810 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 800d78c:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 800d790:	4620      	mov	r0, r4
 800d792:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800d796:	4a1f      	ldr	r2, [pc, #124]	@ (800d814 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	2303      	movs	r3, #3
 800d79c:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800d79e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7a2:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 800d7ac:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 800d7b0:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 800d7b4:	4a18      	ldr	r2, [pc, #96]	@ (800d818 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 800d7b6:	66a1      	str	r1, [r4, #104]	@ 0x68
 800d7b8:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800d7bc:	6362      	str	r2, [r4, #52]	@ 0x34
 800d7be:	4622      	mov	r2, r4
 800d7c0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800d7c4:	8723      	strh	r3, [r4, #56]	@ 0x38
 800d7c6:	8763      	strh	r3, [r4, #58]	@ 0x3a
 800d7c8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800d7ca:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800d7cc:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 800d7d0:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d7d4:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800d7d8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800d7dc:	6523      	str	r3, [r4, #80]	@ 0x50
 800d7de:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800d7e2:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 800d7e6:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800d7ea:	6663      	str	r3, [r4, #100]	@ 0x64
 800d7ec:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 800d7f0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800d7f4:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 800d7f8:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800d7fc:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d7fe:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800d802:	f822 3f80 	strh.w	r3, [r2, #128]!
 800d806:	67e2      	str	r2, [r4, #124]	@ 0x7c
 800d808:	f000 f87c 	bl	800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d80c:	4620      	mov	r0, r4
 800d80e:	bd10      	pop	{r4, pc}
 800d810:	08025d34 	.word	0x08025d34
 800d814:	08025104 	.word	0x08025104
 800d818:	08025c50 	.word	0x08025c50

0800d81c <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 800d81c:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 800d820:	4770      	bx	lr

0800d822 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800d822:	b470      	push	{r4, r5, r6}
 800d824:	2518      	movs	r5, #24
 800d826:	fbb1 f6f5 	udiv	r6, r1, r5
 800d82a:	fb06 1115 	mls	r1, r6, r5, r1
 800d82e:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 800d832:	213c      	movs	r1, #60	@ 0x3c
 800d834:	fbb2 f5f1 	udiv	r5, r2, r1
 800d838:	fb05 2211 	mls	r2, r5, r1, r2
 800d83c:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 800d840:	fbb3 f2f1 	udiv	r2, r3, r1
 800d844:	fb02 3311 	mls	r3, r2, r1, r3
 800d848:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 800d84c:	6803      	ldr	r3, [r0, #0]
 800d84e:	bc70      	pop	{r4, r5, r6}
 800d850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d854:	4718      	bx	r3

0800d856 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800d856:	b4f0      	push	{r4, r5, r6, r7}
 800d858:	6804      	ldr	r4, [r0, #0]
 800d85a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800d85e:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 800d862:	240c      	movs	r4, #12
 800d864:	2e00      	cmp	r6, #0
 800d866:	46ac      	mov	ip, r5
 800d868:	fbb1 f7f4 	udiv	r7, r1, r4
 800d86c:	fb07 1114 	mls	r1, r7, r4, r1
 800d870:	bf18      	it	ne
 800d872:	2400      	movne	r4, #0
 800d874:	fa54 f181 	uxtab	r1, r4, r1
 800d878:	bcf0      	pop	{r4, r5, r6, r7}
 800d87a:	b2c9      	uxtb	r1, r1
 800d87c:	4760      	bx	ip
	...

0800d880 <_ZN8touchgfx13AbstractClockC1Ev>:
 800d880:	2101      	movs	r1, #1
 800d882:	2200      	movs	r2, #0
 800d884:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800d888:	490a      	ldr	r1, [pc, #40]	@ (800d8b4 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800d88a:	8082      	strh	r2, [r0, #4]
 800d88c:	80c2      	strh	r2, [r0, #6]
 800d88e:	8102      	strh	r2, [r0, #8]
 800d890:	8142      	strh	r2, [r0, #10]
 800d892:	8182      	strh	r2, [r0, #12]
 800d894:	81c2      	strh	r2, [r0, #14]
 800d896:	8202      	strh	r2, [r0, #16]
 800d898:	8242      	strh	r2, [r0, #18]
 800d89a:	61c2      	str	r2, [r0, #28]
 800d89c:	8402      	strh	r2, [r0, #32]
 800d89e:	8442      	strh	r2, [r0, #34]	@ 0x22
 800d8a0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800d8a4:	6001      	str	r1, [r0, #0]
 800d8a6:	6282      	str	r2, [r0, #40]	@ 0x28
 800d8a8:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800d8aa:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 800d8ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d8b2:	4770      	bx	lr
 800d8b4:	08025df4 	.word	0x08025df4

0800d8b8 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 800d8b8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800d8bc:	4770      	bx	lr

0800d8be <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 800d8be:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800d8c2:	220c      	movs	r2, #12
 800d8c4:	f100 030b 	add.w	r3, r0, #11
 800d8c8:	fb93 f0f2 	sdiv	r0, r3, r2
 800d8cc:	fb02 3010 	mls	r0, r2, r0, r3
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	b2c0      	uxtb	r0, r0
 800d8d4:	4770      	bx	lr

0800d8d6 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 800d8d6:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800d8da:	280b      	cmp	r0, #11
 800d8dc:	bf8c      	ite	hi
 800d8de:	2000      	movhi	r0, #0
 800d8e0:	2001      	movls	r0, #1
 800d8e2:	4770      	bx	lr

0800d8e4 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800d8e4:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800d8e8:	4770      	bx	lr

0800d8ea <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800d8ea:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800d8ee:	4770      	bx	lr

0800d8f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d8f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	b12b      	cbz	r3, 800d902 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d8f6:	b920      	cbnz	r0, 800d902 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d8f8:	1a5a      	subs	r2, r3, r1
 800d8fa:	699b      	ldr	r3, [r3, #24]
 800d8fc:	4250      	negs	r0, r2
 800d8fe:	4150      	adcs	r0, r2
 800d900:	e7f8      	b.n	800d8f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d902:	4770      	bx	lr

0800d904 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d904:	2300      	movs	r3, #0
 800d906:	6148      	str	r0, [r1, #20]
 800d908:	618b      	str	r3, [r1, #24]
 800d90a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d90c:	b913      	cbnz	r3, 800d914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d90e:	6281      	str	r1, [r0, #40]	@ 0x28
 800d910:	4770      	bx	lr
 800d912:	4613      	mov	r3, r2
 800d914:	699a      	ldr	r2, [r3, #24]
 800d916:	2a00      	cmp	r2, #0
 800d918:	d1fb      	bne.n	800d912 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d91a:	6199      	str	r1, [r3, #24]
 800d91c:	4770      	bx	lr

0800d91e <_ZN8touchgfx9Container9removeAllEv>:
 800d91e:	2200      	movs	r2, #0
 800d920:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d922:	b123      	cbz	r3, 800d92e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d924:	6999      	ldr	r1, [r3, #24]
 800d926:	6281      	str	r1, [r0, #40]	@ 0x28
 800d928:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d92c:	e7f8      	b.n	800d920 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d92e:	4770      	bx	lr

0800d930 <_ZN8touchgfx9Container6unlinkEv>:
 800d930:	2300      	movs	r3, #0
 800d932:	6283      	str	r3, [r0, #40]	@ 0x28
 800d934:	4770      	bx	lr

0800d936 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d936:	2200      	movs	r2, #0
 800d938:	8002      	strh	r2, [r0, #0]
 800d93a:	8042      	strh	r2, [r0, #2]
 800d93c:	8082      	strh	r2, [r0, #4]
 800d93e:	80c2      	strh	r2, [r0, #6]
 800d940:	4770      	bx	lr

0800d942 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d942:	b570      	push	{r4, r5, r6, lr}
 800d944:	460d      	mov	r5, r1
 800d946:	4616      	mov	r6, r2
 800d948:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d94a:	b13c      	cbz	r4, 800d95c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	4620      	mov	r0, r4
 800d950:	4632      	mov	r2, r6
 800d952:	4629      	mov	r1, r5
 800d954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d956:	4798      	blx	r3
 800d958:	69a4      	ldr	r4, [r4, #24]
 800d95a:	e7f6      	b.n	800d94a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d95c:	bd70      	pop	{r4, r5, r6, pc}

0800d95e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d95e:	b538      	push	{r3, r4, r5, lr}
 800d960:	460d      	mov	r5, r1
 800d962:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d964:	b134      	cbz	r4, 800d974 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d966:	682b      	ldr	r3, [r5, #0]
 800d968:	4621      	mov	r1, r4
 800d96a:	4628      	mov	r0, r5
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	4798      	blx	r3
 800d970:	69a4      	ldr	r4, [r4, #24]
 800d972:	e7f7      	b.n	800d964 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d974:	bd38      	pop	{r3, r4, r5, pc}

0800d976 <_ZN8touchgfx9ContainerD1Ev>:
 800d976:	4770      	bx	lr

0800d978 <_ZN8touchgfx9ContainerD0Ev>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4604      	mov	r4, r0
 800d97c:	212c      	movs	r1, #44	@ 0x2c
 800d97e:	f014 f9aa 	bl	8021cd6 <_ZdlPvj>
 800d982:	4620      	mov	r0, r4
 800d984:	bd10      	pop	{r4, pc}

0800d986 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d986:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d988:	b19b      	cbz	r3, 800d9b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d98a:	428b      	cmp	r3, r1
 800d98c:	d109      	bne.n	800d9a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d98e:	699a      	ldr	r2, [r3, #24]
 800d990:	2100      	movs	r1, #0
 800d992:	6159      	str	r1, [r3, #20]
 800d994:	6282      	str	r2, [r0, #40]	@ 0x28
 800d996:	b902      	cbnz	r2, 800d99a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d998:	4770      	bx	lr
 800d99a:	6199      	str	r1, [r3, #24]
 800d99c:	4770      	bx	lr
 800d99e:	4613      	mov	r3, r2
 800d9a0:	b13a      	cbz	r2, 800d9b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	428a      	cmp	r2, r1
 800d9a6:	d1fa      	bne.n	800d99e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d9a8:	698a      	ldr	r2, [r1, #24]
 800d9aa:	619a      	str	r2, [r3, #24]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d9b2:	4770      	bx	lr

0800d9b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d9b4:	b410      	push	{r4}
 800d9b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	b92b      	cbnz	r3, 800d9c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d9bc:	6803      	ldr	r3, [r0, #0]
 800d9be:	4611      	mov	r1, r2
 800d9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9c6:	4718      	bx	r3
 800d9c8:	b941      	cbnz	r1, 800d9dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d9ca:	6193      	str	r3, [r2, #24]
 800d9cc:	6282      	str	r2, [r0, #40]	@ 0x28
 800d9ce:	6154      	str	r4, [r2, #20]
 800d9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d0f9      	beq.n	800d9d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	6998      	ldr	r0, [r3, #24]
 800d9e0:	d1f9      	bne.n	800d9d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d9e2:	6190      	str	r0, [r2, #24]
 800d9e4:	618a      	str	r2, [r1, #24]
 800d9e6:	e7f2      	b.n	800d9ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d9e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ec:	461f      	mov	r7, r3
 800d9ee:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	b103      	cbz	r3, 800d9fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d9f8:	6038      	str	r0, [r7, #0]
 800d9fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d9fc:	b314      	cbz	r4, 800da44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d9fe:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800da02:	b1eb      	cbz	r3, 800da40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800da08:	428d      	cmp	r5, r1
 800da0a:	db19      	blt.n	800da40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da0c:	b289      	uxth	r1, r1
 800da0e:	8923      	ldrh	r3, [r4, #8]
 800da10:	440b      	add	r3, r1
 800da12:	b21b      	sxth	r3, r3
 800da14:	429d      	cmp	r5, r3
 800da16:	da13      	bge.n	800da40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800da1c:	4296      	cmp	r6, r2
 800da1e:	db0f      	blt.n	800da40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da20:	b292      	uxth	r2, r2
 800da22:	8963      	ldrh	r3, [r4, #10]
 800da24:	4413      	add	r3, r2
 800da26:	b21b      	sxth	r3, r3
 800da28:	429e      	cmp	r6, r3
 800da2a:	da09      	bge.n	800da40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da2c:	6823      	ldr	r3, [r4, #0]
 800da2e:	1ab2      	subs	r2, r6, r2
 800da30:	1a69      	subs	r1, r5, r1
 800da32:	4620      	mov	r0, r4
 800da34:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800da38:	b212      	sxth	r2, r2
 800da3a:	463b      	mov	r3, r7
 800da3c:	b209      	sxth	r1, r1
 800da3e:	47c0      	blx	r8
 800da40:	69a4      	ldr	r4, [r4, #24]
 800da42:	e7db      	b.n	800d9fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	4c6d      	ldr	r4, [pc, #436]	@ (800dc04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800da4e:	b0a1      	sub	sp, #132	@ 0x84
 800da50:	4606      	mov	r6, r0
 800da52:	6824      	ldr	r4, [r4, #0]
 800da54:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800da56:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800da5a:	2400      	movs	r4, #0
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	802c      	strh	r4, [r5, #0]
 800da60:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800da62:	802c      	strh	r4, [r5, #0]
 800da64:	601c      	str	r4, [r3, #0]
 800da66:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800da6a:	f7ff ffbd 	bl	800d9e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800da6e:	f1b9 0f03 	cmp.w	r9, #3
 800da72:	f340 80c1 	ble.w	800dbf8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800da76:	4631      	mov	r1, r6
 800da78:	a80c      	add	r0, sp, #48	@ 0x30
 800da7a:	f006 fff9 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800da7e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800da82:	9306      	str	r3, [sp, #24]
 800da84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800da88:	9307      	str	r3, [sp, #28]
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	f8d3 a000 	ldr.w	sl, [r3]
 800da90:	f1ba 0f00 	cmp.w	sl, #0
 800da94:	f000 80b3 	beq.w	800dbfe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800da98:	4651      	mov	r1, sl
 800da9a:	a810      	add	r0, sp, #64	@ 0x40
 800da9c:	f006 ffe8 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800daa0:	2002      	movs	r0, #2
 800daa2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	9a06      	ldr	r2, [sp, #24]
 800daaa:	fb91 f1f0 	sdiv	r1, r1, r0
 800daae:	189d      	adds	r5, r3, r2
 800dab0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800dab4:	9a07      	ldr	r2, [sp, #28]
 800dab6:	4419      	add	r1, r3
 800dab8:	9b02      	ldr	r3, [sp, #8]
 800daba:	4413      	add	r3, r2
 800dabc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800dac0:	1a6d      	subs	r5, r5, r1
 800dac2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800dac6:	fb92 f2f0 	sdiv	r2, r2, r0
 800daca:	440a      	add	r2, r1
 800dacc:	1a9b      	subs	r3, r3, r2
 800dace:	435b      	muls	r3, r3
 800dad0:	fb05 3505 	mla	r5, r5, r5, r3
 800dad4:	4f4c      	ldr	r7, [pc, #304]	@ (800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800dad6:	ac10      	add	r4, sp, #64	@ 0x40
 800dad8:	f1b9 0f0c 	cmp.w	r9, #12
 800dadc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dae0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dae4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dae8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800daec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800daf0:	f04f 0303 	mov.w	r3, #3
 800daf4:	bfd8      	it	le
 800daf6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800dafa:	f04f 0400 	mov.w	r4, #0
 800dafe:	f8cd 9000 	str.w	r9, [sp]
 800db02:	bfcc      	ite	gt
 800db04:	4698      	movgt	r8, r3
 800db06:	fb92 f8f3 	sdivle	r8, r2, r3
 800db0a:	1c63      	adds	r3, r4, #1
 800db0c:	aa10      	add	r2, sp, #64	@ 0x40
 800db0e:	f004 0401 	and.w	r4, r4, #1
 800db12:	f04f 0b00 	mov.w	fp, #0
 800db16:	9308      	str	r3, [sp, #32]
 800db18:	9b00      	ldr	r3, [sp, #0]
 800db1a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800db1e:	fb93 f3f8 	sdiv	r3, r3, r8
 800db22:	3404      	adds	r4, #4
 800db24:	b29b      	uxth	r3, r3
 800db26:	9304      	str	r3, [sp, #16]
 800db28:	9a04      	ldr	r2, [sp, #16]
 800db2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800db2e:	fb13 f302 	smulbb	r3, r3, r2
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	b29b      	uxth	r3, r3
 800db36:	1899      	adds	r1, r3, r2
 800db38:	9305      	str	r3, [sp, #20]
 800db3a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800db3e:	b209      	sxth	r1, r1
 800db40:	4299      	cmp	r1, r3
 800db42:	db4d      	blt.n	800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db44:	8932      	ldrh	r2, [r6, #8]
 800db46:	4413      	add	r3, r2
 800db48:	b21b      	sxth	r3, r3
 800db4a:	4299      	cmp	r1, r3
 800db4c:	da48      	bge.n	800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db4e:	9b04      	ldr	r3, [sp, #16]
 800db50:	6827      	ldr	r7, [r4, #0]
 800db52:	fb17 f703 	smulbb	r7, r7, r3
 800db56:	9b02      	ldr	r3, [sp, #8]
 800db58:	b2bf      	uxth	r7, r7
 800db5a:	18fa      	adds	r2, r7, r3
 800db5c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800db60:	b212      	sxth	r2, r2
 800db62:	429a      	cmp	r2, r3
 800db64:	db3c      	blt.n	800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db66:	8970      	ldrh	r0, [r6, #10]
 800db68:	4403      	add	r3, r0
 800db6a:	b21b      	sxth	r3, r3
 800db6c:	429a      	cmp	r2, r3
 800db6e:	da37      	bge.n	800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db70:	2300      	movs	r3, #0
 800db72:	4630      	mov	r0, r6
 800db74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db76:	ab0b      	add	r3, sp, #44	@ 0x2c
 800db78:	f7ff ff36 	bl	800d9e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800db7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db7e:	b37a      	cbz	r2, 800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db80:	4552      	cmp	r2, sl
 800db82:	d02d      	beq.n	800dbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db84:	4611      	mov	r1, r2
 800db86:	a80e      	add	r0, sp, #56	@ 0x38
 800db88:	9209      	str	r2, [sp, #36]	@ 0x24
 800db8a:	f006 ff71 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800db8e:	f04f 0e02 	mov.w	lr, #2
 800db92:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800db96:	9a06      	ldr	r2, [sp, #24]
 800db98:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800dba2:	4413      	add	r3, r2
 800dba4:	9a07      	ldr	r2, [sp, #28]
 800dba6:	fb91 f1fe 	sdiv	r1, r1, lr
 800dbaa:	fb9c fcfe 	sdiv	ip, ip, lr
 800dbae:	4401      	add	r1, r0
 800dbb0:	1a58      	subs	r0, r3, r1
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800dbb8:	4413      	add	r3, r2
 800dbba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbbc:	448c      	add	ip, r1
 800dbbe:	eba3 030c 	sub.w	r3, r3, ip
 800dbc2:	435b      	muls	r3, r3
 800dbc4:	fb00 3300 	mla	r3, r0, r0, r3
 800dbc8:	42ab      	cmp	r3, r5
 800dbca:	d208      	bcs.n	800dbde <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800dbcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbce:	461d      	mov	r5, r3
 800dbd0:	9803      	ldr	r0, [sp, #12]
 800dbd2:	6001      	str	r1, [r0, #0]
 800dbd4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800dbd6:	9805      	ldr	r0, [sp, #20]
 800dbd8:	8008      	strh	r0, [r1, #0]
 800dbda:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800dbdc:	800f      	strh	r7, [r1, #0]
 800dbde:	4692      	mov	sl, r2
 800dbe0:	f10b 0b01 	add.w	fp, fp, #1
 800dbe4:	3408      	adds	r4, #8
 800dbe6:	f1bb 0f04 	cmp.w	fp, #4
 800dbea:	d19d      	bne.n	800db28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800dbec:	9b00      	ldr	r3, [sp, #0]
 800dbee:	9c08      	ldr	r4, [sp, #32]
 800dbf0:	444b      	add	r3, r9
 800dbf2:	4544      	cmp	r4, r8
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	d188      	bne.n	800db0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800dbf8:	b021      	add	sp, #132	@ 0x84
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	f04f 35ff 	mov.w	r5, #4294967295
 800dc02:	e767      	b.n	800dad4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800dc04:	240284a4 	.word	0x240284a4
 800dc08:	08023448 	.word	0x08023448

0800dc0c <_ZN8touchgfx4RectaNERKS0_>:
 800dc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc10:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dc14:	888c      	ldrh	r4, [r1, #4]
 800dc16:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dc1a:	443c      	add	r4, r7
 800dc1c:	b2a4      	uxth	r4, r4
 800dc1e:	fa0f f884 	sxth.w	r8, r4
 800dc22:	45c1      	cmp	r9, r8
 800dc24:	da2f      	bge.n	800dc86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc26:	8882      	ldrh	r2, [r0, #4]
 800dc28:	444a      	add	r2, r9
 800dc2a:	b292      	uxth	r2, r2
 800dc2c:	fa0f fe82 	sxth.w	lr, r2
 800dc30:	4577      	cmp	r7, lr
 800dc32:	da28      	bge.n	800dc86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc34:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dc38:	88cb      	ldrh	r3, [r1, #6]
 800dc3a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800dc3e:	442b      	add	r3, r5
 800dc40:	b21b      	sxth	r3, r3
 800dc42:	429e      	cmp	r6, r3
 800dc44:	da1f      	bge.n	800dc86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc46:	88c3      	ldrh	r3, [r0, #6]
 800dc48:	4433      	add	r3, r6
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	fa0f fc83 	sxth.w	ip, r3
 800dc50:	4565      	cmp	r5, ip
 800dc52:	da18      	bge.n	800dc86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc54:	454f      	cmp	r7, r9
 800dc56:	bfb8      	it	lt
 800dc58:	464f      	movlt	r7, r9
 800dc5a:	42b5      	cmp	r5, r6
 800dc5c:	bfb8      	it	lt
 800dc5e:	4635      	movlt	r5, r6
 800dc60:	45f0      	cmp	r8, lr
 800dc62:	bfd8      	it	le
 800dc64:	4622      	movle	r2, r4
 800dc66:	1bd2      	subs	r2, r2, r7
 800dc68:	8082      	strh	r2, [r0, #4]
 800dc6a:	884a      	ldrh	r2, [r1, #2]
 800dc6c:	88c9      	ldrh	r1, [r1, #6]
 800dc6e:	8007      	strh	r7, [r0, #0]
 800dc70:	440a      	add	r2, r1
 800dc72:	8045      	strh	r5, [r0, #2]
 800dc74:	b292      	uxth	r2, r2
 800dc76:	b211      	sxth	r1, r2
 800dc78:	458c      	cmp	ip, r1
 800dc7a:	bfa8      	it	ge
 800dc7c:	4613      	movge	r3, r2
 800dc7e:	1b5b      	subs	r3, r3, r5
 800dc80:	80c3      	strh	r3, [r0, #6]
 800dc82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc86:	2300      	movs	r3, #0
 800dc88:	8003      	strh	r3, [r0, #0]
 800dc8a:	8043      	strh	r3, [r0, #2]
 800dc8c:	8083      	strh	r3, [r0, #4]
 800dc8e:	80c3      	strh	r3, [r0, #6]
 800dc90:	e7f7      	b.n	800dc82 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800dc92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd06      	ble.n	800dca8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800dc9a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	bfcc      	ite	gt
 800dca2:	2000      	movgt	r0, #0
 800dca4:	2001      	movle	r0, #1
 800dca6:	4770      	bx	lr
 800dca8:	2001      	movs	r0, #1
 800dcaa:	4770      	bx	lr

0800dcac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800dcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800dcb6:	8003      	strh	r3, [r0, #0]
 800dcb8:	8043      	strh	r3, [r0, #2]
 800dcba:	8083      	strh	r3, [r0, #4]
 800dcbc:	80c3      	strh	r3, [r0, #6]
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	d040      	beq.n	800dd44 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800dcc2:	1d28      	adds	r0, r5, #4
 800dcc4:	f7ff ffe5 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcc8:	b988      	cbnz	r0, 800dcee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dcca:	4620      	mov	r0, r4
 800dccc:	f7ff ffe1 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcd0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800dcd4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800dcd8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800dcdc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800dce0:	b138      	cbz	r0, 800dcf2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800dce2:	8022      	strh	r2, [r4, #0]
 800dce4:	8063      	strh	r3, [r4, #2]
 800dce6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800dcea:	f8a4 c006 	strh.w	ip, [r4, #6]
 800dcee:	69ad      	ldr	r5, [r5, #24]
 800dcf0:	e7e5      	b.n	800dcbe <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800dcf2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dcf6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dcfa:	4290      	cmp	r0, r2
 800dcfc:	4607      	mov	r7, r0
 800dcfe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800dd02:	460e      	mov	r6, r1
 800dd04:	bfa8      	it	ge
 800dd06:	4617      	movge	r7, r2
 800dd08:	4299      	cmp	r1, r3
 800dd0a:	4472      	add	r2, lr
 800dd0c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dd10:	bfa8      	it	ge
 800dd12:	461e      	movge	r6, r3
 800dd14:	4440      	add	r0, r8
 800dd16:	4471      	add	r1, lr
 800dd18:	4463      	add	r3, ip
 800dd1a:	b200      	sxth	r0, r0
 800dd1c:	8027      	strh	r7, [r4, #0]
 800dd1e:	b212      	sxth	r2, r2
 800dd20:	8066      	strh	r6, [r4, #2]
 800dd22:	b209      	sxth	r1, r1
 800dd24:	b21b      	sxth	r3, r3
 800dd26:	4290      	cmp	r0, r2
 800dd28:	bfac      	ite	ge
 800dd2a:	ebc7 0200 	rsbge	r2, r7, r0
 800dd2e:	ebc7 0202 	rsblt	r2, r7, r2
 800dd32:	4299      	cmp	r1, r3
 800dd34:	bfac      	ite	ge
 800dd36:	ebc6 0301 	rsbge	r3, r6, r1
 800dd3a:	ebc6 0303 	rsblt	r3, r6, r3
 800dd3e:	80a2      	strh	r2, [r4, #4]
 800dd40:	80e3      	strh	r3, [r4, #6]
 800dd42:	e7d4      	b.n	800dcee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dd44:	4620      	mov	r0, r4
 800dd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dd4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dd4e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800dd52:	b383      	cbz	r3, 800ddb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dd54:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dd56:	b374      	cbz	r4, 800ddb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dd58:	f9b1 5000 	ldrsh.w	r5, [r1]
 800dd5c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dd60:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800dd64:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800dd68:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800dd6c:	b303      	cbz	r3, 800ddb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dd6e:	4668      	mov	r0, sp
 800dd70:	1d21      	adds	r1, r4, #4
 800dd72:	f8ad 5000 	strh.w	r5, [sp]
 800dd76:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dd7a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800dd7e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800dd82:	f7ff ff43 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 800dd86:	4668      	mov	r0, sp
 800dd88:	f7ff ff83 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd8c:	b980      	cbnz	r0, 800ddb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dd8e:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd92:	4669      	mov	r1, sp
 800dd94:	88a2      	ldrh	r2, [r4, #4]
 800dd96:	4620      	mov	r0, r4
 800dd98:	1a9b      	subs	r3, r3, r2
 800dd9a:	88e2      	ldrh	r2, [r4, #6]
 800dd9c:	f8ad 3000 	strh.w	r3, [sp]
 800dda0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	4798      	blx	r3
 800ddb0:	69a4      	ldr	r4, [r4, #24]
 800ddb2:	2c00      	cmp	r4, #0
 800ddb4:	d1d8      	bne.n	800dd68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ddb6:	b002      	add	sp, #8
 800ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ddbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddbe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	4616      	mov	r6, r2
 800ddc6:	b323      	cbz	r3, 800de12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ddc8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ddca:	b314      	cbz	r4, 800de12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ddcc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ddd0:	b1eb      	cbz	r3, 800de0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ddd2:	6828      	ldr	r0, [r5, #0]
 800ddd4:	466b      	mov	r3, sp
 800ddd6:	6869      	ldr	r1, [r5, #4]
 800ddd8:	c303      	stmia	r3!, {r0, r1}
 800ddda:	4668      	mov	r0, sp
 800dddc:	1d21      	adds	r1, r4, #4
 800ddde:	f7ff ff15 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 800dde2:	4668      	mov	r0, sp
 800dde4:	f7ff ff55 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dde8:	b988      	cbnz	r0, 800de0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ddea:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddee:	4669      	mov	r1, sp
 800ddf0:	88a2      	ldrh	r2, [r4, #4]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	88e2      	ldrh	r2, [r4, #6]
 800ddf8:	f8ad 3000 	strh.w	r3, [sp]
 800ddfc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800de00:	1a9b      	subs	r3, r3, r2
 800de02:	4632      	mov	r2, r6
 800de04:	f8ad 3002 	strh.w	r3, [sp, #2]
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de0c:	4798      	blx	r3
 800de0e:	69a4      	ldr	r4, [r4, #24]
 800de10:	e7db      	b.n	800ddca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800de12:	b002      	add	sp, #8
 800de14:	bd70      	pop	{r4, r5, r6, pc}

0800de16 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800de16:	2000      	movs	r0, #0
 800de18:	4770      	bx	lr

0800de1a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800de1a:	2001      	movs	r0, #1
 800de1c:	4770      	bx	lr

0800de1e <_ZN8touchgfx9DragEventD1Ev>:
 800de1e:	4770      	bx	lr

0800de20 <_ZN8touchgfx10ClickEventD1Ev>:
 800de20:	4770      	bx	lr

0800de22 <_ZN8touchgfx10ClickEventD0Ev>:
 800de22:	b510      	push	{r4, lr}
 800de24:	4604      	mov	r4, r0
 800de26:	210c      	movs	r1, #12
 800de28:	f013 ff55 	bl	8021cd6 <_ZdlPvj>
 800de2c:	4620      	mov	r0, r4
 800de2e:	bd10      	pop	{r4, pc}

0800de30 <_ZN8touchgfx9DragEventD0Ev>:
 800de30:	b510      	push	{r4, lr}
 800de32:	4604      	mov	r4, r0
 800de34:	2110      	movs	r1, #16
 800de36:	f013 ff4e 	bl	8021cd6 <_ZdlPvj>
 800de3a:	4620      	mov	r0, r4
 800de3c:	bd10      	pop	{r4, pc}

0800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800de3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de40:	4604      	mov	r4, r0
 800de42:	4608      	mov	r0, r1
 800de44:	460d      	mov	r5, r1
 800de46:	f7ff ff24 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800de4a:	b978      	cbnz	r0, 800de6c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800de4c:	4620      	mov	r0, r4
 800de4e:	f7ff ff20 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800de52:	f9b5 6000 	ldrsh.w	r6, [r5]
 800de56:	b150      	cbz	r0, 800de6e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800de58:	8026      	strh	r6, [r4, #0]
 800de5a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800de5e:	8063      	strh	r3, [r4, #2]
 800de60:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800de64:	80a3      	strh	r3, [r4, #4]
 800de66:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800de6a:	80e3      	strh	r3, [r4, #6]
 800de6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de6e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800de72:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800de76:	42b1      	cmp	r1, r6
 800de78:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800de7c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800de80:	460f      	mov	r7, r1
 800de82:	88ed      	ldrh	r5, [r5, #6]
 800de84:	bfa8      	it	ge
 800de86:	4637      	movge	r7, r6
 800de88:	4293      	cmp	r3, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	4466      	add	r6, ip
 800de8e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800de92:	bfa8      	it	ge
 800de94:	4610      	movge	r0, r2
 800de96:	442a      	add	r2, r5
 800de98:	88e5      	ldrh	r5, [r4, #6]
 800de9a:	4461      	add	r1, ip
 800de9c:	b236      	sxth	r6, r6
 800de9e:	8027      	strh	r7, [r4, #0]
 800dea0:	442b      	add	r3, r5
 800dea2:	b209      	sxth	r1, r1
 800dea4:	b212      	sxth	r2, r2
 800dea6:	8060      	strh	r0, [r4, #2]
 800dea8:	b21b      	sxth	r3, r3
 800deaa:	428e      	cmp	r6, r1
 800deac:	bfac      	ite	ge
 800deae:	ebc7 0106 	rsbge	r1, r7, r6
 800deb2:	ebc7 0101 	rsblt	r1, r7, r1
 800deb6:	429a      	cmp	r2, r3
 800deb8:	bfac      	ite	ge
 800deba:	ebc0 0202 	rsbge	r2, r0, r2
 800debe:	ebc0 0203 	rsblt	r2, r0, r3
 800dec2:	80a1      	strh	r1, [r4, #4]
 800dec4:	80e2      	strh	r2, [r4, #6]
 800dec6:	e7d1      	b.n	800de6c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800dec8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	6803      	ldr	r3, [r0, #0]
 800decc:	4604      	mov	r4, r0
 800dece:	4615      	mov	r5, r2
 800ded0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ded2:	4798      	blx	r3
 800ded4:	6823      	ldr	r3, [r4, #0]
 800ded6:	4629      	mov	r1, r5
 800ded8:	4620      	mov	r0, r4
 800deda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dee0:	4718      	bx	r3

0800dee2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800dee2:	6803      	ldr	r3, [r0, #0]
 800dee4:	b513      	push	{r0, r1, r4, lr}
 800dee6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800deea:	2300      	movs	r3, #0
 800deec:	e9cd 3300 	strd	r3, r3, [sp]
 800def0:	466b      	mov	r3, sp
 800def2:	47a0      	blx	r4
 800def4:	b002      	add	sp, #8
 800def6:	bd10      	pop	{r4, pc}

0800def8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800def8:	2301      	movs	r3, #1
 800defa:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800defe:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800df02:	4770      	bx	lr

0800df04 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800df04:	2301      	movs	r3, #1
 800df06:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800df0a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800df0e:	4770      	bx	lr

0800df10 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800df10:	6843      	ldr	r3, [r0, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	725a      	strb	r2, [r3, #9]
 800df16:	6840      	ldr	r0, [r0, #4]
 800df18:	6803      	ldr	r3, [r0, #0]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	4718      	bx	r3

0800df1e <_ZN8touchgfx3HAL8flushDMAEv>:
 800df1e:	6840      	ldr	r0, [r0, #4]
 800df20:	6803      	ldr	r3, [r0, #0]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	4718      	bx	r3

0800df26 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800df26:	b530      	push	{r4, r5, lr}
 800df28:	b08b      	sub	sp, #44	@ 0x2c
 800df2a:	6804      	ldr	r4, [r0, #0]
 800df2c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800df30:	9509      	str	r5, [sp, #36]	@ 0x24
 800df32:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800df36:	9508      	str	r5, [sp, #32]
 800df38:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800df3c:	9507      	str	r5, [sp, #28]
 800df3e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800df42:	9506      	str	r5, [sp, #24]
 800df44:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800df48:	9505      	str	r5, [sp, #20]
 800df4a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800df4e:	9504      	str	r5, [sp, #16]
 800df50:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800df54:	9503      	str	r5, [sp, #12]
 800df56:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800df5a:	9502      	str	r5, [sp, #8]
 800df5c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800df60:	e9cd 3500 	strd	r3, r5, [sp]
 800df64:	4613      	mov	r3, r2
 800df66:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800df68:	2200      	movs	r2, #0
 800df6a:	47a0      	blx	r4
 800df6c:	b00b      	add	sp, #44	@ 0x2c
 800df6e:	bd30      	pop	{r4, r5, pc}

0800df70 <_ZN8touchgfx3HAL10beginFrameEv>:
 800df70:	4b04      	ldr	r3, [pc, #16]	@ (800df84 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	b123      	cbz	r3, 800df80 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800df76:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800df7a:	f080 0001 	eor.w	r0, r0, #1
 800df7e:	4770      	bx	lr
 800df80:	2001      	movs	r0, #1
 800df82:	4770      	bx	lr
 800df84:	240284a2 	.word	0x240284a2

0800df88 <_ZN8touchgfx3HAL8endFrameEv>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	4604      	mov	r4, r0
 800df8c:	6840      	ldr	r0, [r0, #4]
 800df8e:	6803      	ldr	r3, [r0, #0]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	4798      	blx	r3
 800df94:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800df98:	b113      	cbz	r3, 800dfa0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800df9a:	2301      	movs	r3, #1
 800df9c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800dfa0:	bd10      	pop	{r4, pc}

0800dfa2 <_ZN8touchgfx3HAL10initializeEv>:
 800dfa2:	b510      	push	{r4, lr}
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	f7f4 fce5 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dfaa:	f7f3 fd3b 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800dfae:	6860      	ldr	r0, [r4, #4]
 800dfb0:	6803      	ldr	r3, [r0, #0]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	4798      	blx	r3
 800dfb6:	68e0      	ldr	r0, [r4, #12]
 800dfb8:	6803      	ldr	r3, [r0, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	4798      	blx	r3
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc8:	4718      	bx	r3
	...

0800dfcc <_ZN8touchgfx3HAL4tickEv>:
 800dfcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dfce:	6803      	ldr	r3, [r0, #0]
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	4d5b      	ldr	r5, [pc, #364]	@ (800e140 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800dfd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dfd8:	4798      	blx	r3
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	f000 8095 	beq.w	800e10a <_ZN8touchgfx3HAL4tickEv+0x13e>
 800dfe0:	2001      	movs	r0, #1
 800dfe2:	2600      	movs	r6, #0
 800dfe4:	f7f3 fc84 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800dfe8:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800dfec:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800dff0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800dff4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800dff8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800dffc:	b133      	cbz	r3, 800e00c <_ZN8touchgfx3HAL4tickEv+0x40>
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	4620      	mov	r0, r4
 800e002:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e006:	4798      	blx	r3
 800e008:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800e00c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800e010:	2601      	movs	r6, #1
 800e012:	6862      	ldr	r2, [r4, #4]
 800e014:	f083 0301 	eor.w	r3, r3, #1
 800e018:	702e      	strb	r6, [r5, #0]
 800e01a:	7253      	strb	r3, [r2, #9]
 800e01c:	f005 fc14 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 800e020:	6803      	ldr	r3, [r0, #0]
 800e022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e024:	4798      	blx	r3
 800e026:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e02a:	b90b      	cbnz	r3, 800e030 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e02c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800e030:	f005 fc0a 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 800e034:	6803      	ldr	r3, [r0, #0]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	4798      	blx	r3
 800e03a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e03c:	6803      	ldr	r3, [r0, #0]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	4798      	blx	r3
 800e042:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e046:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800e04a:	3b01      	subs	r3, #1
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e052:	b10a      	cbz	r2, 800e058 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1eb      	bne.n	800e030 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e058:	4a3a      	ldr	r2, [pc, #232]	@ (800e144 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e05a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800e05e:	7813      	ldrb	r3, [r2, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	b25b      	sxtb	r3, r3
 800e064:	4299      	cmp	r1, r3
 800e066:	7013      	strb	r3, [r2, #0]
 800e068:	dc10      	bgt.n	800e08c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e06a:	2300      	movs	r3, #0
 800e06c:	68e0      	ldr	r0, [r4, #12]
 800e06e:	a902      	add	r1, sp, #8
 800e070:	7013      	strb	r3, [r2, #0]
 800e072:	aa03      	add	r2, sp, #12
 800e074:	6803      	ldr	r3, [r0, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	4798      	blx	r3
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d050      	beq.n	800e122 <_ZN8touchgfx3HAL4tickEv+0x156>
 800e080:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e084:	4620      	mov	r0, r4
 800e086:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e08a:	4798      	blx	r3
 800e08c:	2300      	movs	r3, #0
 800e08e:	6960      	ldr	r0, [r4, #20]
 800e090:	f88d 3007 	strb.w	r3, [sp, #7]
 800e094:	b158      	cbz	r0, 800e0ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e096:	6803      	ldr	r3, [r0, #0]
 800e098:	f10d 0107 	add.w	r1, sp, #7
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	4798      	blx	r3
 800e0a0:	b128      	cbz	r0, 800e0ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e0a2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e0a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e0a8:	6803      	ldr	r3, [r0, #0]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	4798      	blx	r3
 800e0ae:	f104 001c 	add.w	r0, r4, #28
 800e0b2:	f013 f813 	bl	80210dc <_ZN8touchgfx8Gestures4tickEv>
 800e0b6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800e0ba:	b30b      	cbz	r3, 800e100 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e0bc:	6920      	ldr	r0, [r4, #16]
 800e0be:	6803      	ldr	r3, [r0, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	4798      	blx	r3
 800e0c4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	b903      	cbnz	r3, 800e0cc <_ZN8touchgfx3HAL4tickEv+0x100>
 800e0ca:	6760      	str	r0, [r4, #116]	@ 0x74
 800e0cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e0ce:	4a1e      	ldr	r2, [pc, #120]	@ (800e148 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e0d0:	1af3      	subs	r3, r6, r3
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d914      	bls.n	800e100 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e0d6:	6920      	ldr	r0, [r4, #16]
 800e0d8:	6803      	ldr	r3, [r0, #0]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	4798      	blx	r3
 800e0de:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e0e0:	2264      	movs	r2, #100	@ 0x64
 800e0e2:	1af3      	subs	r3, r6, r3
 800e0e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e8:	fbb0 f0f3 	udiv	r0, r0, r3
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	dc1d      	bgt.n	800e12c <_ZN8touchgfx3HAL4tickEv+0x160>
 800e0f0:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800e0f4:	6920      	ldr	r0, [r4, #16]
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	6803      	ldr	r3, [r0, #0]
 800e0fa:	69db      	ldr	r3, [r3, #28]
 800e0fc:	4798      	blx	r3
 800e0fe:	6766      	str	r6, [r4, #116]	@ 0x74
 800e100:	f005 fba2 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 800e104:	6803      	ldr	r3, [r0, #0]
 800e106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e108:	4798      	blx	r3
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	4620      	mov	r0, r4
 800e10e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e112:	4798      	blx	r3
 800e114:	2001      	movs	r0, #1
 800e116:	f7f3 fc1b 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e11a:	2300      	movs	r3, #0
 800e11c:	702b      	strb	r3, [r5, #0]
 800e11e:	b004      	add	sp, #16
 800e120:	bd70      	pop	{r4, r5, r6, pc}
 800e122:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e126:	4620      	mov	r0, r4
 800e128:	4798      	blx	r3
 800e12a:	e7af      	b.n	800e08c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e12c:	2863      	cmp	r0, #99	@ 0x63
 800e12e:	bfcb      	itete	gt
 800e130:	2300      	movgt	r3, #0
 800e132:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800e136:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800e13a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800e13e:	e7d9      	b.n	800e0f4 <_ZN8touchgfx3HAL4tickEv+0x128>
 800e140:	240284a8 	.word	0x240284a8
 800e144:	240284a9 	.word	0x240284a9
 800e148:	05f5e100 	.word	0x05f5e100

0800e14c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	4604      	mov	r4, r0
 800e150:	f7f4 fc40 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e154:	2200      	movs	r2, #0
 800e156:	6863      	ldr	r3, [r4, #4]
 800e158:	729a      	strb	r2, [r3, #10]
 800e15a:	bd10      	pop	{r4, pc}

0800e15c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e15c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800e15e:	301c      	adds	r0, #28
 800e160:	f012 bfba 	b.w	80210d8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e164 <_ZN8touchgfx3HAL5touchEll>:
 800e164:	b530      	push	{r4, r5, lr}
 800e166:	b087      	sub	sp, #28
 800e168:	4604      	mov	r4, r0
 800e16a:	a804      	add	r0, sp, #16
 800e16c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e170:	f005 f97c 	bl	801346c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	a906      	add	r1, sp, #24
 800e178:	a803      	add	r0, sp, #12
 800e17a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e17e:	9b05      	ldr	r3, [sp, #20]
 800e180:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e184:	f005 f9c4 	bl	8013510 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e188:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800e18c:	f104 001c 	add.w	r0, r4, #28
 800e190:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e194:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e198:	b189      	cbz	r1, 800e1be <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e19a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	f012 ffa6 	bl	80210f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e1ac:	b128      	cbz	r0, 800e1ba <_ZN8touchgfx3HAL5touchEll+0x56>
 800e1ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e1b2:	6623      	str	r3, [r4, #96]	@ 0x60
 800e1b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e1b8:	6663      	str	r3, [r4, #100]	@ 0x64
 800e1ba:	b007      	add	sp, #28
 800e1bc:	bd30      	pop	{r4, r5, pc}
 800e1be:	f012 ffdb 	bl	8021178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e1c8:	e7f1      	b.n	800e1ae <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e1ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e1ca:	b510      	push	{r4, lr}
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d046      	beq.n	800e25e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e1d0:	ea81 0002 	eor.w	r0, r1, r2
 800e1d4:	07c4      	lsls	r4, r0, #31
 800e1d6:	d508      	bpl.n	800e1ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e1d8:	440b      	add	r3, r1
 800e1da:	3a01      	subs	r2, #1
 800e1dc:	428b      	cmp	r3, r1
 800e1de:	d93e      	bls.n	800e25e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e1e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e1e4:	f801 0b01 	strb.w	r0, [r1], #1
 800e1e8:	e7f8      	b.n	800e1dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e1ea:	07d0      	lsls	r0, r2, #31
 800e1ec:	bf42      	ittt	mi
 800e1ee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e1f2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e1f6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d911      	bls.n	800e222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e1fe:	ea81 0402 	eor.w	r4, r1, r2
 800e202:	4610      	mov	r0, r2
 800e204:	07a4      	lsls	r4, r4, #30
 800e206:	d022      	beq.n	800e24e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e208:	f023 0401 	bic.w	r4, r3, #1
 800e20c:	440c      	add	r4, r1
 800e20e:	428c      	cmp	r4, r1
 800e210:	4602      	mov	r2, r0
 800e212:	d904      	bls.n	800e21e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e214:	8812      	ldrh	r2, [r2, #0]
 800e216:	3002      	adds	r0, #2
 800e218:	f821 2b02 	strh.w	r2, [r1], #2
 800e21c:	e7f7      	b.n	800e20e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	f023 0003 	bic.w	r0, r3, #3
 800e226:	4408      	add	r0, r1
 800e228:	4288      	cmp	r0, r1
 800e22a:	4614      	mov	r4, r2
 800e22c:	d904      	bls.n	800e238 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e22e:	6824      	ldr	r4, [r4, #0]
 800e230:	3204      	adds	r2, #4
 800e232:	f841 4b04 	str.w	r4, [r1], #4
 800e236:	e7f7      	b.n	800e228 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e238:	f003 0303 	and.w	r3, r3, #3
 800e23c:	3a01      	subs	r2, #1
 800e23e:	440b      	add	r3, r1
 800e240:	428b      	cmp	r3, r1
 800e242:	d90c      	bls.n	800e25e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e244:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e248:	f801 0b01 	strb.w	r0, [r1], #1
 800e24c:	e7f8      	b.n	800e240 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e24e:	0790      	lsls	r0, r2, #30
 800e250:	d0e7      	beq.n	800e222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e252:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e256:	3b02      	subs	r3, #2
 800e258:	f821 0b02 	strh.w	r0, [r1], #2
 800e25c:	e7e1      	b.n	800e222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e25e:	2001      	movs	r0, #1
 800e260:	bd10      	pop	{r4, pc}

0800e262 <_ZN8touchgfx3HAL7noTouchEv>:
 800e262:	b510      	push	{r4, lr}
 800e264:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800e268:	4604      	mov	r4, r0
 800e26a:	b153      	cbz	r3, 800e282 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e26c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800e270:	2101      	movs	r1, #1
 800e272:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800e276:	301c      	adds	r0, #28
 800e278:	f012 ff7e 	bl	8021178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e27c:	2300      	movs	r3, #0
 800e27e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e282:	bd10      	pop	{r4, pc}

0800e284 <_ZN8touchgfx8Drawable5setXYEss>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	6803      	ldr	r3, [r0, #0]
 800e288:	4604      	mov	r4, r0
 800e28a:	4615      	mov	r5, r2
 800e28c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e28e:	4798      	blx	r3
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	4629      	mov	r1, r5
 800e294:	4620      	mov	r0, r4
 800e296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e29c:	4718      	bx	r3
	...

0800e2a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2a4:	b085      	sub	sp, #20
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	4699      	mov	r9, r3
 800e2ac:	ad04      	add	r5, sp, #16
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	4690      	mov	r8, r2
 800e2b2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e2b6:	69a0      	ldr	r0, [r4, #24]
 800e2b8:	6806      	ldr	r6, [r0, #0]
 800e2ba:	9501      	str	r5, [sp, #4]
 800e2bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800e2c0:	9500      	str	r5, [sp, #0]
 800e2c2:	6835      	ldr	r5, [r6, #0]
 800e2c4:	47a8      	blx	r5
 800e2c6:	4d10      	ldr	r5, [pc, #64]	@ (800e308 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	f8a5 9000 	strh.w	r9, [r5]
 800e2ce:	f7f5 fc93 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e2d2:	6803      	ldr	r3, [r0, #0]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d6:	4798      	blx	r3
 800e2d8:	b128      	cbz	r0, 800e2e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e2da:	2801      	cmp	r0, #1
 800e2dc:	d00b      	beq.n	800e2f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e2de:	4630      	mov	r0, r6
 800e2e0:	b005      	add	sp, #20
 800e2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2e6:	882b      	ldrh	r3, [r5, #0]
 800e2e8:	fb08 7203 	mla	r2, r8, r3, r7
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e2f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e2f4:	e7f3      	b.n	800e2de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e2f6:	882a      	ldrh	r2, [r5, #0]
 800e2f8:	9b03      	ldr	r3, [sp, #12]
 800e2fa:	fb08 7202 	mla	r2, r8, r2, r7
 800e2fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e302:	1a9a      	subs	r2, r3, r2
 800e304:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800e306:	e7ea      	b.n	800e2de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e308:	2402849e 	.word	0x2402849e

0800e30c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30e:	b08b      	sub	sp, #44	@ 0x2c
 800e310:	4617      	mov	r7, r2
 800e312:	4604      	mov	r4, r0
 800e314:	460e      	mov	r6, r1
 800e316:	461d      	mov	r5, r3
 800e318:	f7f5 fc6e 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e31c:	6803      	ldr	r3, [r0, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	4798      	blx	r3
 800e322:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e326:	9007      	str	r0, [sp, #28]
 800e328:	4631      	mov	r1, r6
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e330:	4b0c      	ldr	r3, [pc, #48]	@ (800e364 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e332:	4620      	mov	r0, r4
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	9306      	str	r3, [sp, #24]
 800e338:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e33c:	9305      	str	r3, [sp, #20]
 800e33e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800e342:	9304      	str	r3, [sp, #16]
 800e344:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e348:	9303      	str	r3, [sp, #12]
 800e34a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e34e:	9302      	str	r3, [sp, #8]
 800e350:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e354:	e9cd 5300 	strd	r5, r3, [sp]
 800e358:	463b      	mov	r3, r7
 800e35a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800e35c:	2200      	movs	r2, #0
 800e35e:	47a8      	blx	r5
 800e360:	b00b      	add	sp, #44	@ 0x2c
 800e362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e364:	2402849e 	.word	0x2402849e

0800e368 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e36c:	4698      	mov	r8, r3
 800e36e:	6803      	ldr	r3, [r0, #0]
 800e370:	b08b      	sub	sp, #44	@ 0x2c
 800e372:	4617      	mov	r7, r2
 800e374:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800e376:	460e      	mov	r6, r1
 800e378:	4b13      	ldr	r3, [pc, #76]	@ (800e3c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e37a:	4604      	mov	r4, r0
 800e37c:	f8b3 9000 	ldrh.w	r9, [r3]
 800e380:	f7f5 fc3a 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e384:	6803      	ldr	r3, [r0, #0]
 800e386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e388:	4798      	blx	r3
 800e38a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e38e:	2200      	movs	r2, #0
 800e390:	4631      	mov	r1, r6
 800e392:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e396:	2302      	movs	r3, #2
 800e398:	4620      	mov	r0, r4
 800e39a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e39e:	2301      	movs	r3, #1
 800e3a0:	9305      	str	r3, [sp, #20]
 800e3a2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e3a6:	9304      	str	r3, [sp, #16]
 800e3a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e3ac:	9303      	str	r3, [sp, #12]
 800e3ae:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e3b2:	9302      	str	r3, [sp, #8]
 800e3b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e3b8:	e9cd 8300 	strd	r8, r3, [sp]
 800e3bc:	463b      	mov	r3, r7
 800e3be:	47a8      	blx	r5
 800e3c0:	b00b      	add	sp, #44	@ 0x2c
 800e3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2402849e 	.word	0x2402849e

0800e3cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e3cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3d0:	4698      	mov	r8, r3
 800e3d2:	6803      	ldr	r3, [r0, #0]
 800e3d4:	b087      	sub	sp, #28
 800e3d6:	460e      	mov	r6, r1
 800e3d8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800e3da:	4617      	mov	r7, r2
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e41c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e3de:	4604      	mov	r4, r0
 800e3e0:	f8b3 9000 	ldrh.w	r9, [r3]
 800e3e4:	f7f5 fc08 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e3e8:	6803      	ldr	r3, [r0, #0]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ec:	4798      	blx	r3
 800e3ee:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800e3f2:	463a      	mov	r2, r7
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3fa:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e3fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800e402:	4620      	mov	r0, r4
 800e404:	9302      	str	r3, [sp, #8]
 800e406:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e40a:	9301      	str	r3, [sp, #4]
 800e40c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	4643      	mov	r3, r8
 800e414:	47a8      	blx	r5
 800e416:	b007      	add	sp, #28
 800e418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e41c:	2402849e 	.word	0x2402849e

0800e420 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	4604      	mov	r4, r0
 800e426:	b08f      	sub	sp, #60	@ 0x3c
 800e428:	4610      	mov	r0, r2
 800e42a:	460d      	mov	r5, r1
 800e42c:	4691      	mov	r9, r2
 800e42e:	461e      	mov	r6, r3
 800e430:	f008 fd06 	bl	8016e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e434:	2800      	cmp	r0, #0
 800e436:	f000 809d 	beq.w	800e574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	4620      	mov	r0, r4
 800e43e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e5d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e442:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e448:	4798      	blx	r3
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	4620      	mov	r0, r4
 800e44e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e5dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e454:	4798      	blx	r3
 800e456:	f8bb 3000 	ldrh.w	r3, [fp]
 800e45a:	4f5c      	ldr	r7, [pc, #368]	@ (800e5cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	f8ba 3000 	ldrh.w	r3, [sl]
 800e462:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e466:	4640      	mov	r0, r8
 800e468:	9302      	str	r3, [sp, #8]
 800e46a:	883b      	ldrh	r3, [r7, #0]
 800e46c:	9303      	str	r3, [sp, #12]
 800e46e:	4b58      	ldr	r3, [pc, #352]	@ (800e5d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e470:	881a      	ldrh	r2, [r3, #0]
 800e472:	9305      	str	r3, [sp, #20]
 800e474:	9204      	str	r2, [sp, #16]
 800e476:	f008 fe33 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e47a:	8038      	strh	r0, [r7, #0]
 800e47c:	4640      	mov	r0, r8
 800e47e:	f008 fe63 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e482:	9b05      	ldr	r3, [sp, #20]
 800e484:	b280      	uxth	r0, r0
 800e486:	8018      	strh	r0, [r3, #0]
 800e488:	4b52      	ldr	r3, [pc, #328]	@ (800e5d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d174      	bne.n	800e57a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e490:	883b      	ldrh	r3, [r7, #0]
 800e492:	f8aa 0000 	strh.w	r0, [sl]
 800e496:	f8ab 3000 	strh.w	r3, [fp]
 800e49a:	4648      	mov	r0, r9
 800e49c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800e4a0:	f008 fcce 	bl	8016e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e4b2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e4b6:	f7ff fee5 	bl	800e284 <_ZN8touchgfx8Drawable5setXYEss>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800e4c0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e4c4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd5c      	ble.n	800e586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e4cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dd58      	ble.n	800e586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e4d4:	462a      	mov	r2, r5
 800e4d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e4d8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e4dc:	6851      	ldr	r1, [r2, #4]
 800e4de:	c303      	stmia	r3!, {r0, r1}
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	a80a      	add	r0, sp, #40	@ 0x28
 800e4e4:	f7ff fb92 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 800e4e8:	4b38      	ldr	r3, [pc, #224]	@ (800e5cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e4f0:	4b37      	ldr	r3, [pc, #220]	@ (800e5d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e4f2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e4f6:	aa0a      	add	r2, sp, #40	@ 0x28
 800e4f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4fc:	910c      	str	r1, [sp, #48]	@ 0x30
 800e4fe:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e502:	ab08      	add	r3, sp, #32
 800e504:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e508:	e883 0003 	stmia.w	r3, {r0, r1}
 800e50c:	4618      	mov	r0, r3
 800e50e:	a90c      	add	r1, sp, #48	@ 0x30
 800e510:	f7ff fb7c 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 800e514:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e516:	2b00      	cmp	r3, #0
 800e518:	d13c      	bne.n	800e594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e51a:	2000      	movs	r0, #0
 800e51c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e520:	2600      	movs	r6, #0
 800e522:	696b      	ldr	r3, [r5, #20]
 800e524:	a908      	add	r1, sp, #32
 800e526:	682a      	ldr	r2, [r5, #0]
 800e528:	4628      	mov	r0, r5
 800e52a:	9305      	str	r3, [sp, #20]
 800e52c:	616e      	str	r6, [r5, #20]
 800e52e:	6892      	ldr	r2, [r2, #8]
 800e530:	4790      	blx	r2
 800e532:	9b05      	ldr	r3, [sp, #20]
 800e534:	4652      	mov	r2, sl
 800e536:	4649      	mov	r1, r9
 800e538:	616b      	str	r3, [r5, #20]
 800e53a:	4628      	mov	r0, r5
 800e53c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e540:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e544:	f7ff fe9e 	bl	800e284 <_ZN8touchgfx8Drawable5setXYEss>
 800e548:	9a01      	ldr	r2, [sp, #4]
 800e54a:	4b23      	ldr	r3, [pc, #140]	@ (800e5d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e54c:	4620      	mov	r0, r4
 800e54e:	801a      	strh	r2, [r3, #0]
 800e550:	9a02      	ldr	r2, [sp, #8]
 800e552:	4b22      	ldr	r3, [pc, #136]	@ (800e5dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e554:	801a      	strh	r2, [r3, #0]
 800e556:	9a03      	ldr	r2, [sp, #12]
 800e558:	4b1c      	ldr	r3, [pc, #112]	@ (800e5cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e55a:	801a      	strh	r2, [r3, #0]
 800e55c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e55e:	9a04      	ldr	r2, [sp, #16]
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e56a:	4798      	blx	r3
 800e56c:	6823      	ldr	r3, [r4, #0]
 800e56e:	4620      	mov	r0, r4
 800e570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e572:	4798      	blx	r3
 800e574:	b00f      	add	sp, #60	@ 0x3c
 800e576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57a:	883b      	ldrh	r3, [r7, #0]
 800e57c:	f8ab 0000 	strh.w	r0, [fp]
 800e580:	f8aa 3000 	strh.w	r3, [sl]
 800e584:	e789      	b.n	800e49a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e586:	462a      	mov	r2, r5
 800e588:	ab0a      	add	r3, sp, #40	@ 0x28
 800e58a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e58e:	6851      	ldr	r1, [r2, #4]
 800e590:	c303      	stmia	r3!, {r0, r1}
 800e592:	e7a9      	b.n	800e4e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e594:	a807      	add	r0, sp, #28
 800e596:	f008 ff19 	bl	80173cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e59a:	4606      	mov	r6, r0
 800e59c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e59e:	6803      	ldr	r3, [r0, #0]
 800e5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a2:	4798      	blx	r3
 800e5a4:	4286      	cmp	r6, r0
 800e5a6:	d1b8      	bne.n	800e51a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e5a8:	f7f5 fb26 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e5ac:	6803      	ldr	r3, [r0, #0]
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	a807      	add	r0, sp, #28
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b4:	9305      	str	r3, [sp, #20]
 800e5b6:	f008 ff09 	bl	80173cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e5ba:	9b05      	ldr	r3, [sp, #20]
 800e5bc:	4601      	mov	r1, r0
 800e5be:	4630      	mov	r0, r6
 800e5c0:	4798      	blx	r3
 800e5c2:	f080 0001 	eor.w	r0, r0, #1
 800e5c6:	b2c0      	uxtb	r0, r0
 800e5c8:	e7a8      	b.n	800e51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e5ca:	bf00      	nop
 800e5cc:	24028498 	.word	0x24028498
 800e5d0:	2402849a 	.word	0x2402849a
 800e5d4:	2402849c 	.word	0x2402849c
 800e5d8:	2402849e 	.word	0x2402849e
 800e5dc:	240284a0 	.word	0x240284a0

0800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e5e0:	4b07      	ldr	r3, [pc, #28]	@ (800e600 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e5e2:	b510      	push	{r4, lr}
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b13b      	cbz	r3, 800e5fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e5ea:	6803      	ldr	r3, [r0, #0]
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5ee:	4798      	blx	r3
 800e5f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e5f2:	4283      	cmp	r3, r0
 800e5f4:	d101      	bne.n	800e5fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e5f6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e5f8:	bd10      	pop	{r4, pc}
 800e5fa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e5fc:	e7fc      	b.n	800e5f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e5fe:	bf00      	nop
 800e600:	240284a2 	.word	0x240284a2

0800e604 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e608:	461d      	mov	r5, r3
 800e60a:	b08a      	sub	sp, #40	@ 0x28
 800e60c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e610:	4690      	mov	r8, r2
 800e612:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e616:	2400      	movs	r4, #0
 800e618:	4607      	mov	r7, r0
 800e61a:	fb06 8505 	mla	r5, r6, r5, r8
 800e61e:	9404      	str	r4, [sp, #16]
 800e620:	f88d 4020 	strb.w	r4, [sp, #32]
 800e624:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e628:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e62c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e630:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e634:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e638:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e63c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e640:	f7ff ffce 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e644:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e64e:	a901      	add	r1, sp, #4
 800e650:	9505      	str	r5, [sp, #20]
 800e652:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e656:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e65a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e65e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e662:	6803      	ldr	r3, [r0, #0]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	4798      	blx	r3
 800e668:	b00a      	add	sp, #40	@ 0x28
 800e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e66e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e66e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e672:	b08b      	sub	sp, #44	@ 0x2c
 800e674:	2400      	movs	r4, #0
 800e676:	4691      	mov	r9, r2
 800e678:	461d      	mov	r5, r3
 800e67a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e67e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e682:	4688      	mov	r8, r1
 800e684:	4607      	mov	r7, r0
 800e686:	9404      	str	r4, [sp, #16]
 800e688:	fb06 9505 	mla	r5, r6, r5, r9
 800e68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e690:	f7ff ffa6 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e694:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e698:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e6a2:	a901      	add	r1, sp, #4
 800e6a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e6a8:	9505      	str	r5, [sp, #20]
 800e6aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e6ae:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e6b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e6b6:	f8cd 8010 	str.w	r8, [sp, #16]
 800e6ba:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e6be:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e6c2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e6c6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e6ca:	6803      	ldr	r3, [r0, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	4798      	blx	r3
 800e6d0:	b00b      	add	sp, #44	@ 0x2c
 800e6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e6d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6dc:	b08a      	sub	sp, #40	@ 0x28
 800e6de:	4698      	mov	r8, r3
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e6e8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e6ec:	2d0b      	cmp	r5, #11
 800e6ee:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e6f2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e6f6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e6fa:	9304      	str	r3, [sp, #16]
 800e6fc:	d137      	bne.n	800e76e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e6fe:	2380      	movs	r3, #128	@ 0x80
 800e700:	f88d 0020 	strb.w	r0, [sp, #32]
 800e704:	4630      	mov	r0, r6
 800e706:	9203      	str	r2, [sp, #12]
 800e708:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e70c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e710:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e714:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e718:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e71c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e720:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e724:	f7ff ff5c 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e728:	2c0b      	cmp	r4, #11
 800e72a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e72e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e732:	bf94      	ite	ls
 800e734:	4b19      	ldrls	r3, [pc, #100]	@ (800e79c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e736:	2100      	movhi	r1, #0
 800e738:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e73c:	bf98      	it	ls
 800e73e:	5d19      	ldrbls	r1, [r3, r4]
 800e740:	fb02 8307 	mla	r3, r2, r7, r8
 800e744:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e748:	10c9      	asrs	r1, r1, #3
 800e74a:	fb01 0003 	mla	r0, r1, r3, r0
 800e74e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e752:	a901      	add	r1, sp, #4
 800e754:	9005      	str	r0, [sp, #20]
 800e756:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e75a:	2300      	movs	r3, #0
 800e75c:	6870      	ldr	r0, [r6, #4]
 800e75e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e762:	6803      	ldr	r3, [r0, #0]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	4798      	blx	r3
 800e768:	b00a      	add	sp, #40	@ 0x28
 800e76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76e:	2d02      	cmp	r5, #2
 800e770:	d109      	bne.n	800e786 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e772:	28ff      	cmp	r0, #255	@ 0xff
 800e774:	d105      	bne.n	800e782 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e776:	f1bc 0f00 	cmp.w	ip, #0
 800e77a:	bf14      	ite	ne
 800e77c:	2340      	movne	r3, #64	@ 0x40
 800e77e:	2320      	moveq	r3, #32
 800e780:	e7be      	b.n	800e700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e782:	2340      	movs	r3, #64	@ 0x40
 800e784:	e7bc      	b.n	800e700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e786:	28ff      	cmp	r0, #255	@ 0xff
 800e788:	d105      	bne.n	800e796 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e78a:	f1bc 0f00 	cmp.w	ip, #0
 800e78e:	bf14      	ite	ne
 800e790:	2304      	movne	r3, #4
 800e792:	2301      	moveq	r3, #1
 800e794:	e7b4      	b.n	800e700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e796:	2304      	movs	r3, #4
 800e798:	e7b2      	b.n	800e700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e79a:	bf00      	nop
 800e79c:	08025f40 	.word	0x08025f40

0800e7a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a4:	b08b      	sub	sp, #44	@ 0x2c
 800e7a6:	461d      	mov	r5, r3
 800e7a8:	2400      	movs	r4, #0
 800e7aa:	4688      	mov	r8, r1
 800e7ac:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e7b0:	4693      	mov	fp, r2
 800e7b2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e7bc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e7c0:	9404      	str	r4, [sp, #16]
 800e7c2:	bf14      	ite	ne
 800e7c4:	2308      	movne	r3, #8
 800e7c6:	2302      	moveq	r3, #2
 800e7c8:	fb05 b50a 	mla	r5, r5, sl, fp
 800e7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7d0:	f7ff ff06 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e7d4:	2e0b      	cmp	r6, #11
 800e7d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e7da:	a901      	add	r1, sp, #4
 800e7dc:	bf98      	it	ls
 800e7de:	4b13      	ldrls	r3, [pc, #76]	@ (800e82c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e7e0:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e7e4:	bf98      	it	ls
 800e7e6:	5d9c      	ldrbls	r4, [r3, r6]
 800e7e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e7ec:	10e4      	asrs	r4, r4, #3
 800e7ee:	f8cd 8010 	str.w	r8, [sp, #16]
 800e7f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e7f6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e7fa:	fb04 0405 	mla	r4, r4, r5, r0
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e804:	2300      	movs	r3, #0
 800e806:	9405      	str	r4, [sp, #20]
 800e808:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e80c:	f88d 9020 	strb.w	r9, [sp, #32]
 800e810:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e814:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e818:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e81c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e820:	6803      	ldr	r3, [r0, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	4798      	blx	r3
 800e826:	b00b      	add	sp, #44	@ 0x2c
 800e828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82c:	08025f40 	.word	0x08025f40

0800e830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e834:	461e      	mov	r6, r3
 800e836:	4b0a      	ldr	r3, [pc, #40]	@ (800e860 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e838:	460f      	mov	r7, r1
 800e83a:	4690      	mov	r8, r2
 800e83c:	881d      	ldrh	r5, [r3, #0]
 800e83e:	f7f5 f9db 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e842:	6803      	ldr	r3, [r0, #0]
 800e844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e846:	4798      	blx	r3
 800e848:	280b      	cmp	r0, #11
 800e84a:	bf96      	itet	ls
 800e84c:	4b05      	ldrls	r3, [pc, #20]	@ (800e864 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e84e:	2400      	movhi	r4, #0
 800e850:	5c1c      	ldrbls	r4, [r3, r0]
 800e852:	fb08 7005 	mla	r0, r8, r5, r7
 800e856:	10e4      	asrs	r4, r4, #3
 800e858:	fb04 6000 	mla	r0, r4, r0, r6
 800e85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e860:	2402849e 	.word	0x2402849e
 800e864:	08025f40 	.word	0x08025f40

0800e868 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e86a:	b08b      	sub	sp, #44	@ 0x2c
 800e86c:	461f      	mov	r7, r3
 800e86e:	4604      	mov	r4, r0
 800e870:	4616      	mov	r6, r2
 800e872:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e876:	2500      	movs	r5, #0
 800e878:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e87c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e880:	9504      	str	r5, [sp, #16]
 800e882:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e886:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e88a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e88e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e892:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e896:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e89a:	f88d 3020 	strb.w	r3, [sp, #32]
 800e89e:	f7ff fe9f 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e8a2:	463a      	mov	r2, r7
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f7ff ffc1 	bl	800e830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e8e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e8b0:	9005      	str	r0, [sp, #20]
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e8b8:	f7f5 f99e 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e8bc:	6803      	ldr	r3, [r0, #0]
 800e8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c0:	4798      	blx	r3
 800e8c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e8c4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e8c8:	a901      	add	r1, sp, #4
 800e8ca:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e8ce:	9304      	str	r3, [sp, #16]
 800e8d0:	6860      	ldr	r0, [r4, #4]
 800e8d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e8d6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e8da:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	4798      	blx	r3
 800e8e4:	b00b      	add	sp, #44	@ 0x2c
 800e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e8:	2402849e 	.word	0x2402849e

0800e8ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ee:	b08d      	sub	sp, #52	@ 0x34
 800e8f0:	2501      	movs	r5, #1
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	466b      	mov	r3, sp
 800e8f6:	9503      	str	r5, [sp, #12]
 800e8f8:	e883 0006 	stmia.w	r3, {r1, r2}
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f8bd 6000 	ldrh.w	r6, [sp]
 800e902:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e906:	9306      	str	r3, [sp, #24]
 800e908:	6803      	ldr	r3, [r0, #0]
 800e90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e90c:	4798      	blx	r3
 800e90e:	463a      	mov	r2, r7
 800e910:	4631      	mov	r1, r6
 800e912:	4603      	mov	r3, r0
 800e914:	4620      	mov	r0, r4
 800e916:	f7ff ff8b 	bl	800e830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e91a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e91c:	9004      	str	r0, [sp, #16]
 800e91e:	9307      	str	r3, [sp, #28]
 800e920:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e924:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e92c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e930:	4b0e      	ldr	r3, [pc, #56]	@ (800e96c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e938:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e93c:	f7f5 f95c 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e940:	6803      	ldr	r3, [r0, #0]
 800e942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e944:	4798      	blx	r3
 800e946:	23ff      	movs	r3, #255	@ 0xff
 800e948:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e94c:	a903      	add	r1, sp, #12
 800e94e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e952:	6860      	ldr	r0, [r4, #4]
 800e954:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e958:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e95c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e960:	6803      	ldr	r3, [r0, #0]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	4798      	blx	r3
 800e966:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e968:	b00d      	add	sp, #52	@ 0x34
 800e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e96c:	2402849e 	.word	0x2402849e

0800e970 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e974:	b08c      	sub	sp, #48	@ 0x30
 800e976:	461e      	mov	r6, r3
 800e978:	2300      	movs	r3, #0
 800e97a:	4604      	mov	r4, r0
 800e97c:	466d      	mov	r5, sp
 800e97e:	9306      	str	r3, [sp, #24]
 800e980:	6803      	ldr	r3, [r0, #0]
 800e982:	e885 0006 	stmia.w	r5, {r1, r2}
 800e986:	2501      	movs	r5, #1
 800e988:	f8bd 7000 	ldrh.w	r7, [sp]
 800e98c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e990:	9503      	str	r5, [sp, #12]
 800e992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e994:	4798      	blx	r3
 800e996:	4642      	mov	r2, r8
 800e998:	4639      	mov	r1, r7
 800e99a:	4603      	mov	r3, r0
 800e99c:	4620      	mov	r0, r4
 800e99e:	f7ff ff47 	bl	800e830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e9a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e9a6:	9004      	str	r0, [sp, #16]
 800e9a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e9ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e9b0:	9607      	str	r6, [sp, #28]
 800e9b2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e9b6:	4b10      	ldr	r3, [pc, #64]	@ (800e9f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e9be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e9c0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e9c4:	f7f5 f918 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 800e9c8:	6803      	ldr	r3, [r0, #0]
 800e9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9cc:	4798      	blx	r3
 800e9ce:	23ff      	movs	r3, #255	@ 0xff
 800e9d0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e9d4:	a903      	add	r1, sp, #12
 800e9d6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e9da:	6860      	ldr	r0, [r4, #4]
 800e9dc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e9e0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e9e4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e9e8:	6803      	ldr	r3, [r0, #0]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	4798      	blx	r3
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	b00c      	add	sp, #48	@ 0x30
 800e9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f6:	bf00      	nop
 800e9f8:	2402849e 	.word	0x2402849e

0800e9fc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	4605      	mov	r5, r0
 800ea02:	ac02      	add	r4, sp, #8
 800ea04:	e884 0006 	stmia.w	r4, {r1, r2}
 800ea08:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800ea0c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800ea10:	f7ff fde6 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea14:	4631      	mov	r1, r6
 800ea16:	4603      	mov	r3, r0
 800ea18:	463a      	mov	r2, r7
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f7ff ff08 	bl	800e830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ea20:	4a05      	ldr	r2, [pc, #20]	@ (800ea38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800ea22:	682b      	ldr	r3, [r5, #0]
 800ea24:	8812      	ldrh	r2, [r2, #0]
 800ea26:	9200      	str	r2, [sp, #0]
 800ea28:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800ea32:	47b0      	blx	r6
 800ea34:	b005      	add	sp, #20
 800ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea38:	2402849e 	.word	0x2402849e

0800ea3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800ea42:	4604      	mov	r4, r0
 800ea44:	b19b      	cbz	r3, 800ea6e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800ea46:	2002      	movs	r0, #2
 800ea48:	f7f2 ffb2 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800ea54:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800ea5e:	f7ff fdbf 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea62:	4601      	mov	r1, r0
 800ea64:	4620      	mov	r0, r4
 800ea66:	462b      	mov	r3, r5
 800ea68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea6c:	4718      	bx	r3
 800ea6e:	bd70      	pop	{r4, r5, r6, pc}

0800ea70 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	4605      	mov	r5, r0
 800ea74:	460c      	mov	r4, r1
 800ea76:	2003      	movs	r0, #3
 800ea78:	b149      	cbz	r1, 800ea8e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800ea7a:	f7f2 ff39 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ea7e:	6928      	ldr	r0, [r5, #16]
 800ea80:	b168      	cbz	r0, 800ea9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800ea82:	6803      	ldr	r3, [r0, #0]
 800ea84:	2101      	movs	r1, #1
 800ea86:	695b      	ldr	r3, [r3, #20]
 800ea88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea8c:	4718      	bx	r3
 800ea8e:	f7f2 ff5f 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800ea92:	6928      	ldr	r0, [r5, #16]
 800ea94:	b118      	cbz	r0, 800ea9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800ea96:	6803      	ldr	r3, [r0, #0]
 800ea98:	4621      	mov	r1, r4
 800ea9a:	695b      	ldr	r3, [r3, #20]
 800ea9c:	e7f4      	b.n	800ea88 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}

0800eaa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	428b      	cmp	r3, r1
 800eaac:	d006      	beq.n	800eabc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800eaae:	6803      	ldr	r3, [r0, #0]
 800eab0:	b929      	cbnz	r1, 800eabe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800eab2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800eab6:	4798      	blx	r3
 800eab8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800eabc:	bd38      	pop	{r3, r4, r5, pc}
 800eabe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800eac2:	e7f8      	b.n	800eab6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800eac4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800eac4:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800eac6:	b510      	push	{r4, lr}
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	4604      	mov	r4, r0
 800eacc:	b95b      	cbnz	r3, 800eae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800eace:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d007      	beq.n	800eae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ead6:	6840      	ldr	r0, [r0, #4]
 800ead8:	f000 f91a 	bl	800ed10 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800eadc:	b118      	cbz	r0, 800eae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800eade:	6862      	ldr	r2, [r4, #4]
 800eae0:	7a53      	ldrb	r3, [r2, #9]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d0fc      	beq.n	800eae0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800eae6:	f7f3 ff6d 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800eaea:	4620      	mov	r0, r4
 800eaec:	2100      	movs	r1, #0
 800eaee:	f7ff ffd7 	bl	800eaa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f7ff fd74 	bl	800e5e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eaf8:	bd10      	pop	{r4, pc}
 800eafa:	bf00      	nop
 800eafc:	240284a2 	.word	0x240284a2

0800eb00 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	4604      	mov	r4, r0
 800eb04:	6803      	ldr	r3, [r0, #0]
 800eb06:	b919      	cbnz	r1, 800eb10 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800eb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb0e:	4718      	bx	r3
 800eb10:	2200      	movs	r2, #0
 800eb12:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800eb16:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800eb1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb1c:	4798      	blx	r3
 800eb1e:	6863      	ldr	r3, [r4, #4]
 800eb20:	2101      	movs	r1, #1
 800eb22:	4605      	mov	r5, r0
 800eb24:	4620      	mov	r0, r4
 800eb26:	7299      	strb	r1, [r3, #10]
 800eb28:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800eb2c:	f7ff ffb8 	bl	800eaa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800eb30:	4628      	mov	r0, r5
 800eb32:	bd70      	pop	{r4, r5, r6, pc}

0800eb34 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800eb34:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800eb38:	1a13      	subs	r3, r2, r0
 800eb3a:	4258      	negs	r0, r3
 800eb3c:	4158      	adcs	r0, r3
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800eb40:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800eb44:	1a9b      	subs	r3, r3, r2
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfdc      	itt	le
 800eb4a:	6882      	ldrle	r2, [r0, #8]
 800eb4c:	189b      	addle	r3, r3, r2
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	bfcc      	ite	gt
 800eb52:	2000      	movgt	r0, #0
 800eb54:	2001      	movle	r0, #1
 800eb56:	4770      	bx	lr

0800eb58 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800eb58:	6902      	ldr	r2, [r0, #16]
 800eb5a:	6843      	ldr	r3, [r0, #4]
 800eb5c:	2024      	movs	r0, #36	@ 0x24
 800eb5e:	fb00 3002 	mla	r0, r0, r2, r3
 800eb62:	4770      	bx	lr

0800eb64 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800eb64:	6803      	ldr	r3, [r0, #0]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	4718      	bx	r3

0800eb6a <_ZN8touchgfx13DMA_Interface7executeEv>:
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	7203      	strb	r3, [r0, #8]
 800eb70:	4604      	mov	r4, r0
 800eb72:	6840      	ldr	r0, [r0, #4]
 800eb74:	6803      	ldr	r3, [r0, #0]
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	4798      	blx	r3
 800eb7a:	6803      	ldr	r3, [r0, #0]
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	2b40      	cmp	r3, #64	@ 0x40
 800eb80:	d00c      	beq.n	800eb9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eb82:	d810      	bhi.n	800eba6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800eb84:	2b04      	cmp	r3, #4
 800eb86:	d01d      	beq.n	800ebc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800eb88:	d804      	bhi.n	800eb94 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d006      	beq.n	800eb9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d02c      	beq.n	800ebec <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800eb92:	bd70      	pop	{r4, r5, r6, pc}
 800eb94:	2b08      	cmp	r3, #8
 800eb96:	d01d      	beq.n	800ebd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800eb98:	2b20      	cmp	r3, #32
 800eb9a:	d1fa      	bne.n	800eb92 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	4620      	mov	r0, r4
 800eba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eba2:	4798      	blx	r3
 800eba4:	e013      	b.n	800ebce <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800eba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebaa:	d0f7      	beq.n	800eb9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ebac:	d804      	bhi.n	800ebb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800ebae:	2b80      	cmp	r3, #128	@ 0x80
 800ebb0:	d0f4      	beq.n	800eb9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ebb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebb6:	e7f0      	b.n	800eb9a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800ebb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebbc:	d0ee      	beq.n	800eb9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ebbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebc2:	e7e5      	b.n	800eb90 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	7f01      	ldrb	r1, [r0, #28]
 800ebc8:	4620      	mov	r0, r4
 800ebca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebcc:	4798      	blx	r3
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebd2:	e006      	b.n	800ebe2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	7f01      	ldrb	r1, [r0, #28]
 800ebd8:	4620      	mov	r0, r4
 800ebda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebdc:	4798      	blx	r3
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebea:	4718      	bx	r3
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	4620      	mov	r0, r4
 800ebf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebf2:	4798      	blx	r3
 800ebf4:	e7f3      	b.n	800ebde <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800ebf6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ebf6:	4770      	bx	lr

0800ebf8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ebf8:	4770      	bx	lr

0800ebfa <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800ebfa:	4770      	bx	lr

0800ebfc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ebfc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800ec00:	b510      	push	{r4, lr}
 800ec02:	1ad2      	subs	r2, r2, r3
 800ec04:	2a00      	cmp	r2, #0
 800ec06:	bfdc      	itt	le
 800ec08:	6884      	ldrle	r4, [r0, #8]
 800ec0a:	1912      	addle	r2, r2, r4
 800ec0c:	2a01      	cmp	r2, #1
 800ec0e:	dd16      	ble.n	800ec3e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800ec10:	6842      	ldr	r2, [r0, #4]
 800ec12:	2424      	movs	r4, #36	@ 0x24
 800ec14:	fb04 2303 	mla	r3, r4, r3, r2
 800ec18:	f101 0220 	add.w	r2, r1, #32
 800ec1c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ec20:	4291      	cmp	r1, r2
 800ec22:	f843 4b04 	str.w	r4, [r3], #4
 800ec26:	d1f9      	bne.n	800ec1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ec28:	780a      	ldrb	r2, [r1, #0]
 800ec2a:	701a      	strb	r2, [r3, #0]
 800ec2c:	68c3      	ldr	r3, [r0, #12]
 800ec2e:	6882      	ldr	r2, [r0, #8]
 800ec30:	f3bf 8f5b 	dmb	ish
 800ec34:	3301      	adds	r3, #1
 800ec36:	429a      	cmp	r2, r3
 800ec38:	bfd8      	it	le
 800ec3a:	1a9b      	suble	r3, r3, r2
 800ec3c:	60c3      	str	r3, [r0, #12]
 800ec3e:	bd10      	pop	{r4, pc}

0800ec40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ec40:	6903      	ldr	r3, [r0, #16]
 800ec42:	6882      	ldr	r2, [r0, #8]
 800ec44:	f3bf 8f5b 	dmb	ish
 800ec48:	3301      	adds	r3, #1
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	bfd8      	it	le
 800ec4e:	1a9b      	suble	r3, r3, r2
 800ec50:	6103      	str	r3, [r0, #16]
 800ec52:	4770      	bx	lr

0800ec54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	460e      	mov	r6, r1
 800ec5a:	6860      	ldr	r0, [r4, #4]
 800ec5c:	6803      	ldr	r3, [r0, #0]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4798      	blx	r3
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d1f9      	bne.n	800ec5a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ec66:	4d0d      	ldr	r5, [pc, #52]	@ (800ec9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ec68:	6828      	ldr	r0, [r5, #0]
 800ec6a:	6803      	ldr	r3, [r0, #0]
 800ec6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec6e:	4798      	blx	r3
 800ec70:	f7f3 feb6 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ec74:	6828      	ldr	r0, [r5, #0]
 800ec76:	2101      	movs	r1, #1
 800ec78:	f7ff ff12 	bl	800eaa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ec7c:	6860      	ldr	r0, [r4, #4]
 800ec7e:	4631      	mov	r1, r6
 800ec80:	6803      	ldr	r3, [r0, #0]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	4798      	blx	r3
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	4620      	mov	r0, r4
 800ec8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8c:	4798      	blx	r3
 800ec8e:	6828      	ldr	r0, [r5, #0]
 800ec90:	6803      	ldr	r3, [r0, #0]
 800ec92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec98:	4718      	bx	r3
 800ec9a:	bf00      	nop
 800ec9c:	240284a4 	.word	0x240284a4

0800eca0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800eca0:	b508      	push	{r3, lr}
 800eca2:	f7f3 fe8f 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800eca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ecaa:	f7f3 be93 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ecae <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	2114      	movs	r1, #20
 800ecb4:	f013 f80f 	bl	8021cd6 <_ZdlPvj>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	bd10      	pop	{r4, pc}

0800ecbc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ecbc:	b570      	push	{r4, r5, r6, lr}
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	6840      	ldr	r0, [r0, #4]
 800ecc2:	6803      	ldr	r3, [r0, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4798      	blx	r3
 800ecc8:	4605      	mov	r5, r0
 800ecca:	b930      	cbnz	r0, 800ecda <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800eccc:	7a23      	ldrb	r3, [r4, #8]
 800ecce:	b123      	cbz	r3, 800ecda <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ecd0:	6860      	ldr	r0, [r4, #4]
 800ecd2:	6803      	ldr	r3, [r0, #0]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	4798      	blx	r3
 800ecd8:	7225      	strb	r5, [r4, #8]
 800ecda:	6860      	ldr	r0, [r4, #4]
 800ecdc:	6803      	ldr	r3, [r0, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4798      	blx	r3
 800ece2:	b928      	cbnz	r0, 800ecf0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	4620      	mov	r0, r4
 800ece8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecee:	4718      	bx	r3
 800ecf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecf4:	f7f3 be7c 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ecf8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ecf8:	b510      	push	{r4, lr}
 800ecfa:	6082      	str	r2, [r0, #8]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	4c03      	ldr	r4, [pc, #12]	@ (800ed0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ed00:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ed04:	e9c0 4100 	strd	r4, r1, [r0]
 800ed08:	bd10      	pop	{r4, pc}
 800ed0a:	bf00      	nop
 800ed0c:	08025f54 	.word	0x08025f54

0800ed10 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ed10:	6840      	ldr	r0, [r0, #4]
 800ed12:	6803      	ldr	r3, [r0, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4718      	bx	r3

0800ed18 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800ed18:	2300      	movs	r3, #0
 800ed1a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800ed1c:	8503      	strh	r3, [r0, #40]	@ 0x28
 800ed1e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800ed20:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ed22:	6980      	ldr	r0, [r0, #24]
 800ed24:	b110      	cbz	r0, 800ed2c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800ed26:	6803      	ldr	r3, [r0, #0]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	4718      	bx	r3
 800ed2c:	4770      	bx	lr

0800ed2e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800ed2e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800ed32:	4770      	bx	lr

0800ed34 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	0e0b      	lsrs	r3, r1, #24
 800ed38:	4604      	mov	r4, r0
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	7783      	strb	r3, [r0, #30]
 800ed3e:	6803      	ldr	r3, [r0, #0]
 800ed40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed42:	4798      	blx	r3
 800ed44:	6803      	ldr	r3, [r0, #0]
 800ed46:	4629      	mov	r1, r5
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	4798      	blx	r3
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed52:	4798      	blx	r3
 800ed54:	61a0      	str	r0, [r4, #24]
 800ed56:	bd38      	pop	{r3, r4, r5, pc}

0800ed58 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800ed58:	7741      	strb	r1, [r0, #29]
 800ed5a:	4770      	bx	lr

0800ed5c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800ed5c:	b530      	push	{r4, r5, lr}
 800ed5e:	460d      	mov	r5, r1
 800ed60:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800ed64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	bd30      	pop	{r4, r5, pc}

0800ed72 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800ed72:	b538      	push	{r3, r4, r5, lr}
 800ed74:	4604      	mov	r4, r0
 800ed76:	1d03      	adds	r3, r0, #4
 800ed78:	6808      	ldr	r0, [r1, #0]
 800ed7a:	2500      	movs	r5, #0
 800ed7c:	6849      	ldr	r1, [r1, #4]
 800ed7e:	c303      	stmia	r3!, {r0, r1}
 800ed80:	6813      	ldr	r3, [r2, #0]
 800ed82:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ed86:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800ed8a:	6853      	ldr	r3, [r2, #4]
 800ed8c:	61a5      	str	r5, [r4, #24]
 800ed8e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800ed92:	f006 f8d9 	bl	8014f48 <_ZN8touchgfx9Matrix3x35resetEv>
 800ed96:	23ff      	movs	r3, #255	@ 0xff
 800ed98:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800ed9c:	7763      	strb	r3, [r4, #29]
 800ed9e:	77a3      	strb	r3, [r4, #30]
 800eda0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800eda4:	6323      	str	r3, [r4, #48]	@ 0x30
 800eda6:	2301      	movs	r3, #1
 800eda8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800edac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800edb0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800edb0:	ee70 7a41 	vsub.f32	s15, s0, s2
 800edb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800edbc:	4605      	mov	r5, r0
 800edbe:	ed2d 8b0a 	vpush	{d8-d12}
 800edc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc6:	b086      	sub	sp, #24
 800edc8:	eeb0 ba40 	vmov.f32	s22, s0
 800edcc:	6802      	ldr	r2, [r0, #0]
 800edce:	eef0 ba60 	vmov.f32	s23, s1
 800edd2:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800edd6:	eef0 aa41 	vmov.f32	s21, s2
 800edda:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800eddc:	eeb0 aa61 	vmov.f32	s20, s3
 800ede0:	eeb0 ca42 	vmov.f32	s24, s4
 800ede4:	eef0 ca62 	vmov.f32	s25, s5
 800ede8:	d112      	bne.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800edea:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800edee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800edf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf6:	d10b      	bne.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800edf8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800edfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800edfe:	3901      	subs	r1, #1
 800ee00:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ee04:	b006      	add	sp, #24
 800ee06:	ecbd 8b0a 	vpop	{d8-d12}
 800ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	4710      	bx	r2
 800ee10:	23ff      	movs	r3, #255	@ 0xff
 800ee12:	4628      	mov	r0, r5
 800ee14:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800ee18:	77ab      	strb	r3, [r5, #30]
 800ee1a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ee1c:	4798      	blx	r3
 800ee1e:	eeb0 0a4b 	vmov.f32	s0, s22
 800ee22:	eef0 0a6b 	vmov.f32	s1, s23
 800ee26:	4604      	mov	r4, r0
 800ee28:	4640      	mov	r0, r8
 800ee2a:	f006 f93c 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ee2e:	eef0 8a40 	vmov.f32	s17, s0
 800ee32:	ed8d 0a00 	vstr	s0, [sp]
 800ee36:	eeb0 0a6a 	vmov.f32	s0, s21
 800ee3a:	eef0 9a60 	vmov.f32	s19, s1
 800ee3e:	edcd 0a01 	vstr	s1, [sp, #4]
 800ee42:	4640      	mov	r0, r8
 800ee44:	eef0 0a4a 	vmov.f32	s1, s20
 800ee48:	f006 f92d 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ee4c:	eef4 8a40 	vcmp.f32	s17, s0
 800ee50:	eeb0 8a40 	vmov.f32	s16, s0
 800ee54:	ed8d 0a02 	vstr	s0, [sp, #8]
 800ee58:	eeb0 9a60 	vmov.f32	s18, s1
 800ee5c:	edcd 0a03 	vstr	s1, [sp, #12]
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	eef4 9a60 	vcmp.f32	s19, s1
 800ee68:	bf0c      	ite	eq
 800ee6a:	2301      	moveq	r3, #1
 800ee6c:	2300      	movne	r3, #0
 800ee6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee72:	eef4 8a40 	vcmp.f32	s17, s0
 800ee76:	7463      	strb	r3, [r4, #17]
 800ee78:	bf0c      	ite	eq
 800ee7a:	2301      	moveq	r3, #1
 800ee7c:	2300      	movne	r3, #0
 800ee7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee82:	74a3      	strb	r3, [r4, #18]
 800ee84:	d024      	beq.n	800eed0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800ee86:	eef4 9a60 	vcmp.f32	s19, s1
 800ee8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8e:	d01f      	beq.n	800eed0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800ee90:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800ee94:	4640      	mov	r0, r8
 800ee96:	ee7a aacb 	vsub.f32	s21, s21, s22
 800ee9a:	eeb0 0a4b 	vmov.f32	s0, s22
 800ee9e:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800eea2:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800eea6:	eef0 0a6b 	vmov.f32	s1, s23
 800eeaa:	eea7 0acc 	vfms.f32	s0, s15, s24
 800eeae:	eeec 0a87 	vfma.f32	s1, s25, s14
 800eeb2:	f006 f8f8 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eeb6:	ed8d 0a04 	vstr	s0, [sp, #16]
 800eeba:	ee30 0a68 	vsub.f32	s0, s0, s17
 800eebe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eec2:	edcd 0a05 	vstr	s1, [sp, #20]
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	d121      	bne.n	800ef10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800eecc:	2301      	movs	r3, #1
 800eece:	74a3      	strb	r3, [r4, #18]
 800eed0:	7c63      	ldrb	r3, [r4, #17]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d051      	beq.n	800ef7a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800eed6:	ee39 7a69 	vsub.f32	s14, s18, s19
 800eeda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800efd0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800eede:	eef4 9ac9 	vcmpe.f32	s19, s18
 800eee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeea:	edc4 7a08 	vstr	s15, [r4, #32]
 800eeee:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800eef2:	ee17 3a90 	vmov	r3, s15
 800eef6:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800eefa:	b21a      	sxth	r2, r3
 800eefc:	ee17 3a90 	vmov	r3, s15
 800ef00:	bf48      	it	mi
 800ef02:	8122      	strhmi	r2, [r4, #8]
 800ef04:	b21b      	sxth	r3, r3
 800ef06:	bf56      	itet	pl
 800ef08:	80e2      	strhpl	r2, [r4, #6]
 800ef0a:	80e3      	strhmi	r3, [r4, #6]
 800ef0c:	8123      	strhpl	r3, [r4, #8]
 800ef0e:	e02c      	b.n	800ef6a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ef10:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800ef14:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800ef18:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef1c:	edc4 7a05 	vstr	s15, [r4, #20]
 800ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef24:	d102      	bne.n	800ef2c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800ef26:	2301      	movs	r3, #1
 800ef28:	7463      	strb	r3, [r4, #17]
 800ef2a:	e7d1      	b.n	800eed0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800ef2c:	eeb0 7a69 	vmov.f32	s14, s19
 800ef30:	ee39 9a69 	vsub.f32	s18, s18, s19
 800ef34:	ee38 8a68 	vsub.f32	s16, s16, s17
 800ef38:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800ef3c:	ed84 7a06 	vstr	s14, [r4, #24]
 800ef40:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800ef44:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ef48:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800efd4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800ef4c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ef50:	ed84 8a07 	vstr	s16, [r4, #28]
 800ef54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef5c:	edc4 7a08 	vstr	s15, [r4, #32]
 800ef60:	d503      	bpl.n	800ef6a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ef62:	eeb1 8a48 	vneg.f32	s16, s16
 800ef66:	ed84 8a07 	vstr	s16, [r4, #28]
 800ef6a:	60e7      	str	r7, [r4, #12]
 800ef6c:	7426      	strb	r6, [r4, #16]
 800ef6e:	61ac      	str	r4, [r5, #24]
 800ef70:	b006      	add	sp, #24
 800ef72:	ecbd 8b0a 	vpop	{d8-d12}
 800ef76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7a:	7ca3      	ldrb	r3, [r4, #18]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0f4      	beq.n	800ef6a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ef80:	ee38 7a68 	vsub.f32	s14, s16, s17
 800ef84:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800efd0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800ef88:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ef8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef94:	edc4 7a08 	vstr	s15, [r4, #32]
 800ef98:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ef9c:	ee17 3a90 	vmov	r3, s15
 800efa0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800efa4:	b21a      	sxth	r2, r3
 800efa6:	ee17 3a90 	vmov	r3, s15
 800efaa:	bf48      	it	mi
 800efac:	8122      	strhmi	r2, [r4, #8]
 800efae:	b21b      	sxth	r3, r3
 800efb0:	bf56      	itet	pl
 800efb2:	80e2      	strhpl	r2, [r4, #6]
 800efb4:	80e3      	strhmi	r3, [r4, #6]
 800efb6:	8123      	strhpl	r3, [r4, #8]
 800efb8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800efbc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800efc0:	1a9b      	subs	r3, r3, r2
 800efc2:	ee07 3a90 	vmov	s15, r3
 800efc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efca:	edc4 7a07 	vstr	s15, [r4, #28]
 800efce:	e7cc      	b.n	800ef6a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800efd0:	447ffffe 	.word	0x447ffffe
 800efd4:	44800000 	.word	0x44800000

0800efd8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800efd8:	b510      	push	{r4, lr}
 800efda:	ed2d 8b02 	vpush	{d8}
 800efde:	eef0 8a62 	vmov.f32	s17, s5
 800efe2:	2100      	movs	r1, #0
 800efe4:	4604      	mov	r4, r0
 800efe6:	eeb0 8a42 	vmov.f32	s16, s4
 800efea:	f012 fc05 	bl	80217f8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800efee:	eef0 7a68 	vmov.f32	s15, s17
 800eff2:	6823      	ldr	r3, [r4, #0]
 800eff4:	4620      	mov	r0, r4
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800effc:	ee17 2a90 	vmov	r2, s15
 800f000:	eef0 7a48 	vmov.f32	s15, s16
 800f004:	ecbd 8b02 	vpop	{d8}
 800f008:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f010:	ee17 1a90 	vmov	r1, s15
 800f014:	4718      	bx	r3

0800f016 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800f016:	b510      	push	{r4, lr}
 800f018:	ed2d 8b02 	vpush	{d8}
 800f01c:	eef0 8a63 	vmov.f32	s17, s7
 800f020:	2100      	movs	r1, #0
 800f022:	4604      	mov	r4, r0
 800f024:	eeb0 8a43 	vmov.f32	s16, s6
 800f028:	f012 fca8 	bl	802197c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800f02c:	eef0 7a68 	vmov.f32	s15, s17
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	4620      	mov	r0, r4
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f03a:	ee17 2a90 	vmov	r2, s15
 800f03e:	eef0 7a48 	vmov.f32	s15, s16
 800f042:	ecbd 8b02 	vpop	{d8}
 800f046:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f04e:	ee17 1a90 	vmov	r1, s15
 800f052:	4718      	bx	r3

0800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800f054:	b513      	push	{r0, r1, r4, lr}
 800f056:	4604      	mov	r4, r0
 800f058:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f05a:	f006 f824 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f05e:	eef0 7a60 	vmov.f32	s15, s1
 800f062:	4620      	mov	r0, r4
 800f064:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f068:	ee17 2a90 	vmov	r2, s15
 800f06c:	eef0 7a40 	vmov.f32	s15, s0
 800f070:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f074:	ee17 1a90 	vmov	r1, s15
 800f078:	b002      	add	sp, #8
 800f07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f07e:	f012 bb15 	b.w	80216ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800f082:	b513      	push	{r0, r1, r4, lr}
 800f084:	4604      	mov	r4, r0
 800f086:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f088:	f006 f80d 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f08c:	eef0 7a60 	vmov.f32	s15, s1
 800f090:	4620      	mov	r0, r4
 800f092:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f096:	ee17 2a90 	vmov	r2, s15
 800f09a:	eef0 7a40 	vmov.f32	s15, s0
 800f09e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f0a2:	ee17 1a90 	vmov	r1, s15
 800f0a6:	b002      	add	sp, #8
 800f0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0ac:	f012 bb4b 	b.w	8021746 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800f0b0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800f0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0b2:	2400      	movs	r4, #0
 800f0b4:	9f07      	ldr	r7, [sp, #28]
 800f0b6:	f04f 0e01 	mov.w	lr, #1
 800f0ba:	4626      	mov	r6, r4
 800f0bc:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800f0c0:	4463      	add	r3, ip
 800f0c2:	4563      	cmp	r3, ip
 800f0c4:	d02d      	beq.n	800f122 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800f0c6:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800f0ca:	2d06      	cmp	r5, #6
 800f0cc:	d8f9      	bhi.n	800f0c2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f0ce:	fa0e f505 	lsl.w	r5, lr, r5
 800f0d2:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800f0d6:	d10d      	bne.n	800f0f4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800f0d8:	f015 0f10 	tst.w	r5, #16
 800f0dc:	d117      	bne.n	800f10e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800f0de:	072d      	lsls	r5, r5, #28
 800f0e0:	d5ef      	bpl.n	800f0c2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f0e2:	3801      	subs	r0, #1
 800f0e4:	b91e      	cbnz	r6, 800f0ee <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800f0e6:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800f0ea:	682d      	ldr	r5, [r5, #0]
 800f0ec:	600d      	str	r5, [r1, #0]
 800f0ee:	b96c      	cbnz	r4, 800f10c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f0f0:	2601      	movs	r6, #1
 800f0f2:	e7e6      	b.n	800f0c2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f0f4:	b926      	cbnz	r6, 800f100 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800f0f6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f0fa:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f0fe:	600b      	str	r3, [r1, #0]
 800f100:	b924      	cbnz	r4, 800f10c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f102:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f106:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f10e:	3801      	subs	r0, #1
 800f110:	b91c      	cbnz	r4, 800f11a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800f112:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800f116:	6824      	ldr	r4, [r4, #0]
 800f118:	6014      	str	r4, [r2, #0]
 800f11a:	2e00      	cmp	r6, #0
 800f11c:	d1f6      	bne.n	800f10c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f11e:	2401      	movs	r4, #1
 800f120:	e7cf      	b.n	800f0c2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f122:	b90e      	cbnz	r6, 800f128 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800f124:	2300      	movs	r3, #0
 800f126:	600b      	str	r3, [r1, #0]
 800f128:	2c00      	cmp	r4, #0
 800f12a:	d1ef      	bne.n	800f10c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f12c:	2300      	movs	r3, #0
 800f12e:	e7ec      	b.n	800f10a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800f130 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	ed2d 8b0a 	vpush	{d8-d12}
 800f136:	eef0 ba40 	vmov.f32	s23, s0
 800f13a:	4604      	mov	r4, r0
 800f13c:	eeb0 ca60 	vmov.f32	s24, s1
 800f140:	460d      	mov	r5, r1
 800f142:	eef0 aa41 	vmov.f32	s21, s2
 800f146:	eeb0 ba61 	vmov.f32	s22, s3
 800f14a:	eeb0 9a42 	vmov.f32	s18, s4
 800f14e:	eef0 9a62 	vmov.f32	s19, s5
 800f152:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800f156:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800f15a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800f15e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800f162:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800f166:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800f16a:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800f16e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f172:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800f176:	f012 fdd9 	bl	8021d2c <sqrtf>
 800f17a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	d12e      	bne.n	800f1e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800f184:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800f188:	ee39 7acb 	vsub.f32	s14, s19, s22
 800f18c:	eeb0 8a6a 	vmov.f32	s16, s21
 800f190:	eef0 8a4b 	vmov.f32	s17, s22
 800f194:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800f198:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800f19c:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800f1a0:	eee7 8aca 	vfms.f32	s17, s15, s20
 800f1a4:	2d02      	cmp	r5, #2
 800f1a6:	dc2f      	bgt.n	800f208 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800f1a8:	3501      	adds	r5, #1
 800f1aa:	eef0 1a4b 	vmov.f32	s3, s22
 800f1ae:	eeb0 1a6a 	vmov.f32	s2, s21
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	eef0 2a68 	vmov.f32	s5, s17
 800f1ba:	eeb0 2a48 	vmov.f32	s4, s16
 800f1be:	eef0 0a4c 	vmov.f32	s1, s24
 800f1c2:	eeb0 0a6b 	vmov.f32	s0, s23
 800f1c6:	f7ff ffb3 	bl	800f130 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f1ca:	eef0 0a68 	vmov.f32	s1, s17
 800f1ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7ff ff55 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f1d8:	eeb0 ba68 	vmov.f32	s22, s17
 800f1dc:	eef0 aa48 	vmov.f32	s21, s16
 800f1e0:	e7b9      	b.n	800f156 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800f1e2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800f1e6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f1ea:	ee78 8acc 	vsub.f32	s17, s17, s24
 800f1ee:	ee28 7a27 	vmul.f32	s14, s16, s15
 800f1f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f1f6:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800f1fa:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800f1fe:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800f202:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800f206:	e7cd      	b.n	800f1a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800f208:	eef0 0a68 	vmov.f32	s1, s17
 800f20c:	4620      	mov	r0, r4
 800f20e:	eeb0 0a48 	vmov.f32	s0, s16
 800f212:	f7ff ff36 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f216:	ecbd 8b0a 	vpop	{d8-d12}
 800f21a:	bd38      	pop	{r3, r4, r5, pc}

0800f21c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	ed2d 8b0a 	vpush	{d8-d12}
 800f222:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800f226:	4604      	mov	r4, r0
 800f228:	eeb0 ca40 	vmov.f32	s24, s0
 800f22c:	2b02      	cmp	r3, #2
 800f22e:	eeb0 9a60 	vmov.f32	s18, s1
 800f232:	eef0 9a41 	vmov.f32	s19, s2
 800f236:	eef0 8a61 	vmov.f32	s17, s3
 800f23a:	eeb0 ba42 	vmov.f32	s22, s4
 800f23e:	eef0 ba62 	vmov.f32	s23, s5
 800f242:	eeb0 aa43 	vmov.f32	s20, s6
 800f246:	eef0 aa63 	vmov.f32	s21, s7
 800f24a:	eeb0 8a44 	vmov.f32	s16, s8
 800f24e:	eef0 ca64 	vmov.f32	s25, s9
 800f252:	d12c      	bne.n	800f2ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800f254:	eef0 0a62 	vmov.f32	s1, s5
 800f258:	eeb0 0a42 	vmov.f32	s0, s4
 800f25c:	f7ff ff11 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f260:	ee79 9acb 	vsub.f32	s19, s19, s22
 800f264:	ee7a caec 	vsub.f32	s25, s21, s25
 800f268:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800f26c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f270:	ee69 9aac 	vmul.f32	s19, s19, s25
 800f274:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f278:	eef4 9ac8 	vcmpe.f32	s19, s16
 800f27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f280:	db0f      	blt.n	800f2a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800f282:	2101      	movs	r1, #1
 800f284:	eef0 2a6a 	vmov.f32	s5, s21
 800f288:	eeb0 2a4a 	vmov.f32	s4, s20
 800f28c:	4620      	mov	r0, r4
 800f28e:	eef0 1a6b 	vmov.f32	s3, s23
 800f292:	eeb0 1a4b 	vmov.f32	s2, s22
 800f296:	eef0 0a49 	vmov.f32	s1, s18
 800f29a:	eeb0 0a4c 	vmov.f32	s0, s24
 800f29e:	f7ff ff47 	bl	800f130 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f2a2:	eef0 0a6a 	vmov.f32	s1, s21
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	eeb0 0a4a 	vmov.f32	s0, s20
 800f2ac:	e035      	b.n	800f31a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d138      	bne.n	800f324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f2b2:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800f2b6:	ee33 6a48 	vsub.f32	s12, s6, s16
 800f2ba:	ee71 7a42 	vsub.f32	s15, s2, s4
 800f2be:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800f2c2:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800f2c6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f2ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	d027      	beq.n	800f324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f2d4:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800f2d8:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800f2dc:	eea4 8a83 	vfma.f32	s16, s9, s6
 800f2e0:	eee1 8a22 	vfma.f32	s17, s2, s5
 800f2e4:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800f2e8:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800f2ec:	eee6 7a28 	vfma.f32	s15, s12, s17
 800f2f0:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800f2f4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800f2f8:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800f2fc:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800f300:	ee3c ca40 	vsub.f32	s24, s24, s0
 800f304:	ee39 9a60 	vsub.f32	s18, s18, s1
 800f308:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f30c:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800f310:	eef4 7ac9 	vcmpe.f32	s15, s18
 800f314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f318:	db04      	blt.n	800f324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f31a:	f7ff feb2 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f31e:	ecbd 8b0a 	vpop	{d8-d12}
 800f322:	bd10      	pop	{r4, pc}
 800f324:	eef0 0a6b 	vmov.f32	s1, s23
 800f328:	4620      	mov	r0, r4
 800f32a:	eeb0 0a4b 	vmov.f32	s0, s22
 800f32e:	f7ff fea8 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f332:	e7b6      	b.n	800f2a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800f334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800f334:	b510      	push	{r4, lr}
 800f336:	ed2d 8b0c 	vpush	{d8-d13}
 800f33a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800f33e:	4604      	mov	r4, r0
 800f340:	eeb0 9a40 	vmov.f32	s18, s0
 800f344:	eef0 9a60 	vmov.f32	s19, s1
 800f348:	eef0 aa41 	vmov.f32	s21, s2
 800f34c:	eeb0 ba61 	vmov.f32	s22, s3
 800f350:	b933      	cbnz	r3, 800f360 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800f352:	f7ff fe96 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f356:	eef0 0a4b 	vmov.f32	s1, s22
 800f35a:	eeb0 0a6a 	vmov.f32	s0, s21
 800f35e:	e015      	b.n	800f38c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800f360:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f364:	2b02      	cmp	r3, #2
 800f366:	ee71 8a40 	vsub.f32	s17, s2, s0
 800f36a:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800f36e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f372:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f376:	d10f      	bne.n	800f398 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800f378:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f37c:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f380:	f7ff fe7f 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f384:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800f388:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800f38c:	4620      	mov	r0, r4
 800f38e:	f7ff fe78 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f392:	ecbd 8b0c 	vpop	{d8-d13}
 800f396:	bd10      	pop	{r4, pc}
 800f398:	f7ff fe73 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f39c:	eef0 0a69 	vmov.f32	s1, s19
 800f3a0:	eeb0 0a49 	vmov.f32	s0, s18
 800f3a4:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800f4d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800f3a8:	eeb1 aa68 	vneg.f32	s20, s17
 800f3ac:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f4d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800f3b0:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3ba:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f4dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800f3be:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f4e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800f3c2:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f4e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800f3c6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f3ca:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f3ce:	f7ff fe58 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3d2:	eef0 0a69 	vmov.f32	s1, s19
 800f3d6:	eeb0 0a49 	vmov.f32	s0, s18
 800f3da:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f4e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800f3de:	4620      	mov	r0, r4
 800f3e0:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3e4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3e8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f3ec:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f3f0:	f7ff fe47 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3f4:	eef0 0a69 	vmov.f32	s1, s19
 800f3f8:	eeb0 0a49 	vmov.f32	s0, s18
 800f3fc:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f4ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800f400:	4620      	mov	r0, r4
 800f402:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f406:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f40a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f40e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f412:	f7ff fe36 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f416:	eef0 0a69 	vmov.f32	s1, s19
 800f41a:	eeb0 0a49 	vmov.f32	s0, s18
 800f41e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f4f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800f422:	4620      	mov	r0, r4
 800f424:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f428:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f42c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f430:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f434:	f7ff fe25 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f438:	ee79 0a88 	vadd.f32	s1, s19, s16
 800f43c:	ee39 0a28 	vadd.f32	s0, s18, s17
 800f440:	4620      	mov	r0, r4
 800f442:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f446:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f44a:	f7ff fe1a 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f44e:	eef0 0a69 	vmov.f32	s1, s19
 800f452:	eeb0 0a49 	vmov.f32	s0, s18
 800f456:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f4f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800f45a:	4620      	mov	r0, r4
 800f45c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f460:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f464:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f468:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f46c:	f7ff fe09 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f470:	eef0 0a69 	vmov.f32	s1, s19
 800f474:	eeb0 0a49 	vmov.f32	s0, s18
 800f478:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f4f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800f47c:	4620      	mov	r0, r4
 800f47e:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f482:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f486:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f48a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f48e:	f7ff fdf8 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f492:	eef0 0a69 	vmov.f32	s1, s19
 800f496:	eeb0 0a49 	vmov.f32	s0, s18
 800f49a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f4fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800f49e:	4620      	mov	r0, r4
 800f4a0:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f4a4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f4a8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f4ac:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f4b0:	f7ff fde7 	bl	800f082 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f4b4:	eef0 0a69 	vmov.f32	s1, s19
 800f4b8:	eeb0 0a49 	vmov.f32	s0, s18
 800f4bc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f500 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f4c6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f4ca:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f4ce:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f4d2:	e73e      	b.n	800f352 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800f4d4:	3d23d70a 	.word	0x3d23d70a
 800f4d8:	3e8f5c29 	.word	0x3e8f5c29
 800f4dc:	3f19999a 	.word	0x3f19999a
 800f4e0:	3f4ccccd 	.word	0x3f4ccccd
 800f4e4:	3f75c28f 	.word	0x3f75c28f
 800f4e8:	3e4ccccd 	.word	0x3e4ccccd
 800f4ec:	3ecccccd 	.word	0x3ecccccd
 800f4f0:	3f3851ec 	.word	0x3f3851ec
 800f4f4:	3fa3d70a 	.word	0x3fa3d70a
 800f4f8:	3fcccccd 	.word	0x3fcccccd
 800f4fc:	3fe66666 	.word	0x3fe66666
 800f500:	3ffae148 	.word	0x3ffae148

0800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	ed2d 8b06 	vpush	{d8-d10}
 800f50a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f50e:	eef0 aa40 	vmov.f32	s21, s0
 800f512:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f516:	4604      	mov	r4, r0
 800f518:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f51c:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f520:	eeb0 aa60 	vmov.f32	s20, s1
 800f524:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f528:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f52c:	f012 fbfe 	bl	8021d2c <sqrtf>
 800f530:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	dd36      	ble.n	800f5a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f53a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f53e:	2600      	movs	r6, #0
 800f540:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f544:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f548:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f54c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f550:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f554:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f558:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f55c:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f560:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f564:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f568:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f56c:	b1fd      	cbz	r5, 800f5ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f56e:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f572:	eef0 0a49 	vmov.f32	s1, s18
 800f576:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f57a:	eeb0 0a69 	vmov.f32	s0, s19
 800f57e:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f582:	4620      	mov	r0, r4
 800f584:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f588:	f7ff fd64 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f58c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f590:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f594:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f598:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f59c:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f5a0:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f5a4:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f5a8:	ecbd 8b06 	vpop	{d8-d10}
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f5b2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f5b6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f5ba:	b16b      	cbz	r3, 800f5d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f5bc:	eef0 1a49 	vmov.f32	s3, s18
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	eeb0 1a69 	vmov.f32	s2, s19
 800f5c6:	eef0 0a62 	vmov.f32	s1, s5
 800f5ca:	eeb0 0a42 	vmov.f32	s0, s4
 800f5ce:	f7ff feb1 	bl	800f334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f5d2:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f5d6:	e7db      	b.n	800f590 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f5d8:	eef0 4a48 	vmov.f32	s9, s16
 800f5dc:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f5e0:	eeb0 4a68 	vmov.f32	s8, s17
 800f5e4:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f5e8:	eef0 3a49 	vmov.f32	s7, s18
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	eeb0 3a69 	vmov.f32	s6, s19
 800f5f2:	f7ff fe13 	bl	800f21c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f5f6:	e7cb      	b.n	800f590 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f5f8:	ee07 2a90 	vmov	s15, r2
 800f5fc:	ee07 1a10 	vmov	s14, r1
 800f600:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f604:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f618 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f608:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f60c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f610:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f614:	f7ff bf76 	b.w	800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f618:	3d000000 	.word	0x3d000000

0800f61c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	ed2d 8b02 	vpush	{d8}
 800f622:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f626:	4604      	mov	r4, r0
 800f628:	b31d      	cbz	r5, 800f672 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f62a:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f62e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f632:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f636:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f63a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f63e:	eef0 0a68 	vmov.f32	s1, s17
 800f642:	f7ff fd07 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f646:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f64a:	eef0 1a48 	vmov.f32	s3, s16
 800f64e:	4620      	mov	r0, r4
 800f650:	eeb0 0a41 	vmov.f32	s0, s2
 800f654:	eef0 0a68 	vmov.f32	s1, s17
 800f658:	f7ff fe6c 	bl	800f334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f65c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f660:	eef0 1a68 	vmov.f32	s3, s17
 800f664:	4620      	mov	r0, r4
 800f666:	eef0 0a48 	vmov.f32	s1, s16
 800f66a:	eeb0 0a41 	vmov.f32	s0, s2
 800f66e:	f7ff fe61 	bl	800f334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f672:	4628      	mov	r0, r5
 800f674:	ecbd 8b02 	vpop	{d8}
 800f678:	bd38      	pop	{r3, r4, r5, pc}

0800f67a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f67a:	b510      	push	{r4, lr}
 800f67c:	ed2d 8b02 	vpush	{d8}
 800f680:	4604      	mov	r4, r0
 800f682:	eeb0 8a40 	vmov.f32	s16, s0
 800f686:	eef0 8a60 	vmov.f32	s17, s1
 800f68a:	f7ff ffc7 	bl	800f61c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f68e:	b9d0      	cbnz	r0, 800f6c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f690:	4620      	mov	r0, r4
 800f692:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f696:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f69a:	eef0 0a68 	vmov.f32	s1, s17
 800f69e:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f6a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f6a6:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f6aa:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f6ae:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f6b2:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f6b6:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f6ba:	f7ff fdaf 	bl	800f21c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f6be:	2001      	movs	r0, #1
 800f6c0:	ecbd 8b02 	vpop	{d8}
 800f6c4:	bd10      	pop	{r4, pc}
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	e7fa      	b.n	800f6c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f6ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f6ca:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f6ce:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f6d2:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f6d6:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f6da:	f7ff be2b 	b.w	800f334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f6e0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	b089      	sub	sp, #36	@ 0x24
 800f6e6:	461c      	mov	r4, r3
 800f6e8:	4682      	mov	sl, r0
 800f6ea:	4615      	mov	r5, r2
 800f6ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f6f0:	f10d 0820 	add.w	r8, sp, #32
 800f6f4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f6f6:	9304      	str	r3, [sp, #16]
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	9105      	str	r1, [sp, #20]
 800f6fc:	9306      	str	r3, [sp, #24]
 800f6fe:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f702:	9b04      	ldr	r3, [sp, #16]
 800f704:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f708:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f70c:	9b05      	ldr	r3, [sp, #20]
 800f70e:	429d      	cmp	r5, r3
 800f710:	d96d      	bls.n	800f7ee <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f712:	3d01      	subs	r5, #1
 800f714:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f718:	2b06      	cmp	r3, #6
 800f71a:	d8f7      	bhi.n	800f70c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f71c:	a201      	add	r2, pc, #4	@ (adr r2, 800f724 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f722:	bf00      	nop
 800f724:	0800f743 	.word	0x0800f743
 800f728:	0800f70d 	.word	0x0800f70d
 800f72c:	0800f741 	.word	0x0800f741
 800f730:	0800f765 	.word	0x0800f765
 800f734:	0800f765 	.word	0x0800f765
 800f738:	0800f769 	.word	0x0800f769
 800f73c:	0800f7a9 	.word	0x0800f7a9
 800f740:	3c02      	subs	r4, #2
 800f742:	4650      	mov	r0, sl
 800f744:	9400      	str	r4, [sp, #0]
 800f746:	462b      	mov	r3, r5
 800f748:	4642      	mov	r2, r8
 800f74a:	a906      	add	r1, sp, #24
 800f74c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f750:	f7ff fcae 	bl	800f0b0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f754:	eddd 0a07 	vldr	s1, [sp, #28]
 800f758:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff fed1 	bl	800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f762:	e7d3      	b.n	800f70c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f764:	3c01      	subs	r4, #1
 800f766:	e7ec      	b.n	800f742 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f768:	f1a4 0b04 	sub.w	fp, r4, #4
 800f76c:	3c02      	subs	r4, #2
 800f76e:	4650      	mov	r0, sl
 800f770:	462b      	mov	r3, r5
 800f772:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f776:	f8cd b000 	str.w	fp, [sp]
 800f77a:	4642      	mov	r2, r8
 800f77c:	a906      	add	r1, sp, #24
 800f77e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f782:	f7ff fc95 	bl	800f0b0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f786:	eddd 2a07 	vldr	s5, [sp, #28]
 800f78a:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f78e:	4630      	mov	r0, r6
 800f790:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f794:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f798:	edd4 0a01 	vldr	s1, [r4, #4]
 800f79c:	ed94 0a00 	vldr	s0, [r4]
 800f7a0:	f7ff fc1a 	bl	800efd8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f7a4:	465c      	mov	r4, fp
 800f7a6:	e7b1      	b.n	800f70c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f7a8:	f1a4 0b06 	sub.w	fp, r4, #6
 800f7ac:	3c02      	subs	r4, #2
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	462b      	mov	r3, r5
 800f7b2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f7b6:	f8cd b000 	str.w	fp, [sp]
 800f7ba:	4642      	mov	r2, r8
 800f7bc:	a906      	add	r1, sp, #24
 800f7be:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f7c2:	f7ff fc75 	bl	800f0b0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f7c6:	eddd 3a07 	vldr	s7, [sp, #28]
 800f7ca:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f7d4:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f7d8:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f7dc:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f7e0:	edd4 0a01 	vldr	s1, [r4, #4]
 800f7e4:	ed94 0a00 	vldr	s0, [r4]
 800f7e8:	f7ff fc15 	bl	800f016 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f7ec:	e7da      	b.n	800f7a4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	b113      	cbz	r3, 800f7f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f7ff ff69 	bl	800f6ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f7f8:	b009      	add	sp, #36	@ 0x24
 800f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fe:	bf00      	nop

0800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f800:	eef0 7a60 	vmov.f32	s15, s1
 800f804:	6803      	ldr	r3, [r0, #0]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f80c:	ee17 2a90 	vmov	r2, s15
 800f810:	eef0 7a40 	vmov.f32	s15, s0
 800f814:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f818:	ee17 1a90 	vmov	r1, s15
 800f81c:	4718      	bx	r3
	...

0800f820 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f820:	4b04      	ldr	r3, [pc, #16]	@ (800f834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f822:	b510      	push	{r4, lr}
 800f824:	4604      	mov	r4, r0
 800f826:	f840 3b14 	str.w	r3, [r0], #20
 800f82a:	f001 fccb 	bl	80111c4 <_ZN8touchgfx7OutlineD1Ev>
 800f82e:	4620      	mov	r0, r4
 800f830:	bd10      	pop	{r4, pc}
 800f832:	bf00      	nop
 800f834:	080265f0 	.word	0x080265f0

0800f838 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	ed2d 8b04 	vpush	{d8-d9}
 800f840:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f844:	b0b5      	sub	sp, #212	@ 0xd4
 800f846:	4605      	mov	r5, r0
 800f848:	468b      	mov	fp, r1
 800f84a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f84e:	9206      	str	r2, [sp, #24]
 800f850:	461e      	mov	r6, r3
 800f852:	2400      	movs	r4, #0
 800f854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f858:	f240 814f 	bls.w	800fafa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f85c:	23ff      	movs	r3, #255	@ 0xff
 800f85e:	1d02      	adds	r2, r0, #4
 800f860:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800fb00 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f864:	f04f 0800 	mov.w	r8, #0
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	af08      	add	r7, sp, #32
 800f86c:	6981      	ldr	r1, [r0, #24]
 800f86e:	a808      	add	r0, sp, #32
 800f870:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f872:	eef0 9a49 	vmov.f32	s19, s18
 800f876:	f011 fdcd 	bl	8021414 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f87a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f87e:	4ba1      	ldr	r3, [pc, #644]	@ (800fb04 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f880:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f888:	2201      	movs	r2, #1
 800f88a:	9308      	str	r3, [sp, #32]
 800f88c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f890:	edd5 6a08 	vldr	s13, [r5, #32]
 800f894:	eeb0 8a49 	vmov.f32	s16, s18
 800f898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f89c:	9325      	str	r3, [sp, #148]	@ 0x94
 800f89e:	f04f 0300 	mov.w	r3, #0
 800f8a2:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f8a6:	7f6a      	ldrb	r2, [r5, #29]
 800f8a8:	eef0 8a49 	vmov.f32	s17, s18
 800f8ac:	bf48      	it	mi
 800f8ae:	eef1 7a67 	vnegmi.f32	s15, s15
 800f8b2:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f8b6:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f8ba:	46c1      	mov	r9, r8
 800f8bc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f8c0:	f04f 0a01 	mov.w	sl, #1
 800f8c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8c8:	7fab      	ldrb	r3, [r5, #30]
 800f8ca:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f8cc:	435a      	muls	r2, r3
 800f8ce:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f8d2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f8d6:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f8da:	1c53      	adds	r3, r2, #1
 800f8dc:	942b      	str	r4, [sp, #172]	@ 0xac
 800f8de:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f8e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f8e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f8e8:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f8ea:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f8ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f8f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8f4:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f8f6:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f8f8:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f8fa:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f8fc:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f8fe:	4644      	mov	r4, r8
 800f900:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f904:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f908:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f90c:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f910:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f914:	9b06      	ldr	r3, [sp, #24]
 800f916:	454b      	cmp	r3, r9
 800f918:	f000 80cc 	beq.w	800fab4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f91c:	f109 0301 	add.w	r3, r9, #1
 800f920:	9305      	str	r3, [sp, #20]
 800f922:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f926:	2b06      	cmp	r3, #6
 800f928:	d839      	bhi.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f92a:	e8df f003 	tbb	[pc, r3]
 800f92e:	3b04      	.short	0x3b04
 800f930:	817c6f60 	.word	0x817c6f60
 800f934:	a0          	.byte	0xa0
 800f935:	00          	.byte	0x00
 800f936:	45c1      	cmp	r9, r8
 800f938:	d92b      	bls.n	800f992 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f93a:	eef0 0a49 	vmov.f32	s1, s18
 800f93e:	4638      	mov	r0, r7
 800f940:	eeb0 0a69 	vmov.f32	s0, s19
 800f944:	f7ff fdde 	bl	800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f948:	4638      	mov	r0, r7
 800f94a:	f7ff fe67 	bl	800f61c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f94e:	4681      	mov	r9, r0
 800f950:	b9f8      	cbnz	r0, 800f992 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f952:	eef0 0a49 	vmov.f32	s1, s18
 800f956:	4638      	mov	r0, r7
 800f958:	eeb0 0a69 	vmov.f32	s0, s19
 800f95c:	f7ff fe8d 	bl	800f67a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f960:	4628      	mov	r0, r5
 800f962:	4623      	mov	r3, r4
 800f964:	9a05      	ldr	r2, [sp, #20]
 800f966:	4641      	mov	r1, r8
 800f968:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f96c:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f970:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f974:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f978:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f97c:	e9cd b600 	strd	fp, r6, [sp]
 800f980:	f7ff feae 	bl	800f6e0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f984:	eef0 0a49 	vmov.f32	s1, s18
 800f988:	eeb0 0a69 	vmov.f32	s0, s19
 800f98c:	4638      	mov	r0, r7
 800f98e:	f7ff fe74 	bl	800f67a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f992:	eeb0 8a49 	vmov.f32	s16, s18
 800f996:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f99a:	eef0 8a69 	vmov.f32	s17, s19
 800f99e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f9a2:	e7b7      	b.n	800f914 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f9a4:	45c1      	cmp	r9, r8
 800f9a6:	d90d      	bls.n	800f9c4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f9a8:	4638      	mov	r0, r7
 800f9aa:	f7ff fe37 	bl	800f61c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f9ae:	b948      	cbnz	r0, 800f9c4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f9b0:	4623      	mov	r3, r4
 800f9b2:	464a      	mov	r2, r9
 800f9b4:	4641      	mov	r1, r8
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f9bc:	e9cd b600 	strd	fp, r6, [sp]
 800f9c0:	f7ff fe8e 	bl	800f6e0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f9c4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f9c8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f9cc:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f9d0:	3402      	adds	r4, #2
 800f9d2:	edd3 8a00 	vldr	s17, [r3]
 800f9d6:	46c8      	mov	r8, r9
 800f9d8:	ed93 8a01 	vldr	s16, [r3, #4]
 800f9dc:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f9e0:	eef0 9a68 	vmov.f32	s19, s17
 800f9e4:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f9e8:	eeb0 9a48 	vmov.f32	s18, s16
 800f9ec:	e7d7      	b.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f9ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	3402      	adds	r4, #2
 800f9f6:	edd3 8a00 	vldr	s17, [r3]
 800f9fa:	ed93 8a01 	vldr	s16, [r3, #4]
 800f9fe:	eeb0 0a68 	vmov.f32	s0, s17
 800fa02:	eef0 0a48 	vmov.f32	s1, s16
 800fa06:	f7ff fd7d 	bl	800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fa0a:	e7c8      	b.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fa0c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa10:	edd3 8a00 	vldr	s17, [r3]
 800fa14:	eef0 0a48 	vmov.f32	s1, s16
 800fa18:	4638      	mov	r0, r7
 800fa1a:	eeb0 0a68 	vmov.f32	s0, s17
 800fa1e:	3401      	adds	r4, #1
 800fa20:	f7ff fd70 	bl	800f504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fa24:	e7bb      	b.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fa26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa2a:	ed93 8a00 	vldr	s16, [r3]
 800fa2e:	e7f1      	b.n	800fa14 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800fa30:	00a3      	lsls	r3, r4, #2
 800fa32:	eef0 0a48 	vmov.f32	s1, s16
 800fa36:	eeb0 0a68 	vmov.f32	s0, s17
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	f103 0208 	add.w	r2, r3, #8
 800fa40:	f103 090c 	add.w	r9, r3, #12
 800fa44:	4433      	add	r3, r6
 800fa46:	3404      	adds	r4, #4
 800fa48:	4432      	add	r2, r6
 800fa4a:	44b1      	add	r9, r6
 800fa4c:	edd3 1a01 	vldr	s3, [r3, #4]
 800fa50:	ed92 2a00 	vldr	s4, [r2]
 800fa54:	edd9 2a00 	vldr	s5, [r9]
 800fa58:	ed93 1a00 	vldr	s2, [r3]
 800fa5c:	9207      	str	r2, [sp, #28]
 800fa5e:	f7ff fabb 	bl	800efd8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fa62:	9a07      	ldr	r2, [sp, #28]
 800fa64:	ed99 8a00 	vldr	s16, [r9]
 800fa68:	edd2 8a00 	vldr	s17, [r2]
 800fa6c:	e797      	b.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fa6e:	00a3      	lsls	r3, r4, #2
 800fa70:	eef0 0a48 	vmov.f32	s1, s16
 800fa74:	eeb0 0a68 	vmov.f32	s0, s17
 800fa78:	4638      	mov	r0, r7
 800fa7a:	f103 0210 	add.w	r2, r3, #16
 800fa7e:	f103 0914 	add.w	r9, r3, #20
 800fa82:	4433      	add	r3, r6
 800fa84:	3406      	adds	r4, #6
 800fa86:	4432      	add	r2, r6
 800fa88:	44b1      	add	r9, r6
 800fa8a:	edd3 2a03 	vldr	s5, [r3, #12]
 800fa8e:	ed92 3a00 	vldr	s6, [r2]
 800fa92:	edd9 3a00 	vldr	s7, [r9]
 800fa96:	ed93 2a02 	vldr	s4, [r3, #8]
 800fa9a:	edd3 1a01 	vldr	s3, [r3, #4]
 800fa9e:	ed93 1a00 	vldr	s2, [r3]
 800faa2:	9207      	str	r2, [sp, #28]
 800faa4:	f7ff fab7 	bl	800f016 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	ed99 8a00 	vldr	s16, [r9]
 800faae:	edd2 8a00 	vldr	s17, [r2]
 800fab2:	e774      	b.n	800f99e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fab4:	9b06      	ldr	r3, [sp, #24]
 800fab6:	af08      	add	r7, sp, #32
 800fab8:	4543      	cmp	r3, r8
 800faba:	d90f      	bls.n	800fadc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800fabc:	4638      	mov	r0, r7
 800fabe:	f7ff fdad 	bl	800f61c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fac2:	b958      	cbnz	r0, 800fadc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800fac4:	2301      	movs	r3, #1
 800fac6:	9703      	str	r7, [sp, #12]
 800fac8:	f8cd b000 	str.w	fp, [sp]
 800facc:	4641      	mov	r1, r8
 800face:	9a06      	ldr	r2, [sp, #24]
 800fad0:	4628      	mov	r0, r5
 800fad2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fad6:	4623      	mov	r3, r4
 800fad8:	f7ff fe02 	bl	800f6e0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fadc:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800fae0:	4638      	mov	r0, r7
 800fae2:	f011 fd2b 	bl	802153c <_ZN8touchgfx6Canvas6renderEh>
 800fae6:	4604      	mov	r4, r0
 800fae8:	4638      	mov	r0, r7
 800faea:	f7ff fe99 	bl	800f820 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800faee:	4620      	mov	r0, r4
 800faf0:	b035      	add	sp, #212	@ 0xd4
 800faf2:	ecbd 8b04 	vpop	{d8-d9}
 800faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafa:	2401      	movs	r4, #1
 800fafc:	e7f7      	b.n	800faee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800fafe:	bf00      	nop
 800fb00:	00000000 	.word	0x00000000
 800fb04:	08025f78 	.word	0x08025f78

0800fb08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	f7ff fe88 	bl	800f820 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fb10:	21b0      	movs	r1, #176	@ 0xb0
 800fb12:	4620      	mov	r0, r4
 800fb14:	f012 f8df 	bl	8021cd6 <_ZdlPvj>
 800fb18:	4620      	mov	r0, r4
 800fb1a:	bd10      	pop	{r4, pc}

0800fb1c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800fb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb20:	4698      	mov	r8, r3
 800fb22:	23ff      	movs	r3, #255	@ 0xff
 800fb24:	4607      	mov	r7, r0
 800fb26:	4689      	mov	r9, r1
 800fb28:	4692      	mov	sl, r2
 800fb2a:	1d02      	adds	r2, r0, #4
 800fb2c:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800fb30:	2400      	movs	r4, #0
 800fb32:	44ca      	add	sl, r9
 800fb34:	ed2d 8b06 	vpush	{d8-d10}
 800fb38:	b0aa      	sub	sp, #168	@ 0xa8
 800fb3a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800fd40 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	eef0 8a48 	vmov.f32	s17, s16
 800fb44:	6981      	ldr	r1, [r0, #24]
 800fb46:	a80d      	add	r0, sp, #52	@ 0x34
 800fb48:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fb4a:	f011 fc63 	bl	8021414 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800fb4e:	7f3b      	ldrb	r3, [r7, #28]
 800fb50:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800fd40 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fb54:	4628      	mov	r0, r5
 800fb56:	1e5a      	subs	r2, r3, #1
 800fb58:	eeb0 0a60 	vmov.f32	s0, s1
 800fb5c:	4253      	negs	r3, r2
 800fb5e:	4153      	adcs	r3, r2
 800fb60:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800fb64:	f005 fa9f 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb68:	eeb0 9a40 	vmov.f32	s18, s0
 800fb6c:	eef0 9a60 	vmov.f32	s19, s1
 800fb70:	45ca      	cmp	sl, r9
 800fb72:	f000 80cd 	beq.w	800fd10 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800fb76:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fb7a:	2b06      	cmp	r3, #6
 800fb7c:	d8f8      	bhi.n	800fb70 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb7e:	e8df f003 	tbb	[pc, r3]
 800fb82:	0804      	.short	0x0804
 800fb84:	58533f2a 	.word	0x58533f2a
 800fb88:	8a          	.byte	0x8a
 800fb89:	00          	.byte	0x00
 800fb8a:	a80d      	add	r0, sp, #52	@ 0x34
 800fb8c:	f011 fcb4 	bl	80214f8 <_ZN8touchgfx6Canvas5closeEv>
 800fb90:	e7ee      	b.n	800fb70 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb92:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb96:	4628      	mov	r0, r5
 800fb98:	ed93 8a01 	vldr	s16, [r3, #4]
 800fb9c:	edd3 8a00 	vldr	s17, [r3]
 800fba0:	eef0 0a48 	vmov.f32	s1, s16
 800fba4:	eeb0 0a68 	vmov.f32	s0, s17
 800fba8:	f005 fa7d 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbac:	a80d      	add	r0, sp, #52	@ 0x34
 800fbae:	eef0 7a60 	vmov.f32	s15, s1
 800fbb2:	eeb0 9a40 	vmov.f32	s18, s0
 800fbb6:	eef0 9a60 	vmov.f32	s19, s1
 800fbba:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fbbe:	ee17 2a90 	vmov	r2, s15
 800fbc2:	eef0 7a40 	vmov.f32	s15, s0
 800fbc6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fbca:	ee17 1a90 	vmov	r1, s15
 800fbce:	f011 fd6d 	bl	80216ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800fbd2:	3402      	adds	r4, #2
 800fbd4:	e7cc      	b.n	800fb70 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fbd6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fbda:	4628      	mov	r0, r5
 800fbdc:	edd3 8a00 	vldr	s17, [r3]
 800fbe0:	ed93 8a01 	vldr	s16, [r3, #4]
 800fbe4:	eeb0 0a68 	vmov.f32	s0, s17
 800fbe8:	eef0 0a48 	vmov.f32	s1, s16
 800fbec:	f005 fa5b 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbf0:	a80d      	add	r0, sp, #52	@ 0x34
 800fbf2:	eeb0 9a40 	vmov.f32	s18, s0
 800fbf6:	eef0 9a60 	vmov.f32	s19, s1
 800fbfa:	f7ff fe01 	bl	800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fbfe:	e7e8      	b.n	800fbd2 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800fc00:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fc04:	edd3 8a00 	vldr	s17, [r3]
 800fc08:	eef0 0a48 	vmov.f32	s1, s16
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	eeb0 0a68 	vmov.f32	s0, s17
 800fc12:	3401      	adds	r4, #1
 800fc14:	f005 fa47 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc18:	a80d      	add	r0, sp, #52	@ 0x34
 800fc1a:	eef0 9a60 	vmov.f32	s19, s1
 800fc1e:	eeb0 9a40 	vmov.f32	s18, s0
 800fc22:	f7ff fded 	bl	800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fc26:	e7a3      	b.n	800fb70 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fc28:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fc2c:	ed93 8a00 	vldr	s16, [r3]
 800fc30:	e7ea      	b.n	800fc08 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800fc32:	1ca3      	adds	r3, r4, #2
 800fc34:	4628      	mov	r0, r5
 800fc36:	3404      	adds	r4, #4
 800fc38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800fc3c:	ed53 0a01 	vldr	s1, [r3, #-4]
 800fc40:	ed13 0a02 	vldr	s0, [r3, #-8]
 800fc44:	edd3 8a00 	vldr	s17, [r3]
 800fc48:	ed93 8a01 	vldr	s16, [r3, #4]
 800fc4c:	f005 fa2b 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc50:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fc54:	eeb0 0a68 	vmov.f32	s0, s17
 800fc58:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fc5c:	eef0 0a48 	vmov.f32	s1, s16
 800fc60:	4628      	mov	r0, r5
 800fc62:	f005 fa20 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc66:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800fc6a:	eef0 2a60 	vmov.f32	s5, s1
 800fc6e:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800fc72:	eeb0 2a40 	vmov.f32	s4, s0
 800fc76:	a80d      	add	r0, sp, #52	@ 0x34
 800fc78:	eeb0 aa40 	vmov.f32	s20, s0
 800fc7c:	eef0 aa60 	vmov.f32	s21, s1
 800fc80:	eeb0 0a49 	vmov.f32	s0, s18
 800fc84:	eef0 0a69 	vmov.f32	s1, s19
 800fc88:	f7ff f9a6 	bl	800efd8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fc8c:	eef0 9a6a 	vmov.f32	s19, s21
 800fc90:	eeb0 9a4a 	vmov.f32	s18, s20
 800fc94:	e76c      	b.n	800fb70 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fc96:	1d26      	adds	r6, r4, #4
 800fc98:	4628      	mov	r0, r5
 800fc9a:	3406      	adds	r4, #6
 800fc9c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fca0:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fca4:	ed16 0a04 	vldr	s0, [r6, #-16]
 800fca8:	edd6 8a00 	vldr	s17, [r6]
 800fcac:	ed96 8a01 	vldr	s16, [r6, #4]
 800fcb0:	f005 f9f9 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fcb4:	ed8d 0a07 	vstr	s0, [sp, #28]
 800fcb8:	4628      	mov	r0, r5
 800fcba:	ed16 0a02 	vldr	s0, [r6, #-8]
 800fcbe:	edcd 0a08 	vstr	s1, [sp, #32]
 800fcc2:	ed56 0a01 	vldr	s1, [r6, #-4]
 800fcc6:	f005 f9ee 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fcca:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fcce:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fcd2:	eeb0 0a68 	vmov.f32	s0, s17
 800fcd6:	eef0 0a48 	vmov.f32	s1, s16
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f005 f9e3 	bl	80150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fce0:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800fce4:	eeb0 3a40 	vmov.f32	s6, s0
 800fce8:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800fcec:	eef0 3a60 	vmov.f32	s7, s1
 800fcf0:	eddd 1a08 	vldr	s3, [sp, #32]
 800fcf4:	eeb0 aa40 	vmov.f32	s20, s0
 800fcf8:	ed9d 1a07 	vldr	s2, [sp, #28]
 800fcfc:	eef0 aa60 	vmov.f32	s21, s1
 800fd00:	a80d      	add	r0, sp, #52	@ 0x34
 800fd02:	eef0 0a69 	vmov.f32	s1, s19
 800fd06:	eeb0 0a49 	vmov.f32	s0, s18
 800fd0a:	f7ff f984 	bl	800f016 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800fd0e:	e7bd      	b.n	800fc8c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800fd10:	7f7b      	ldrb	r3, [r7, #29]
 800fd12:	a80d      	add	r0, sp, #52	@ 0x34
 800fd14:	7fb9      	ldrb	r1, [r7, #30]
 800fd16:	4359      	muls	r1, r3
 800fd18:	1c4b      	adds	r3, r1, #1
 800fd1a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800fd1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fd22:	f011 fc0b 	bl	802153c <_ZN8touchgfx6Canvas6renderEh>
 800fd26:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800fd28:	4604      	mov	r4, r0
 800fd2a:	a812      	add	r0, sp, #72	@ 0x48
 800fd2c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd2e:	f001 fa49 	bl	80111c4 <_ZN8touchgfx7OutlineD1Ev>
 800fd32:	4620      	mov	r0, r4
 800fd34:	b02a      	add	sp, #168	@ 0xa8
 800fd36:	ecbd 8b06 	vpop	{d8-d10}
 800fd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3e:	bf00      	nop
 800fd40:	00000000 	.word	0x00000000
 800fd44:	080265f0 	.word	0x080265f0

0800fd48 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800fd48:	b410      	push	{r4}
 800fd4a:	7f04      	ldrb	r4, [r0, #28]
 800fd4c:	b11c      	cbz	r4, 800fd56 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800fd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd52:	f7ff bee3 	b.w	800fb1c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800fd56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd5a:	f7ff bd6d 	b.w	800f838 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0800fd5e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800fd5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd62:	4691      	mov	r9, r2
 800fd64:	4602      	mov	r2, r0
 800fd66:	4606      	mov	r6, r0
 800fd68:	4688      	mov	r8, r1
 800fd6a:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800fd6e:	469a      	mov	sl, r3
 800fd70:	ab02      	add	r3, sp, #8
 800fd72:	af02      	add	r7, sp, #8
 800fd74:	6851      	ldr	r1, [r2, #4]
 800fd76:	c303      	stmia	r3!, {r0, r1}
 800fd78:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dd2f      	ble.n	800fde0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fd80:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800fd84:	2c00      	cmp	r4, #0
 800fd86:	dd2b      	ble.n	800fde0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fd88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fd8c:	441c      	add	r4, r3
 800fd8e:	b2a4      	uxth	r4, r4
 800fd90:	b225      	sxth	r5, r4
 800fd92:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800fd96:	42ab      	cmp	r3, r5
 800fd98:	da22      	bge.n	800fde0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fd9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd9c:	464a      	mov	r2, r9
 800fd9e:	9701      	str	r7, [sp, #4]
 800fda0:	4641      	mov	r1, r8
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	4630      	mov	r0, r6
 800fda6:	4653      	mov	r3, sl
 800fda8:	f7ff ffce 	bl	800fd48 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800fdac:	b940      	cbnz	r0, 800fdc0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800fdae:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d004      	beq.n	800fdc0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	105b      	asrs	r3, r3, #1
 800fdba:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fdbe:	e7ec      	b.n	800fd9a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 800fdc0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800fdc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fdc8:	4413      	add	r3, r2
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	441a      	add	r2, r3
 800fdce:	f8ad 300a 	strh.w	r3, [sp, #10]
 800fdd2:	b212      	sxth	r2, r2
 800fdd4:	4295      	cmp	r5, r2
 800fdd6:	dadc      	bge.n	800fd92 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800fdd8:	1ae3      	subs	r3, r4, r3
 800fdda:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fdde:	e7d8      	b.n	800fd92 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800fde0:	b004      	add	sp, #16
 800fde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fde6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fde6:	0c0b      	lsrs	r3, r1, #16
 800fde8:	60c1      	str	r1, [r0, #12]
 800fdea:	7481      	strb	r1, [r0, #18]
 800fdec:	7403      	strb	r3, [r0, #16]
 800fdee:	0a0b      	lsrs	r3, r1, #8
 800fdf0:	7443      	strb	r3, [r0, #17]
 800fdf2:	4770      	bx	lr

0800fdf4 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fdf4:	f1a0 0008 	sub.w	r0, r0, #8
 800fdf8:	e7f5      	b.n	800fde6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0800fdfc <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800fdfc:	b508      	push	{r3, lr}
 800fdfe:	4b05      	ldr	r3, [pc, #20]	@ (800fe14 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800fe00:	6818      	ldr	r0, [r3, #0]
 800fe02:	6803      	ldr	r3, [r0, #0]
 800fe04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fe08:	4798      	blx	r3
 800fe0a:	1e43      	subs	r3, r0, #1
 800fe0c:	4258      	negs	r0, r3
 800fe0e:	4158      	adcs	r0, r3
 800fe10:	bd08      	pop	{r3, pc}
 800fe12:	bf00      	nop
 800fe14:	240284a4 	.word	0x240284a4

0800fe18 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800fe18:	4770      	bx	lr

0800fe1a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800fe1a:	3808      	subs	r0, #8
 800fe1c:	4770      	bx	lr

0800fe1e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800fe1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fe22:	b410      	push	{r4}
 800fe24:	188c      	adds	r4, r1, r2
 800fe26:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fe2a:	68c2      	ldr	r2, [r0, #12]
 800fe2c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800fe30:	4620      	mov	r0, r4
 800fe32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe36:	f7f3 b839 	b.w	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800fe3a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800fe3a:	f7f3 b813 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

0800fe3e <_ZN8touchgfx13PainterRGB888D0Ev>:
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	2114      	movs	r1, #20
 800fe44:	f011 ff47 	bl	8021cd6 <_ZdlPvj>
 800fe48:	4620      	mov	r0, r4
 800fe4a:	bd10      	pop	{r4, pc}

0800fe4c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800fe4c:	f1a0 0008 	sub.w	r0, r0, #8
 800fe50:	e7f5      	b.n	800fe3e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800fe54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800fe54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fe58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe5c:	4411      	add	r1, r2
 800fe5e:	7c42      	ldrb	r2, [r0, #17]
 800fe60:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800fe64:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800fe68:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800fe6c:	2a00      	cmp	r2, #0
 800fe6e:	f000 8084 	beq.w	800ff7a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800fe72:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fe76:	ed90 7a08 	vldr	s14, [r0, #32]
 800fe7a:	42a2      	cmp	r2, r4
 800fe7c:	68c3      	ldr	r3, [r0, #12]
 800fe7e:	db20      	blt.n	800fec2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800fe80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe84:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fe88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8c:	bfc8      	it	gt
 800fe8e:	2200      	movgt	r2, #0
 800fe90:	589a      	ldr	r2, [r3, r2]
 800fe92:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800fe96:	7c03      	ldrb	r3, [r0, #16]
 800fe98:	fa5f fc82 	uxtb.w	ip, r2
 800fe9c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800fea0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800fea4:	440e      	add	r6, r1
 800fea6:	b36b      	cbz	r3, 800ff04 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fea8:	2dff      	cmp	r5, #255	@ 0xff
 800feaa:	d12b      	bne.n	800ff04 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800feac:	42b1      	cmp	r1, r6
 800feae:	f080 8204 	bcs.w	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800feb2:	f881 c000 	strb.w	ip, [r1]
 800feb6:	3103      	adds	r1, #3
 800feb8:	f801 7c02 	strb.w	r7, [r1, #-2]
 800febc:	f801 4c01 	strb.w	r4, [r1, #-1]
 800fec0:	e7f4      	b.n	800feac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800fec2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800fec6:	42a7      	cmp	r7, r4
 800fec8:	dc08      	bgt.n	800fedc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800feca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fece:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed6:	bfd8      	it	le
 800fed8:	2200      	movle	r2, #0
 800feda:	e7d9      	b.n	800fe90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fedc:	1aa2      	subs	r2, r4, r2
 800fede:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fee2:	ee07 2a90 	vmov	s15, r2
 800fee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fef6:	ee17 2a90 	vmov	r2, s15
 800fefa:	bfd8      	it	le
 800fefc:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800ff00:	0092      	lsls	r2, r2, #2
 800ff02:	e7c5      	b.n	800fe90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800ff04:	0e12      	lsrs	r2, r2, #24
 800ff06:	4355      	muls	r5, r2
 800ff08:	1c6a      	adds	r2, r5, #1
 800ff0a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800ff0e:	122d      	asrs	r5, r5, #8
 800ff10:	43e8      	mvns	r0, r5
 800ff12:	b2ad      	uxth	r5, r5
 800ff14:	fb1c fc05 	smulbb	ip, ip, r5
 800ff18:	b2c0      	uxtb	r0, r0
 800ff1a:	fb17 f705 	smulbb	r7, r7, r5
 800ff1e:	fb14 f505 	smulbb	r5, r4, r5
 800ff22:	fa1f fc8c 	uxth.w	ip, ip
 800ff26:	b2bf      	uxth	r7, r7
 800ff28:	b2ad      	uxth	r5, r5
 800ff2a:	428e      	cmp	r6, r1
 800ff2c:	f101 0303 	add.w	r3, r1, #3
 800ff30:	f240 81c3 	bls.w	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800ff34:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800ff38:	fb02 c200 	mla	r2, r2, r0, ip
 800ff3c:	b292      	uxth	r2, r2
 800ff3e:	1c51      	adds	r1, r2, #1
 800ff40:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ff44:	1212      	asrs	r2, r2, #8
 800ff46:	f803 2c03 	strb.w	r2, [r3, #-3]
 800ff4a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800ff4e:	fb02 7200 	mla	r2, r2, r0, r7
 800ff52:	b292      	uxth	r2, r2
 800ff54:	1c51      	adds	r1, r2, #1
 800ff56:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ff5a:	1212      	asrs	r2, r2, #8
 800ff5c:	f803 2c02 	strb.w	r2, [r3, #-2]
 800ff60:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800ff64:	fb02 5200 	mla	r2, r2, r0, r5
 800ff68:	b292      	uxth	r2, r2
 800ff6a:	1c51      	adds	r1, r2, #1
 800ff6c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ff70:	4619      	mov	r1, r3
 800ff72:	1212      	asrs	r2, r2, #8
 800ff74:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ff78:	e7d7      	b.n	800ff2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800ff7a:	7c82      	ldrb	r2, [r0, #18]
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	d047      	beq.n	8010010 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800ff80:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800ff84:	ee07 2a10 	vmov	s14, r2
 800ff88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff8c:	ee07 3a90 	vmov	s15, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ff96:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9e:	f200 808e 	bhi.w	80100be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800ffa2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ffa6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800ffaa:	68c7      	ldr	r7, [r0, #12]
 800ffac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffb4:	ee06 6a90 	vmov	s13, r6
 800ffb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ffbc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ffc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc4:	bf4a      	itet	mi
 800ffc6:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800ffca:	4634      	movpl	r4, r6
 800ffcc:	ee17 4a90 	vmovmi	r4, s15
 800ffd0:	edd0 7a08 	vldr	s15, [r0, #32]
 800ffd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ffd8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800ffdc:	448e      	add	lr, r1
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	bfc8      	it	gt
 800ffe4:	2200      	movgt	r2, #0
 800ffe6:	58bf      	ldr	r7, [r7, r2]
 800ffe8:	7c02      	ldrb	r2, [r0, #16]
 800ffea:	fa5f f987 	uxtb.w	r9, r7
 800ffee:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800fff2:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800fff6:	b31a      	cbz	r2, 8010040 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fff8:	2dff      	cmp	r5, #255	@ 0xff
 800fffa:	d121      	bne.n	8010040 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fffc:	4571      	cmp	r1, lr
 800fffe:	d25d      	bcs.n	80100bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010000:	f881 9000 	strb.w	r9, [r1]
 8010004:	3103      	adds	r1, #3
 8010006:	f801 8c02 	strb.w	r8, [r1, #-2]
 801000a:	f801 cc01 	strb.w	ip, [r1, #-1]
 801000e:	e7f5      	b.n	800fffc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8010010:	ee07 4a90 	vmov	s15, r4
 8010014:	ed90 7a06 	vldr	s14, [r0, #24]
 8010018:	edd0 6a05 	vldr	s13, [r0, #20]
 801001c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010024:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010028:	edd0 7a08 	vldr	s15, [r0, #32]
 801002c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010034:	bf44      	itt	mi
 8010036:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801003a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801003e:	e7a5      	b.n	800ff8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8010040:	0e3f      	lsrs	r7, r7, #24
 8010042:	436f      	muls	r7, r5
 8010044:	1c7a      	adds	r2, r7, #1
 8010046:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801004a:	1212      	asrs	r2, r2, #8
 801004c:	ea6f 0a02 	mvn.w	sl, r2
 8010050:	b292      	uxth	r2, r2
 8010052:	fb19 f902 	smulbb	r9, r9, r2
 8010056:	fa5f fa8a 	uxtb.w	sl, sl
 801005a:	fb18 f802 	smulbb	r8, r8, r2
 801005e:	fb1c fc02 	smulbb	ip, ip, r2
 8010062:	fa1f f989 	uxth.w	r9, r9
 8010066:	fa1f f888 	uxth.w	r8, r8
 801006a:	fa1f fc8c 	uxth.w	ip, ip
 801006e:	458e      	cmp	lr, r1
 8010070:	f101 0203 	add.w	r2, r1, #3
 8010074:	d922      	bls.n	80100bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8010076:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801007a:	fb01 910a 	mla	r1, r1, sl, r9
 801007e:	b289      	uxth	r1, r1
 8010080:	1c4f      	adds	r7, r1, #1
 8010082:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010086:	1209      	asrs	r1, r1, #8
 8010088:	f802 1c03 	strb.w	r1, [r2, #-3]
 801008c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010090:	fb01 810a 	mla	r1, r1, sl, r8
 8010094:	b289      	uxth	r1, r1
 8010096:	1c4f      	adds	r7, r1, #1
 8010098:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801009c:	1209      	asrs	r1, r1, #8
 801009e:	f802 1c02 	strb.w	r1, [r2, #-2]
 80100a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80100a6:	fb01 c10a 	mla	r1, r1, sl, ip
 80100aa:	b289      	uxth	r1, r1
 80100ac:	1c4f      	adds	r7, r1, #1
 80100ae:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80100b2:	1209      	asrs	r1, r1, #8
 80100b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100b8:	4611      	mov	r1, r2
 80100ba:	e7d8      	b.n	801006e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80100bc:	191a      	adds	r2, r3, r4
 80100be:	4433      	add	r3, r6
 80100c0:	b21b      	sxth	r3, r3
 80100c2:	4293      	cmp	r3, r2
 80100c4:	f340 80f9 	ble.w	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80100c8:	edd0 7a07 	vldr	s15, [r0, #28]
 80100cc:	ee06 2a90 	vmov	s13, r2
 80100d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80100d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80100dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e0:	f340 80b0 	ble.w	8010244 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80100e4:	ee06 3a10 	vmov	s12, r3
 80100e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80100ec:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80102c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80100f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80100f4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80100f8:	ed90 6a08 	vldr	s12, [r0, #32]
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8010104:	bfd6      	itet	le
 8010106:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801010a:	469c      	movgt	ip, r3
 801010c:	ee17 ca90 	vmovle	ip, s15
 8010110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010114:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80102c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8010118:	ebac 0202 	sub.w	r2, ip, r2
 801011c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8010120:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010124:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010128:	188c      	adds	r4, r1, r2
 801012a:	7c02      	ldrb	r2, [r0, #16]
 801012c:	b1d2      	cbz	r2, 8010164 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801012e:	2dff      	cmp	r5, #255	@ 0xff
 8010130:	d118      	bne.n	8010164 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8010132:	42a1      	cmp	r1, r4
 8010134:	d261      	bcs.n	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8010136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801013a:	68c6      	ldr	r6, [r0, #12]
 801013c:	3103      	adds	r1, #3
 801013e:	ee17 7a10 	vmov	r7, s14
 8010142:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8010146:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801014a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801014e:	7856      	ldrb	r6, [r2, #1]
 8010150:	f801 6c02 	strb.w	r6, [r1, #-2]
 8010154:	7892      	ldrb	r2, [r2, #2]
 8010156:	f801 2c01 	strb.w	r2, [r1, #-1]
 801015a:	ed90 7a08 	vldr	s14, [r0, #32]
 801015e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010162:	e7e6      	b.n	8010132 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8010164:	68c2      	ldr	r2, [r0, #12]
 8010166:	428c      	cmp	r4, r1
 8010168:	f101 0e03 	add.w	lr, r1, #3
 801016c:	d945      	bls.n	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801016e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010172:	ee17 9a10 	vmov	r9, s14
 8010176:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801017a:	f898 7003 	ldrb.w	r7, [r8, #3]
 801017e:	fb07 f605 	mul.w	r6, r7, r5
 8010182:	1c77      	adds	r7, r6, #1
 8010184:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8010188:	123f      	asrs	r7, r7, #8
 801018a:	b2b9      	uxth	r1, r7
 801018c:	43ff      	mvns	r7, r7
 801018e:	b2fe      	uxtb	r6, r7
 8010190:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8010194:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8010198:	fb19 f906 	smulbb	r9, r9, r6
 801019c:	fb07 9701 	mla	r7, r7, r1, r9
 80101a0:	b2bf      	uxth	r7, r7
 80101a2:	f107 0901 	add.w	r9, r7, #1
 80101a6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80101aa:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80101ae:	fb19 f906 	smulbb	r9, r9, r6
 80101b2:	123f      	asrs	r7, r7, #8
 80101b4:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80101b8:	f898 7001 	ldrb.w	r7, [r8, #1]
 80101bc:	fb07 9701 	mla	r7, r7, r1, r9
 80101c0:	b2bf      	uxth	r7, r7
 80101c2:	f107 0901 	add.w	r9, r7, #1
 80101c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80101ca:	123f      	asrs	r7, r7, #8
 80101cc:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80101d0:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80101d4:	f898 8002 	ldrb.w	r8, [r8, #2]
 80101d8:	fb17 f606 	smulbb	r6, r7, r6
 80101dc:	fb08 6601 	mla	r6, r8, r1, r6
 80101e0:	b2b6      	uxth	r6, r6
 80101e2:	1c71      	adds	r1, r6, #1
 80101e4:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80101e8:	4671      	mov	r1, lr
 80101ea:	1236      	asrs	r6, r6, #8
 80101ec:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80101f0:	ed90 7a08 	vldr	s14, [r0, #32]
 80101f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101f8:	e7b5      	b.n	8010166 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80101fa:	4563      	cmp	r3, ip
 80101fc:	dd5d      	ble.n	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80101fe:	edd0 7a08 	vldr	s15, [r0, #32]
 8010202:	eba3 030c 	sub.w	r3, r3, ip
 8010206:	68c4      	ldr	r4, [r0, #12]
 8010208:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801020c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010214:	7c00      	ldrb	r0, [r0, #16]
 8010216:	440b      	add	r3, r1
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	bfd8      	it	le
 801021e:	2200      	movle	r2, #0
 8010220:	58a2      	ldr	r2, [r4, r2]
 8010222:	b2d4      	uxtb	r4, r2
 8010224:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8010228:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801022c:	b160      	cbz	r0, 8010248 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801022e:	2dff      	cmp	r5, #255	@ 0xff
 8010230:	d10a      	bne.n	8010248 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8010232:	4299      	cmp	r1, r3
 8010234:	d241      	bcs.n	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010236:	700c      	strb	r4, [r1, #0]
 8010238:	3103      	adds	r1, #3
 801023a:	f801 cc02 	strb.w	ip, [r1, #-2]
 801023e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8010242:	e7f6      	b.n	8010232 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8010244:	4694      	mov	ip, r2
 8010246:	e7da      	b.n	80101fe <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8010248:	0e12      	lsrs	r2, r2, #24
 801024a:	436a      	muls	r2, r5
 801024c:	1c55      	adds	r5, r2, #1
 801024e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8010252:	122d      	asrs	r5, r5, #8
 8010254:	43ee      	mvns	r6, r5
 8010256:	b2ad      	uxth	r5, r5
 8010258:	fb14 f405 	smulbb	r4, r4, r5
 801025c:	b2f6      	uxtb	r6, r6
 801025e:	fb1c f005 	smulbb	r0, ip, r5
 8010262:	fb17 f505 	smulbb	r5, r7, r5
 8010266:	b2a4      	uxth	r4, r4
 8010268:	b280      	uxth	r0, r0
 801026a:	b2ad      	uxth	r5, r5
 801026c:	428b      	cmp	r3, r1
 801026e:	f101 0203 	add.w	r2, r1, #3
 8010272:	d922      	bls.n	80102ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010274:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010278:	fb01 4106 	mla	r1, r1, r6, r4
 801027c:	b289      	uxth	r1, r1
 801027e:	1c4f      	adds	r7, r1, #1
 8010280:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010284:	1209      	asrs	r1, r1, #8
 8010286:	f802 1c03 	strb.w	r1, [r2, #-3]
 801028a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801028e:	fb01 0106 	mla	r1, r1, r6, r0
 8010292:	b289      	uxth	r1, r1
 8010294:	1c4f      	adds	r7, r1, #1
 8010296:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801029a:	1209      	asrs	r1, r1, #8
 801029c:	f802 1c02 	strb.w	r1, [r2, #-2]
 80102a0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80102a4:	fb01 5106 	mla	r1, r1, r6, r5
 80102a8:	b289      	uxth	r1, r1
 80102aa:	1c4f      	adds	r7, r1, #1
 80102ac:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80102b0:	1209      	asrs	r1, r1, #8
 80102b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80102b6:	4611      	mov	r1, r2
 80102b8:	e7d8      	b.n	801026c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80102ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102be:	bf00      	nop
 80102c0:	447ffffe 	.word	0x447ffffe
 80102c4:	00000000 	.word	0x00000000

080102c8 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80102c8:	4770      	bx	lr

080102ca <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80102ca:	4770      	bx	lr

080102cc <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	4604      	mov	r4, r0
 80102d0:	2124      	movs	r1, #36	@ 0x24
 80102d2:	f011 fd00 	bl	8021cd6 <_ZdlPvj>
 80102d6:	4620      	mov	r0, r4
 80102d8:	bd10      	pop	{r4, pc}
	...

080102dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80102dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80102de:	6803      	ldr	r3, [r0, #0]
 80102e0:	460d      	mov	r5, r1
 80102e2:	4604      	mov	r4, r0
 80102e4:	4601      	mov	r1, r0
 80102e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80102e8:	a802      	add	r0, sp, #8
 80102ea:	4798      	blx	r3
 80102ec:	6828      	ldr	r0, [r5, #0]
 80102ee:	6869      	ldr	r1, [r5, #4]
 80102f0:	466b      	mov	r3, sp
 80102f2:	c303      	stmia	r3!, {r0, r1}
 80102f4:	4668      	mov	r0, sp
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7fd fc88 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 80102fc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80102fe:	b188      	cbz	r0, 8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010300:	6803      	ldr	r3, [r0, #0]
 8010302:	1d21      	adds	r1, r4, #4
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	4798      	blx	r3
 8010308:	b160      	cbz	r0, 8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801030a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	dd08      	ble.n	8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010312:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8010316:	2d00      	cmp	r5, #0
 8010318:	dd04      	ble.n	8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801031a:	4a2b      	ldr	r2, [pc, #172]	@ (80103c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801031c:	7812      	ldrb	r2, [r2, #0]
 801031e:	b11a      	cbz	r2, 8010328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8010320:	2a01      	cmp	r2, #1
 8010322:	d029      	beq.n	8010378 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8010324:	b004      	add	sp, #16
 8010326:	bd70      	pop	{r4, r5, r6, pc}
 8010328:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801032c:	441d      	add	r5, r3
 801032e:	b2ad      	uxth	r5, r5
 8010330:	b22e      	sxth	r6, r5
 8010332:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8010336:	42b3      	cmp	r3, r6
 8010338:	daf4      	bge.n	8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	4669      	mov	r1, sp
 801033e:	4620      	mov	r0, r4
 8010340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010342:	4798      	blx	r3
 8010344:	b940      	cbnz	r0, 8010358 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8010346:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801034a:	2b01      	cmp	r3, #1
 801034c:	d004      	beq.n	8010358 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801034e:	3301      	adds	r3, #1
 8010350:	105b      	asrs	r3, r3, #1
 8010352:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010356:	e7f0      	b.n	801033a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8010358:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801035c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010360:	4413      	add	r3, r2
 8010362:	b29b      	uxth	r3, r3
 8010364:	441a      	add	r2, r3
 8010366:	f8ad 3002 	strh.w	r3, [sp, #2]
 801036a:	b212      	sxth	r2, r2
 801036c:	4296      	cmp	r6, r2
 801036e:	dae0      	bge.n	8010332 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010370:	1aeb      	subs	r3, r5, r3
 8010372:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010376:	e7dc      	b.n	8010332 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010378:	f8bd 5000 	ldrh.w	r5, [sp]
 801037c:	441d      	add	r5, r3
 801037e:	b2ad      	uxth	r5, r5
 8010380:	b22e      	sxth	r6, r5
 8010382:	f9bd 3000 	ldrsh.w	r3, [sp]
 8010386:	42b3      	cmp	r3, r6
 8010388:	dacc      	bge.n	8010324 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	4669      	mov	r1, sp
 801038e:	4620      	mov	r0, r4
 8010390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010392:	4798      	blx	r3
 8010394:	b940      	cbnz	r0, 80103a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8010396:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d004      	beq.n	80103a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801039e:	3301      	adds	r3, #1
 80103a0:	105b      	asrs	r3, r3, #1
 80103a2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80103a6:	e7f0      	b.n	801038a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80103a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80103ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80103b0:	4413      	add	r3, r2
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	441a      	add	r2, r3
 80103b6:	f8ad 3000 	strh.w	r3, [sp]
 80103ba:	b212      	sxth	r2, r2
 80103bc:	4296      	cmp	r6, r2
 80103be:	dae0      	bge.n	8010382 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80103c0:	1aeb      	subs	r3, r5, r3
 80103c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80103c6:	e7dc      	b.n	8010382 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80103c8:	2402849c 	.word	0x2402849c

080103cc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80103cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103ce:	6803      	ldr	r3, [r0, #0]
 80103d0:	4604      	mov	r4, r0
 80103d2:	4601      	mov	r1, r0
 80103d4:	4668      	mov	r0, sp
 80103d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103d8:	4798      	blx	r3
 80103da:	2100      	movs	r1, #0
 80103dc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80103e0:	4668      	mov	r0, sp
 80103e2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80103e6:	9102      	str	r1, [sp, #8]
 80103e8:	a902      	add	r1, sp, #8
 80103ea:	f8ad 200c 	strh.w	r2, [sp, #12]
 80103ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80103f2:	f7fd fc0b 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	4669      	mov	r1, sp
 80103fa:	4620      	mov	r0, r4
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	4798      	blx	r3
 8010400:	b004      	add	sp, #16
 8010402:	bd10      	pop	{r4, pc}

08010404 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8010404:	2101      	movs	r1, #1
 8010406:	2200      	movs	r2, #0
 8010408:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801040c:	490a      	ldr	r1, [pc, #40]	@ (8010438 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801040e:	8082      	strh	r2, [r0, #4]
 8010410:	6001      	str	r1, [r0, #0]
 8010412:	21ff      	movs	r1, #255	@ 0xff
 8010414:	80c2      	strh	r2, [r0, #6]
 8010416:	8102      	strh	r2, [r0, #8]
 8010418:	8142      	strh	r2, [r0, #10]
 801041a:	8182      	strh	r2, [r0, #12]
 801041c:	81c2      	strh	r2, [r0, #14]
 801041e:	8202      	strh	r2, [r0, #16]
 8010420:	8242      	strh	r2, [r0, #18]
 8010422:	61c2      	str	r2, [r0, #28]
 8010424:	8402      	strh	r2, [r0, #32]
 8010426:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010428:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801042c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8010430:	6282      	str	r2, [r0, #40]	@ 0x28
 8010432:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010436:	4770      	bx	lr
 8010438:	08026030 	.word	0x08026030

0801043c <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801043c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8010440:	4770      	bx	lr

08010442 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8010442:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8010446:	4770      	bx	lr

08010448 <_ZN8touchgfx13ScalableImageD1Ev>:
 8010448:	4770      	bx	lr

0801044a <_ZN8touchgfx13ScalableImageD0Ev>:
 801044a:	b510      	push	{r4, lr}
 801044c:	4604      	mov	r4, r0
 801044e:	212c      	movs	r1, #44	@ 0x2c
 8010450:	f011 fc41 	bl	8021cd6 <_ZdlPvj>
 8010454:	4620      	mov	r0, r4
 8010456:	bd10      	pop	{r4, pc}

08010458 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8010458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801045a:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801045e:	b085      	sub	sp, #20
 8010460:	4604      	mov	r4, r0
 8010462:	460d      	mov	r5, r1
 8010464:	2bff      	cmp	r3, #255	@ 0xff
 8010466:	d128      	bne.n	80104ba <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8010468:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 801046c:	4668      	mov	r0, sp
 801046e:	4631      	mov	r1, r6
 8010470:	f006 fe9e 	bl	80171b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010474:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8010478:	4630      	mov	r0, r6
 801047a:	f006 fe31 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801047e:	4287      	cmp	r7, r0
 8010480:	d11b      	bne.n	80104ba <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8010482:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8010486:	4630      	mov	r0, r6
 8010488:	f006 fe5e 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801048c:	4287      	cmp	r7, r0
 801048e:	d114      	bne.n	80104ba <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8010490:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8010494:	2100      	movs	r1, #0
 8010496:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801049a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801049e:	466b      	mov	r3, sp
 80104a0:	9102      	str	r1, [sp, #8]
 80104a2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80104a6:	cb03      	ldmia	r3!, {r0, r1}
 80104a8:	6020      	str	r0, [r4, #0]
 80104aa:	4620      	mov	r0, r4
 80104ac:	6061      	str	r1, [r4, #4]
 80104ae:	4619      	mov	r1, r3
 80104b0:	f7fd fbac 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 80104b4:	4620      	mov	r0, r4
 80104b6:	b005      	add	sp, #20
 80104b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ba:	2300      	movs	r3, #0
 80104bc:	8023      	strh	r3, [r4, #0]
 80104be:	8063      	strh	r3, [r4, #2]
 80104c0:	80a3      	strh	r3, [r4, #4]
 80104c2:	80e3      	strh	r3, [r4, #6]
 80104c4:	e7f6      	b.n	80104b4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>
	...

080104c8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	2300      	movs	r3, #0
 80104cc:	2501      	movs	r5, #1
 80104ce:	4604      	mov	r4, r0
 80104d0:	8083      	strh	r3, [r0, #4]
 80104d2:	80c3      	strh	r3, [r0, #6]
 80104d4:	8103      	strh	r3, [r0, #8]
 80104d6:	8143      	strh	r3, [r0, #10]
 80104d8:	8183      	strh	r3, [r0, #12]
 80104da:	81c3      	strh	r3, [r0, #14]
 80104dc:	8203      	strh	r3, [r0, #16]
 80104de:	8243      	strh	r3, [r0, #18]
 80104e0:	61c3      	str	r3, [r0, #28]
 80104e2:	8403      	strh	r3, [r0, #32]
 80104e4:	8443      	strh	r3, [r0, #34]	@ 0x22
 80104e6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80104ea:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80104ee:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80104f2:	4b07      	ldr	r3, [pc, #28]	@ (8010510 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 80104f4:	6003      	str	r3, [r0, #0]
 80104f6:	880b      	ldrh	r3, [r1, #0]
 80104f8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80104fa:	23ff      	movs	r3, #255	@ 0xff
 80104fc:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8010500:	f000 fded 	bl	80110de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010504:	4b03      	ldr	r3, [pc, #12]	@ (8010514 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8010506:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 801050a:	4620      	mov	r0, r4
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	08026214 	.word	0x08026214
 8010514:	080260a8 	.word	0x080260a8

08010518 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8010518:	4603      	mov	r3, r0
 801051a:	3026      	adds	r0, #38	@ 0x26
 801051c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8010520:	b90b      	cbnz	r3, 8010526 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8010522:	f004 be6d 	b.w	8015200 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8010526:	f004 be7b 	b.w	8015220 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801052c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010530:	4604      	mov	r4, r0
 8010532:	b0b3      	sub	sp, #204	@ 0xcc
 8010534:	469b      	mov	fp, r3
 8010536:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801053a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801053e:	2500      	movs	r5, #0
 8010540:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8010544:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8010548:	ab11      	add	r3, sp, #68	@ 0x44
 801054a:	9206      	str	r2, [sp, #24]
 801054c:	4618      	mov	r0, r3
 801054e:	9511      	str	r5, [sp, #68]	@ 0x44
 8010550:	9307      	str	r3, [sp, #28]
 8010552:	ad13      	add	r5, sp, #76	@ 0x4c
 8010554:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 8010558:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 801055c:	f7fd fb56 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 8010560:	9b07      	ldr	r3, [sp, #28]
 8010562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010566:	e885 0003 	stmia.w	r5, {r0, r1}
 801056a:	6821      	ldr	r1, [r4, #0]
 801056c:	4620      	mov	r0, r4
 801056e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8010570:	4629      	mov	r1, r5
 8010572:	47b0      	blx	r6
 8010574:	4621      	mov	r1, r4
 8010576:	a815      	add	r0, sp, #84	@ 0x54
 8010578:	1d26      	adds	r6, r4, #4
 801057a:	f004 fa79 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801057e:	a815      	add	r0, sp, #84	@ 0x54
 8010580:	f002 fff4 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	4631      	mov	r1, r6
 8010588:	4618      	mov	r0, r3
 801058a:	f003 f833 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801058e:	4628      	mov	r0, r5
 8010590:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8010594:	f002 ffea 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010598:	4628      	mov	r0, r5
 801059a:	f006 fe93 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801059e:	9007      	str	r0, [sp, #28]
 80105a0:	2800      	cmp	r0, #0
 80105a2:	f000 80ce 	beq.w	8010742 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80105a6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80105aa:	a809      	add	r0, sp, #36	@ 0x24
 80105ac:	f8db 1000 	ldr.w	r1, [fp]
 80105b0:	920c      	str	r2, [sp, #48]	@ 0x30
 80105b2:	f8da 2000 	ldr.w	r2, [sl]
 80105b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80105b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80105ba:	f8da 2004 	ldr.w	r2, [sl, #4]
 80105be:	f8db 1004 	ldr.w	r1, [fp, #4]
 80105c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80105c4:	f8da 2008 	ldr.w	r2, [sl, #8]
 80105c8:	910a      	str	r1, [sp, #40]	@ 0x28
 80105ca:	920f      	str	r2, [sp, #60]	@ 0x3c
 80105cc:	f8db 1008 	ldr.w	r1, [fp, #8]
 80105d0:	f8da 200c 	ldr.w	r2, [sl, #12]
 80105d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80105d6:	a90d      	add	r1, sp, #52	@ 0x34
 80105d8:	9210      	str	r2, [sp, #64]	@ 0x40
 80105da:	4632      	mov	r2, r6
 80105dc:	f002 ffee 	bl	80135bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105e0:	4632      	mov	r2, r6
 80105e2:	a90e      	add	r1, sp, #56	@ 0x38
 80105e4:	a80a      	add	r0, sp, #40	@ 0x28
 80105e6:	f002 ffe9 	bl	80135bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105ea:	4632      	mov	r2, r6
 80105ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80105ee:	a80b      	add	r0, sp, #44	@ 0x2c
 80105f0:	f002 ffe4 	bl	80135bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105f4:	4632      	mov	r2, r6
 80105f6:	a910      	add	r1, sp, #64	@ 0x40
 80105f8:	a80c      	add	r0, sp, #48	@ 0x30
 80105fa:	f002 ffdf 	bl	80135bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80105fe:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8010602:	ed97 3a00 	vldr	s6, [r7]
 8010606:	eef0 6a67 	vmov.f32	s13, s15
 801060a:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801060e:	edd7 4a01 	vldr	s9, [r7, #4]
 8010612:	eeb0 7a67 	vmov.f32	s14, s15
 8010616:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 801061a:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801061e:	ed99 2a00 	vldr	s4, [r9]
 8010622:	eeb0 6a67 	vmov.f32	s12, s15
 8010626:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 801062a:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801062e:	edd8 2a00 	vldr	s5, [r8]
 8010632:	edd9 3a01 	vldr	s7, [r9, #4]
 8010636:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801063a:	ed98 4a01 	vldr	s8, [r8, #4]
 801063e:	ed99 5a02 	vldr	s10, [r9, #8]
 8010642:	edd8 5a02 	vldr	s11, [r8, #8]
 8010646:	ee16 6a10 	vmov	r6, s12
 801064a:	eeb0 6a67 	vmov.f32	s12, s15
 801064e:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8010652:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010656:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801065a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801065e:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8010662:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 8010666:	ee16 0a10 	vmov	r0, s12
 801066a:	eeb0 6a67 	vmov.f32	s12, s15
 801066e:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8010672:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8010676:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801067a:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 801067e:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8010682:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8010686:	ee16 1a10 	vmov	r1, s12
 801068a:	eeb0 6a67 	vmov.f32	s12, s15
 801068e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8010692:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8010696:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801069a:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 801069e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80106a2:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80106a6:	68ff      	ldr	r7, [r7, #12]
 80106a8:	ee16 2a10 	vmov	r2, s12
 80106ac:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 80106b0:	9624      	str	r6, [sp, #144]	@ 0x90
 80106b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80106b6:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 80106ba:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 80106be:	4628      	mov	r0, r5
 80106c0:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 80106c4:	9b06      	ldr	r3, [sp, #24]
 80106c6:	922d      	str	r2, [sp, #180]	@ 0xb4
 80106c8:	4a1f      	ldr	r2, [pc, #124]	@ (8010748 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 80106ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 80106cc:	8812      	ldrh	r2, [r2, #0]
 80106ce:	9b07      	ldr	r3, [sp, #28]
 80106d0:	9218      	str	r2, [sp, #96]	@ 0x60
 80106d2:	9319      	str	r3, [sp, #100]	@ 0x64
 80106d4:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 80106d8:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 80106dc:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 80106e0:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 80106e4:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 80106e8:	9731      	str	r7, [sp, #196]	@ 0xc4
 80106ea:	f006 fe1b 	bl	8017324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80106ee:	901a      	str	r0, [sp, #104]	@ 0x68
 80106f0:	4628      	mov	r0, r5
 80106f2:	f006 fcf5 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80106f6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80106f8:	4628      	mov	r0, r5
 80106fa:	f006 fd25 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106fe:	901c      	str	r0, [sp, #112]	@ 0x70
 8010700:	4628      	mov	r0, r5
 8010702:	f006 fced 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010706:	4b11      	ldr	r3, [pc, #68]	@ (801074c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8010708:	901d      	str	r0, [sp, #116]	@ 0x74
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010710:	b10a      	cbz	r2, 8010716 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 8010712:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8010714:	b905      	cbnz	r5, 8010718 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8010716:	689d      	ldr	r5, [r3, #8]
 8010718:	682b      	ldr	r3, [r5, #0]
 801071a:	4620      	mov	r0, r4
 801071c:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 801071e:	f7ff fefb 	bl	8010518 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8010722:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010726:	aa1e      	add	r2, sp, #120	@ 0x78
 8010728:	a917      	add	r1, sp, #92	@ 0x5c
 801072a:	9304      	str	r3, [sp, #16]
 801072c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010730:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010734:	ab13      	add	r3, sp, #76	@ 0x4c
 8010736:	4628      	mov	r0, r5
 8010738:	9301      	str	r3, [sp, #4]
 801073a:	ab15      	add	r3, sp, #84	@ 0x54
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	ab19      	add	r3, sp, #100	@ 0x64
 8010740:	47b0      	blx	r6
 8010742:	b033      	add	sp, #204	@ 0xcc
 8010744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010748:	2402849e 	.word	0x2402849e
 801074c:	240284a4 	.word	0x240284a4

08010750 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	ed2d 8b04 	vpush	{d8-d9}
 8010756:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801075a:	b098      	sub	sp, #96	@ 0x60
 801075c:	4604      	mov	r4, r0
 801075e:	460e      	mov	r6, r1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d065      	beq.n	8010830 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8010764:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010768:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 801076c:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 801084c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8010770:	ee09 3a10 	vmov	s18, r3
 8010774:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010778:	4628      	mov	r0, r5
 801077a:	ee08 3a90 	vmov	s17, r3
 801077e:	4b34      	ldr	r3, [pc, #208]	@ (8010850 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8010780:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8010784:	930c      	str	r3, [sp, #48]	@ 0x30
 8010786:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801078a:	930d      	str	r3, [sp, #52]	@ 0x34
 801078c:	930e      	str	r3, [sp, #56]	@ 0x38
 801078e:	ee39 9a08 	vadd.f32	s18, s18, s16
 8010792:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010794:	f006 fca4 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010798:	ee07 0a90 	vmov	s15, r0
 801079c:	4628      	mov	r0, r5
 801079e:	ee78 8a88 	vadd.f32	s17, s17, s16
 80107a2:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80107a6:	f006 fccf 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80107aa:	4b2a      	ldr	r3, [pc, #168]	@ (8010854 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80107ac:	ee07 0a90 	vmov	s15, r0
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80107b6:	eef0 7a48 	vmov.f32	s15, s16
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d13c      	bne.n	8010838 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80107be:	eef0 6a69 	vmov.f32	s13, s19
 80107c2:	ee19 3a90 	vmov	r3, s19
 80107c6:	eeb0 6a47 	vmov.f32	s12, s14
 80107ca:	eef0 5a47 	vmov.f32	s11, s14
 80107ce:	eef0 9a48 	vmov.f32	s19, s16
 80107d2:	eeb0 7a48 	vmov.f32	s14, s16
 80107d6:	9314      	str	r3, [sp, #80]	@ 0x50
 80107d8:	ab14      	add	r3, sp, #80	@ 0x50
 80107da:	2200      	movs	r2, #0
 80107dc:	4631      	mov	r1, r6
 80107de:	9303      	str	r3, [sp, #12]
 80107e0:	ab10      	add	r3, sp, #64	@ 0x40
 80107e2:	4620      	mov	r0, r4
 80107e4:	edcd 7a04 	vstr	s15, [sp, #16]
 80107e8:	9302      	str	r3, [sp, #8]
 80107ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80107ec:	ed8d 9a05 	vstr	s18, [sp, #20]
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	ab08      	add	r3, sp, #32
 80107f4:	ed8d 9a06 	vstr	s18, [sp, #24]
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	ab04      	add	r3, sp, #16
 80107fc:	edcd 7a07 	vstr	s15, [sp, #28]
 8010800:	edcd 7a08 	vstr	s15, [sp, #32]
 8010804:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8010808:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 801080c:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 8010810:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8010814:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8010818:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 801081c:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8010820:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8010824:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 8010828:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 801082c:	f7ff fe7e 	bl	801052c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010830:	b018      	add	sp, #96	@ 0x60
 8010832:	ecbd 8b04 	vpop	{d8-d9}
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	eef0 6a47 	vmov.f32	s13, s14
 801083c:	ee18 3a10 	vmov	r3, s16
 8010840:	eef0 5a69 	vmov.f32	s11, s19
 8010844:	eeb0 6a48 	vmov.f32	s12, s16
 8010848:	e7c5      	b.n	80107d6 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801084a:	bf00      	nop
 801084c:	00000000 	.word	0x00000000
 8010850:	42c80000 	.word	0x42c80000
 8010854:	2402849c 	.word	0x2402849c

08010858 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8010858:	2000      	movs	r0, #0
 801085a:	4770      	bx	lr

0801085c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801085c:	4b07      	ldr	r3, [pc, #28]	@ (801087c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801085e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	4293      	cmp	r3, r2
 8010864:	bf81      	itttt	hi
 8010866:	4b06      	ldrhi	r3, [pc, #24]	@ (8010880 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8010868:	681b      	ldrhi	r3, [r3, #0]
 801086a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801086e:	7858      	ldrbhi	r0, [r3, #1]
 8010870:	bf8c      	ite	hi
 8010872:	f000 0003 	andhi.w	r0, r0, #3
 8010876:	2000      	movls	r0, #0
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	24028500 	.word	0x24028500
 8010880:	240284fc 	.word	0x240284fc

08010884 <_ZN8touchgfx8TextAreaD1Ev>:
 8010884:	4770      	bx	lr
	...

08010888 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8010888:	4b11      	ldr	r3, [pc, #68]	@ (80108d0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801088e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8010890:	4604      	mov	r4, r0
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	428b      	cmp	r3, r1
 8010896:	d918      	bls.n	80108ca <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8010898:	6803      	ldr	r3, [r0, #0]
 801089a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 801089c:	4b0d      	ldr	r3, [pc, #52]	@ (80108d4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801089e:	6818      	ldr	r0, [r3, #0]
 80108a0:	f7f3 fd5a 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	4606      	mov	r6, r0
 80108a8:	4620      	mov	r0, r4
 80108aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108ac:	4798      	blx	r3
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	4607      	mov	r7, r0
 80108b2:	4620      	mov	r0, r4
 80108b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108b8:	4798      	blx	r3
 80108ba:	463a      	mov	r2, r7
 80108bc:	4603      	mov	r3, r0
 80108be:	4631      	mov	r1, r6
 80108c0:	4620      	mov	r0, r4
 80108c2:	46ac      	mov	ip, r5
 80108c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	4760      	bx	ip
 80108ca:	2000      	movs	r0, #0
 80108cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d0:	24028500 	.word	0x24028500
 80108d4:	24028508 	.word	0x24028508

080108d8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80108d8:	4b18      	ldr	r3, [pc, #96]	@ (801093c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80108da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108de:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80108e0:	4604      	mov	r4, r0
 80108e2:	881b      	ldrh	r3, [r3, #0]
 80108e4:	428b      	cmp	r3, r1
 80108e6:	d926      	bls.n	8010936 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80108e8:	4b15      	ldr	r3, [pc, #84]	@ (8010940 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80108f0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80108f4:	4b13      	ldr	r3, [pc, #76]	@ (8010944 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80108f6:	7855      	ldrb	r5, [r2, #1]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80108fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010902:	6833      	ldr	r3, [r6, #0]
 8010904:	69df      	ldr	r7, [r3, #28]
 8010906:	4b10      	ldr	r3, [pc, #64]	@ (8010948 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8010908:	6818      	ldr	r0, [r3, #0]
 801090a:	f7f3 fd25 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	4680      	mov	r8, r0
 8010912:	4620      	mov	r0, r4
 8010914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010916:	4798      	blx	r3
 8010918:	6823      	ldr	r3, [r4, #0]
 801091a:	4681      	mov	r9, r0
 801091c:	4620      	mov	r0, r4
 801091e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010922:	4798      	blx	r3
 8010924:	464b      	mov	r3, r9
 8010926:	9000      	str	r0, [sp, #0]
 8010928:	4642      	mov	r2, r8
 801092a:	4629      	mov	r1, r5
 801092c:	4630      	mov	r0, r6
 801092e:	47b8      	blx	r7
 8010930:	b003      	add	sp, #12
 8010932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010936:	2000      	movs	r0, #0
 8010938:	e7fa      	b.n	8010930 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801093a:	bf00      	nop
 801093c:	24028500 	.word	0x24028500
 8010940:	240284fc 	.word	0x240284fc
 8010944:	24028504 	.word	0x24028504
 8010948:	24028508 	.word	0x24028508

0801094c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801094c:	b40e      	push	{r1, r2, r3}
 801094e:	4b30      	ldr	r3, [pc, #192]	@ (8010a10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8010950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010954:	881a      	ldrh	r2, [r3, #0]
 8010956:	b09d      	sub	sp, #116	@ 0x74
 8010958:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801095a:	4604      	mov	r4, r0
 801095c:	429a      	cmp	r2, r3
 801095e:	d954      	bls.n	8010a0a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8010960:	aa26      	add	r2, sp, #152	@ 0x98
 8010962:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8010a14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8010966:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8010a18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801096a:	9202      	str	r2, [sp, #8]
 801096c:	f8d9 2000 	ldr.w	r2, [r9]
 8010970:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010974:	f8d8 3000 	ldr.w	r3, [r8]
 8010978:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	4628      	mov	r0, r5
 8010980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010982:	4798      	blx	r3
 8010984:	4606      	mov	r6, r0
 8010986:	b207      	sxth	r7, r0
 8010988:	a803      	add	r0, sp, #12
 801098a:	f004 ff61 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 801098e:	682b      	ldr	r3, [r5, #0]
 8010990:	4628      	mov	r0, r5
 8010992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010994:	4798      	blx	r3
 8010996:	682b      	ldr	r3, [r5, #0]
 8010998:	4682      	mov	sl, r0
 801099a:	4628      	mov	r0, r5
 801099c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801099e:	4798      	blx	r3
 80109a0:	4653      	mov	r3, sl
 80109a2:	9000      	str	r0, [sp, #0]
 80109a4:	a803      	add	r0, sp, #12
 80109a6:	9a02      	ldr	r2, [sp, #8]
 80109a8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80109aa:	f004 ffac 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80109ae:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80109b0:	f8d9 3000 	ldr.w	r3, [r9]
 80109b4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80109b8:	8925      	ldrh	r5, [r4, #8]
 80109ba:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80109be:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80109c2:	eba5 050c 	sub.w	r5, r5, ip
 80109c6:	784a      	ldrb	r2, [r1, #1]
 80109c8:	f8d8 3000 	ldr.w	r3, [r8]
 80109cc:	b22d      	sxth	r5, r5
 80109ce:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80109d2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80109d6:	9500      	str	r5, [sp, #0]
 80109d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80109dc:	a803      	add	r0, sp, #12
 80109de:	f002 facb 	bl	8012f78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80109e2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80109e6:	b203      	sxth	r3, r0
 80109e8:	18b9      	adds	r1, r7, r2
 80109ea:	2900      	cmp	r1, #0
 80109ec:	dd0b      	ble.n	8010a06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80109ee:	3b01      	subs	r3, #1
 80109f0:	fb13 f302 	smulbb	r3, r3, r2
 80109f4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80109f8:	b21f      	sxth	r7, r3
 80109fa:	4638      	mov	r0, r7
 80109fc:	b01d      	add	sp, #116	@ 0x74
 80109fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a02:	b003      	add	sp, #12
 8010a04:	4770      	bx	lr
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	dcf7      	bgt.n	80109fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010a0a:	2700      	movs	r7, #0
 8010a0c:	e7f5      	b.n	80109fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010a0e:	bf00      	nop
 8010a10:	24028500 	.word	0x24028500
 8010a14:	240284fc 	.word	0x240284fc
 8010a18:	24028504 	.word	0x24028504

08010a1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8010a1c:	4bbd      	ldr	r3, [pc, #756]	@ (8010d14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8010a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a22:	460c      	mov	r4, r1
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8010a28:	b0a9      	sub	sp, #164	@ 0xa4
 8010a2a:	4680      	mov	r8, r0
 8010a2c:	428b      	cmp	r3, r1
 8010a2e:	d809      	bhi.n	8010a44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8010a30:	2300      	movs	r3, #0
 8010a32:	f04f 32ff 	mov.w	r2, #4294967295
 8010a36:	6083      	str	r3, [r0, #8]
 8010a38:	e9c0 3200 	strd	r3, r2, [r0]
 8010a3c:	4640      	mov	r0, r8
 8010a3e:	b029      	add	sp, #164	@ 0xa4
 8010a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a44:	4eb4      	ldr	r6, [pc, #720]	@ (8010d18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8010a46:	6833      	ldr	r3, [r6, #0]
 8010a48:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8010a4c:	4bb3      	ldr	r3, [pc, #716]	@ (8010d1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010a54:	4bb2      	ldr	r3, [pc, #712]	@ (8010d20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8010a56:	6818      	ldr	r0, [r3, #0]
 8010a58:	f7f3 fc7e 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8010a5c:	682b      	ldr	r3, [r5, #0]
 8010a5e:	4681      	mov	r9, r0
 8010a60:	4628      	mov	r0, r5
 8010a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a64:	4798      	blx	r3
 8010a66:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8010a68:	b203      	sxth	r3, r0
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	4407      	add	r7, r0
 8010a6e:	a80f      	add	r0, sp, #60	@ 0x3c
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	b2bb      	uxth	r3, r7
 8010a74:	9303      	str	r3, [sp, #12]
 8010a76:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f040 80a5 	bne.w	8010bca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8010a80:	f004 fee6 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	4628      	mov	r0, r5
 8010a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a8a:	4798      	blx	r3
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	4606      	mov	r6, r0
 8010a90:	4628      	mov	r0, r5
 8010a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a94:	4798      	blx	r3
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	4607      	mov	r7, r0
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a9e:	4798      	blx	r3
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	4683      	mov	fp, r0
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010aaa:	4798      	blx	r3
 8010aac:	463b      	mov	r3, r7
 8010aae:	4649      	mov	r1, r9
 8010ab0:	4632      	mov	r2, r6
 8010ab2:	2600      	movs	r6, #0
 8010ab4:	e9cd b000 	strd	fp, r0, [sp]
 8010ab8:	a80f      	add	r0, sp, #60	@ 0x3c
 8010aba:	4637      	mov	r7, r6
 8010abc:	f004 ff38 	bl	8015930 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8010ac0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010ac4:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8010d18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8010ac8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8010acc:	bf0c      	ite	eq
 8010ace:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8010ad2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8010ad6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8010ad8:	4629      	mov	r1, r5
 8010ada:	f8db 3000 	ldr.w	r3, [fp]
 8010ade:	a80f      	add	r0, sp, #60	@ 0x3c
 8010ae0:	3701      	adds	r7, #1
 8010ae2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010ae6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010aea:	b2bf      	uxth	r7, r7
 8010aec:	785b      	ldrb	r3, [r3, #1]
 8010aee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010af2:	f001 ff48 	bl	8012986 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010af6:	9b03      	ldr	r3, [sp, #12]
 8010af8:	4286      	cmp	r6, r0
 8010afa:	eba9 0903 	sub.w	r9, r9, r3
 8010afe:	bfb8      	it	lt
 8010b00:	4606      	movlt	r6, r0
 8010b02:	a80f      	add	r0, sp, #60	@ 0x3c
 8010b04:	fa0f f989 	sxth.w	r9, r9
 8010b08:	b236      	sxth	r6, r6
 8010b0a:	f004 fec8 	bl	801589e <_ZN8touchgfx12TextProvider11endOfStringEv>
 8010b0e:	b918      	cbnz	r0, 8010b18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8010b10:	7a2b      	ldrb	r3, [r5, #8]
 8010b12:	444b      	add	r3, r9
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	dcde      	bgt.n	8010ad6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8010b18:	9b03      	ldr	r3, [sp, #12]
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	9a04      	ldr	r2, [sp, #16]
 8010b1e:	fb13 f707 	smulbb	r7, r3, r7
 8010b22:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010b24:	f895 9009 	ldrb.w	r9, [r5, #9]
 8010b28:	1aff      	subs	r7, r7, r3
 8010b2a:	b2bf      	uxth	r7, r7
 8010b2c:	b23b      	sxth	r3, r7
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	bfa8      	it	ge
 8010b32:	4657      	movge	r7, sl
 8010b34:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010b38:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8010b3c:	6823      	ldr	r3, [r4, #0]
 8010b3e:	444f      	add	r7, r9
 8010b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b42:	bf08      	it	eq
 8010b44:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8010b48:	fa1f f987 	uxth.w	r9, r7
 8010b4c:	bf18      	it	ne
 8010b4e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8010b52:	4798      	blx	r3
 8010b54:	2801      	cmp	r0, #1
 8010b56:	fa0f f789 	sxth.w	r7, r9
 8010b5a:	b2b3      	uxth	r3, r6
 8010b5c:	f000 80e2 	beq.w	8010d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8010b60:	2802      	cmp	r0, #2
 8010b62:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8010b66:	f000 80e3 	beq.w	8010d30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8010b6a:	7aea      	ldrb	r2, [r5, #11]
 8010b6c:	b236      	sxth	r6, r6
 8010b6e:	7b2d      	ldrb	r5, [r5, #12]
 8010b70:	1ab6      	subs	r6, r6, r2
 8010b72:	442a      	add	r2, r5
 8010b74:	fa1f fa86 	uxth.w	sl, r6
 8010b78:	4413      	add	r3, r2
 8010b7a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8010b7e:	fa0f fb8a 	sxth.w	fp, sl
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	2a02      	cmp	r2, #2
 8010b86:	b21e      	sxth	r6, r3
 8010b88:	f000 80d6 	beq.w	8010d38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8010b8c:	2a03      	cmp	r2, #3
 8010b8e:	f000 80de 	beq.w	8010d4e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8010b92:	2a01      	cmp	r2, #1
 8010b94:	f040 80e6 	bne.w	8010d64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8010b98:	8925      	ldrh	r5, [r4, #8]
 8010b9a:	4633      	mov	r3, r6
 8010b9c:	463e      	mov	r6, r7
 8010b9e:	eba5 0909 	sub.w	r9, r5, r9
 8010ba2:	461f      	mov	r7, r3
 8010ba4:	465d      	mov	r5, fp
 8010ba6:	fa0f fb89 	sxth.w	fp, r9
 8010baa:	4b5d      	ldr	r3, [pc, #372]	@ (8010d20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8010bac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	f7f3 fbd2 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8010bb4:	f8a8 b000 	strh.w	fp, [r8]
 8010bb8:	f8a8 5002 	strh.w	r5, [r8, #2]
 8010bbc:	f8a8 6004 	strh.w	r6, [r8, #4]
 8010bc0:	f8a8 7006 	strh.w	r7, [r8, #6]
 8010bc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bc8:	e738      	b.n	8010a3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8010bca:	f004 fe41 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 8010bce:	682b      	ldr	r3, [r5, #0]
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bd4:	4798      	blx	r3
 8010bd6:	682b      	ldr	r3, [r5, #0]
 8010bd8:	4607      	mov	r7, r0
 8010bda:	4628      	mov	r0, r5
 8010bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bde:	4798      	blx	r3
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	4683      	mov	fp, r0
 8010be4:	4620      	mov	r0, r4
 8010be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010be8:	4798      	blx	r3
 8010bea:	6822      	ldr	r2, [r4, #0]
 8010bec:	9005      	str	r0, [sp, #20]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010bf4:	4790      	blx	r2
 8010bf6:	9b05      	ldr	r3, [sp, #20]
 8010bf8:	463a      	mov	r2, r7
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	9001      	str	r0, [sp, #4]
 8010bfe:	a80f      	add	r0, sp, #60	@ 0x3c
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	465b      	mov	r3, fp
 8010c04:	f004 fe94 	bl	8015930 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8010c08:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010c0c:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8010c10:	af0f      	add	r7, sp, #60	@ 0x3c
 8010c12:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8010c16:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010c1a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8010c1c:	bf0a      	itet	eq
 8010c1e:	464a      	moveq	r2, r9
 8010c20:	461a      	movne	r2, r3
 8010c22:	4699      	moveq	r9, r3
 8010c24:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8010c28:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8010c2c:	1ad2      	subs	r2, r2, r3
 8010c2e:	6833      	ldr	r3, [r6, #0]
 8010c30:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8010c34:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010c38:	7859      	ldrb	r1, [r3, #1]
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	9707      	str	r7, [sp, #28]
 8010c3e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8010c42:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c46:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010c4a:	f88d 1020 	strb.w	r1, [sp, #32]
 8010c4e:	9509      	str	r5, [sp, #36]	@ 0x24
 8010c50:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010c54:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8010c58:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8010c5c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8010c60:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010c64:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010c68:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010c6c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010c70:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8010c74:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010c78:	b350      	cbz	r0, 8010cd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8010c7a:	682b      	ldr	r3, [r5, #0]
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	4798      	blx	r3
 8010c82:	4607      	mov	r7, r0
 8010c84:	b320      	cbz	r0, 8010cd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8010c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c88:	4639      	mov	r1, r7
 8010c8a:	6803      	ldr	r3, [r0, #0]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	4798      	blx	r3
 8010c90:	4606      	mov	r6, r0
 8010c92:	b1e8      	cbz	r0, 8010cd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8010c94:	7b43      	ldrb	r3, [r0, #13]
 8010c96:	7a82      	ldrb	r2, [r0, #10]
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8010ca4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8010ca8:	2b06      	cmp	r3, #6
 8010caa:	d111      	bne.n	8010cd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8010cac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010cae:	4632      	mov	r2, r6
 8010cb0:	4639      	mov	r1, r7
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cb6:	4798      	blx	r3
 8010cb8:	7b73      	ldrb	r3, [r6, #13]
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010cc0:	7ab3      	ldrb	r3, [r6, #10]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	4418      	add	r0, r3
 8010cc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010cca:	4418      	add	r0, r3
 8010ccc:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8010cd0:	2600      	movs	r6, #0
 8010cd2:	4637      	mov	r7, r6
 8010cd4:	a806      	add	r0, sp, #24
 8010cd6:	3701      	adds	r7, #1
 8010cd8:	f002 f84b 	bl	8012d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010cdc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8010ce0:	9b03      	ldr	r3, [sp, #12]
 8010ce2:	b2bf      	uxth	r7, r7
 8010ce4:	4286      	cmp	r6, r0
 8010ce6:	eba9 0903 	sub.w	r9, r9, r3
 8010cea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8010cee:	bfb8      	it	lt
 8010cf0:	4606      	movlt	r6, r0
 8010cf2:	fa0f f989 	sxth.w	r9, r9
 8010cf6:	b236      	sxth	r6, r6
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f43f af0d 	beq.w	8010b18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8010cfe:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f47f af08 	bne.w	8010b18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8010d08:	7a2b      	ldrb	r3, [r5, #8]
 8010d0a:	444b      	add	r3, r9
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	dce1      	bgt.n	8010cd4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8010d10:	e702      	b.n	8010b18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8010d12:	bf00      	nop
 8010d14:	24028500 	.word	0x24028500
 8010d18:	240284fc 	.word	0x240284fc
 8010d1c:	24028504 	.word	0x24028504
 8010d20:	24028508 	.word	0x24028508
 8010d24:	ebaa 0606 	sub.w	r6, sl, r6
 8010d28:	2002      	movs	r0, #2
 8010d2a:	fb96 f6f0 	sdiv	r6, r6, r0
 8010d2e:	e71c      	b.n	8010b6a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8010d30:	441e      	add	r6, r3
 8010d32:	ebaa 0606 	sub.w	r6, sl, r6
 8010d36:	e718      	b.n	8010b6a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8010d38:	8925      	ldrh	r5, [r4, #8]
 8010d3a:	1aed      	subs	r5, r5, r3
 8010d3c:	eba5 050a 	sub.w	r5, r5, sl
 8010d40:	fa0f fb85 	sxth.w	fp, r5
 8010d44:	8965      	ldrh	r5, [r4, #10]
 8010d46:	eba5 0509 	sub.w	r5, r5, r9
 8010d4a:	b22d      	sxth	r5, r5
 8010d4c:	e72d      	b.n	8010baa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8010d4e:	8965      	ldrh	r5, [r4, #10]
 8010d50:	f04f 0b00 	mov.w	fp, #0
 8010d54:	1aed      	subs	r5, r5, r3
 8010d56:	4633      	mov	r3, r6
 8010d58:	463e      	mov	r6, r7
 8010d5a:	eba5 050a 	sub.w	r5, r5, sl
 8010d5e:	461f      	mov	r7, r3
 8010d60:	b22d      	sxth	r5, r5
 8010d62:	e722      	b.n	8010baa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8010d64:	2500      	movs	r5, #0
 8010d66:	e720      	b.n	8010baa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08010d68 <_ZN8touchgfx8TextAreaD0Ev>:
 8010d68:	b510      	push	{r4, lr}
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	2148      	movs	r1, #72	@ 0x48
 8010d6e:	f010 ffb2 	bl	8021cd6 <_ZdlPvj>
 8010d72:	4620      	mov	r0, r4
 8010d74:	bd10      	pop	{r4, pc}
	...

08010d78 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8010d78:	b513      	push	{r0, r1, r4, lr}
 8010d7a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8010d7e:	4604      	mov	r4, r0
 8010d80:	b1fb      	cbz	r3, 8010dc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8010d82:	4b16      	ldr	r3, [pc, #88]	@ (8010ddc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8010d84:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	428b      	cmp	r3, r1
 8010d8a:	d91a      	bls.n	8010dc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8010d8c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dd16      	ble.n	8010dc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8010d94:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	dd12      	ble.n	8010dc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8010d9c:	4b10      	ldr	r3, [pc, #64]	@ (8010de0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8010d9e:	6818      	ldr	r0, [r3, #0]
 8010da0:	f7f3 fada 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8010da4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8010da8:	6822      	ldr	r2, [r4, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	db06      	blt.n	8010dbc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8010dae:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	db02      	blt.n	8010dbc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8010db6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010db8:	4298      	cmp	r0, r3
 8010dba:	d004      	beq.n	8010dc6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8010dbc:	6953      	ldr	r3, [r2, #20]
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4798      	blx	r3
 8010dc2:	b002      	add	sp, #8
 8010dc4:	bd10      	pop	{r4, pc}
 8010dc6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8010dca:	466b      	mov	r3, sp
 8010dcc:	6912      	ldr	r2, [r2, #16]
 8010dce:	c903      	ldmia	r1, {r0, r1}
 8010dd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	4790      	blx	r2
 8010dda:	e7f2      	b.n	8010dc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8010ddc:	24028500 	.word	0x24028500
 8010de0:	24028508 	.word	0x24028508

08010de4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8010de4:	4b45      	ldr	r3, [pc, #276]	@ (8010efc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8010de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dea:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8010dec:	b08e      	sub	sp, #56	@ 0x38
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	4604      	mov	r4, r0
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d97e      	bls.n	8010ef4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8010df6:	6808      	ldr	r0, [r1, #0]
 8010df8:	ab05      	add	r3, sp, #20
 8010dfa:	6849      	ldr	r1, [r1, #4]
 8010dfc:	4d40      	ldr	r5, [pc, #256]	@ (8010f00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8010dfe:	c303      	stmia	r3!, {r0, r1}
 8010e00:	4611      	mov	r1, r2
 8010e02:	6828      	ldr	r0, [r5, #0]
 8010e04:	f7f3 faa8 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8010e08:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	db11      	blt.n	8010e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8010e10:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	db0d      	blt.n	8010e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8010e18:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010e1a:	4298      	cmp	r0, r3
 8010e1c:	d10a      	bne.n	8010e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8010e1e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8010e22:	ab09      	add	r3, sp, #36	@ 0x24
 8010e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e28:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	a805      	add	r0, sp, #20
 8010e30:	f7fc feec 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 8010e34:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dd5b      	ble.n	8010ef4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8010e3c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	dd57      	ble.n	8010ef4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8010e44:	4f2f      	ldr	r7, [pc, #188]	@ (8010f04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8010e46:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8010f08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	d04c      	beq.n	8010ef4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8010e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e64:	4798      	blx	r3
 8010e66:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8010e6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010e72:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8010e76:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8010e7a:	785b      	ldrb	r3, [r3, #1]
 8010e7c:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8010e80:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010e84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010e86:	9609      	str	r6, [sp, #36]	@ 0x24
 8010e88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8010f0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8010e8e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8010e98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010e9a:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8010e9e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8010ea2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8010ea6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8010eaa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010eae:	b10a      	cbz	r2, 8010eb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8010eb0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8010eb2:	b906      	cbnz	r6, 8010eb6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8010eb4:	689e      	ldr	r6, [r3, #8]
 8010eb6:	af07      	add	r7, sp, #28
 8010eb8:	4621      	mov	r1, r4
 8010eba:	4638      	mov	r0, r7
 8010ebc:	f003 fdd8 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010ec0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8010ec2:	6828      	ldr	r0, [r5, #0]
 8010ec4:	f7f3 fa48 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	4605      	mov	r5, r0
 8010ecc:	4620      	mov	r0, r4
 8010ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ed0:	4798      	blx	r3
 8010ed2:	6823      	ldr	r3, [r4, #0]
 8010ed4:	4680      	mov	r8, r0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010edc:	4798      	blx	r3
 8010ede:	ab09      	add	r3, sp, #36	@ 0x24
 8010ee0:	9501      	str	r5, [sp, #4]
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	ab05      	add	r3, sp, #20
 8010ee6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8010eea:	4630      	mov	r0, r6
 8010eec:	e897 0006 	ldmia.w	r7, {r1, r2}
 8010ef0:	f7f3 f9e4 	bl	80042bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010ef4:	b00e      	add	sp, #56	@ 0x38
 8010ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efa:	bf00      	nop
 8010efc:	24028500 	.word	0x24028500
 8010f00:	24028508 	.word	0x24028508
 8010f04:	240284fc 	.word	0x240284fc
 8010f08:	24028504 	.word	0x24028504
 8010f0c:	240284a4 	.word	0x240284a4

08010f10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4b0e      	ldr	r3, [pc, #56]	@ (8010f4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8010f14:	4604      	mov	r4, r0
 8010f16:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d214      	bcs.n	8010f48 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8010f1e:	6803      	ldr	r3, [r0, #0]
 8010f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f22:	4798      	blx	r3
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	4605      	mov	r5, r0
 8010f28:	4620      	mov	r0, r4
 8010f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f2c:	4798      	blx	r3
 8010f2e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010f32:	b22d      	sxth	r5, r5
 8010f34:	4601      	mov	r1, r0
 8010f36:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8010f3a:	bf06      	itte	eq
 8010f3c:	4602      	moveq	r2, r0
 8010f3e:	4629      	moveq	r1, r5
 8010f40:	462a      	movne	r2, r5
 8010f42:	4620      	mov	r0, r4
 8010f44:	f7fc ffc0 	bl	800dec8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010f48:	bd38      	pop	{r3, r4, r5, pc}
 8010f4a:	bf00      	nop
 8010f4c:	24028500 	.word	0x24028500

08010f50 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	888b      	ldrh	r3, [r1, #4]
 8010f54:	b085      	sub	sp, #20
 8010f56:	4604      	mov	r4, r0
 8010f58:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010f5a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010f5e:	b923      	cbnz	r3, 8010f6a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8010f60:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010f64:	b90b      	cbnz	r3, 8010f6a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8010f66:	f7ff ffd3 	bl	8010f10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	466d      	mov	r5, sp
 8010f6e:	4621      	mov	r1, r4
 8010f70:	343c      	adds	r4, #60	@ 0x3c
 8010f72:	4628      	mov	r0, r5
 8010f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f78:	4798      	blx	r3
 8010f7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010f82:	b005      	add	sp, #20
 8010f84:	bd30      	pop	{r4, r5, pc}

08010f86 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010f86:	2300      	movs	r3, #0
 8010f88:	8083      	strh	r3, [r0, #4]
 8010f8a:	80c3      	strh	r3, [r0, #6]
 8010f8c:	8003      	strh	r3, [r0, #0]
 8010f8e:	8043      	strh	r3, [r0, #2]
 8010f90:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8010f94:	2bff      	cmp	r3, #255	@ 0xff
 8010f96:	bf01      	itttt	eq
 8010f98:	890b      	ldrheq	r3, [r1, #8]
 8010f9a:	8083      	strheq	r3, [r0, #4]
 8010f9c:	894b      	ldrheq	r3, [r1, #10]
 8010f9e:	80c3      	strheq	r3, [r0, #6]
 8010fa0:	4770      	bx	lr
	...

08010fa4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8010fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	466b      	mov	r3, sp
 8010faa:	6808      	ldr	r0, [r1, #0]
 8010fac:	6849      	ldr	r1, [r1, #4]
 8010fae:	c303      	stmia	r3!, {r0, r1}
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	4669      	mov	r1, sp
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb8:	4798      	blx	r3
 8010fba:	4b08      	ldr	r3, [pc, #32]	@ (8010fdc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010fc2:	b10a      	cbz	r2, 8010fc8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8010fc4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010fc6:	b900      	cbnz	r0, 8010fca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010fc8:	6898      	ldr	r0, [r3, #8]
 8010fca:	6803      	ldr	r3, [r0, #0]
 8010fcc:	4669      	mov	r1, sp
 8010fce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010fd0:	6a1d      	ldr	r5, [r3, #32]
 8010fd2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8010fd6:	47a8      	blx	r5
 8010fd8:	b003      	add	sp, #12
 8010fda:	bd30      	pop	{r4, r5, pc}
 8010fdc:	240284a4 	.word	0x240284a4

08010fe0 <_ZN8touchgfx3BoxD1Ev>:
 8010fe0:	4770      	bx	lr

08010fe2 <_ZN8touchgfx3BoxD0Ev>:
 8010fe2:	b510      	push	{r4, lr}
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	212c      	movs	r1, #44	@ 0x2c
 8010fe8:	f010 fe75 	bl	8021cd6 <_ZdlPvj>
 8010fec:	4620      	mov	r0, r4
 8010fee:	bd10      	pop	{r4, pc}

08010ff0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8010ff0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8010ff4:	b12a      	cbz	r2, 8011002 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010ff6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8010ffa:	b112      	cbz	r2, 8011002 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010ffc:	6803      	ldr	r3, [r0, #0]
 8010ffe:	695b      	ldr	r3, [r3, #20]
 8011000:	4718      	bx	r3
 8011002:	4770      	bx	lr

08011004 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8011004:	4b30      	ldr	r3, [pc, #192]	@ (80110c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8011006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801100a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801100c:	b08d      	sub	sp, #52	@ 0x34
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	4604      	mov	r4, r0
 8011012:	460f      	mov	r7, r1
 8011014:	4293      	cmp	r3, r2
 8011016:	d954      	bls.n	80110c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011018:	4b2c      	ldr	r3, [pc, #176]	@ (80110cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801101a:	6819      	ldr	r1, [r3, #0]
 801101c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8011020:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8011024:	4a2a      	ldr	r2, [pc, #168]	@ (80110d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8011026:	6812      	ldr	r2, [r2, #0]
 8011028:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801102c:	2900      	cmp	r1, #0
 801102e:	d048      	beq.n	80110c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011030:	785a      	ldrb	r2, [r3, #1]
 8011032:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8011036:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801103a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801103e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011042:	4b24      	ldr	r3, [pc, #144]	@ (80110d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011044:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801104e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8011052:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8011056:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011058:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 801105c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8011060:	9107      	str	r1, [sp, #28]
 8011062:	f88d 8020 	strb.w	r8, [sp, #32]
 8011066:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 801106a:	9609      	str	r6, [sp, #36]	@ 0x24
 801106c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8011070:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011074:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8011078:	b10b      	cbz	r3, 801107e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801107a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 801107c:	b905      	cbnz	r5, 8011080 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801107e:	6895      	ldr	r5, [r2, #8]
 8011080:	ae05      	add	r6, sp, #20
 8011082:	4621      	mov	r1, r4
 8011084:	4630      	mov	r0, r6
 8011086:	f003 fcf3 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801108a:	4b13      	ldr	r3, [pc, #76]	@ (80110d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801108c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	f7f3 f962 	bl	8004358 <_ZNK8touchgfx5Texts7getTextEt>
 8011094:	6823      	ldr	r3, [r4, #0]
 8011096:	4680      	mov	r8, r0
 8011098:	4620      	mov	r0, r4
 801109a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801109c:	4798      	blx	r3
 801109e:	6823      	ldr	r3, [r4, #0]
 80110a0:	4681      	mov	r9, r0
 80110a2:	4620      	mov	r0, r4
 80110a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110a8:	4798      	blx	r3
 80110aa:	ab07      	add	r3, sp, #28
 80110ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	463b      	mov	r3, r7
 80110b4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80110b8:	4628      	mov	r0, r5
 80110ba:	e896 0006 	ldmia.w	r6, {r1, r2}
 80110be:	f7f3 f8fd 	bl	80042bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80110c2:	b00d      	add	sp, #52	@ 0x34
 80110c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110c8:	24028500 	.word	0x24028500
 80110cc:	240284fc 	.word	0x240284fc
 80110d0:	24028504 	.word	0x24028504
 80110d4:	240284a4 	.word	0x240284a4
 80110d8:	24028508 	.word	0x24028508

080110dc <_ZN8touchgfx5ImageD1Ev>:
 80110dc:	4770      	bx	lr

080110de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80110de:	b570      	push	{r4, r5, r6, lr}
 80110e0:	880b      	ldrh	r3, [r1, #0]
 80110e2:	460d      	mov	r5, r1
 80110e4:	4604      	mov	r4, r0
 80110e6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80110e8:	4608      	mov	r0, r1
 80110ea:	f005 fff9 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80110ee:	4606      	mov	r6, r0
 80110f0:	4628      	mov	r0, r5
 80110f2:	f006 f829 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	4605      	mov	r5, r0
 80110fa:	4631      	mov	r1, r6
 80110fc:	4620      	mov	r0, r4
 80110fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011100:	4798      	blx	r3
 8011102:	6823      	ldr	r3, [r4, #0]
 8011104:	4629      	mov	r1, r5
 8011106:	4620      	mov	r0, r4
 8011108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801110a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801110e:	4718      	bx	r3

08011110 <_ZN8touchgfx5ImageD0Ev>:
 8011110:	b510      	push	{r4, lr}
 8011112:	4604      	mov	r4, r0
 8011114:	212c      	movs	r1, #44	@ 0x2c
 8011116:	f010 fdde 	bl	8021cd6 <_ZdlPvj>
 801111a:	4620      	mov	r0, r4
 801111c:	bd10      	pop	{r4, pc}

0801111e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801111e:	b510      	push	{r4, lr}
 8011120:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8011124:	4604      	mov	r4, r0
 8011126:	2bff      	cmp	r3, #255	@ 0xff
 8011128:	d006      	beq.n	8011138 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801112a:	2300      	movs	r3, #0
 801112c:	8003      	strh	r3, [r0, #0]
 801112e:	8043      	strh	r3, [r0, #2]
 8011130:	8083      	strh	r3, [r0, #4]
 8011132:	80c3      	strh	r3, [r0, #6]
 8011134:	4620      	mov	r0, r4
 8011136:	bd10      	pop	{r4, pc}
 8011138:	3126      	adds	r1, #38	@ 0x26
 801113a:	f006 f839 	bl	80171b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801113e:	e7f9      	b.n	8011134 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011140 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011144:	4604      	mov	r4, r0
 8011146:	b088      	sub	sp, #32
 8011148:	2500      	movs	r5, #0
 801114a:	460f      	mov	r7, r1
 801114c:	f854 3b26 	ldr.w	r3, [r4], #38
 8011150:	a904      	add	r1, sp, #16
 8011152:	4606      	mov	r6, r0
 8011154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011156:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801115a:	4798      	blx	r3
 801115c:	4620      	mov	r0, r4
 801115e:	f005 ffbf 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011162:	4680      	mov	r8, r0
 8011164:	4620      	mov	r0, r4
 8011166:	f005 ffef 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801116a:	9506      	str	r5, [sp, #24]
 801116c:	ad06      	add	r5, sp, #24
 801116e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011172:	4639      	mov	r1, r7
 8011174:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011178:	4628      	mov	r0, r5
 801117a:	f7fc fd47 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 801117e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011182:	2b00      	cmp	r3, #0
 8011184:	dd19      	ble.n	80111ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011186:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801118a:	2b00      	cmp	r3, #0
 801118c:	dd15      	ble.n	80111ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801118e:	4b0c      	ldr	r3, [pc, #48]	@ (80111c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011196:	b10a      	cbz	r2, 801119c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011198:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801119a:	b900      	cbnz	r0, 801119e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801119c:	6898      	ldr	r0, [r3, #8]
 801119e:	2701      	movs	r7, #1
 80111a0:	6801      	ldr	r1, [r0, #0]
 80111a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80111a6:	9702      	str	r7, [sp, #8]
 80111a8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80111ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80111b0:	e9cd 5600 	strd	r5, r6, [sp]
 80111b4:	688d      	ldr	r5, [r1, #8]
 80111b6:	4621      	mov	r1, r4
 80111b8:	47a8      	blx	r5
 80111ba:	b008      	add	sp, #32
 80111bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c0:	240284a4 	.word	0x240284a4

080111c4 <_ZN8touchgfx7OutlineD1Ev>:
 80111c4:	4770      	bx	lr

080111c6 <_ZN8touchgfx7OutlineD0Ev>:
 80111c6:	b510      	push	{r4, lr}
 80111c8:	4604      	mov	r4, r0
 80111ca:	2130      	movs	r1, #48	@ 0x30
 80111cc:	f010 fd83 	bl	8021cd6 <_ZdlPvj>
 80111d0:	4620      	mov	r0, r4
 80111d2:	bd10      	pop	{r4, pc}

080111d4 <_ZN8touchgfx7Outline5resetEv>:
 80111d4:	b510      	push	{r4, lr}
 80111d6:	4604      	mov	r4, r0
 80111d8:	f000 fe72 	bl	8011ec0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80111dc:	60e0      	str	r0, [r4, #12]
 80111de:	f000 fe75 	bl	8011ecc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80111e2:	68e3      	ldr	r3, [r4, #12]
 80111e4:	08c0      	lsrs	r0, r0, #3
 80111e6:	2200      	movs	r2, #0
 80111e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80111ec:	6123      	str	r3, [r4, #16]
 80111ee:	3801      	subs	r0, #1
 80111f0:	60a2      	str	r2, [r4, #8]
 80111f2:	6060      	str	r0, [r4, #4]
 80111f4:	8019      	strh	r1, [r3, #0]
 80111f6:	8059      	strh	r1, [r3, #2]
 80111f8:	809a      	strh	r2, [r3, #4]
 80111fa:	80da      	strh	r2, [r3, #6]
 80111fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80111fe:	f023 0301 	bic.w	r3, r3, #1
 8011202:	f043 0302 	orr.w	r3, r3, #2
 8011206:	6263      	str	r3, [r4, #36]	@ 0x24
 8011208:	bd10      	pop	{r4, pc}
	...

0801120c <_ZN8touchgfx7OutlineC1Ev>:
 801120c:	4b0a      	ldr	r3, [pc, #40]	@ (8011238 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801120e:	b510      	push	{r4, lr}
 8011210:	6003      	str	r3, [r0, #0]
 8011212:	2300      	movs	r3, #0
 8011214:	4604      	mov	r4, r0
 8011216:	6243      	str	r3, [r0, #36]	@ 0x24
 8011218:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801121c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011220:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8011224:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8011228:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801122c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8011230:	f7ff ffd0 	bl	80111d4 <_ZN8touchgfx7Outline5resetEv>
 8011234:	4620      	mov	r0, r4
 8011236:	bd10      	pop	{r4, pc}
 8011238:	08026280 	.word	0x08026280

0801123c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011240:	b093      	sub	sp, #76	@ 0x4c
 8011242:	1156      	asrs	r6, r2, #5
 8011244:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011246:	9305      	str	r3, [sp, #20]
 8011248:	1153      	asrs	r3, r2, #5
 801124a:	f004 051f 	and.w	r5, r4, #31
 801124e:	9303      	str	r3, [sp, #12]
 8011250:	1163      	asrs	r3, r4, #5
 8011252:	9504      	str	r5, [sp, #16]
 8011254:	1165      	asrs	r5, r4, #5
 8011256:	9306      	str	r3, [sp, #24]
 8011258:	f002 031f 	and.w	r3, r2, #31
 801125c:	42ae      	cmp	r6, r5
 801125e:	f040 80f4 	bne.w	801144a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8011262:	9c04      	ldr	r4, [sp, #16]
 8011264:	9a05      	ldr	r2, [sp, #20]
 8011266:	42a3      	cmp	r3, r4
 8011268:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801126c:	6902      	ldr	r2, [r0, #16]
 801126e:	d125      	bne.n	80112bc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8011270:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011274:	459e      	cmp	lr, r3
 8011276:	d103      	bne.n	8011280 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8011278:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801127c:	429e      	cmp	r6, r3
 801127e:	d035      	beq.n	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011280:	88d1      	ldrh	r1, [r2, #6]
 8011282:	8893      	ldrh	r3, [r2, #4]
 8011284:	430b      	orrs	r3, r1
 8011286:	d010      	beq.n	80112aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011288:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801128c:	2b00      	cmp	r3, #0
 801128e:	db0c      	blt.n	80112aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011290:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011292:	428b      	cmp	r3, r1
 8011294:	da09      	bge.n	80112aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011296:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801129a:	428b      	cmp	r3, r1
 801129c:	f103 0301 	add.w	r3, r3, #1
 80112a0:	bf38      	it	cc
 80112a2:	3208      	addcc	r2, #8
 80112a4:	6083      	str	r3, [r0, #8]
 80112a6:	bf38      	it	cc
 80112a8:	6102      	strcc	r2, [r0, #16]
 80112aa:	6903      	ldr	r3, [r0, #16]
 80112ac:	9a03      	ldr	r2, [sp, #12]
 80112ae:	f8a3 e000 	strh.w	lr, [r3]
 80112b2:	805a      	strh	r2, [r3, #2]
 80112b4:	2200      	movs	r2, #0
 80112b6:	809a      	strh	r2, [r3, #4]
 80112b8:	80da      	strh	r2, [r3, #6]
 80112ba:	e017      	b.n	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80112bc:	9c05      	ldr	r4, [sp, #20]
 80112be:	114e      	asrs	r6, r1, #5
 80112c0:	f001 0c1f 	and.w	ip, r1, #31
 80112c4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80112c8:	f004 041f 	and.w	r4, r4, #31
 80112cc:	4576      	cmp	r6, lr
 80112ce:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80112d2:	9402      	str	r4, [sp, #8]
 80112d4:	9c04      	ldr	r4, [sp, #16]
 80112d6:	eba4 0403 	sub.w	r4, r4, r3
 80112da:	d10a      	bne.n	80112f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80112dc:	9b02      	ldr	r3, [sp, #8]
 80112de:	44a0      	add	r8, r4
 80112e0:	449c      	add	ip, r3
 80112e2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80112e6:	fb04 a40c 	mla	r4, r4, ip, sl
 80112ea:	80d4      	strh	r4, [r2, #6]
 80112ec:	b013      	add	sp, #76	@ 0x4c
 80112ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f2:	9d05      	ldr	r5, [sp, #20]
 80112f4:	1a69      	subs	r1, r5, r1
 80112f6:	bf51      	iteee	pl
 80112f8:	f1cc 0520 	rsbpl	r5, ip, #32
 80112fc:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011300:	4249      	negmi	r1, r1
 8011302:	2500      	movmi	r5, #0
 8011304:	bf5d      	ittte	pl
 8011306:	436c      	mulpl	r4, r5
 8011308:	2520      	movpl	r5, #32
 801130a:	f04f 0901 	movpl.w	r9, #1
 801130e:	f04f 39ff 	movmi.w	r9, #4294967295
 8011312:	9501      	str	r5, [sp, #4]
 8011314:	9f01      	ldr	r7, [sp, #4]
 8011316:	444e      	add	r6, r9
 8011318:	fb94 f5f1 	sdiv	r5, r4, r1
 801131c:	fb01 4415 	mls	r4, r1, r5, r4
 8011320:	44bc      	add	ip, r7
 8011322:	2c00      	cmp	r4, #0
 8011324:	bfbc      	itt	lt
 8011326:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801132a:	1864      	addlt	r4, r4, r1
 801132c:	44a8      	add	r8, r5
 801132e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011332:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011336:	f8a2 c006 	strh.w	ip, [r2, #6]
 801133a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801133e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011342:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8011346:	ea58 0202 	orrs.w	r2, r8, r2
 801134a:	d011      	beq.n	8011370 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801134c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011350:	f1b8 0f00 	cmp.w	r8, #0
 8011354:	db0c      	blt.n	8011370 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011356:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011358:	4590      	cmp	r8, r2
 801135a:	da09      	bge.n	8011370 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801135c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011360:	4590      	cmp	r8, r2
 8011362:	bf3c      	itt	cc
 8011364:	f10c 0208 	addcc.w	r2, ip, #8
 8011368:	6102      	strcc	r2, [r0, #16]
 801136a:	f108 0201 	add.w	r2, r8, #1
 801136e:	6082      	str	r2, [r0, #8]
 8011370:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011374:	2700      	movs	r7, #0
 8011376:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801137a:	45b6      	cmp	lr, r6
 801137c:	f8ac 6000 	strh.w	r6, [ip]
 8011380:	442b      	add	r3, r5
 8011382:	f8ac 2002 	strh.w	r2, [ip, #2]
 8011386:	f8ac 7004 	strh.w	r7, [ip, #4]
 801138a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801138e:	d04b      	beq.n	8011428 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8011390:	9f04      	ldr	r7, [sp, #16]
 8011392:	1a64      	subs	r4, r4, r1
 8011394:	f04f 0a00 	mov.w	sl, #0
 8011398:	1aff      	subs	r7, r7, r3
 801139a:	443d      	add	r5, r7
 801139c:	016d      	lsls	r5, r5, #5
 801139e:	fb95 f8f1 	sdiv	r8, r5, r1
 80113a2:	fb01 5518 	mls	r5, r1, r8, r5
 80113a6:	2d00      	cmp	r5, #0
 80113a8:	bfbc      	itt	lt
 80113aa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80113ae:	186d      	addlt	r5, r5, r1
 80113b0:	f108 0701 	add.w	r7, r8, #1
 80113b4:	9703      	str	r7, [sp, #12]
 80113b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80113ba:	1964      	adds	r4, r4, r5
 80113bc:	444e      	add	r6, r9
 80113be:	bf54      	ite	pl
 80113c0:	9f03      	ldrpl	r7, [sp, #12]
 80113c2:	4647      	movmi	r7, r8
 80113c4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80113c8:	bf58      	it	pl
 80113ca:	1a64      	subpl	r4, r4, r1
 80113cc:	443b      	add	r3, r7
 80113ce:	44bb      	add	fp, r7
 80113d0:	f8ac b004 	strh.w	fp, [ip, #4]
 80113d4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80113d8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80113dc:	f8ac b006 	strh.w	fp, [ip, #6]
 80113e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80113e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80113e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80113ec:	ea5b 0707 	orrs.w	r7, fp, r7
 80113f0:	d011      	beq.n	8011416 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80113f2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80113f6:	f1bb 0f00 	cmp.w	fp, #0
 80113fa:	db0c      	blt.n	8011416 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80113fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80113fe:	45bb      	cmp	fp, r7
 8011400:	da09      	bge.n	8011416 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011402:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011406:	45bb      	cmp	fp, r7
 8011408:	bf3c      	itt	cc
 801140a:	f10c 0708 	addcc.w	r7, ip, #8
 801140e:	6107      	strcc	r7, [r0, #16]
 8011410:	f10b 0701 	add.w	r7, fp, #1
 8011414:	6087      	str	r7, [r0, #8]
 8011416:	6907      	ldr	r7, [r0, #16]
 8011418:	45b6      	cmp	lr, r6
 801141a:	803e      	strh	r6, [r7, #0]
 801141c:	807a      	strh	r2, [r7, #2]
 801141e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011422:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011426:	d1c6      	bne.n	80113b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8011428:	9a04      	ldr	r2, [sp, #16]
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	6902      	ldr	r2, [r0, #16]
 801142e:	8891      	ldrh	r1, [r2, #4]
 8011430:	88d6      	ldrh	r6, [r2, #6]
 8011432:	4419      	add	r1, r3
 8011434:	8091      	strh	r1, [r2, #4]
 8011436:	9902      	ldr	r1, [sp, #8]
 8011438:	f101 0c20 	add.w	ip, r1, #32
 801143c:	9901      	ldr	r1, [sp, #4]
 801143e:	ebac 0c01 	sub.w	ip, ip, r1
 8011442:	fb03 630c 	mla	r3, r3, ip, r6
 8011446:	80d3      	strh	r3, [r2, #6]
 8011448:	e750      	b.n	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801144a:	9d05      	ldr	r5, [sp, #20]
 801144c:	1aa2      	subs	r2, r4, r2
 801144e:	eba5 0501 	sub.w	r5, r5, r1
 8011452:	9202      	str	r2, [sp, #8]
 8011454:	9508      	str	r5, [sp, #32]
 8011456:	f140 8128 	bpl.w	80116aa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801145a:	9a03      	ldr	r2, [sp, #12]
 801145c:	2a00      	cmp	r2, #0
 801145e:	f6ff af45 	blt.w	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011462:	9a02      	ldr	r2, [sp, #8]
 8011464:	f04f 34ff 	mov.w	r4, #4294967295
 8011468:	4252      	negs	r2, r2
 801146a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801146c:	2400      	movs	r4, #0
 801146e:	9202      	str	r2, [sp, #8]
 8011470:	9a06      	ldr	r2, [sp, #24]
 8011472:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8011476:	9206      	str	r2, [sp, #24]
 8011478:	462a      	mov	r2, r5
 801147a:	435a      	muls	r2, r3
 801147c:	9401      	str	r4, [sp, #4]
 801147e:	9c02      	ldr	r4, [sp, #8]
 8011480:	9d02      	ldr	r5, [sp, #8]
 8011482:	fb92 f4f4 	sdiv	r4, r2, r4
 8011486:	fb05 2214 	mls	r2, r5, r4, r2
 801148a:	2a00      	cmp	r2, #0
 801148c:	9207      	str	r2, [sp, #28]
 801148e:	bfbc      	itt	lt
 8011490:	1952      	addlt	r2, r2, r5
 8011492:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011496:	6905      	ldr	r5, [r0, #16]
 8011498:	bfb8      	it	lt
 801149a:	9207      	strlt	r2, [sp, #28]
 801149c:	eb04 0901 	add.w	r9, r4, r1
 80114a0:	9a01      	ldr	r2, [sp, #4]
 80114a2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80114a6:	429a      	cmp	r2, r3
 80114a8:	f040 8111 	bne.w	80116ce <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80114ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80114b0:	429e      	cmp	r6, r3
 80114b2:	d104      	bne.n	80114be <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80114b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80114b8:	9a03      	ldr	r2, [sp, #12]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d01b      	beq.n	80114f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80114be:	88ea      	ldrh	r2, [r5, #6]
 80114c0:	88ab      	ldrh	r3, [r5, #4]
 80114c2:	4313      	orrs	r3, r2
 80114c4:	d010      	beq.n	80114e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80114c6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80114ca:	2a00      	cmp	r2, #0
 80114cc:	db0c      	blt.n	80114e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80114ce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80114d0:	429a      	cmp	r2, r3
 80114d2:	da09      	bge.n	80114e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80114d4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80114d8:	429a      	cmp	r2, r3
 80114da:	f102 0201 	add.w	r2, r2, #1
 80114de:	bf38      	it	cc
 80114e0:	3508      	addcc	r5, #8
 80114e2:	6082      	str	r2, [r0, #8]
 80114e4:	bf38      	it	cc
 80114e6:	6105      	strcc	r5, [r0, #16]
 80114e8:	6903      	ldr	r3, [r0, #16]
 80114ea:	9a03      	ldr	r2, [sp, #12]
 80114ec:	801e      	strh	r6, [r3, #0]
 80114ee:	805a      	strh	r2, [r3, #2]
 80114f0:	2200      	movs	r2, #0
 80114f2:	809a      	strh	r2, [r3, #4]
 80114f4:	80da      	strh	r2, [r3, #6]
 80114f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114f8:	9a03      	ldr	r2, [sp, #12]
 80114fa:	6901      	ldr	r1, [r0, #16]
 80114fc:	441a      	add	r2, r3
 80114fe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011502:	42b3      	cmp	r3, r6
 8011504:	d103      	bne.n	801150e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8011506:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801150a:	429a      	cmp	r2, r3
 801150c:	d01a      	beq.n	8011544 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801150e:	88cc      	ldrh	r4, [r1, #6]
 8011510:	888b      	ldrh	r3, [r1, #4]
 8011512:	4323      	orrs	r3, r4
 8011514:	d010      	beq.n	8011538 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011516:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801151a:	2c00      	cmp	r4, #0
 801151c:	db0c      	blt.n	8011538 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801151e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011520:	429c      	cmp	r4, r3
 8011522:	da09      	bge.n	8011538 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011524:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011528:	429c      	cmp	r4, r3
 801152a:	f104 0401 	add.w	r4, r4, #1
 801152e:	bf38      	it	cc
 8011530:	3108      	addcc	r1, #8
 8011532:	6084      	str	r4, [r0, #8]
 8011534:	bf38      	it	cc
 8011536:	6101      	strcc	r1, [r0, #16]
 8011538:	6903      	ldr	r3, [r0, #16]
 801153a:	2100      	movs	r1, #0
 801153c:	801e      	strh	r6, [r3, #0]
 801153e:	805a      	strh	r2, [r3, #2]
 8011540:	8099      	strh	r1, [r3, #4]
 8011542:	80d9      	strh	r1, [r3, #6]
 8011544:	9b06      	ldr	r3, [sp, #24]
 8011546:	4293      	cmp	r3, r2
 8011548:	f000 8082 	beq.w	8011650 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801154c:	9b08      	ldr	r3, [sp, #32]
 801154e:	9902      	ldr	r1, [sp, #8]
 8011550:	015b      	lsls	r3, r3, #5
 8011552:	9c02      	ldr	r4, [sp, #8]
 8011554:	fb93 f1f1 	sdiv	r1, r3, r1
 8011558:	fb04 3311 	mls	r3, r4, r1, r3
 801155c:	9103      	str	r1, [sp, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	9308      	str	r3, [sp, #32]
 8011562:	da04      	bge.n	801156e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011564:	1e4b      	subs	r3, r1, #1
 8011566:	9303      	str	r3, [sp, #12]
 8011568:	9b08      	ldr	r3, [sp, #32]
 801156a:	4423      	add	r3, r4
 801156c:	9308      	str	r3, [sp, #32]
 801156e:	9b07      	ldr	r3, [sp, #28]
 8011570:	464f      	mov	r7, r9
 8011572:	9902      	ldr	r1, [sp, #8]
 8011574:	2600      	movs	r6, #0
 8011576:	1a5b      	subs	r3, r3, r1
 8011578:	9307      	str	r3, [sp, #28]
 801157a:	9b01      	ldr	r3, [sp, #4]
 801157c:	f1c3 0320 	rsb	r3, r3, #32
 8011580:	930e      	str	r3, [sp, #56]	@ 0x38
 8011582:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011584:	9b01      	ldr	r3, [sp, #4]
 8011586:	1a5b      	subs	r3, r3, r1
 8011588:	930a      	str	r3, [sp, #40]	@ 0x28
 801158a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801158e:	185b      	adds	r3, r3, r1
 8011590:	bf58      	it	pl
 8011592:	9902      	ldrpl	r1, [sp, #8]
 8011594:	9307      	str	r3, [sp, #28]
 8011596:	bf57      	itett	pl
 8011598:	1a5b      	subpl	r3, r3, r1
 801159a:	9903      	ldrmi	r1, [sp, #12]
 801159c:	9307      	strpl	r3, [sp, #28]
 801159e:	9b03      	ldrpl	r3, [sp, #12]
 80115a0:	bf58      	it	pl
 80115a2:	1c59      	addpl	r1, r3, #1
 80115a4:	2a00      	cmp	r2, #0
 80115a6:	4489      	add	r9, r1
 80115a8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80115ac:	db2e      	blt.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80115ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80115b0:	4293      	cmp	r3, r2
 80115b2:	dd2b      	ble.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80115b4:	9c01      	ldr	r4, [sp, #4]
 80115b6:	6905      	ldr	r5, [r0, #16]
 80115b8:	46a0      	mov	r8, r4
 80115ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80115bc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80115c0:	45a0      	cmp	r8, r4
 80115c2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80115c6:	f040 814c 	bne.w	8011862 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80115ca:	f9b5 1000 	ldrsh.w	r1, [r5]
 80115ce:	4551      	cmp	r1, sl
 80115d0:	d103      	bne.n	80115da <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80115d2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80115d6:	4291      	cmp	r1, r2
 80115d8:	d018      	beq.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80115da:	ea5c 010e 	orrs.w	r1, ip, lr
 80115de:	d00f      	beq.n	8011600 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80115e0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80115e4:	2900      	cmp	r1, #0
 80115e6:	db0b      	blt.n	8011600 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80115e8:	428b      	cmp	r3, r1
 80115ea:	dd09      	ble.n	8011600 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80115ec:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80115f0:	4299      	cmp	r1, r3
 80115f2:	f101 0101 	add.w	r1, r1, #1
 80115f6:	bf38      	it	cc
 80115f8:	3508      	addcc	r5, #8
 80115fa:	6081      	str	r1, [r0, #8]
 80115fc:	bf38      	it	cc
 80115fe:	6105      	strcc	r5, [r0, #16]
 8011600:	6903      	ldr	r3, [r0, #16]
 8011602:	f8a3 a000 	strh.w	sl, [r3]
 8011606:	805a      	strh	r2, [r3, #2]
 8011608:	809e      	strh	r6, [r3, #4]
 801160a:	80de      	strh	r6, [r3, #6]
 801160c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801160e:	6901      	ldr	r1, [r0, #16]
 8011610:	441a      	add	r2, r3
 8011612:	88cc      	ldrh	r4, [r1, #6]
 8011614:	888b      	ldrh	r3, [r1, #4]
 8011616:	4323      	orrs	r3, r4
 8011618:	d010      	beq.n	801163c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801161a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801161e:	2c00      	cmp	r4, #0
 8011620:	db0c      	blt.n	801163c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011622:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011624:	429c      	cmp	r4, r3
 8011626:	da09      	bge.n	801163c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011628:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801162c:	429c      	cmp	r4, r3
 801162e:	f104 0401 	add.w	r4, r4, #1
 8011632:	bf38      	it	cc
 8011634:	3108      	addcc	r1, #8
 8011636:	6084      	str	r4, [r0, #8]
 8011638:	bf38      	it	cc
 801163a:	6101      	strcc	r1, [r0, #16]
 801163c:	6903      	ldr	r3, [r0, #16]
 801163e:	464f      	mov	r7, r9
 8011640:	f8a3 a000 	strh.w	sl, [r3]
 8011644:	805a      	strh	r2, [r3, #2]
 8011646:	809e      	strh	r6, [r3, #4]
 8011648:	80de      	strh	r6, [r3, #6]
 801164a:	9b06      	ldr	r3, [sp, #24]
 801164c:	4293      	cmp	r3, r2
 801164e:	d19c      	bne.n	801158a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011650:	9b01      	ldr	r3, [sp, #4]
 8011652:	6907      	ldr	r7, [r0, #16]
 8011654:	f1c3 0620 	rsb	r6, r3, #32
 8011658:	9b05      	ldr	r3, [sp, #20]
 801165a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801165e:	9b04      	ldr	r3, [sp, #16]
 8011660:	429e      	cmp	r6, r3
 8011662:	f040 81c7 	bne.w	80119f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011666:	f9b7 3000 	ldrsh.w	r3, [r7]
 801166a:	459e      	cmp	lr, r3
 801166c:	d104      	bne.n	8011678 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801166e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011672:	429a      	cmp	r2, r3
 8011674:	f43f ae3a 	beq.w	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011678:	88f9      	ldrh	r1, [r7, #6]
 801167a:	88bb      	ldrh	r3, [r7, #4]
 801167c:	430b      	orrs	r3, r1
 801167e:	d010      	beq.n	80116a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011680:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011684:	2b00      	cmp	r3, #0
 8011686:	db0c      	blt.n	80116a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011688:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801168a:	428b      	cmp	r3, r1
 801168c:	da09      	bge.n	80116a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801168e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011692:	428b      	cmp	r3, r1
 8011694:	f103 0301 	add.w	r3, r3, #1
 8011698:	bf38      	it	cc
 801169a:	3708      	addcc	r7, #8
 801169c:	6083      	str	r3, [r0, #8]
 801169e:	bf38      	it	cc
 80116a0:	6107      	strcc	r7, [r0, #16]
 80116a2:	6903      	ldr	r3, [r0, #16]
 80116a4:	f8a3 e000 	strh.w	lr, [r3]
 80116a8:	e603      	b.n	80112b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80116aa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80116ac:	9c03      	ldr	r4, [sp, #12]
 80116ae:	42a2      	cmp	r2, r4
 80116b0:	f6ff ae1c 	blt.w	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80116b4:	9c06      	ldr	r4, [sp, #24]
 80116b6:	42a2      	cmp	r2, r4
 80116b8:	9c08      	ldr	r4, [sp, #32]
 80116ba:	bfbc      	itt	lt
 80116bc:	3201      	addlt	r2, #1
 80116be:	9206      	strlt	r2, [sp, #24]
 80116c0:	f1c3 0220 	rsb	r2, r3, #32
 80116c4:	4362      	muls	r2, r4
 80116c6:	2401      	movs	r4, #1
 80116c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80116ca:	2420      	movs	r4, #32
 80116cc:	e6d6      	b.n	801147c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80116ce:	ea4f 1861 	mov.w	r8, r1, asr #5
 80116d2:	f009 021f 	and.w	r2, r9, #31
 80116d6:	f001 011f 	and.w	r1, r1, #31
 80116da:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80116de:	920c      	str	r2, [sp, #48]	@ 0x30
 80116e0:	45b0      	cmp	r8, r6
 80116e2:	9a01      	ldr	r2, [sp, #4]
 80116e4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80116e8:	eba2 0203 	sub.w	r2, r2, r3
 80116ec:	d108      	bne.n	8011700 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80116ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116f0:	4496      	add	lr, r2
 80116f2:	4419      	add	r1, r3
 80116f4:	f8a5 e004 	strh.w	lr, [r5, #4]
 80116f8:	fb02 a101 	mla	r1, r2, r1, sl
 80116fc:	80e9      	strh	r1, [r5, #6]
 80116fe:	e6fa      	b.n	80114f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011700:	2c00      	cmp	r4, #0
 8011702:	f2c0 80a7 	blt.w	8011854 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8011706:	2701      	movs	r7, #1
 8011708:	f1c1 0c20 	rsb	ip, r1, #32
 801170c:	970a      	str	r7, [sp, #40]	@ 0x28
 801170e:	2720      	movs	r7, #32
 8011710:	fb02 f20c 	mul.w	r2, r2, ip
 8011714:	9709      	str	r7, [sp, #36]	@ 0x24
 8011716:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011718:	fb92 fcf4 	sdiv	ip, r2, r4
 801171c:	fb04 221c 	mls	r2, r4, ip, r2
 8011720:	4439      	add	r1, r7
 8011722:	2a00      	cmp	r2, #0
 8011724:	bfbc      	itt	lt
 8011726:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801172a:	1912      	addlt	r2, r2, r4
 801172c:	fb0c a101 	mla	r1, ip, r1, sl
 8011730:	44e6      	add	lr, ip
 8011732:	80e9      	strh	r1, [r5, #6]
 8011734:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011736:	f8a5 e004 	strh.w	lr, [r5, #4]
 801173a:	eb08 0501 	add.w	r5, r8, r1
 801173e:	6901      	ldr	r1, [r0, #16]
 8011740:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8011744:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8011748:	ea58 070e 	orrs.w	r7, r8, lr
 801174c:	d010      	beq.n	8011770 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801174e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011752:	f1be 0f00 	cmp.w	lr, #0
 8011756:	db0b      	blt.n	8011770 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011758:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801175a:	45be      	cmp	lr, r7
 801175c:	da08      	bge.n	8011770 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801175e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011762:	45be      	cmp	lr, r7
 8011764:	bf3c      	itt	cc
 8011766:	3108      	addcc	r1, #8
 8011768:	6101      	strcc	r1, [r0, #16]
 801176a:	f10e 0101 	add.w	r1, lr, #1
 801176e:	6081      	str	r1, [r0, #8]
 8011770:	6901      	ldr	r1, [r0, #16]
 8011772:	f04f 0e00 	mov.w	lr, #0
 8011776:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801177a:	42ae      	cmp	r6, r5
 801177c:	800d      	strh	r5, [r1, #0]
 801177e:	4463      	add	r3, ip
 8011780:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011784:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011788:	f8a1 e006 	strh.w	lr, [r1, #6]
 801178c:	d053      	beq.n	8011836 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801178e:	9901      	ldr	r1, [sp, #4]
 8011790:	1b12      	subs	r2, r2, r4
 8011792:	1ac9      	subs	r1, r1, r3
 8011794:	4461      	add	r1, ip
 8011796:	0149      	lsls	r1, r1, #5
 8011798:	fb91 fef4 	sdiv	lr, r1, r4
 801179c:	fb04 111e 	mls	r1, r4, lr, r1
 80117a0:	2900      	cmp	r1, #0
 80117a2:	bfbc      	itt	lt
 80117a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80117a8:	1909      	addlt	r1, r1, r4
 80117aa:	f10e 0701 	add.w	r7, lr, #1
 80117ae:	970d      	str	r7, [sp, #52]	@ 0x34
 80117b0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80117b4:	1852      	adds	r2, r2, r1
 80117b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80117b8:	bf54      	ite	pl
 80117ba:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80117be:	46f4      	movmi	ip, lr
 80117c0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80117c4:	bf58      	it	pl
 80117c6:	1b12      	subpl	r2, r2, r4
 80117c8:	4463      	add	r3, ip
 80117ca:	443d      	add	r5, r7
 80117cc:	44e3      	add	fp, ip
 80117ce:	f8aa b004 	strh.w	fp, [sl, #4]
 80117d2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80117d6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80117da:	f8aa b006 	strh.w	fp, [sl, #6]
 80117de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80117e2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80117e6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80117ea:	ea5b 070a 	orrs.w	r7, fp, sl
 80117ee:	d014      	beq.n	801181a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80117f0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80117f4:	f1ba 0f00 	cmp.w	sl, #0
 80117f8:	db0f      	blt.n	801181a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80117fa:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80117fc:	45ba      	cmp	sl, r7
 80117fe:	da0c      	bge.n	801181a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011800:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8011804:	45ba      	cmp	sl, r7
 8011806:	f10a 0a01 	add.w	sl, sl, #1
 801180a:	bf38      	it	cc
 801180c:	f10c 0c08 	addcc.w	ip, ip, #8
 8011810:	f8c0 a008 	str.w	sl, [r0, #8]
 8011814:	bf38      	it	cc
 8011816:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801181a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801181e:	f04f 0700 	mov.w	r7, #0
 8011822:	42ae      	cmp	r6, r5
 8011824:	f8ac 5000 	strh.w	r5, [ip]
 8011828:	f8ac 8002 	strh.w	r8, [ip, #2]
 801182c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011830:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011834:	d1bc      	bne.n	80117b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8011836:	6904      	ldr	r4, [r0, #16]
 8011838:	9a01      	ldr	r2, [sp, #4]
 801183a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	88a2      	ldrh	r2, [r4, #4]
 8011840:	3120      	adds	r1, #32
 8011842:	441a      	add	r2, r3
 8011844:	80a2      	strh	r2, [r4, #4]
 8011846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011848:	1a89      	subs	r1, r1, r2
 801184a:	88e2      	ldrh	r2, [r4, #6]
 801184c:	fb03 2301 	mla	r3, r3, r1, r2
 8011850:	80e3      	strh	r3, [r4, #6]
 8011852:	e650      	b.n	80114f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011854:	f04f 37ff 	mov.w	r7, #4294967295
 8011858:	434a      	muls	r2, r1
 801185a:	4264      	negs	r4, r4
 801185c:	970a      	str	r7, [sp, #40]	@ 0x28
 801185e:	2700      	movs	r7, #0
 8011860:	e758      	b.n	8011714 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8011862:	ea4f 1867 	mov.w	r8, r7, asr #5
 8011866:	f009 031f 	and.w	r3, r9, #31
 801186a:	f007 071f 	and.w	r7, r7, #31
 801186e:	fa1f fc8c 	uxth.w	ip, ip
 8011872:	45d0      	cmp	r8, sl
 8011874:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011876:	fa1f fe8e 	uxth.w	lr, lr
 801187a:	d10a      	bne.n	8011892 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801187c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801187e:	449c      	add	ip, r3
 8011880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011882:	441f      	add	r7, r3
 8011884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011886:	f8a5 c004 	strh.w	ip, [r5, #4]
 801188a:	fb03 e707 	mla	r7, r3, r7, lr
 801188e:	80ef      	strh	r7, [r5, #6]
 8011890:	e6bc      	b.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011892:	2900      	cmp	r1, #0
 8011894:	f2c0 80a6 	blt.w	80119e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8011898:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801189a:	f1c7 0320 	rsb	r3, r7, #32
 801189e:	4363      	muls	r3, r4
 80118a0:	2401      	movs	r4, #1
 80118a2:	940d      	str	r4, [sp, #52]	@ 0x34
 80118a4:	2420      	movs	r4, #32
 80118a6:	940c      	str	r4, [sp, #48]	@ 0x30
 80118a8:	fb93 f4f1 	sdiv	r4, r3, r1
 80118ac:	fb01 3b14 	mls	fp, r1, r4, r3
 80118b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118b2:	f1bb 0f00 	cmp.w	fp, #0
 80118b6:	441f      	add	r7, r3
 80118b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118ba:	bfbc      	itt	lt
 80118bc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80118c0:	448b      	addlt	fp, r1
 80118c2:	fb04 e707 	mla	r7, r4, r7, lr
 80118c6:	44a4      	add	ip, r4
 80118c8:	80ef      	strh	r7, [r5, #6]
 80118ca:	f8a5 c004 	strh.w	ip, [r5, #4]
 80118ce:	eb08 0503 	add.w	r5, r8, r3
 80118d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80118d6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80118da:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80118de:	ea5e 0307 	orrs.w	r3, lr, r7
 80118e2:	d011      	beq.n	8011908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80118e4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80118e8:	f1be 0f00 	cmp.w	lr, #0
 80118ec:	db0c      	blt.n	8011908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80118ee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80118f0:	45be      	cmp	lr, r7
 80118f2:	da09      	bge.n	8011908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80118f4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80118f8:	45be      	cmp	lr, r7
 80118fa:	bf3c      	itt	cc
 80118fc:	f10c 0708 	addcc.w	r7, ip, #8
 8011900:	6107      	strcc	r7, [r0, #16]
 8011902:	f10e 0701 	add.w	r7, lr, #1
 8011906:	6087      	str	r7, [r0, #8]
 8011908:	6907      	ldr	r7, [r0, #16]
 801190a:	b213      	sxth	r3, r2
 801190c:	4555      	cmp	r5, sl
 801190e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011910:	807b      	strh	r3, [r7, #2]
 8011912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011914:	803d      	strh	r5, [r7, #0]
 8011916:	80be      	strh	r6, [r7, #4]
 8011918:	eb04 0c03 	add.w	ip, r4, r3
 801191c:	80fe      	strh	r6, [r7, #6]
 801191e:	d050      	beq.n	80119c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8011920:	9b01      	ldr	r3, [sp, #4]
 8011922:	eba3 070c 	sub.w	r7, r3, ip
 8011926:	ebab 0301 	sub.w	r3, fp, r1
 801192a:	443c      	add	r4, r7
 801192c:	9309      	str	r3, [sp, #36]	@ 0x24
 801192e:	0164      	lsls	r4, r4, #5
 8011930:	fb94 f8f1 	sdiv	r8, r4, r1
 8011934:	fb01 4418 	mls	r4, r1, r8, r4
 8011938:	2c00      	cmp	r4, #0
 801193a:	bfbc      	itt	lt
 801193c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011940:	1864      	addlt	r4, r4, r1
 8011942:	f108 0701 	add.w	r7, r8, #1
 8011946:	9711      	str	r7, [sp, #68]	@ 0x44
 8011948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801194a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801194e:	191b      	adds	r3, r3, r4
 8011950:	f8be b004 	ldrh.w	fp, [lr, #4]
 8011954:	bf54      	ite	pl
 8011956:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8011958:	4647      	movmi	r7, r8
 801195a:	9309      	str	r3, [sp, #36]	@ 0x24
 801195c:	bf58      	it	pl
 801195e:	1a5b      	subpl	r3, r3, r1
 8011960:	44bb      	add	fp, r7
 8011962:	44bc      	add	ip, r7
 8011964:	bf58      	it	pl
 8011966:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8011968:	f8ae b004 	strh.w	fp, [lr, #4]
 801196c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011970:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011974:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011976:	f8ae b006 	strh.w	fp, [lr, #6]
 801197a:	443d      	add	r5, r7
 801197c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011980:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011984:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8011988:	ea5b 0307 	orrs.w	r3, fp, r7
 801198c:	d011      	beq.n	80119b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801198e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8011992:	f1bb 0f00 	cmp.w	fp, #0
 8011996:	db0c      	blt.n	80119b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011998:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801199a:	45bb      	cmp	fp, r7
 801199c:	da09      	bge.n	80119b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801199e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80119a2:	45bb      	cmp	fp, r7
 80119a4:	bf3c      	itt	cc
 80119a6:	f10e 0708 	addcc.w	r7, lr, #8
 80119aa:	6107      	strcc	r7, [r0, #16]
 80119ac:	f10b 0701 	add.w	r7, fp, #1
 80119b0:	6087      	str	r7, [r0, #8]
 80119b2:	6907      	ldr	r7, [r0, #16]
 80119b4:	4555      	cmp	r5, sl
 80119b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119b8:	803d      	strh	r5, [r7, #0]
 80119ba:	807b      	strh	r3, [r7, #2]
 80119bc:	80be      	strh	r6, [r7, #4]
 80119be:	80fe      	strh	r6, [r7, #6]
 80119c0:	d1c2      	bne.n	8011948 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80119c2:	9b01      	ldr	r3, [sp, #4]
 80119c4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80119c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80119ca:	6903      	ldr	r3, [r0, #16]
 80119cc:	3720      	adds	r7, #32
 80119ce:	8899      	ldrh	r1, [r3, #4]
 80119d0:	4461      	add	r1, ip
 80119d2:	8099      	strh	r1, [r3, #4]
 80119d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80119d6:	1a7f      	subs	r7, r7, r1
 80119d8:	88d9      	ldrh	r1, [r3, #6]
 80119da:	fb0c 1c07 	mla	ip, ip, r7, r1
 80119de:	f8a3 c006 	strh.w	ip, [r3, #6]
 80119e2:	e613      	b.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80119e4:	f04f 34ff 	mov.w	r4, #4294967295
 80119e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119ea:	4249      	negs	r1, r1
 80119ec:	940d      	str	r4, [sp, #52]	@ 0x34
 80119ee:	2400      	movs	r4, #0
 80119f0:	437b      	muls	r3, r7
 80119f2:	e758      	b.n	80118a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80119f4:	9905      	ldr	r1, [sp, #20]
 80119f6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80119fa:	f009 0c1f 	and.w	ip, r9, #31
 80119fe:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8011a02:	f001 011f 	and.w	r1, r1, #31
 8011a06:	45f3      	cmp	fp, lr
 8011a08:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8011a0c:	9102      	str	r1, [sp, #8]
 8011a0e:	9904      	ldr	r1, [sp, #16]
 8011a10:	eba1 0406 	sub.w	r4, r1, r6
 8011a14:	d108      	bne.n	8011a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8011a16:	9b02      	ldr	r3, [sp, #8]
 8011a18:	44a0      	add	r8, r4
 8011a1a:	449c      	add	ip, r3
 8011a1c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011a20:	fb04 a40c 	mla	r4, r4, ip, sl
 8011a24:	80fc      	strh	r4, [r7, #6]
 8011a26:	e461      	b.n	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011a28:	9905      	ldr	r1, [sp, #20]
 8011a2a:	ebb1 0109 	subs.w	r1, r1, r9
 8011a2e:	bf51      	iteee	pl
 8011a30:	f1cc 0520 	rsbpl	r5, ip, #32
 8011a34:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011a38:	4249      	negmi	r1, r1
 8011a3a:	2500      	movmi	r5, #0
 8011a3c:	bf5d      	ittte	pl
 8011a3e:	436c      	mulpl	r4, r5
 8011a40:	2520      	movpl	r5, #32
 8011a42:	f04f 0901 	movpl.w	r9, #1
 8011a46:	f04f 39ff 	movmi.w	r9, #4294967295
 8011a4a:	9501      	str	r5, [sp, #4]
 8011a4c:	9b01      	ldr	r3, [sp, #4]
 8011a4e:	fb94 f5f1 	sdiv	r5, r4, r1
 8011a52:	fb01 4415 	mls	r4, r1, r5, r4
 8011a56:	449c      	add	ip, r3
 8011a58:	eb0b 0309 	add.w	r3, fp, r9
 8011a5c:	2c00      	cmp	r4, #0
 8011a5e:	bfbc      	itt	lt
 8011a60:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011a64:	1864      	addlt	r4, r4, r1
 8011a66:	44a8      	add	r8, r5
 8011a68:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011a6c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011a70:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011a74:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011a78:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011a7c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011a80:	ea58 0707 	orrs.w	r7, r8, r7
 8011a84:	d011      	beq.n	8011aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011a86:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011a8a:	f1b8 0f00 	cmp.w	r8, #0
 8011a8e:	db0c      	blt.n	8011aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011a90:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011a92:	45b8      	cmp	r8, r7
 8011a94:	da09      	bge.n	8011aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011a96:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8011a9a:	45b8      	cmp	r8, r7
 8011a9c:	bf3c      	itt	cc
 8011a9e:	f10c 0708 	addcc.w	r7, ip, #8
 8011aa2:	6107      	strcc	r7, [r0, #16]
 8011aa4:	f108 0701 	add.w	r7, r8, #1
 8011aa8:	6087      	str	r7, [r0, #8]
 8011aaa:	6907      	ldr	r7, [r0, #16]
 8011aac:	f04f 0c00 	mov.w	ip, #0
 8011ab0:	b212      	sxth	r2, r2
 8011ab2:	459e      	cmp	lr, r3
 8011ab4:	803b      	strh	r3, [r7, #0]
 8011ab6:	442e      	add	r6, r5
 8011ab8:	807a      	strh	r2, [r7, #2]
 8011aba:	f8a7 c004 	strh.w	ip, [r7, #4]
 8011abe:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011ac2:	d04b      	beq.n	8011b5c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8011ac4:	9f04      	ldr	r7, [sp, #16]
 8011ac6:	1a64      	subs	r4, r4, r1
 8011ac8:	f04f 0a00 	mov.w	sl, #0
 8011acc:	1bbf      	subs	r7, r7, r6
 8011ace:	443d      	add	r5, r7
 8011ad0:	016d      	lsls	r5, r5, #5
 8011ad2:	fb95 f8f1 	sdiv	r8, r5, r1
 8011ad6:	fb01 5518 	mls	r5, r1, r8, r5
 8011ada:	4565      	cmp	r5, ip
 8011adc:	bfbc      	itt	lt
 8011ade:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011ae2:	186d      	addlt	r5, r5, r1
 8011ae4:	f108 0701 	add.w	r7, r8, #1
 8011ae8:	9703      	str	r7, [sp, #12]
 8011aea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011aee:	1964      	adds	r4, r4, r5
 8011af0:	444b      	add	r3, r9
 8011af2:	bf54      	ite	pl
 8011af4:	9f03      	ldrpl	r7, [sp, #12]
 8011af6:	4647      	movmi	r7, r8
 8011af8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011afc:	bf58      	it	pl
 8011afe:	1a64      	subpl	r4, r4, r1
 8011b00:	443e      	add	r6, r7
 8011b02:	44bb      	add	fp, r7
 8011b04:	f8ac b004 	strh.w	fp, [ip, #4]
 8011b08:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011b0c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011b10:	f8ac b006 	strh.w	fp, [ip, #6]
 8011b14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b18:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011b1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011b20:	ea5b 0707 	orrs.w	r7, fp, r7
 8011b24:	d011      	beq.n	8011b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011b26:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8011b2a:	f1bb 0f00 	cmp.w	fp, #0
 8011b2e:	db0c      	blt.n	8011b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011b30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011b32:	45bb      	cmp	fp, r7
 8011b34:	da09      	bge.n	8011b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011b36:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011b3a:	45bb      	cmp	fp, r7
 8011b3c:	bf3c      	itt	cc
 8011b3e:	f10c 0708 	addcc.w	r7, ip, #8
 8011b42:	6107      	strcc	r7, [r0, #16]
 8011b44:	f10b 0701 	add.w	r7, fp, #1
 8011b48:	6087      	str	r7, [r0, #8]
 8011b4a:	6907      	ldr	r7, [r0, #16]
 8011b4c:	459e      	cmp	lr, r3
 8011b4e:	803b      	strh	r3, [r7, #0]
 8011b50:	807a      	strh	r2, [r7, #2]
 8011b52:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011b56:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011b5a:	d1c6      	bne.n	8011aea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8011b5c:	9b04      	ldr	r3, [sp, #16]
 8011b5e:	1b9e      	subs	r6, r3, r6
 8011b60:	6903      	ldr	r3, [r0, #16]
 8011b62:	889a      	ldrh	r2, [r3, #4]
 8011b64:	4432      	add	r2, r6
 8011b66:	809a      	strh	r2, [r3, #4]
 8011b68:	9a02      	ldr	r2, [sp, #8]
 8011b6a:	f102 0c20 	add.w	ip, r2, #32
 8011b6e:	9a01      	ldr	r2, [sp, #4]
 8011b70:	ebac 0c02 	sub.w	ip, ip, r2
 8011b74:	88da      	ldrh	r2, [r3, #6]
 8011b76:	fb06 260c 	mla	r6, r6, ip, r2
 8011b7a:	80de      	strh	r6, [r3, #6]
 8011b7c:	f7ff bbb6 	b.w	80112ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08011b80 <_ZN8touchgfx7Outline6lineToEii>:
 8011b80:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011b82:	079b      	lsls	r3, r3, #30
 8011b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b86:	460e      	mov	r6, r1
 8011b88:	4615      	mov	r5, r2
 8011b8a:	d511      	bpl.n	8011bb0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011b8c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8011b90:	ea86 0701 	eor.w	r7, r6, r1
 8011b94:	ea85 0302 	eor.w	r3, r5, r2
 8011b98:	433b      	orrs	r3, r7
 8011b9a:	d009      	beq.n	8011bb0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011b9c:	4633      	mov	r3, r6
 8011b9e:	9500      	str	r5, [sp, #0]
 8011ba0:	f7ff fb4c 	bl	801123c <_ZN8touchgfx7Outline10renderLineEiiii>
 8011ba4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011ba6:	f043 0301 	orr.w	r3, r3, #1
 8011baa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8011bae:	6243      	str	r3, [r0, #36]	@ 0x24
 8011bb0:	b003      	add	sp, #12
 8011bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bb4 <_ZN8touchgfx7Outline6moveToEii>:
 8011bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011bb8:	4615      	mov	r5, r2
 8011bba:	4604      	mov	r4, r0
 8011bbc:	460e      	mov	r6, r1
 8011bbe:	079a      	lsls	r2, r3, #30
 8011bc0:	d401      	bmi.n	8011bc6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8011bc2:	f7ff fb07 	bl	80111d4 <_ZN8touchgfx7Outline5resetEv>
 8011bc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011bc8:	07db      	lsls	r3, r3, #31
 8011bca:	d504      	bpl.n	8011bd6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8011bcc:	4620      	mov	r0, r4
 8011bce:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8011bd2:	f7ff ffd5 	bl	8011b80 <_ZN8touchgfx7Outline6lineToEii>
 8011bd6:	6923      	ldr	r3, [r4, #16]
 8011bd8:	1170      	asrs	r0, r6, #5
 8011bda:	1169      	asrs	r1, r5, #5
 8011bdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011be0:	4290      	cmp	r0, r2
 8011be2:	d103      	bne.n	8011bec <_ZN8touchgfx7Outline6moveToEii+0x38>
 8011be4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011be8:	4291      	cmp	r1, r2
 8011bea:	d01a      	beq.n	8011c22 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8011bec:	88df      	ldrh	r7, [r3, #6]
 8011bee:	889a      	ldrh	r2, [r3, #4]
 8011bf0:	433a      	orrs	r2, r7
 8011bf2:	d010      	beq.n	8011c16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011bf4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	db0c      	blt.n	8011c16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011bfc:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011bfe:	42ba      	cmp	r2, r7
 8011c00:	da09      	bge.n	8011c16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011c02:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8011c06:	42ba      	cmp	r2, r7
 8011c08:	f102 0201 	add.w	r2, r2, #1
 8011c0c:	bf38      	it	cc
 8011c0e:	3308      	addcc	r3, #8
 8011c10:	60a2      	str	r2, [r4, #8]
 8011c12:	bf38      	it	cc
 8011c14:	6123      	strcc	r3, [r4, #16]
 8011c16:	6923      	ldr	r3, [r4, #16]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	8018      	strh	r0, [r3, #0]
 8011c1c:	8059      	strh	r1, [r3, #2]
 8011c1e:	809a      	strh	r2, [r3, #4]
 8011c20:	80da      	strh	r2, [r3, #6]
 8011c22:	6166      	str	r6, [r4, #20]
 8011c24:	6225      	str	r5, [r4, #32]
 8011c26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8011c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c30:	b0d0      	sub	sp, #320	@ 0x140
 8011c32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011c36:	466c      	mov	r4, sp
 8011c38:	4627      	mov	r7, r4
 8011c3a:	1a0d      	subs	r5, r1, r0
 8011c3c:	f100 0308 	add.w	r3, r0, #8
 8011c40:	2d48      	cmp	r5, #72	@ 0x48
 8011c42:	f340 80d5 	ble.w	8011df0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8011c46:	112d      	asrs	r5, r5, #4
 8011c48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011c4c:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011c50:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8011c54:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8011c58:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011c5c:	6816      	ldr	r6, [r2, #0]
 8011c5e:	6006      	str	r6, [r0, #0]
 8011c60:	6856      	ldr	r6, [r2, #4]
 8011c62:	6046      	str	r6, [r0, #4]
 8011c64:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011c68:	f8a2 8002 	strh.w	r8, [r2, #2]
 8011c6c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011c70:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011c74:	f1a1 0208 	sub.w	r2, r1, #8
 8011c78:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8011c7c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8011c80:	4565      	cmp	r5, ip
 8011c82:	db06      	blt.n	8011c92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8011c84:	d119      	bne.n	8011cba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011c86:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8011c8a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8011c8e:	42ae      	cmp	r6, r5
 8011c90:	dd13      	ble.n	8011cba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011c92:	460e      	mov	r6, r1
 8011c94:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8011c98:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8011c9c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011ca0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8011ca4:	601d      	str	r5, [r3, #0]
 8011ca6:	6875      	ldr	r5, [r6, #4]
 8011ca8:	605d      	str	r5, [r3, #4]
 8011caa:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011cae:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011cb2:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011cb6:	f821 ec02 	strh.w	lr, [r1, #-2]
 8011cba:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011cbe:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8011cc2:	42ae      	cmp	r6, r5
 8011cc4:	db06      	blt.n	8011cd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8011cc6:	d116      	bne.n	8011cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011cc8:	f9b0 c000 	ldrsh.w	ip, [r0]
 8011ccc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8011cd0:	45ac      	cmp	ip, r5
 8011cd2:	da10      	bge.n	8011cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011cd4:	681d      	ldr	r5, [r3, #0]
 8011cd6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011cda:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011cde:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011ce2:	6005      	str	r5, [r0, #0]
 8011ce4:	685d      	ldr	r5, [r3, #4]
 8011ce6:	f8a0 8008 	strh.w	r8, [r0, #8]
 8011cea:	6045      	str	r5, [r0, #4]
 8011cec:	8146      	strh	r6, [r0, #10]
 8011cee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8011cf2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011cf6:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8011cfa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011cfe:	4565      	cmp	r5, ip
 8011d00:	db06      	blt.n	8011d10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8011d02:	d119      	bne.n	8011d38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011d04:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8011d08:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011d0c:	42ae      	cmp	r6, r5
 8011d0e:	da13      	bge.n	8011d38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011d10:	460e      	mov	r6, r1
 8011d12:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011d16:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8011d1a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011d1e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8011d22:	6005      	str	r5, [r0, #0]
 8011d24:	6875      	ldr	r5, [r6, #4]
 8011d26:	6045      	str	r5, [r0, #4]
 8011d28:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011d2c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011d30:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011d34:	f821 ec02 	strh.w	lr, [r1, #-2]
 8011d38:	3308      	adds	r3, #8
 8011d3a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011d3e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8011d42:	45e6      	cmp	lr, ip
 8011d44:	dbf8      	blt.n	8011d38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011d46:	d105      	bne.n	8011d54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011d48:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d4c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011d50:	42ae      	cmp	r6, r5
 8011d52:	dbf1      	blt.n	8011d38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011d54:	4615      	mov	r5, r2
 8011d56:	3a08      	subs	r2, #8
 8011d58:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8011d5c:	45b4      	cmp	ip, r6
 8011d5e:	dbf9      	blt.n	8011d54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011d60:	d105      	bne.n	8011d6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8011d62:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011d66:	f9b2 6000 	ldrsh.w	r6, [r2]
 8011d6a:	45b0      	cmp	r8, r6
 8011d6c:	dbf2      	blt.n	8011d54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	f1a5 0608 	sub.w	r6, r5, #8
 8011d74:	d816      	bhi.n	8011da4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8011d76:	f8d6 c000 	ldr.w	ip, [r6]
 8011d7a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8011d7e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8011d82:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8011d86:	f8c3 c000 	str.w	ip, [r3]
 8011d8a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8011d8e:	f8c3 c004 	str.w	ip, [r3, #4]
 8011d92:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011d96:	f825 ec06 	strh.w	lr, [r5, #-6]
 8011d9a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011d9e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011da2:	e7c9      	b.n	8011d38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011da4:	f8d6 e000 	ldr.w	lr, [r6]
 8011da8:	f9b0 a000 	ldrsh.w	sl, [r0]
 8011dac:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8011db0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8011db4:	f8c0 e000 	str.w	lr, [r0]
 8011db8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8011dbc:	1a16      	subs	r6, r2, r0
 8011dbe:	f8c0 e004 	str.w	lr, [r0, #4]
 8011dc2:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011dc6:	f825 cc06 	strh.w	ip, [r5, #-6]
 8011dca:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011dce:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011dd2:	1acd      	subs	r5, r1, r3
 8011dd4:	10ed      	asrs	r5, r5, #3
 8011dd6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8011dda:	bfb5      	itete	lt
 8011ddc:	e9c4 0200 	strdlt	r0, r2, [r4]
 8011de0:	e9c4 3100 	strdge	r3, r1, [r4]
 8011de4:	460a      	movlt	r2, r1
 8011de6:	4603      	movge	r3, r0
 8011de8:	3408      	adds	r4, #8
 8011dea:	4618      	mov	r0, r3
 8011dec:	4611      	mov	r1, r2
 8011dee:	e724      	b.n	8011c3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011df0:	4299      	cmp	r1, r3
 8011df2:	d927      	bls.n	8011e44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8011df4:	f1a3 0210 	sub.w	r2, r3, #16
 8011df8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8011dfc:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8011e00:	45ac      	cmp	ip, r5
 8011e02:	db06      	blt.n	8011e12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8011e04:	d11c      	bne.n	8011e40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8011e06:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8011e0a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8011e0e:	42ae      	cmp	r6, r5
 8011e10:	da16      	bge.n	8011e40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8011e12:	4615      	mov	r5, r2
 8011e14:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8011e18:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8011e1c:	3a08      	subs	r2, #8
 8011e1e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8011e22:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8011e26:	6196      	str	r6, [r2, #24]
 8011e28:	42a8      	cmp	r0, r5
 8011e2a:	686e      	ldr	r6, [r5, #4]
 8011e2c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8011e30:	61d6      	str	r6, [r2, #28]
 8011e32:	f8a2 c012 	strh.w	ip, [r2, #18]
 8011e36:	f8a2 8014 	strh.w	r8, [r2, #20]
 8011e3a:	f8a2 e016 	strh.w	lr, [r2, #22]
 8011e3e:	d1db      	bne.n	8011df8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8011e40:	3308      	adds	r3, #8
 8011e42:	e7d5      	b.n	8011df0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8011e44:	42bc      	cmp	r4, r7
 8011e46:	d903      	bls.n	8011e50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8011e48:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8011e4c:	3c08      	subs	r4, #8
 8011e4e:	e6f4      	b.n	8011c3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011e50:	b050      	add	sp, #320	@ 0x140
 8011e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011e56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8011e56:	b510      	push	{r4, lr}
 8011e58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	07da      	lsls	r2, r3, #31
 8011e5e:	d507      	bpl.n	8011e70 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8011e60:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8011e64:	f7ff fe8c 	bl	8011b80 <_ZN8touchgfx7Outline6lineToEii>
 8011e68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011e6a:	f023 0301 	bic.w	r3, r3, #1
 8011e6e:	6243      	str	r3, [r0, #36]	@ 0x24
 8011e70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011e72:	079b      	lsls	r3, r3, #30
 8011e74:	d521      	bpl.n	8011eba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8011e76:	6923      	ldr	r3, [r4, #16]
 8011e78:	88d9      	ldrh	r1, [r3, #6]
 8011e7a:	889a      	ldrh	r2, [r3, #4]
 8011e7c:	430a      	orrs	r2, r1
 8011e7e:	d010      	beq.n	8011ea2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011e80:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011e84:	2a00      	cmp	r2, #0
 8011e86:	db0c      	blt.n	8011ea2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011e88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011e8a:	428a      	cmp	r2, r1
 8011e8c:	da09      	bge.n	8011ea2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011e8e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011e92:	4291      	cmp	r1, r2
 8011e94:	f102 0201 	add.w	r2, r2, #1
 8011e98:	bf88      	it	hi
 8011e9a:	3308      	addhi	r3, #8
 8011e9c:	60a2      	str	r2, [r4, #8]
 8011e9e:	bf88      	it	hi
 8011ea0:	6123      	strhi	r3, [r4, #16]
 8011ea2:	68a1      	ldr	r1, [r4, #8]
 8011ea4:	b129      	cbz	r1, 8011eb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011ea6:	6863      	ldr	r3, [r4, #4]
 8011ea8:	4299      	cmp	r1, r3
 8011eaa:	d802      	bhi.n	8011eb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011eac:	68e0      	ldr	r0, [r4, #12]
 8011eae:	f7ff febd 	bl	8011c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8011eb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011eb4:	f023 0302 	bic.w	r3, r3, #2
 8011eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011eba:	68e0      	ldr	r0, [r4, #12]
 8011ebc:	bd10      	pop	{r4, pc}
	...

08011ec0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011ec0:	4b01      	ldr	r3, [pc, #4]	@ (8011ec8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8011ec2:	6818      	ldr	r0, [r3, #0]
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	240284ac 	.word	0x240284ac

08011ecc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8011ecc:	4b01      	ldr	r3, [pc, #4]	@ (8011ed4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8011ece:	6818      	ldr	r0, [r3, #0]
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	240284b0 	.word	0x240284b0

08011ed8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	6803      	ldr	r3, [r0, #0]
 8011edc:	460c      	mov	r4, r1
 8011ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee0:	4798      	blx	r3
 8011ee2:	1b03      	subs	r3, r0, r4
 8011ee4:	4258      	negs	r0, r3
 8011ee6:	4158      	adcs	r0, r3
 8011ee8:	bd10      	pop	{r4, pc}
	...

08011eec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011eec:	4b01      	ldr	r3, [pc, #4]	@ (8011ef4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011eee:	6019      	str	r1, [r3, #0]
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	240284b4 	.word	0x240284b4

08011ef8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011efc:	4696      	mov	lr, r2
 8011efe:	b097      	sub	sp, #92	@ 0x5c
 8011f00:	4605      	mov	r5, r0
 8011f02:	4614      	mov	r4, r2
 8011f04:	460e      	mov	r6, r1
 8011f06:	461f      	mov	r7, r3
 8011f08:	f10d 0c1c 	add.w	ip, sp, #28
 8011f0c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8011f10:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8011f14:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8011f18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f20:	f8de 3000 	ldr.w	r3, [lr]
 8011f24:	f104 0e14 	add.w	lr, r4, #20
 8011f28:	f8cc 3000 	str.w	r3, [ip]
 8011f2c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f38:	f8de 3000 	ldr.w	r3, [lr]
 8011f3c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011f40:	f8cc 3000 	str.w	r3, [ip]
 8011f44:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011f48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f50:	f8de 3000 	ldr.w	r3, [lr]
 8011f54:	4631      	mov	r1, r6
 8011f56:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f8cc 3000 	str.w	r3, [ip]
 8011f5e:	682b      	ldr	r3, [r5, #0]
 8011f60:	9201      	str	r2, [sp, #4]
 8011f62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011f64:	f8cd 8008 	str.w	r8, [sp, #8]
 8011f68:	9200      	str	r2, [sp, #0]
 8011f6a:	aa07      	add	r2, sp, #28
 8011f6c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011f70:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011f74:	463b      	mov	r3, r7
 8011f76:	47d8      	blx	fp
 8011f78:	46a6      	mov	lr, r4
 8011f7a:	f10d 0c1c 	add.w	ip, sp, #28
 8011f7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f86:	f8de 3000 	ldr.w	r3, [lr]
 8011f8a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011f8e:	343c      	adds	r4, #60	@ 0x3c
 8011f90:	f8cc 3000 	str.w	r3, [ip]
 8011f94:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011f98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fa0:	f8de 3000 	ldr.w	r3, [lr]
 8011fa4:	f8cc 3000 	str.w	r3, [ip]
 8011fa8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	4631      	mov	r1, r6
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f8cc 3000 	str.w	r3, [ip]
 8011fbc:	682b      	ldr	r3, [r5, #0]
 8011fbe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011fc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011fc4:	f8cd 8008 	str.w	r8, [sp, #8]
 8011fc8:	9201      	str	r2, [sp, #4]
 8011fca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011fcc:	9200      	str	r2, [sp, #0]
 8011fce:	aa07      	add	r2, sp, #28
 8011fd0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8011fd2:	463b      	mov	r3, r7
 8011fd4:	47a0      	blx	r4
 8011fd6:	b017      	add	sp, #92	@ 0x5c
 8011fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fdc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe0:	b08d      	sub	sp, #52	@ 0x34
 8011fe2:	4688      	mov	r8, r1
 8011fe4:	f8d3 c000 	ldr.w	ip, [r3]
 8011fe8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011fea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8011fee:	680f      	ldr	r7, [r1, #0]
 8011ff0:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011ff4:	eba7 070c 	sub.w	r7, r7, ip
 8011ff8:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8011ffc:	edd3 6a07 	vldr	s13, [r3, #28]
 8012000:	42bc      	cmp	r4, r7
 8012002:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012004:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012008:	bfa8      	it	ge
 801200a:	463c      	movge	r4, r7
 801200c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012010:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012014:	ee07 4a90 	vmov	s15, r4
 8012018:	eb09 0e0c 	add.w	lr, r9, ip
 801201c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012020:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012024:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012028:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801202c:	4571      	cmp	r1, lr
 801202e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012032:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012036:	ee25 5a27 	vmul.f32	s10, s10, s15
 801203a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801203e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012042:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012046:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801204a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801204e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012052:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012056:	f340 808c 	ble.w	8012172 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801205a:	eba1 060e 	sub.w	r6, r1, lr
 801205e:	fb96 f5f4 	sdiv	r5, r6, r4
 8012062:	ee07 5a10 	vmov	s14, r5
 8012066:	2d00      	cmp	r5, #0
 8012068:	fb04 6615 	mls	r6, r4, r5, r6
 801206c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012070:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012074:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012078:	eea7 1a05 	vfma.f32	s2, s14, s10
 801207c:	dd12      	ble.n	80120a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801207e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012082:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012086:	ee31 2a45 	vsub.f32	s4, s2, s10
 801208a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012092:	bf14      	ite	ne
 8012094:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012098:	eeb0 7a67 	vmoveq.f32	s14, s15
 801209c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80120a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80120a4:	fb05 f204 	mul.w	r2, r5, r4
 80120a8:	1abf      	subs	r7, r7, r2
 80120aa:	4494      	add	ip, r2
 80120ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80120b0:	4411      	add	r1, r2
 80120b2:	eb09 020c 	add.w	r2, r9, ip
 80120b6:	b209      	sxth	r1, r1
 80120b8:	443a      	add	r2, r7
 80120ba:	428a      	cmp	r2, r1
 80120bc:	bfc4      	itt	gt
 80120be:	eba1 0209 	subgt.w	r2, r1, r9
 80120c2:	eba2 070c 	subgt.w	r7, r2, ip
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	dd50      	ble.n	801216c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80120ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80120ce:	fb04 7211 	mls	r2, r4, r1, r7
 80120d2:	b90a      	cbnz	r2, 80120d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80120d4:	3901      	subs	r1, #1
 80120d6:	4622      	mov	r2, r4
 80120d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80120dc:	6840      	ldr	r0, [r0, #4]
 80120de:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80120e2:	44b6      	add	lr, r6
 80120e4:	f8d0 a000 	ldr.w	sl, [r0]
 80120e8:	2900      	cmp	r1, #0
 80120ea:	bfcc      	ite	gt
 80120ec:	46a1      	movgt	r9, r4
 80120ee:	4691      	movle	r9, r2
 80120f0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80120f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80120f4:	fb04 e505 	mla	r5, r4, r5, lr
 80120f8:	eef0 6a42 	vmov.f32	s13, s4
 80120fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012100:	9008      	str	r0, [sp, #32]
 8012102:	eeb0 7a61 	vmov.f32	s14, s3
 8012106:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8012108:	695b      	ldr	r3, [r3, #20]
 801210a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801210e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012112:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012116:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012118:	445b      	add	r3, fp
 801211a:	9307      	str	r3, [sp, #28]
 801211c:	ee16 3a90 	vmov	r3, s13
 8012120:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012124:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012128:	ee21 3a23 	vmul.f32	s6, s2, s7
 801212c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012130:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012134:	ee17 7a90 	vmov	r7, s15
 8012138:	ee73 7a42 	vsub.f32	s15, s6, s4
 801213c:	fb97 f7f4 	sdiv	r7, r7, r4
 8012140:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012144:	ee17 ca90 	vmov	ip, s15
 8012148:	fb9c fcf4 	sdiv	ip, ip, r4
 801214c:	fb0c 3306 	mla	r3, ip, r6, r3
 8012150:	9302      	str	r3, [sp, #8]
 8012152:	ee17 3a10 	vmov	r3, s14
 8012156:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801215a:	fb07 3706 	mla	r7, r7, r6, r3
 801215e:	eba9 0306 	sub.w	r3, r9, r6
 8012162:	e9cd 4700 	strd	r4, r7, [sp]
 8012166:	f8da 4008 	ldr.w	r4, [sl, #8]
 801216a:	47a0      	blx	r4
 801216c:	b00d      	add	sp, #52	@ 0x34
 801216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012172:	2500      	movs	r5, #0
 8012174:	462e      	mov	r6, r5
 8012176:	e799      	b.n	80120ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217c:	b0db      	sub	sp, #364	@ 0x16c
 801217e:	461d      	mov	r5, r3
 8012180:	4614      	mov	r4, r2
 8012182:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8012186:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012188:	4629      	mov	r1, r5
 801218a:	930a      	str	r3, [sp, #40]	@ 0x28
 801218c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8012190:	9009      	str	r0, [sp, #36]	@ 0x24
 8012192:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012194:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8012198:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801219c:	9310      	str	r3, [sp, #64]	@ 0x40
 801219e:	6803      	ldr	r3, [r0, #0]
 80121a0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80121a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80121a6:	47b8      	blx	r7
 80121a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121aa:	6058      	str	r0, [r3, #4]
 80121ac:	2800      	cmp	r0, #0
 80121ae:	f000 83a1 	beq.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80121b2:	682b      	ldr	r3, [r5, #0]
 80121b4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80121b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80121bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80121be:	686b      	ldr	r3, [r5, #4]
 80121c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80121c6:	4bc1      	ldr	r3, [pc, #772]	@ (80124cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80121c8:	7819      	ldrb	r1, [r3, #0]
 80121ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80121ce:	2900      	cmp	r1, #0
 80121d0:	bf16      	itet	ne
 80121d2:	4619      	movne	r1, r3
 80121d4:	4611      	moveq	r1, r2
 80121d6:	4613      	movne	r3, r2
 80121d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121dc:	9116      	str	r1, [sp, #88]	@ 0x58
 80121de:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80121e2:	f240 8387 	bls.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80121e6:	ed94 7a07 	vldr	s14, [r4, #28]
 80121ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f2:	f240 837f 	bls.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80121f6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80121fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	f240 8377 	bls.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012206:	6822      	ldr	r2, [r4, #0]
 8012208:	4bb1      	ldr	r3, [pc, #708]	@ (80124d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801220a:	429a      	cmp	r2, r3
 801220c:	f2c0 8372 	blt.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012210:	49b0      	ldr	r1, [pc, #704]	@ (80124d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8012212:	6963      	ldr	r3, [r4, #20]
 8012214:	428a      	cmp	r2, r1
 8012216:	f300 836d 	bgt.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801221a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801221e:	48ae      	ldr	r0, [pc, #696]	@ (80124d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012220:	33ff      	adds	r3, #255	@ 0xff
 8012222:	4283      	cmp	r3, r0
 8012224:	f200 8366 	bhi.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012228:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801222a:	4dac      	ldr	r5, [pc, #688]	@ (80124dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801222c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012230:	33ff      	adds	r3, #255	@ 0xff
 8012232:	42ab      	cmp	r3, r5
 8012234:	f200 835e 	bhi.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012238:	6862      	ldr	r2, [r4, #4]
 801223a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801223e:	33ff      	adds	r3, #255	@ 0xff
 8012240:	4283      	cmp	r3, r0
 8012242:	f200 8357 	bhi.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012246:	69a1      	ldr	r1, [r4, #24]
 8012248:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801224c:	33ff      	adds	r3, #255	@ 0xff
 801224e:	4283      	cmp	r3, r0
 8012250:	f200 8350 	bhi.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012254:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012256:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801225a:	30ff      	adds	r0, #255	@ 0xff
 801225c:	42a8      	cmp	r0, r5
 801225e:	f200 8349 	bhi.w	80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012262:	428a      	cmp	r2, r1
 8012264:	f280 8110 	bge.w	8012488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012268:	429a      	cmp	r2, r3
 801226a:	f300 8119 	bgt.w	80124a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801226e:	4299      	cmp	r1, r3
 8012270:	f280 811d 	bge.w	80124ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012274:	2502      	movs	r5, #2
 8012276:	2701      	movs	r7, #1
 8012278:	46a9      	mov	r9, r5
 801227a:	46b8      	mov	r8, r7
 801227c:	f04f 0a00 	mov.w	sl, #0
 8012280:	4621      	mov	r1, r4
 8012282:	a849      	add	r0, sp, #292	@ 0x124
 8012284:	f004 f82e 	bl	80162e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012288:	4622      	mov	r2, r4
 801228a:	4653      	mov	r3, sl
 801228c:	a949      	add	r1, sp, #292	@ 0x124
 801228e:	f8cd 9000 	str.w	r9, [sp]
 8012292:	a819      	add	r0, sp, #100	@ 0x64
 8012294:	f004 f956 	bl	8016544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012298:	4622      	mov	r2, r4
 801229a:	4653      	mov	r3, sl
 801229c:	a949      	add	r1, sp, #292	@ 0x124
 801229e:	f8cd 8000 	str.w	r8, [sp]
 80122a2:	a829      	add	r0, sp, #164	@ 0xa4
 80122a4:	f004 f94e 	bl	8016544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80122a8:	4643      	mov	r3, r8
 80122aa:	4622      	mov	r2, r4
 80122ac:	a949      	add	r1, sp, #292	@ 0x124
 80122ae:	f8cd 9000 	str.w	r9, [sp]
 80122b2:	a839      	add	r0, sp, #228	@ 0xe4
 80122b4:	f004 f946 	bl	8016544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80122b8:	42af      	cmp	r7, r5
 80122ba:	af12      	add	r7, sp, #72	@ 0x48
 80122bc:	bfb7      	itett	lt
 80122be:	2300      	movlt	r3, #0
 80122c0:	2301      	movge	r3, #1
 80122c2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80122c4:	ac19      	addlt	r4, sp, #100	@ 0x64
 80122c6:	bfb1      	iteee	lt
 80122c8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80122ca:	ad19      	addge	r5, sp, #100	@ 0x64
 80122cc:	930e      	strge	r3, [sp, #56]	@ 0x38
 80122ce:	ac29      	addge	r4, sp, #164	@ 0xa4
 80122d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80122d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80122da:	b928      	cbnz	r0, 80122e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80122dc:	4b80      	ldr	r3, [pc, #512]	@ (80124e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	6803      	ldr	r3, [r0, #0]
 80122e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122e4:	4798      	blx	r3
 80122e6:	6038      	str	r0, [r7, #0]
 80122e8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80122ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80122ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122f2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80122f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80122f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122f8:	6963      	ldr	r3, [r4, #20]
 80122fa:	440b      	add	r3, r1
 80122fc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012300:	4408      	add	r0, r1
 8012302:	b200      	sxth	r0, r0
 8012304:	4283      	cmp	r3, r0
 8012306:	900d      	str	r0, [sp, #52]	@ 0x34
 8012308:	f280 80dd 	bge.w	80124c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801230c:	428b      	cmp	r3, r1
 801230e:	da08      	bge.n	8012322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012310:	2a00      	cmp	r2, #0
 8012312:	dd06      	ble.n	8012322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012314:	1acb      	subs	r3, r1, r3
 8012316:	429a      	cmp	r2, r3
 8012318:	f2c0 80e4 	blt.w	80124e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801231c:	2b00      	cmp	r3, #0
 801231e:	f300 80e2 	bgt.w	80124e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012322:	6967      	ldr	r7, [r4, #20]
 8012324:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801232a:	443b      	add	r3, r7
 801232c:	461f      	mov	r7, r3
 801232e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012330:	1bdf      	subs	r7, r3, r7
 8012332:	4297      	cmp	r7, r2
 8012334:	bfa8      	it	ge
 8012336:	4617      	movge	r7, r2
 8012338:	2f00      	cmp	r7, #0
 801233a:	f340 8166 	ble.w	801260a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801233e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012340:	6829      	ldr	r1, [r5, #0]
 8012342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012346:	f9bb 3000 	ldrsh.w	r3, [fp]
 801234a:	4411      	add	r1, r2
 801234c:	6820      	ldr	r0, [r4, #0]
 801234e:	4299      	cmp	r1, r3
 8012350:	dd1a      	ble.n	8012388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012352:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012356:	4402      	add	r2, r0
 8012358:	440b      	add	r3, r1
 801235a:	b21b      	sxth	r3, r3
 801235c:	429a      	cmp	r2, r3
 801235e:	dc13      	bgt.n	8012388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012360:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012362:	a912      	add	r1, sp, #72	@ 0x48
 8012364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	9206      	str	r2, [sp, #24]
 801236c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801236e:	9500      	str	r5, [sp, #0]
 8012370:	9205      	str	r2, [sp, #20]
 8012372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012374:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012378:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801237a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801237e:	aa49      	add	r2, sp, #292	@ 0x124
 8012380:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012384:	4623      	mov	r3, r4
 8012386:	47c8      	blx	r9
 8012388:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801238c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012390:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012398:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801239c:	68a1      	ldr	r1, [r4, #8]
 801239e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80123a6:	edd4 6a07 	vldr	s13, [r4, #28]
 80123aa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80123ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80123b2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80123b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80123be:	441a      	add	r2, r3
 80123c0:	6963      	ldr	r3, [r4, #20]
 80123c2:	3301      	adds	r3, #1
 80123c4:	6022      	str	r2, [r4, #0]
 80123c6:	6163      	str	r3, [r4, #20]
 80123c8:	69a3      	ldr	r3, [r4, #24]
 80123ca:	3b01      	subs	r3, #1
 80123cc:	61a3      	str	r3, [r4, #24]
 80123ce:	6923      	ldr	r3, [r4, #16]
 80123d0:	440b      	add	r3, r1
 80123d2:	68e1      	ldr	r1, [r4, #12]
 80123d4:	428b      	cmp	r3, r1
 80123d6:	6123      	str	r3, [r4, #16]
 80123d8:	db15      	blt.n	8012406 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80123da:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80123de:	3201      	adds	r2, #1
 80123e0:	1a5b      	subs	r3, r3, r1
 80123e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80123e6:	6022      	str	r2, [r4, #0]
 80123e8:	6123      	str	r3, [r4, #16]
 80123ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80123ee:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80123f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80123f6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80123fa:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80123fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012402:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012406:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801240a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801240e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012416:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801241a:	68a9      	ldr	r1, [r5, #8]
 801241c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012420:	ed95 6a08 	vldr	s12, [r5, #32]
 8012424:	edd5 6a07 	vldr	s13, [r5, #28]
 8012428:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801242c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012430:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012438:	edc5 6a07 	vstr	s13, [r5, #28]
 801243c:	441a      	add	r2, r3
 801243e:	696b      	ldr	r3, [r5, #20]
 8012440:	3301      	adds	r3, #1
 8012442:	602a      	str	r2, [r5, #0]
 8012444:	616b      	str	r3, [r5, #20]
 8012446:	69ab      	ldr	r3, [r5, #24]
 8012448:	3b01      	subs	r3, #1
 801244a:	61ab      	str	r3, [r5, #24]
 801244c:	692b      	ldr	r3, [r5, #16]
 801244e:	440b      	add	r3, r1
 8012450:	68e9      	ldr	r1, [r5, #12]
 8012452:	428b      	cmp	r3, r1
 8012454:	612b      	str	r3, [r5, #16]
 8012456:	db15      	blt.n	8012484 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012458:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801245c:	3201      	adds	r2, #1
 801245e:	1a5b      	subs	r3, r3, r1
 8012460:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012464:	602a      	str	r2, [r5, #0]
 8012466:	612b      	str	r3, [r5, #16]
 8012468:	edc5 6a07 	vstr	s13, [r5, #28]
 801246c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012470:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012474:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012478:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012480:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012484:	3f01      	subs	r7, #1
 8012486:	e757      	b.n	8012338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012488:	4299      	cmp	r1, r3
 801248a:	dc13      	bgt.n	80124b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801248c:	429a      	cmp	r2, r3
 801248e:	da14      	bge.n	80124ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012490:	2502      	movs	r5, #2
 8012492:	2703      	movs	r7, #3
 8012494:	f04f 0800 	mov.w	r8, #0
 8012498:	46a9      	mov	r9, r5
 801249a:	f04f 0a01 	mov.w	sl, #1
 801249e:	e6ef      	b.n	8012280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80124a0:	2501      	movs	r5, #1
 80124a2:	2700      	movs	r7, #0
 80124a4:	46a9      	mov	r9, r5
 80124a6:	46b8      	mov	r8, r7
 80124a8:	f04f 0a02 	mov.w	sl, #2
 80124ac:	e6e8      	b.n	8012280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80124ae:	2501      	movs	r5, #1
 80124b0:	2702      	movs	r7, #2
 80124b2:	e6e1      	b.n	8012278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80124b4:	2500      	movs	r5, #0
 80124b6:	2701      	movs	r7, #1
 80124b8:	e7f4      	b.n	80124a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80124ba:	2702      	movs	r7, #2
 80124bc:	2503      	movs	r5, #3
 80124be:	f04f 0900 	mov.w	r9, #0
 80124c2:	46b8      	mov	r8, r7
 80124c4:	e7e9      	b.n	801249a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80124c6:	4613      	mov	r3, r2
 80124c8:	e728      	b.n	801231c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80124ca:	bf00      	nop
 80124cc:	2402849c 	.word	0x2402849c
 80124d0:	fffd8f01 	.word	0xfffd8f01
 80124d4:	00027100 	.word	0x00027100
 80124d8:	0004e1ff 	.word	0x0004e1ff
 80124dc:	0004e1fe 	.word	0x0004e1fe
 80124e0:	240284a4 	.word	0x240284a4
 80124e4:	4613      	mov	r3, r2
 80124e6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80124e8:	469e      	mov	lr, r3
 80124ea:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80124ec:	469c      	mov	ip, r3
 80124ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80124f0:	f04f 0900 	mov.w	r9, #0
 80124f4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80124f8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80124fc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8012500:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8012504:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8012508:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801250c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8012510:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8012514:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8012518:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801251c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8012520:	f1bc 0f00 	cmp.w	ip, #0
 8012524:	d147      	bne.n	80125b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012526:	eb03 0c07 	add.w	ip, r3, r7
 801252a:	1ad7      	subs	r7, r2, r3
 801252c:	f1b9 0f00 	cmp.w	r9, #0
 8012530:	d009      	beq.n	8012546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012532:	9029      	str	r0, [sp, #164]	@ 0xa4
 8012534:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8012538:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801253c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8012540:	912d      	str	r1, [sp, #180]	@ 0xb4
 8012542:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8012546:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012548:	f04f 0800 	mov.w	r8, #0
 801254c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012550:	9111      	str	r1, [sp, #68]	@ 0x44
 8012552:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012556:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801255a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801255e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012562:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012566:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801256a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801256e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012572:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012576:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801257a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801257e:	f1be 0f00 	cmp.w	lr, #0
 8012582:	d031      	beq.n	80125e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012584:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012586:	4450      	add	r0, sl
 8012588:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801258c:	4431      	add	r1, r6
 801258e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012592:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012596:	4549      	cmp	r1, r9
 8012598:	db08      	blt.n	80125ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801259a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801259e:	3001      	adds	r0, #1
 80125a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80125a4:	eba1 0109 	sub.w	r1, r1, r9
 80125a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80125ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80125b0:	f04f 0801 	mov.w	r8, #1
 80125b4:	e7e3      	b.n	801257e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80125b6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80125b8:	4450      	add	r0, sl
 80125ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 80125be:	4431      	add	r1, r6
 80125c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80125c4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80125c8:	4541      	cmp	r1, r8
 80125ca:	db08      	blt.n	80125de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80125cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80125d0:	3001      	adds	r0, #1
 80125d2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80125d6:	eba1 0108 	sub.w	r1, r1, r8
 80125da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80125de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80125e2:	f04f 0901 	mov.w	r9, #1
 80125e6:	e79b      	b.n	8012520 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80125e8:	449c      	add	ip, r3
 80125ea:	1aff      	subs	r7, r7, r3
 80125ec:	f1b8 0f00 	cmp.w	r8, #0
 80125f0:	d009      	beq.n	8012606 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80125f2:	9019      	str	r0, [sp, #100]	@ 0x64
 80125f4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80125f8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80125fc:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012600:	911d      	str	r1, [sp, #116]	@ 0x74
 8012602:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012606:	1ad2      	subs	r2, r2, r3
 8012608:	e68b      	b.n	8012322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801260a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801260c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801260e:	2b00      	cmp	r3, #0
 8012610:	f000 80d1 	beq.w	80127b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012614:	ad19      	add	r5, sp, #100	@ 0x64
 8012616:	ac39      	add	r4, sp, #228	@ 0xe4
 8012618:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801261a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801261e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012622:	930c      	str	r3, [sp, #48]	@ 0x30
 8012624:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012626:	6963      	ldr	r3, [r4, #20]
 8012628:	440b      	add	r3, r1
 801262a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801262e:	4408      	add	r0, r1
 8012630:	b200      	sxth	r0, r0
 8012632:	4283      	cmp	r3, r0
 8012634:	900d      	str	r0, [sp, #52]	@ 0x34
 8012636:	f280 80c1 	bge.w	80127bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801263a:	428b      	cmp	r3, r1
 801263c:	da08      	bge.n	8012650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801263e:	2a00      	cmp	r2, #0
 8012640:	dd06      	ble.n	8012650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012642:	1acb      	subs	r3, r1, r3
 8012644:	429a      	cmp	r2, r3
 8012646:	f2c0 80bb 	blt.w	80127c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801264a:	2b00      	cmp	r3, #0
 801264c:	f300 80b9 	bgt.w	80127c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012650:	6967      	ldr	r7, [r4, #20]
 8012652:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012658:	443b      	add	r3, r7
 801265a:	461f      	mov	r7, r3
 801265c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801265e:	1bdf      	subs	r7, r3, r7
 8012660:	4297      	cmp	r7, r2
 8012662:	bfa8      	it	ge
 8012664:	4617      	movge	r7, r2
 8012666:	2f00      	cmp	r7, #0
 8012668:	f340 813c 	ble.w	80128e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801266c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801266e:	6829      	ldr	r1, [r5, #0]
 8012670:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012674:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012678:	4411      	add	r1, r2
 801267a:	6820      	ldr	r0, [r4, #0]
 801267c:	4299      	cmp	r1, r3
 801267e:	dd1a      	ble.n	80126b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012680:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012684:	4402      	add	r2, r0
 8012686:	440b      	add	r3, r1
 8012688:	b21b      	sxth	r3, r3
 801268a:	429a      	cmp	r2, r3
 801268c:	dc13      	bgt.n	80126b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801268e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012690:	a912      	add	r1, sp, #72	@ 0x48
 8012692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012694:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	9206      	str	r2, [sp, #24]
 801269a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801269c:	9500      	str	r5, [sp, #0]
 801269e:	9205      	str	r2, [sp, #20]
 80126a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80126a6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80126a8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80126ac:	aa49      	add	r2, sp, #292	@ 0x124
 80126ae:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80126b2:	4623      	mov	r3, r4
 80126b4:	47c8      	blx	r9
 80126b6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80126ba:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80126be:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80126c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126c6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80126ca:	68a1      	ldr	r1, [r4, #8]
 80126cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80126d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80126d8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80126dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80126e0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80126e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80126e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80126ec:	441a      	add	r2, r3
 80126ee:	6963      	ldr	r3, [r4, #20]
 80126f0:	3301      	adds	r3, #1
 80126f2:	6022      	str	r2, [r4, #0]
 80126f4:	6163      	str	r3, [r4, #20]
 80126f6:	69a3      	ldr	r3, [r4, #24]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	61a3      	str	r3, [r4, #24]
 80126fc:	6923      	ldr	r3, [r4, #16]
 80126fe:	440b      	add	r3, r1
 8012700:	68e1      	ldr	r1, [r4, #12]
 8012702:	428b      	cmp	r3, r1
 8012704:	6123      	str	r3, [r4, #16]
 8012706:	db15      	blt.n	8012734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012708:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801270c:	3201      	adds	r2, #1
 801270e:	1a5b      	subs	r3, r3, r1
 8012710:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012714:	6022      	str	r2, [r4, #0]
 8012716:	6123      	str	r3, [r4, #16]
 8012718:	edc4 6a07 	vstr	s13, [r4, #28]
 801271c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8012720:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012724:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012728:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012730:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012734:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012738:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801273c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012744:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012748:	68a9      	ldr	r1, [r5, #8]
 801274a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801274e:	ed95 6a08 	vldr	s12, [r5, #32]
 8012752:	edd5 6a07 	vldr	s13, [r5, #28]
 8012756:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801275a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801275e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012766:	edc5 6a07 	vstr	s13, [r5, #28]
 801276a:	441a      	add	r2, r3
 801276c:	696b      	ldr	r3, [r5, #20]
 801276e:	3301      	adds	r3, #1
 8012770:	602a      	str	r2, [r5, #0]
 8012772:	616b      	str	r3, [r5, #20]
 8012774:	69ab      	ldr	r3, [r5, #24]
 8012776:	3b01      	subs	r3, #1
 8012778:	61ab      	str	r3, [r5, #24]
 801277a:	692b      	ldr	r3, [r5, #16]
 801277c:	440b      	add	r3, r1
 801277e:	68e9      	ldr	r1, [r5, #12]
 8012780:	428b      	cmp	r3, r1
 8012782:	612b      	str	r3, [r5, #16]
 8012784:	db15      	blt.n	80127b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012786:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801278a:	3201      	adds	r2, #1
 801278c:	1a5b      	subs	r3, r3, r1
 801278e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012792:	602a      	str	r2, [r5, #0]
 8012794:	612b      	str	r3, [r5, #16]
 8012796:	edc5 6a07 	vstr	s13, [r5, #28]
 801279a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801279e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80127a2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80127a6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80127aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127ae:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80127b2:	3f01      	subs	r7, #1
 80127b4:	e757      	b.n	8012666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80127b6:	ad39      	add	r5, sp, #228	@ 0xe4
 80127b8:	ac19      	add	r4, sp, #100	@ 0x64
 80127ba:	e72d      	b.n	8012618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80127bc:	4613      	mov	r3, r2
 80127be:	e744      	b.n	801264a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80127c0:	4613      	mov	r3, r2
 80127c2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80127c4:	469e      	mov	lr, r3
 80127c6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80127ca:	461f      	mov	r7, r3
 80127cc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80127d0:	f04f 0900 	mov.w	r9, #0
 80127d4:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80127d8:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80127dc:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80127e0:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80127e4:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80127e8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80127ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80127ee:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80127f2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80127f6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80127fa:	960e      	str	r6, [sp, #56]	@ 0x38
 80127fc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8012800:	2f00      	cmp	r7, #0
 8012802:	d146      	bne.n	8012892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012804:	449c      	add	ip, r3
 8012806:	1ad7      	subs	r7, r2, r3
 8012808:	f1b9 0f00 	cmp.w	r9, #0
 801280c:	d009      	beq.n	8012822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801280e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8012810:	913d      	str	r1, [sp, #244]	@ 0xf4
 8012812:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8012816:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801281a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801281e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8012822:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012824:	f04f 0800 	mov.w	r8, #0
 8012828:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801282c:	910e      	str	r1, [sp, #56]	@ 0x38
 801282e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012832:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012836:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801283a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801283e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012842:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8012846:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801284a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801284e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012852:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012856:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801285a:	f1be 0f00 	cmp.w	lr, #0
 801285e:	d030      	beq.n	80128c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012860:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012862:	4450      	add	r0, sl
 8012864:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012868:	4431      	add	r1, r6
 801286a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801286e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012872:	4549      	cmp	r1, r9
 8012874:	db08      	blt.n	8012888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012876:	ee77 7a85 	vadd.f32	s15, s15, s10
 801287a:	3001      	adds	r0, #1
 801287c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012880:	eba1 0109 	sub.w	r1, r1, r9
 8012884:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012888:	f10e 3eff 	add.w	lr, lr, #4294967295
 801288c:	f04f 0801 	mov.w	r8, #1
 8012890:	e7e3      	b.n	801285a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012892:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012894:	4450      	add	r0, sl
 8012896:	ee37 7a24 	vadd.f32	s14, s14, s9
 801289a:	4431      	add	r1, r6
 801289c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80128a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80128a4:	4541      	cmp	r1, r8
 80128a6:	db08      	blt.n	80128ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80128a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80128ac:	3001      	adds	r0, #1
 80128ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80128b2:	eba1 0108 	sub.w	r1, r1, r8
 80128b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80128ba:	3f01      	subs	r7, #1
 80128bc:	f04f 0901 	mov.w	r9, #1
 80128c0:	e79e      	b.n	8012800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80128c2:	449c      	add	ip, r3
 80128c4:	1aff      	subs	r7, r7, r3
 80128c6:	f1b8 0f00 	cmp.w	r8, #0
 80128ca:	d009      	beq.n	80128e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80128cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80128ce:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80128d2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80128d6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80128da:	911d      	str	r1, [sp, #116]	@ 0x74
 80128dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80128e0:	1ad2      	subs	r2, r2, r3
 80128e2:	e6b5      	b.n	8012650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80128e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	b923      	cbnz	r3, 80128f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80128ea:	4b04      	ldr	r3, [pc, #16]	@ (80128fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80128ec:	6818      	ldr	r0, [r3, #0]
 80128ee:	6803      	ldr	r3, [r0, #0]
 80128f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128f2:	4798      	blx	r3
 80128f4:	b05b      	add	sp, #364	@ 0x16c
 80128f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fa:	bf00      	nop
 80128fc:	240284a4 	.word	0x240284a4

08012900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	4604      	mov	r4, r0
 8012904:	2500      	movs	r5, #0
 8012906:	9805      	ldr	r0, [sp, #20]
 8012908:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801290c:	6061      	str	r1, [r4, #4]
 801290e:	8263      	strh	r3, [r4, #18]
 8012910:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8012914:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012918:	8025      	strh	r5, [r4, #0]
 801291a:	7221      	strb	r1, [r4, #8]
 801291c:	7266      	strb	r6, [r4, #9]
 801291e:	60e0      	str	r0, [r4, #12]
 8012920:	8222      	strh	r2, [r4, #16]
 8012922:	82a3      	strh	r3, [r4, #20]
 8012924:	82e5      	strh	r5, [r4, #22]
 8012926:	8325      	strh	r5, [r4, #24]
 8012928:	8365      	strh	r5, [r4, #26]
 801292a:	83a5      	strh	r5, [r4, #28]
 801292c:	83e5      	strh	r5, [r4, #30]
 801292e:	8425      	strh	r5, [r4, #32]
 8012930:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8012934:	b32e      	cbz	r6, 8012982 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012936:	6803      	ldr	r3, [r0, #0]
 8012938:	695b      	ldr	r3, [r3, #20]
 801293a:	4798      	blx	r3
 801293c:	4606      	mov	r6, r0
 801293e:	b300      	cbz	r0, 8012982 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012940:	68e0      	ldr	r0, [r4, #12]
 8012942:	4631      	mov	r1, r6
 8012944:	6803      	ldr	r3, [r0, #0]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	4798      	blx	r3
 801294a:	4605      	mov	r5, r0
 801294c:	b1c8      	cbz	r0, 8012982 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801294e:	7b43      	ldrb	r3, [r0, #13]
 8012950:	7a82      	ldrb	r2, [r0, #10]
 8012952:	005b      	lsls	r3, r3, #1
 8012954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012958:	4313      	orrs	r3, r2
 801295a:	8423      	strh	r3, [r4, #32]
 801295c:	7a63      	ldrb	r3, [r4, #9]
 801295e:	2b06      	cmp	r3, #6
 8012960:	d10f      	bne.n	8012982 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012962:	68e0      	ldr	r0, [r4, #12]
 8012964:	462a      	mov	r2, r5
 8012966:	4631      	mov	r1, r6
 8012968:	6803      	ldr	r3, [r0, #0]
 801296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801296c:	4798      	blx	r3
 801296e:	7b6b      	ldrb	r3, [r5, #13]
 8012970:	005b      	lsls	r3, r3, #1
 8012972:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012976:	7aab      	ldrb	r3, [r5, #10]
 8012978:	4313      	orrs	r3, r2
 801297a:	4418      	add	r0, r3
 801297c:	8c23      	ldrh	r3, [r4, #32]
 801297e:	4418      	add	r0, r3
 8012980:	8420      	strh	r0, [r4, #32]
 8012982:	4620      	mov	r0, r4
 8012984:	bd70      	pop	{r4, r5, r6, pc}

08012986 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8012986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298a:	2400      	movs	r4, #0
 801298c:	b085      	sub	sp, #20
 801298e:	4681      	mov	r9, r0
 8012990:	4688      	mov	r8, r1
 8012992:	4692      	mov	sl, r2
 8012994:	469b      	mov	fp, r3
 8012996:	4627      	mov	r7, r4
 8012998:	4625      	mov	r5, r4
 801299a:	4626      	mov	r6, r4
 801299c:	4554      	cmp	r4, sl
 801299e:	da2a      	bge.n	80129f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80129a0:	2300      	movs	r3, #0
 80129a2:	9303      	str	r3, [sp, #12]
 80129a4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80129a8:	429d      	cmp	r5, r3
 80129aa:	d004      	beq.n	80129b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80129ac:	f242 030b 	movw	r3, #8203	@ 0x200b
 80129b0:	429d      	cmp	r5, r3
 80129b2:	bf18      	it	ne
 80129b4:	462f      	movne	r7, r5
 80129b6:	ab03      	add	r3, sp, #12
 80129b8:	4642      	mov	r2, r8
 80129ba:	4659      	mov	r1, fp
 80129bc:	4648      	mov	r0, r9
 80129be:	f003 faa7 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80129c2:	4605      	mov	r5, r0
 80129c4:	b1b8      	cbz	r0, 80129f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80129c6:	280a      	cmp	r0, #10
 80129c8:	d015      	beq.n	80129f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80129ca:	9a03      	ldr	r2, [sp, #12]
 80129cc:	b18a      	cbz	r2, 80129f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80129ce:	7b50      	ldrb	r0, [r2, #13]
 80129d0:	4639      	mov	r1, r7
 80129d2:	7a93      	ldrb	r3, [r2, #10]
 80129d4:	0040      	lsls	r0, r0, #1
 80129d6:	8895      	ldrh	r5, [r2, #4]
 80129d8:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80129dc:	4303      	orrs	r3, r0
 80129de:	4640      	mov	r0, r8
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	f8d8 3000 	ldr.w	r3, [r8]
 80129e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129e8:	4798      	blx	r3
 80129ea:	9b01      	ldr	r3, [sp, #4]
 80129ec:	4418      	add	r0, r3
 80129ee:	4406      	add	r6, r0
 80129f0:	b2b6      	uxth	r6, r6
 80129f2:	3401      	adds	r4, #1
 80129f4:	e7d2      	b.n	801299c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80129f6:	4630      	mov	r0, r6
 80129f8:	b005      	add	sp, #20
 80129fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80129fe:	2a02      	cmp	r2, #2
 8012a00:	b530      	push	{r4, r5, lr}
 8012a02:	d011      	beq.n	8012a28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8012a04:	2a03      	cmp	r2, #3
 8012a06:	d01c      	beq.n	8012a42 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8012a08:	2a01      	cmp	r2, #1
 8012a0a:	d10c      	bne.n	8012a26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012a0c:	888b      	ldrh	r3, [r1, #4]
 8012a0e:	8801      	ldrh	r1, [r0, #0]
 8012a10:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012a14:	1a5b      	subs	r3, r3, r1
 8012a16:	8844      	ldrh	r4, [r0, #2]
 8012a18:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012a1c:	1a9b      	subs	r3, r3, r2
 8012a1e:	8004      	strh	r4, [r0, #0]
 8012a20:	8081      	strh	r1, [r0, #4]
 8012a22:	8043      	strh	r3, [r0, #2]
 8012a24:	80c2      	strh	r2, [r0, #6]
 8012a26:	bd30      	pop	{r4, r5, pc}
 8012a28:	88cb      	ldrh	r3, [r1, #6]
 8012a2a:	8842      	ldrh	r2, [r0, #2]
 8012a2c:	1a9b      	subs	r3, r3, r2
 8012a2e:	88c2      	ldrh	r2, [r0, #6]
 8012a30:	1a9b      	subs	r3, r3, r2
 8012a32:	888a      	ldrh	r2, [r1, #4]
 8012a34:	8801      	ldrh	r1, [r0, #0]
 8012a36:	8043      	strh	r3, [r0, #2]
 8012a38:	1a52      	subs	r2, r2, r1
 8012a3a:	8881      	ldrh	r1, [r0, #4]
 8012a3c:	1a52      	subs	r2, r2, r1
 8012a3e:	8002      	strh	r2, [r0, #0]
 8012a40:	e7f1      	b.n	8012a26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012a42:	88cb      	ldrh	r3, [r1, #6]
 8012a44:	8841      	ldrh	r1, [r0, #2]
 8012a46:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012a4a:	1a5b      	subs	r3, r3, r1
 8012a4c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012a50:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012a54:	1a9b      	subs	r3, r3, r2
 8012a56:	8045      	strh	r5, [r0, #2]
 8012a58:	8082      	strh	r2, [r0, #4]
 8012a5a:	8003      	strh	r3, [r0, #0]
 8012a5c:	80c4      	strh	r4, [r0, #6]
 8012a5e:	e7e2      	b.n	8012a26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08012a60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8012a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	b09f      	sub	sp, #124	@ 0x7c
 8012a66:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012a68:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a6a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012a6c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8012a6e:	8812      	ldrh	r2, [r2, #0]
 8012a70:	889b      	ldrh	r3, [r3, #4]
 8012a72:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012a74:	4413      	add	r3, r2
 8012a76:	900e      	str	r0, [sp, #56]	@ 0x38
 8012a78:	6828      	ldr	r0, [r5, #0]
 8012a7a:	b21b      	sxth	r3, r3
 8012a7c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8012a7e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8012a82:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a84:	6803      	ldr	r3, [r0, #0]
 8012a86:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8012a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a8c:	4798      	blx	r3
 8012a8e:	682b      	ldr	r3, [r5, #0]
 8012a90:	9013      	str	r0, [sp, #76]	@ 0x4c
 8012a92:	7b1a      	ldrb	r2, [r3, #12]
 8012a94:	7adb      	ldrb	r3, [r3, #11]
 8012a96:	9215      	str	r2, [sp, #84]	@ 0x54
 8012a98:	9316      	str	r3, [sp, #88]	@ 0x58
 8012a9a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8012a9e:	2c00      	cmp	r4, #0
 8012aa0:	d067      	beq.n	8012b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8012aa2:	7c2b      	ldrb	r3, [r5, #16]
 8012aa4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012aa6:	2b06      	cmp	r3, #6
 8012aa8:	bf14      	ite	ne
 8012aaa:	2301      	movne	r3, #1
 8012aac:	2302      	moveq	r3, #2
 8012aae:	4413      	add	r3, r2
 8012ab0:	f04f 0900 	mov.w	r9, #0
 8012ab4:	9310      	str	r3, [sp, #64]	@ 0x40
 8012ab6:	464c      	mov	r4, r9
 8012ab8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8012abc:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8012ac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ac2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	f280 808b 	bge.w	8012be0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8012aca:	2300      	movs	r3, #0
 8012acc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8012ad0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8012ad4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012ad8:	429c      	cmp	r4, r3
 8012ada:	d006      	beq.n	8012aea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8012adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ade:	f242 020b 	movw	r2, #8203	@ 0x200b
 8012ae2:	4294      	cmp	r4, r2
 8012ae4:	bf18      	it	ne
 8012ae6:	4623      	movne	r3, r4
 8012ae8:	930c      	str	r3, [sp, #48]	@ 0x30
 8012aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012aec:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8012aee:	682a      	ldr	r2, [r5, #0]
 8012af0:	428b      	cmp	r3, r1
 8012af2:	db40      	blt.n	8012b76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8012af4:	6813      	ldr	r3, [r2, #0]
 8012af6:	4610      	mov	r0, r2
 8012af8:	695b      	ldr	r3, [r3, #20]
 8012afa:	4798      	blx	r3
 8012afc:	4604      	mov	r4, r0
 8012afe:	6828      	ldr	r0, [r5, #0]
 8012b00:	aa1d      	add	r2, sp, #116	@ 0x74
 8012b02:	4621      	mov	r1, r4
 8012b04:	6803      	ldr	r3, [r0, #0]
 8012b06:	689f      	ldr	r7, [r3, #8]
 8012b08:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8012b0c:	47b8      	blx	r7
 8012b0e:	901c      	str	r0, [sp, #112]	@ 0x70
 8012b10:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012b14:	429c      	cmp	r4, r3
 8012b16:	f000 80eb 	beq.w	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012b1a:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012b1e:	429c      	cmp	r4, r3
 8012b20:	f000 80e6 	beq.w	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012b24:	2c00      	cmp	r4, #0
 8012b26:	f000 810d 	beq.w	8012d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8012b2a:	2c0a      	cmp	r4, #10
 8012b2c:	d05e      	beq.n	8012bec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012b2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012b30:	b36a      	cbz	r2, 8012b8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8012b32:	8894      	ldrh	r4, [r2, #4]
 8012b34:	f1bb 0f00 	cmp.w	fp, #0
 8012b38:	d03a      	beq.n	8012bb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8012b3a:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012b3e:	f1bb 0f01 	cmp.w	fp, #1
 8012b42:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8012b46:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8012b4a:	f892 900a 	ldrb.w	r9, [r2, #10]
 8012b4e:	ea49 0903 	orr.w	r9, r9, r3
 8012b52:	d133      	bne.n	8012bbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8012b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b56:	eba6 0609 	sub.w	r6, r6, r9
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d14d      	bne.n	8012bfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012b5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012b60:	eb09 0306 	add.w	r3, r9, r6
 8012b64:	4413      	add	r3, r2
 8012b66:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012b68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	da4e      	bge.n	8012c0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012b70:	e036      	b.n	8012be0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8012b72:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8012b74:	e79c      	b.n	8012ab0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8012b76:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8012b7a:	4659      	mov	r1, fp
 8012b7c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	ab1d      	add	r3, sp, #116	@ 0x74
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	ab1c      	add	r3, sp, #112	@ 0x70
 8012b86:	f003 fa0c 	bl	8015fa2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	e7c0      	b.n	8012b10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8012b8e:	6828      	ldr	r0, [r5, #0]
 8012b90:	6803      	ldr	r3, [r0, #0]
 8012b92:	691b      	ldr	r3, [r3, #16]
 8012b94:	4798      	blx	r3
 8012b96:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012b9a:	4298      	cmp	r0, r3
 8012b9c:	f000 80a8 	beq.w	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012ba0:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012ba4:	4298      	cmp	r0, r3
 8012ba6:	f000 80a3 	beq.w	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012baa:	f1bb 0f00 	cmp.w	fp, #0
 8012bae:	d100      	bne.n	8012bb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8012bb0:	444e      	add	r6, r9
 8012bb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012bb4:	2a00      	cmp	r2, #0
 8012bb6:	d1c0      	bne.n	8012b3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8012bb8:	4691      	mov	r9, r2
 8012bba:	e099      	b.n	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012bbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 80c2 	beq.w	8012d48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8012bc4:	f1bb 0f00 	cmp.w	fp, #0
 8012bc8:	d117      	bne.n	8012bfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012bca:	6828      	ldr	r0, [r5, #0]
 8012bcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012bce:	6803      	ldr	r3, [r0, #0]
 8012bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bd2:	4798      	blx	r3
 8012bd4:	4406      	add	r6, r0
 8012bd6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012bd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012bda:	1af3      	subs	r3, r6, r3
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	dd16      	ble.n	8012c0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012be0:	2c00      	cmp	r4, #0
 8012be2:	f000 80af 	beq.w	8012d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8012be6:	2c0a      	cmp	r4, #10
 8012be8:	f040 809d 	bne.w	8012d26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8012bec:	240a      	movs	r4, #10
 8012bee:	fab4 f084 	clz	r0, r4
 8012bf2:	0940      	lsrs	r0, r0, #5
 8012bf4:	b01f      	add	sp, #124	@ 0x7c
 8012bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfa:	6828      	ldr	r0, [r5, #0]
 8012bfc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012bfe:	6803      	ldr	r3, [r0, #0]
 8012c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c02:	4798      	blx	r3
 8012c04:	f1bb 0f01 	cmp.w	fp, #1
 8012c08:	eba6 0600 	sub.w	r6, r6, r0
 8012c0c:	d0a7      	beq.n	8012b5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8012c0e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012c10:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8012c12:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8012c16:	f9b3 8000 	ldrsh.w	r8, [r3]
 8012c1a:	7b43      	ldrb	r3, [r0, #13]
 8012c1c:	4431      	add	r1, r6
 8012c1e:	015b      	lsls	r3, r3, #5
 8012c20:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012c24:	7983      	ldrb	r3, [r0, #6]
 8012c26:	4313      	orrs	r3, r2
 8012c28:	440b      	add	r3, r1
 8012c2a:	4543      	cmp	r3, r8
 8012c2c:	db60      	blt.n	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012c2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c30:	4299      	cmp	r1, r3
 8012c32:	da5d      	bge.n	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012c34:	6828      	ldr	r0, [r5, #0]
 8012c36:	45b0      	cmp	r8, r6
 8012c38:	6803      	ldr	r3, [r0, #0]
 8012c3a:	bfcc      	ite	gt
 8012c3c:	eba8 0806 	subgt.w	r8, r8, r6
 8012c40:	f04f 0800 	movle.w	r8, #0
 8012c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c46:	bfc8      	it	gt
 8012c48:	fa1f f888 	uxthgt.w	r8, r8
 8012c4c:	4798      	blx	r3
 8012c4e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012c50:	7b53      	ldrb	r3, [r2, #13]
 8012c52:	00d9      	lsls	r1, r3, #3
 8012c54:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8012c58:	7a11      	ldrb	r1, [r2, #8]
 8012c5a:	4339      	orrs	r1, r7
 8012c5c:	065f      	lsls	r7, r3, #25
 8012c5e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012c60:	bf48      	it	mi
 8012c62:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8012c66:	4407      	add	r7, r0
 8012c68:	bf48      	it	mi
 8012c6a:	b209      	sxthmi	r1, r1
 8012c6c:	1a7f      	subs	r7, r7, r1
 8012c6e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8012c70:	b2bf      	uxth	r7, r7
 8012c72:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012c76:	fa0f fa87 	sxth.w	sl, r7
 8012c7a:	4551      	cmp	r1, sl
 8012c7c:	dd3c      	ble.n	8012cf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8012c7e:	011b      	lsls	r3, r3, #4
 8012c80:	79d0      	ldrb	r0, [r2, #7]
 8012c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c86:	4303      	orrs	r3, r0
 8012c88:	449a      	add	sl, r3
 8012c8a:	4551      	cmp	r1, sl
 8012c8c:	dc30      	bgt.n	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012c8e:	1bcf      	subs	r7, r1, r7
 8012c90:	468a      	mov	sl, r1
 8012c92:	b23f      	sxth	r7, r7
 8012c94:	9219      	str	r2, [sp, #100]	@ 0x64
 8012c96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012c98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012c9a:	6828      	ldr	r0, [r5, #0]
 8012c9c:	2a00      	cmp	r2, #0
 8012c9e:	d12d      	bne.n	8012cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8012ca0:	9318      	str	r3, [sp, #96]	@ 0x60
 8012ca2:	b2bf      	uxth	r7, r7
 8012ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ca6:	6819      	ldr	r1, [r3, #0]
 8012ca8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8012caa:	6801      	ldr	r1, [r0, #0]
 8012cac:	9314      	str	r3, [sp, #80]	@ 0x50
 8012cae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012cb0:	4788      	blx	r1
 8012cb2:	79a9      	ldrb	r1, [r5, #6]
 8012cb4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012cb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012cb8:	7ba9      	ldrb	r1, [r5, #14]
 8012cba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012cbc:	910a      	str	r1, [sp, #40]	@ 0x28
 8012cbe:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8012cc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8012cc4:	68a9      	ldr	r1, [r5, #8]
 8012cc6:	9306      	str	r3, [sp, #24]
 8012cc8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8012cca:	9205      	str	r2, [sp, #20]
 8012ccc:	9304      	str	r3, [sp, #16]
 8012cce:	f8cd a004 	str.w	sl, [sp, #4]
 8012cd2:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8012cd6:	44b0      	add	r8, r6
 8012cd8:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012cda:	fa0f f388 	sxth.w	r3, r8
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ce2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8012ce6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	47b8      	blx	r7
 8012cf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	930d      	str	r3, [sp, #52]	@ 0x34
 8012cf6:	e6e3      	b.n	8012ac0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8012cf8:	2700      	movs	r7, #0
 8012cfa:	e7cb      	b.n	8012c94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8012cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cfe:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8012d02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012d04:	f8dc 1000 	ldr.w	r1, [ip]
 8012d08:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8012d0c:	79aa      	ldrb	r2, [r5, #6]
 8012d0e:	9203      	str	r2, [sp, #12]
 8012d10:	7baa      	ldrb	r2, [r5, #14]
 8012d12:	9202      	str	r2, [sp, #8]
 8012d14:	68aa      	ldr	r2, [r5, #8]
 8012d16:	e9cd 0200 	strd	r0, r2, [sp]
 8012d1a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012d1c:	4660      	mov	r0, ip
 8012d1e:	688f      	ldr	r7, [r1, #8]
 8012d20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d22:	47b8      	blx	r7
 8012d24:	e7e4      	b.n	8012cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012d26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012d28:	3501      	adds	r5, #1
 8012d2a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8012d2c:	429d      	cmp	r5, r3
 8012d2e:	f6bf af5e 	bge.w	8012bee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012d32:	4659      	mov	r1, fp
 8012d34:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8012d36:	f7f1 fa7d 	bl	8004234 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	b110      	cbz	r0, 8012d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8012d3e:	280a      	cmp	r0, #10
 8012d40:	d1f2      	bne.n	8012d28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8012d42:	e753      	b.n	8012bec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012d44:	2400      	movs	r4, #0
 8012d46:	e752      	b.n	8012bee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012d48:	f1bb 0f00 	cmp.w	fp, #0
 8012d4c:	f43f af43 	beq.w	8012bd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8012d50:	e75d      	b.n	8012c0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08012d52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012d52:	b530      	push	{r4, r5, lr}
 8012d54:	8ac4      	ldrh	r4, [r0, #22]
 8012d56:	8b45      	ldrh	r5, [r0, #26]
 8012d58:	8343      	strh	r3, [r0, #26]
 8012d5a:	442c      	add	r4, r5
 8012d5c:	1ae4      	subs	r4, r4, r3
 8012d5e:	8b83      	ldrh	r3, [r0, #28]
 8012d60:	82c4      	strh	r4, [r0, #22]
 8012d62:	8b04      	ldrh	r4, [r0, #24]
 8012d64:	4422      	add	r2, r4
 8012d66:	440c      	add	r4, r1
 8012d68:	1a59      	subs	r1, r3, r1
 8012d6a:	83c2      	strh	r2, [r0, #30]
 8012d6c:	8304      	strh	r4, [r0, #24]
 8012d6e:	8381      	strh	r1, [r0, #28]
 8012d70:	bd30      	pop	{r4, r5, pc}

08012d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8012d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d76:	4604      	mov	r4, r0
 8012d78:	8a47      	ldrh	r7, [r0, #18]
 8012d7a:	68c0      	ldr	r0, [r0, #12]
 8012d7c:	b085      	sub	sp, #20
 8012d7e:	6803      	ldr	r3, [r0, #0]
 8012d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d82:	4798      	blx	r3
 8012d84:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8012d88:	7a63      	ldrb	r3, [r4, #9]
 8012d8a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	42b7      	cmp	r7, r6
 8012d92:	bfac      	ite	ge
 8012d94:	f04f 0900 	movge.w	r9, #0
 8012d98:	f04f 0901 	movlt.w	r9, #1
 8012d9c:	2b05      	cmp	r3, #5
 8012d9e:	d804      	bhi.n	8012daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8012da0:	e8df f003 	tbb	[pc, r3]
 8012da4:	470f0854 	.word	0x470f0854
 8012da8:	4c4c      	.short	0x4c4c
 8012daa:	2500      	movs	r5, #0
 8012dac:	46a9      	mov	r9, r5
 8012dae:	462e      	mov	r6, r5
 8012db0:	462f      	mov	r7, r5
 8012db2:	e00e      	b.n	8012dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012db4:	42b7      	cmp	r7, r6
 8012db6:	f04f 0500 	mov.w	r5, #0
 8012dba:	bfb4      	ite	lt
 8012dbc:	2600      	movlt	r6, #0
 8012dbe:	2601      	movge	r6, #1
 8012dc0:	e7f6      	b.n	8012db0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012dc2:	42b7      	cmp	r7, r6
 8012dc4:	464d      	mov	r5, r9
 8012dc6:	f04f 0900 	mov.w	r9, #0
 8012dca:	bfb4      	ite	lt
 8012dcc:	2600      	movlt	r6, #0
 8012dce:	2601      	movge	r6, #1
 8012dd0:	464f      	mov	r7, r9
 8012dd2:	f04f 0800 	mov.w	r8, #0
 8012dd6:	f8a4 8016 	strh.w	r8, [r4, #22]
 8012dda:	f8a4 8018 	strh.w	r8, [r4, #24]
 8012dde:	f8cd 8004 	str.w	r8, [sp, #4]
 8012de2:	2300      	movs	r3, #0
 8012de4:	9303      	str	r3, [sp, #12]
 8012de6:	8823      	ldrh	r3, [r4, #0]
 8012de8:	2b20      	cmp	r3, #32
 8012dea:	d033      	beq.n	8012e54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8012dec:	f242 010b 	movw	r1, #8203	@ 0x200b
 8012df0:	1a5a      	subs	r2, r3, r1
 8012df2:	f1d2 0a00 	rsbs	sl, r2, #0
 8012df6:	eb4a 0a02 	adc.w	sl, sl, r2
 8012dfa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d008      	beq.n	8012e14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012e02:	428b      	cmp	r3, r1
 8012e04:	9a01      	ldr	r2, [sp, #4]
 8012e06:	bf0e      	itee	eq
 8012e08:	f04f 0a01 	moveq.w	sl, #1
 8012e0c:	461a      	movne	r2, r3
 8012e0e:	f04f 0a00 	movne.w	sl, #0
 8012e12:	9201      	str	r2, [sp, #4]
 8012e14:	ab03      	add	r3, sp, #12
 8012e16:	68e2      	ldr	r2, [r4, #12]
 8012e18:	7a21      	ldrb	r1, [r4, #8]
 8012e1a:	6860      	ldr	r0, [r4, #4]
 8012e1c:	f003 f878 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012e20:	8020      	strh	r0, [r4, #0]
 8012e22:	b9d8      	cbnz	r0, 8012e5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8012e24:	8ba2      	ldrh	r2, [r4, #28]
 8012e26:	2300      	movs	r3, #0
 8012e28:	4611      	mov	r1, r2
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f7ff ff91 	bl	8012d52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012e30:	e06e      	b.n	8012f10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012e32:	2500      	movs	r5, #0
 8012e34:	2701      	movs	r7, #1
 8012e36:	46a9      	mov	r9, r5
 8012e38:	462e      	mov	r6, r5
 8012e3a:	e7ca      	b.n	8012dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012e3c:	42b7      	cmp	r7, r6
 8012e3e:	f04f 0500 	mov.w	r5, #0
 8012e42:	bfb4      	ite	lt
 8012e44:	2700      	movlt	r7, #0
 8012e46:	2701      	movge	r7, #1
 8012e48:	462e      	mov	r6, r5
 8012e4a:	e7c2      	b.n	8012dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012e4c:	2500      	movs	r5, #0
 8012e4e:	2601      	movs	r6, #1
 8012e50:	46a9      	mov	r9, r5
 8012e52:	e7ad      	b.n	8012db0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012e54:	9301      	str	r3, [sp, #4]
 8012e56:	f04f 0a01 	mov.w	sl, #1
 8012e5a:	e7db      	b.n	8012e14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012e5c:	8b63      	ldrh	r3, [r4, #26]
 8012e5e:	280a      	cmp	r0, #10
 8012e60:	f103 0301 	add.w	r3, r3, #1
 8012e64:	8363      	strh	r3, [r4, #26]
 8012e66:	d0dd      	beq.n	8012e24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8012e68:	9a03      	ldr	r2, [sp, #12]
 8012e6a:	bb62      	cbnz	r2, 8012ec6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8012e6c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012e70:	4298      	cmp	r0, r3
 8012e72:	d003      	beq.n	8012e7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012e74:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012e78:	4298      	cmp	r0, r3
 8012e7a:	d1b2      	bne.n	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012e7c:	8823      	ldrh	r3, [r4, #0]
 8012e7e:	8ba1      	ldrh	r1, [r4, #28]
 8012e80:	2b20      	cmp	r3, #32
 8012e82:	d003      	beq.n	8012e8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8012e84:	f242 000b 	movw	r0, #8203	@ 0x200b
 8012e88:	4283      	cmp	r3, r0
 8012e8a:	d131      	bne.n	8012ef0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8012e8c:	f1ba 0f00 	cmp.w	sl, #0
 8012e90:	bf0a      	itet	eq
 8012e92:	4688      	moveq	r8, r1
 8012e94:	4650      	movne	r0, sl
 8012e96:	2001      	moveq	r0, #1
 8012e98:	440a      	add	r2, r1
 8012e9a:	8b23      	ldrh	r3, [r4, #24]
 8012e9c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012ea0:	b292      	uxth	r2, r2
 8012ea2:	83a2      	strh	r2, [r4, #28]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	f1b9 0f00 	cmp.w	r9, #0
 8012eaa:	d102      	bne.n	8012eb2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8012eac:	2d00      	cmp	r5, #0
 8012eae:	d042      	beq.n	8012f36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8012eb0:	b300      	cbz	r0, 8012ef4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8012eb2:	8c21      	ldrh	r1, [r4, #32]
 8012eb4:	4419      	add	r1, r3
 8012eb6:	458c      	cmp	ip, r1
 8012eb8:	da37      	bge.n	8012f2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012eba:	8ae1      	ldrh	r1, [r4, #22]
 8012ebc:	2900      	cmp	r1, #0
 8012ebe:	d034      	beq.n	8012f2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012ec0:	4563      	cmp	r3, ip
 8012ec2:	dd8e      	ble.n	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012ec4:	e01d      	b.n	8012f02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8012ec6:	8893      	ldrh	r3, [r2, #4]
 8012ec8:	9901      	ldr	r1, [sp, #4]
 8012eca:	8023      	strh	r3, [r4, #0]
 8012ecc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8012ed0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012ed4:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8012ed8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8012edc:	ea4b 0b00 	orr.w	fp, fp, r0
 8012ee0:	68e0      	ldr	r0, [r4, #12]
 8012ee2:	6803      	ldr	r3, [r0, #0]
 8012ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ee6:	4798      	blx	r3
 8012ee8:	eb0b 0200 	add.w	r2, fp, r0
 8012eec:	b292      	uxth	r2, r2
 8012eee:	e7c5      	b.n	8012e7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	e7d1      	b.n	8012e98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8012ef4:	4563      	cmp	r3, ip
 8012ef6:	f77f af74 	ble.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012efa:	8ae3      	ldrh	r3, [r4, #22]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f43f af70 	beq.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f02:	2301      	movs	r3, #1
 8012f04:	8c22      	ldrh	r2, [r4, #32]
 8012f06:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8012f0a:	8be3      	ldrh	r3, [r4, #30]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	83e3      	strh	r3, [r4, #30]
 8012f10:	68e0      	ldr	r0, [r4, #12]
 8012f12:	6803      	ldr	r3, [r0, #0]
 8012f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f16:	4798      	blx	r3
 8012f18:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8012f1c:	4418      	add	r0, r3
 8012f1e:	8a63      	ldrh	r3, [r4, #18]
 8012f20:	1a18      	subs	r0, r3, r0
 8012f22:	8260      	strh	r0, [r4, #18]
 8012f24:	b005      	add	sp, #20
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f7ff ff0f 	bl	8012d52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012f34:	e755      	b.n	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f36:	4563      	cmp	r3, ip
 8012f38:	dd14      	ble.n	8012f64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8012f3a:	b117      	cbz	r7, 8012f42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	460a      	mov	r2, r1
 8012f40:	e772      	b.n	8012e28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8012f42:	2e00      	cmp	r6, #0
 8012f44:	f43f af4d 	beq.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	f47f af4a 	bne.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f4e:	f1ba 0f00 	cmp.w	sl, #0
 8012f52:	d002      	beq.n	8012f5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8012f54:	2301      	movs	r3, #1
 8012f56:	4642      	mov	r2, r8
 8012f58:	e767      	b.n	8012e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8012f5a:	8ae3      	ldrh	r3, [r4, #22]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f43f af40 	beq.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f62:	e7d5      	b.n	8012f10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	f47f af3c 	bne.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f6a:	f1ba 0f00 	cmp.w	sl, #0
 8012f6e:	f43f af38 	beq.w	8012de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012f72:	2301      	movs	r3, #1
 8012f74:	4642      	mov	r2, r8
 8012f76:	e7da      	b.n	8012f2e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08012f78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	b08f      	sub	sp, #60	@ 0x3c
 8012f7e:	4617      	mov	r7, r2
 8012f80:	461c      	mov	r4, r3
 8012f82:	460e      	mov	r6, r1
 8012f84:	b1d1      	cbz	r1, 8012fbc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4620      	mov	r0, r4
 8012f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f8c:	4798      	blx	r3
 8012f8e:	4240      	negs	r0, r0
 8012f90:	9603      	str	r6, [sp, #12]
 8012f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012f96:	b200      	sxth	r0, r0
 8012f98:	9700      	str	r7, [sp, #0]
 8012f9a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8012f9e:	4629      	mov	r1, r5
 8012fa0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8012fa4:	2401      	movs	r4, #1
 8012fa6:	a805      	add	r0, sp, #20
 8012fa8:	f7ff fcaa 	bl	8012900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012fac:	a805      	add	r0, sp, #20
 8012fae:	f7ff fee0 	bl	8012d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012fb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012fb6:	b163      	cbz	r3, 8012fd2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8012fb8:	3401      	adds	r4, #1
 8012fba:	e7f7      	b.n	8012fac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8012fbc:	2401      	movs	r4, #1
 8012fbe:	f003 f873 	bl	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012fc2:	280a      	cmp	r0, #10
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	bf08      	it	eq
 8012fc8:	3401      	addeq	r4, #1
 8012fca:	f003 f86d 	bl	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	d1f7      	bne.n	8012fc2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8012fd2:	b2a0      	uxth	r0, r4
 8012fd4:	b00f      	add	sp, #60	@ 0x3c
 8012fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fdc:	b0e3      	sub	sp, #396	@ 0x18c
 8012fde:	461c      	mov	r4, r3
 8012fe0:	4683      	mov	fp, r0
 8012fe2:	4688      	mov	r8, r1
 8012fe4:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	f000 8112 	beq.w	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012fec:	6823      	ldr	r3, [r4, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	f000 810e 	beq.w	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012ff4:	7ba3      	ldrb	r3, [r4, #14]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	f000 810a 	beq.w	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012ffc:	ad0a      	add	r5, sp, #40	@ 0x28
 8012ffe:	6810      	ldr	r0, [r2, #0]
 8013000:	6851      	ldr	r1, [r2, #4]
 8013002:	462b      	mov	r3, r5
 8013004:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8013008:	c303      	stmia	r3!, {r0, r1}
 801300a:	2100      	movs	r1, #0
 801300c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013010:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013014:	4628      	mov	r0, r5
 8013016:	910c      	str	r1, [sp, #48]	@ 0x30
 8013018:	a90c      	add	r1, sp, #48	@ 0x30
 801301a:	79a2      	ldrb	r2, [r4, #6]
 801301c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013020:	f7ff fced 	bl	80129fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013024:	a90c      	add	r1, sp, #48	@ 0x30
 8013026:	79a2      	ldrb	r2, [r4, #6]
 8013028:	4608      	mov	r0, r1
 801302a:	f7ff fce8 	bl	80129fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801302e:	a817      	add	r0, sp, #92	@ 0x5c
 8013030:	f002 fc0e 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 8013034:	6820      	ldr	r0, [r4, #0]
 8013036:	6803      	ldr	r3, [r0, #0]
 8013038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801303a:	4798      	blx	r3
 801303c:	4606      	mov	r6, r0
 801303e:	6820      	ldr	r0, [r4, #0]
 8013040:	6803      	ldr	r3, [r0, #0]
 8013042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013044:	4798      	blx	r3
 8013046:	4633      	mov	r3, r6
 8013048:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801304a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801304c:	9000      	str	r0, [sp, #0]
 801304e:	a817      	add	r0, sp, #92	@ 0x5c
 8013050:	f002 fc59 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013054:	6820      	ldr	r0, [r4, #0]
 8013056:	f894 a004 	ldrb.w	sl, [r4, #4]
 801305a:	6803      	ldr	r3, [r0, #0]
 801305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801305e:	4798      	blx	r3
 8013060:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	4607      	mov	r7, r0
 8013068:	4406      	add	r6, r0
 801306a:	a830      	add	r0, sp, #192	@ 0xc0
 801306c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8013070:	f002 fbee 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 8013074:	7c23      	ldrb	r3, [r4, #16]
 8013076:	b17b      	cbz	r3, 8013098 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013078:	6820      	ldr	r0, [r4, #0]
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801307e:	4798      	blx	r3
 8013080:	9009      	str	r0, [sp, #36]	@ 0x24
 8013082:	6820      	ldr	r0, [r4, #0]
 8013084:	6802      	ldr	r2, [r0, #0]
 8013086:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013088:	4790      	blx	r2
 801308a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801308c:	9000      	str	r0, [sp, #0]
 801308e:	a830      	add	r0, sp, #192	@ 0xc0
 8013090:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013092:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013094:	f002 fc37 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013098:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801309c:	a80e      	add	r0, sp, #56	@ 0x38
 801309e:	7be2      	ldrb	r2, [r4, #15]
 80130a0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80130a4:	1a8a      	subs	r2, r1, r2
 80130a6:	7c21      	ldrb	r1, [r4, #16]
 80130a8:	9103      	str	r1, [sp, #12]
 80130aa:	b292      	uxth	r2, r2
 80130ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80130b0:	9102      	str	r1, [sp, #8]
 80130b2:	6821      	ldr	r1, [r4, #0]
 80130b4:	9101      	str	r1, [sp, #4]
 80130b6:	7961      	ldrb	r1, [r4, #5]
 80130b8:	9100      	str	r1, [sp, #0]
 80130ba:	a930      	add	r1, sp, #192	@ 0xc0
 80130bc:	f7ff fc20 	bl	8012900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80130c0:	2e00      	cmp	r6, #0
 80130c2:	dc5b      	bgt.n	801317c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80130c4:	af17      	add	r7, sp, #92	@ 0x5c
 80130c6:	f04f 0900 	mov.w	r9, #0
 80130ca:	7c23      	ldrb	r3, [r4, #16]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f000 80b1 	beq.w	8013234 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80130d2:	a80e      	add	r0, sp, #56	@ 0x38
 80130d4:	f7ff fe4d 	bl	8012d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80130d8:	f1ba 0f00 	cmp.w	sl, #0
 80130dc:	f000 80a5 	beq.w	801322a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80130e0:	7c23      	ldrb	r3, [r4, #16]
 80130e2:	2264      	movs	r2, #100	@ 0x64
 80130e4:	4639      	mov	r1, r7
 80130e6:	a849      	add	r0, sp, #292	@ 0x124
 80130e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80130ea:	f00f fcea 	bl	8022ac2 <memcpy>
 80130ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f000 80a7 	beq.w	8013244 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80130f6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80130fa:	7922      	ldrb	r2, [r4, #4]
 80130fc:	2a01      	cmp	r2, #1
 80130fe:	f040 808a 	bne.w	8013216 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8013102:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8013106:	1ac0      	subs	r0, r0, r3
 8013108:	2302      	movs	r3, #2
 801310a:	fb90 f0f3 	sdiv	r0, r0, r3
 801310e:	b200      	sxth	r0, r0
 8013110:	7c23      	ldrb	r3, [r4, #16]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 808b 	beq.w	801322e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8013118:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801311c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8013120:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013124:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8013128:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801312c:	2100      	movs	r1, #0
 801312e:	4410      	add	r0, r2
 8013130:	4642      	mov	r2, r8
 8013132:	b200      	sxth	r0, r0
 8013134:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8013138:	9000      	str	r0, [sp, #0]
 801313a:	4658      	mov	r0, fp
 801313c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8013140:	f7ff fc8e 	bl	8012a60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013144:	2800      	cmp	r0, #0
 8013146:	d163      	bne.n	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013148:	b2b2      	uxth	r2, r6
 801314a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801314e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013152:	4413      	add	r3, r2
 8013154:	1a8a      	subs	r2, r1, r2
 8013156:	b21b      	sxth	r3, r3
 8013158:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801315c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8013160:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013164:	2a00      	cmp	r2, #0
 8013166:	d153      	bne.n	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013168:	6822      	ldr	r2, [r4, #0]
 801316a:	8869      	ldrh	r1, [r5, #2]
 801316c:	7a12      	ldrb	r2, [r2, #8]
 801316e:	1a9b      	subs	r3, r3, r2
 8013170:	88ea      	ldrh	r2, [r5, #6]
 8013172:	440a      	add	r2, r1
 8013174:	b212      	sxth	r2, r2
 8013176:	4293      	cmp	r3, r2
 8013178:	dda7      	ble.n	80130ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801317a:	e049      	b.n	8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801317c:	7c23      	ldrb	r3, [r4, #16]
 801317e:	444f      	add	r7, r9
 8013180:	b1c3      	cbz	r3, 80131b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8013182:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8013186:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801318a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801318e:	443b      	add	r3, r7
 8013190:	4293      	cmp	r3, r2
 8013192:	da97      	bge.n	80130c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013194:	a80e      	add	r0, sp, #56	@ 0x38
 8013196:	f7ff fdec 	bl	8012d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801319a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801319e:	3b01      	subs	r3, #1
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	454b      	cmp	r3, r9
 80131a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80131a6:	d021      	beq.n	80131ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80131a8:	7961      	ldrb	r1, [r4, #5]
 80131aa:	a817      	add	r0, sp, #92	@ 0x5c
 80131ac:	f7f1 f842 	bl	8004234 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80131b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131b2:	e7f4      	b.n	801319e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80131b4:	fa1f f986 	uxth.w	r9, r6
 80131b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80131bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80131c0:	443b      	add	r3, r7
 80131c2:	4293      	cmp	r3, r2
 80131c4:	f6bf af7e 	bge.w	80130c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80131c8:	a817      	add	r0, sp, #92	@ 0x5c
 80131ca:	f002 ff6d 	bl	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80131ce:	b1f8      	cbz	r0, 8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80131d0:	280a      	cmp	r0, #10
 80131d2:	d1f1      	bne.n	80131b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80131d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80131d8:	444b      	add	r3, r9
 80131da:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80131de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80131e2:	eba3 0309 	sub.w	r3, r3, r9
 80131e6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80131ea:	e7e5      	b.n	80131b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80131ec:	b2b3      	uxth	r3, r6
 80131ee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80131f2:	441a      	add	r2, r3
 80131f4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80131f8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013202:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013206:	b11b      	cbz	r3, 8013210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013208:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801320c:	2b00      	cmp	r3, #0
 801320e:	d0ba      	beq.n	8013186 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8013210:	b063      	add	sp, #396	@ 0x18c
 8013212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	2a02      	cmp	r2, #2
 8013218:	d105      	bne.n	8013226 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801321a:	7be2      	ldrb	r2, [r4, #15]
 801321c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013220:	1a80      	subs	r0, r0, r2
 8013222:	1ac0      	subs	r0, r0, r3
 8013224:	e773      	b.n	801310e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8013226:	2000      	movs	r0, #0
 8013228:	e772      	b.n	8013110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801322a:	7be0      	ldrb	r0, [r4, #15]
 801322c:	e770      	b.n	8013110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801322e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013232:	e773      	b.n	801311c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8013234:	f1ba 0f00 	cmp.w	sl, #0
 8013238:	d0f7      	beq.n	801322a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801323a:	2264      	movs	r2, #100	@ 0x64
 801323c:	4639      	mov	r1, r7
 801323e:	a849      	add	r0, sp, #292	@ 0x124
 8013240:	f00f fc3f 	bl	8022ac2 <memcpy>
 8013244:	2300      	movs	r3, #0
 8013246:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801324a:	6821      	ldr	r1, [r4, #0]
 801324c:	a849      	add	r0, sp, #292	@ 0x124
 801324e:	f7ff fb9a 	bl	8012986 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013252:	b203      	sxth	r3, r0
 8013254:	e751      	b.n	80130fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08013256 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013256:	2b03      	cmp	r3, #3
 8013258:	d818      	bhi.n	801328c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801325a:	e8df f003 	tbb	[pc, r3]
 801325e:	0602      	.short	0x0602
 8013260:	130d      	.short	0x130d
 8013262:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013266:	1850      	adds	r0, r2, r1
 8013268:	4770      	bx	lr
 801326a:	8803      	ldrh	r3, [r0, #0]
 801326c:	8880      	ldrh	r0, [r0, #4]
 801326e:	4418      	add	r0, r3
 8013270:	b200      	sxth	r0, r0
 8013272:	1a80      	subs	r0, r0, r2
 8013274:	3801      	subs	r0, #1
 8013276:	4770      	bx	lr
 8013278:	8803      	ldrh	r3, [r0, #0]
 801327a:	8880      	ldrh	r0, [r0, #4]
 801327c:	4418      	add	r0, r3
 801327e:	b200      	sxth	r0, r0
 8013280:	1a40      	subs	r0, r0, r1
 8013282:	e7f7      	b.n	8013274 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013284:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013288:	4410      	add	r0, r2
 801328a:	4770      	bx	lr
 801328c:	2000      	movs	r0, #0
 801328e:	4770      	bx	lr

08013290 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013290:	2b03      	cmp	r3, #3
 8013292:	d817      	bhi.n	80132c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013294:	e8df f003 	tbb	[pc, r3]
 8013298:	10090602 	.word	0x10090602
 801329c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80132a0:	1850      	adds	r0, r2, r1
 80132a2:	4770      	bx	lr
 80132a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80132a8:	e7fa      	b.n	80132a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80132aa:	8843      	ldrh	r3, [r0, #2]
 80132ac:	88c0      	ldrh	r0, [r0, #6]
 80132ae:	4418      	add	r0, r3
 80132b0:	b200      	sxth	r0, r0
 80132b2:	1a80      	subs	r0, r0, r2
 80132b4:	3801      	subs	r0, #1
 80132b6:	4770      	bx	lr
 80132b8:	8843      	ldrh	r3, [r0, #2]
 80132ba:	88c0      	ldrh	r0, [r0, #6]
 80132bc:	4418      	add	r0, r3
 80132be:	b200      	sxth	r0, r0
 80132c0:	1a40      	subs	r0, r0, r1
 80132c2:	e7f7      	b.n	80132b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80132c4:	2000      	movs	r0, #0
 80132c6:	4770      	bx	lr

080132c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80132c8:	4b01      	ldr	r3, [pc, #4]	@ (80132d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	4770      	bx	lr
 80132d0:	240284b4 	.word	0x240284b4

080132d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80132d4:	4603      	mov	r3, r0
 80132d6:	b1c8      	cbz	r0, 801330c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80132d8:	0c02      	lsrs	r2, r0, #16
 80132da:	0412      	lsls	r2, r2, #16
 80132dc:	b9a2      	cbnz	r2, 8013308 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80132de:	0403      	lsls	r3, r0, #16
 80132e0:	2010      	movs	r0, #16
 80132e2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80132e6:	bf04      	itt	eq
 80132e8:	021b      	lsleq	r3, r3, #8
 80132ea:	3008      	addeq	r0, #8
 80132ec:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80132f0:	bf04      	itt	eq
 80132f2:	011b      	lsleq	r3, r3, #4
 80132f4:	3004      	addeq	r0, #4
 80132f6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80132fa:	bf04      	itt	eq
 80132fc:	009b      	lsleq	r3, r3, #2
 80132fe:	3002      	addeq	r0, #2
 8013300:	2b00      	cmp	r3, #0
 8013302:	db04      	blt.n	801330e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013304:	3001      	adds	r0, #1
 8013306:	4770      	bx	lr
 8013308:	2000      	movs	r0, #0
 801330a:	e7ea      	b.n	80132e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801330c:	2020      	movs	r0, #32
 801330e:	4770      	bx	lr

08013310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	b087      	sub	sp, #28
 8013316:	460d      	mov	r5, r1
 8013318:	4616      	mov	r6, r2
 801331a:	4698      	mov	r8, r3
 801331c:	4601      	mov	r1, r0
 801331e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8013322:	b120      	cbz	r0, 801332e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013324:	b11a      	cbz	r2, 801332e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8013326:	2d1f      	cmp	r5, #31
 8013328:	d801      	bhi.n	801332e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801332a:	2b1f      	cmp	r3, #31
 801332c:	d904      	bls.n	8013338 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801332e:	2000      	movs	r0, #0
 8013330:	6038      	str	r0, [r7, #0]
 8013332:	b007      	add	sp, #28
 8013334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013338:	b97d      	cbnz	r5, 801335a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801333a:	b143      	cbz	r3, 801334e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801333c:	4602      	mov	r2, r0
 801333e:	462b      	mov	r3, r5
 8013340:	4641      	mov	r1, r8
 8013342:	4630      	mov	r0, r6
 8013344:	e9cd 4700 	strd	r4, r7, [sp]
 8013348:	f7ff ffe2 	bl	8013310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801334c:	e7f1      	b.n	8013332 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801334e:	f04f 33ff 	mov.w	r3, #4294967295
 8013352:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013356:	603b      	str	r3, [r7, #0]
 8013358:	e7eb      	b.n	8013332 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801335a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801335e:	d106      	bne.n	801336e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8013360:	4346      	muls	r6, r0
 8013362:	fbb6 f0f4 	udiv	r0, r6, r4
 8013366:	fb04 6610 	mls	r6, r4, r0, r6
 801336a:	603e      	str	r6, [r7, #0]
 801336c:	e7e1      	b.n	8013332 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801336e:	2201      	movs	r2, #1
 8013370:	fa00 fb05 	lsl.w	fp, r0, r5
 8013374:	40aa      	lsls	r2, r5
 8013376:	fbbb f9f4 	udiv	r9, fp, r4
 801337a:	3a01      	subs	r2, #1
 801337c:	fb0a f309 	mul.w	r3, sl, r9
 8013380:	fb04 b919 	mls	r9, r4, r9, fp
 8013384:	4016      	ands	r6, r2
 8013386:	9303      	str	r3, [sp, #12]
 8013388:	4630      	mov	r0, r6
 801338a:	f7ff ffa3 	bl	80132d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801338e:	462b      	mov	r3, r5
 8013390:	460a      	mov	r2, r1
 8013392:	4601      	mov	r1, r0
 8013394:	4630      	mov	r0, r6
 8013396:	e9cd 4700 	strd	r4, r7, [sp]
 801339a:	f7ff ffb9 	bl	8013310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801339e:	4606      	mov	r6, r0
 80133a0:	4648      	mov	r0, r9
 80133a2:	eb05 0108 	add.w	r1, r5, r8
 80133a6:	f7ff ff95 	bl	80132d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80133aa:	ab05      	add	r3, sp, #20
 80133ac:	464a      	mov	r2, r9
 80133ae:	e9cd 4300 	strd	r4, r3, [sp]
 80133b2:	4603      	mov	r3, r0
 80133b4:	4650      	mov	r0, sl
 80133b6:	f7ff ffab 	bl	8013310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	9a05      	ldr	r2, [sp, #20]
 80133be:	9b03      	ldr	r3, [sp, #12]
 80133c0:	4411      	add	r1, r2
 80133c2:	fbb1 f2f4 	udiv	r2, r1, r4
 80133c6:	18d3      	adds	r3, r2, r3
 80133c8:	fb04 1412 	mls	r4, r4, r2, r1
 80133cc:	441e      	add	r6, r3
 80133ce:	603c      	str	r4, [r7, #0]
 80133d0:	4430      	add	r0, r6
 80133d2:	e7ae      	b.n	8013332 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080133d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80133d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133d8:	b085      	sub	sp, #20
 80133da:	f1b0 0900 	subs.w	r9, r0, #0
 80133de:	461d      	mov	r5, r3
 80133e0:	4617      	mov	r7, r2
 80133e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80133e4:	bfbb      	ittet	lt
 80133e6:	f1c9 0900 	rsblt	r9, r9, #0
 80133ea:	f04f 36ff 	movlt.w	r6, #4294967295
 80133ee:	2601      	movge	r6, #1
 80133f0:	6823      	ldrlt	r3, [r4, #0]
 80133f2:	bfbc      	itt	lt
 80133f4:	425b      	neglt	r3, r3
 80133f6:	6023      	strlt	r3, [r4, #0]
 80133f8:	2a00      	cmp	r2, #0
 80133fa:	da04      	bge.n	8013406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80133fc:	6823      	ldr	r3, [r4, #0]
 80133fe:	4257      	negs	r7, r2
 8013400:	4276      	negs	r6, r6
 8013402:	425b      	negs	r3, r3
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	2d00      	cmp	r5, #0
 8013408:	4638      	mov	r0, r7
 801340a:	bfba      	itte	lt
 801340c:	426d      	neglt	r5, r5
 801340e:	f04f 38ff 	movlt.w	r8, #4294967295
 8013412:	f04f 0801 	movge.w	r8, #1
 8013416:	f7ff ff5d 	bl	80132d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801341a:	ab03      	add	r3, sp, #12
 801341c:	463a      	mov	r2, r7
 801341e:	e9cd 5300 	strd	r5, r3, [sp]
 8013422:	4603      	mov	r3, r0
 8013424:	4648      	mov	r0, r9
 8013426:	f7ff ff73 	bl	8013310 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801342a:	6823      	ldr	r3, [r4, #0]
 801342c:	9a03      	ldr	r2, [sp, #12]
 801342e:	4546      	cmp	r6, r8
 8013430:	441a      	add	r2, r3
 8013432:	fb92 f3f5 	sdiv	r3, r2, r5
 8013436:	4418      	add	r0, r3
 8013438:	fb05 2313 	mls	r3, r5, r3, r2
 801343c:	bf18      	it	ne
 801343e:	4240      	negne	r0, r0
 8013440:	1c72      	adds	r2, r6, #1
 8013442:	6023      	str	r3, [r4, #0]
 8013444:	d105      	bne.n	8013452 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013446:	2b00      	cmp	r3, #0
 8013448:	f1c3 0200 	rsb	r2, r3, #0
 801344c:	db0b      	blt.n	8013466 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801344e:	6022      	str	r2, [r4, #0]
 8013450:	e006      	b.n	8013460 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013452:	2e01      	cmp	r6, #1
 8013454:	d104      	bne.n	8013460 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013456:	2b00      	cmp	r3, #0
 8013458:	da02      	bge.n	8013460 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801345a:	442b      	add	r3, r5
 801345c:	3801      	subs	r0, #1
 801345e:	6023      	str	r3, [r4, #0]
 8013460:	b005      	add	sp, #20
 8013462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013466:	3801      	subs	r0, #1
 8013468:	1b52      	subs	r2, r2, r5
 801346a:	e7f0      	b.n	801344e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801346c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801346c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013470:	4c1c      	ldr	r4, [pc, #112]	@ (80134e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013472:	4605      	mov	r5, r0
 8013474:	6807      	ldr	r7, [r0, #0]
 8013476:	69a3      	ldr	r3, [r4, #24]
 8013478:	b92b      	cbnz	r3, 8013486 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801347a:	6840      	ldr	r0, [r0, #4]
 801347c:	e9c5 7000 	strd	r7, r0, [r5]
 8013480:	b004      	add	sp, #16
 8013482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013486:	f04f 0802 	mov.w	r8, #2
 801348a:	68a2      	ldr	r2, [r4, #8]
 801348c:	ae04      	add	r6, sp, #16
 801348e:	6820      	ldr	r0, [r4, #0]
 8013490:	fb93 f1f8 	sdiv	r1, r3, r8
 8013494:	440a      	add	r2, r1
 8013496:	69e1      	ldr	r1, [r4, #28]
 8013498:	f846 2d04 	str.w	r2, [r6, #-4]!
 801349c:	463a      	mov	r2, r7
 801349e:	9600      	str	r6, [sp, #0]
 80134a0:	f7ff ff98 	bl	80133d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80134a4:	69a3      	ldr	r3, [r4, #24]
 80134a6:	4607      	mov	r7, r0
 80134a8:	686a      	ldr	r2, [r5, #4]
 80134aa:	6a21      	ldr	r1, [r4, #32]
 80134ac:	9600      	str	r6, [sp, #0]
 80134ae:	6860      	ldr	r0, [r4, #4]
 80134b0:	f7ff ff90 	bl	80133d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80134b4:	69a3      	ldr	r3, [r4, #24]
 80134b6:	6962      	ldr	r2, [r4, #20]
 80134b8:	4407      	add	r7, r0
 80134ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80134bc:	9600      	str	r6, [sp, #0]
 80134be:	68e0      	ldr	r0, [r4, #12]
 80134c0:	fb93 f8f8 	sdiv	r8, r3, r8
 80134c4:	4442      	add	r2, r8
 80134c6:	9203      	str	r2, [sp, #12]
 80134c8:	682a      	ldr	r2, [r5, #0]
 80134ca:	f7ff ff83 	bl	80133d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80134ce:	4680      	mov	r8, r0
 80134d0:	9600      	str	r6, [sp, #0]
 80134d2:	69a3      	ldr	r3, [r4, #24]
 80134d4:	686a      	ldr	r2, [r5, #4]
 80134d6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80134d8:	6920      	ldr	r0, [r4, #16]
 80134da:	f7ff ff7b 	bl	80133d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80134de:	4440      	add	r0, r8
 80134e0:	e7cc      	b.n	801347c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80134e2:	bf00      	nop
 80134e4:	240284b8 	.word	0x240284b8

080134e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80134e8:	4b07      	ldr	r3, [pc, #28]	@ (8013508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d109      	bne.n	8013504 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80134f0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80134f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80134f8:	8003      	strh	r3, [r0, #0]
 80134fa:	4b04      	ldr	r3, [pc, #16]	@ (801350c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	3b01      	subs	r3, #1
 8013500:	1a9b      	subs	r3, r3, r2
 8013502:	800b      	strh	r3, [r1, #0]
 8013504:	4770      	bx	lr
 8013506:	bf00      	nop
 8013508:	2402849c 	.word	0x2402849c
 801350c:	24028498 	.word	0x24028498

08013510 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013510:	4b07      	ldr	r3, [pc, #28]	@ (8013530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013512:	b510      	push	{r4, lr}
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	2b01      	cmp	r3, #1
 8013518:	d108      	bne.n	801352c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801351a:	4b06      	ldr	r3, [pc, #24]	@ (8013534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801351c:	880c      	ldrh	r4, [r1, #0]
 801351e:	881b      	ldrh	r3, [r3, #0]
 8013520:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013524:	3b01      	subs	r3, #1
 8013526:	1b1b      	subs	r3, r3, r4
 8013528:	8003      	strh	r3, [r0, #0]
 801352a:	800a      	strh	r2, [r1, #0]
 801352c:	bd10      	pop	{r4, pc}
 801352e:	bf00      	nop
 8013530:	2402849c 	.word	0x2402849c
 8013534:	24028498 	.word	0x24028498

08013538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013538:	4b0a      	ldr	r3, [pc, #40]	@ (8013564 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801353a:	b510      	push	{r4, lr}
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d10e      	bne.n	8013560 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013542:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013546:	8843      	ldrh	r3, [r0, #2]
 8013548:	f9b0 4000 	ldrsh.w	r4, [r0]
 801354c:	18ca      	adds	r2, r1, r3
 801354e:	4b06      	ldr	r3, [pc, #24]	@ (8013568 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013550:	8044      	strh	r4, [r0, #2]
 8013552:	881b      	ldrh	r3, [r3, #0]
 8013554:	1a9b      	subs	r3, r3, r2
 8013556:	8003      	strh	r3, [r0, #0]
 8013558:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801355c:	8081      	strh	r1, [r0, #4]
 801355e:	80c3      	strh	r3, [r0, #6]
 8013560:	bd10      	pop	{r4, pc}
 8013562:	bf00      	nop
 8013564:	2402849c 	.word	0x2402849c
 8013568:	24028498 	.word	0x24028498

0801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801356c:	4b08      	ldr	r3, [pc, #32]	@ (8013590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d10c      	bne.n	801358e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013574:	8803      	ldrh	r3, [r0, #0]
 8013576:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801357a:	8842      	ldrh	r2, [r0, #2]
 801357c:	8002      	strh	r2, [r0, #0]
 801357e:	185a      	adds	r2, r3, r1
 8013580:	4b04      	ldr	r3, [pc, #16]	@ (8013594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013582:	881b      	ldrh	r3, [r3, #0]
 8013584:	1a9b      	subs	r3, r3, r2
 8013586:	8043      	strh	r3, [r0, #2]
 8013588:	88c3      	ldrh	r3, [r0, #6]
 801358a:	80c1      	strh	r1, [r0, #6]
 801358c:	8083      	strh	r3, [r0, #4]
 801358e:	4770      	bx	lr
 8013590:	2402849c 	.word	0x2402849c
 8013594:	24028498 	.word	0x24028498

08013598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013598:	4b07      	ldr	r3, [pc, #28]	@ (80135b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801359a:	b510      	push	{r4, lr}
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d108      	bne.n	80135b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80135a2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80135a6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80135aa:	8003      	strh	r3, [r0, #0]
 80135ac:	8893      	ldrh	r3, [r2, #4]
 80135ae:	3b01      	subs	r3, #1
 80135b0:	1b1b      	subs	r3, r3, r4
 80135b2:	800b      	strh	r3, [r1, #0]
 80135b4:	bd10      	pop	{r4, pc}
 80135b6:	bf00      	nop
 80135b8:	2402849c 	.word	0x2402849c

080135bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80135bc:	4b0b      	ldr	r3, [pc, #44]	@ (80135ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d111      	bne.n	80135e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80135c4:	680b      	ldr	r3, [r1, #0]
 80135c6:	ed90 7a00 	vldr	s14, [r0]
 80135ca:	6003      	str	r3, [r0, #0]
 80135cc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80135d0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80135f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80135d4:	ee07 3a90 	vmov	s15, r3
 80135d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80135e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135e4:	edc1 7a00 	vstr	s15, [r1]
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop
 80135ec:	2402849c 	.word	0x2402849c
 80135f0:	38d1b717 	.word	0x38d1b717

080135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80135f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013620 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80135f6:	460a      	mov	r2, r1
 80135f8:	b510      	push	{r4, lr}
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d10d      	bne.n	801361c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013600:	8881      	ldrh	r1, [r0, #4]
 8013602:	8803      	ldrh	r3, [r0, #0]
 8013604:	440b      	add	r3, r1
 8013606:	4601      	mov	r1, r0
 8013608:	3b01      	subs	r3, #1
 801360a:	f821 3b02 	strh.w	r3, [r1], #2
 801360e:	f7ff ffc3 	bl	8013598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013612:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013616:	88c2      	ldrh	r2, [r0, #6]
 8013618:	80c3      	strh	r3, [r0, #6]
 801361a:	8082      	strh	r2, [r0, #4]
 801361c:	bd10      	pop	{r4, pc}
 801361e:	bf00      	nop
 8013620:	2402849c 	.word	0x2402849c

08013624 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013624:	4b06      	ldr	r3, [pc, #24]	@ (8013640 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013626:	2100      	movs	r1, #0
 8013628:	f9b3 2000 	ldrsh.w	r2, [r3]
 801362c:	4b05      	ldr	r3, [pc, #20]	@ (8013644 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801362e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8013632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013636:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801363a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801363e:	4770      	bx	lr
 8013640:	24028498 	.word	0x24028498
 8013644:	2402849a 	.word	0x2402849a

08013648 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013648:	4b03      	ldr	r3, [pc, #12]	@ (8013658 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	b110      	cbz	r0, 8013654 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801364e:	6803      	ldr	r3, [r0, #0]
 8013650:	699b      	ldr	r3, [r3, #24]
 8013652:	4718      	bx	r3
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	240284e8 	.word	0x240284e8

0801365c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801365c:	4770      	bx	lr
	...

08013660 <_ZN8touchgfx11Application4drawEv>:
 8013660:	4b09      	ldr	r3, [pc, #36]	@ (8013688 <_ZN8touchgfx11Application4drawEv+0x28>)
 8013662:	b507      	push	{r0, r1, r2, lr}
 8013664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013668:	2100      	movs	r1, #0
 801366a:	4b08      	ldr	r3, [pc, #32]	@ (801368c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801366c:	9100      	str	r1, [sp, #0]
 801366e:	4669      	mov	r1, sp
 8013670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013674:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013678:	f8ad 3006 	strh.w	r3, [sp, #6]
 801367c:	6803      	ldr	r3, [r0, #0]
 801367e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013680:	4798      	blx	r3
 8013682:	b003      	add	sp, #12
 8013684:	f85d fb04 	ldr.w	pc, [sp], #4
 8013688:	24028498 	.word	0x24028498
 801368c:	2402849a 	.word	0x2402849a

08013690 <_ZN8touchgfx11Application10invalidateEv>:
 8013690:	4b09      	ldr	r3, [pc, #36]	@ (80136b8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013692:	b082      	sub	sp, #8
 8013694:	2100      	movs	r1, #0
 8013696:	f9b3 2000 	ldrsh.w	r2, [r3]
 801369a:	4b08      	ldr	r3, [pc, #32]	@ (80136bc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801369c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80136a0:	aa02      	add	r2, sp, #8
 80136a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136a6:	9100      	str	r1, [sp, #0]
 80136a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80136ac:	6803      	ldr	r3, [r0, #0]
 80136ae:	e912 0006 	ldmdb	r2, {r1, r2}
 80136b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136b4:	b002      	add	sp, #8
 80136b6:	4718      	bx	r3
 80136b8:	24028498 	.word	0x24028498
 80136bc:	2402849a 	.word	0x2402849a

080136c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80136c0:	4b03      	ldr	r3, [pc, #12]	@ (80136d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80136c2:	6818      	ldr	r0, [r3, #0]
 80136c4:	b110      	cbz	r0, 80136cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80136c6:	6803      	ldr	r3, [r0, #0]
 80136c8:	69db      	ldr	r3, [r3, #28]
 80136ca:	4718      	bx	r3
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop
 80136d0:	240284e8 	.word	0x240284e8

080136d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80136d4:	4b03      	ldr	r3, [pc, #12]	@ (80136e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80136d6:	6818      	ldr	r0, [r3, #0]
 80136d8:	b110      	cbz	r0, 80136e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80136da:	6803      	ldr	r3, [r0, #0]
 80136dc:	6a1b      	ldr	r3, [r3, #32]
 80136de:	4718      	bx	r3
 80136e0:	4770      	bx	lr
 80136e2:	bf00      	nop
 80136e4:	240284e8 	.word	0x240284e8

080136e8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80136e8:	2300      	movs	r3, #0
 80136ea:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80136ee:	4770      	bx	lr

080136f0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80136f0:	4b03      	ldr	r3, [pc, #12]	@ (8013700 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	b110      	cbz	r0, 80136fc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80136f6:	6803      	ldr	r3, [r0, #0]
 80136f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136fa:	4718      	bx	r3
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop
 8013700:	240284e8 	.word	0x240284e8

08013704 <_ZN8touchgfx11ApplicationD1Ev>:
 8013704:	4770      	bx	lr

08013706 <_ZN8touchgfx11ApplicationD0Ev>:
 8013706:	b510      	push	{r4, lr}
 8013708:	4604      	mov	r4, r0
 801370a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801370e:	f00e fae2 	bl	8021cd6 <_ZdlPvj>
 8013712:	4620      	mov	r0, r4
 8013714:	bd10      	pop	{r4, pc}

08013716 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013716:	b510      	push	{r4, lr}
 8013718:	f9b1 4000 	ldrsh.w	r4, [r1]
 801371c:	888a      	ldrh	r2, [r1, #4]
 801371e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013722:	4422      	add	r2, r4
 8013724:	b212      	sxth	r2, r2
 8013726:	4293      	cmp	r3, r2
 8013728:	da15      	bge.n	8013756 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801372a:	8882      	ldrh	r2, [r0, #4]
 801372c:	4413      	add	r3, r2
 801372e:	b21b      	sxth	r3, r3
 8013730:	429c      	cmp	r4, r3
 8013732:	da10      	bge.n	8013756 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013734:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013738:	88c9      	ldrh	r1, [r1, #6]
 801373a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801373e:	4419      	add	r1, r3
 8013740:	b209      	sxth	r1, r1
 8013742:	428a      	cmp	r2, r1
 8013744:	da07      	bge.n	8013756 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013746:	88c0      	ldrh	r0, [r0, #6]
 8013748:	4410      	add	r0, r2
 801374a:	b200      	sxth	r0, r0
 801374c:	4283      	cmp	r3, r0
 801374e:	bfac      	ite	ge
 8013750:	2000      	movge	r0, #0
 8013752:	2001      	movlt	r0, #1
 8013754:	bd10      	pop	{r4, pc}
 8013756:	2000      	movs	r0, #0
 8013758:	e7fc      	b.n	8013754 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801375a <_ZN8touchgfx4Rect10restrictToEss>:
 801375a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	b510      	push	{r4, lr}
 8013762:	da04      	bge.n	801376e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013764:	8884      	ldrh	r4, [r0, #4]
 8013766:	4423      	add	r3, r4
 8013768:	8083      	strh	r3, [r0, #4]
 801376a:	2300      	movs	r3, #0
 801376c:	8003      	strh	r3, [r0, #0]
 801376e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013772:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013776:	1b09      	subs	r1, r1, r4
 8013778:	428b      	cmp	r3, r1
 801377a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801377e:	bfc8      	it	gt
 8013780:	8081      	strhgt	r1, [r0, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	da04      	bge.n	8013790 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013786:	88c1      	ldrh	r1, [r0, #6]
 8013788:	440b      	add	r3, r1
 801378a:	80c3      	strh	r3, [r0, #6]
 801378c:	2300      	movs	r3, #0
 801378e:	8043      	strh	r3, [r0, #2]
 8013790:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013794:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013798:	1a52      	subs	r2, r2, r1
 801379a:	4293      	cmp	r3, r2
 801379c:	bfc8      	it	gt
 801379e:	80c2      	strhgt	r2, [r0, #6]
 80137a0:	bd10      	pop	{r4, pc}
	...

080137a4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80137a4:	4b10      	ldr	r3, [pc, #64]	@ (80137e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80137a6:	b510      	push	{r4, lr}
 80137a8:	460c      	mov	r4, r1
 80137aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137ae:	4b0f      	ldr	r3, [pc, #60]	@ (80137ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80137b0:	4620      	mov	r0, r4
 80137b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80137b6:	f7ff ffd0 	bl	801375a <_ZN8touchgfx4Rect10restrictToEss>
 80137ba:	4b0d      	ldr	r3, [pc, #52]	@ (80137f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80137bc:	6818      	ldr	r0, [r3, #0]
 80137be:	b190      	cbz	r0, 80137e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80137c0:	6803      	ldr	r3, [r0, #0]
 80137c2:	4621      	mov	r1, r4
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	4798      	blx	r3
 80137c8:	4b0a      	ldr	r3, [pc, #40]	@ (80137f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80137ca:	6818      	ldr	r0, [r3, #0]
 80137cc:	b118      	cbz	r0, 80137d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80137ce:	6803      	ldr	r3, [r0, #0]
 80137d0:	4621      	mov	r1, r4
 80137d2:	689b      	ldr	r3, [r3, #8]
 80137d4:	4798      	blx	r3
 80137d6:	4b08      	ldr	r3, [pc, #32]	@ (80137f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80137d8:	4621      	mov	r1, r4
 80137da:	6818      	ldr	r0, [r3, #0]
 80137dc:	6803      	ldr	r3, [r0, #0]
 80137de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137e2:	69db      	ldr	r3, [r3, #28]
 80137e4:	4718      	bx	r3
 80137e6:	bd10      	pop	{r4, pc}
 80137e8:	2402849a 	.word	0x2402849a
 80137ec:	24028498 	.word	0x24028498
 80137f0:	240284e8 	.word	0x240284e8
 80137f4:	240284e4 	.word	0x240284e4
 80137f8:	240284a4 	.word	0x240284a4

080137fc <_ZNK8touchgfx4Rect8includesERKS0_>:
 80137fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137fe:	4606      	mov	r6, r0
 8013800:	4608      	mov	r0, r1
 8013802:	460f      	mov	r7, r1
 8013804:	f7fa fa45 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013808:	b9e8      	cbnz	r0, 8013846 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801380a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801380e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013812:	42a5      	cmp	r5, r4
 8013814:	db17      	blt.n	8013846 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013816:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801381a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801381e:	429a      	cmp	r2, r3
 8013820:	db11      	blt.n	8013846 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013822:	88b9      	ldrh	r1, [r7, #4]
 8013824:	440d      	add	r5, r1
 8013826:	88b1      	ldrh	r1, [r6, #4]
 8013828:	440c      	add	r4, r1
 801382a:	b22d      	sxth	r5, r5
 801382c:	b224      	sxth	r4, r4
 801382e:	42a5      	cmp	r5, r4
 8013830:	dc09      	bgt.n	8013846 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013832:	88f8      	ldrh	r0, [r7, #6]
 8013834:	4410      	add	r0, r2
 8013836:	88f2      	ldrh	r2, [r6, #6]
 8013838:	4413      	add	r3, r2
 801383a:	b200      	sxth	r0, r0
 801383c:	b21b      	sxth	r3, r3
 801383e:	4298      	cmp	r0, r3
 8013840:	bfcc      	ite	gt
 8013842:	2000      	movgt	r0, #0
 8013844:	2001      	movle	r0, #1
 8013846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013848 <_ZN8touchgfx11Application11getInstanceEv>:
 8013848:	4b01      	ldr	r3, [pc, #4]	@ (8013850 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801384a:	6818      	ldr	r0, [r3, #0]
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop
 8013850:	240284f8 	.word	0x240284f8

08013854 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013854:	2300      	movs	r3, #0
 8013856:	b510      	push	{r4, lr}
 8013858:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801385c:	4604      	mov	r4, r0
 801385e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8013862:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8013866:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801386a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801386e:	429a      	cmp	r2, r3
 8013870:	d90e      	bls.n	8013890 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8013872:	18e2      	adds	r2, r4, r3
 8013874:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8013878:	b122      	cbz	r2, 8013884 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801387a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801387e:	6803      	ldr	r3, [r0, #0]
 8013880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013882:	4798      	blx	r3
 8013884:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8013888:	3301      	adds	r3, #1
 801388a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801388e:	e7ea      	b.n	8013866 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8013890:	bd10      	pop	{r4, pc}

08013892 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8013892:	2300      	movs	r3, #0
 8013894:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8013898:	30a4      	adds	r0, #164	@ 0xa4
 801389a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801389e:	f802 3b01 	strb.w	r3, [r2], #1
 80138a2:	4282      	cmp	r2, r0
 80138a4:	d1fb      	bne.n	801389e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80138a6:	4770      	bx	lr

080138a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80138a8:	b570      	push	{r4, r5, r6, lr}
 80138aa:	4c0b      	ldr	r4, [pc, #44]	@ (80138d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80138ac:	4605      	mov	r5, r0
 80138ae:	460e      	mov	r6, r1
 80138b0:	6820      	ldr	r0, [r4, #0]
 80138b2:	b110      	cbz	r0, 80138ba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80138b4:	6803      	ldr	r3, [r0, #0]
 80138b6:	695b      	ldr	r3, [r3, #20]
 80138b8:	4798      	blx	r3
 80138ba:	1d28      	adds	r0, r5, #4
 80138bc:	f7ff ffe9 	bl	8013892 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80138c0:	6026      	str	r6, [r4, #0]
 80138c2:	6833      	ldr	r3, [r6, #0]
 80138c4:	4630      	mov	r0, r6
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	4798      	blx	r3
 80138ca:	682b      	ldr	r3, [r5, #0]
 80138cc:	4628      	mov	r0, r5
 80138ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138d4:	4718      	bx	r3
 80138d6:	bf00      	nop
 80138d8:	240284e8 	.word	0x240284e8

080138dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80138dc:	2300      	movs	r3, #0
 80138de:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80138e2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80138e6:	461a      	mov	r2, r3
 80138e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ea:	461c      	mov	r4, r3
 80138ec:	461d      	mov	r5, r3
 80138ee:	459c      	cmp	ip, r3
 80138f0:	dd1a      	ble.n	8013928 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80138f2:	18c6      	adds	r6, r0, r3
 80138f4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80138f8:	b16e      	cbz	r6, 8013916 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d008      	beq.n	8013910 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80138fe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8013902:	fa1f fe82 	uxth.w	lr, r2
 8013906:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801390a:	1887      	adds	r7, r0, r2
 801390c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8013910:	3201      	adds	r2, #1
 8013912:	3301      	adds	r3, #1
 8013914:	e7eb      	b.n	80138ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8013916:	4299      	cmp	r1, r3
 8013918:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801391c:	bfa8      	it	ge
 801391e:	3501      	addge	r5, #1
 8013920:	429e      	cmp	r6, r3
 8013922:	bfc8      	it	gt
 8013924:	3401      	addgt	r4, #1
 8013926:	e7f4      	b.n	8013912 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8013928:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801392c:	1b49      	subs	r1, r1, r5
 801392e:	1b1b      	subs	r3, r3, r4
 8013930:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8013934:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8013938:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801393c:	4293      	cmp	r3, r2
 801393e:	dd03      	ble.n	8013948 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8013940:	3b01      	subs	r3, #1
 8013942:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8013946:	e7f7      	b.n	8013938 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801394c <_ZN8touchgfx11Application15handleTickEventEv>:
 801394c:	b570      	push	{r4, r5, r6, lr}
 801394e:	4d16      	ldr	r5, [pc, #88]	@ (80139a8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8013950:	4604      	mov	r4, r0
 8013952:	6828      	ldr	r0, [r5, #0]
 8013954:	b140      	cbz	r0, 8013968 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013956:	7a03      	ldrb	r3, [r0, #8]
 8013958:	b933      	cbnz	r3, 8013968 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801395a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801395e:	6803      	ldr	r3, [r0, #0]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013966:	4718      	bx	r3
 8013968:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801396c:	4e0f      	ldr	r6, [pc, #60]	@ (80139ac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801396e:	b973      	cbnz	r3, 801398e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013970:	b168      	cbz	r0, 801398e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013972:	7a03      	ldrb	r3, [r0, #8]
 8013974:	b15b      	cbz	r3, 801398e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013976:	6830      	ldr	r0, [r6, #0]
 8013978:	b110      	cbz	r0, 8013980 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801397a:	6803      	ldr	r3, [r0, #0]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	4798      	blx	r3
 8013980:	6828      	ldr	r0, [r5, #0]
 8013982:	6803      	ldr	r3, [r0, #0]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	4798      	blx	r3
 8013988:	2301      	movs	r3, #1
 801398a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801398e:	3404      	adds	r4, #4
 8013990:	4620      	mov	r0, r4
 8013992:	f7ff ff5f 	bl	8013854 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8013996:	4620      	mov	r0, r4
 8013998:	f7ff ffa0 	bl	80138dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801399c:	6830      	ldr	r0, [r6, #0]
 801399e:	b110      	cbz	r0, 80139a6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80139a0:	6803      	ldr	r3, [r0, #0]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139a4:	e7dd      	b.n	8013962 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	240284ec 	.word	0x240284ec
 80139ac:	240284e8 	.word	0x240284e8

080139b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80139b0:	4603      	mov	r3, r0
 80139b2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80139b6:	2200      	movs	r2, #0
 80139b8:	801a      	strh	r2, [r3, #0]
 80139ba:	3308      	adds	r3, #8
 80139bc:	f823 2c06 	strh.w	r2, [r3, #-6]
 80139c0:	f823 2c04 	strh.w	r2, [r3, #-4]
 80139c4:	f823 2c02 	strh.w	r2, [r3, #-2]
 80139c8:	428b      	cmp	r3, r1
 80139ca:	d1f5      	bne.n	80139b8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80139cc:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80139d0:	4770      	bx	lr
	...

080139d4 <_ZN8touchgfx11ApplicationC1Ev>:
 80139d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d6:	4b1d      	ldr	r3, [pc, #116]	@ (8013a4c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80139d8:	4606      	mov	r6, r0
 80139da:	4604      	mov	r4, r0
 80139dc:	2500      	movs	r5, #0
 80139de:	f846 3b04 	str.w	r3, [r6], #4
 80139e2:	22a8      	movs	r2, #168	@ 0xa8
 80139e4:	2100      	movs	r1, #0
 80139e6:	4630      	mov	r0, r6
 80139e8:	f00e ff8a 	bl	8022900 <memset>
 80139ec:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80139f0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80139f4:	4f16      	ldr	r7, [pc, #88]	@ (8013a50 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80139f6:	f7ff ffdb 	bl	80139b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80139fa:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80139fe:	f7ff ffd7 	bl	80139b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013a02:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8013a06:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8013a0a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8013a0e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8013a12:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8013a16:	490f      	ldr	r1, [pc, #60]	@ (8013a54 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013a18:	480f      	ldr	r0, [pc, #60]	@ (8013a58 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8013a1a:	f00d faeb 	bl	8020ff4 <CRC_Lock>
 8013a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8013a5c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8013a20:	b158      	cbz	r0, 8013a3a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8013a22:	801d      	strh	r5, [r3, #0]
 8013a24:	2300      	movs	r3, #0
 8013a26:	4a0e      	ldr	r2, [pc, #56]	@ (8013a60 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8013a28:	4630      	mov	r0, r6
 8013a2a:	6013      	str	r3, [r2, #0]
 8013a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8013a64 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8013a2e:	603b      	str	r3, [r7, #0]
 8013a30:	6013      	str	r3, [r2, #0]
 8013a32:	f7ff ff2e 	bl	8013892 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013a36:	4620      	mov	r0, r4
 8013a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013a3e:	2002      	movs	r0, #2
 8013a40:	801a      	strh	r2, [r3, #0]
 8013a42:	6038      	str	r0, [r7, #0]
 8013a44:	f001 fd8a 	bl	801555c <_ZN8touchgfx6Screen4drawEv>
 8013a48:	e7ec      	b.n	8013a24 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8013a4a:	bf00      	nop
 8013a4c:	08026290 	.word	0x08026290
 8013a50:	240284e8 	.word	0x240284e8
 8013a54:	b5e8b5cd 	.word	0xb5e8b5cd
 8013a58:	f407a5c2 	.word	0xf407a5c2
 8013a5c:	2400007c 	.word	0x2400007c
 8013a60:	240284f8 	.word	0x240284f8
 8013a64:	240284ec 	.word	0x240284ec

08013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013a68:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8013a6c:	3b01      	subs	r3, #1
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	428b      	cmp	r3, r1
 8013a72:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8013a76:	b510      	push	{r4, lr}
 8013a78:	d908      	bls.n	8013a8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8013a7a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013a7e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013a88:	685a      	ldr	r2, [r3, #4]
 8013a8a:	6062      	str	r2, [r4, #4]
 8013a8c:	bd10      	pop	{r4, pc}
	...

08013a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	b08f      	sub	sp, #60	@ 0x3c
 8013a96:	4b8f      	ldr	r3, [pc, #572]	@ (8013cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8013a98:	4683      	mov	fp, r0
 8013a9a:	ac0a      	add	r4, sp, #40	@ 0x28
 8013a9c:	e884 0006 	stmia.w	r4, {r1, r2}
 8013aa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8013cd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8013aa8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013aac:	f7ff fe55 	bl	801375a <_ZN8touchgfx4Rect10restrictToEss>
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f7fa f8ee 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d16a      	bne.n	8013b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013aba:	9403      	str	r4, [sp, #12]
 8013abc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013ac0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013ac4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	35a4      	adds	r5, #164	@ 0xa4
 8013acc:	b15c      	cbz	r4, 8013ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8013ace:	4629      	mov	r1, r5
 8013ad0:	9803      	ldr	r0, [sp, #12]
 8013ad2:	f7ff fe93 	bl	80137fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8013ad6:	3c01      	subs	r4, #1
 8013ad8:	b118      	cbz	r0, 8013ae2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8013ada:	b2a1      	uxth	r1, r4
 8013adc:	9801      	ldr	r0, [sp, #4]
 8013ade:	f7ff ffc3 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013ae2:	3d08      	subs	r5, #8
 8013ae4:	e7f2      	b.n	8013acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8013ae6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8013aea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013aee:	f8cd a010 	str.w	sl, [sp, #16]
 8013af2:	9302      	str	r3, [sp, #8]
 8013af4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013af8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8013afc:	9306      	str	r3, [sp, #24]
 8013afe:	445c      	add	r4, fp
 8013b00:	2500      	movs	r5, #0
 8013b02:	4626      	mov	r6, r4
 8013b04:	f8cd a014 	str.w	sl, [sp, #20]
 8013b08:	462f      	mov	r7, r5
 8013b0a:	9b05      	ldr	r3, [sp, #20]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d073      	beq.n	8013bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013b10:	9903      	ldr	r1, [sp, #12]
 8013b12:	4630      	mov	r0, r6
 8013b14:	f7ff fdff 	bl	8013716 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013b18:	b350      	cbz	r0, 8013b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013b1a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8013b1e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8013b22:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8013b26:	45e6      	cmp	lr, ip
 8013b28:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8013b2c:	db33      	blt.n	8013b96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013b2e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013b32:	88b3      	ldrh	r3, [r6, #4]
 8013b34:	4472      	add	r2, lr
 8013b36:	4463      	add	r3, ip
 8013b38:	b212      	sxth	r2, r2
 8013b3a:	b21b      	sxth	r3, r3
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	dc2a      	bgt.n	8013b96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013b40:	fa1f f289 	uxth.w	r2, r9
 8013b44:	88f3      	ldrh	r3, [r6, #6]
 8013b46:	45c8      	cmp	r8, r9
 8013b48:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013b4c:	4413      	add	r3, r2
 8013b4e:	fa1f fc88 	uxth.w	ip, r8
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	fa0f fe83 	sxth.w	lr, r3
 8013b58:	db0f      	blt.n	8013b7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8013b5a:	eba3 030c 	sub.w	r3, r3, ip
 8013b5e:	1ac9      	subs	r1, r1, r3
 8013b60:	b209      	sxth	r1, r1
 8013b62:	2900      	cmp	r1, #0
 8013b64:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013b68:	dd12      	ble.n	8013b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013b6a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8013b6e:	4605      	mov	r5, r0
 8013b70:	9b05      	ldr	r3, [sp, #20]
 8013b72:	3e08      	subs	r6, #8
 8013b74:	3b01      	subs	r3, #1
 8013b76:	9305      	str	r3, [sp, #20]
 8013b78:	e7c7      	b.n	8013b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8013b7a:	4461      	add	r1, ip
 8013b7c:	b209      	sxth	r1, r1
 8013b7e:	4571      	cmp	r1, lr
 8013b80:	dc38      	bgt.n	8013bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013b82:	eba2 020c 	sub.w	r2, r2, ip
 8013b86:	b212      	sxth	r2, r2
 8013b88:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8013b8c:	2a00      	cmp	r2, #0
 8013b8e:	dcee      	bgt.n	8013b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013b90:	b00f      	add	sp, #60	@ 0x3c
 8013b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b96:	45c8      	cmp	r8, r9
 8013b98:	db2c      	blt.n	8013bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013b9a:	88f3      	ldrh	r3, [r6, #6]
 8013b9c:	4499      	add	r9, r3
 8013b9e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8013ba2:	4498      	add	r8, r3
 8013ba4:	fa0f f989 	sxth.w	r9, r9
 8013ba8:	fa0f f888 	sxth.w	r8, r8
 8013bac:	45c1      	cmp	r9, r8
 8013bae:	db21      	blt.n	8013bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013bb0:	fa1f f28c 	uxth.w	r2, ip
 8013bb4:	88b3      	ldrh	r3, [r6, #4]
 8013bb6:	45e6      	cmp	lr, ip
 8013bb8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8013bbc:	4413      	add	r3, r2
 8013bbe:	fa1f f88e 	uxth.w	r8, lr
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	fa0f f983 	sxth.w	r9, r3
 8013bc8:	db0a      	blt.n	8013be0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8013bca:	eba3 0308 	sub.w	r3, r3, r8
 8013bce:	1ac9      	subs	r1, r1, r3
 8013bd0:	b209      	sxth	r1, r1
 8013bd2:	2900      	cmp	r1, #0
 8013bd4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8013bd8:	ddda      	ble.n	8013b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013bda:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8013bde:	e7c6      	b.n	8013b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013be0:	4441      	add	r1, r8
 8013be2:	b209      	sxth	r1, r1
 8013be4:	4549      	cmp	r1, r9
 8013be6:	dc05      	bgt.n	8013bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013be8:	eba2 0208 	sub.w	r2, r2, r8
 8013bec:	b212      	sxth	r2, r2
 8013bee:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8013bf2:	e7cb      	b.n	8013b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013bf4:	4607      	mov	r7, r0
 8013bf6:	e7bb      	b.n	8013b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013bf8:	2d00      	cmp	r5, #0
 8013bfa:	d181      	bne.n	8013b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8013bfc:	2f00      	cmp	r7, #0
 8013bfe:	f000 81dd 	beq.w	8013fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013c02:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8013c06:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8013c0a:	b2b3      	uxth	r3, r6
 8013c0c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8013c10:	9305      	str	r3, [sp, #20]
 8013c12:	9a05      	ldr	r2, [sp, #20]
 8013c14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013c18:	4413      	add	r3, r2
 8013c1a:	b2ba      	uxth	r2, r7
 8013c1c:	4492      	add	sl, r2
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	fa1f fa8a 	uxth.w	sl, sl
 8013c24:	fa0f f883 	sxth.w	r8, r3
 8013c28:	fa0f f98a 	sxth.w	r9, sl
 8013c2c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8013c30:	9b04      	ldr	r3, [sp, #16]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d052      	beq.n	8013cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8013c36:	9903      	ldr	r1, [sp, #12]
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f7ff fd6c 	bl	8013716 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013c3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013c42:	b1c0      	cbz	r0, 8013c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013c44:	f9b4 e000 	ldrsh.w	lr, [r4]
 8013c48:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013c4c:	4576      	cmp	r6, lr
 8013c4e:	dc22      	bgt.n	8013c96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013c50:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013c54:	44f4      	add	ip, lr
 8013c56:	fa0f fc8c 	sxth.w	ip, ip
 8013c5a:	45e0      	cmp	r8, ip
 8013c5c:	db1b      	blt.n	8013c96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013c5e:	428f      	cmp	r7, r1
 8013c60:	fa1f fc81 	uxth.w	ip, r1
 8013c64:	88e1      	ldrh	r1, [r4, #6]
 8013c66:	dc0d      	bgt.n	8013c84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8013c68:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013c6c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013c70:	eba1 010c 	sub.w	r1, r1, ip
 8013c74:	80e1      	strh	r1, [r4, #6]
 8013c76:	4628      	mov	r0, r5
 8013c78:	9904      	ldr	r1, [sp, #16]
 8013c7a:	3c08      	subs	r4, #8
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	3901      	subs	r1, #1
 8013c80:	9104      	str	r1, [sp, #16]
 8013c82:	e7d3      	b.n	8013c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8013c84:	4461      	add	r1, ip
 8013c86:	b209      	sxth	r1, r1
 8013c88:	4549      	cmp	r1, r9
 8013c8a:	dcf5      	bgt.n	8013c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013c8c:	eba2 0c0c 	sub.w	ip, r2, ip
 8013c90:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013c94:	e7ef      	b.n	8013c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013c96:	428f      	cmp	r7, r1
 8013c98:	dcee      	bgt.n	8013c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013c9a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8013c9e:	4461      	add	r1, ip
 8013ca0:	b209      	sxth	r1, r1
 8013ca2:	4589      	cmp	r9, r1
 8013ca4:	dbe8      	blt.n	8013c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013ca6:	4576      	cmp	r6, lr
 8013ca8:	fa1f fc8e 	uxth.w	ip, lr
 8013cac:	88a1      	ldrh	r1, [r4, #4]
 8013cae:	dc07      	bgt.n	8013cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8013cb0:	eba3 0c0c 	sub.w	ip, r3, ip
 8013cb4:	f8a4 8000 	strh.w	r8, [r4]
 8013cb8:	eba1 010c 	sub.w	r1, r1, ip
 8013cbc:	80a1      	strh	r1, [r4, #4]
 8013cbe:	e7da      	b.n	8013c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013cc0:	4461      	add	r1, ip
 8013cc2:	b209      	sxth	r1, r1
 8013cc4:	4588      	cmp	r8, r1
 8013cc6:	dbd7      	blt.n	8013c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013cc8:	9905      	ldr	r1, [sp, #20]
 8013cca:	eba1 0c0c 	sub.w	ip, r1, ip
 8013cce:	f8a4 c004 	strh.w	ip, [r4, #4]
 8013cd2:	e7d0      	b.n	8013c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013cd4:	2402849a 	.word	0x2402849a
 8013cd8:	24028498 	.word	0x24028498
 8013cdc:	2d00      	cmp	r5, #0
 8013cde:	f000 816d 	beq.w	8013fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013ce2:	9b06      	ldr	r3, [sp, #24]
 8013ce4:	445b      	add	r3, fp
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	9b02      	ldr	r3, [sp, #8]
 8013cea:	3301      	adds	r3, #1
 8013cec:	f000 8166 	beq.w	8013fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013cf0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8013cf4:	9803      	ldr	r0, [sp, #12]
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	f7ff fd80 	bl	80137fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8013cfc:	b120      	cbz	r0, 8013d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8013cfe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8013d02:	9801      	ldr	r0, [sp, #4]
 8013d04:	f7ff feb0 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013d08:	9903      	ldr	r1, [sp, #12]
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	f7ff fd03 	bl	8013716 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	f000 809c 	beq.w	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013d16:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8013d1a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013d1e:	fa1f f189 	uxth.w	r1, r9
 8013d22:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8013d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d28:	eb01 0c03 	add.w	ip, r1, r3
 8013d2c:	b283      	uxth	r3, r0
 8013d2e:	4548      	cmp	r0, r9
 8013d30:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8013d34:	fa1f fa8c 	uxth.w	sl, ip
 8013d38:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8013d3c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8013d40:	eb03 050c 	add.w	r5, r3, ip
 8013d44:	b2ad      	uxth	r5, r5
 8013d46:	9505      	str	r5, [sp, #20]
 8013d48:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013d4c:	9504      	str	r5, [sp, #16]
 8013d4e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8013d52:	f340 8099 	ble.w	8013e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8013d56:	1a5b      	subs	r3, r3, r1
 8013d58:	4596      	cmp	lr, r2
 8013d5a:	fa0f f08a 	sxth.w	r0, sl
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	b21e      	sxth	r6, r3
 8013d62:	dd2e      	ble.n	8013dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013d64:	9f02      	ldr	r7, [sp, #8]
 8013d66:	fa1f fe8e 	uxth.w	lr, lr
 8013d6a:	b292      	uxth	r2, r2
 8013d6c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8013d70:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013d74:	9f04      	ldr	r7, [sp, #16]
 8013d76:	ebae 0102 	sub.w	r1, lr, r2
 8013d7a:	44a6      	add	lr, r4
 8013d7c:	1a3f      	subs	r7, r7, r0
 8013d7e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8013d82:	b289      	uxth	r1, r1
 8013d84:	4402      	add	r2, r0
 8013d86:	fa0f fe8e 	sxth.w	lr, lr
 8013d8a:	b20d      	sxth	r5, r1
 8013d8c:	b212      	sxth	r2, r2
 8013d8e:	436f      	muls	r7, r5
 8013d90:	ebae 0202 	sub.w	r2, lr, r2
 8013d94:	4372      	muls	r2, r6
 8013d96:	4297      	cmp	r7, r2
 8013d98:	db09      	blt.n	8013dae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8013d9a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8013d9e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8013da2:	449c      	add	ip, r3
 8013da4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013da8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8013dac:	e686      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013dae:	4421      	add	r1, r4
 8013db0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8013db4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8013db8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013dbc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013dc0:	e67c      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013dc2:	9f04      	ldr	r7, [sp, #16]
 8013dc4:	42b8      	cmp	r0, r7
 8013dc6:	da27      	bge.n	8013e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013dc8:	9902      	ldr	r1, [sp, #8]
 8013dca:	1a3f      	subs	r7, r7, r0
 8013dcc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8013dd0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013dd4:	eb05 010e 	add.w	r1, r5, lr
 8013dd8:	fa1f f881 	uxth.w	r8, r1
 8013ddc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8013de0:	4411      	add	r1, r2
 8013de2:	fa0f f988 	sxth.w	r9, r8
 8013de6:	eba2 020e 	sub.w	r2, r2, lr
 8013dea:	eba1 0108 	sub.w	r1, r1, r8
 8013dee:	4372      	muls	r2, r6
 8013df0:	b289      	uxth	r1, r1
 8013df2:	fa0f f881 	sxth.w	r8, r1
 8013df6:	fb08 f707 	mul.w	r7, r8, r7
 8013dfa:	42ba      	cmp	r2, r7
 8013dfc:	dc06      	bgt.n	8013e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8013dfe:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8013e02:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8013e06:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8013e0a:	e7ca      	b.n	8013da2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8013e0c:	4429      	add	r1, r5
 8013e0e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8013e12:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013e16:	e651      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013e18:	9805      	ldr	r0, [sp, #20]
 8013e1a:	2d06      	cmp	r5, #6
 8013e1c:	ebaa 0000 	sub.w	r0, sl, r0
 8013e20:	b280      	uxth	r0, r0
 8013e22:	fa0f fe80 	sxth.w	lr, r0
 8013e26:	d817      	bhi.n	8013e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8013e28:	9b04      	ldr	r3, [sp, #16]
 8013e2a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8013e2e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8013e32:	1c6b      	adds	r3, r5, #1
 8013e34:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8013e38:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	9801      	ldr	r0, [sp, #4]
 8013e40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013e44:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013e48:	805a      	strh	r2, [r3, #2]
 8013e4a:	809e      	strh	r6, [r3, #4]
 8013e4c:	80d9      	strh	r1, [r3, #6]
 8013e4e:	9b02      	ldr	r3, [sp, #8]
 8013e50:	3c08      	subs	r4, #8
 8013e52:	3b01      	subs	r3, #1
 8013e54:	9302      	str	r3, [sp, #8]
 8013e56:	e747      	b.n	8013ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8013e58:	9a02      	ldr	r2, [sp, #8]
 8013e5a:	45b6      	cmp	lr, r6
 8013e5c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013e60:	db0d      	blt.n	8013e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013e62:	449c      	add	ip, r3
 8013e64:	445a      	add	r2, fp
 8013e66:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8013e6a:	fa1f fc8c 	uxth.w	ip, ip
 8013e6e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8013e72:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8013e76:	448c      	add	ip, r1
 8013e78:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8013e7c:	e61e      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013e7e:	445a      	add	r2, fp
 8013e80:	4484      	add	ip, r0
 8013e82:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8013e86:	e78f      	b.n	8013da8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013e88:	fa1f f18e 	uxth.w	r1, lr
 8013e8c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8013e90:	b293      	uxth	r3, r2
 8013e92:	4596      	cmp	lr, r2
 8013e94:	eb01 0806 	add.w	r8, r1, r6
 8013e98:	9306      	str	r3, [sp, #24]
 8013e9a:	fa1f f888 	uxth.w	r8, r8
 8013e9e:	9f06      	ldr	r7, [sp, #24]
 8013ea0:	fa0f f388 	sxth.w	r3, r8
 8013ea4:	9307      	str	r3, [sp, #28]
 8013ea6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8013eaa:	443b      	add	r3, r7
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	9308      	str	r3, [sp, #32]
 8013eb0:	da24      	bge.n	8013efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013eb2:	9905      	ldr	r1, [sp, #20]
 8013eb4:	eba3 0308 	sub.w	r3, r3, r8
 8013eb8:	eba2 020e 	sub.w	r2, r2, lr
 8013ebc:	eba9 0000 	sub.w	r0, r9, r0
 8013ec0:	ebaa 0401 	sub.w	r4, sl, r1
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	b2a4      	uxth	r4, r4
 8013ec8:	b219      	sxth	r1, r3
 8013eca:	b225      	sxth	r5, r4
 8013ecc:	4348      	muls	r0, r1
 8013ece:	436a      	muls	r2, r5
 8013ed0:	4282      	cmp	r2, r0
 8013ed2:	9a02      	ldr	r2, [sp, #8]
 8013ed4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013ed8:	445a      	add	r2, fp
 8013eda:	dc06      	bgt.n	8013eea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013edc:	9b07      	ldr	r3, [sp, #28]
 8013ede:	44a4      	add	ip, r4
 8013ee0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8013ee4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8013ee8:	e75e      	b.n	8013da8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013eea:	9904      	ldr	r1, [sp, #16]
 8013eec:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8013ef0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8013ef4:	4433      	add	r3, r6
 8013ef6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013efa:	e5df      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013efc:	9f06      	ldr	r7, [sp, #24]
 8013efe:	9b04      	ldr	r3, [sp, #16]
 8013f00:	1bc9      	subs	r1, r1, r7
 8013f02:	fa0f f78a 	sxth.w	r7, sl
 8013f06:	b289      	uxth	r1, r1
 8013f08:	429f      	cmp	r7, r3
 8013f0a:	fa0f fe81 	sxth.w	lr, r1
 8013f0e:	dd23      	ble.n	8013f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8013f10:	9a05      	ldr	r2, [sp, #20]
 8013f12:	eba9 0000 	sub.w	r0, r9, r0
 8013f16:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013f1a:	ebaa 0202 	sub.w	r2, sl, r2
 8013f1e:	9d07      	ldr	r5, [sp, #28]
 8013f20:	fb0e f000 	mul.w	r0, lr, r0
 8013f24:	b292      	uxth	r2, r2
 8013f26:	eba5 0a03 	sub.w	sl, r5, r3
 8013f2a:	9b02      	ldr	r3, [sp, #8]
 8013f2c:	b214      	sxth	r4, r2
 8013f2e:	00db      	lsls	r3, r3, #3
 8013f30:	fb04 fa0a 	mul.w	sl, r4, sl
 8013f34:	445b      	add	r3, fp
 8013f36:	4550      	cmp	r0, sl
 8013f38:	db03      	blt.n	8013f42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8013f3a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8013f3e:	4494      	add	ip, r2
 8013f40:	e732      	b.n	8013da8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013f42:	9a04      	ldr	r2, [sp, #16]
 8013f44:	4431      	add	r1, r6
 8013f46:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8013f4a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013f4e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8013f52:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013f56:	e75c      	b.n	8013e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8013f58:	9b08      	ldr	r3, [sp, #32]
 8013f5a:	2d06      	cmp	r5, #6
 8013f5c:	eba3 0308 	sub.w	r3, r3, r8
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	b218      	sxth	r0, r3
 8013f64:	d813      	bhi.n	8013f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8013f66:	9b07      	ldr	r3, [sp, #28]
 8013f68:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8013f6c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013f70:	1c6b      	adds	r3, r5, #1
 8013f72:	9901      	ldr	r1, [sp, #4]
 8013f74:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013f7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013f82:	805a      	strh	r2, [r3, #2]
 8013f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f86:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013f8a:	809a      	strh	r2, [r3, #4]
 8013f8c:	e75f      	b.n	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013f8e:	9c02      	ldr	r4, [sp, #8]
 8013f90:	4570      	cmp	r0, lr
 8013f92:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013f96:	db0d      	blt.n	8013fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8013f98:	4431      	add	r1, r6
 8013f9a:	9b06      	ldr	r3, [sp, #24]
 8013f9c:	445c      	add	r4, fp
 8013f9e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013fa2:	b289      	uxth	r1, r1
 8013fa4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8013fa8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013fac:	4419      	add	r1, r3
 8013fae:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013fb2:	e583      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013fb4:	445c      	add	r4, fp
 8013fb6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8013fba:	e79b      	b.n	8013ef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013fbc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013fc0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013fc4:	1e65      	subs	r5, r4, #1
 8013fc6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8013fca:	b2ad      	uxth	r5, r5
 8013fcc:	42b5      	cmp	r5, r6
 8013fce:	d044      	beq.n	801405a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013fd0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013fd4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8013fd8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013fdc:	4282      	cmp	r2, r0
 8013fde:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013fe2:	d11f      	bne.n	8014024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013fe4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8013fe8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013fec:	459c      	cmp	ip, r3
 8013fee:	d119      	bne.n	8014024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013ff0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013ff4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013ff8:	19d8      	adds	r0, r3, r7
 8013ffa:	b200      	sxth	r0, r0
 8013ffc:	4288      	cmp	r0, r1
 8013ffe:	d109      	bne.n	8014014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8014000:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014004:	4413      	add	r3, r2
 8014006:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801400a:	4629      	mov	r1, r5
 801400c:	9801      	ldr	r0, [sp, #4]
 801400e:	f7ff fd2b 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014012:	e003      	b.n	801401c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014014:	4411      	add	r1, r2
 8014016:	b209      	sxth	r1, r1
 8014018:	42b9      	cmp	r1, r7
 801401a:	d0f3      	beq.n	8014004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801401c:	3d01      	subs	r5, #1
 801401e:	3c08      	subs	r4, #8
 8014020:	b2ad      	uxth	r5, r5
 8014022:	e7d3      	b.n	8013fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014024:	42b9      	cmp	r1, r7
 8014026:	d1f9      	bne.n	801401c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014028:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801402c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014030:	4299      	cmp	r1, r3
 8014032:	d1f3      	bne.n	801401c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014034:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014038:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801403c:	181f      	adds	r7, r3, r0
 801403e:	b23f      	sxth	r7, r7
 8014040:	42ba      	cmp	r2, r7
 8014042:	d105      	bne.n	8014050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8014044:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8014048:	440b      	add	r3, r1
 801404a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801404e:	e7dc      	b.n	801400a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8014050:	440a      	add	r2, r1
 8014052:	b212      	sxth	r2, r2
 8014054:	4290      	cmp	r0, r2
 8014056:	d1e1      	bne.n	801401c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8014058:	e7f6      	b.n	8014048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801405a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801405e:	2e07      	cmp	r6, #7
 8014060:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014064:	d812      	bhi.n	801408c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8014066:	1c75      	adds	r5, r6, #1
 8014068:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801406c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8014070:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8014074:	9d01      	ldr	r5, [sp, #4]
 8014076:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801407a:	442c      	add	r4, r5
 801407c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014080:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014084:	8061      	strh	r1, [r4, #2]
 8014086:	80a2      	strh	r2, [r4, #4]
 8014088:	80e3      	strh	r3, [r4, #6]
 801408a:	e581      	b.n	8013b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801408c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014090:	3e01      	subs	r6, #1
 8014092:	445c      	add	r4, fp
 8014094:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8014098:	f04f 37ff 	mov.w	r7, #4294967295
 801409c:	2500      	movs	r5, #0
 801409e:	9305      	str	r3, [sp, #20]
 80140a0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80140a4:	1e72      	subs	r2, r6, #1
 80140a6:	9302      	str	r3, [sp, #8]
 80140a8:	4691      	mov	r9, r2
 80140aa:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80140ae:	9304      	str	r3, [sp, #16]
 80140b0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80140b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80140b8:	6818      	ldr	r0, [r3, #0]
 80140ba:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80140be:	9207      	str	r2, [sp, #28]
 80140c0:	bf16      	itet	ne
 80140c2:	9905      	ldrne	r1, [sp, #20]
 80140c4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80140c8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80140cc:	9306      	str	r3, [sp, #24]
 80140ce:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80140d2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80140d6:	fb18 f801 	smulbb	r8, r8, r1
 80140da:	6859      	ldr	r1, [r3, #4]
 80140dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80140e0:	4671      	mov	r1, lr
 80140e2:	a80c      	add	r0, sp, #48	@ 0x30
 80140e4:	f7f9 feab 	bl	800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80140e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80140ec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80140f0:	f04f 0c08 	mov.w	ip, #8
 80140f4:	9b04      	ldr	r3, [sp, #16]
 80140f6:	9a02      	ldr	r2, [sp, #8]
 80140f8:	fb10 f001 	smulbb	r0, r0, r1
 80140fc:	fb02 8803 	mla	r8, r2, r3, r8
 8014100:	eba0 0108 	sub.w	r1, r0, r8
 8014104:	fb90 f0fc 	sdiv	r0, r0, ip
 8014108:	4288      	cmp	r0, r1
 801410a:	dc20      	bgt.n	801414e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801410c:	4551      	cmp	r1, sl
 801410e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014112:	da03      	bge.n	801411c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8014114:	b1d9      	cbz	r1, 801414e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8014116:	468a      	mov	sl, r1
 8014118:	464f      	mov	r7, r9
 801411a:	4635      	mov	r5, r6
 801411c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014120:	f119 0f02 	cmn.w	r9, #2
 8014124:	d1c6      	bne.n	80140b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8014126:	4616      	mov	r6, r2
 8014128:	3201      	adds	r2, #1
 801412a:	f1a4 0408 	sub.w	r4, r4, #8
 801412e:	d1b7      	bne.n	80140a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8014130:	9b01      	ldr	r3, [sp, #4]
 8014132:	b2ac      	uxth	r4, r5
 8014134:	00ed      	lsls	r5, r5, #3
 8014136:	1958      	adds	r0, r3, r5
 8014138:	1c7b      	adds	r3, r7, #1
 801413a:	d10b      	bne.n	8014154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801413c:	4601      	mov	r1, r0
 801413e:	9803      	ldr	r0, [sp, #12]
 8014140:	f7f9 fe7d 	bl	800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014144:	4621      	mov	r1, r4
 8014146:	9801      	ldr	r0, [sp, #4]
 8014148:	f7ff fc8e 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801414c:	e4b6      	b.n	8013abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801414e:	464f      	mov	r7, r9
 8014150:	4635      	mov	r5, r6
 8014152:	e7ed      	b.n	8014130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8014154:	9b01      	ldr	r3, [sp, #4]
 8014156:	00ff      	lsls	r7, r7, #3
 8014158:	445d      	add	r5, fp
 801415a:	19d9      	adds	r1, r3, r7
 801415c:	445f      	add	r7, fp
 801415e:	f7f9 fe6e 	bl	800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014162:	9b03      	ldr	r3, [sp, #12]
 8014164:	cb03      	ldmia	r3!, {r0, r1}
 8014166:	9b03      	ldr	r3, [sp, #12]
 8014168:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801416c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8014170:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8014174:	6869      	ldr	r1, [r5, #4]
 8014176:	c303      	stmia	r3!, {r0, r1}
 8014178:	e7e4      	b.n	8014144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801417a:	bf00      	nop

0801417c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014180:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8014184:	b09b      	sub	sp, #108	@ 0x6c
 8014186:	4604      	mov	r4, r0
 8014188:	4630      	mov	r0, r6
 801418a:	f7f9 fd82 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801418e:	4605      	mov	r5, r0
 8014190:	b948      	cbnz	r0, 80141a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8014192:	6823      	ldr	r3, [r4, #0]
 8014194:	4620      	mov	r0, r4
 8014196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014198:	e896 0006 	ldmia.w	r6, {r1, r2}
 801419c:	4798      	blx	r3
 801419e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80141a2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80141a6:	4bc5      	ldr	r3, [pc, #788]	@ (80144bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d03f      	beq.n	801422e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80141ae:	4dc4      	ldr	r5, [pc, #784]	@ (80144c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7f9 fd6e 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 80141b6:	4606      	mov	r6, r0
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d138      	bne.n	801422e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80141bc:	4628      	mov	r0, r5
 80141be:	f7ff f9bb 	bl	8013538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	6829      	ldr	r1, [r5, #0]
 80141c6:	4620      	mov	r0, r4
 80141c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141ca:	686a      	ldr	r2, [r5, #4]
 80141cc:	4798      	blx	r3
 80141ce:	802e      	strh	r6, [r5, #0]
 80141d0:	806e      	strh	r6, [r5, #2]
 80141d2:	80ae      	strh	r6, [r5, #4]
 80141d4:	80ee      	strh	r6, [r5, #6]
 80141d6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 80141da:	4dba      	ldr	r5, [pc, #744]	@ (80144c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80141dc:	4640      	mov	r0, r8
 80141de:	f7ff fbe7 	bl	80139b0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80141e2:	882e      	ldrh	r6, [r5, #0]
 80141e4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80141e8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80141ec:	4633      	mov	r3, r6
 80141ee:	42bb      	cmp	r3, r7
 80141f0:	d224      	bcs.n	801423c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80141f2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80141f6:	2907      	cmp	r1, #7
 80141f8:	d816      	bhi.n	8014228 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80141fa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80141fe:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8014202:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8014206:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801420a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801420e:	1c4a      	adds	r2, r1, #1
 8014210:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8014214:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8014218:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801421c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8014220:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014224:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014228:	3301      	adds	r3, #1
 801422a:	b29b      	uxth	r3, r3
 801422c:	e7df      	b.n	80141ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801422e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014232:	2b00      	cmp	r3, #0
 8014234:	d1cf      	bne.n	80141d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8014236:	b01b      	add	sp, #108	@ 0x6c
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8014240:	42b3      	cmp	r3, r6
 8014242:	d90c      	bls.n	801425e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8014244:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8014248:	6822      	ldr	r2, [r4, #0]
 801424a:	3601      	adds	r6, #1
 801424c:	4620      	mov	r0, r4
 801424e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8014250:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8014254:	b2b6      	uxth	r6, r6
 8014256:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801425a:	47b8      	blx	r7
 801425c:	e7ee      	b.n	801423c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801425e:	4a9a      	ldr	r2, [pc, #616]	@ (80144c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8014260:	6813      	ldr	r3, [r2, #0]
 8014262:	4691      	mov	r9, r2
 8014264:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014268:	2b01      	cmp	r3, #1
 801426a:	f040 80e0 	bne.w	801442e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801426e:	8829      	ldrh	r1, [r5, #0]
 8014270:	2600      	movs	r6, #0
 8014272:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8014276:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801427a:	33ae      	adds	r3, #174	@ 0xae
 801427c:	428f      	cmp	r7, r1
 801427e:	f103 0308 	add.w	r3, r3, #8
 8014282:	dd0a      	ble.n	801429a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8014284:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8014288:	3101      	adds	r1, #1
 801428a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801428e:	4402      	add	r2, r0
 8014290:	b212      	sxth	r2, r2
 8014292:	4296      	cmp	r6, r2
 8014294:	bfb8      	it	lt
 8014296:	4616      	movlt	r6, r2
 8014298:	e7f0      	b.n	801427c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801429a:	4b8c      	ldr	r3, [pc, #560]	@ (80144cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801429c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80144c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	2b0f      	cmp	r3, #15
 80142a4:	bf8c      	ite	hi
 80142a6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80142aa:	f04f 0b01 	movls.w	fp, #1
 80142ae:	2300      	movs	r3, #0
 80142b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80142b4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80142b8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80142bc:	4b82      	ldr	r3, [pc, #520]	@ (80144c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80142be:	4438      	add	r0, r7
 80142c0:	b207      	sxth	r7, r0
 80142c2:	6818      	ldr	r0, [r3, #0]
 80142c4:	42b7      	cmp	r7, r6
 80142c6:	6803      	ldr	r3, [r0, #0]
 80142c8:	f280 8083 	bge.w	80143d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80142cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80142d0:	4798      	blx	r3
 80142d2:	eb07 030b 	add.w	r3, r7, fp
 80142d6:	4298      	cmp	r0, r3
 80142d8:	da07      	bge.n	80142ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80142da:	42b0      	cmp	r0, r6
 80142dc:	da05      	bge.n	80142ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80142de:	4287      	cmp	r7, r0
 80142e0:	dd6c      	ble.n	80143bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80142e2:	2f00      	cmp	r7, #0
 80142e4:	dd6a      	ble.n	80143bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80142e6:	4630      	mov	r0, r6
 80142e8:	e004      	b.n	80142f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80142ea:	4287      	cmp	r7, r0
 80142ec:	dcfb      	bgt.n	80142e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80142ee:	42b0      	cmp	r0, r6
 80142f0:	bfa8      	it	ge
 80142f2:	4630      	movge	r0, r6
 80142f4:	4b76      	ldr	r3, [pc, #472]	@ (80144d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80142f6:	1bc0      	subs	r0, r0, r7
 80142f8:	2200      	movs	r2, #0
 80142fa:	f8ad 7016 	strh.w	r7, [sp, #22]
 80142fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014302:	882f      	ldrh	r7, [r5, #0]
 8014304:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014308:	f8ad 3018 	strh.w	r3, [sp, #24]
 801430c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014310:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014314:	42bb      	cmp	r3, r7
 8014316:	d9cd      	bls.n	80142b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8014318:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801431c:	ab07      	add	r3, sp, #28
 801431e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014322:	6851      	ldr	r1, [r2, #4]
 8014324:	c303      	stmia	r3!, {r0, r1}
 8014326:	a905      	add	r1, sp, #20
 8014328:	a807      	add	r0, sp, #28
 801432a:	f7ff f9f4 	bl	8013716 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801432e:	2800      	cmp	r0, #0
 8014330:	d04c      	beq.n	80143cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8014332:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014336:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801433a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801433e:	4686      	mov	lr, r0
 8014340:	4290      	cmp	r0, r2
 8014342:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014346:	4450      	add	r0, sl
 8014348:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801434c:	bfb8      	it	lt
 801434e:	4696      	movlt	lr, r2
 8014350:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014354:	4452      	add	r2, sl
 8014356:	b280      	uxth	r0, r0
 8014358:	4299      	cmp	r1, r3
 801435a:	468c      	mov	ip, r1
 801435c:	b292      	uxth	r2, r2
 801435e:	9302      	str	r3, [sp, #8]
 8014360:	bfb8      	it	lt
 8014362:	469c      	movlt	ip, r3
 8014364:	b203      	sxth	r3, r0
 8014366:	fa0f fa82 	sxth.w	sl, r2
 801436a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801436e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014372:	4553      	cmp	r3, sl
 8014374:	bfb8      	it	lt
 8014376:	4602      	movlt	r2, r0
 8014378:	9b02      	ldr	r3, [sp, #8]
 801437a:	eba2 020e 	sub.w	r2, r2, lr
 801437e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014382:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8014386:	4411      	add	r1, r2
 8014388:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801438c:	4413      	add	r3, r2
 801438e:	b289      	uxth	r1, r1
 8014390:	b29b      	uxth	r3, r3
 8014392:	b208      	sxth	r0, r1
 8014394:	b21a      	sxth	r2, r3
 8014396:	4290      	cmp	r0, r2
 8014398:	bfb8      	it	lt
 801439a:	460b      	movlt	r3, r1
 801439c:	eba3 030c 	sub.w	r3, r3, ip
 80143a0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80143a4:	a807      	add	r0, sp, #28
 80143a6:	f7f9 fc74 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 80143aa:	b920      	cbnz	r0, 80143b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80143ac:	6823      	ldr	r3, [r4, #0]
 80143ae:	a907      	add	r1, sp, #28
 80143b0:	4620      	mov	r0, r4
 80143b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80143b4:	4798      	blx	r3
 80143b6:	3701      	adds	r7, #1
 80143b8:	b2bf      	uxth	r7, r7
 80143ba:	e7a9      	b.n	8014310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80143bc:	f8d9 0000 	ldr.w	r0, [r9]
 80143c0:	2101      	movs	r1, #1
 80143c2:	6803      	ldr	r3, [r0, #0]
 80143c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80143c8:	4798      	blx	r3
 80143ca:	e773      	b.n	80142b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80143cc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80143d0:	e7e8      	b.n	80143a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80143d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143d4:	4798      	blx	r3
 80143d6:	4b3f      	ldr	r3, [pc, #252]	@ (80144d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f43f af2b 	beq.w	8014236 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80143e0:	2300      	movs	r3, #0
 80143e2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80143e6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80143ea:	882b      	ldrh	r3, [r5, #0]
 80143ec:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80143f0:	42ab      	cmp	r3, r5
 80143f2:	f4bf af20 	bcs.w	8014236 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80143f6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80143fa:	2907      	cmp	r1, #7
 80143fc:	d814      	bhi.n	8014428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80143fe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8014402:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8014406:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801440a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801440e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8014412:	1c4a      	adds	r2, r1, #1
 8014414:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8014418:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801441c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8014420:	f8a2 c002 	strh.w	ip, [r2, #2]
 8014424:	8097      	strh	r7, [r2, #4]
 8014426:	80d6      	strh	r6, [r2, #6]
 8014428:	3301      	adds	r3, #1
 801442a:	b29b      	uxth	r3, r3
 801442c:	e7e0      	b.n	80143f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801442e:	2b02      	cmp	r3, #2
 8014430:	f040 8133 	bne.w	801469a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8014434:	4b28      	ldr	r3, [pc, #160]	@ (80144d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8014436:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	2b01      	cmp	r3, #1
 801443e:	f000 8098 	beq.w	8014572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8014442:	882a      	ldrh	r2, [r5, #0]
 8014444:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8014448:	3201      	adds	r2, #1
 801444a:	b292      	uxth	r2, r2
 801444c:	2900      	cmp	r1, #0
 801444e:	d0c2      	beq.n	80143d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014450:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8014454:	4694      	mov	ip, r2
 8014456:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801445a:	f04f 0900 	mov.w	r9, #0
 801445e:	441e      	add	r6, r3
 8014460:	b236      	sxth	r6, r6
 8014462:	fa1f f38c 	uxth.w	r3, ip
 8014466:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801446a:	4299      	cmp	r1, r3
 801446c:	f240 80be 	bls.w	80145ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8014470:	4427      	add	r7, r4
 8014472:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8014476:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801447a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801447e:	4283      	cmp	r3, r0
 8014480:	f340 80a0 	ble.w	80145c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8014484:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8014488:	46e1      	mov	r9, ip
 801448a:	4406      	add	r6, r0
 801448c:	b236      	sxth	r6, r6
 801448e:	429e      	cmp	r6, r3
 8014490:	bfa8      	it	ge
 8014492:	461e      	movge	r6, r3
 8014494:	f10c 0c01 	add.w	ip, ip, #1
 8014498:	e7e3      	b.n	8014462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801449a:	d10a      	bne.n	80144b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801449c:	4562      	cmp	r2, ip
 801449e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80144a2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80144a6:	bfb8      	it	lt
 80144a8:	4662      	movlt	r2, ip
 80144aa:	4288      	cmp	r0, r1
 80144ac:	bfb8      	it	lt
 80144ae:	461f      	movlt	r7, r3
 80144b0:	e086      	b.n	80145c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80144b2:	428a      	cmp	r2, r1
 80144b4:	bfb8      	it	lt
 80144b6:	460a      	movlt	r2, r1
 80144b8:	e082      	b.n	80145c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80144ba:	bf00      	nop
 80144bc:	240284e4 	.word	0x240284e4
 80144c0:	240284f0 	.word	0x240284f0
 80144c4:	2400007c 	.word	0x2400007c
 80144c8:	240284a4 	.word	0x240284a4
 80144cc:	2402849a 	.word	0x2402849a
 80144d0:	24028498 	.word	0x24028498
 80144d4:	240284a2 	.word	0x240284a2
 80144d8:	2402849c 	.word	0x2402849c
 80144dc:	19a1      	adds	r1, r4, r6
 80144de:	ab07      	add	r3, sp, #28
 80144e0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80144e4:	6849      	ldr	r1, [r1, #4]
 80144e6:	c303      	stmia	r3!, {r0, r1}
 80144e8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80144ec:	a807      	add	r0, sp, #28
 80144ee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80144f2:	2b13      	cmp	r3, #19
 80144f4:	440b      	add	r3, r1
 80144f6:	bfd8      	it	le
 80144f8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80144fc:	1a9b      	subs	r3, r3, r2
 80144fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014502:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014506:	f7ff f831 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801450a:	a807      	add	r0, sp, #28
 801450c:	f7f9 fbc1 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014510:	bb78      	cbnz	r0, 8014572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8014512:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8014516:	4426      	add	r6, r4
 8014518:	f8d9 0000 	ldr.w	r0, [r9]
 801451c:	f1bc 0f14 	cmp.w	ip, #20
 8014520:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014524:	f8d0 e000 	ldr.w	lr, [r0]
 8014528:	bfa8      	it	ge
 801452a:	f04f 0c14 	movge.w	ip, #20
 801452e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014532:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014536:	fa1f fc8c 	uxth.w	ip, ip
 801453a:	f8cd c000 	str.w	ip, [sp]
 801453e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8014542:	47d8      	blx	fp
 8014544:	4683      	mov	fp, r0
 8014546:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801454a:	a807      	add	r0, sp, #28
 801454c:	f7fe fff4 	bl	8013538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014550:	6823      	ldr	r3, [r4, #0]
 8014552:	4620      	mov	r0, r4
 8014554:	a907      	add	r1, sp, #28
 8014556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014558:	4798      	blx	r3
 801455a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801455e:	eba0 000b 	sub.w	r0, r0, fp
 8014562:	b200      	sxth	r0, r0
 8014564:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8014568:	b918      	cbnz	r0, 8014572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801456a:	b2b9      	uxth	r1, r7
 801456c:	4650      	mov	r0, sl
 801456e:	f7ff fa7b 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014572:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8014576:	f1bb 0f00 	cmp.w	fp, #0
 801457a:	f43f af2c 	beq.w	80143d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801457e:	882b      	ldrh	r3, [r5, #0]
 8014580:	2700      	movs	r7, #0
 8014582:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8014586:	3301      	adds	r3, #1
 8014588:	b29b      	uxth	r3, r3
 801458a:	b299      	uxth	r1, r3
 801458c:	00fe      	lsls	r6, r7, #3
 801458e:	458b      	cmp	fp, r1
 8014590:	d9a4      	bls.n	80144dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8014592:	4426      	add	r6, r4
 8014594:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8014598:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801459c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80145a0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80145a4:	4408      	add	r0, r1
 80145a6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80145aa:	4461      	add	r1, ip
 80145ac:	b200      	sxth	r0, r0
 80145ae:	b209      	sxth	r1, r1
 80145b0:	4288      	cmp	r0, r1
 80145b2:	f6bf af72 	bge.w	801449a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80145b6:	4584      	cmp	ip, r0
 80145b8:	4662      	mov	r2, ip
 80145ba:	461f      	mov	r7, r3
 80145bc:	bfb8      	it	lt
 80145be:	4602      	movlt	r2, r0
 80145c0:	3301      	adds	r3, #1
 80145c2:	e7e2      	b.n	801458a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80145c4:	d10e      	bne.n	80145e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80145c6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80145ca:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80145ce:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80145d2:	4473      	add	r3, lr
 80145d4:	b21b      	sxth	r3, r3
 80145d6:	429e      	cmp	r6, r3
 80145d8:	bfa8      	it	ge
 80145da:	461e      	movge	r6, r3
 80145dc:	4287      	cmp	r7, r0
 80145de:	bfb8      	it	lt
 80145e0:	46e1      	movlt	r9, ip
 80145e2:	e757      	b.n	8014494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80145e4:	4286      	cmp	r6, r0
 80145e6:	bfa8      	it	ge
 80145e8:	4606      	movge	r6, r0
 80145ea:	e753      	b.n	8014494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80145ec:	eb0a 0007 	add.w	r0, sl, r7
 80145f0:	4427      	add	r7, r4
 80145f2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80145f6:	f1bb 0f13 	cmp.w	fp, #19
 80145fa:	bfdc      	itt	le
 80145fc:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8014600:	445e      	addle	r6, fp
 8014602:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014606:	bfd8      	it	le
 8014608:	b236      	sxthle	r6, r6
 801460a:	f7f9 fb42 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801460e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014612:	2800      	cmp	r0, #0
 8014614:	f47f af1a 	bne.w	801444c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8014618:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801461c:	fa1f fb8b 	uxth.w	fp, fp
 8014620:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8014624:	1ab6      	subs	r6, r6, r2
 8014626:	4829      	ldr	r0, [pc, #164]	@ (80146cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8014628:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801462c:	2e14      	cmp	r6, #20
 801462e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8014632:	6800      	ldr	r0, [r0, #0]
 8014634:	bfa8      	it	ge
 8014636:	2614      	movge	r6, #20
 8014638:	f8ad 101c 	strh.w	r1, [sp, #28]
 801463c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014640:	b289      	uxth	r1, r1
 8014642:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014646:	b2b6      	uxth	r6, r6
 8014648:	f8d0 c000 	ldr.w	ip, [r0]
 801464c:	b292      	uxth	r2, r2
 801464e:	455e      	cmp	r6, fp
 8014650:	bf94      	ite	ls
 8014652:	9600      	strls	r6, [sp, #0]
 8014654:	f8cd b000 	strhi.w	fp, [sp]
 8014658:	b29b      	uxth	r3, r3
 801465a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801465e:	47b0      	blx	r6
 8014660:	6823      	ldr	r3, [r4, #0]
 8014662:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8014666:	a907      	add	r1, sp, #28
 8014668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801466a:	4620      	mov	r0, r4
 801466c:	4798      	blx	r3
 801466e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8014672:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8014676:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801467a:	1a5b      	subs	r3, r3, r1
 801467c:	440a      	add	r2, r1
 801467e:	b21b      	sxth	r3, r3
 8014680:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8014684:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8014688:	2b00      	cmp	r3, #0
 801468a:	f47f aeda 	bne.w	8014442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801468e:	fa1f f189 	uxth.w	r1, r9
 8014692:	4650      	mov	r0, sl
 8014694:	f7ff f9e8 	bl	8013a68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014698:	e6d3      	b.n	8014442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801469a:	882e      	ldrh	r6, [r5, #0]
 801469c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80146a0:	42b3      	cmp	r3, r6
 80146a2:	f67f ae98 	bls.w	80143d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80146a6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80146aa:	ab07      	add	r3, sp, #28
 80146ac:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80146b0:	6851      	ldr	r1, [r2, #4]
 80146b2:	c303      	stmia	r3!, {r0, r1}
 80146b4:	a807      	add	r0, sp, #28
 80146b6:	f7f9 faec 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 80146ba:	b920      	cbnz	r0, 80146c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80146bc:	6823      	ldr	r3, [r4, #0]
 80146be:	a907      	add	r1, sp, #28
 80146c0:	4620      	mov	r0, r4
 80146c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80146c4:	4798      	blx	r3
 80146c6:	3601      	adds	r6, #1
 80146c8:	b2b6      	uxth	r6, r6
 80146ca:	e7e7      	b.n	801469c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80146cc:	240284a4 	.word	0x240284a4

080146d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80146d0:	4b03      	ldr	r3, [pc, #12]	@ (80146e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80146d2:	2200      	movs	r2, #0
 80146d4:	801a      	strh	r2, [r3, #0]
 80146d6:	805a      	strh	r2, [r3, #2]
 80146d8:	809a      	strh	r2, [r3, #4]
 80146da:	80da      	strh	r2, [r3, #6]
 80146dc:	4770      	bx	lr
 80146de:	bf00      	nop
 80146e0:	240284f0 	.word	0x240284f0

080146e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80146e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e8:	b09d      	sub	sp, #116	@ 0x74
 80146ea:	4606      	mov	r6, r0
 80146ec:	4614      	mov	r4, r2
 80146ee:	468a      	mov	sl, r1
 80146f0:	a803      	add	r0, sp, #12
 80146f2:	461d      	mov	r5, r3
 80146f4:	f001 f8ac 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 80146f8:	6833      	ldr	r3, [r6, #0]
 80146fa:	4630      	mov	r0, r6
 80146fc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8014700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014702:	4798      	blx	r3
 8014704:	6833      	ldr	r3, [r6, #0]
 8014706:	4607      	mov	r7, r0
 8014708:	4630      	mov	r0, r6
 801470a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801470c:	4798      	blx	r3
 801470e:	462a      	mov	r2, r5
 8014710:	2500      	movs	r5, #0
 8014712:	4621      	mov	r1, r4
 8014714:	9000      	str	r0, [sp, #0]
 8014716:	463b      	mov	r3, r7
 8014718:	462c      	mov	r4, r5
 801471a:	46a9      	mov	r9, r5
 801471c:	46a8      	mov	r8, r5
 801471e:	a803      	add	r0, sp, #12
 8014720:	f001 f8f1 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014724:	2300      	movs	r3, #0
 8014726:	9302      	str	r3, [sp, #8]
 8014728:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801472c:	429c      	cmp	r4, r3
 801472e:	d002      	beq.n	8014736 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014730:	455c      	cmp	r4, fp
 8014732:	bf18      	it	ne
 8014734:	4625      	movne	r5, r4
 8014736:	ab02      	add	r3, sp, #8
 8014738:	4632      	mov	r2, r6
 801473a:	4651      	mov	r1, sl
 801473c:	a803      	add	r0, sp, #12
 801473e:	f001 fbe7 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014742:	4604      	mov	r4, r0
 8014744:	b108      	cbz	r0, 801474a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014746:	280a      	cmp	r0, #10
 8014748:	d10a      	bne.n	8014760 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801474a:	45c1      	cmp	r9, r8
 801474c:	bf38      	it	cc
 801474e:	46c1      	movcc	r9, r8
 8014750:	f04f 0800 	mov.w	r8, #0
 8014754:	2c00      	cmp	r4, #0
 8014756:	d1e5      	bne.n	8014724 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014758:	4648      	mov	r0, r9
 801475a:	b01d      	add	sp, #116	@ 0x74
 801475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014760:	9a02      	ldr	r2, [sp, #8]
 8014762:	2a00      	cmp	r2, #0
 8014764:	d0de      	beq.n	8014724 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014766:	7b57      	ldrb	r7, [r2, #13]
 8014768:	4629      	mov	r1, r5
 801476a:	6833      	ldr	r3, [r6, #0]
 801476c:	007f      	lsls	r7, r7, #1
 801476e:	8894      	ldrh	r4, [r2, #4]
 8014770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014772:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8014776:	7a97      	ldrb	r7, [r2, #10]
 8014778:	4307      	orrs	r7, r0
 801477a:	4630      	mov	r0, r6
 801477c:	4798      	blx	r3
 801477e:	4438      	add	r0, r7
 8014780:	4480      	add	r8, r0
 8014782:	fa1f f888 	uxth.w	r8, r8
 8014786:	e7e5      	b.n	8014754 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014788 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014788:	b508      	push	{r3, lr}
 801478a:	6803      	ldr	r3, [r0, #0]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	4798      	blx	r3
 8014790:	b128      	cbz	r0, 801479e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014792:	7b43      	ldrb	r3, [r0, #13]
 8014794:	7a80      	ldrb	r0, [r0, #10]
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801479c:	4318      	orrs	r0, r3
 801479e:	bd08      	pop	{r3, pc}

080147a0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80147a0:	b40e      	push	{r1, r2, r3}
 80147a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a4:	b09e      	sub	sp, #120	@ 0x78
 80147a6:	4605      	mov	r5, r0
 80147a8:	ab23      	add	r3, sp, #140	@ 0x8c
 80147aa:	a805      	add	r0, sp, #20
 80147ac:	f853 4b04 	ldr.w	r4, [r3], #4
 80147b0:	9303      	str	r3, [sp, #12]
 80147b2:	f001 f84d 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 80147b6:	682b      	ldr	r3, [r5, #0]
 80147b8:	4628      	mov	r0, r5
 80147ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147bc:	4798      	blx	r3
 80147be:	682b      	ldr	r3, [r5, #0]
 80147c0:	4606      	mov	r6, r0
 80147c2:	4628      	mov	r0, r5
 80147c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80147c6:	4798      	blx	r3
 80147c8:	4633      	mov	r3, r6
 80147ca:	4621      	mov	r1, r4
 80147cc:	ae1e      	add	r6, sp, #120	@ 0x78
 80147ce:	2400      	movs	r4, #0
 80147d0:	9000      	str	r0, [sp, #0]
 80147d2:	9a03      	ldr	r2, [sp, #12]
 80147d4:	a805      	add	r0, sp, #20
 80147d6:	f001 f896 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80147da:	f846 4d68 	str.w	r4, [r6, #-104]!
 80147de:	462a      	mov	r2, r5
 80147e0:	4633      	mov	r3, r6
 80147e2:	4621      	mov	r1, r4
 80147e4:	a805      	add	r0, sp, #20
 80147e6:	f001 fb93 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80147ea:	b300      	cbz	r0, 801482e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80147ec:	280a      	cmp	r0, #10
 80147ee:	d01a      	beq.n	8014826 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80147f0:	9f04      	ldr	r7, [sp, #16]
 80147f2:	b1c7      	cbz	r7, 8014826 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80147f4:	7b78      	ldrb	r0, [r7, #13]
 80147f6:	7a3b      	ldrb	r3, [r7, #8]
 80147f8:	00c1      	lsls	r1, r0, #3
 80147fa:	88ea      	ldrh	r2, [r5, #6]
 80147fc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014800:	4319      	orrs	r1, r3
 8014802:	0643      	lsls	r3, r0, #25
 8014804:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8014808:	bf48      	it	mi
 801480a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801480e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8014812:	bf48      	it	mi
 8014814:	b219      	sxthmi	r1, r3
 8014816:	79fb      	ldrb	r3, [r7, #7]
 8014818:	4303      	orrs	r3, r0
 801481a:	4413      	add	r3, r2
 801481c:	1a5b      	subs	r3, r3, r1
 801481e:	b21b      	sxth	r3, r3
 8014820:	429c      	cmp	r4, r3
 8014822:	bfb8      	it	lt
 8014824:	461c      	movlt	r4, r3
 8014826:	4633      	mov	r3, r6
 8014828:	462a      	mov	r2, r5
 801482a:	2100      	movs	r1, #0
 801482c:	e7da      	b.n	80147e4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801482e:	b2a0      	uxth	r0, r4
 8014830:	b01e      	add	sp, #120	@ 0x78
 8014832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014836:	b003      	add	sp, #12
 8014838:	4770      	bx	lr

0801483a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801483a:	7a43      	ldrb	r3, [r0, #9]
 801483c:	8880      	ldrh	r0, [r0, #4]
 801483e:	4418      	add	r0, r3
 8014840:	b280      	uxth	r0, r0
 8014842:	4770      	bx	lr

08014844 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014844:	6803      	ldr	r3, [r0, #0]
 8014846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014848:	4718      	bx	r3

0801484a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801484a:	b40e      	push	{r1, r2, r3}
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	b09d      	sub	sp, #116	@ 0x74
 8014850:	4604      	mov	r4, r0
 8014852:	ab21      	add	r3, sp, #132	@ 0x84
 8014854:	a803      	add	r0, sp, #12
 8014856:	f853 5b04 	ldr.w	r5, [r3], #4
 801485a:	9302      	str	r3, [sp, #8]
 801485c:	f000 fff8 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	4620      	mov	r0, r4
 8014864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014866:	4798      	blx	r3
 8014868:	6823      	ldr	r3, [r4, #0]
 801486a:	4606      	mov	r6, r0
 801486c:	4620      	mov	r0, r4
 801486e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014870:	2401      	movs	r4, #1
 8014872:	4798      	blx	r3
 8014874:	4633      	mov	r3, r6
 8014876:	9000      	str	r0, [sp, #0]
 8014878:	4629      	mov	r1, r5
 801487a:	9a02      	ldr	r2, [sp, #8]
 801487c:	a803      	add	r0, sp, #12
 801487e:	f001 f842 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014882:	a803      	add	r0, sp, #12
 8014884:	f001 fc10 	bl	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014888:	b2a3      	uxth	r3, r4
 801488a:	b138      	cbz	r0, 801489c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801488c:	280a      	cmp	r0, #10
 801488e:	a803      	add	r0, sp, #12
 8014890:	bf04      	itt	eq
 8014892:	3301      	addeq	r3, #1
 8014894:	b21c      	sxtheq	r4, r3
 8014896:	f001 fc07 	bl	80160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801489a:	e7f5      	b.n	8014888 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801489c:	4618      	mov	r0, r3
 801489e:	b01d      	add	sp, #116	@ 0x74
 80148a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148a4:	b003      	add	sp, #12
 80148a6:	4770      	bx	lr

080148a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80148a8:	b40e      	push	{r1, r2, r3}
 80148aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148ac:	b09e      	sub	sp, #120	@ 0x78
 80148ae:	4604      	mov	r4, r0
 80148b0:	ab23      	add	r3, sp, #140	@ 0x8c
 80148b2:	a805      	add	r0, sp, #20
 80148b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80148b8:	9303      	str	r3, [sp, #12]
 80148ba:	f000 ffc9 	bl	8015850 <_ZN8touchgfx12TextProviderC1Ev>
 80148be:	6823      	ldr	r3, [r4, #0]
 80148c0:	4620      	mov	r0, r4
 80148c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148c4:	4798      	blx	r3
 80148c6:	6823      	ldr	r3, [r4, #0]
 80148c8:	4606      	mov	r6, r0
 80148ca:	4620      	mov	r0, r4
 80148cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148ce:	4798      	blx	r3
 80148d0:	4633      	mov	r3, r6
 80148d2:	4629      	mov	r1, r5
 80148d4:	9000      	str	r0, [sp, #0]
 80148d6:	9a03      	ldr	r2, [sp, #12]
 80148d8:	a805      	add	r0, sp, #20
 80148da:	f001 f814 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80148de:	ad1e      	add	r5, sp, #120	@ 0x78
 80148e0:	2100      	movs	r1, #0
 80148e2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80148e6:	4622      	mov	r2, r4
 80148e8:	a805      	add	r0, sp, #20
 80148ea:	f845 1d68 	str.w	r1, [r5, #-104]!
 80148ee:	462b      	mov	r3, r5
 80148f0:	f001 fb0e 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80148f4:	b1d8      	cbz	r0, 801492e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80148f6:	280a      	cmp	r0, #10
 80148f8:	d012      	beq.n	8014920 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80148fa:	9804      	ldr	r0, [sp, #16]
 80148fc:	b180      	cbz	r0, 8014920 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80148fe:	7b47      	ldrb	r7, [r0, #13]
 8014900:	88e2      	ldrh	r2, [r4, #6]
 8014902:	00fb      	lsls	r3, r7, #3
 8014904:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8014908:	7a03      	ldrb	r3, [r0, #8]
 801490a:	430b      	orrs	r3, r1
 801490c:	0679      	lsls	r1, r7, #25
 801490e:	bf44      	itt	mi
 8014910:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014914:	b21b      	sxthmi	r3, r3
 8014916:	1ad3      	subs	r3, r2, r3
 8014918:	b21b      	sxth	r3, r3
 801491a:	429e      	cmp	r6, r3
 801491c:	bfa8      	it	ge
 801491e:	461e      	movge	r6, r3
 8014920:	462b      	mov	r3, r5
 8014922:	4622      	mov	r2, r4
 8014924:	2100      	movs	r1, #0
 8014926:	a805      	add	r0, sp, #20
 8014928:	f001 faf2 	bl	8015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801492c:	e7e2      	b.n	80148f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801492e:	4630      	mov	r0, r6
 8014930:	b01e      	add	sp, #120	@ 0x78
 8014932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014936:	b003      	add	sp, #12
 8014938:	4770      	bx	lr

0801493a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801493a:	b513      	push	{r0, r1, r4, lr}
 801493c:	6803      	ldr	r3, [r0, #0]
 801493e:	2400      	movs	r4, #0
 8014940:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014944:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014948:	f8ad 1004 	strh.w	r1, [sp, #4]
 801494c:	4669      	mov	r1, sp
 801494e:	691b      	ldr	r3, [r3, #16]
 8014950:	9400      	str	r4, [sp, #0]
 8014952:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014956:	4798      	blx	r3
 8014958:	b002      	add	sp, #8
 801495a:	bd10      	pop	{r4, pc}

0801495c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801495c:	b538      	push	{r3, r4, r5, lr}
 801495e:	680b      	ldr	r3, [r1, #0]
 8014960:	460c      	mov	r4, r1
 8014962:	4605      	mov	r5, r0
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	4798      	blx	r3
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	4620      	mov	r0, r4
 801496c:	4629      	mov	r1, r5
 801496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014970:	4798      	blx	r3
 8014972:	4628      	mov	r0, r5
 8014974:	bd38      	pop	{r3, r4, r5, pc}

08014976 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014976:	b410      	push	{r4}
 8014978:	880a      	ldrh	r2, [r1, #0]
 801497a:	8884      	ldrh	r4, [r0, #4]
 801497c:	4422      	add	r2, r4
 801497e:	800a      	strh	r2, [r1, #0]
 8014980:	884a      	ldrh	r2, [r1, #2]
 8014982:	88c4      	ldrh	r4, [r0, #6]
 8014984:	4422      	add	r2, r4
 8014986:	804a      	strh	r2, [r1, #2]
 8014988:	6940      	ldr	r0, [r0, #20]
 801498a:	b120      	cbz	r0, 8014996 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801498c:	6803      	ldr	r3, [r0, #0]
 801498e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014994:	4718      	bx	r3
 8014996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801499a:	4770      	bx	lr

0801499c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	8882      	ldrh	r2, [r0, #4]
 80149a0:	460c      	mov	r4, r1
 80149a2:	880b      	ldrh	r3, [r1, #0]
 80149a4:	4605      	mov	r5, r0
 80149a6:	4413      	add	r3, r2
 80149a8:	800b      	strh	r3, [r1, #0]
 80149aa:	884b      	ldrh	r3, [r1, #2]
 80149ac:	88c2      	ldrh	r2, [r0, #6]
 80149ae:	4413      	add	r3, r2
 80149b0:	804b      	strh	r3, [r1, #2]
 80149b2:	1d01      	adds	r1, r0, #4
 80149b4:	4620      	mov	r0, r4
 80149b6:	f7f9 f929 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 80149ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	dd0b      	ble.n	80149da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80149c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	dd07      	ble.n	80149da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80149ca:	6968      	ldr	r0, [r5, #20]
 80149cc:	b128      	cbz	r0, 80149da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80149ce:	6803      	ldr	r3, [r0, #0]
 80149d0:	4621      	mov	r1, r4
 80149d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149d8:	4718      	bx	r3
 80149da:	bd70      	pop	{r4, r5, r6, pc}

080149dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80149dc:	b570      	push	{r4, r5, r6, lr}
 80149de:	8882      	ldrh	r2, [r0, #4]
 80149e0:	460c      	mov	r4, r1
 80149e2:	880b      	ldrh	r3, [r1, #0]
 80149e4:	4605      	mov	r5, r0
 80149e6:	4413      	add	r3, r2
 80149e8:	800b      	strh	r3, [r1, #0]
 80149ea:	884b      	ldrh	r3, [r1, #2]
 80149ec:	88c2      	ldrh	r2, [r0, #6]
 80149ee:	4413      	add	r3, r2
 80149f0:	804b      	strh	r3, [r1, #2]
 80149f2:	1d01      	adds	r1, r0, #4
 80149f4:	4620      	mov	r0, r4
 80149f6:	f7f9 f909 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 80149fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	dd19      	ble.n	8014a36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8014a02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dd15      	ble.n	8014a36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8014a0a:	6968      	ldr	r0, [r5, #20]
 8014a0c:	b128      	cbz	r0, 8014a1a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8014a0e:	6803      	ldr	r3, [r0, #0]
 8014a10:	4621      	mov	r1, r4
 8014a12:	691b      	ldr	r3, [r3, #16]
 8014a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a18:	4718      	bx	r3
 8014a1a:	4b07      	ldr	r3, [pc, #28]	@ (8014a38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	429d      	cmp	r5, r3
 8014a22:	d108      	bne.n	8014a36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8014a24:	f7fe ff10 	bl	8013848 <_ZN8touchgfx11Application11getInstanceEv>
 8014a28:	6803      	ldr	r3, [r0, #0]
 8014a2a:	6821      	ldr	r1, [r4, #0]
 8014a2c:	6862      	ldr	r2, [r4, #4]
 8014a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a34:	4718      	bx	r3
 8014a36:	bd70      	pop	{r4, r5, r6, pc}
 8014a38:	240284e8 	.word	0x240284e8

08014a3c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014a3c:	b570      	push	{r4, r5, r6, lr}
 8014a3e:	4604      	mov	r4, r0
 8014a40:	4616      	mov	r6, r2
 8014a42:	460d      	mov	r5, r1
 8014a44:	b901      	cbnz	r1, 8014a48 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8014a46:	b192      	cbz	r2, 8014a6e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	699b      	ldr	r3, [r3, #24]
 8014a4e:	4798      	blx	r3
 8014a50:	88e2      	ldrh	r2, [r4, #6]
 8014a52:	88a1      	ldrh	r1, [r4, #4]
 8014a54:	4620      	mov	r0, r4
 8014a56:	4432      	add	r2, r6
 8014a58:	4429      	add	r1, r5
 8014a5a:	b212      	sxth	r2, r2
 8014a5c:	b209      	sxth	r1, r1
 8014a5e:	f7f9 fc11 	bl	800e284 <_ZN8touchgfx8Drawable5setXYEss>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	4620      	mov	r0, r4
 8014a66:	699b      	ldr	r3, [r3, #24]
 8014a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a6c:	4718      	bx	r3
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}

08014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	2300      	movs	r3, #0
 8014a74:	4604      	mov	r4, r0
 8014a76:	4608      	mov	r0, r1
 8014a78:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014a7c:	8023      	strh	r3, [r4, #0]
 8014a7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014a82:	8063      	strh	r3, [r4, #2]
 8014a84:	6803      	ldr	r3, [r0, #0]
 8014a86:	80a1      	strh	r1, [r4, #4]
 8014a88:	4621      	mov	r1, r4
 8014a8a:	80e2      	strh	r2, [r4, #6]
 8014a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a8e:	4798      	blx	r3
 8014a90:	4620      	mov	r0, r4
 8014a92:	bd10      	pop	{r4, pc}

08014a94 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8014a94:	4770      	bx	lr

08014a96 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8014a96:	b510      	push	{r4, lr}
 8014a98:	4604      	mov	r4, r0
 8014a9a:	211c      	movs	r1, #28
 8014a9c:	f00d f91b 	bl	8021cd6 <_ZdlPvj>
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	bd10      	pop	{r4, pc}

08014aa4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8014aa4:	4a04      	ldr	r2, [pc, #16]	@ (8014ab8 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8014aa6:	6002      	str	r2, [r0, #0]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8014aae:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014ab2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014ab6:	4770      	bx	lr
 8014ab8:	080262e4 	.word	0x080262e4

08014abc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	4604      	mov	r4, r0
 8014ac2:	b087      	sub	sp, #28
 8014ac4:	4696      	mov	lr, r2
 8014ac6:	6880      	ldr	r0, [r0, #8]
 8014ac8:	8b22      	ldrh	r2, [r4, #24]
 8014aca:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014ace:	9105      	str	r1, [sp, #20]
 8014ad0:	1c51      	adds	r1, r2, #1
 8014ad2:	8321      	strh	r1, [r4, #24]
 8014ad4:	2101      	movs	r1, #1
 8014ad6:	5481      	strb	r1, [r0, r2]
 8014ad8:	4689      	mov	r9, r1
 8014ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ade:	8b60      	ldrh	r0, [r4, #26]
 8014ae0:	ee06 2a90 	vmov	s13, r2
 8014ae4:	68e2      	ldr	r2, [r4, #12]
 8014ae6:	1845      	adds	r5, r0, r1
 8014ae8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014aec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014af0:	8365      	strh	r5, [r4, #26]
 8014af2:	edc2 6a00 	vstr	s13, [r2]
 8014af6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014afa:	8b60      	ldrh	r0, [r4, #26]
 8014afc:	ee07 2a10 	vmov	s14, r2
 8014b00:	68e2      	ldr	r2, [r4, #12]
 8014b02:	1845      	adds	r5, r0, r1
 8014b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b08:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014b0c:	8365      	strh	r5, [r4, #26]
 8014b0e:	1d18      	adds	r0, r3, #4
 8014b10:	460d      	mov	r5, r1
 8014b12:	ed82 7a00 	vstr	s14, [r2]
 8014b16:	f8be 2000 	ldrh.w	r2, [lr]
 8014b1a:	9203      	str	r2, [sp, #12]
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4613      	mov	r3, r2
 8014b20:	4694      	mov	ip, r2
 8014b22:	9201      	str	r2, [sp, #4]
 8014b24:	9202      	str	r2, [sp, #8]
 8014b26:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8014b2a:	9e05      	ldr	r6, [sp, #20]
 8014b2c:	f108 0701 	add.w	r7, r8, #1
 8014b30:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8014b34:	428e      	cmp	r6, r1
 8014b36:	b2bf      	uxth	r7, r7
 8014b38:	eb0a 0b08 	add.w	fp, sl, r8
 8014b3c:	f340 80b6 	ble.w	8014cac <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8014b40:	9b03      	ldr	r3, [sp, #12]
 8014b42:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014b46:	fa43 fb05 	asr.w	fp, r3, r5
 8014b4a:	f00b 0b01 	and.w	fp, fp, #1
 8014b4e:	fa5f f38b 	uxtb.w	r3, fp
 8014b52:	9304      	str	r3, [sp, #16]
 8014b54:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014b58:	f1bb 0f00 	cmp.w	fp, #0
 8014b5c:	d057      	beq.n	8014c0e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8014b5e:	ee07 ca90 	vmov	s15, ip
 8014b62:	8327      	strh	r7, [r4, #24]
 8014b64:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014b68:	ee07 3a90 	vmov	s15, r3
 8014b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b70:	f1b9 0f00 	cmp.w	r9, #0
 8014b74:	d028      	beq.n	8014bc8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8014b76:	f04f 0602 	mov.w	r6, #2
 8014b7a:	f80a 6008 	strb.w	r6, [sl, r8]
 8014b7e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014b82:	68e7      	ldr	r7, [r4, #12]
 8014b84:	f108 0901 	add.w	r9, r8, #1
 8014b88:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014b8c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014b90:	edc7 5a00 	vstr	s11, [r7]
 8014b94:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014b98:	68e7      	ldr	r7, [r4, #12]
 8014b9a:	f108 0901 	add.w	r9, r8, #1
 8014b9e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014ba2:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014ba6:	edc7 7a00 	vstr	s15, [r7]
 8014baa:	3501      	adds	r5, #1
 8014bac:	2d10      	cmp	r5, #16
 8014bae:	d106      	bne.n	8014bbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8014bb0:	9d02      	ldr	r5, [sp, #8]
 8014bb2:	3501      	adds	r5, #1
 8014bb4:	9502      	str	r5, [sp, #8]
 8014bb6:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8014bba:	9503      	str	r5, [sp, #12]
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	3101      	adds	r1, #1
 8014bc0:	3004      	adds	r0, #4
 8014bc2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014bc6:	e7ae      	b.n	8014b26 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8014bc8:	f04f 0605 	mov.w	r6, #5
 8014bcc:	ed9d 5a01 	vldr	s10, [sp, #4]
 8014bd0:	f80a 6008 	strb.w	r6, [sl, r8]
 8014bd4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014bd8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014bdc:	68e7      	ldr	r7, [r4, #12]
 8014bde:	f108 0901 	add.w	r9, r8, #1
 8014be2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014be6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014bea:	ed87 5a00 	vstr	s10, [r7]
 8014bee:	ee05 2a10 	vmov	s10, r2
 8014bf2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014bf6:	68e7      	ldr	r7, [r4, #12]
 8014bf8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014bfc:	f108 0901 	add.w	r9, r8, #1
 8014c00:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014c04:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014c08:	ed87 5a00 	vstr	s10, [r7]
 8014c0c:	e7b7      	b.n	8014b7e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8014c0e:	f1b9 0f00 	cmp.w	r9, #0
 8014c12:	d147      	bne.n	8014ca4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8014c14:	f04f 0605 	mov.w	r6, #5
 8014c18:	eddd 7a01 	vldr	s15, [sp, #4]
 8014c1c:	8327      	strh	r7, [r4, #24]
 8014c1e:	f80a 6008 	strb.w	r6, [sl, r8]
 8014c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c26:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014c2a:	68e7      	ldr	r7, [r4, #12]
 8014c2c:	f108 0901 	add.w	r9, r8, #1
 8014c30:	9e01      	ldr	r6, [sp, #4]
 8014c32:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014c36:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014c3a:	4466      	add	r6, ip
 8014c3c:	edc7 7a00 	vstr	s15, [r7]
 8014c40:	ee07 2a90 	vmov	s15, r2
 8014c44:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014c48:	441a      	add	r2, r3
 8014c4a:	68e7      	ldr	r7, [r4, #12]
 8014c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c50:	f108 0901 	add.w	r9, r8, #1
 8014c54:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014c58:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014c5c:	edc7 7a00 	vstr	s15, [r7]
 8014c60:	ee07 6a90 	vmov	s15, r6
 8014c64:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c6c:	68e7      	ldr	r7, [r4, #12]
 8014c6e:	f108 0901 	add.w	r9, r8, #1
 8014c72:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014c76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014c7a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014c7e:	edc7 7a00 	vstr	s15, [r7]
 8014c82:	ee07 2a90 	vmov	s15, r2
 8014c86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c8e:	68e7      	ldr	r7, [r4, #12]
 8014c90:	f108 0901 	add.w	r9, r8, #1
 8014c94:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014c98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014c9c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014ca0:	edc7 7a00 	vstr	s15, [r7]
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	f8cd c004 	str.w	ip, [sp, #4]
 8014caa:	e77e      	b.n	8014baa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8014cac:	f1b9 0f00 	cmp.w	r9, #0
 8014cb0:	d028      	beq.n	8014d04 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8014cb2:	ee07 ca90 	vmov	s15, ip
 8014cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cba:	eef4 6a67 	vcmp.f32	s13, s15
 8014cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc2:	d108      	bne.n	8014cd6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8014cc4:	ee07 3a90 	vmov	s15, r3
 8014cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ccc:	eeb4 7a67 	vcmp.f32	s14, s15
 8014cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd4:	d016      	beq.n	8014d04 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8014cd6:	2302      	movs	r3, #2
 8014cd8:	8327      	strh	r7, [r4, #24]
 8014cda:	f88b 3000 	strb.w	r3, [fp]
 8014cde:	8b62      	ldrh	r2, [r4, #26]
 8014ce0:	68e3      	ldr	r3, [r4, #12]
 8014ce2:	1c51      	adds	r1, r2, #1
 8014ce4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014ce8:	8361      	strh	r1, [r4, #26]
 8014cea:	edc3 6a00 	vstr	s13, [r3]
 8014cee:	8b62      	ldrh	r2, [r4, #26]
 8014cf0:	68e3      	ldr	r3, [r4, #12]
 8014cf2:	1c51      	adds	r1, r2, #1
 8014cf4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014cf8:	8361      	strh	r1, [r4, #26]
 8014cfa:	ed83 7a00 	vstr	s14, [r3]
 8014cfe:	b007      	add	sp, #28
 8014d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d04:	2305      	movs	r3, #5
 8014d06:	eddd 7a01 	vldr	s15, [sp, #4]
 8014d0a:	8327      	strh	r7, [r4, #24]
 8014d0c:	f88b 3000 	strb.w	r3, [fp]
 8014d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d14:	8b61      	ldrh	r1, [r4, #26]
 8014d16:	68e3      	ldr	r3, [r4, #12]
 8014d18:	1c4d      	adds	r5, r1, #1
 8014d1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014d1e:	8365      	strh	r5, [r4, #26]
 8014d20:	edc3 7a00 	vstr	s15, [r3]
 8014d24:	ee07 2a90 	vmov	s15, r2
 8014d28:	8b61      	ldrh	r1, [r4, #26]
 8014d2a:	68e3      	ldr	r3, [r4, #12]
 8014d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d30:	1c4d      	adds	r5, r1, #1
 8014d32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014d36:	8365      	strh	r5, [r4, #26]
 8014d38:	edc3 7a00 	vstr	s15, [r3]
 8014d3c:	e7cf      	b.n	8014cde <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08014d40 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8014d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d44:	4604      	mov	r4, r0
 8014d46:	b08e      	sub	sp, #56	@ 0x38
 8014d48:	4699      	mov	r9, r3
 8014d4a:	4688      	mov	r8, r1
 8014d4c:	4615      	mov	r5, r2
 8014d4e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8014d50:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8014d54:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014d56:	f7ee fcff 	bl	8003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8014d5a:	6060      	str	r0, [r4, #4]
 8014d5c:	f1b9 0f00 	cmp.w	r9, #0
 8014d60:	f000 80e8 	beq.w	8014f34 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	f000 80e5 	beq.w	8014f34 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014d6a:	a805      	add	r0, sp, #20
 8014d6c:	f000 f8f9 	bl	8014f62 <_ZN8touchgfx9Matrix3x3C1Ev>
 8014d70:	6833      	ldr	r3, [r6, #0]
 8014d72:	4630      	mov	r0, r6
 8014d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d76:	4798      	blx	r3
 8014d78:	a805      	add	r0, sp, #20
 8014d7a:	eef0 0a40 	vmov.f32	s1, s0
 8014d7e:	f000 f8f4 	bl	8014f6a <_ZN8touchgfx9Matrix3x35scaleEff>
 8014d82:	6860      	ldr	r0, [r4, #4]
 8014d84:	f1ba 0f03 	cmp.w	sl, #3
 8014d88:	d83b      	bhi.n	8014e02 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8014d8a:	e8df f00a 	tbb	[pc, sl]
 8014d8e:	1002      	.short	0x1002
 8014d90:	9f71      	.short	0x9f71
 8014d92:	6803      	ldr	r3, [r0, #0]
 8014d94:	462a      	mov	r2, r5
 8014d96:	4641      	mov	r1, r8
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	4798      	blx	r3
 8014d9c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014da0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014da4:	ee07 7a90 	vmov	s15, r7
 8014da8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8014dac:	e026      	b.n	8014dfc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8014dae:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014db2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014db6:	8869      	ldrh	r1, [r5, #2]
 8014db8:	1a9b      	subs	r3, r3, r2
 8014dba:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014dbe:	aa03      	add	r2, sp, #12
 8014dc0:	1a5b      	subs	r3, r3, r1
 8014dc2:	4641      	mov	r1, r8
 8014dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014dc8:	882b      	ldrh	r3, [r5, #0]
 8014dca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014dce:	88ab      	ldrh	r3, [r5, #4]
 8014dd0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014dd4:	6803      	ldr	r3, [r0, #0]
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	4798      	blx	r3
 8014dda:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8014f3c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8014dde:	a805      	add	r0, sp, #20
 8014de0:	f000 f8e8 	bl	8014fb4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014de4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014de8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014dea:	ee07 7a90 	vmov	s15, r7
 8014dee:	1a9b      	subs	r3, r3, r2
 8014df0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014df4:	ee00 3a10 	vmov	s0, r3
 8014df8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014dfc:	a805      	add	r0, sp, #20
 8014dfe:	f000 f927 	bl	8015050 <_ZN8touchgfx9Matrix3x39translateEff>
 8014e02:	6860      	ldr	r0, [r4, #4]
 8014e04:	a905      	add	r1, sp, #20
 8014e06:	2500      	movs	r5, #0
 8014e08:	f109 0602 	add.w	r6, r9, #2
 8014e0c:	6803      	ldr	r3, [r0, #0]
 8014e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e10:	4798      	blx	r3
 8014e12:	6860      	ldr	r0, [r4, #4]
 8014e14:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014e16:	6803      	ldr	r3, [r0, #0]
 8014e18:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8014e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e1e:	4798      	blx	r3
 8014e20:	6860      	ldr	r0, [r4, #4]
 8014e22:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8014e26:	6803      	ldr	r3, [r0, #0]
 8014e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e2a:	4798      	blx	r3
 8014e2c:	6860      	ldr	r0, [r4, #4]
 8014e2e:	2101      	movs	r1, #1
 8014e30:	6803      	ldr	r3, [r0, #0]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	4798      	blx	r3
 8014e36:	f8b9 7000 	ldrh.w	r7, [r9]
 8014e3a:	f104 0310 	add.w	r3, r4, #16
 8014e3e:	61a5      	str	r5, [r4, #24]
 8014e40:	f104 0208 	add.w	r2, r4, #8
 8014e44:	f104 0114 	add.w	r1, r4, #20
 8014e48:	f104 000c 	add.w	r0, r4, #12
 8014e4c:	f7ef faaa 	bl	80043a4 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8014e50:	42af      	cmp	r7, r5
 8014e52:	dd60      	ble.n	8014f16 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8014e54:	8831      	ldrh	r1, [r6, #0]
 8014e56:	1cb2      	adds	r2, r6, #2
 8014e58:	4620      	mov	r0, r4
 8014e5a:	3501      	adds	r5, #1
 8014e5c:	f101 030f 	add.w	r3, r1, #15
 8014e60:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8014e64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014e68:	f7ff fe28 	bl	8014abc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8014e6c:	4606      	mov	r6, r0
 8014e6e:	e7ef      	b.n	8014e50 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8014e70:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014e74:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014e78:	8829      	ldrh	r1, [r5, #0]
 8014e7a:	1a9b      	subs	r3, r3, r2
 8014e7c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e80:	aa03      	add	r2, sp, #12
 8014e82:	1a5b      	subs	r3, r3, r1
 8014e84:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014e88:	886d      	ldrh	r5, [r5, #2]
 8014e8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014e8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014e92:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014e96:	1a5b      	subs	r3, r3, r1
 8014e98:	4641      	mov	r1, r8
 8014e9a:	1b5b      	subs	r3, r3, r5
 8014e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014ea0:	6803      	ldr	r3, [r0, #0]
 8014ea2:	689b      	ldr	r3, [r3, #8]
 8014ea4:	4798      	blx	r3
 8014ea6:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8014f40 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8014eaa:	a805      	add	r0, sp, #20
 8014eac:	f000 f882 	bl	8014fb4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014eb0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014eb4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014eb6:	1a9b      	subs	r3, r3, r2
 8014eb8:	ee00 3a90 	vmov	s1, r3
 8014ebc:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014ec0:	1bdb      	subs	r3, r3, r7
 8014ec2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014ec6:	ee00 3a10 	vmov	s0, r3
 8014eca:	e795      	b.n	8014df8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8014ecc:	886b      	ldrh	r3, [r5, #2]
 8014ece:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014ed2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014ed6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014eda:	8829      	ldrh	r1, [r5, #0]
 8014edc:	1a9b      	subs	r3, r3, r2
 8014ede:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014ee2:	aa03      	add	r2, sp, #12
 8014ee4:	1a5b      	subs	r3, r3, r1
 8014ee6:	4641      	mov	r1, r8
 8014ee8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014eec:	88eb      	ldrh	r3, [r5, #6]
 8014eee:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014ef2:	6803      	ldr	r3, [r0, #0]
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	4798      	blx	r3
 8014ef8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8014f44 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8014efc:	a805      	add	r0, sp, #20
 8014efe:	f000 f859 	bl	8014fb4 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014f02:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014f06:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014f0a:	1bdb      	subs	r3, r3, r7
 8014f0c:	ee00 3a90 	vmov	s1, r3
 8014f10:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014f14:	e748      	b.n	8014da8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8014f16:	6860      	ldr	r0, [r4, #4]
 8014f18:	2100      	movs	r1, #0
 8014f1a:	8b22      	ldrh	r2, [r4, #24]
 8014f1c:	6803      	ldr	r3, [r0, #0]
 8014f1e:	9101      	str	r1, [sp, #4]
 8014f20:	8b61      	ldrh	r1, [r4, #26]
 8014f22:	9100      	str	r1, [sp, #0]
 8014f24:	6a1d      	ldr	r5, [r3, #32]
 8014f26:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8014f2a:	47a8      	blx	r5
 8014f2c:	6860      	ldr	r0, [r4, #4]
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	69db      	ldr	r3, [r3, #28]
 8014f32:	4798      	blx	r3
 8014f34:	b00e      	add	sp, #56	@ 0x38
 8014f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f3a:	bf00      	nop
 8014f3c:	42b40000 	.word	0x42b40000
 8014f40:	43340000 	.word	0x43340000
 8014f44:	43870000 	.word	0x43870000

08014f48 <_ZN8touchgfx9Matrix3x35resetEv>:
 8014f48:	2300      	movs	r3, #0
 8014f4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8014f4e:	6043      	str	r3, [r0, #4]
 8014f50:	6002      	str	r2, [r0, #0]
 8014f52:	6083      	str	r3, [r0, #8]
 8014f54:	60c3      	str	r3, [r0, #12]
 8014f56:	6102      	str	r2, [r0, #16]
 8014f58:	6143      	str	r3, [r0, #20]
 8014f5a:	6183      	str	r3, [r0, #24]
 8014f5c:	61c3      	str	r3, [r0, #28]
 8014f5e:	6202      	str	r2, [r0, #32]
 8014f60:	4770      	bx	lr

08014f62 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8014f62:	b508      	push	{r3, lr}
 8014f64:	f7ff fff0 	bl	8014f48 <_ZN8touchgfx9Matrix3x35resetEv>
 8014f68:	bd08      	pop	{r3, pc}

08014f6a <_ZN8touchgfx9Matrix3x35scaleEff>:
 8014f6a:	edd0 7a00 	vldr	s15, [r0]
 8014f6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f72:	edc0 7a00 	vstr	s15, [r0]
 8014f76:	edd0 7a01 	vldr	s15, [r0, #4]
 8014f7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014f82:	edd0 7a02 	vldr	s15, [r0, #8]
 8014f86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f8a:	edd0 7a03 	vldr	s15, [r0, #12]
 8014f8e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014f92:	ed80 0a02 	vstr	s0, [r0, #8]
 8014f96:	edc0 7a03 	vstr	s15, [r0, #12]
 8014f9a:	edd0 7a04 	vldr	s15, [r0, #16]
 8014f9e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014fa2:	edc0 7a04 	vstr	s15, [r0, #16]
 8014fa6:	edd0 7a05 	vldr	s15, [r0, #20]
 8014faa:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014fae:	edc0 0a05 	vstr	s1, [r0, #20]
 8014fb2:	4770      	bx	lr

08014fb4 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014fb4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8015048 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8014fb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014fbc:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801504c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014fc0:	b510      	push	{r4, lr}
 8014fc2:	ed2d 8b02 	vpush	{d8}
 8014fc6:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8014fca:	4604      	mov	r4, r0
 8014fcc:	eeb0 0a68 	vmov.f32	s0, s17
 8014fd0:	f00c ffba 	bl	8021f48 <cosf>
 8014fd4:	eeb0 8a40 	vmov.f32	s16, s0
 8014fd8:	eeb0 0a68 	vmov.f32	s0, s17
 8014fdc:	f00c fef0 	bl	8021dc0 <sinf>
 8014fe0:	edd4 6a03 	vldr	s13, [r4, #12]
 8014fe4:	edd4 4a00 	vldr	s9, [r4]
 8014fe8:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8014fec:	ed94 7a04 	vldr	s14, [r4, #16]
 8014ff0:	ed94 5a01 	vldr	s10, [r4, #4]
 8014ff4:	ee66 6a88 	vmul.f32	s13, s13, s16
 8014ff8:	edd4 5a02 	vldr	s11, [r4, #8]
 8014ffc:	eee8 7a24 	vfma.f32	s15, s16, s9
 8015000:	eee0 6a24 	vfma.f32	s13, s0, s9
 8015004:	edc4 7a00 	vstr	s15, [r4]
 8015008:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801500c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015010:	edc4 6a03 	vstr	s13, [r4, #12]
 8015014:	eee8 7a05 	vfma.f32	s15, s16, s10
 8015018:	eea0 7a05 	vfma.f32	s14, s0, s10
 801501c:	edc4 7a01 	vstr	s15, [r4, #4]
 8015020:	edd4 7a05 	vldr	s15, [r4, #20]
 8015024:	ed84 7a04 	vstr	s14, [r4, #16]
 8015028:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801502c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015030:	eea8 6a25 	vfma.f32	s12, s16, s11
 8015034:	eee0 7a25 	vfma.f32	s15, s0, s11
 8015038:	ecbd 8b02 	vpop	{d8}
 801503c:	ed84 6a02 	vstr	s12, [r4, #8]
 8015040:	edc4 7a05 	vstr	s15, [r4, #20]
 8015044:	bd10      	pop	{r4, pc}
 8015046:	bf00      	nop
 8015048:	40490fdb 	.word	0x40490fdb
 801504c:	43340000 	.word	0x43340000

08015050 <_ZN8touchgfx9Matrix3x39translateEff>:
 8015050:	ed90 6a06 	vldr	s12, [r0, #24]
 8015054:	edd0 7a00 	vldr	s15, [r0]
 8015058:	edd0 6a07 	vldr	s13, [r0, #28]
 801505c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8015060:	ed90 7a08 	vldr	s14, [r0, #32]
 8015064:	edc0 7a00 	vstr	s15, [r0]
 8015068:	edd0 7a01 	vldr	s15, [r0, #4]
 801506c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015070:	edc0 7a01 	vstr	s15, [r0, #4]
 8015074:	edd0 7a02 	vldr	s15, [r0, #8]
 8015078:	eee7 7a00 	vfma.f32	s15, s14, s0
 801507c:	edc0 7a02 	vstr	s15, [r0, #8]
 8015080:	edd0 7a03 	vldr	s15, [r0, #12]
 8015084:	eee6 7a20 	vfma.f32	s15, s12, s1
 8015088:	edc0 7a03 	vstr	s15, [r0, #12]
 801508c:	edd0 7a04 	vldr	s15, [r0, #16]
 8015090:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8015094:	edc0 7a04 	vstr	s15, [r0, #16]
 8015098:	edd0 7a05 	vldr	s15, [r0, #20]
 801509c:	eee7 7a20 	vfma.f32	s15, s14, s1
 80150a0:	edc0 7a05 	vstr	s15, [r0, #20]
 80150a4:	4770      	bx	lr

080150a6 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 80150a6:	edd0 6a01 	vldr	s13, [r0, #4]
 80150aa:	b084      	sub	sp, #16
 80150ac:	edd0 7a04 	vldr	s15, [r0, #16]
 80150b0:	ed90 7a03 	vldr	s14, [r0, #12]
 80150b4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80150b8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 80150bc:	edd0 6a00 	vldr	s13, [r0]
 80150c0:	eee7 7a00 	vfma.f32	s15, s14, s0
 80150c4:	ed90 7a05 	vldr	s14, [r0, #20]
 80150c8:	eee6 0a80 	vfma.f32	s1, s13, s0
 80150cc:	ed90 0a02 	vldr	s0, [r0, #8]
 80150d0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80150d4:	ee77 0a87 	vadd.f32	s1, s15, s14
 80150d8:	b004      	add	sp, #16
 80150da:	4770      	bx	lr

080150dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80150dc:	b530      	push	{r4, r5, lr}
 80150de:	8083      	strh	r3, [r0, #4]
 80150e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80150e4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80150e8:	80c3      	strh	r3, [r0, #6]
 80150ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80150ee:	6141      	str	r1, [r0, #20]
 80150f0:	7203      	strb	r3, [r0, #8]
 80150f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80150f6:	8302      	strh	r2, [r0, #24]
 80150f8:	7243      	strb	r3, [r0, #9]
 80150fa:	7a83      	ldrb	r3, [r0, #10]
 80150fc:	f365 0306 	bfi	r3, r5, #0, #7
 8015100:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015104:	f365 13c7 	bfi	r3, r5, #7, #1
 8015108:	7283      	strb	r3, [r0, #10]
 801510a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801510e:	72c3      	strb	r3, [r0, #11]
 8015110:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015114:	7303      	strb	r3, [r0, #12]
 8015116:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801511a:	81c3      	strh	r3, [r0, #14]
 801511c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015120:	8203      	strh	r3, [r0, #16]
 8015122:	4b01      	ldr	r3, [pc, #4]	@ (8015128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015124:	6003      	str	r3, [r0, #0]
 8015126:	bd30      	pop	{r4, r5, pc}
 8015128:	080262f8 	.word	0x080262f8

0801512c <_ZNK8touchgfx9ConstFont4findEt>:
 801512c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801512e:	6944      	ldr	r4, [r0, #20]
 8015130:	b3bc      	cbz	r4, 80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015132:	88a3      	ldrh	r3, [r4, #4]
 8015134:	8b02      	ldrh	r2, [r0, #24]
 8015136:	1acb      	subs	r3, r1, r3
 8015138:	f102 32ff 	add.w	r2, r2, #4294967295
 801513c:	d431      	bmi.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801513e:	4293      	cmp	r3, r2
 8015140:	dd0c      	ble.n	801515c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015142:	230e      	movs	r3, #14
 8015144:	fb03 4302 	mla	r3, r3, r2, r4
 8015148:	889b      	ldrh	r3, [r3, #4]
 801514a:	1a5b      	subs	r3, r3, r1
 801514c:	1ad3      	subs	r3, r2, r3
 801514e:	429a      	cmp	r2, r3
 8015150:	db27      	blt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015152:	2b00      	cmp	r3, #0
 8015154:	bfbc      	itt	lt
 8015156:	2302      	movlt	r3, #2
 8015158:	fb92 f3f3 	sdivlt	r3, r2, r3
 801515c:	2500      	movs	r5, #0
 801515e:	260e      	movs	r6, #14
 8015160:	4295      	cmp	r5, r2
 8015162:	dc1e      	bgt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015164:	fb06 4003 	mla	r0, r6, r3, r4
 8015168:	8887      	ldrh	r7, [r0, #4]
 801516a:	42b9      	cmp	r1, r7
 801516c:	d01a      	beq.n	80151a4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801516e:	d20d      	bcs.n	801518c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015170:	1e5a      	subs	r2, r3, #1
 8015172:	4295      	cmp	r5, r2
 8015174:	dc15      	bgt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015176:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801517a:	1a5b      	subs	r3, r3, r1
 801517c:	1ad3      	subs	r3, r2, r3
 801517e:	429a      	cmp	r2, r3
 8015180:	db0f      	blt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015182:	429d      	cmp	r5, r3
 8015184:	ddec      	ble.n	8015160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015186:	1953      	adds	r3, r2, r5
 8015188:	105b      	asrs	r3, r3, #1
 801518a:	e7e9      	b.n	8015160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801518c:	1c5d      	adds	r5, r3, #1
 801518e:	42aa      	cmp	r2, r5
 8015190:	db07      	blt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015192:	8a43      	ldrh	r3, [r0, #18]
 8015194:	1acb      	subs	r3, r1, r3
 8015196:	442b      	add	r3, r5
 8015198:	429d      	cmp	r5, r3
 801519a:	dc02      	bgt.n	80151a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801519c:	429a      	cmp	r2, r3
 801519e:	dadf      	bge.n	8015160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80151a0:	e7f1      	b.n	8015186 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80151a2:	2000      	movs	r0, #0
 80151a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80151a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a8:	4604      	mov	r4, r0
 80151aa:	4617      	mov	r7, r2
 80151ac:	461e      	mov	r6, r3
 80151ae:	b911      	cbnz	r1, 80151b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80151b0:	2500      	movs	r5, #0
 80151b2:	4628      	mov	r0, r5
 80151b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b6:	290a      	cmp	r1, #10
 80151b8:	d0fa      	beq.n	80151b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80151ba:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80151be:	4291      	cmp	r1, r2
 80151c0:	d0f6      	beq.n	80151b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80151c2:	f242 020b 	movw	r2, #8203	@ 0x200b
 80151c6:	4291      	cmp	r1, r2
 80151c8:	d0f2      	beq.n	80151b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80151ca:	f7ff ffaf 	bl	801512c <_ZNK8touchgfx9ConstFont4findEt>
 80151ce:	4605      	mov	r5, r0
 80151d0:	b950      	cbnz	r0, 80151e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80151d2:	6823      	ldr	r3, [r4, #0]
 80151d4:	4620      	mov	r0, r4
 80151d6:	691b      	ldr	r3, [r3, #16]
 80151d8:	4798      	blx	r3
 80151da:	4601      	mov	r1, r0
 80151dc:	4620      	mov	r0, r4
 80151de:	f7ff ffa5 	bl	801512c <_ZNK8touchgfx9ConstFont4findEt>
 80151e2:	4605      	mov	r5, r0
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d0e3      	beq.n	80151b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80151e8:	6823      	ldr	r3, [r4, #0]
 80151ea:	4629      	mov	r1, r5
 80151ec:	4620      	mov	r0, r4
 80151ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151f0:	4798      	blx	r3
 80151f2:	6038      	str	r0, [r7, #0]
 80151f4:	6823      	ldr	r3, [r4, #0]
 80151f6:	4620      	mov	r0, r4
 80151f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151fa:	4798      	blx	r3
 80151fc:	7030      	strb	r0, [r6, #0]
 80151fe:	e7d8      	b.n	80151b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015200 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	4605      	mov	r5, r0
 8015204:	f002 f8e2 	bl	80173cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015208:	4604      	mov	r4, r0
 801520a:	4628      	mov	r0, r5
 801520c:	f002 f822 	bl	8017254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015210:	2800      	cmp	r0, #0
 8015212:	bf14      	ite	ne
 8015214:	2002      	movne	r0, #2
 8015216:	2000      	moveq	r0, #0
 8015218:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801521c:	b280      	uxth	r0, r0
 801521e:	bd38      	pop	{r3, r4, r5, pc}

08015220 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4605      	mov	r5, r0
 8015224:	f002 f8d2 	bl	80173cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015228:	4604      	mov	r4, r0
 801522a:	4628      	mov	r0, r5
 801522c:	f002 f812 	bl	8017254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015230:	2800      	cmp	r0, #0
 8015232:	bf14      	ite	ne
 8015234:	2002      	movne	r0, #2
 8015236:	2000      	moveq	r0, #0
 8015238:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801523c:	f040 0001 	orr.w	r0, r0, #1
 8015240:	b280      	uxth	r0, r0
 8015242:	bd38      	pop	{r3, r4, r5, pc}

08015244 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015244:	2002      	movs	r0, #2
 8015246:	4770      	bx	lr

08015248 <_ZN8touchgfx6ScreenD1Ev>:
 8015248:	4770      	bx	lr

0801524a <_ZN8touchgfx12GestureEventD1Ev>:
 801524a:	4770      	bx	lr

0801524c <_ZN8touchgfx12GestureEventD0Ev>:
 801524c:	b510      	push	{r4, lr}
 801524e:	4604      	mov	r4, r0
 8015250:	210c      	movs	r1, #12
 8015252:	f00c fd40 	bl	8021cd6 <_ZdlPvj>
 8015256:	4620      	mov	r0, r4
 8015258:	bd10      	pop	{r4, pc}

0801525a <_ZN8touchgfx6ScreenD0Ev>:
 801525a:	b510      	push	{r4, lr}
 801525c:	4604      	mov	r4, r0
 801525e:	213c      	movs	r1, #60	@ 0x3c
 8015260:	f00c fd39 	bl	8021cd6 <_ZdlPvj>
 8015264:	4620      	mov	r0, r4
 8015266:	bd10      	pop	{r4, pc}

08015268 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015268:	b530      	push	{r4, r5, lr}
 801526a:	460d      	mov	r5, r1
 801526c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801526e:	b087      	sub	sp, #28
 8015270:	4604      	mov	r4, r0
 8015272:	b301      	cbz	r1, 80152b6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015274:	a801      	add	r0, sp, #4
 8015276:	f7ff fbfb 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801527a:	892a      	ldrh	r2, [r5, #8]
 801527c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015280:	7928      	ldrb	r0, [r5, #4]
 8015282:	1ad2      	subs	r2, r2, r3
 8015284:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015286:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801528a:	441a      	add	r2, r3
 801528c:	896b      	ldrh	r3, [r5, #10]
 801528e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015292:	f88d 0010 	strb.w	r0, [sp, #16]
 8015296:	1b5b      	subs	r3, r3, r5
 8015298:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801529a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801529c:	442b      	add	r3, r5
 801529e:	4d07      	ldr	r5, [pc, #28]	@ (80152bc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80152a0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80152a4:	a903      	add	r1, sp, #12
 80152a6:	9503      	str	r5, [sp, #12]
 80152a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80152ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152b0:	6803      	ldr	r3, [r0, #0]
 80152b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80152b4:	4798      	blx	r3
 80152b6:	b007      	add	sp, #28
 80152b8:	bd30      	pop	{r4, r5, pc}
 80152ba:	bf00      	nop
 80152bc:	08026360 	.word	0x08026360

080152c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80152c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80152c6:	b08a      	sub	sp, #40	@ 0x28
 80152c8:	4604      	mov	r4, r0
 80152ca:	460d      	mov	r5, r1
 80152cc:	b113      	cbz	r3, 80152d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80152ce:	790b      	ldrb	r3, [r1, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d044      	beq.n	801535e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80152d4:	f104 0804 	add.w	r8, r4, #4
 80152d8:	a803      	add	r0, sp, #12
 80152da:	4641      	mov	r1, r8
 80152dc:	f7ff fbc8 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152e0:	792b      	ldrb	r3, [r5, #4]
 80152e2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80152e6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80152ea:	b983      	cbnz	r3, 801530e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80152ec:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80152f0:	892a      	ldrh	r2, [r5, #8]
 80152f2:	88e9      	ldrh	r1, [r5, #6]
 80152f4:	4640      	mov	r0, r8
 80152f6:	1b92      	subs	r2, r2, r6
 80152f8:	9301      	str	r3, [sp, #4]
 80152fa:	1bc9      	subs	r1, r1, r7
 80152fc:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8015300:	b212      	sxth	r2, r2
 8015302:	9300      	str	r3, [sp, #0]
 8015304:	b209      	sxth	r1, r1
 8015306:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801530a:	f7f8 fb9d 	bl	800da48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801530e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015310:	b329      	cbz	r1, 801535e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015312:	a805      	add	r0, sp, #20
 8015314:	f7ff fbac 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015318:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801531c:	792b      	ldrb	r3, [r5, #4]
 801531e:	a907      	add	r1, sp, #28
 8015320:	1abf      	subs	r7, r7, r2
 8015322:	88ea      	ldrh	r2, [r5, #6]
 8015324:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015326:	4417      	add	r7, r2
 8015328:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801532a:	f88d 3020 	strb.w	r3, [sp, #32]
 801532e:	4417      	add	r7, r2
 8015330:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015334:	1ab6      	subs	r6, r6, r2
 8015336:	892a      	ldrh	r2, [r5, #8]
 8015338:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801533c:	4416      	add	r6, r2
 801533e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015340:	4416      	add	r6, r2
 8015342:	4a08      	ldr	r2, [pc, #32]	@ (8015364 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015344:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8015348:	2600      	movs	r6, #0
 801534a:	9207      	str	r2, [sp, #28]
 801534c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8015350:	6803      	ldr	r3, [r0, #0]
 8015352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015354:	4798      	blx	r3
 8015356:	792b      	ldrb	r3, [r5, #4]
 8015358:	b10b      	cbz	r3, 801535e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801535a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801535e:	b00a      	add	sp, #40	@ 0x28
 8015360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015364:	08025f20 	.word	0x08025f20

08015368 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536c:	460c      	mov	r4, r1
 801536e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015370:	b088      	sub	sp, #32
 8015372:	4605      	mov	r5, r0
 8015374:	2900      	cmp	r1, #0
 8015376:	d06d      	beq.n	8015454 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015378:	4668      	mov	r0, sp
 801537a:	f7ff fb79 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801537e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8015380:	88e3      	ldrh	r3, [r4, #6]
 8015382:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015386:	440b      	add	r3, r1
 8015388:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801538c:	b21b      	sxth	r3, r3
 801538e:	4543      	cmp	r3, r8
 8015390:	db31      	blt.n	80153f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015392:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015396:	44c4      	add	ip, r8
 8015398:	fa0f fc8c 	sxth.w	ip, ip
 801539c:	4563      	cmp	r3, ip
 801539e:	da2a      	bge.n	80153f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80153a0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80153a2:	8926      	ldrh	r6, [r4, #8]
 80153a4:	4416      	add	r6, r2
 80153a6:	b236      	sxth	r6, r6
 80153a8:	42be      	cmp	r6, r7
 80153aa:	db24      	blt.n	80153f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80153ac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80153b0:	4438      	add	r0, r7
 80153b2:	b200      	sxth	r0, r0
 80153b4:	4286      	cmp	r6, r0
 80153b6:	da1e      	bge.n	80153f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80153b8:	8963      	ldrh	r3, [r4, #10]
 80153ba:	4419      	add	r1, r3
 80153bc:	b209      	sxth	r1, r1
 80153be:	4541      	cmp	r1, r8
 80153c0:	db08      	blt.n	80153d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80153c2:	4561      	cmp	r1, ip
 80153c4:	da06      	bge.n	80153d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80153c6:	89a3      	ldrh	r3, [r4, #12]
 80153c8:	441a      	add	r2, r3
 80153ca:	b212      	sxth	r2, r2
 80153cc:	42ba      	cmp	r2, r7
 80153ce:	db01      	blt.n	80153d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80153d0:	4282      	cmp	r2, r0
 80153d2:	db10      	blt.n	80153f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80153d4:	4b21      	ldr	r3, [pc, #132]	@ (801545c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80153d6:	a904      	add	r1, sp, #16
 80153d8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80153da:	9304      	str	r3, [sp, #16]
 80153dc:	2302      	movs	r3, #2
 80153de:	f88d 3014 	strb.w	r3, [sp, #20]
 80153e2:	2300      	movs	r3, #0
 80153e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80153ec:	f8ad 301a 	strh.w	r3, [sp, #26]
 80153f0:	6803      	ldr	r3, [r0, #0]
 80153f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153f4:	4798      	blx	r3
 80153f6:	1d29      	adds	r1, r5, #4
 80153f8:	a802      	add	r0, sp, #8
 80153fa:	f7ff fb39 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015402:	88e0      	ldrh	r0, [r4, #6]
 8015404:	eba3 0808 	sub.w	r8, r3, r8
 8015408:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801540c:	7921      	ldrb	r1, [r4, #4]
 801540e:	fa1f f888 	uxth.w	r8, r8
 8015412:	1bdf      	subs	r7, r3, r7
 8015414:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8015418:	b2bb      	uxth	r3, r7
 801541a:	4440      	add	r0, r8
 801541c:	8922      	ldrh	r2, [r4, #8]
 801541e:	8967      	ldrh	r7, [r4, #10]
 8015420:	4460      	add	r0, ip
 8015422:	89a4      	ldrh	r4, [r4, #12]
 8015424:	441a      	add	r2, r3
 8015426:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8015428:	44b8      	add	r8, r7
 801542a:	4423      	add	r3, r4
 801542c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015430:	4432      	add	r2, r6
 8015432:	44e0      	add	r8, ip
 8015434:	4433      	add	r3, r6
 8015436:	4c0a      	ldr	r4, [pc, #40]	@ (8015460 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015438:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801543a:	f88d 1014 	strb.w	r1, [sp, #20]
 801543e:	a904      	add	r1, sp, #16
 8015440:	9404      	str	r4, [sp, #16]
 8015442:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015446:	f8ad 801a 	strh.w	r8, [sp, #26]
 801544a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801544e:	6803      	ldr	r3, [r0, #0]
 8015450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015452:	4798      	blx	r3
 8015454:	b008      	add	sp, #32
 8015456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545a:	bf00      	nop
 801545c:	08025f20 	.word	0x08025f20
 8015460:	08025f34 	.word	0x08025f34

08015464 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015466:	4604      	mov	r4, r0
 8015468:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801546c:	3201      	adds	r2, #1
 801546e:	d112      	bne.n	8015496 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015470:	2500      	movs	r5, #0
 8015472:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015476:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801547a:	6803      	ldr	r3, [r0, #0]
 801547c:	9500      	str	r5, [sp, #0]
 801547e:	466d      	mov	r5, sp
 8015480:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015484:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015488:	4629      	mov	r1, r5
 801548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801548c:	4798      	blx	r3
 801548e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015492:	e884 0003 	stmia.w	r4, {r0, r1}
 8015496:	4620      	mov	r0, r4
 8015498:	b003      	add	sp, #12
 801549a:	bd30      	pop	{r4, r5, pc}

0801549c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801549c:	b513      	push	{r0, r1, r4, lr}
 801549e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80154a2:	4604      	mov	r4, r0
 80154a4:	3301      	adds	r3, #1
 80154a6:	d109      	bne.n	80154bc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80154a8:	4601      	mov	r1, r0
 80154aa:	4668      	mov	r0, sp
 80154ac:	f7ff fae0 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80154b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80154b4:	8423      	strh	r3, [r4, #32]
 80154b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80154ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 80154bc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80154c0:	b002      	add	sp, #8
 80154c2:	bd10      	pop	{r4, pc}

080154c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80154c4:	b513      	push	{r0, r1, r4, lr}
 80154c6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80154ca:	4604      	mov	r4, r0
 80154cc:	3301      	adds	r3, #1
 80154ce:	d109      	bne.n	80154e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80154d0:	4601      	mov	r1, r0
 80154d2:	4668      	mov	r0, sp
 80154d4:	f7ff facc 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80154d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80154dc:	8423      	strh	r3, [r4, #32]
 80154de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80154e2:	8463      	strh	r3, [r4, #34]	@ 0x22
 80154e4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80154e8:	b002      	add	sp, #8
 80154ea:	bd10      	pop	{r4, pc}

080154ec <_ZN8touchgfx6ScreenC1Ev>:
 80154ec:	b570      	push	{r4, r5, r6, lr}
 80154ee:	4b17      	ldr	r3, [pc, #92]	@ (801554c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80154f0:	4605      	mov	r5, r0
 80154f2:	4a17      	ldr	r2, [pc, #92]	@ (8015550 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80154f4:	2101      	movs	r1, #1
 80154f6:	f845 3b04 	str.w	r3, [r5], #4
 80154fa:	2300      	movs	r3, #0
 80154fc:	6042      	str	r2, [r0, #4]
 80154fe:	4604      	mov	r4, r0
 8015500:	8103      	strh	r3, [r0, #8]
 8015502:	8143      	strh	r3, [r0, #10]
 8015504:	8183      	strh	r3, [r0, #12]
 8015506:	81c3      	strh	r3, [r0, #14]
 8015508:	8203      	strh	r3, [r0, #16]
 801550a:	8243      	strh	r3, [r0, #18]
 801550c:	8283      	strh	r3, [r0, #20]
 801550e:	82c3      	strh	r3, [r0, #22]
 8015510:	6203      	str	r3, [r0, #32]
 8015512:	8483      	strh	r3, [r0, #36]	@ 0x24
 8015514:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015516:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801551a:	6343      	str	r3, [r0, #52]	@ 0x34
 801551c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8015520:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015524:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8015528:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801552c:	4b09      	ldr	r3, [pc, #36]	@ (8015554 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801552e:	4628      	mov	r0, r5
 8015530:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015534:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8015536:	4a08      	ldr	r2, [pc, #32]	@ (8015558 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8015538:	f9b2 1000 	ldrsh.w	r1, [r2]
 801553c:	4798      	blx	r3
 801553e:	6863      	ldr	r3, [r4, #4]
 8015540:	4628      	mov	r0, r5
 8015542:	4631      	mov	r1, r6
 8015544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015546:	4798      	blx	r3
 8015548:	4620      	mov	r0, r4
 801554a:	bd70      	pop	{r4, r5, r6, pc}
 801554c:	08026374 	.word	0x08026374
 8015550:	08025e90 	.word	0x08025e90
 8015554:	2402849a 	.word	0x2402849a
 8015558:	24028498 	.word	0x24028498

0801555c <_ZN8touchgfx6Screen4drawEv>:
 801555c:	4b09      	ldr	r3, [pc, #36]	@ (8015584 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801555e:	b507      	push	{r0, r1, r2, lr}
 8015560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015564:	2100      	movs	r1, #0
 8015566:	4b08      	ldr	r3, [pc, #32]	@ (8015588 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015568:	9100      	str	r1, [sp, #0]
 801556a:	4669      	mov	r1, sp
 801556c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015570:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015574:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015578:	6803      	ldr	r3, [r0, #0]
 801557a:	689b      	ldr	r3, [r3, #8]
 801557c:	4798      	blx	r3
 801557e:	b003      	add	sp, #12
 8015580:	f85d fb04 	ldr.w	pc, [sp], #4
 8015584:	24028498 	.word	0x24028498
 8015588:	2402849a 	.word	0x2402849a

0801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015590:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015594:	b089      	sub	sp, #36	@ 0x24
 8015596:	4680      	mov	r8, r0
 8015598:	460c      	mov	r4, r1
 801559a:	2b00      	cmp	r3, #0
 801559c:	4615      	mov	r5, r2
 801559e:	dd0e      	ble.n	80155be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80155a0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd0a      	ble.n	80155be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80155a8:	4628      	mov	r0, r5
 80155aa:	f7ff ff5b 	bl	8015464 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80155ae:	4621      	mov	r1, r4
 80155b0:	f7fe f8b1 	bl	8013716 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80155b4:	69eb      	ldr	r3, [r5, #28]
 80155b6:	b928      	cbnz	r0, 80155c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80155b8:	461d      	mov	r5, r3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1f4      	bne.n	80155a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80155be:	b009      	add	sp, #36	@ 0x24
 80155c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155c4:	ae04      	add	r6, sp, #16
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f000 80b5 	beq.w	8015736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80155cc:	682b      	ldr	r3, [r5, #0]
 80155ce:	4629      	mov	r1, r5
 80155d0:	a802      	add	r0, sp, #8
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	4798      	blx	r3
 80155d6:	4628      	mov	r0, r5
 80155d8:	f7ff ff60 	bl	801549c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80155dc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80155e0:	4407      	add	r7, r0
 80155e2:	4628      	mov	r0, r5
 80155e4:	f7ff ff6e 	bl	80154c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80155e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80155ec:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80155f0:	b23f      	sxth	r7, r7
 80155f2:	4418      	add	r0, r3
 80155f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80155f8:	4621      	mov	r1, r4
 80155fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80155fe:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015602:	4630      	mov	r0, r6
 8015604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015608:	f8ad 7010 	strh.w	r7, [sp, #16]
 801560c:	f7f8 fafe 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 8015610:	4628      	mov	r0, r5
 8015612:	f7ff ff27 	bl	8015464 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015616:	ab06      	add	r3, sp, #24
 8015618:	4602      	mov	r2, r0
 801561a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801561e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015622:	4611      	mov	r1, r2
 8015624:	4618      	mov	r0, r3
 8015626:	f7f8 faf1 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 801562a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801562e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015632:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8015636:	4299      	cmp	r1, r3
 8015638:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801563c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015640:	d10b      	bne.n	801565a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015642:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015646:	4552      	cmp	r2, sl
 8015648:	d107      	bne.n	801565a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801564a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801564e:	455a      	cmp	r2, fp
 8015650:	d103      	bne.n	801565a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015652:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015656:	454a      	cmp	r2, r9
 8015658:	d06d      	beq.n	8015736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801565a:	f1bb 0f00 	cmp.w	fp, #0
 801565e:	dd65      	ble.n	801572c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015660:	f1b9 0f00 	cmp.w	r9, #0
 8015664:	dd62      	ble.n	801572c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015666:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801566a:	fa1f f08a 	uxth.w	r0, sl
 801566e:	4552      	cmp	r2, sl
 8015670:	9000      	str	r0, [sp, #0]
 8015672:	da12      	bge.n	801569a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	9b00      	ldr	r3, [sp, #0]
 8015678:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801567c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015680:	1a9a      	subs	r2, r3, r2
 8015682:	f8ad 1010 	strh.w	r1, [sp, #16]
 8015686:	4631      	mov	r1, r6
 8015688:	f8ad 0014 	strh.w	r0, [sp, #20]
 801568c:	4640      	mov	r0, r8
 801568e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8015692:	69ea      	ldr	r2, [r5, #28]
 8015694:	f7ff ff7a 	bl	801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015698:	9b01      	ldr	r3, [sp, #4]
 801569a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801569e:	b29f      	uxth	r7, r3
 80156a0:	429a      	cmp	r2, r3
 80156a2:	da0d      	bge.n	80156c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80156a4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80156a8:	1aba      	subs	r2, r7, r2
 80156aa:	f8ad a012 	strh.w	sl, [sp, #18]
 80156ae:	4631      	mov	r1, r6
 80156b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80156b4:	4640      	mov	r0, r8
 80156b6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80156ba:	69ea      	ldr	r2, [r5, #28]
 80156bc:	f7ff ff66 	bl	801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80156c0:	8822      	ldrh	r2, [r4, #0]
 80156c2:	445f      	add	r7, fp
 80156c4:	88a3      	ldrh	r3, [r4, #4]
 80156c6:	b2bf      	uxth	r7, r7
 80156c8:	4413      	add	r3, r2
 80156ca:	b23a      	sxth	r2, r7
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	b219      	sxth	r1, r3
 80156d0:	4291      	cmp	r1, r2
 80156d2:	dd0d      	ble.n	80156f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80156d4:	1bdb      	subs	r3, r3, r7
 80156d6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80156da:	f8ad a012 	strh.w	sl, [sp, #18]
 80156de:	4631      	mov	r1, r6
 80156e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156e4:	4640      	mov	r0, r8
 80156e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80156ea:	69ea      	ldr	r2, [r5, #28]
 80156ec:	f7ff ff4e 	bl	801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80156f0:	88e2      	ldrh	r2, [r4, #6]
 80156f2:	8863      	ldrh	r3, [r4, #2]
 80156f4:	4413      	add	r3, r2
 80156f6:	9a00      	ldr	r2, [sp, #0]
 80156f8:	444a      	add	r2, r9
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	fa1f f982 	uxth.w	r9, r2
 8015700:	b219      	sxth	r1, r3
 8015702:	fa0f f289 	sxth.w	r2, r9
 8015706:	428a      	cmp	r2, r1
 8015708:	da15      	bge.n	8015736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801570a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801570e:	eba3 0309 	sub.w	r3, r3, r9
 8015712:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015716:	f8ad 1014 	strh.w	r1, [sp, #20]
 801571a:	4631      	mov	r1, r6
 801571c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015720:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015724:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015728:	69ea      	ldr	r2, [r5, #28]
 801572a:	e001      	b.n	8015730 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801572c:	69ea      	ldr	r2, [r5, #28]
 801572e:	4621      	mov	r1, r4
 8015730:	4640      	mov	r0, r8
 8015732:	f7ff ff2b 	bl	801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015736:	4628      	mov	r0, r5
 8015738:	f7ff fe94 	bl	8015464 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801573c:	6861      	ldr	r1, [r4, #4]
 801573e:	4602      	mov	r2, r0
 8015740:	4633      	mov	r3, r6
 8015742:	6820      	ldr	r0, [r4, #0]
 8015744:	c303      	stmia	r3!, {r0, r1}
 8015746:	4611      	mov	r1, r2
 8015748:	4630      	mov	r0, r6
 801574a:	f7f8 fa5f 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 801574e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015752:	2b00      	cmp	r3, #0
 8015754:	f77f af33 	ble.w	80155be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015758:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801575c:	2b00      	cmp	r3, #0
 801575e:	f77f af2e 	ble.w	80155be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015762:	4628      	mov	r0, r5
 8015764:	f7ff fe9a 	bl	801549c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015768:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801576c:	1a18      	subs	r0, r3, r0
 801576e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015772:	4628      	mov	r0, r5
 8015774:	f7ff fea6 	bl	80154c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015778:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801577c:	4631      	mov	r1, r6
 801577e:	1a18      	subs	r0, r3, r0
 8015780:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015784:	4628      	mov	r0, r5
 8015786:	682b      	ldr	r3, [r5, #0]
 8015788:	689b      	ldr	r3, [r3, #8]
 801578a:	4798      	blx	r3
 801578c:	e717      	b.n	80155be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801578e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801578e:	b570      	push	{r4, r5, r6, lr}
 8015790:	1d06      	adds	r6, r0, #4
 8015792:	b086      	sub	sp, #24
 8015794:	460c      	mov	r4, r1
 8015796:	2300      	movs	r3, #0
 8015798:	4631      	mov	r1, r6
 801579a:	4605      	mov	r5, r0
 801579c:	a802      	add	r0, sp, #8
 801579e:	9301      	str	r3, [sp, #4]
 80157a0:	f7ff f966 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80157a8:	8822      	ldrh	r2, [r4, #0]
 80157aa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80157ae:	1ad2      	subs	r2, r2, r3
 80157b0:	8863      	ldrh	r3, [r4, #2]
 80157b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80157b6:	1a5b      	subs	r3, r3, r1
 80157b8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80157bc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80157c0:	aa01      	add	r2, sp, #4
 80157c2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80157c6:	4630      	mov	r0, r6
 80157c8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80157cc:	a904      	add	r1, sp, #16
 80157ce:	f8ad 3012 	strh.w	r3, [sp, #18]
 80157d2:	f7f8 faf3 	bl	800ddbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80157d6:	9a01      	ldr	r2, [sp, #4]
 80157d8:	b11a      	cbz	r2, 80157e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80157da:	4621      	mov	r1, r4
 80157dc:	4628      	mov	r0, r5
 80157de:	f7ff fed5 	bl	801558c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80157e2:	b006      	add	sp, #24
 80157e4:	bd70      	pop	{r4, r5, r6, pc}

080157e6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80157e6:	4602      	mov	r2, r0
 80157e8:	b530      	push	{r4, r5, lr}
 80157ea:	4604      	mov	r4, r0
 80157ec:	b085      	sub	sp, #20
 80157ee:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80157f2:	460d      	mov	r5, r1
 80157f4:	466b      	mov	r3, sp
 80157f6:	6851      	ldr	r1, [r2, #4]
 80157f8:	c303      	stmia	r3!, {r0, r1}
 80157fa:	4629      	mov	r1, r5
 80157fc:	4668      	mov	r0, sp
 80157fe:	f7f8 fa05 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 8015802:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015806:	b12b      	cbz	r3, 8015814 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8015808:	4669      	mov	r1, sp
 801580a:	4620      	mov	r0, r4
 801580c:	f7ff ffbf 	bl	801578e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8015810:	b005      	add	sp, #20
 8015812:	bd30      	pop	{r4, r5, pc}
 8015814:	3404      	adds	r4, #4
 8015816:	a802      	add	r0, sp, #8
 8015818:	4621      	mov	r1, r4
 801581a:	f7ff f929 	bl	8014a70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801581e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015822:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8015826:	4669      	mov	r1, sp
 8015828:	4620      	mov	r0, r4
 801582a:	1a9b      	subs	r3, r3, r2
 801582c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015830:	f8ad 3000 	strh.w	r3, [sp]
 8015834:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015838:	1a9b      	subs	r3, r3, r2
 801583a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801583e:	f7f8 fa84 	bl	800dd4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015842:	e7e5      	b.n	8015810 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015844 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015844:	460b      	mov	r3, r1
 8015846:	680a      	ldr	r2, [r1, #0]
 8015848:	1d01      	adds	r1, r0, #4
 801584a:	6992      	ldr	r2, [r2, #24]
 801584c:	4618      	mov	r0, r3
 801584e:	4710      	bx	r2

08015850 <_ZN8touchgfx12TextProviderC1Ev>:
 8015850:	b538      	push	{r3, r4, r5, lr}
 8015852:	2500      	movs	r5, #0
 8015854:	2302      	movs	r3, #2
 8015856:	4604      	mov	r4, r0
 8015858:	220e      	movs	r2, #14
 801585a:	7403      	strb	r3, [r0, #16]
 801585c:	4629      	mov	r1, r5
 801585e:	6145      	str	r5, [r0, #20]
 8015860:	7605      	strb	r5, [r0, #24]
 8015862:	83c5      	strh	r5, [r0, #30]
 8015864:	8405      	strh	r5, [r0, #32]
 8015866:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8015868:	8705      	strh	r5, [r0, #56]	@ 0x38
 801586a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801586c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8015870:	e9c0 5500 	strd	r5, r5, [r0]
 8015874:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8015878:	304c      	adds	r0, #76	@ 0x4c
 801587a:	f00d f841 	bl	8022900 <memset>
 801587e:	2301      	movs	r3, #1
 8015880:	4620      	mov	r0, r4
 8015882:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8015886:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801588a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801588e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8015892:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8015896:	f7ee fd0f 	bl	80042b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801589a:	4620      	mov	r0, r4
 801589c:	bd38      	pop	{r3, r4, r5, pc}

0801589e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801589e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80158a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80158a4:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80158a6:	fab0 f080 	clz	r0, r0
 80158aa:	0940      	lsrs	r0, r0, #5
 80158ac:	4770      	bx	lr

080158ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80158ae:	b530      	push	{r4, r5, lr}
 80158b0:	2500      	movs	r5, #0
 80158b2:	2401      	movs	r4, #1
 80158b4:	6843      	ldr	r3, [r0, #4]
 80158b6:	b913      	cbnz	r3, 80158be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80158b8:	6803      	ldr	r3, [r0, #0]
 80158ba:	b313      	cbz	r3, 8015902 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80158bc:	6043      	str	r3, [r0, #4]
 80158be:	7e03      	ldrb	r3, [r0, #24]
 80158c0:	b143      	cbz	r3, 80158d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80158c2:	6943      	ldr	r3, [r0, #20]
 80158c4:	b12b      	cbz	r3, 80158d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80158c6:	881a      	ldrh	r2, [r3, #0]
 80158c8:	b11a      	cbz	r2, 80158d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80158ca:	1c9a      	adds	r2, r3, #2
 80158cc:	6142      	str	r2, [r0, #20]
 80158ce:	8818      	ldrh	r0, [r3, #0]
 80158d0:	bd30      	pop	{r4, r5, pc}
 80158d2:	7605      	strb	r5, [r0, #24]
 80158d4:	6843      	ldr	r3, [r0, #4]
 80158d6:	8819      	ldrh	r1, [r3, #0]
 80158d8:	b199      	cbz	r1, 8015902 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80158da:	1c9a      	adds	r2, r3, #2
 80158dc:	2902      	cmp	r1, #2
 80158de:	6042      	str	r2, [r0, #4]
 80158e0:	d1f5      	bne.n	80158ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80158e2:	7c03      	ldrb	r3, [r0, #16]
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d8e5      	bhi.n	80158b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80158e8:	1c5a      	adds	r2, r3, #1
 80158ea:	3302      	adds	r3, #2
 80158ec:	7402      	strb	r2, [r0, #16]
 80158ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80158f2:	6143      	str	r3, [r0, #20]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d0dd      	beq.n	80158b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d0da      	beq.n	80158b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80158fe:	7604      	strb	r4, [r0, #24]
 8015900:	e7d8      	b.n	80158b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015902:	2000      	movs	r0, #0
 8015904:	e7e4      	b.n	80158d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8015906:	6001      	str	r1, [r0, #0]
 8015908:	2100      	movs	r1, #0
 801590a:	b430      	push	{r4, r5}
 801590c:	6041      	str	r1, [r0, #4]
 801590e:	6815      	ldr	r5, [r2, #0]
 8015910:	6085      	str	r5, [r0, #8]
 8015912:	6852      	ldr	r2, [r2, #4]
 8015914:	6443      	str	r3, [r0, #68]	@ 0x44
 8015916:	9b02      	ldr	r3, [sp, #8]
 8015918:	60c2      	str	r2, [r0, #12]
 801591a:	7401      	strb	r1, [r0, #16]
 801591c:	6141      	str	r1, [r0, #20]
 801591e:	7601      	strb	r1, [r0, #24]
 8015920:	8701      	strh	r1, [r0, #56]	@ 0x38
 8015922:	8401      	strh	r1, [r0, #32]
 8015924:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8015928:	6483      	str	r3, [r0, #72]	@ 0x48
 801592a:	bc30      	pop	{r4, r5}
 801592c:	f7ee bcc4 	b.w	80042b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015930 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8015930:	b408      	push	{r3}
 8015932:	b510      	push	{r4, lr}
 8015934:	b085      	sub	sp, #20
 8015936:	ac07      	add	r4, sp, #28
 8015938:	f854 3b04 	ldr.w	r3, [r4], #4
 801593c:	9300      	str	r3, [sp, #0]
 801593e:	4613      	mov	r3, r2
 8015940:	4622      	mov	r2, r4
 8015942:	9403      	str	r4, [sp, #12]
 8015944:	f7ff ffdf 	bl	8015906 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015948:	b005      	add	sp, #20
 801594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801594e:	b001      	add	sp, #4
 8015950:	4770      	bx	lr

08015952 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015954:	4605      	mov	r5, r0
 8015956:	4608      	mov	r0, r1
 8015958:	b1f1      	cbz	r1, 8015998 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801595a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801595e:	460b      	mov	r3, r1
 8015960:	f101 0708 	add.w	r7, r1, #8
 8015964:	4622      	mov	r2, r4
 8015966:	6818      	ldr	r0, [r3, #0]
 8015968:	3308      	adds	r3, #8
 801596a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801596e:	4626      	mov	r6, r4
 8015970:	42bb      	cmp	r3, r7
 8015972:	c603      	stmia	r6!, {r0, r1}
 8015974:	4634      	mov	r4, r6
 8015976:	d1f6      	bne.n	8015966 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015978:	6818      	ldr	r0, [r3, #0]
 801597a:	6030      	str	r0, [r6, #0]
 801597c:	4610      	mov	r0, r2
 801597e:	889b      	ldrh	r3, [r3, #4]
 8015980:	80b3      	strh	r3, [r6, #4]
 8015982:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8015986:	015b      	lsls	r3, r3, #5
 8015988:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801598c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8015990:	430b      	orrs	r3, r1
 8015992:	425b      	negs	r3, r3
 8015994:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8015998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801599a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801599a:	b538      	push	{r3, r4, r5, lr}
 801599c:	460c      	mov	r4, r1
 801599e:	6811      	ldr	r1, [r2, #0]
 80159a0:	4610      	mov	r0, r2
 80159a2:	68cd      	ldr	r5, [r1, #12]
 80159a4:	4619      	mov	r1, r3
 80159a6:	47a8      	blx	r5
 80159a8:	2800      	cmp	r0, #0
 80159aa:	bf08      	it	eq
 80159ac:	4620      	moveq	r0, r4
 80159ae:	bd38      	pop	{r3, r4, r5, pc}

080159b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80159b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b4:	468c      	mov	ip, r1
 80159b6:	4604      	mov	r4, r0
 80159b8:	4615      	mov	r5, r2
 80159ba:	b942      	cbnz	r2, 80159ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 80159bc:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80159c0:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80159c4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80159c8:	4628      	mov	r0, r5
 80159ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ce:	7b50      	ldrb	r0, [r2, #13]
 80159d0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 80159d4:	8893      	ldrh	r3, [r2, #4]
 80159d6:	0106      	lsls	r6, r0, #4
 80159d8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80159dc:	79ee      	ldrb	r6, [r5, #7]
 80159de:	4316      	orrs	r6, r2
 80159e0:	185a      	adds	r2, r3, r1
 80159e2:	b291      	uxth	r1, r2
 80159e4:	b2b7      	uxth	r7, r6
 80159e6:	291d      	cmp	r1, #29
 80159e8:	d87f      	bhi.n	8015aea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80159ea:	2201      	movs	r2, #1
 80159ec:	10f6      	asrs	r6, r6, #3
 80159ee:	408a      	lsls	r2, r1
 80159f0:	4974      	ldr	r1, [pc, #464]	@ (8015bc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80159f2:	420a      	tst	r2, r1
 80159f4:	d12e      	bne.n	8015a54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80159f6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 80159fa:	d076      	beq.n	8015aea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80159fc:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8015a00:	462b      	mov	r3, r5
 8015a02:	f105 0e08 	add.w	lr, r5, #8
 8015a06:	4615      	mov	r5, r2
 8015a08:	6818      	ldr	r0, [r3, #0]
 8015a0a:	3308      	adds	r3, #8
 8015a0c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015a10:	4694      	mov	ip, r2
 8015a12:	4573      	cmp	r3, lr
 8015a14:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015a18:	4662      	mov	r2, ip
 8015a1a:	d1f5      	bne.n	8015a08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8015a1c:	6818      	ldr	r0, [r3, #0]
 8015a1e:	f8cc 0000 	str.w	r0, [ip]
 8015a22:	889b      	ldrh	r3, [r3, #4]
 8015a24:	f8ac 3004 	strh.w	r3, [ip, #4]
 8015a28:	b2b3      	uxth	r3, r6
 8015a2a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8015a2e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8015a32:	1aca      	subs	r2, r1, r3
 8015a34:	1bcf      	subs	r7, r1, r7
 8015a36:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8015a3a:	b292      	uxth	r2, r2
 8015a3c:	1afb      	subs	r3, r7, r3
 8015a3e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8015a42:	10d2      	asrs	r2, r2, #3
 8015a44:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8015a48:	4302      	orrs	r2, r0
 8015a4a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8015a4e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8015a52:	e7b9      	b.n	80159c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8015a54:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8015a58:	462b      	mov	r3, r5
 8015a5a:	f105 0808 	add.w	r8, r5, #8
 8015a5e:	4615      	mov	r5, r2
 8015a60:	6818      	ldr	r0, [r3, #0]
 8015a62:	3308      	adds	r3, #8
 8015a64:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015a68:	4696      	mov	lr, r2
 8015a6a:	4543      	cmp	r3, r8
 8015a6c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015a70:	4672      	mov	r2, lr
 8015a72:	d1f5      	bne.n	8015a60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8015a74:	6818      	ldr	r0, [r3, #0]
 8015a76:	f8ce 0000 	str.w	r0, [lr]
 8015a7a:	889b      	ldrh	r3, [r3, #4]
 8015a7c:	f8ae 3004 	strh.w	r3, [lr, #4]
 8015a80:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8015a82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015a86:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8015a88:	f640 6333 	movw	r3, #3635	@ 0xe33
 8015a8c:	4299      	cmp	r1, r3
 8015a8e:	d111      	bne.n	8015ab4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8015a90:	f8dc 3000 	ldr.w	r3, [ip]
 8015a94:	4660      	mov	r0, ip
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	4798      	blx	r3
 8015a9a:	7b41      	ldrb	r1, [r0, #13]
 8015a9c:	00cb      	lsls	r3, r1, #3
 8015a9e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015aa2:	7a03      	ldrb	r3, [r0, #8]
 8015aa4:	4313      	orrs	r3, r2
 8015aa6:	064a      	lsls	r2, r1, #25
 8015aa8:	bf44      	itt	mi
 8015aaa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015aae:	b21b      	sxthmi	r3, r3
 8015ab0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015ab4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8015ab8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015abc:	443b      	add	r3, r7
 8015abe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015ac2:	4433      	add	r3, r6
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015aca:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015ace:	10db      	asrs	r3, r3, #3
 8015ad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ad4:	4313      	orrs	r3, r2
 8015ad6:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8015ada:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015ade:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8015ae2:	1a9b      	subs	r3, r3, r2
 8015ae4:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8015ae8:	e76e      	b.n	80159c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8015aea:	f023 0204 	bic.w	r2, r3, #4
 8015aee:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8015af2:	428a      	cmp	r2, r1
 8015af4:	d003      	beq.n	8015afe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8015af6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d120      	bne.n	8015b40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 8015afe:	3b01      	subs	r3, #1
 8015b00:	4662      	mov	r2, ip
 8015b02:	4629      	mov	r1, r5
 8015b04:	4620      	mov	r0, r4
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	f7ff ff47 	bl	801599a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015b0c:	7b41      	ldrb	r1, [r0, #13]
 8015b0e:	00cb      	lsls	r3, r1, #3
 8015b10:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015b14:	7a03      	ldrb	r3, [r0, #8]
 8015b16:	0648      	lsls	r0, r1, #25
 8015b18:	ea43 0302 	orr.w	r3, r3, r2
 8015b1c:	bf44      	itt	mi
 8015b1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015b22:	b21b      	sxthmi	r3, r3
 8015b24:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015b28:	7b6b      	ldrb	r3, [r5, #13]
 8015b2a:	7aaa      	ldrb	r2, [r5, #10]
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b32:	4313      	orrs	r3, r2
 8015b34:	115a      	asrs	r2, r3, #5
 8015b36:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015b3a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8015b3e:	e032      	b.n	8015ba6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8015b40:	00c2      	lsls	r2, r0, #3
 8015b42:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8015b46:	7a2a      	ldrb	r2, [r5, #8]
 8015b48:	430a      	orrs	r2, r1
 8015b4a:	0641      	lsls	r1, r0, #25
 8015b4c:	f640 6109 	movw	r1, #3593	@ 0xe09
 8015b50:	bf44      	itt	mi
 8015b52:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8015b56:	b212      	sxthmi	r2, r2
 8015b58:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8015b5c:	f023 0210 	bic.w	r2, r3, #16
 8015b60:	428a      	cmp	r2, r1
 8015b62:	d003      	beq.n	8015b6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8015b64:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d129      	bne.n	8015bc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 8015b6c:	7b6e      	ldrb	r6, [r5, #13]
 8015b6e:	4629      	mov	r1, r5
 8015b70:	4620      	mov	r0, r4
 8015b72:	0076      	lsls	r6, r6, #1
 8015b74:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8015b78:	7aae      	ldrb	r6, [r5, #10]
 8015b7a:	4316      	orrs	r6, r2
 8015b7c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015b80:	4293      	cmp	r3, r2
 8015b82:	4662      	mov	r2, ip
 8015b84:	bf16      	itet	ne
 8015b86:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015b8a:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8015b8e:	b29b      	uxthne	r3, r3
 8015b90:	f7ff ff03 	bl	801599a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015b94:	7b43      	ldrb	r3, [r0, #13]
 8015b96:	7a82      	ldrb	r2, [r0, #10]
 8015b98:	005b      	lsls	r3, r3, #1
 8015b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	1af6      	subs	r6, r6, r3
 8015ba2:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8015ba6:	7b69      	ldrb	r1, [r5, #13]
 8015ba8:	00cb      	lsls	r3, r1, #3
 8015baa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015bae:	7a2b      	ldrb	r3, [r5, #8]
 8015bb0:	4313      	orrs	r3, r2
 8015bb2:	064a      	lsls	r2, r1, #25
 8015bb4:	bf44      	itt	mi
 8015bb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015bba:	b21b      	sxthmi	r3, r3
 8015bbc:	1bdb      	subs	r3, r3, r7
 8015bbe:	e746      	b.n	8015a4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	e7ba      	b.n	8015b3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 8015bc4:	3fc00079 	.word	0x3fc00079

08015bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bcc:	4604      	mov	r4, r0
 8015bce:	b942      	cbnz	r2, 8015be2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015bd4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8015bd8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8015bdc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8015be0:	e047      	b.n	8015c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015be2:	7b51      	ldrb	r1, [r2, #13]
 8015be4:	8893      	ldrh	r3, [r2, #4]
 8015be6:	010d      	lsls	r5, r1, #4
 8015be8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8015bec:	79d5      	ldrb	r5, [r2, #7]
 8015bee:	4305      	orrs	r5, r0
 8015bf0:	2d04      	cmp	r5, #4
 8015bf2:	bfcc      	ite	gt
 8015bf4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8015bf8:	f04f 0e01 	movle.w	lr, #1
 8015bfc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8015c00:	f200 80ab 	bhi.w	8015d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015c04:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8015c08:	4283      	cmp	r3, r0
 8015c0a:	d216      	bcs.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c0c:	f240 605b 	movw	r0, #1627	@ 0x65b
 8015c10:	4283      	cmp	r3, r0
 8015c12:	d859      	bhi.n	8015cc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015c14:	f240 6057 	movw	r0, #1623	@ 0x657
 8015c18:	4283      	cmp	r3, r0
 8015c1a:	d20e      	bcs.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c1c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015c20:	d24a      	bcs.n	8015cb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015c22:	f240 604e 	movw	r0, #1614	@ 0x64e
 8015c26:	4283      	cmp	r3, r0
 8015c28:	d207      	bcs.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c2a:	f240 601a 	movw	r0, #1562	@ 0x61a
 8015c2e:	4283      	cmp	r3, r0
 8015c30:	d02a      	beq.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c32:	d821      	bhi.n	8015c78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015c34:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8015c38:	d35b      	bcc.n	8015cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015c3a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8015c3e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015c42:	f040 80d0 	bne.w	8015de6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015c46:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8015c4a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015c4e:	f040 80ca 	bne.w	8015de6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015c52:	00cb      	lsls	r3, r1, #3
 8015c54:	0649      	lsls	r1, r1, #25
 8015c56:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015c5a:	7a13      	ldrb	r3, [r2, #8]
 8015c5c:	ea43 0300 	orr.w	r3, r3, r0
 8015c60:	bf44      	itt	mi
 8015c62:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015c66:	b21b      	sxthmi	r3, r3
 8015c68:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015c6c:	1b5d      	subs	r5, r3, r5
 8015c6e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015c72:	4610      	mov	r0, r2
 8015c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c78:	f240 604b 	movw	r0, #1611	@ 0x64b
 8015c7c:	4283      	cmp	r3, r0
 8015c7e:	d338      	bcc.n	8015cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015c80:	f240 604c 	movw	r0, #1612	@ 0x64c
 8015c84:	4283      	cmp	r3, r0
 8015c86:	d9d8      	bls.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c88:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8015c8c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8015c90:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015c94:	f040 80f3 	bne.w	8015e7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015c98:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015c9c:	f040 80ef 	bne.w	8015e7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015ca0:	00cb      	lsls	r3, r1, #3
 8015ca2:	064e      	lsls	r6, r1, #25
 8015ca4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015ca8:	7a13      	ldrb	r3, [r2, #8]
 8015caa:	ea43 0300 	orr.w	r3, r3, r0
 8015cae:	bf44      	itt	mi
 8015cb0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015cb4:	b21b      	sxthmi	r3, r3
 8015cb6:	e7d9      	b.n	8015c6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015cb8:	f240 6054 	movw	r0, #1620	@ 0x654
 8015cbc:	4283      	cmp	r3, r0
 8015cbe:	d8e3      	bhi.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cc0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015cc4:	d9e0      	bls.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cc6:	e7b8      	b.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015cc8:	f240 6074 	movw	r0, #1652	@ 0x674
 8015ccc:	4283      	cmp	r3, r0
 8015cce:	d0b4      	beq.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015cd0:	d82d      	bhi.n	8015d2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8015cd2:	f240 605e 	movw	r0, #1630	@ 0x65e
 8015cd6:	4283      	cmp	r3, r0
 8015cd8:	d804      	bhi.n	8015ce4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015cda:	f240 605d 	movw	r0, #1629	@ 0x65d
 8015cde:	4283      	cmp	r3, r0
 8015ce0:	d3d2      	bcc.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015ce2:	e7aa      	b.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015ce4:	f240 605f 	movw	r0, #1631	@ 0x65f
 8015ce8:	4283      	cmp	r3, r0
 8015cea:	d0cd      	beq.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015cec:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8015cf0:	d0a3      	beq.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015cf2:	00cb      	lsls	r3, r1, #3
 8015cf4:	0649      	lsls	r1, r1, #25
 8015cf6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015cfa:	7a13      	ldrb	r3, [r2, #8]
 8015cfc:	ea43 0300 	orr.w	r3, r3, r0
 8015d00:	bf44      	itt	mi
 8015d02:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015d06:	b21b      	sxthmi	r3, r3
 8015d08:	1b5d      	subs	r5, r3, r5
 8015d0a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015d0e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015d12:	7b53      	ldrb	r3, [r2, #13]
 8015d14:	015b      	lsls	r3, r3, #5
 8015d16:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015d1a:	7993      	ldrb	r3, [r2, #6]
 8015d1c:	430b      	orrs	r3, r1
 8015d1e:	2105      	movs	r1, #5
 8015d20:	005b      	lsls	r3, r3, #1
 8015d22:	fb93 f3f1 	sdiv	r3, r3, r1
 8015d26:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015d2a:	440b      	add	r3, r1
 8015d2c:	e756      	b.n	8015bdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015d2e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8015d32:	4283      	cmp	r3, r0
 8015d34:	d809      	bhi.n	8015d4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015d36:	f240 60df 	movw	r0, #1759	@ 0x6df
 8015d3a:	4283      	cmp	r3, r0
 8015d3c:	f4bf af7d 	bcs.w	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015d40:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8015d44:	2b05      	cmp	r3, #5
 8015d46:	d8d4      	bhi.n	8015cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015d48:	e777      	b.n	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015d4a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8015d4e:	4283      	cmp	r3, r0
 8015d50:	d09a      	beq.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015d52:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8015d56:	4283      	cmp	r3, r0
 8015d58:	e7ca      	b.n	8015cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015d5a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8015d5e:	d22b      	bcs.n	8015db8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015d60:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8015d64:	4283      	cmp	r3, r0
 8015d66:	d28f      	bcs.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015d68:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8015d6c:	4283      	cmp	r3, r0
 8015d6e:	d816      	bhi.n	8015d9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015d70:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8015d74:	4283      	cmp	r3, r0
 8015d76:	f4bf af60 	bcs.w	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015d7a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8015d7e:	4283      	cmp	r3, r0
 8015d80:	d80a      	bhi.n	8015d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015d82:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8015d86:	4283      	cmp	r3, r0
 8015d88:	f4bf af57 	bcs.w	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015d8c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8015d90:	4283      	cmp	r3, r0
 8015d92:	f43f af79 	beq.w	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015d96:	e7ac      	b.n	8015cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015d98:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8015d9c:	e7f8      	b.n	8015d90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015d9e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8015da2:	4283      	cmp	r3, r0
 8015da4:	d802      	bhi.n	8015dac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8015da6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8015daa:	e798      	b.n	8015cde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015dac:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8015db0:	4283      	cmp	r3, r0
 8015db2:	f47f af42 	bne.w	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015db6:	e767      	b.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015db8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8015dbc:	4283      	cmp	r3, r0
 8015dbe:	f43f af63 	beq.w	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015dc2:	d802      	bhi.n	8015dca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8015dc4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8015dc8:	e7f2      	b.n	8015db0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8015dca:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8015dce:	4283      	cmp	r3, r0
 8015dd0:	d805      	bhi.n	8015dde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8015dd2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8015dd6:	4283      	cmp	r3, r0
 8015dd8:	f4ff af2f 	bcc.w	8015c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015ddc:	e754      	b.n	8015c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015dde:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8015de2:	4283      	cmp	r3, r0
 8015de4:	e7af      	b.n	8015d46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8015de6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015dea:	4617      	mov	r7, r2
 8015dec:	f102 0808 	add.w	r8, r2, #8
 8015df0:	4666      	mov	r6, ip
 8015df2:	6838      	ldr	r0, [r7, #0]
 8015df4:	3708      	adds	r7, #8
 8015df6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015dfa:	46e6      	mov	lr, ip
 8015dfc:	4547      	cmp	r7, r8
 8015dfe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015e02:	46f4      	mov	ip, lr
 8015e04:	d1f5      	bne.n	8015df2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8015e06:	6838      	ldr	r0, [r7, #0]
 8015e08:	f8ce 0000 	str.w	r0, [lr]
 8015e0c:	88b9      	ldrh	r1, [r7, #4]
 8015e0e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015e12:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015e16:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015e1a:	d009      	beq.n	8015e30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8015e1c:	7b51      	ldrb	r1, [r2, #13]
 8015e1e:	7992      	ldrb	r2, [r2, #6]
 8015e20:	0149      	lsls	r1, r1, #5
 8015e22:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015e26:	4311      	orrs	r1, r2
 8015e28:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015e2c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015e30:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015e34:	b2ad      	uxth	r5, r5
 8015e36:	d00d      	beq.n	8015e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8015e38:	442b      	add	r3, r5
 8015e3a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015e44:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015e48:	10db      	asrs	r3, r3, #3
 8015e4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015e4e:	4313      	orrs	r3, r2
 8015e50:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015e54:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015e58:	00cb      	lsls	r3, r1, #3
 8015e5a:	064f      	lsls	r7, r1, #25
 8015e5c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015e60:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015e64:	ea43 0302 	orr.w	r3, r3, r2
 8015e68:	bf44      	itt	mi
 8015e6a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015e6e:	b21b      	sxthmi	r3, r3
 8015e70:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015e74:	1b5b      	subs	r3, r3, r5
 8015e76:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8015e7a:	4632      	mov	r2, r6
 8015e7c:	e6f9      	b.n	8015c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015e7e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015e82:	4617      	mov	r7, r2
 8015e84:	f102 0908 	add.w	r9, r2, #8
 8015e88:	4666      	mov	r6, ip
 8015e8a:	6838      	ldr	r0, [r7, #0]
 8015e8c:	3708      	adds	r7, #8
 8015e8e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015e92:	46e0      	mov	r8, ip
 8015e94:	454f      	cmp	r7, r9
 8015e96:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015e9a:	46c4      	mov	ip, r8
 8015e9c:	d1f5      	bne.n	8015e8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8015e9e:	6838      	ldr	r0, [r7, #0]
 8015ea0:	f8c8 0000 	str.w	r0, [r8]
 8015ea4:	88b9      	ldrh	r1, [r7, #4]
 8015ea6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015eaa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015eae:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015eb2:	d009      	beq.n	8015ec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8015eb4:	7b51      	ldrb	r1, [r2, #13]
 8015eb6:	7992      	ldrb	r2, [r2, #6]
 8015eb8:	0149      	lsls	r1, r1, #5
 8015eba:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015ebe:	4311      	orrs	r1, r2
 8015ec0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015ec4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015ec8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015ecc:	d00e      	beq.n	8015eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8015ece:	eba3 030e 	sub.w	r3, r3, lr
 8015ed2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015ed6:	b29b      	uxth	r3, r3
 8015ed8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015edc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015ee0:	10db      	asrs	r3, r3, #3
 8015ee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ee6:	4313      	orrs	r3, r2
 8015ee8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015eec:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015ef0:	00cb      	lsls	r3, r1, #3
 8015ef2:	0648      	lsls	r0, r1, #25
 8015ef4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015ef8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015efc:	ea43 0302 	orr.w	r3, r3, r2
 8015f00:	bf44      	itt	mi
 8015f02:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015f06:	b21b      	sxthmi	r3, r3
 8015f08:	1b5d      	subs	r5, r3, r5
 8015f0a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015f0e:	e7b4      	b.n	8015e7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08015f10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f14:	461e      	mov	r6, r3
 8015f16:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015f18:	4604      	mov	r4, r0
 8015f1a:	4617      	mov	r7, r2
 8015f1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015f20:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015f24:	f7ee f986 	bl	8004234 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015f28:	4605      	mov	r5, r0
 8015f2a:	b918      	cbnz	r0, 8015f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8015f2c:	6030      	str	r0, [r6, #0]
 8015f2e:	4628      	mov	r0, r5
 8015f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	4601      	mov	r1, r0
 8015f38:	4638      	mov	r0, r7
 8015f3a:	68db      	ldr	r3, [r3, #12]
 8015f3c:	4798      	blx	r3
 8015f3e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015f42:	4602      	mov	r2, r0
 8015f44:	6030      	str	r0, [r6, #0]
 8015f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015f4a:	d213      	bcs.n	8015f74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015f4c:	4643      	mov	r3, r8
 8015f4e:	4639      	mov	r1, r7
 8015f50:	4620      	mov	r0, r4
 8015f52:	f7ff fe39 	bl	8015bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015f56:	6030      	str	r0, [r6, #0]
 8015f58:	6833      	ldr	r3, [r6, #0]
 8015f5a:	b143      	cbz	r3, 8015f6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015f5c:	7b5a      	ldrb	r2, [r3, #13]
 8015f5e:	7a9b      	ldrb	r3, [r3, #10]
 8015f60:	0052      	lsls	r2, r2, #1
 8015f62:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015f66:	4313      	orrs	r3, r2
 8015f68:	bf0c      	ite	eq
 8015f6a:	2301      	moveq	r3, #1
 8015f6c:	2300      	movne	r3, #0
 8015f6e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015f72:	e7dc      	b.n	8015f2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015f74:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015f7c:	d804      	bhi.n	8015f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015f7e:	4639      	mov	r1, r7
 8015f80:	4620      	mov	r0, r4
 8015f82:	f7ff fd15 	bl	80159b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015f86:	e7e6      	b.n	8015f56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015f88:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d0e3      	beq.n	8015f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015f90:	f640 1302 	movw	r3, #2306	@ 0x902
 8015f94:	429d      	cmp	r5, r3
 8015f96:	d1df      	bne.n	8015f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015f98:	4601      	mov	r1, r0
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7ff fcd9 	bl	8015952 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015fa0:	e7d9      	b.n	8015f56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015fa2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8015fa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fa6:	461e      	mov	r6, r3
 8015fa8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015faa:	4604      	mov	r4, r0
 8015fac:	4617      	mov	r7, r2
 8015fae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015fb2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015fb6:	f7ee f93d 	bl	8004234 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015fba:	4605      	mov	r5, r0
 8015fbc:	b918      	cbnz	r0, 8015fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8015fbe:	6030      	str	r0, [r6, #0]
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	4601      	mov	r1, r0
 8015fca:	4638      	mov	r0, r7
 8015fcc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015fd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015fd4:	47c8      	blx	r9
 8015fd6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015fda:	4602      	mov	r2, r0
 8015fdc:	6030      	str	r0, [r6, #0]
 8015fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015fe2:	d213      	bcs.n	801600c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8015fe4:	4643      	mov	r3, r8
 8015fe6:	4639      	mov	r1, r7
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7ff fded 	bl	8015bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015fee:	6030      	str	r0, [r6, #0]
 8015ff0:	6833      	ldr	r3, [r6, #0]
 8015ff2:	b143      	cbz	r3, 8016006 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8015ff4:	7b5a      	ldrb	r2, [r3, #13]
 8015ff6:	7a9b      	ldrb	r3, [r3, #10]
 8015ff8:	0052      	lsls	r2, r2, #1
 8015ffa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015ffe:	4313      	orrs	r3, r2
 8016000:	bf0c      	ite	eq
 8016002:	2301      	moveq	r3, #1
 8016004:	2300      	movne	r3, #0
 8016006:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801600a:	e7d9      	b.n	8015fc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801600c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016010:	b29b      	uxth	r3, r3
 8016012:	2b7f      	cmp	r3, #127	@ 0x7f
 8016014:	d804      	bhi.n	8016020 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016016:	4639      	mov	r1, r7
 8016018:	4620      	mov	r0, r4
 801601a:	f7ff fcc9 	bl	80159b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801601e:	e7e6      	b.n	8015fee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016020:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016024:	2b00      	cmp	r3, #0
 8016026:	d0e3      	beq.n	8015ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016028:	f640 1302 	movw	r3, #2306	@ 0x902
 801602c:	429d      	cmp	r5, r3
 801602e:	d1df      	bne.n	8015ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016030:	4601      	mov	r1, r0
 8016032:	4620      	mov	r0, r4
 8016034:	f7ff fc8d 	bl	8015952 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016038:	e7d9      	b.n	8015fee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801603a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801603a:	b510      	push	{r4, lr}
 801603c:	4604      	mov	r4, r0
 801603e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016042:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016044:	b1e1      	cbz	r1, 8016080 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016046:	2b0a      	cmp	r3, #10
 8016048:	d02d      	beq.n	80160a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801604a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801604c:	3901      	subs	r1, #1
 801604e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016052:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016054:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016058:	1c51      	adds	r1, r2, #1
 801605a:	b289      	uxth	r1, r1
 801605c:	2901      	cmp	r1, #1
 801605e:	bf8a      	itet	hi
 8016060:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016064:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016066:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016068:	1c5a      	adds	r2, r3, #1
 801606a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801606c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801606e:	4413      	add	r3, r2
 8016070:	b29b      	uxth	r3, r3
 8016072:	2b09      	cmp	r3, #9
 8016074:	bf88      	it	hi
 8016076:	3b0a      	subhi	r3, #10
 8016078:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801607c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801607e:	e7de      	b.n	801603e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016080:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016082:	2b0a      	cmp	r3, #10
 8016084:	d00f      	beq.n	80160a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016086:	4620      	mov	r0, r4
 8016088:	f7ff fc11 	bl	80158ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801608c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801608e:	1c5a      	adds	r2, r3, #1
 8016090:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016092:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016094:	4413      	add	r3, r2
 8016096:	b29b      	uxth	r3, r3
 8016098:	2b09      	cmp	r3, #9
 801609a:	bf88      	it	hi
 801609c:	3b0a      	subhi	r3, #10
 801609e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80160a2:	8458      	strh	r0, [r3, #34]	@ 0x22
 80160a4:	e7ec      	b.n	8016080 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80160a6:	bd10      	pop	{r4, pc}

080160a8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80160a8:	b538      	push	{r3, r4, r5, lr}
 80160aa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80160ac:	4604      	mov	r4, r0
 80160ae:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80160b2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80160b4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80160b6:	3a01      	subs	r2, #1
 80160b8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80160ba:	1c5a      	adds	r2, r3, #1
 80160bc:	b292      	uxth	r2, r2
 80160be:	2a09      	cmp	r2, #9
 80160c0:	bf8a      	itet	hi
 80160c2:	3b09      	subhi	r3, #9
 80160c4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80160c6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80160c8:	f7ff ffb7 	bl	801603a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80160cc:	8c23      	ldrh	r3, [r4, #32]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	bf9c      	itt	ls
 80160d2:	3301      	addls	r3, #1
 80160d4:	8423      	strhls	r3, [r4, #32]
 80160d6:	8be3      	ldrh	r3, [r4, #30]
 80160d8:	b90b      	cbnz	r3, 80160de <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80160da:	2302      	movs	r3, #2
 80160dc:	83e3      	strh	r3, [r4, #30]
 80160de:	8be3      	ldrh	r3, [r4, #30]
 80160e0:	4628      	mov	r0, r5
 80160e2:	3b01      	subs	r3, #1
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	83e3      	strh	r3, [r4, #30]
 80160e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80160ec:	8365      	strh	r5, [r4, #26]
 80160ee:	bd38      	pop	{r3, r4, r5, pc}

080160f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80160f0:	428a      	cmp	r2, r1
 80160f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80160f8:	d932      	bls.n	8016160 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80160fa:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80160fc:	1a54      	subs	r4, r2, r1
 80160fe:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8016102:	19ee      	adds	r6, r5, r7
 8016104:	fa1f fe84 	uxth.w	lr, r4
 8016108:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801610c:	3e01      	subs	r6, #1
 801610e:	b2b4      	uxth	r4, r6
 8016110:	eba4 090e 	sub.w	r9, r4, lr
 8016114:	fa1f f989 	uxth.w	r9, r9
 8016118:	2c09      	cmp	r4, #9
 801611a:	4626      	mov	r6, r4
 801611c:	bf88      	it	hi
 801611e:	f1a4 060a 	subhi.w	r6, r4, #10
 8016122:	f1bc 0f00 	cmp.w	ip, #0
 8016126:	f104 34ff 	add.w	r4, r4, #4294967295
 801612a:	bf08      	it	eq
 801612c:	f04f 0c02 	moveq.w	ip, #2
 8016130:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016134:	b2a4      	uxth	r4, r4
 8016136:	f10c 3cff 	add.w	ip, ip, #4294967295
 801613a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801613e:	454c      	cmp	r4, r9
 8016140:	fa1f fc8c 	uxth.w	ip, ip
 8016144:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016148:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801614c:	d1e4      	bne.n	8016118 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801614e:	eba5 050e 	sub.w	r5, r5, lr
 8016152:	eb0e 0408 	add.w	r4, lr, r8
 8016156:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801615a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801615c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8016160:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8016162:	250a      	movs	r5, #10
 8016164:	1a64      	subs	r4, r4, r1
 8016166:	4439      	add	r1, r7
 8016168:	b289      	uxth	r1, r1
 801616a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801616c:	2909      	cmp	r1, #9
 801616e:	bf88      	it	hi
 8016170:	390a      	subhi	r1, #10
 8016172:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016174:	b18a      	cbz	r2, 801619a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016176:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8016178:	3a01      	subs	r2, #1
 801617a:	3101      	adds	r1, #1
 801617c:	b292      	uxth	r2, r2
 801617e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016182:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016184:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016186:	b901      	cbnz	r1, 801618a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8016188:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801618a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801618c:	3901      	subs	r1, #1
 801618e:	b289      	uxth	r1, r1
 8016190:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016192:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016196:	844c      	strh	r4, [r1, #34]	@ 0x22
 8016198:	e7ec      	b.n	8016174 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801619a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801619e:	f7ff bf4c 	b.w	801603a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080161a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80161a2:	b570      	push	{r4, r5, r6, lr}
 80161a4:	2500      	movs	r5, #0
 80161a6:	4295      	cmp	r5, r2
 80161a8:	d011      	beq.n	80161ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80161aa:	8bc4      	ldrh	r4, [r0, #30]
 80161ac:	f831 6b02 	ldrh.w	r6, [r1], #2
 80161b0:	4414      	add	r4, r2
 80161b2:	3c01      	subs	r4, #1
 80161b4:	1b64      	subs	r4, r4, r5
 80161b6:	b2a4      	uxth	r4, r4
 80161b8:	2c01      	cmp	r4, #1
 80161ba:	bf88      	it	hi
 80161bc:	3c02      	subhi	r4, #2
 80161be:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80161c2:	8b64      	ldrh	r4, [r4, #26]
 80161c4:	42b4      	cmp	r4, r6
 80161c6:	d117      	bne.n	80161f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80161c8:	3501      	adds	r5, #1
 80161ca:	b2ad      	uxth	r5, r5
 80161cc:	e7eb      	b.n	80161a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80161ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80161d2:	2400      	movs	r4, #0
 80161d4:	4413      	add	r3, r2
 80161d6:	b2a2      	uxth	r2, r4
 80161d8:	429a      	cmp	r2, r3
 80161da:	da0f      	bge.n	80161fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80161dc:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80161de:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80161e2:	3401      	adds	r4, #1
 80161e4:	4432      	add	r2, r6
 80161e6:	b292      	uxth	r2, r2
 80161e8:	2a09      	cmp	r2, #9
 80161ea:	bf88      	it	hi
 80161ec:	3a0a      	subhi	r2, #10
 80161ee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80161f2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80161f4:	42aa      	cmp	r2, r5
 80161f6:	d0ee      	beq.n	80161d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80161f8:	2000      	movs	r0, #0
 80161fa:	bd70      	pop	{r4, r5, r6, pc}
 80161fc:	2001      	movs	r0, #1
 80161fe:	e7fc      	b.n	80161fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08016200 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016204:	4605      	mov	r5, r0
 8016206:	4616      	mov	r6, r2
 8016208:	1c8c      	adds	r4, r1, #2
 801620a:	8809      	ldrh	r1, [r1, #0]
 801620c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016210:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016214:	42b3      	cmp	r3, r6
 8016216:	d124      	bne.n	8016262 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016218:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801621c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016220:	f001 070f 	and.w	r7, r1, #15
 8016224:	4652      	mov	r2, sl
 8016226:	f8cd 8000 	str.w	r8, [sp]
 801622a:	464b      	mov	r3, r9
 801622c:	4621      	mov	r1, r4
 801622e:	4628      	mov	r0, r5
 8016230:	f7ff ffb7 	bl	80161a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016234:	4683      	mov	fp, r0
 8016236:	b168      	cbz	r0, 8016254 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016238:	eb0a 0109 	add.w	r1, sl, r9
 801623c:	463a      	mov	r2, r7
 801623e:	4628      	mov	r0, r5
 8016240:	4441      	add	r1, r8
 8016242:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016246:	4649      	mov	r1, r9
 8016248:	f7ff ff52 	bl	80160f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801624c:	4658      	mov	r0, fp
 801624e:	b003      	add	sp, #12
 8016250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016254:	eb07 010a 	add.w	r1, r7, sl
 8016258:	4449      	add	r1, r9
 801625a:	4441      	add	r1, r8
 801625c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016260:	e7d2      	b.n	8016208 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016262:	f04f 0b00 	mov.w	fp, #0
 8016266:	e7f1      	b.n	801624c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	8810      	ldrh	r0, [r2, #0]
 801626c:	4298      	cmp	r0, r3
 801626e:	d817      	bhi.n	80162a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016270:	1e48      	subs	r0, r1, #1
 8016272:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016276:	4298      	cmp	r0, r3
 8016278:	d312      	bcc.n	80162a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801627a:	2400      	movs	r4, #0
 801627c:	428c      	cmp	r4, r1
 801627e:	d20f      	bcs.n	80162a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016280:	1860      	adds	r0, r4, r1
 8016282:	1040      	asrs	r0, r0, #1
 8016284:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016288:	0085      	lsls	r5, r0, #2
 801628a:	42b3      	cmp	r3, r6
 801628c:	d902      	bls.n	8016294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801628e:	3001      	adds	r0, #1
 8016290:	b284      	uxth	r4, r0
 8016292:	e7f3      	b.n	801627c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016294:	d201      	bcs.n	801629a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016296:	b281      	uxth	r1, r0
 8016298:	e7f0      	b.n	801627c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801629a:	442a      	add	r2, r5
 801629c:	8850      	ldrh	r0, [r2, #2]
 801629e:	bd70      	pop	{r4, r5, r6, pc}
 80162a0:	2000      	movs	r0, #0
 80162a2:	e7fc      	b.n	801629e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080162a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80162a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80162aa:	4604      	mov	r4, r0
 80162ac:	260b      	movs	r6, #11
 80162ae:	886f      	ldrh	r7, [r5, #2]
 80162b0:	087f      	lsrs	r7, r7, #1
 80162b2:	3e01      	subs	r6, #1
 80162b4:	d013      	beq.n	80162de <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80162b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80162b8:	462a      	mov	r2, r5
 80162ba:	4639      	mov	r1, r7
 80162bc:	4620      	mov	r0, r4
 80162be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80162c2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80162c6:	4643      	mov	r3, r8
 80162c8:	f7ff ffce 	bl	8016268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80162cc:	b138      	cbz	r0, 80162de <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80162ce:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80162d2:	4642      	mov	r2, r8
 80162d4:	4620      	mov	r0, r4
 80162d6:	f7ff ff93 	bl	8016200 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80162da:	2800      	cmp	r0, #0
 80162dc:	d1e9      	bne.n	80162b2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80162de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080162e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80162e4:	b570      	push	{r4, r5, r6, lr}
 80162e6:	694a      	ldr	r2, [r1, #20]
 80162e8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80162ea:	684b      	ldr	r3, [r1, #4]
 80162ec:	1b54      	subs	r4, r2, r5
 80162ee:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80162f0:	f000 8106 	beq.w	8016500 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80162f4:	1b9b      	subs	r3, r3, r6
 80162f6:	d003      	beq.n	8016300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80162f8:	4363      	muls	r3, r4
 80162fa:	2210      	movs	r2, #16
 80162fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8016300:	680c      	ldr	r4, [r1, #0]
 8016302:	698a      	ldr	r2, [r1, #24]
 8016304:	1b65      	subs	r5, r4, r5
 8016306:	f000 80fd 	beq.w	8016504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801630a:	1b92      	subs	r2, r2, r6
 801630c:	d003      	beq.n	8016316 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801630e:	436a      	muls	r2, r5
 8016310:	2410      	movs	r4, #16
 8016312:	fb92 f2f4 	sdiv	r2, r2, r4
 8016316:	1a9b      	subs	r3, r3, r2
 8016318:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8016540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801631c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016320:	460a      	mov	r2, r1
 8016322:	ee07 3a90 	vmov	s15, r3
 8016326:	f100 040c 	add.w	r4, r0, #12
 801632a:	4603      	mov	r3, r0
 801632c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016330:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016334:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016338:	eeb1 6a43 	vneg.f32	s12, s6
 801633c:	edd2 7a02 	vldr	s15, [r2, #8]
 8016340:	3214      	adds	r2, #20
 8016342:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016346:	ece3 6a01 	vstmia	r3!, {s13}
 801634a:	429c      	cmp	r4, r3
 801634c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016354:	edc3 7a02 	vstr	s15, [r3, #8]
 8016358:	ed52 7a01 	vldr	s15, [r2, #-4]
 801635c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016360:	edc3 7a05 	vstr	s15, [r3, #20]
 8016364:	d1ea      	bne.n	801633c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016366:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016368:	698b      	ldr	r3, [r1, #24]
 801636a:	edd0 4a02 	vldr	s9, [r0, #8]
 801636e:	1a9b      	subs	r3, r3, r2
 8016370:	edd0 3a00 	vldr	s7, [r0]
 8016374:	edd0 6a01 	vldr	s13, [r0, #4]
 8016378:	ee07 3a90 	vmov	s15, r3
 801637c:	684b      	ldr	r3, [r1, #4]
 801637e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016382:	ed90 5a05 	vldr	s10, [r0, #20]
 8016386:	1a9b      	subs	r3, r3, r2
 8016388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801638c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016390:	ed90 2a03 	vldr	s4, [r0, #12]
 8016394:	ee07 3a10 	vmov	s14, r3
 8016398:	edd0 5a04 	vldr	s11, [r0, #16]
 801639c:	ee67 7a84 	vmul.f32	s15, s15, s8
 80163a0:	ed90 1a07 	vldr	s2, [r0, #28]
 80163a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163a8:	edd0 2a06 	vldr	s5, [r0, #24]
 80163ac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80163b0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80163b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80163b8:	ee32 5a45 	vsub.f32	s10, s4, s10
 80163bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80163c0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80163c4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80163c8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80163ca:	694a      	ldr	r2, [r1, #20]
 80163cc:	1b13      	subs	r3, r2, r4
 80163ce:	ee07 3a10 	vmov	s14, r3
 80163d2:	680b      	ldr	r3, [r1, #0]
 80163d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163d8:	1b1b      	subs	r3, r3, r4
 80163da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80163de:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80163e2:	ee07 3a10 	vmov	s14, r3
 80163e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80163ee:	eee6 4a87 	vfma.f32	s9, s13, s14
 80163f2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80163f6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80163fa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80163fc:	698b      	ldr	r3, [r1, #24]
 80163fe:	1a9b      	subs	r3, r3, r2
 8016400:	ee06 3a90 	vmov	s13, r3
 8016404:	684b      	ldr	r3, [r1, #4]
 8016406:	1a9b      	subs	r3, r3, r2
 8016408:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801640c:	ee07 3a10 	vmov	s14, r3
 8016410:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016418:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801641c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016420:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016424:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016428:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801642c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801642e:	694a      	ldr	r2, [r1, #20]
 8016430:	1b13      	subs	r3, r2, r4
 8016432:	ee07 3a10 	vmov	s14, r3
 8016436:	680b      	ldr	r3, [r1, #0]
 8016438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801643c:	1b1b      	subs	r3, r3, r4
 801643e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016442:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016446:	ee07 3a10 	vmov	s14, r3
 801644a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801644e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016452:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016456:	edd0 5a08 	vldr	s11, [r0, #32]
 801645a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801645e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8016462:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016466:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801646a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801646c:	698b      	ldr	r3, [r1, #24]
 801646e:	1a9b      	subs	r3, r3, r2
 8016470:	ee07 3a10 	vmov	s14, r3
 8016474:	684b      	ldr	r3, [r1, #4]
 8016476:	1a9b      	subs	r3, r3, r2
 8016478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801647c:	ee01 3a90 	vmov	s3, r3
 8016480:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016484:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8016488:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801648c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016490:	eea1 7a21 	vfma.f32	s14, s2, s3
 8016494:	ee27 7a03 	vmul.f32	s14, s14, s6
 8016498:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801649c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801649e:	694a      	ldr	r2, [r1, #20]
 80164a0:	1b13      	subs	r3, r2, r4
 80164a2:	ee03 3a10 	vmov	s6, r3
 80164a6:	680b      	ldr	r3, [r1, #0]
 80164a8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80164ac:	1b1b      	subs	r3, r3, r4
 80164ae:	ee23 3a04 	vmul.f32	s6, s6, s8
 80164b2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80164b6:	ee03 3a10 	vmov	s6, r3
 80164ba:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80164be:	ee23 4a04 	vmul.f32	s8, s6, s8
 80164c2:	eee1 5a04 	vfma.f32	s11, s2, s8
 80164c6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80164ca:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80164ce:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80164d2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80164d6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80164da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164de:	dd13      	ble.n	8016508 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80164e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80164e4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80164e8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80164ea:	eee3 7a87 	vfma.f32	s15, s7, s14
 80164ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164f6:	dd15      	ble.n	8016524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80164f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80164fc:	6403      	str	r3, [r0, #64]	@ 0x40
 80164fe:	bd70      	pop	{r4, r5, r6, pc}
 8016500:	4623      	mov	r3, r4
 8016502:	e6fd      	b.n	8016300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016504:	462a      	mov	r2, r5
 8016506:	e706      	b.n	8016316 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016508:	d502      	bpl.n	8016510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801650a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801650e:	e7e9      	b.n	80164e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016510:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016514:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016518:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016520:	dade      	bge.n	80164e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016522:	e7f2      	b.n	801650a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016524:	d502      	bpl.n	801652c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016526:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801652a:	e7e7      	b.n	80164fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801652c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016530:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016534:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801653c:	dadc      	bge.n	80164f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801653e:	e7f2      	b.n	8016526 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016540:	3d800000 	.word	0x3d800000

08016544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016548:	2714      	movs	r7, #20
 801654a:	435f      	muls	r7, r3
 801654c:	eb02 0c07 	add.w	ip, r2, r7
 8016550:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016554:	f115 0e0f 	adds.w	lr, r5, #15
 8016558:	f100 80a2 	bmi.w	80166a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801655c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8016560:	9c08      	ldr	r4, [sp, #32]
 8016562:	2614      	movs	r6, #20
 8016564:	f8c0 e014 	str.w	lr, [r0, #20]
 8016568:	4366      	muls	r6, r4
 801656a:	eb02 0806 	add.w	r8, r2, r6
 801656e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016572:	f115 040f 	adds.w	r4, r5, #15
 8016576:	f100 809f 	bmi.w	80166b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801657a:	1124      	asrs	r4, r4, #4
 801657c:	eba4 040e 	sub.w	r4, r4, lr
 8016580:	6184      	str	r4, [r0, #24]
 8016582:	2c00      	cmp	r4, #0
 8016584:	f000 808a 	beq.w	801669c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8016588:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801658c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016590:	5995      	ldr	r5, [r2, r6]
 8016592:	eba4 0809 	sub.w	r8, r4, r9
 8016596:	59d4      	ldr	r4, [r2, r7]
 8016598:	eba5 0a04 	sub.w	sl, r5, r4
 801659c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80165a0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80165a4:	fb0e fe05 	mul.w	lr, lr, r5
 80165a8:	fb0a ee19 	mls	lr, sl, r9, lr
 80165ac:	fb08 e404 	mla	r4, r8, r4, lr
 80165b0:	3c01      	subs	r4, #1
 80165b2:	19a4      	adds	r4, r4, r6
 80165b4:	f100 808c 	bmi.w	80166d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80165b8:	fb94 fef6 	sdiv	lr, r4, r6
 80165bc:	fb06 441e 	mls	r4, r6, lr, r4
 80165c0:	f8c0 e000 	str.w	lr, [r0]
 80165c4:	6104      	str	r4, [r0, #16]
 80165c6:	2d00      	cmp	r5, #0
 80165c8:	f2c0 8095 	blt.w	80166f6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80165cc:	fb95 f4f6 	sdiv	r4, r5, r6
 80165d0:	fb06 5514 	mls	r5, r6, r4, r5
 80165d4:	6044      	str	r4, [r0, #4]
 80165d6:	6085      	str	r5, [r0, #8]
 80165d8:	60c6      	str	r6, [r0, #12]
 80165da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80165de:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80165e2:	6945      	ldr	r5, [r0, #20]
 80165e4:	59d2      	ldr	r2, [r2, r7]
 80165e6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80165ea:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8016718 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80165ee:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80165f2:	ee07 4a10 	vmov	s14, r4
 80165f6:	6804      	ldr	r4, [r0, #0]
 80165f8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80165fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016600:	ee07 2a90 	vmov	s15, r2
 8016604:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801660c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016610:	edd3 6a00 	vldr	s13, [r3]
 8016614:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016618:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801661c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016620:	edc0 6a07 	vstr	s13, [r0, #28]
 8016624:	edd0 6a01 	vldr	s13, [r0, #4]
 8016628:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801662c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016630:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8016634:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016638:	ed80 6a08 	vstr	s12, [r0, #32]
 801663c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801663e:	6242      	str	r2, [r0, #36]	@ 0x24
 8016640:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8016644:	ed93 6a03 	vldr	s12, [r3, #12]
 8016648:	eea5 6a87 	vfma.f32	s12, s11, s14
 801664c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8016650:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016654:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8016658:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801665c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8016660:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016664:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8016668:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801666a:	6302      	str	r2, [r0, #48]	@ 0x30
 801666c:	ed93 6a06 	vldr	s12, [r3, #24]
 8016670:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8016674:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016678:	eeb0 7a46 	vmov.f32	s14, s12
 801667c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8016680:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016684:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8016688:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801668c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8016690:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016694:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8016698:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801669a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801669c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a0:	2410      	movs	r4, #16
 80166a2:	f1c5 0501 	rsb	r5, r5, #1
 80166a6:	fb9e fef4 	sdiv	lr, lr, r4
 80166aa:	f015 050f 	ands.w	r5, r5, #15
 80166ae:	bf18      	it	ne
 80166b0:	2501      	movne	r5, #1
 80166b2:	ebae 0e05 	sub.w	lr, lr, r5
 80166b6:	e753      	b.n	8016560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80166b8:	f04f 0910 	mov.w	r9, #16
 80166bc:	f1c5 0501 	rsb	r5, r5, #1
 80166c0:	fb94 f4f9 	sdiv	r4, r4, r9
 80166c4:	f015 050f 	ands.w	r5, r5, #15
 80166c8:	bf18      	it	ne
 80166ca:	2501      	movne	r5, #1
 80166cc:	1b64      	subs	r4, r4, r5
 80166ce:	e755      	b.n	801657c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80166d0:	4264      	negs	r4, r4
 80166d2:	fb94 fef6 	sdiv	lr, r4, r6
 80166d6:	f1ce 0800 	rsb	r8, lr, #0
 80166da:	fb06 441e 	mls	r4, r6, lr, r4
 80166de:	f8c0 8000 	str.w	r8, [r0]
 80166e2:	6104      	str	r4, [r0, #16]
 80166e4:	2c00      	cmp	r4, #0
 80166e6:	f43f af6e 	beq.w	80165c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80166ea:	ea6f 0e0e 	mvn.w	lr, lr
 80166ee:	1b34      	subs	r4, r6, r4
 80166f0:	f8c0 e000 	str.w	lr, [r0]
 80166f4:	e766      	b.n	80165c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80166f6:	426d      	negs	r5, r5
 80166f8:	fb95 f4f6 	sdiv	r4, r5, r6
 80166fc:	f1c4 0e00 	rsb	lr, r4, #0
 8016700:	fb06 5514 	mls	r5, r6, r4, r5
 8016704:	f8c0 e004 	str.w	lr, [r0, #4]
 8016708:	6085      	str	r5, [r0, #8]
 801670a:	2d00      	cmp	r5, #0
 801670c:	f43f af64 	beq.w	80165d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8016710:	43e4      	mvns	r4, r4
 8016712:	1b75      	subs	r5, r6, r5
 8016714:	6044      	str	r4, [r0, #4]
 8016716:	e75e      	b.n	80165d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8016718:	3d800000 	.word	0x3d800000

0801671c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801671c:	4602      	mov	r2, r0
 801671e:	b148      	cbz	r0, 8016734 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8016720:	2300      	movs	r3, #0
 8016722:	b298      	uxth	r0, r3
 8016724:	3301      	adds	r3, #1
 8016726:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801672a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801672e:	2900      	cmp	r1, #0
 8016730:	d1f7      	bne.n	8016722 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8016732:	4770      	bx	lr
 8016734:	4770      	bx	lr

08016736 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8016736:	b530      	push	{r4, r5, lr}
 8016738:	4604      	mov	r4, r0
 801673a:	b159      	cbz	r1, 8016754 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801673c:	b148      	cbz	r0, 8016752 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801673e:	2300      	movs	r3, #0
 8016740:	b298      	uxth	r0, r3
 8016742:	4282      	cmp	r2, r0
 8016744:	d905      	bls.n	8016752 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8016746:	5ccd      	ldrb	r5, [r1, r3]
 8016748:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801674c:	3301      	adds	r3, #1
 801674e:	2d00      	cmp	r5, #0
 8016750:	d1f6      	bne.n	8016740 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8016752:	bd30      	pop	{r4, r5, pc}
 8016754:	4608      	mov	r0, r1
 8016756:	e7fc      	b.n	8016752 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08016758 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8016758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801675a:	b08b      	sub	sp, #44	@ 0x2c
 801675c:	468c      	mov	ip, r1
 801675e:	4604      	mov	r4, r0
 8016760:	2100      	movs	r1, #0
 8016762:	261f      	movs	r6, #31
 8016764:	af01      	add	r7, sp, #4
 8016766:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801676a:	1e71      	subs	r1, r6, #1
 801676c:	fb94 fef3 	sdiv	lr, r4, r3
 8016770:	fb03 441e 	mls	r4, r3, lr, r4
 8016774:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8016778:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801677c:	b2ec      	uxtb	r4, r5
 801677e:	2d09      	cmp	r5, #9
 8016780:	bfd4      	ite	le
 8016782:	3430      	addle	r4, #48	@ 0x30
 8016784:	3457      	addgt	r4, #87	@ 0x57
 8016786:	b2e4      	uxtb	r4, r4
 8016788:	55bc      	strb	r4, [r7, r6]
 801678a:	4674      	mov	r4, lr
 801678c:	b974      	cbnz	r4, 80167ac <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801678e:	2800      	cmp	r0, #0
 8016790:	da05      	bge.n	801679e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8016792:	ab0a      	add	r3, sp, #40	@ 0x28
 8016794:	4419      	add	r1, r3
 8016796:	232d      	movs	r3, #45	@ 0x2d
 8016798:	f801 3c24 	strb.w	r3, [r1, #-36]
 801679c:	1eb1      	subs	r1, r6, #2
 801679e:	3101      	adds	r1, #1
 80167a0:	4660      	mov	r0, ip
 80167a2:	4439      	add	r1, r7
 80167a4:	f7ff ffc7 	bl	8016736 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80167a8:	b00b      	add	sp, #44	@ 0x2c
 80167aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ac:	460e      	mov	r6, r1
 80167ae:	e7dc      	b.n	801676a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080167b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80167b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167b2:	468c      	mov	ip, r1
 80167b4:	b08b      	sub	sp, #44	@ 0x2c
 80167b6:	2100      	movs	r1, #0
 80167b8:	ae01      	add	r6, sp, #4
 80167ba:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80167be:	211f      	movs	r1, #31
 80167c0:	fbb0 f7f3 	udiv	r7, r0, r3
 80167c4:	fb03 0517 	mls	r5, r3, r7, r0
 80167c8:	4638      	mov	r0, r7
 80167ca:	b2ec      	uxtb	r4, r5
 80167cc:	2d09      	cmp	r5, #9
 80167ce:	bfd4      	ite	le
 80167d0:	3430      	addle	r4, #48	@ 0x30
 80167d2:	3457      	addgt	r4, #87	@ 0x57
 80167d4:	b2e4      	uxtb	r4, r4
 80167d6:	558c      	strb	r4, [r1, r6]
 80167d8:	1e4c      	subs	r4, r1, #1
 80167da:	b92f      	cbnz	r7, 80167e8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80167dc:	4431      	add	r1, r6
 80167de:	4660      	mov	r0, ip
 80167e0:	f7ff ffa9 	bl	8016736 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80167e4:	b00b      	add	sp, #44	@ 0x2c
 80167e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167e8:	4621      	mov	r1, r4
 80167ea:	e7e9      	b.n	80167c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080167ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f0:	b085      	sub	sp, #20
 80167f2:	4691      	mov	r9, r2
 80167f4:	6802      	ldr	r2, [r0, #0]
 80167f6:	4688      	mov	r8, r1
 80167f8:	461c      	mov	r4, r3
 80167fa:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 80167fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8016802:	4683      	mov	fp, r0
 8016804:	4610      	mov	r0, r2
 8016806:	9103      	str	r1, [sp, #12]
 8016808:	9302      	str	r3, [sp, #8]
 801680a:	9201      	str	r2, [sp, #4]
 801680c:	f7ff ff86 	bl	801671c <_ZN8touchgfx7Unicode6strlenEPKt>
 8016810:	f1b8 0f00 	cmp.w	r8, #0
 8016814:	bf0c      	ite	eq
 8016816:	4684      	moveq	ip, r0
 8016818:	f100 0c01 	addne.w	ip, r0, #1
 801681c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8016820:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8016824:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016826:	fa1f fc8c 	uxth.w	ip, ip
 801682a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801682c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8016830:	9903      	ldr	r1, [sp, #12]
 8016832:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016836:	d041      	beq.n	80168bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016838:	d834      	bhi.n	80168a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801683a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801683e:	d059      	beq.n	80168f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8016840:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8016844:	d03a      	beq.n	80168bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016846:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801684a:	d034      	beq.n	80168b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801684c:	2400      	movs	r4, #0
 801684e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8016852:	3a01      	subs	r2, #1
 8016854:	b169      	cbz	r1, 8016872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016856:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016858:	458c      	cmp	ip, r1
 801685a:	da09      	bge.n	8016870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801685c:	eba1 010c 	sub.w	r1, r1, ip
 8016860:	b289      	uxth	r1, r1
 8016862:	b933      	cbnz	r3, 8016872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016864:	2e00      	cmp	r6, #0
 8016866:	d051      	beq.n	801690c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016868:	2800      	cmp	r0, #0
 801686a:	d04f      	beq.n	801690c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801686c:	440c      	add	r4, r1
 801686e:	b2a4      	uxth	r4, r4
 8016870:	2100      	movs	r1, #0
 8016872:	682b      	ldr	r3, [r5, #0]
 8016874:	4293      	cmp	r3, r2
 8016876:	da07      	bge.n	8016888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8016878:	f1b8 0f00 	cmp.w	r8, #0
 801687c:	d004      	beq.n	8016888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801687e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8016882:	682b      	ldr	r3, [r5, #0]
 8016884:	3301      	adds	r3, #1
 8016886:	602b      	str	r3, [r5, #0]
 8016888:	2730      	movs	r7, #48	@ 0x30
 801688a:	2c00      	cmp	r4, #0
 801688c:	d04e      	beq.n	801692c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801688e:	682e      	ldr	r6, [r5, #0]
 8016890:	3c01      	subs	r4, #1
 8016892:	42b2      	cmp	r2, r6
 8016894:	b2a4      	uxth	r4, r4
 8016896:	dd49      	ble.n	801692c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016898:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801689c:	682b      	ldr	r3, [r5, #0]
 801689e:	3301      	adds	r3, #1
 80168a0:	602b      	str	r3, [r5, #0]
 80168a2:	e7f2      	b.n	801688a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80168a4:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 80168a8:	d01d      	beq.n	80168e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80168aa:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 80168ae:	d002      	beq.n	80168b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80168b0:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80168b4:	e7c9      	b.n	801684a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80168b6:	4684      	mov	ip, r0
 80168b8:	f04f 0800 	mov.w	r8, #0
 80168bc:	2c00      	cmp	r4, #0
 80168be:	d0c6      	beq.n	801684e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80168c0:	b947      	cbnz	r7, 80168d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80168c2:	2801      	cmp	r0, #1
 80168c4:	d106      	bne.n	80168d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80168c6:	8814      	ldrh	r4, [r2, #0]
 80168c8:	2c30      	cmp	r4, #48	@ 0x30
 80168ca:	bf02      	ittt	eq
 80168cc:	3202      	addeq	r2, #2
 80168ce:	4638      	moveq	r0, r7
 80168d0:	f8cb 2000 	streq.w	r2, [fp]
 80168d4:	45bc      	cmp	ip, r7
 80168d6:	da14      	bge.n	8016902 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80168d8:	b2bf      	uxth	r7, r7
 80168da:	eba7 040c 	sub.w	r4, r7, ip
 80168de:	46bc      	mov	ip, r7
 80168e0:	b2a4      	uxth	r4, r4
 80168e2:	2600      	movs	r6, #0
 80168e4:	e7b3      	b.n	801684e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80168e6:	4684      	mov	ip, r0
 80168e8:	b16c      	cbz	r4, 8016906 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80168ea:	42b8      	cmp	r0, r7
 80168ec:	dd00      	ble.n	80168f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80168ee:	b2b8      	uxth	r0, r7
 80168f0:	2400      	movs	r4, #0
 80168f2:	e003      	b.n	80168fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80168f4:	f04f 0c01 	mov.w	ip, #1
 80168f8:	2400      	movs	r4, #0
 80168fa:	4660      	mov	r0, ip
 80168fc:	4626      	mov	r6, r4
 80168fe:	46a0      	mov	r8, r4
 8016900:	e7a5      	b.n	801684e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016902:	2400      	movs	r4, #0
 8016904:	e7ed      	b.n	80168e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8016906:	4626      	mov	r6, r4
 8016908:	46a0      	mov	r8, r4
 801690a:	e7a0      	b.n	801684e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801690c:	2900      	cmp	r1, #0
 801690e:	d0b0      	beq.n	8016872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016910:	2720      	movs	r7, #32
 8016912:	682e      	ldr	r6, [r5, #0]
 8016914:	2900      	cmp	r1, #0
 8016916:	d0ac      	beq.n	8016872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016918:	3901      	subs	r1, #1
 801691a:	4296      	cmp	r6, r2
 801691c:	b289      	uxth	r1, r1
 801691e:	daa7      	bge.n	8016870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8016920:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8016924:	682b      	ldr	r3, [r5, #0]
 8016926:	3301      	adds	r3, #1
 8016928:	602b      	str	r3, [r5, #0]
 801692a:	e7f2      	b.n	8016912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801692c:	b188      	cbz	r0, 8016952 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801692e:	682b      	ldr	r3, [r5, #0]
 8016930:	3801      	subs	r0, #1
 8016932:	429a      	cmp	r2, r3
 8016934:	b280      	uxth	r0, r0
 8016936:	dd0c      	ble.n	8016952 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8016938:	f8db 3000 	ldr.w	r3, [fp]
 801693c:	1c9c      	adds	r4, r3, #2
 801693e:	f8cb 4000 	str.w	r4, [fp]
 8016942:	881c      	ldrh	r4, [r3, #0]
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801694a:	682b      	ldr	r3, [r5, #0]
 801694c:	3301      	adds	r3, #1
 801694e:	602b      	str	r3, [r5, #0]
 8016950:	e7ec      	b.n	801692c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016952:	2620      	movs	r6, #32
 8016954:	b151      	cbz	r1, 801696c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016956:	6828      	ldr	r0, [r5, #0]
 8016958:	3901      	subs	r1, #1
 801695a:	4282      	cmp	r2, r0
 801695c:	b289      	uxth	r1, r1
 801695e:	dd05      	ble.n	801696c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016960:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8016964:	682b      	ldr	r3, [r5, #0]
 8016966:	3301      	adds	r3, #1
 8016968:	602b      	str	r3, [r5, #0]
 801696a:	e7f3      	b.n	8016954 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801696c:	b005      	add	sp, #20
 801696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8016972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016976:	2400      	movs	r4, #0
 8016978:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801697c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8016980:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8016984:	8014      	strh	r4, [r2, #0]
 8016986:	701c      	strb	r4, [r3, #0]
 8016988:	f888 4000 	strb.w	r4, [r8]
 801698c:	f88c 4000 	strb.w	r4, [ip]
 8016990:	f88e 4000 	strb.w	r4, [lr]
 8016994:	703c      	strb	r4, [r7, #0]
 8016996:	6804      	ldr	r4, [r0, #0]
 8016998:	b1a4      	cbz	r4, 80169c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801699a:	8824      	ldrh	r4, [r4, #0]
 801699c:	f04f 0901 	mov.w	r9, #1
 80169a0:	b314      	cbz	r4, 80169e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80169a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80169a4:	d001      	beq.n	80169aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80169a6:	2c20      	cmp	r4, #32
 80169a8:	d110      	bne.n	80169cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80169aa:	8014      	strh	r4, [r2, #0]
 80169ac:	6804      	ldr	r4, [r0, #0]
 80169ae:	b10c      	cbz	r4, 80169b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80169b0:	3402      	adds	r4, #2
 80169b2:	6004      	str	r4, [r0, #0]
 80169b4:	680c      	ldr	r4, [r1, #0]
 80169b6:	b10c      	cbz	r4, 80169bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80169b8:	3401      	adds	r4, #1
 80169ba:	600c      	str	r4, [r1, #0]
 80169bc:	6804      	ldr	r4, [r0, #0]
 80169be:	b17c      	cbz	r4, 80169e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80169c0:	8824      	ldrh	r4, [r4, #0]
 80169c2:	e7ed      	b.n	80169a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80169c4:	680c      	ldr	r4, [r1, #0]
 80169c6:	b17c      	cbz	r4, 80169e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80169c8:	7824      	ldrb	r4, [r4, #0]
 80169ca:	e7e7      	b.n	801699c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80169cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80169ce:	d102      	bne.n	80169d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80169d0:	f883 9000 	strb.w	r9, [r3]
 80169d4:	e7ea      	b.n	80169ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80169d6:	2c23      	cmp	r4, #35	@ 0x23
 80169d8:	d107      	bne.n	80169ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80169da:	f888 9000 	strb.w	r9, [r8]
 80169de:	e7e5      	b.n	80169ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80169e0:	680c      	ldr	r4, [r1, #0]
 80169e2:	b10c      	cbz	r4, 80169e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80169e4:	7824      	ldrb	r4, [r4, #0]
 80169e6:	e7db      	b.n	80169a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80169e8:	2400      	movs	r4, #0
 80169ea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80169ee:	2b09      	cmp	r3, #9
 80169f0:	d901      	bls.n	80169f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80169f2:	2c2a      	cmp	r4, #42	@ 0x2a
 80169f4:	d122      	bne.n	8016a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80169f6:	2301      	movs	r3, #1
 80169f8:	2c30      	cmp	r4, #48	@ 0x30
 80169fa:	f88e 3000 	strb.w	r3, [lr]
 80169fe:	d10d      	bne.n	8016a1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016a00:	f88c 3000 	strb.w	r3, [ip]
 8016a04:	6803      	ldr	r3, [r0, #0]
 8016a06:	b10b      	cbz	r3, 8016a0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8016a08:	3302      	adds	r3, #2
 8016a0a:	6003      	str	r3, [r0, #0]
 8016a0c:	680b      	ldr	r3, [r1, #0]
 8016a0e:	b10b      	cbz	r3, 8016a14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8016a10:	3301      	adds	r3, #1
 8016a12:	600b      	str	r3, [r1, #0]
 8016a14:	6803      	ldr	r3, [r0, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d02f      	beq.n	8016a7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8016a1a:	881c      	ldrh	r4, [r3, #0]
 8016a1c:	2c2a      	cmp	r4, #42	@ 0x2a
 8016a1e:	d135      	bne.n	8016a8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016a20:	f04f 33ff 	mov.w	r3, #4294967295
 8016a24:	6033      	str	r3, [r6, #0]
 8016a26:	6803      	ldr	r3, [r0, #0]
 8016a28:	b10b      	cbz	r3, 8016a2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8016a2a:	3302      	adds	r3, #2
 8016a2c:	6003      	str	r3, [r0, #0]
 8016a2e:	680b      	ldr	r3, [r1, #0]
 8016a30:	b10b      	cbz	r3, 8016a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8016a32:	3301      	adds	r3, #1
 8016a34:	600b      	str	r3, [r1, #0]
 8016a36:	6803      	ldr	r3, [r0, #0]
 8016a38:	b31b      	cbz	r3, 8016a82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8016a3a:	881c      	ldrh	r4, [r3, #0]
 8016a3c:	2c2e      	cmp	r4, #46	@ 0x2e
 8016a3e:	d11a      	bne.n	8016a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016a40:	2301      	movs	r3, #1
 8016a42:	703b      	strb	r3, [r7, #0]
 8016a44:	6803      	ldr	r3, [r0, #0]
 8016a46:	b10b      	cbz	r3, 8016a4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8016a48:	3302      	adds	r3, #2
 8016a4a:	6003      	str	r3, [r0, #0]
 8016a4c:	680b      	ldr	r3, [r1, #0]
 8016a4e:	b10b      	cbz	r3, 8016a54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8016a50:	3301      	adds	r3, #1
 8016a52:	600b      	str	r3, [r1, #0]
 8016a54:	6803      	ldr	r3, [r0, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d036      	beq.n	8016ac8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8016a5a:	881b      	ldrh	r3, [r3, #0]
 8016a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a5e:	d137      	bne.n	8016ad0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016a60:	f04f 33ff 	mov.w	r3, #4294967295
 8016a64:	602b      	str	r3, [r5, #0]
 8016a66:	6803      	ldr	r3, [r0, #0]
 8016a68:	b10b      	cbz	r3, 8016a6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8016a6a:	3302      	adds	r3, #2
 8016a6c:	6003      	str	r3, [r0, #0]
 8016a6e:	680b      	ldr	r3, [r1, #0]
 8016a70:	b10b      	cbz	r3, 8016a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016a72:	3301      	adds	r3, #1
 8016a74:	600b      	str	r3, [r1, #0]
 8016a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a7a:	680c      	ldr	r4, [r1, #0]
 8016a7c:	b134      	cbz	r4, 8016a8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016a7e:	7824      	ldrb	r4, [r4, #0]
 8016a80:	e7cc      	b.n	8016a1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016a82:	680b      	ldr	r3, [r1, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d0f6      	beq.n	8016a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016a88:	781c      	ldrb	r4, [r3, #0]
 8016a8a:	e7d7      	b.n	8016a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	220a      	movs	r2, #10
 8016a90:	6033      	str	r3, [r6, #0]
 8016a92:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016a96:	fa1f f38c 	uxth.w	r3, ip
 8016a9a:	2b09      	cmp	r3, #9
 8016a9c:	d8ce      	bhi.n	8016a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016a9e:	6833      	ldr	r3, [r6, #0]
 8016aa0:	fb02 c303 	mla	r3, r2, r3, ip
 8016aa4:	6033      	str	r3, [r6, #0]
 8016aa6:	6803      	ldr	r3, [r0, #0]
 8016aa8:	b10b      	cbz	r3, 8016aae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8016aaa:	3302      	adds	r3, #2
 8016aac:	6003      	str	r3, [r0, #0]
 8016aae:	680b      	ldr	r3, [r1, #0]
 8016ab0:	b10b      	cbz	r3, 8016ab6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	600b      	str	r3, [r1, #0]
 8016ab6:	6803      	ldr	r3, [r0, #0]
 8016ab8:	b10b      	cbz	r3, 8016abe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8016aba:	881c      	ldrh	r4, [r3, #0]
 8016abc:	e7e9      	b.n	8016a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016abe:	680c      	ldr	r4, [r1, #0]
 8016ac0:	2c00      	cmp	r4, #0
 8016ac2:	d0e6      	beq.n	8016a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016ac4:	7824      	ldrb	r4, [r4, #0]
 8016ac6:	e7e4      	b.n	8016a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016ac8:	680b      	ldr	r3, [r1, #0]
 8016aca:	b10b      	cbz	r3, 8016ad0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	e7c5      	b.n	8016a5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	240a      	movs	r4, #10
 8016ad4:	602a      	str	r2, [r5, #0]
 8016ad6:	3b30      	subs	r3, #48	@ 0x30
 8016ad8:	682a      	ldr	r2, [r5, #0]
 8016ada:	b29e      	uxth	r6, r3
 8016adc:	2e09      	cmp	r6, #9
 8016ade:	d813      	bhi.n	8016b08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8016ae0:	fb04 3302 	mla	r3, r4, r2, r3
 8016ae4:	602b      	str	r3, [r5, #0]
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	b10b      	cbz	r3, 8016aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8016aea:	3302      	adds	r3, #2
 8016aec:	6003      	str	r3, [r0, #0]
 8016aee:	680b      	ldr	r3, [r1, #0]
 8016af0:	b10b      	cbz	r3, 8016af6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8016af2:	3301      	adds	r3, #1
 8016af4:	600b      	str	r3, [r1, #0]
 8016af6:	6803      	ldr	r3, [r0, #0]
 8016af8:	b10b      	cbz	r3, 8016afe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8016afa:	881b      	ldrh	r3, [r3, #0]
 8016afc:	e7eb      	b.n	8016ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016afe:	680b      	ldr	r3, [r1, #0]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d0e8      	beq.n	8016ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	e7e6      	b.n	8016ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016b08:	2a06      	cmp	r2, #6
 8016b0a:	bfa8      	it	ge
 8016b0c:	2206      	movge	r2, #6
 8016b0e:	602a      	str	r2, [r5, #0]
 8016b10:	e7b1      	b.n	8016a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08016b12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8016b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b16:	b0a3      	sub	sp, #140	@ 0x8c
 8016b18:	2600      	movs	r6, #0
 8016b1a:	4607      	mov	r7, r0
 8016b1c:	4688      	mov	r8, r1
 8016b1e:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8016b22:	4631      	mov	r1, r6
 8016b24:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8016b26:	4648      	mov	r0, r9
 8016b28:	960d      	str	r6, [sp, #52]	@ 0x34
 8016b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016b2e:	2242      	movs	r2, #66	@ 0x42
 8016b30:	f00b fee6 	bl	8022900 <memset>
 8016b34:	b15f      	cbz	r7, 8016b4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8016b36:	f108 3aff 	add.w	sl, r8, #4294967295
 8016b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016b3e:	b152      	cbz	r2, 8016b56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8016b40:	8812      	ldrh	r2, [r2, #0]
 8016b42:	b10a      	cbz	r2, 8016b48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016b44:	459a      	cmp	sl, r3
 8016b46:	dc2e      	bgt.n	8016ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8016b48:	2200      	movs	r2, #0
 8016b4a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016b4e:	4638      	mov	r0, r7
 8016b50:	b023      	add	sp, #140	@ 0x8c
 8016b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b56:	9a08      	ldr	r2, [sp, #32]
 8016b58:	2a00      	cmp	r2, #0
 8016b5a:	d0f5      	beq.n	8016b48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016b5c:	7812      	ldrb	r2, [r2, #0]
 8016b5e:	e7f0      	b.n	8016b42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016b60:	2d00      	cmp	r5, #0
 8016b62:	d0ea      	beq.n	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016b64:	782a      	ldrb	r2, [r5, #0]
 8016b66:	b142      	cbz	r2, 8016b7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8016b68:	2a25      	cmp	r2, #37	@ 0x25
 8016b6a:	d001      	beq.n	8016b70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8016b6c:	459a      	cmp	sl, r3
 8016b6e:	dc08      	bgt.n	8016b82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016b70:	f1bb 0f00 	cmp.w	fp, #0
 8016b74:	d121      	bne.n	8016bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8016b76:	2d00      	cmp	r5, #0
 8016b78:	d0df      	beq.n	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016b7a:	782a      	ldrb	r2, [r5, #0]
 8016b7c:	f04f 0b00 	mov.w	fp, #0
 8016b80:	e01d      	b.n	8016bbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016b82:	f1bb 0f00 	cmp.w	fp, #0
 8016b86:	d077      	beq.n	8016c78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8016b88:	f8bb 2000 	ldrh.w	r2, [fp]
 8016b8c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016b90:	f1bb 0f00 	cmp.w	fp, #0
 8016b94:	d002      	beq.n	8016b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8016b96:	f10b 0202 	add.w	r2, fp, #2
 8016b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b9c:	b10d      	cbz	r5, 8016ba2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8016b9e:	3501      	adds	r5, #1
 8016ba0:	9508      	str	r5, [sp, #32]
 8016ba2:	3301      	adds	r3, #1
 8016ba4:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ba8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8016bac:	f1bb 0f00 	cmp.w	fp, #0
 8016bb0:	d0d6      	beq.n	8016b60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016bb2:	f8bb 2000 	ldrh.w	r2, [fp]
 8016bb6:	2a00      	cmp	r2, #0
 8016bb8:	d1d6      	bne.n	8016b68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8016bba:	f8bb 2000 	ldrh.w	r2, [fp]
 8016bbe:	2a00      	cmp	r2, #0
 8016bc0:	d0bb      	beq.n	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016bc2:	459a      	cmp	sl, r3
 8016bc4:	ddb9      	ble.n	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016bc6:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8016bca:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016bce:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8016bd2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8016bd6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8016bda:	960e      	str	r6, [sp, #56]	@ 0x38
 8016bdc:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8016be0:	960f      	str	r6, [sp, #60]	@ 0x3c
 8016be2:	f1bb 0f00 	cmp.w	fp, #0
 8016be6:	d002      	beq.n	8016bee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8016be8:	f10b 0302 	add.w	r3, fp, #2
 8016bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bee:	b10d      	cbz	r5, 8016bf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8016bf0:	1c6b      	adds	r3, r5, #1
 8016bf2:	9308      	str	r3, [sp, #32]
 8016bf4:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016bf6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8016bfa:	a908      	add	r1, sp, #32
 8016bfc:	a809      	add	r0, sp, #36	@ 0x24
 8016bfe:	9305      	str	r3, [sp, #20]
 8016c00:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8016c04:	9304      	str	r3, [sp, #16]
 8016c06:	ab0e      	add	r3, sp, #56	@ 0x38
 8016c08:	9303      	str	r3, [sp, #12]
 8016c0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c0c:	9302      	str	r3, [sp, #8]
 8016c0e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8016c12:	9301      	str	r3, [sp, #4]
 8016c14:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8016c18:	9300      	str	r3, [sp, #0]
 8016c1a:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8016c1e:	f7ff fea8 	bl	8016972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8016c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	bfbf      	itttt	lt
 8016c28:	6823      	ldrlt	r3, [r4, #0]
 8016c2a:	3404      	addlt	r4, #4
 8016c2c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016c30:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8016c32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	bfbe      	ittt	lt
 8016c38:	6823      	ldrlt	r3, [r4, #0]
 8016c3a:	3404      	addlt	r4, #4
 8016c3c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016c40:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8016c44:	bfb8      	it	lt
 8016c46:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8016c48:	b1d9      	cbz	r1, 8016c82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8016c4a:	880b      	ldrh	r3, [r1, #0]
 8016c4c:	2b69      	cmp	r3, #105	@ 0x69
 8016c4e:	d01f      	beq.n	8016c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016c50:	d82f      	bhi.n	8016cb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8016c52:	2b58      	cmp	r3, #88	@ 0x58
 8016c54:	d01c      	beq.n	8016c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016c56:	d818      	bhi.n	8016c8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8016c58:	2b25      	cmp	r3, #37	@ 0x25
 8016c5a:	d034      	beq.n	8016cc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8016c5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016c5e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016c62:	f1bb 0f00 	cmp.w	fp, #0
 8016c66:	f000 80b7 	beq.w	8016dd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8016c6a:	f8bb 5000 	ldrh.w	r5, [fp]
 8016c6e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016c72:	3301      	adds	r3, #1
 8016c74:	930d      	str	r3, [sp, #52]	@ 0x34
 8016c76:	e029      	b.n	8016ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016c78:	b10d      	cbz	r5, 8016c7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8016c7a:	782a      	ldrb	r2, [r5, #0]
 8016c7c:	e786      	b.n	8016b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016c7e:	462a      	mov	r2, r5
 8016c80:	e784      	b.n	8016b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016c82:	2a00      	cmp	r2, #0
 8016c84:	d0ea      	beq.n	8016c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016c86:	7813      	ldrb	r3, [r2, #0]
 8016c88:	e7e0      	b.n	8016c4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8016c8a:	3b63      	subs	r3, #99	@ 0x63
 8016c8c:	2b01      	cmp	r3, #1
 8016c8e:	d8e5      	bhi.n	8016c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016c90:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8016c94:	b329      	cbz	r1, 8016ce2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8016c96:	880b      	ldrh	r3, [r1, #0]
 8016c98:	2b69      	cmp	r3, #105	@ 0x69
 8016c9a:	d063      	beq.n	8016d64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016c9c:	d825      	bhi.n	8016cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8016c9e:	2b63      	cmp	r3, #99	@ 0x63
 8016ca0:	d038      	beq.n	8016d14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8016ca2:	2b64      	cmp	r3, #100	@ 0x64
 8016ca4:	d05e      	beq.n	8016d64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016ca6:	2b58      	cmp	r3, #88	@ 0x58
 8016ca8:	d07a      	beq.n	8016da0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8016caa:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8016cae:	4625      	mov	r5, r4
 8016cb0:	e036      	b.n	8016d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016cb2:	2b73      	cmp	r3, #115	@ 0x73
 8016cb4:	d0ec      	beq.n	8016c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016cb6:	d802      	bhi.n	8016cbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8016cb8:	2b6f      	cmp	r3, #111	@ 0x6f
 8016cba:	d1cf      	bne.n	8016c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016cbc:	e7e8      	b.n	8016c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016cbe:	2b75      	cmp	r3, #117	@ 0x75
 8016cc0:	d0e6      	beq.n	8016c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016cc2:	2b78      	cmp	r3, #120	@ 0x78
 8016cc4:	e7f9      	b.n	8016cba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8016cc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016cc8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8016ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cce:	b10b      	cbz	r3, 8016cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8016cd0:	3302      	adds	r3, #2
 8016cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cd4:	9b08      	ldr	r3, [sp, #32]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	f43f af2f 	beq.w	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016cdc:	3301      	adds	r3, #1
 8016cde:	9308      	str	r3, [sp, #32]
 8016ce0:	e72b      	b.n	8016b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016ce2:	2a00      	cmp	r2, #0
 8016ce4:	d0e1      	beq.n	8016caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016ce6:	7813      	ldrb	r3, [r2, #0]
 8016ce8:	e7d6      	b.n	8016c98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8016cea:	2b73      	cmp	r3, #115	@ 0x73
 8016cec:	d036      	beq.n	8016d5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8016cee:	d807      	bhi.n	8016d00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8016cf0:	2b6f      	cmp	r3, #111	@ 0x6f
 8016cf2:	d1da      	bne.n	8016caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016cf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016cf6:	1d25      	adds	r5, r4, #4
 8016cf8:	2308      	movs	r3, #8
 8016cfa:	eba8 0202 	sub.w	r2, r8, r2
 8016cfe:	e049      	b.n	8016d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016d00:	2b75      	cmp	r3, #117	@ 0x75
 8016d02:	d042      	beq.n	8016d8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8016d04:	2b78      	cmp	r3, #120	@ 0x78
 8016d06:	d1d0      	bne.n	8016caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016d08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d0a:	1d25      	adds	r5, r4, #4
 8016d0c:	2310      	movs	r3, #16
 8016d0e:	eba8 0202 	sub.w	r2, r8, r2
 8016d12:	e03f      	b.n	8016d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016d14:	6823      	ldr	r3, [r4, #0]
 8016d16:	1d25      	adds	r5, r4, #4
 8016d18:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8016d1c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8016d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d22:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d051      	beq.n	8016dce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8016d2a:	881a      	ldrh	r2, [r3, #0]
 8016d2c:	a80d      	add	r0, sp, #52	@ 0x34
 8016d2e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8016d32:	462c      	mov	r4, r5
 8016d34:	9005      	str	r0, [sp, #20]
 8016d36:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8016d3a:	9004      	str	r0, [sp, #16]
 8016d3c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8016d3e:	9003      	str	r0, [sp, #12]
 8016d40:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8016d44:	9002      	str	r0, [sp, #8]
 8016d46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8016d48:	9001      	str	r0, [sp, #4]
 8016d4a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8016d4e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8016d52:	9000      	str	r0, [sp, #0]
 8016d54:	a810      	add	r0, sp, #64	@ 0x40
 8016d56:	f7ff fd49 	bl	80167ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8016d5a:	e7b7      	b.n	8016ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016d5c:	1d25      	adds	r5, r4, #4
 8016d5e:	6823      	ldr	r3, [r4, #0]
 8016d60:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d62:	e7dd      	b.n	8016d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016d64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d66:	230a      	movs	r3, #10
 8016d68:	4649      	mov	r1, r9
 8016d6a:	6820      	ldr	r0, [r4, #0]
 8016d6c:	eba8 0202 	sub.w	r2, r8, r2
 8016d70:	1d25      	adds	r5, r4, #4
 8016d72:	b292      	uxth	r2, r2
 8016d74:	f7ff fcf0 	bl	8016758 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8016d78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016d7c:	2b2d      	cmp	r3, #45	@ 0x2d
 8016d7e:	d1cf      	bne.n	8016d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016d80:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016d84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016d86:	3302      	adds	r3, #2
 8016d88:	e7ea      	b.n	8016d60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8016d8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d8c:	1d25      	adds	r5, r4, #4
 8016d8e:	230a      	movs	r3, #10
 8016d90:	eba8 0202 	sub.w	r2, r8, r2
 8016d94:	b292      	uxth	r2, r2
 8016d96:	4649      	mov	r1, r9
 8016d98:	6820      	ldr	r0, [r4, #0]
 8016d9a:	f7ff fd09 	bl	80167b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8016d9e:	e7bf      	b.n	8016d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016da0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016da2:	2310      	movs	r3, #16
 8016da4:	4649      	mov	r1, r9
 8016da6:	6820      	ldr	r0, [r4, #0]
 8016da8:	eba8 0202 	sub.w	r2, r8, r2
 8016dac:	1d25      	adds	r5, r4, #4
 8016dae:	b292      	uxth	r2, r2
 8016db0:	f7ff fcfe 	bl	80167b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8016db4:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8016db8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d0af      	beq.n	8016d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016dc0:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8016dc4:	2919      	cmp	r1, #25
 8016dc6:	d8f7      	bhi.n	8016db8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016dc8:	3b20      	subs	r3, #32
 8016dca:	8013      	strh	r3, [r2, #0]
 8016dcc:	e7f4      	b.n	8016db8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016dce:	9a08      	ldr	r2, [sp, #32]
 8016dd0:	2a00      	cmp	r2, #0
 8016dd2:	d0ab      	beq.n	8016d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016dd4:	7812      	ldrb	r2, [r2, #0]
 8016dd6:	e7a9      	b.n	8016d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016dd8:	2d00      	cmp	r5, #0
 8016dda:	f43f af48 	beq.w	8016c6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8016dde:	782d      	ldrb	r5, [r5, #0]
 8016de0:	e745      	b.n	8016c6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08016de2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8016de2:	b507      	push	{r0, r1, r2, lr}
 8016de4:	9300      	str	r3, [sp, #0]
 8016de6:	4613      	mov	r3, r2
 8016de8:	2200      	movs	r2, #0
 8016dea:	f7ff fe92 	bl	8016b12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8016dee:	b003      	add	sp, #12
 8016df0:	f85d fb04 	ldr.w	pc, [sp], #4

08016df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8016df4:	b40c      	push	{r2, r3}
 8016df6:	b507      	push	{r0, r1, r2, lr}
 8016df8:	ab04      	add	r3, sp, #16
 8016dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dfe:	9301      	str	r3, [sp, #4]
 8016e00:	f7ff ffef 	bl	8016de2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8016e04:	b003      	add	sp, #12
 8016e06:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e0a:	b002      	add	sp, #8
 8016e0c:	4770      	bx	lr
	...

08016e10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016e10:	4b01      	ldr	r3, [pc, #4]	@ (8016e18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8016e12:	6018      	str	r0, [r3, #0]
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop
 8016e18:	2402850c 	.word	0x2402850c

08016e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8016e1c:	4b06      	ldr	r3, [pc, #24]	@ (8016e38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8016e1e:	881a      	ldrh	r2, [r3, #0]
 8016e20:	4282      	cmp	r2, r0
 8016e22:	d807      	bhi.n	8016e34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8016e24:	4b05      	ldr	r3, [pc, #20]	@ (8016e3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	4413      	add	r3, r2
 8016e2a:	4298      	cmp	r0, r3
 8016e2c:	bfac      	ite	ge
 8016e2e:	2000      	movge	r0, #0
 8016e30:	2001      	movlt	r0, #1
 8016e32:	4770      	bx	lr
 8016e34:	2000      	movs	r0, #0
 8016e36:	4770      	bx	lr
 8016e38:	2402852c 	.word	0x2402852c
 8016e3c:	24028530 	.word	0x24028530

08016e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016e40:	b508      	push	{r3, lr}
 8016e42:	4601      	mov	r1, r0
 8016e44:	f7ff ffea 	bl	8016e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016e48:	b118      	cbz	r0, 8016e52 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8016e4a:	4b02      	ldr	r3, [pc, #8]	@ (8016e54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8016e52:	bd08      	pop	{r3, pc}
 8016e54:	24028510 	.word	0x24028510

08016e58 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8016e58:	b538      	push	{r3, r4, r5, lr}
 8016e5a:	4604      	mov	r4, r0
 8016e5c:	f7ff ffde 	bl	8016e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016e60:	b1d8      	cbz	r0, 8016e9a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8016e62:	4b0f      	ldr	r3, [pc, #60]	@ (8016ea0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8016e64:	881b      	ldrh	r3, [r3, #0]
 8016e66:	1ae4      	subs	r4, r4, r3
 8016e68:	230e      	movs	r3, #14
 8016e6a:	4363      	muls	r3, r4
 8016e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8016ea4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8016e6e:	6825      	ldr	r5, [r4, #0]
 8016e70:	18ea      	adds	r2, r5, r3
 8016e72:	7b12      	ldrb	r2, [r2, #12]
 8016e74:	f012 0220 	ands.w	r2, r2, #32
 8016e78:	d010      	beq.n	8016e9c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8016e7a:	f9b1 2000 	ldrsh.w	r2, [r1]
 8016e7e:	52ea      	strh	r2, [r5, r3]
 8016e80:	6822      	ldr	r2, [r4, #0]
 8016e82:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016e86:	441a      	add	r2, r3
 8016e88:	8055      	strh	r5, [r2, #2]
 8016e8a:	6822      	ldr	r2, [r4, #0]
 8016e8c:	4413      	add	r3, r2
 8016e8e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8016e92:	809a      	strh	r2, [r3, #4]
 8016e94:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016e98:	80da      	strh	r2, [r3, #6]
 8016e9a:	bd38      	pop	{r3, r4, r5, pc}
 8016e9c:	4610      	mov	r0, r2
 8016e9e:	e7fc      	b.n	8016e9a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8016ea0:	2402852c 	.word	0x2402852c
 8016ea4:	24028514 	.word	0x24028514

08016ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8016ea8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016eac:	4606      	mov	r6, r0
 8016eae:	460c      	mov	r4, r1
 8016eb0:	f7ff ffb4 	bl	8016e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016eb4:	b918      	cbnz	r0, 8016ebe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	b002      	add	sp, #8
 8016eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ebe:	4608      	mov	r0, r1
 8016ec0:	f7f6 fee7 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d1f6      	bne.n	8016eb6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8016fc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8016eca:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8016fcc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8016ece:	881d      	ldrh	r5, [r3, #0]
 8016ed0:	f8d9 a000 	ldr.w	sl, [r9]
 8016ed4:	46c8      	mov	r8, r9
 8016ed6:	1b73      	subs	r3, r6, r5
 8016ed8:	250e      	movs	r5, #14
 8016eda:	435d      	muls	r5, r3
 8016edc:	eb0a 0705 	add.w	r7, sl, r5
 8016ee0:	7b3b      	ldrb	r3, [r7, #12]
 8016ee2:	f013 0f20 	tst.w	r3, #32
 8016ee6:	d0e6      	beq.n	8016eb6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016ee8:	4621      	mov	r1, r4
 8016eea:	4638      	mov	r0, r7
 8016eec:	f7fc fc86 	bl	80137fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	d1e1      	bne.n	8016eb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016ef4:	4639      	mov	r1, r7
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f7fc fc80 	bl	80137fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8016efc:	b108      	cbz	r0, 8016f02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8016efe:	4621      	mov	r1, r4
 8016f00:	e020      	b.n	8016f44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8016f02:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016f06:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d11e      	bne.n	8016f4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016f0e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016f12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d118      	bne.n	8016f4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016f1a:	6820      	ldr	r0, [r4, #0]
 8016f1c:	466b      	mov	r3, sp
 8016f1e:	6861      	ldr	r1, [r4, #4]
 8016f20:	c303      	stmia	r3!, {r0, r1}
 8016f22:	4639      	mov	r1, r7
 8016f24:	4668      	mov	r0, sp
 8016f26:	f7f6 ff8a 	bl	800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8016f2e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016f32:	442b      	add	r3, r5
 8016f34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016f38:	4413      	add	r3, r2
 8016f3a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	dc04      	bgt.n	8016f4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016f42:	4669      	mov	r1, sp
 8016f44:	4630      	mov	r0, r6
 8016f46:	f7ff ff87 	bl	8016e58 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8016f4a:	e7b5      	b.n	8016eb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8016f50:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016f54:	442b      	add	r3, r5
 8016f56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f5a:	4291      	cmp	r1, r2
 8016f5c:	d119      	bne.n	8016f92 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016f5e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016f62:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016f66:	4291      	cmp	r1, r2
 8016f68:	d113      	bne.n	8016f92 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016f6a:	6820      	ldr	r0, [r4, #0]
 8016f6c:	466a      	mov	r2, sp
 8016f6e:	6861      	ldr	r1, [r4, #4]
 8016f70:	c203      	stmia	r2!, {r0, r1}
 8016f72:	4619      	mov	r1, r3
 8016f74:	4668      	mov	r0, sp
 8016f76:	f7f6 ff62 	bl	800de3e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8016f7e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016f82:	442b      	add	r3, r5
 8016f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f88:	4413      	add	r3, r2
 8016f8a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	ddd7      	ble.n	8016f42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7f6 fe7d 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f98:	b990      	cbnz	r0, 8016fc0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8016f9a:	88a7      	ldrh	r7, [r4, #4]
 8016f9c:	88e3      	ldrh	r3, [r4, #6]
 8016f9e:	fb17 f703 	smulbb	r7, r7, r3
 8016fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8016fa6:	441d      	add	r5, r3
 8016fa8:	4628      	mov	r0, r5
 8016faa:	f7f6 fe72 	bl	800dc92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fae:	b948      	cbnz	r0, 8016fc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8016fb0:	88ab      	ldrh	r3, [r5, #4]
 8016fb2:	88ea      	ldrh	r2, [r5, #6]
 8016fb4:	fb13 f302 	smulbb	r3, r3, r2
 8016fb8:	42bb      	cmp	r3, r7
 8016fba:	f6bf af7c 	bge.w	8016eb6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016fbe:	e79e      	b.n	8016efe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8016fc0:	2700      	movs	r7, #0
 8016fc2:	e7ee      	b.n	8016fa2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	e7f7      	b.n	8016fb8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8016fc8:	2402852c 	.word	0x2402852c
 8016fcc:	24028514 	.word	0x24028514

08016fd0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	4c24      	ldr	r4, [pc, #144]	@ (8017064 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d042      	beq.n	8017060 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016fda:	4a23      	ldr	r2, [pc, #140]	@ (8017068 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016fdc:	4d23      	ldr	r5, [pc, #140]	@ (801706c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8016fde:	8811      	ldrh	r1, [r2, #0]
 8016fe0:	f8b5 c000 	ldrh.w	ip, [r5]
 8016fe4:	4822      	ldr	r0, [pc, #136]	@ (8017070 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8016fe6:	4461      	add	r1, ip
 8016fe8:	1c4a      	adds	r2, r1, #1
 8016fea:	008f      	lsls	r7, r1, #2
 8016fec:	f022 0201 	bic.w	r2, r2, #1
 8016ff0:	19de      	adds	r6, r3, r7
 8016ff2:	0412      	lsls	r2, r2, #16
 8016ff4:	6006      	str	r6, [r0, #0]
 8016ff6:	4e1f      	ldr	r6, [pc, #124]	@ (8017074 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8016ff8:	0c12      	lsrs	r2, r2, #16
 8016ffa:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016ffe:	19da      	adds	r2, r3, r7
 8017000:	6032      	str	r2, [r6, #0]
 8017002:	220e      	movs	r2, #14
 8017004:	fb02 f20c 	mul.w	r2, r2, ip
 8017008:	3203      	adds	r2, #3
 801700a:	f022 0203 	bic.w	r2, r2, #3
 801700e:	443a      	add	r2, r7
 8017010:	4f19      	ldr	r7, [pc, #100]	@ (8017078 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017012:	4413      	add	r3, r2
 8017014:	603b      	str	r3, [r7, #0]
 8017016:	2300      	movs	r3, #0
 8017018:	4f18      	ldr	r7, [pc, #96]	@ (801707c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801701a:	469c      	mov	ip, r3
 801701c:	803b      	strh	r3, [r7, #0]
 801701e:	4f18      	ldr	r7, [pc, #96]	@ (8017080 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017020:	683f      	ldr	r7, [r7, #0]
 8017022:	1aba      	subs	r2, r7, r2
 8017024:	4f17      	ldr	r7, [pc, #92]	@ (8017084 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017026:	603a      	str	r2, [r7, #0]
 8017028:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801702c:	4a16      	ldr	r2, [pc, #88]	@ (8017088 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801702e:	8013      	strh	r3, [r2, #0]
 8017030:	428b      	cmp	r3, r1
 8017032:	d10d      	bne.n	8017050 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017034:	882d      	ldrh	r5, [r5, #0]
 8017036:	2300      	movs	r3, #0
 8017038:	6830      	ldr	r0, [r6, #0]
 801703a:	240e      	movs	r4, #14
 801703c:	429d      	cmp	r5, r3
 801703e:	d90f      	bls.n	8017060 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017040:	fb04 0203 	mla	r2, r4, r3, r0
 8017044:	3301      	adds	r3, #1
 8017046:	7b11      	ldrb	r1, [r2, #12]
 8017048:	f36f 1145 	bfc	r1, #5, #1
 801704c:	7311      	strb	r1, [r2, #12]
 801704e:	e7f5      	b.n	801703c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017050:	6822      	ldr	r2, [r4, #0]
 8017052:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017056:	6802      	ldr	r2, [r0, #0]
 8017058:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801705c:	3301      	adds	r3, #1
 801705e:	e7e7      	b.n	8017030 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017062:	bf00      	nop
 8017064:	24028510 	.word	0x24028510
 8017068:	2402852c 	.word	0x2402852c
 801706c:	24028530 	.word	0x24028530
 8017070:	24028524 	.word	0x24028524
 8017074:	24028514 	.word	0x24028514
 8017078:	2402851c 	.word	0x2402851c
 801707c:	2402852e 	.word	0x2402852e
 8017080:	24028518 	.word	0x24028518
 8017084:	24028528 	.word	0x24028528
 8017088:	24028520 	.word	0x24028520

0801708c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801708c:	4b06      	ldr	r3, [pc, #24]	@ (80170a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	b943      	cbnz	r3, 80170a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017092:	b139      	cbz	r1, 80170a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017094:	4b05      	ldr	r3, [pc, #20]	@ (80170ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017096:	801a      	strh	r2, [r3, #0]
 8017098:	4b05      	ldr	r3, [pc, #20]	@ (80170b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801709a:	6019      	str	r1, [r3, #0]
 801709c:	4b05      	ldr	r3, [pc, #20]	@ (80170b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801709e:	6018      	str	r0, [r3, #0]
 80170a0:	f7ff bf96 	b.w	8016fd0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80170a4:	4770      	bx	lr
 80170a6:	bf00      	nop
 80170a8:	2402851c 	.word	0x2402851c
 80170ac:	24028530 	.word	0x24028530
 80170b0:	24028518 	.word	0x24028518
 80170b4:	24028510 	.word	0x24028510

080170b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80170b8:	b470      	push	{r4, r5, r6}
 80170ba:	4c07      	ldr	r4, [pc, #28]	@ (80170d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80170bc:	4605      	mov	r5, r0
 80170be:	4610      	mov	r0, r2
 80170c0:	9a03      	ldr	r2, [sp, #12]
 80170c2:	6826      	ldr	r6, [r4, #0]
 80170c4:	b936      	cbnz	r6, 80170d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80170c6:	6025      	str	r5, [r4, #0]
 80170c8:	4c04      	ldr	r4, [pc, #16]	@ (80170dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80170ca:	8021      	strh	r1, [r4, #0]
 80170cc:	4619      	mov	r1, r3
 80170ce:	bc70      	pop	{r4, r5, r6}
 80170d0:	f7ff bfdc 	b.w	801708c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80170d4:	bc70      	pop	{r4, r5, r6}
 80170d6:	4770      	bx	lr
 80170d8:	24028534 	.word	0x24028534
 80170dc:	2402852c 	.word	0x2402852c

080170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80170e0:	4a12      	ldr	r2, [pc, #72]	@ (801712c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80170e2:	8803      	ldrh	r3, [r0, #0]
 80170e4:	8812      	ldrh	r2, [r2, #0]
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d207      	bcs.n	80170fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80170ea:	4a11      	ldr	r2, [pc, #68]	@ (8017130 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80170ec:	2114      	movs	r1, #20
 80170ee:	6812      	ldr	r2, [r2, #0]
 80170f0:	fb01 2303 	mla	r3, r1, r3, r2
 80170f4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80170f8:	4770      	bx	lr
 80170fa:	490e      	ldr	r1, [pc, #56]	@ (8017134 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80170fc:	8809      	ldrh	r1, [r1, #0]
 80170fe:	4411      	add	r1, r2
 8017100:	428b      	cmp	r3, r1
 8017102:	da04      	bge.n	801710e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017104:	1a9b      	subs	r3, r3, r2
 8017106:	4a0c      	ldr	r2, [pc, #48]	@ (8017138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017108:	210e      	movs	r1, #14
 801710a:	6812      	ldr	r2, [r2, #0]
 801710c:	e7f0      	b.n	80170f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801710e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017112:	4293      	cmp	r3, r2
 8017114:	d108      	bne.n	8017128 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017116:	4b09      	ldr	r3, [pc, #36]	@ (801713c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	b91b      	cbnz	r3, 8017124 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801711c:	4b08      	ldr	r3, [pc, #32]	@ (8017140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801711e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017122:	4770      	bx	lr
 8017124:	4b07      	ldr	r3, [pc, #28]	@ (8017144 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017126:	e7fa      	b.n	801711e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017128:	2000      	movs	r0, #0
 801712a:	4770      	bx	lr
 801712c:	2402852c 	.word	0x2402852c
 8017130:	24028534 	.word	0x24028534
 8017134:	24028530 	.word	0x24028530
 8017138:	24028514 	.word	0x24028514
 801713c:	2402849c 	.word	0x2402849c
 8017140:	2402849e 	.word	0x2402849e
 8017144:	240284a0 	.word	0x240284a0

08017148 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017148:	4a12      	ldr	r2, [pc, #72]	@ (8017194 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801714a:	8803      	ldrh	r3, [r0, #0]
 801714c:	8812      	ldrh	r2, [r2, #0]
 801714e:	4293      	cmp	r3, r2
 8017150:	d207      	bcs.n	8017162 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017152:	4a11      	ldr	r2, [pc, #68]	@ (8017198 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017154:	2114      	movs	r1, #20
 8017156:	6812      	ldr	r2, [r2, #0]
 8017158:	fb01 2303 	mla	r3, r1, r3, r2
 801715c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017160:	4770      	bx	lr
 8017162:	490e      	ldr	r1, [pc, #56]	@ (801719c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017164:	8809      	ldrh	r1, [r1, #0]
 8017166:	4411      	add	r1, r2
 8017168:	428b      	cmp	r3, r1
 801716a:	da04      	bge.n	8017176 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801716c:	1a9b      	subs	r3, r3, r2
 801716e:	4a0c      	ldr	r2, [pc, #48]	@ (80171a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017170:	210e      	movs	r1, #14
 8017172:	6812      	ldr	r2, [r2, #0]
 8017174:	e7f0      	b.n	8017158 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017176:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801717a:	4293      	cmp	r3, r2
 801717c:	d108      	bne.n	8017190 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801717e:	4b09      	ldr	r3, [pc, #36]	@ (80171a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	b91b      	cbnz	r3, 801718c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017184:	4b08      	ldr	r3, [pc, #32]	@ (80171a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017186:	f9b3 0000 	ldrsh.w	r0, [r3]
 801718a:	4770      	bx	lr
 801718c:	4b07      	ldr	r3, [pc, #28]	@ (80171ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801718e:	e7fa      	b.n	8017186 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017190:	2000      	movs	r0, #0
 8017192:	4770      	bx	lr
 8017194:	2402852c 	.word	0x2402852c
 8017198:	24028534 	.word	0x24028534
 801719c:	24028530 	.word	0x24028530
 80171a0:	24028514 	.word	0x24028514
 80171a4:	2402849c 	.word	0x2402849c
 80171a8:	240284a0 	.word	0x240284a0
 80171ac:	2402849e 	.word	0x2402849e

080171b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80171b0:	4a22      	ldr	r2, [pc, #136]	@ (801723c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80171b2:	b530      	push	{r4, r5, lr}
 80171b4:	880b      	ldrh	r3, [r1, #0]
 80171b6:	8812      	ldrh	r2, [r2, #0]
 80171b8:	4293      	cmp	r3, r2
 80171ba:	d213      	bcs.n	80171e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80171bc:	4a20      	ldr	r2, [pc, #128]	@ (8017240 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80171be:	2114      	movs	r1, #20
 80171c0:	6812      	ldr	r2, [r2, #0]
 80171c2:	fb01 2303 	mla	r3, r1, r3, r2
 80171c6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80171ca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80171ce:	8a1a      	ldrh	r2, [r3, #16]
 80171d0:	8a5b      	ldrh	r3, [r3, #18]
 80171d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80171d6:	8004      	strh	r4, [r0, #0]
 80171d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171dc:	8041      	strh	r1, [r0, #2]
 80171de:	8082      	strh	r2, [r0, #4]
 80171e0:	80c3      	strh	r3, [r0, #6]
 80171e2:	e024      	b.n	801722e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80171e4:	4917      	ldr	r1, [pc, #92]	@ (8017244 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80171e6:	8809      	ldrh	r1, [r1, #0]
 80171e8:	4411      	add	r1, r2
 80171ea:	428b      	cmp	r3, r1
 80171ec:	da10      	bge.n	8017210 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80171ee:	1a9b      	subs	r3, r3, r2
 80171f0:	220e      	movs	r2, #14
 80171f2:	4353      	muls	r3, r2
 80171f4:	4a14      	ldr	r2, [pc, #80]	@ (8017248 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80171f6:	6811      	ldr	r1, [r2, #0]
 80171f8:	18ca      	adds	r2, r1, r3
 80171fa:	5ecd      	ldrsh	r5, [r1, r3]
 80171fc:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8017200:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017204:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017208:	8005      	strh	r5, [r0, #0]
 801720a:	8044      	strh	r4, [r0, #2]
 801720c:	8081      	strh	r1, [r0, #4]
 801720e:	e7e7      	b.n	80171e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017210:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017214:	4293      	cmp	r3, r2
 8017216:	d10b      	bne.n	8017230 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017218:	4b0c      	ldr	r3, [pc, #48]	@ (801724c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801721a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801721e:	4b0c      	ldr	r3, [pc, #48]	@ (8017250 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017220:	8081      	strh	r1, [r0, #4]
 8017222:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017226:	2300      	movs	r3, #0
 8017228:	80c2      	strh	r2, [r0, #6]
 801722a:	8003      	strh	r3, [r0, #0]
 801722c:	8043      	strh	r3, [r0, #2]
 801722e:	bd30      	pop	{r4, r5, pc}
 8017230:	2300      	movs	r3, #0
 8017232:	8003      	strh	r3, [r0, #0]
 8017234:	8043      	strh	r3, [r0, #2]
 8017236:	8083      	strh	r3, [r0, #4]
 8017238:	e7d2      	b.n	80171e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801723a:	bf00      	nop
 801723c:	2402852c 	.word	0x2402852c
 8017240:	24028534 	.word	0x24028534
 8017244:	24028530 	.word	0x24028530
 8017248:	24028514 	.word	0x24028514
 801724c:	24028498 	.word	0x24028498
 8017250:	2402849a 	.word	0x2402849a

08017254 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017254:	4a17      	ldr	r2, [pc, #92]	@ (80172b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8017256:	8803      	ldrh	r3, [r0, #0]
 8017258:	8812      	ldrh	r2, [r2, #0]
 801725a:	4293      	cmp	r3, r2
 801725c:	d213      	bcs.n	8017286 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801725e:	4a16      	ldr	r2, [pc, #88]	@ (80172b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017260:	2114      	movs	r1, #20
 8017262:	6812      	ldr	r2, [r2, #0]
 8017264:	fb01 2303 	mla	r3, r1, r3, r2
 8017268:	8a1a      	ldrh	r2, [r3, #16]
 801726a:	8919      	ldrh	r1, [r3, #8]
 801726c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017270:	428a      	cmp	r2, r1
 8017272:	db1d      	blt.n	80172b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017274:	8a58      	ldrh	r0, [r3, #18]
 8017276:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801727a:	895b      	ldrh	r3, [r3, #10]
 801727c:	4298      	cmp	r0, r3
 801727e:	bfac      	ite	ge
 8017280:	2000      	movge	r0, #0
 8017282:	2001      	movlt	r0, #1
 8017284:	4770      	bx	lr
 8017286:	490d      	ldr	r1, [pc, #52]	@ (80172bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017288:	8809      	ldrh	r1, [r1, #0]
 801728a:	4411      	add	r1, r2
 801728c:	428b      	cmp	r3, r1
 801728e:	da0d      	bge.n	80172ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017290:	1a9b      	subs	r3, r3, r2
 8017292:	4a0b      	ldr	r2, [pc, #44]	@ (80172c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017294:	210e      	movs	r1, #14
 8017296:	6812      	ldr	r2, [r2, #0]
 8017298:	fb01 2303 	mla	r3, r1, r3, r2
 801729c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80172a0:	891a      	ldrh	r2, [r3, #8]
 80172a2:	4291      	cmp	r1, r2
 80172a4:	db04      	blt.n	80172b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80172a6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80172aa:	e7e6      	b.n	801727a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80172ac:	2000      	movs	r0, #0
 80172ae:	4770      	bx	lr
 80172b0:	2001      	movs	r0, #1
 80172b2:	4770      	bx	lr
 80172b4:	2402852c 	.word	0x2402852c
 80172b8:	24028534 	.word	0x24028534
 80172bc:	24028530 	.word	0x24028530
 80172c0:	24028514 	.word	0x24028514

080172c4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80172c4:	4a12      	ldr	r2, [pc, #72]	@ (8017310 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80172c6:	8803      	ldrh	r3, [r0, #0]
 80172c8:	8811      	ldrh	r1, [r2, #0]
 80172ca:	428b      	cmp	r3, r1
 80172cc:	d20b      	bcs.n	80172e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80172ce:	4a11      	ldr	r2, [pc, #68]	@ (8017314 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80172d0:	6812      	ldr	r2, [r2, #0]
 80172d2:	b112      	cbz	r2, 80172da <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80172d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80172d8:	b9c0      	cbnz	r0, 801730c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80172da:	4a0f      	ldr	r2, [pc, #60]	@ (8017318 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80172dc:	6811      	ldr	r1, [r2, #0]
 80172de:	2214      	movs	r2, #20
 80172e0:	4353      	muls	r3, r2
 80172e2:	58c8      	ldr	r0, [r1, r3]
 80172e4:	4770      	bx	lr
 80172e6:	4a0d      	ldr	r2, [pc, #52]	@ (801731c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80172e8:	8812      	ldrh	r2, [r2, #0]
 80172ea:	440a      	add	r2, r1
 80172ec:	4293      	cmp	r3, r2
 80172ee:	da04      	bge.n	80172fa <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80172f0:	4a08      	ldr	r2, [pc, #32]	@ (8017314 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80172f2:	6812      	ldr	r2, [r2, #0]
 80172f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80172f8:	4770      	bx	lr
 80172fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80172fe:	4293      	cmp	r3, r2
 8017300:	d103      	bne.n	801730a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017302:	4b07      	ldr	r3, [pc, #28]	@ (8017320 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017308:	4770      	bx	lr
 801730a:	2000      	movs	r0, #0
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop
 8017310:	2402852c 	.word	0x2402852c
 8017314:	24028510 	.word	0x24028510
 8017318:	24028534 	.word	0x24028534
 801731c:	24028530 	.word	0x24028530
 8017320:	240284a4 	.word	0x240284a4

08017324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017324:	4b24      	ldr	r3, [pc, #144]	@ (80173b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017326:	8802      	ldrh	r2, [r0, #0]
 8017328:	8818      	ldrh	r0, [r3, #0]
 801732a:	4282      	cmp	r2, r0
 801732c:	d221      	bcs.n	8017372 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801732e:	4b23      	ldr	r3, [pc, #140]	@ (80173bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017330:	6819      	ldr	r1, [r3, #0]
 8017332:	2314      	movs	r3, #20
 8017334:	fb03 1302 	mla	r3, r3, r2, r1
 8017338:	6858      	ldr	r0, [r3, #4]
 801733a:	2800      	cmp	r0, #0
 801733c:	d03a      	beq.n	80173b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801733e:	4920      	ldr	r1, [pc, #128]	@ (80173c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017340:	6809      	ldr	r1, [r1, #0]
 8017342:	2900      	cmp	r1, #0
 8017344:	d036      	beq.n	80173b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801734a:	2900      	cmp	r1, #0
 801734c:	d032      	beq.n	80173b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801734e:	891a      	ldrh	r2, [r3, #8]
 8017350:	8958      	ldrh	r0, [r3, #10]
 8017352:	4350      	muls	r0, r2
 8017354:	7c5a      	ldrb	r2, [r3, #17]
 8017356:	7cdb      	ldrb	r3, [r3, #19]
 8017358:	0952      	lsrs	r2, r2, #5
 801735a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801735e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017362:	2b0b      	cmp	r3, #11
 8017364:	bf18      	it	ne
 8017366:	0040      	lslne	r0, r0, #1
 8017368:	3003      	adds	r0, #3
 801736a:	f020 0003 	bic.w	r0, r0, #3
 801736e:	4408      	add	r0, r1
 8017370:	4770      	bx	lr
 8017372:	4b14      	ldr	r3, [pc, #80]	@ (80173c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	4403      	add	r3, r0
 8017378:	429a      	cmp	r2, r3
 801737a:	da1a      	bge.n	80173b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801737c:	4b12      	ldr	r3, [pc, #72]	@ (80173c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801737e:	1a10      	subs	r0, r2, r0
 8017380:	210e      	movs	r1, #14
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	fb01 3000 	mla	r0, r1, r0, r3
 8017388:	7b03      	ldrb	r3, [r0, #12]
 801738a:	f003 031f 	and.w	r3, r3, #31
 801738e:	2b0b      	cmp	r3, #11
 8017390:	d10b      	bne.n	80173aa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017392:	8903      	ldrh	r3, [r0, #8]
 8017394:	8940      	ldrh	r0, [r0, #10]
 8017396:	4358      	muls	r0, r3
 8017398:	4b09      	ldr	r3, [pc, #36]	@ (80173c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801739a:	3003      	adds	r0, #3
 801739c:	6819      	ldr	r1, [r3, #0]
 801739e:	f020 0303 	bic.w	r3, r0, #3
 80173a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80173a6:	4418      	add	r0, r3
 80173a8:	4770      	bx	lr
 80173aa:	2b0d      	cmp	r3, #13
 80173ac:	d101      	bne.n	80173b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80173ae:	300d      	adds	r0, #13
 80173b0:	4770      	bx	lr
 80173b2:	2000      	movs	r0, #0
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop
 80173b8:	2402852c 	.word	0x2402852c
 80173bc:	24028534 	.word	0x24028534
 80173c0:	24028510 	.word	0x24028510
 80173c4:	24028530 	.word	0x24028530
 80173c8:	24028514 	.word	0x24028514

080173cc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80173cc:	4b1f      	ldr	r3, [pc, #124]	@ (801744c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80173ce:	b510      	push	{r4, lr}
 80173d0:	8802      	ldrh	r2, [r0, #0]
 80173d2:	881b      	ldrh	r3, [r3, #0]
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d21a      	bcs.n	801740e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80173d8:	4b1d      	ldr	r3, [pc, #116]	@ (8017450 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80173da:	2114      	movs	r1, #20
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	fb01 3102 	mla	r1, r1, r2, r3
 80173e2:	7c4b      	ldrb	r3, [r1, #17]
 80173e4:	0958      	lsrs	r0, r3, #5
 80173e6:	7ccb      	ldrb	r3, [r1, #19]
 80173e8:	491a      	ldr	r1, [pc, #104]	@ (8017454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80173ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80173ee:	6809      	ldr	r1, [r1, #0]
 80173f0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80173f4:	b2d8      	uxtb	r0, r3
 80173f6:	b149      	cbz	r1, 801740c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80173f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80173fc:	b132      	cbz	r2, 801740c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80173fe:	2b0e      	cmp	r3, #14
 8017400:	d021      	beq.n	8017446 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017402:	280f      	cmp	r0, #15
 8017404:	d01d      	beq.n	8017442 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8017406:	2810      	cmp	r0, #16
 8017408:	bf08      	it	eq
 801740a:	2002      	moveq	r0, #2
 801740c:	bd10      	pop	{r4, pc}
 801740e:	4912      	ldr	r1, [pc, #72]	@ (8017458 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8017410:	8809      	ldrh	r1, [r1, #0]
 8017412:	4419      	add	r1, r3
 8017414:	428a      	cmp	r2, r1
 8017416:	da09      	bge.n	801742c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8017418:	1ad3      	subs	r3, r2, r3
 801741a:	4a10      	ldr	r2, [pc, #64]	@ (801745c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801741c:	210e      	movs	r1, #14
 801741e:	6812      	ldr	r2, [r2, #0]
 8017420:	fb01 2303 	mla	r3, r1, r3, r2
 8017424:	7b18      	ldrb	r0, [r3, #12]
 8017426:	f000 001f 	and.w	r0, r0, #31
 801742a:	e7ef      	b.n	801740c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801742c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8017430:	429a      	cmp	r2, r3
 8017432:	d108      	bne.n	8017446 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017434:	f7ec fbe0 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8017438:	6803      	ldr	r3, [r0, #0]
 801743a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017440:	4718      	bx	r3
 8017442:	2001      	movs	r0, #1
 8017444:	e7e2      	b.n	801740c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017446:	2000      	movs	r0, #0
 8017448:	e7e0      	b.n	801740c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801744a:	bf00      	nop
 801744c:	2402852c 	.word	0x2402852c
 8017450:	24028534 	.word	0x24028534
 8017454:	24028510 	.word	0x24028510
 8017458:	24028530 	.word	0x24028530
 801745c:	24028514 	.word	0x24028514

08017460 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8017460:	2018      	movs	r0, #24
 8017462:	4770      	bx	lr

08017464 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017464:	2001      	movs	r0, #1
 8017466:	4770      	bx	lr

08017468 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017468:	4b02      	ldr	r3, [pc, #8]	@ (8017474 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801746a:	8818      	ldrh	r0, [r3, #0]
 801746c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017470:	b280      	uxth	r0, r0
 8017472:	4770      	bx	lr
 8017474:	2402849e 	.word	0x2402849e

08017478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017478:	2bff      	cmp	r3, #255	@ 0xff
 801747a:	d04c      	beq.n	8017516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801747c:	2a2c      	cmp	r2, #44	@ 0x2c
 801747e:	d030      	beq.n	80174e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8017480:	d80f      	bhi.n	80174a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8017482:	2a08      	cmp	r2, #8
 8017484:	d043      	beq.n	801750e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017486:	d805      	bhi.n	8017494 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8017488:	2a04      	cmp	r2, #4
 801748a:	d03e      	beq.n	801750a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801748c:	2a05      	cmp	r2, #5
 801748e:	d03a      	beq.n	8017506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017490:	2300      	movs	r3, #0
 8017492:	e024      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017494:	2a0a      	cmp	r2, #10
 8017496:	d03a      	beq.n	801750e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017498:	d301      	bcc.n	801749e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801749a:	2a0b      	cmp	r2, #11
 801749c:	d1f8      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801749e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80174a0:	e01d      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174a2:	2a30      	cmp	r2, #48	@ 0x30
 80174a4:	d035      	beq.n	8017512 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80174a6:	d80a      	bhi.n	80174be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80174a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80174aa:	684b      	ldr	r3, [r1, #4]
 80174ac:	d023      	beq.n	80174f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80174ae:	d90d      	bls.n	80174cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80174b0:	781a      	ldrb	r2, [r3, #0]
 80174b2:	785b      	ldrb	r3, [r3, #1]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d1eb      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174b8:	b98a      	cbnz	r2, 80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80174bc:	e00f      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174be:	2a32      	cmp	r2, #50	@ 0x32
 80174c0:	d027      	beq.n	8017512 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80174c2:	d301      	bcc.n	80174c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80174c4:	2a33      	cmp	r2, #51	@ 0x33
 80174c6:	d1e3      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80174ca:	e008      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174cc:	781a      	ldrb	r2, [r3, #0]
 80174ce:	785b      	ldrb	r3, [r3, #1]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d1dd      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174d4:	2a00      	cmp	r2, #0
 80174d6:	d0f0      	beq.n	80174ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80174d8:	2a01      	cmp	r2, #1
 80174da:	d1d9      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174dc:	6943      	ldr	r3, [r0, #20]
 80174de:	4618      	mov	r0, r3
 80174e0:	4770      	bx	lr
 80174e2:	684b      	ldr	r3, [r1, #4]
 80174e4:	781a      	ldrb	r2, [r3, #0]
 80174e6:	785b      	ldrb	r3, [r3, #1]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d1d1      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174ec:	b14a      	cbz	r2, 8017502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80174ee:	2a01      	cmp	r2, #1
 80174f0:	bf08      	it	eq
 80174f2:	68c3      	ldreq	r3, [r0, #12]
 80174f4:	e7f3      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80174f6:	781a      	ldrb	r2, [r3, #0]
 80174f8:	785b      	ldrb	r3, [r3, #1]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d1c8      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80174fe:	2a00      	cmp	r2, #0
 8017500:	d1ed      	bne.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017502:	69c3      	ldr	r3, [r0, #28]
 8017504:	e7eb      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017506:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017508:	e7e9      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801750a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801750c:	e7e7      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801750e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8017510:	e7e5      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017512:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017514:	e7e3      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017516:	2a2c      	cmp	r2, #44	@ 0x2c
 8017518:	d030      	beq.n	801757c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801751a:	d80f      	bhi.n	801753c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801751c:	2a08      	cmp	r2, #8
 801751e:	d042      	beq.n	80175a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017520:	d805      	bhi.n	801752e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8017522:	2a04      	cmp	r2, #4
 8017524:	d03d      	beq.n	80175a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8017526:	2a05      	cmp	r2, #5
 8017528:	d1b2      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801752a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801752c:	e7d7      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801752e:	2a0a      	cmp	r2, #10
 8017530:	d039      	beq.n	80175a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017532:	d301      	bcc.n	8017538 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8017534:	2a0b      	cmp	r2, #11
 8017536:	d1ab      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017538:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801753a:	e7d0      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801753c:	2a30      	cmp	r2, #48	@ 0x30
 801753e:	d034      	beq.n	80175aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017540:	d80b      	bhi.n	801755a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8017542:	2a2e      	cmp	r2, #46	@ 0x2e
 8017544:	684b      	ldr	r3, [r1, #4]
 8017546:	d023      	beq.n	8017590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017548:	d90e      	bls.n	8017568 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801754a:	781a      	ldrb	r2, [r3, #0]
 801754c:	785b      	ldrb	r3, [r3, #1]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d19e      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017552:	2a00      	cmp	r2, #0
 8017554:	d1c3      	bne.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017556:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017558:	e7c1      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801755a:	2a32      	cmp	r2, #50	@ 0x32
 801755c:	d025      	beq.n	80175aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801755e:	d301      	bcc.n	8017564 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017560:	2a33      	cmp	r2, #51	@ 0x33
 8017562:	d195      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017564:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8017566:	e7ba      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017568:	781a      	ldrb	r2, [r3, #0]
 801756a:	785b      	ldrb	r3, [r3, #1]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d18f      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017570:	2a00      	cmp	r2, #0
 8017572:	d0f0      	beq.n	8017556 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8017574:	2a01      	cmp	r2, #1
 8017576:	d18b      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017578:	6983      	ldr	r3, [r0, #24]
 801757a:	e7b0      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801757c:	684b      	ldr	r3, [r1, #4]
 801757e:	781a      	ldrb	r2, [r3, #0]
 8017580:	785b      	ldrb	r3, [r3, #1]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d184      	bne.n	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017586:	b152      	cbz	r2, 801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8017588:	2a01      	cmp	r2, #1
 801758a:	bf08      	it	eq
 801758c:	6903      	ldreq	r3, [r0, #16]
 801758e:	e7a6      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017590:	781a      	ldrb	r2, [r3, #0]
 8017592:	785b      	ldrb	r3, [r3, #1]
 8017594:	2b00      	cmp	r3, #0
 8017596:	f47f af7b 	bne.w	8017490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801759a:	2a00      	cmp	r2, #0
 801759c:	d19f      	bne.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801759e:	6a03      	ldr	r3, [r0, #32]
 80175a0:	e79d      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80175a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80175a4:	e79b      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80175a6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80175a8:	e799      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80175aa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80175ac:	e797      	b.n	80174de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080175ae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80175ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b2:	b085      	sub	sp, #20
 80175b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80175b6:	9203      	str	r2, [sp, #12]
 80175b8:	6870      	ldr	r0, [r6, #4]
 80175ba:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80175be:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80175c2:	9101      	str	r1, [sp, #4]
 80175c4:	fa1f f885 	uxth.w	r8, r5
 80175c8:	43ed      	mvns	r5, r5
 80175ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80175ce:	b2ed      	uxtb	r5, r5
 80175d0:	fb00 2404 	mla	r4, r0, r4, r2
 80175d4:	6832      	ldr	r2, [r6, #0]
 80175d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80175da:	4414      	add	r4, r2
 80175dc:	f8dc 2000 	ldr.w	r2, [ip]
 80175e0:	9202      	str	r2, [sp, #8]
 80175e2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80175e6:	f102 0e04 	add.w	lr, r2, #4
 80175ea:	9a01      	ldr	r2, [sp, #4]
 80175ec:	2a00      	cmp	r2, #0
 80175ee:	dc03      	bgt.n	80175f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80175f0:	9a03      	ldr	r2, [sp, #12]
 80175f2:	2a00      	cmp	r2, #0
 80175f4:	f340 8116 	ble.w	8017824 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80175f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80175fa:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80175fe:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017602:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017604:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017608:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801760c:	2b00      	cmp	r3, #0
 801760e:	dd0e      	ble.n	801762e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017610:	1406      	asrs	r6, r0, #16
 8017612:	d405      	bmi.n	8017620 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017614:	4556      	cmp	r6, sl
 8017616:	da03      	bge.n	8017620 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017618:	1416      	asrs	r6, r2, #16
 801761a:	d401      	bmi.n	8017620 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801761c:	454e      	cmp	r6, r9
 801761e:	db07      	blt.n	8017630 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8017620:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017622:	3b01      	subs	r3, #1
 8017624:	3403      	adds	r4, #3
 8017626:	4430      	add	r0, r6
 8017628:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801762a:	4432      	add	r2, r6
 801762c:	e7ee      	b.n	801760c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801762e:	d063      	beq.n	80176f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017630:	1e5e      	subs	r6, r3, #1
 8017632:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8017634:	fb07 0706 	mla	r7, r7, r6, r0
 8017638:	143f      	asrs	r7, r7, #16
 801763a:	d454      	bmi.n	80176e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801763c:	4557      	cmp	r7, sl
 801763e:	da52      	bge.n	80176e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017640:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017642:	fb07 2606 	mla	r6, r7, r6, r2
 8017646:	1436      	asrs	r6, r6, #16
 8017648:	d44d      	bmi.n	80176e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801764a:	454e      	cmp	r6, r9
 801764c:	da4b      	bge.n	80176e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801764e:	1ce6      	adds	r6, r4, #3
 8017650:	4699      	mov	r9, r3
 8017652:	f1b9 0f00 	cmp.w	r9, #0
 8017656:	f106 0603 	add.w	r6, r6, #3
 801765a:	dd48      	ble.n	80176ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801765c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017660:	1417      	asrs	r7, r2, #16
 8017662:	9902      	ldr	r1, [sp, #8]
 8017664:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017668:	f109 39ff 	add.w	r9, r9, #4294967295
 801766c:	fb0b 1707 	mla	r7, fp, r7, r1
 8017670:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8017674:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017676:	f817 700a 	ldrb.w	r7, [r7, sl]
 801767a:	fb1b fb05 	smulbb	fp, fp, r5
 801767e:	4408      	add	r0, r1
 8017680:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017682:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017686:	440a      	add	r2, r1
 8017688:	eb0e 0a07 	add.w	sl, lr, r7
 801768c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8017690:	fb07 b708 	mla	r7, r7, r8, fp
 8017694:	b2bf      	uxth	r7, r7
 8017696:	f107 0b01 	add.w	fp, r7, #1
 801769a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801769e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80176a2:	fb1b fb05 	smulbb	fp, fp, r5
 80176a6:	123f      	asrs	r7, r7, #8
 80176a8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80176ac:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80176b0:	fb07 b708 	mla	r7, r7, r8, fp
 80176b4:	b2bf      	uxth	r7, r7
 80176b6:	f107 0b01 	add.w	fp, r7, #1
 80176ba:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80176be:	123f      	asrs	r7, r7, #8
 80176c0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80176c4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80176c8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80176cc:	fb1a fa05 	smulbb	sl, sl, r5
 80176d0:	fb07 a708 	mla	r7, r7, r8, sl
 80176d4:	b2bf      	uxth	r7, r7
 80176d6:	f107 0a01 	add.w	sl, r7, #1
 80176da:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80176de:	123f      	asrs	r7, r7, #8
 80176e0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80176e4:	e7b5      	b.n	8017652 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80176e6:	2700      	movs	r7, #0
 80176e8:	1bde      	subs	r6, r3, r7
 80176ea:	2e00      	cmp	r6, #0
 80176ec:	dc42      	bgt.n	8017774 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80176ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80176f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80176f6:	441c      	add	r4, r3
 80176f8:	9b01      	ldr	r3, [sp, #4]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	f340 8092 	ble.w	8017824 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017706:	ee30 0a04 	vadd.f32	s0, s0, s8
 801770a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801770e:	eef0 6a62 	vmov.f32	s13, s5
 8017712:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017716:	ee31 1a05 	vadd.f32	s2, s2, s10
 801771a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801771e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8017722:	eef0 6a43 	vmov.f32	s13, s6
 8017726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801772a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801772e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017732:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017736:	ee77 2a62 	vsub.f32	s5, s14, s5
 801773a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801773e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017742:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017746:	ee12 2a90 	vmov	r2, s5
 801774a:	eef0 2a47 	vmov.f32	s5, s14
 801774e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017752:	ee13 2a10 	vmov	r2, s6
 8017756:	9311      	str	r3, [sp, #68]	@ 0x44
 8017758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801775a:	eeb0 3a67 	vmov.f32	s6, s15
 801775e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017762:	9312      	str	r3, [sp, #72]	@ 0x48
 8017764:	9b01      	ldr	r3, [sp, #4]
 8017766:	9a03      	ldr	r2, [sp, #12]
 8017768:	3b01      	subs	r3, #1
 801776a:	9301      	str	r3, [sp, #4]
 801776c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801776e:	bf08      	it	eq
 8017770:	4613      	moveq	r3, r2
 8017772:	e73a      	b.n	80175ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017774:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8017778:	d44e      	bmi.n	8017818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801777a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801777e:	4556      	cmp	r6, sl
 8017780:	dd4a      	ble.n	8017818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017782:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017786:	d447      	bmi.n	8017818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017788:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801778c:	4559      	cmp	r1, fp
 801778e:	dd43      	ble.n	8017818 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017790:	fa0f f986 	sxth.w	r9, r6
 8017794:	9902      	ldr	r1, [sp, #8]
 8017796:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801779a:	fb0b 1909 	mla	r9, fp, r9, r1
 801779e:	f814 b006 	ldrb.w	fp, [r4, r6]
 80177a2:	f819 900a 	ldrb.w	r9, [r9, sl]
 80177a6:	fb1b fb05 	smulbb	fp, fp, r5
 80177aa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80177ae:	eb0e 0a09 	add.w	sl, lr, r9
 80177b2:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80177b6:	fb09 b908 	mla	r9, r9, r8, fp
 80177ba:	fa1f f989 	uxth.w	r9, r9
 80177be:	f109 0b01 	add.w	fp, r9, #1
 80177c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80177c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80177ca:	f804 9006 	strb.w	r9, [r4, r6]
 80177ce:	4426      	add	r6, r4
 80177d0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80177d4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80177d8:	fb1b fb05 	smulbb	fp, fp, r5
 80177dc:	fb09 b908 	mla	r9, r9, r8, fp
 80177e0:	fa1f f989 	uxth.w	r9, r9
 80177e4:	f109 0b01 	add.w	fp, r9, #1
 80177e8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80177ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 80177f0:	f886 9001 	strb.w	r9, [r6, #1]
 80177f4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80177f8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80177fc:	fb1a fa05 	smulbb	sl, sl, r5
 8017800:	fb09 a908 	mla	r9, r9, r8, sl
 8017804:	fa1f f989 	uxth.w	r9, r9
 8017808:	f109 0a01 	add.w	sl, r9, #1
 801780c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017810:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017814:	f886 9002 	strb.w	r9, [r6, #2]
 8017818:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801781a:	3701      	adds	r7, #1
 801781c:	4408      	add	r0, r1
 801781e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017820:	440a      	add	r2, r1
 8017822:	e761      	b.n	80176e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017824:	b005      	add	sp, #20
 8017826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801782a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801782a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801782e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017830:	4693      	mov	fp, r2
 8017832:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017838:	6868      	ldr	r0, [r5, #4]
 801783a:	6877      	ldr	r7, [r6, #4]
 801783c:	9100      	str	r1, [sp, #0]
 801783e:	3704      	adds	r7, #4
 8017840:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8017844:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8017848:	fb00 2404 	mla	r4, r0, r4, r2
 801784c:	682a      	ldr	r2, [r5, #0]
 801784e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017852:	4414      	add	r4, r2
 8017854:	6832      	ldr	r2, [r6, #0]
 8017856:	9201      	str	r2, [sp, #4]
 8017858:	9a00      	ldr	r2, [sp, #0]
 801785a:	2a00      	cmp	r2, #0
 801785c:	dc03      	bgt.n	8017866 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801785e:	f1bb 0f00 	cmp.w	fp, #0
 8017862:	f340 80bc 	ble.w	80179de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017866:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017868:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801786c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017872:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8017876:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801787a:	2b00      	cmp	r3, #0
 801787c:	dd0c      	ble.n	8017898 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801787e:	1405      	asrs	r5, r0, #16
 8017880:	d405      	bmi.n	801788e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017882:	4555      	cmp	r5, sl
 8017884:	da03      	bge.n	801788e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017886:	1415      	asrs	r5, r2, #16
 8017888:	d401      	bmi.n	801788e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801788a:	454d      	cmp	r5, r9
 801788c:	db05      	blt.n	801789a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801788e:	4440      	add	r0, r8
 8017890:	4472      	add	r2, lr
 8017892:	3b01      	subs	r3, #1
 8017894:	3403      	adds	r4, #3
 8017896:	e7f0      	b.n	801787a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017898:	d03f      	beq.n	801791a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801789a:	1e5d      	subs	r5, r3, #1
 801789c:	fb08 0c05 	mla	ip, r8, r5, r0
 80178a0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80178a4:	d42e      	bmi.n	8017904 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80178a6:	45d4      	cmp	ip, sl
 80178a8:	da2c      	bge.n	8017904 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80178aa:	fb0e 2505 	mla	r5, lr, r5, r2
 80178ae:	142d      	asrs	r5, r5, #16
 80178b0:	d428      	bmi.n	8017904 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80178b2:	454d      	cmp	r5, r9
 80178b4:	da26      	bge.n	8017904 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80178b6:	1ce5      	adds	r5, r4, #3
 80178b8:	469c      	mov	ip, r3
 80178ba:	f1bc 0f00 	cmp.w	ip, #0
 80178be:	f105 0503 	add.w	r5, r5, #3
 80178c2:	dd25      	ble.n	8017910 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80178c4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80178c8:	ea4f 4922 	mov.w	r9, r2, asr #16
 80178cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80178d0:	4472      	add	r2, lr
 80178d2:	468a      	mov	sl, r1
 80178d4:	9901      	ldr	r1, [sp, #4]
 80178d6:	fb0a 1909 	mla	r9, sl, r9, r1
 80178da:	1401      	asrs	r1, r0, #16
 80178dc:	4440      	add	r0, r8
 80178de:	f819 9001 	ldrb.w	r9, [r9, r1]
 80178e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80178e6:	eb07 0a09 	add.w	sl, r7, r9
 80178ea:	f817 9009 	ldrb.w	r9, [r7, r9]
 80178ee:	f805 9c06 	strb.w	r9, [r5, #-6]
 80178f2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80178f6:	f805 9c05 	strb.w	r9, [r5, #-5]
 80178fa:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80178fe:	f805 9c04 	strb.w	r9, [r5, #-4]
 8017902:	e7da      	b.n	80178ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017904:	2500      	movs	r5, #0
 8017906:	eba3 0c05 	sub.w	ip, r3, r5
 801790a:	f1bc 0f00 	cmp.w	ip, #0
 801790e:	dc3b      	bgt.n	8017988 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017918:	441c      	add	r4, r3
 801791a:	9b00      	ldr	r3, [sp, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	dd5e      	ble.n	80179de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017920:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017926:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801792a:	eeb0 6a62 	vmov.f32	s12, s5
 801792e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017932:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017936:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801793a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801793e:	eeb0 6a43 	vmov.f32	s12, s6
 8017942:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017946:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801794a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801794e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017952:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017956:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801795a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801795e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017962:	ee12 2a90 	vmov	r2, s5
 8017966:	eef0 2a47 	vmov.f32	s5, s14
 801796a:	fb92 f8f3 	sdiv	r8, r2, r3
 801796e:	ee13 2a10 	vmov	r2, s6
 8017972:	eeb0 3a67 	vmov.f32	s6, s15
 8017976:	fb92 fef3 	sdiv	lr, r2, r3
 801797a:	9b00      	ldr	r3, [sp, #0]
 801797c:	3b01      	subs	r3, #1
 801797e:	9300      	str	r3, [sp, #0]
 8017980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017982:	bf08      	it	eq
 8017984:	465b      	moveq	r3, fp
 8017986:	e767      	b.n	8017858 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017988:	ea5f 4920 	movs.w	r9, r0, asr #16
 801798c:	d423      	bmi.n	80179d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801798e:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8017992:	45cc      	cmp	ip, r9
 8017994:	dd1f      	ble.n	80179d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8017996:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801799a:	d41c      	bmi.n	80179d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801799c:	68f1      	ldr	r1, [r6, #12]
 801799e:	4551      	cmp	r1, sl
 80179a0:	dd19      	ble.n	80179d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80179a2:	fa0f fc8c 	sxth.w	ip, ip
 80179a6:	9901      	ldr	r1, [sp, #4]
 80179a8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80179ac:	f81c c009 	ldrb.w	ip, [ip, r9]
 80179b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80179b4:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80179b8:	eb07 090c 	add.w	r9, r7, ip
 80179bc:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80179c0:	f804 a00c 	strb.w	sl, [r4, ip]
 80179c4:	44a4      	add	ip, r4
 80179c6:	f899 a001 	ldrb.w	sl, [r9, #1]
 80179ca:	f88c a001 	strb.w	sl, [ip, #1]
 80179ce:	f899 9002 	ldrb.w	r9, [r9, #2]
 80179d2:	f88c 9002 	strb.w	r9, [ip, #2]
 80179d6:	4440      	add	r0, r8
 80179d8:	4472      	add	r2, lr
 80179da:	3501      	adds	r5, #1
 80179dc:	e793      	b.n	8017906 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80179de:	b003      	add	sp, #12
 80179e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80179e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e8:	b085      	sub	sp, #20
 80179ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80179ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80179f0:	9202      	str	r2, [sp, #8]
 80179f2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80179f6:	6860      	ldr	r0, [r4, #4]
 80179f8:	9203      	str	r2, [sp, #12]
 80179fa:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80179fe:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017a02:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8017a06:	fb00 2505 	mla	r5, r0, r5, r2
 8017a0a:	6822      	ldr	r2, [r4, #0]
 8017a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a10:	4415      	add	r5, r2
 8017a12:	f8dc 2000 	ldr.w	r2, [ip]
 8017a16:	9200      	str	r2, [sp, #0]
 8017a18:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017a1c:	3204      	adds	r2, #4
 8017a1e:	9201      	str	r2, [sp, #4]
 8017a20:	2900      	cmp	r1, #0
 8017a22:	dc03      	bgt.n	8017a2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017a24:	9a02      	ldr	r2, [sp, #8]
 8017a26:	2a00      	cmp	r2, #0
 8017a28:	f340 8127 	ble.w	8017c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017a2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017a2e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017a32:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017a36:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a38:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017a3c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	dd0d      	ble.n	8017a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017a44:	1422      	asrs	r2, r4, #16
 8017a46:	d405      	bmi.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a48:	4542      	cmp	r2, r8
 8017a4a:	da03      	bge.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a4c:	1402      	asrs	r2, r0, #16
 8017a4e:	d401      	bmi.n	8017a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a50:	42ba      	cmp	r2, r7
 8017a52:	db06      	blt.n	8017a62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017a54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017a56:	4474      	add	r4, lr
 8017a58:	3b01      	subs	r3, #1
 8017a5a:	3503      	adds	r5, #3
 8017a5c:	4410      	add	r0, r2
 8017a5e:	e7ef      	b.n	8017a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017a60:	d075      	beq.n	8017b4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017a62:	1e5a      	subs	r2, r3, #1
 8017a64:	fb0e 4602 	mla	r6, lr, r2, r4
 8017a68:	1436      	asrs	r6, r6, #16
 8017a6a:	d465      	bmi.n	8017b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a6c:	4546      	cmp	r6, r8
 8017a6e:	da63      	bge.n	8017b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a70:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017a72:	fb06 0202 	mla	r2, r6, r2, r0
 8017a76:	1412      	asrs	r2, r2, #16
 8017a78:	d45e      	bmi.n	8017b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a7a:	42ba      	cmp	r2, r7
 8017a7c:	da5c      	bge.n	8017b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a7e:	1cef      	adds	r7, r5, #3
 8017a80:	4699      	mov	r9, r3
 8017a82:	f1b9 0f00 	cmp.w	r9, #0
 8017a86:	dd5d      	ble.n	8017b44 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8017a88:	1402      	asrs	r2, r0, #16
 8017a8a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017a8e:	1426      	asrs	r6, r4, #16
 8017a90:	4692      	mov	sl, r2
 8017a92:	9a00      	ldr	r2, [sp, #0]
 8017a94:	fb08 220a 	mla	r2, r8, sl, r2
 8017a98:	5d92      	ldrb	r2, [r2, r6]
 8017a9a:	9e01      	ldr	r6, [sp, #4]
 8017a9c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8017aa0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8017aa4:	d041      	beq.n	8017b2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017aa6:	9a03      	ldr	r2, [sp, #12]
 8017aa8:	fa5f fb86 	uxtb.w	fp, r6
 8017aac:	fb02 f808 	mul.w	r8, r2, r8
 8017ab0:	f108 0201 	add.w	r2, r8, #1
 8017ab4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8017ab8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8017abc:	1212      	asrs	r2, r2, #8
 8017abe:	fa1f fa82 	uxth.w	sl, r2
 8017ac2:	43d2      	mvns	r2, r2
 8017ac4:	fb1b fb0a 	smulbb	fp, fp, sl
 8017ac8:	b2d2      	uxtb	r2, r2
 8017aca:	fb08 b802 	mla	r8, r8, r2, fp
 8017ace:	fa1f f888 	uxth.w	r8, r8
 8017ad2:	f108 0b01 	add.w	fp, r8, #1
 8017ad6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017ada:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8017ade:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017ae2:	fb1b fb0a 	smulbb	fp, fp, sl
 8017ae6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017aea:	fb16 fa0a 	smulbb	sl, r6, sl
 8017aee:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017af2:	f807 8c03 	strb.w	r8, [r7, #-3]
 8017af6:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017afa:	fb06 aa02 	mla	sl, r6, r2, sl
 8017afe:	fb08 b802 	mla	r8, r8, r2, fp
 8017b02:	fa1f fa8a 	uxth.w	sl, sl
 8017b06:	fa1f f888 	uxth.w	r8, r8
 8017b0a:	f10a 0601 	add.w	r6, sl, #1
 8017b0e:	f108 0b01 	add.w	fp, r8, #1
 8017b12:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8017b16:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017b1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017b1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b22:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017b26:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017b2c:	4474      	add	r4, lr
 8017b2e:	3703      	adds	r7, #3
 8017b30:	f109 39ff 	add.w	r9, r9, #4294967295
 8017b34:	4410      	add	r0, r2
 8017b36:	e7a4      	b.n	8017a82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017b38:	f04f 0800 	mov.w	r8, #0
 8017b3c:	eba3 0208 	sub.w	r2, r3, r8
 8017b40:	2a00      	cmp	r2, #0
 8017b42:	dc3b      	bgt.n	8017bbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8017b44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b4c:	441d      	add	r5, r3
 8017b4e:	2900      	cmp	r1, #0
 8017b50:	f340 8093 	ble.w	8017c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017b54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b5e:	3901      	subs	r1, #1
 8017b60:	eeb0 6a62 	vmov.f32	s12, s5
 8017b64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017b68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b70:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017b74:	eeb0 6a43 	vmov.f32	s12, s6
 8017b78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b7c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017b80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b98:	ee12 2a90 	vmov	r2, s5
 8017b9c:	eef0 2a47 	vmov.f32	s5, s14
 8017ba0:	fb92 fef3 	sdiv	lr, r2, r3
 8017ba4:	ee13 2a10 	vmov	r2, s6
 8017ba8:	eeb0 3a67 	vmov.f32	s6, s15
 8017bac:	fb92 f3f3 	sdiv	r3, r2, r3
 8017bb0:	9a02      	ldr	r2, [sp, #8]
 8017bb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8017bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bb6:	bf08      	it	eq
 8017bb8:	4613      	moveq	r3, r2
 8017bba:	e731      	b.n	8017a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017bbc:	1427      	asrs	r7, r4, #16
 8017bbe:	d456      	bmi.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bc0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017bc4:	42be      	cmp	r6, r7
 8017bc6:	dd52      	ble.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bc8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017bcc:	d44f      	bmi.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017bd2:	454a      	cmp	r2, r9
 8017bd4:	dd4b      	ble.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bd6:	9a00      	ldr	r2, [sp, #0]
 8017bd8:	b236      	sxth	r6, r6
 8017bda:	fb09 2606 	mla	r6, r9, r6, r2
 8017bde:	5df2      	ldrb	r2, [r6, r7]
 8017be0:	9e01      	ldr	r6, [sp, #4]
 8017be2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8017be6:	0e3a      	lsrs	r2, r7, #24
 8017be8:	d041      	beq.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bea:	9e03      	ldr	r6, [sp, #12]
 8017bec:	fa5f fb87 	uxtb.w	fp, r7
 8017bf0:	4372      	muls	r2, r6
 8017bf2:	1c56      	adds	r6, r2, #1
 8017bf4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017bf8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017bfc:	1212      	asrs	r2, r2, #8
 8017bfe:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017c02:	fa1f fa82 	uxth.w	sl, r2
 8017c06:	43d2      	mvns	r2, r2
 8017c08:	fb1b fb0a 	smulbb	fp, fp, sl
 8017c0c:	b2d2      	uxtb	r2, r2
 8017c0e:	fb09 b902 	mla	r9, r9, r2, fp
 8017c12:	fa1f f989 	uxth.w	r9, r9
 8017c16:	f109 0b01 	add.w	fp, r9, #1
 8017c1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017c1e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017c22:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017c26:	fb1b fb0a 	smulbb	fp, fp, sl
 8017c2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c2e:	fb17 fa0a 	smulbb	sl, r7, sl
 8017c32:	f805 9006 	strb.w	r9, [r5, r6]
 8017c36:	442e      	add	r6, r5
 8017c38:	78b7      	ldrb	r7, [r6, #2]
 8017c3a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017c3e:	fb07 aa02 	mla	sl, r7, r2, sl
 8017c42:	fb09 b902 	mla	r9, r9, r2, fp
 8017c46:	fa1f fa8a 	uxth.w	sl, sl
 8017c4a:	fa1f f989 	uxth.w	r9, r9
 8017c4e:	f10a 0701 	add.w	r7, sl, #1
 8017c52:	f109 0b01 	add.w	fp, r9, #1
 8017c56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017c5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017c5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017c62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c66:	f886 a002 	strb.w	sl, [r6, #2]
 8017c6a:	f886 9001 	strb.w	r9, [r6, #1]
 8017c6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017c70:	4474      	add	r4, lr
 8017c72:	f108 0801 	add.w	r8, r8, #1
 8017c76:	4410      	add	r0, r2
 8017c78:	e760      	b.n	8017b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8017c7a:	b005      	add	sp, #20
 8017c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c80 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c84:	b085      	sub	sp, #20
 8017c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017c8a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017c8c:	9203      	str	r2, [sp, #12]
 8017c8e:	6868      	ldr	r0, [r5, #4]
 8017c90:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017c94:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017c98:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017c9c:	fb00 2404 	mla	r4, r0, r4, r2
 8017ca0:	682a      	ldr	r2, [r5, #0]
 8017ca2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ca6:	4414      	add	r4, r2
 8017ca8:	f8dc 2000 	ldr.w	r2, [ip]
 8017cac:	9201      	str	r2, [sp, #4]
 8017cae:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017cb2:	3204      	adds	r2, #4
 8017cb4:	9202      	str	r2, [sp, #8]
 8017cb6:	2900      	cmp	r1, #0
 8017cb8:	dc03      	bgt.n	8017cc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017cba:	9a03      	ldr	r2, [sp, #12]
 8017cbc:	2a00      	cmp	r2, #0
 8017cbe:	f340 8137 	ble.w	8017f30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017cc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017cc4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017cc8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017ccc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017cce:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017cd2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	dd0d      	ble.n	8017cf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017cda:	1405      	asrs	r5, r0, #16
 8017cdc:	d405      	bmi.n	8017cea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017cde:	4545      	cmp	r5, r8
 8017ce0:	da03      	bge.n	8017cea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017ce2:	1415      	asrs	r5, r2, #16
 8017ce4:	d401      	bmi.n	8017cea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017ce6:	42bd      	cmp	r5, r7
 8017ce8:	db06      	blt.n	8017cf8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017cea:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017cec:	4470      	add	r0, lr
 8017cee:	3b01      	subs	r3, #1
 8017cf0:	3403      	adds	r4, #3
 8017cf2:	442a      	add	r2, r5
 8017cf4:	e7ef      	b.n	8017cd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8017cf6:	d070      	beq.n	8017dda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017cf8:	1e5d      	subs	r5, r3, #1
 8017cfa:	fb0e 0605 	mla	r6, lr, r5, r0
 8017cfe:	1436      	asrs	r6, r6, #16
 8017d00:	d462      	bmi.n	8017dc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017d02:	4546      	cmp	r6, r8
 8017d04:	da60      	bge.n	8017dc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017d06:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017d08:	fb06 2505 	mla	r5, r6, r5, r2
 8017d0c:	142d      	asrs	r5, r5, #16
 8017d0e:	d45b      	bmi.n	8017dc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017d10:	42bd      	cmp	r5, r7
 8017d12:	da59      	bge.n	8017dc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017d14:	1ce5      	adds	r5, r4, #3
 8017d16:	469a      	mov	sl, r3
 8017d18:	f1ba 0f00 	cmp.w	sl, #0
 8017d1c:	dd58      	ble.n	8017dd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8017d1e:	1416      	asrs	r6, r2, #16
 8017d20:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017d24:	1407      	asrs	r7, r0, #16
 8017d26:	46b1      	mov	r9, r6
 8017d28:	9e01      	ldr	r6, [sp, #4]
 8017d2a:	fb08 6609 	mla	r6, r8, r9, r6
 8017d2e:	5df6      	ldrb	r6, [r6, r7]
 8017d30:	9f02      	ldr	r7, [sp, #8]
 8017d32:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8017d36:	0e37      	lsrs	r7, r6, #24
 8017d38:	2fff      	cmp	r7, #255	@ 0xff
 8017d3a:	f000 80f0 	beq.w	8017f1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017d3e:	fa5f f887 	uxtb.w	r8, r7
 8017d42:	b3d7      	cbz	r7, 8017dba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017d44:	fa1f f788 	uxth.w	r7, r8
 8017d48:	ea6f 0808 	mvn.w	r8, r8
 8017d4c:	fa5f fb86 	uxtb.w	fp, r6
 8017d50:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8017d54:	fa5f f888 	uxtb.w	r8, r8
 8017d58:	fb1b fb07 	smulbb	fp, fp, r7
 8017d5c:	fb09 b908 	mla	r9, r9, r8, fp
 8017d60:	fa1f f989 	uxth.w	r9, r9
 8017d64:	f109 0b01 	add.w	fp, r9, #1
 8017d68:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017d6c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8017d70:	fb1b fb08 	smulbb	fp, fp, r8
 8017d74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017d78:	f805 9c03 	strb.w	r9, [r5, #-3]
 8017d7c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8017d80:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017d84:	fb09 b907 	mla	r9, r9, r7, fp
 8017d88:	fa1f f989 	uxth.w	r9, r9
 8017d8c:	f109 0b01 	add.w	fp, r9, #1
 8017d90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017d94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017d98:	f805 9c02 	strb.w	r9, [r5, #-2]
 8017d9c:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8017da0:	fb19 f808 	smulbb	r8, r9, r8
 8017da4:	fb06 8607 	mla	r6, r6, r7, r8
 8017da8:	b2b6      	uxth	r6, r6
 8017daa:	f106 0801 	add.w	r8, r6, #1
 8017dae:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8017db2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017db6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017dba:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017dbc:	4470      	add	r0, lr
 8017dbe:	3503      	adds	r5, #3
 8017dc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017dc4:	4432      	add	r2, r6
 8017dc6:	e7a7      	b.n	8017d18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017dc8:	2600      	movs	r6, #0
 8017dca:	1b9d      	subs	r5, r3, r6
 8017dcc:	2d00      	cmp	r5, #0
 8017dce:	dc3b      	bgt.n	8017e48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017dd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017dd8:	441c      	add	r4, r3
 8017dda:	2900      	cmp	r1, #0
 8017ddc:	f340 80a8 	ble.w	8017f30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017de0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017de6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017dea:	3901      	subs	r1, #1
 8017dec:	eeb0 6a62 	vmov.f32	s12, s5
 8017df0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017df4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017df8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017dfc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017e00:	eeb0 6a43 	vmov.f32	s12, s6
 8017e04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017e08:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017e0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017e10:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017e14:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017e18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017e1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017e20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017e24:	ee12 2a90 	vmov	r2, s5
 8017e28:	eef0 2a47 	vmov.f32	s5, s14
 8017e2c:	fb92 fef3 	sdiv	lr, r2, r3
 8017e30:	ee13 2a10 	vmov	r2, s6
 8017e34:	eeb0 3a67 	vmov.f32	s6, s15
 8017e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e3c:	9a03      	ldr	r2, [sp, #12]
 8017e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e42:	bf08      	it	eq
 8017e44:	4613      	moveq	r3, r2
 8017e46:	e736      	b.n	8017cb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017e48:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017e4c:	d457      	bmi.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e4e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8017e52:	4547      	cmp	r7, r8
 8017e54:	dd53      	ble.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e56:	ea5f 4922 	movs.w	r9, r2, asr #16
 8017e5a:	d450      	bmi.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e5c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8017e60:	454d      	cmp	r5, r9
 8017e62:	dd4c      	ble.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e64:	9d01      	ldr	r5, [sp, #4]
 8017e66:	b23f      	sxth	r7, r7
 8017e68:	fb09 5707 	mla	r7, r9, r7, r5
 8017e6c:	f817 5008 	ldrb.w	r5, [r7, r8]
 8017e70:	9f02      	ldr	r7, [sp, #8]
 8017e72:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017e76:	0e2f      	lsrs	r7, r5, #24
 8017e78:	2fff      	cmp	r7, #255	@ 0xff
 8017e7a:	d045      	beq.n	8017f08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017e7c:	fa5f f987 	uxtb.w	r9, r7
 8017e80:	b3ef      	cbz	r7, 8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017e82:	fa1f f889 	uxth.w	r8, r9
 8017e86:	ea6f 0909 	mvn.w	r9, r9
 8017e8a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017e8e:	fa5f fb85 	uxtb.w	fp, r5
 8017e92:	f814 a007 	ldrb.w	sl, [r4, r7]
 8017e96:	fa5f f989 	uxtb.w	r9, r9
 8017e9a:	fb1b fb08 	smulbb	fp, fp, r8
 8017e9e:	fb0a ba09 	mla	sl, sl, r9, fp
 8017ea2:	fa1f fa8a 	uxth.w	sl, sl
 8017ea6:	f10a 0b01 	add.w	fp, sl, #1
 8017eaa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017eae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017eb2:	f804 a007 	strb.w	sl, [r4, r7]
 8017eb6:	4427      	add	r7, r4
 8017eb8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017ebc:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8017ec0:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017ec4:	fb1b fb09 	smulbb	fp, fp, r9
 8017ec8:	fb0a ba08 	mla	sl, sl, r8, fp
 8017ecc:	fa1f fa8a 	uxth.w	sl, sl
 8017ed0:	f10a 0b01 	add.w	fp, sl, #1
 8017ed4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017ed8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017edc:	f887 a001 	strb.w	sl, [r7, #1]
 8017ee0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017ee4:	fb1a f909 	smulbb	r9, sl, r9
 8017ee8:	fb05 9508 	mla	r5, r5, r8, r9
 8017eec:	b2ad      	uxth	r5, r5
 8017eee:	f105 0901 	add.w	r9, r5, #1
 8017ef2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8017ef6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017efa:	f887 9002 	strb.w	r9, [r7, #2]
 8017efe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017f00:	4470      	add	r0, lr
 8017f02:	3601      	adds	r6, #1
 8017f04:	442a      	add	r2, r5
 8017f06:	e760      	b.n	8017dca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017f08:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017f0c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8017f10:	55e5      	strb	r5, [r4, r7]
 8017f12:	4427      	add	r7, r4
 8017f14:	0c2d      	lsrs	r5, r5, #16
 8017f16:	f887 8001 	strb.w	r8, [r7, #1]
 8017f1a:	70bd      	strb	r5, [r7, #2]
 8017f1c:	e7ef      	b.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017f1e:	0a37      	lsrs	r7, r6, #8
 8017f20:	f805 6c03 	strb.w	r6, [r5, #-3]
 8017f24:	0c36      	lsrs	r6, r6, #16
 8017f26:	f805 7c02 	strb.w	r7, [r5, #-2]
 8017f2a:	f805 6c01 	strb.w	r6, [r5, #-1]
 8017f2e:	e744      	b.n	8017dba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017f30:	b005      	add	sp, #20
 8017f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f3a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017f3c:	9201      	str	r2, [sp, #4]
 8017f3e:	6870      	ldr	r0, [r6, #4]
 8017f40:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8017f44:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8017f48:	fa1f fe85 	uxth.w	lr, r5
 8017f4c:	43ed      	mvns	r5, r5
 8017f4e:	f8dc 8000 	ldr.w	r8, [ip]
 8017f52:	b2ed      	uxtb	r5, r5
 8017f54:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8017f58:	fb00 2404 	mla	r4, r0, r4, r2
 8017f5c:	6832      	ldr	r2, [r6, #0]
 8017f5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017f62:	4414      	add	r4, r2
 8017f64:	2900      	cmp	r1, #0
 8017f66:	dc03      	bgt.n	8017f70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017f68:	9a01      	ldr	r2, [sp, #4]
 8017f6a:	2a00      	cmp	r2, #0
 8017f6c:	f340 810d 	ble.w	801818a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017f72:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8017f76:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f7c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017f80:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	dd0e      	ble.n	8017fa6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017f88:	1406      	asrs	r6, r0, #16
 8017f8a:	d405      	bmi.n	8017f98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017f8c:	4556      	cmp	r6, sl
 8017f8e:	da03      	bge.n	8017f98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017f90:	1416      	asrs	r6, r2, #16
 8017f92:	d401      	bmi.n	8017f98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017f94:	454e      	cmp	r6, r9
 8017f96:	db07      	blt.n	8017fa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017f98:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017f9a:	3b01      	subs	r3, #1
 8017f9c:	3403      	adds	r4, #3
 8017f9e:	4430      	add	r0, r6
 8017fa0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017fa2:	4432      	add	r2, r6
 8017fa4:	e7ee      	b.n	8017f84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8017fa6:	d060      	beq.n	801806a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8017fa8:	1e5e      	subs	r6, r3, #1
 8017faa:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017fac:	fb07 0706 	mla	r7, r7, r6, r0
 8017fb0:	143f      	asrs	r7, r7, #16
 8017fb2:	d451      	bmi.n	8018058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017fb4:	4557      	cmp	r7, sl
 8017fb6:	da4f      	bge.n	8018058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017fb8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017fba:	fb07 2606 	mla	r6, r7, r6, r2
 8017fbe:	1436      	asrs	r6, r6, #16
 8017fc0:	d44a      	bmi.n	8018058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017fc2:	454e      	cmp	r6, r9
 8017fc4:	da48      	bge.n	8018058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017fc6:	1ce6      	adds	r6, r4, #3
 8017fc8:	4699      	mov	r9, r3
 8017fca:	f1b9 0f00 	cmp.w	r9, #0
 8017fce:	f106 0603 	add.w	r6, r6, #3
 8017fd2:	dd45      	ble.n	8018060 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8017fd4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017fd8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017fdc:	1417      	asrs	r7, r2, #16
 8017fde:	f109 39ff 	add.w	r9, r9, #4294967295
 8017fe2:	fb0b a707 	mla	r7, fp, r7, sl
 8017fe6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8017fea:	fb1b fb05 	smulbb	fp, fp, r5
 8017fee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017ff2:	eb08 0a07 	add.w	sl, r8, r7
 8017ff6:	f818 7007 	ldrb.w	r7, [r8, r7]
 8017ffa:	fb07 b70e 	mla	r7, r7, lr, fp
 8017ffe:	b2bf      	uxth	r7, r7
 8018000:	f107 0b01 	add.w	fp, r7, #1
 8018004:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018008:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801800c:	fb1b fb05 	smulbb	fp, fp, r5
 8018010:	123f      	asrs	r7, r7, #8
 8018012:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018016:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801801a:	fb07 b70e 	mla	r7, r7, lr, fp
 801801e:	b2bf      	uxth	r7, r7
 8018020:	f107 0b01 	add.w	fp, r7, #1
 8018024:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018028:	123f      	asrs	r7, r7, #8
 801802a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801802e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018032:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018036:	fb1a fa05 	smulbb	sl, sl, r5
 801803a:	fb07 a70e 	mla	r7, r7, lr, sl
 801803e:	b2bf      	uxth	r7, r7
 8018040:	f107 0a01 	add.w	sl, r7, #1
 8018044:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018048:	123f      	asrs	r7, r7, #8
 801804a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801804e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018050:	4438      	add	r0, r7
 8018052:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018054:	443a      	add	r2, r7
 8018056:	e7b8      	b.n	8017fca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018058:	2700      	movs	r7, #0
 801805a:	1bde      	subs	r6, r3, r7
 801805c:	2e00      	cmp	r6, #0
 801805e:	dc3f      	bgt.n	80180e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018060:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018068:	441c      	add	r4, r3
 801806a:	2900      	cmp	r1, #0
 801806c:	f340 808d 	ble.w	801818a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018076:	ee30 0a04 	vadd.f32	s0, s0, s8
 801807a:	3901      	subs	r1, #1
 801807c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018080:	eef0 6a62 	vmov.f32	s13, s5
 8018084:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018088:	ee31 1a05 	vadd.f32	s2, s2, s10
 801808c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018090:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8018094:	eef0 6a43 	vmov.f32	s13, s6
 8018098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801809c:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80180a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80180a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80180a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80180ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80180b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80180b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80180b8:	ee12 2a90 	vmov	r2, s5
 80180bc:	eef0 2a47 	vmov.f32	s5, s14
 80180c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80180c4:	ee13 2a10 	vmov	r2, s6
 80180c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80180ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180cc:	eeb0 3a67 	vmov.f32	s6, s15
 80180d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80180d4:	9a01      	ldr	r2, [sp, #4]
 80180d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80180d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180da:	bf08      	it	eq
 80180dc:	4613      	moveq	r3, r2
 80180de:	e741      	b.n	8017f64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80180e0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80180e4:	d44b      	bmi.n	801817e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80180e6:	f8dc b008 	ldr.w	fp, [ip, #8]
 80180ea:	45cb      	cmp	fp, r9
 80180ec:	dd47      	ble.n	801817e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80180ee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80180f2:	d444      	bmi.n	801817e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80180f4:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80180f8:	4556      	cmp	r6, sl
 80180fa:	dd40      	ble.n	801817e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80180fc:	fa0f f68b 	sxth.w	r6, fp
 8018100:	fb0a 9906 	mla	r9, sl, r6, r9
 8018104:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018108:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801810c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018110:	fb1b fb05 	smulbb	fp, fp, r5
 8018114:	eb08 0a09 	add.w	sl, r8, r9
 8018118:	f818 9009 	ldrb.w	r9, [r8, r9]
 801811c:	fb09 b90e 	mla	r9, r9, lr, fp
 8018120:	fa1f f989 	uxth.w	r9, r9
 8018124:	f109 0b01 	add.w	fp, r9, #1
 8018128:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801812c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018130:	f804 9006 	strb.w	r9, [r4, r6]
 8018134:	4426      	add	r6, r4
 8018136:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801813a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801813e:	fb1b fb05 	smulbb	fp, fp, r5
 8018142:	fb09 b90e 	mla	r9, r9, lr, fp
 8018146:	fa1f f989 	uxth.w	r9, r9
 801814a:	f109 0b01 	add.w	fp, r9, #1
 801814e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018152:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018156:	f886 9001 	strb.w	r9, [r6, #1]
 801815a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801815e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018162:	fb1a fa05 	smulbb	sl, sl, r5
 8018166:	fb09 a90e 	mla	r9, r9, lr, sl
 801816a:	fa1f f989 	uxth.w	r9, r9
 801816e:	f109 0a01 	add.w	sl, r9, #1
 8018172:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018176:	ea4f 2929 	mov.w	r9, r9, asr #8
 801817a:	f886 9002 	strb.w	r9, [r6, #2]
 801817e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018180:	3701      	adds	r7, #1
 8018182:	4430      	add	r0, r6
 8018184:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018186:	4432      	add	r2, r6
 8018188:	e767      	b.n	801805a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801818a:	b003      	add	sp, #12
 801818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018190 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801819a:	9201      	str	r2, [sp, #4]
 801819c:	6868      	ldr	r0, [r5, #4]
 801819e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80181a0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80181a4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80181a8:	fb00 2404 	mla	r4, r0, r4, r2
 80181ac:	682a      	ldr	r2, [r5, #0]
 80181ae:	f8d7 8000 	ldr.w	r8, [r7]
 80181b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80181b6:	4414      	add	r4, r2
 80181b8:	2900      	cmp	r1, #0
 80181ba:	dc03      	bgt.n	80181c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80181bc:	9a01      	ldr	r2, [sp, #4]
 80181be:	2a00      	cmp	r2, #0
 80181c0:	f340 80af 	ble.w	8018322 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80181c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80181c6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80181ca:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80181ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181d0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80181d4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80181d8:	2b00      	cmp	r3, #0
 80181da:	dd0c      	ble.n	80181f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80181dc:	1405      	asrs	r5, r0, #16
 80181de:	d405      	bmi.n	80181ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80181e0:	4555      	cmp	r5, sl
 80181e2:	da03      	bge.n	80181ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80181e4:	1415      	asrs	r5, r2, #16
 80181e6:	d401      	bmi.n	80181ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80181e8:	454d      	cmp	r5, r9
 80181ea:	db05      	blt.n	80181f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80181ec:	4470      	add	r0, lr
 80181ee:	4462      	add	r2, ip
 80181f0:	3b01      	subs	r3, #1
 80181f2:	3403      	adds	r4, #3
 80181f4:	e7f0      	b.n	80181d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80181f6:	d038      	beq.n	801826a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80181f8:	1e5d      	subs	r5, r3, #1
 80181fa:	fb0e 0605 	mla	r6, lr, r5, r0
 80181fe:	1436      	asrs	r6, r6, #16
 8018200:	d42a      	bmi.n	8018258 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018202:	4556      	cmp	r6, sl
 8018204:	da28      	bge.n	8018258 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018206:	fb0c 2505 	mla	r5, ip, r5, r2
 801820a:	142d      	asrs	r5, r5, #16
 801820c:	d424      	bmi.n	8018258 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801820e:	454d      	cmp	r5, r9
 8018210:	da22      	bge.n	8018258 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018212:	1ce6      	adds	r6, r4, #3
 8018214:	4699      	mov	r9, r3
 8018216:	f1b9 0f00 	cmp.w	r9, #0
 801821a:	f106 0603 	add.w	r6, r6, #3
 801821e:	dd1f      	ble.n	8018260 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8018220:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8018224:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018228:	1415      	asrs	r5, r2, #16
 801822a:	4470      	add	r0, lr
 801822c:	4462      	add	r2, ip
 801822e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018232:	fb0b a505 	mla	r5, fp, r5, sl
 8018236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801823a:	eb08 0a05 	add.w	sl, r8, r5
 801823e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8018242:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018246:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801824a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801824e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8018252:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018256:	e7de      	b.n	8018216 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018258:	2600      	movs	r6, #0
 801825a:	1b9d      	subs	r5, r3, r6
 801825c:	2d00      	cmp	r5, #0
 801825e:	dc38      	bgt.n	80182d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018260:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018268:	441c      	add	r4, r3
 801826a:	2900      	cmp	r1, #0
 801826c:	dd59      	ble.n	8018322 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801826e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018274:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018278:	3901      	subs	r1, #1
 801827a:	eeb0 6a62 	vmov.f32	s12, s5
 801827e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018282:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801828a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801828e:	eeb0 6a43 	vmov.f32	s12, s6
 8018292:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018296:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801829a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801829e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80182a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80182a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80182aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80182ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80182b2:	ee12 2a90 	vmov	r2, s5
 80182b6:	eef0 2a47 	vmov.f32	s5, s14
 80182ba:	fb92 fef3 	sdiv	lr, r2, r3
 80182be:	ee13 2a10 	vmov	r2, s6
 80182c2:	eeb0 3a67 	vmov.f32	s6, s15
 80182c6:	fb92 fcf3 	sdiv	ip, r2, r3
 80182ca:	9a01      	ldr	r2, [sp, #4]
 80182cc:	bf08      	it	eq
 80182ce:	4613      	moveq	r3, r2
 80182d0:	e772      	b.n	80181b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80182d2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80182d6:	d420      	bmi.n	801831a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80182d8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80182dc:	45cb      	cmp	fp, r9
 80182de:	dd1c      	ble.n	801831a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80182e0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80182e4:	d419      	bmi.n	801831a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80182e6:	68fd      	ldr	r5, [r7, #12]
 80182e8:	4555      	cmp	r5, sl
 80182ea:	dd16      	ble.n	801831a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80182ec:	fa0f f58b 	sxth.w	r5, fp
 80182f0:	fb0a 9505 	mla	r5, sl, r5, r9
 80182f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182f8:	f818 9005 	ldrb.w	r9, [r8, r5]
 80182fc:	eb08 0b05 	add.w	fp, r8, r5
 8018300:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018304:	f804 9005 	strb.w	r9, [r4, r5]
 8018308:	4425      	add	r5, r4
 801830a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801830e:	f885 9001 	strb.w	r9, [r5, #1]
 8018312:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018316:	f885 9002 	strb.w	r9, [r5, #2]
 801831a:	4470      	add	r0, lr
 801831c:	4462      	add	r2, ip
 801831e:	3601      	adds	r6, #1
 8018320:	e79b      	b.n	801825a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018322:	b003      	add	sp, #12
 8018324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018328 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801832c:	b085      	sub	sp, #20
 801832e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018332:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018334:	9202      	str	r2, [sp, #8]
 8018336:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801833a:	6860      	ldr	r0, [r4, #4]
 801833c:	9203      	str	r2, [sp, #12]
 801833e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018342:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018346:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801834a:	fb00 2505 	mla	r5, r0, r5, r2
 801834e:	6822      	ldr	r2, [r4, #0]
 8018350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018354:	4415      	add	r5, r2
 8018356:	f8dc 2000 	ldr.w	r2, [ip]
 801835a:	9201      	str	r2, [sp, #4]
 801835c:	2900      	cmp	r1, #0
 801835e:	dc03      	bgt.n	8018368 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018360:	9a02      	ldr	r2, [sp, #8]
 8018362:	2a00      	cmp	r2, #0
 8018364:	f340 8122 	ble.w	80185ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018368:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801836a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801836e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018372:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018374:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018378:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801837c:	2b00      	cmp	r3, #0
 801837e:	dd0d      	ble.n	801839c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018380:	1422      	asrs	r2, r4, #16
 8018382:	d405      	bmi.n	8018390 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018384:	4542      	cmp	r2, r8
 8018386:	da03      	bge.n	8018390 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018388:	1402      	asrs	r2, r0, #16
 801838a:	d401      	bmi.n	8018390 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801838c:	42ba      	cmp	r2, r7
 801838e:	db06      	blt.n	801839e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018390:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018392:	4474      	add	r4, lr
 8018394:	3b01      	subs	r3, #1
 8018396:	3503      	adds	r5, #3
 8018398:	4410      	add	r0, r2
 801839a:	e7ef      	b.n	801837c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801839c:	d072      	beq.n	8018484 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801839e:	1e5a      	subs	r2, r3, #1
 80183a0:	fb0e 4602 	mla	r6, lr, r2, r4
 80183a4:	1436      	asrs	r6, r6, #16
 80183a6:	d462      	bmi.n	801846e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80183a8:	4546      	cmp	r6, r8
 80183aa:	da60      	bge.n	801846e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80183ac:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80183ae:	fb06 0202 	mla	r2, r6, r2, r0
 80183b2:	1412      	asrs	r2, r2, #16
 80183b4:	d45b      	bmi.n	801846e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80183b6:	42ba      	cmp	r2, r7
 80183b8:	da59      	bge.n	801846e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80183ba:	1cef      	adds	r7, r5, #3
 80183bc:	4699      	mov	r9, r3
 80183be:	f1b9 0f00 	cmp.w	r9, #0
 80183c2:	dd5a      	ble.n	801847a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80183c4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80183c8:	1426      	asrs	r6, r4, #16
 80183ca:	1402      	asrs	r2, r0, #16
 80183cc:	fb08 6202 	mla	r2, r8, r2, r6
 80183d0:	9e01      	ldr	r6, [sp, #4]
 80183d2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80183d6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80183da:	d041      	beq.n	8018460 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80183dc:	9a03      	ldr	r2, [sp, #12]
 80183de:	fa5f fb86 	uxtb.w	fp, r6
 80183e2:	fb02 f808 	mul.w	r8, r2, r8
 80183e6:	f108 0201 	add.w	r2, r8, #1
 80183ea:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80183ee:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80183f2:	1212      	asrs	r2, r2, #8
 80183f4:	fa1f fa82 	uxth.w	sl, r2
 80183f8:	43d2      	mvns	r2, r2
 80183fa:	fb1b fb0a 	smulbb	fp, fp, sl
 80183fe:	b2d2      	uxtb	r2, r2
 8018400:	fb08 b802 	mla	r8, r8, r2, fp
 8018404:	fa1f f888 	uxth.w	r8, r8
 8018408:	f108 0b01 	add.w	fp, r8, #1
 801840c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018410:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018414:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018418:	fb1b fb0a 	smulbb	fp, fp, sl
 801841c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018420:	fb16 fa0a 	smulbb	sl, r6, sl
 8018424:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018428:	f807 8c03 	strb.w	r8, [r7, #-3]
 801842c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018430:	fb06 aa02 	mla	sl, r6, r2, sl
 8018434:	fb08 b802 	mla	r8, r8, r2, fp
 8018438:	fa1f fa8a 	uxth.w	sl, sl
 801843c:	fa1f f888 	uxth.w	r8, r8
 8018440:	f10a 0601 	add.w	r6, sl, #1
 8018444:	f108 0b01 	add.w	fp, r8, #1
 8018448:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801844c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018450:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018454:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018458:	f807 ac01 	strb.w	sl, [r7, #-1]
 801845c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018460:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018462:	4474      	add	r4, lr
 8018464:	3703      	adds	r7, #3
 8018466:	f109 39ff 	add.w	r9, r9, #4294967295
 801846a:	4410      	add	r0, r2
 801846c:	e7a7      	b.n	80183be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801846e:	f04f 0800 	mov.w	r8, #0
 8018472:	eba3 0208 	sub.w	r2, r3, r8
 8018476:	2a00      	cmp	r2, #0
 8018478:	dc3b      	bgt.n	80184f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801847a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801847e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018482:	441d      	add	r5, r3
 8018484:	2900      	cmp	r1, #0
 8018486:	f340 8091 	ble.w	80185ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801848a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801848e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018490:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018494:	3901      	subs	r1, #1
 8018496:	eeb0 6a62 	vmov.f32	s12, s5
 801849a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801849e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80184a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80184a6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80184aa:	eeb0 6a43 	vmov.f32	s12, s6
 80184ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80184b2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80184b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80184ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80184be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80184c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80184c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80184ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80184ce:	ee12 2a90 	vmov	r2, s5
 80184d2:	eef0 2a47 	vmov.f32	s5, s14
 80184d6:	fb92 fef3 	sdiv	lr, r2, r3
 80184da:	ee13 2a10 	vmov	r2, s6
 80184de:	eeb0 3a67 	vmov.f32	s6, s15
 80184e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80184e6:	9a02      	ldr	r2, [sp, #8]
 80184e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80184ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184ec:	bf08      	it	eq
 80184ee:	4613      	moveq	r3, r2
 80184f0:	e734      	b.n	801835c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80184f2:	1427      	asrs	r7, r4, #16
 80184f4:	d454      	bmi.n	80185a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80184f6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80184fa:	42be      	cmp	r6, r7
 80184fc:	dd50      	ble.n	80185a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80184fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018502:	d44d      	bmi.n	80185a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018504:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018508:	454a      	cmp	r2, r9
 801850a:	dd49      	ble.n	80185a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801850c:	b236      	sxth	r6, r6
 801850e:	9a01      	ldr	r2, [sp, #4]
 8018510:	fb09 7606 	mla	r6, r9, r6, r7
 8018514:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8018518:	0e3a      	lsrs	r2, r7, #24
 801851a:	d041      	beq.n	80185a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801851c:	9e03      	ldr	r6, [sp, #12]
 801851e:	fa5f fb87 	uxtb.w	fp, r7
 8018522:	4372      	muls	r2, r6
 8018524:	1c56      	adds	r6, r2, #1
 8018526:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801852a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801852e:	1212      	asrs	r2, r2, #8
 8018530:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018534:	fa1f fa82 	uxth.w	sl, r2
 8018538:	43d2      	mvns	r2, r2
 801853a:	fb1b fb0a 	smulbb	fp, fp, sl
 801853e:	b2d2      	uxtb	r2, r2
 8018540:	fb09 b902 	mla	r9, r9, r2, fp
 8018544:	fa1f f989 	uxth.w	r9, r9
 8018548:	f109 0b01 	add.w	fp, r9, #1
 801854c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018550:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018554:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018558:	fb1b fb0a 	smulbb	fp, fp, sl
 801855c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018560:	fb17 fa0a 	smulbb	sl, r7, sl
 8018564:	f805 9006 	strb.w	r9, [r5, r6]
 8018568:	442e      	add	r6, r5
 801856a:	78b7      	ldrb	r7, [r6, #2]
 801856c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018570:	fb07 aa02 	mla	sl, r7, r2, sl
 8018574:	fb09 b902 	mla	r9, r9, r2, fp
 8018578:	fa1f fa8a 	uxth.w	sl, sl
 801857c:	fa1f f989 	uxth.w	r9, r9
 8018580:	f10a 0701 	add.w	r7, sl, #1
 8018584:	f109 0b01 	add.w	fp, r9, #1
 8018588:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801858c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018590:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018594:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018598:	f886 a002 	strb.w	sl, [r6, #2]
 801859c:	f886 9001 	strb.w	r9, [r6, #1]
 80185a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80185a2:	4474      	add	r4, lr
 80185a4:	f108 0801 	add.w	r8, r8, #1
 80185a8:	4410      	add	r0, r2
 80185aa:	e762      	b.n	8018472 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80185ac:	b005      	add	sp, #20
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80185b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80185bc:	9201      	str	r2, [sp, #4]
 80185be:	6860      	ldr	r0, [r4, #4]
 80185c0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80185c4:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80185c8:	fb00 2505 	mla	r5, r0, r5, r2
 80185cc:	6822      	ldr	r2, [r4, #0]
 80185ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185d2:	4415      	add	r5, r2
 80185d4:	f8dc 2000 	ldr.w	r2, [ip]
 80185d8:	9200      	str	r2, [sp, #0]
 80185da:	2900      	cmp	r1, #0
 80185dc:	dc03      	bgt.n	80185e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80185de:	9a01      	ldr	r2, [sp, #4]
 80185e0:	2a00      	cmp	r2, #0
 80185e2:	f340 812b 	ble.w	801883c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80185e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80185e8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80185ec:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80185f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80185f2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80185f6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	dd0e      	ble.n	801861c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80185fe:	1422      	asrs	r2, r4, #16
 8018600:	d405      	bmi.n	801860e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018602:	4572      	cmp	r2, lr
 8018604:	da03      	bge.n	801860e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018606:	1402      	asrs	r2, r0, #16
 8018608:	d401      	bmi.n	801860e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801860a:	42ba      	cmp	r2, r7
 801860c:	db07      	blt.n	801861e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801860e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018610:	3b01      	subs	r3, #1
 8018612:	3503      	adds	r5, #3
 8018614:	4414      	add	r4, r2
 8018616:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018618:	4410      	add	r0, r2
 801861a:	e7ee      	b.n	80185fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801861c:	d06f      	beq.n	80186fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801861e:	1e5a      	subs	r2, r3, #1
 8018620:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018622:	fb06 4602 	mla	r6, r6, r2, r4
 8018626:	1436      	asrs	r6, r6, #16
 8018628:	d45e      	bmi.n	80186e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801862a:	4576      	cmp	r6, lr
 801862c:	da5c      	bge.n	80186e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801862e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018630:	fb06 0202 	mla	r2, r6, r2, r0
 8018634:	1412      	asrs	r2, r2, #16
 8018636:	d457      	bmi.n	80186e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018638:	42ba      	cmp	r2, r7
 801863a:	da55      	bge.n	80186e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801863c:	1cee      	adds	r6, r5, #3
 801863e:	469a      	mov	sl, r3
 8018640:	f1ba 0f00 	cmp.w	sl, #0
 8018644:	dd56      	ble.n	80186f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018646:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801864a:	1427      	asrs	r7, r4, #16
 801864c:	1402      	asrs	r2, r0, #16
 801864e:	fb0e 7202 	mla	r2, lr, r2, r7
 8018652:	9f00      	ldr	r7, [sp, #0]
 8018654:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8018658:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801865c:	d03c      	beq.n	80186d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801865e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8018662:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018666:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801866a:	fa5f f28e 	uxtb.w	r2, lr
 801866e:	b2ff      	uxtb	r7, r7
 8018670:	f000 80dd 	beq.w	801882e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018674:	fa1f f882 	uxth.w	r8, r2
 8018678:	43d2      	mvns	r2, r2
 801867a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801867e:	fb17 f708 	smulbb	r7, r7, r8
 8018682:	b2d2      	uxtb	r2, r2
 8018684:	fb19 f908 	smulbb	r9, r9, r8
 8018688:	fb0e 7702 	mla	r7, lr, r2, r7
 801868c:	fb1b f808 	smulbb	r8, fp, r8
 8018690:	b2bf      	uxth	r7, r7
 8018692:	f107 0e01 	add.w	lr, r7, #1
 8018696:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801869a:	123f      	asrs	r7, r7, #8
 801869c:	f806 7c03 	strb.w	r7, [r6, #-3]
 80186a0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80186a4:	fb07 9902 	mla	r9, r7, r2, r9
 80186a8:	fa1f f989 	uxth.w	r9, r9
 80186ac:	f109 0701 	add.w	r7, r9, #1
 80186b0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80186b4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80186b8:	fb07 8802 	mla	r8, r7, r2, r8
 80186bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80186c0:	fa1f f888 	uxth.w	r8, r8
 80186c4:	f806 9c02 	strb.w	r9, [r6, #-2]
 80186c8:	f108 0201 	add.w	r2, r8, #1
 80186cc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80186d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80186d4:	f806 8c01 	strb.w	r8, [r6, #-1]
 80186d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80186da:	3603      	adds	r6, #3
 80186dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80186e0:	4414      	add	r4, r2
 80186e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80186e4:	4410      	add	r0, r2
 80186e6:	e7ab      	b.n	8018640 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80186e8:	f04f 0e00 	mov.w	lr, #0
 80186ec:	eba3 020e 	sub.w	r2, r3, lr
 80186f0:	2a00      	cmp	r2, #0
 80186f2:	dc3d      	bgt.n	8018770 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80186f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80186f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186fc:	441d      	add	r5, r3
 80186fe:	2900      	cmp	r1, #0
 8018700:	f340 809c 	ble.w	801883c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018704:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801870a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801870e:	3901      	subs	r1, #1
 8018710:	eeb0 6a62 	vmov.f32	s12, s5
 8018714:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018718:	ee31 1a05 	vadd.f32	s2, s2, s10
 801871c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018720:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018724:	eeb0 6a43 	vmov.f32	s12, s6
 8018728:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801872c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018730:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018734:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018738:	ee77 2a62 	vsub.f32	s5, s14, s5
 801873c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018740:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018744:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018748:	ee12 2a90 	vmov	r2, s5
 801874c:	eef0 2a47 	vmov.f32	s5, s14
 8018750:	fb92 f3f3 	sdiv	r3, r2, r3
 8018754:	ee13 2a10 	vmov	r2, s6
 8018758:	930f      	str	r3, [sp, #60]	@ 0x3c
 801875a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801875c:	eeb0 3a67 	vmov.f32	s6, s15
 8018760:	fb92 f3f3 	sdiv	r3, r2, r3
 8018764:	9a01      	ldr	r2, [sp, #4]
 8018766:	9310      	str	r3, [sp, #64]	@ 0x40
 8018768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801876a:	bf08      	it	eq
 801876c:	4613      	moveq	r3, r2
 801876e:	e734      	b.n	80185da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018770:	1427      	asrs	r7, r4, #16
 8018772:	d44d      	bmi.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018774:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018778:	42be      	cmp	r6, r7
 801877a:	dd49      	ble.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801877c:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018780:	d446      	bmi.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018782:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018786:	4542      	cmp	r2, r8
 8018788:	dd42      	ble.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801878a:	b236      	sxth	r6, r6
 801878c:	9a00      	ldr	r2, [sp, #0]
 801878e:	fb08 7606 	mla	r6, r8, r6, r7
 8018792:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8018796:	0e3a      	lsrs	r2, r7, #24
 8018798:	d03a      	beq.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801879a:	2aff      	cmp	r2, #255	@ 0xff
 801879c:	b2d6      	uxtb	r6, r2
 801879e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80187a2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80187a6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80187aa:	b2ff      	uxtb	r7, r7
 80187ac:	d037      	beq.n	801881e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80187ae:	fa1f f986 	uxth.w	r9, r6
 80187b2:	4472      	add	r2, lr
 80187b4:	43f6      	mvns	r6, r6
 80187b6:	f815 8002 	ldrb.w	r8, [r5, r2]
 80187ba:	fb17 f709 	smulbb	r7, r7, r9
 80187be:	fb1a fa09 	smulbb	sl, sl, r9
 80187c2:	b2f6      	uxtb	r6, r6
 80187c4:	fb1b f909 	smulbb	r9, fp, r9
 80187c8:	fb08 7706 	mla	r7, r8, r6, r7
 80187cc:	b2bf      	uxth	r7, r7
 80187ce:	f107 0801 	add.w	r8, r7, #1
 80187d2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80187d6:	123f      	asrs	r7, r7, #8
 80187d8:	54af      	strb	r7, [r5, r2]
 80187da:	442a      	add	r2, r5
 80187dc:	7857      	ldrb	r7, [r2, #1]
 80187de:	fb07 aa06 	mla	sl, r7, r6, sl
 80187e2:	fa1f fa8a 	uxth.w	sl, sl
 80187e6:	f10a 0701 	add.w	r7, sl, #1
 80187ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80187ee:	7897      	ldrb	r7, [r2, #2]
 80187f0:	fb07 9906 	mla	r9, r7, r6, r9
 80187f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80187f8:	fa1f f989 	uxth.w	r9, r9
 80187fc:	f882 a001 	strb.w	sl, [r2, #1]
 8018800:	f109 0601 	add.w	r6, r9, #1
 8018804:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8018808:	ea4f 2929 	mov.w	r9, r9, asr #8
 801880c:	f882 9002 	strb.w	r9, [r2, #2]
 8018810:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018812:	f10e 0e01 	add.w	lr, lr, #1
 8018816:	4414      	add	r4, r2
 8018818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801881a:	4410      	add	r0, r2
 801881c:	e766      	b.n	80186ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801881e:	4472      	add	r2, lr
 8018820:	54af      	strb	r7, [r5, r2]
 8018822:	442a      	add	r2, r5
 8018824:	f882 a001 	strb.w	sl, [r2, #1]
 8018828:	f882 b002 	strb.w	fp, [r2, #2]
 801882c:	e7f0      	b.n	8018810 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801882e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8018832:	f806 9c02 	strb.w	r9, [r6, #-2]
 8018836:	f806 bc01 	strb.w	fp, [r6, #-1]
 801883a:	e74d      	b.n	80186d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801883c:	b003      	add	sp, #12
 801883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018848:	b087      	sub	sp, #28
 801884a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801884e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018850:	9204      	str	r2, [sp, #16]
 8018852:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018856:	6860      	ldr	r0, [r4, #4]
 8018858:	9205      	str	r2, [sp, #20]
 801885a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801885e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8018862:	9101      	str	r1, [sp, #4]
 8018864:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8018868:	fb00 2505 	mla	r5, r0, r5, r2
 801886c:	6822      	ldr	r2, [r4, #0]
 801886e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018872:	4415      	add	r5, r2
 8018874:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018878:	3201      	adds	r2, #1
 801887a:	f022 0201 	bic.w	r2, r2, #1
 801887e:	9202      	str	r2, [sp, #8]
 8018880:	f8dc 2000 	ldr.w	r2, [ip]
 8018884:	9203      	str	r2, [sp, #12]
 8018886:	9a01      	ldr	r2, [sp, #4]
 8018888:	2a00      	cmp	r2, #0
 801888a:	dc03      	bgt.n	8018894 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801888c:	9a04      	ldr	r2, [sp, #16]
 801888e:	2a00      	cmp	r2, #0
 8018890:	f340 8135 	ble.w	8018afe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018894:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018896:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801889a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801889e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80188a0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80188a4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	dd0d      	ble.n	80188c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80188ac:	1422      	asrs	r2, r4, #16
 80188ae:	d405      	bmi.n	80188bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188b0:	4542      	cmp	r2, r8
 80188b2:	da03      	bge.n	80188bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188b4:	1402      	asrs	r2, r0, #16
 80188b6:	d401      	bmi.n	80188bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188b8:	42ba      	cmp	r2, r7
 80188ba:	db06      	blt.n	80188ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80188bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80188be:	4474      	add	r4, lr
 80188c0:	3b01      	subs	r3, #1
 80188c2:	3503      	adds	r5, #3
 80188c4:	4410      	add	r0, r2
 80188c6:	e7ef      	b.n	80188a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80188c8:	d077      	beq.n	80189ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80188ca:	1e5a      	subs	r2, r3, #1
 80188cc:	fb0e 4602 	mla	r6, lr, r2, r4
 80188d0:	1436      	asrs	r6, r6, #16
 80188d2:	d469      	bmi.n	80189a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80188d4:	4546      	cmp	r6, r8
 80188d6:	da67      	bge.n	80189a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80188d8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80188da:	fb06 0202 	mla	r2, r6, r2, r0
 80188de:	1412      	asrs	r2, r2, #16
 80188e0:	d462      	bmi.n	80189a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80188e2:	42ba      	cmp	r2, r7
 80188e4:	da60      	bge.n	80189a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80188e6:	1cee      	adds	r6, r5, #3
 80188e8:	4699      	mov	r9, r3
 80188ea:	f1b9 0f00 	cmp.w	r9, #0
 80188ee:	dd5f      	ble.n	80189b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80188f0:	1422      	asrs	r2, r4, #16
 80188f2:	9902      	ldr	r1, [sp, #8]
 80188f4:	1407      	asrs	r7, r0, #16
 80188f6:	fb01 2707 	mla	r7, r1, r7, r2
 80188fa:	9903      	ldr	r1, [sp, #12]
 80188fc:	087a      	lsrs	r2, r7, #1
 80188fe:	5c8a      	ldrb	r2, [r1, r2]
 8018900:	07f9      	lsls	r1, r7, #31
 8018902:	bf54      	ite	pl
 8018904:	f002 020f 	andpl.w	r2, r2, #15
 8018908:	1112      	asrmi	r2, r2, #4
 801890a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801890e:	b2d2      	uxtb	r2, r2
 8018910:	2a00      	cmp	r2, #0
 8018912:	d042      	beq.n	801899a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018914:	497b      	ldr	r1, [pc, #492]	@ (8018b04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018916:	680f      	ldr	r7, [r1, #0]
 8018918:	9905      	ldr	r1, [sp, #20]
 801891a:	fa5f fb87 	uxtb.w	fp, r7
 801891e:	434a      	muls	r2, r1
 8018920:	f102 0801 	add.w	r8, r2, #1
 8018924:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8018928:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801892c:	1212      	asrs	r2, r2, #8
 801892e:	fa1f fa82 	uxth.w	sl, r2
 8018932:	43d2      	mvns	r2, r2
 8018934:	fb1b fb0a 	smulbb	fp, fp, sl
 8018938:	b2d2      	uxtb	r2, r2
 801893a:	fb08 b802 	mla	r8, r8, r2, fp
 801893e:	fa1f f888 	uxth.w	r8, r8
 8018942:	f108 0b01 	add.w	fp, r8, #1
 8018946:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801894a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801894e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018952:	fb1b fb0a 	smulbb	fp, fp, sl
 8018956:	ea4f 2828 	mov.w	r8, r8, asr #8
 801895a:	fb17 fa0a 	smulbb	sl, r7, sl
 801895e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8018962:	f806 8c03 	strb.w	r8, [r6, #-3]
 8018966:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801896a:	fb07 aa02 	mla	sl, r7, r2, sl
 801896e:	fb08 b802 	mla	r8, r8, r2, fp
 8018972:	fa1f fa8a 	uxth.w	sl, sl
 8018976:	fa1f f888 	uxth.w	r8, r8
 801897a:	f10a 0701 	add.w	r7, sl, #1
 801897e:	f108 0b01 	add.w	fp, r8, #1
 8018982:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018986:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801898a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801898e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018992:	f806 ac01 	strb.w	sl, [r6, #-1]
 8018996:	f806 8c02 	strb.w	r8, [r6, #-2]
 801899a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801899c:	4474      	add	r4, lr
 801899e:	3603      	adds	r6, #3
 80189a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80189a4:	4410      	add	r0, r2
 80189a6:	e7a0      	b.n	80188ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80189a8:	2700      	movs	r7, #0
 80189aa:	1bda      	subs	r2, r3, r7
 80189ac:	2a00      	cmp	r2, #0
 80189ae:	dc3e      	bgt.n	8018a2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80189b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80189b8:	441d      	add	r5, r3
 80189ba:	9b01      	ldr	r3, [sp, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	f340 809e 	ble.w	8018afe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80189c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80189c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80189c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80189cc:	eeb0 6a62 	vmov.f32	s12, s5
 80189d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80189d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80189d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189dc:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80189e0:	eeb0 6a43 	vmov.f32	s12, s6
 80189e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189e8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80189ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80189f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80189f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80189f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80189fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a04:	ee12 2a90 	vmov	r2, s5
 8018a08:	eef0 2a47 	vmov.f32	s5, s14
 8018a0c:	fb92 fef3 	sdiv	lr, r2, r3
 8018a10:	ee13 2a10 	vmov	r2, s6
 8018a14:	eeb0 3a67 	vmov.f32	s6, s15
 8018a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a1c:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	9a04      	ldr	r2, [sp, #16]
 8018a22:	3b01      	subs	r3, #1
 8018a24:	9301      	str	r3, [sp, #4]
 8018a26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a28:	bf08      	it	eq
 8018a2a:	4613      	moveq	r3, r2
 8018a2c:	e72b      	b.n	8018886 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018a2e:	1426      	asrs	r6, r4, #16
 8018a30:	d460      	bmi.n	8018af4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018a32:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018a36:	42b2      	cmp	r2, r6
 8018a38:	dd5c      	ble.n	8018af4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018a3a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018a3e:	d459      	bmi.n	8018af4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018a40:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018a44:	4542      	cmp	r2, r8
 8018a46:	dd55      	ble.n	8018af4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018a48:	9a02      	ldr	r2, [sp, #8]
 8018a4a:	9903      	ldr	r1, [sp, #12]
 8018a4c:	fb08 6602 	mla	r6, r8, r2, r6
 8018a50:	0872      	lsrs	r2, r6, #1
 8018a52:	07f6      	lsls	r6, r6, #31
 8018a54:	5c8a      	ldrb	r2, [r1, r2]
 8018a56:	bf54      	ite	pl
 8018a58:	f002 020f 	andpl.w	r2, r2, #15
 8018a5c:	1112      	asrmi	r2, r2, #4
 8018a5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018a62:	b2d2      	uxtb	r2, r2
 8018a64:	2a00      	cmp	r2, #0
 8018a66:	d045      	beq.n	8018af4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018a68:	4926      	ldr	r1, [pc, #152]	@ (8018b04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018a6a:	f8d1 8000 	ldr.w	r8, [r1]
 8018a6e:	9905      	ldr	r1, [sp, #20]
 8018a70:	fa5f fb88 	uxtb.w	fp, r8
 8018a74:	434a      	muls	r2, r1
 8018a76:	1c56      	adds	r6, r2, #1
 8018a78:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018a7c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018a80:	1212      	asrs	r2, r2, #8
 8018a82:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018a86:	fa1f fa82 	uxth.w	sl, r2
 8018a8a:	43d2      	mvns	r2, r2
 8018a8c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018a90:	b2d2      	uxtb	r2, r2
 8018a92:	fb09 b902 	mla	r9, r9, r2, fp
 8018a96:	fa1f f989 	uxth.w	r9, r9
 8018a9a:	f109 0b01 	add.w	fp, r9, #1
 8018a9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018aa2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8018aa6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8018aaa:	fb1b fb0a 	smulbb	fp, fp, sl
 8018aae:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ab2:	fb18 fa0a 	smulbb	sl, r8, sl
 8018ab6:	f805 9006 	strb.w	r9, [r5, r6]
 8018aba:	442e      	add	r6, r5
 8018abc:	f896 8002 	ldrb.w	r8, [r6, #2]
 8018ac0:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018ac4:	fb08 aa02 	mla	sl, r8, r2, sl
 8018ac8:	fb09 b902 	mla	r9, r9, r2, fp
 8018acc:	fa1f fa8a 	uxth.w	sl, sl
 8018ad0:	fa1f f989 	uxth.w	r9, r9
 8018ad4:	f10a 0801 	add.w	r8, sl, #1
 8018ad8:	f109 0b01 	add.w	fp, r9, #1
 8018adc:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8018ae0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ae4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ae8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018aec:	f886 a002 	strb.w	sl, [r6, #2]
 8018af0:	f886 9001 	strb.w	r9, [r6, #1]
 8018af4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018af6:	4474      	add	r4, lr
 8018af8:	3701      	adds	r7, #1
 8018afa:	4410      	add	r0, r2
 8018afc:	e755      	b.n	80189aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8018afe:	b007      	add	sp, #28
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b04:	240284b4 	.word	0x240284b4

08018b08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b0c:	b085      	sub	sp, #20
 8018b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018b12:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018b14:	9203      	str	r2, [sp, #12]
 8018b16:	6860      	ldr	r0, [r4, #4]
 8018b18:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018b1c:	9100      	str	r1, [sp, #0]
 8018b1e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8018b22:	fb00 2606 	mla	r6, r0, r6, r2
 8018b26:	6822      	ldr	r2, [r4, #0]
 8018b28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018b2c:	4416      	add	r6, r2
 8018b2e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018b32:	3201      	adds	r2, #1
 8018b34:	f022 0201 	bic.w	r2, r2, #1
 8018b38:	9201      	str	r2, [sp, #4]
 8018b3a:	f8dc 2000 	ldr.w	r2, [ip]
 8018b3e:	9202      	str	r2, [sp, #8]
 8018b40:	9a00      	ldr	r2, [sp, #0]
 8018b42:	2a00      	cmp	r2, #0
 8018b44:	dc03      	bgt.n	8018b4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8018b46:	9a03      	ldr	r2, [sp, #12]
 8018b48:	2a00      	cmp	r2, #0
 8018b4a:	f340 8140 	ble.w	8018dce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018b4e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018b50:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018b54:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8018b58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018b5a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018b5e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	dd0e      	ble.n	8018b84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018b66:	142a      	asrs	r2, r5, #16
 8018b68:	d405      	bmi.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018b6a:	4572      	cmp	r2, lr
 8018b6c:	da03      	bge.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018b6e:	1422      	asrs	r2, r4, #16
 8018b70:	d401      	bmi.n	8018b76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018b72:	42ba      	cmp	r2, r7
 8018b74:	db07      	blt.n	8018b86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018b76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018b78:	3b01      	subs	r3, #1
 8018b7a:	3603      	adds	r6, #3
 8018b7c:	4415      	add	r5, r2
 8018b7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018b80:	4414      	add	r4, r2
 8018b82:	e7ee      	b.n	8018b62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018b84:	d072      	beq.n	8018c6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b86:	1e5a      	subs	r2, r3, #1
 8018b88:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018b8a:	fb00 5002 	mla	r0, r0, r2, r5
 8018b8e:	1400      	asrs	r0, r0, #16
 8018b90:	d463      	bmi.n	8018c5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018b92:	4570      	cmp	r0, lr
 8018b94:	da61      	bge.n	8018c5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018b96:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018b98:	fb00 4202 	mla	r2, r0, r2, r4
 8018b9c:	1412      	asrs	r2, r2, #16
 8018b9e:	d45c      	bmi.n	8018c5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ba0:	42ba      	cmp	r2, r7
 8018ba2:	da5a      	bge.n	8018c5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ba4:	1cf0      	adds	r0, r6, #3
 8018ba6:	469a      	mov	sl, r3
 8018ba8:	f1ba 0f00 	cmp.w	sl, #0
 8018bac:	dd59      	ble.n	8018c62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018bae:	142a      	asrs	r2, r5, #16
 8018bb0:	9901      	ldr	r1, [sp, #4]
 8018bb2:	1427      	asrs	r7, r4, #16
 8018bb4:	fb01 2707 	mla	r7, r1, r7, r2
 8018bb8:	9902      	ldr	r1, [sp, #8]
 8018bba:	087a      	lsrs	r2, r7, #1
 8018bbc:	5c8a      	ldrb	r2, [r1, r2]
 8018bbe:	07f9      	lsls	r1, r7, #31
 8018bc0:	bf54      	ite	pl
 8018bc2:	f002 020f 	andpl.w	r2, r2, #15
 8018bc6:	1112      	asrmi	r2, r2, #4
 8018bc8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018bcc:	b2d2      	uxtb	r2, r2
 8018bce:	2a00      	cmp	r2, #0
 8018bd0:	d03b      	beq.n	8018c4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018bd2:	4980      	ldr	r1, [pc, #512]	@ (8018dd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018bd4:	2aff      	cmp	r2, #255	@ 0xff
 8018bd6:	680f      	ldr	r7, [r1, #0]
 8018bd8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018bdc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018be0:	b2ff      	uxtb	r7, r7
 8018be2:	f000 80ed 	beq.w	8018dc0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8018be6:	fa1f f882 	uxth.w	r8, r2
 8018bea:	43d2      	mvns	r2, r2
 8018bec:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8018bf0:	fb17 f708 	smulbb	r7, r7, r8
 8018bf4:	b2d2      	uxtb	r2, r2
 8018bf6:	fb19 f908 	smulbb	r9, r9, r8
 8018bfa:	fb0e 7702 	mla	r7, lr, r2, r7
 8018bfe:	fb1b f808 	smulbb	r8, fp, r8
 8018c02:	b2bf      	uxth	r7, r7
 8018c04:	f107 0e01 	add.w	lr, r7, #1
 8018c08:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018c0c:	123f      	asrs	r7, r7, #8
 8018c0e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018c12:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8018c16:	fb07 9902 	mla	r9, r7, r2, r9
 8018c1a:	fa1f f989 	uxth.w	r9, r9
 8018c1e:	f109 0701 	add.w	r7, r9, #1
 8018c22:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018c26:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8018c2a:	fb07 8802 	mla	r8, r7, r2, r8
 8018c2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c32:	fa1f f888 	uxth.w	r8, r8
 8018c36:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018c3a:	f108 0201 	add.w	r2, r8, #1
 8018c3e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018c42:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018c46:	f800 8c01 	strb.w	r8, [r0, #-1]
 8018c4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c4c:	3003      	adds	r0, #3
 8018c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c52:	4415      	add	r5, r2
 8018c54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018c56:	4414      	add	r4, r2
 8018c58:	e7a6      	b.n	8018ba8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018c5a:	2700      	movs	r7, #0
 8018c5c:	1bda      	subs	r2, r3, r7
 8018c5e:	2a00      	cmp	r2, #0
 8018c60:	dc40      	bgt.n	8018ce4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8018c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c6a:	441e      	add	r6, r3
 8018c6c:	9b00      	ldr	r3, [sp, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	f340 80ad 	ble.w	8018dce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018c74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c7e:	eeb0 6a62 	vmov.f32	s12, s5
 8018c82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018c86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018c8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c8e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018c92:	eeb0 6a43 	vmov.f32	s12, s6
 8018c96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c9a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018c9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018caa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018cae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018cb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018cb6:	ee12 2a90 	vmov	r2, s5
 8018cba:	eef0 2a47 	vmov.f32	s5, s14
 8018cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cc2:	ee13 2a10 	vmov	r2, s6
 8018cc6:	9311      	str	r3, [sp, #68]	@ 0x44
 8018cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cca:	eeb0 3a67 	vmov.f32	s6, s15
 8018cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cd2:	9312      	str	r3, [sp, #72]	@ 0x48
 8018cd4:	9b00      	ldr	r3, [sp, #0]
 8018cd6:	9a03      	ldr	r2, [sp, #12]
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	9300      	str	r3, [sp, #0]
 8018cdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cde:	bf08      	it	eq
 8018ce0:	4613      	moveq	r3, r2
 8018ce2:	e72d      	b.n	8018b40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018ce4:	1428      	asrs	r0, r5, #16
 8018ce6:	d45c      	bmi.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018ce8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018cec:	4282      	cmp	r2, r0
 8018cee:	dd58      	ble.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018cf0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018cf4:	d455      	bmi.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018cf6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018cfa:	4572      	cmp	r2, lr
 8018cfc:	dd51      	ble.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018cfe:	9a01      	ldr	r2, [sp, #4]
 8018d00:	9902      	ldr	r1, [sp, #8]
 8018d02:	fb0e 0002 	mla	r0, lr, r2, r0
 8018d06:	0842      	lsrs	r2, r0, #1
 8018d08:	07c0      	lsls	r0, r0, #31
 8018d0a:	5c8a      	ldrb	r2, [r1, r2]
 8018d0c:	bf54      	ite	pl
 8018d0e:	f002 020f 	andpl.w	r2, r2, #15
 8018d12:	1112      	asrmi	r2, r2, #4
 8018d14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018d18:	b2d2      	uxtb	r2, r2
 8018d1a:	2a00      	cmp	r2, #0
 8018d1c:	d041      	beq.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018d1e:	492d      	ldr	r1, [pc, #180]	@ (8018dd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018d20:	2aff      	cmp	r2, #255	@ 0xff
 8018d22:	6808      	ldr	r0, [r1, #0]
 8018d24:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018d28:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018d2c:	fa5f fe80 	uxtb.w	lr, r0
 8018d30:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8018d34:	d03b      	beq.n	8018dae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8018d36:	fa1f f982 	uxth.w	r9, r2
 8018d3a:	4438      	add	r0, r7
 8018d3c:	43d2      	mvns	r2, r2
 8018d3e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8018d42:	fb1e fe09 	smulbb	lr, lr, r9
 8018d46:	fb1a fa09 	smulbb	sl, sl, r9
 8018d4a:	b2d2      	uxtb	r2, r2
 8018d4c:	fb1b f909 	smulbb	r9, fp, r9
 8018d50:	fb08 ee02 	mla	lr, r8, r2, lr
 8018d54:	fa1f fe8e 	uxth.w	lr, lr
 8018d58:	f10e 0801 	add.w	r8, lr, #1
 8018d5c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8018d60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018d64:	f806 e000 	strb.w	lr, [r6, r0]
 8018d68:	4430      	add	r0, r6
 8018d6a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8018d6e:	fb0e aa02 	mla	sl, lr, r2, sl
 8018d72:	fa1f fa8a 	uxth.w	sl, sl
 8018d76:	f10a 0e01 	add.w	lr, sl, #1
 8018d7a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8018d7e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8018d82:	fb0e 9902 	mla	r9, lr, r2, r9
 8018d86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018d8a:	fa1f f989 	uxth.w	r9, r9
 8018d8e:	f880 a001 	strb.w	sl, [r0, #1]
 8018d92:	f109 0201 	add.w	r2, r9, #1
 8018d96:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018d9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018d9e:	f880 9002 	strb.w	r9, [r0, #2]
 8018da2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018da4:	3701      	adds	r7, #1
 8018da6:	4415      	add	r5, r2
 8018da8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018daa:	4414      	add	r4, r2
 8018dac:	e756      	b.n	8018c5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018dae:	4438      	add	r0, r7
 8018db0:	f806 e000 	strb.w	lr, [r6, r0]
 8018db4:	4430      	add	r0, r6
 8018db6:	f880 a001 	strb.w	sl, [r0, #1]
 8018dba:	f880 b002 	strb.w	fp, [r0, #2]
 8018dbe:	e7f0      	b.n	8018da2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018dc0:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018dc4:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018dc8:	f800 bc01 	strb.w	fp, [r0, #-1]
 8018dcc:	e73d      	b.n	8018c4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018dce:	b005      	add	sp, #20
 8018dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dd4:	240284b4 	.word	0x240284b4

08018dd8 <_ZN8touchgfx8LCD24bppD1Ev>:
 8018dd8:	4770      	bx	lr

08018dda <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8018dda:	4770      	bx	lr

08018ddc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8018ddc:	4770      	bx	lr

08018dde <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8018dde:	4770      	bx	lr

08018de0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8018de0:	4770      	bx	lr

08018de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8018de2:	4770      	bx	lr

08018de4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8018de4:	4770      	bx	lr

08018de6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8018de6:	4770      	bx	lr

08018de8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8018de8:	4770      	bx	lr

08018dea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018dea:	4770      	bx	lr

08018dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018dec:	4770      	bx	lr

08018dee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018dee:	4770      	bx	lr

08018df0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018df0:	4770      	bx	lr

08018df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018df2:	4770      	bx	lr

08018df4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018df4:	4770      	bx	lr

08018df6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018df6:	4770      	bx	lr

08018df8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018df8:	4770      	bx	lr

08018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018dfa:	4770      	bx	lr

08018dfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018dfc:	4770      	bx	lr

08018dfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018dfe:	4770      	bx	lr

08018e00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018e00:	4770      	bx	lr

08018e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018e02:	4770      	bx	lr

08018e04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018e04:	4770      	bx	lr

08018e06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018e06:	4770      	bx	lr

08018e08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018e08:	4770      	bx	lr
	...

08018e0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e0e:	4606      	mov	r6, r0
 8018e10:	b087      	sub	sp, #28
 8018e12:	4615      	mov	r5, r2
 8018e14:	461f      	mov	r7, r3
 8018e16:	b353      	cbz	r3, 8018e6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018e18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	dd26      	ble.n	8018e6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018e20:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	dd22      	ble.n	8018e6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018e28:	6808      	ldr	r0, [r1, #0]
 8018e2a:	aa04      	add	r2, sp, #16
 8018e2c:	6849      	ldr	r1, [r1, #4]
 8018e2e:	4c1b      	ldr	r4, [pc, #108]	@ (8018e9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018e30:	c203      	stmia	r2!, {r0, r1}
 8018e32:	a804      	add	r0, sp, #16
 8018e34:	f7fa fb9a 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e38:	6820      	ldr	r0, [r4, #0]
 8018e3a:	6803      	ldr	r3, [r0, #0]
 8018e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e3e:	4798      	blx	r3
 8018e40:	2fff      	cmp	r7, #255	@ 0xff
 8018e42:	d016      	beq.n	8018e72 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018e44:	f010 0f08 	tst.w	r0, #8
 8018e48:	6820      	ldr	r0, [r4, #0]
 8018e4a:	d015      	beq.n	8018e78 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8018e4c:	2400      	movs	r4, #0
 8018e4e:	6801      	ldr	r1, [r0, #0]
 8018e50:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018e54:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018e58:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8018e5c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018e60:	9401      	str	r4, [sp, #4]
 8018e62:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018e66:	9400      	str	r4, [sp, #0]
 8018e68:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	47a0      	blx	r4
 8018e6e:	b007      	add	sp, #28
 8018e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e72:	f010 0f02 	tst.w	r0, #2
 8018e76:	e7e7      	b.n	8018e48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8018e78:	6803      	ldr	r3, [r0, #0]
 8018e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e7c:	4798      	blx	r3
 8018e7e:	4b08      	ldr	r3, [pc, #32]	@ (8018ea0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8018e80:	4601      	mov	r1, r0
 8018e82:	4630      	mov	r0, r6
 8018e84:	881a      	ldrh	r2, [r3, #0]
 8018e86:	6833      	ldr	r3, [r6, #0]
 8018e88:	e9cd 5700 	strd	r5, r7, [sp]
 8018e8c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018e8e:	ab04      	add	r3, sp, #16
 8018e90:	47a8      	blx	r5
 8018e92:	6820      	ldr	r0, [r4, #0]
 8018e94:	6803      	ldr	r3, [r0, #0]
 8018e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e98:	4798      	blx	r3
 8018e9a:	e7e8      	b.n	8018e6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018e9c:	240284a4 	.word	0x240284a4
 8018ea0:	2402849e 	.word	0x2402849e

08018ea4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ea8:	b08b      	sub	sp, #44	@ 0x2c
 8018eaa:	460d      	mov	r5, r1
 8018eac:	4616      	mov	r6, r2
 8018eae:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8018eb2:	f1b8 0f00 	cmp.w	r8, #0
 8018eb6:	d047      	beq.n	8018f48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018eb8:	6810      	ldr	r0, [r2, #0]
 8018eba:	ac06      	add	r4, sp, #24
 8018ebc:	6851      	ldr	r1, [r2, #4]
 8018ebe:	4f51      	ldr	r7, [pc, #324]	@ (8019004 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8018ec0:	c403      	stmia	r4!, {r0, r1}
 8018ec2:	6818      	ldr	r0, [r3, #0]
 8018ec4:	ac08      	add	r4, sp, #32
 8018ec6:	6859      	ldr	r1, [r3, #4]
 8018ec8:	c403      	stmia	r4!, {r0, r1}
 8018eca:	a806      	add	r0, sp, #24
 8018ecc:	f7fa fb4e 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018ed0:	4631      	mov	r1, r6
 8018ed2:	a808      	add	r0, sp, #32
 8018ed4:	f7fa fb8e 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018ed8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018edc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018ee0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018ee4:	6838      	ldr	r0, [r7, #0]
 8018ee6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018eea:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8018eee:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8018ef2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018ef6:	440d      	add	r5, r1
 8018ef8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018efc:	440a      	add	r2, r1
 8018efe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018f02:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018f06:	4413      	add	r3, r2
 8018f08:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018f0c:	6803      	ldr	r3, [r0, #0]
 8018f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f10:	4798      	blx	r3
 8018f12:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8018f16:	d01a      	beq.n	8018f4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8018f18:	f010 0f04 	tst.w	r0, #4
 8018f1c:	6838      	ldr	r0, [r7, #0]
 8018f1e:	d019      	beq.n	8018f54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8018f20:	2100      	movs	r1, #0
 8018f22:	6807      	ldr	r7, [r0, #0]
 8018f24:	b2a4      	uxth	r4, r4
 8018f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f2a:	b2b6      	uxth	r6, r6
 8018f2c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8018f30:	9401      	str	r4, [sp, #4]
 8018f32:	9600      	str	r6, [sp, #0]
 8018f34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018f38:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8018f3c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018f40:	9102      	str	r1, [sp, #8]
 8018f42:	4629      	mov	r1, r5
 8018f44:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8018f46:	47a0      	blx	r4
 8018f48:	b00b      	add	sp, #44	@ 0x2c
 8018f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f4e:	f010 0f01 	tst.w	r0, #1
 8018f52:	e7e3      	b.n	8018f1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8018f54:	6803      	ldr	r3, [r0, #0]
 8018f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f58:	4798      	blx	r3
 8018f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8019008 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8018f5c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8018f60:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8018f64:	8813      	ldrh	r3, [r2, #0]
 8018f66:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8018f6a:	fb03 f404 	mul.w	r4, r3, r4
 8018f6e:	fb03 c101 	mla	r1, r3, r1, ip
 8018f72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018f76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018f7a:	4408      	add	r0, r1
 8018f7c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8018f80:	4404      	add	r4, r0
 8018f82:	d02e      	beq.n	8018fe2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8018f84:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8018f88:	1b9b      	subs	r3, r3, r6
 8018f8a:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8018f8e:	1b96      	subs	r6, r2, r6
 8018f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018f98:	42a0      	cmp	r0, r4
 8018f9a:	d22d      	bcs.n	8018ff8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018f9c:	eb00 0e01 	add.w	lr, r0, r1
 8018fa0:	4570      	cmp	r0, lr
 8018fa2:	d210      	bcs.n	8018fc6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8018fa4:	f890 9000 	ldrb.w	r9, [r0]
 8018fa8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8018fac:	fb19 f90c 	smulbb	r9, r9, ip
 8018fb0:	fb02 9208 	mla	r2, r2, r8, r9
 8018fb4:	b292      	uxth	r2, r2
 8018fb6:	f102 0901 	add.w	r9, r2, #1
 8018fba:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8018fbe:	1212      	asrs	r2, r2, #8
 8018fc0:	f800 2b01 	strb.w	r2, [r0], #1
 8018fc4:	e7ec      	b.n	8018fa0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8018fc6:	4418      	add	r0, r3
 8018fc8:	4435      	add	r5, r6
 8018fca:	e7e5      	b.n	8018f98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8018fcc:	8813      	ldrh	r3, [r2, #0]
 8018fce:	1b9b      	subs	r3, r3, r6
 8018fd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fd4:	4418      	add	r0, r3
 8018fd6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018fda:	1b9b      	subs	r3, r3, r6
 8018fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fe0:	441d      	add	r5, r3
 8018fe2:	42a0      	cmp	r0, r4
 8018fe4:	d208      	bcs.n	8018ff8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018fe6:	eb00 0c01 	add.w	ip, r0, r1
 8018fea:	4560      	cmp	r0, ip
 8018fec:	d2ee      	bcs.n	8018fcc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8018fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018ff2:	f800 3b01 	strb.w	r3, [r0], #1
 8018ff6:	e7f8      	b.n	8018fea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8018ff8:	6838      	ldr	r0, [r7, #0]
 8018ffa:	6803      	ldr	r3, [r0, #0]
 8018ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ffe:	4798      	blx	r3
 8019000:	e7a2      	b.n	8018f48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019002:	bf00      	nop
 8019004:	240284a4 	.word	0x240284a4
 8019008:	2402849e 	.word	0x2402849e

0801900c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801900c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801900e:	2300      	movs	r3, #0
 8019010:	b085      	sub	sp, #20
 8019012:	9300      	str	r3, [sp, #0]
 8019014:	4b41      	ldr	r3, [pc, #260]	@ (801911c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019016:	781b      	ldrb	r3, [r3, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d136      	bne.n	801908a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801901c:	4a40      	ldr	r2, [pc, #256]	@ (8019120 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801901e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019022:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d131      	bne.n	801908e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801902a:	4b3e      	ldr	r3, [pc, #248]	@ (8019124 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801902c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019030:	ac02      	add	r4, sp, #8
 8019032:	6808      	ldr	r0, [r1, #0]
 8019034:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019038:	ab02      	add	r3, sp, #8
 801903a:	6849      	ldr	r1, [r1, #4]
 801903c:	4d3a      	ldr	r5, [pc, #232]	@ (8019128 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801903e:	c303      	stmia	r3!, {r0, r1}
 8019040:	4669      	mov	r1, sp
 8019042:	4620      	mov	r0, r4
 8019044:	f7fa fad6 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019048:	4668      	mov	r0, sp
 801904a:	f7fa fa8f 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801904e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019052:	f8bd 2000 	ldrh.w	r2, [sp]
 8019056:	462e      	mov	r6, r5
 8019058:	6828      	ldr	r0, [r5, #0]
 801905a:	4413      	add	r3, r2
 801905c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019060:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019064:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019068:	4413      	add	r3, r2
 801906a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801906e:	6803      	ldr	r3, [r0, #0]
 8019070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019072:	4798      	blx	r3
 8019074:	f010 0f01 	tst.w	r0, #1
 8019078:	d00b      	beq.n	8019092 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801907a:	6828      	ldr	r0, [r5, #0]
 801907c:	6803      	ldr	r3, [r0, #0]
 801907e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019084:	4798      	blx	r3
 8019086:	b005      	add	sp, #20
 8019088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801908a:	4a26      	ldr	r2, [pc, #152]	@ (8019124 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801908c:	e7c7      	b.n	801901e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801908e:	4b24      	ldr	r3, [pc, #144]	@ (8019120 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019090:	e7cc      	b.n	801902c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019092:	6830      	ldr	r0, [r6, #0]
 8019094:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019098:	6803      	ldr	r3, [r0, #0]
 801909a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801909e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190a0:	4798      	blx	r3
 80190a2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80190a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80190aa:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80190ae:	fb14 3402 	smlabb	r4, r4, r2, r3
 80190b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80190b6:	4404      	add	r4, r0
 80190b8:	6830      	ldr	r0, [r6, #0]
 80190ba:	6803      	ldr	r3, [r0, #0]
 80190bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190be:	4798      	blx	r3
 80190c0:	4917      	ldr	r1, [pc, #92]	@ (8019120 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80190c2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80190c6:	880b      	ldrh	r3, [r1, #0]
 80190c8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80190cc:	fb03 c202 	mla	r2, r3, r2, ip
 80190d0:	437b      	muls	r3, r7
 80190d2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80190d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80190da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190de:	4410      	add	r0, r2
 80190e0:	18c2      	adds	r2, r0, r3
 80190e2:	4290      	cmp	r0, r2
 80190e4:	d214      	bcs.n	8019110 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80190e6:	eb00 0c07 	add.w	ip, r0, r7
 80190ea:	4560      	cmp	r0, ip
 80190ec:	d204      	bcs.n	80190f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80190ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80190f2:	f800 3b01 	strb.w	r3, [r0], #1
 80190f6:	e7f8      	b.n	80190ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80190f8:	880b      	ldrh	r3, [r1, #0]
 80190fa:	1b5b      	subs	r3, r3, r5
 80190fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019100:	4418      	add	r0, r3
 8019102:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019106:	1b5b      	subs	r3, r3, r5
 8019108:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801910c:	441c      	add	r4, r3
 801910e:	e7e8      	b.n	80190e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019110:	6830      	ldr	r0, [r6, #0]
 8019112:	6803      	ldr	r3, [r0, #0]
 8019114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019116:	4798      	blx	r3
 8019118:	e7b5      	b.n	8019086 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801911a:	bf00      	nop
 801911c:	2402849c 	.word	0x2402849c
 8019120:	2402849e 	.word	0x2402849e
 8019124:	240284a0 	.word	0x240284a0
 8019128:	240284a4 	.word	0x240284a4

0801912c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019130:	b08f      	sub	sp, #60	@ 0x3c
 8019132:	461c      	mov	r4, r3
 8019134:	9203      	str	r2, [sp, #12]
 8019136:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801913a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801913c:	6820      	ldr	r0, [r4, #0]
 801913e:	9100      	str	r1, [sp, #0]
 8019140:	9204      	str	r2, [sp, #16]
 8019142:	aa0a      	add	r2, sp, #40	@ 0x28
 8019144:	6861      	ldr	r1, [r4, #4]
 8019146:	c203      	stmia	r2!, {r0, r1}
 8019148:	6818      	ldr	r0, [r3, #0]
 801914a:	aa0c      	add	r2, sp, #48	@ 0x30
 801914c:	6859      	ldr	r1, [r3, #4]
 801914e:	c203      	stmia	r2!, {r0, r1}
 8019150:	a80a      	add	r0, sp, #40	@ 0x28
 8019152:	f7fa fa0b 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019156:	4621      	mov	r1, r4
 8019158:	a80c      	add	r0, sp, #48	@ 0x30
 801915a:	f7fa fa4b 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801915e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8019162:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019166:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801916a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801916e:	bfdb      	ittet	le
 8019170:	b2b3      	uxthle	r3, r6
 8019172:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019176:	2301      	movgt	r3, #1
 8019178:	fb92 f3f3 	sdivle	r3, r2, r3
 801917c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019180:	441d      	add	r5, r3
 8019182:	fb92 f1f3 	sdiv	r1, r2, r3
 8019186:	fa1f fc81 	uxth.w	ip, r1
 801918a:	3d01      	subs	r5, #1
 801918c:	fb0c 2413 	mls	r4, ip, r3, r2
 8019190:	4661      	mov	r1, ip
 8019192:	fb14 f406 	smulbb	r4, r4, r6
 8019196:	4404      	add	r4, r0
 8019198:	fb95 f5f3 	sdiv	r5, r5, r3
 801919c:	b2a4      	uxth	r4, r4
 801919e:	b131      	cbz	r1, 80191ae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80191a0:	9b03      	ldr	r3, [sp, #12]
 80191a2:	9900      	ldr	r1, [sp, #0]
 80191a4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80191a8:	ba1b      	rev	r3, r3
 80191aa:	4419      	add	r1, r3
 80191ac:	9100      	str	r1, [sp, #0]
 80191ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80191b2:	b2ad      	uxth	r5, r5
 80191b4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80191b8:	4418      	add	r0, r3
 80191ba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80191be:	00ad      	lsls	r5, r5, #2
 80191c0:	441a      	add	r2, r3
 80191c2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80191c6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80191ca:	9301      	str	r3, [sp, #4]
 80191cc:	4b79      	ldr	r3, [pc, #484]	@ (80193b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80191ce:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80191d2:	6818      	ldr	r0, [r3, #0]
 80191d4:	6803      	ldr	r3, [r0, #0]
 80191d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191d8:	4798      	blx	r3
 80191da:	4a77      	ldr	r2, [pc, #476]	@ (80193b8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80191dc:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80191e0:	2c00      	cmp	r4, #0
 80191e2:	8813      	ldrh	r3, [r2, #0]
 80191e4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80191e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80191ea:	fb03 c101 	mla	r1, r3, r1, ip
 80191ee:	fb06 f303 	mul.w	r3, r6, r3
 80191f2:	bf18      	it	ne
 80191f4:	2600      	movne	r6, #0
 80191f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80191fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191fe:	4408      	add	r0, r1
 8019200:	4403      	add	r3, r0
 8019202:	9306      	str	r3, [sp, #24]
 8019204:	f105 0304 	add.w	r3, r5, #4
 8019208:	9305      	str	r3, [sp, #20]
 801920a:	9b01      	ldr	r3, [sp, #4]
 801920c:	bf08      	it	eq
 801920e:	461e      	moveq	r6, r3
 8019210:	2300      	movs	r3, #0
 8019212:	b2b6      	uxth	r6, r6
 8019214:	9302      	str	r3, [sp, #8]
 8019216:	9a06      	ldr	r2, [sp, #24]
 8019218:	4290      	cmp	r0, r2
 801921a:	f080 80c2 	bcs.w	80193a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801921e:	b963      	cbnz	r3, 801923a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019220:	9b00      	ldr	r3, [sp, #0]
 8019222:	781a      	ldrb	r2, [r3, #0]
 8019224:	0993      	lsrs	r3, r2, #6
 8019226:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801922a:	9202      	str	r2, [sp, #8]
 801922c:	1e5a      	subs	r2, r3, #1
 801922e:	2a02      	cmp	r2, #2
 8019230:	d815      	bhi.n	801925e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019232:	9a00      	ldr	r2, [sp, #0]
 8019234:	b29b      	uxth	r3, r3
 8019236:	3201      	adds	r2, #1
 8019238:	9200      	str	r2, [sp, #0]
 801923a:	b1b4      	cbz	r4, 801926a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801923c:	429c      	cmp	r4, r3
 801923e:	bf91      	iteee	ls
 8019240:	1b1c      	subls	r4, r3, r4
 8019242:	1ae4      	subhi	r4, r4, r3
 8019244:	4635      	movhi	r5, r6
 8019246:	f04f 0e00 	movhi.w	lr, #0
 801924a:	bf9b      	ittet	ls
 801924c:	fa1f fe84 	uxthls.w	lr, r4
 8019250:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019254:	b2a4      	uxthhi	r4, r4
 8019256:	2400      	movls	r4, #0
 8019258:	4673      	mov	r3, lr
 801925a:	462e      	mov	r6, r5
 801925c:	e7db      	b.n	8019216 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801925e:	9a00      	ldr	r2, [sp, #0]
 8019260:	9b00      	ldr	r3, [sp, #0]
 8019262:	3202      	adds	r2, #2
 8019264:	785b      	ldrb	r3, [r3, #1]
 8019266:	9200      	str	r2, [sp, #0]
 8019268:	e7e7      	b.n	801923a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801926a:	2204      	movs	r2, #4
 801926c:	9905      	ldr	r1, [sp, #20]
 801926e:	429e      	cmp	r6, r3
 8019270:	4615      	mov	r5, r2
 8019272:	9a02      	ldr	r2, [sp, #8]
 8019274:	bf94      	ite	ls
 8019276:	eba3 0e06 	subls.w	lr, r3, r6
 801927a:	46a6      	movhi	lr, r4
 801927c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019280:	9903      	ldr	r1, [sp, #12]
 8019282:	bf8c      	ite	hi
 8019284:	1af5      	subhi	r5, r6, r3
 8019286:	fa1f fe8e 	uxthls.w	lr, lr
 801928a:	f851 c002 	ldr.w	ip, [r1, r2]
 801928e:	bf9a      	itte	ls
 8019290:	4625      	movls	r5, r4
 8019292:	4632      	movls	r2, r6
 8019294:	b2ad      	uxthhi	r5, r5
 8019296:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801929a:	bf88      	it	hi
 801929c:	461a      	movhi	r2, r3
 801929e:	b179      	cbz	r1, 80192c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80192a0:	29ff      	cmp	r1, #255	@ 0xff
 80192a2:	fa5f f98c 	uxtb.w	r9, ip
 80192a6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80192aa:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80192ae:	d126      	bne.n	80192fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80192b0:	9f04      	ldr	r7, [sp, #16]
 80192b2:	2fff      	cmp	r7, #255	@ 0xff
 80192b4:	d123      	bne.n	80192fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80192b6:	4682      	mov	sl, r0
 80192b8:	4611      	mov	r1, r2
 80192ba:	f10a 0a03 	add.w	sl, sl, #3
 80192be:	b9a9      	cbnz	r1, 80192ec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80192c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192c4:	429e      	cmp	r6, r3
 80192c6:	4410      	add	r0, r2
 80192c8:	d8c6      	bhi.n	8019258 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80192ca:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80192ce:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80192d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192d4:	1b64      	subs	r4, r4, r5
 80192d6:	9a01      	ldr	r2, [sp, #4]
 80192d8:	881b      	ldrh	r3, [r3, #0]
 80192da:	b2a4      	uxth	r4, r4
 80192dc:	1a9b      	subs	r3, r3, r2
 80192de:	2c00      	cmp	r4, #0
 80192e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192e4:	bf18      	it	ne
 80192e6:	2500      	movne	r5, #0
 80192e8:	4418      	add	r0, r3
 80192ea:	e7b5      	b.n	8019258 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80192ec:	3901      	subs	r1, #1
 80192ee:	f80a 9c03 	strb.w	r9, [sl, #-3]
 80192f2:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80192f6:	f80a cc01 	strb.w	ip, [sl, #-1]
 80192fa:	b289      	uxth	r1, r1
 80192fc:	e7dd      	b.n	80192ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 80192fe:	9f04      	ldr	r7, [sp, #16]
 8019300:	fb07 fa01 	mul.w	sl, r7, r1
 8019304:	f10a 0101 	add.w	r1, sl, #1
 8019308:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801930c:	1209      	asrs	r1, r1, #8
 801930e:	ea6f 0a01 	mvn.w	sl, r1
 8019312:	b289      	uxth	r1, r1
 8019314:	fb19 f901 	smulbb	r9, r9, r1
 8019318:	fa5f fa8a 	uxtb.w	sl, sl
 801931c:	fb18 f801 	smulbb	r8, r8, r1
 8019320:	fb1c f101 	smulbb	r1, ip, r1
 8019324:	fa1f f789 	uxth.w	r7, r9
 8019328:	4684      	mov	ip, r0
 801932a:	4691      	mov	r9, r2
 801932c:	9707      	str	r7, [sp, #28]
 801932e:	b289      	uxth	r1, r1
 8019330:	fa1f f788 	uxth.w	r7, r8
 8019334:	9708      	str	r7, [sp, #32]
 8019336:	f10c 0c03 	add.w	ip, ip, #3
 801933a:	f1b9 0f00 	cmp.w	r9, #0
 801933e:	d0bf      	beq.n	80192c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019340:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019344:	f109 39ff 	add.w	r9, r9, #4294967295
 8019348:	9f07      	ldr	r7, [sp, #28]
 801934a:	fa1f f989 	uxth.w	r9, r9
 801934e:	fb08 780a 	mla	r8, r8, sl, r7
 8019352:	9f08      	ldr	r7, [sp, #32]
 8019354:	fa1f f888 	uxth.w	r8, r8
 8019358:	f108 0b01 	add.w	fp, r8, #1
 801935c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019360:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019364:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019368:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801936c:	fb08 780a 	mla	r8, r8, sl, r7
 8019370:	fa1f f888 	uxth.w	r8, r8
 8019374:	f108 0b01 	add.w	fp, r8, #1
 8019378:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801937c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019380:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8019384:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8019388:	fb08 180a 	mla	r8, r8, sl, r1
 801938c:	fa1f f888 	uxth.w	r8, r8
 8019390:	f108 0b01 	add.w	fp, r8, #1
 8019394:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019398:	ea4f 2828 	mov.w	r8, r8, asr #8
 801939c:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80193a0:	e7c9      	b.n	8019336 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80193a2:	4b04      	ldr	r3, [pc, #16]	@ (80193b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80193a4:	6818      	ldr	r0, [r3, #0]
 80193a6:	6803      	ldr	r3, [r0, #0]
 80193a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193aa:	4798      	blx	r3
 80193ac:	b00f      	add	sp, #60	@ 0x3c
 80193ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b2:	bf00      	nop
 80193b4:	240284a4 	.word	0x240284a4
 80193b8:	2402849e 	.word	0x2402849e

080193bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80193bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c0:	b089      	sub	sp, #36	@ 0x24
 80193c2:	4607      	mov	r7, r0
 80193c4:	4689      	mov	r9, r1
 80193c6:	4692      	mov	sl, r2
 80193c8:	ac08      	add	r4, sp, #32
 80193ca:	461e      	mov	r6, r3
 80193cc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80193d0:	4620      	mov	r0, r4
 80193d2:	f7fd ff77 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	4605      	mov	r5, r0
 80193da:	4620      	mov	r0, r4
 80193dc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80193e0:	f7fd fe7e 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80193e4:	4683      	mov	fp, r0
 80193e6:	4620      	mov	r0, r4
 80193e8:	f7fd feae 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80193ec:	4653      	mov	r3, sl
 80193ee:	464a      	mov	r2, r9
 80193f0:	4639      	mov	r1, r7
 80193f2:	9500      	str	r5, [sp, #0]
 80193f4:	e9cd b001 	strd	fp, r0, [sp, #4]
 80193f8:	a806      	add	r0, sp, #24
 80193fa:	47c0      	blx	r8
 80193fc:	a906      	add	r1, sp, #24
 80193fe:	4630      	mov	r0, r6
 8019400:	f7fd fd52 	bl	8016ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019404:	4628      	mov	r0, r5
 8019406:	b009      	add	sp, #36	@ 0x24
 8019408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801940c <_ZN8touchgfx8LCD24bppD0Ev>:
 801940c:	b510      	push	{r4, lr}
 801940e:	4604      	mov	r4, r0
 8019410:	216c      	movs	r1, #108	@ 0x6c
 8019412:	f008 fc60 	bl	8021cd6 <_ZdlPvj>
 8019416:	4620      	mov	r0, r4
 8019418:	bd10      	pop	{r4, pc}

0801941a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801941a:	b510      	push	{r4, lr}
 801941c:	4604      	mov	r4, r0
 801941e:	2104      	movs	r1, #4
 8019420:	f008 fc59 	bl	8021cd6 <_ZdlPvj>
 8019424:	4620      	mov	r0, r4
 8019426:	bd10      	pop	{r4, pc}

08019428 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019428:	b510      	push	{r4, lr}
 801942a:	4604      	mov	r4, r0
 801942c:	2104      	movs	r1, #4
 801942e:	f008 fc52 	bl	8021cd6 <_ZdlPvj>
 8019432:	4620      	mov	r0, r4
 8019434:	bd10      	pop	{r4, pc}

08019436 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019436:	b510      	push	{r4, lr}
 8019438:	4604      	mov	r4, r0
 801943a:	f640 0144 	movw	r1, #2116	@ 0x844
 801943e:	f008 fc4a 	bl	8021cd6 <_ZdlPvj>
 8019442:	4620      	mov	r0, r4
 8019444:	bd10      	pop	{r4, pc}

08019446 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8019446:	b510      	push	{r4, lr}
 8019448:	4604      	mov	r4, r0
 801944a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801944e:	f008 fc42 	bl	8021cd6 <_ZdlPvj>
 8019452:	4620      	mov	r0, r4
 8019454:	bd10      	pop	{r4, pc}

08019456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019456:	b510      	push	{r4, lr}
 8019458:	4604      	mov	r4, r0
 801945a:	2104      	movs	r1, #4
 801945c:	f008 fc3b 	bl	8021cd6 <_ZdlPvj>
 8019460:	4620      	mov	r0, r4
 8019462:	bd10      	pop	{r4, pc}

08019464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019464:	b510      	push	{r4, lr}
 8019466:	4604      	mov	r4, r0
 8019468:	2104      	movs	r1, #4
 801946a:	f008 fc34 	bl	8021cd6 <_ZdlPvj>
 801946e:	4620      	mov	r0, r4
 8019470:	bd10      	pop	{r4, pc}

08019472 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019472:	b510      	push	{r4, lr}
 8019474:	4604      	mov	r4, r0
 8019476:	2104      	movs	r1, #4
 8019478:	f008 fc2d 	bl	8021cd6 <_ZdlPvj>
 801947c:	4620      	mov	r0, r4
 801947e:	bd10      	pop	{r4, pc}

08019480 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019480:	b510      	push	{r4, lr}
 8019482:	4604      	mov	r4, r0
 8019484:	2104      	movs	r1, #4
 8019486:	f008 fc26 	bl	8021cd6 <_ZdlPvj>
 801948a:	4620      	mov	r0, r4
 801948c:	bd10      	pop	{r4, pc}

0801948e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801948e:	b510      	push	{r4, lr}
 8019490:	4604      	mov	r4, r0
 8019492:	2104      	movs	r1, #4
 8019494:	f008 fc1f 	bl	8021cd6 <_ZdlPvj>
 8019498:	4620      	mov	r0, r4
 801949a:	bd10      	pop	{r4, pc}

0801949c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801949c:	b510      	push	{r4, lr}
 801949e:	4604      	mov	r4, r0
 80194a0:	2104      	movs	r1, #4
 80194a2:	f008 fc18 	bl	8021cd6 <_ZdlPvj>
 80194a6:	4620      	mov	r0, r4
 80194a8:	bd10      	pop	{r4, pc}

080194aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80194aa:	b510      	push	{r4, lr}
 80194ac:	4604      	mov	r4, r0
 80194ae:	2104      	movs	r1, #4
 80194b0:	f008 fc11 	bl	8021cd6 <_ZdlPvj>
 80194b4:	4620      	mov	r0, r4
 80194b6:	bd10      	pop	{r4, pc}

080194b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80194b8:	b510      	push	{r4, lr}
 80194ba:	4604      	mov	r4, r0
 80194bc:	2104      	movs	r1, #4
 80194be:	f008 fc0a 	bl	8021cd6 <_ZdlPvj>
 80194c2:	4620      	mov	r0, r4
 80194c4:	bd10      	pop	{r4, pc}

080194c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80194c6:	b510      	push	{r4, lr}
 80194c8:	4604      	mov	r4, r0
 80194ca:	2104      	movs	r1, #4
 80194cc:	f008 fc03 	bl	8021cd6 <_ZdlPvj>
 80194d0:	4620      	mov	r0, r4
 80194d2:	bd10      	pop	{r4, pc}

080194d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80194d4:	b510      	push	{r4, lr}
 80194d6:	4604      	mov	r4, r0
 80194d8:	2104      	movs	r1, #4
 80194da:	f008 fbfc 	bl	8021cd6 <_ZdlPvj>
 80194de:	4620      	mov	r0, r4
 80194e0:	bd10      	pop	{r4, pc}

080194e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80194e2:	b510      	push	{r4, lr}
 80194e4:	4604      	mov	r4, r0
 80194e6:	2104      	movs	r1, #4
 80194e8:	f008 fbf5 	bl	8021cd6 <_ZdlPvj>
 80194ec:	4620      	mov	r0, r4
 80194ee:	bd10      	pop	{r4, pc}

080194f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80194f0:	b510      	push	{r4, lr}
 80194f2:	4604      	mov	r4, r0
 80194f4:	2104      	movs	r1, #4
 80194f6:	f008 fbee 	bl	8021cd6 <_ZdlPvj>
 80194fa:	4620      	mov	r0, r4
 80194fc:	bd10      	pop	{r4, pc}

080194fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80194fe:	b510      	push	{r4, lr}
 8019500:	4604      	mov	r4, r0
 8019502:	2104      	movs	r1, #4
 8019504:	f008 fbe7 	bl	8021cd6 <_ZdlPvj>
 8019508:	4620      	mov	r0, r4
 801950a:	bd10      	pop	{r4, pc}

0801950c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801950c:	b510      	push	{r4, lr}
 801950e:	4604      	mov	r4, r0
 8019510:	2104      	movs	r1, #4
 8019512:	f008 fbe0 	bl	8021cd6 <_ZdlPvj>
 8019516:	4620      	mov	r0, r4
 8019518:	bd10      	pop	{r4, pc}

0801951a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801951a:	b510      	push	{r4, lr}
 801951c:	4604      	mov	r4, r0
 801951e:	2104      	movs	r1, #4
 8019520:	f008 fbd9 	bl	8021cd6 <_ZdlPvj>
 8019524:	4620      	mov	r0, r4
 8019526:	bd10      	pop	{r4, pc}

08019528 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019528:	b510      	push	{r4, lr}
 801952a:	4604      	mov	r4, r0
 801952c:	2104      	movs	r1, #4
 801952e:	f008 fbd2 	bl	8021cd6 <_ZdlPvj>
 8019532:	4620      	mov	r0, r4
 8019534:	bd10      	pop	{r4, pc}

08019536 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019536:	b510      	push	{r4, lr}
 8019538:	4604      	mov	r4, r0
 801953a:	2104      	movs	r1, #4
 801953c:	f008 fbcb 	bl	8021cd6 <_ZdlPvj>
 8019540:	4620      	mov	r0, r4
 8019542:	bd10      	pop	{r4, pc}

08019544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019544:	b510      	push	{r4, lr}
 8019546:	4604      	mov	r4, r0
 8019548:	2104      	movs	r1, #4
 801954a:	f008 fbc4 	bl	8021cd6 <_ZdlPvj>
 801954e:	4620      	mov	r0, r4
 8019550:	bd10      	pop	{r4, pc}

08019552 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019552:	b510      	push	{r4, lr}
 8019554:	4604      	mov	r4, r0
 8019556:	2104      	movs	r1, #4
 8019558:	f008 fbbd 	bl	8021cd6 <_ZdlPvj>
 801955c:	4620      	mov	r0, r4
 801955e:	bd10      	pop	{r4, pc}

08019560 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019560:	b510      	push	{r4, lr}
 8019562:	4604      	mov	r4, r0
 8019564:	2104      	movs	r1, #4
 8019566:	f008 fbb6 	bl	8021cd6 <_ZdlPvj>
 801956a:	4620      	mov	r0, r4
 801956c:	bd10      	pop	{r4, pc}
	...

08019570 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019574:	b08f      	sub	sp, #60	@ 0x3c
 8019576:	461c      	mov	r4, r3
 8019578:	460e      	mov	r6, r1
 801957a:	9206      	str	r2, [sp, #24]
 801957c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019580:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019582:	9202      	str	r2, [sp, #8]
 8019584:	2a00      	cmp	r2, #0
 8019586:	f000 8128 	beq.w	80197da <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801958a:	6820      	ldr	r0, [r4, #0]
 801958c:	aa0a      	add	r2, sp, #40	@ 0x28
 801958e:	6861      	ldr	r1, [r4, #4]
 8019590:	c203      	stmia	r2!, {r0, r1}
 8019592:	6818      	ldr	r0, [r3, #0]
 8019594:	aa0c      	add	r2, sp, #48	@ 0x30
 8019596:	6859      	ldr	r1, [r3, #4]
 8019598:	c203      	stmia	r2!, {r0, r1}
 801959a:	a80a      	add	r0, sp, #40	@ 0x28
 801959c:	f7f9 ffe6 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80195a0:	4621      	mov	r1, r4
 80195a2:	a80c      	add	r0, sp, #48	@ 0x30
 80195a4:	f7fa f826 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80195a8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80195ac:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80195b0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80195b4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80195b8:	bfdb      	ittet	le
 80195ba:	b2bb      	uxthle	r3, r7
 80195bc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80195c0:	2301      	movgt	r3, #1
 80195c2:	fb92 f3f3 	sdivle	r3, r2, r3
 80195c6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80195ca:	441d      	add	r5, r3
 80195cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80195d0:	fa1f fc81 	uxth.w	ip, r1
 80195d4:	3d01      	subs	r5, #1
 80195d6:	fb0c 2413 	mls	r4, ip, r3, r2
 80195da:	4661      	mov	r1, ip
 80195dc:	fb14 f407 	smulbb	r4, r4, r7
 80195e0:	4404      	add	r4, r0
 80195e2:	fb95 f5f3 	sdiv	r5, r5, r3
 80195e6:	b2a4      	uxth	r4, r4
 80195e8:	b121      	cbz	r1, 80195f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80195ea:	9b06      	ldr	r3, [sp, #24]
 80195ec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80195f0:	ba1b      	rev	r3, r3
 80195f2:	441e      	add	r6, r3
 80195f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80195f8:	b2ad      	uxth	r5, r5
 80195fa:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80195fe:	4418      	add	r0, r3
 8019600:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019604:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8019608:	00ad      	lsls	r5, r5, #2
 801960a:	441a      	add	r2, r3
 801960c:	4b74      	ldr	r3, [pc, #464]	@ (80197e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801960e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019612:	6818      	ldr	r0, [r3, #0]
 8019614:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019618:	6803      	ldr	r3, [r0, #0]
 801961a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801961c:	4798      	blx	r3
 801961e:	4a71      	ldr	r2, [pc, #452]	@ (80197e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8019620:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019624:	2c00      	cmp	r4, #0
 8019626:	8813      	ldrh	r3, [r2, #0]
 8019628:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801962c:	9209      	str	r2, [sp, #36]	@ 0x24
 801962e:	fb03 c101 	mla	r1, r3, r1, ip
 8019632:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019636:	fb03 f307 	mul.w	r3, r3, r7
 801963a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801963e:	9204      	str	r2, [sp, #16]
 8019640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019644:	9a02      	ldr	r2, [sp, #8]
 8019646:	4408      	add	r0, r1
 8019648:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801964c:	4403      	add	r3, r0
 801964e:	b292      	uxth	r2, r2
 8019650:	9307      	str	r3, [sp, #28]
 8019652:	f105 0304 	add.w	r3, r5, #4
 8019656:	bf0c      	ite	eq
 8019658:	4645      	moveq	r5, r8
 801965a:	2500      	movne	r5, #0
 801965c:	9308      	str	r3, [sp, #32]
 801965e:	2300      	movs	r3, #0
 8019660:	b2ad      	uxth	r5, r5
 8019662:	9205      	str	r2, [sp, #20]
 8019664:	9303      	str	r3, [sp, #12]
 8019666:	9a07      	ldr	r2, [sp, #28]
 8019668:	4282      	cmp	r2, r0
 801966a:	f240 80b1 	bls.w	80197d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801966e:	b95b      	cbnz	r3, 8019688 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8019670:	7832      	ldrb	r2, [r6, #0]
 8019672:	0993      	lsrs	r3, r2, #6
 8019674:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019678:	9203      	str	r2, [sp, #12]
 801967a:	1e5a      	subs	r2, r3, #1
 801967c:	2a02      	cmp	r2, #2
 801967e:	bf8d      	iteet	hi
 8019680:	7873      	ldrbhi	r3, [r6, #1]
 8019682:	3601      	addls	r6, #1
 8019684:	b29b      	uxthls	r3, r3
 8019686:	3602      	addhi	r6, #2
 8019688:	b184      	cbz	r4, 80196ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801968a:	429c      	cmp	r4, r3
 801968c:	bf91      	iteee	ls
 801968e:	1b1c      	subls	r4, r3, r4
 8019690:	1ae4      	subhi	r4, r4, r3
 8019692:	4629      	movhi	r1, r5
 8019694:	f04f 0e00 	movhi.w	lr, #0
 8019698:	bf9b      	ittet	ls
 801969a:	fa1f fe84 	uxthls.w	lr, r4
 801969e:	2400      	movls	r4, #0
 80196a0:	b2a4      	uxthhi	r4, r4
 80196a2:	fa1f f188 	uxthls.w	r1, r8
 80196a6:	4673      	mov	r3, lr
 80196a8:	460d      	mov	r5, r1
 80196aa:	e7dc      	b.n	8019666 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80196ac:	2203      	movs	r2, #3
 80196ae:	9908      	ldr	r1, [sp, #32]
 80196b0:	42ab      	cmp	r3, r5
 80196b2:	4617      	mov	r7, r2
 80196b4:	9a03      	ldr	r2, [sp, #12]
 80196b6:	bf24      	itt	cs
 80196b8:	eba3 0e05 	subcs.w	lr, r3, r5
 80196bc:	9501      	strcs	r5, [sp, #4]
 80196be:	fb17 1702 	smlabb	r7, r7, r2, r1
 80196c2:	9a06      	ldr	r2, [sp, #24]
 80196c4:	bf34      	ite	cc
 80196c6:	1ae9      	subcc	r1, r5, r3
 80196c8:	fa1f fe8e 	uxthcs.w	lr, lr
 80196cc:	4417      	add	r7, r2
 80196ce:	9a02      	ldr	r2, [sp, #8]
 80196d0:	bf2f      	iteee	cs
 80196d2:	4621      	movcs	r1, r4
 80196d4:	b289      	uxthcc	r1, r1
 80196d6:	9301      	strcc	r3, [sp, #4]
 80196d8:	46a6      	movcc	lr, r4
 80196da:	2aff      	cmp	r2, #255	@ 0xff
 80196dc:	d11e      	bne.n	801971c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80196de:	4681      	mov	r9, r0
 80196e0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80196e4:	f109 0903 	add.w	r9, r9, #3
 80196e8:	f1bc 0f00 	cmp.w	ip, #0
 80196ec:	d15f      	bne.n	80197ae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80196ee:	9a01      	ldr	r2, [sp, #4]
 80196f0:	42ab      	cmp	r3, r5
 80196f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80196f6:	4410      	add	r0, r2
 80196f8:	d3d5      	bcc.n	80196a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80196fa:	fa1f f188 	uxth.w	r1, r8
 80196fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019704:	1a64      	subs	r4, r4, r1
 8019706:	881b      	ldrh	r3, [r3, #0]
 8019708:	b2a4      	uxth	r4, r4
 801970a:	eba3 0308 	sub.w	r3, r3, r8
 801970e:	2c00      	cmp	r4, #0
 8019710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019714:	bf18      	it	ne
 8019716:	2100      	movne	r1, #0
 8019718:	4418      	add	r0, r3
 801971a:	e7c4      	b.n	80196a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801971c:	4684      	mov	ip, r0
 801971e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019722:	f10c 0c03 	add.w	ip, ip, #3
 8019726:	f1ba 0f00 	cmp.w	sl, #0
 801972a:	d0e0      	beq.n	80196ee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801972c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8019730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019734:	9a05      	ldr	r2, [sp, #20]
 8019736:	f897 9000 	ldrb.w	r9, [r7]
 801973a:	fa1f fa8a 	uxth.w	sl, sl
 801973e:	fb1b fb02 	smulbb	fp, fp, r2
 8019742:	9a04      	ldr	r2, [sp, #16]
 8019744:	fb09 b902 	mla	r9, r9, r2, fp
 8019748:	9a05      	ldr	r2, [sp, #20]
 801974a:	fa1f f989 	uxth.w	r9, r9
 801974e:	f109 0b01 	add.w	fp, r9, #1
 8019752:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019756:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801975a:	fb1b fb02 	smulbb	fp, fp, r2
 801975e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019762:	9a04      	ldr	r2, [sp, #16]
 8019764:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8019768:	f897 9001 	ldrb.w	r9, [r7, #1]
 801976c:	fb09 b902 	mla	r9, r9, r2, fp
 8019770:	9a05      	ldr	r2, [sp, #20]
 8019772:	fa1f f989 	uxth.w	r9, r9
 8019776:	f109 0b01 	add.w	fp, r9, #1
 801977a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801977e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8019782:	fb1b fb02 	smulbb	fp, fp, r2
 8019786:	ea4f 2929 	mov.w	r9, r9, asr #8
 801978a:	9a04      	ldr	r2, [sp, #16]
 801978c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8019790:	f897 9002 	ldrb.w	r9, [r7, #2]
 8019794:	fb09 b902 	mla	r9, r9, r2, fp
 8019798:	fa1f f989 	uxth.w	r9, r9
 801979c:	f109 0b01 	add.w	fp, r9, #1
 80197a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80197a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80197a8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 80197ac:	e7b9      	b.n	8019722 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 80197ae:	f897 a000 	ldrb.w	sl, [r7]
 80197b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80197b6:	f809 ac03 	strb.w	sl, [r9, #-3]
 80197ba:	fa1f fc8c 	uxth.w	ip, ip
 80197be:	f897 a001 	ldrb.w	sl, [r7, #1]
 80197c2:	f809 ac02 	strb.w	sl, [r9, #-2]
 80197c6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80197ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80197ce:	e789      	b.n	80196e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 80197d0:	4b03      	ldr	r3, [pc, #12]	@ (80197e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80197d2:	6818      	ldr	r0, [r3, #0]
 80197d4:	6803      	ldr	r3, [r0, #0]
 80197d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197d8:	4798      	blx	r3
 80197da:	b00f      	add	sp, #60	@ 0x3c
 80197dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197e0:	240284a4 	.word	0x240284a4
 80197e4:	2402849e 	.word	0x2402849e

080197e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80197e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ec:	b09b      	sub	sp, #108	@ 0x6c
 80197ee:	461d      	mov	r5, r3
 80197f0:	4604      	mov	r4, r0
 80197f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80197f4:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 80197f8:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 80197fc:	9208      	str	r2, [sp, #32]
 80197fe:	2a00      	cmp	r2, #0
 8019800:	f000 81f3 	beq.w	8019bea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8019804:	6828      	ldr	r0, [r5, #0]
 8019806:	aa16      	add	r2, sp, #88	@ 0x58
 8019808:	6869      	ldr	r1, [r5, #4]
 801980a:	c203      	stmia	r2!, {r0, r1}
 801980c:	6818      	ldr	r0, [r3, #0]
 801980e:	aa18      	add	r2, sp, #96	@ 0x60
 8019810:	6859      	ldr	r1, [r3, #4]
 8019812:	c203      	stmia	r2!, {r0, r1}
 8019814:	a816      	add	r0, sp, #88	@ 0x58
 8019816:	f7f9 fea9 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801981a:	4629      	mov	r1, r5
 801981c:	a818      	add	r0, sp, #96	@ 0x60
 801981e:	f7f9 fee9 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019822:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8019826:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801982a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801982e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8019832:	bfdb      	ittet	le
 8019834:	b29a      	uxthle	r2, r3
 8019836:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801983a:	f04f 0a01 	movgt.w	sl, #1
 801983e:	fb91 faf2 	sdivle	sl, r1, r2
 8019842:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8019846:	4456      	add	r6, sl
 8019848:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801984c:	3e01      	subs	r6, #1
 801984e:	fb92 f0fa 	sdiv	r0, r2, sl
 8019852:	b280      	uxth	r0, r0
 8019854:	fb00 281a 	mls	r8, r0, sl, r2
 8019858:	900e      	str	r0, [sp, #56]	@ 0x38
 801985a:	fb18 f803 	smulbb	r8, r8, r3
 801985e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8019862:	4488      	add	r8, r1
 8019864:	4419      	add	r1, r3
 8019866:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801986a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801986e:	fa1f f888 	uxth.w	r8, r8
 8019872:	441a      	add	r2, r3
 8019874:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019878:	9303      	str	r3, [sp, #12]
 801987a:	4b9c      	ldr	r3, [pc, #624]	@ (8019aec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801987c:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8019880:	6818      	ldr	r0, [r3, #0]
 8019882:	6803      	ldr	r3, [r0, #0]
 8019884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019886:	4798      	blx	r3
 8019888:	4b99      	ldr	r3, [pc, #612]	@ (8019af0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801988a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801988e:	f1b8 0f00 	cmp.w	r8, #0
 8019892:	881a      	ldrh	r2, [r3, #0]
 8019894:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8019898:	fb02 f505 	mul.w	r5, r2, r5
 801989c:	fb02 7101 	mla	r1, r2, r1, r7
 80198a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80198a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198aa:	9b08      	ldr	r3, [sp, #32]
 80198ac:	fb96 f6fa 	sdiv	r6, r6, sl
 80198b0:	4408      	add	r0, r1
 80198b2:	f106 0601 	add.w	r6, r6, #1
 80198b6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80198ba:	f04f 0100 	mov.w	r1, #0
 80198be:	eb00 0205 	add.w	r2, r0, r5
 80198c2:	b2b6      	uxth	r6, r6
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80198c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80198ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80198ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80198d2:	4b88      	ldr	r3, [pc, #544]	@ (8019af4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 80198d4:	f106 0204 	add.w	r2, r6, #4
 80198d8:	eba3 0304 	sub.w	r3, r3, r4
 80198dc:	9205      	str	r2, [sp, #20]
 80198de:	9a03      	ldr	r2, [sp, #12]
 80198e0:	bf18      	it	ne
 80198e2:	2200      	movne	r2, #0
 80198e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80198e6:	b292      	uxth	r2, r2
 80198e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80198ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80198ec:	fa11 f383 	uxtah	r3, r1, r3
 80198f0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80198f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80198f6:	3304      	adds	r3, #4
 80198f8:	9306      	str	r3, [sp, #24]
 80198fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198fc:	4283      	cmp	r3, r0
 80198fe:	f240 816f 	bls.w	8019be0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8019902:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8019906:	f04f 0900 	mov.w	r9, #0
 801990a:	9d06      	ldr	r5, [sp, #24]
 801990c:	fbb8 f3f3 	udiv	r3, r8, r3
 8019910:	ebaa 0303 	sub.w	r3, sl, r3
 8019914:	782d      	ldrb	r5, [r5, #0]
 8019916:	b29b      	uxth	r3, r3
 8019918:	950f      	str	r5, [sp, #60]	@ 0x3c
 801991a:	3501      	adds	r5, #1
 801991c:	9312      	str	r3, [sp, #72]	@ 0x48
 801991e:	9b06      	ldr	r3, [sp, #24]
 8019920:	9504      	str	r5, [sp, #16]
 8019922:	7859      	ldrb	r1, [r3, #1]
 8019924:	789b      	ldrb	r3, [r3, #2]
 8019926:	021b      	lsls	r3, r3, #8
 8019928:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801992c:	9906      	ldr	r1, [sp, #24]
 801992e:	78c9      	ldrb	r1, [r1, #3]
 8019930:	430b      	orrs	r3, r1
 8019932:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019934:	4419      	add	r1, r3
 8019936:	1c4d      	adds	r5, r1, #1
 8019938:	7849      	ldrb	r1, [r1, #1]
 801993a:	9502      	str	r5, [sp, #8]
 801993c:	0209      	lsls	r1, r1, #8
 801993e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8019940:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8019944:	5ceb      	ldrb	r3, [r5, r3]
 8019946:	4319      	orrs	r1, r3
 8019948:	b28b      	uxth	r3, r1
 801994a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801994e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019950:	2300      	movs	r3, #0
 8019952:	9307      	str	r3, [sp, #28]
 8019954:	2301      	movs	r3, #1
 8019956:	e9cd 3300 	strd	r3, r3, [sp]
 801995a:	469c      	mov	ip, r3
 801995c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019960:	930c      	str	r3, [sp, #48]	@ 0x30
 8019962:	f1b8 0f00 	cmp.w	r8, #0
 8019966:	f000 8082 	beq.w	8019a6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801996a:	45c4      	cmp	ip, r8
 801996c:	d270      	bcs.n	8019a50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801996e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019970:	eba8 080c 	sub.w	r8, r8, ip
 8019974:	4611      	mov	r1, r2
 8019976:	4283      	cmp	r3, r0
 8019978:	fa1f f888 	uxth.w	r8, r8
 801997c:	d802      	bhi.n	8019984 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801997e:	e074      	b.n	8019a6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8019980:	2b00      	cmp	r3, #0
 8019982:	d15f      	bne.n	8019a44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8019984:	9b02      	ldr	r3, [sp, #8]
 8019986:	9a01      	ldr	r2, [sp, #4]
 8019988:	785b      	ldrb	r3, [r3, #1]
 801998a:	f1c2 0207 	rsb	r2, r2, #7
 801998e:	9d01      	ldr	r5, [sp, #4]
 8019990:	4093      	lsls	r3, r2
 8019992:	005b      	lsls	r3, r3, #1
 8019994:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019998:	9b02      	ldr	r3, [sp, #8]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	412b      	asrs	r3, r5
 801999e:	b2db      	uxtb	r3, r3
 80199a0:	4313      	orrs	r3, r2
 80199a2:	462a      	mov	r2, r5
 80199a4:	3201      	adds	r2, #1
 80199a6:	b29e      	uxth	r6, r3
 80199a8:	b2d2      	uxtb	r2, r2
 80199aa:	2a08      	cmp	r2, #8
 80199ac:	9201      	str	r2, [sp, #4]
 80199ae:	9a02      	ldr	r2, [sp, #8]
 80199b0:	bf09      	itett	eq
 80199b2:	3202      	addeq	r2, #2
 80199b4:	3201      	addne	r2, #1
 80199b6:	9202      	streq	r2, [sp, #8]
 80199b8:	2200      	moveq	r2, #0
 80199ba:	bf14      	ite	ne
 80199bc:	9202      	strne	r2, [sp, #8]
 80199be:	9201      	streq	r2, [sp, #4]
 80199c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80199c2:	42b2      	cmp	r2, r6
 80199c4:	d309      	bcc.n	80199da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 80199c6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80199ca:	2301      	movs	r3, #1
 80199cc:	9a04      	ldr	r2, [sp, #16]
 80199ce:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80199d2:	d30e      	bcc.n	80199f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 80199d4:	9300      	str	r3, [sp, #0]
 80199d6:	2500      	movs	r5, #0
 80199d8:	e035      	b.n	8019a46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 80199da:	9b04      	ldr	r3, [sp, #16]
 80199dc:	429e      	cmp	r6, r3
 80199de:	d318      	bcc.n	8019a12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80199e0:	9b00      	ldr	r3, [sp, #0]
 80199e2:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 80199e6:	18e3      	adds	r3, r4, r3
 80199e8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80199ec:	9b00      	ldr	r3, [sp, #0]
 80199ee:	3301      	adds	r3, #1
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	9a04      	ldr	r2, [sp, #16]
 80199f4:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 80199f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80199fc:	9f00      	ldr	r7, [sp, #0]
 80199fe:	7115      	strb	r5, [r2, #4]
 8019a00:	3701      	adds	r7, #1
 8019a02:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019a04:	7157      	strb	r7, [r2, #5]
 8019a06:	80d5      	strh	r5, [r2, #6]
 8019a08:	9a04      	ldr	r2, [sp, #16]
 8019a0a:	3201      	adds	r2, #1
 8019a0c:	b292      	uxth	r2, r2
 8019a0e:	9204      	str	r2, [sp, #16]
 8019a10:	e7e0      	b.n	80199d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8019a12:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019a16:	4632      	mov	r2, r6
 8019a18:	795b      	ldrb	r3, [r3, #5]
 8019a1a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8019a1e:	4425      	add	r5, r4
 8019a20:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8019a22:	eb07 0c05 	add.w	ip, r7, r5
 8019a26:	f1bc 0f00 	cmp.w	ip, #0
 8019a2a:	dd07      	ble.n	8019a3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8019a2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019a30:	f892 c004 	ldrb.w	ip, [r2, #4]
 8019a34:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8019a38:	88d2      	ldrh	r2, [r2, #6]
 8019a3a:	e7f1      	b.n	8019a20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8019a3c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	e7c3      	b.n	80199cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8019a44:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019a46:	460a      	mov	r2, r1
 8019a48:	960a      	str	r6, [sp, #40]	@ 0x28
 8019a4a:	46a9      	mov	r9, r5
 8019a4c:	469c      	mov	ip, r3
 8019a4e:	e788      	b.n	8019962 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8019a50:	ebac 0308 	sub.w	r3, ip, r8
 8019a54:	eb09 0508 	add.w	r5, r9, r8
 8019a58:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	b2ad      	uxth	r5, r5
 8019a60:	f04f 0800 	mov.w	r8, #0
 8019a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a66:	4282      	cmp	r2, r0
 8019a68:	d88a      	bhi.n	8019980 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8019a6a:	460a      	mov	r2, r1
 8019a6c:	e745      	b.n	80198fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8019a6e:	4594      	cmp	ip, r2
 8019a70:	9d08      	ldr	r5, [sp, #32]
 8019a72:	4686      	mov	lr, r0
 8019a74:	bf27      	ittee	cs
 8019a76:	ebac 0302 	subcs.w	r3, ip, r2
 8019a7a:	4616      	movcs	r6, r2
 8019a7c:	eba2 010c 	subcc.w	r1, r2, ip
 8019a80:	4666      	movcc	r6, ip
 8019a82:	bf27      	ittee	cs
 8019a84:	b29b      	uxthcs	r3, r3
 8019a86:	4641      	movcs	r1, r8
 8019a88:	b289      	uxthcc	r1, r1
 8019a8a:	4643      	movcc	r3, r8
 8019a8c:	2dff      	cmp	r5, #255	@ 0xff
 8019a8e:	eb09 0506 	add.w	r5, r9, r6
 8019a92:	b2ad      	uxth	r5, r5
 8019a94:	d130      	bne.n	8019af8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8019a96:	45a9      	cmp	r9, r5
 8019a98:	f10e 0e03 	add.w	lr, lr, #3
 8019a9c:	d17a      	bne.n	8019b94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8019a9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019aa2:	4594      	cmp	ip, r2
 8019aa4:	4430      	add	r0, r6
 8019aa6:	d3db      	bcc.n	8019a60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8019aa8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019aaa:	9903      	ldr	r1, [sp, #12]
 8019aac:	8812      	ldrh	r2, [r2, #0]
 8019aae:	1a52      	subs	r2, r2, r1
 8019ab0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019ab6:	4410      	add	r0, r2
 8019ab8:	9a07      	ldr	r2, [sp, #28]
 8019aba:	3201      	adds	r2, #1
 8019abc:	428a      	cmp	r2, r1
 8019abe:	9207      	str	r2, [sp, #28]
 8019ac0:	f040 8081 	bne.w	8019bc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8019ac4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8019ac8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8019acc:	9b03      	ldr	r3, [sp, #12]
 8019ace:	eba8 080c 	sub.w	r8, r8, ip
 8019ad2:	fa1f f888 	uxth.w	r8, r8
 8019ad6:	f1b8 0f00 	cmp.w	r8, #0
 8019ada:	bf08      	it	eq
 8019adc:	461a      	moveq	r2, r3
 8019ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ae0:	bf18      	it	ne
 8019ae2:	2200      	movne	r2, #0
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	b292      	uxth	r2, r2
 8019ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019aea:	e6fd      	b.n	80198e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8019aec:	240284a4 	.word	0x240284a4
 8019af0:	2402849e 	.word	0x2402849e
 8019af4:	fffff7fb 	.word	0xfffff7fb
 8019af8:	45a9      	cmp	r9, r5
 8019afa:	f10e 0e03 	add.w	lr, lr, #3
 8019afe:	d0ce      	beq.n	8019a9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8019b00:	f109 0701 	add.w	r7, r9, #1
 8019b04:	44a1      	add	r9, r4
 8019b06:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8019b0a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019b0e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019b10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019b14:	9f05      	ldr	r7, [sp, #20]
 8019b16:	eb07 0908 	add.w	r9, r7, r8
 8019b1a:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019b1e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019b20:	fb1b fb07 	smulbb	fp, fp, r7
 8019b24:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019b26:	fb08 b807 	mla	r8, r8, r7, fp
 8019b2a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019b2c:	fa1f f888 	uxth.w	r8, r8
 8019b30:	f108 0b01 	add.w	fp, r8, #1
 8019b34:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019b38:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8019b3c:	fb1b fb07 	smulbb	fp, fp, r7
 8019b40:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b44:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019b46:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019b4a:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019b4e:	fb08 b807 	mla	r8, r8, r7, fp
 8019b52:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019b54:	fa1f f888 	uxth.w	r8, r8
 8019b58:	f108 0b01 	add.w	fp, r8, #1
 8019b5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019b60:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b64:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019b68:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019b6c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8019b70:	fb19 f907 	smulbb	r9, r9, r7
 8019b74:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019b76:	fb08 9807 	mla	r8, r8, r7, r9
 8019b7a:	fa1f f888 	uxth.w	r8, r8
 8019b7e:	f108 0901 	add.w	r9, r8, #1
 8019b82:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8019b86:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8019b8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b8e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019b92:	e7b1      	b.n	8019af8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8019b94:	f109 0b01 	add.w	fp, r9, #1
 8019b98:	44a1      	add	r9, r4
 8019b9a:	9f05      	ldr	r7, [sp, #20]
 8019b9c:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019ba0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019ba4:	eb07 0908 	add.w	r9, r7, r8
 8019ba8:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019bac:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019bb0:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019bb4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019bb8:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019bbc:	fa1f f98b 	uxth.w	r9, fp
 8019bc0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019bc4:	e767      	b.n	8019a96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8019bc6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019bca:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8019bce:	eba8 0801 	sub.w	r8, r8, r1
 8019bd2:	fa1f f888 	uxth.w	r8, r8
 8019bd6:	f1b8 0f00 	cmp.w	r8, #0
 8019bda:	bf18      	it	ne
 8019bdc:	2100      	movne	r1, #0
 8019bde:	e741      	b.n	8019a64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8019be0:	4b03      	ldr	r3, [pc, #12]	@ (8019bf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8019be2:	6818      	ldr	r0, [r3, #0]
 8019be4:	6803      	ldr	r3, [r0, #0]
 8019be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019be8:	4798      	blx	r3
 8019bea:	b01b      	add	sp, #108	@ 0x6c
 8019bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf0:	240284a4 	.word	0x240284a4

08019bf4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf8:	b09d      	sub	sp, #116	@ 0x74
 8019bfa:	461d      	mov	r5, r3
 8019bfc:	4604      	mov	r4, r0
 8019bfe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019c00:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8019c04:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8019c08:	920c      	str	r2, [sp, #48]	@ 0x30
 8019c0a:	2a00      	cmp	r2, #0
 8019c0c:	f000 81de 	beq.w	8019fcc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8019c10:	6828      	ldr	r0, [r5, #0]
 8019c12:	aa18      	add	r2, sp, #96	@ 0x60
 8019c14:	6869      	ldr	r1, [r5, #4]
 8019c16:	c203      	stmia	r2!, {r0, r1}
 8019c18:	6818      	ldr	r0, [r3, #0]
 8019c1a:	aa1a      	add	r2, sp, #104	@ 0x68
 8019c1c:	6859      	ldr	r1, [r3, #4]
 8019c1e:	c203      	stmia	r2!, {r0, r1}
 8019c20:	a818      	add	r0, sp, #96	@ 0x60
 8019c22:	f7f9 fca3 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c26:	4629      	mov	r1, r5
 8019c28:	a81a      	add	r0, sp, #104	@ 0x68
 8019c2a:	f7f9 fce3 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c2e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019c32:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8019c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019c3a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8019c3e:	bfdb      	ittet	le
 8019c40:	b29a      	uxthle	r2, r3
 8019c42:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019c46:	2201      	movgt	r2, #1
 8019c48:	fb91 f2f2 	sdivle	r2, r1, r2
 8019c4c:	9201      	str	r2, [sp, #4]
 8019c4e:	9801      	ldr	r0, [sp, #4]
 8019c50:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8019c54:	9901      	ldr	r1, [sp, #4]
 8019c56:	fb92 f0f0 	sdiv	r0, r2, r0
 8019c5a:	b280      	uxth	r0, r0
 8019c5c:	440f      	add	r7, r1
 8019c5e:	900d      	str	r0, [sp, #52]	@ 0x34
 8019c60:	3f01      	subs	r7, #1
 8019c62:	9801      	ldr	r0, [sp, #4]
 8019c64:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019c66:	fb05 2510 	mls	r5, r5, r0, r2
 8019c6a:	fb97 f7f1 	sdiv	r7, r7, r1
 8019c6e:	fb15 f503 	smulbb	r5, r5, r3
 8019c72:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8019c76:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8019c7a:	3701      	adds	r7, #1
 8019c7c:	440d      	add	r5, r1
 8019c7e:	4419      	add	r1, r3
 8019c80:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8019c84:	b2bf      	uxth	r7, r7
 8019c86:	441a      	add	r2, r3
 8019c88:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019c8c:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8019c90:	00bf      	lsls	r7, r7, #2
 8019c92:	9304      	str	r3, [sp, #16]
 8019c94:	b2ad      	uxth	r5, r5
 8019c96:	4bb0      	ldr	r3, [pc, #704]	@ (8019f58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8019c98:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8019c9c:	6818      	ldr	r0, [r3, #0]
 8019c9e:	6803      	ldr	r3, [r0, #0]
 8019ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ca2:	4798      	blx	r3
 8019ca4:	4bad      	ldr	r3, [pc, #692]	@ (8019f5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8019ca6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8019caa:	2d00      	cmp	r5, #0
 8019cac:	881a      	ldrh	r2, [r3, #0]
 8019cae:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8019cb2:	fb02 f606 	mul.w	r6, r2, r6
 8019cb6:	fb02 c101 	mla	r1, r2, r1, ip
 8019cba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019cbe:	9316      	str	r3, [sp, #88]	@ 0x58
 8019cc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019cc4:	4ba6      	ldr	r3, [pc, #664]	@ (8019f60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8019cc6:	eb00 0801 	add.w	r8, r0, r1
 8019cca:	bf18      	it	ne
 8019ccc:	2100      	movne	r1, #0
 8019cce:	eba3 0304 	sub.w	r3, r3, r4
 8019cd2:	eb08 0206 	add.w	r2, r8, r6
 8019cd6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019cd8:	9208      	str	r2, [sp, #32]
 8019cda:	f107 0204 	add.w	r2, r7, #4
 8019cde:	9211      	str	r2, [sp, #68]	@ 0x44
 8019ce0:	9a04      	ldr	r2, [sp, #16]
 8019ce2:	bf08      	it	eq
 8019ce4:	4611      	moveq	r1, r2
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	b289      	uxth	r1, r1
 8019cea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019cf0:	fa12 f383 	uxtah	r3, r2, r3
 8019cf4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019cf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019cfa:	3304      	adds	r3, #4
 8019cfc:	9306      	str	r3, [sp, #24]
 8019cfe:	9b08      	ldr	r3, [sp, #32]
 8019d00:	4543      	cmp	r3, r8
 8019d02:	f240 815e 	bls.w	8019fc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8019d06:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8019d0a:	f04f 0b01 	mov.w	fp, #1
 8019d0e:	9a01      	ldr	r2, [sp, #4]
 8019d10:	9806      	ldr	r0, [sp, #24]
 8019d12:	465e      	mov	r6, fp
 8019d14:	f8cd b008 	str.w	fp, [sp, #8]
 8019d18:	7800      	ldrb	r0, [r0, #0]
 8019d1a:	fbb5 f3f3 	udiv	r3, r5, r3
 8019d1e:	1ad3      	subs	r3, r2, r3
 8019d20:	900e      	str	r0, [sp, #56]	@ 0x38
 8019d22:	3001      	adds	r0, #1
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	9005      	str	r0, [sp, #20]
 8019d28:	9312      	str	r3, [sp, #72]	@ 0x48
 8019d2a:	9b06      	ldr	r3, [sp, #24]
 8019d2c:	785a      	ldrb	r2, [r3, #1]
 8019d2e:	789b      	ldrb	r3, [r3, #2]
 8019d30:	021b      	lsls	r3, r3, #8
 8019d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019d36:	9a06      	ldr	r2, [sp, #24]
 8019d38:	78d2      	ldrb	r2, [r2, #3]
 8019d3a:	4313      	orrs	r3, r2
 8019d3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019d3e:	441a      	add	r2, r3
 8019d40:	1c50      	adds	r0, r2, #1
 8019d42:	7852      	ldrb	r2, [r2, #1]
 8019d44:	9003      	str	r0, [sp, #12]
 8019d46:	0212      	lsls	r2, r2, #8
 8019d48:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019d4a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019d4e:	5cc3      	ldrb	r3, [r0, r3]
 8019d50:	431a      	orrs	r2, r3
 8019d52:	b293      	uxth	r3, r2
 8019d54:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	9307      	str	r3, [sp, #28]
 8019d60:	2d00      	cmp	r5, #0
 8019d62:	d07c      	beq.n	8019e5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8019d64:	42ae      	cmp	r6, r5
 8019d66:	d26c      	bcs.n	8019e42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019d68:	9b08      	ldr	r3, [sp, #32]
 8019d6a:	1bad      	subs	r5, r5, r6
 8019d6c:	4608      	mov	r0, r1
 8019d6e:	4543      	cmp	r3, r8
 8019d70:	b2ad      	uxth	r5, r5
 8019d72:	d802      	bhi.n	8019d7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8019d74:	e071      	b.n	8019e5a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d15d      	bne.n	8019e36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8019d7a:	9b03      	ldr	r3, [sp, #12]
 8019d7c:	9a02      	ldr	r2, [sp, #8]
 8019d7e:	785b      	ldrb	r3, [r3, #1]
 8019d80:	f1c2 0207 	rsb	r2, r2, #7
 8019d84:	9902      	ldr	r1, [sp, #8]
 8019d86:	4093      	lsls	r3, r2
 8019d88:	005b      	lsls	r3, r3, #1
 8019d8a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019d8e:	9b03      	ldr	r3, [sp, #12]
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	410b      	asrs	r3, r1
 8019d94:	3101      	adds	r1, #1
 8019d96:	b2c9      	uxtb	r1, r1
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	2908      	cmp	r1, #8
 8019d9c:	9102      	str	r1, [sp, #8]
 8019d9e:	9903      	ldr	r1, [sp, #12]
 8019da0:	ea43 0302 	orr.w	r3, r3, r2
 8019da4:	bf0c      	ite	eq
 8019da6:	3102      	addeq	r1, #2
 8019da8:	3101      	addne	r1, #1
 8019daa:	b29a      	uxth	r2, r3
 8019dac:	bf05      	ittet	eq
 8019dae:	9103      	streq	r1, [sp, #12]
 8019db0:	2100      	moveq	r1, #0
 8019db2:	9103      	strne	r1, [sp, #12]
 8019db4:	9102      	streq	r1, [sp, #8]
 8019db6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019db8:	4291      	cmp	r1, r2
 8019dba:	d30a      	bcc.n	8019dd2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8019dbc:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	9905      	ldr	r1, [sp, #20]
 8019dc4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019dc8:	d30f      	bcc.n	8019dea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8019dca:	469b      	mov	fp, r3
 8019dcc:	f04f 0c00 	mov.w	ip, #0
 8019dd0:	e032      	b.n	8019e38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8019dd2:	9b05      	ldr	r3, [sp, #20]
 8019dd4:	429a      	cmp	r2, r3
 8019dd6:	d318      	bcc.n	8019e0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8019dd8:	eb04 030b 	add.w	r3, r4, fp
 8019ddc:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8019de0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019de4:	f10b 0301 	add.w	r3, fp, #1
 8019de8:	b29b      	uxth	r3, r3
 8019dea:	9905      	ldr	r1, [sp, #20]
 8019dec:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8019df0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019df4:	710e      	strb	r6, [r1, #4]
 8019df6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019df8:	80ce      	strh	r6, [r1, #6]
 8019dfa:	f10b 0601 	add.w	r6, fp, #1
 8019dfe:	714e      	strb	r6, [r1, #5]
 8019e00:	9905      	ldr	r1, [sp, #20]
 8019e02:	3101      	adds	r1, #1
 8019e04:	b289      	uxth	r1, r1
 8019e06:	9105      	str	r1, [sp, #20]
 8019e08:	e7df      	b.n	8019dca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8019e0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e0e:	4611      	mov	r1, r2
 8019e10:	795b      	ldrb	r3, [r3, #5]
 8019e12:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8019e16:	4426      	add	r6, r4
 8019e18:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8019e1a:	4437      	add	r7, r6
 8019e1c:	2f00      	cmp	r7, #0
 8019e1e:	dd06      	ble.n	8019e2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8019e20:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019e24:	790f      	ldrb	r7, [r1, #4]
 8019e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019e2a:	88c9      	ldrh	r1, [r1, #6]
 8019e2c:	e7f4      	b.n	8019e18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8019e2e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	e7c5      	b.n	8019dc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8019e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019e38:	920a      	str	r2, [sp, #40]	@ 0x28
 8019e3a:	4601      	mov	r1, r0
 8019e3c:	4662      	mov	r2, ip
 8019e3e:	461e      	mov	r6, r3
 8019e40:	e78e      	b.n	8019d60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8019e42:	1b73      	subs	r3, r6, r5
 8019e44:	eb02 0c05 	add.w	ip, r2, r5
 8019e48:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	fa1f fc8c 	uxth.w	ip, ip
 8019e52:	2500      	movs	r5, #0
 8019e54:	9a08      	ldr	r2, [sp, #32]
 8019e56:	4542      	cmp	r2, r8
 8019e58:	d88d      	bhi.n	8019d76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8019e5a:	4601      	mov	r1, r0
 8019e5c:	e74f      	b.n	8019cfe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8019e5e:	428e      	cmp	r6, r1
 8019e60:	bf2b      	itete	cs
 8019e62:	468e      	movcs	lr, r1
 8019e64:	46b6      	movcc	lr, r6
 8019e66:	1a73      	subcs	r3, r6, r1
 8019e68:	1b88      	subcc	r0, r1, r6
 8019e6a:	eb02 0c0e 	add.w	ip, r2, lr
 8019e6e:	bf2b      	itete	cs
 8019e70:	4628      	movcs	r0, r5
 8019e72:	462b      	movcc	r3, r5
 8019e74:	b29b      	uxthcs	r3, r3
 8019e76:	b280      	uxthcc	r0, r0
 8019e78:	f108 0503 	add.w	r5, r8, #3
 8019e7c:	fa1f fc8c 	uxth.w	ip, ip
 8019e80:	4562      	cmp	r2, ip
 8019e82:	d06f      	beq.n	8019f64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8019e84:	1c57      	adds	r7, r2, #1
 8019e86:	4422      	add	r2, r4
 8019e88:	b2bf      	uxth	r7, r7
 8019e8a:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8019e8e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019e90:	2704      	movs	r7, #4
 8019e92:	46b9      	mov	r9, r7
 8019e94:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8019e96:	fb19 7202 	smlabb	r2, r9, r2, r7
 8019e9a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019e9c:	58bf      	ldr	r7, [r7, r2]
 8019e9e:	0e3a      	lsrs	r2, r7, #24
 8019ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ea2:	d016      	beq.n	8019ed2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8019ea4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019ea8:	fa5f fa87 	uxtb.w	sl, r7
 8019eac:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019eb0:	fa5f f289 	uxtb.w	r2, r9
 8019eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8019eb6:	b2fa      	uxtb	r2, r7
 8019eb8:	9215      	str	r2, [sp, #84]	@ 0x54
 8019eba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ebc:	2aff      	cmp	r2, #255	@ 0xff
 8019ebe:	d10b      	bne.n	8019ed8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019ec0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019ec2:	2aff      	cmp	r2, #255	@ 0xff
 8019ec4:	d108      	bne.n	8019ed8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019ec6:	f805 ac03 	strb.w	sl, [r5, #-3]
 8019eca:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019ece:	f805 7c01 	strb.w	r7, [r5, #-1]
 8019ed2:	3503      	adds	r5, #3
 8019ed4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019ed6:	e7d3      	b.n	8019e80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8019ed8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8019eda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019edc:	437a      	muls	r2, r7
 8019ede:	1c57      	adds	r7, r2, #1
 8019ee0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8019ee4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8019ee8:	1212      	asrs	r2, r2, #8
 8019eea:	fa1f f982 	uxth.w	r9, r2
 8019eee:	43d2      	mvns	r2, r2
 8019ef0:	fb1a fa09 	smulbb	sl, sl, r9
 8019ef4:	b2d2      	uxtb	r2, r2
 8019ef6:	fb07 a702 	mla	r7, r7, r2, sl
 8019efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8019efc:	b2bf      	uxth	r7, r7
 8019efe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019f00:	f107 0a01 	add.w	sl, r7, #1
 8019f04:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019f08:	fb12 fa09 	smulbb	sl, r2, r9
 8019f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f0e:	123f      	asrs	r7, r7, #8
 8019f10:	f805 7c03 	strb.w	r7, [r5, #-3]
 8019f14:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8019f18:	fb07 aa02 	mla	sl, r7, r2, sl
 8019f1c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019f1e:	fb12 f909 	smulbb	r9, r2, r9
 8019f22:	fa1f fa8a 	uxth.w	sl, sl
 8019f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f28:	f10a 0701 	add.w	r7, sl, #1
 8019f2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019f30:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8019f34:	fb07 9902 	mla	r9, r7, r2, r9
 8019f38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019f3c:	fa1f f989 	uxth.w	r9, r9
 8019f40:	f805 ac02 	strb.w	sl, [r5, #-2]
 8019f44:	f109 0201 	add.w	r2, r9, #1
 8019f48:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019f4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019f50:	f805 9c01 	strb.w	r9, [r5, #-1]
 8019f54:	e7bd      	b.n	8019ed2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8019f56:	bf00      	nop
 8019f58:	240284a4 	.word	0x240284a4
 8019f5c:	2402849e 	.word	0x2402849e
 8019f60:	fffff7fb 	.word	0xfffff7fb
 8019f64:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019f68:	428e      	cmp	r6, r1
 8019f6a:	44f0      	add	r8, lr
 8019f6c:	f4ff af71 	bcc.w	8019e52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8019f70:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019f72:	9904      	ldr	r1, [sp, #16]
 8019f74:	8812      	ldrh	r2, [r2, #0]
 8019f76:	1a52      	subs	r2, r2, r1
 8019f78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f7e:	4490      	add	r8, r2
 8019f80:	9a07      	ldr	r2, [sp, #28]
 8019f82:	3201      	adds	r2, #1
 8019f84:	428a      	cmp	r2, r1
 8019f86:	9207      	str	r2, [sp, #28]
 8019f88:	d111      	bne.n	8019fae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8019f8a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8019f8e:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8019f92:	9b04      	ldr	r3, [sp, #16]
 8019f94:	eba5 050c 	sub.w	r5, r5, ip
 8019f98:	b2ad      	uxth	r5, r5
 8019f9a:	2d00      	cmp	r5, #0
 8019f9c:	bf08      	it	eq
 8019f9e:	4619      	moveq	r1, r3
 8019fa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019fa2:	bf18      	it	ne
 8019fa4:	2100      	movne	r1, #0
 8019fa6:	3301      	adds	r3, #1
 8019fa8:	b289      	uxth	r1, r1
 8019faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019fac:	e69e      	b.n	8019cec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8019fae:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019fb2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8019fb6:	1a2d      	subs	r5, r5, r0
 8019fb8:	b2ad      	uxth	r5, r5
 8019fba:	2d00      	cmp	r5, #0
 8019fbc:	bf18      	it	ne
 8019fbe:	2000      	movne	r0, #0
 8019fc0:	e748      	b.n	8019e54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8019fc2:	4b04      	ldr	r3, [pc, #16]	@ (8019fd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8019fc4:	6818      	ldr	r0, [r3, #0]
 8019fc6:	6803      	ldr	r3, [r0, #0]
 8019fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fca:	4798      	blx	r3
 8019fcc:	b01d      	add	sp, #116	@ 0x74
 8019fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd2:	bf00      	nop
 8019fd4:	240284a4 	.word	0x240284a4

08019fd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8019fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fdc:	b08f      	sub	sp, #60	@ 0x3c
 8019fde:	4616      	mov	r6, r2
 8019fe0:	4681      	mov	r9, r0
 8019fe2:	460d      	mov	r5, r1
 8019fe4:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8019fe8:	9205      	str	r2, [sp, #20]
 8019fea:	2a00      	cmp	r2, #0
 8019fec:	f000 82a8 	beq.w	801a540 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8019ff0:	6830      	ldr	r0, [r6, #0]
 8019ff2:	ac0a      	add	r4, sp, #40	@ 0x28
 8019ff4:	6871      	ldr	r1, [r6, #4]
 8019ff6:	c403      	stmia	r4!, {r0, r1}
 8019ff8:	6818      	ldr	r0, [r3, #0]
 8019ffa:	ac0c      	add	r4, sp, #48	@ 0x30
 8019ffc:	6859      	ldr	r1, [r3, #4]
 8019ffe:	c403      	stmia	r4!, {r0, r1}
 801a000:	a80a      	add	r0, sp, #40	@ 0x28
 801a002:	f7f9 fab3 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a006:	4631      	mov	r1, r6
 801a008:	a80c      	add	r0, sp, #48	@ 0x30
 801a00a:	f7f9 faf3 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a00e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a012:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801a016:	bfdb      	ittet	le
 801a018:	b293      	uxthle	r3, r2
 801a01a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a01e:	2301      	movgt	r3, #1
 801a020:	fb91 f3f3 	sdivle	r3, r1, r3
 801a024:	9300      	str	r3, [sp, #0]
 801a026:	f105 0308 	add.w	r3, r5, #8
 801a02a:	9900      	ldr	r1, [sp, #0]
 801a02c:	9306      	str	r3, [sp, #24]
 801a02e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801a032:	440b      	add	r3, r1
 801a034:	3b01      	subs	r3, #1
 801a036:	fb93 f3f1 	sdiv	r3, r3, r1
 801a03a:	3b01      	subs	r3, #1
 801a03c:	9906      	ldr	r1, [sp, #24]
 801a03e:	b29b      	uxth	r3, r3
 801a040:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a044:	9900      	ldr	r1, [sp, #0]
 801a046:	9307      	str	r3, [sp, #28]
 801a048:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a04c:	fb93 f0f1 	sdiv	r0, r3, r1
 801a050:	b284      	uxth	r4, r0
 801a052:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a056:	b280      	uxth	r0, r0
 801a058:	9402      	str	r4, [sp, #8]
 801a05a:	9d02      	ldr	r5, [sp, #8]
 801a05c:	9c00      	ldr	r4, [sp, #0]
 801a05e:	fb05 3514 	mls	r5, r5, r4, r3
 801a062:	fb15 f502 	smulbb	r5, r5, r2
 801a066:	440d      	add	r5, r1
 801a068:	b2ad      	uxth	r5, r5
 801a06a:	2800      	cmp	r0, #0
 801a06c:	d071      	beq.n	801a152 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801a06e:	1e42      	subs	r2, r0, #1
 801a070:	9806      	ldr	r0, [sp, #24]
 801a072:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801a076:	9a07      	ldr	r2, [sp, #28]
 801a078:	fa98 f888 	rev.w	r8, r8
 801a07c:	4490      	add	r8, r2
 801a07e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801a082:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801a086:	4411      	add	r1, r2
 801a088:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801a08c:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801a3d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801a090:	4413      	add	r3, r2
 801a092:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801a096:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a09a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a09e:	9301      	str	r3, [sp, #4]
 801a0a0:	4bcb      	ldr	r3, [pc, #812]	@ (801a3d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801a0a2:	6818      	ldr	r0, [r3, #0]
 801a0a4:	6803      	ldr	r3, [r0, #0]
 801a0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0a8:	4798      	blx	r3
 801a0aa:	4bca      	ldr	r3, [pc, #808]	@ (801a3d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801a0ac:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a0b0:	881b      	ldrh	r3, [r3, #0]
 801a0b2:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801a0b6:	fb03 2707 	mla	r7, r3, r7, r2
 801a0ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a0be:	4363      	muls	r3, r4
 801a0c0:	2400      	movs	r4, #0
 801a0c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a0c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0ca:	4621      	mov	r1, r4
 801a0cc:	4407      	add	r7, r0
 801a0ce:	18fb      	adds	r3, r7, r3
 801a0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0d2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a0d6:	fb95 f3f3 	sdiv	r3, r5, r3
 801a0da:	9304      	str	r3, [sp, #16]
 801a0dc:	f109 0304 	add.w	r3, r9, #4
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	9308      	str	r3, [sp, #32]
 801a0e4:	f008 fc0c 	bl	8022900 <memset>
 801a0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0ea:	42bb      	cmp	r3, r7
 801a0ec:	f240 8223 	bls.w	801a536 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801a0f0:	2003      	movs	r0, #3
 801a0f2:	f04f 0c07 	mov.w	ip, #7
 801a0f6:	f04f 0e0b 	mov.w	lr, #11
 801a0fa:	2d00      	cmp	r5, #0
 801a0fc:	f000 813c 	beq.w	801a378 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801a100:	f898 3000 	ldrb.w	r3, [r8]
 801a104:	b2db      	uxtb	r3, r3
 801a106:	2bfe      	cmp	r3, #254	@ 0xfe
 801a108:	d126      	bne.n	801a158 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801a10a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a10e:	f108 0604 	add.w	r6, r8, #4
 801a112:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a116:	3d01      	subs	r5, #1
 801a118:	b2c9      	uxtb	r1, r1
 801a11a:	f898 8003 	ldrb.w	r8, [r8, #3]
 801a11e:	b2d2      	uxtb	r2, r2
 801a120:	f361 0407 	bfi	r4, r1, #0, #8
 801a124:	fa5f f888 	uxtb.w	r8, r8
 801a128:	b2ad      	uxth	r5, r5
 801a12a:	f362 240f 	bfi	r4, r2, #8, #8
 801a12e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a132:	fb10 2208 	smlabb	r2, r0, r8, r2
 801a136:	f368 4417 	bfi	r4, r8, #16, #8
 801a13a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801a13e:	0e23      	lsrs	r3, r4, #24
 801a140:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801a144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a148:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a14c:	605c      	str	r4, [r3, #4]
 801a14e:	46b0      	mov	r8, r6
 801a150:	e7d3      	b.n	801a0fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801a152:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a156:	e792      	b.n	801a07e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801a158:	2bff      	cmp	r3, #255	@ 0xff
 801a15a:	d127      	bne.n	801a1ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801a15c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a160:	f108 0605 	add.w	r6, r8, #5
 801a164:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a168:	3d01      	subs	r5, #1
 801a16a:	b2d2      	uxtb	r2, r2
 801a16c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801a170:	b2db      	uxtb	r3, r3
 801a172:	f898 8004 	ldrb.w	r8, [r8, #4]
 801a176:	f362 0407 	bfi	r4, r2, #0, #8
 801a17a:	b2c9      	uxtb	r1, r1
 801a17c:	fa5f f888 	uxtb.w	r8, r8
 801a180:	f363 240f 	bfi	r4, r3, #8, #8
 801a184:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a188:	b2ad      	uxth	r5, r5
 801a18a:	fb10 3301 	smlabb	r3, r0, r1, r3
 801a18e:	f361 4417 	bfi	r4, r1, #16, #8
 801a192:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801a196:	f368 641f 	bfi	r4, r8, #24, #8
 801a19a:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801a19e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801a1a2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801a1a6:	f8c8 4004 	str.w	r4, [r8, #4]
 801a1aa:	e7d0      	b.n	801a14e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801a1ac:	119a      	asrs	r2, r3, #6
 801a1ae:	f108 0601 	add.w	r6, r8, #1
 801a1b2:	d107      	bne.n	801a1c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801a1b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a1b8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a1bc:	685c      	ldr	r4, [r3, #4]
 801a1be:	3d01      	subs	r5, #1
 801a1c0:	b2ad      	uxth	r5, r5
 801a1c2:	e7c4      	b.n	801a14e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801a1c4:	2a01      	cmp	r2, #1
 801a1c6:	d129      	bne.n	801a21c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801a1c8:	f003 0203 	and.w	r2, r3, #3
 801a1cc:	1ea1      	subs	r1, r4, #2
 801a1ce:	4411      	add	r1, r2
 801a1d0:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801a1d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a1d8:	b2c9      	uxtb	r1, r1
 801a1da:	3a02      	subs	r2, #2
 801a1dc:	3b02      	subs	r3, #2
 801a1de:	f361 0407 	bfi	r4, r1, #0, #8
 801a1e2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a1e6:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a1ea:	f362 240f 	bfi	r4, r2, #8, #8
 801a1ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a1f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a1f6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a1fa:	fb10 2203 	smlabb	r2, r0, r3, r2
 801a1fe:	f363 4417 	bfi	r4, r3, #16, #8
 801a202:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801a206:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801a20a:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801a20e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801a212:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801a216:	f8c8 4004 	str.w	r4, [r8, #4]
 801a21a:	e7d0      	b.n	801a1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801a21c:	2a02      	cmp	r2, #2
 801a21e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a222:	d12e      	bne.n	801a282 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801a224:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a228:	f1a3 0a20 	sub.w	sl, r3, #32
 801a22c:	f108 0602 	add.w	r6, r8, #2
 801a230:	b2d2      	uxtb	r2, r2
 801a232:	f002 010f 	and.w	r1, r2, #15
 801a236:	1112      	asrs	r2, r2, #4
 801a238:	3908      	subs	r1, #8
 801a23a:	3a08      	subs	r2, #8
 801a23c:	4451      	add	r1, sl
 801a23e:	4492      	add	sl, r2
 801a240:	4421      	add	r1, r4
 801a242:	b2c9      	uxtb	r1, r1
 801a244:	f361 0407 	bfi	r4, r1, #0, #8
 801a248:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801a24c:	f1a8 0820 	sub.w	r8, r8, #32
 801a250:	4443      	add	r3, r8
 801a252:	b2db      	uxtb	r3, r3
 801a254:	f363 240f 	bfi	r4, r3, #8, #8
 801a258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a25c:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801a260:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801a264:	fb10 330a 	smlabb	r3, r0, sl, r3
 801a268:	f36a 4417 	bfi	r4, sl, #16, #8
 801a26c:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801a270:	0e22      	lsrs	r2, r4, #24
 801a272:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801a276:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a27a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801a27e:	6054      	str	r4, [r2, #4]
 801a280:	e79d      	b.n	801a1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801a282:	3301      	adds	r3, #1
 801a284:	42ab      	cmp	r3, r5
 801a286:	dd59      	ble.n	801a33c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801a288:	1b5d      	subs	r5, r3, r5
 801a28a:	2d00      	cmp	r5, #0
 801a28c:	dc58      	bgt.n	801a340 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801a28e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a292:	f04f 0800 	mov.w	r8, #0
 801a296:	f1ba 0f00 	cmp.w	sl, #0
 801a29a:	f340 8108 	ble.w	801a4ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801a29e:	1c73      	adds	r3, r6, #1
 801a2a0:	9303      	str	r3, [sp, #12]
 801a2a2:	7833      	ldrb	r3, [r6, #0]
 801a2a4:	b2db      	uxtb	r3, r3
 801a2a6:	2bfe      	cmp	r3, #254	@ 0xfe
 801a2a8:	d16a      	bne.n	801a380 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801a2aa:	7871      	ldrb	r1, [r6, #1]
 801a2ac:	1d33      	adds	r3, r6, #4
 801a2ae:	78b2      	ldrb	r2, [r6, #2]
 801a2b0:	b2c9      	uxtb	r1, r1
 801a2b2:	78f0      	ldrb	r0, [r6, #3]
 801a2b4:	b2d2      	uxtb	r2, r2
 801a2b6:	9303      	str	r3, [sp, #12]
 801a2b8:	f361 0407 	bfi	r4, r1, #0, #8
 801a2bc:	b2c0      	uxtb	r0, r0
 801a2be:	2303      	movs	r3, #3
 801a2c0:	f362 240f 	bfi	r4, r2, #8, #8
 801a2c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a2c8:	fb13 2200 	smlabb	r2, r3, r0, r2
 801a2cc:	f360 4417 	bfi	r4, r0, #16, #8
 801a2d0:	2307      	movs	r3, #7
 801a2d2:	0e25      	lsrs	r5, r4, #24
 801a2d4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801a2d8:	230b      	movs	r3, #11
 801a2da:	fb13 1305 	smlabb	r3, r3, r5, r1
 801a2de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a2e2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a2e6:	605c      	str	r4, [r3, #4]
 801a2e8:	2501      	movs	r5, #1
 801a2ea:	462e      	mov	r6, r5
 801a2ec:	eb06 0308 	add.w	r3, r6, r8
 801a2f0:	ebaa 0a06 	sub.w	sl, sl, r6
 801a2f4:	1bad      	subs	r5, r5, r6
 801a2f6:	2b40      	cmp	r3, #64	@ 0x40
 801a2f8:	dd16      	ble.n	801a328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801a2fa:	4658      	mov	r0, fp
 801a2fc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801a300:	f7e8 fdba 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801a304:	4659      	mov	r1, fp
 801a306:	9b05      	ldr	r3, [sp, #20]
 801a308:	4642      	mov	r2, r8
 801a30a:	4638      	mov	r0, r7
 801a30c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a310:	f7e8 fe1a 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801a314:	4b30      	ldr	r3, [pc, #192]	@ (801a3d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801a316:	4447      	add	r7, r8
 801a318:	f04f 0800 	mov.w	r8, #0
 801a31c:	459b      	cmp	fp, r3
 801a31e:	bf0c      	ite	eq
 801a320:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801a3dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801a324:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801a3d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801a328:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801a32c:	4633      	mov	r3, r6
 801a32e:	3b01      	subs	r3, #1
 801a330:	f842 4b04 	str.w	r4, [r2], #4
 801a334:	d1fb      	bne.n	801a32e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801a336:	44b0      	add	r8, r6
 801a338:	9e03      	ldr	r6, [sp, #12]
 801a33a:	e7ac      	b.n	801a296 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801a33c:	1aed      	subs	r5, r5, r3
 801a33e:	e73f      	b.n	801a1c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801a340:	9b01      	ldr	r3, [sp, #4]
 801a342:	42ab      	cmp	r3, r5
 801a344:	bfa8      	it	ge
 801a346:	462b      	movge	r3, r5
 801a348:	4698      	mov	r8, r3
 801a34a:	9b01      	ldr	r3, [sp, #4]
 801a34c:	eba3 0a08 	sub.w	sl, r3, r8
 801a350:	0e23      	lsrs	r3, r4, #24
 801a352:	eba5 0508 	sub.w	r5, r5, r8
 801a356:	d00b      	beq.n	801a370 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801a358:	9a05      	ldr	r2, [sp, #20]
 801a35a:	4641      	mov	r1, r8
 801a35c:	4638      	mov	r0, r7
 801a35e:	4353      	muls	r3, r2
 801a360:	1c5a      	adds	r2, r3, #1
 801a362:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801a366:	4622      	mov	r2, r4
 801a368:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a36c:	f7e8 fd9e 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801a370:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a374:	4447      	add	r7, r8
 801a376:	e78c      	b.n	801a292 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801a378:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a37c:	4646      	mov	r6, r8
 801a37e:	e788      	b.n	801a292 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801a380:	2bff      	cmp	r3, #255	@ 0xff
 801a382:	d11d      	bne.n	801a3c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801a384:	7870      	ldrb	r0, [r6, #1]
 801a386:	1d73      	adds	r3, r6, #5
 801a388:	78b2      	ldrb	r2, [r6, #2]
 801a38a:	b2c0      	uxtb	r0, r0
 801a38c:	78f5      	ldrb	r5, [r6, #3]
 801a38e:	b2d2      	uxtb	r2, r2
 801a390:	9303      	str	r3, [sp, #12]
 801a392:	f360 0407 	bfi	r4, r0, #0, #8
 801a396:	7933      	ldrb	r3, [r6, #4]
 801a398:	b2ed      	uxtb	r5, r5
 801a39a:	b2d9      	uxtb	r1, r3
 801a39c:	f362 240f 	bfi	r4, r2, #8, #8
 801a3a0:	2303      	movs	r3, #3
 801a3a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a3a6:	f365 4417 	bfi	r4, r5, #16, #8
 801a3aa:	fb13 2205 	smlabb	r2, r3, r5, r2
 801a3ae:	2307      	movs	r3, #7
 801a3b0:	f361 641f 	bfi	r4, r1, #24, #8
 801a3b4:	fb13 2000 	smlabb	r0, r3, r0, r2
 801a3b8:	230b      	movs	r3, #11
 801a3ba:	fb13 0301 	smlabb	r3, r3, r1, r0
 801a3be:	e78e      	b.n	801a2de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801a3c0:	119d      	asrs	r5, r3, #6
 801a3c2:	d10d      	bne.n	801a3e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801a3c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a3c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a3cc:	685c      	ldr	r4, [r3, #4]
 801a3ce:	e78b      	b.n	801a2e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801a3d0:	240284a4 	.word	0x240284a4
 801a3d4:	2402849e 	.word	0x2402849e
 801a3d8:	24000140 	.word	0x24000140
 801a3dc:	24000240 	.word	0x24000240
 801a3e0:	2d01      	cmp	r5, #1
 801a3e2:	d12a      	bne.n	801a43a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801a3e4:	f003 0203 	and.w	r2, r3, #3
 801a3e8:	1ea1      	subs	r1, r4, #2
 801a3ea:	2603      	movs	r6, #3
 801a3ec:	4411      	add	r1, r2
 801a3ee:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801a3f2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a3f6:	b2c9      	uxtb	r1, r1
 801a3f8:	3a02      	subs	r2, #2
 801a3fa:	3b02      	subs	r3, #2
 801a3fc:	f361 0407 	bfi	r4, r1, #0, #8
 801a400:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a404:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a408:	f362 240f 	bfi	r4, r2, #8, #8
 801a40c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a410:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a414:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a418:	fb16 2203 	smlabb	r2, r6, r3, r2
 801a41c:	f363 4417 	bfi	r4, r3, #16, #8
 801a420:	2307      	movs	r3, #7
 801a422:	0e20      	lsrs	r0, r4, #24
 801a424:	fb13 2101 	smlabb	r1, r3, r1, r2
 801a428:	230b      	movs	r3, #11
 801a42a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801a42e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a432:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801a436:	605c      	str	r4, [r3, #4]
 801a438:	e757      	b.n	801a2ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801a43a:	2d02      	cmp	r5, #2
 801a43c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a440:	d12f      	bne.n	801a4a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801a442:	1cb2      	adds	r2, r6, #2
 801a444:	f1a3 0020 	sub.w	r0, r3, #32
 801a448:	9203      	str	r2, [sp, #12]
 801a44a:	7872      	ldrb	r2, [r6, #1]
 801a44c:	b2d2      	uxtb	r2, r2
 801a44e:	f002 010f 	and.w	r1, r2, #15
 801a452:	1112      	asrs	r2, r2, #4
 801a454:	3908      	subs	r1, #8
 801a456:	3a08      	subs	r2, #8
 801a458:	4401      	add	r1, r0
 801a45a:	4402      	add	r2, r0
 801a45c:	4421      	add	r1, r4
 801a45e:	b2c9      	uxtb	r1, r1
 801a460:	f361 0407 	bfi	r4, r1, #0, #8
 801a464:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801a468:	3d20      	subs	r5, #32
 801a46a:	442b      	add	r3, r5
 801a46c:	2503      	movs	r5, #3
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	f363 240f 	bfi	r4, r3, #8, #8
 801a474:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a478:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801a47c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a480:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a484:	f362 4417 	bfi	r4, r2, #16, #8
 801a488:	2207      	movs	r2, #7
 801a48a:	0e20      	lsrs	r0, r4, #24
 801a48c:	fb12 3201 	smlabb	r2, r2, r1, r3
 801a490:	210b      	movs	r1, #11
 801a492:	fb11 2100 	smlabb	r1, r1, r0, r2
 801a496:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801a49a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801a49e:	604c      	str	r4, [r1, #4]
 801a4a0:	e722      	b.n	801a2e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801a4a2:	1c5d      	adds	r5, r3, #1
 801a4a4:	4656      	mov	r6, sl
 801a4a6:	45aa      	cmp	sl, r5
 801a4a8:	bfa8      	it	ge
 801a4aa:	462e      	movge	r6, r5
 801a4ac:	e71e      	b.n	801a2ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801a4ae:	f1b8 0f00 	cmp.w	r8, #0
 801a4b2:	d00d      	beq.n	801a4d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801a4b4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801a4b8:	4658      	mov	r0, fp
 801a4ba:	f7e8 fcdd 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801a4be:	4642      	mov	r2, r8
 801a4c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a4c4:	4638      	mov	r0, r7
 801a4c6:	9b05      	ldr	r3, [sp, #20]
 801a4c8:	4659      	mov	r1, fp
 801a4ca:	4447      	add	r7, r8
 801a4cc:	f7e8 fd3c 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801a4d0:	4b1d      	ldr	r3, [pc, #116]	@ (801a548 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801a4d2:	9a01      	ldr	r2, [sp, #4]
 801a4d4:	881b      	ldrh	r3, [r3, #0]
 801a4d6:	1a9b      	subs	r3, r3, r2
 801a4d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a4dc:	441f      	add	r7, r3
 801a4de:	9b04      	ldr	r3, [sp, #16]
 801a4e0:	3301      	adds	r3, #1
 801a4e2:	9304      	str	r3, [sp, #16]
 801a4e4:	9a04      	ldr	r2, [sp, #16]
 801a4e6:	9b00      	ldr	r3, [sp, #0]
 801a4e8:	4293      	cmp	r3, r2
 801a4ea:	d11d      	bne.n	801a528 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801a4ec:	9b02      	ldr	r3, [sp, #8]
 801a4ee:	2400      	movs	r4, #0
 801a4f0:	9a02      	ldr	r2, [sp, #8]
 801a4f2:	f103 0801 	add.w	r8, r3, #1
 801a4f6:	9b06      	ldr	r3, [sp, #24]
 801a4f8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801a4fc:	4621      	mov	r1, r4
 801a4fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a506:	9b07      	ldr	r3, [sp, #28]
 801a508:	ba36      	rev	r6, r6
 801a50a:	9808      	ldr	r0, [sp, #32]
 801a50c:	441e      	add	r6, r3
 801a50e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a512:	1aed      	subs	r5, r5, r3
 801a514:	f008 f9f4 	bl	8022900 <memset>
 801a518:	f8cd 8008 	str.w	r8, [sp, #8]
 801a51c:	b2ad      	uxth	r5, r5
 801a51e:	9404      	str	r4, [sp, #16]
 801a520:	f7e8 fca0 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801a524:	46b0      	mov	r8, r6
 801a526:	e5df      	b.n	801a0e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801a528:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a52c:	9a01      	ldr	r2, [sp, #4]
 801a52e:	1a9b      	subs	r3, r3, r2
 801a530:	1b5d      	subs	r5, r3, r5
 801a532:	b2ad      	uxth	r5, r5
 801a534:	e7f4      	b.n	801a520 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801a536:	4b05      	ldr	r3, [pc, #20]	@ (801a54c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801a538:	6818      	ldr	r0, [r3, #0]
 801a53a:	6803      	ldr	r3, [r0, #0]
 801a53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a53e:	4798      	blx	r3
 801a540:	b00f      	add	sp, #60	@ 0x3c
 801a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a546:	bf00      	nop
 801a548:	2402849e 	.word	0x2402849e
 801a54c:	240284a4 	.word	0x240284a4

0801a550 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a554:	b093      	sub	sp, #76	@ 0x4c
 801a556:	460d      	mov	r5, r1
 801a558:	4616      	mov	r6, r2
 801a55a:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801a55e:	9000      	str	r0, [sp, #0]
 801a560:	f1bb 0f00 	cmp.w	fp, #0
 801a564:	f000 82ac 	beq.w	801aac0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801a568:	6810      	ldr	r0, [r2, #0]
 801a56a:	ac0e      	add	r4, sp, #56	@ 0x38
 801a56c:	6851      	ldr	r1, [r2, #4]
 801a56e:	c403      	stmia	r4!, {r0, r1}
 801a570:	6818      	ldr	r0, [r3, #0]
 801a572:	ac10      	add	r4, sp, #64	@ 0x40
 801a574:	6859      	ldr	r1, [r3, #4]
 801a576:	c403      	stmia	r4!, {r0, r1}
 801a578:	a80e      	add	r0, sp, #56	@ 0x38
 801a57a:	f7f8 fff7 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a57e:	4631      	mov	r1, r6
 801a580:	a810      	add	r0, sp, #64	@ 0x40
 801a582:	f7f9 f837 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a586:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a58a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801a58e:	bfdb      	ittet	le
 801a590:	b293      	uxthle	r3, r2
 801a592:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a596:	2301      	movgt	r3, #1
 801a598:	fb91 f3f3 	sdivle	r3, r1, r3
 801a59c:	9301      	str	r3, [sp, #4]
 801a59e:	f105 0308 	add.w	r3, r5, #8
 801a5a2:	9901      	ldr	r1, [sp, #4]
 801a5a4:	9305      	str	r3, [sp, #20]
 801a5a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801a5aa:	440b      	add	r3, r1
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	fb93 f3f1 	sdiv	r3, r3, r1
 801a5b2:	3b01      	subs	r3, #1
 801a5b4:	9905      	ldr	r1, [sp, #20]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a5bc:	9901      	ldr	r1, [sp, #4]
 801a5be:	9306      	str	r3, [sp, #24]
 801a5c0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801a5c4:	fb93 f0f1 	sdiv	r0, r3, r1
 801a5c8:	b284      	uxth	r4, r0
 801a5ca:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801a5ce:	9403      	str	r4, [sp, #12]
 801a5d0:	9d03      	ldr	r5, [sp, #12]
 801a5d2:	9c01      	ldr	r4, [sp, #4]
 801a5d4:	fb05 3714 	mls	r7, r5, r4, r3
 801a5d8:	fb17 f702 	smulbb	r7, r7, r2
 801a5dc:	440f      	add	r7, r1
 801a5de:	b2bf      	uxth	r7, r7
 801a5e0:	2d00      	cmp	r5, #0
 801a5e2:	d06b      	beq.n	801a6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801a5e4:	1e6a      	subs	r2, r5, #1
 801a5e6:	9805      	ldr	r0, [sp, #20]
 801a5e8:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801a5ec:	9a06      	ldr	r2, [sp, #24]
 801a5ee:	fa99 f989 	rev.w	r9, r9
 801a5f2:	4491      	add	r9, r2
 801a5f4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801a5f8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801a5fc:	4411      	add	r1, r2
 801a5fe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a602:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801a960 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801a606:	4413      	add	r3, r2
 801a608:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801a60c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801a610:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801a614:	9302      	str	r3, [sp, #8]
 801a616:	4bd0      	ldr	r3, [pc, #832]	@ (801a958 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801a618:	6818      	ldr	r0, [r3, #0]
 801a61a:	6803      	ldr	r3, [r0, #0]
 801a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a61e:	4798      	blx	r3
 801a620:	4bce      	ldr	r3, [pc, #824]	@ (801a95c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801a622:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801a626:	881b      	ldrh	r3, [r3, #0]
 801a628:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801a62c:	fb03 2404 	mla	r4, r3, r4, r2
 801a630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a634:	436b      	muls	r3, r5
 801a636:	2500      	movs	r5, #0
 801a638:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a63c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a640:	4629      	mov	r1, r5
 801a642:	4404      	add	r4, r0
 801a644:	18e3      	adds	r3, r4, r3
 801a646:	930d      	str	r3, [sp, #52]	@ 0x34
 801a648:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801a64c:	fb97 f3f3 	sdiv	r3, r7, r3
 801a650:	9304      	str	r3, [sp, #16]
 801a652:	9b00      	ldr	r3, [sp, #0]
 801a654:	3304      	adds	r3, #4
 801a656:	4618      	mov	r0, r3
 801a658:	9309      	str	r3, [sp, #36]	@ 0x24
 801a65a:	f008 f951 	bl	8022900 <memset>
 801a65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a660:	42a3      	cmp	r3, r4
 801a662:	f240 8228 	bls.w	801aab6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801a666:	2003      	movs	r0, #3
 801a668:	2607      	movs	r6, #7
 801a66a:	2f00      	cmp	r7, #0
 801a66c:	f000 80cb 	beq.w	801a806 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801a670:	f899 3000 	ldrb.w	r3, [r9]
 801a674:	b2db      	uxtb	r3, r3
 801a676:	2bfe      	cmp	r3, #254	@ 0xfe
 801a678:	d123      	bne.n	801a6c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801a67a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a67e:	3f01      	subs	r7, #1
 801a680:	f899 2002 	ldrb.w	r2, [r9, #2]
 801a684:	f109 0804 	add.w	r8, r9, #4
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	f899 1003 	ldrb.w	r1, [r9, #3]
 801a68e:	b2d2      	uxtb	r2, r2
 801a690:	f363 0507 	bfi	r5, r3, #0, #8
 801a694:	b2c9      	uxtb	r1, r1
 801a696:	b2bf      	uxth	r7, r7
 801a698:	f362 250f 	bfi	r5, r2, #8, #8
 801a69c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a6a0:	fb10 2201 	smlabb	r2, r0, r1, r2
 801a6a4:	f361 4517 	bfi	r5, r1, #16, #8
 801a6a8:	fb16 2303 	smlabb	r3, r6, r3, r2
 801a6ac:	9a00      	ldr	r2, [sp, #0]
 801a6ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a6b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6b6:	605d      	str	r5, [r3, #4]
 801a6b8:	46c1      	mov	r9, r8
 801a6ba:	e7d6      	b.n	801a66a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801a6bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a6c0:	e798      	b.n	801a5f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801a6c2:	119a      	asrs	r2, r3, #6
 801a6c4:	f109 0801 	add.w	r8, r9, #1
 801a6c8:	d108      	bne.n	801a6dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801a6ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a6ce:	9a00      	ldr	r2, [sp, #0]
 801a6d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6d4:	685d      	ldr	r5, [r3, #4]
 801a6d6:	3f01      	subs	r7, #1
 801a6d8:	b2bf      	uxth	r7, r7
 801a6da:	e7ed      	b.n	801a6b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801a6dc:	2a01      	cmp	r2, #1
 801a6de:	d125      	bne.n	801a72c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801a6e0:	f003 0103 	and.w	r1, r3, #3
 801a6e4:	1eaa      	subs	r2, r5, #2
 801a6e6:	440a      	add	r2, r1
 801a6e8:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801a6ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a6f0:	b2d2      	uxtb	r2, r2
 801a6f2:	3902      	subs	r1, #2
 801a6f4:	3b02      	subs	r3, #2
 801a6f6:	f362 0507 	bfi	r5, r2, #0, #8
 801a6fa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a6fe:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801a702:	f361 250f 	bfi	r5, r1, #8, #8
 801a706:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a70a:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801a70e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801a712:	fb10 1103 	smlabb	r1, r0, r3, r1
 801a716:	f363 4517 	bfi	r5, r3, #16, #8
 801a71a:	9b00      	ldr	r3, [sp, #0]
 801a71c:	fb16 1202 	smlabb	r2, r6, r2, r1
 801a720:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a724:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a728:	6055      	str	r5, [r2, #4]
 801a72a:	e7d4      	b.n	801a6d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801a72c:	2a02      	cmp	r2, #2
 801a72e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a732:	d12c      	bne.n	801a78e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801a734:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a738:	f1a3 0c20 	sub.w	ip, r3, #32
 801a73c:	f109 0802 	add.w	r8, r9, #2
 801a740:	b2d2      	uxtb	r2, r2
 801a742:	f002 010f 	and.w	r1, r2, #15
 801a746:	1112      	asrs	r2, r2, #4
 801a748:	3908      	subs	r1, #8
 801a74a:	3a08      	subs	r2, #8
 801a74c:	4461      	add	r1, ip
 801a74e:	4494      	add	ip, r2
 801a750:	4429      	add	r1, r5
 801a752:	b2c9      	uxtb	r1, r1
 801a754:	f361 0507 	bfi	r5, r1, #0, #8
 801a758:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801a75c:	f1ae 0e20 	sub.w	lr, lr, #32
 801a760:	4473      	add	r3, lr
 801a762:	b2db      	uxtb	r3, r3
 801a764:	f363 250f 	bfi	r5, r3, #8, #8
 801a768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a76c:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801a770:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801a774:	fb10 330c 	smlabb	r3, r0, ip, r3
 801a778:	f36c 4517 	bfi	r5, ip, #16, #8
 801a77c:	fb16 3101 	smlabb	r1, r6, r1, r3
 801a780:	9b00      	ldr	r3, [sp, #0]
 801a782:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801a786:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a78a:	604d      	str	r5, [r1, #4]
 801a78c:	e7a3      	b.n	801a6d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801a78e:	3301      	adds	r3, #1
 801a790:	42bb      	cmp	r3, r7
 801a792:	dd23      	ble.n	801a7dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801a794:	eba3 0907 	sub.w	r9, r3, r7
 801a798:	f1b9 0f00 	cmp.w	r9, #0
 801a79c:	dc20      	bgt.n	801a7e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801a79e:	9e02      	ldr	r6, [sp, #8]
 801a7a0:	2700      	movs	r7, #0
 801a7a2:	2e00      	cmp	r6, #0
 801a7a4:	f340 8142 	ble.w	801aa2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801a7a8:	f108 0301 	add.w	r3, r8, #1
 801a7ac:	9307      	str	r3, [sp, #28]
 801a7ae:	f898 3000 	ldrb.w	r3, [r8]
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	119a      	asrs	r2, r3, #6
 801a7b6:	d12a      	bne.n	801a80e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801a7b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a7bc:	9a00      	ldr	r2, [sp, #0]
 801a7be:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a7c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7c6:	685d      	ldr	r5, [r3, #4]
 801a7c8:	f040 811f 	bne.w	801aa0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a7cc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801a7d0:	7025      	strb	r5, [r4, #0]
 801a7d2:	7063      	strb	r3, [r4, #1]
 801a7d4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a7d8:	70a3      	strb	r3, [r4, #2]
 801a7da:	e04e      	b.n	801a87a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a7dc:	1aff      	subs	r7, r7, r3
 801a7de:	e77b      	b.n	801a6d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801a7e0:	9b02      	ldr	r3, [sp, #8]
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	462a      	mov	r2, r5
 801a7e6:	454b      	cmp	r3, r9
 801a7e8:	bfa8      	it	ge
 801a7ea:	464b      	movge	r3, r9
 801a7ec:	461f      	mov	r7, r3
 801a7ee:	9b02      	ldr	r3, [sp, #8]
 801a7f0:	4639      	mov	r1, r7
 801a7f2:	1bde      	subs	r6, r3, r7
 801a7f4:	eba9 0907 	sub.w	r9, r9, r7
 801a7f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a7fc:	465b      	mov	r3, fp
 801a7fe:	f7e8 fb55 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801a802:	443c      	add	r4, r7
 801a804:	e7cc      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801a806:	46c8      	mov	r8, r9
 801a808:	9e02      	ldr	r6, [sp, #8]
 801a80a:	46b9      	mov	r9, r7
 801a80c:	e7c8      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801a80e:	2a01      	cmp	r2, #1
 801a810:	d136      	bne.n	801a880 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801a812:	f003 0103 	and.w	r1, r3, #3
 801a816:	1ea8      	subs	r0, r5, #2
 801a818:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a81c:	4408      	add	r0, r1
 801a81e:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801a822:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801a826:	b2c0      	uxtb	r0, r0
 801a828:	f1a1 0102 	sub.w	r1, r1, #2
 801a82c:	f1a3 0302 	sub.w	r3, r3, #2
 801a830:	f360 0507 	bfi	r5, r0, #0, #8
 801a834:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801a838:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801a83c:	f361 250f 	bfi	r5, r1, #8, #8
 801a840:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801a844:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801a848:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801a84c:	f04f 0303 	mov.w	r3, #3
 801a850:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801a854:	f04f 0c07 	mov.w	ip, #7
 801a858:	9b00      	ldr	r3, [sp, #0]
 801a85a:	f368 4517 	bfi	r5, r8, #16, #8
 801a85e:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801a862:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801a866:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801a86a:	f8cc 5004 	str.w	r5, [ip, #4]
 801a86e:	f040 80cd 	bne.w	801aa0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801a872:	7020      	strb	r0, [r4, #0]
 801a874:	7061      	strb	r1, [r4, #1]
 801a876:	f884 8002 	strb.w	r8, [r4, #2]
 801a87a:	3e01      	subs	r6, #1
 801a87c:	3403      	adds	r4, #3
 801a87e:	e0c1      	b.n	801aa04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801a880:	2a02      	cmp	r2, #2
 801a882:	d13d      	bne.n	801a900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801a884:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a88c:	f108 0202 	add.w	r2, r8, #2
 801a890:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a894:	b2c9      	uxtb	r1, r1
 801a896:	f1a3 0c20 	sub.w	ip, r3, #32
 801a89a:	9207      	str	r2, [sp, #28]
 801a89c:	f001 000f 	and.w	r0, r1, #15
 801a8a0:	f1a0 0008 	sub.w	r0, r0, #8
 801a8a4:	4460      	add	r0, ip
 801a8a6:	4428      	add	r0, r5
 801a8a8:	b2c0      	uxtb	r0, r0
 801a8aa:	f360 0507 	bfi	r5, r0, #0, #8
 801a8ae:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801a8b2:	f1a2 0220 	sub.w	r2, r2, #32
 801a8b6:	4413      	add	r3, r2
 801a8b8:	ea4f 1221 	mov.w	r2, r1, asr #4
 801a8bc:	b2db      	uxtb	r3, r3
 801a8be:	f1a2 0208 	sub.w	r2, r2, #8
 801a8c2:	f363 250f 	bfi	r5, r3, #8, #8
 801a8c6:	4462      	add	r2, ip
 801a8c8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a8cc:	f04f 0c03 	mov.w	ip, #3
 801a8d0:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801a8d4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801a8d8:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801a8dc:	f04f 0107 	mov.w	r1, #7
 801a8e0:	f362 4517 	bfi	r5, r2, #16, #8
 801a8e4:	fb11 c100 	smlabb	r1, r1, r0, ip
 801a8e8:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801a8ec:	9900      	ldr	r1, [sp, #0]
 801a8ee:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801a8f2:	604d      	str	r5, [r1, #4]
 801a8f4:	f040 8089 	bne.w	801aa0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a8f8:	7020      	strb	r0, [r4, #0]
 801a8fa:	7063      	strb	r3, [r4, #1]
 801a8fc:	70a2      	strb	r2, [r4, #2]
 801a8fe:	e7bc      	b.n	801a87a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a900:	2bfe      	cmp	r3, #254	@ 0xfe
 801a902:	d12f      	bne.n	801a964 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801a904:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a908:	f108 0304 	add.w	r3, r8, #4
 801a90c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a910:	f04f 0c03 	mov.w	ip, #3
 801a914:	f898 1003 	ldrb.w	r1, [r8, #3]
 801a918:	b2c0      	uxtb	r0, r0
 801a91a:	b2d2      	uxtb	r2, r2
 801a91c:	9307      	str	r3, [sp, #28]
 801a91e:	b2c9      	uxtb	r1, r1
 801a920:	f360 0507 	bfi	r5, r0, #0, #8
 801a924:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801a928:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a92c:	f362 250f 	bfi	r5, r2, #8, #8
 801a930:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801a934:	f04f 0307 	mov.w	r3, #7
 801a938:	f361 4517 	bfi	r5, r1, #16, #8
 801a93c:	fb13 c300 	smlabb	r3, r3, r0, ip
 801a940:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801a944:	9b00      	ldr	r3, [sp, #0]
 801a946:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801a94a:	605d      	str	r5, [r3, #4]
 801a94c:	d15d      	bne.n	801aa0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801a94e:	7020      	strb	r0, [r4, #0]
 801a950:	7062      	strb	r2, [r4, #1]
 801a952:	70a1      	strb	r1, [r4, #2]
 801a954:	e791      	b.n	801a87a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801a956:	bf00      	nop
 801a958:	240284a4 	.word	0x240284a4
 801a95c:	2402849e 	.word	0x2402849e
 801a960:	24000140 	.word	0x24000140
 801a964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a968:	1c5a      	adds	r2, r3, #1
 801a96a:	b94b      	cbnz	r3, 801a980 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801a96c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a970:	d14c      	bne.n	801aa0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801a972:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801a976:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a97a:	7025      	strb	r5, [r4, #0]
 801a97c:	7062      	strb	r2, [r4, #1]
 801a97e:	e72b      	b.n	801a7d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801a980:	4296      	cmp	r6, r2
 801a982:	46b0      	mov	r8, r6
 801a984:	bfa8      	it	ge
 801a986:	4690      	movge	r8, r2
 801a988:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801a98c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801a990:	eba6 0608 	sub.w	r6, r6, r8
 801a994:	eba2 0908 	sub.w	r9, r2, r8
 801a998:	9308      	str	r3, [sp, #32]
 801a99a:	b2eb      	uxtb	r3, r5
 801a99c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a99e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801a9a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9a4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801a9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801a9aa:	9b08      	ldr	r3, [sp, #32]
 801a9ac:	d030      	beq.n	801aa10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801a9ae:	18fb      	adds	r3, r7, r3
 801a9b0:	2bc0      	cmp	r3, #192	@ 0xc0
 801a9b2:	dd15      	ble.n	801a9e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801a9b4:	4650      	mov	r0, sl
 801a9b6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801a9ba:	f7e8 fa5d 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801a9be:	2203      	movs	r2, #3
 801a9c0:	4651      	mov	r1, sl
 801a9c2:	465b      	mov	r3, fp
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	443c      	add	r4, r7
 801a9c8:	fb97 f2f2 	sdiv	r2, r7, r2
 801a9cc:	f7e8 fa98 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801a9d0:	4b3d      	ldr	r3, [pc, #244]	@ (801aac8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801a9d2:	2700      	movs	r7, #0
 801a9d4:	459a      	cmp	sl, r3
 801a9d6:	bf0c      	ite	eq
 801a9d8:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801aad4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801a9dc:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801aac8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801a9e0:	eb0a 0307 	add.w	r3, sl, r7
 801a9e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9e6:	f1b8 0801 	subs.w	r8, r8, #1
 801a9ea:	f103 0303 	add.w	r3, r3, #3
 801a9ee:	f803 2c03 	strb.w	r2, [r3, #-3]
 801a9f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a9f4:	f803 2c02 	strb.w	r2, [r3, #-2]
 801a9f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9fa:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a9fe:	d1f1      	bne.n	801a9e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801aa00:	9b08      	ldr	r3, [sp, #32]
 801aa02:	441f      	add	r7, r3
 801aa04:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801aa08:	e6cb      	b.n	801a7a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801aa0a:	2201      	movs	r2, #1
 801aa0c:	4690      	mov	r8, r2
 801aa0e:	e7bb      	b.n	801a988 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801aa10:	4423      	add	r3, r4
 801aa12:	42a3      	cmp	r3, r4
 801aa14:	d9f6      	bls.n	801aa04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801aa16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa18:	3403      	adds	r4, #3
 801aa1a:	f804 2c03 	strb.w	r2, [r4, #-3]
 801aa1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801aa20:	f804 2c02 	strb.w	r2, [r4, #-2]
 801aa24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa26:	f804 2c01 	strb.w	r2, [r4, #-1]
 801aa2a:	e7f2      	b.n	801aa12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801aa2c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801aa30:	d00e      	beq.n	801aa50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801aa32:	b16f      	cbz	r7, 801aa50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801aa34:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801aa38:	4650      	mov	r0, sl
 801aa3a:	f7e8 fa1d 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801aa3e:	2203      	movs	r2, #3
 801aa40:	4620      	mov	r0, r4
 801aa42:	443c      	add	r4, r7
 801aa44:	465b      	mov	r3, fp
 801aa46:	4651      	mov	r1, sl
 801aa48:	fb97 f2f2 	sdiv	r2, r7, r2
 801aa4c:	f7e8 fa58 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801aa50:	4b1e      	ldr	r3, [pc, #120]	@ (801aacc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801aa52:	9a02      	ldr	r2, [sp, #8]
 801aa54:	881b      	ldrh	r3, [r3, #0]
 801aa56:	1a9b      	subs	r3, r3, r2
 801aa58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa5c:	441c      	add	r4, r3
 801aa5e:	9b04      	ldr	r3, [sp, #16]
 801aa60:	3301      	adds	r3, #1
 801aa62:	9304      	str	r3, [sp, #16]
 801aa64:	9a04      	ldr	r2, [sp, #16]
 801aa66:	9b01      	ldr	r3, [sp, #4]
 801aa68:	4293      	cmp	r3, r2
 801aa6a:	d11c      	bne.n	801aaa6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801aa6c:	9b03      	ldr	r3, [sp, #12]
 801aa6e:	2500      	movs	r5, #0
 801aa70:	9a03      	ldr	r2, [sp, #12]
 801aa72:	1c5e      	adds	r6, r3, #1
 801aa74:	9b05      	ldr	r3, [sp, #20]
 801aa76:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801aa7a:	4629      	mov	r1, r5
 801aa7c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801aa80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801aa84:	9b06      	ldr	r3, [sp, #24]
 801aa86:	fa98 f888 	rev.w	r8, r8
 801aa8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aa8c:	4498      	add	r8, r3
 801aa8e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801aa92:	1aff      	subs	r7, r7, r3
 801aa94:	f007 ff34 	bl	8022900 <memset>
 801aa98:	b2bf      	uxth	r7, r7
 801aa9a:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801aa9e:	f7e8 f9e1 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801aaa2:	46c1      	mov	r9, r8
 801aaa4:	e5db      	b.n	801a65e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801aaa6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801aaaa:	9b02      	ldr	r3, [sp, #8]
 801aaac:	1aff      	subs	r7, r7, r3
 801aaae:	eba7 0709 	sub.w	r7, r7, r9
 801aab2:	b2bf      	uxth	r7, r7
 801aab4:	e7f3      	b.n	801aa9e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801aab6:	4b06      	ldr	r3, [pc, #24]	@ (801aad0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801aab8:	6818      	ldr	r0, [r3, #0]
 801aaba:	6803      	ldr	r3, [r0, #0]
 801aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aabe:	4798      	blx	r3
 801aac0:	b013      	add	sp, #76	@ 0x4c
 801aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac6:	bf00      	nop
 801aac8:	24000140 	.word	0x24000140
 801aacc:	2402849e 	.word	0x2402849e
 801aad0:	240284a4 	.word	0x240284a4
 801aad4:	24000240 	.word	0x24000240

0801aad8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aadc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801aae0:	9c06      	ldr	r4, [sp, #24]
 801aae2:	2800      	cmp	r0, #0
 801aae4:	d06e      	beq.n	801abc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aae6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801aaea:	2d00      	cmp	r5, #0
 801aaec:	dd6a      	ble.n	801abc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aaee:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801aaf2:	f1bc 0f00 	cmp.w	ip, #0
 801aaf6:	dd65      	ble.n	801abc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801aaf8:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801aafc:	28ff      	cmp	r0, #255	@ 0xff
 801aafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab02:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801ab06:	fb02 3306 	mla	r3, r2, r6, r3
 801ab0a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801ab0e:	b2e4      	uxtb	r4, r4
 801ab10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab14:	4419      	add	r1, r3
 801ab16:	fb02 f30c 	mul.w	r3, r2, ip
 801ab1a:	eba2 0205 	sub.w	r2, r2, r5
 801ab1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ab2a:	440b      	add	r3, r1
 801ab2c:	d03e      	beq.n	801abac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801ab2e:	fa1f fc80 	uxth.w	ip, r0
 801ab32:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801ab36:	fb06 f60c 	mul.w	r6, r6, ip
 801ab3a:	b280      	uxth	r0, r0
 801ab3c:	fb07 f70c 	mul.w	r7, r7, ip
 801ab40:	fb04 f40c 	mul.w	r4, r4, ip
 801ab44:	4299      	cmp	r1, r3
 801ab46:	d23d      	bcs.n	801abc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ab48:	eb01 0c05 	add.w	ip, r1, r5
 801ab4c:	458c      	cmp	ip, r1
 801ab4e:	f101 0e03 	add.w	lr, r1, #3
 801ab52:	d928      	bls.n	801aba6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801ab54:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ab58:	fb11 f100 	smulbb	r1, r1, r0
 801ab5c:	4421      	add	r1, r4
 801ab5e:	b289      	uxth	r1, r1
 801ab60:	f101 0801 	add.w	r8, r1, #1
 801ab64:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ab68:	1209      	asrs	r1, r1, #8
 801ab6a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ab6e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801ab72:	fb11 f100 	smulbb	r1, r1, r0
 801ab76:	4439      	add	r1, r7
 801ab78:	b289      	uxth	r1, r1
 801ab7a:	f101 0801 	add.w	r8, r1, #1
 801ab7e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ab82:	1209      	asrs	r1, r1, #8
 801ab84:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ab88:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ab8c:	fb11 f100 	smulbb	r1, r1, r0
 801ab90:	4431      	add	r1, r6
 801ab92:	b289      	uxth	r1, r1
 801ab94:	f101 0801 	add.w	r8, r1, #1
 801ab98:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ab9c:	1209      	asrs	r1, r1, #8
 801ab9e:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801aba2:	4671      	mov	r1, lr
 801aba4:	e7d2      	b.n	801ab4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801aba6:	4411      	add	r1, r2
 801aba8:	e7cc      	b.n	801ab44 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801abaa:	4411      	add	r1, r2
 801abac:	4299      	cmp	r1, r3
 801abae:	d209      	bcs.n	801abc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801abb0:	1948      	adds	r0, r1, r5
 801abb2:	4281      	cmp	r1, r0
 801abb4:	d2f9      	bcs.n	801abaa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801abb6:	700c      	strb	r4, [r1, #0]
 801abb8:	3103      	adds	r1, #3
 801abba:	f801 7c02 	strb.w	r7, [r1, #-2]
 801abbe:	f801 6c01 	strb.w	r6, [r1, #-1]
 801abc2:	e7f6      	b.n	801abb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801abc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	b093      	sub	sp, #76	@ 0x4c
 801abce:	4699      	mov	r9, r3
 801abd0:	4617      	mov	r7, r2
 801abd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abd6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801abda:	4604      	mov	r4, r0
 801abdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801abe0:	a80c      	add	r0, sp, #48	@ 0x30
 801abe2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801abe6:	460d      	mov	r5, r1
 801abe8:	4649      	mov	r1, r9
 801abea:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801abee:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801abf2:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801abf6:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801abfa:	f7f3 f807 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 801abfe:	4639      	mov	r1, r7
 801ac00:	a80c      	add	r0, sp, #48	@ 0x30
 801ac02:	f7f3 f803 	bl	800dc0c <_ZN8touchgfx4RectaNERKS0_>
 801ac06:	4b78      	ldr	r3, [pc, #480]	@ (801ade8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ac08:	8818      	ldrh	r0, [r3, #0]
 801ac0a:	4b78      	ldr	r3, [pc, #480]	@ (801adec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801ac0c:	b202      	sxth	r2, r0
 801ac0e:	8819      	ldrh	r1, [r3, #0]
 801ac10:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ac14:	b20f      	sxth	r7, r1
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	da07      	bge.n	801ac2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801ac1a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801ac1e:	4463      	add	r3, ip
 801ac20:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801ac24:	2300      	movs	r3, #0
 801ac26:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801ac2a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801ac2e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801ac32:	1ad2      	subs	r2, r2, r3
 801ac34:	4594      	cmp	ip, r2
 801ac36:	bfc4      	itt	gt
 801ac38:	1ac2      	subgt	r2, r0, r3
 801ac3a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801ac3e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ac42:	2a00      	cmp	r2, #0
 801ac44:	da07      	bge.n	801ac56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801ac46:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801ac4a:	4462      	add	r2, ip
 801ac4c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801ac50:	2200      	movs	r2, #0
 801ac52:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ac56:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ac5a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801ac5e:	1abf      	subs	r7, r7, r2
 801ac60:	45bc      	cmp	ip, r7
 801ac62:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801adf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801ac66:	bfc8      	it	gt
 801ac68:	1a8f      	subgt	r7, r1, r2
 801ac6a:	f89c c000 	ldrb.w	ip, [ip]
 801ac6e:	bfc8      	it	gt
 801ac70:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801ac74:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801ac78:	f1bc 0f00 	cmp.w	ip, #0
 801ac7c:	d176      	bne.n	801ad6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801ac7e:	4287      	cmp	r7, r0
 801ac80:	bf14      	ite	ne
 801ac82:	2100      	movne	r1, #0
 801ac84:	2101      	moveq	r1, #1
 801ac86:	2f00      	cmp	r7, #0
 801ac88:	9107      	str	r1, [sp, #28]
 801ac8a:	dd73      	ble.n	801ad74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ac8c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801ac90:	2900      	cmp	r1, #0
 801ac92:	9104      	str	r1, [sp, #16]
 801ac94:	dd6e      	ble.n	801ad74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ac96:	f8b9 1000 	ldrh.w	r1, [r9]
 801ac9a:	a80e      	add	r0, sp, #56	@ 0x38
 801ac9c:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801aca0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801aca4:	1a5b      	subs	r3, r3, r1
 801aca6:	a910      	add	r1, sp, #64	@ 0x40
 801aca8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801acac:	b21b      	sxth	r3, r3
 801acae:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801acb2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801adf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801acb6:	9305      	str	r3, [sp, #20]
 801acb8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801acbc:	1ad2      	subs	r2, r2, r3
 801acbe:	b213      	sxth	r3, r2
 801acc0:	9306      	str	r3, [sp, #24]
 801acc2:	9b05      	ldr	r3, [sp, #20]
 801acc4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801acc8:	9b06      	ldr	r3, [sp, #24]
 801acca:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801acce:	9b04      	ldr	r3, [sp, #16]
 801acd0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801acd4:	2300      	movs	r3, #0
 801acd6:	9310      	str	r3, [sp, #64]	@ 0x40
 801acd8:	f7f8 fc8c 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801acdc:	4640      	mov	r0, r8
 801acde:	f7f8 fc45 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ace2:	a810      	add	r0, sp, #64	@ 0x40
 801ace4:	f7f8 fc42 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ace8:	4b41      	ldr	r3, [pc, #260]	@ (801adf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801acea:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801acee:	4628      	mov	r0, r5
 801acf0:	881b      	ldrh	r3, [r3, #0]
 801acf2:	9308      	str	r3, [sp, #32]
 801acf4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801acf8:	b21b      	sxth	r3, r3
 801acfa:	9303      	str	r3, [sp, #12]
 801acfc:	682b      	ldr	r3, [r5, #0]
 801acfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad00:	4798      	blx	r3
 801ad02:	9a03      	ldr	r2, [sp, #12]
 801ad04:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801ad08:	4681      	mov	r9, r0
 801ad0a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ad0e:	fb13 f302 	smulbb	r3, r3, r2
 801ad12:	2203      	movs	r2, #3
 801ad14:	f8da 0000 	ldr.w	r0, [sl]
 801ad18:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ad1c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801ad1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ad20:	441d      	add	r5, r3
 801ad22:	6803      	ldr	r3, [r0, #0]
 801ad24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad26:	4798      	blx	r3
 801ad28:	9009      	str	r0, [sp, #36]	@ 0x24
 801ad2a:	f8da 0000 	ldr.w	r0, [sl]
 801ad2e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ad32:	6803      	ldr	r3, [r0, #0]
 801ad34:	910a      	str	r1, [sp, #40]	@ 0x28
 801ad36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad38:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801ad3c:	4798      	blx	r3
 801ad3e:	f010 0f01 	tst.w	r0, #1
 801ad42:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801ad46:	d01e      	beq.n	801ad86 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801ad48:	f8da 0000 	ldr.w	r0, [sl]
 801ad4c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ad50:	6803      	ldr	r3, [r0, #0]
 801ad52:	9200      	str	r2, [sp, #0]
 801ad54:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801ad56:	462b      	mov	r3, r5
 801ad58:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ad5c:	47b0      	blx	r6
 801ad5e:	9b05      	ldr	r3, [sp, #20]
 801ad60:	80a7      	strh	r7, [r4, #4]
 801ad62:	8023      	strh	r3, [r4, #0]
 801ad64:	9b06      	ldr	r3, [sp, #24]
 801ad66:	8063      	strh	r3, [r4, #2]
 801ad68:	9b04      	ldr	r3, [sp, #16]
 801ad6a:	e007      	b.n	801ad7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801ad6c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801ad70:	4288      	cmp	r0, r1
 801ad72:	e785      	b.n	801ac80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801ad74:	2300      	movs	r3, #0
 801ad76:	8023      	strh	r3, [r4, #0]
 801ad78:	8063      	strh	r3, [r4, #2]
 801ad7a:	80a3      	strh	r3, [r4, #4]
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	80e3      	strh	r3, [r4, #6]
 801ad80:	b013      	add	sp, #76	@ 0x4c
 801ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad86:	fb09 f606 	mul.w	r6, r9, r6
 801ad8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad8c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801ad90:	9a07      	ldr	r2, [sp, #28]
 801ad92:	4433      	add	r3, r6
 801ad94:	461e      	mov	r6, r3
 801ad96:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801ad9a:	b16a      	cbz	r2, 801adb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801ad9c:	9a08      	ldr	r2, [sp, #32]
 801ad9e:	4593      	cmp	fp, r2
 801ada0:	d10a      	bne.n	801adb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801ada2:	f8da 0000 	ldr.w	r0, [sl]
 801ada6:	fb09 f303 	mul.w	r3, r9, r3
 801adaa:	4629      	mov	r1, r5
 801adac:	6802      	ldr	r2, [r0, #0]
 801adae:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801adb2:	4632      	mov	r2, r6
 801adb4:	47d0      	blx	sl
 801adb6:	e7d2      	b.n	801ad5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801adb8:	9a03      	ldr	r2, [sp, #12]
 801adba:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801adf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801adbe:	fb02 5803 	mla	r8, r2, r3, r5
 801adc2:	4545      	cmp	r5, r8
 801adc4:	d2cb      	bcs.n	801ad5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801adc6:	f8db 0000 	ldr.w	r0, [fp]
 801adca:	4629      	mov	r1, r5
 801adcc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801add0:	6802      	ldr	r2, [r0, #0]
 801add2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801add6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801adda:	4632      	mov	r2, r6
 801addc:	47d0      	blx	sl
 801adde:	9b03      	ldr	r3, [sp, #12]
 801ade0:	444e      	add	r6, r9
 801ade2:	441d      	add	r5, r3
 801ade4:	e7ed      	b.n	801adc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801ade6:	bf00      	nop
 801ade8:	24028498 	.word	0x24028498
 801adec:	2402849a 	.word	0x2402849a
 801adf0:	2402849e 	.word	0x2402849e
 801adf4:	2402849c 	.word	0x2402849c
 801adf8:	240284a4 	.word	0x240284a4

0801adfc <_ZN8touchgfx8LCD24bppC1Ev>:
 801adfc:	2200      	movs	r2, #0
 801adfe:	490e      	ldr	r1, [pc, #56]	@ (801ae38 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801ae00:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801ae04:	6001      	str	r1, [r0, #0]
 801ae06:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ae0a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ae0e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801ae12:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801ae16:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801ae1a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801ae1e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801ae22:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801ae26:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801ae2a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801ae2e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801ae32:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801ae36:	4770      	bx	lr
 801ae38:	08026598 	.word	0x08026598

0801ae3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae40:	b091      	sub	sp, #68	@ 0x44
 801ae42:	4607      	mov	r7, r0
 801ae44:	4688      	mov	r8, r1
 801ae46:	6810      	ldr	r0, [r2, #0]
 801ae48:	6851      	ldr	r1, [r2, #4]
 801ae4a:	ac0c      	add	r4, sp, #48	@ 0x30
 801ae4c:	4616      	mov	r6, r2
 801ae4e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801ae52:	4d64      	ldr	r5, [pc, #400]	@ (801afe4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ae54:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801afe8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801ae58:	c403      	stmia	r4!, {r0, r1}
 801ae5a:	6818      	ldr	r0, [r3, #0]
 801ae5c:	ac0e      	add	r4, sp, #56	@ 0x38
 801ae5e:	6859      	ldr	r1, [r3, #4]
 801ae60:	c403      	stmia	r4!, {r0, r1}
 801ae62:	a80c      	add	r0, sp, #48	@ 0x30
 801ae64:	f7f8 fb82 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae68:	4631      	mov	r1, r6
 801ae6a:	a80e      	add	r0, sp, #56	@ 0x38
 801ae6c:	f7f8 fbc2 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae70:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ae74:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ae78:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ae7c:	6828      	ldr	r0, [r5, #0]
 801ae7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ae82:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801ae86:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801ae8a:	440f      	add	r7, r1
 801ae8c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ae90:	440a      	add	r2, r1
 801ae92:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801ae96:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801ae9a:	4413      	add	r3, r2
 801ae9c:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801aea0:	6803      	ldr	r3, [r0, #0]
 801aea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aea4:	4798      	blx	r3
 801aea6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801aeaa:	6828      	ldr	r0, [r5, #0]
 801aeac:	d01f      	beq.n	801aeee <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801aeae:	2201      	movs	r2, #1
 801aeb0:	2500      	movs	r5, #0
 801aeb2:	6801      	ldr	r1, [r0, #0]
 801aeb4:	b2a4      	uxth	r4, r4
 801aeb6:	b2b6      	uxth	r6, r6
 801aeb8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801aebc:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801aec0:	250b      	movs	r5, #11
 801aec2:	9507      	str	r5, [sp, #28]
 801aec4:	f8ba 5000 	ldrh.w	r5, [sl]
 801aec8:	f8cd 9010 	str.w	r9, [sp, #16]
 801aecc:	9602      	str	r6, [sp, #8]
 801aece:	9401      	str	r4, [sp, #4]
 801aed0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801aed4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801aed8:	9203      	str	r2, [sp, #12]
 801aeda:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801aede:	9200      	str	r2, [sp, #0]
 801aee0:	4642      	mov	r2, r8
 801aee2:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801aee4:	4639      	mov	r1, r7
 801aee6:	47a0      	blx	r4
 801aee8:	b011      	add	sp, #68	@ 0x44
 801aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeee:	6803      	ldr	r3, [r0, #0]
 801aef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aef2:	4798      	blx	r3
 801aef4:	f8ba 5000 	ldrh.w	r5, [sl]
 801aef8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801aefc:	f04f 0e04 	mov.w	lr, #4
 801af00:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801af04:	436e      	muls	r6, r5
 801af06:	fb05 2303 	mla	r3, r5, r3, r2
 801af0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801af0e:	1b2d      	subs	r5, r5, r4
 801af10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af18:	4418      	add	r0, r3
 801af1a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801af1e:	1982      	adds	r2, r0, r6
 801af20:	1b1b      	subs	r3, r3, r4
 801af22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801af26:	930b      	str	r3, [sp, #44]	@ 0x2c
 801af28:	4290      	cmp	r0, r2
 801af2a:	d254      	bcs.n	801afd6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801af2c:	eb00 0a04 	add.w	sl, r0, r4
 801af30:	4550      	cmp	r0, sl
 801af32:	d24c      	bcs.n	801afce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801af34:	f817 1b01 	ldrb.w	r1, [r7], #1
 801af38:	fb1e e101 	smlabb	r1, lr, r1, lr
 801af3c:	eb08 0c01 	add.w	ip, r8, r1
 801af40:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801af44:	b173      	cbz	r3, 801af64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801af46:	2bff      	cmp	r3, #255	@ 0xff
 801af48:	f818 b001 	ldrb.w	fp, [r8, r1]
 801af4c:	d10c      	bne.n	801af68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af4e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801af52:	d109      	bne.n	801af68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af54:	f880 b000 	strb.w	fp, [r0]
 801af58:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801af5c:	7043      	strb	r3, [r0, #1]
 801af5e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801af62:	7083      	strb	r3, [r0, #2]
 801af64:	3003      	adds	r0, #3
 801af66:	e7e3      	b.n	801af30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801af68:	fb09 f103 	mul.w	r1, r9, r3
 801af6c:	1c4b      	adds	r3, r1, #1
 801af6e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801af72:	7801      	ldrb	r1, [r0, #0]
 801af74:	121b      	asrs	r3, r3, #8
 801af76:	b29e      	uxth	r6, r3
 801af78:	43db      	mvns	r3, r3
 801af7a:	fb1b fb06 	smulbb	fp, fp, r6
 801af7e:	b2db      	uxtb	r3, r3
 801af80:	fb01 b103 	mla	r1, r1, r3, fp
 801af84:	b289      	uxth	r1, r1
 801af86:	f101 0b01 	add.w	fp, r1, #1
 801af8a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801af8e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801af92:	fb1b fb03 	smulbb	fp, fp, r3
 801af96:	1209      	asrs	r1, r1, #8
 801af98:	7001      	strb	r1, [r0, #0]
 801af9a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801af9e:	fb01 b106 	mla	r1, r1, r6, fp
 801afa2:	b289      	uxth	r1, r1
 801afa4:	f101 0b01 	add.w	fp, r1, #1
 801afa8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801afac:	1209      	asrs	r1, r1, #8
 801afae:	7041      	strb	r1, [r0, #1]
 801afb0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801afb4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801afb8:	fb1c f303 	smulbb	r3, ip, r3
 801afbc:	fb01 3606 	mla	r6, r1, r6, r3
 801afc0:	b2b6      	uxth	r6, r6
 801afc2:	1c73      	adds	r3, r6, #1
 801afc4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801afc8:	1236      	asrs	r6, r6, #8
 801afca:	7086      	strb	r6, [r0, #2]
 801afcc:	e7ca      	b.n	801af64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801afce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801afd0:	4428      	add	r0, r5
 801afd2:	441f      	add	r7, r3
 801afd4:	e7a8      	b.n	801af28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801afd6:	4b03      	ldr	r3, [pc, #12]	@ (801afe4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801afd8:	6818      	ldr	r0, [r3, #0]
 801afda:	6803      	ldr	r3, [r0, #0]
 801afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afde:	4798      	blx	r3
 801afe0:	e782      	b.n	801aee8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801afe2:	bf00      	nop
 801afe4:	240284a4 	.word	0x240284a4
 801afe8:	2402849e 	.word	0x2402849e

0801afec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aff0:	b091      	sub	sp, #68	@ 0x44
 801aff2:	4680      	mov	r8, r0
 801aff4:	460e      	mov	r6, r1
 801aff6:	6810      	ldr	r0, [r2, #0]
 801aff8:	6851      	ldr	r1, [r2, #4]
 801affa:	ad0c      	add	r5, sp, #48	@ 0x30
 801affc:	4614      	mov	r4, r2
 801affe:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801b002:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801b19c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801b006:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801b1a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b00a:	c503      	stmia	r5!, {r0, r1}
 801b00c:	6818      	ldr	r0, [r3, #0]
 801b00e:	ad0e      	add	r5, sp, #56	@ 0x38
 801b010:	6859      	ldr	r1, [r3, #4]
 801b012:	c503      	stmia	r5!, {r0, r1}
 801b014:	a80c      	add	r0, sp, #48	@ 0x30
 801b016:	f7f8 faa9 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b01a:	4621      	mov	r1, r4
 801b01c:	a80e      	add	r0, sp, #56	@ 0x38
 801b01e:	f7f8 fae9 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b022:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b026:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b02a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b02e:	f8d9 0000 	ldr.w	r0, [r9]
 801b032:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b036:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801b03a:	eb08 0401 	add.w	r4, r8, r1
 801b03e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b042:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801b046:	440a      	add	r2, r1
 801b048:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b04c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b050:	4413      	add	r3, r2
 801b052:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b056:	6803      	ldr	r3, [r0, #0]
 801b058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b05a:	4798      	blx	r3
 801b05c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b060:	f8d9 0000 	ldr.w	r0, [r9]
 801b064:	d022      	beq.n	801b0ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b066:	2200      	movs	r2, #0
 801b068:	f04f 0c01 	mov.w	ip, #1
 801b06c:	6801      	ldr	r1, [r0, #0]
 801b06e:	b2ad      	uxth	r5, r5
 801b070:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b074:	e9cd c208 	strd	ip, r2, [sp, #32]
 801b078:	f04f 0c0b 	mov.w	ip, #11
 801b07c:	f8cd c01c 	str.w	ip, [sp, #28]
 801b080:	f8ba c000 	ldrh.w	ip, [sl]
 801b084:	9704      	str	r7, [sp, #16]
 801b086:	9502      	str	r5, [sp, #8]
 801b088:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801b08c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801b090:	9203      	str	r2, [sp, #12]
 801b092:	fa1f f288 	uxth.w	r2, r8
 801b096:	9201      	str	r2, [sp, #4]
 801b098:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b09c:	9200      	str	r2, [sp, #0]
 801b09e:	4632      	mov	r2, r6
 801b0a0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801b0a2:	4621      	mov	r1, r4
 801b0a4:	47a8      	blx	r5
 801b0a6:	b011      	add	sp, #68	@ 0x44
 801b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ac:	6803      	ldr	r3, [r0, #0]
 801b0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0b0:	4798      	blx	r3
 801b0b2:	f8ba 2000 	ldrh.w	r2, [sl]
 801b0b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b0ba:	f04f 0e03 	mov.w	lr, #3
 801b0be:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801b0c2:	4355      	muls	r5, r2
 801b0c4:	fa1f fc87 	uxth.w	ip, r7
 801b0c8:	fb02 1303 	mla	r3, r2, r3, r1
 801b0cc:	eba2 0208 	sub.w	r2, r2, r8
 801b0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b0d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b0dc:	4418      	add	r0, r3
 801b0de:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b0e0:	1943      	adds	r3, r0, r5
 801b0e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801b0e6:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801b0ea:	eba2 0208 	sub.w	r2, r2, r8
 801b0ee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b0f2:	b2ad      	uxth	r5, r5
 801b0f4:	4298      	cmp	r0, r3
 801b0f6:	d24a      	bcs.n	801b18e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801b0f8:	eb00 0908 	add.w	r9, r0, r8
 801b0fc:	4621      	mov	r1, r4
 801b0fe:	4548      	cmp	r0, r9
 801b100:	460c      	mov	r4, r1
 801b102:	d240      	bcs.n	801b186 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b104:	f04f 0a04 	mov.w	sl, #4
 801b108:	7824      	ldrb	r4, [r4, #0]
 801b10a:	2fff      	cmp	r7, #255	@ 0xff
 801b10c:	f101 0101 	add.w	r1, r1, #1
 801b110:	fb1e a404 	smlabb	r4, lr, r4, sl
 801b114:	eb06 0a04 	add.w	sl, r6, r4
 801b118:	f816 b004 	ldrb.w	fp, [r6, r4]
 801b11c:	d02b      	beq.n	801b176 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801b11e:	7804      	ldrb	r4, [r0, #0]
 801b120:	fb14 f405 	smulbb	r4, r4, r5
 801b124:	fb0b 440c 	mla	r4, fp, ip, r4
 801b128:	b2a4      	uxth	r4, r4
 801b12a:	f104 0b01 	add.w	fp, r4, #1
 801b12e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b132:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b136:	fb1b fb05 	smulbb	fp, fp, r5
 801b13a:	1224      	asrs	r4, r4, #8
 801b13c:	7004      	strb	r4, [r0, #0]
 801b13e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b142:	fb04 b40c 	mla	r4, r4, ip, fp
 801b146:	b2a4      	uxth	r4, r4
 801b148:	f104 0b01 	add.w	fp, r4, #1
 801b14c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b150:	1224      	asrs	r4, r4, #8
 801b152:	7044      	strb	r4, [r0, #1]
 801b154:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b158:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b15c:	fb1a fa05 	smulbb	sl, sl, r5
 801b160:	fb04 a40c 	mla	r4, r4, ip, sl
 801b164:	b2a4      	uxth	r4, r4
 801b166:	f104 0a01 	add.w	sl, r4, #1
 801b16a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b16e:	1224      	asrs	r4, r4, #8
 801b170:	7084      	strb	r4, [r0, #2]
 801b172:	3003      	adds	r0, #3
 801b174:	e7c3      	b.n	801b0fe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801b176:	f880 b000 	strb.w	fp, [r0]
 801b17a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801b17e:	7044      	strb	r4, [r0, #1]
 801b180:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801b184:	e7f4      	b.n	801b170 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801b186:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b188:	4420      	add	r0, r4
 801b18a:	188c      	adds	r4, r1, r2
 801b18c:	e7b2      	b.n	801b0f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801b18e:	4b03      	ldr	r3, [pc, #12]	@ (801b19c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801b190:	6818      	ldr	r0, [r3, #0]
 801b192:	6803      	ldr	r3, [r0, #0]
 801b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b196:	4798      	blx	r3
 801b198:	e785      	b.n	801b0a6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801b19a:	bf00      	nop
 801b19c:	240284a4 	.word	0x240284a4
 801b1a0:	2402849e 	.word	0x2402849e

0801b1a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b1a4:	b4f0      	push	{r4, r5, r6, r7}
 801b1a6:	460c      	mov	r4, r1
 801b1a8:	4611      	mov	r1, r2
 801b1aa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	780f      	ldrb	r7, [r1, #0]
 801b1b2:	9b04      	ldr	r3, [sp, #16]
 801b1b4:	784e      	ldrb	r6, [r1, #1]
 801b1b6:	b11f      	cbz	r7, 801b1c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801b1b8:	2f01      	cmp	r7, #1
 801b1ba:	d01d      	beq.n	801b1f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801b1bc:	bcf0      	pop	{r4, r5, r6, r7}
 801b1be:	4770      	bx	lr
 801b1c0:	2e03      	cmp	r6, #3
 801b1c2:	d8fb      	bhi.n	801b1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b1c4:	e8df f006 	tbb	[pc, r6]
 801b1c8:	16140702 	.word	0x16140702
 801b1cc:	9504      	str	r5, [sp, #16]
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	bcf0      	pop	{r4, r5, r6, r7}
 801b1d2:	f7ff be33 	b.w	801ae3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b1d6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b1d8:	2800      	cmp	r0, #0
 801b1da:	d0ef      	beq.n	801b1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b1dc:	6806      	ldr	r6, [r0, #0]
 801b1de:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b1e2:	68f5      	ldr	r5, [r6, #12]
 801b1e4:	4613      	mov	r3, r2
 801b1e6:	46ac      	mov	ip, r5
 801b1e8:	460a      	mov	r2, r1
 801b1ea:	4621      	mov	r1, r4
 801b1ec:	bcf0      	pop	{r4, r5, r6, r7}
 801b1ee:	4760      	bx	ip
 801b1f0:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b1f2:	e7f1      	b.n	801b1d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b1f4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b1f6:	e7ef      	b.n	801b1d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801b1f8:	2e03      	cmp	r6, #3
 801b1fa:	d8df      	bhi.n	801b1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b1fc:	e8df f006 	tbb	[pc, r6]
 801b200:	110f0702 	.word	0x110f0702
 801b204:	9504      	str	r5, [sp, #16]
 801b206:	4620      	mov	r0, r4
 801b208:	bcf0      	pop	{r4, r5, r6, r7}
 801b20a:	f7ff beef 	b.w	801afec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b20e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801b210:	2800      	cmp	r0, #0
 801b212:	d0d3      	beq.n	801b1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801b214:	6806      	ldr	r6, [r0, #0]
 801b216:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801b21a:	68b5      	ldr	r5, [r6, #8]
 801b21c:	e7e2      	b.n	801b1e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801b21e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801b220:	e7f6      	b.n	801b210 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801b222:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801b224:	e7f4      	b.n	801b210 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801b228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801b228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b22c:	4605      	mov	r5, r0
 801b22e:	b08f      	sub	sp, #60	@ 0x3c
 801b230:	460c      	mov	r4, r1
 801b232:	461f      	mov	r7, r3
 801b234:	2b00      	cmp	r3, #0
 801b236:	d052      	beq.n	801b2de <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b238:	6808      	ldr	r0, [r1, #0]
 801b23a:	ab0a      	add	r3, sp, #40	@ 0x28
 801b23c:	6849      	ldr	r1, [r1, #4]
 801b23e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801b408 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801b242:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801b40c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801b246:	c303      	stmia	r3!, {r0, r1}
 801b248:	6810      	ldr	r0, [r2, #0]
 801b24a:	ab0c      	add	r3, sp, #48	@ 0x30
 801b24c:	6851      	ldr	r1, [r2, #4]
 801b24e:	c303      	stmia	r3!, {r0, r1}
 801b250:	a80a      	add	r0, sp, #40	@ 0x28
 801b252:	f7f8 f98b 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b256:	4621      	mov	r1, r4
 801b258:	a80c      	add	r0, sp, #48	@ 0x30
 801b25a:	f7f8 f9cb 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b25e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b262:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b266:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b26a:	f8d8 0000 	ldr.w	r0, [r8]
 801b26e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b272:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801b276:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801b27a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801b27e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801b282:	440a      	add	r2, r1
 801b284:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b288:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801b28c:	4413      	add	r3, r2
 801b28e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b292:	6803      	ldr	r3, [r0, #0]
 801b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b296:	4798      	blx	r3
 801b298:	2fff      	cmp	r7, #255	@ 0xff
 801b29a:	d023      	beq.n	801b2e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801b29c:	f010 0f04 	tst.w	r0, #4
 801b2a0:	f8d8 0000 	ldr.w	r0, [r8]
 801b2a4:	d021      	beq.n	801b2ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801b2a6:	2100      	movs	r1, #0
 801b2a8:	f04f 0e01 	mov.w	lr, #1
 801b2ac:	f8d0 c000 	ldr.w	ip, [r0]
 801b2b0:	b2a4      	uxth	r4, r4
 801b2b2:	9106      	str	r1, [sp, #24]
 801b2b4:	b2b6      	uxth	r6, r6
 801b2b6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801b2ba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801b2be:	e9cd e107 	strd	lr, r1, [sp, #28]
 801b2c2:	f8b9 e000 	ldrh.w	lr, [r9]
 801b2c6:	9703      	str	r7, [sp, #12]
 801b2c8:	9401      	str	r4, [sp, #4]
 801b2ca:	9600      	str	r6, [sp, #0]
 801b2cc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801b2d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b2d4:	9102      	str	r1, [sp, #8]
 801b2d6:	4629      	mov	r1, r5
 801b2d8:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801b2dc:	47a0      	blx	r4
 801b2de:	b00f      	add	sp, #60	@ 0x3c
 801b2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2e4:	f010 0f01 	tst.w	r0, #1
 801b2e8:	e7da      	b.n	801b2a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801b2ea:	6803      	ldr	r3, [r0, #0]
 801b2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b2ee:	4798      	blx	r3
 801b2f0:	f8b9 1000 	ldrh.w	r1, [r9]
 801b2f4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b2f8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801b2fc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b300:	434c      	muls	r4, r1
 801b302:	2fff      	cmp	r7, #255	@ 0xff
 801b304:	fb01 2303 	mla	r3, r1, r3, r2
 801b308:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b30c:	eba1 0106 	sub.w	r1, r1, r6
 801b310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b314:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b318:	4418      	add	r0, r3
 801b31a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801b31e:	eba3 0606 	sub.w	r6, r3, r6
 801b322:	4404      	add	r4, r0
 801b324:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801b328:	d04a      	beq.n	801b3c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801b32a:	43fa      	mvns	r2, r7
 801b32c:	b2bb      	uxth	r3, r7
 801b32e:	b2d7      	uxtb	r7, r2
 801b330:	42a0      	cmp	r0, r4
 801b332:	d263      	bcs.n	801b3fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b334:	eb00 0e0c 	add.w	lr, r0, ip
 801b338:	4586      	cmp	lr, r0
 801b33a:	f100 0803 	add.w	r8, r0, #3
 801b33e:	d93a      	bls.n	801b3b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801b340:	f835 2b02 	ldrh.w	r2, [r5], #2
 801b344:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801b348:	00d0      	lsls	r0, r2, #3
 801b34a:	fb19 f907 	smulbb	r9, r9, r7
 801b34e:	b2c0      	uxtb	r0, r0
 801b350:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b354:	fb00 9003 	mla	r0, r0, r3, r9
 801b358:	b280      	uxth	r0, r0
 801b35a:	f100 0901 	add.w	r9, r0, #1
 801b35e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b362:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801b366:	fb19 f907 	smulbb	r9, r9, r7
 801b36a:	1200      	asrs	r0, r0, #8
 801b36c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801b370:	10d0      	asrs	r0, r2, #3
 801b372:	1212      	asrs	r2, r2, #8
 801b374:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801b378:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801b37c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801b380:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b384:	fb00 9003 	mla	r0, r0, r3, r9
 801b388:	b280      	uxth	r0, r0
 801b38a:	f100 0901 	add.w	r9, r0, #1
 801b38e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801b392:	1200      	asrs	r0, r0, #8
 801b394:	f808 0c02 	strb.w	r0, [r8, #-2]
 801b398:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801b39c:	fb10 f007 	smulbb	r0, r0, r7
 801b3a0:	fb02 0203 	mla	r2, r2, r3, r0
 801b3a4:	b292      	uxth	r2, r2
 801b3a6:	1c50      	adds	r0, r2, #1
 801b3a8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b3ac:	4640      	mov	r0, r8
 801b3ae:	1212      	asrs	r2, r2, #8
 801b3b0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801b3b4:	e7c0      	b.n	801b338 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801b3b6:	4408      	add	r0, r1
 801b3b8:	4435      	add	r5, r6
 801b3ba:	e7b9      	b.n	801b330 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801b3bc:	4408      	add	r0, r1
 801b3be:	4435      	add	r5, r6
 801b3c0:	42a0      	cmp	r0, r4
 801b3c2:	d21b      	bcs.n	801b3fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801b3c4:	eb00 070c 	add.w	r7, r0, ip
 801b3c8:	42b8      	cmp	r0, r7
 801b3ca:	d2f7      	bcs.n	801b3bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801b3cc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801b3d0:	3003      	adds	r0, #3
 801b3d2:	00da      	lsls	r2, r3, #3
 801b3d4:	b2d2      	uxtb	r2, r2
 801b3d6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801b3da:	f800 2c03 	strb.w	r2, [r0, #-3]
 801b3de:	10da      	asrs	r2, r3, #3
 801b3e0:	121b      	asrs	r3, r3, #8
 801b3e2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801b3e6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b3ea:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b3ee:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b3f2:	f800 2c02 	strb.w	r2, [r0, #-2]
 801b3f6:	f800 3c01 	strb.w	r3, [r0, #-1]
 801b3fa:	e7e5      	b.n	801b3c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801b3fc:	4b02      	ldr	r3, [pc, #8]	@ (801b408 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801b3fe:	6818      	ldr	r0, [r3, #0]
 801b400:	6803      	ldr	r3, [r0, #0]
 801b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b404:	4798      	blx	r3
 801b406:	e76a      	b.n	801b2de <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801b408:	240284a4 	.word	0x240284a4
 801b40c:	2402849e 	.word	0x2402849e

0801b410 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b414:	b08a      	sub	sp, #40	@ 0x28
 801b416:	460d      	mov	r5, r1
 801b418:	4604      	mov	r4, r0
 801b41a:	461e      	mov	r6, r3
 801b41c:	6808      	ldr	r0, [r1, #0]
 801b41e:	ab06      	add	r3, sp, #24
 801b420:	6849      	ldr	r1, [r1, #4]
 801b422:	4f5d      	ldr	r7, [pc, #372]	@ (801b598 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801b424:	c303      	stmia	r3!, {r0, r1}
 801b426:	6810      	ldr	r0, [r2, #0]
 801b428:	ab08      	add	r3, sp, #32
 801b42a:	6851      	ldr	r1, [r2, #4]
 801b42c:	c303      	stmia	r3!, {r0, r1}
 801b42e:	a806      	add	r0, sp, #24
 801b430:	f7f8 f89c 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b434:	4629      	mov	r1, r5
 801b436:	a808      	add	r0, sp, #32
 801b438:	f7f8 f8dc 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b43c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b440:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b444:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b448:	6838      	ldr	r0, [r7, #0]
 801b44a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b44e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801b452:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801b456:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b45a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b45e:	440a      	add	r2, r1
 801b460:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b464:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b468:	4413      	add	r3, r2
 801b46a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b46e:	6803      	ldr	r3, [r0, #0]
 801b470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b472:	4798      	blx	r3
 801b474:	2eff      	cmp	r6, #255	@ 0xff
 801b476:	d119      	bne.n	801b4ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b478:	f010 0f20 	tst.w	r0, #32
 801b47c:	6838      	ldr	r0, [r7, #0]
 801b47e:	d018      	beq.n	801b4b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b480:	b2ad      	uxth	r5, r5
 801b482:	2700      	movs	r7, #0
 801b484:	6801      	ldr	r1, [r0, #0]
 801b486:	9501      	str	r5, [sp, #4]
 801b488:	fa1f f588 	uxth.w	r5, r8
 801b48c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801b490:	9500      	str	r5, [sp, #0]
 801b492:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b496:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801b49a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b49e:	9602      	str	r6, [sp, #8]
 801b4a0:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801b4a2:	4621      	mov	r1, r4
 801b4a4:	47a8      	blx	r5
 801b4a6:	b00a      	add	sp, #40	@ 0x28
 801b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ac:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801b4b0:	e7e4      	b.n	801b47c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801b4b2:	6803      	ldr	r3, [r0, #0]
 801b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4b6:	4798      	blx	r3
 801b4b8:	4b38      	ldr	r3, [pc, #224]	@ (801b59c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801b4ba:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b4be:	f8b3 c000 	ldrh.w	ip, [r3]
 801b4c2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b4c6:	fb0c f505 	mul.w	r5, ip, r5
 801b4ca:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801b4ce:	fb0c 2303 	mla	r3, ip, r3, r2
 801b4d2:	ebac 0c08 	sub.w	ip, ip, r8
 801b4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b4da:	ebae 0e08 	sub.w	lr, lr, r8
 801b4de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4e2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b4e6:	4418      	add	r0, r3
 801b4e8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b4ec:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b4f0:	4405      	add	r5, r0
 801b4f2:	42a8      	cmp	r0, r5
 801b4f4:	d24a      	bcs.n	801b58c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801b4f6:	eb00 0803 	add.w	r8, r0, r3
 801b4fa:	4540      	cmp	r0, r8
 801b4fc:	d243      	bcs.n	801b586 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801b4fe:	78e2      	ldrb	r2, [r4, #3]
 801b500:	b15a      	cbz	r2, 801b51a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b502:	2aff      	cmp	r2, #255	@ 0xff
 801b504:	f894 9000 	ldrb.w	r9, [r4]
 801b508:	d10a      	bne.n	801b520 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b50a:	2eff      	cmp	r6, #255	@ 0xff
 801b50c:	d108      	bne.n	801b520 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b50e:	f880 9000 	strb.w	r9, [r0]
 801b512:	7862      	ldrb	r2, [r4, #1]
 801b514:	7042      	strb	r2, [r0, #1]
 801b516:	78a2      	ldrb	r2, [r4, #2]
 801b518:	7082      	strb	r2, [r0, #2]
 801b51a:	3003      	adds	r0, #3
 801b51c:	3404      	adds	r4, #4
 801b51e:	e7ec      	b.n	801b4fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801b520:	4372      	muls	r2, r6
 801b522:	1c51      	adds	r1, r2, #1
 801b524:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801b528:	1209      	asrs	r1, r1, #8
 801b52a:	fa1f fa81 	uxth.w	sl, r1
 801b52e:	43c9      	mvns	r1, r1
 801b530:	fb19 f90a 	smulbb	r9, r9, sl
 801b534:	b2ca      	uxtb	r2, r1
 801b536:	7801      	ldrb	r1, [r0, #0]
 801b538:	fb01 9902 	mla	r9, r1, r2, r9
 801b53c:	fa1f f989 	uxth.w	r9, r9
 801b540:	f109 0101 	add.w	r1, r9, #1
 801b544:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801b548:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b54c:	f880 9000 	strb.w	r9, [r0]
 801b550:	f890 9001 	ldrb.w	r9, [r0, #1]
 801b554:	7861      	ldrb	r1, [r4, #1]
 801b556:	fb19 f902 	smulbb	r9, r9, r2
 801b55a:	fb01 910a 	mla	r1, r1, sl, r9
 801b55e:	b289      	uxth	r1, r1
 801b560:	f101 0901 	add.w	r9, r1, #1
 801b564:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801b568:	1209      	asrs	r1, r1, #8
 801b56a:	7041      	strb	r1, [r0, #1]
 801b56c:	7881      	ldrb	r1, [r0, #2]
 801b56e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801b572:	fb11 f202 	smulbb	r2, r1, r2
 801b576:	fb09 220a 	mla	r2, r9, sl, r2
 801b57a:	b292      	uxth	r2, r2
 801b57c:	1c51      	adds	r1, r2, #1
 801b57e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b582:	1212      	asrs	r2, r2, #8
 801b584:	e7c8      	b.n	801b518 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801b586:	4460      	add	r0, ip
 801b588:	4474      	add	r4, lr
 801b58a:	e7b2      	b.n	801b4f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801b58c:	6838      	ldr	r0, [r7, #0]
 801b58e:	6803      	ldr	r3, [r0, #0]
 801b590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b592:	4798      	blx	r3
 801b594:	e787      	b.n	801b4a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b596:	bf00      	nop
 801b598:	240284a4 	.word	0x240284a4
 801b59c:	2402849e 	.word	0x2402849e

0801b5a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5a4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801b5a8:	4607      	mov	r7, r0
 801b5aa:	460c      	mov	r4, r1
 801b5ac:	4692      	mov	sl, r2
 801b5ae:	4699      	mov	r9, r3
 801b5b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b5b2:	b335      	cbz	r5, 801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b5b4:	4608      	mov	r0, r1
 801b5b6:	f7fb fd93 	bl	80170e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b5ba:	4680      	mov	r8, r0
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f7fb fdc3 	bl	8017148 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b5c2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f8ad a008 	strh.w	sl, [sp, #8]
 801b5cc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801b5d0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801b5d4:	f7fb fefa 	bl	80173cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b5d8:	2810      	cmp	r0, #16
 801b5da:	d812      	bhi.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b5dc:	e8df f000 	tbb	[pc, r0]
 801b5e0:	11092d24 	.word	0x11092d24
 801b5e4:	11111111 	.word	0x11111111
 801b5e8:	14111111 	.word	0x14111111
 801b5ec:	4c111111 	.word	0x4c111111
 801b5f0:	3c          	.byte	0x3c
 801b5f1:	00          	.byte	0x00
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f7fb fe66 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b5f8:	462b      	mov	r3, r5
 801b5fa:	4632      	mov	r2, r6
 801b5fc:	a902      	add	r1, sp, #8
 801b5fe:	f7ff ff07 	bl	801b410 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b602:	b004      	add	sp, #16
 801b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b608:	4620      	mov	r0, r4
 801b60a:	f7fb fe5b 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b60e:	4680      	mov	r8, r0
 801b610:	4620      	mov	r0, r4
 801b612:	f7fb fe87 	bl	8017324 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b616:	ab02      	add	r3, sp, #8
 801b618:	4602      	mov	r2, r0
 801b61a:	4641      	mov	r1, r8
 801b61c:	4638      	mov	r0, r7
 801b61e:	e9cd 6500 	strd	r6, r5, [sp]
 801b622:	f7ff fdbf 	bl	801b1a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b626:	e7ec      	b.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b628:	4620      	mov	r0, r4
 801b62a:	f7fb fe4b 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b62e:	462b      	mov	r3, r5
 801b630:	4632      	mov	r2, r6
 801b632:	a902      	add	r1, sp, #8
 801b634:	f7ff fdf8 	bl	801b228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b638:	e7e3      	b.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b63a:	683b      	ldr	r3, [r7, #0]
 801b63c:	4620      	mov	r0, r4
 801b63e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b642:	f7fb fe3f 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b646:	2300      	movs	r3, #0
 801b648:	4601      	mov	r1, r0
 801b64a:	aa02      	add	r2, sp, #8
 801b64c:	4638      	mov	r0, r7
 801b64e:	e9cd 5300 	strd	r5, r3, [sp]
 801b652:	4633      	mov	r3, r6
 801b654:	47c0      	blx	r8
 801b656:	e7d4      	b.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b658:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801b65a:	2f00      	cmp	r7, #0
 801b65c:	d0d1      	beq.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801b664:	4620      	mov	r0, r4
 801b666:	f7fb fe2d 	bl	80172c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b66a:	9500      	str	r5, [sp, #0]
 801b66c:	4601      	mov	r1, r0
 801b66e:	4633      	mov	r3, r6
 801b670:	aa02      	add	r2, sp, #8
 801b672:	4638      	mov	r0, r7
 801b674:	47c0      	blx	r8
 801b676:	e7c4      	b.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b678:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801b67a:	2f00      	cmp	r7, #0
 801b67c:	d0c1      	beq.n	801b602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801b67e:	683b      	ldr	r3, [r7, #0]
 801b680:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b684:	e7ee      	b.n	801b664 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801b686 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b686:	b4f0      	push	{r4, r5, r6, r7}
 801b688:	4616      	mov	r6, r2
 801b68a:	461c      	mov	r4, r3
 801b68c:	460d      	mov	r5, r1
 801b68e:	9a04      	ldr	r2, [sp, #16]
 801b690:	2e01      	cmp	r6, #1
 801b692:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b696:	d00e      	beq.n	801b6b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801b698:	d303      	bcc.n	801b6a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801b69a:	2e02      	cmp	r6, #2
 801b69c:	d006      	beq.n	801b6ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801b69e:	bcf0      	pop	{r4, r5, r6, r7}
 801b6a0:	4770      	bx	lr
 801b6a2:	4621      	mov	r1, r4
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	bcf0      	pop	{r4, r5, r6, r7}
 801b6a8:	f7ff bdbe 	b.w	801b228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b6ac:	4621      	mov	r1, r4
 801b6ae:	4628      	mov	r0, r5
 801b6b0:	bcf0      	pop	{r4, r5, r6, r7}
 801b6b2:	f7ff bead 	b.w	801b410 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b6b6:	6805      	ldr	r5, [r0, #0]
 801b6b8:	2600      	movs	r6, #0
 801b6ba:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b6be:	68ed      	ldr	r5, [r5, #12]
 801b6c0:	4613      	mov	r3, r2
 801b6c2:	4622      	mov	r2, r4
 801b6c4:	46ac      	mov	ip, r5
 801b6c6:	bcf0      	pop	{r4, r5, r6, r7}
 801b6c8:	4760      	bx	ip
	...

0801b6cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b6cc:	b160      	cbz	r0, 801b6e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801b6ce:	2903      	cmp	r1, #3
 801b6d0:	d818      	bhi.n	801b704 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b6d2:	e8df f001 	tbb	[pc, r1]
 801b6d6:	1902      	.short	0x1902
 801b6d8:	1b06      	.short	0x1b06
 801b6da:	4b0e      	ldr	r3, [pc, #56]	@ (801b714 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b6dc:	8818      	ldrh	r0, [r3, #0]
 801b6de:	4240      	negs	r0, r0
 801b6e0:	4770      	bx	lr
 801b6e2:	4b0c      	ldr	r3, [pc, #48]	@ (801b714 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b6e4:	8818      	ldrh	r0, [r3, #0]
 801b6e6:	4770      	bx	lr
 801b6e8:	2903      	cmp	r1, #3
 801b6ea:	d80b      	bhi.n	801b704 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b6ec:	a301      	add	r3, pc, #4	@ (adr r3, 801b6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801b6ee:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b6f2:	bf00      	nop
 801b6f4:	0801b709 	.word	0x0801b709
 801b6f8:	0801b6e3 	.word	0x0801b6e3
 801b6fc:	0801b70d 	.word	0x0801b70d
 801b700:	0801b6db 	.word	0x0801b6db
 801b704:	2000      	movs	r0, #0
 801b706:	4770      	bx	lr
 801b708:	2001      	movs	r0, #1
 801b70a:	4770      	bx	lr
 801b70c:	f04f 30ff 	mov.w	r0, #4294967295
 801b710:	4770      	bx	lr
 801b712:	bf00      	nop
 801b714:	2402849e 	.word	0x2402849e

0801b718 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b718:	b160      	cbz	r0, 801b734 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801b71a:	2903      	cmp	r1, #3
 801b71c:	d818      	bhi.n	801b750 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b71e:	e8df f001 	tbb	[pc, r1]
 801b722:	0219      	.short	0x0219
 801b724:	051b      	.short	0x051b
 801b726:	4b0e      	ldr	r3, [pc, #56]	@ (801b760 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b728:	8818      	ldrh	r0, [r3, #0]
 801b72a:	4770      	bx	lr
 801b72c:	4b0c      	ldr	r3, [pc, #48]	@ (801b760 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b72e:	8818      	ldrh	r0, [r3, #0]
 801b730:	4240      	negs	r0, r0
 801b732:	4770      	bx	lr
 801b734:	2903      	cmp	r1, #3
 801b736:	d80b      	bhi.n	801b750 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b738:	a301      	add	r3, pc, #4	@ (adr r3, 801b740 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801b73a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b73e:	bf00      	nop
 801b740:	0801b727 	.word	0x0801b727
 801b744:	0801b759 	.word	0x0801b759
 801b748:	0801b72d 	.word	0x0801b72d
 801b74c:	0801b755 	.word	0x0801b755
 801b750:	2000      	movs	r0, #0
 801b752:	4770      	bx	lr
 801b754:	2001      	movs	r0, #1
 801b756:	4770      	bx	lr
 801b758:	f04f 30ff 	mov.w	r0, #4294967295
 801b75c:	4770      	bx	lr
 801b75e:	bf00      	nop
 801b760:	2402849e 	.word	0x2402849e

0801b764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b768:	b097      	sub	sp, #92	@ 0x5c
 801b76a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b76c:	a912      	add	r1, sp, #72	@ 0x48
 801b76e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801b772:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801b776:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801b77a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801b77e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801b782:	e881 000c 	stmia.w	r1, {r2, r3}
 801b786:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801b78a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b78c:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801b790:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801b794:	9311      	str	r3, [sp, #68]	@ 0x44
 801b796:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801b79a:	798d      	ldrb	r5, [r1, #6]
 801b79c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b79e:	7b4b      	ldrb	r3, [r1, #13]
 801b7a0:	0158      	lsls	r0, r3, #5
 801b7a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801b7a6:	4328      	orrs	r0, r5
 801b7a8:	9009      	str	r0, [sp, #36]	@ 0x24
 801b7aa:	f000 817c 	beq.w	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b7ae:	011b      	lsls	r3, r3, #4
 801b7b0:	79c8      	ldrb	r0, [r1, #7]
 801b7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b7b6:	4303      	orrs	r3, r0
 801b7b8:	930e      	str	r3, [sp, #56]	@ 0x38
 801b7ba:	f000 8174 	beq.w	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b7be:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	2f00      	cmp	r7, #0
 801b7c6:	f000 8116 	beq.w	801b9f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801b7ca:	1aff      	subs	r7, r7, r3
 801b7cc:	b2bf      	uxth	r7, r7
 801b7ce:	043b      	lsls	r3, r7, #16
 801b7d0:	d502      	bpl.n	801b7d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b7d2:	1bf6      	subs	r6, r6, r7
 801b7d4:	2700      	movs	r7, #0
 801b7d6:	b236      	sxth	r6, r6
 801b7d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b7dc:	a812      	add	r0, sp, #72	@ 0x48
 801b7de:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801b7e2:	428e      	cmp	r6, r1
 801b7e4:	b28b      	uxth	r3, r1
 801b7e6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801b7ea:	bfbf      	itttt	lt
 801b7ec:	18ff      	addlt	r7, r7, r3
 801b7ee:	1bbe      	sublt	r6, r7, r6
 801b7f0:	b2b7      	uxthlt	r7, r6
 801b7f2:	460e      	movlt	r6, r1
 801b7f4:	8891      	ldrh	r1, [r2, #4]
 801b7f6:	440b      	add	r3, r1
 801b7f8:	4631      	mov	r1, r6
 801b7fa:	b21b      	sxth	r3, r3
 801b7fc:	9310      	str	r3, [sp, #64]	@ 0x40
 801b7fe:	88d3      	ldrh	r3, [r2, #6]
 801b800:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b802:	449a      	add	sl, r3
 801b804:	fa0f f38a 	sxth.w	r3, sl
 801b808:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801b80c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b80e:	4bb5      	ldr	r3, [pc, #724]	@ (801bae4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801b810:	f893 b000 	ldrb.w	fp, [r3]
 801b814:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b818:	f1dc 0300 	rsbs	r3, ip, #0
 801b81c:	eb43 030c 	adc.w	r3, r3, ip
 801b820:	930d      	str	r3, [sp, #52]	@ 0x34
 801b822:	464b      	mov	r3, r9
 801b824:	f7f7 fd17 	bl	8013256 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b828:	4631      	mov	r1, r6
 801b82a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801b82e:	464b      	mov	r3, r9
 801b830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b832:	a812      	add	r0, sp, #72	@ 0x48
 801b834:	f7f7 fd2c 	bl	8013290 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b838:	a916      	add	r1, sp, #88	@ 0x58
 801b83a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b83e:	a815      	add	r0, sp, #84	@ 0x54
 801b840:	f7f7 fe52 	bl	80134e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b844:	f1b9 0f00 	cmp.w	r9, #0
 801b848:	f040 80d8 	bne.w	801b9fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801b84c:	f1bb 0f01 	cmp.w	fp, #1
 801b850:	f040 80dc 	bne.w	801ba0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b854:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b856:	b153      	cbz	r3, 801b86e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801b858:	2508      	movs	r5, #8
 801b85a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b85c:	fb95 f3f8 	sdiv	r3, r5, r8
 801b860:	1e5d      	subs	r5, r3, #1
 801b862:	4415      	add	r5, r2
 801b864:	fb95 f5f3 	sdiv	r5, r5, r3
 801b868:	fb15 f503 	smulbb	r5, r5, r3
 801b86c:	b2ad      	uxth	r5, r5
 801b86e:	b907      	cbnz	r7, 801b872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b870:	b16c      	cbz	r4, 801b88e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801b872:	fb04 7305 	mla	r3, r4, r5, r7
 801b876:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b878:	ebaa 0a04 	sub.w	sl, sl, r4
 801b87c:	fb08 f303 	mul.w	r3, r8, r3
 801b880:	fa1f fa8a 	uxth.w	sl, sl
 801b884:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801b888:	f003 0407 	and.w	r4, r3, #7
 801b88c:	9226      	str	r2, [sp, #152]	@ 0x98
 801b88e:	4649      	mov	r1, r9
 801b890:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b892:	f7ff ff1b 	bl	801b6cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801b896:	4683      	mov	fp, r0
 801b898:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b89a:	f7ff ff3d 	bl	801b718 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801b89e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b8a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8a2:	4681      	mov	r9, r0
 801b8a4:	1a9b      	subs	r3, r3, r2
 801b8a6:	459a      	cmp	sl, r3
 801b8a8:	bfa8      	it	ge
 801b8aa:	469a      	movge	sl, r3
 801b8ac:	f1ba 0f00 	cmp.w	sl, #0
 801b8b0:	f340 80f9 	ble.w	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b8b4:	1bf6      	subs	r6, r6, r7
 801b8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8b8:	1b9e      	subs	r6, r3, r6
 801b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8bc:	429e      	cmp	r6, r3
 801b8be:	bfd4      	ite	le
 801b8c0:	ebc7 0706 	rsble	r7, r7, r6
 801b8c4:	ebc7 0703 	rsbgt	r7, r7, r3
 801b8c8:	2f00      	cmp	r7, #0
 801b8ca:	f340 80ec 	ble.w	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b8ce:	1bed      	subs	r5, r5, r7
 801b8d0:	fb08 f305 	mul.w	r3, r8, r5
 801b8d4:	930d      	str	r3, [sp, #52]	@ 0x34
 801b8d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b8d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b8dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801b8de:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b8e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b8e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b8e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b8e8:	b2db      	uxtb	r3, r3
 801b8ea:	9310      	str	r3, [sp, #64]	@ 0x40
 801b8ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	f040 80de 	bne.w	801bab0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801b8f4:	4b7c      	ldr	r3, [pc, #496]	@ (801bae8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801b8f6:	6818      	ldr	r0, [r3, #0]
 801b8f8:	6803      	ldr	r3, [r0, #0]
 801b8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8fc:	4798      	blx	r3
 801b8fe:	2301      	movs	r3, #1
 801b900:	4a7a      	ldr	r2, [pc, #488]	@ (801baec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801b902:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801b906:	fb07 9b1b 	mls	fp, r7, fp, r9
 801b90a:	fa03 f308 	lsl.w	r3, r3, r8
 801b90e:	8811      	ldrh	r1, [r2, #0]
 801b910:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801b914:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801b918:	3b01      	subs	r3, #1
 801b91a:	fb06 bb07 	mla	fp, r6, r7, fp
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	930a      	str	r3, [sp, #40]	@ 0x28
 801b922:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801b926:	fb01 2303 	mla	r3, r1, r3, r2
 801b92a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b92e:	18c3      	adds	r3, r0, r3
 801b930:	9309      	str	r3, [sp, #36]	@ 0x24
 801b932:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b934:	781a      	ldrb	r2, [r3, #0]
 801b936:	4122      	asrs	r2, r4
 801b938:	b2d2      	uxtb	r2, r2
 801b93a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b93e:	f0c0 80d7 	bcc.w	801baf0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801b942:	46be      	mov	lr, r7
 801b944:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b946:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b94a:	f0c0 80ba 	bcc.w	801bac2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801b94e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b950:	4013      	ands	r3, r2
 801b952:	d041      	beq.n	801b9d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b954:	20ff      	movs	r0, #255	@ 0xff
 801b956:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b958:	fb90 f5f5 	sdiv	r5, r0, r5
 801b95c:	436b      	muls	r3, r5
 801b95e:	2bfe      	cmp	r3, #254	@ 0xfe
 801b960:	dd03      	ble.n	801b96a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801b962:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b964:	4285      	cmp	r5, r0
 801b966:	f000 80a5 	beq.w	801bab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801b96a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b96c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b96e:	fb15 f303 	smulbb	r3, r5, r3
 801b972:	b29b      	uxth	r3, r3
 801b974:	1c5d      	adds	r5, r3, #1
 801b976:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801b97a:	780d      	ldrb	r5, [r1, #0]
 801b97c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b980:	fa1f fc83 	uxth.w	ip, r3
 801b984:	43db      	mvns	r3, r3
 801b986:	fb10 f90c 	smulbb	r9, r0, ip
 801b98a:	b2db      	uxtb	r3, r3
 801b98c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b98e:	fb05 9503 	mla	r5, r5, r3, r9
 801b992:	b2ad      	uxth	r5, r5
 801b994:	f105 0901 	add.w	r9, r5, #1
 801b998:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b99c:	fb10 f90c 	smulbb	r9, r0, ip
 801b9a0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b9a2:	122d      	asrs	r5, r5, #8
 801b9a4:	fb10 fc0c 	smulbb	ip, r0, ip
 801b9a8:	700d      	strb	r5, [r1, #0]
 801b9aa:	784d      	ldrb	r5, [r1, #1]
 801b9ac:	fb05 9503 	mla	r5, r5, r3, r9
 801b9b0:	b2ad      	uxth	r5, r5
 801b9b2:	f105 0901 	add.w	r9, r5, #1
 801b9b6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b9ba:	122d      	asrs	r5, r5, #8
 801b9bc:	704d      	strb	r5, [r1, #1]
 801b9be:	788d      	ldrb	r5, [r1, #2]
 801b9c0:	fb05 cc03 	mla	ip, r5, r3, ip
 801b9c4:	fa1f fc8c 	uxth.w	ip, ip
 801b9c8:	f10c 0301 	add.w	r3, ip, #1
 801b9cc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b9d0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b9d4:	f881 c002 	strb.w	ip, [r1, #2]
 801b9d8:	4444      	add	r4, r8
 801b9da:	4431      	add	r1, r6
 801b9dc:	b2a4      	uxth	r4, r4
 801b9de:	2c07      	cmp	r4, #7
 801b9e0:	bf89      	itett	hi
 801b9e2:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801b9e4:	fa42 f208 	asrls.w	r2, r2, r8
 801b9e8:	2400      	movhi	r4, #0
 801b9ea:	785a      	ldrbhi	r2, [r3, #1]
 801b9ec:	bf8a      	itet	hi
 801b9ee:	3301      	addhi	r3, #1
 801b9f0:	b2d2      	uxtbls	r2, r2
 801b9f2:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801b9f4:	e7a7      	b.n	801b946 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801b9f6:	441e      	add	r6, r3
 801b9f8:	b236      	sxth	r6, r6
 801b9fa:	e6ed      	b.n	801b7d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b9fc:	f1b9 0f01 	cmp.w	r9, #1
 801ba00:	f47f af28 	bne.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba04:	f1bb 0f01 	cmp.w	fp, #1
 801ba08:	f47f af24 	bne.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba0c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801bae8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ba10:	f8db 0000 	ldr.w	r0, [fp]
 801ba14:	6803      	ldr	r3, [r0, #0]
 801ba16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ba18:	4798      	blx	r3
 801ba1a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801ba1e:	465a      	mov	r2, fp
 801ba20:	d006      	beq.n	801ba30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ba22:	f1b8 0f04 	cmp.w	r8, #4
 801ba26:	d141      	bne.n	801baac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801ba28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ba2a:	3300      	adds	r3, #0
 801ba2c:	bf18      	it	ne
 801ba2e:	2301      	movne	r3, #1
 801ba30:	0580      	lsls	r0, r0, #22
 801ba32:	d566      	bpl.n	801bb02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ba34:	f1b8 0f08 	cmp.w	r8, #8
 801ba38:	d163      	bne.n	801bb02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	bf0c      	ite	eq
 801ba3e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801ba42:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801ba46:	2f00      	cmp	r7, #0
 801ba48:	f47f af04 	bne.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba4c:	2c00      	cmp	r4, #0
 801ba4e:	f47f af01 	bne.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba54:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ba56:	18f3      	adds	r3, r6, r3
 801ba58:	4283      	cmp	r3, r0
 801ba5a:	f73f aefb 	bgt.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ba60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba62:	4403      	add	r3, r0
 801ba64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ba66:	4283      	cmp	r3, r0
 801ba68:	f73f aef4 	bgt.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ba6c:	f1b8 0f08 	cmp.w	r8, #8
 801ba70:	6810      	ldr	r0, [r2, #0]
 801ba72:	f04f 0600 	mov.w	r6, #0
 801ba76:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801ba7a:	bf18      	it	ne
 801ba7c:	3501      	addne	r5, #1
 801ba7e:	6804      	ldr	r4, [r0, #0]
 801ba80:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801ba84:	bf18      	it	ne
 801ba86:	f025 0501 	bicne.w	r5, r5, #1
 801ba8a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801ba8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ba90:	bf18      	it	ne
 801ba92:	b2ad      	uxthne	r5, r5
 801ba94:	9104      	str	r1, [sp, #16]
 801ba96:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ba98:	e9cd 5a00 	strd	r5, sl, [sp]
 801ba9c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801baa0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801baa2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801baa4:	47a0      	blx	r4
 801baa6:	b017      	add	sp, #92	@ 0x5c
 801baa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baac:	2300      	movs	r3, #0
 801baae:	e7bf      	b.n	801ba30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801bab0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801bab2:	e724      	b.n	801b8fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801bab4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bab6:	700b      	strb	r3, [r1, #0]
 801bab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801baba:	704b      	strb	r3, [r1, #1]
 801babc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801babe:	708b      	strb	r3, [r1, #2]
 801bac0:	e78a      	b.n	801b9d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801bac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bac4:	b153      	cbz	r3, 801badc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801bac6:	441c      	add	r4, r3
 801bac8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801baca:	b2a4      	uxth	r4, r4
 801bacc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801bad0:	f004 0407 	and.w	r4, r4, #7
 801bad4:	781a      	ldrb	r2, [r3, #0]
 801bad6:	9326      	str	r3, [sp, #152]	@ 0x98
 801bad8:	4122      	asrs	r2, r4
 801bada:	b2d2      	uxtb	r2, r2
 801badc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bade:	445b      	add	r3, fp
 801bae0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bae2:	e72a      	b.n	801b93a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801bae4:	2402849c 	.word	0x2402849c
 801bae8:	240284a4 	.word	0x240284a4
 801baec:	2402849e 	.word	0x2402849e
 801baf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d1d7      	bne.n	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801baf6:	4b06      	ldr	r3, [pc, #24]	@ (801bb10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801baf8:	6818      	ldr	r0, [r3, #0]
 801bafa:	6803      	ldr	r3, [r0, #0]
 801bafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bafe:	4798      	blx	r3
 801bb00:	e7d1      	b.n	801baa6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	f43f aea6 	beq.w	801b854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bb08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bb0c:	e79b      	b.n	801ba46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801bb0e:	bf00      	nop
 801bb10:	240284a4 	.word	0x240284a4

0801bb14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bb14:	b538      	push	{r3, r4, r5, lr}
 801bb16:	4c15      	ldr	r4, [pc, #84]	@ (801bb6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bb18:	4605      	mov	r5, r0
 801bb1a:	7823      	ldrb	r3, [r4, #0]
 801bb1c:	f3bf 8f5b 	dmb	ish
 801bb20:	07da      	lsls	r2, r3, #31
 801bb22:	d40b      	bmi.n	801bb3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bb24:	4620      	mov	r0, r4
 801bb26:	f006 f8d8 	bl	8021cda <__cxa_guard_acquire>
 801bb2a:	b138      	cbz	r0, 801bb3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	f006 f8e0 	bl	8021cf2 <__cxa_guard_release>
 801bb32:	4a0f      	ldr	r2, [pc, #60]	@ (801bb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bb34:	490f      	ldr	r1, [pc, #60]	@ (801bb74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bb36:	4810      	ldr	r0, [pc, #64]	@ (801bb78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bb38:	f006 f8c8 	bl	8021ccc <__aeabi_atexit>
 801bb3c:	4c0f      	ldr	r4, [pc, #60]	@ (801bb7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bb3e:	7823      	ldrb	r3, [r4, #0]
 801bb40:	f3bf 8f5b 	dmb	ish
 801bb44:	07db      	lsls	r3, r3, #31
 801bb46:	d40b      	bmi.n	801bb60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f006 f8c6 	bl	8021cda <__cxa_guard_acquire>
 801bb4e:	b138      	cbz	r0, 801bb60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bb50:	4620      	mov	r0, r4
 801bb52:	f006 f8ce 	bl	8021cf2 <__cxa_guard_release>
 801bb56:	4a06      	ldr	r2, [pc, #24]	@ (801bb70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bb58:	4909      	ldr	r1, [pc, #36]	@ (801bb80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bb5a:	480a      	ldr	r0, [pc, #40]	@ (801bb84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bb5c:	f006 f8b6 	bl	8021ccc <__aeabi_atexit>
 801bb60:	4b05      	ldr	r3, [pc, #20]	@ (801bb78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bb62:	616b      	str	r3, [r5, #20]
 801bb64:	4b07      	ldr	r3, [pc, #28]	@ (801bb84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bb66:	61ab      	str	r3, [r5, #24]
 801bb68:	bd38      	pop	{r3, r4, r5, pc}
 801bb6a:	bf00      	nop
 801bb6c:	24028588 	.word	0x24028588
 801bb70:	24000000 	.word	0x24000000
 801bb74:	08018e05 	.word	0x08018e05
 801bb78:	240000c8 	.word	0x240000c8
 801bb7c:	2402858c 	.word	0x2402858c
 801bb80:	08018e03 	.word	0x08018e03
 801bb84:	240000cc 	.word	0x240000cc

0801bb88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bb88:	b538      	push	{r3, r4, r5, lr}
 801bb8a:	4c15      	ldr	r4, [pc, #84]	@ (801bbe0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bb8c:	4605      	mov	r5, r0
 801bb8e:	7823      	ldrb	r3, [r4, #0]
 801bb90:	f3bf 8f5b 	dmb	ish
 801bb94:	07da      	lsls	r2, r3, #31
 801bb96:	d40b      	bmi.n	801bbb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f006 f89e 	bl	8021cda <__cxa_guard_acquire>
 801bb9e:	b138      	cbz	r0, 801bbb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bba0:	4620      	mov	r0, r4
 801bba2:	f006 f8a6 	bl	8021cf2 <__cxa_guard_release>
 801bba6:	4a0f      	ldr	r2, [pc, #60]	@ (801bbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bba8:	490f      	ldr	r1, [pc, #60]	@ (801bbe8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bbaa:	4810      	ldr	r0, [pc, #64]	@ (801bbec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bbac:	f006 f88e 	bl	8021ccc <__aeabi_atexit>
 801bbb0:	4c0f      	ldr	r4, [pc, #60]	@ (801bbf0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bbb2:	7823      	ldrb	r3, [r4, #0]
 801bbb4:	f3bf 8f5b 	dmb	ish
 801bbb8:	07db      	lsls	r3, r3, #31
 801bbba:	d40b      	bmi.n	801bbd4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f006 f88c 	bl	8021cda <__cxa_guard_acquire>
 801bbc2:	b138      	cbz	r0, 801bbd4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	f006 f894 	bl	8021cf2 <__cxa_guard_release>
 801bbca:	4a06      	ldr	r2, [pc, #24]	@ (801bbe4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bbcc:	4909      	ldr	r1, [pc, #36]	@ (801bbf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bbce:	480a      	ldr	r0, [pc, #40]	@ (801bbf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bbd0:	f006 f87c 	bl	8021ccc <__aeabi_atexit>
 801bbd4:	4b05      	ldr	r3, [pc, #20]	@ (801bbec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bbd6:	60eb      	str	r3, [r5, #12]
 801bbd8:	4b07      	ldr	r3, [pc, #28]	@ (801bbf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bbda:	612b      	str	r3, [r5, #16]
 801bbdc:	bd38      	pop	{r3, r4, r5, pc}
 801bbde:	bf00      	nop
 801bbe0:	24028568 	.word	0x24028568
 801bbe4:	24000000 	.word	0x24000000
 801bbe8:	08018e09 	.word	0x08018e09
 801bbec:	240000a8 	.word	0x240000a8
 801bbf0:	2402856c 	.word	0x2402856c
 801bbf4:	08018e07 	.word	0x08018e07
 801bbf8:	240000ac 	.word	0x240000ac

0801bbfc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801bbfc:	b510      	push	{r4, lr}
 801bbfe:	4604      	mov	r4, r0
 801bc00:	f7ff ff88 	bl	801bb14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bc04:	4620      	mov	r0, r4
 801bc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc0a:	f7ff bfbd 	b.w	801bb88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bc10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bc10:	b538      	push	{r3, r4, r5, lr}
 801bc12:	4c15      	ldr	r4, [pc, #84]	@ (801bc68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bc14:	4605      	mov	r5, r0
 801bc16:	7823      	ldrb	r3, [r4, #0]
 801bc18:	f3bf 8f5b 	dmb	ish
 801bc1c:	07da      	lsls	r2, r3, #31
 801bc1e:	d40b      	bmi.n	801bc38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bc20:	4620      	mov	r0, r4
 801bc22:	f006 f85a 	bl	8021cda <__cxa_guard_acquire>
 801bc26:	b138      	cbz	r0, 801bc38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f006 f862 	bl	8021cf2 <__cxa_guard_release>
 801bc2e:	4a0f      	ldr	r2, [pc, #60]	@ (801bc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bc30:	490f      	ldr	r1, [pc, #60]	@ (801bc70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bc32:	4810      	ldr	r0, [pc, #64]	@ (801bc74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bc34:	f006 f84a 	bl	8021ccc <__aeabi_atexit>
 801bc38:	4c0f      	ldr	r4, [pc, #60]	@ (801bc78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bc3a:	7823      	ldrb	r3, [r4, #0]
 801bc3c:	f3bf 8f5b 	dmb	ish
 801bc40:	07db      	lsls	r3, r3, #31
 801bc42:	d40b      	bmi.n	801bc5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bc44:	4620      	mov	r0, r4
 801bc46:	f006 f848 	bl	8021cda <__cxa_guard_acquire>
 801bc4a:	b138      	cbz	r0, 801bc5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bc4c:	4620      	mov	r0, r4
 801bc4e:	f006 f850 	bl	8021cf2 <__cxa_guard_release>
 801bc52:	4a06      	ldr	r2, [pc, #24]	@ (801bc6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bc54:	4909      	ldr	r1, [pc, #36]	@ (801bc7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bc56:	480a      	ldr	r0, [pc, #40]	@ (801bc80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bc58:	f006 f838 	bl	8021ccc <__aeabi_atexit>
 801bc5c:	4b05      	ldr	r3, [pc, #20]	@ (801bc74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bc5e:	626b      	str	r3, [r5, #36]	@ 0x24
 801bc60:	4b07      	ldr	r3, [pc, #28]	@ (801bc80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bc62:	62ab      	str	r3, [r5, #40]	@ 0x28
 801bc64:	bd38      	pop	{r3, r4, r5, pc}
 801bc66:	bf00      	nop
 801bc68:	24028590 	.word	0x24028590
 801bc6c:	24000000 	.word	0x24000000
 801bc70:	08018dfd 	.word	0x08018dfd
 801bc74:	240000d0 	.word	0x240000d0
 801bc78:	24028594 	.word	0x24028594
 801bc7c:	08018dfb 	.word	0x08018dfb
 801bc80:	240000d4 	.word	0x240000d4

0801bc84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bc84:	b538      	push	{r3, r4, r5, lr}
 801bc86:	4c15      	ldr	r4, [pc, #84]	@ (801bcdc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bc88:	4605      	mov	r5, r0
 801bc8a:	7823      	ldrb	r3, [r4, #0]
 801bc8c:	f3bf 8f5b 	dmb	ish
 801bc90:	07da      	lsls	r2, r3, #31
 801bc92:	d40b      	bmi.n	801bcac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc94:	4620      	mov	r0, r4
 801bc96:	f006 f820 	bl	8021cda <__cxa_guard_acquire>
 801bc9a:	b138      	cbz	r0, 801bcac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f006 f828 	bl	8021cf2 <__cxa_guard_release>
 801bca2:	4a0f      	ldr	r2, [pc, #60]	@ (801bce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bca4:	490f      	ldr	r1, [pc, #60]	@ (801bce4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bca6:	4810      	ldr	r0, [pc, #64]	@ (801bce8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bca8:	f006 f810 	bl	8021ccc <__aeabi_atexit>
 801bcac:	4c0f      	ldr	r4, [pc, #60]	@ (801bcec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bcae:	7823      	ldrb	r3, [r4, #0]
 801bcb0:	f3bf 8f5b 	dmb	ish
 801bcb4:	07db      	lsls	r3, r3, #31
 801bcb6:	d40b      	bmi.n	801bcd0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bcb8:	4620      	mov	r0, r4
 801bcba:	f006 f80e 	bl	8021cda <__cxa_guard_acquire>
 801bcbe:	b138      	cbz	r0, 801bcd0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f006 f816 	bl	8021cf2 <__cxa_guard_release>
 801bcc6:	4a06      	ldr	r2, [pc, #24]	@ (801bce0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bcc8:	4909      	ldr	r1, [pc, #36]	@ (801bcf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bcca:	480a      	ldr	r0, [pc, #40]	@ (801bcf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bccc:	f005 fffe 	bl	8021ccc <__aeabi_atexit>
 801bcd0:	4b05      	ldr	r3, [pc, #20]	@ (801bce8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bcd2:	61eb      	str	r3, [r5, #28]
 801bcd4:	4b07      	ldr	r3, [pc, #28]	@ (801bcf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bcd6:	622b      	str	r3, [r5, #32]
 801bcd8:	bd38      	pop	{r3, r4, r5, pc}
 801bcda:	bf00      	nop
 801bcdc:	24028570 	.word	0x24028570
 801bce0:	24000000 	.word	0x24000000
 801bce4:	08018e01 	.word	0x08018e01
 801bce8:	240000b0 	.word	0x240000b0
 801bcec:	24028574 	.word	0x24028574
 801bcf0:	08018dff 	.word	0x08018dff
 801bcf4:	240000b4 	.word	0x240000b4

0801bcf8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bcf8:	b510      	push	{r4, lr}
 801bcfa:	4604      	mov	r4, r0
 801bcfc:	f7ff ff88 	bl	801bc10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bd00:	4620      	mov	r0, r4
 801bd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd06:	f7ff bfbd 	b.w	801bc84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bd0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801bd0c:	b538      	push	{r3, r4, r5, lr}
 801bd0e:	4c15      	ldr	r4, [pc, #84]	@ (801bd64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801bd10:	4605      	mov	r5, r0
 801bd12:	7823      	ldrb	r3, [r4, #0]
 801bd14:	f3bf 8f5b 	dmb	ish
 801bd18:	07da      	lsls	r2, r3, #31
 801bd1a:	d40b      	bmi.n	801bd34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	f005 ffdc 	bl	8021cda <__cxa_guard_acquire>
 801bd22:	b138      	cbz	r0, 801bd34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bd24:	4620      	mov	r0, r4
 801bd26:	f005 ffe4 	bl	8021cf2 <__cxa_guard_release>
 801bd2a:	4a0f      	ldr	r2, [pc, #60]	@ (801bd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bd2c:	490f      	ldr	r1, [pc, #60]	@ (801bd6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801bd2e:	4810      	ldr	r0, [pc, #64]	@ (801bd70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bd30:	f005 ffcc 	bl	8021ccc <__aeabi_atexit>
 801bd34:	4c0f      	ldr	r4, [pc, #60]	@ (801bd74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801bd36:	7823      	ldrb	r3, [r4, #0]
 801bd38:	f3bf 8f5b 	dmb	ish
 801bd3c:	07db      	lsls	r3, r3, #31
 801bd3e:	d40b      	bmi.n	801bd58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bd40:	4620      	mov	r0, r4
 801bd42:	f005 ffca 	bl	8021cda <__cxa_guard_acquire>
 801bd46:	b138      	cbz	r0, 801bd58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bd48:	4620      	mov	r0, r4
 801bd4a:	f005 ffd2 	bl	8021cf2 <__cxa_guard_release>
 801bd4e:	4a06      	ldr	r2, [pc, #24]	@ (801bd68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bd50:	4909      	ldr	r1, [pc, #36]	@ (801bd78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801bd52:	480a      	ldr	r0, [pc, #40]	@ (801bd7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bd54:	f005 ffba 	bl	8021ccc <__aeabi_atexit>
 801bd58:	4b05      	ldr	r3, [pc, #20]	@ (801bd70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bd5a:	636b      	str	r3, [r5, #52]	@ 0x34
 801bd5c:	4b07      	ldr	r3, [pc, #28]	@ (801bd7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bd5e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801bd60:	bd38      	pop	{r3, r4, r5, pc}
 801bd62:	bf00      	nop
 801bd64:	24028578 	.word	0x24028578
 801bd68:	24000000 	.word	0x24000000
 801bd6c:	08018df5 	.word	0x08018df5
 801bd70:	240000b8 	.word	0x240000b8
 801bd74:	2402857c 	.word	0x2402857c
 801bd78:	08018df3 	.word	0x08018df3
 801bd7c:	240000bc 	.word	0x240000bc

0801bd80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801bd80:	b538      	push	{r3, r4, r5, lr}
 801bd82:	4c15      	ldr	r4, [pc, #84]	@ (801bdd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801bd84:	4605      	mov	r5, r0
 801bd86:	7823      	ldrb	r3, [r4, #0]
 801bd88:	f3bf 8f5b 	dmb	ish
 801bd8c:	07da      	lsls	r2, r3, #31
 801bd8e:	d40b      	bmi.n	801bda8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bd90:	4620      	mov	r0, r4
 801bd92:	f005 ffa2 	bl	8021cda <__cxa_guard_acquire>
 801bd96:	b138      	cbz	r0, 801bda8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bd98:	4620      	mov	r0, r4
 801bd9a:	f005 ffaa 	bl	8021cf2 <__cxa_guard_release>
 801bd9e:	4a0f      	ldr	r2, [pc, #60]	@ (801bddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bda0:	490f      	ldr	r1, [pc, #60]	@ (801bde0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801bda2:	4810      	ldr	r0, [pc, #64]	@ (801bde4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bda4:	f005 ff92 	bl	8021ccc <__aeabi_atexit>
 801bda8:	4c0f      	ldr	r4, [pc, #60]	@ (801bde8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801bdaa:	7823      	ldrb	r3, [r4, #0]
 801bdac:	f3bf 8f5b 	dmb	ish
 801bdb0:	07db      	lsls	r3, r3, #31
 801bdb2:	d40b      	bmi.n	801bdcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	f005 ff90 	bl	8021cda <__cxa_guard_acquire>
 801bdba:	b138      	cbz	r0, 801bdcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bdbc:	4620      	mov	r0, r4
 801bdbe:	f005 ff98 	bl	8021cf2 <__cxa_guard_release>
 801bdc2:	4a06      	ldr	r2, [pc, #24]	@ (801bddc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bdc4:	4909      	ldr	r1, [pc, #36]	@ (801bdec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801bdc6:	480a      	ldr	r0, [pc, #40]	@ (801bdf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bdc8:	f005 ff80 	bl	8021ccc <__aeabi_atexit>
 801bdcc:	4b05      	ldr	r3, [pc, #20]	@ (801bde4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bdce:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801bdd0:	4b07      	ldr	r3, [pc, #28]	@ (801bdf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bdd2:	632b      	str	r3, [r5, #48]	@ 0x30
 801bdd4:	bd38      	pop	{r3, r4, r5, pc}
 801bdd6:	bf00      	nop
 801bdd8:	24028550 	.word	0x24028550
 801bddc:	24000000 	.word	0x24000000
 801bde0:	08018df9 	.word	0x08018df9
 801bde4:	24000090 	.word	0x24000090
 801bde8:	24028554 	.word	0x24028554
 801bdec:	08018df7 	.word	0x08018df7
 801bdf0:	24000094 	.word	0x24000094

0801bdf4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801bdf4:	b510      	push	{r4, lr}
 801bdf6:	4604      	mov	r4, r0
 801bdf8:	f7ff ff88 	bl	801bd0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be02:	f7ff bfbd 	b.w	801bd80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801be08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801be08:	b538      	push	{r3, r4, r5, lr}
 801be0a:	4c15      	ldr	r4, [pc, #84]	@ (801be60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801be0c:	4605      	mov	r5, r0
 801be0e:	7823      	ldrb	r3, [r4, #0]
 801be10:	f3bf 8f5b 	dmb	ish
 801be14:	07da      	lsls	r2, r3, #31
 801be16:	d40b      	bmi.n	801be30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801be18:	4620      	mov	r0, r4
 801be1a:	f005 ff5e 	bl	8021cda <__cxa_guard_acquire>
 801be1e:	b138      	cbz	r0, 801be30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801be20:	4620      	mov	r0, r4
 801be22:	f005 ff66 	bl	8021cf2 <__cxa_guard_release>
 801be26:	4a0f      	ldr	r2, [pc, #60]	@ (801be64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801be28:	490f      	ldr	r1, [pc, #60]	@ (801be68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801be2a:	4810      	ldr	r0, [pc, #64]	@ (801be6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801be2c:	f005 ff4e 	bl	8021ccc <__aeabi_atexit>
 801be30:	4c0f      	ldr	r4, [pc, #60]	@ (801be70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801be32:	7823      	ldrb	r3, [r4, #0]
 801be34:	f3bf 8f5b 	dmb	ish
 801be38:	07db      	lsls	r3, r3, #31
 801be3a:	d40b      	bmi.n	801be54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801be3c:	4620      	mov	r0, r4
 801be3e:	f005 ff4c 	bl	8021cda <__cxa_guard_acquire>
 801be42:	b138      	cbz	r0, 801be54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801be44:	4620      	mov	r0, r4
 801be46:	f005 ff54 	bl	8021cf2 <__cxa_guard_release>
 801be4a:	4a06      	ldr	r2, [pc, #24]	@ (801be64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801be4c:	4909      	ldr	r1, [pc, #36]	@ (801be74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801be4e:	480a      	ldr	r0, [pc, #40]	@ (801be78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801be50:	f005 ff3c 	bl	8021ccc <__aeabi_atexit>
 801be54:	4b05      	ldr	r3, [pc, #20]	@ (801be6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801be56:	646b      	str	r3, [r5, #68]	@ 0x44
 801be58:	4b07      	ldr	r3, [pc, #28]	@ (801be78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801be5a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801be5c:	bd38      	pop	{r3, r4, r5, pc}
 801be5e:	bf00      	nop
 801be60:	24028580 	.word	0x24028580
 801be64:	24000000 	.word	0x24000000
 801be68:	08018ded 	.word	0x08018ded
 801be6c:	240000c0 	.word	0x240000c0
 801be70:	24028584 	.word	0x24028584
 801be74:	08018deb 	.word	0x08018deb
 801be78:	240000c4 	.word	0x240000c4

0801be7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801be7c:	b538      	push	{r3, r4, r5, lr}
 801be7e:	4c15      	ldr	r4, [pc, #84]	@ (801bed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801be80:	4605      	mov	r5, r0
 801be82:	7823      	ldrb	r3, [r4, #0]
 801be84:	f3bf 8f5b 	dmb	ish
 801be88:	07da      	lsls	r2, r3, #31
 801be8a:	d40b      	bmi.n	801bea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f005 ff24 	bl	8021cda <__cxa_guard_acquire>
 801be92:	b138      	cbz	r0, 801bea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801be94:	4620      	mov	r0, r4
 801be96:	f005 ff2c 	bl	8021cf2 <__cxa_guard_release>
 801be9a:	4a0f      	ldr	r2, [pc, #60]	@ (801bed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801be9c:	490f      	ldr	r1, [pc, #60]	@ (801bedc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801be9e:	4810      	ldr	r0, [pc, #64]	@ (801bee0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bea0:	f005 ff14 	bl	8021ccc <__aeabi_atexit>
 801bea4:	4c0f      	ldr	r4, [pc, #60]	@ (801bee4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801bea6:	7823      	ldrb	r3, [r4, #0]
 801bea8:	f3bf 8f5b 	dmb	ish
 801beac:	07db      	lsls	r3, r3, #31
 801beae:	d40b      	bmi.n	801bec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801beb0:	4620      	mov	r0, r4
 801beb2:	f005 ff12 	bl	8021cda <__cxa_guard_acquire>
 801beb6:	b138      	cbz	r0, 801bec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801beb8:	4620      	mov	r0, r4
 801beba:	f005 ff1a 	bl	8021cf2 <__cxa_guard_release>
 801bebe:	4a06      	ldr	r2, [pc, #24]	@ (801bed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bec0:	4909      	ldr	r1, [pc, #36]	@ (801bee8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801bec2:	480a      	ldr	r0, [pc, #40]	@ (801beec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bec4:	f005 ff02 	bl	8021ccc <__aeabi_atexit>
 801bec8:	4b05      	ldr	r3, [pc, #20]	@ (801bee0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801beca:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801becc:	4b07      	ldr	r3, [pc, #28]	@ (801beec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bece:	642b      	str	r3, [r5, #64]	@ 0x40
 801bed0:	bd38      	pop	{r3, r4, r5, pc}
 801bed2:	bf00      	nop
 801bed4:	24028560 	.word	0x24028560
 801bed8:	24000000 	.word	0x24000000
 801bedc:	08018df1 	.word	0x08018df1
 801bee0:	240000a0 	.word	0x240000a0
 801bee4:	24028564 	.word	0x24028564
 801bee8:	08018def 	.word	0x08018def
 801beec:	240000a4 	.word	0x240000a4

0801bef0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801bef0:	b510      	push	{r4, lr}
 801bef2:	4604      	mov	r4, r0
 801bef4:	f7ff ff88 	bl	801be08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801bef8:	4620      	mov	r0, r4
 801befa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801befe:	f7ff bfbd 	b.w	801be7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801bf04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801bf04:	b538      	push	{r3, r4, r5, lr}
 801bf06:	4c15      	ldr	r4, [pc, #84]	@ (801bf5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801bf08:	4605      	mov	r5, r0
 801bf0a:	7823      	ldrb	r3, [r4, #0]
 801bf0c:	f3bf 8f5b 	dmb	ish
 801bf10:	07da      	lsls	r2, r3, #31
 801bf12:	d40b      	bmi.n	801bf2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bf14:	4620      	mov	r0, r4
 801bf16:	f005 fee0 	bl	8021cda <__cxa_guard_acquire>
 801bf1a:	b138      	cbz	r0, 801bf2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f005 fee8 	bl	8021cf2 <__cxa_guard_release>
 801bf22:	4a0f      	ldr	r2, [pc, #60]	@ (801bf60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bf24:	490f      	ldr	r1, [pc, #60]	@ (801bf64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801bf26:	4810      	ldr	r0, [pc, #64]	@ (801bf68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bf28:	f005 fed0 	bl	8021ccc <__aeabi_atexit>
 801bf2c:	4c0f      	ldr	r4, [pc, #60]	@ (801bf6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801bf2e:	7823      	ldrb	r3, [r4, #0]
 801bf30:	f3bf 8f5b 	dmb	ish
 801bf34:	07db      	lsls	r3, r3, #31
 801bf36:	d40b      	bmi.n	801bf50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bf38:	4620      	mov	r0, r4
 801bf3a:	f005 fece 	bl	8021cda <__cxa_guard_acquire>
 801bf3e:	b138      	cbz	r0, 801bf50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bf40:	4620      	mov	r0, r4
 801bf42:	f005 fed6 	bl	8021cf2 <__cxa_guard_release>
 801bf46:	4a06      	ldr	r2, [pc, #24]	@ (801bf60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bf48:	4909      	ldr	r1, [pc, #36]	@ (801bf70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801bf4a:	480a      	ldr	r0, [pc, #40]	@ (801bf74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bf4c:	f005 febe 	bl	8021ccc <__aeabi_atexit>
 801bf50:	4b05      	ldr	r3, [pc, #20]	@ (801bf68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bf52:	656b      	str	r3, [r5, #84]	@ 0x54
 801bf54:	4b07      	ldr	r3, [pc, #28]	@ (801bf74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bf56:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bf58:	bd38      	pop	{r3, r4, r5, pc}
 801bf5a:	bf00      	nop
 801bf5c:	24028558 	.word	0x24028558
 801bf60:	24000000 	.word	0x24000000
 801bf64:	08018de5 	.word	0x08018de5
 801bf68:	24000098 	.word	0x24000098
 801bf6c:	2402855c 	.word	0x2402855c
 801bf70:	08018de3 	.word	0x08018de3
 801bf74:	2400009c 	.word	0x2400009c

0801bf78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801bf78:	b538      	push	{r3, r4, r5, lr}
 801bf7a:	4c15      	ldr	r4, [pc, #84]	@ (801bfd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801bf7c:	4605      	mov	r5, r0
 801bf7e:	7823      	ldrb	r3, [r4, #0]
 801bf80:	f3bf 8f5b 	dmb	ish
 801bf84:	07da      	lsls	r2, r3, #31
 801bf86:	d40b      	bmi.n	801bfa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f005 fea6 	bl	8021cda <__cxa_guard_acquire>
 801bf8e:	b138      	cbz	r0, 801bfa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bf90:	4620      	mov	r0, r4
 801bf92:	f005 feae 	bl	8021cf2 <__cxa_guard_release>
 801bf96:	4a0f      	ldr	r2, [pc, #60]	@ (801bfd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801bf98:	490f      	ldr	r1, [pc, #60]	@ (801bfd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801bf9a:	4810      	ldr	r0, [pc, #64]	@ (801bfdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801bf9c:	f005 fe96 	bl	8021ccc <__aeabi_atexit>
 801bfa0:	4c0f      	ldr	r4, [pc, #60]	@ (801bfe0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801bfa2:	7823      	ldrb	r3, [r4, #0]
 801bfa4:	f3bf 8f5b 	dmb	ish
 801bfa8:	07db      	lsls	r3, r3, #31
 801bfaa:	d40b      	bmi.n	801bfc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bfac:	4620      	mov	r0, r4
 801bfae:	f005 fe94 	bl	8021cda <__cxa_guard_acquire>
 801bfb2:	b138      	cbz	r0, 801bfc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f005 fe9c 	bl	8021cf2 <__cxa_guard_release>
 801bfba:	4a06      	ldr	r2, [pc, #24]	@ (801bfd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801bfbc:	4909      	ldr	r1, [pc, #36]	@ (801bfe4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801bfbe:	480a      	ldr	r0, [pc, #40]	@ (801bfe8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bfc0:	f005 fe84 	bl	8021ccc <__aeabi_atexit>
 801bfc4:	4b05      	ldr	r3, [pc, #20]	@ (801bfdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801bfc6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801bfc8:	4b07      	ldr	r3, [pc, #28]	@ (801bfe8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bfca:	652b      	str	r3, [r5, #80]	@ 0x50
 801bfcc:	bd38      	pop	{r3, r4, r5, pc}
 801bfce:	bf00      	nop
 801bfd0:	24028548 	.word	0x24028548
 801bfd4:	24000000 	.word	0x24000000
 801bfd8:	08018de9 	.word	0x08018de9
 801bfdc:	24000088 	.word	0x24000088
 801bfe0:	2402854c 	.word	0x2402854c
 801bfe4:	08018de7 	.word	0x08018de7
 801bfe8:	2400008c 	.word	0x2400008c

0801bfec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801bfec:	b510      	push	{r4, lr}
 801bfee:	4604      	mov	r4, r0
 801bff0:	f7ff ff88 	bl	801bf04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801bff4:	4620      	mov	r0, r4
 801bff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bffa:	f7ff bfbd 	b.w	801bf78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801bffe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801bffe:	b510      	push	{r4, lr}
 801c000:	4604      	mov	r4, r0
 801c002:	f7ff fff3 	bl	801bfec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c006:	4620      	mov	r0, r4
 801c008:	f7ff ff72 	bl	801bef0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c00c:	4620      	mov	r0, r4
 801c00e:	f7ff fe73 	bl	801bcf8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c012:	4620      	mov	r0, r4
 801c014:	f7ff fdf2 	bl	801bbfc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c018:	4620      	mov	r0, r4
 801c01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c01e:	f7ff bee9 	b.w	801bdf4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801c024 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801c024:	b538      	push	{r3, r4, r5, lr}
 801c026:	4c0b      	ldr	r4, [pc, #44]	@ (801c054 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801c028:	4605      	mov	r5, r0
 801c02a:	7823      	ldrb	r3, [r4, #0]
 801c02c:	f3bf 8f5b 	dmb	ish
 801c030:	07db      	lsls	r3, r3, #31
 801c032:	d40b      	bmi.n	801c04c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801c034:	4620      	mov	r0, r4
 801c036:	f005 fe50 	bl	8021cda <__cxa_guard_acquire>
 801c03a:	b138      	cbz	r0, 801c04c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801c03c:	4620      	mov	r0, r4
 801c03e:	f005 fe58 	bl	8021cf2 <__cxa_guard_release>
 801c042:	4a05      	ldr	r2, [pc, #20]	@ (801c058 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801c044:	4905      	ldr	r1, [pc, #20]	@ (801c05c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801c046:	4806      	ldr	r0, [pc, #24]	@ (801c060 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c048:	f005 fe40 	bl	8021ccc <__aeabi_atexit>
 801c04c:	4b04      	ldr	r3, [pc, #16]	@ (801c060 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c04e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801c050:	bd38      	pop	{r3, r4, r5, pc}
 801c052:	bf00      	nop
 801c054:	2402853c 	.word	0x2402853c
 801c058:	24000000 	.word	0x24000000
 801c05c:	08018de1 	.word	0x08018de1
 801c060:	24000080 	.word	0x24000080

0801c064 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801c064:	b538      	push	{r3, r4, r5, lr}
 801c066:	4c0b      	ldr	r4, [pc, #44]	@ (801c094 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801c068:	4605      	mov	r5, r0
 801c06a:	7823      	ldrb	r3, [r4, #0]
 801c06c:	f3bf 8f5b 	dmb	ish
 801c070:	07db      	lsls	r3, r3, #31
 801c072:	d40b      	bmi.n	801c08c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801c074:	4620      	mov	r0, r4
 801c076:	f005 fe30 	bl	8021cda <__cxa_guard_acquire>
 801c07a:	b138      	cbz	r0, 801c08c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801c07c:	4620      	mov	r0, r4
 801c07e:	f005 fe38 	bl	8021cf2 <__cxa_guard_release>
 801c082:	4a05      	ldr	r2, [pc, #20]	@ (801c098 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801c084:	4905      	ldr	r1, [pc, #20]	@ (801c09c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801c086:	4806      	ldr	r0, [pc, #24]	@ (801c0a0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c088:	f005 fe20 	bl	8021ccc <__aeabi_atexit>
 801c08c:	4b04      	ldr	r3, [pc, #16]	@ (801c0a0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c08e:	662b      	str	r3, [r5, #96]	@ 0x60
 801c090:	bd38      	pop	{r3, r4, r5, pc}
 801c092:	bf00      	nop
 801c094:	24028540 	.word	0x24028540
 801c098:	24000000 	.word	0x24000000
 801c09c:	08018ddf 	.word	0x08018ddf
 801c0a0:	24000084 	.word	0x24000084

0801c0a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801c0a4:	b570      	push	{r4, r5, r6, lr}
 801c0a6:	4d0c      	ldr	r5, [pc, #48]	@ (801c0d8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801c0a8:	4606      	mov	r6, r0
 801c0aa:	4c0c      	ldr	r4, [pc, #48]	@ (801c0dc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801c0ac:	782b      	ldrb	r3, [r5, #0]
 801c0ae:	f3bf 8f5b 	dmb	ish
 801c0b2:	f013 0f01 	tst.w	r3, #1
 801c0b6:	d10d      	bne.n	801c0d4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	f005 fe0e 	bl	8021cda <__cxa_guard_acquire>
 801c0be:	b148      	cbz	r0, 801c0d4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c0c0:	4b07      	ldr	r3, [pc, #28]	@ (801c0e0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801c0c2:	4628      	mov	r0, r5
 801c0c4:	6023      	str	r3, [r4, #0]
 801c0c6:	f005 fe14 	bl	8021cf2 <__cxa_guard_release>
 801c0ca:	4a06      	ldr	r2, [pc, #24]	@ (801c0e4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	4906      	ldr	r1, [pc, #24]	@ (801c0e8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801c0d0:	f005 fdfc 	bl	8021ccc <__aeabi_atexit>
 801c0d4:	6674      	str	r4, [r6, #100]	@ 0x64
 801c0d6:	bd70      	pop	{r4, r5, r6, pc}
 801c0d8:	24028544 	.word	0x24028544
 801c0dc:	2402869c 	.word	0x2402869c
 801c0e0:	080263d8 	.word	0x080263d8
 801c0e4:	24000000 	.word	0x24000000
 801c0e8:	08018ddd 	.word	0x08018ddd

0801c0ec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801c0ec:	b510      	push	{r4, lr}
 801c0ee:	4604      	mov	r4, r0
 801c0f0:	f7ff ff98 	bl	801c024 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	f7ff ffb5 	bl	801c064 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c100:	f7ff bfd0 	b.w	801c0a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801c104 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801c104:	b570      	push	{r4, r5, r6, lr}
 801c106:	4d0c      	ldr	r5, [pc, #48]	@ (801c138 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801c108:	4606      	mov	r6, r0
 801c10a:	4c0c      	ldr	r4, [pc, #48]	@ (801c13c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801c10c:	782b      	ldrb	r3, [r5, #0]
 801c10e:	f3bf 8f5b 	dmb	ish
 801c112:	f013 0f01 	tst.w	r3, #1
 801c116:	d10d      	bne.n	801c134 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801c118:	4628      	mov	r0, r5
 801c11a:	f005 fdde 	bl	8021cda <__cxa_guard_acquire>
 801c11e:	b148      	cbz	r0, 801c134 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801c120:	4b07      	ldr	r3, [pc, #28]	@ (801c140 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801c122:	4628      	mov	r0, r5
 801c124:	6023      	str	r3, [r4, #0]
 801c126:	f005 fde4 	bl	8021cf2 <__cxa_guard_release>
 801c12a:	4a06      	ldr	r2, [pc, #24]	@ (801c144 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801c12c:	4620      	mov	r0, r4
 801c12e:	4906      	ldr	r1, [pc, #24]	@ (801c148 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801c130:	f005 fdcc 	bl	8021ccc <__aeabi_atexit>
 801c134:	66b4      	str	r4, [r6, #104]	@ 0x68
 801c136:	bd70      	pop	{r4, r5, r6, pc}
 801c138:	24028538 	.word	0x24028538
 801c13c:	24028598 	.word	0x24028598
 801c140:	080263f0 	.word	0x080263f0
 801c144:	24000000 	.word	0x24000000
 801c148:	08018ddb 	.word	0x08018ddb

0801c14c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c150:	b087      	sub	sp, #28
 801c152:	788d      	ldrb	r5, [r1, #2]
 801c154:	f891 9000 	ldrb.w	r9, [r1]
 801c158:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801c15c:	9501      	str	r5, [sp, #4]
 801c15e:	784d      	ldrb	r5, [r1, #1]
 801c160:	9203      	str	r2, [sp, #12]
 801c162:	9502      	str	r5, [sp, #8]
 801c164:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801c168:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801c16c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801c170:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801c174:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801c178:	fb06 0708 	mla	r7, r6, r8, r0
 801c17c:	2e00      	cmp	r6, #0
 801c17e:	eb02 0a07 	add.w	sl, r2, r7
 801c182:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801c186:	9d01      	ldr	r5, [sp, #4]
 801c188:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c18c:	ea45 0509 	orr.w	r5, r5, r9
 801c190:	9505      	str	r5, [sp, #20]
 801c192:	f2c0 80b2 	blt.w	801c2fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c196:	45b3      	cmp	fp, r6
 801c198:	f340 80af 	ble.w	801c2fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c19c:	2800      	cmp	r0, #0
 801c19e:	f2c0 80aa 	blt.w	801c2f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c1a2:	4580      	cmp	r8, r0
 801c1a4:	f340 80a7 	ble.w	801c2f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c1a8:	9a03      	ldr	r2, [sp, #12]
 801c1aa:	5dd7      	ldrb	r7, [r2, r7]
 801c1ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c1b0:	441f      	add	r7, r3
 801c1b2:	1c42      	adds	r2, r0, #1
 801c1b4:	f100 80a4 	bmi.w	801c300 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c1b8:	4590      	cmp	r8, r2
 801c1ba:	f340 80a1 	ble.w	801c300 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c1be:	2c00      	cmp	r4, #0
 801c1c0:	f000 809e 	beq.w	801c300 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c1c4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1cc:	441d      	add	r5, r3
 801c1ce:	3601      	adds	r6, #1
 801c1d0:	f100 809a 	bmi.w	801c308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c1d4:	45b3      	cmp	fp, r6
 801c1d6:	f340 8097 	ble.w	801c308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c1da:	f1bc 0f00 	cmp.w	ip, #0
 801c1de:	f000 8093 	beq.w	801c308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	f2c0 808e 	blt.w	801c304 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c1e8:	4580      	cmp	r8, r0
 801c1ea:	f340 808b 	ble.w	801c304 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c1ee:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801c1f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c1f6:	441e      	add	r6, r3
 801c1f8:	3001      	adds	r0, #1
 801c1fa:	f100 8088 	bmi.w	801c30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c1fe:	4580      	cmp	r8, r0
 801c200:	f340 8085 	ble.w	801c30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c204:	2c00      	cmp	r4, #0
 801c206:	f000 8082 	beq.w	801c30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c20a:	44d0      	add	r8, sl
 801c20c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c214:	4413      	add	r3, r2
 801c216:	b2a4      	uxth	r4, r4
 801c218:	f895 a000 	ldrb.w	sl, [r5]
 801c21c:	fa1f fc8c 	uxth.w	ip, ip
 801c220:	fb04 fb0c 	mul.w	fp, r4, ip
 801c224:	0124      	lsls	r4, r4, #4
 801c226:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801c22a:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801c22e:	eba4 040b 	sub.w	r4, r4, fp
 801c232:	fa1f f08c 	uxth.w	r0, ip
 801c236:	b2a2      	uxth	r2, r4
 801c238:	783c      	ldrb	r4, [r7, #0]
 801c23a:	eba8 0800 	sub.w	r8, r8, r0
 801c23e:	fa1f fc8e 	uxth.w	ip, lr
 801c242:	fb02 fa0a 	mul.w	sl, r2, sl
 801c246:	ea6f 0e0e 	mvn.w	lr, lr
 801c24a:	fa1f f888 	uxth.w	r8, r8
 801c24e:	fa5f fe8e 	uxtb.w	lr, lr
 801c252:	fb08 aa04 	mla	sl, r8, r4, sl
 801c256:	7834      	ldrb	r4, [r6, #0]
 801c258:	fb19 f90e 	smulbb	r9, r9, lr
 801c25c:	fb00 aa04 	mla	sl, r0, r4, sl
 801c260:	781c      	ldrb	r4, [r3, #0]
 801c262:	fb0b a404 	mla	r4, fp, r4, sl
 801c266:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c26a:	fb04 990c 	mla	r9, r4, ip, r9
 801c26e:	fa1f f989 	uxth.w	r9, r9
 801c272:	f109 0401 	add.w	r4, r9, #1
 801c276:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c27a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c27e:	f881 9000 	strb.w	r9, [r1]
 801c282:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c286:	787c      	ldrb	r4, [r7, #1]
 801c288:	fb02 f909 	mul.w	r9, r2, r9
 801c28c:	fb08 9904 	mla	r9, r8, r4, r9
 801c290:	7874      	ldrb	r4, [r6, #1]
 801c292:	fb00 9904 	mla	r9, r0, r4, r9
 801c296:	785c      	ldrb	r4, [r3, #1]
 801c298:	fb0b 9404 	mla	r4, fp, r4, r9
 801c29c:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801c2a0:	9c02      	ldr	r4, [sp, #8]
 801c2a2:	fb14 f90e 	smulbb	r9, r4, lr
 801c2a6:	fb0a 940c 	mla	r4, sl, ip, r9
 801c2aa:	b2a4      	uxth	r4, r4
 801c2ac:	f104 0901 	add.w	r9, r4, #1
 801c2b0:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801c2b4:	1224      	asrs	r4, r4, #8
 801c2b6:	704c      	strb	r4, [r1, #1]
 801c2b8:	78ad      	ldrb	r5, [r5, #2]
 801c2ba:	78bc      	ldrb	r4, [r7, #2]
 801c2bc:	436a      	muls	r2, r5
 801c2be:	789b      	ldrb	r3, [r3, #2]
 801c2c0:	fb08 2204 	mla	r2, r8, r4, r2
 801c2c4:	78b4      	ldrb	r4, [r6, #2]
 801c2c6:	fb00 2004 	mla	r0, r0, r4, r2
 801c2ca:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c2ce:	9b01      	ldr	r3, [sp, #4]
 801c2d0:	fb13 fe0e 	smulbb	lr, r3, lr
 801c2d4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c2d8:	fb0b ec0c 	mla	ip, fp, ip, lr
 801c2dc:	fa1f fc8c 	uxth.w	ip, ip
 801c2e0:	f10c 0e01 	add.w	lr, ip, #1
 801c2e4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801c2e8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c2ec:	f881 c002 	strb.w	ip, [r1, #2]
 801c2f0:	b007      	add	sp, #28
 801c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f6:	af05      	add	r7, sp, #20
 801c2f8:	e75b      	b.n	801c1b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801c2fa:	ad05      	add	r5, sp, #20
 801c2fc:	462f      	mov	r7, r5
 801c2fe:	e766      	b.n	801c1ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c300:	ad05      	add	r5, sp, #20
 801c302:	e764      	b.n	801c1ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801c304:	ae05      	add	r6, sp, #20
 801c306:	e777      	b.n	801c1f8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801c308:	ab05      	add	r3, sp, #20
 801c30a:	461e      	mov	r6, r3
 801c30c:	e783      	b.n	801c216 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801c30e:	ab05      	add	r3, sp, #20
 801c310:	e781      	b.n	801c216 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801c312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c316:	b093      	sub	sp, #76	@ 0x4c
 801c318:	9210      	str	r2, [sp, #64]	@ 0x40
 801c31a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c31c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c31e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801c322:	9011      	str	r0, [sp, #68]	@ 0x44
 801c324:	930e      	str	r3, [sp, #56]	@ 0x38
 801c326:	6850      	ldr	r0, [r2, #4]
 801c328:	910d      	str	r1, [sp, #52]	@ 0x34
 801c32a:	6812      	ldr	r2, [r2, #0]
 801c32c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801c330:	fb00 1303 	mla	r3, r0, r3, r1
 801c334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c338:	18d3      	adds	r3, r2, r3
 801c33a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c33c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	930c      	str	r3, [sp, #48]	@ 0x30
 801c342:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c344:	685c      	ldr	r4, [r3, #4]
 801c346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c348:	3404      	adds	r4, #4
 801c34a:	43db      	mvns	r3, r3
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c350:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c352:	2b00      	cmp	r3, #0
 801c354:	dc03      	bgt.n	801c35e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c356:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c358:	2b00      	cmp	r3, #0
 801c35a:	f340 8250 	ble.w	801c7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c35e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c360:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c364:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c368:	1e48      	subs	r0, r1, #1
 801c36a:	1e55      	subs	r5, r2, #1
 801c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c36e:	2b00      	cmp	r3, #0
 801c370:	f340 80ee 	ble.w	801c550 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801c374:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801c376:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c378:	1436      	asrs	r6, r6, #16
 801c37a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c37e:	d406      	bmi.n	801c38e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c380:	4286      	cmp	r6, r0
 801c382:	da04      	bge.n	801c38e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c384:	2b00      	cmp	r3, #0
 801c386:	db02      	blt.n	801c38e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c388:	42ab      	cmp	r3, r5
 801c38a:	f2c0 80e2 	blt.w	801c552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801c38e:	3601      	adds	r6, #1
 801c390:	f100 80cf 	bmi.w	801c532 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c394:	42b1      	cmp	r1, r6
 801c396:	f2c0 80cc 	blt.w	801c532 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c39a:	3301      	adds	r3, #1
 801c39c:	f100 80c9 	bmi.w	801c532 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	f2c0 80c6 	blt.w	801c532 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801c3a6:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801c3aa:	f1bb 0f00 	cmp.w	fp, #0
 801c3ae:	f340 80f1 	ble.w	801c594 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c3b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c3b4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c3b6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801c3b8:	141d      	asrs	r5, r3, #16
 801c3ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c3bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c3c0:	68c7      	ldr	r7, [r0, #12]
 801c3c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c3c4:	1418      	asrs	r0, r3, #16
 801c3c6:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801c3ca:	6892      	ldr	r2, [r2, #8]
 801c3cc:	f100 8137 	bmi.w	801c63e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3d0:	f102 3cff 	add.w	ip, r2, #4294967295
 801c3d4:	4560      	cmp	r0, ip
 801c3d6:	f280 8132 	bge.w	801c63e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3da:	2d00      	cmp	r5, #0
 801c3dc:	f2c0 812f 	blt.w	801c63e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3e0:	f107 3cff 	add.w	ip, r7, #4294967295
 801c3e4:	4565      	cmp	r5, ip
 801c3e6:	f280 812a 	bge.w	801c63e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3ea:	b212      	sxth	r2, r2
 801c3ec:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c3ee:	fb05 0002 	mla	r0, r5, r2, r0
 801c3f2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c3f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c3f8:	4405      	add	r5, r0
 801c3fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c3fe:	eb04 0e0c 	add.w	lr, r4, ip
 801c402:	f1b8 0f00 	cmp.w	r8, #0
 801c406:	f000 810c 	beq.w	801c622 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801c40a:	786f      	ldrb	r7, [r5, #1]
 801c40c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c410:	4427      	add	r7, r4
 801c412:	2900      	cmp	r1, #0
 801c414:	f000 810d 	beq.w	801c632 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801c418:	18a8      	adds	r0, r5, r2
 801c41a:	5caa      	ldrb	r2, [r5, r2]
 801c41c:	7840      	ldrb	r0, [r0, #1]
 801c41e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c422:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c426:	4422      	add	r2, r4
 801c428:	4420      	add	r0, r4
 801c42a:	fa1f f388 	uxth.w	r3, r8
 801c42e:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801c432:	b289      	uxth	r1, r1
 801c434:	f897 c000 	ldrb.w	ip, [r7]
 801c438:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801c43c:	fb03 f901 	mul.w	r9, r3, r1
 801c440:	011b      	lsls	r3, r3, #4
 801c442:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c446:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801c44a:	eba3 0309 	sub.w	r3, r3, r9
 801c44e:	b289      	uxth	r1, r1
 801c450:	b29b      	uxth	r3, r3
 801c452:	eba8 0801 	sub.w	r8, r8, r1
 801c456:	fb03 fc0c 	mul.w	ip, r3, ip
 801c45a:	fa1f f888 	uxth.w	r8, r8
 801c45e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c462:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c466:	f892 a000 	ldrb.w	sl, [r2]
 801c46a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c46e:	f890 a000 	ldrb.w	sl, [r0]
 801c472:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c476:	f896 a000 	ldrb.w	sl, [r6]
 801c47a:	fb1a fa03 	smulbb	sl, sl, r3
 801c47e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c484:	fb0c ac05 	mla	ip, ip, r5, sl
 801c488:	fa1f fc8c 	uxth.w	ip, ip
 801c48c:	f10c 0a01 	add.w	sl, ip, #1
 801c490:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c494:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c498:	f886 a000 	strb.w	sl, [r6]
 801c49c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c4a0:	f89e a001 	ldrb.w	sl, [lr, #1]
 801c4a4:	fb03 fc0c 	mul.w	ip, r3, ip
 801c4a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4aa:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c4ae:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c4b2:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c4b6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c4ba:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c4be:	f896 a001 	ldrb.w	sl, [r6, #1]
 801c4c2:	fb1a fa03 	smulbb	sl, sl, r3
 801c4c6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c4ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c4cc:	fb0c ac05 	mla	ip, ip, r5, sl
 801c4d0:	fa1f fc8c 	uxth.w	ip, ip
 801c4d4:	f10c 0a01 	add.w	sl, ip, #1
 801c4d8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801c4dc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c4e0:	f886 c001 	strb.w	ip, [r6, #1]
 801c4e4:	78bf      	ldrb	r7, [r7, #2]
 801c4e6:	f89e c002 	ldrb.w	ip, [lr, #2]
 801c4ea:	437b      	muls	r3, r7
 801c4ec:	fb08 330c 	mla	r3, r8, ip, r3
 801c4f0:	f892 c002 	ldrb.w	ip, [r2, #2]
 801c4f4:	7882      	ldrb	r2, [r0, #2]
 801c4f6:	fb01 310c 	mla	r1, r1, ip, r3
 801c4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4fc:	fb09 1902 	mla	r9, r9, r2, r1
 801c500:	78b1      	ldrb	r1, [r6, #2]
 801c502:	fb11 f103 	smulbb	r1, r1, r3
 801c506:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c50a:	fb09 1505 	mla	r5, r9, r5, r1
 801c50e:	b2ad      	uxth	r5, r5
 801c510:	1c6b      	adds	r3, r5, #1
 801c512:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c516:	122d      	asrs	r5, r5, #8
 801c518:	70b5      	strb	r5, [r6, #2]
 801c51a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c51c:	3603      	adds	r6, #3
 801c51e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801c520:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c524:	4413      	add	r3, r2
 801c526:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c528:	931d      	str	r3, [sp, #116]	@ 0x74
 801c52a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c52c:	4413      	add	r3, r2
 801c52e:	931e      	str	r3, [sp, #120]	@ 0x78
 801c530:	e73b      	b.n	801c3aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c532:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c534:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801c536:	4433      	add	r3, r6
 801c538:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801c53a:	931d      	str	r3, [sp, #116]	@ 0x74
 801c53c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c53e:	4433      	add	r3, r6
 801c540:	931e      	str	r3, [sp, #120]	@ 0x78
 801c542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c544:	3b01      	subs	r3, #1
 801c546:	9309      	str	r3, [sp, #36]	@ 0x24
 801c548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c54a:	3303      	adds	r3, #3
 801c54c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c54e:	e70d      	b.n	801c36c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c550:	d028      	beq.n	801c5a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c554:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801c556:	3b01      	subs	r3, #1
 801c558:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801c55a:	fb00 5003 	mla	r0, r0, r3, r5
 801c55e:	1400      	asrs	r0, r0, #16
 801c560:	f53f af21 	bmi.w	801c3a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c564:	3901      	subs	r1, #1
 801c566:	4288      	cmp	r0, r1
 801c568:	f6bf af1d 	bge.w	801c3a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c56c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801c56e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c570:	fb01 0303 	mla	r3, r1, r3, r0
 801c574:	141b      	asrs	r3, r3, #16
 801c576:	f53f af16 	bmi.w	801c3a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c57a:	3a01      	subs	r2, #1
 801c57c:	4293      	cmp	r3, r2
 801c57e:	f6bf af12 	bge.w	801c3a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c584:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801c588:	1cdf      	adds	r7, r3, #3
 801c58a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c58e:	f1b9 0f00 	cmp.w	r9, #0
 801c592:	dc73      	bgt.n	801c67c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c59c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5a0:	441a      	add	r2, r3
 801c5a2:	920a      	str	r2, [sp, #40]	@ 0x28
 801c5a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	f340 8129 	ble.w	801c7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c5ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c5b0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c5b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5ba:	eef0 6a62 	vmov.f32	s13, s5
 801c5be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c5c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c5ca:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801c5ce:	eef0 6a43 	vmov.f32	s13, s6
 801c5d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c5d6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801c5da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5f2:	ee12 2a90 	vmov	r2, s5
 801c5f6:	eef0 2a47 	vmov.f32	s5, s14
 801c5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5fe:	ee13 2a10 	vmov	r2, s6
 801c602:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c604:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c606:	eeb0 3a67 	vmov.f32	s6, s15
 801c60a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c60e:	9320      	str	r3, [sp, #128]	@ 0x80
 801c610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c612:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c614:	3b01      	subs	r3, #1
 801c616:	930d      	str	r3, [sp, #52]	@ 0x34
 801c618:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c61a:	bf08      	it	eq
 801c61c:	4613      	moveq	r3, r2
 801c61e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c620:	e696      	b.n	801c350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c622:	b149      	cbz	r1, 801c638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c624:	5caa      	ldrb	r2, [r5, r2]
 801c626:	4670      	mov	r0, lr
 801c628:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c62c:	4422      	add	r2, r4
 801c62e:	4677      	mov	r7, lr
 801c630:	e6fb      	b.n	801c42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c632:	4670      	mov	r0, lr
 801c634:	4672      	mov	r2, lr
 801c636:	e6f8      	b.n	801c42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c638:	4670      	mov	r0, lr
 801c63a:	4672      	mov	r2, lr
 801c63c:	e7f7      	b.n	801c62e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801c63e:	f110 0c01 	adds.w	ip, r0, #1
 801c642:	f53f af6a 	bmi.w	801c51a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c646:	4562      	cmp	r2, ip
 801c648:	f6ff af67 	blt.w	801c51a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c64c:	f115 0c01 	adds.w	ip, r5, #1
 801c650:	f53f af63 	bmi.w	801c51a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c654:	4567      	cmp	r7, ip
 801c656:	f6ff af60 	blt.w	801c51a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c65c:	b23f      	sxth	r7, r7
 801c65e:	b212      	sxth	r2, r2
 801c660:	9002      	str	r0, [sp, #8]
 801c662:	9701      	str	r7, [sp, #4]
 801c664:	9200      	str	r2, [sp, #0]
 801c666:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c66a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801c66e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801c672:	4623      	mov	r3, r4
 801c674:	4631      	mov	r1, r6
 801c676:	f7ff fd69 	bl	801c14c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c67a:	e74e      	b.n	801c51a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c67c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c67e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c680:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c684:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801c686:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c688:	1400      	asrs	r0, r0, #16
 801c68a:	142d      	asrs	r5, r5, #16
 801c68c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c68e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c692:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c696:	fb02 5000 	mla	r0, r2, r0, r5
 801c69a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c69c:	f815 e000 	ldrb.w	lr, [r5, r0]
 801c6a0:	eb05 0c00 	add.w	ip, r5, r0
 801c6a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c6a8:	eb04 060e 	add.w	r6, r4, lr
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	f000 8097 	beq.w	801c7e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801c6b2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c6b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6ba:	4425      	add	r5, r4
 801c6bc:	2900      	cmp	r1, #0
 801c6be:	f000 8098 	beq.w	801c7f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801c6c2:	eb0c 0002 	add.w	r0, ip, r2
 801c6c6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c6ca:	7840      	ldrb	r0, [r0, #1]
 801c6cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c6d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c6d4:	4422      	add	r2, r4
 801c6d6:	4420      	add	r0, r4
 801c6d8:	b29b      	uxth	r3, r3
 801c6da:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c6de:	b289      	uxth	r1, r1
 801c6e0:	f895 e000 	ldrb.w	lr, [r5]
 801c6e4:	3703      	adds	r7, #3
 801c6e6:	f109 39ff 	add.w	r9, r9, #4294967295
 801c6ea:	fb03 f801 	mul.w	r8, r3, r1
 801c6ee:	011b      	lsls	r3, r3, #4
 801c6f0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c6f4:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801c6f8:	eba3 0308 	sub.w	r3, r3, r8
 801c6fc:	b289      	uxth	r1, r1
 801c6fe:	b29b      	uxth	r3, r3
 801c700:	ebac 0c01 	sub.w	ip, ip, r1
 801c704:	fb03 fe0e 	mul.w	lr, r3, lr
 801c708:	fa1f fc8c 	uxth.w	ip, ip
 801c70c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c710:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c714:	f892 b000 	ldrb.w	fp, [r2]
 801c718:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c71c:	f890 b000 	ldrb.w	fp, [r0]
 801c720:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c724:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801c728:	fb1b fb03 	smulbb	fp, fp, r3
 801c72c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c732:	fb0e be0a 	mla	lr, lr, sl, fp
 801c736:	fa1f fe8e 	uxth.w	lr, lr
 801c73a:	f10e 0b01 	add.w	fp, lr, #1
 801c73e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c742:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c746:	f807 ec06 	strb.w	lr, [r7, #-6]
 801c74a:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c74e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c752:	fb03 fe0e 	mul.w	lr, r3, lr
 801c756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c758:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c75c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c760:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c764:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c768:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c76c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801c770:	fb1b fb03 	smulbb	fp, fp, r3
 801c774:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c77a:	fb0e be0a 	mla	lr, lr, sl, fp
 801c77e:	fa1f fe8e 	uxth.w	lr, lr
 801c782:	f10e 0b01 	add.w	fp, lr, #1
 801c786:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c78a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c78e:	f807 ec05 	strb.w	lr, [r7, #-5]
 801c792:	78ad      	ldrb	r5, [r5, #2]
 801c794:	78b6      	ldrb	r6, [r6, #2]
 801c796:	436b      	muls	r3, r5
 801c798:	7895      	ldrb	r5, [r2, #2]
 801c79a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c79c:	fb0c 3306 	mla	r3, ip, r6, r3
 801c7a0:	fb01 3305 	mla	r3, r1, r5, r3
 801c7a4:	7885      	ldrb	r5, [r0, #2]
 801c7a6:	fb08 3805 	mla	r8, r8, r5, r3
 801c7aa:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801c7ae:	fb13 f302 	smulbb	r3, r3, r2
 801c7b2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c7b6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801c7b8:	fb08 380a 	mla	r8, r8, sl, r3
 801c7bc:	fa1f f888 	uxth.w	r8, r8
 801c7c0:	f108 0301 	add.w	r3, r8, #1
 801c7c4:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801c7c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c7ca:	4413      	add	r3, r2
 801c7cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c7ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7d2:	931d      	str	r3, [sp, #116]	@ 0x74
 801c7d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c7d6:	f807 8c04 	strb.w	r8, [r7, #-4]
 801c7da:	4413      	add	r3, r2
 801c7dc:	931e      	str	r3, [sp, #120]	@ 0x78
 801c7de:	e6d6      	b.n	801c58e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c7e0:	b151      	cbz	r1, 801c7f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801c7e2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c7e6:	4630      	mov	r0, r6
 801c7e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c7ec:	4422      	add	r2, r4
 801c7ee:	4635      	mov	r5, r6
 801c7f0:	e772      	b.n	801c6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c7f2:	4630      	mov	r0, r6
 801c7f4:	4632      	mov	r2, r6
 801c7f6:	e76f      	b.n	801c6d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c7f8:	4630      	mov	r0, r6
 801c7fa:	4632      	mov	r2, r6
 801c7fc:	e7f7      	b.n	801c7ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c7fe:	b013      	add	sp, #76	@ 0x4c
 801c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c804 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c804:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c808:	784c      	ldrb	r4, [r1, #1]
 801c80a:	f891 a002 	ldrb.w	sl, [r1, #2]
 801c80e:	0224      	lsls	r4, r4, #8
 801c810:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801c814:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801c818:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c81c:	f891 a000 	ldrb.w	sl, [r1]
 801c820:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801c824:	ea44 040a 	orr.w	r4, r4, sl
 801c828:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801c82c:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801c830:	9401      	str	r4, [sp, #4]
 801c832:	fb05 c70e 	mla	r7, r5, lr, ip
 801c836:	2d00      	cmp	r5, #0
 801c838:	eb02 0807 	add.w	r8, r2, r7
 801c83c:	db72      	blt.n	801c924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c83e:	45a9      	cmp	r9, r5
 801c840:	dd70      	ble.n	801c924 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c842:	f1bc 0f00 	cmp.w	ip, #0
 801c846:	db6b      	blt.n	801c920 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c848:	45e6      	cmp	lr, ip
 801c84a:	dd69      	ble.n	801c920 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c84c:	5dd7      	ldrb	r7, [r2, r7]
 801c84e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c852:	441f      	add	r7, r3
 801c854:	f11c 0201 	adds.w	r2, ip, #1
 801c858:	d467      	bmi.n	801c92a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c85a:	4596      	cmp	lr, r2
 801c85c:	dd65      	ble.n	801c92a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c85e:	2800      	cmp	r0, #0
 801c860:	d063      	beq.n	801c92a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c862:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c866:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c86a:	441c      	add	r4, r3
 801c86c:	3501      	adds	r5, #1
 801c86e:	d460      	bmi.n	801c932 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c870:	45a9      	cmp	r9, r5
 801c872:	dd5e      	ble.n	801c932 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c874:	2e00      	cmp	r6, #0
 801c876:	d05c      	beq.n	801c932 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c878:	f1bc 0f00 	cmp.w	ip, #0
 801c87c:	db57      	blt.n	801c92e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c87e:	45e6      	cmp	lr, ip
 801c880:	dd55      	ble.n	801c92e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c882:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c88a:	441d      	add	r5, r3
 801c88c:	f11c 0201 	adds.w	r2, ip, #1
 801c890:	d452      	bmi.n	801c938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c892:	4596      	cmp	lr, r2
 801c894:	dd50      	ble.n	801c938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c896:	2800      	cmp	r0, #0
 801c898:	d04e      	beq.n	801c938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c89a:	44c6      	add	lr, r8
 801c89c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c8a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8a4:	4413      	add	r3, r2
 801c8a6:	b280      	uxth	r0, r0
 801c8a8:	f897 8000 	ldrb.w	r8, [r7]
 801c8ac:	b2b2      	uxth	r2, r6
 801c8ae:	fb00 f602 	mul.w	r6, r0, r2
 801c8b2:	0100      	lsls	r0, r0, #4
 801c8b4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c8b8:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801c8bc:	1b80      	subs	r0, r0, r6
 801c8be:	fa1f fc82 	uxth.w	ip, r2
 801c8c2:	b282      	uxth	r2, r0
 801c8c4:	7820      	ldrb	r0, [r4, #0]
 801c8c6:	ebae 0e0c 	sub.w	lr, lr, ip
 801c8ca:	4350      	muls	r0, r2
 801c8cc:	fa1f fe8e 	uxth.w	lr, lr
 801c8d0:	fb0e 0808 	mla	r8, lr, r8, r0
 801c8d4:	7828      	ldrb	r0, [r5, #0]
 801c8d6:	fb0c 8800 	mla	r8, ip, r0, r8
 801c8da:	7818      	ldrb	r0, [r3, #0]
 801c8dc:	fb06 8000 	mla	r0, r6, r0, r8
 801c8e0:	1200      	asrs	r0, r0, #8
 801c8e2:	7008      	strb	r0, [r1, #0]
 801c8e4:	7860      	ldrb	r0, [r4, #1]
 801c8e6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c8ea:	4350      	muls	r0, r2
 801c8ec:	fb0e 0808 	mla	r8, lr, r8, r0
 801c8f0:	7868      	ldrb	r0, [r5, #1]
 801c8f2:	fb0c 8800 	mla	r8, ip, r0, r8
 801c8f6:	7858      	ldrb	r0, [r3, #1]
 801c8f8:	fb06 8000 	mla	r0, r6, r0, r8
 801c8fc:	1200      	asrs	r0, r0, #8
 801c8fe:	7048      	strb	r0, [r1, #1]
 801c900:	78a0      	ldrb	r0, [r4, #2]
 801c902:	78bf      	ldrb	r7, [r7, #2]
 801c904:	4350      	muls	r0, r2
 801c906:	78aa      	ldrb	r2, [r5, #2]
 801c908:	fb0e 0007 	mla	r0, lr, r7, r0
 801c90c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c910:	789a      	ldrb	r2, [r3, #2]
 801c912:	fb06 c202 	mla	r2, r6, r2, ip
 801c916:	1212      	asrs	r2, r2, #8
 801c918:	708a      	strb	r2, [r1, #2]
 801c91a:	b002      	add	sp, #8
 801c91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c920:	af01      	add	r7, sp, #4
 801c922:	e797      	b.n	801c854 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801c924:	ac01      	add	r4, sp, #4
 801c926:	4627      	mov	r7, r4
 801c928:	e7a0      	b.n	801c86c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c92a:	ac01      	add	r4, sp, #4
 801c92c:	e79e      	b.n	801c86c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c92e:	ad01      	add	r5, sp, #4
 801c930:	e7ac      	b.n	801c88c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801c932:	ab01      	add	r3, sp, #4
 801c934:	461d      	mov	r5, r3
 801c936:	e7b6      	b.n	801c8a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801c938:	ab01      	add	r3, sp, #4
 801c93a:	e7b4      	b.n	801c8a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801c93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c940:	b08d      	sub	sp, #52	@ 0x34
 801c942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c946:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801c94a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c94c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c94e:	9306      	str	r3, [sp, #24]
 801c950:	6850      	ldr	r0, [r2, #4]
 801c952:	6812      	ldr	r2, [r2, #0]
 801c954:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c956:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801c95a:	fb00 1303 	mla	r3, r0, r3, r1
 801c95e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c962:	18d3      	adds	r3, r2, r3
 801c964:	9307      	str	r3, [sp, #28]
 801c966:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	9308      	str	r3, [sp, #32]
 801c96c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c96e:	685d      	ldr	r5, [r3, #4]
 801c970:	3504      	adds	r5, #4
 801c972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c974:	2b00      	cmp	r3, #0
 801c976:	dc03      	bgt.n	801c980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	f340 81e6 	ble.w	801cd4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c980:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c982:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c986:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c98a:	1e48      	subs	r0, r1, #1
 801c98c:	1e56      	subs	r6, r2, #1
 801c98e:	9b06      	ldr	r3, [sp, #24]
 801c990:	2b00      	cmp	r3, #0
 801c992:	f340 80bd 	ble.w	801cb10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c996:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c998:	1427      	asrs	r7, r4, #16
 801c99a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c99e:	d406      	bmi.n	801c9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c9a0:	4287      	cmp	r7, r0
 801c9a2:	da04      	bge.n	801c9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	db02      	blt.n	801c9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c9a8:	42b3      	cmp	r3, r6
 801c9aa:	f2c0 80b2 	blt.w	801cb12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801c9ae:	3701      	adds	r7, #1
 801c9b0:	f100 80a1 	bmi.w	801caf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c9b4:	42b9      	cmp	r1, r7
 801c9b6:	f2c0 809e 	blt.w	801caf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c9ba:	3301      	adds	r3, #1
 801c9bc:	f100 809b 	bmi.w	801caf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c9c0:	429a      	cmp	r2, r3
 801c9c2:	f2c0 8098 	blt.w	801caf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c9c6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801c9ca:	f1bb 0f00 	cmp.w	fp, #0
 801c9ce:	f340 80bf 	ble.w	801cb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c9d2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c9d4:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801c9d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c9d8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c9dc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801c9e0:	1420      	asrs	r0, r4, #16
 801c9e2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c9e4:	ea4f 4723 	mov.w	r7, r3, asr #16
 801c9e8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c9ec:	6892      	ldr	r2, [r2, #8]
 801c9ee:	f100 8103 	bmi.w	801cbf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c9f2:	f102 3eff 	add.w	lr, r2, #4294967295
 801c9f6:	4570      	cmp	r0, lr
 801c9f8:	f280 80fe 	bge.w	801cbf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c9fc:	2f00      	cmp	r7, #0
 801c9fe:	f2c0 80fb 	blt.w	801cbf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ca02:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ca06:	4577      	cmp	r7, lr
 801ca08:	f280 80f6 	bge.w	801cbf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ca0c:	b212      	sxth	r2, r2
 801ca0e:	fb07 0002 	mla	r0, r7, r2, r0
 801ca12:	9f08      	ldr	r7, [sp, #32]
 801ca14:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ca18:	eb07 0e00 	add.w	lr, r7, r0
 801ca1c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ca20:	eb05 0c08 	add.w	ip, r5, r8
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	f000 80d8 	beq.w	801cbda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ca2a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ca2e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ca32:	442f      	add	r7, r5
 801ca34:	2900      	cmp	r1, #0
 801ca36:	f000 80d9 	beq.w	801cbec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca3a:	eb0e 0002 	add.w	r0, lr, r2
 801ca3e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ca42:	7840      	ldrb	r0, [r0, #1]
 801ca44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ca48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ca4c:	442a      	add	r2, r5
 801ca4e:	4428      	add	r0, r5
 801ca50:	b29b      	uxth	r3, r3
 801ca52:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ca56:	b289      	uxth	r1, r1
 801ca58:	f897 8000 	ldrb.w	r8, [r7]
 801ca5c:	fb03 f901 	mul.w	r9, r3, r1
 801ca60:	011b      	lsls	r3, r3, #4
 801ca62:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ca66:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ca6a:	eba3 0309 	sub.w	r3, r3, r9
 801ca6e:	b289      	uxth	r1, r1
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	ebae 0e01 	sub.w	lr, lr, r1
 801ca76:	fb03 f808 	mul.w	r8, r3, r8
 801ca7a:	fa1f fe8e 	uxth.w	lr, lr
 801ca7e:	fb0e 880a 	mla	r8, lr, sl, r8
 801ca82:	f892 a000 	ldrb.w	sl, [r2]
 801ca86:	fb01 880a 	mla	r8, r1, sl, r8
 801ca8a:	f890 a000 	ldrb.w	sl, [r0]
 801ca8e:	fb09 880a 	mla	r8, r9, sl, r8
 801ca92:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ca96:	f886 8000 	strb.w	r8, [r6]
 801ca9a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ca9e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801caa2:	fb03 f808 	mul.w	r8, r3, r8
 801caa6:	fb0e 880a 	mla	r8, lr, sl, r8
 801caaa:	f892 a001 	ldrb.w	sl, [r2, #1]
 801caae:	fb01 880a 	mla	r8, r1, sl, r8
 801cab2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cab6:	fb09 880a 	mla	r8, r9, sl, r8
 801caba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cabe:	f886 8001 	strb.w	r8, [r6, #1]
 801cac2:	78bf      	ldrb	r7, [r7, #2]
 801cac4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801cac8:	437b      	muls	r3, r7
 801caca:	7892      	ldrb	r2, [r2, #2]
 801cacc:	fb0e 330c 	mla	r3, lr, ip, r3
 801cad0:	fb01 3102 	mla	r1, r1, r2, r3
 801cad4:	7882      	ldrb	r2, [r0, #2]
 801cad6:	fb09 1902 	mla	r9, r9, r2, r1
 801cada:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cade:	f886 9002 	strb.w	r9, [r6, #2]
 801cae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cae4:	3603      	adds	r6, #3
 801cae6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cae8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801caec:	441c      	add	r4, r3
 801caee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801caf0:	4413      	add	r3, r2
 801caf2:	9318      	str	r3, [sp, #96]	@ 0x60
 801caf4:	e769      	b.n	801c9ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801caf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801caf8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801cafa:	441c      	add	r4, r3
 801cafc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cafe:	443b      	add	r3, r7
 801cb00:	9318      	str	r3, [sp, #96]	@ 0x60
 801cb02:	9b06      	ldr	r3, [sp, #24]
 801cb04:	3b01      	subs	r3, #1
 801cb06:	9306      	str	r3, [sp, #24]
 801cb08:	9b07      	ldr	r3, [sp, #28]
 801cb0a:	3303      	adds	r3, #3
 801cb0c:	9307      	str	r3, [sp, #28]
 801cb0e:	e73e      	b.n	801c98e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cb10:	d026      	beq.n	801cb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801cb12:	9b06      	ldr	r3, [sp, #24]
 801cb14:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801cb16:	3b01      	subs	r3, #1
 801cb18:	fb00 4003 	mla	r0, r0, r3, r4
 801cb1c:	1400      	asrs	r0, r0, #16
 801cb1e:	f53f af52 	bmi.w	801c9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cb22:	3901      	subs	r1, #1
 801cb24:	4288      	cmp	r0, r1
 801cb26:	f6bf af4e 	bge.w	801c9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cb2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb2c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801cb2e:	fb01 0303 	mla	r3, r1, r3, r0
 801cb32:	141b      	asrs	r3, r3, #16
 801cb34:	f53f af47 	bmi.w	801c9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cb38:	3a01      	subs	r2, #1
 801cb3a:	4293      	cmp	r3, r2
 801cb3c:	f6bf af43 	bge.w	801c9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cb40:	9b07      	ldr	r3, [sp, #28]
 801cb42:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cb46:	f103 0803 	add.w	r8, r3, #3
 801cb4a:	f1ba 0f00 	cmp.w	sl, #0
 801cb4e:	dc71      	bgt.n	801cc34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801cb50:	9b06      	ldr	r3, [sp, #24]
 801cb52:	9a07      	ldr	r2, [sp, #28]
 801cb54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb5c:	441a      	add	r2, r3
 801cb5e:	9207      	str	r2, [sp, #28]
 801cb60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	f340 80f2 	ble.w	801cd4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801cb68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cb6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb72:	eeb0 6a62 	vmov.f32	s12, s5
 801cb76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb82:	ee16 4a10 	vmov	r4, s12
 801cb86:	eeb0 6a43 	vmov.f32	s12, s6
 801cb8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb8e:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801cb92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb96:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cba6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbaa:	ee12 2a90 	vmov	r2, s5
 801cbae:	eef0 2a47 	vmov.f32	s5, s14
 801cbb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbb6:	ee13 2a10 	vmov	r2, s6
 801cbba:	9319      	str	r3, [sp, #100]	@ 0x64
 801cbbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cbbe:	eeb0 3a67 	vmov.f32	s6, s15
 801cbc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbc6:	931a      	str	r3, [sp, #104]	@ 0x68
 801cbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cbcc:	3b01      	subs	r3, #1
 801cbce:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cbd2:	bf08      	it	eq
 801cbd4:	4613      	moveq	r3, r2
 801cbd6:	9306      	str	r3, [sp, #24]
 801cbd8:	e6cb      	b.n	801c972 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cbda:	b151      	cbz	r1, 801cbf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cbdc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801cbe0:	4660      	mov	r0, ip
 801cbe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cbe6:	442a      	add	r2, r5
 801cbe8:	4667      	mov	r7, ip
 801cbea:	e731      	b.n	801ca50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cbec:	4660      	mov	r0, ip
 801cbee:	4662      	mov	r2, ip
 801cbf0:	e72e      	b.n	801ca50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cbf2:	4660      	mov	r0, ip
 801cbf4:	4662      	mov	r2, ip
 801cbf6:	e7f7      	b.n	801cbe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801cbf8:	f110 0e01 	adds.w	lr, r0, #1
 801cbfc:	f53f af71 	bmi.w	801cae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc00:	4572      	cmp	r2, lr
 801cc02:	f6ff af6e 	blt.w	801cae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc06:	f117 0e01 	adds.w	lr, r7, #1
 801cc0a:	f53f af6a 	bmi.w	801cae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc0e:	45f4      	cmp	ip, lr
 801cc10:	f6ff af67 	blt.w	801cae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc14:	b212      	sxth	r2, r2
 801cc16:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cc1a:	fa0f f38c 	sxth.w	r3, ip
 801cc1e:	9200      	str	r2, [sp, #0]
 801cc20:	4631      	mov	r1, r6
 801cc22:	9a08      	ldr	r2, [sp, #32]
 801cc24:	9301      	str	r3, [sp, #4]
 801cc26:	462b      	mov	r3, r5
 801cc28:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801cc2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801cc2e:	f7ff fde9 	bl	801c804 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801cc32:	e756      	b.n	801cae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc34:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cc36:	1426      	asrs	r6, r4, #16
 801cc38:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801cc3a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801cc3e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cc42:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cc44:	1400      	asrs	r0, r0, #16
 801cc46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cc4a:	fb02 6000 	mla	r0, r2, r0, r6
 801cc4e:	9e08      	ldr	r6, [sp, #32]
 801cc50:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cc54:	eb06 0c00 	add.w	ip, r6, r0
 801cc58:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cc5c:	eb05 070e 	add.w	r7, r5, lr
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d064      	beq.n	801cd2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801cc64:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801cc68:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc6c:	442e      	add	r6, r5
 801cc6e:	2900      	cmp	r1, #0
 801cc70:	d066      	beq.n	801cd40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801cc72:	eb0c 0002 	add.w	r0, ip, r2
 801cc76:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cc7a:	7840      	ldrb	r0, [r0, #1]
 801cc7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cc84:	442a      	add	r2, r5
 801cc86:	4428      	add	r0, r5
 801cc88:	b29b      	uxth	r3, r3
 801cc8a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801cc8e:	b289      	uxth	r1, r1
 801cc90:	f896 e000 	ldrb.w	lr, [r6]
 801cc94:	f108 0803 	add.w	r8, r8, #3
 801cc98:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc9c:	fb03 f901 	mul.w	r9, r3, r1
 801cca0:	011b      	lsls	r3, r3, #4
 801cca2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cca6:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ccaa:	eba3 0309 	sub.w	r3, r3, r9
 801ccae:	b289      	uxth	r1, r1
 801ccb0:	b29b      	uxth	r3, r3
 801ccb2:	ebac 0c01 	sub.w	ip, ip, r1
 801ccb6:	fb03 fe0e 	mul.w	lr, r3, lr
 801ccba:	fa1f fc8c 	uxth.w	ip, ip
 801ccbe:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ccc2:	f892 b000 	ldrb.w	fp, [r2]
 801ccc6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ccca:	f890 b000 	ldrb.w	fp, [r0]
 801ccce:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ccd2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ccd6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ccda:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ccde:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cce2:	fb03 fe0e 	mul.w	lr, r3, lr
 801cce6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ccea:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ccee:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ccf2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ccf6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ccfa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ccfe:	f808 ec05 	strb.w	lr, [r8, #-5]
 801cd02:	78b6      	ldrb	r6, [r6, #2]
 801cd04:	78bf      	ldrb	r7, [r7, #2]
 801cd06:	4373      	muls	r3, r6
 801cd08:	7896      	ldrb	r6, [r2, #2]
 801cd0a:	7882      	ldrb	r2, [r0, #2]
 801cd0c:	fb0c 3307 	mla	r3, ip, r7, r3
 801cd10:	fb01 3306 	mla	r3, r1, r6, r3
 801cd14:	fb09 3902 	mla	r9, r9, r2, r3
 801cd18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cd1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cd1c:	441c      	add	r4, r3
 801cd1e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cd20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd24:	4413      	add	r3, r2
 801cd26:	f808 9c04 	strb.w	r9, [r8, #-4]
 801cd2a:	9318      	str	r3, [sp, #96]	@ 0x60
 801cd2c:	e70d      	b.n	801cb4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801cd2e:	b151      	cbz	r1, 801cd46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801cd30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cd34:	4638      	mov	r0, r7
 801cd36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd3a:	442a      	add	r2, r5
 801cd3c:	463e      	mov	r6, r7
 801cd3e:	e7a3      	b.n	801cc88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cd40:	4638      	mov	r0, r7
 801cd42:	463a      	mov	r2, r7
 801cd44:	e7a0      	b.n	801cc88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cd46:	4638      	mov	r0, r7
 801cd48:	463a      	mov	r2, r7
 801cd4a:	e7f7      	b.n	801cd3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801cd4c:	b00d      	add	sp, #52	@ 0x34
 801cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801cd52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd56:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801cd5a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801cd5e:	2d00      	cmp	r5, #0
 801cd60:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801cd64:	fb05 700c 	mla	r0, r5, ip, r7
 801cd68:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801cd6c:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801cd70:	eb02 0800 	add.w	r8, r2, r0
 801cd74:	f2c0 8118 	blt.w	801cfa8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801cd78:	45a9      	cmp	r9, r5
 801cd7a:	f340 8115 	ble.w	801cfa8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801cd7e:	2f00      	cmp	r7, #0
 801cd80:	f2c0 8110 	blt.w	801cfa4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cd84:	45bc      	cmp	ip, r7
 801cd86:	f340 810d 	ble.w	801cfa4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801cd8a:	5c12      	ldrb	r2, [r2, r0]
 801cd8c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cd90:	1c7a      	adds	r2, r7, #1
 801cd92:	f100 810c 	bmi.w	801cfae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801cd96:	4594      	cmp	ip, r2
 801cd98:	f340 8109 	ble.w	801cfae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801cd9c:	2c00      	cmp	r4, #0
 801cd9e:	f000 8108 	beq.w	801cfb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801cda2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cda6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cdaa:	3501      	adds	r5, #1
 801cdac:	f100 8105 	bmi.w	801cfba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801cdb0:	45a9      	cmp	r9, r5
 801cdb2:	f340 8102 	ble.w	801cfba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801cdb6:	f1be 0f00 	cmp.w	lr, #0
 801cdba:	f000 8101 	beq.w	801cfc0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801cdbe:	2f00      	cmp	r7, #0
 801cdc0:	f2c0 80f9 	blt.w	801cfb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cdc4:	45bc      	cmp	ip, r7
 801cdc6:	f340 80f6 	ble.w	801cfb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801cdca:	f818 200c 	ldrb.w	r2, [r8, ip]
 801cdce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cdd2:	3701      	adds	r7, #1
 801cdd4:	f100 80f7 	bmi.w	801cfc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801cdd8:	45bc      	cmp	ip, r7
 801cdda:	f340 80f4 	ble.w	801cfc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801cdde:	2c00      	cmp	r4, #0
 801cde0:	f000 80f3 	beq.w	801cfca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801cde4:	44c4      	add	ip, r8
 801cde6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cdea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cdee:	fa1f fc84 	uxth.w	ip, r4
 801cdf2:	fa1f f48e 	uxth.w	r4, lr
 801cdf6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cdfa:	fb04 fe0c 	mul.w	lr, r4, ip
 801cdfe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ce02:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ce06:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801ce0a:	ebac 070e 	sub.w	r7, ip, lr
 801ce0e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801ce12:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ce16:	b2a4      	uxth	r4, r4
 801ce18:	b2bf      	uxth	r7, r7
 801ce1a:	1b1b      	subs	r3, r3, r4
 801ce1c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ce20:	fb07 fc0a 	mul.w	ip, r7, sl
 801ce24:	b29b      	uxth	r3, r3
 801ce26:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ce2a:	9300      	str	r3, [sp, #0]
 801ce2c:	fb04 cc09 	mla	ip, r4, r9, ip
 801ce30:	fb0e cc08 	mla	ip, lr, r8, ip
 801ce34:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ce38:	9301      	str	r3, [sp, #4]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	f000 80af 	beq.w	801cf9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801ce40:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801ce44:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ce48:	fb0b fc0c 	mul.w	ip, fp, ip
 801ce4c:	fb0b f606 	mul.w	r6, fp, r6
 801ce50:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ce54:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ce58:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801ce5c:	44dc      	add	ip, fp
 801ce5e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801ce62:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ce66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ce6a:	fb0a fb0b 	mul.w	fp, sl, fp
 801ce6e:	fb0a fa00 	mul.w	sl, sl, r0
 801ce72:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801ce76:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ce7a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801ce7e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ce82:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ce86:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ce8a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ce8e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ce92:	0a36      	lsrs	r6, r6, #8
 801ce94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce98:	44dc      	add	ip, fp
 801ce9a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801ce9e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cea2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cea6:	fb09 fb0b 	mul.w	fp, r9, fp
 801ceaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ceae:	fb09 f905 	mul.w	r9, r9, r5
 801ceb2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801ceb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ceba:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801cebe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cec2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cec6:	fb0c fc07 	mul.w	ip, ip, r7
 801ceca:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801cece:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801ced2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ced6:	4458      	add	r0, fp
 801ced8:	fb08 f505 	mul.w	r5, r8, r5
 801cedc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cee0:	fb08 f802 	mul.w	r8, r8, r2
 801cee4:	0a00      	lsrs	r0, r0, #8
 801cee6:	0a2a      	lsrs	r2, r5, #8
 801cee8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801ceec:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cef0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cef4:	4415      	add	r5, r2
 801cef6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801cefa:	0a2d      	lsrs	r5, r5, #8
 801cefc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cf00:	9a00      	ldr	r2, [sp, #0]
 801cf02:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801cf06:	fb03 cc02 	mla	ip, r3, r2, ip
 801cf0a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cf0e:	9b01      	ldr	r3, [sp, #4]
 801cf10:	fb05 c50e 	mla	r5, r5, lr, ip
 801cf14:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801cf18:	fb00 5004 	mla	r0, r0, r4, r5
 801cf1c:	0a00      	lsrs	r0, r0, #8
 801cf1e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801cf22:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801cf26:	4378      	muls	r0, r7
 801cf28:	fb02 0006 	mla	r0, r2, r6, r0
 801cf2c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801cf30:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801cf34:	fb04 e000 	mla	r0, r4, r0, lr
 801cf38:	0a00      	lsrs	r0, r0, #8
 801cf3a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cf3e:	4328      	orrs	r0, r5
 801cf40:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801cf44:	b2ad      	uxth	r5, r5
 801cf46:	b2c4      	uxtb	r4, r0
 801cf48:	436b      	muls	r3, r5
 801cf4a:	fb14 f405 	smulbb	r4, r4, r5
 801cf4e:	1c5a      	adds	r2, r3, #1
 801cf50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cf54:	780b      	ldrb	r3, [r1, #0]
 801cf56:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801cf5a:	b2d2      	uxtb	r2, r2
 801cf5c:	fb03 4302 	mla	r3, r3, r2, r4
 801cf60:	b29b      	uxth	r3, r3
 801cf62:	1c5c      	adds	r4, r3, #1
 801cf64:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801cf68:	784c      	ldrb	r4, [r1, #1]
 801cf6a:	fb14 f402 	smulbb	r4, r4, r2
 801cf6e:	121b      	asrs	r3, r3, #8
 801cf70:	700b      	strb	r3, [r1, #0]
 801cf72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801cf76:	fb03 4305 	mla	r3, r3, r5, r4
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	1c5c      	adds	r4, r3, #1
 801cf7e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801cf82:	0c04      	lsrs	r4, r0, #16
 801cf84:	7888      	ldrb	r0, [r1, #2]
 801cf86:	121b      	asrs	r3, r3, #8
 801cf88:	fb10 f002 	smulbb	r0, r0, r2
 801cf8c:	704b      	strb	r3, [r1, #1]
 801cf8e:	fb04 0005 	mla	r0, r4, r5, r0
 801cf92:	b280      	uxth	r0, r0
 801cf94:	1c43      	adds	r3, r0, #1
 801cf96:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cf9a:	1200      	asrs	r0, r0, #8
 801cf9c:	7088      	strb	r0, [r1, #2]
 801cf9e:	b003      	add	sp, #12
 801cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa4:	2600      	movs	r6, #0
 801cfa6:	e6f3      	b.n	801cd90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801cfa8:	2000      	movs	r0, #0
 801cfaa:	4606      	mov	r6, r0
 801cfac:	e6fd      	b.n	801cdaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cfae:	2000      	movs	r0, #0
 801cfb0:	e6fb      	b.n	801cdaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	e6f9      	b.n	801cdaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cfb6:	2500      	movs	r5, #0
 801cfb8:	e70b      	b.n	801cdd2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801cfba:	2200      	movs	r2, #0
 801cfbc:	4615      	mov	r5, r2
 801cfbe:	e716      	b.n	801cdee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cfc0:	4672      	mov	r2, lr
 801cfc2:	4675      	mov	r5, lr
 801cfc4:	e713      	b.n	801cdee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cfc6:	2200      	movs	r2, #0
 801cfc8:	e711      	b.n	801cdee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cfca:	4622      	mov	r2, r4
 801cfcc:	e70f      	b.n	801cdee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801cfce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfd2:	b09f      	sub	sp, #124	@ 0x7c
 801cfd4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801cfd6:	9309      	str	r3, [sp, #36]	@ 0x24
 801cfd8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801cfda:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801cfde:	901d      	str	r0, [sp, #116]	@ 0x74
 801cfe0:	931c      	str	r3, [sp, #112]	@ 0x70
 801cfe2:	6850      	ldr	r0, [r2, #4]
 801cfe4:	9119      	str	r1, [sp, #100]	@ 0x64
 801cfe6:	6812      	ldr	r2, [r2, #0]
 801cfe8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801cfea:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801cfee:	fb00 1303 	mla	r3, r0, r3, r1
 801cff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cff6:	18d3      	adds	r3, r2, r3
 801cff8:	930c      	str	r3, [sp, #48]	@ 0x30
 801cffa:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	9312      	str	r3, [sp, #72]	@ 0x48
 801d000:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d002:	685e      	ldr	r6, [r3, #4]
 801d004:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801d008:	3604      	adds	r6, #4
 801d00a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d00c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d00e:	2b00      	cmp	r3, #0
 801d010:	dc03      	bgt.n	801d01a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d012:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d014:	2b00      	cmp	r3, #0
 801d016:	f340 8378 	ble.w	801d70a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d01a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d01c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d020:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d024:	1e48      	subs	r0, r1, #1
 801d026:	1e57      	subs	r7, r2, #1
 801d028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	f340 818c 	ble.w	801d348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801d030:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d032:	142b      	asrs	r3, r5, #16
 801d034:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d038:	d406      	bmi.n	801d048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d03a:	4584      	cmp	ip, r0
 801d03c:	da04      	bge.n	801d048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d03e:	2b00      	cmp	r3, #0
 801d040:	db02      	blt.n	801d048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d042:	42bb      	cmp	r3, r7
 801d044:	f2c0 8181 	blt.w	801d34a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d048:	f11c 0c01 	adds.w	ip, ip, #1
 801d04c:	f100 816f 	bmi.w	801d32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d050:	4561      	cmp	r1, ip
 801d052:	f2c0 816c 	blt.w	801d32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d056:	3301      	adds	r3, #1
 801d058:	f100 8169 	bmi.w	801d32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d05c:	429a      	cmp	r2, r3
 801d05e:	f2c0 8166 	blt.w	801d32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d064:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d066:	931a      	str	r3, [sp, #104]	@ 0x68
 801d068:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	f340 818c 	ble.w	801d388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d070:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d072:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d076:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d07a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d07e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d080:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d084:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d086:	141b      	asrs	r3, r3, #16
 801d088:	f100 81d0 	bmi.w	801d42c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d08c:	f100 38ff 	add.w	r8, r0, #4294967295
 801d090:	4543      	cmp	r3, r8
 801d092:	f280 81cb 	bge.w	801d42c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d096:	f1bc 0f00 	cmp.w	ip, #0
 801d09a:	f2c0 81c7 	blt.w	801d42c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d09e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d0a2:	45c4      	cmp	ip, r8
 801d0a4:	f280 81c2 	bge.w	801d42c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d0a8:	b200      	sxth	r0, r0
 801d0aa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0ac:	fb0c 3300 	mla	r3, ip, r0, r3
 801d0b0:	eb04 0803 	add.w	r8, r4, r3
 801d0b4:	5ce3      	ldrb	r3, [r4, r3]
 801d0b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d0ba:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d0be:	2a00      	cmp	r2, #0
 801d0c0:	f000 81a9 	beq.w	801d416 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801d0c4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d0c8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d0cc:	940e      	str	r4, [sp, #56]	@ 0x38
 801d0ce:	0e24      	lsrs	r4, r4, #24
 801d0d0:	9415      	str	r4, [sp, #84]	@ 0x54
 801d0d2:	b179      	cbz	r1, 801d0f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d0d4:	eb08 0c00 	add.w	ip, r8, r0
 801d0d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d0dc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d0e0:	900a      	str	r0, [sp, #40]	@ 0x28
 801d0e2:	0e00      	lsrs	r0, r0, #24
 801d0e4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d0e6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d0ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d0ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d0f0:	0e00      	lsrs	r0, r0, #24
 801d0f2:	9016      	str	r0, [sp, #88]	@ 0x58
 801d0f4:	b292      	uxth	r2, r2
 801d0f6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d0f8:	b289      	uxth	r1, r1
 801d0fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d0fc:	fb02 f901 	mul.w	r9, r2, r1
 801d100:	0112      	lsls	r2, r2, #4
 801d102:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d106:	eba2 0809 	sub.w	r8, r2, r9
 801d10a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d10e:	b289      	uxth	r1, r1
 801d110:	fa1f f888 	uxth.w	r8, r8
 801d114:	1a52      	subs	r2, r2, r1
 801d116:	fb08 f000 	mul.w	r0, r8, r0
 801d11a:	b292      	uxth	r2, r2
 801d11c:	fb02 000e 	mla	r0, r2, lr, r0
 801d120:	fb01 0004 	mla	r0, r1, r4, r0
 801d124:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d126:	fb09 0004 	mla	r0, r9, r4, r0
 801d12a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d12e:	2800      	cmp	r0, #0
 801d130:	f000 80f2 	beq.w	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d134:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d138:	d01b      	beq.n	801d172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d13a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d13e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d142:	fb0e fa0a 	mul.w	sl, lr, sl
 801d146:	fb0e fe03 	mul.w	lr, lr, r3
 801d14a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d14e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d152:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d156:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d15a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d15e:	4453      	add	r3, sl
 801d160:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d164:	0a1b      	lsrs	r3, r3, #8
 801d166:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d16a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d16e:	ea43 030c 	orr.w	r3, r3, ip
 801d172:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d174:	2cff      	cmp	r4, #255	@ 0xff
 801d176:	d021      	beq.n	801d1bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d178:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d17a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d17e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d180:	fb04 fb0b 	mul.w	fp, r4, fp
 801d184:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d186:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d18a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d18c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d190:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d194:	fb04 fa0a 	mul.w	sl, r4, sl
 801d198:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d19c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d1a0:	44de      	add	lr, fp
 801d1a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d1a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d1ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d1b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d1b6:	ea4e 040a 	orr.w	r4, lr, sl
 801d1ba:	940e      	str	r4, [sp, #56]	@ 0x38
 801d1bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d1be:	2cff      	cmp	r4, #255	@ 0xff
 801d1c0:	d021      	beq.n	801d206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d1c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d1c4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d1c8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d1ca:	fb04 fb0b 	mul.w	fp, r4, fp
 801d1ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d1d0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d1d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d1d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d1da:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d1de:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d1e6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d1ea:	44de      	add	lr, fp
 801d1ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d1f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d1f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d1fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d200:	ea4e 040a 	orr.w	r4, lr, sl
 801d204:	940a      	str	r4, [sp, #40]	@ 0x28
 801d206:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d208:	2cff      	cmp	r4, #255	@ 0xff
 801d20a:	d021      	beq.n	801d250 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d20c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d20e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d212:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d214:	fb04 fb0b 	mul.w	fp, r4, fp
 801d218:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d21a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d21e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d220:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d224:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d228:	fb04 fa0a 	mul.w	sl, r4, sl
 801d22c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d230:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d234:	44de      	add	lr, fp
 801d236:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d23a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d23e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d242:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d246:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d24a:	ea4e 040a 	orr.w	r4, lr, sl
 801d24e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d250:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d252:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801d256:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d25a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d25e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d260:	fb08 fc0c 	mul.w	ip, r8, ip
 801d264:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d268:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d26c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d26e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d272:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d276:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d278:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d27c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d280:	fb08 f80e 	mul.w	r8, r8, lr
 801d284:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d288:	fb02 8303 	mla	r3, r2, r3, r8
 801d28c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d28e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d292:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d296:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d298:	fb01 330a 	mla	r3, r1, sl, r3
 801d29c:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801d2a0:	fb09 3901 	mla	r9, r9, r1, r3
 801d2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d2a8:	4343      	muls	r3, r0
 801d2aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d2ae:	1c58      	adds	r0, r3, #1
 801d2b0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d2b4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d2b8:	ea4c 0c09 	orr.w	ip, ip, r9
 801d2bc:	783b      	ldrb	r3, [r7, #0]
 801d2be:	fa5f f28c 	uxtb.w	r2, ip
 801d2c2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d2c6:	fb12 f201 	smulbb	r2, r2, r1
 801d2ca:	b2c0      	uxtb	r0, r0
 801d2cc:	fb03 2300 	mla	r3, r3, r0, r2
 801d2d0:	b29b      	uxth	r3, r3
 801d2d2:	1c5a      	adds	r2, r3, #1
 801d2d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d2d8:	787a      	ldrb	r2, [r7, #1]
 801d2da:	fb12 f200 	smulbb	r2, r2, r0
 801d2de:	121b      	asrs	r3, r3, #8
 801d2e0:	703b      	strb	r3, [r7, #0]
 801d2e2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d2e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d2ea:	fb03 2301 	mla	r3, r3, r1, r2
 801d2ee:	b29b      	uxth	r3, r3
 801d2f0:	1c5a      	adds	r2, r3, #1
 801d2f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d2f6:	121b      	asrs	r3, r3, #8
 801d2f8:	707b      	strb	r3, [r7, #1]
 801d2fa:	78bb      	ldrb	r3, [r7, #2]
 801d2fc:	fb13 f000 	smulbb	r0, r3, r0
 801d300:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d304:	fa1f fc8c 	uxth.w	ip, ip
 801d308:	f10c 0301 	add.w	r3, ip, #1
 801d30c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d310:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d314:	f887 c002 	strb.w	ip, [r7, #2]
 801d318:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d31a:	3703      	adds	r7, #3
 801d31c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d31e:	441a      	add	r2, r3
 801d320:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d322:	441d      	add	r5, r3
 801d324:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d326:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d328:	3b01      	subs	r3, #1
 801d32a:	931a      	str	r3, [sp, #104]	@ 0x68
 801d32c:	e69c      	b.n	801d068 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d32e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d330:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d332:	441c      	add	r4, r3
 801d334:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d336:	441d      	add	r5, r3
 801d338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d33a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801d33c:	3b01      	subs	r3, #1
 801d33e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d342:	3303      	adds	r3, #3
 801d344:	930c      	str	r3, [sp, #48]	@ 0x30
 801d346:	e66f      	b.n	801d028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d348:	d026      	beq.n	801d398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801d34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d34c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d34e:	3b01      	subs	r3, #1
 801d350:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d352:	fb00 4003 	mla	r0, r0, r3, r4
 801d356:	1400      	asrs	r0, r0, #16
 801d358:	f53f ae83 	bmi.w	801d062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d35c:	3901      	subs	r1, #1
 801d35e:	4288      	cmp	r0, r1
 801d360:	f6bf ae7f 	bge.w	801d062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d364:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d366:	fb01 5303 	mla	r3, r1, r3, r5
 801d36a:	141b      	asrs	r3, r3, #16
 801d36c:	f53f ae79 	bmi.w	801d062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d370:	3a01      	subs	r2, #1
 801d372:	4293      	cmp	r3, r2
 801d374:	f6bf ae75 	bge.w	801d062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d37a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801d37e:	f103 0e03 	add.w	lr, r3, #3
 801d382:	f1bb 0f00 	cmp.w	fp, #0
 801d386:	dc71      	bgt.n	801d46c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d38a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d38e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d390:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d394:	4423      	add	r3, r4
 801d396:	930c      	str	r3, [sp, #48]	@ 0x30
 801d398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	f340 81b5 	ble.w	801d70a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d3a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d3a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d3a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3ae:	eef0 6a62 	vmov.f32	s13, s5
 801d3b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d3b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3be:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801d3c2:	eef0 6a43 	vmov.f32	s13, s6
 801d3c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3ca:	ee16 5a90 	vmov	r5, s13
 801d3ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3e6:	ee12 2a90 	vmov	r2, s5
 801d3ea:	eef0 2a47 	vmov.f32	s5, s14
 801d3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3f2:	ee13 2a10 	vmov	r2, s6
 801d3f6:	932b      	str	r3, [sp, #172]	@ 0xac
 801d3f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d3fa:	eeb0 3a67 	vmov.f32	s6, s15
 801d3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d402:	932c      	str	r3, [sp, #176]	@ 0xb0
 801d404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d406:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d408:	3b01      	subs	r3, #1
 801d40a:	9319      	str	r3, [sp, #100]	@ 0x64
 801d40c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d40e:	bf08      	it	eq
 801d410:	4613      	moveq	r3, r2
 801d412:	9309      	str	r3, [sp, #36]	@ 0x24
 801d414:	e5fa      	b.n	801d00c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d416:	2900      	cmp	r1, #0
 801d418:	f43f ae6c 	beq.w	801d0f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d41c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d420:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d424:	900a      	str	r0, [sp, #40]	@ 0x28
 801d426:	0e00      	lsrs	r0, r0, #24
 801d428:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d42a:	e663      	b.n	801d0f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d42c:	f113 0801 	adds.w	r8, r3, #1
 801d430:	f53f af72 	bmi.w	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d434:	4540      	cmp	r0, r8
 801d436:	f6ff af6f 	blt.w	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d43a:	f11c 0801 	adds.w	r8, ip, #1
 801d43e:	f53f af6b 	bmi.w	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d442:	45c6      	cmp	lr, r8
 801d444:	f6ff af68 	blt.w	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d448:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801d44a:	b200      	sxth	r0, r0
 801d44c:	9302      	str	r3, [sp, #8]
 801d44e:	fa0f f38e 	sxth.w	r3, lr
 801d452:	9000      	str	r0, [sp, #0]
 801d454:	9301      	str	r3, [sp, #4]
 801d456:	4633      	mov	r3, r6
 801d458:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d45a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d45e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d462:	4639      	mov	r1, r7
 801d464:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d466:	f7ff fc74 	bl	801cd52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801d46a:	e755      	b.n	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d46c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d46e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d472:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d474:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d478:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d47a:	1427      	asrs	r7, r4, #16
 801d47c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d47e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d482:	142b      	asrs	r3, r5, #16
 801d484:	fb01 7303 	mla	r3, r1, r3, r7
 801d488:	18e7      	adds	r7, r4, r3
 801d48a:	5ce3      	ldrb	r3, [r4, r3]
 801d48c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d490:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d494:	2a00      	cmp	r2, #0
 801d496:	f000 812e 	beq.w	801d6f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801d49a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d49e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d4a2:	9410      	str	r4, [sp, #64]	@ 0x40
 801d4a4:	0e24      	lsrs	r4, r4, #24
 801d4a6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d4a8:	b170      	cbz	r0, 801d4c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d4aa:	eb07 0801 	add.w	r8, r7, r1
 801d4ae:	5c79      	ldrb	r1, [r7, r1]
 801d4b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d4b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d4b6:	0e09      	lsrs	r1, r1, #24
 801d4b8:	9114      	str	r1, [sp, #80]	@ 0x50
 801d4ba:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d4be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d4c2:	9111      	str	r1, [sp, #68]	@ 0x44
 801d4c4:	0e09      	lsrs	r1, r1, #24
 801d4c6:	9118      	str	r1, [sp, #96]	@ 0x60
 801d4c8:	b292      	uxth	r2, r2
 801d4ca:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d4cc:	b280      	uxth	r0, r0
 801d4ce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d4d0:	fb02 f900 	mul.w	r9, r2, r0
 801d4d4:	0112      	lsls	r2, r2, #4
 801d4d6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d4da:	eba2 0809 	sub.w	r8, r2, r9
 801d4de:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d4e2:	b280      	uxth	r0, r0
 801d4e4:	fa1f f888 	uxth.w	r8, r8
 801d4e8:	1a12      	subs	r2, r2, r0
 801d4ea:	fb08 f101 	mul.w	r1, r8, r1
 801d4ee:	b292      	uxth	r2, r2
 801d4f0:	fb02 110c 	mla	r1, r2, ip, r1
 801d4f4:	fb00 1104 	mla	r1, r0, r4, r1
 801d4f8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d4fa:	fb09 1104 	mla	r1, r9, r4, r1
 801d4fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d502:	2900      	cmp	r1, #0
 801d504:	f000 80ec 	beq.w	801d6e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801d508:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d50c:	d019      	beq.n	801d542 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801d50e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d516:	fb0c fa0a 	mul.w	sl, ip, sl
 801d51a:	fb0c fc03 	mul.w	ip, ip, r3
 801d51e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d522:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d526:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d52a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d52e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d532:	4453      	add	r3, sl
 801d534:	0a3f      	lsrs	r7, r7, #8
 801d536:	0a1b      	lsrs	r3, r3, #8
 801d538:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d53c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d540:	433b      	orrs	r3, r7
 801d542:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d544:	2cff      	cmp	r4, #255	@ 0xff
 801d546:	d020      	beq.n	801d58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801d548:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d54a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d54e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d550:	4367      	muls	r7, r4
 801d552:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d554:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d558:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d55c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d55e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d562:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d566:	fb04 fa0a 	mul.w	sl, r4, sl
 801d56a:	44bc      	add	ip, r7
 801d56c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d570:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d574:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d578:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d57c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d580:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d584:	ea4c 040a 	orr.w	r4, ip, sl
 801d588:	9410      	str	r4, [sp, #64]	@ 0x40
 801d58a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d58c:	2cff      	cmp	r4, #255	@ 0xff
 801d58e:	d020      	beq.n	801d5d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801d590:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d592:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d596:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d598:	4367      	muls	r7, r4
 801d59a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d59c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d5a0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d5a4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d5a6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d5aa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d5ae:	fb04 fa0a 	mul.w	sl, r4, sl
 801d5b2:	44bc      	add	ip, r7
 801d5b4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d5b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d5c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d5c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d5cc:	ea4c 040a 	orr.w	r4, ip, sl
 801d5d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d5d2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d5d4:	2cff      	cmp	r4, #255	@ 0xff
 801d5d6:	d020      	beq.n	801d61a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801d5d8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d5da:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d5de:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d5e0:	4367      	muls	r7, r4
 801d5e2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d5e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d5e8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d5ec:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d5ee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d5f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d5f6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d5fa:	44bc      	add	ip, r7
 801d5fc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d604:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d608:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d60c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d610:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d614:	ea4c 040a 	orr.w	r4, ip, sl
 801d618:	9411      	str	r4, [sp, #68]	@ 0x44
 801d61a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d61c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d620:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d624:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d628:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d62a:	fb08 f707 	mul.w	r7, r8, r7
 801d62e:	fb02 770c 	mla	r7, r2, ip, r7
 801d632:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d636:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d638:	fb00 770c 	mla	r7, r0, ip, r7
 801d63c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d640:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d642:	fb09 770c 	mla	r7, r9, ip, r7
 801d646:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d64a:	fb08 f80c 	mul.w	r8, r8, ip
 801d64e:	0a3f      	lsrs	r7, r7, #8
 801d650:	fb02 8303 	mla	r3, r2, r3, r8
 801d654:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d656:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d65a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d65e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d660:	fb00 330a 	mla	r3, r0, sl, r3
 801d664:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d668:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d66a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d670:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d674:	434b      	muls	r3, r1
 801d676:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d67a:	1c59      	adds	r1, r3, #1
 801d67c:	ea47 070c 	orr.w	r7, r7, ip
 801d680:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d684:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d688:	b2fa      	uxtb	r2, r7
 801d68a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d68e:	fb12 f200 	smulbb	r2, r2, r0
 801d692:	b2c9      	uxtb	r1, r1
 801d694:	fb03 2301 	mla	r3, r3, r1, r2
 801d698:	b29b      	uxth	r3, r3
 801d69a:	1c5a      	adds	r2, r3, #1
 801d69c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d6a0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d6a4:	fb12 f201 	smulbb	r2, r2, r1
 801d6a8:	121b      	asrs	r3, r3, #8
 801d6aa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d6ae:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d6b2:	0c3f      	lsrs	r7, r7, #16
 801d6b4:	fb03 2300 	mla	r3, r3, r0, r2
 801d6b8:	b29b      	uxth	r3, r3
 801d6ba:	1c5a      	adds	r2, r3, #1
 801d6bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d6c0:	121b      	asrs	r3, r3, #8
 801d6c2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d6c6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d6ca:	fb13 f101 	smulbb	r1, r3, r1
 801d6ce:	fb07 1700 	mla	r7, r7, r0, r1
 801d6d2:	b2bf      	uxth	r7, r7
 801d6d4:	1c7b      	adds	r3, r7, #1
 801d6d6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d6da:	123f      	asrs	r7, r7, #8
 801d6dc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d6e0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d6e2:	f10e 0e03 	add.w	lr, lr, #3
 801d6e6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d6e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d6ec:	441a      	add	r2, r3
 801d6ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d6f0:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d6f2:	441d      	add	r5, r3
 801d6f4:	e645      	b.n	801d382 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	f43f aee6 	beq.w	801d4c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d6fc:	5c79      	ldrb	r1, [r7, r1]
 801d6fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d702:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d704:	0e09      	lsrs	r1, r1, #24
 801d706:	9114      	str	r1, [sp, #80]	@ 0x50
 801d708:	e6de      	b.n	801d4c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d70a:	b01f      	add	sp, #124	@ 0x7c
 801d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d710 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d714:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d718:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801d71c:	2d00      	cmp	r5, #0
 801d71e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d722:	fb05 700e 	mla	r0, r5, lr, r7
 801d726:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d72a:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801d72e:	eb02 0800 	add.w	r8, r2, r0
 801d732:	f2c0 8105 	blt.w	801d940 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d736:	45a9      	cmp	r9, r5
 801d738:	f340 8102 	ble.w	801d940 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d73c:	2f00      	cmp	r7, #0
 801d73e:	f2c0 80fd 	blt.w	801d93c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d742:	45be      	cmp	lr, r7
 801d744:	f340 80fa 	ble.w	801d93c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d748:	5c12      	ldrb	r2, [r2, r0]
 801d74a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d74e:	1c7a      	adds	r2, r7, #1
 801d750:	f100 80f9 	bmi.w	801d946 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d754:	4596      	cmp	lr, r2
 801d756:	f340 80f6 	ble.w	801d946 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d75a:	2c00      	cmp	r4, #0
 801d75c:	f000 80f5 	beq.w	801d94a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801d760:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d764:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d768:	3501      	adds	r5, #1
 801d76a:	f100 80f2 	bmi.w	801d952 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d76e:	45a9      	cmp	r9, r5
 801d770:	f340 80ef 	ble.w	801d952 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d774:	f1bc 0f00 	cmp.w	ip, #0
 801d778:	f000 80ee 	beq.w	801d958 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801d77c:	2f00      	cmp	r7, #0
 801d77e:	f2c0 80e6 	blt.w	801d94e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d782:	45be      	cmp	lr, r7
 801d784:	f340 80e3 	ble.w	801d94e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d788:	f818 200e 	ldrb.w	r2, [r8, lr]
 801d78c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d790:	3701      	adds	r7, #1
 801d792:	f100 80e4 	bmi.w	801d95e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d796:	45be      	cmp	lr, r7
 801d798:	f340 80e1 	ble.w	801d95e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d79c:	2c00      	cmp	r4, #0
 801d79e:	f000 80e0 	beq.w	801d962 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801d7a2:	44c6      	add	lr, r8
 801d7a4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d7a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d7ac:	b2a3      	uxth	r3, r4
 801d7ae:	fa1f fc8c 	uxth.w	ip, ip
 801d7b2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d7b6:	fb0c fe03 	mul.w	lr, ip, r3
 801d7ba:	011b      	lsls	r3, r3, #4
 801d7bc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d7c0:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801d7c4:	eba3 070e 	sub.w	r7, r3, lr
 801d7c8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801d7cc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d7d0:	fa1f f48c 	uxth.w	r4, ip
 801d7d4:	b2bf      	uxth	r7, r7
 801d7d6:	1b1b      	subs	r3, r3, r4
 801d7d8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d7dc:	fb07 fc0a 	mul.w	ip, r7, sl
 801d7e0:	b29b      	uxth	r3, r3
 801d7e2:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d7e6:	9300      	str	r3, [sp, #0]
 801d7e8:	fb04 cc09 	mla	ip, r4, r9, ip
 801d7ec:	fb0e cc08 	mla	ip, lr, r8, ip
 801d7f0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d7f4:	9301      	str	r3, [sp, #4]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	f000 809d 	beq.w	801d936 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801d7fc:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d800:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d804:	fb0b fc0c 	mul.w	ip, fp, ip
 801d808:	fb0b f606 	mul.w	r6, fp, r6
 801d80c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d810:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d814:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d818:	44dc      	add	ip, fp
 801d81a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d81e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d826:	fb0a fb0b 	mul.w	fp, sl, fp
 801d82a:	fb0a fa00 	mul.w	sl, sl, r0
 801d82e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d832:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d836:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d83a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d83e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d842:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d846:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d84a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d84e:	0a36      	lsrs	r6, r6, #8
 801d850:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d854:	44dc      	add	ip, fp
 801d856:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d85a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d85e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d862:	fb09 fb0b 	mul.w	fp, r9, fp
 801d866:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d86a:	fb09 f905 	mul.w	r9, r9, r5
 801d86e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d872:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d876:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801d87a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d87e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d882:	fb0c fc07 	mul.w	ip, ip, r7
 801d886:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d88a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801d88e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d892:	4458      	add	r0, fp
 801d894:	fb08 f505 	mul.w	r5, r8, r5
 801d898:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d89c:	fb08 f802 	mul.w	r8, r8, r2
 801d8a0:	0a00      	lsrs	r0, r0, #8
 801d8a2:	0a2a      	lsrs	r2, r5, #8
 801d8a4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801d8a8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d8ac:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d8b0:	4415      	add	r5, r2
 801d8b2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801d8b6:	0a2d      	lsrs	r5, r5, #8
 801d8b8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d8bc:	9a00      	ldr	r2, [sp, #0]
 801d8be:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801d8c2:	fb03 cc02 	mla	ip, r3, r2, ip
 801d8c6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d8ca:	9b01      	ldr	r3, [sp, #4]
 801d8cc:	fb05 c50e 	mla	r5, r5, lr, ip
 801d8d0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801d8d4:	43db      	mvns	r3, r3
 801d8d6:	fb00 5004 	mla	r0, r0, r4, r5
 801d8da:	b2db      	uxtb	r3, r3
 801d8dc:	0a00      	lsrs	r0, r0, #8
 801d8de:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801d8e2:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801d8e6:	4378      	muls	r0, r7
 801d8e8:	fb02 0006 	mla	r0, r2, r6, r0
 801d8ec:	780a      	ldrb	r2, [r1, #0]
 801d8ee:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d8f2:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801d8f6:	fb04 e000 	mla	r0, r4, r0, lr
 801d8fa:	fb02 f403 	mul.w	r4, r2, r3
 801d8fe:	0a00      	lsrs	r0, r0, #8
 801d900:	1c62      	adds	r2, r4, #1
 801d902:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d906:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d90a:	4328      	orrs	r0, r5
 801d90c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d910:	700a      	strb	r2, [r1, #0]
 801d912:	784a      	ldrb	r2, [r1, #1]
 801d914:	435a      	muls	r2, r3
 801d916:	1c54      	adds	r4, r2, #1
 801d918:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801d91c:	0a02      	lsrs	r2, r0, #8
 801d91e:	0c00      	lsrs	r0, r0, #16
 801d920:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d924:	704a      	strb	r2, [r1, #1]
 801d926:	788a      	ldrb	r2, [r1, #2]
 801d928:	4353      	muls	r3, r2
 801d92a:	1c5a      	adds	r2, r3, #1
 801d92c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d930:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d934:	7088      	strb	r0, [r1, #2]
 801d936:	b003      	add	sp, #12
 801d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d93c:	2600      	movs	r6, #0
 801d93e:	e706      	b.n	801d74e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801d940:	2000      	movs	r0, #0
 801d942:	4606      	mov	r6, r0
 801d944:	e710      	b.n	801d768 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d946:	2000      	movs	r0, #0
 801d948:	e70e      	b.n	801d768 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d94a:	4620      	mov	r0, r4
 801d94c:	e70c      	b.n	801d768 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d94e:	2500      	movs	r5, #0
 801d950:	e71e      	b.n	801d790 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801d952:	2200      	movs	r2, #0
 801d954:	4615      	mov	r5, r2
 801d956:	e729      	b.n	801d7ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d958:	4662      	mov	r2, ip
 801d95a:	4665      	mov	r5, ip
 801d95c:	e726      	b.n	801d7ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d95e:	2200      	movs	r2, #0
 801d960:	e724      	b.n	801d7ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d962:	4622      	mov	r2, r4
 801d964:	e722      	b.n	801d7ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801d966 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d96a:	b09b      	sub	sp, #108	@ 0x6c
 801d96c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d970:	9218      	str	r2, [sp, #96]	@ 0x60
 801d972:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d974:	9019      	str	r0, [sp, #100]	@ 0x64
 801d976:	9116      	str	r1, [sp, #88]	@ 0x58
 801d978:	6850      	ldr	r0, [r2, #4]
 801d97a:	9307      	str	r3, [sp, #28]
 801d97c:	6812      	ldr	r2, [r2, #0]
 801d97e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801d980:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801d984:	fb00 1303 	mla	r3, r0, r3, r1
 801d988:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d98c:	18d3      	adds	r3, r2, r3
 801d98e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d990:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d996:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d998:	685e      	ldr	r6, [r3, #4]
 801d99a:	3604      	adds	r6, #4
 801d99c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	dc03      	bgt.n	801d9aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d9a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	f340 834f 	ble.w	801e048 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d9aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d9ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d9b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d9b4:	1e48      	subs	r0, r1, #1
 801d9b6:	1e57      	subs	r7, r2, #1
 801d9b8:	9b07      	ldr	r3, [sp, #28]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	f340 8178 	ble.w	801dcb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d9c0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d9c2:	142b      	asrs	r3, r5, #16
 801d9c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d9c8:	d406      	bmi.n	801d9d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9ca:	4584      	cmp	ip, r0
 801d9cc:	da04      	bge.n	801d9d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	db02      	blt.n	801d9d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9d2:	42bb      	cmp	r3, r7
 801d9d4:	f2c0 816d 	blt.w	801dcb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d9d8:	f11c 0c01 	adds.w	ip, ip, #1
 801d9dc:	f100 815b 	bmi.w	801dc96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d9e0:	4561      	cmp	r1, ip
 801d9e2:	f2c0 8158 	blt.w	801dc96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d9e6:	3301      	adds	r3, #1
 801d9e8:	f100 8155 	bmi.w	801dc96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d9ec:	429a      	cmp	r2, r3
 801d9ee:	f2c0 8152 	blt.w	801dc96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d9f2:	9b07      	ldr	r3, [sp, #28]
 801d9f4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801d9f6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d9f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	f340 8178 	ble.w	801dcf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801da00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801da02:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801da06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801da0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801da0e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801da10:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801da14:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801da16:	141b      	asrs	r3, r3, #16
 801da18:	f100 81ba 	bmi.w	801dd90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801da1c:	f101 38ff 	add.w	r8, r1, #4294967295
 801da20:	4543      	cmp	r3, r8
 801da22:	f280 81b5 	bge.w	801dd90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801da26:	f1bc 0f00 	cmp.w	ip, #0
 801da2a:	f2c0 81b1 	blt.w	801dd90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801da2e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801da32:	45c4      	cmp	ip, r8
 801da34:	f280 81ac 	bge.w	801dd90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801da38:	b209      	sxth	r1, r1
 801da3a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801da3c:	fb0c 3301 	mla	r3, ip, r1, r3
 801da40:	eb04 0803 	add.w	r8, r4, r3
 801da44:	5ce3      	ldrb	r3, [r4, r3]
 801da46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801da4a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801da4e:	2a00      	cmp	r2, #0
 801da50:	f000 8193 	beq.w	801dd7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801da54:	f898 c001 	ldrb.w	ip, [r8, #1]
 801da58:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801da5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801da5e:	0e24      	lsrs	r4, r4, #24
 801da60:	9412      	str	r4, [sp, #72]	@ 0x48
 801da62:	b178      	cbz	r0, 801da84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801da64:	eb08 0c01 	add.w	ip, r8, r1
 801da68:	f818 1001 	ldrb.w	r1, [r8, r1]
 801da6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801da70:	9108      	str	r1, [sp, #32]
 801da72:	0e09      	lsrs	r1, r1, #24
 801da74:	9110      	str	r1, [sp, #64]	@ 0x40
 801da76:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801da7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801da7e:	910c      	str	r1, [sp, #48]	@ 0x30
 801da80:	0e09      	lsrs	r1, r1, #24
 801da82:	9113      	str	r1, [sp, #76]	@ 0x4c
 801da84:	b292      	uxth	r2, r2
 801da86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801da88:	b280      	uxth	r0, r0
 801da8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da8c:	fb02 f900 	mul.w	r9, r2, r0
 801da90:	0112      	lsls	r2, r2, #4
 801da92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801da96:	eba2 0809 	sub.w	r8, r2, r9
 801da9a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801da9e:	b280      	uxth	r0, r0
 801daa0:	fa1f f888 	uxth.w	r8, r8
 801daa4:	1a12      	subs	r2, r2, r0
 801daa6:	fb08 f101 	mul.w	r1, r8, r1
 801daaa:	b292      	uxth	r2, r2
 801daac:	fb02 110e 	mla	r1, r2, lr, r1
 801dab0:	fb00 1104 	mla	r1, r0, r4, r1
 801dab4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dab6:	fb09 1104 	mla	r1, r9, r4, r1
 801daba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dabe:	2900      	cmp	r1, #0
 801dac0:	f000 80de 	beq.w	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dac4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dac8:	d01b      	beq.n	801db02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801daca:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dace:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dad2:	fb0e fa0a 	mul.w	sl, lr, sl
 801dad6:	fb0e fe03 	mul.w	lr, lr, r3
 801dada:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dade:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dae2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dae6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801daea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801daee:	4453      	add	r3, sl
 801daf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801daf4:	0a1b      	lsrs	r3, r3, #8
 801daf6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dafa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dafe:	ea43 030c 	orr.w	r3, r3, ip
 801db02:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801db04:	2cff      	cmp	r4, #255	@ 0xff
 801db06:	d021      	beq.n	801db4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801db08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801db0a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801db0e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801db10:	fb04 fb0b 	mul.w	fp, r4, fp
 801db14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801db16:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801db1a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801db1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801db20:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801db24:	fb04 fa0a 	mul.w	sl, r4, sl
 801db28:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db2c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801db30:	44de      	add	lr, fp
 801db32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801db36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801db3e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db42:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801db46:	ea4e 040a 	orr.w	r4, lr, sl
 801db4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801db4c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801db4e:	2cff      	cmp	r4, #255	@ 0xff
 801db50:	d021      	beq.n	801db96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801db52:	9c08      	ldr	r4, [sp, #32]
 801db54:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801db58:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801db5a:	fb04 fb0b 	mul.w	fp, r4, fp
 801db5e:	9c08      	ldr	r4, [sp, #32]
 801db60:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801db64:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801db66:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801db6a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801db6e:	fb04 fa0a 	mul.w	sl, r4, sl
 801db72:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db76:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801db7a:	44de      	add	lr, fp
 801db7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801db80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801db88:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801db90:	ea4e 040a 	orr.w	r4, lr, sl
 801db94:	9408      	str	r4, [sp, #32]
 801db96:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801db98:	2cff      	cmp	r4, #255	@ 0xff
 801db9a:	d021      	beq.n	801dbe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801db9c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801db9e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dba2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dba4:	fb04 fb0b 	mul.w	fp, r4, fp
 801dba8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dbaa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dbae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dbb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dbb4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dbb8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dbbc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dbc0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dbc4:	44de      	add	lr, fp
 801dbc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dbca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dbd2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dbd6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dbda:	ea4e 040a 	orr.w	r4, lr, sl
 801dbde:	940c      	str	r4, [sp, #48]	@ 0x30
 801dbe0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dbe2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801dbe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dbea:	43c9      	mvns	r1, r1
 801dbec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dbf0:	9c08      	ldr	r4, [sp, #32]
 801dbf2:	b2c9      	uxtb	r1, r1
 801dbf4:	fb08 fc0c 	mul.w	ip, r8, ip
 801dbf8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dbfc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dc00:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dc02:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dc06:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dc0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc0c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dc10:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dc14:	fb08 f80e 	mul.w	r8, r8, lr
 801dc18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc1c:	fb02 8303 	mla	r3, r2, r3, r8
 801dc20:	9a08      	ldr	r2, [sp, #32]
 801dc22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dc26:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801dc2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dc2c:	fb00 330a 	mla	r3, r0, sl, r3
 801dc30:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801dc34:	fb09 3900 	mla	r9, r9, r0, r3
 801dc38:	783b      	ldrb	r3, [r7, #0]
 801dc3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc3e:	fb03 f201 	mul.w	r2, r3, r1
 801dc42:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801dc46:	1c53      	adds	r3, r2, #1
 801dc48:	ea4c 0c09 	orr.w	ip, ip, r9
 801dc4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dc50:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801dc54:	703b      	strb	r3, [r7, #0]
 801dc56:	787b      	ldrb	r3, [r7, #1]
 801dc58:	434b      	muls	r3, r1
 801dc5a:	1c5a      	adds	r2, r3, #1
 801dc5c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc60:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801dc64:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dc68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dc6c:	707b      	strb	r3, [r7, #1]
 801dc6e:	78bb      	ldrb	r3, [r7, #2]
 801dc70:	4359      	muls	r1, r3
 801dc72:	1c4b      	adds	r3, r1, #1
 801dc74:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801dc78:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801dc7c:	f887 c002 	strb.w	ip, [r7, #2]
 801dc80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dc82:	3703      	adds	r7, #3
 801dc84:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801dc86:	441a      	add	r2, r3
 801dc88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dc8a:	441d      	add	r5, r3
 801dc8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc8e:	9225      	str	r2, [sp, #148]	@ 0x94
 801dc90:	3b01      	subs	r3, #1
 801dc92:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dc94:	e6b0      	b.n	801d9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dc96:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dc98:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801dc9a:	441c      	add	r4, r3
 801dc9c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dc9e:	441d      	add	r5, r3
 801dca0:	9b07      	ldr	r3, [sp, #28]
 801dca2:	9425      	str	r4, [sp, #148]	@ 0x94
 801dca4:	3b01      	subs	r3, #1
 801dca6:	9307      	str	r3, [sp, #28]
 801dca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcaa:	3303      	adds	r3, #3
 801dcac:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcae:	e683      	b.n	801d9b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801dcb0:	d026      	beq.n	801dd00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801dcb2:	9b07      	ldr	r3, [sp, #28]
 801dcb4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801dcb6:	3b01      	subs	r3, #1
 801dcb8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801dcba:	fb00 4003 	mla	r0, r0, r3, r4
 801dcbe:	1400      	asrs	r0, r0, #16
 801dcc0:	f53f ae97 	bmi.w	801d9f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dcc4:	3901      	subs	r1, #1
 801dcc6:	4288      	cmp	r0, r1
 801dcc8:	f6bf ae93 	bge.w	801d9f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dccc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801dcce:	fb01 5303 	mla	r3, r1, r3, r5
 801dcd2:	141b      	asrs	r3, r3, #16
 801dcd4:	f53f ae8d 	bmi.w	801d9f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dcd8:	3a01      	subs	r2, #1
 801dcda:	4293      	cmp	r3, r2
 801dcdc:	f6bf ae89 	bge.w	801d9f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dce2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801dce6:	f103 0e03 	add.w	lr, r3, #3
 801dcea:	f1bb 0f00 	cmp.w	fp, #0
 801dcee:	dc6d      	bgt.n	801ddcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801dcf0:	9b07      	ldr	r3, [sp, #28]
 801dcf2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dcf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dcfc:	4423      	add	r3, r4
 801dcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	f340 81a0 	ble.w	801e048 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801dd08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd12:	eeb0 6a62 	vmov.f32	s12, s5
 801dd16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd22:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801dd26:	eeb0 6a43 	vmov.f32	s12, s6
 801dd2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd2e:	ee16 5a10 	vmov	r5, s12
 801dd32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd4a:	ee12 2a90 	vmov	r2, s5
 801dd4e:	eef0 2a47 	vmov.f32	s5, s14
 801dd52:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd56:	ee13 2a10 	vmov	r2, s6
 801dd5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dd5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd5e:	eeb0 3a67 	vmov.f32	s6, s15
 801dd62:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd66:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dd68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd6a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dd6c:	3b01      	subs	r3, #1
 801dd6e:	9316      	str	r3, [sp, #88]	@ 0x58
 801dd70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd72:	bf08      	it	eq
 801dd74:	4613      	moveq	r3, r2
 801dd76:	9307      	str	r3, [sp, #28]
 801dd78:	e610      	b.n	801d99c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dd7a:	2800      	cmp	r0, #0
 801dd7c:	f43f ae82 	beq.w	801da84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dd80:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dd84:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dd88:	9108      	str	r1, [sp, #32]
 801dd8a:	0e09      	lsrs	r1, r1, #24
 801dd8c:	9110      	str	r1, [sp, #64]	@ 0x40
 801dd8e:	e679      	b.n	801da84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dd90:	f113 0801 	adds.w	r8, r3, #1
 801dd94:	f53f af74 	bmi.w	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dd98:	4541      	cmp	r1, r8
 801dd9a:	f6ff af71 	blt.w	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dd9e:	f11c 0801 	adds.w	r8, ip, #1
 801dda2:	f53f af6d 	bmi.w	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dda6:	45c6      	cmp	lr, r8
 801dda8:	f6ff af6a 	blt.w	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ddac:	b209      	sxth	r1, r1
 801ddae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ddb2:	fa0f f38e 	sxth.w	r3, lr
 801ddb6:	9100      	str	r1, [sp, #0]
 801ddb8:	4639      	mov	r1, r7
 801ddba:	9301      	str	r3, [sp, #4]
 801ddbc:	4633      	mov	r3, r6
 801ddbe:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ddc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ddc4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ddc6:	f7ff fca3 	bl	801d710 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801ddca:	e759      	b.n	801dc80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ddcc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ddce:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ddd2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801ddd4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ddd8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ddda:	1427      	asrs	r7, r4, #16
 801dddc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ddde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dde2:	142b      	asrs	r3, r5, #16
 801dde4:	fb01 7303 	mla	r3, r1, r3, r7
 801dde8:	18e7      	adds	r7, r4, r3
 801ddea:	5ce3      	ldrb	r3, [r4, r3]
 801ddec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ddf0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ddf4:	2a00      	cmp	r2, #0
 801ddf6:	f000 811d 	beq.w	801e034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801ddfa:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ddfe:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801de02:	940d      	str	r4, [sp, #52]	@ 0x34
 801de04:	0e24      	lsrs	r4, r4, #24
 801de06:	9414      	str	r4, [sp, #80]	@ 0x50
 801de08:	b170      	cbz	r0, 801de28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801de0a:	eb07 0801 	add.w	r8, r7, r1
 801de0e:	5c79      	ldrb	r1, [r7, r1]
 801de10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801de14:	9109      	str	r1, [sp, #36]	@ 0x24
 801de16:	0e09      	lsrs	r1, r1, #24
 801de18:	9111      	str	r1, [sp, #68]	@ 0x44
 801de1a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801de1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801de22:	910e      	str	r1, [sp, #56]	@ 0x38
 801de24:	0e09      	lsrs	r1, r1, #24
 801de26:	9115      	str	r1, [sp, #84]	@ 0x54
 801de28:	b292      	uxth	r2, r2
 801de2a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de2c:	b280      	uxth	r0, r0
 801de2e:	fb02 f900 	mul.w	r9, r2, r0
 801de32:	0112      	lsls	r2, r2, #4
 801de34:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801de38:	eba2 0809 	sub.w	r8, r2, r9
 801de3c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801de40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801de42:	b280      	uxth	r0, r0
 801de44:	fa1f f888 	uxth.w	r8, r8
 801de48:	1a09      	subs	r1, r1, r0
 801de4a:	fb08 f202 	mul.w	r2, r8, r2
 801de4e:	b289      	uxth	r1, r1
 801de50:	fb01 220c 	mla	r2, r1, ip, r2
 801de54:	fb00 2204 	mla	r2, r0, r4, r2
 801de58:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de5a:	fb09 2204 	mla	r2, r9, r4, r2
 801de5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801de62:	2a00      	cmp	r2, #0
 801de64:	f000 80db 	beq.w	801e01e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801de68:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801de6c:	d019      	beq.n	801dea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801de6e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801de72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801de76:	fb0c fa0a 	mul.w	sl, ip, sl
 801de7a:	fb0c fc03 	mul.w	ip, ip, r3
 801de7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801de82:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801de86:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801de8a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801de8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801de92:	4453      	add	r3, sl
 801de94:	0a3f      	lsrs	r7, r7, #8
 801de96:	0a1b      	lsrs	r3, r3, #8
 801de98:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801de9c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dea0:	433b      	orrs	r3, r7
 801dea2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dea4:	2cff      	cmp	r4, #255	@ 0xff
 801dea6:	d020      	beq.n	801deea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801dea8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801deaa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801deae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801deb0:	4367      	muls	r7, r4
 801deb2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801deb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801deb8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801debc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801debe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801dec2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dec6:	fb04 fa0a 	mul.w	sl, r4, sl
 801deca:	44bc      	add	ip, r7
 801decc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ded0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ded4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ded8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dedc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dee0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dee4:	ea4c 040a 	orr.w	r4, ip, sl
 801dee8:	940d      	str	r4, [sp, #52]	@ 0x34
 801deea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801deec:	2cff      	cmp	r4, #255	@ 0xff
 801deee:	d020      	beq.n	801df32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801def0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801def2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801def6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801def8:	4367      	muls	r7, r4
 801defa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801defc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801df00:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801df04:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801df06:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801df0a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df0e:	fb04 fa0a 	mul.w	sl, r4, sl
 801df12:	44bc      	add	ip, r7
 801df14:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801df18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801df20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df28:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801df2c:	ea4c 040a 	orr.w	r4, ip, sl
 801df30:	9409      	str	r4, [sp, #36]	@ 0x24
 801df32:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801df34:	2cff      	cmp	r4, #255	@ 0xff
 801df36:	d020      	beq.n	801df7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801df38:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801df3a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801df3e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801df40:	4367      	muls	r7, r4
 801df42:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801df44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801df48:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801df4c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801df4e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801df52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df56:	fb04 fa0a 	mul.w	sl, r4, sl
 801df5a:	44bc      	add	ip, r7
 801df5c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801df60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801df68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801df74:	ea4c 040a 	orr.w	r4, ip, sl
 801df78:	940e      	str	r4, [sp, #56]	@ 0x38
 801df7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801df7c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801df80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801df84:	43d2      	mvns	r2, r2
 801df86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801df8a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801df8c:	b2d2      	uxtb	r2, r2
 801df8e:	fb08 f707 	mul.w	r7, r8, r7
 801df92:	fb01 770c 	mla	r7, r1, ip, r7
 801df96:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801df9a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801df9c:	fb00 770c 	mla	r7, r0, ip, r7
 801dfa0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dfa4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dfa6:	fb09 770c 	mla	r7, r9, ip, r7
 801dfaa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801dfae:	fb08 f80c 	mul.w	r8, r8, ip
 801dfb2:	0a3f      	lsrs	r7, r7, #8
 801dfb4:	fb01 8303 	mla	r3, r1, r3, r8
 801dfb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dfba:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801dfbe:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801dfc2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dfc4:	fb00 330a 	mla	r3, r0, sl, r3
 801dfc8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801dfcc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801dfd0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801dfd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfd8:	fb03 f102 	mul.w	r1, r3, r2
 801dfdc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dfe0:	1c4b      	adds	r3, r1, #1
 801dfe2:	ea47 070c 	orr.w	r7, r7, ip
 801dfe6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801dfea:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801dfee:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801dff2:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801dff6:	4353      	muls	r3, r2
 801dff8:	1c59      	adds	r1, r3, #1
 801dffa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801dffe:	0a3b      	lsrs	r3, r7, #8
 801e000:	0c3f      	lsrs	r7, r7, #16
 801e002:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e006:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e00a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e00e:	435a      	muls	r2, r3
 801e010:	1c53      	adds	r3, r2, #1
 801e012:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e016:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e01a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e01e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e020:	f10e 0e03 	add.w	lr, lr, #3
 801e024:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e026:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e02a:	441a      	add	r2, r3
 801e02c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e02e:	9225      	str	r2, [sp, #148]	@ 0x94
 801e030:	441d      	add	r5, r3
 801e032:	e65a      	b.n	801dcea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801e034:	2800      	cmp	r0, #0
 801e036:	f43f aef7 	beq.w	801de28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e03a:	5c79      	ldrb	r1, [r7, r1]
 801e03c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e040:	9109      	str	r1, [sp, #36]	@ 0x24
 801e042:	0e09      	lsrs	r1, r1, #24
 801e044:	9111      	str	r1, [sp, #68]	@ 0x44
 801e046:	e6ef      	b.n	801de28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e048:	b01b      	add	sp, #108	@ 0x6c
 801e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e04e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e04e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e052:	b08d      	sub	sp, #52	@ 0x34
 801e054:	468b      	mov	fp, r1
 801e056:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801e05a:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801e05e:	fb0c 5703 	mla	r7, ip, r3, r5
 801e062:	f1bc 0f00 	cmp.w	ip, #0
 801e066:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e068:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e06c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801e070:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801e074:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801e078:	eb02 0607 	add.w	r6, r2, r7
 801e07c:	f89b 4000 	ldrb.w	r4, [fp]
 801e080:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801e084:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801e088:	f2c0 80c1 	blt.w	801e20e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e08c:	45e6      	cmp	lr, ip
 801e08e:	f340 80be 	ble.w	801e20e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e092:	2d00      	cmp	r5, #0
 801e094:	f2c0 80b7 	blt.w	801e206 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e098:	42ab      	cmp	r3, r5
 801e09a:	f340 80b4 	ble.w	801e206 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e09e:	5dd2      	ldrb	r2, [r2, r7]
 801e0a0:	9205      	str	r2, [sp, #20]
 801e0a2:	7872      	ldrb	r2, [r6, #1]
 801e0a4:	9206      	str	r2, [sp, #24]
 801e0a6:	78b2      	ldrb	r2, [r6, #2]
 801e0a8:	9207      	str	r2, [sp, #28]
 801e0aa:	1c6a      	adds	r2, r5, #1
 801e0ac:	f100 80b6 	bmi.w	801e21c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	f340 80b3 	ble.w	801e21c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e0b6:	f1b8 0f00 	cmp.w	r8, #0
 801e0ba:	f000 80af 	beq.w	801e21c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e0be:	78f2      	ldrb	r2, [r6, #3]
 801e0c0:	9201      	str	r2, [sp, #4]
 801e0c2:	7932      	ldrb	r2, [r6, #4]
 801e0c4:	9202      	str	r2, [sp, #8]
 801e0c6:	7972      	ldrb	r2, [r6, #5]
 801e0c8:	9203      	str	r2, [sp, #12]
 801e0ca:	f11c 0c01 	adds.w	ip, ip, #1
 801e0ce:	f100 80ad 	bmi.w	801e22c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e0d2:	45e6      	cmp	lr, ip
 801e0d4:	f340 80aa 	ble.w	801e22c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e0d8:	f1ba 0f00 	cmp.w	sl, #0
 801e0dc:	f000 80a6 	beq.w	801e22c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e0e0:	2d00      	cmp	r5, #0
 801e0e2:	f2c0 809f 	blt.w	801e224 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e0e6:	42ab      	cmp	r3, r5
 801e0e8:	f340 809c 	ble.w	801e224 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e0ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e0f0:	f816 9002 	ldrb.w	r9, [r6, r2]
 801e0f4:	2203      	movs	r2, #3
 801e0f6:	fb03 6c02 	mla	ip, r3, r2, r6
 801e0fa:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e0fe:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e102:	9704      	str	r7, [sp, #16]
 801e104:	3501      	adds	r5, #1
 801e106:	f100 8098 	bmi.w	801e23a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e10a:	42ab      	cmp	r3, r5
 801e10c:	f340 8095 	ble.w	801e23a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e110:	f1b8 0f00 	cmp.w	r8, #0
 801e114:	f000 8091 	beq.w	801e23a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e118:	f04f 0c03 	mov.w	ip, #3
 801e11c:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801e120:	5cb5      	ldrb	r5, [r6, r2]
 801e122:	fb03 620c 	mla	r2, r3, ip, r6
 801e126:	fb03 630c 	mla	r3, r3, ip, r6
 801e12a:	7912      	ldrb	r2, [r2, #4]
 801e12c:	795e      	ldrb	r6, [r3, #5]
 801e12e:	fa1f f388 	uxth.w	r3, r8
 801e132:	fa1f fc8a 	uxth.w	ip, sl
 801e136:	fb03 f70c 	mul.w	r7, r3, ip
 801e13a:	011b      	lsls	r3, r3, #4
 801e13c:	9708      	str	r7, [sp, #32]
 801e13e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e142:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801e146:	1bdb      	subs	r3, r3, r7
 801e148:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801e14c:	fa1f fc8c 	uxth.w	ip, ip
 801e150:	b29b      	uxth	r3, r3
 801e152:	9709      	str	r7, [sp, #36]	@ 0x24
 801e154:	ebaa 0a0c 	sub.w	sl, sl, ip
 801e158:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e15a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e15c:	fa1f fa8a 	uxth.w	sl, sl
 801e160:	ea6f 0807 	mvn.w	r8, r7
 801e164:	9f01      	ldr	r7, [sp, #4]
 801e166:	435f      	muls	r7, r3
 801e168:	9b05      	ldr	r3, [sp, #20]
 801e16a:	fa5f f888 	uxtb.w	r8, r8
 801e16e:	fb0a 7703 	mla	r7, sl, r3, r7
 801e172:	9b08      	ldr	r3, [sp, #32]
 801e174:	fb14 f408 	smulbb	r4, r4, r8
 801e178:	fb0c 7709 	mla	r7, ip, r9, r7
 801e17c:	fb10 f008 	smulbb	r0, r0, r8
 801e180:	fb11 f108 	smulbb	r1, r1, r8
 801e184:	fb03 7705 	mla	r7, r3, r5, r7
 801e188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e18a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e18e:	fb07 4703 	mla	r7, r7, r3, r4
 801e192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e194:	b2bf      	uxth	r7, r7
 801e196:	1c7c      	adds	r4, r7, #1
 801e198:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801e19c:	1224      	asrs	r4, r4, #8
 801e19e:	f88b 4000 	strb.w	r4, [fp]
 801e1a2:	9c02      	ldr	r4, [sp, #8]
 801e1a4:	435c      	muls	r4, r3
 801e1a6:	9b06      	ldr	r3, [sp, #24]
 801e1a8:	fb0a 4403 	mla	r4, sl, r3, r4
 801e1ac:	9b04      	ldr	r3, [sp, #16]
 801e1ae:	fb0c 4403 	mla	r4, ip, r3, r4
 801e1b2:	9b08      	ldr	r3, [sp, #32]
 801e1b4:	fb03 4402 	mla	r4, r3, r2, r4
 801e1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e1bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e1c0:	fb04 0403 	mla	r4, r4, r3, r0
 801e1c4:	9b03      	ldr	r3, [sp, #12]
 801e1c6:	435a      	muls	r2, r3
 801e1c8:	b2a4      	uxth	r4, r4
 801e1ca:	4613      	mov	r3, r2
 801e1cc:	9a07      	ldr	r2, [sp, #28]
 801e1ce:	1c60      	adds	r0, r4, #1
 801e1d0:	fb0a 3a02 	mla	sl, sl, r2, r3
 801e1d4:	9b08      	ldr	r3, [sp, #32]
 801e1d6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801e1da:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e1de:	1224      	asrs	r4, r4, #8
 801e1e0:	fb03 c606 	mla	r6, r3, r6, ip
 801e1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1e6:	f88b 4001 	strb.w	r4, [fp, #1]
 801e1ea:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e1ee:	fb06 1103 	mla	r1, r6, r3, r1
 801e1f2:	b289      	uxth	r1, r1
 801e1f4:	1c4e      	adds	r6, r1, #1
 801e1f6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e1fa:	1209      	asrs	r1, r1, #8
 801e1fc:	f88b 1002 	strb.w	r1, [fp, #2]
 801e200:	b00d      	add	sp, #52	@ 0x34
 801e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e20a:	9405      	str	r4, [sp, #20]
 801e20c:	e74d      	b.n	801e0aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801e20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e212:	9401      	str	r4, [sp, #4]
 801e214:	9405      	str	r4, [sp, #20]
 801e216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e21a:	e756      	b.n	801e0ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e220:	9401      	str	r4, [sp, #4]
 801e222:	e752      	b.n	801e0ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e224:	468e      	mov	lr, r1
 801e226:	9004      	str	r0, [sp, #16]
 801e228:	46a1      	mov	r9, r4
 801e22a:	e76b      	b.n	801e104 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801e22c:	460e      	mov	r6, r1
 801e22e:	4602      	mov	r2, r0
 801e230:	4625      	mov	r5, r4
 801e232:	468e      	mov	lr, r1
 801e234:	9004      	str	r0, [sp, #16]
 801e236:	46a1      	mov	r9, r4
 801e238:	e779      	b.n	801e12e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801e23a:	460e      	mov	r6, r1
 801e23c:	4602      	mov	r2, r0
 801e23e:	4625      	mov	r5, r4
 801e240:	e775      	b.n	801e12e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801e242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e246:	b09f      	sub	sp, #124	@ 0x7c
 801e248:	920e      	str	r2, [sp, #56]	@ 0x38
 801e24a:	9307      	str	r3, [sp, #28]
 801e24c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801e24e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801e252:	901d      	str	r0, [sp, #116]	@ 0x74
 801e254:	930c      	str	r3, [sp, #48]	@ 0x30
 801e256:	6850      	ldr	r0, [r2, #4]
 801e258:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e25a:	6812      	ldr	r2, [r2, #0]
 801e25c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801e260:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801e264:	fb00 1303 	mla	r3, r0, r3, r1
 801e268:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e26c:	18d3      	adds	r3, r2, r3
 801e26e:	9308      	str	r3, [sp, #32]
 801e270:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	930a      	str	r3, [sp, #40]	@ 0x28
 801e276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e278:	43db      	mvns	r3, r3
 801e27a:	b2db      	uxtb	r3, r3
 801e27c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e280:	2b00      	cmp	r3, #0
 801e282:	dc03      	bgt.n	801e28c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e286:	2b00      	cmp	r3, #0
 801e288:	f340 81f5 	ble.w	801e676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e28c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e28e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e292:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e296:	1e48      	subs	r0, r1, #1
 801e298:	1e54      	subs	r4, r2, #1
 801e29a:	9b07      	ldr	r3, [sp, #28]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	f340 80d5 	ble.w	801e44c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e2a2:	ea5f 452a 	movs.w	r5, sl, asr #16
 801e2a6:	ea4f 4328 	mov.w	r3, r8, asr #16
 801e2aa:	d406      	bmi.n	801e2ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2ac:	4285      	cmp	r5, r0
 801e2ae:	da04      	bge.n	801e2ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	db02      	blt.n	801e2ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2b4:	42a3      	cmp	r3, r4
 801e2b6:	f2c0 80ca 	blt.w	801e44e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e2ba:	3501      	adds	r5, #1
 801e2bc:	f100 80bb 	bmi.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e2c0:	42a9      	cmp	r1, r5
 801e2c2:	f2c0 80b8 	blt.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e2c6:	3301      	adds	r3, #1
 801e2c8:	f100 80b5 	bmi.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	f2c0 80b2 	blt.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e2d2:	9b07      	ldr	r3, [sp, #28]
 801e2d4:	9d08      	ldr	r5, [sp, #32]
 801e2d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	f340 80d6 	ble.w	801e48c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801e2e0:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801e2e2:	ea4f 4428 	mov.w	r4, r8, asr #16
 801e2e6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e2e8:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801e2ec:	68c6      	ldr	r6, [r0, #12]
 801e2ee:	ea5f 402a 	movs.w	r0, sl, asr #16
 801e2f2:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801e2f6:	689b      	ldr	r3, [r3, #8]
 801e2f8:	f100 810f 	bmi.w	801e51a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e2fc:	1e5f      	subs	r7, r3, #1
 801e2fe:	42b8      	cmp	r0, r7
 801e300:	f280 810b 	bge.w	801e51a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e304:	2c00      	cmp	r4, #0
 801e306:	f2c0 8108 	blt.w	801e51a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e30a:	1e77      	subs	r7, r6, #1
 801e30c:	42bc      	cmp	r4, r7
 801e30e:	f280 8104 	bge.w	801e51a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e312:	b21b      	sxth	r3, r3
 801e314:	fb04 0003 	mla	r0, r4, r3, r0
 801e318:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e31a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e31e:	1826      	adds	r6, r4, r0
 801e320:	5c24      	ldrb	r4, [r4, r0]
 801e322:	78b7      	ldrb	r7, [r6, #2]
 801e324:	7870      	ldrb	r0, [r6, #1]
 801e326:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e328:	7977      	ldrb	r7, [r6, #5]
 801e32a:	f896 e003 	ldrb.w	lr, [r6, #3]
 801e32e:	f896 c004 	ldrb.w	ip, [r6, #4]
 801e332:	9710      	str	r7, [sp, #64]	@ 0x40
 801e334:	b1c9      	cbz	r1, 801e36a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e336:	f04f 0b03 	mov.w	fp, #3
 801e33a:	f06f 0904 	mvn.w	r9, #4
 801e33e:	3605      	adds	r6, #5
 801e340:	fb13 930b 	smlabb	r3, r3, fp, r9
 801e344:	eb06 0b03 	add.w	fp, r6, r3
 801e348:	5cf3      	ldrb	r3, [r6, r3]
 801e34a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e34c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801e350:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e352:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e356:	9315      	str	r3, [sp, #84]	@ 0x54
 801e358:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801e35c:	9312      	str	r3, [sp, #72]	@ 0x48
 801e35e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801e362:	9314      	str	r3, [sp, #80]	@ 0x50
 801e364:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801e368:	9316      	str	r3, [sp, #88]	@ 0x58
 801e36a:	b292      	uxth	r2, r2
 801e36c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e36e:	b289      	uxth	r1, r1
 801e370:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801e374:	fb02 f601 	mul.w	r6, r2, r1
 801e378:	0112      	lsls	r2, r2, #4
 801e37a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801e37e:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801e382:	1b92      	subs	r2, r2, r6
 801e384:	b289      	uxth	r1, r1
 801e386:	b292      	uxth	r2, r2
 801e388:	eba9 0901 	sub.w	r9, r9, r1
 801e38c:	fb02 fe0e 	mul.w	lr, r2, lr
 801e390:	fa1f f989 	uxth.w	r9, r9
 801e394:	fb02 fc0c 	mul.w	ip, r2, ip
 801e398:	fb09 e404 	mla	r4, r9, r4, lr
 801e39c:	f895 e000 	ldrb.w	lr, [r5]
 801e3a0:	fb09 c000 	mla	r0, r9, r0, ip
 801e3a4:	fb01 4407 	mla	r4, r1, r7, r4
 801e3a8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801e3aa:	fb06 4407 	mla	r4, r6, r7, r4
 801e3ae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e3b0:	fb1e fe07 	smulbb	lr, lr, r7
 801e3b4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e3b8:	fb04 e403 	mla	r4, r4, r3, lr
 801e3bc:	b2a4      	uxth	r4, r4
 801e3be:	f104 0e01 	add.w	lr, r4, #1
 801e3c2:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801e3c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e3c8:	fb01 0004 	mla	r0, r1, r4, r0
 801e3cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e3ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e3d2:	fb06 0004 	mla	r0, r6, r4, r0
 801e3d6:	786c      	ldrb	r4, [r5, #1]
 801e3d8:	f885 e000 	strb.w	lr, [r5]
 801e3dc:	fb14 f407 	smulbb	r4, r4, r7
 801e3e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e3e4:	fb00 4003 	mla	r0, r0, r3, r4
 801e3e8:	b280      	uxth	r0, r0
 801e3ea:	1c44      	adds	r4, r0, #1
 801e3ec:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e3f0:	1200      	asrs	r0, r0, #8
 801e3f2:	7068      	strb	r0, [r5, #1]
 801e3f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e3f6:	4342      	muls	r2, r0
 801e3f8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e3fa:	fb09 2200 	mla	r2, r9, r0, r2
 801e3fe:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e400:	fb01 2100 	mla	r1, r1, r0, r2
 801e404:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e406:	fb06 1602 	mla	r6, r6, r2, r1
 801e40a:	78a9      	ldrb	r1, [r5, #2]
 801e40c:	fb11 f107 	smulbb	r1, r1, r7
 801e410:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e414:	fb06 1303 	mla	r3, r6, r3, r1
 801e418:	b29b      	uxth	r3, r3
 801e41a:	1c5e      	adds	r6, r3, #1
 801e41c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e420:	121b      	asrs	r3, r3, #8
 801e422:	70ab      	strb	r3, [r5, #2]
 801e424:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e426:	3503      	adds	r5, #3
 801e428:	449a      	add	sl, r3
 801e42a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e42c:	4498      	add	r8, r3
 801e42e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e430:	3b01      	subs	r3, #1
 801e432:	930d      	str	r3, [sp, #52]	@ 0x34
 801e434:	e750      	b.n	801e2d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e436:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e438:	449a      	add	sl, r3
 801e43a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e43c:	4498      	add	r8, r3
 801e43e:	9b07      	ldr	r3, [sp, #28]
 801e440:	3b01      	subs	r3, #1
 801e442:	9307      	str	r3, [sp, #28]
 801e444:	9b08      	ldr	r3, [sp, #32]
 801e446:	3303      	adds	r3, #3
 801e448:	9308      	str	r3, [sp, #32]
 801e44a:	e726      	b.n	801e29a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e44c:	d026      	beq.n	801e49c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801e44e:	9b07      	ldr	r3, [sp, #28]
 801e450:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801e452:	3b01      	subs	r3, #1
 801e454:	fb00 a003 	mla	r0, r0, r3, sl
 801e458:	1400      	asrs	r0, r0, #16
 801e45a:	f53f af3a 	bmi.w	801e2d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e45e:	3901      	subs	r1, #1
 801e460:	4288      	cmp	r0, r1
 801e462:	f6bf af36 	bge.w	801e2d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e466:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e468:	fb01 8303 	mla	r3, r1, r3, r8
 801e46c:	141b      	asrs	r3, r3, #16
 801e46e:	f53f af30 	bmi.w	801e2d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e472:	3a01      	subs	r2, #1
 801e474:	4293      	cmp	r3, r2
 801e476:	f6bf af2c 	bge.w	801e2d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e47a:	9b08      	ldr	r3, [sp, #32]
 801e47c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e480:	1cdd      	adds	r5, r3, #3
 801e482:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801e486:	f1bc 0f00 	cmp.w	ip, #0
 801e48a:	dc5f      	bgt.n	801e54c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801e48c:	9b07      	ldr	r3, [sp, #28]
 801e48e:	9a08      	ldr	r2, [sp, #32]
 801e490:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e498:	441a      	add	r2, r3
 801e49a:	9208      	str	r2, [sp, #32]
 801e49c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f340 80e9 	ble.w	801e676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e4a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e4a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e4aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4b2:	eef0 6a62 	vmov.f32	s13, s5
 801e4b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4c2:	ee16 aa90 	vmov	sl, s13
 801e4c6:	eef0 6a43 	vmov.f32	s13, s6
 801e4ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4ce:	ee16 8a90 	vmov	r8, s13
 801e4d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4ea:	ee12 2a90 	vmov	r2, s5
 801e4ee:	eef0 2a47 	vmov.f32	s5, s14
 801e4f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4f6:	ee13 2a10 	vmov	r2, s6
 801e4fa:	932b      	str	r3, [sp, #172]	@ 0xac
 801e4fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e4fe:	eeb0 3a67 	vmov.f32	s6, s15
 801e502:	fb92 f3f3 	sdiv	r3, r2, r3
 801e506:	932c      	str	r3, [sp, #176]	@ 0xb0
 801e508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e50a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e50c:	3b01      	subs	r3, #1
 801e50e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e510:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e512:	bf08      	it	eq
 801e514:	4613      	moveq	r3, r2
 801e516:	9307      	str	r3, [sp, #28]
 801e518:	e6b1      	b.n	801e27e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e51a:	1c47      	adds	r7, r0, #1
 801e51c:	d482      	bmi.n	801e424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e51e:	42bb      	cmp	r3, r7
 801e520:	db80      	blt.n	801e424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e522:	1c67      	adds	r7, r4, #1
 801e524:	f53f af7e 	bmi.w	801e424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e528:	42be      	cmp	r6, r7
 801e52a:	f6ff af7b 	blt.w	801e424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e52e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e530:	b236      	sxth	r6, r6
 801e532:	9001      	str	r0, [sp, #4]
 801e534:	b21b      	sxth	r3, r3
 801e536:	9600      	str	r6, [sp, #0]
 801e538:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e53a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801e53e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e542:	4629      	mov	r1, r5
 801e544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e546:	f7ff fd82 	bl	801e04e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e54a:	e76b      	b.n	801e424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e54c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801e54e:	ea4f 402a 	mov.w	r0, sl, asr #16
 801e552:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801e556:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801e55a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801e55e:	ea4f 4128 	mov.w	r1, r8, asr #16
 801e562:	fb07 0101 	mla	r1, r7, r1, r0
 801e566:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e568:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e56c:	1844      	adds	r4, r0, r1
 801e56e:	5c40      	ldrb	r0, [r0, r1]
 801e570:	78a6      	ldrb	r6, [r4, #2]
 801e572:	7861      	ldrb	r1, [r4, #1]
 801e574:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e576:	78e6      	ldrb	r6, [r4, #3]
 801e578:	910d      	str	r1, [sp, #52]	@ 0x34
 801e57a:	9610      	str	r6, [sp, #64]	@ 0x40
 801e57c:	f894 9004 	ldrb.w	r9, [r4, #4]
 801e580:	f894 b005 	ldrb.w	fp, [r4, #5]
 801e584:	b192      	cbz	r2, 801e5ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e586:	f06f 0604 	mvn.w	r6, #4
 801e58a:	2103      	movs	r1, #3
 801e58c:	3405      	adds	r4, #5
 801e58e:	fb17 6701 	smlabb	r7, r7, r1, r6
 801e592:	19e6      	adds	r6, r4, r7
 801e594:	5de4      	ldrb	r4, [r4, r7]
 801e596:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e598:	7874      	ldrb	r4, [r6, #1]
 801e59a:	9419      	str	r4, [sp, #100]	@ 0x64
 801e59c:	78b4      	ldrb	r4, [r6, #2]
 801e59e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801e5a0:	78f4      	ldrb	r4, [r6, #3]
 801e5a2:	9418      	str	r4, [sp, #96]	@ 0x60
 801e5a4:	7934      	ldrb	r4, [r6, #4]
 801e5a6:	941a      	str	r4, [sp, #104]	@ 0x68
 801e5a8:	7974      	ldrb	r4, [r6, #5]
 801e5aa:	941c      	str	r4, [sp, #112]	@ 0x70
 801e5ac:	b29b      	uxth	r3, r3
 801e5ae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e5b0:	b292      	uxth	r2, r2
 801e5b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e5b4:	3503      	adds	r5, #3
 801e5b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e5ba:	fb03 f402 	mul.w	r4, r3, r2
 801e5be:	011b      	lsls	r3, r3, #4
 801e5c0:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801e5c4:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801e5c8:	1b1b      	subs	r3, r3, r4
 801e5ca:	b292      	uxth	r2, r2
 801e5cc:	b29b      	uxth	r3, r3
 801e5ce:	1ab6      	subs	r6, r6, r2
 801e5d0:	435f      	muls	r7, r3
 801e5d2:	b2b6      	uxth	r6, r6
 801e5d4:	fb03 f909 	mul.w	r9, r3, r9
 801e5d8:	fb03 fb0b 	mul.w	fp, r3, fp
 801e5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5de:	fb06 7000 	mla	r0, r6, r0, r7
 801e5e2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801e5e4:	fb06 bb03 	mla	fp, r6, r3, fp
 801e5e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e5ea:	fb02 0007 	mla	r0, r2, r7, r0
 801e5ee:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801e5f0:	fb02 bb03 	mla	fp, r2, r3, fp
 801e5f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e5f6:	fb04 0007 	mla	r0, r4, r7, r0
 801e5fa:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801e5fe:	fb17 f701 	smulbb	r7, r7, r1
 801e602:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e606:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e608:	fb00 700e 	mla	r0, r0, lr, r7
 801e60c:	fb06 9101 	mla	r1, r6, r1, r9
 801e610:	b280      	uxth	r0, r0
 801e612:	1c47      	adds	r7, r0, #1
 801e614:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801e618:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e61a:	1200      	asrs	r0, r0, #8
 801e61c:	f805 0c06 	strb.w	r0, [r5, #-6]
 801e620:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e622:	fb02 1100 	mla	r1, r2, r0, r1
 801e626:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801e628:	fb04 1100 	mla	r1, r4, r0, r1
 801e62c:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801e630:	fb04 b403 	mla	r4, r4, r3, fp
 801e634:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801e638:	fb10 f007 	smulbb	r0, r0, r7
 801e63c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e640:	fb13 f307 	smulbb	r3, r3, r7
 801e644:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e648:	fb01 010e 	mla	r1, r1, lr, r0
 801e64c:	fb04 340e 	mla	r4, r4, lr, r3
 801e650:	b289      	uxth	r1, r1
 801e652:	b2a4      	uxth	r4, r4
 801e654:	1c48      	adds	r0, r1, #1
 801e656:	1c63      	adds	r3, r4, #1
 801e658:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e65c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e660:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e662:	1209      	asrs	r1, r1, #8
 801e664:	1224      	asrs	r4, r4, #8
 801e666:	449a      	add	sl, r3
 801e668:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e66a:	f805 1c05 	strb.w	r1, [r5, #-5]
 801e66e:	f805 4c04 	strb.w	r4, [r5, #-4]
 801e672:	4498      	add	r8, r3
 801e674:	e707      	b.n	801e486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e676:	b01f      	add	sp, #124	@ 0x7c
 801e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e67c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e680:	b087      	sub	sp, #28
 801e682:	780d      	ldrb	r5, [r1, #0]
 801e684:	784c      	ldrb	r4, [r1, #1]
 801e686:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801e68a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801e68e:	9004      	str	r0, [sp, #16]
 801e690:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801e694:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801e698:	9005      	str	r0, [sp, #20]
 801e69a:	fb06 bc03 	mla	ip, r6, r3, fp
 801e69e:	2e00      	cmp	r6, #0
 801e6a0:	7888      	ldrb	r0, [r1, #2]
 801e6a2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e6a6:	eb02 090c 	add.w	r9, r2, ip
 801e6aa:	f2c0 8084 	blt.w	801e7b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e6ae:	42b7      	cmp	r7, r6
 801e6b0:	f340 8081 	ble.w	801e7b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e6b4:	f1bb 0f00 	cmp.w	fp, #0
 801e6b8:	db79      	blt.n	801e7ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e6ba:	455b      	cmp	r3, fp
 801e6bc:	dd77      	ble.n	801e7ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e6be:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e6c2:	9201      	str	r2, [sp, #4]
 801e6c4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e6c8:	9202      	str	r2, [sp, #8]
 801e6ca:	f899 2002 	ldrb.w	r2, [r9, #2]
 801e6ce:	9203      	str	r2, [sp, #12]
 801e6d0:	f11b 0201 	adds.w	r2, fp, #1
 801e6d4:	d476      	bmi.n	801e7c4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e6d6:	4293      	cmp	r3, r2
 801e6d8:	dd74      	ble.n	801e7c4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e6da:	9a04      	ldr	r2, [sp, #16]
 801e6dc:	2a00      	cmp	r2, #0
 801e6de:	d071      	beq.n	801e7c4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e6e0:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e6e4:	f899 c004 	ldrb.w	ip, [r9, #4]
 801e6e8:	f899 a005 	ldrb.w	sl, [r9, #5]
 801e6ec:	3601      	adds	r6, #1
 801e6ee:	d471      	bmi.n	801e7d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e6f0:	42b7      	cmp	r7, r6
 801e6f2:	dd6f      	ble.n	801e7d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e6f4:	9a05      	ldr	r2, [sp, #20]
 801e6f6:	2a00      	cmp	r2, #0
 801e6f8:	d06c      	beq.n	801e7d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e6fa:	f1bb 0f00 	cmp.w	fp, #0
 801e6fe:	db65      	blt.n	801e7cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e700:	455b      	cmp	r3, fp
 801e702:	dd63      	ble.n	801e7cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e704:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e708:	f819 e002 	ldrb.w	lr, [r9, r2]
 801e70c:	2203      	movs	r2, #3
 801e70e:	fb03 9602 	mla	r6, r3, r2, r9
 801e712:	7877      	ldrb	r7, [r6, #1]
 801e714:	78b6      	ldrb	r6, [r6, #2]
 801e716:	f11b 0b01 	adds.w	fp, fp, #1
 801e71a:	d40c      	bmi.n	801e736 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e71c:	455b      	cmp	r3, fp
 801e71e:	dd0a      	ble.n	801e736 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e720:	9a04      	ldr	r2, [sp, #16]
 801e722:	b142      	cbz	r2, 801e736 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e724:	2203      	movs	r2, #3
 801e726:	fb13 2002 	smlabb	r0, r3, r2, r2
 801e72a:	f819 5000 	ldrb.w	r5, [r9, r0]
 801e72e:	fb03 9002 	mla	r0, r3, r2, r9
 801e732:	7904      	ldrb	r4, [r0, #4]
 801e734:	7940      	ldrb	r0, [r0, #5]
 801e736:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e73a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e73e:	fb03 fb02 	mul.w	fp, r3, r2
 801e742:	011b      	lsls	r3, r3, #4
 801e744:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801e748:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801e74c:	eba3 030b 	sub.w	r3, r3, fp
 801e750:	b292      	uxth	r2, r2
 801e752:	b29b      	uxth	r3, r3
 801e754:	eba9 0902 	sub.w	r9, r9, r2
 801e758:	9304      	str	r3, [sp, #16]
 801e75a:	fa1f f989 	uxth.w	r9, r9
 801e75e:	fb03 f808 	mul.w	r8, r3, r8
 801e762:	9b01      	ldr	r3, [sp, #4]
 801e764:	fb09 8803 	mla	r8, r9, r3, r8
 801e768:	9b04      	ldr	r3, [sp, #16]
 801e76a:	fb03 fc0c 	mul.w	ip, r3, ip
 801e76e:	9b02      	ldr	r3, [sp, #8]
 801e770:	fb02 880e 	mla	r8, r2, lr, r8
 801e774:	fb09 cc03 	mla	ip, r9, r3, ip
 801e778:	9b04      	ldr	r3, [sp, #16]
 801e77a:	fb0b 8805 	mla	r8, fp, r5, r8
 801e77e:	fb02 c707 	mla	r7, r2, r7, ip
 801e782:	fb03 f30a 	mul.w	r3, r3, sl
 801e786:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e78a:	fb0b 7404 	mla	r4, fp, r4, r7
 801e78e:	f881 8000 	strb.w	r8, [r1]
 801e792:	1224      	asrs	r4, r4, #8
 801e794:	704c      	strb	r4, [r1, #1]
 801e796:	9c03      	ldr	r4, [sp, #12]
 801e798:	fb09 3904 	mla	r9, r9, r4, r3
 801e79c:	fb02 9206 	mla	r2, r2, r6, r9
 801e7a0:	fb0b 2000 	mla	r0, fp, r0, r2
 801e7a4:	1200      	asrs	r0, r0, #8
 801e7a6:	7088      	strb	r0, [r1, #2]
 801e7a8:	b007      	add	sp, #28
 801e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7ae:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e7b2:	9501      	str	r5, [sp, #4]
 801e7b4:	e78c      	b.n	801e6d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801e7b6:	4682      	mov	sl, r0
 801e7b8:	46a4      	mov	ip, r4
 801e7ba:	46a8      	mov	r8, r5
 801e7bc:	9501      	str	r5, [sp, #4]
 801e7be:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e7c2:	e793      	b.n	801e6ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e7c4:	4682      	mov	sl, r0
 801e7c6:	46a4      	mov	ip, r4
 801e7c8:	46a8      	mov	r8, r5
 801e7ca:	e78f      	b.n	801e6ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e7cc:	4606      	mov	r6, r0
 801e7ce:	4627      	mov	r7, r4
 801e7d0:	46ae      	mov	lr, r5
 801e7d2:	e7a0      	b.n	801e716 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e7d4:	4606      	mov	r6, r0
 801e7d6:	4627      	mov	r7, r4
 801e7d8:	46ae      	mov	lr, r5
 801e7da:	e7ac      	b.n	801e736 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801e7dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e0:	b09b      	sub	sp, #108	@ 0x6c
 801e7e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e7e4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e7e6:	9019      	str	r0, [sp, #100]	@ 0x64
 801e7e8:	9109      	str	r1, [sp, #36]	@ 0x24
 801e7ea:	6850      	ldr	r0, [r2, #4]
 801e7ec:	9306      	str	r3, [sp, #24]
 801e7ee:	6812      	ldr	r2, [r2, #0]
 801e7f0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e7f4:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801e7f8:	fb00 1303 	mla	r3, r0, r3, r1
 801e7fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e800:	18d3      	adds	r3, r2, r3
 801e802:	9307      	str	r3, [sp, #28]
 801e804:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	9308      	str	r3, [sp, #32]
 801e80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	dc03      	bgt.n	801e818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e812:	2b00      	cmp	r3, #0
 801e814:	f340 81ab 	ble.w	801eb6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e818:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e81a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e81e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e822:	1e48      	subs	r0, r1, #1
 801e824:	1e55      	subs	r5, r2, #1
 801e826:	9b06      	ldr	r3, [sp, #24]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	f340 80b1 	ble.w	801e990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e82e:	ea5f 462b 	movs.w	r6, fp, asr #16
 801e832:	ea4f 4324 	mov.w	r3, r4, asr #16
 801e836:	d406      	bmi.n	801e846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e838:	4286      	cmp	r6, r0
 801e83a:	da04      	bge.n	801e846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	db02      	blt.n	801e846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e840:	42ab      	cmp	r3, r5
 801e842:	f2c0 80a6 	blt.w	801e992 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e846:	3601      	adds	r6, #1
 801e848:	f100 8097 	bmi.w	801e97a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e84c:	42b1      	cmp	r1, r6
 801e84e:	f2c0 8094 	blt.w	801e97a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e852:	3301      	adds	r3, #1
 801e854:	f100 8091 	bmi.w	801e97a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e858:	429a      	cmp	r2, r3
 801e85a:	f2c0 808e 	blt.w	801e97a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e85e:	9b06      	ldr	r3, [sp, #24]
 801e860:	9e07      	ldr	r6, [sp, #28]
 801e862:	930a      	str	r3, [sp, #40]	@ 0x28
 801e864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e866:	2b00      	cmp	r3, #0
 801e868:	f340 80b0 	ble.w	801e9cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e86c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801e86e:	1425      	asrs	r5, r4, #16
 801e870:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e872:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e876:	68c7      	ldr	r7, [r0, #12]
 801e878:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e87c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e880:	689b      	ldr	r3, [r3, #8]
 801e882:	f100 80ea 	bmi.w	801ea5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e886:	f103 3cff 	add.w	ip, r3, #4294967295
 801e88a:	4560      	cmp	r0, ip
 801e88c:	f280 80e5 	bge.w	801ea5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e890:	2d00      	cmp	r5, #0
 801e892:	f2c0 80e2 	blt.w	801ea5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e896:	f107 3cff 	add.w	ip, r7, #4294967295
 801e89a:	4565      	cmp	r5, ip
 801e89c:	f280 80dd 	bge.w	801ea5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e8a0:	b21b      	sxth	r3, r3
 801e8a2:	fb05 0003 	mla	r0, r5, r3, r0
 801e8a6:	9d08      	ldr	r5, [sp, #32]
 801e8a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e8ac:	182f      	adds	r7, r5, r0
 801e8ae:	5c2d      	ldrb	r5, [r5, r0]
 801e8b0:	7878      	ldrb	r0, [r7, #1]
 801e8b2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e8b6:	900c      	str	r0, [sp, #48]	@ 0x30
 801e8b8:	f897 9003 	ldrb.w	r9, [r7, #3]
 801e8bc:	f897 8004 	ldrb.w	r8, [r7, #4]
 801e8c0:	f897 a005 	ldrb.w	sl, [r7, #5]
 801e8c4:	b1c9      	cbz	r1, 801e8fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8c6:	f04f 0c03 	mov.w	ip, #3
 801e8ca:	f06f 0004 	mvn.w	r0, #4
 801e8ce:	3705      	adds	r7, #5
 801e8d0:	fb13 030c 	smlabb	r3, r3, ip, r0
 801e8d4:	eb07 0c03 	add.w	ip, r7, r3
 801e8d8:	5cfb      	ldrb	r3, [r7, r3]
 801e8da:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8dc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e8e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e8e2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e8e6:	9311      	str	r3, [sp, #68]	@ 0x44
 801e8e8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e8ec:	930e      	str	r3, [sp, #56]	@ 0x38
 801e8ee:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801e8f2:	9310      	str	r3, [sp, #64]	@ 0x40
 801e8f4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801e8f8:	9312      	str	r3, [sp, #72]	@ 0x48
 801e8fa:	b292      	uxth	r2, r2
 801e8fc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e8fe:	b289      	uxth	r1, r1
 801e900:	fb02 f301 	mul.w	r3, r2, r1
 801e904:	0112      	lsls	r2, r2, #4
 801e906:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e90a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801e90e:	1ad2      	subs	r2, r2, r3
 801e910:	b289      	uxth	r1, r1
 801e912:	b292      	uxth	r2, r2
 801e914:	1a7f      	subs	r7, r7, r1
 801e916:	fb02 f909 	mul.w	r9, r2, r9
 801e91a:	b2bf      	uxth	r7, r7
 801e91c:	fb02 f808 	mul.w	r8, r2, r8
 801e920:	fb02 fa0a 	mul.w	sl, r2, sl
 801e924:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e926:	fb07 9905 	mla	r9, r7, r5, r9
 801e92a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e92c:	fb07 8800 	mla	r8, r7, r0, r8
 801e930:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e932:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e936:	fb01 9905 	mla	r9, r1, r5, r9
 801e93a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801e93c:	fb01 8800 	mla	r8, r1, r0, r8
 801e940:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e942:	fb01 a102 	mla	r1, r1, r2, sl
 801e946:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e948:	fb03 9905 	mla	r9, r3, r5, r9
 801e94c:	fb03 8800 	mla	r8, r3, r0, r8
 801e950:	fb03 1302 	mla	r3, r3, r2, r1
 801e954:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e958:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e95c:	121b      	asrs	r3, r3, #8
 801e95e:	f886 9000 	strb.w	r9, [r6]
 801e962:	f886 8001 	strb.w	r8, [r6, #1]
 801e966:	70b3      	strb	r3, [r6, #2]
 801e968:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e96a:	3603      	adds	r6, #3
 801e96c:	449b      	add	fp, r3
 801e96e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e970:	441c      	add	r4, r3
 801e972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e974:	3b01      	subs	r3, #1
 801e976:	930a      	str	r3, [sp, #40]	@ 0x28
 801e978:	e774      	b.n	801e864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e97a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e97c:	449b      	add	fp, r3
 801e97e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e980:	441c      	add	r4, r3
 801e982:	9b06      	ldr	r3, [sp, #24]
 801e984:	3b01      	subs	r3, #1
 801e986:	9306      	str	r3, [sp, #24]
 801e988:	9b07      	ldr	r3, [sp, #28]
 801e98a:	3303      	adds	r3, #3
 801e98c:	9307      	str	r3, [sp, #28]
 801e98e:	e74a      	b.n	801e826 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e990:	d024      	beq.n	801e9dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e992:	9b06      	ldr	r3, [sp, #24]
 801e994:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e996:	3b01      	subs	r3, #1
 801e998:	fb00 b003 	mla	r0, r0, r3, fp
 801e99c:	1400      	asrs	r0, r0, #16
 801e99e:	f53f af5e 	bmi.w	801e85e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e9a2:	3901      	subs	r1, #1
 801e9a4:	4288      	cmp	r0, r1
 801e9a6:	f6bf af5a 	bge.w	801e85e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e9aa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e9ac:	fb01 4303 	mla	r3, r1, r3, r4
 801e9b0:	141b      	asrs	r3, r3, #16
 801e9b2:	f53f af54 	bmi.w	801e85e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e9b6:	3a01      	subs	r2, #1
 801e9b8:	4293      	cmp	r3, r2
 801e9ba:	f6bf af50 	bge.w	801e85e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e9be:	9b07      	ldr	r3, [sp, #28]
 801e9c0:	f8dd e018 	ldr.w	lr, [sp, #24]
 801e9c4:	1cde      	adds	r6, r3, #3
 801e9c6:	f1be 0f00 	cmp.w	lr, #0
 801e9ca:	dc5f      	bgt.n	801ea8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e9cc:	9b06      	ldr	r3, [sp, #24]
 801e9ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e9d2:	9b07      	ldr	r3, [sp, #28]
 801e9d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e9d8:	4423      	add	r3, r4
 801e9da:	9307      	str	r3, [sp, #28]
 801e9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	f340 80c5 	ble.w	801eb6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e9e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e9ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9f2:	eef0 6a62 	vmov.f32	s13, s5
 801e9f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e9fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea02:	ee16 ba90 	vmov	fp, s13
 801ea06:	eef0 6a43 	vmov.f32	s13, s6
 801ea0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea0e:	ee16 4a90 	vmov	r4, s13
 801ea12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea2a:	ee12 2a90 	vmov	r2, s5
 801ea2e:	eef0 2a47 	vmov.f32	s5, s14
 801ea32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea36:	ee13 2a10 	vmov	r2, s6
 801ea3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ea3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea3e:	eeb0 3a67 	vmov.f32	s6, s15
 801ea42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea46:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ea48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ea4c:	3b01      	subs	r3, #1
 801ea4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea52:	bf08      	it	eq
 801ea54:	4613      	moveq	r3, r2
 801ea56:	9306      	str	r3, [sp, #24]
 801ea58:	e6d7      	b.n	801e80a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ea5a:	f110 0c01 	adds.w	ip, r0, #1
 801ea5e:	d483      	bmi.n	801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ea60:	4563      	cmp	r3, ip
 801ea62:	db81      	blt.n	801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ea64:	f115 0c01 	adds.w	ip, r5, #1
 801ea68:	f53f af7e 	bmi.w	801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ea6c:	4567      	cmp	r7, ip
 801ea6e:	f6ff af7b 	blt.w	801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ea72:	b23f      	sxth	r7, r7
 801ea74:	b21b      	sxth	r3, r3
 801ea76:	9700      	str	r7, [sp, #0]
 801ea78:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801ea7c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801ea80:	9a08      	ldr	r2, [sp, #32]
 801ea82:	4631      	mov	r1, r6
 801ea84:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ea86:	f7ff fdf9 	bl	801e67c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ea8a:	e76d      	b.n	801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ea8c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ea8e:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ea92:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ea96:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ea9a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ea9e:	1421      	asrs	r1, r4, #16
 801eaa0:	930a      	str	r3, [sp, #40]	@ 0x28
 801eaa2:	fb0c 0101 	mla	r1, ip, r1, r0
 801eaa6:	9808      	ldr	r0, [sp, #32]
 801eaa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eaac:	1845      	adds	r5, r0, r1
 801eaae:	5c40      	ldrb	r0, [r0, r1]
 801eab0:	796f      	ldrb	r7, [r5, #5]
 801eab2:	7869      	ldrb	r1, [r5, #1]
 801eab4:	f895 8002 	ldrb.w	r8, [r5, #2]
 801eab8:	f895 a003 	ldrb.w	sl, [r5, #3]
 801eabc:	f895 9004 	ldrb.w	r9, [r5, #4]
 801eac0:	970c      	str	r7, [sp, #48]	@ 0x30
 801eac2:	b1a2      	cbz	r2, 801eaee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801eac4:	2703      	movs	r7, #3
 801eac6:	f06f 0304 	mvn.w	r3, #4
 801eaca:	3505      	adds	r5, #5
 801eacc:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801ead0:	eb05 070c 	add.w	r7, r5, ip
 801ead4:	f815 500c 	ldrb.w	r5, [r5, ip]
 801ead8:	9513      	str	r5, [sp, #76]	@ 0x4c
 801eada:	787d      	ldrb	r5, [r7, #1]
 801eadc:	9515      	str	r5, [sp, #84]	@ 0x54
 801eade:	78bd      	ldrb	r5, [r7, #2]
 801eae0:	9517      	str	r5, [sp, #92]	@ 0x5c
 801eae2:	78fd      	ldrb	r5, [r7, #3]
 801eae4:	9514      	str	r5, [sp, #80]	@ 0x50
 801eae6:	793d      	ldrb	r5, [r7, #4]
 801eae8:	9516      	str	r5, [sp, #88]	@ 0x58
 801eaea:	797d      	ldrb	r5, [r7, #5]
 801eaec:	9518      	str	r5, [sp, #96]	@ 0x60
 801eaee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801eaf2:	b292      	uxth	r2, r2
 801eaf4:	3603      	adds	r6, #3
 801eaf6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eafa:	fb03 f502 	mul.w	r5, r3, r2
 801eafe:	011b      	lsls	r3, r3, #4
 801eb00:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801eb04:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801eb08:	1b5b      	subs	r3, r3, r5
 801eb0a:	b292      	uxth	r2, r2
 801eb0c:	b29b      	uxth	r3, r3
 801eb0e:	1abf      	subs	r7, r7, r2
 801eb10:	fb03 f909 	mul.w	r9, r3, r9
 801eb14:	b2bf      	uxth	r7, r7
 801eb16:	fb03 fa0a 	mul.w	sl, r3, sl
 801eb1a:	fb07 9901 	mla	r9, r7, r1, r9
 801eb1e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801eb20:	fb07 aa00 	mla	sl, r7, r0, sl
 801eb24:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801eb26:	fb02 9901 	mla	r9, r2, r1, r9
 801eb2a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801eb2c:	fb02 aa00 	mla	sl, r2, r0, sl
 801eb30:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801eb32:	fb05 9901 	mla	r9, r5, r1, r9
 801eb36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801eb38:	fb05 aa00 	mla	sl, r5, r0, sl
 801eb3c:	434b      	muls	r3, r1
 801eb3e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801eb40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eb44:	fb07 3308 	mla	r3, r7, r8, r3
 801eb48:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb4c:	f806 ac06 	strb.w	sl, [r6, #-6]
 801eb50:	fb02 3201 	mla	r2, r2, r1, r3
 801eb54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eb56:	f806 9c05 	strb.w	r9, [r6, #-5]
 801eb5a:	fb05 2503 	mla	r5, r5, r3, r2
 801eb5e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb60:	122d      	asrs	r5, r5, #8
 801eb62:	449b      	add	fp, r3
 801eb64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb66:	f806 5c04 	strb.w	r5, [r6, #-4]
 801eb6a:	441c      	add	r4, r3
 801eb6c:	e72b      	b.n	801e9c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eb6e:	b01b      	add	sp, #108	@ 0x6c
 801eb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb78:	b087      	sub	sp, #28
 801eb7a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801eb7e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801eb82:	fb05 7003 	mla	r0, r5, r3, r7
 801eb86:	2d00      	cmp	r5, #0
 801eb88:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801eb8c:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801eb90:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801eb94:	f2c0 811f 	blt.w	801edd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801eb98:	45a8      	cmp	r8, r5
 801eb9a:	f340 811c 	ble.w	801edd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801eb9e:	2f00      	cmp	r7, #0
 801eba0:	f2c0 8117 	blt.w	801edd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801eba4:	42bb      	cmp	r3, r7
 801eba6:	f340 8114 	ble.w	801edd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801ebaa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801ebae:	1c7a      	adds	r2, r7, #1
 801ebb0:	f100 8114 	bmi.w	801eddc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ebb4:	4293      	cmp	r3, r2
 801ebb6:	f340 8111 	ble.w	801eddc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801ebba:	2c00      	cmp	r4, #0
 801ebbc:	f000 8110 	beq.w	801ede0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801ebc0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ebc4:	3501      	adds	r5, #1
 801ebc6:	f100 810f 	bmi.w	801ede8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801ebca:	45a8      	cmp	r8, r5
 801ebcc:	f340 810c 	ble.w	801ede8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801ebd0:	f1be 0f00 	cmp.w	lr, #0
 801ebd4:	f000 810b 	beq.w	801edee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801ebd8:	2f00      	cmp	r7, #0
 801ebda:	f2c0 8103 	blt.w	801ede4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801ebde:	42bb      	cmp	r3, r7
 801ebe0:	f340 8100 	ble.w	801ede4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801ebe4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ebe8:	3701      	adds	r7, #1
 801ebea:	f100 8103 	bmi.w	801edf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801ebee:	42bb      	cmp	r3, r7
 801ebf0:	f340 8100 	ble.w	801edf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801ebf4:	2c00      	cmp	r4, #0
 801ebf6:	f000 80ff 	beq.w	801edf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ec00:	fa1f fc84 	uxth.w	ip, r4
 801ec04:	fa1f fe8e 	uxth.w	lr, lr
 801ec08:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ec0c:	fb0c f90e 	mul.w	r9, ip, lr
 801ec10:	0e13      	lsrs	r3, r2, #24
 801ec12:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ec16:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ec1a:	9302      	str	r3, [sp, #8]
 801ec1c:	ebac 0709 	sub.w	r7, ip, r9
 801ec20:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801ec24:	fa1f f48e 	uxth.w	r4, lr
 801ec28:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801ec2c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ec30:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ec34:	fb0a fe0e 	mul.w	lr, sl, lr
 801ec38:	1b1b      	subs	r3, r3, r4
 801ec3a:	fb0a f606 	mul.w	r6, sl, r6
 801ec3e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ec42:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ec46:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801ec4a:	b29b      	uxth	r3, r3
 801ec4c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ec50:	b2bf      	uxth	r7, r7
 801ec52:	9301      	str	r3, [sp, #4]
 801ec54:	44e6      	add	lr, ip
 801ec56:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ec5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec5e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ec62:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801ec66:	9303      	str	r3, [sp, #12]
 801ec68:	0a33      	lsrs	r3, r6, #8
 801ec6a:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801ec6e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ec72:	9304      	str	r3, [sp, #16]
 801ec74:	fb0b f606 	mul.w	r6, fp, r6
 801ec78:	fb0b f000 	mul.w	r0, fp, r0
 801ec7c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ec80:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ec84:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ec88:	44b6      	add	lr, r6
 801ec8a:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ec8e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ec92:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ec96:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ec9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec9e:	fb08 f606 	mul.w	r6, r8, r6
 801eca2:	0a03      	lsrs	r3, r0, #8
 801eca4:	fb08 f505 	mul.w	r5, r8, r5
 801eca8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ecac:	0a30      	lsrs	r0, r6, #8
 801ecae:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ecb2:	9305      	str	r3, [sp, #20]
 801ecb4:	0e13      	lsrs	r3, r2, #24
 801ecb6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ecba:	fb0e fe07 	mul.w	lr, lr, r7
 801ecbe:	4430      	add	r0, r6
 801ecc0:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801ecc4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ecc8:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801eccc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ecd0:	0a00      	lsrs	r0, r0, #8
 801ecd2:	435e      	muls	r6, r3
 801ecd4:	0a2d      	lsrs	r5, r5, #8
 801ecd6:	435a      	muls	r2, r3
 801ecd8:	9b03      	ldr	r3, [sp, #12]
 801ecda:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ecde:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ece2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ece6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ecea:	44b4      	add	ip, r6
 801ecec:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801ecf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ecf4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ecf8:	9e01      	ldr	r6, [sp, #4]
 801ecfa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ecfe:	fb03 ee06 	mla	lr, r3, r6, lr
 801ed02:	9b04      	ldr	r3, [sp, #16]
 801ed04:	0a12      	lsrs	r2, r2, #8
 801ed06:	fb0c ee09 	mla	lr, ip, r9, lr
 801ed0a:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801ed0e:	9b05      	ldr	r3, [sp, #20]
 801ed10:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ed14:	fb00 ee04 	mla	lr, r0, r4, lr
 801ed18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed1c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801ed20:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ed24:	9b01      	ldr	r3, [sp, #4]
 801ed26:	fb07 fe0e 	mul.w	lr, r7, lr
 801ed2a:	fb07 f70b 	mul.w	r7, r7, fp
 801ed2e:	fb03 ee06 	mla	lr, r3, r6, lr
 801ed32:	fb03 730a 	mla	r3, r3, sl, r7
 801ed36:	fb09 e202 	mla	r2, r9, r2, lr
 801ed3a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801ed3e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ed42:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801ed46:	fb04 3408 	mla	r4, r4, r8, r3
 801ed4a:	9b02      	ldr	r3, [sp, #8]
 801ed4c:	b292      	uxth	r2, r2
 801ed4e:	fb09 4903 	mla	r9, r9, r3, r4
 801ed52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed56:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ed5a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ed5e:	fb09 f902 	mul.w	r9, r9, r2
 801ed62:	ea40 0e0e 	orr.w	lr, r0, lr
 801ed66:	f109 0301 	add.w	r3, r9, #1
 801ed6a:	fa5f f08e 	uxtb.w	r0, lr
 801ed6e:	fb10 f002 	smulbb	r0, r0, r2
 801ed72:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ed76:	780b      	ldrb	r3, [r1, #0]
 801ed78:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801ed7c:	fa5f f989 	uxtb.w	r9, r9
 801ed80:	fb03 0309 	mla	r3, r3, r9, r0
 801ed84:	b29b      	uxth	r3, r3
 801ed86:	1c58      	adds	r0, r3, #1
 801ed88:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ed8c:	7848      	ldrb	r0, [r1, #1]
 801ed8e:	fb10 f009 	smulbb	r0, r0, r9
 801ed92:	121b      	asrs	r3, r3, #8
 801ed94:	700b      	strb	r3, [r1, #0]
 801ed96:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801ed9a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ed9e:	fb03 0302 	mla	r3, r3, r2, r0
 801eda2:	b29b      	uxth	r3, r3
 801eda4:	1c58      	adds	r0, r3, #1
 801eda6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801edaa:	121b      	asrs	r3, r3, #8
 801edac:	704b      	strb	r3, [r1, #1]
 801edae:	788b      	ldrb	r3, [r1, #2]
 801edb0:	fb13 f909 	smulbb	r9, r3, r9
 801edb4:	fb0e 9e02 	mla	lr, lr, r2, r9
 801edb8:	fa1f fe8e 	uxth.w	lr, lr
 801edbc:	f10e 0301 	add.w	r3, lr, #1
 801edc0:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801edc4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801edc8:	f881 e002 	strb.w	lr, [r1, #2]
 801edcc:	b007      	add	sp, #28
 801edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd2:	2600      	movs	r6, #0
 801edd4:	e6eb      	b.n	801ebae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801edd6:	2000      	movs	r0, #0
 801edd8:	4606      	mov	r6, r0
 801edda:	e6f3      	b.n	801ebc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801eddc:	2000      	movs	r0, #0
 801edde:	e6f1      	b.n	801ebc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ede0:	4620      	mov	r0, r4
 801ede2:	e6ef      	b.n	801ebc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ede4:	2500      	movs	r5, #0
 801ede6:	e6ff      	b.n	801ebe8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801ede8:	2200      	movs	r2, #0
 801edea:	4615      	mov	r5, r2
 801edec:	e708      	b.n	801ec00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801edee:	4672      	mov	r2, lr
 801edf0:	4675      	mov	r5, lr
 801edf2:	e705      	b.n	801ec00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801edf4:	2200      	movs	r2, #0
 801edf6:	e703      	b.n	801ec00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801edf8:	4622      	mov	r2, r4
 801edfa:	e701      	b.n	801ec00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801edfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee00:	b09d      	sub	sp, #116	@ 0x74
 801ee02:	9219      	str	r2, [sp, #100]	@ 0x64
 801ee04:	9307      	str	r3, [sp, #28]
 801ee06:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801ee08:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801ee0c:	901b      	str	r0, [sp, #108]	@ 0x6c
 801ee0e:	931a      	str	r3, [sp, #104]	@ 0x68
 801ee10:	6850      	ldr	r0, [r2, #4]
 801ee12:	9117      	str	r1, [sp, #92]	@ 0x5c
 801ee14:	6812      	ldr	r2, [r2, #0]
 801ee16:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801ee1a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801ee1e:	fb00 1303 	mla	r3, r0, r3, r1
 801ee22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee26:	18d3      	adds	r3, r2, r3
 801ee28:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee2a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ee30:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801ee34:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	dc03      	bgt.n	801ee44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ee3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	f340 8368 	ble.w	801f514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ee44:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ee46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ee4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ee4e:	1e48      	subs	r0, r1, #1
 801ee50:	1e57      	subs	r7, r2, #1
 801ee52:	9b07      	ldr	r3, [sp, #28]
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	f340 8187 	ble.w	801f168 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ee5a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ee5e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ee62:	d406      	bmi.n	801ee72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ee64:	4584      	cmp	ip, r0
 801ee66:	da04      	bge.n	801ee72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	db02      	blt.n	801ee72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ee6c:	42bb      	cmp	r3, r7
 801ee6e:	f2c0 817c 	blt.w	801f16a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ee72:	f11c 0c01 	adds.w	ip, ip, #1
 801ee76:	f100 816c 	bmi.w	801f152 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ee7a:	4561      	cmp	r1, ip
 801ee7c:	f2c0 8169 	blt.w	801f152 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ee80:	3301      	adds	r3, #1
 801ee82:	f100 8166 	bmi.w	801f152 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ee86:	429a      	cmp	r2, r3
 801ee88:	f2c0 8163 	blt.w	801f152 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ee8c:	9b07      	ldr	r3, [sp, #28]
 801ee8e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ee90:	9318      	str	r3, [sp, #96]	@ 0x60
 801ee92:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	f340 8186 	ble.w	801f1a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801ee9a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ee9c:	142a      	asrs	r2, r5, #16
 801ee9e:	ea4f 4026 	mov.w	r0, r6, asr #16
 801eea2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801eea6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801eeaa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801eeae:	f100 81cb 	bmi.w	801f248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801eeb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801eeb6:	4542      	cmp	r2, r8
 801eeb8:	f280 81c6 	bge.w	801f248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801eebc:	2800      	cmp	r0, #0
 801eebe:	f2c0 81c3 	blt.w	801f248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801eec2:	f103 38ff 	add.w	r8, r3, #4294967295
 801eec6:	4540      	cmp	r0, r8
 801eec8:	f280 81be 	bge.w	801f248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801eecc:	fa0f f38e 	sxth.w	r3, lr
 801eed0:	fb00 2203 	mla	r2, r0, r3, r2
 801eed4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eed6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801eeda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801eede:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801eee2:	2900      	cmp	r1, #0
 801eee4:	f000 81a6 	beq.w	801f234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801eee8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801eeec:	900c      	str	r0, [sp, #48]	@ 0x30
 801eeee:	0e00      	lsrs	r0, r0, #24
 801eef0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801eef2:	f1bc 0f00 	cmp.w	ip, #0
 801eef6:	d00f      	beq.n	801ef18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801eef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801eefc:	3b01      	subs	r3, #1
 801eefe:	009b      	lsls	r3, r3, #2
 801ef00:	3304      	adds	r3, #4
 801ef02:	eb08 0003 	add.w	r0, r8, r3
 801ef06:	f858 3003 	ldr.w	r3, [r8, r3]
 801ef0a:	9308      	str	r3, [sp, #32]
 801ef0c:	0e1b      	lsrs	r3, r3, #24
 801ef0e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ef10:	6843      	ldr	r3, [r0, #4]
 801ef12:	930d      	str	r3, [sp, #52]	@ 0x34
 801ef14:	0e1b      	lsrs	r3, r3, #24
 801ef16:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef18:	b289      	uxth	r1, r1
 801ef1a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ef1c:	fa1f fc8c 	uxth.w	ip, ip
 801ef20:	0108      	lsls	r0, r1, #4
 801ef22:	fb01 f90c 	mul.w	r9, r1, ip
 801ef26:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801ef2a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801ef2e:	eba0 0809 	sub.w	r8, r0, r9
 801ef32:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ef34:	fa1f f18c 	uxth.w	r1, ip
 801ef38:	fa1f f888 	uxth.w	r8, r8
 801ef3c:	1a5b      	subs	r3, r3, r1
 801ef3e:	fb08 f000 	mul.w	r0, r8, r0
 801ef42:	b29b      	uxth	r3, r3
 801ef44:	fb03 000e 	mla	r0, r3, lr, r0
 801ef48:	fb01 0004 	mla	r0, r1, r4, r0
 801ef4c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef4e:	fb09 0004 	mla	r0, r9, r4, r0
 801ef52:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ef56:	2800      	cmp	r0, #0
 801ef58:	f000 80f2 	beq.w	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ef5c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ef60:	d01b      	beq.n	801ef9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ef62:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801ef66:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ef6a:	fb0e fa0a 	mul.w	sl, lr, sl
 801ef6e:	fb0e fe02 	mul.w	lr, lr, r2
 801ef72:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801ef76:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ef7a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ef7e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ef82:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ef86:	4452      	add	r2, sl
 801ef88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef8c:	0a12      	lsrs	r2, r2, #8
 801ef8e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ef92:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ef96:	ea42 020c 	orr.w	r2, r2, ip
 801ef9a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ef9c:	2cff      	cmp	r4, #255	@ 0xff
 801ef9e:	d021      	beq.n	801efe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801efa0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801efa2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801efa6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801efa8:	fb04 fb0b 	mul.w	fp, r4, fp
 801efac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801efae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801efb2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801efb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801efb8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801efbc:	fb04 fa0a 	mul.w	sl, r4, sl
 801efc0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801efc4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801efc8:	44de      	add	lr, fp
 801efca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801efce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801efd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801efd6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801efda:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801efde:	ea4e 040a 	orr.w	r4, lr, sl
 801efe2:	940c      	str	r4, [sp, #48]	@ 0x30
 801efe4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801efe6:	2cff      	cmp	r4, #255	@ 0xff
 801efe8:	d021      	beq.n	801f02e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801efea:	9c08      	ldr	r4, [sp, #32]
 801efec:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801eff0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eff2:	fb04 fb0b 	mul.w	fp, r4, fp
 801eff6:	9c08      	ldr	r4, [sp, #32]
 801eff8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801effc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801effe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f002:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f006:	fb04 fa0a 	mul.w	sl, r4, sl
 801f00a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f00e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f012:	44de      	add	lr, fp
 801f014:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f018:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f01c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f020:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f024:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f028:	ea4e 040a 	orr.w	r4, lr, sl
 801f02c:	9408      	str	r4, [sp, #32]
 801f02e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f030:	2cff      	cmp	r4, #255	@ 0xff
 801f032:	d021      	beq.n	801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f034:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f036:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f03a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f03c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f040:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f042:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f046:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f048:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f04c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f050:	fb04 fa0a 	mul.w	sl, r4, sl
 801f054:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f058:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f05c:	44de      	add	lr, fp
 801f05e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f062:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f066:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f06a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f06e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f072:	ea4e 040a 	orr.w	r4, lr, sl
 801f076:	940d      	str	r4, [sp, #52]	@ 0x34
 801f078:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f07a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801f07e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f082:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f086:	9c08      	ldr	r4, [sp, #32]
 801f088:	fb08 fc0c 	mul.w	ip, r8, ip
 801f08c:	fb03 cc0e 	mla	ip, r3, lr, ip
 801f090:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f094:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f096:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f09a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f09e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f0a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f0a4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f0a8:	fb08 f80e 	mul.w	r8, r8, lr
 801f0ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0b0:	fb03 8202 	mla	r2, r3, r2, r8
 801f0b4:	9b08      	ldr	r3, [sp, #32]
 801f0b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f0ba:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801f0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f0c0:	fb01 220a 	mla	r2, r1, sl, r2
 801f0c4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801f0c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0ca:	fb09 2901 	mla	r9, r9, r1, r2
 801f0ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f0d0:	4343      	muls	r3, r0
 801f0d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f0d6:	1c58      	adds	r0, r3, #1
 801f0d8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801f0dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f0e0:	783b      	ldrb	r3, [r7, #0]
 801f0e2:	ea4c 0c09 	orr.w	ip, ip, r9
 801f0e6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f0ea:	fa5f f28c 	uxtb.w	r2, ip
 801f0ee:	b2c0      	uxtb	r0, r0
 801f0f0:	fb12 f201 	smulbb	r2, r2, r1
 801f0f4:	fb03 2300 	mla	r3, r3, r0, r2
 801f0f8:	b29b      	uxth	r3, r3
 801f0fa:	1c5a      	adds	r2, r3, #1
 801f0fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f100:	787a      	ldrb	r2, [r7, #1]
 801f102:	fb12 f200 	smulbb	r2, r2, r0
 801f106:	121b      	asrs	r3, r3, #8
 801f108:	703b      	strb	r3, [r7, #0]
 801f10a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f10e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f112:	fb03 2301 	mla	r3, r3, r1, r2
 801f116:	b29b      	uxth	r3, r3
 801f118:	1c5a      	adds	r2, r3, #1
 801f11a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f11e:	121b      	asrs	r3, r3, #8
 801f120:	707b      	strb	r3, [r7, #1]
 801f122:	78bb      	ldrb	r3, [r7, #2]
 801f124:	fb13 f000 	smulbb	r0, r3, r0
 801f128:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f12c:	fa1f fc8c 	uxth.w	ip, ip
 801f130:	f10c 0301 	add.w	r3, ip, #1
 801f134:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f138:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f13c:	f887 c002 	strb.w	ip, [r7, #2]
 801f140:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f142:	3703      	adds	r7, #3
 801f144:	441d      	add	r5, r3
 801f146:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f148:	441e      	add	r6, r3
 801f14a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f14c:	3b01      	subs	r3, #1
 801f14e:	9318      	str	r3, [sp, #96]	@ 0x60
 801f150:	e69f      	b.n	801ee92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f152:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f154:	441d      	add	r5, r3
 801f156:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f158:	441e      	add	r6, r3
 801f15a:	9b07      	ldr	r3, [sp, #28]
 801f15c:	3b01      	subs	r3, #1
 801f15e:	9307      	str	r3, [sp, #28]
 801f160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f162:	3303      	adds	r3, #3
 801f164:	930a      	str	r3, [sp, #40]	@ 0x28
 801f166:	e674      	b.n	801ee52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f168:	d025      	beq.n	801f1b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f16a:	9b07      	ldr	r3, [sp, #28]
 801f16c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801f16e:	3b01      	subs	r3, #1
 801f170:	fb00 5003 	mla	r0, r0, r3, r5
 801f174:	1400      	asrs	r0, r0, #16
 801f176:	f53f ae89 	bmi.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f17a:	3901      	subs	r1, #1
 801f17c:	4288      	cmp	r0, r1
 801f17e:	f6bf ae85 	bge.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f182:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801f184:	fb01 6303 	mla	r3, r1, r3, r6
 801f188:	141b      	asrs	r3, r3, #16
 801f18a:	f53f ae7f 	bmi.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f18e:	3a01      	subs	r2, #1
 801f190:	4293      	cmp	r3, r2
 801f192:	f6bf ae7b 	bge.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f198:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f19c:	f103 0e03 	add.w	lr, r3, #3
 801f1a0:	f1bb 0f00 	cmp.w	fp, #0
 801f1a4:	dc6e      	bgt.n	801f284 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f1a6:	9b07      	ldr	r3, [sp, #28]
 801f1a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f1b2:	4423      	add	r3, r4
 801f1b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f1b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f340 81ab 	ble.w	801f514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f1be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f1c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f1c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1cc:	eef0 6a62 	vmov.f32	s13, s5
 801f1d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1dc:	ee16 5a90 	vmov	r5, s13
 801f1e0:	eef0 6a43 	vmov.f32	s13, s6
 801f1e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1e8:	ee16 6a90 	vmov	r6, s13
 801f1ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f200:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f204:	ee12 2a90 	vmov	r2, s5
 801f208:	eef0 2a47 	vmov.f32	s5, s14
 801f20c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f210:	ee13 2a10 	vmov	r2, s6
 801f214:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f216:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f218:	eeb0 3a67 	vmov.f32	s6, s15
 801f21c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f220:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f224:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f226:	3b01      	subs	r3, #1
 801f228:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f22a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f22c:	bf08      	it	eq
 801f22e:	4613      	moveq	r3, r2
 801f230:	9307      	str	r3, [sp, #28]
 801f232:	e600      	b.n	801ee36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f234:	f1bc 0f00 	cmp.w	ip, #0
 801f238:	f43f ae6e 	beq.w	801ef18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f23c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f240:	9308      	str	r3, [sp, #32]
 801f242:	0e1b      	lsrs	r3, r3, #24
 801f244:	9311      	str	r3, [sp, #68]	@ 0x44
 801f246:	e667      	b.n	801ef18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f248:	f112 0801 	adds.w	r8, r2, #1
 801f24c:	f53f af78 	bmi.w	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f250:	45c6      	cmp	lr, r8
 801f252:	f6ff af75 	blt.w	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f256:	f110 0801 	adds.w	r8, r0, #1
 801f25a:	f53f af71 	bmi.w	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f25e:	4543      	cmp	r3, r8
 801f260:	f6ff af6e 	blt.w	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f264:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f266:	b21b      	sxth	r3, r3
 801f268:	9201      	str	r2, [sp, #4]
 801f26a:	9300      	str	r3, [sp, #0]
 801f26c:	fa0f f38e 	sxth.w	r3, lr
 801f270:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f276:	e9cd c404 	strd	ip, r4, [sp, #16]
 801f27a:	4639      	mov	r1, r7
 801f27c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801f27e:	f7ff fc79 	bl	801eb74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f282:	e75d      	b.n	801f140 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f284:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f286:	142f      	asrs	r7, r5, #16
 801f288:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f28a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f28e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f292:	1433      	asrs	r3, r6, #16
 801f294:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f298:	fb02 7303 	mla	r3, r2, r3, r7
 801f29c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801f2a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f2a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f2a8:	2900      	cmp	r1, #0
 801f2aa:	f000 812a 	beq.w	801f502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801f2ae:	687c      	ldr	r4, [r7, #4]
 801f2b0:	940e      	str	r4, [sp, #56]	@ 0x38
 801f2b2:	0e24      	lsrs	r4, r4, #24
 801f2b4:	9415      	str	r4, [sp, #84]	@ 0x54
 801f2b6:	b178      	cbz	r0, 801f2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f2b8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801f2bc:	3a01      	subs	r2, #1
 801f2be:	0092      	lsls	r2, r2, #2
 801f2c0:	3204      	adds	r2, #4
 801f2c2:	eb07 0802 	add.w	r8, r7, r2
 801f2c6:	58ba      	ldr	r2, [r7, r2]
 801f2c8:	9209      	str	r2, [sp, #36]	@ 0x24
 801f2ca:	0e12      	lsrs	r2, r2, #24
 801f2cc:	9212      	str	r2, [sp, #72]	@ 0x48
 801f2ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f2d2:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f2d4:	0e12      	lsrs	r2, r2, #24
 801f2d6:	9216      	str	r2, [sp, #88]	@ 0x58
 801f2d8:	b289      	uxth	r1, r1
 801f2da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f2dc:	b280      	uxth	r0, r0
 801f2de:	fb01 f900 	mul.w	r9, r1, r0
 801f2e2:	0109      	lsls	r1, r1, #4
 801f2e4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f2e8:	eba1 0809 	sub.w	r8, r1, r9
 801f2ec:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801f2f0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f2f2:	b280      	uxth	r0, r0
 801f2f4:	fa1f f888 	uxth.w	r8, r8
 801f2f8:	1a12      	subs	r2, r2, r0
 801f2fa:	fb08 f101 	mul.w	r1, r8, r1
 801f2fe:	b292      	uxth	r2, r2
 801f300:	fb02 110c 	mla	r1, r2, ip, r1
 801f304:	fb00 1104 	mla	r1, r0, r4, r1
 801f308:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f30a:	fb09 1104 	mla	r1, r9, r4, r1
 801f30e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f312:	2900      	cmp	r1, #0
 801f314:	f000 80ec 	beq.w	801f4f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801f318:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f31c:	d019      	beq.n	801f352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801f31e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f322:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f326:	fb0c fa0a 	mul.w	sl, ip, sl
 801f32a:	fb0c fc03 	mul.w	ip, ip, r3
 801f32e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f332:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f336:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801f33a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f33e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f342:	4453      	add	r3, sl
 801f344:	0a3f      	lsrs	r7, r7, #8
 801f346:	0a1b      	lsrs	r3, r3, #8
 801f348:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f34c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f350:	433b      	orrs	r3, r7
 801f352:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f354:	2cff      	cmp	r4, #255	@ 0xff
 801f356:	d020      	beq.n	801f39a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801f358:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f35a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f35e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f360:	4367      	muls	r7, r4
 801f362:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f364:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f368:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f36c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f36e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f372:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f376:	fb04 fa0a 	mul.w	sl, r4, sl
 801f37a:	44bc      	add	ip, r7
 801f37c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f384:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f388:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f38c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f390:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f394:	ea4c 040a 	orr.w	r4, ip, sl
 801f398:	940e      	str	r4, [sp, #56]	@ 0x38
 801f39a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f39c:	2cff      	cmp	r4, #255	@ 0xff
 801f39e:	d020      	beq.n	801f3e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801f3a0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f3a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f3a6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f3a8:	4367      	muls	r7, r4
 801f3aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f3ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f3b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f3b4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f3b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f3ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3be:	fb04 fa0a 	mul.w	sl, r4, sl
 801f3c2:	44bc      	add	ip, r7
 801f3c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f3c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f3d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f3dc:	ea4c 040a 	orr.w	r4, ip, sl
 801f3e0:	9409      	str	r4, [sp, #36]	@ 0x24
 801f3e2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f3e4:	2cff      	cmp	r4, #255	@ 0xff
 801f3e6:	d020      	beq.n	801f42a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801f3e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f3ea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f3ee:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f3f0:	4367      	muls	r7, r4
 801f3f2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f3f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f3f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f3fc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f3fe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f402:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f406:	fb04 fa0a 	mul.w	sl, r4, sl
 801f40a:	44bc      	add	ip, r7
 801f40c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f410:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f414:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f418:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f41c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f420:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f424:	ea4c 040a 	orr.w	r4, ip, sl
 801f428:	940f      	str	r4, [sp, #60]	@ 0x3c
 801f42a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f42c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801f430:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f434:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f438:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f43a:	fb08 f707 	mul.w	r7, r8, r7
 801f43e:	fb02 770c 	mla	r7, r2, ip, r7
 801f442:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f446:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f448:	fb00 770c 	mla	r7, r0, ip, r7
 801f44c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f450:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f452:	fb09 770c 	mla	r7, r9, ip, r7
 801f456:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801f45a:	fb08 f80c 	mul.w	r8, r8, ip
 801f45e:	0a3f      	lsrs	r7, r7, #8
 801f460:	fb02 8303 	mla	r3, r2, r3, r8
 801f464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f466:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801f46a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801f46e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f470:	fb00 330a 	mla	r3, r0, sl, r3
 801f474:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801f478:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f47a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f484:	434b      	muls	r3, r1
 801f486:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f48a:	1c59      	adds	r1, r3, #1
 801f48c:	ea47 070c 	orr.w	r7, r7, ip
 801f490:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f494:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f498:	b2fa      	uxtb	r2, r7
 801f49a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f49e:	fb12 f200 	smulbb	r2, r2, r0
 801f4a2:	b2c9      	uxtb	r1, r1
 801f4a4:	fb03 2301 	mla	r3, r3, r1, r2
 801f4a8:	b29b      	uxth	r3, r3
 801f4aa:	1c5a      	adds	r2, r3, #1
 801f4ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f4b0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f4b4:	fb12 f201 	smulbb	r2, r2, r1
 801f4b8:	121b      	asrs	r3, r3, #8
 801f4ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f4be:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f4c2:	0c3f      	lsrs	r7, r7, #16
 801f4c4:	fb03 2300 	mla	r3, r3, r0, r2
 801f4c8:	b29b      	uxth	r3, r3
 801f4ca:	1c5a      	adds	r2, r3, #1
 801f4cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f4d0:	121b      	asrs	r3, r3, #8
 801f4d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f4d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f4da:	fb13 f101 	smulbb	r1, r3, r1
 801f4de:	fb07 1700 	mla	r7, r7, r0, r1
 801f4e2:	b2bf      	uxth	r7, r7
 801f4e4:	1c79      	adds	r1, r7, #1
 801f4e6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f4ea:	123f      	asrs	r7, r7, #8
 801f4ec:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f4f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f4f2:	f10e 0e03 	add.w	lr, lr, #3
 801f4f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f4fa:	441d      	add	r5, r3
 801f4fc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f4fe:	441e      	add	r6, r3
 801f500:	e64e      	b.n	801f1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801f502:	2800      	cmp	r0, #0
 801f504:	f43f aee8 	beq.w	801f2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f508:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f50c:	9209      	str	r2, [sp, #36]	@ 0x24
 801f50e:	0e12      	lsrs	r2, r2, #24
 801f510:	9212      	str	r2, [sp, #72]	@ 0x48
 801f512:	e6e1      	b.n	801f2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f514:	b01d      	add	sp, #116	@ 0x74
 801f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f51a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f51a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f51e:	b087      	sub	sp, #28
 801f520:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f524:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f528:	fb05 7003 	mla	r0, r5, r3, r7
 801f52c:	2d00      	cmp	r5, #0
 801f52e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f532:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f536:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f53a:	f2c0 810a 	blt.w	801f752 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f53e:	45a8      	cmp	r8, r5
 801f540:	f340 8107 	ble.w	801f752 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f544:	2f00      	cmp	r7, #0
 801f546:	f2c0 8102 	blt.w	801f74e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f54a:	42bb      	cmp	r3, r7
 801f54c:	f340 80ff 	ble.w	801f74e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f550:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f554:	1c7a      	adds	r2, r7, #1
 801f556:	f100 80ff 	bmi.w	801f758 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f55a:	4293      	cmp	r3, r2
 801f55c:	f340 80fc 	ble.w	801f758 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f560:	2c00      	cmp	r4, #0
 801f562:	f000 80fb 	beq.w	801f75c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801f566:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f56a:	3501      	adds	r5, #1
 801f56c:	f100 80fa 	bmi.w	801f764 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f570:	45a8      	cmp	r8, r5
 801f572:	f340 80f7 	ble.w	801f764 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f576:	f1be 0f00 	cmp.w	lr, #0
 801f57a:	f000 80f6 	beq.w	801f76a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801f57e:	2f00      	cmp	r7, #0
 801f580:	f2c0 80ee 	blt.w	801f760 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f584:	42bb      	cmp	r3, r7
 801f586:	f340 80eb 	ble.w	801f760 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f58a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f58e:	3701      	adds	r7, #1
 801f590:	f100 80ee 	bmi.w	801f770 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f594:	42bb      	cmp	r3, r7
 801f596:	f340 80eb 	ble.w	801f770 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f59a:	2c00      	cmp	r4, #0
 801f59c:	f000 80ea 	beq.w	801f774 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801f5a0:	3301      	adds	r3, #1
 801f5a2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f5a6:	fa1f fc84 	uxth.w	ip, r4
 801f5aa:	fa1f fe8e 	uxth.w	lr, lr
 801f5ae:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f5b2:	fb0c f90e 	mul.w	r9, ip, lr
 801f5b6:	0e13      	lsrs	r3, r2, #24
 801f5b8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f5bc:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f5c0:	9302      	str	r3, [sp, #8]
 801f5c2:	ebac 0709 	sub.w	r7, ip, r9
 801f5c6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f5ca:	fa1f f48e 	uxth.w	r4, lr
 801f5ce:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f5d2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f5d6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f5da:	fb0a fe0e 	mul.w	lr, sl, lr
 801f5de:	1b1b      	subs	r3, r3, r4
 801f5e0:	fb0a f606 	mul.w	r6, sl, r6
 801f5e4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f5e8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f5ec:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f5f0:	b29b      	uxth	r3, r3
 801f5f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f5f6:	b2bf      	uxth	r7, r7
 801f5f8:	9301      	str	r3, [sp, #4]
 801f5fa:	44e6      	add	lr, ip
 801f5fc:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f600:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f604:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f608:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f60c:	9303      	str	r3, [sp, #12]
 801f60e:	0a33      	lsrs	r3, r6, #8
 801f610:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f614:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f618:	9304      	str	r3, [sp, #16]
 801f61a:	fb0b f606 	mul.w	r6, fp, r6
 801f61e:	fb0b f000 	mul.w	r0, fp, r0
 801f622:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f626:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f62a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f62e:	44b6      	add	lr, r6
 801f630:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f634:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f638:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f63c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f640:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f644:	fb08 f606 	mul.w	r6, r8, r6
 801f648:	0a03      	lsrs	r3, r0, #8
 801f64a:	fb08 f505 	mul.w	r5, r8, r5
 801f64e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f652:	0a30      	lsrs	r0, r6, #8
 801f654:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f658:	9305      	str	r3, [sp, #20]
 801f65a:	0e13      	lsrs	r3, r2, #24
 801f65c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f660:	fb0e fe07 	mul.w	lr, lr, r7
 801f664:	4430      	add	r0, r6
 801f666:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f66a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f66e:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f672:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f676:	0a00      	lsrs	r0, r0, #8
 801f678:	435e      	muls	r6, r3
 801f67a:	0a2d      	lsrs	r5, r5, #8
 801f67c:	435a      	muls	r2, r3
 801f67e:	9b03      	ldr	r3, [sp, #12]
 801f680:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f684:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f688:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f68c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f690:	44b4      	add	ip, r6
 801f692:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f696:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f69a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f69e:	9e01      	ldr	r6, [sp, #4]
 801f6a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f6a4:	fb03 ee06 	mla	lr, r3, r6, lr
 801f6a8:	9b04      	ldr	r3, [sp, #16]
 801f6aa:	0a12      	lsrs	r2, r2, #8
 801f6ac:	fb0c ee09 	mla	lr, ip, r9, lr
 801f6b0:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f6b4:	9b05      	ldr	r3, [sp, #20]
 801f6b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f6ba:	fb00 ee04 	mla	lr, r0, r4, lr
 801f6be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6c2:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f6c6:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f6ca:	9b01      	ldr	r3, [sp, #4]
 801f6cc:	fb07 fe0e 	mul.w	lr, r7, lr
 801f6d0:	fb07 f70b 	mul.w	r7, r7, fp
 801f6d4:	fb03 ee06 	mla	lr, r3, r6, lr
 801f6d8:	fb03 730a 	mla	r3, r3, sl, r7
 801f6dc:	fb09 e202 	mla	r2, r9, r2, lr
 801f6e0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f6e4:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f6e8:	fb04 3408 	mla	r4, r4, r8, r3
 801f6ec:	9b02      	ldr	r3, [sp, #8]
 801f6ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6f2:	fb09 4903 	mla	r9, r9, r3, r4
 801f6f6:	780b      	ldrb	r3, [r1, #0]
 801f6f8:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f6fc:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801f700:	ea40 0e0e 	orr.w	lr, r0, lr
 801f704:	fa5f f989 	uxtb.w	r9, r9
 801f708:	fb03 f209 	mul.w	r2, r3, r9
 801f70c:	1c53      	adds	r3, r2, #1
 801f70e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f712:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801f716:	700b      	strb	r3, [r1, #0]
 801f718:	784b      	ldrb	r3, [r1, #1]
 801f71a:	fb03 f309 	mul.w	r3, r3, r9
 801f71e:	1c5a      	adds	r2, r3, #1
 801f720:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f724:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f728:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f72c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f730:	704b      	strb	r3, [r1, #1]
 801f732:	788b      	ldrb	r3, [r1, #2]
 801f734:	fb03 f909 	mul.w	r9, r3, r9
 801f738:	f109 0301 	add.w	r3, r9, #1
 801f73c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f740:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801f744:	f881 e002 	strb.w	lr, [r1, #2]
 801f748:	b007      	add	sp, #28
 801f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f74e:	2600      	movs	r6, #0
 801f750:	e700      	b.n	801f554 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801f752:	2000      	movs	r0, #0
 801f754:	4606      	mov	r6, r0
 801f756:	e708      	b.n	801f56a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f758:	2000      	movs	r0, #0
 801f75a:	e706      	b.n	801f56a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f75c:	4620      	mov	r0, r4
 801f75e:	e704      	b.n	801f56a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f760:	2500      	movs	r5, #0
 801f762:	e714      	b.n	801f58e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801f764:	2200      	movs	r2, #0
 801f766:	4615      	mov	r5, r2
 801f768:	e71d      	b.n	801f5a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f76a:	4672      	mov	r2, lr
 801f76c:	4675      	mov	r5, lr
 801f76e:	e71a      	b.n	801f5a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f770:	2200      	movs	r2, #0
 801f772:	e718      	b.n	801f5a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f774:	4622      	mov	r2, r4
 801f776:	e716      	b.n	801f5a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801f778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f77c:	b099      	sub	sp, #100	@ 0x64
 801f77e:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801f782:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801f784:	9017      	str	r0, [sp, #92]	@ 0x5c
 801f786:	9306      	str	r3, [sp, #24]
 801f788:	6850      	ldr	r0, [r2, #4]
 801f78a:	6812      	ldr	r2, [r2, #0]
 801f78c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801f790:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801f794:	fb00 1303 	mla	r3, r0, r3, r1
 801f798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f79c:	18d3      	adds	r3, r2, r3
 801f79e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7a0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	930e      	str	r3, [sp, #56]	@ 0x38
 801f7a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	dc03      	bgt.n	801f7b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f7ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	f340 8360 	ble.w	801fe74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f7b4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f7b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7be:	1e48      	subs	r0, r1, #1
 801f7c0:	1e57      	subs	r7, r2, #1
 801f7c2:	9b06      	ldr	r3, [sp, #24]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	f340 817b 	ble.w	801fac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801f7ca:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f7ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f7d2:	d406      	bmi.n	801f7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7d4:	4584      	cmp	ip, r0
 801f7d6:	da04      	bge.n	801f7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	db02      	blt.n	801f7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7dc:	42bb      	cmp	r3, r7
 801f7de:	f2c0 8170 	blt.w	801fac2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f7e2:	f11c 0c01 	adds.w	ip, ip, #1
 801f7e6:	f100 8160 	bmi.w	801faaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f7ea:	4561      	cmp	r1, ip
 801f7ec:	f2c0 815d 	blt.w	801faaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f7f0:	3301      	adds	r3, #1
 801f7f2:	f100 815a 	bmi.w	801faaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f7f6:	429a      	cmp	r2, r3
 801f7f8:	f2c0 8157 	blt.w	801faaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f7fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f800:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f802:	f1b8 0f00 	cmp.w	r8, #0
 801f806:	f340 8179 	ble.w	801fafc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f80a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801f80c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f810:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f812:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f816:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f81a:	142a      	asrs	r2, r5, #16
 801f81c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f820:	689b      	ldr	r3, [r3, #8]
 801f822:	f100 81be 	bmi.w	801fba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f826:	f103 39ff 	add.w	r9, r3, #4294967295
 801f82a:	454a      	cmp	r2, r9
 801f82c:	f280 81b9 	bge.w	801fba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f830:	f1bc 0f00 	cmp.w	ip, #0
 801f834:	f2c0 81b5 	blt.w	801fba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f838:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f83c:	45cc      	cmp	ip, r9
 801f83e:	f280 81b0 	bge.w	801fba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f842:	b21b      	sxth	r3, r3
 801f844:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f846:	fb0c 2203 	mla	r2, ip, r3, r2
 801f84a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801f84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f852:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f856:	2900      	cmp	r1, #0
 801f858:	f000 8197 	beq.w	801fb8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801f85c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801f860:	940a      	str	r4, [sp, #40]	@ 0x28
 801f862:	0e24      	lsrs	r4, r4, #24
 801f864:	9411      	str	r4, [sp, #68]	@ 0x44
 801f866:	b180      	cbz	r0, 801f88a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801f86c:	3b01      	subs	r3, #1
 801f86e:	009b      	lsls	r3, r3, #2
 801f870:	3304      	adds	r3, #4
 801f872:	eb09 0c03 	add.w	ip, r9, r3
 801f876:	f859 3003 	ldr.w	r3, [r9, r3]
 801f87a:	9307      	str	r3, [sp, #28]
 801f87c:	0e1b      	lsrs	r3, r3, #24
 801f87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f880:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f884:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f886:	0e1b      	lsrs	r3, r3, #24
 801f888:	9312      	str	r3, [sp, #72]	@ 0x48
 801f88a:	b289      	uxth	r1, r1
 801f88c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f88e:	b280      	uxth	r0, r0
 801f890:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f892:	fb01 fa00 	mul.w	sl, r1, r0
 801f896:	0109      	lsls	r1, r1, #4
 801f898:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f89c:	eba1 090a 	sub.w	r9, r1, sl
 801f8a0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801f8a4:	b280      	uxth	r0, r0
 801f8a6:	fa1f f989 	uxth.w	r9, r9
 801f8aa:	1a09      	subs	r1, r1, r0
 801f8ac:	fb09 f303 	mul.w	r3, r9, r3
 801f8b0:	b289      	uxth	r1, r1
 801f8b2:	fb01 330e 	mla	r3, r1, lr, r3
 801f8b6:	fb00 3304 	mla	r3, r0, r4, r3
 801f8ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f8bc:	fb0a 3304 	mla	r3, sl, r4, r3
 801f8c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	f000 80e8 	beq.w	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f8ca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f8ce:	d01b      	beq.n	801f908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f8d0:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801f8d4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f8d8:	fb0e fb0b 	mul.w	fp, lr, fp
 801f8dc:	fb0e fe02 	mul.w	lr, lr, r2
 801f8e0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801f8e4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f8e8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f8ec:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f8f0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f8f4:	445a      	add	r2, fp
 801f8f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8fa:	0a12      	lsrs	r2, r2, #8
 801f8fc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f900:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f904:	ea42 020c 	orr.w	r2, r2, ip
 801f908:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f90a:	2cff      	cmp	r4, #255	@ 0xff
 801f90c:	d021      	beq.n	801f952 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f90e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f910:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f914:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f916:	fb04 fc0c 	mul.w	ip, r4, ip
 801f91a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f91c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f920:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f924:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f926:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f92a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f92e:	fb04 fb0b 	mul.w	fp, r4, fp
 801f932:	44e6      	add	lr, ip
 801f934:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f938:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f93c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f940:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f944:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f948:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f94c:	ea4e 040b 	orr.w	r4, lr, fp
 801f950:	940a      	str	r4, [sp, #40]	@ 0x28
 801f952:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f954:	2cff      	cmp	r4, #255	@ 0xff
 801f956:	d021      	beq.n	801f99c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f958:	9c07      	ldr	r4, [sp, #28]
 801f95a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f95e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f960:	fb04 fc0c 	mul.w	ip, r4, ip
 801f964:	9c07      	ldr	r4, [sp, #28]
 801f966:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f96a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f96e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f970:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f974:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f978:	fb04 fb0b 	mul.w	fp, r4, fp
 801f97c:	44e6      	add	lr, ip
 801f97e:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f982:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f986:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f98a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f98e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f992:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f996:	ea4e 040b 	orr.w	r4, lr, fp
 801f99a:	9407      	str	r4, [sp, #28]
 801f99c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f99e:	2cff      	cmp	r4, #255	@ 0xff
 801f9a0:	d021      	beq.n	801f9e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f9a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9a4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f9a8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9aa:	fb04 fc0c 	mul.w	ip, r4, ip
 801f9ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9b0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f9b4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801f9b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9ba:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f9be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f9c2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f9c6:	44e6      	add	lr, ip
 801f9c8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801f9cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9d0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f9d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f9d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f9dc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801f9e0:	ea4e 040b 	orr.w	r4, lr, fp
 801f9e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f9e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f9e8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801f9ec:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f9f0:	2bff      	cmp	r3, #255	@ 0xff
 801f9f2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f9f6:	9c07      	ldr	r4, [sp, #28]
 801f9f8:	fb09 fc0c 	mul.w	ip, r9, ip
 801f9fc:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fa00:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fa04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa06:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fa0a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fa0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fa10:	fb0a cc0e 	mla	ip, sl, lr, ip
 801fa14:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fa18:	fb09 f90e 	mul.w	r9, r9, lr
 801fa1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa20:	fb01 9202 	mla	r2, r1, r2, r9
 801fa24:	9907      	ldr	r1, [sp, #28]
 801fa26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fa2a:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801fa2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fa30:	fb00 220b 	mla	r2, r0, fp, r2
 801fa34:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801fa38:	fb0a 2a00 	mla	sl, sl, r0, r2
 801fa3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fa44:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fa48:	fa5f f08c 	uxtb.w	r0, ip
 801fa4c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801fa50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fa54:	f000 80a2 	beq.w	801fb9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801fa58:	43db      	mvns	r3, r3
 801fa5a:	783a      	ldrb	r2, [r7, #0]
 801fa5c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fa60:	b2db      	uxtb	r3, r3
 801fa62:	fb02 fe03 	mul.w	lr, r2, r3
 801fa66:	fb0a fa03 	mul.w	sl, sl, r3
 801fa6a:	f10e 0201 	add.w	r2, lr, #1
 801fa6e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801fa72:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fa76:	703a      	strb	r2, [r7, #0]
 801fa78:	787a      	ldrb	r2, [r7, #1]
 801fa7a:	fb02 f003 	mul.w	r0, r2, r3
 801fa7e:	f10a 0301 	add.w	r3, sl, #1
 801fa82:	1c42      	adds	r2, r0, #1
 801fa84:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fa88:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fa8c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fa90:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fa94:	707a      	strb	r2, [r7, #1]
 801fa96:	f887 c002 	strb.w	ip, [r7, #2]
 801fa9a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fa9c:	3703      	adds	r7, #3
 801fa9e:	f108 38ff 	add.w	r8, r8, #4294967295
 801faa2:	441d      	add	r5, r3
 801faa4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801faa6:	441e      	add	r6, r3
 801faa8:	e6ab      	b.n	801f802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801faaa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801faac:	441d      	add	r5, r3
 801faae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fab0:	441e      	add	r6, r3
 801fab2:	9b06      	ldr	r3, [sp, #24]
 801fab4:	3b01      	subs	r3, #1
 801fab6:	9306      	str	r3, [sp, #24]
 801fab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faba:	3303      	adds	r3, #3
 801fabc:	9309      	str	r3, [sp, #36]	@ 0x24
 801fabe:	e680      	b.n	801f7c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fac0:	d024      	beq.n	801fb0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801fac2:	9b06      	ldr	r3, [sp, #24]
 801fac4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801fac6:	3b01      	subs	r3, #1
 801fac8:	fb00 5003 	mla	r0, r0, r3, r5
 801facc:	1400      	asrs	r0, r0, #16
 801face:	f53f ae95 	bmi.w	801f7fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fad2:	3901      	subs	r1, #1
 801fad4:	4288      	cmp	r0, r1
 801fad6:	f6bf ae91 	bge.w	801f7fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fada:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801fadc:	fb01 6303 	mla	r3, r1, r3, r6
 801fae0:	141b      	asrs	r3, r3, #16
 801fae2:	f53f ae8b 	bmi.w	801f7fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fae6:	3a01      	subs	r2, #1
 801fae8:	4293      	cmp	r3, r2
 801faea:	f6bf ae87 	bge.w	801f7fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801faee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faf0:	f8dd b018 	ldr.w	fp, [sp, #24]
 801faf4:	1cdf      	adds	r7, r3, #3
 801faf6:	f1bb 0f00 	cmp.w	fp, #0
 801fafa:	dc6e      	bgt.n	801fbda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801fafc:	9b06      	ldr	r3, [sp, #24]
 801fafe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb08:	4423      	add	r3, r4
 801fb0a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	f340 81b0 	ble.w	801fe74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801fb14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fb18:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fb1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb22:	eef0 6a62 	vmov.f32	s13, s5
 801fb26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fb2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb32:	ee16 5a90 	vmov	r5, s13
 801fb36:	eef0 6a43 	vmov.f32	s13, s6
 801fb3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb3e:	ee16 6a90 	vmov	r6, s13
 801fb42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb46:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb5a:	ee12 2a90 	vmov	r2, s5
 801fb5e:	eef0 2a47 	vmov.f32	s5, s14
 801fb62:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb66:	ee13 2a10 	vmov	r2, s6
 801fb6a:	9325      	str	r3, [sp, #148]	@ 0x94
 801fb6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fb6e:	eeb0 3a67 	vmov.f32	s6, s15
 801fb72:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb76:	9326      	str	r3, [sp, #152]	@ 0x98
 801fb78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fb7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fb7c:	3b01      	subs	r3, #1
 801fb7e:	9315      	str	r3, [sp, #84]	@ 0x54
 801fb80:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fb82:	bf08      	it	eq
 801fb84:	4613      	moveq	r3, r2
 801fb86:	9306      	str	r3, [sp, #24]
 801fb88:	e60d      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fb8a:	2800      	cmp	r0, #0
 801fb8c:	f43f ae7d 	beq.w	801f88a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fb90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fb94:	9307      	str	r3, [sp, #28]
 801fb96:	0e1b      	lsrs	r3, r3, #24
 801fb98:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fb9a:	e676      	b.n	801f88a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fb9c:	7038      	strb	r0, [r7, #0]
 801fb9e:	7079      	strb	r1, [r7, #1]
 801fba0:	e779      	b.n	801fa96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fba2:	f112 0901 	adds.w	r9, r2, #1
 801fba6:	f53f af78 	bmi.w	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbaa:	454b      	cmp	r3, r9
 801fbac:	f6ff af75 	blt.w	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbb0:	f11c 0901 	adds.w	r9, ip, #1
 801fbb4:	f53f af71 	bmi.w	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbb8:	45ce      	cmp	lr, r9
 801fbba:	f6ff af6e 	blt.w	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbbe:	b21b      	sxth	r3, r3
 801fbc0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801fbc4:	fa0f f28e 	sxth.w	r2, lr
 801fbc8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801fbcc:	9200      	str	r2, [sp, #0]
 801fbce:	4639      	mov	r1, r7
 801fbd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fbd2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801fbd4:	f7ff fca1 	bl	801f51a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801fbd8:	e75f      	b.n	801fa9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbda:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fbdc:	1429      	asrs	r1, r5, #16
 801fbde:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fbe0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fbe4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801fbe8:	1433      	asrs	r3, r6, #16
 801fbea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fbee:	fb0c 1303 	mla	r3, ip, r3, r1
 801fbf2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fbf4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fbf8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fbfc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fc00:	2a00      	cmp	r2, #0
 801fc02:	f000 8129 	beq.w	801fe58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801fc06:	684c      	ldr	r4, [r1, #4]
 801fc08:	940c      	str	r4, [sp, #48]	@ 0x30
 801fc0a:	0e24      	lsrs	r4, r4, #24
 801fc0c:	9413      	str	r4, [sp, #76]	@ 0x4c
 801fc0e:	b198      	cbz	r0, 801fc38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fc10:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801fc14:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fc18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801fc1c:	f10c 0c04 	add.w	ip, ip, #4
 801fc20:	eb01 080c 	add.w	r8, r1, ip
 801fc24:	f851 100c 	ldr.w	r1, [r1, ip]
 801fc28:	9108      	str	r1, [sp, #32]
 801fc2a:	0e09      	lsrs	r1, r1, #24
 801fc2c:	9110      	str	r1, [sp, #64]	@ 0x40
 801fc2e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fc32:	910d      	str	r1, [sp, #52]	@ 0x34
 801fc34:	0e09      	lsrs	r1, r1, #24
 801fc36:	9114      	str	r1, [sp, #80]	@ 0x50
 801fc38:	b292      	uxth	r2, r2
 801fc3a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fc3c:	b280      	uxth	r0, r0
 801fc3e:	fb02 f900 	mul.w	r9, r2, r0
 801fc42:	0112      	lsls	r2, r2, #4
 801fc44:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fc48:	eba2 0809 	sub.w	r8, r2, r9
 801fc4c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801fc50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fc52:	b280      	uxth	r0, r0
 801fc54:	fa1f f888 	uxth.w	r8, r8
 801fc58:	1a09      	subs	r1, r1, r0
 801fc5a:	fb08 f202 	mul.w	r2, r8, r2
 801fc5e:	b289      	uxth	r1, r1
 801fc60:	fb01 220e 	mla	r2, r1, lr, r2
 801fc64:	fb00 2204 	mla	r2, r0, r4, r2
 801fc68:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fc6a:	fb09 2204 	mla	r2, r9, r4, r2
 801fc6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fc72:	2a00      	cmp	r2, #0
 801fc74:	f000 80e8 	beq.w	801fe48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801fc78:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fc7c:	d01b      	beq.n	801fcb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801fc7e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fc82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fc86:	fb0e fa0a 	mul.w	sl, lr, sl
 801fc8a:	fb0e fe03 	mul.w	lr, lr, r3
 801fc8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fc92:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fc96:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fc9a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fc9e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fca2:	4453      	add	r3, sl
 801fca4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fca8:	0a1b      	lsrs	r3, r3, #8
 801fcaa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fcae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fcb2:	ea43 030c 	orr.w	r3, r3, ip
 801fcb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcb8:	2cff      	cmp	r4, #255	@ 0xff
 801fcba:	d021      	beq.n	801fd00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801fcbc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fcbe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fcc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcc4:	fb04 fc0c 	mul.w	ip, r4, ip
 801fcc8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fcca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fcce:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fcd2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcd4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fcd8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fcdc:	fb04 fa0a 	mul.w	sl, r4, sl
 801fce0:	44e6      	add	lr, ip
 801fce2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fce6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fcea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fcee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fcf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcf6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fcfa:	ea4e 040a 	orr.w	r4, lr, sl
 801fcfe:	940c      	str	r4, [sp, #48]	@ 0x30
 801fd00:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fd02:	2cff      	cmp	r4, #255	@ 0xff
 801fd04:	d021      	beq.n	801fd4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801fd06:	9c08      	ldr	r4, [sp, #32]
 801fd08:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fd0c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fd0e:	fb04 fc0c 	mul.w	ip, r4, ip
 801fd12:	9c08      	ldr	r4, [sp, #32]
 801fd14:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fd18:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fd1a:	fb04 fa0e 	mul.w	sl, r4, lr
 801fd1e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fd22:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fd26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd2a:	44e6      	add	lr, ip
 801fd2c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fd30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fd34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd3c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fd44:	ea4e 040a 	orr.w	r4, lr, sl
 801fd48:	9408      	str	r4, [sp, #32]
 801fd4a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fd4c:	2cff      	cmp	r4, #255	@ 0xff
 801fd4e:	d021      	beq.n	801fd94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801fd50:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fd52:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fd56:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fd58:	fb04 fc0c 	mul.w	ip, r4, ip
 801fd5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fd5e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fd62:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fd66:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fd68:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fd6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd70:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd74:	44e6      	add	lr, ip
 801fd76:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fd7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fd82:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fd86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd8a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fd8e:	ea4e 040a 	orr.w	r4, lr, sl
 801fd92:	940d      	str	r4, [sp, #52]	@ 0x34
 801fd94:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fd96:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801fd9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fd9e:	2aff      	cmp	r2, #255	@ 0xff
 801fda0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fda4:	9c08      	ldr	r4, [sp, #32]
 801fda6:	fb08 fc0c 	mul.w	ip, r8, ip
 801fdaa:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fdae:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fdb2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fdb4:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fdb8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fdbc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fdbe:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fdc2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fdc6:	fb08 f80e 	mul.w	r8, r8, lr
 801fdca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdce:	fb01 8303 	mla	r3, r1, r3, r8
 801fdd2:	9908      	ldr	r1, [sp, #32]
 801fdd4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fdd8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801fddc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801fdde:	fb00 330a 	mla	r3, r0, sl, r3
 801fde2:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801fde6:	fb09 3e0e 	mla	lr, r9, lr, r3
 801fdea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fdee:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801fdf2:	ea4c 0c0e 	orr.w	ip, ip, lr
 801fdf6:	fa5f f08c 	uxtb.w	r0, ip
 801fdfa:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801fdfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fe02:	d032      	beq.n	801fe6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801fe04:	43d2      	mvns	r2, r2
 801fe06:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801fe0a:	b2d2      	uxtb	r2, r2
 801fe0c:	fb0e fe02 	mul.w	lr, lr, r2
 801fe10:	f10e 0301 	add.w	r3, lr, #1
 801fe14:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801fe18:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fe1c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801fe20:	4350      	muls	r0, r2
 801fe22:	f807 3c03 	strb.w	r3, [r7, #-3]
 801fe26:	1c43      	adds	r3, r0, #1
 801fe28:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fe2c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fe30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801fe34:	4353      	muls	r3, r2
 801fe36:	f807 1c02 	strb.w	r1, [r7, #-2]
 801fe3a:	1c5a      	adds	r2, r3, #1
 801fe3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fe40:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801fe44:	f807 cc01 	strb.w	ip, [r7, #-1]
 801fe48:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801fe4a:	3703      	adds	r7, #3
 801fe4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fe50:	441d      	add	r5, r3
 801fe52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fe54:	441e      	add	r6, r3
 801fe56:	e64e      	b.n	801faf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801fe58:	2800      	cmp	r0, #0
 801fe5a:	f43f aeed 	beq.w	801fc38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fe5e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801fe62:	9108      	str	r1, [sp, #32]
 801fe64:	0e09      	lsrs	r1, r1, #24
 801fe66:	9110      	str	r1, [sp, #64]	@ 0x40
 801fe68:	e6e6      	b.n	801fc38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801fe6a:	f807 0c03 	strb.w	r0, [r7, #-3]
 801fe6e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801fe72:	e7e7      	b.n	801fe44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801fe74:	b019      	add	sp, #100	@ 0x64
 801fe76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fe7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe80:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801fe84:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fe88:	2c00      	cmp	r4, #0
 801fe8a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801fe8e:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801fe92:	fb00 4e03 	mla	lr, r0, r3, r4
 801fe96:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801fe9a:	f2c0 80b8 	blt.w	802000e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fe9e:	45a1      	cmp	r9, r4
 801fea0:	f340 80b5 	ble.w	802000e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fea4:	2800      	cmp	r0, #0
 801fea6:	f2c0 80b2 	blt.w	802000e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801feaa:	4580      	cmp	r8, r0
 801feac:	f340 80af 	ble.w	802000e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801feb0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801feb4:	f01e 0f01 	tst.w	lr, #1
 801feb8:	5d56      	ldrb	r6, [r2, r5]
 801feba:	bf0c      	ite	eq
 801febc:	f006 060f 	andeq.w	r6, r6, #15
 801fec0:	1136      	asrne	r6, r6, #4
 801fec2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fec6:	b2f6      	uxtb	r6, r6
 801fec8:	f114 0a01 	adds.w	sl, r4, #1
 801fecc:	f100 80a1 	bmi.w	8020012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fed0:	45d1      	cmp	r9, sl
 801fed2:	f340 809e 	ble.w	8020012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fed6:	2800      	cmp	r0, #0
 801fed8:	f2c0 809b 	blt.w	8020012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fedc:	4580      	cmp	r8, r0
 801fede:	f340 8098 	ble.w	8020012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fee2:	2f00      	cmp	r7, #0
 801fee4:	f000 8097 	beq.w	8020016 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801fee8:	f10e 0b01 	add.w	fp, lr, #1
 801feec:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fef0:	f01b 0f01 	tst.w	fp, #1
 801fef4:	5d55      	ldrb	r5, [r2, r5]
 801fef6:	bf0c      	ite	eq
 801fef8:	f005 050f 	andeq.w	r5, r5, #15
 801fefc:	112d      	asrne	r5, r5, #4
 801fefe:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801ff02:	b2ed      	uxtb	r5, r5
 801ff04:	f1bc 0f00 	cmp.w	ip, #0
 801ff08:	f000 8089 	beq.w	802001e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801ff0c:	2c00      	cmp	r4, #0
 801ff0e:	f100 0001 	add.w	r0, r0, #1
 801ff12:	f2c0 8082 	blt.w	802001a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ff16:	45a1      	cmp	r9, r4
 801ff18:	dd7f      	ble.n	802001a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ff1a:	2800      	cmp	r0, #0
 801ff1c:	db7d      	blt.n	802001a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ff1e:	4580      	cmp	r8, r0
 801ff20:	dd7b      	ble.n	802001a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ff22:	eb03 0b0e 	add.w	fp, r3, lr
 801ff26:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ff2a:	f01b 0f01 	tst.w	fp, #1
 801ff2e:	5d14      	ldrb	r4, [r2, r4]
 801ff30:	bf0c      	ite	eq
 801ff32:	f004 040f 	andeq.w	r4, r4, #15
 801ff36:	1124      	asrne	r4, r4, #4
 801ff38:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ff3c:	b2e4      	uxtb	r4, r4
 801ff3e:	f1ba 0f00 	cmp.w	sl, #0
 801ff42:	db6f      	blt.n	8020024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ff44:	45d1      	cmp	r9, sl
 801ff46:	dd6d      	ble.n	8020024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ff48:	2800      	cmp	r0, #0
 801ff4a:	db6b      	blt.n	8020024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ff4c:	4580      	cmp	r8, r0
 801ff4e:	dd69      	ble.n	8020024 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801ff50:	2f00      	cmp	r7, #0
 801ff52:	d069      	beq.n	8020028 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801ff54:	3301      	adds	r3, #1
 801ff56:	449e      	add	lr, r3
 801ff58:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ff5c:	f01e 0f01 	tst.w	lr, #1
 801ff60:	5cd0      	ldrb	r0, [r2, r3]
 801ff62:	bf0c      	ite	eq
 801ff64:	f000 000f 	andeq.w	r0, r0, #15
 801ff68:	1100      	asrne	r0, r0, #4
 801ff6a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ff6e:	b2c3      	uxtb	r3, r0
 801ff70:	b2ba      	uxth	r2, r7
 801ff72:	fa1f fc8c 	uxth.w	ip, ip
 801ff76:	fb02 f00c 	mul.w	r0, r2, ip
 801ff7a:	0112      	lsls	r2, r2, #4
 801ff7c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801ff80:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801ff84:	1a12      	subs	r2, r2, r0
 801ff86:	fa1f fc8c 	uxth.w	ip, ip
 801ff8a:	b292      	uxth	r2, r2
 801ff8c:	eba7 070c 	sub.w	r7, r7, ip
 801ff90:	436a      	muls	r2, r5
 801ff92:	b2bf      	uxth	r7, r7
 801ff94:	fb06 2207 	mla	r2, r6, r7, r2
 801ff98:	fb0c 2404 	mla	r4, ip, r4, r2
 801ff9c:	fb00 4303 	mla	r3, r0, r3, r4
 801ffa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ffa4:	b38b      	cbz	r3, 802000a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801ffa6:	4a21      	ldr	r2, [pc, #132]	@ (802002c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801ffa8:	6814      	ldr	r4, [r2, #0]
 801ffaa:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801ffae:	b2e5      	uxtb	r5, r4
 801ffb0:	4353      	muls	r3, r2
 801ffb2:	1c5a      	adds	r2, r3, #1
 801ffb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ffb8:	1212      	asrs	r2, r2, #8
 801ffba:	b290      	uxth	r0, r2
 801ffbc:	43d2      	mvns	r2, r2
 801ffbe:	fb15 f500 	smulbb	r5, r5, r0
 801ffc2:	b2d3      	uxtb	r3, r2
 801ffc4:	780a      	ldrb	r2, [r1, #0]
 801ffc6:	fb02 5203 	mla	r2, r2, r3, r5
 801ffca:	b292      	uxth	r2, r2
 801ffcc:	1c55      	adds	r5, r2, #1
 801ffce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ffd2:	784d      	ldrb	r5, [r1, #1]
 801ffd4:	fb15 f503 	smulbb	r5, r5, r3
 801ffd8:	1212      	asrs	r2, r2, #8
 801ffda:	700a      	strb	r2, [r1, #0]
 801ffdc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801ffe0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ffe4:	fb02 5200 	mla	r2, r2, r0, r5
 801ffe8:	b292      	uxth	r2, r2
 801ffea:	1c55      	adds	r5, r2, #1
 801ffec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801fff0:	1212      	asrs	r2, r2, #8
 801fff2:	704a      	strb	r2, [r1, #1]
 801fff4:	788a      	ldrb	r2, [r1, #2]
 801fff6:	fb12 f303 	smulbb	r3, r2, r3
 801fffa:	fb04 3300 	mla	r3, r4, r0, r3
 801fffe:	b29b      	uxth	r3, r3
 8020000:	1c5a      	adds	r2, r3, #1
 8020002:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020006:	121b      	asrs	r3, r3, #8
 8020008:	708b      	strb	r3, [r1, #2]
 802000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802000e:	2600      	movs	r6, #0
 8020010:	e75a      	b.n	801fec8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020012:	2500      	movs	r5, #0
 8020014:	e776      	b.n	801ff04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020016:	463d      	mov	r5, r7
 8020018:	e774      	b.n	801ff04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802001a:	2400      	movs	r4, #0
 802001c:	e78f      	b.n	801ff3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 802001e:	4663      	mov	r3, ip
 8020020:	4664      	mov	r4, ip
 8020022:	e7a5      	b.n	801ff70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020024:	2300      	movs	r3, #0
 8020026:	e7a3      	b.n	801ff70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020028:	463b      	mov	r3, r7
 802002a:	e7a1      	b.n	801ff70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802002c:	240284b4 	.word	0x240284b4

08020030 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020034:	b097      	sub	sp, #92	@ 0x5c
 8020036:	9214      	str	r2, [sp, #80]	@ 0x50
 8020038:	9309      	str	r3, [sp, #36]	@ 0x24
 802003a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802003c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020040:	9015      	str	r0, [sp, #84]	@ 0x54
 8020042:	910c      	str	r1, [sp, #48]	@ 0x30
 8020044:	6850      	ldr	r0, [r2, #4]
 8020046:	930e      	str	r3, [sp, #56]	@ 0x38
 8020048:	6812      	ldr	r2, [r2, #0]
 802004a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802004e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8020052:	fb00 1303 	mla	r3, r0, r3, r1
 8020056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802005a:	eb02 0a03 	add.w	sl, r2, r3
 802005e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020060:	689b      	ldr	r3, [r3, #8]
 8020062:	3301      	adds	r3, #1
 8020064:	f023 0301 	bic.w	r3, r3, #1
 8020068:	930f      	str	r3, [sp, #60]	@ 0x3c
 802006a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802006c:	681f      	ldr	r7, [r3, #0]
 802006e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020070:	2b00      	cmp	r3, #0
 8020072:	dc03      	bgt.n	802007c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020074:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020076:	2b00      	cmp	r3, #0
 8020078:	f340 8247 	ble.w	802050a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802007c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802007e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020082:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020086:	1e48      	subs	r0, r1, #1
 8020088:	f102 3cff 	add.w	ip, r2, #4294967295
 802008c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802008e:	2b00      	cmp	r3, #0
 8020090:	f340 80e5 	ble.w	802025e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020094:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020098:	ea4f 4326 	mov.w	r3, r6, asr #16
 802009c:	d406      	bmi.n	80200ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802009e:	4586      	cmp	lr, r0
 80200a0:	da04      	bge.n	80200ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	db02      	blt.n	80200ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200a6:	4563      	cmp	r3, ip
 80200a8:	f2c0 80da 	blt.w	8020260 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80200ac:	f11e 0e01 	adds.w	lr, lr, #1
 80200b0:	f100 80cb 	bmi.w	802024a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80200b4:	4571      	cmp	r1, lr
 80200b6:	f2c0 80c8 	blt.w	802024a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80200ba:	3301      	adds	r3, #1
 80200bc:	f100 80c5 	bmi.w	802024a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80200c0:	429a      	cmp	r2, r3
 80200c2:	f2c0 80c2 	blt.w	802024a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80200c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200c8:	46d0      	mov	r8, sl
 80200ca:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80200ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80200d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	f340 80e3 	ble.w	802029e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80200d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80200da:	1430      	asrs	r0, r6, #16
 80200dc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80200e0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80200e4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80200e8:	142b      	asrs	r3, r5, #16
 80200ea:	f100 812e 	bmi.w	802034a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80200ee:	f10c 3bff 	add.w	fp, ip, #4294967295
 80200f2:	455b      	cmp	r3, fp
 80200f4:	f280 8129 	bge.w	802034a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80200f8:	2800      	cmp	r0, #0
 80200fa:	f2c0 8126 	blt.w	802034a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80200fe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020102:	4558      	cmp	r0, fp
 8020104:	f280 8121 	bge.w	802034a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020108:	fb00 3309 	mla	r3, r0, r9, r3
 802010c:	0858      	lsrs	r0, r3, #1
 802010e:	07dc      	lsls	r4, r3, #31
 8020110:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020114:	bf54      	ite	pl
 8020116:	f00c 0c0f 	andpl.w	ip, ip, #15
 802011a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802011e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020122:	fa5f fc8c 	uxtb.w	ip, ip
 8020126:	2a00      	cmp	r2, #0
 8020128:	f000 80fe 	beq.w	8020328 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802012c:	1c58      	adds	r0, r3, #1
 802012e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020132:	07c0      	lsls	r0, r0, #31
 8020134:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020138:	bf54      	ite	pl
 802013a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802013e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020142:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020146:	fa5f f08e 	uxtb.w	r0, lr
 802014a:	9010      	str	r0, [sp, #64]	@ 0x40
 802014c:	b1d9      	cbz	r1, 8020186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802014e:	444b      	add	r3, r9
 8020150:	0858      	lsrs	r0, r3, #1
 8020152:	07dc      	lsls	r4, r3, #31
 8020154:	f103 0301 	add.w	r3, r3, #1
 8020158:	5c38      	ldrb	r0, [r7, r0]
 802015a:	bf54      	ite	pl
 802015c:	f000 000f 	andpl.w	r0, r0, #15
 8020160:	1100      	asrmi	r0, r0, #4
 8020162:	07dc      	lsls	r4, r3, #31
 8020164:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020168:	b2c0      	uxtb	r0, r0
 802016a:	900a      	str	r0, [sp, #40]	@ 0x28
 802016c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020170:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020174:	bf54      	ite	pl
 8020176:	f00e 030f 	andpl.w	r3, lr, #15
 802017a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802017e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020182:	b2db      	uxtb	r3, r3
 8020184:	9311      	str	r3, [sp, #68]	@ 0x44
 8020186:	b292      	uxth	r2, r2
 8020188:	b289      	uxth	r1, r1
 802018a:	0113      	lsls	r3, r2, #4
 802018c:	fb02 f001 	mul.w	r0, r2, r1
 8020190:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020192:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8020196:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802019a:	1a1b      	subs	r3, r3, r0
 802019c:	b289      	uxth	r1, r1
 802019e:	b29b      	uxth	r3, r3
 80201a0:	ebae 0e01 	sub.w	lr, lr, r1
 80201a4:	4353      	muls	r3, r2
 80201a6:	fa1f fe8e 	uxth.w	lr, lr
 80201aa:	fb0c 320e 	mla	r2, ip, lr, r3
 80201ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201b0:	fb01 2203 	mla	r2, r1, r3, r2
 80201b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80201b6:	fb00 2203 	mla	r2, r0, r3, r2
 80201ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80201be:	2a00      	cmp	r2, #0
 80201c0:	d039      	beq.n	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80201c2:	4bc7      	ldr	r3, [pc, #796]	@ (80204e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80201c4:	6819      	ldr	r1, [r3, #0]
 80201c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201c8:	fa5f fc81 	uxtb.w	ip, r1
 80201cc:	435a      	muls	r2, r3
 80201ce:	1c53      	adds	r3, r2, #1
 80201d0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80201d4:	1212      	asrs	r2, r2, #8
 80201d6:	b290      	uxth	r0, r2
 80201d8:	43d2      	mvns	r2, r2
 80201da:	fb1c fc00 	smulbb	ip, ip, r0
 80201de:	b2d3      	uxtb	r3, r2
 80201e0:	f898 2000 	ldrb.w	r2, [r8]
 80201e4:	fb02 c203 	mla	r2, r2, r3, ip
 80201e8:	b292      	uxth	r2, r2
 80201ea:	f102 0c01 	add.w	ip, r2, #1
 80201ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80201f2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80201f6:	fb1c fc03 	smulbb	ip, ip, r3
 80201fa:	1212      	asrs	r2, r2, #8
 80201fc:	f888 2000 	strb.w	r2, [r8]
 8020200:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020204:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020208:	fb02 c200 	mla	r2, r2, r0, ip
 802020c:	b292      	uxth	r2, r2
 802020e:	f102 0c01 	add.w	ip, r2, #1
 8020212:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020216:	1212      	asrs	r2, r2, #8
 8020218:	f888 2001 	strb.w	r2, [r8, #1]
 802021c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020220:	fb12 f303 	smulbb	r3, r2, r3
 8020224:	fb01 3300 	mla	r3, r1, r0, r3
 8020228:	b29b      	uxth	r3, r3
 802022a:	1c5a      	adds	r2, r3, #1
 802022c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020230:	121b      	asrs	r3, r3, #8
 8020232:	f888 3002 	strb.w	r3, [r8, #2]
 8020236:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020238:	f108 0803 	add.w	r8, r8, #3
 802023c:	441d      	add	r5, r3
 802023e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020240:	441e      	add	r6, r3
 8020242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020244:	3b01      	subs	r3, #1
 8020246:	930d      	str	r3, [sp, #52]	@ 0x34
 8020248:	e742      	b.n	80200d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802024a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802024c:	f10a 0a03 	add.w	sl, sl, #3
 8020250:	441d      	add	r5, r3
 8020252:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020254:	441e      	add	r6, r3
 8020256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020258:	3b01      	subs	r3, #1
 802025a:	9309      	str	r3, [sp, #36]	@ 0x24
 802025c:	e716      	b.n	802008c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802025e:	d024      	beq.n	80202aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020262:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020264:	3b01      	subs	r3, #1
 8020266:	fb00 5003 	mla	r0, r0, r3, r5
 802026a:	1400      	asrs	r0, r0, #16
 802026c:	f53f af2b 	bmi.w	80200c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020270:	3901      	subs	r1, #1
 8020272:	4288      	cmp	r0, r1
 8020274:	f6bf af27 	bge.w	80200c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020278:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802027a:	fb01 6303 	mla	r3, r1, r3, r6
 802027e:	141b      	asrs	r3, r3, #16
 8020280:	f53f af21 	bmi.w	80200c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020284:	3a01      	subs	r2, #1
 8020286:	4293      	cmp	r3, r2
 8020288:	f6bf af1d 	bge.w	80200c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802028c:	f10a 0e03 	add.w	lr, sl, #3
 8020290:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8020294:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020298:	f1b8 0f00 	cmp.w	r8, #0
 802029c:	dc76      	bgt.n	802038c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802029e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202a8:	44a2      	add	sl, r4
 80202aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	f340 812c 	ble.w	802050a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80202b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80202b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80202b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80202bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202c0:	eef0 6a62 	vmov.f32	s13, s5
 80202c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80202c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202d0:	ee16 5a90 	vmov	r5, s13
 80202d4:	eef0 6a43 	vmov.f32	s13, s6
 80202d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202dc:	ee16 6a90 	vmov	r6, s13
 80202e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202f8:	ee12 2a90 	vmov	r2, s5
 80202fc:	eef0 2a47 	vmov.f32	s5, s14
 8020300:	fb92 f3f3 	sdiv	r3, r2, r3
 8020304:	ee13 2a10 	vmov	r2, s6
 8020308:	9323      	str	r3, [sp, #140]	@ 0x8c
 802030a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802030c:	eeb0 3a67 	vmov.f32	s6, s15
 8020310:	fb92 f3f3 	sdiv	r3, r2, r3
 8020314:	9324      	str	r3, [sp, #144]	@ 0x90
 8020316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020318:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802031a:	3b01      	subs	r3, #1
 802031c:	930c      	str	r3, [sp, #48]	@ 0x30
 802031e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020320:	bf08      	it	eq
 8020322:	4613      	moveq	r3, r2
 8020324:	9309      	str	r3, [sp, #36]	@ 0x24
 8020326:	e6a2      	b.n	802006e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020328:	2900      	cmp	r1, #0
 802032a:	f43f af2c 	beq.w	8020186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802032e:	eb09 0003 	add.w	r0, r9, r3
 8020332:	0843      	lsrs	r3, r0, #1
 8020334:	07c0      	lsls	r0, r0, #31
 8020336:	5cfb      	ldrb	r3, [r7, r3]
 8020338:	bf54      	ite	pl
 802033a:	f003 030f 	andpl.w	r3, r3, #15
 802033e:	111b      	asrmi	r3, r3, #4
 8020340:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020344:	b2db      	uxtb	r3, r3
 8020346:	930a      	str	r3, [sp, #40]	@ 0x28
 8020348:	e71d      	b.n	8020186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802034a:	f113 0b01 	adds.w	fp, r3, #1
 802034e:	f53f af72 	bmi.w	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020352:	45dc      	cmp	ip, fp
 8020354:	f6ff af6f 	blt.w	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020358:	f110 0b01 	adds.w	fp, r0, #1
 802035c:	f53f af6b 	bmi.w	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020360:	45de      	cmp	lr, fp
 8020362:	f6ff af68 	blt.w	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020366:	9302      	str	r3, [sp, #8]
 8020368:	fa0f f38e 	sxth.w	r3, lr
 802036c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802036e:	9301      	str	r3, [sp, #4]
 8020370:	fa0f f38c 	sxth.w	r3, ip
 8020374:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020378:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802037c:	9300      	str	r3, [sp, #0]
 802037e:	463a      	mov	r2, r7
 8020380:	464b      	mov	r3, r9
 8020382:	4641      	mov	r1, r8
 8020384:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020386:	f7ff fd79 	bl	801fe7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802038a:	e754      	b.n	8020236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802038c:	142a      	asrs	r2, r5, #16
 802038e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020392:	1433      	asrs	r3, r6, #16
 8020394:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020398:	fb09 2303 	mla	r3, r9, r3, r2
 802039c:	085a      	lsrs	r2, r3, #1
 802039e:	07dc      	lsls	r4, r3, #31
 80203a0:	5cba      	ldrb	r2, [r7, r2]
 80203a2:	bf54      	ite	pl
 80203a4:	f002 020f 	andpl.w	r2, r2, #15
 80203a8:	1112      	asrmi	r2, r2, #4
 80203aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80203ae:	b2d2      	uxtb	r2, r2
 80203b0:	2900      	cmp	r1, #0
 80203b2:	f000 8097 	beq.w	80204e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80203b6:	f103 0b01 	add.w	fp, r3, #1
 80203ba:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80203be:	f01b 0f01 	tst.w	fp, #1
 80203c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80203c6:	bf0c      	ite	eq
 80203c8:	f00c 0c0f 	andeq.w	ip, ip, #15
 80203cc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80203d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80203d4:	fa5f f48c 	uxtb.w	r4, ip
 80203d8:	9412      	str	r4, [sp, #72]	@ 0x48
 80203da:	b300      	cbz	r0, 802041e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80203dc:	444b      	add	r3, r9
 80203de:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80203e2:	07dc      	lsls	r4, r3, #31
 80203e4:	f103 0301 	add.w	r3, r3, #1
 80203e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80203ec:	bf54      	ite	pl
 80203ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 80203f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80203f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80203fa:	fa5f f48c 	uxtb.w	r4, ip
 80203fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020402:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020404:	07dc      	lsls	r4, r3, #31
 8020406:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802040a:	bf54      	ite	pl
 802040c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020410:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020414:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020418:	fa5f f38c 	uxtb.w	r3, ip
 802041c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802041e:	b289      	uxth	r1, r1
 8020420:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020422:	b280      	uxth	r0, r0
 8020424:	fb01 f300 	mul.w	r3, r1, r0
 8020428:	0109      	lsls	r1, r1, #4
 802042a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802042e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8020432:	1ac9      	subs	r1, r1, r3
 8020434:	b280      	uxth	r0, r0
 8020436:	b289      	uxth	r1, r1
 8020438:	ebac 0c00 	sub.w	ip, ip, r0
 802043c:	4361      	muls	r1, r4
 802043e:	fa1f fc8c 	uxth.w	ip, ip
 8020442:	fb02 120c 	mla	r2, r2, ip, r1
 8020446:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020448:	fb00 2001 	mla	r0, r0, r1, r2
 802044c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802044e:	fb03 0302 	mla	r3, r3, r2, r0
 8020452:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020456:	2b00      	cmp	r3, #0
 8020458:	d039      	beq.n	80204ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802045a:	4a21      	ldr	r2, [pc, #132]	@ (80204e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802045c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020460:	6810      	ldr	r0, [r2, #0]
 8020462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020464:	fa5f fc80 	uxtb.w	ip, r0
 8020468:	4353      	muls	r3, r2
 802046a:	1c5a      	adds	r2, r3, #1
 802046c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020470:	121b      	asrs	r3, r3, #8
 8020472:	b29a      	uxth	r2, r3
 8020474:	43db      	mvns	r3, r3
 8020476:	fb1c fc02 	smulbb	ip, ip, r2
 802047a:	b2db      	uxtb	r3, r3
 802047c:	fb01 c103 	mla	r1, r1, r3, ip
 8020480:	b289      	uxth	r1, r1
 8020482:	f101 0c01 	add.w	ip, r1, #1
 8020486:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802048a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802048e:	fb1c fc03 	smulbb	ip, ip, r3
 8020492:	1209      	asrs	r1, r1, #8
 8020494:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020498:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802049c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80204a0:	fb01 c102 	mla	r1, r1, r2, ip
 80204a4:	b289      	uxth	r1, r1
 80204a6:	f101 0c01 	add.w	ip, r1, #1
 80204aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80204ae:	1209      	asrs	r1, r1, #8
 80204b0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80204b4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80204b8:	fb11 f303 	smulbb	r3, r1, r3
 80204bc:	fb00 3002 	mla	r0, r0, r2, r3
 80204c0:	b280      	uxth	r0, r0
 80204c2:	1c42      	adds	r2, r0, #1
 80204c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80204c8:	1200      	asrs	r0, r0, #8
 80204ca:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80204ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80204d0:	f10e 0e03 	add.w	lr, lr, #3
 80204d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80204d8:	441d      	add	r5, r3
 80204da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80204dc:	441e      	add	r6, r3
 80204de:	e6db      	b.n	8020298 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80204e0:	240284b4 	.word	0x240284b4
 80204e4:	2800      	cmp	r0, #0
 80204e6:	d09a      	beq.n	802041e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80204e8:	444b      	add	r3, r9
 80204ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80204ee:	07db      	lsls	r3, r3, #31
 80204f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80204f4:	bf54      	ite	pl
 80204f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80204fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80204fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020502:	fa5f f38c 	uxtb.w	r3, ip
 8020506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020508:	e789      	b.n	802041e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802050a:	b017      	add	sp, #92	@ 0x5c
 802050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020510 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020514:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8020518:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802051c:	2d00      	cmp	r5, #0
 802051e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8020522:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8020526:	fb04 5e03 	mla	lr, r4, r3, r5
 802052a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802052e:	f2c0 80b1 	blt.w	8020694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020532:	45a9      	cmp	r9, r5
 8020534:	f340 80ae 	ble.w	8020694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020538:	2c00      	cmp	r4, #0
 802053a:	f2c0 80ab 	blt.w	8020694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802053e:	45a0      	cmp	r8, r4
 8020540:	f340 80a8 	ble.w	8020694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020544:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8020548:	f01e 0f01 	tst.w	lr, #1
 802054c:	5d97      	ldrb	r7, [r2, r6]
 802054e:	bf0c      	ite	eq
 8020550:	f007 070f 	andeq.w	r7, r7, #15
 8020554:	113f      	asrne	r7, r7, #4
 8020556:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802055a:	b2ff      	uxtb	r7, r7
 802055c:	f115 0a01 	adds.w	sl, r5, #1
 8020560:	f100 809a 	bmi.w	8020698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020564:	45d1      	cmp	r9, sl
 8020566:	f340 8097 	ble.w	8020698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802056a:	2c00      	cmp	r4, #0
 802056c:	f2c0 8094 	blt.w	8020698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020570:	45a0      	cmp	r8, r4
 8020572:	f340 8091 	ble.w	8020698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020576:	2800      	cmp	r0, #0
 8020578:	f000 8090 	beq.w	802069c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802057c:	f10e 0b01 	add.w	fp, lr, #1
 8020580:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8020584:	f01b 0f01 	tst.w	fp, #1
 8020588:	5d96      	ldrb	r6, [r2, r6]
 802058a:	bf0c      	ite	eq
 802058c:	f006 060f 	andeq.w	r6, r6, #15
 8020590:	1136      	asrne	r6, r6, #4
 8020592:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020596:	b2f6      	uxtb	r6, r6
 8020598:	f1bc 0f00 	cmp.w	ip, #0
 802059c:	f000 8082 	beq.w	80206a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80205a0:	2d00      	cmp	r5, #0
 80205a2:	f104 0401 	add.w	r4, r4, #1
 80205a6:	db7b      	blt.n	80206a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80205a8:	45a9      	cmp	r9, r5
 80205aa:	dd79      	ble.n	80206a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80205ac:	2c00      	cmp	r4, #0
 80205ae:	db77      	blt.n	80206a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80205b0:	45a0      	cmp	r8, r4
 80205b2:	dd75      	ble.n	80206a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80205b4:	eb03 0b0e 	add.w	fp, r3, lr
 80205b8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80205bc:	f01b 0f01 	tst.w	fp, #1
 80205c0:	5d55      	ldrb	r5, [r2, r5]
 80205c2:	bf0c      	ite	eq
 80205c4:	f005 050f 	andeq.w	r5, r5, #15
 80205c8:	112d      	asrne	r5, r5, #4
 80205ca:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80205ce:	b2ed      	uxtb	r5, r5
 80205d0:	f1ba 0f00 	cmp.w	sl, #0
 80205d4:	db69      	blt.n	80206aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80205d6:	45d1      	cmp	r9, sl
 80205d8:	dd67      	ble.n	80206aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80205da:	2c00      	cmp	r4, #0
 80205dc:	db65      	blt.n	80206aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80205de:	45a0      	cmp	r8, r4
 80205e0:	dd63      	ble.n	80206aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80205e2:	2800      	cmp	r0, #0
 80205e4:	d063      	beq.n	80206ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80205e6:	3301      	adds	r3, #1
 80205e8:	449e      	add	lr, r3
 80205ea:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80205ee:	f01e 0f01 	tst.w	lr, #1
 80205f2:	5cd4      	ldrb	r4, [r2, r3]
 80205f4:	bf0c      	ite	eq
 80205f6:	f004 040f 	andeq.w	r4, r4, #15
 80205fa:	1124      	asrne	r4, r4, #4
 80205fc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020600:	b2e3      	uxtb	r3, r4
 8020602:	b282      	uxth	r2, r0
 8020604:	fa1f fc8c 	uxth.w	ip, ip
 8020608:	fb02 f40c 	mul.w	r4, r2, ip
 802060c:	0112      	lsls	r2, r2, #4
 802060e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8020612:	fa1f f08c 	uxth.w	r0, ip
 8020616:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802061a:	1b12      	subs	r2, r2, r4
 802061c:	ebac 0c00 	sub.w	ip, ip, r0
 8020620:	b292      	uxth	r2, r2
 8020622:	fa1f fc8c 	uxth.w	ip, ip
 8020626:	4372      	muls	r2, r6
 8020628:	fb07 220c 	mla	r2, r7, ip, r2
 802062c:	fb00 2005 	mla	r0, r0, r5, r2
 8020630:	fb04 0303 	mla	r3, r4, r3, r0
 8020634:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020638:	b353      	cbz	r3, 8020690 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802063a:	4a1e      	ldr	r2, [pc, #120]	@ (80206b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 802063c:	7808      	ldrb	r0, [r1, #0]
 802063e:	6814      	ldr	r4, [r2, #0]
 8020640:	b29a      	uxth	r2, r3
 8020642:	43db      	mvns	r3, r3
 8020644:	b2e5      	uxtb	r5, r4
 8020646:	b2db      	uxtb	r3, r3
 8020648:	fb15 f502 	smulbb	r5, r5, r2
 802064c:	fb00 5003 	mla	r0, r0, r3, r5
 8020650:	b280      	uxth	r0, r0
 8020652:	1c45      	adds	r5, r0, #1
 8020654:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020658:	784d      	ldrb	r5, [r1, #1]
 802065a:	fb15 f503 	smulbb	r5, r5, r3
 802065e:	1200      	asrs	r0, r0, #8
 8020660:	7008      	strb	r0, [r1, #0]
 8020662:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8020666:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802066a:	fb00 5002 	mla	r0, r0, r2, r5
 802066e:	b280      	uxth	r0, r0
 8020670:	1c45      	adds	r5, r0, #1
 8020672:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020676:	1200      	asrs	r0, r0, #8
 8020678:	7048      	strb	r0, [r1, #1]
 802067a:	7888      	ldrb	r0, [r1, #2]
 802067c:	fb10 f303 	smulbb	r3, r0, r3
 8020680:	fb04 3202 	mla	r2, r4, r2, r3
 8020684:	b292      	uxth	r2, r2
 8020686:	1c53      	adds	r3, r2, #1
 8020688:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802068c:	1212      	asrs	r2, r2, #8
 802068e:	708a      	strb	r2, [r1, #2]
 8020690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020694:	2700      	movs	r7, #0
 8020696:	e761      	b.n	802055c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8020698:	2600      	movs	r6, #0
 802069a:	e77d      	b.n	8020598 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802069c:	4606      	mov	r6, r0
 802069e:	e77b      	b.n	8020598 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80206a0:	2500      	movs	r5, #0
 80206a2:	e795      	b.n	80205d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80206a4:	4663      	mov	r3, ip
 80206a6:	4665      	mov	r5, ip
 80206a8:	e7ab      	b.n	8020602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80206aa:	2300      	movs	r3, #0
 80206ac:	e7a9      	b.n	8020602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80206ae:	4603      	mov	r3, r0
 80206b0:	e7a7      	b.n	8020602 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80206b2:	bf00      	nop
 80206b4:	240284b4 	.word	0x240284b4

080206b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206bc:	b093      	sub	sp, #76	@ 0x4c
 80206be:	461c      	mov	r4, r3
 80206c0:	920c      	str	r2, [sp, #48]	@ 0x30
 80206c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80206c4:	9011      	str	r0, [sp, #68]	@ 0x44
 80206c6:	9107      	str	r1, [sp, #28]
 80206c8:	6850      	ldr	r0, [r2, #4]
 80206ca:	6812      	ldr	r2, [r2, #0]
 80206cc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80206d0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80206d4:	fb00 1303 	mla	r3, r0, r3, r1
 80206d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206dc:	eb02 0b03 	add.w	fp, r2, r3
 80206e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80206e2:	689b      	ldr	r3, [r3, #8]
 80206e4:	3301      	adds	r3, #1
 80206e6:	f023 0301 	bic.w	r3, r3, #1
 80206ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80206ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80206ee:	f8d3 8000 	ldr.w	r8, [r3]
 80206f2:	9b07      	ldr	r3, [sp, #28]
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	dc03      	bgt.n	8020700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80206f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	f340 822b 	ble.w	8020b56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020700:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020702:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020706:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802070a:	1e48      	subs	r0, r1, #1
 802070c:	1e57      	subs	r7, r2, #1
 802070e:	2c00      	cmp	r4, #0
 8020710:	f340 80d7 	ble.w	80208c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020714:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020718:	ea4f 4326 	mov.w	r3, r6, asr #16
 802071c:	d406      	bmi.n	802072c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802071e:	4584      	cmp	ip, r0
 8020720:	da04      	bge.n	802072c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020722:	2b00      	cmp	r3, #0
 8020724:	db02      	blt.n	802072c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020726:	42bb      	cmp	r3, r7
 8020728:	f2c0 80cc 	blt.w	80208c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802072c:	f11c 0c01 	adds.w	ip, ip, #1
 8020730:	f100 80bf 	bmi.w	80208b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020734:	4561      	cmp	r1, ip
 8020736:	f2c0 80bc 	blt.w	80208b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802073a:	3301      	adds	r3, #1
 802073c:	f100 80b9 	bmi.w	80208b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020740:	429a      	cmp	r2, r3
 8020742:	f2c0 80b6 	blt.w	80208b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020746:	46a2      	mov	sl, r4
 8020748:	465f      	mov	r7, fp
 802074a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802074e:	f1ba 0f00 	cmp.w	sl, #0
 8020752:	f340 80d4 	ble.w	80208fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8020756:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802075a:	1430      	asrs	r0, r6, #16
 802075c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020760:	9308      	str	r3, [sp, #32]
 8020762:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020764:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020768:	142b      	asrs	r3, r5, #16
 802076a:	f100 8124 	bmi.w	80209b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802076e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020772:	4293      	cmp	r3, r2
 8020774:	f280 811f 	bge.w	80209b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020778:	2800      	cmp	r0, #0
 802077a:	f2c0 811c 	blt.w	80209b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802077e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8020782:	4290      	cmp	r0, r2
 8020784:	f280 8117 	bge.w	80209b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020788:	fb00 3309 	mla	r3, r0, r9, r3
 802078c:	0858      	lsrs	r0, r3, #1
 802078e:	07da      	lsls	r2, r3, #31
 8020790:	9a08      	ldr	r2, [sp, #32]
 8020792:	f818 c000 	ldrb.w	ip, [r8, r0]
 8020796:	bf54      	ite	pl
 8020798:	f00c 0c0f 	andpl.w	ip, ip, #15
 802079c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80207a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80207a4:	fa5f fc8c 	uxtb.w	ip, ip
 80207a8:	2a00      	cmp	r2, #0
 80207aa:	f000 80ed 	beq.w	8020988 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80207ae:	1c58      	adds	r0, r3, #1
 80207b0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80207b4:	07c0      	lsls	r0, r0, #31
 80207b6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80207ba:	bf54      	ite	pl
 80207bc:	f00e 0e0f 	andpl.w	lr, lr, #15
 80207c0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80207c4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80207c8:	fa5f fe8e 	uxtb.w	lr, lr
 80207cc:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80207d0:	b1c9      	cbz	r1, 8020806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80207d2:	444b      	add	r3, r9
 80207d4:	0858      	lsrs	r0, r3, #1
 80207d6:	07da      	lsls	r2, r3, #31
 80207d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80207dc:	bf54      	ite	pl
 80207de:	f000 000f 	andpl.w	r0, r0, #15
 80207e2:	1100      	asrmi	r0, r0, #4
 80207e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80207e8:	b2c0      	uxtb	r0, r0
 80207ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80207ec:	1c58      	adds	r0, r3, #1
 80207ee:	0843      	lsrs	r3, r0, #1
 80207f0:	07c2      	lsls	r2, r0, #31
 80207f2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80207f6:	bf54      	ite	pl
 80207f8:	f003 030f 	andpl.w	r3, r3, #15
 80207fc:	111b      	asrmi	r3, r3, #4
 80207fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020802:	b2db      	uxtb	r3, r3
 8020804:	930e      	str	r3, [sp, #56]	@ 0x38
 8020806:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802080a:	b289      	uxth	r1, r1
 802080c:	fb02 f301 	mul.w	r3, r2, r1
 8020810:	0112      	lsls	r2, r2, #4
 8020812:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020816:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802081a:	1ad2      	subs	r2, r2, r3
 802081c:	b289      	uxth	r1, r1
 802081e:	b292      	uxth	r2, r2
 8020820:	1a40      	subs	r0, r0, r1
 8020822:	fa1f fe80 	uxth.w	lr, r0
 8020826:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020828:	4342      	muls	r2, r0
 802082a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802082e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020830:	fb01 c102 	mla	r1, r1, r2, ip
 8020834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020836:	fb03 1302 	mla	r3, r3, r2, r1
 802083a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802083e:	b383      	cbz	r3, 80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020840:	4ac6      	ldr	r2, [pc, #792]	@ (8020b5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020842:	2bff      	cmp	r3, #255	@ 0xff
 8020844:	6812      	ldr	r2, [r2, #0]
 8020846:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802084a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802084e:	b2d2      	uxtb	r2, r2
 8020850:	f000 80ac 	beq.w	80209ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020854:	b299      	uxth	r1, r3
 8020856:	43db      	mvns	r3, r3
 8020858:	f897 c000 	ldrb.w	ip, [r7]
 802085c:	fb12 f201 	smulbb	r2, r2, r1
 8020860:	b2db      	uxtb	r3, r3
 8020862:	fb10 f001 	smulbb	r0, r0, r1
 8020866:	fb0c 2203 	mla	r2, ip, r3, r2
 802086a:	fb1e f101 	smulbb	r1, lr, r1
 802086e:	b292      	uxth	r2, r2
 8020870:	f102 0c01 	add.w	ip, r2, #1
 8020874:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020878:	1212      	asrs	r2, r2, #8
 802087a:	703a      	strb	r2, [r7, #0]
 802087c:	787a      	ldrb	r2, [r7, #1]
 802087e:	fb02 0003 	mla	r0, r2, r3, r0
 8020882:	b280      	uxth	r0, r0
 8020884:	1c42      	adds	r2, r0, #1
 8020886:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802088a:	78ba      	ldrb	r2, [r7, #2]
 802088c:	fb02 1303 	mla	r3, r2, r3, r1
 8020890:	1200      	asrs	r0, r0, #8
 8020892:	b29b      	uxth	r3, r3
 8020894:	7078      	strb	r0, [r7, #1]
 8020896:	f103 0e01 	add.w	lr, r3, #1
 802089a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802089e:	121b      	asrs	r3, r3, #8
 80208a0:	70bb      	strb	r3, [r7, #2]
 80208a2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80208a4:	3703      	adds	r7, #3
 80208a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80208aa:	441d      	add	r5, r3
 80208ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80208ae:	441e      	add	r6, r3
 80208b0:	e74d      	b.n	802074e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208b2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80208b4:	3c01      	subs	r4, #1
 80208b6:	f10b 0b03 	add.w	fp, fp, #3
 80208ba:	441d      	add	r5, r3
 80208bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80208be:	441e      	add	r6, r3
 80208c0:	e725      	b.n	802070e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80208c2:	d021      	beq.n	8020908 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80208c4:	1e63      	subs	r3, r4, #1
 80208c6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80208c8:	fb00 5003 	mla	r0, r0, r3, r5
 80208cc:	1400      	asrs	r0, r0, #16
 80208ce:	f53f af3a 	bmi.w	8020746 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208d2:	3901      	subs	r1, #1
 80208d4:	4288      	cmp	r0, r1
 80208d6:	f6bf af36 	bge.w	8020746 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208da:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80208dc:	fb01 6303 	mla	r3, r1, r3, r6
 80208e0:	141b      	asrs	r3, r3, #16
 80208e2:	f53f af30 	bmi.w	8020746 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208e6:	3a01      	subs	r2, #1
 80208e8:	4293      	cmp	r3, r2
 80208ea:	f6bf af2c 	bge.w	8020746 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208ee:	f10b 0c03 	add.w	ip, fp, #3
 80208f2:	46a6      	mov	lr, r4
 80208f4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80208f8:	f1be 0f00 	cmp.w	lr, #0
 80208fc:	dc79      	bgt.n	80209f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80208fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8020902:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020906:	44a3      	add	fp, r4
 8020908:	9b07      	ldr	r3, [sp, #28]
 802090a:	2b00      	cmp	r3, #0
 802090c:	f340 8123 	ble.w	8020b56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020914:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020916:	ee30 0a04 	vadd.f32	s0, s0, s8
 802091a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802091e:	eef0 6a62 	vmov.f32	s13, s5
 8020922:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020926:	ee31 1a05 	vadd.f32	s2, s2, s10
 802092a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802092e:	ee16 5a90 	vmov	r5, s13
 8020932:	eef0 6a43 	vmov.f32	s13, s6
 8020936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802093a:	ee16 6a90 	vmov	r6, s13
 802093e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020942:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020946:	ee77 2a62 	vsub.f32	s5, s14, s5
 802094a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802094e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020952:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020956:	ee12 2a90 	vmov	r2, s5
 802095a:	eef0 2a47 	vmov.f32	s5, s14
 802095e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020962:	ee13 2a10 	vmov	r2, s6
 8020966:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020968:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802096a:	eeb0 3a67 	vmov.f32	s6, s15
 802096e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020972:	9320      	str	r3, [sp, #128]	@ 0x80
 8020974:	9b07      	ldr	r3, [sp, #28]
 8020976:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020978:	3b01      	subs	r3, #1
 802097a:	9307      	str	r3, [sp, #28]
 802097c:	bf08      	it	eq
 802097e:	4614      	moveq	r4, r2
 8020980:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020982:	bf18      	it	ne
 8020984:	461c      	movne	r4, r3
 8020986:	e6b4      	b.n	80206f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020988:	2900      	cmp	r1, #0
 802098a:	f43f af3c 	beq.w	8020806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802098e:	eb09 0003 	add.w	r0, r9, r3
 8020992:	0843      	lsrs	r3, r0, #1
 8020994:	07c0      	lsls	r0, r0, #31
 8020996:	f818 3003 	ldrb.w	r3, [r8, r3]
 802099a:	bf54      	ite	pl
 802099c:	f003 030f 	andpl.w	r3, r3, #15
 80209a0:	111b      	asrmi	r3, r3, #4
 80209a2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80209a6:	b2db      	uxtb	r3, r3
 80209a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80209aa:	e72c      	b.n	8020806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80209ac:	703a      	strb	r2, [r7, #0]
 80209ae:	7078      	strb	r0, [r7, #1]
 80209b0:	f887 e002 	strb.w	lr, [r7, #2]
 80209b4:	e775      	b.n	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209b6:	1c5a      	adds	r2, r3, #1
 80209b8:	f53f af73 	bmi.w	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209bc:	4594      	cmp	ip, r2
 80209be:	f6ff af70 	blt.w	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209c2:	1c42      	adds	r2, r0, #1
 80209c4:	f53f af6d 	bmi.w	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209c8:	4596      	cmp	lr, r2
 80209ca:	f6ff af6a 	blt.w	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209ce:	9302      	str	r3, [sp, #8]
 80209d0:	fa0f f38e 	sxth.w	r3, lr
 80209d4:	9a08      	ldr	r2, [sp, #32]
 80209d6:	9301      	str	r3, [sp, #4]
 80209d8:	fa0f f38c 	sxth.w	r3, ip
 80209dc:	9105      	str	r1, [sp, #20]
 80209de:	4639      	mov	r1, r7
 80209e0:	9300      	str	r3, [sp, #0]
 80209e2:	464b      	mov	r3, r9
 80209e4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80209e8:	4642      	mov	r2, r8
 80209ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80209ec:	f7ff fd90 	bl	8020510 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80209f0:	e757      	b.n	80208a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80209f2:	142a      	asrs	r2, r5, #16
 80209f4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80209f8:	1433      	asrs	r3, r6, #16
 80209fa:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80209fe:	fb09 2303 	mla	r3, r9, r3, r2
 8020a02:	085a      	lsrs	r2, r3, #1
 8020a04:	07d9      	lsls	r1, r3, #31
 8020a06:	f818 2002 	ldrb.w	r2, [r8, r2]
 8020a0a:	bf54      	ite	pl
 8020a0c:	f002 020f 	andpl.w	r2, r2, #15
 8020a10:	1112      	asrmi	r2, r2, #4
 8020a12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020a16:	b2d2      	uxtb	r2, r2
 8020a18:	2800      	cmp	r0, #0
 8020a1a:	f000 8085 	beq.w	8020b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8020a1e:	f103 0a01 	add.w	sl, r3, #1
 8020a22:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8020a26:	f01a 0f01 	tst.w	sl, #1
 8020a2a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020a2e:	bf0c      	ite	eq
 8020a30:	f001 010f 	andeq.w	r1, r1, #15
 8020a34:	1109      	asrne	r1, r1, #4
 8020a36:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020a3a:	b2c9      	uxtb	r1, r1
 8020a3c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020a3e:	b1df      	cbz	r7, 8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020a40:	444b      	add	r3, r9
 8020a42:	0859      	lsrs	r1, r3, #1
 8020a44:	f013 0f01 	tst.w	r3, #1
 8020a48:	f103 0301 	add.w	r3, r3, #1
 8020a4c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020a50:	bf0c      	ite	eq
 8020a52:	f001 010f 	andeq.w	r1, r1, #15
 8020a56:	1109      	asrne	r1, r1, #4
 8020a58:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020a5c:	b2c9      	uxtb	r1, r1
 8020a5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a60:	0859      	lsrs	r1, r3, #1
 8020a62:	07db      	lsls	r3, r3, #31
 8020a64:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020a68:	bf54      	ite	pl
 8020a6a:	f001 010f 	andpl.w	r1, r1, #15
 8020a6e:	1109      	asrmi	r1, r1, #4
 8020a70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020a74:	b2c9      	uxtb	r1, r1
 8020a76:	9110      	str	r1, [sp, #64]	@ 0x40
 8020a78:	b280      	uxth	r0, r0
 8020a7a:	b2bf      	uxth	r7, r7
 8020a7c:	fb00 f307 	mul.w	r3, r0, r7
 8020a80:	0100      	lsls	r0, r0, #4
 8020a82:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8020a86:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8020a8a:	1ac0      	subs	r0, r0, r3
 8020a8c:	b2bf      	uxth	r7, r7
 8020a8e:	b280      	uxth	r0, r0
 8020a90:	1bc9      	subs	r1, r1, r7
 8020a92:	fa1f fa81 	uxth.w	sl, r1
 8020a96:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020a98:	4348      	muls	r0, r1
 8020a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a9c:	fb02 020a 	mla	r2, r2, sl, r0
 8020aa0:	fb07 2701 	mla	r7, r7, r1, r2
 8020aa4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020aa6:	fb03 7302 	mla	r3, r3, r2, r7
 8020aaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020aae:	b393      	cbz	r3, 8020b16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8020b5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020ab2:	2bff      	cmp	r3, #255	@ 0xff
 8020ab4:	6811      	ldr	r1, [r2, #0]
 8020ab6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8020aba:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8020abe:	b2c9      	uxtb	r1, r1
 8020ac0:	d042      	beq.n	8020b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8020ac2:	b298      	uxth	r0, r3
 8020ac4:	43db      	mvns	r3, r3
 8020ac6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8020aca:	fb11 f100 	smulbb	r1, r1, r0
 8020ace:	b2db      	uxtb	r3, r3
 8020ad0:	fb17 f700 	smulbb	r7, r7, r0
 8020ad4:	fb02 1103 	mla	r1, r2, r3, r1
 8020ad8:	fb1a f000 	smulbb	r0, sl, r0
 8020adc:	b289      	uxth	r1, r1
 8020ade:	1c4a      	adds	r2, r1, #1
 8020ae0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020ae4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8020ae8:	fb02 7703 	mla	r7, r2, r3, r7
 8020aec:	1209      	asrs	r1, r1, #8
 8020aee:	b2bf      	uxth	r7, r7
 8020af0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020af4:	1c7a      	adds	r2, r7, #1
 8020af6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020afa:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8020afe:	fb02 0303 	mla	r3, r2, r3, r0
 8020b02:	123f      	asrs	r7, r7, #8
 8020b04:	b29b      	uxth	r3, r3
 8020b06:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020b0a:	1c5a      	adds	r2, r3, #1
 8020b0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b10:	121b      	asrs	r3, r3, #8
 8020b12:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8020b16:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020b18:	f10c 0c03 	add.w	ip, ip, #3
 8020b1c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020b20:	441d      	add	r5, r3
 8020b22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020b24:	441e      	add	r6, r3
 8020b26:	e6e7      	b.n	80208f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020b28:	2f00      	cmp	r7, #0
 8020b2a:	d0a5      	beq.n	8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020b2c:	444b      	add	r3, r9
 8020b2e:	0859      	lsrs	r1, r3, #1
 8020b30:	07db      	lsls	r3, r3, #31
 8020b32:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020b36:	bf54      	ite	pl
 8020b38:	f001 010f 	andpl.w	r1, r1, #15
 8020b3c:	1109      	asrmi	r1, r1, #4
 8020b3e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020b42:	b2c9      	uxtb	r1, r1
 8020b44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b46:	e797      	b.n	8020a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020b48:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020b4c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8020b50:	f80c ac01 	strb.w	sl, [ip, #-1]
 8020b54:	e7df      	b.n	8020b16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020b56:	b013      	add	sp, #76	@ 0x4c
 8020b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b5c:	240284b4 	.word	0x240284b4

08020b60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8020b60:	b530      	push	{r4, r5, lr}
 8020b62:	b29d      	uxth	r5, r3
 8020b64:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8020b68:	780c      	ldrb	r4, [r1, #0]
 8020b6a:	b298      	uxth	r0, r3
 8020b6c:	7813      	ldrb	r3, [r2, #0]
 8020b6e:	fb14 f405 	smulbb	r4, r4, r5
 8020b72:	fb13 f300 	smulbb	r3, r3, r0
 8020b76:	441c      	add	r4, r3
 8020b78:	b2a4      	uxth	r4, r4
 8020b7a:	1c63      	adds	r3, r4, #1
 8020b7c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020b80:	7853      	ldrb	r3, [r2, #1]
 8020b82:	fb13 f300 	smulbb	r3, r3, r0
 8020b86:	1224      	asrs	r4, r4, #8
 8020b88:	7014      	strb	r4, [r2, #0]
 8020b8a:	784c      	ldrb	r4, [r1, #1]
 8020b8c:	fb14 f405 	smulbb	r4, r4, r5
 8020b90:	441c      	add	r4, r3
 8020b92:	b2a4      	uxth	r4, r4
 8020b94:	1c63      	adds	r3, r4, #1
 8020b96:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020b9a:	1224      	asrs	r4, r4, #8
 8020b9c:	7054      	strb	r4, [r2, #1]
 8020b9e:	788b      	ldrb	r3, [r1, #2]
 8020ba0:	7891      	ldrb	r1, [r2, #2]
 8020ba2:	fb13 f305 	smulbb	r3, r3, r5
 8020ba6:	fb11 f000 	smulbb	r0, r1, r0
 8020baa:	4403      	add	r3, r0
 8020bac:	b29b      	uxth	r3, r3
 8020bae:	1c59      	adds	r1, r3, #1
 8020bb0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020bb4:	121b      	asrs	r3, r3, #8
 8020bb6:	7093      	strb	r3, [r2, #2]
 8020bb8:	bd30      	pop	{r4, r5, pc}
	...

08020bbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc0:	461c      	mov	r4, r3
 8020bc2:	b08b      	sub	sp, #44	@ 0x2c
 8020bc4:	460e      	mov	r6, r1
 8020bc6:	4615      	mov	r5, r2
 8020bc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020bca:	4682      	mov	sl, r0
 8020bcc:	6861      	ldr	r1, [r4, #4]
 8020bce:	aa06      	add	r2, sp, #24
 8020bd0:	6820      	ldr	r0, [r4, #0]
 8020bd2:	2702      	movs	r7, #2
 8020bd4:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8020bd8:	3504      	adds	r5, #4
 8020bda:	c203      	stmia	r2!, {r0, r1}
 8020bdc:	6818      	ldr	r0, [r3, #0]
 8020bde:	aa08      	add	r2, sp, #32
 8020be0:	6859      	ldr	r1, [r3, #4]
 8020be2:	c203      	stmia	r2!, {r0, r1}
 8020be4:	a806      	add	r0, sp, #24
 8020be6:	f7f2 fcc1 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bea:	4621      	mov	r1, r4
 8020bec:	a808      	add	r0, sp, #32
 8020bee:	f7f2 fd01 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020bf2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020bf6:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8020bfa:	f002 0301 	and.w	r3, r2, #1
 8020bfe:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8020c02:	9302      	str	r3, [sp, #8]
 8020c04:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020c08:	f003 0101 	and.w	r1, r3, #1
 8020c0c:	9101      	str	r1, [sp, #4]
 8020c0e:	9801      	ldr	r0, [sp, #4]
 8020c10:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8020c14:	4403      	add	r3, r0
 8020c16:	fb01 2303 	mla	r3, r1, r3, r2
 8020c1a:	fb93 f3f7 	sdiv	r3, r3, r7
 8020c1e:	441e      	add	r6, r3
 8020c20:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8020c24:	441a      	add	r2, r3
 8020c26:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8020c2a:	4419      	add	r1, r3
 8020c2c:	4b70      	ldr	r3, [pc, #448]	@ (8020df0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020c2e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020c32:	6818      	ldr	r0, [r3, #0]
 8020c34:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8020c38:	6803      	ldr	r3, [r0, #0]
 8020c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020c3c:	4798      	blx	r3
 8020c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8020df4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8020c40:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020c44:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020c48:	8813      	ldrh	r3, [r2, #0]
 8020c4a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8020c4e:	fb03 1404 	mla	r4, r3, r4, r1
 8020c52:	4611      	mov	r1, r2
 8020c54:	fb0b f303 	mul.w	r3, fp, r3
 8020c58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c60:	4404      	add	r4, r0
 8020c62:	4423      	add	r3, r4
 8020c64:	d073      	beq.n	8020d4e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8020c66:	9705      	str	r7, [sp, #20]
 8020c68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020c6c:	9b03      	ldr	r3, [sp, #12]
 8020c6e:	429c      	cmp	r4, r3
 8020c70:	f080 80b5 	bcs.w	8020dde <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8020c74:	9b02      	ldr	r3, [sp, #8]
 8020c76:	b35b      	cbz	r3, 8020cd0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8020c78:	7831      	ldrb	r1, [r6, #0]
 8020c7a:	4622      	mov	r2, r4
 8020c7c:	1c77      	adds	r7, r6, #1
 8020c7e:	3403      	adds	r4, #3
 8020c80:	f001 010f 	and.w	r1, r1, #15
 8020c84:	f108 3bff 	add.w	fp, r8, #4294967295
 8020c88:	464b      	mov	r3, r9
 8020c8a:	4650      	mov	r0, sl
 8020c8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020c90:	4429      	add	r1, r5
 8020c92:	f7ff ff65 	bl	8020b60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020c96:	f1bb 0f01 	cmp.w	fp, #1
 8020c9a:	dd1c      	ble.n	8020cd6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020c9c:	7839      	ldrb	r1, [r7, #0]
 8020c9e:	4622      	mov	r2, r4
 8020ca0:	464b      	mov	r3, r9
 8020ca2:	4650      	mov	r0, sl
 8020ca4:	0909      	lsrs	r1, r1, #4
 8020ca6:	f1ab 0b02 	sub.w	fp, fp, #2
 8020caa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020cae:	4429      	add	r1, r5
 8020cb0:	f7ff ff56 	bl	8020b60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020cb4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020cb8:	1ce2      	adds	r2, r4, #3
 8020cba:	464b      	mov	r3, r9
 8020cbc:	f001 010f 	and.w	r1, r1, #15
 8020cc0:	4650      	mov	r0, sl
 8020cc2:	3406      	adds	r4, #6
 8020cc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020cc8:	4429      	add	r1, r5
 8020cca:	f7ff ff49 	bl	8020b60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020cce:	e7e2      	b.n	8020c96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020cd0:	4637      	mov	r7, r6
 8020cd2:	46c3      	mov	fp, r8
 8020cd4:	e7df      	b.n	8020c96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020cd6:	d10a      	bne.n	8020cee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8020cd8:	7839      	ldrb	r1, [r7, #0]
 8020cda:	4622      	mov	r2, r4
 8020cdc:	3403      	adds	r4, #3
 8020cde:	464b      	mov	r3, r9
 8020ce0:	0909      	lsrs	r1, r1, #4
 8020ce2:	4650      	mov	r0, sl
 8020ce4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020ce8:	4429      	add	r1, r5
 8020cea:	f7ff ff39 	bl	8020b60 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020cee:	9b04      	ldr	r3, [sp, #16]
 8020cf0:	9a01      	ldr	r2, [sp, #4]
 8020cf2:	881b      	ldrh	r3, [r3, #0]
 8020cf4:	eba3 0308 	sub.w	r3, r3, r8
 8020cf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cfc:	441c      	add	r4, r3
 8020cfe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020d02:	4413      	add	r3, r2
 8020d04:	9a05      	ldr	r2, [sp, #20]
 8020d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8020d0a:	441e      	add	r6, r3
 8020d0c:	e7ae      	b.n	8020c6c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8020d0e:	4632      	mov	r2, r6
 8020d10:	46c4      	mov	ip, r8
 8020d12:	e037      	b.n	8020d84 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020d14:	d10e      	bne.n	8020d34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8020d16:	7812      	ldrb	r2, [r2, #0]
 8020d18:	3003      	adds	r0, #3
 8020d1a:	0912      	lsrs	r2, r2, #4
 8020d1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d20:	18ac      	adds	r4, r5, r2
 8020d22:	5caa      	ldrb	r2, [r5, r2]
 8020d24:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020d28:	7862      	ldrb	r2, [r4, #1]
 8020d2a:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020d2e:	78a2      	ldrb	r2, [r4, #2]
 8020d30:	f800 2c01 	strb.w	r2, [r0, #-1]
 8020d34:	880c      	ldrh	r4, [r1, #0]
 8020d36:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020d3a:	eba4 0408 	sub.w	r4, r4, r8
 8020d3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d42:	4404      	add	r4, r0
 8020d44:	9801      	ldr	r0, [sp, #4]
 8020d46:	4402      	add	r2, r0
 8020d48:	fb92 f2f7 	sdiv	r2, r2, r7
 8020d4c:	4416      	add	r6, r2
 8020d4e:	429c      	cmp	r4, r3
 8020d50:	d245      	bcs.n	8020dde <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8020d52:	9a02      	ldr	r2, [sp, #8]
 8020d54:	2a00      	cmp	r2, #0
 8020d56:	d0da      	beq.n	8020d0e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8020d58:	7830      	ldrb	r0, [r6, #0]
 8020d5a:	1c72      	adds	r2, r6, #1
 8020d5c:	3403      	adds	r4, #3
 8020d5e:	f000 000f 	and.w	r0, r0, #15
 8020d62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d66:	eb05 0c00 	add.w	ip, r5, r0
 8020d6a:	5c28      	ldrb	r0, [r5, r0]
 8020d6c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020d70:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020d74:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020d78:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8020d7c:	f108 3cff 	add.w	ip, r8, #4294967295
 8020d80:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020d84:	f1bc 0f01 	cmp.w	ip, #1
 8020d88:	4620      	mov	r0, r4
 8020d8a:	f104 0406 	add.w	r4, r4, #6
 8020d8e:	ddc1      	ble.n	8020d14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8020d90:	7810      	ldrb	r0, [r2, #0]
 8020d92:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d96:	0900      	lsrs	r0, r0, #4
 8020d98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d9c:	eb05 0e00 	add.w	lr, r5, r0
 8020da0:	5c28      	ldrb	r0, [r5, r0]
 8020da2:	f804 0c06 	strb.w	r0, [r4, #-6]
 8020da6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020daa:	f804 0c05 	strb.w	r0, [r4, #-5]
 8020dae:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020db2:	f804 0c04 	strb.w	r0, [r4, #-4]
 8020db6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8020dba:	f000 000f 	and.w	r0, r0, #15
 8020dbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020dc2:	eb05 0e00 	add.w	lr, r5, r0
 8020dc6:	5c28      	ldrb	r0, [r5, r0]
 8020dc8:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020dcc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020dd0:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020dd4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020dd8:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020ddc:	e7d2      	b.n	8020d84 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020dde:	4b04      	ldr	r3, [pc, #16]	@ (8020df0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020de0:	6818      	ldr	r0, [r3, #0]
 8020de2:	6803      	ldr	r3, [r0, #0]
 8020de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020de6:	4798      	blx	r3
 8020de8:	b00b      	add	sp, #44	@ 0x2c
 8020dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dee:	bf00      	nop
 8020df0:	240284a4 	.word	0x240284a4
 8020df4:	2402849e 	.word	0x2402849e

08020df8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8020df8:	b530      	push	{r4, r5, lr}
 8020dfa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020dfe:	780d      	ldrb	r5, [r1, #0]
 8020e00:	28ff      	cmp	r0, #255	@ 0xff
 8020e02:	d107      	bne.n	8020e14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020e04:	2bff      	cmp	r3, #255	@ 0xff
 8020e06:	d105      	bne.n	8020e14 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020e08:	7015      	strb	r5, [r2, #0]
 8020e0a:	784b      	ldrb	r3, [r1, #1]
 8020e0c:	7053      	strb	r3, [r2, #1]
 8020e0e:	788b      	ldrb	r3, [r1, #2]
 8020e10:	7093      	strb	r3, [r2, #2]
 8020e12:	bd30      	pop	{r4, r5, pc}
 8020e14:	fb10 f003 	smulbb	r0, r0, r3
 8020e18:	b283      	uxth	r3, r0
 8020e1a:	1c58      	adds	r0, r3, #1
 8020e1c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020e20:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020e24:	b284      	uxth	r4, r0
 8020e26:	43c0      	mvns	r0, r0
 8020e28:	fb15 f504 	smulbb	r5, r5, r4
 8020e2c:	b2c3      	uxtb	r3, r0
 8020e2e:	7810      	ldrb	r0, [r2, #0]
 8020e30:	fb00 5003 	mla	r0, r0, r3, r5
 8020e34:	b280      	uxth	r0, r0
 8020e36:	1c45      	adds	r5, r0, #1
 8020e38:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020e3c:	7855      	ldrb	r5, [r2, #1]
 8020e3e:	fb15 f503 	smulbb	r5, r5, r3
 8020e42:	1200      	asrs	r0, r0, #8
 8020e44:	7010      	strb	r0, [r2, #0]
 8020e46:	7848      	ldrb	r0, [r1, #1]
 8020e48:	fb00 5004 	mla	r0, r0, r4, r5
 8020e4c:	b280      	uxth	r0, r0
 8020e4e:	1c45      	adds	r5, r0, #1
 8020e50:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020e54:	1200      	asrs	r0, r0, #8
 8020e56:	7050      	strb	r0, [r2, #1]
 8020e58:	7888      	ldrb	r0, [r1, #2]
 8020e5a:	7891      	ldrb	r1, [r2, #2]
 8020e5c:	fb11 f303 	smulbb	r3, r1, r3
 8020e60:	fb00 3304 	mla	r3, r0, r4, r3
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	1c59      	adds	r1, r3, #1
 8020e68:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020e6c:	121b      	asrs	r3, r3, #8
 8020e6e:	e7cf      	b.n	8020e10 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08020e70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e74:	461d      	mov	r5, r3
 8020e76:	b08f      	sub	sp, #60	@ 0x3c
 8020e78:	460c      	mov	r4, r1
 8020e7a:	4616      	mov	r6, r2
 8020e7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020e7e:	4680      	mov	r8, r0
 8020e80:	6869      	ldr	r1, [r5, #4]
 8020e82:	aa0a      	add	r2, sp, #40	@ 0x28
 8020e84:	6828      	ldr	r0, [r5, #0]
 8020e86:	3604      	adds	r6, #4
 8020e88:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8020e8c:	4f57      	ldr	r7, [pc, #348]	@ (8020fec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8020e8e:	c203      	stmia	r2!, {r0, r1}
 8020e90:	6818      	ldr	r0, [r3, #0]
 8020e92:	aa0c      	add	r2, sp, #48	@ 0x30
 8020e94:	6859      	ldr	r1, [r3, #4]
 8020e96:	c203      	stmia	r2!, {r0, r1}
 8020e98:	a80a      	add	r0, sp, #40	@ 0x28
 8020e9a:	f7f2 fb67 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e9e:	4629      	mov	r1, r5
 8020ea0:	a80c      	add	r0, sp, #48	@ 0x30
 8020ea2:	2502      	movs	r5, #2
 8020ea4:	f7f2 fba6 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ea8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020eac:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8020eb0:	f002 0301 	and.w	r3, r2, #1
 8020eb4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8020eb8:	9304      	str	r3, [sp, #16]
 8020eba:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020ebe:	f003 0101 	and.w	r1, r3, #1
 8020ec2:	9103      	str	r1, [sp, #12]
 8020ec4:	9803      	ldr	r0, [sp, #12]
 8020ec6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020eca:	4403      	add	r3, r0
 8020ecc:	6838      	ldr	r0, [r7, #0]
 8020ece:	fb01 2303 	mla	r3, r1, r3, r2
 8020ed2:	fb93 f3f5 	sdiv	r3, r3, r5
 8020ed6:	18e5      	adds	r5, r4, r3
 8020ed8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020edc:	441a      	add	r2, r3
 8020ede:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020ee2:	4419      	add	r1, r3
 8020ee4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020ee8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8020eec:	6803      	ldr	r3, [r0, #0]
 8020eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ef0:	4798      	blx	r3
 8020ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8020ff0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8020ef4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8020ef8:	8813      	ldrh	r3, [r2, #0]
 8020efa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020efe:	9207      	str	r2, [sp, #28]
 8020f00:	fb03 1404 	mla	r4, r3, r4, r1
 8020f04:	fb0a f303 	mul.w	r3, sl, r3
 8020f08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f10:	4404      	add	r4, r0
 8020f12:	18e3      	adds	r3, r4, r3
 8020f14:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8020f18:	9b05      	ldr	r3, [sp, #20]
 8020f1a:	429c      	cmp	r4, r3
 8020f1c:	d25d      	bcs.n	8020fda <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8020f1e:	9b04      	ldr	r3, [sp, #16]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d037      	beq.n	8020f94 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020f24:	782b      	ldrb	r3, [r5, #0]
 8020f26:	1c6f      	adds	r7, r5, #1
 8020f28:	f003 030f 	and.w	r3, r3, #15
 8020f2c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f32:	0e1b      	lsrs	r3, r3, #24
 8020f34:	d006      	beq.n	8020f44 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8020f36:	9300      	str	r3, [sp, #0]
 8020f38:	4622      	mov	r2, r4
 8020f3a:	464b      	mov	r3, r9
 8020f3c:	a909      	add	r1, sp, #36	@ 0x24
 8020f3e:	4640      	mov	r0, r8
 8020f40:	f7ff ff5a 	bl	8020df8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020f44:	3403      	adds	r4, #3
 8020f46:	f10b 3aff 	add.w	sl, fp, #4294967295
 8020f4a:	f1ba 0f01 	cmp.w	sl, #1
 8020f4e:	dd24      	ble.n	8020f9a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020f50:	783b      	ldrb	r3, [r7, #0]
 8020f52:	091b      	lsrs	r3, r3, #4
 8020f54:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020f58:	9308      	str	r3, [sp, #32]
 8020f5a:	0e1b      	lsrs	r3, r3, #24
 8020f5c:	d006      	beq.n	8020f6c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8020f5e:	9300      	str	r3, [sp, #0]
 8020f60:	4622      	mov	r2, r4
 8020f62:	464b      	mov	r3, r9
 8020f64:	a908      	add	r1, sp, #32
 8020f66:	4640      	mov	r0, r8
 8020f68:	f7ff ff46 	bl	8020df8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020f6c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020f70:	f003 030f 	and.w	r3, r3, #15
 8020f74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f7a:	0e1b      	lsrs	r3, r3, #24
 8020f7c:	d006      	beq.n	8020f8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020f7e:	9300      	str	r3, [sp, #0]
 8020f80:	1ce2      	adds	r2, r4, #3
 8020f82:	464b      	mov	r3, r9
 8020f84:	a909      	add	r1, sp, #36	@ 0x24
 8020f86:	4640      	mov	r0, r8
 8020f88:	f7ff ff36 	bl	8020df8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020f8c:	3406      	adds	r4, #6
 8020f8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8020f92:	e7da      	b.n	8020f4a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020f94:	462f      	mov	r7, r5
 8020f96:	46da      	mov	sl, fp
 8020f98:	e7d7      	b.n	8020f4a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020f9a:	d10e      	bne.n	8020fba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020f9c:	783b      	ldrb	r3, [r7, #0]
 8020f9e:	091b      	lsrs	r3, r3, #4
 8020fa0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fa6:	0e1b      	lsrs	r3, r3, #24
 8020fa8:	d006      	beq.n	8020fb8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8020faa:	9300      	str	r3, [sp, #0]
 8020fac:	4622      	mov	r2, r4
 8020fae:	464b      	mov	r3, r9
 8020fb0:	a909      	add	r1, sp, #36	@ 0x24
 8020fb2:	4640      	mov	r0, r8
 8020fb4:	f7ff ff20 	bl	8020df8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020fb8:	3403      	adds	r4, #3
 8020fba:	9b07      	ldr	r3, [sp, #28]
 8020fbc:	9a03      	ldr	r2, [sp, #12]
 8020fbe:	881b      	ldrh	r3, [r3, #0]
 8020fc0:	eba3 030b 	sub.w	r3, r3, fp
 8020fc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fc8:	441c      	add	r4, r3
 8020fca:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020fce:	4413      	add	r3, r2
 8020fd0:	2202      	movs	r2, #2
 8020fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8020fd6:	441d      	add	r5, r3
 8020fd8:	e79e      	b.n	8020f18 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8020fda:	9b06      	ldr	r3, [sp, #24]
 8020fdc:	6818      	ldr	r0, [r3, #0]
 8020fde:	6803      	ldr	r3, [r0, #0]
 8020fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020fe2:	4798      	blx	r3
 8020fe4:	b00f      	add	sp, #60	@ 0x3c
 8020fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fea:	bf00      	nop
 8020fec:	240284a4 	.word	0x240284a4
 8020ff0:	2402849e 	.word	0x2402849e

08020ff4 <CRC_Lock>:
 8020ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80210ac <CRC_Lock+0xb8>)
 8020ff6:	b530      	push	{r4, r5, lr}
 8020ff8:	6813      	ldr	r3, [r2, #0]
 8020ffa:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8020ffe:	f023 0301 	bic.w	r3, r3, #1
 8021002:	6013      	str	r3, [r2, #0]
 8021004:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8021008:	4b29      	ldr	r3, [pc, #164]	@ (80210b0 <CRC_Lock+0xbc>)
 802100a:	681c      	ldr	r4, [r3, #0]
 802100c:	4014      	ands	r4, r2
 802100e:	42ac      	cmp	r4, r5
 8021010:	d005      	beq.n	802101e <CRC_Lock+0x2a>
 8021012:	681c      	ldr	r4, [r3, #0]
 8021014:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8021018:	4014      	ands	r4, r2
 802101a:	42ac      	cmp	r4, r5
 802101c:	d125      	bne.n	802106a <CRC_Lock+0x76>
 802101e:	4b25      	ldr	r3, [pc, #148]	@ (80210b4 <CRC_Lock+0xc0>)
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	2b00      	cmp	r3, #0
 8021024:	d139      	bne.n	802109a <CRC_Lock+0xa6>
 8021026:	4b24      	ldr	r3, [pc, #144]	@ (80210b8 <CRC_Lock+0xc4>)
 8021028:	681a      	ldr	r2, [r3, #0]
 802102a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802102e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021032:	d00d      	beq.n	8021050 <CRC_Lock+0x5c>
 8021034:	681a      	ldr	r2, [r3, #0]
 8021036:	f240 4483 	movw	r4, #1155	@ 0x483
 802103a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802103e:	42a2      	cmp	r2, r4
 8021040:	d006      	beq.n	8021050 <CRC_Lock+0x5c>
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	f240 4285 	movw	r2, #1157	@ 0x485
 8021048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802104c:	4293      	cmp	r3, r2
 802104e:	d124      	bne.n	802109a <CRC_Lock+0xa6>
 8021050:	4b1a      	ldr	r3, [pc, #104]	@ (80210bc <CRC_Lock+0xc8>)
 8021052:	2201      	movs	r2, #1
 8021054:	601a      	str	r2, [r3, #0]
 8021056:	681a      	ldr	r2, [r3, #0]
 8021058:	2a00      	cmp	r2, #0
 802105a:	d1fc      	bne.n	8021056 <CRC_Lock+0x62>
 802105c:	4b18      	ldr	r3, [pc, #96]	@ (80210c0 <CRC_Lock+0xcc>)
 802105e:	6018      	str	r0, [r3, #0]
 8021060:	6818      	ldr	r0, [r3, #0]
 8021062:	1a43      	subs	r3, r0, r1
 8021064:	4258      	negs	r0, r3
 8021066:	4158      	adcs	r0, r3
 8021068:	e00e      	b.n	8021088 <CRC_Lock+0x94>
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	4013      	ands	r3, r2
 802106e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8021072:	4293      	cmp	r3, r2
 8021074:	d111      	bne.n	802109a <CRC_Lock+0xa6>
 8021076:	4b13      	ldr	r3, [pc, #76]	@ (80210c4 <CRC_Lock+0xd0>)
 8021078:	f240 4286 	movw	r2, #1158	@ 0x486
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021082:	4293      	cmp	r3, r2
 8021084:	d001      	beq.n	802108a <CRC_Lock+0x96>
 8021086:	2000      	movs	r0, #0
 8021088:	bd30      	pop	{r4, r5, pc}
 802108a:	4b0f      	ldr	r3, [pc, #60]	@ (80210c8 <CRC_Lock+0xd4>)
 802108c:	2201      	movs	r2, #1
 802108e:	601a      	str	r2, [r3, #0]
 8021090:	681a      	ldr	r2, [r3, #0]
 8021092:	2a00      	cmp	r2, #0
 8021094:	d1fc      	bne.n	8021090 <CRC_Lock+0x9c>
 8021096:	4b0d      	ldr	r3, [pc, #52]	@ (80210cc <CRC_Lock+0xd8>)
 8021098:	e7e1      	b.n	802105e <CRC_Lock+0x6a>
 802109a:	4b0d      	ldr	r3, [pc, #52]	@ (80210d0 <CRC_Lock+0xdc>)
 802109c:	2201      	movs	r2, #1
 802109e:	601a      	str	r2, [r3, #0]
 80210a0:	681a      	ldr	r2, [r3, #0]
 80210a2:	2a00      	cmp	r2, #0
 80210a4:	d1fc      	bne.n	80210a0 <CRC_Lock+0xac>
 80210a6:	4b0b      	ldr	r3, [pc, #44]	@ (80210d4 <CRC_Lock+0xe0>)
 80210a8:	e7d9      	b.n	802105e <CRC_Lock+0x6a>
 80210aa:	bf00      	nop
 80210ac:	e0002000 	.word	0xe0002000
 80210b0:	e000ed00 	.word	0xe000ed00
 80210b4:	e0042000 	.word	0xe0042000
 80210b8:	5c001000 	.word	0x5c001000
 80210bc:	58024c08 	.word	0x58024c08
 80210c0:	58024c00 	.word	0x58024c00
 80210c4:	46008ff0 	.word	0x46008ff0
 80210c8:	46024c08 	.word	0x46024c08
 80210cc:	46024c00 	.word	0x46024c00
 80210d0:	40023008 	.word	0x40023008
 80210d4:	40023000 	.word	0x40023000

080210d8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80210d8:	6101      	str	r1, [r0, #16]
 80210da:	4770      	bx	lr

080210dc <_ZN8touchgfx8Gestures4tickEv>:
 80210dc:	7b83      	ldrb	r3, [r0, #14]
 80210de:	b14b      	cbz	r3, 80210f4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80210e0:	8903      	ldrh	r3, [r0, #8]
 80210e2:	3301      	adds	r3, #1
 80210e4:	b29b      	uxth	r3, r3
 80210e6:	2b07      	cmp	r3, #7
 80210e8:	8103      	strh	r3, [r0, #8]
 80210ea:	bf81      	itttt	hi
 80210ec:	2300      	movhi	r3, #0
 80210ee:	8143      	strhhi	r3, [r0, #10]
 80210f0:	8183      	strhhi	r3, [r0, #12]
 80210f2:	7383      	strbhi	r3, [r0, #14]
 80210f4:	4770      	bx	lr
	...

080210f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80210f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80210fc:	4698      	mov	r8, r3
 80210fe:	8883      	ldrh	r3, [r0, #4]
 8021100:	4604      	mov	r4, r0
 8021102:	4617      	mov	r7, r2
 8021104:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021108:	eba8 0303 	sub.w	r3, r8, r3
 802110c:	4a19      	ldr	r2, [pc, #100]	@ (8021174 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802110e:	460e      	mov	r6, r1
 8021110:	b21b      	sxth	r3, r3
 8021112:	88c1      	ldrh	r1, [r0, #6]
 8021114:	9200      	str	r2, [sp, #0]
 8021116:	2000      	movs	r0, #0
 8021118:	2b00      	cmp	r3, #0
 802111a:	8aa2      	ldrh	r2, [r4, #20]
 802111c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8021120:	bfb8      	it	lt
 8021122:	425b      	neglt	r3, r3
 8021124:	f88d 0004 	strb.w	r0, [sp, #4]
 8021128:	f8ad 1008 	strh.w	r1, [sp, #8]
 802112c:	b21b      	sxth	r3, r3
 802112e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021132:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021136:	4293      	cmp	r3, r2
 8021138:	dc07      	bgt.n	802114a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802113a:	1a69      	subs	r1, r5, r1
 802113c:	b209      	sxth	r1, r1
 802113e:	2900      	cmp	r1, #0
 8021140:	bfb8      	it	lt
 8021142:	4249      	neglt	r1, r1
 8021144:	b209      	sxth	r1, r1
 8021146:	428a      	cmp	r2, r1
 8021148:	da10      	bge.n	802116c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802114a:	6920      	ldr	r0, [r4, #16]
 802114c:	4669      	mov	r1, sp
 802114e:	eba8 0606 	sub.w	r6, r8, r6
 8021152:	1bef      	subs	r7, r5, r7
 8021154:	6803      	ldr	r3, [r0, #0]
 8021156:	685b      	ldr	r3, [r3, #4]
 8021158:	4798      	blx	r3
 802115a:	2300      	movs	r3, #0
 802115c:	2001      	movs	r0, #1
 802115e:	8166      	strh	r6, [r4, #10]
 8021160:	8123      	strh	r3, [r4, #8]
 8021162:	81a7      	strh	r7, [r4, #12]
 8021164:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021168:	80e5      	strh	r5, [r4, #6]
 802116a:	73a0      	strb	r0, [r4, #14]
 802116c:	b004      	add	sp, #16
 802116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021172:	bf00      	nop
 8021174:	08025f34 	.word	0x08025f34

08021178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802117a:	461e      	mov	r6, r3
 802117c:	1e4b      	subs	r3, r1, #1
 802117e:	b085      	sub	sp, #20
 8021180:	4604      	mov	r4, r0
 8021182:	2b01      	cmp	r3, #1
 8021184:	460d      	mov	r5, r1
 8021186:	4617      	mov	r7, r2
 8021188:	d84b      	bhi.n	8021222 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802118a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802118e:	1cd3      	adds	r3, r2, #3
 8021190:	b29b      	uxth	r3, r3
 8021192:	2b06      	cmp	r3, #6
 8021194:	d916      	bls.n	80211c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021196:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021238 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802119a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802119e:	f8cd c004 	str.w	ip, [sp, #4]
 80211a2:	f04f 0c00 	mov.w	ip, #0
 80211a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80211aa:	6900      	ldr	r0, [r0, #16]
 80211ac:	f8ad 100c 	strh.w	r1, [sp, #12]
 80211b0:	a901      	add	r1, sp, #4
 80211b2:	f88d c008 	strb.w	ip, [sp, #8]
 80211b6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80211ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80211be:	6803      	ldr	r3, [r0, #0]
 80211c0:	689b      	ldr	r3, [r3, #8]
 80211c2:	4798      	blx	r3
 80211c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80211c8:	1cd3      	adds	r3, r2, #3
 80211ca:	b29b      	uxth	r3, r3
 80211cc:	2b06      	cmp	r3, #6
 80211ce:	d916      	bls.n	80211fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80211d0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021238 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80211d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80211d8:	f8cd c004 	str.w	ip, [sp, #4]
 80211dc:	f04f 0c01 	mov.w	ip, #1
 80211e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80211e4:	6920      	ldr	r0, [r4, #16]
 80211e6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80211ea:	a901      	add	r1, sp, #4
 80211ec:	f88d c008 	strb.w	ip, [sp, #8]
 80211f0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80211f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80211f8:	6803      	ldr	r3, [r0, #0]
 80211fa:	689b      	ldr	r3, [r3, #8]
 80211fc:	4798      	blx	r3
 80211fe:	4b0d      	ldr	r3, [pc, #52]	@ (8021234 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021200:	a901      	add	r1, sp, #4
 8021202:	6920      	ldr	r0, [r4, #16]
 8021204:	9301      	str	r3, [sp, #4]
 8021206:	2300      	movs	r3, #0
 8021208:	f88d 5008 	strb.w	r5, [sp, #8]
 802120c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021210:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021214:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021218:	6803      	ldr	r3, [r0, #0]
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	4798      	blx	r3
 802121e:	b005      	add	sp, #20
 8021220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021222:	2900      	cmp	r1, #0
 8021224:	d1eb      	bne.n	80211fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021226:	80a2      	strh	r2, [r4, #4]
 8021228:	80c6      	strh	r6, [r0, #6]
 802122a:	60a1      	str	r1, [r4, #8]
 802122c:	81a1      	strh	r1, [r4, #12]
 802122e:	73a1      	strb	r1, [r4, #14]
 8021230:	e7e5      	b.n	80211fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021232:	bf00      	nop
 8021234:	08025f20 	.word	0x08025f20
 8021238:	08026360 	.word	0x08026360

0802123c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802123c:	10c9      	asrs	r1, r1, #3
 802123e:	2900      	cmp	r1, #0
 8021240:	bfb8      	it	lt
 8021242:	4249      	neglt	r1, r1
 8021244:	2801      	cmp	r0, #1
 8021246:	d108      	bne.n	802125a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021248:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802124c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021250:	4601      	mov	r1, r0
 8021252:	dd02      	ble.n	802125a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021254:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8021258:	4770      	bx	lr
 802125a:	29ff      	cmp	r1, #255	@ 0xff
 802125c:	bfa8      	it	ge
 802125e:	21ff      	movge	r1, #255	@ 0xff
 8021260:	4608      	mov	r0, r1
 8021262:	4770      	bx	lr

08021264 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021264:	b410      	push	{r4}
 8021266:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802126a:	429c      	cmp	r4, r3
 802126c:	d803      	bhi.n	8021276 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802126e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021272:	f7f0 bc85 	b.w	8011b80 <_ZN8touchgfx7Outline6lineToEii>
 8021276:	f85d 4b04 	ldr.w	r4, [sp], #4
 802127a:	4770      	bx	lr

0802127c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021280:	b08b      	sub	sp, #44	@ 0x2c
 8021282:	4606      	mov	r6, r0
 8021284:	468a      	mov	sl, r1
 8021286:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802128a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802128e:	9308      	str	r3, [sp, #32]
 8021290:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8021294:	9309      	str	r3, [sp, #36]	@ 0x24
 8021296:	f7f0 fdde 	bl	8011e56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802129a:	68b5      	ldr	r5, [r6, #8]
 802129c:	4604      	mov	r4, r0
 802129e:	2d00      	cmp	r5, #0
 80212a0:	d044      	beq.n	802132c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80212a2:	6873      	ldr	r3, [r6, #4]
 80212a4:	42ab      	cmp	r3, r5
 80212a6:	d33d      	bcc.n	8021324 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80212a8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80212ac:	f04f 0800 	mov.w	r8, #0
 80212b0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80212b4:	eb02 0b03 	add.w	fp, r2, r3
 80212b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80212bc:	fb02 1203 	mla	r2, r2, r3, r1
 80212c0:	9205      	str	r2, [sp, #20]
 80212c2:	1e6a      	subs	r2, r5, #1
 80212c4:	9204      	str	r2, [sp, #16]
 80212c6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80212ca:	f9b4 7000 	ldrsh.w	r7, [r4]
 80212ce:	454b      	cmp	r3, r9
 80212d0:	463a      	mov	r2, r7
 80212d2:	d008      	beq.n	80212e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80212d4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80212d8:	eb03 0b09 	add.w	fp, r3, r9
 80212dc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80212e0:	fb03 1309 	mla	r3, r3, r9, r1
 80212e4:	9305      	str	r3, [sp, #20]
 80212e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80212ea:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80212ee:	4498      	add	r8, r3
 80212f0:	9b04      	ldr	r3, [sp, #16]
 80212f2:	3b01      	subs	r3, #1
 80212f4:	9304      	str	r3, [sp, #16]
 80212f6:	9b04      	ldr	r3, [sp, #16]
 80212f8:	3301      	adds	r3, #1
 80212fa:	d015      	beq.n	8021328 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80212fc:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021300:	42bb      	cmp	r3, r7
 8021302:	d117      	bne.n	8021334 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021304:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021308:	9b04      	ldr	r3, [sp, #16]
 802130a:	4548      	cmp	r0, r9
 802130c:	f103 33ff 	add.w	r3, r3, #4294967295
 8021310:	d17d      	bne.n	802140e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8021312:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021316:	4401      	add	r1, r0
 8021318:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802131c:	4480      	add	r8, r0
 802131e:	e7e9      	b.n	80212f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8021320:	461f      	mov	r7, r3
 8021322:	e042      	b.n	80213aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021324:	2000      	movs	r0, #0
 8021326:	e002      	b.n	802132e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021328:	2900      	cmp	r1, #0
 802132a:	d16d      	bne.n	8021408 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802132c:	2001      	movs	r0, #1
 802132e:	b00b      	add	sp, #44	@ 0x2c
 8021330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021334:	b379      	cbz	r1, 8021396 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021336:	2f00      	cmp	r7, #0
 8021338:	db29      	blt.n	802138e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802133a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802133e:	42bb      	cmp	r3, r7
 8021340:	dd25      	ble.n	802138e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021342:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021346:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802134a:	f7ff ff77 	bl	802123c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802134e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021350:	fb10 f003 	smulbb	r0, r0, r3
 8021354:	b280      	uxth	r0, r0
 8021356:	1c41      	adds	r1, r0, #1
 8021358:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802135c:	1209      	asrs	r1, r1, #8
 802135e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021362:	d014      	beq.n	802138e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021364:	b2c9      	uxtb	r1, r1
 8021366:	9808      	ldr	r0, [sp, #32]
 8021368:	b2ba      	uxth	r2, r7
 802136a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802136c:	9102      	str	r1, [sp, #8]
 802136e:	2101      	movs	r1, #1
 8021370:	4413      	add	r3, r2
 8021372:	4402      	add	r2, r0
 8021374:	9101      	str	r1, [sp, #4]
 8021376:	fa0f f18b 	sxth.w	r1, fp
 802137a:	f8da 0000 	ldr.w	r0, [sl]
 802137e:	b21b      	sxth	r3, r3
 8021380:	9100      	str	r1, [sp, #0]
 8021382:	b212      	sxth	r2, r2
 8021384:	6941      	ldr	r1, [r0, #20]
 8021386:	4650      	mov	r0, sl
 8021388:	460d      	mov	r5, r1
 802138a:	9905      	ldr	r1, [sp, #20]
 802138c:	47a8      	blx	r5
 802138e:	9b04      	ldr	r3, [sp, #16]
 8021390:	1c7a      	adds	r2, r7, #1
 8021392:	3301      	adds	r3, #1
 8021394:	d0ca      	beq.n	802132c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021396:	f9b4 7000 	ldrsh.w	r7, [r4]
 802139a:	1abb      	subs	r3, r7, r2
 802139c:	2b00      	cmp	r3, #0
 802139e:	dd31      	ble.n	8021404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80213a0:	2a00      	cmp	r2, #0
 80213a2:	dabd      	bge.n	8021320 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80213a4:	2f00      	cmp	r7, #0
 80213a6:	dd2d      	ble.n	8021404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80213a8:	2200      	movs	r2, #0
 80213aa:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80213ae:	19d1      	adds	r1, r2, r7
 80213b0:	4299      	cmp	r1, r3
 80213b2:	db02      	blt.n	80213ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80213b4:	1a9f      	subs	r7, r3, r2
 80213b6:	2f00      	cmp	r7, #0
 80213b8:	dd24      	ble.n	8021404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80213ba:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80213be:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80213c2:	f7ff ff3b 	bl	802123c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80213c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213c8:	fb10 f003 	smulbb	r0, r0, r3
 80213cc:	b280      	uxth	r0, r0
 80213ce:	1c41      	adds	r1, r0, #1
 80213d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80213d4:	1209      	asrs	r1, r1, #8
 80213d6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80213da:	d013      	beq.n	8021404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80213dc:	b292      	uxth	r2, r2
 80213de:	9808      	ldr	r0, [sp, #32]
 80213e0:	b2c9      	uxtb	r1, r1
 80213e2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80213e4:	b23f      	sxth	r7, r7
 80213e6:	4413      	add	r3, r2
 80213e8:	9102      	str	r1, [sp, #8]
 80213ea:	4402      	add	r2, r0
 80213ec:	fa0f f18b 	sxth.w	r1, fp
 80213f0:	f8da 0000 	ldr.w	r0, [sl]
 80213f4:	b21b      	sxth	r3, r3
 80213f6:	9100      	str	r1, [sp, #0]
 80213f8:	b212      	sxth	r2, r2
 80213fa:	9701      	str	r7, [sp, #4]
 80213fc:	9905      	ldr	r1, [sp, #20]
 80213fe:	6947      	ldr	r7, [r0, #20]
 8021400:	4650      	mov	r0, sl
 8021402:	47b8      	blx	r7
 8021404:	464b      	mov	r3, r9
 8021406:	e75e      	b.n	80212c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021408:	2f00      	cmp	r7, #0
 802140a:	da96      	bge.n	802133a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802140c:	e78e      	b.n	802132c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802140e:	2900      	cmp	r1, #0
 8021410:	d0f8      	beq.n	8021404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021412:	e790      	b.n	8021336 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021414 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021418:	461e      	mov	r6, r3
 802141a:	4b36      	ldr	r3, [pc, #216]	@ (80214f4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802141c:	2500      	movs	r5, #0
 802141e:	f100 0814 	add.w	r8, r0, #20
 8021422:	4604      	mov	r4, r0
 8021424:	4617      	mov	r7, r2
 8021426:	e9c0 3100 	strd	r3, r1, [r0]
 802142a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802142e:	8185      	strh	r5, [r0, #12]
 8021430:	8103      	strh	r3, [r0, #8]
 8021432:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021436:	81c5      	strh	r5, [r0, #14]
 8021438:	7283      	strb	r3, [r0, #10]
 802143a:	8205      	strh	r5, [r0, #16]
 802143c:	8245      	strh	r5, [r0, #18]
 802143e:	4640      	mov	r0, r8
 8021440:	f7ef fee4 	bl	801120c <_ZN8touchgfx7OutlineC1Ev>
 8021444:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021448:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802144c:	466b      	mov	r3, sp
 802144e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8021452:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021456:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802145a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802145e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8021462:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021466:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802146a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802146e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8021472:	6830      	ldr	r0, [r6, #0]
 8021474:	6871      	ldr	r1, [r6, #4]
 8021476:	8872      	ldrh	r2, [r6, #2]
 8021478:	8835      	ldrh	r5, [r6, #0]
 802147a:	c303      	stmia	r3!, {r0, r1}
 802147c:	887b      	ldrh	r3, [r7, #2]
 802147e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8021482:	4413      	add	r3, r2
 8021484:	883a      	ldrh	r2, [r7, #0]
 8021486:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802148a:	442a      	add	r2, r5
 802148c:	81e3      	strh	r3, [r4, #14]
 802148e:	8220      	strh	r0, [r4, #16]
 8021490:	4668      	mov	r0, sp
 8021492:	81a2      	strh	r2, [r4, #12]
 8021494:	8261      	strh	r1, [r4, #18]
 8021496:	4639      	mov	r1, r7
 8021498:	f7f2 f8ac 	bl	80135f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802149c:	f104 000c 	add.w	r0, r4, #12
 80214a0:	f7f2 f864 	bl	801356c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80214a8:	f8bd 2000 	ldrh.w	r2, [sp]
 80214ac:	4640      	mov	r0, r8
 80214ae:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80214b2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80214b6:	f7ef fe8d 	bl	80111d4 <_ZN8touchgfx7Outline5resetEv>
 80214ba:	f9bd 3000 	ldrsh.w	r3, [sp]
 80214be:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80214c2:	4620      	mov	r0, r4
 80214c4:	015b      	lsls	r3, r3, #5
 80214c6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80214c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80214cc:	015b      	lsls	r3, r3, #5
 80214ce:	6523      	str	r3, [r4, #80]	@ 0x50
 80214d0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80214d4:	015b      	lsls	r3, r3, #5
 80214d6:	6563      	str	r3, [r4, #84]	@ 0x54
 80214d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80214dc:	015b      	lsls	r3, r3, #5
 80214de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80214e0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80214e4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80214e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80214ec:	b002      	add	sp, #8
 80214ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214f2:	bf00      	nop
 80214f4:	080265f0 	.word	0x080265f0

080214f8 <_ZN8touchgfx6Canvas5closeEv>:
 80214f8:	b538      	push	{r3, r4, r5, lr}
 80214fa:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80214fe:	4604      	mov	r4, r0
 8021500:	b193      	cbz	r3, 8021528 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021502:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8021506:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802150a:	4213      	tst	r3, r2
 802150c:	d10c      	bne.n	8021528 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802150e:	f100 0514 	add.w	r5, r0, #20
 8021512:	b123      	cbz	r3, 802151e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021514:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8021518:	4628      	mov	r0, r5
 802151a:	f7ff fea3 	bl	8021264 <_ZN8touchgfx10Rasterizer6lineToEii>
 802151e:	4628      	mov	r0, r5
 8021520:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8021524:	f7ff fe9e 	bl	8021264 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021528:	2300      	movs	r3, #0
 802152a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802152e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8021532:	4298      	cmp	r0, r3
 8021534:	bf34      	ite	cc
 8021536:	2000      	movcc	r0, #0
 8021538:	2001      	movcs	r0, #1
 802153a:	bd38      	pop	{r3, r4, r5, pc}

0802153c <_ZN8touchgfx6Canvas6renderEh>:
 802153c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021540:	7a85      	ldrb	r5, [r0, #10]
 8021542:	4604      	mov	r4, r0
 8021544:	4369      	muls	r1, r5
 8021546:	1c4d      	adds	r5, r1, #1
 8021548:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802154c:	122d      	asrs	r5, r5, #8
 802154e:	f000 8098 	beq.w	8021682 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8021552:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8021556:	2b00      	cmp	r3, #0
 8021558:	f000 8093 	beq.w	8021682 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802155c:	f7ff ffcc 	bl	80214f8 <_ZN8touchgfx6Canvas5closeEv>
 8021560:	4607      	mov	r7, r0
 8021562:	2800      	cmp	r0, #0
 8021564:	d045      	beq.n	80215f2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8021566:	6860      	ldr	r0, [r4, #4]
 8021568:	4e47      	ldr	r6, [pc, #284]	@ (8021688 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802156a:	6803      	ldr	r3, [r0, #0]
 802156c:	6837      	ldr	r7, [r6, #0]
 802156e:	689b      	ldr	r3, [r3, #8]
 8021570:	4798      	blx	r3
 8021572:	4601      	mov	r1, r0
 8021574:	4638      	mov	r0, r7
 8021576:	f7ed fac3 	bl	800eb00 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802157a:	4607      	mov	r7, r0
 802157c:	f7e2 fb3c 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 8021580:	6803      	ldr	r3, [r0, #0]
 8021582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021584:	4798      	blx	r3
 8021586:	4680      	mov	r8, r0
 8021588:	f7e2 fb36 	bl	8003bf8 <_ZN8touchgfx3HAL3lcdEv>
 802158c:	6803      	ldr	r3, [r0, #0]
 802158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021590:	4798      	blx	r3
 8021592:	280b      	cmp	r0, #11
 8021594:	d85a      	bhi.n	802164c <_ZN8touchgfx6Canvas6renderEh+0x110>
 8021596:	e8df f000 	tbb	[pc, r0]
 802159a:	5b50      	.short	0x5b50
 802159c:	3059066b 	.word	0x3059066b
 80215a0:	64646440 	.word	0x64646440
 80215a4:	6464      	.short	0x6464
 80215a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80215aa:	2208      	movs	r2, #8
 80215ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80215b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80215b4:	fb08 2303 	mla	r3, r8, r3, r2
 80215b8:	441f      	add	r7, r3
 80215ba:	424b      	negs	r3, r1
 80215bc:	f001 0107 	and.w	r1, r1, #7
 80215c0:	f003 0307 	and.w	r3, r3, #7
 80215c4:	bf58      	it	pl
 80215c6:	4259      	negpl	r1, r3
 80215c8:	b2c9      	uxtb	r1, r1
 80215ca:	b2ed      	uxtb	r5, r5
 80215cc:	463a      	mov	r2, r7
 80215ce:	fa0f f388 	sxth.w	r3, r8
 80215d2:	f104 0014 	add.w	r0, r4, #20
 80215d6:	e9cd 1500 	strd	r1, r5, [sp]
 80215da:	6861      	ldr	r1, [r4, #4]
 80215dc:	f7ff fe4e 	bl	802127c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80215e0:	4607      	mov	r7, r0
 80215e2:	6860      	ldr	r0, [r4, #4]
 80215e4:	6803      	ldr	r3, [r0, #0]
 80215e6:	691b      	ldr	r3, [r3, #16]
 80215e8:	4798      	blx	r3
 80215ea:	6830      	ldr	r0, [r6, #0]
 80215ec:	6803      	ldr	r3, [r0, #0]
 80215ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80215f0:	4798      	blx	r3
 80215f2:	4638      	mov	r0, r7
 80215f4:	b002      	add	sp, #8
 80215f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215fa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80215fe:	2204      	movs	r2, #4
 8021600:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021604:	fb91 f2f2 	sdiv	r2, r1, r2
 8021608:	fb08 2303 	mla	r3, r8, r3, r2
 802160c:	441f      	add	r7, r3
 802160e:	424b      	negs	r3, r1
 8021610:	f001 0103 	and.w	r1, r1, #3
 8021614:	f003 0303 	and.w	r3, r3, #3
 8021618:	e7d4      	b.n	80215c4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802161a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802161e:	2202      	movs	r2, #2
 8021620:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021624:	2900      	cmp	r1, #0
 8021626:	fb91 f2f2 	sdiv	r2, r1, r2
 802162a:	f001 0101 	and.w	r1, r1, #1
 802162e:	fb08 2303 	mla	r3, r8, r3, r2
 8021632:	bfb8      	it	lt
 8021634:	4249      	neglt	r1, r1
 8021636:	441f      	add	r7, r3
 8021638:	e7c6      	b.n	80215c8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802163a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802163e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021642:	fb08 f303 	mul.w	r3, r8, r3
 8021646:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802164a:	441f      	add	r7, r3
 802164c:	2100      	movs	r1, #0
 802164e:	e7bc      	b.n	80215ca <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8021650:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021654:	2103      	movs	r1, #3
 8021656:	fb08 f203 	mul.w	r2, r8, r3
 802165a:	89a3      	ldrh	r3, [r4, #12]
 802165c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021660:	e7f3      	b.n	802164a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021662:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802166a:	fb08 2303 	mla	r3, r8, r3, r2
 802166e:	e7ec      	b.n	802164a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021670:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8021674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021678:	fb08 f303 	mul.w	r3, r8, r3
 802167c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021680:	e7e3      	b.n	802164a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8021682:	2701      	movs	r7, #1
 8021684:	e7b5      	b.n	80215f2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8021686:	bf00      	nop
 8021688:	240284a4 	.word	0x240284a4

0802168c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802168c:	4b06      	ldr	r3, [pc, #24]	@ (80216a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802168e:	b510      	push	{r4, lr}
 8021690:	781b      	ldrb	r3, [r3, #0]
 8021692:	2b01      	cmp	r3, #1
 8021694:	d107      	bne.n	80216a6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8021696:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802169a:	680b      	ldr	r3, [r1, #0]
 802169c:	6814      	ldr	r4, [r2, #0]
 802169e:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80216a2:	6013      	str	r3, [r2, #0]
 80216a4:	600c      	str	r4, [r1, #0]
 80216a6:	bd10      	pop	{r4, pc}
 80216a8:	2402849c 	.word	0x2402849c

080216ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80216ac:	b513      	push	{r0, r1, r4, lr}
 80216ae:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80216b2:	4604      	mov	r4, r0
 80216b4:	e9cd 2100 	strd	r2, r1, [sp]
 80216b8:	b9a3      	cbnz	r3, 80216e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80216ba:	466a      	mov	r2, sp
 80216bc:	a901      	add	r1, sp, #4
 80216be:	4620      	mov	r0, r4
 80216c0:	f7ff ffe4 	bl	802168c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80216c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80216c6:	9901      	ldr	r1, [sp, #4]
 80216c8:	9a00      	ldr	r2, [sp, #0]
 80216ca:	1ac9      	subs	r1, r1, r3
 80216cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80216ce:	1ad2      	subs	r2, r2, r3
 80216d0:	9101      	str	r1, [sp, #4]
 80216d2:	2a00      	cmp	r2, #0
 80216d4:	9200      	str	r2, [sp, #0]
 80216d6:	da0b      	bge.n	80216f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80216d8:	2301      	movs	r3, #1
 80216da:	2900      	cmp	r1, #0
 80216dc:	da0e      	bge.n	80216fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80216de:	f043 0304 	orr.w	r3, r3, #4
 80216e2:	e013      	b.n	802170c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80216e4:	f7ff ff08 	bl	80214f8 <_ZN8touchgfx6Canvas5closeEv>
 80216e8:	2800      	cmp	r0, #0
 80216ea:	d1e6      	bne.n	80216ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80216ec:	b002      	add	sp, #8
 80216ee:	bd10      	pop	{r4, pc}
 80216f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80216f2:	429a      	cmp	r2, r3
 80216f4:	bfac      	ite	ge
 80216f6:	2302      	movge	r3, #2
 80216f8:	2300      	movlt	r3, #0
 80216fa:	e7ee      	b.n	80216da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80216fc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80216fe:	4281      	cmp	r1, r0
 8021700:	bfac      	ite	ge
 8021702:	2008      	movge	r0, #8
 8021704:	2000      	movlt	r0, #0
 8021706:	4318      	orrs	r0, r3
 8021708:	b2c3      	uxtb	r3, r0
 802170a:	b158      	cbz	r0, 8021724 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802170c:	2200      	movs	r2, #0
 802170e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8021712:	9901      	ldr	r1, [sp, #4]
 8021714:	9a00      	ldr	r2, [sp, #0]
 8021716:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8021718:	6722      	str	r2, [r4, #112]	@ 0x70
 802171a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802171e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8021722:	e7e3      	b.n	80216ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8021724:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8021728:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802172c:	4298      	cmp	r0, r3
 802172e:	d803      	bhi.n	8021738 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8021730:	f104 0014 	add.w	r0, r4, #20
 8021734:	f7f0 fa3e 	bl	8011bb4 <_ZN8touchgfx7Outline6moveToEii>
 8021738:	2301      	movs	r3, #1
 802173a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802173e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8021742:	2300      	movs	r3, #0
 8021744:	e7e5      	b.n	8021712 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08021746 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021748:	ab02      	add	r3, sp, #8
 802174a:	4604      	mov	r4, r0
 802174c:	9101      	str	r1, [sp, #4]
 802174e:	a901      	add	r1, sp, #4
 8021750:	f843 2d08 	str.w	r2, [r3, #-8]!
 8021754:	461a      	mov	r2, r3
 8021756:	f7ff ff99 	bl	802168c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802175a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802175c:	9901      	ldr	r1, [sp, #4]
 802175e:	9a00      	ldr	r2, [sp, #0]
 8021760:	1ac9      	subs	r1, r1, r3
 8021762:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8021764:	1ad2      	subs	r2, r2, r3
 8021766:	9101      	str	r1, [sp, #4]
 8021768:	2a00      	cmp	r2, #0
 802176a:	9200      	str	r2, [sp, #0]
 802176c:	db1c      	blt.n	80217a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802176e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021770:	429a      	cmp	r2, r3
 8021772:	bfac      	ite	ge
 8021774:	2002      	movge	r0, #2
 8021776:	2000      	movlt	r0, #0
 8021778:	2900      	cmp	r1, #0
 802177a:	db17      	blt.n	80217ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802177c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802177e:	4299      	cmp	r1, r3
 8021780:	bfac      	ite	ge
 8021782:	2308      	movge	r3, #8
 8021784:	2300      	movlt	r3, #0
 8021786:	4303      	orrs	r3, r0
 8021788:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802178c:	b2dd      	uxtb	r5, r3
 802178e:	b978      	cbnz	r0, 80217b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8021790:	f104 0014 	add.w	r0, r4, #20
 8021794:	f7ff fd66 	bl	8021264 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021798:	9b01      	ldr	r3, [sp, #4]
 802179a:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802179e:	6623      	str	r3, [r4, #96]	@ 0x60
 80217a0:	9b00      	ldr	r3, [sp, #0]
 80217a2:	6663      	str	r3, [r4, #100]	@ 0x64
 80217a4:	b002      	add	sp, #8
 80217a6:	bd70      	pop	{r4, r5, r6, pc}
 80217a8:	2001      	movs	r0, #1
 80217aa:	e7e5      	b.n	8021778 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80217ac:	2304      	movs	r3, #4
 80217ae:	e7ea      	b.n	8021786 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80217b0:	b113      	cbz	r3, 80217b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80217b2:	ea10 0305 	ands.w	r3, r0, r5
 80217b6:	d11c      	bne.n	80217f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80217b8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80217bc:	f104 0614 	add.w	r6, r4, #20
 80217c0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80217c4:	b98b      	cbnz	r3, 80217ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80217c6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80217ca:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80217ce:	4298      	cmp	r0, r3
 80217d0:	d802      	bhi.n	80217d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80217d2:	4630      	mov	r0, r6
 80217d4:	f7f0 f9ee 	bl	8011bb4 <_ZN8touchgfx7Outline6moveToEii>
 80217d8:	2301      	movs	r3, #1
 80217da:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80217de:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80217e2:	4630      	mov	r0, r6
 80217e4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80217e8:	e7d4      	b.n	8021794 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80217ea:	4630      	mov	r0, r6
 80217ec:	f7ff fd3a 	bl	8021264 <_ZN8touchgfx10Rasterizer6lineToEii>
 80217f0:	e7f7      	b.n	80217e2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80217f2:	461d      	mov	r5, r3
 80217f4:	e7d0      	b.n	8021798 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080217f8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80217f8:	b538      	push	{r3, r4, r5, lr}
 80217fa:	ed2d 8b10 	vpush	{d8-d15}
 80217fe:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8021802:	4605      	mov	r5, r0
 8021804:	eeb0 ca40 	vmov.f32	s24, s0
 8021808:	460c      	mov	r4, r1
 802180a:	eef0 ca60 	vmov.f32	s25, s1
 802180e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 802196c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8021812:	eeb0 da41 	vmov.f32	s26, s2
 8021816:	eef0 da61 	vmov.f32	s27, s3
 802181a:	eeb0 ea42 	vmov.f32	s28, s4
 802181e:	eef0 ea62 	vmov.f32	s29, s5
 8021822:	eef0 aa6b 	vmov.f32	s21, s23
 8021826:	2c08      	cmp	r4, #8
 8021828:	d86e      	bhi.n	8021908 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802182a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802182e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8021832:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8021836:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802183a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802183e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8021842:	ee7c faad 	vadd.f32	s31, s25, s27
 8021846:	eee6 7a07 	vfma.f32	s15, s12, s14
 802184a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802184e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8021852:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8021856:	ee6f faab 	vmul.f32	s31, s31, s23
 802185a:	ee69 9aab 	vmul.f32	s19, s19, s23
 802185e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021862:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8021866:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802186e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8021872:	ee68 8aab 	vmul.f32	s17, s17, s23
 8021876:	bf48      	it	mi
 8021878:	eef1 7a67 	vnegmi.f32	s15, s15
 802187c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8021880:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8021884:	eef4 7acb 	vcmpe.f32	s15, s22
 8021888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802188c:	dd3f      	ble.n	802190e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802188e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8021892:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021896:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802189a:	ee27 7a06 	vmul.f32	s14, s14, s12
 802189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80218a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218a6:	d847      	bhi.n	8021938 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80218a8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80218ac:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80218b0:	f000 fa39 	bl	8021d26 <atan2f>
 80218b4:	eeb0 8a40 	vmov.f32	s16, s0
 80218b8:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80218bc:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80218c0:	f000 fa31 	bl	8021d26 <atan2f>
 80218c4:	ee38 0a40 	vsub.f32	s0, s16, s0
 80218c8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8021970 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80218cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80218d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218d4:	bf48      	it	mi
 80218d6:	eeb1 0a40 	vnegmi.f32	s0, s0
 80218da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80218de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218e2:	bfa4      	itt	ge
 80218e4:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8021974 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80218e8:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80218ec:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8021978 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 80218f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80218f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218f8:	d51e      	bpl.n	8021938 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80218fa:	eef0 0a49 	vmov.f32	s1, s18
 80218fe:	4628      	mov	r0, r5
 8021900:	eeb0 0a68 	vmov.f32	s0, s17
 8021904:	f7ed ff7c 	bl	800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021908:	ecbd 8b10 	vpop	{d8-d15}
 802190c:	bd38      	pop	{r3, r4, r5, pc}
 802190e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8021912:	eeb0 7a68 	vmov.f32	s14, s17
 8021916:	eef0 6a49 	vmov.f32	s13, s18
 802191a:	eea7 7aea 	vfms.f32	s14, s15, s21
 802191e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8021922:	eee7 6aea 	vfms.f32	s13, s15, s21
 8021926:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802192a:	eee7 7a07 	vfma.f32	s15, s14, s14
 802192e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8021932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021936:	d9e0      	bls.n	80218fa <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8021938:	3401      	adds	r4, #1
 802193a:	eef0 0a6c 	vmov.f32	s1, s25
 802193e:	eeb0 0a4c 	vmov.f32	s0, s24
 8021942:	4628      	mov	r0, r5
 8021944:	4621      	mov	r1, r4
 8021946:	eef0 2a49 	vmov.f32	s5, s18
 802194a:	eeb0 2a68 	vmov.f32	s4, s17
 802194e:	eef0 1a6f 	vmov.f32	s3, s31
 8021952:	eeb0 1a4f 	vmov.f32	s2, s30
 8021956:	f7ff ff4f 	bl	80217f8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802195a:	eef0 da4a 	vmov.f32	s27, s20
 802195e:	eeb0 da69 	vmov.f32	s26, s19
 8021962:	eef0 ca49 	vmov.f32	s25, s18
 8021966:	eeb0 ca68 	vmov.f32	s24, s17
 802196a:	e75c      	b.n	8021826 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802196c:	2edbe6ff 	.word	0x2edbe6ff
 8021970:	40490fdb 	.word	0x40490fdb
 8021974:	40c90fdb 	.word	0x40c90fdb
 8021978:	3dcccccd 	.word	0x3dcccccd

0802197c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802197c:	b530      	push	{r4, r5, lr}
 802197e:	ed2d 8b10 	vpush	{d8-d15}
 8021982:	eef0 8a40 	vmov.f32	s17, s0
 8021986:	b085      	sub	sp, #20
 8021988:	eef0 9a60 	vmov.f32	s19, s1
 802198c:	4604      	mov	r4, r0
 802198e:	eef0 fa41 	vmov.f32	s31, s2
 8021992:	460d      	mov	r5, r1
 8021994:	eeb0 fa61 	vmov.f32	s30, s3
 8021998:	eef0 ba42 	vmov.f32	s23, s4
 802199c:	eeb0 ca62 	vmov.f32	s24, s5
 80219a0:	eef0 aa43 	vmov.f32	s21, s6
 80219a4:	eeb0 ba63 	vmov.f32	s22, s7
 80219a8:	2d08      	cmp	r5, #8
 80219aa:	f200 8113 	bhi.w	8021bd4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80219ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80219b2:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80219b6:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80219ba:	ee38 daaf 	vadd.f32	s26, s17, s31
 80219be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80219c2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80219c6:	ee2d da27 	vmul.f32	s26, s26, s15
 80219ca:	ed8d 6a01 	vstr	s12, [sp, #4]
 80219ce:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80219d2:	ee6c caa7 	vmul.f32	s25, s25, s15
 80219d6:	eeb0 ea4d 	vmov.f32	s28, s26
 80219da:	ee79 da8f 	vadd.f32	s27, s19, s30
 80219de:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80219e2:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80219e6:	ee66 6a27 	vmul.f32	s13, s12, s15
 80219ea:	ee6d daa7 	vmul.f32	s27, s27, s15
 80219ee:	edcd 6a03 	vstr	s13, [sp, #12]
 80219f2:	eef0 6a6c 	vmov.f32	s13, s25
 80219f6:	eef0 ea6d 	vmov.f32	s29, s27
 80219fa:	ee2e ea27 	vmul.f32	s28, s28, s15
 80219fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021a02:	eee7 ea27 	vfma.f32	s29, s14, s15
 8021a06:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8021a0a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8021a0e:	eef0 6a67 	vmov.f32	s13, s15
 8021a12:	ed8d 7a02 	vstr	s14, [sp, #8]
 8021a16:	ed9d 7a03 	vldr	s14, [sp, #12]
 8021a1a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8021a1e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8021a22:	ee3e aa87 	vadd.f32	s20, s29, s14
 8021a26:	ee29 9a27 	vmul.f32	s18, s18, s15
 8021a2a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8021a2e:	2d00      	cmp	r5, #0
 8021a30:	f000 810b 	beq.w	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021a34:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8021a38:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8021c90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8021a3c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8021a40:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8021a44:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8021a48:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8021a4c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8021a50:	eea6 7a27 	vfma.f32	s14, s12, s15
 8021a54:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8021a58:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8021a5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021a60:	eea5 6a27 	vfma.f32	s12, s10, s15
 8021a64:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8021a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a6c:	bf48      	it	mi
 8021a6e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8021a72:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a7a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8021a7e:	bf48      	it	mi
 8021a80:	eeb1 6a46 	vnegmi.f32	s12, s12
 8021a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a88:	f340 80a8 	ble.w	8021bdc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8021a8c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8021a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a94:	dd5a      	ble.n	8021b4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8021a96:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8021a9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8021a9e:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8021aa2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8021aa6:	ee65 7a85 	vmul.f32	s15, s11, s10
 8021aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ab2:	f200 80ca 	bhi.w	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021ab6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8021aba:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021abe:	f000 f932 	bl	8021d26 <atan2f>
 8021ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8021ac6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8021aca:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8021ace:	f000 f92a 	bl	8021d26 <atan2f>
 8021ad2:	ee38 fa40 	vsub.f32	s30, s16, s0
 8021ad6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8021ada:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8021ade:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8021ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ae6:	bf48      	it	mi
 8021ae8:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8021aec:	f000 f91b 	bl	8021d26 <atan2f>
 8021af0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8021af4:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8021c94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021af8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b00:	eeb4 fae7 	vcmpe.f32	s30, s15
 8021b04:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8021c94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021b08:	bf48      	it	mi
 8021b0a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8021b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021b16:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8021c98 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8021b1a:	bfa4      	itt	ge
 8021b1c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8021c9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021b20:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8021b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b28:	bfa4      	itt	ge
 8021b2a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8021c9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021b2e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8021b32:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8021b36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b3e:	f140 8084 	bpl.w	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021b42:	eef0 0a4a 	vmov.f32	s1, s20
 8021b46:	eeb0 0a49 	vmov.f32	s0, s18
 8021b4a:	e040      	b.n	8021bce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8021b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021b50:	ee27 7a07 	vmul.f32	s14, s14, s14
 8021b54:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8021b58:	ee67 7a85 	vmul.f32	s15, s15, s10
 8021b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b64:	d871      	bhi.n	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021b66:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8021b6a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021b6e:	f000 f8da 	bl	8021d26 <atan2f>
 8021b72:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8021b76:	eeb0 8a40 	vmov.f32	s16, s0
 8021b7a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8021b7e:	f000 f8d2 	bl	8021d26 <atan2f>
 8021b82:	ee38 0a40 	vsub.f32	s0, s16, s0
 8021b86:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8021c94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8021b8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b92:	bf48      	it	mi
 8021b94:	eeb1 0a40 	vnegmi.f32	s0, s0
 8021b98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba0:	bfa4      	itt	ge
 8021ba2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8021c9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8021ba6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8021baa:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8021c98 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8021bae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bb6:	d548      	bpl.n	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021bb8:	eef0 0a4f 	vmov.f32	s1, s30
 8021bbc:	4620      	mov	r0, r4
 8021bbe:	eeb0 0a6f 	vmov.f32	s0, s31
 8021bc2:	f7ed fe1d 	bl	800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021bc6:	eef0 0a4c 	vmov.f32	s1, s24
 8021bca:	eeb0 0a6b 	vmov.f32	s0, s23
 8021bce:	4620      	mov	r0, r4
 8021bd0:	f7ed fe16 	bl	800f800 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8021bd4:	b005      	add	sp, #20
 8021bd6:	ecbd 8b10 	vpop	{d8-d15}
 8021bda:	bd30      	pop	{r4, r5, pc}
 8021bdc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8021c90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8021be0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8021be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021be8:	dd19      	ble.n	8021c1e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8021bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021bee:	ee26 7a06 	vmul.f32	s14, s12, s12
 8021bf2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8021bf6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8021bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c02:	d822      	bhi.n	8021c4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8021c04:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8021c08:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8021c0c:	f000 f88b 	bl	8021d26 <atan2f>
 8021c10:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8021c14:	eeb0 8a40 	vmov.f32	s16, s0
 8021c18:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021c1c:	e7af      	b.n	8021b7e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8021c1e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8021c22:	eeb0 7a49 	vmov.f32	s14, s18
 8021c26:	eeb0 6a4a 	vmov.f32	s12, s20
 8021c2a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021c2e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8021c32:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8021c36:	ee66 7a06 	vmul.f32	s15, s12, s12
 8021c3a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8021c3e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8021c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c46:	f67f af7c 	bls.w	8021b42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8021c4a:	3501      	adds	r5, #1
 8021c4c:	eef0 0a69 	vmov.f32	s1, s19
 8021c50:	eeb0 0a68 	vmov.f32	s0, s17
 8021c54:	4620      	mov	r0, r4
 8021c56:	4629      	mov	r1, r5
 8021c58:	eef0 3a4a 	vmov.f32	s7, s20
 8021c5c:	eeb0 3a49 	vmov.f32	s6, s18
 8021c60:	eef0 2a6e 	vmov.f32	s5, s29
 8021c64:	eeb0 2a4e 	vmov.f32	s4, s28
 8021c68:	eef0 1a6d 	vmov.f32	s3, s27
 8021c6c:	eeb0 1a4d 	vmov.f32	s2, s26
 8021c70:	f7ff fe84 	bl	802197c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8021c74:	eeb0 ca6c 	vmov.f32	s24, s25
 8021c78:	eddd ba01 	vldr	s23, [sp, #4]
 8021c7c:	eef0 9a4a 	vmov.f32	s19, s20
 8021c80:	ed9d fa02 	vldr	s30, [sp, #8]
 8021c84:	eef0 8a49 	vmov.f32	s17, s18
 8021c88:	eddd fa03 	vldr	s31, [sp, #12]
 8021c8c:	e68c      	b.n	80219a8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8021c8e:	bf00      	nop
 8021c90:	2edbe6ff 	.word	0x2edbe6ff
 8021c94:	40490fdb 	.word	0x40490fdb
 8021c98:	3dcccccd 	.word	0x3dcccccd
 8021c9c:	40c90fdb 	.word	0x40c90fdb

08021ca0 <_ZN8touchgfx6CanvasD1Ev>:
 8021ca0:	4b04      	ldr	r3, [pc, #16]	@ (8021cb4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8021ca2:	b510      	push	{r4, lr}
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	f840 3b14 	str.w	r3, [r0], #20
 8021caa:	f7ef fa8b 	bl	80111c4 <_ZN8touchgfx7OutlineD1Ev>
 8021cae:	4620      	mov	r0, r4
 8021cb0:	bd10      	pop	{r4, pc}
 8021cb2:	bf00      	nop
 8021cb4:	080265f0 	.word	0x080265f0

08021cb8 <_ZN8touchgfx6CanvasD0Ev>:
 8021cb8:	b510      	push	{r4, lr}
 8021cba:	4604      	mov	r4, r0
 8021cbc:	f7ff fff0 	bl	8021ca0 <_ZN8touchgfx6CanvasD1Ev>
 8021cc0:	2174      	movs	r1, #116	@ 0x74
 8021cc2:	4620      	mov	r0, r4
 8021cc4:	f000 f807 	bl	8021cd6 <_ZdlPvj>
 8021cc8:	4620      	mov	r0, r4
 8021cca:	bd10      	pop	{r4, pc}

08021ccc <__aeabi_atexit>:
 8021ccc:	460b      	mov	r3, r1
 8021cce:	4601      	mov	r1, r0
 8021cd0:	4618      	mov	r0, r3
 8021cd2:	f000 bc5b 	b.w	802258c <__cxa_atexit>

08021cd6 <_ZdlPvj>:
 8021cd6:	f000 b812 	b.w	8021cfe <_ZdlPv>

08021cda <__cxa_guard_acquire>:
 8021cda:	6802      	ldr	r2, [r0, #0]
 8021cdc:	07d2      	lsls	r2, r2, #31
 8021cde:	4603      	mov	r3, r0
 8021ce0:	d405      	bmi.n	8021cee <__cxa_guard_acquire+0x14>
 8021ce2:	7842      	ldrb	r2, [r0, #1]
 8021ce4:	b102      	cbz	r2, 8021ce8 <__cxa_guard_acquire+0xe>
 8021ce6:	deff      	udf	#255	@ 0xff
 8021ce8:	2001      	movs	r0, #1
 8021cea:	7058      	strb	r0, [r3, #1]
 8021cec:	4770      	bx	lr
 8021cee:	2000      	movs	r0, #0
 8021cf0:	4770      	bx	lr

08021cf2 <__cxa_guard_release>:
 8021cf2:	2301      	movs	r3, #1
 8021cf4:	6003      	str	r3, [r0, #0]
 8021cf6:	4770      	bx	lr

08021cf8 <__cxa_pure_virtual>:
 8021cf8:	b508      	push	{r3, lr}
 8021cfa:	f000 f80f 	bl	8021d1c <_ZSt9terminatev>

08021cfe <_ZdlPv>:
 8021cfe:	f000 bb8f 	b.w	8022420 <free>

08021d02 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021d02:	b508      	push	{r3, lr}
 8021d04:	4780      	blx	r0
 8021d06:	f000 fb58 	bl	80223ba <abort>
	...

08021d0c <_ZSt13get_terminatev>:
 8021d0c:	4b02      	ldr	r3, [pc, #8]	@ (8021d18 <_ZSt13get_terminatev+0xc>)
 8021d0e:	6818      	ldr	r0, [r3, #0]
 8021d10:	f3bf 8f5b 	dmb	ish
 8021d14:	4770      	bx	lr
 8021d16:	bf00      	nop
 8021d18:	240000d8 	.word	0x240000d8

08021d1c <_ZSt9terminatev>:
 8021d1c:	b508      	push	{r3, lr}
 8021d1e:	f7ff fff5 	bl	8021d0c <_ZSt13get_terminatev>
 8021d22:	f7ff ffee 	bl	8021d02 <_ZN10__cxxabiv111__terminateEPFvvE>

08021d26 <atan2f>:
 8021d26:	f000 b9cf 	b.w	80220c8 <__ieee754_atan2f>
	...

08021d2c <sqrtf>:
 8021d2c:	b508      	push	{r3, lr}
 8021d2e:	ed2d 8b02 	vpush	{d8}
 8021d32:	eeb0 8a40 	vmov.f32	s16, s0
 8021d36:	f000 f9c4 	bl	80220c2 <__ieee754_sqrtf>
 8021d3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8021d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d42:	d60c      	bvs.n	8021d5e <sqrtf+0x32>
 8021d44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8021d64 <sqrtf+0x38>
 8021d48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d50:	d505      	bpl.n	8021d5e <sqrtf+0x32>
 8021d52:	f000 fe89 	bl	8022a68 <__errno>
 8021d56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8021d5a:	2321      	movs	r3, #33	@ 0x21
 8021d5c:	6003      	str	r3, [r0, #0]
 8021d5e:	ecbd 8b02 	vpop	{d8}
 8021d62:	bd08      	pop	{r3, pc}
 8021d64:	00000000 	.word	0x00000000

08021d68 <sinf_poly>:
 8021d68:	07cb      	lsls	r3, r1, #31
 8021d6a:	d412      	bmi.n	8021d92 <sinf_poly+0x2a>
 8021d6c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021d70:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021d74:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021d78:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021d7c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021d80:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021d84:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021d88:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021d8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021d90:	4770      	bx	lr
 8021d92:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021d96:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021d9a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021d9e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021da2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021da6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021daa:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021dae:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021db2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021db6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021dba:	e7e5      	b.n	8021d88 <sinf_poly+0x20>
 8021dbc:	0000      	movs	r0, r0
	...

08021dc0 <sinf>:
 8021dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021dc2:	ee10 4a10 	vmov	r4, s0
 8021dc6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021dca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021dce:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8021dd2:	eef0 7a40 	vmov.f32	s15, s0
 8021dd6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8021dda:	d218      	bcs.n	8021e0e <sinf+0x4e>
 8021ddc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021de0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021de4:	d20a      	bcs.n	8021dfc <sinf+0x3c>
 8021de6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8021dea:	d103      	bne.n	8021df4 <sinf+0x34>
 8021dec:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021df0:	ed8d 1a01 	vstr	s2, [sp, #4]
 8021df4:	eeb0 0a67 	vmov.f32	s0, s15
 8021df8:	b003      	add	sp, #12
 8021dfa:	bd30      	pop	{r4, r5, pc}
 8021dfc:	483a      	ldr	r0, [pc, #232]	@ (8021ee8 <sinf+0x128>)
 8021dfe:	eeb0 0b46 	vmov.f64	d0, d6
 8021e02:	2100      	movs	r1, #0
 8021e04:	b003      	add	sp, #12
 8021e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e0a:	f7ff bfad 	b.w	8021d68 <sinf_poly>
 8021e0e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021e12:	4293      	cmp	r3, r2
 8021e14:	d824      	bhi.n	8021e60 <sinf+0xa0>
 8021e16:	4b34      	ldr	r3, [pc, #208]	@ (8021ee8 <sinf+0x128>)
 8021e18:	ed93 7b08 	vldr	d7, [r3, #32]
 8021e1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021e20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021e24:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021e28:	ee17 1a90 	vmov	r1, s15
 8021e2c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021e30:	1609      	asrs	r1, r1, #24
 8021e32:	ee07 1a90 	vmov	s15, r1
 8021e36:	f001 0203 	and.w	r2, r1, #3
 8021e3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021e3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021e42:	ed92 0b00 	vldr	d0, [r2]
 8021e46:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8021e4a:	f011 0f02 	tst.w	r1, #2
 8021e4e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8021e52:	bf08      	it	eq
 8021e54:	4618      	moveq	r0, r3
 8021e56:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021e5a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021e5e:	e7d1      	b.n	8021e04 <sinf+0x44>
 8021e60:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021e64:	d237      	bcs.n	8021ed6 <sinf+0x116>
 8021e66:	4921      	ldr	r1, [pc, #132]	@ (8021eec <sinf+0x12c>)
 8021e68:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021e6c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021e70:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021e74:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021e78:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021e7c:	6a10      	ldr	r0, [r2, #32]
 8021e7e:	6912      	ldr	r2, [r2, #16]
 8021e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021e84:	40ab      	lsls	r3, r5
 8021e86:	fba0 5003 	umull	r5, r0, r0, r3
 8021e8a:	4359      	muls	r1, r3
 8021e8c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021e90:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021e94:	0f9d      	lsrs	r5, r3, #30
 8021e96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021e9a:	1ac9      	subs	r1, r1, r3
 8021e9c:	f7de fbfe 	bl	800069c <__aeabi_l2d>
 8021ea0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021ea4:	4b10      	ldr	r3, [pc, #64]	@ (8021ee8 <sinf+0x128>)
 8021ea6:	f004 0203 	and.w	r2, r4, #3
 8021eaa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021eae:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8021ee0 <sinf+0x120>
 8021eb2:	ed92 0b00 	vldr	d0, [r2]
 8021eb6:	ec41 0b17 	vmov	d7, r0, r1
 8021eba:	f014 0f02 	tst.w	r4, #2
 8021ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021ec2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021ec6:	4629      	mov	r1, r5
 8021ec8:	bf08      	it	eq
 8021eca:	4618      	moveq	r0, r3
 8021ecc:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021ed0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021ed4:	e796      	b.n	8021e04 <sinf+0x44>
 8021ed6:	b003      	add	sp, #12
 8021ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021edc:	f000 b8e2 	b.w	80220a4 <__math_invalidf>
 8021ee0:	54442d18 	.word	0x54442d18
 8021ee4:	3c1921fb 	.word	0x3c1921fb
 8021ee8:	08026660 	.word	0x08026660
 8021eec:	080265fc 	.word	0x080265fc

08021ef0 <sinf_poly>:
 8021ef0:	07cb      	lsls	r3, r1, #31
 8021ef2:	d412      	bmi.n	8021f1a <sinf_poly+0x2a>
 8021ef4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021ef8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021efc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021f00:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021f04:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021f08:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021f0c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021f10:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021f14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021f18:	4770      	bx	lr
 8021f1a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021f1e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021f22:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021f26:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021f2a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021f2e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021f32:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021f36:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021f3a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021f3e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021f42:	e7e5      	b.n	8021f10 <sinf_poly+0x20>
 8021f44:	0000      	movs	r0, r0
	...

08021f48 <cosf>:
 8021f48:	b538      	push	{r3, r4, r5, lr}
 8021f4a:	ee10 4a10 	vmov	r4, s0
 8021f4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021f52:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021f56:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8021f5a:	d21f      	bcs.n	8021f9c <cosf+0x54>
 8021f5c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8021f60:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021f64:	f0c0 8082 	bcc.w	802206c <cosf+0x124>
 8021f68:	ee27 4b07 	vmul.f64	d4, d7, d7
 8021f6c:	4b44      	ldr	r3, [pc, #272]	@ (8022080 <cosf+0x138>)
 8021f6e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8021f72:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8021f76:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8021f7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021f7e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8021f82:	eea7 0b05 	vfma.f64	d0, d7, d5
 8021f86:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8021f8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021f8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8021f92:	eea6 0b07 	vfma.f64	d0, d6, d7
 8021f96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021f9a:	bd38      	pop	{r3, r4, r5, pc}
 8021f9c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021fa0:	4293      	cmp	r3, r2
 8021fa2:	d829      	bhi.n	8021ff8 <cosf+0xb0>
 8021fa4:	4b36      	ldr	r3, [pc, #216]	@ (8022080 <cosf+0x138>)
 8021fa6:	ed93 6b08 	vldr	d6, [r3, #32]
 8021faa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021fae:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8021fb2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021fb6:	ee16 1a90 	vmov	r1, s13
 8021fba:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021fbe:	1609      	asrs	r1, r1, #24
 8021fc0:	ee06 1a90 	vmov	s13, r1
 8021fc4:	f001 0203 	and.w	r2, r1, #3
 8021fc8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021fcc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8021fd0:	ed92 0b00 	vldr	d0, [r2]
 8021fd4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8021fd8:	f011 0f02 	tst.w	r1, #2
 8021fdc:	f081 0101 	eor.w	r1, r1, #1
 8021fe0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8021fe4:	bf08      	it	eq
 8021fe6:	4618      	moveq	r0, r3
 8021fe8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ff0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021ff4:	f7ff bf7c 	b.w	8021ef0 <sinf_poly>
 8021ff8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021ffc:	d232      	bcs.n	8022064 <cosf+0x11c>
 8021ffe:	4921      	ldr	r1, [pc, #132]	@ (8022084 <cosf+0x13c>)
 8022000:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8022004:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022008:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802200c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022010:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022014:	6a10      	ldr	r0, [r2, #32]
 8022016:	6912      	ldr	r2, [r2, #16]
 8022018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802201c:	40ab      	lsls	r3, r5
 802201e:	fba0 5003 	umull	r5, r0, r0, r3
 8022022:	4359      	muls	r1, r3
 8022024:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022028:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802202c:	0f9d      	lsrs	r5, r3, #30
 802202e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022032:	1ac9      	subs	r1, r1, r3
 8022034:	f7de fb32 	bl	800069c <__aeabi_l2d>
 8022038:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802203c:	4b10      	ldr	r3, [pc, #64]	@ (8022080 <cosf+0x138>)
 802203e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8022078 <cosf+0x130>
 8022042:	ec41 0b17 	vmov	d7, r0, r1
 8022046:	f004 0203 	and.w	r2, r4, #3
 802204a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802204e:	ed92 0b00 	vldr	d0, [r2]
 8022052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022056:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802205a:	f014 0f02 	tst.w	r4, #2
 802205e:	f085 0101 	eor.w	r1, r5, #1
 8022062:	e7bf      	b.n	8021fe4 <cosf+0x9c>
 8022064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022068:	f000 b81c 	b.w	80220a4 <__math_invalidf>
 802206c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8022070:	e793      	b.n	8021f9a <cosf+0x52>
 8022072:	bf00      	nop
 8022074:	f3af 8000 	nop.w
 8022078:	54442d18 	.word	0x54442d18
 802207c:	3c1921fb 	.word	0x3c1921fb
 8022080:	08026660 	.word	0x08026660
 8022084:	080265fc 	.word	0x080265fc

08022088 <with_errnof>:
 8022088:	b510      	push	{r4, lr}
 802208a:	ed2d 8b02 	vpush	{d8}
 802208e:	eeb0 8a40 	vmov.f32	s16, s0
 8022092:	4604      	mov	r4, r0
 8022094:	f000 fce8 	bl	8022a68 <__errno>
 8022098:	eeb0 0a48 	vmov.f32	s0, s16
 802209c:	ecbd 8b02 	vpop	{d8}
 80220a0:	6004      	str	r4, [r0, #0]
 80220a2:	bd10      	pop	{r4, pc}

080220a4 <__math_invalidf>:
 80220a4:	eef0 7a40 	vmov.f32	s15, s0
 80220a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80220ac:	eef4 7a67 	vcmp.f32	s15, s15
 80220b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80220b8:	d602      	bvs.n	80220c0 <__math_invalidf+0x1c>
 80220ba:	2021      	movs	r0, #33	@ 0x21
 80220bc:	f7ff bfe4 	b.w	8022088 <with_errnof>
 80220c0:	4770      	bx	lr

080220c2 <__ieee754_sqrtf>:
 80220c2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80220c6:	4770      	bx	lr

080220c8 <__ieee754_atan2f>:
 80220c8:	ee10 2a90 	vmov	r2, s1
 80220cc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80220d0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80220d4:	b510      	push	{r4, lr}
 80220d6:	eef0 7a40 	vmov.f32	s15, s0
 80220da:	d806      	bhi.n	80220ea <__ieee754_atan2f+0x22>
 80220dc:	ee10 0a10 	vmov	r0, s0
 80220e0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80220e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80220e8:	d904      	bls.n	80220f4 <__ieee754_atan2f+0x2c>
 80220ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80220ee:	eeb0 0a67 	vmov.f32	s0, s15
 80220f2:	bd10      	pop	{r4, pc}
 80220f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80220f8:	d103      	bne.n	8022102 <__ieee754_atan2f+0x3a>
 80220fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220fe:	f000 b881 	b.w	8022204 <atanf>
 8022102:	1794      	asrs	r4, r2, #30
 8022104:	f004 0402 	and.w	r4, r4, #2
 8022108:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802210c:	b93b      	cbnz	r3, 802211e <__ieee754_atan2f+0x56>
 802210e:	2c02      	cmp	r4, #2
 8022110:	d05c      	beq.n	80221cc <__ieee754_atan2f+0x104>
 8022112:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80221e0 <__ieee754_atan2f+0x118>
 8022116:	2c03      	cmp	r4, #3
 8022118:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802211c:	e7e7      	b.n	80220ee <__ieee754_atan2f+0x26>
 802211e:	b939      	cbnz	r1, 8022130 <__ieee754_atan2f+0x68>
 8022120:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80221e4 <__ieee754_atan2f+0x11c>
 8022124:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80221e8 <__ieee754_atan2f+0x120>
 8022128:	2800      	cmp	r0, #0
 802212a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802212e:	e7de      	b.n	80220ee <__ieee754_atan2f+0x26>
 8022130:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022134:	d110      	bne.n	8022158 <__ieee754_atan2f+0x90>
 8022136:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802213a:	f104 34ff 	add.w	r4, r4, #4294967295
 802213e:	d107      	bne.n	8022150 <__ieee754_atan2f+0x88>
 8022140:	2c02      	cmp	r4, #2
 8022142:	d846      	bhi.n	80221d2 <__ieee754_atan2f+0x10a>
 8022144:	4b29      	ldr	r3, [pc, #164]	@ (80221ec <__ieee754_atan2f+0x124>)
 8022146:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802214a:	edd3 7a00 	vldr	s15, [r3]
 802214e:	e7ce      	b.n	80220ee <__ieee754_atan2f+0x26>
 8022150:	2c02      	cmp	r4, #2
 8022152:	d841      	bhi.n	80221d8 <__ieee754_atan2f+0x110>
 8022154:	4b26      	ldr	r3, [pc, #152]	@ (80221f0 <__ieee754_atan2f+0x128>)
 8022156:	e7f6      	b.n	8022146 <__ieee754_atan2f+0x7e>
 8022158:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802215c:	d0e0      	beq.n	8022120 <__ieee754_atan2f+0x58>
 802215e:	1a5b      	subs	r3, r3, r1
 8022160:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8022164:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022168:	da1a      	bge.n	80221a0 <__ieee754_atan2f+0xd8>
 802216a:	2a00      	cmp	r2, #0
 802216c:	da01      	bge.n	8022172 <__ieee754_atan2f+0xaa>
 802216e:	313c      	adds	r1, #60	@ 0x3c
 8022170:	db19      	blt.n	80221a6 <__ieee754_atan2f+0xde>
 8022172:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022176:	f000 f919 	bl	80223ac <fabsf>
 802217a:	f000 f843 	bl	8022204 <atanf>
 802217e:	eef0 7a40 	vmov.f32	s15, s0
 8022182:	2c01      	cmp	r4, #1
 8022184:	d012      	beq.n	80221ac <__ieee754_atan2f+0xe4>
 8022186:	2c02      	cmp	r4, #2
 8022188:	d017      	beq.n	80221ba <__ieee754_atan2f+0xf2>
 802218a:	2c00      	cmp	r4, #0
 802218c:	d0af      	beq.n	80220ee <__ieee754_atan2f+0x26>
 802218e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80221f4 <__ieee754_atan2f+0x12c>
 8022192:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022196:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80221f8 <__ieee754_atan2f+0x130>
 802219a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802219e:	e7a6      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221a0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80221e4 <__ieee754_atan2f+0x11c>
 80221a4:	e7ed      	b.n	8022182 <__ieee754_atan2f+0xba>
 80221a6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80221fc <__ieee754_atan2f+0x134>
 80221aa:	e7ea      	b.n	8022182 <__ieee754_atan2f+0xba>
 80221ac:	ee17 3a90 	vmov	r3, s15
 80221b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80221b4:	ee07 3a90 	vmov	s15, r3
 80221b8:	e799      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80221f4 <__ieee754_atan2f+0x12c>
 80221be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80221c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80221f8 <__ieee754_atan2f+0x130>
 80221c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80221ca:	e790      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221cc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80221f8 <__ieee754_atan2f+0x130>
 80221d0:	e78d      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221d2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022200 <__ieee754_atan2f+0x138>
 80221d6:	e78a      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221d8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80221fc <__ieee754_atan2f+0x134>
 80221dc:	e787      	b.n	80220ee <__ieee754_atan2f+0x26>
 80221de:	bf00      	nop
 80221e0:	c0490fdb 	.word	0xc0490fdb
 80221e4:	3fc90fdb 	.word	0x3fc90fdb
 80221e8:	bfc90fdb 	.word	0xbfc90fdb
 80221ec:	0802674c 	.word	0x0802674c
 80221f0:	08026740 	.word	0x08026740
 80221f4:	33bbbd2e 	.word	0x33bbbd2e
 80221f8:	40490fdb 	.word	0x40490fdb
 80221fc:	00000000 	.word	0x00000000
 8022200:	3f490fdb 	.word	0x3f490fdb

08022204 <atanf>:
 8022204:	b538      	push	{r3, r4, r5, lr}
 8022206:	ee10 5a10 	vmov	r5, s0
 802220a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802220e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8022212:	eef0 7a40 	vmov.f32	s15, s0
 8022216:	d30f      	bcc.n	8022238 <atanf+0x34>
 8022218:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802221c:	d904      	bls.n	8022228 <atanf+0x24>
 802221e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8022222:	eeb0 0a67 	vmov.f32	s0, s15
 8022226:	bd38      	pop	{r3, r4, r5, pc}
 8022228:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022360 <atanf+0x15c>
 802222c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022364 <atanf+0x160>
 8022230:	2d00      	cmp	r5, #0
 8022232:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8022236:	e7f4      	b.n	8022222 <atanf+0x1e>
 8022238:	4b4b      	ldr	r3, [pc, #300]	@ (8022368 <atanf+0x164>)
 802223a:	429c      	cmp	r4, r3
 802223c:	d810      	bhi.n	8022260 <atanf+0x5c>
 802223e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8022242:	d20a      	bcs.n	802225a <atanf+0x56>
 8022244:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802236c <atanf+0x168>
 8022248:	ee30 7a07 	vadd.f32	s14, s0, s14
 802224c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022250:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022258:	dce3      	bgt.n	8022222 <atanf+0x1e>
 802225a:	f04f 33ff 	mov.w	r3, #4294967295
 802225e:	e013      	b.n	8022288 <atanf+0x84>
 8022260:	f000 f8a4 	bl	80223ac <fabsf>
 8022264:	4b42      	ldr	r3, [pc, #264]	@ (8022370 <atanf+0x16c>)
 8022266:	429c      	cmp	r4, r3
 8022268:	d84f      	bhi.n	802230a <atanf+0x106>
 802226a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802226e:	429c      	cmp	r4, r3
 8022270:	d841      	bhi.n	80222f6 <atanf+0xf2>
 8022272:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8022276:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802227a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802227e:	2300      	movs	r3, #0
 8022280:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022284:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022288:	1c5a      	adds	r2, r3, #1
 802228a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802228e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8022374 <atanf+0x170>
 8022292:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022378 <atanf+0x174>
 8022296:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802237c <atanf+0x178>
 802229a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802229e:	eee6 5a87 	vfma.f32	s11, s13, s14
 80222a2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022380 <atanf+0x17c>
 80222a6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80222aa:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8022384 <atanf+0x180>
 80222ae:	eee7 5a26 	vfma.f32	s11, s14, s13
 80222b2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8022388 <atanf+0x184>
 80222b6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80222ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802238c <atanf+0x188>
 80222be:	eee7 5a26 	vfma.f32	s11, s14, s13
 80222c2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022390 <atanf+0x18c>
 80222c6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80222ca:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8022394 <atanf+0x190>
 80222ce:	eea5 7a26 	vfma.f32	s14, s10, s13
 80222d2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8022398 <atanf+0x194>
 80222d6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80222da:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802239c <atanf+0x198>
 80222de:	eea5 7a26 	vfma.f32	s14, s10, s13
 80222e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80222e6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80222ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80222ee:	d121      	bne.n	8022334 <atanf+0x130>
 80222f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80222f4:	e795      	b.n	8022222 <atanf+0x1e>
 80222f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80222fa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80222fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022302:	2301      	movs	r3, #1
 8022304:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022308:	e7be      	b.n	8022288 <atanf+0x84>
 802230a:	4b25      	ldr	r3, [pc, #148]	@ (80223a0 <atanf+0x19c>)
 802230c:	429c      	cmp	r4, r3
 802230e:	d80b      	bhi.n	8022328 <atanf+0x124>
 8022310:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8022314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022318:	eea0 7a27 	vfma.f32	s14, s0, s15
 802231c:	2302      	movs	r3, #2
 802231e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022326:	e7af      	b.n	8022288 <atanf+0x84>
 8022328:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802232c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022330:	2303      	movs	r3, #3
 8022332:	e7a9      	b.n	8022288 <atanf+0x84>
 8022334:	4a1b      	ldr	r2, [pc, #108]	@ (80223a4 <atanf+0x1a0>)
 8022336:	491c      	ldr	r1, [pc, #112]	@ (80223a8 <atanf+0x1a4>)
 8022338:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802233c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022340:	edd3 6a00 	vldr	s13, [r3]
 8022344:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022348:	2d00      	cmp	r5, #0
 802234a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802234e:	edd2 7a00 	vldr	s15, [r2]
 8022352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022356:	bfb8      	it	lt
 8022358:	eef1 7a67 	vneglt.f32	s15, s15
 802235c:	e761      	b.n	8022222 <atanf+0x1e>
 802235e:	bf00      	nop
 8022360:	bfc90fdb 	.word	0xbfc90fdb
 8022364:	3fc90fdb 	.word	0x3fc90fdb
 8022368:	3edfffff 	.word	0x3edfffff
 802236c:	7149f2ca 	.word	0x7149f2ca
 8022370:	3f97ffff 	.word	0x3f97ffff
 8022374:	3c8569d7 	.word	0x3c8569d7
 8022378:	3d4bda59 	.word	0x3d4bda59
 802237c:	bd6ef16b 	.word	0xbd6ef16b
 8022380:	3d886b35 	.word	0x3d886b35
 8022384:	3dba2e6e 	.word	0x3dba2e6e
 8022388:	3e124925 	.word	0x3e124925
 802238c:	3eaaaaab 	.word	0x3eaaaaab
 8022390:	bd15a221 	.word	0xbd15a221
 8022394:	bd9d8795 	.word	0xbd9d8795
 8022398:	bde38e38 	.word	0xbde38e38
 802239c:	be4ccccd 	.word	0xbe4ccccd
 80223a0:	401bffff 	.word	0x401bffff
 80223a4:	08026768 	.word	0x08026768
 80223a8:	08026758 	.word	0x08026758

080223ac <fabsf>:
 80223ac:	ee10 3a10 	vmov	r3, s0
 80223b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80223b4:	ee00 3a10 	vmov	s0, r3
 80223b8:	4770      	bx	lr

080223ba <abort>:
 80223ba:	b508      	push	{r3, lr}
 80223bc:	2006      	movs	r0, #6
 80223be:	f000 fae1 	bl	8022984 <raise>
 80223c2:	2001      	movs	r0, #1
 80223c4:	f7df f958 	bl	8001678 <_exit>

080223c8 <__assert_func>:
 80223c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80223ca:	4614      	mov	r4, r2
 80223cc:	461a      	mov	r2, r3
 80223ce:	4b09      	ldr	r3, [pc, #36]	@ (80223f4 <__assert_func+0x2c>)
 80223d0:	681b      	ldr	r3, [r3, #0]
 80223d2:	4605      	mov	r5, r0
 80223d4:	68d8      	ldr	r0, [r3, #12]
 80223d6:	b954      	cbnz	r4, 80223ee <__assert_func+0x26>
 80223d8:	4b07      	ldr	r3, [pc, #28]	@ (80223f8 <__assert_func+0x30>)
 80223da:	461c      	mov	r4, r3
 80223dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80223e0:	9100      	str	r1, [sp, #0]
 80223e2:	462b      	mov	r3, r5
 80223e4:	4905      	ldr	r1, [pc, #20]	@ (80223fc <__assert_func+0x34>)
 80223e6:	f000 f983 	bl	80226f0 <fiprintf>
 80223ea:	f7ff ffe6 	bl	80223ba <abort>
 80223ee:	4b04      	ldr	r3, [pc, #16]	@ (8022400 <__assert_func+0x38>)
 80223f0:	e7f4      	b.n	80223dc <__assert_func+0x14>
 80223f2:	bf00      	nop
 80223f4:	240000e8 	.word	0x240000e8
 80223f8:	080267b3 	.word	0x080267b3
 80223fc:	08026785 	.word	0x08026785
 8022400:	08026778 	.word	0x08026778

08022404 <atexit>:
 8022404:	2300      	movs	r3, #0
 8022406:	4601      	mov	r1, r0
 8022408:	461a      	mov	r2, r3
 802240a:	4618      	mov	r0, r3
 802240c:	f000 bb68 	b.w	8022ae0 <__register_exitproc>

08022410 <malloc>:
 8022410:	4b02      	ldr	r3, [pc, #8]	@ (802241c <malloc+0xc>)
 8022412:	4601      	mov	r1, r0
 8022414:	6818      	ldr	r0, [r3, #0]
 8022416:	f000 b82d 	b.w	8022474 <_malloc_r>
 802241a:	bf00      	nop
 802241c:	240000e8 	.word	0x240000e8

08022420 <free>:
 8022420:	4b02      	ldr	r3, [pc, #8]	@ (802242c <free+0xc>)
 8022422:	4601      	mov	r1, r0
 8022424:	6818      	ldr	r0, [r3, #0]
 8022426:	f000 bbb7 	b.w	8022b98 <_free_r>
 802242a:	bf00      	nop
 802242c:	240000e8 	.word	0x240000e8

08022430 <sbrk_aligned>:
 8022430:	b570      	push	{r4, r5, r6, lr}
 8022432:	4e0f      	ldr	r6, [pc, #60]	@ (8022470 <sbrk_aligned+0x40>)
 8022434:	460c      	mov	r4, r1
 8022436:	6831      	ldr	r1, [r6, #0]
 8022438:	4605      	mov	r5, r0
 802243a:	b911      	cbnz	r1, 8022442 <sbrk_aligned+0x12>
 802243c:	f000 faf2 	bl	8022a24 <_sbrk_r>
 8022440:	6030      	str	r0, [r6, #0]
 8022442:	4621      	mov	r1, r4
 8022444:	4628      	mov	r0, r5
 8022446:	f000 faed 	bl	8022a24 <_sbrk_r>
 802244a:	1c43      	adds	r3, r0, #1
 802244c:	d103      	bne.n	8022456 <sbrk_aligned+0x26>
 802244e:	f04f 34ff 	mov.w	r4, #4294967295
 8022452:	4620      	mov	r0, r4
 8022454:	bd70      	pop	{r4, r5, r6, pc}
 8022456:	1cc4      	adds	r4, r0, #3
 8022458:	f024 0403 	bic.w	r4, r4, #3
 802245c:	42a0      	cmp	r0, r4
 802245e:	d0f8      	beq.n	8022452 <sbrk_aligned+0x22>
 8022460:	1a21      	subs	r1, r4, r0
 8022462:	4628      	mov	r0, r5
 8022464:	f000 fade 	bl	8022a24 <_sbrk_r>
 8022468:	3001      	adds	r0, #1
 802246a:	d1f2      	bne.n	8022452 <sbrk_aligned+0x22>
 802246c:	e7ef      	b.n	802244e <sbrk_aligned+0x1e>
 802246e:	bf00      	nop
 8022470:	24028ee0 	.word	0x24028ee0

08022474 <_malloc_r>:
 8022474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022478:	1ccd      	adds	r5, r1, #3
 802247a:	f025 0503 	bic.w	r5, r5, #3
 802247e:	3508      	adds	r5, #8
 8022480:	2d0c      	cmp	r5, #12
 8022482:	bf38      	it	cc
 8022484:	250c      	movcc	r5, #12
 8022486:	2d00      	cmp	r5, #0
 8022488:	4606      	mov	r6, r0
 802248a:	db01      	blt.n	8022490 <_malloc_r+0x1c>
 802248c:	42a9      	cmp	r1, r5
 802248e:	d904      	bls.n	802249a <_malloc_r+0x26>
 8022490:	230c      	movs	r3, #12
 8022492:	6033      	str	r3, [r6, #0]
 8022494:	2000      	movs	r0, #0
 8022496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802249a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022570 <_malloc_r+0xfc>
 802249e:	f000 f869 	bl	8022574 <__malloc_lock>
 80224a2:	f8d8 3000 	ldr.w	r3, [r8]
 80224a6:	461c      	mov	r4, r3
 80224a8:	bb44      	cbnz	r4, 80224fc <_malloc_r+0x88>
 80224aa:	4629      	mov	r1, r5
 80224ac:	4630      	mov	r0, r6
 80224ae:	f7ff ffbf 	bl	8022430 <sbrk_aligned>
 80224b2:	1c43      	adds	r3, r0, #1
 80224b4:	4604      	mov	r4, r0
 80224b6:	d158      	bne.n	802256a <_malloc_r+0xf6>
 80224b8:	f8d8 4000 	ldr.w	r4, [r8]
 80224bc:	4627      	mov	r7, r4
 80224be:	2f00      	cmp	r7, #0
 80224c0:	d143      	bne.n	802254a <_malloc_r+0xd6>
 80224c2:	2c00      	cmp	r4, #0
 80224c4:	d04b      	beq.n	802255e <_malloc_r+0xea>
 80224c6:	6823      	ldr	r3, [r4, #0]
 80224c8:	4639      	mov	r1, r7
 80224ca:	4630      	mov	r0, r6
 80224cc:	eb04 0903 	add.w	r9, r4, r3
 80224d0:	f000 faa8 	bl	8022a24 <_sbrk_r>
 80224d4:	4581      	cmp	r9, r0
 80224d6:	d142      	bne.n	802255e <_malloc_r+0xea>
 80224d8:	6821      	ldr	r1, [r4, #0]
 80224da:	1a6d      	subs	r5, r5, r1
 80224dc:	4629      	mov	r1, r5
 80224de:	4630      	mov	r0, r6
 80224e0:	f7ff ffa6 	bl	8022430 <sbrk_aligned>
 80224e4:	3001      	adds	r0, #1
 80224e6:	d03a      	beq.n	802255e <_malloc_r+0xea>
 80224e8:	6823      	ldr	r3, [r4, #0]
 80224ea:	442b      	add	r3, r5
 80224ec:	6023      	str	r3, [r4, #0]
 80224ee:	f8d8 3000 	ldr.w	r3, [r8]
 80224f2:	685a      	ldr	r2, [r3, #4]
 80224f4:	bb62      	cbnz	r2, 8022550 <_malloc_r+0xdc>
 80224f6:	f8c8 7000 	str.w	r7, [r8]
 80224fa:	e00f      	b.n	802251c <_malloc_r+0xa8>
 80224fc:	6822      	ldr	r2, [r4, #0]
 80224fe:	1b52      	subs	r2, r2, r5
 8022500:	d420      	bmi.n	8022544 <_malloc_r+0xd0>
 8022502:	2a0b      	cmp	r2, #11
 8022504:	d917      	bls.n	8022536 <_malloc_r+0xc2>
 8022506:	1961      	adds	r1, r4, r5
 8022508:	42a3      	cmp	r3, r4
 802250a:	6025      	str	r5, [r4, #0]
 802250c:	bf18      	it	ne
 802250e:	6059      	strne	r1, [r3, #4]
 8022510:	6863      	ldr	r3, [r4, #4]
 8022512:	bf08      	it	eq
 8022514:	f8c8 1000 	streq.w	r1, [r8]
 8022518:	5162      	str	r2, [r4, r5]
 802251a:	604b      	str	r3, [r1, #4]
 802251c:	4630      	mov	r0, r6
 802251e:	f000 f82f 	bl	8022580 <__malloc_unlock>
 8022522:	f104 000b 	add.w	r0, r4, #11
 8022526:	1d23      	adds	r3, r4, #4
 8022528:	f020 0007 	bic.w	r0, r0, #7
 802252c:	1ac2      	subs	r2, r0, r3
 802252e:	bf1c      	itt	ne
 8022530:	1a1b      	subne	r3, r3, r0
 8022532:	50a3      	strne	r3, [r4, r2]
 8022534:	e7af      	b.n	8022496 <_malloc_r+0x22>
 8022536:	6862      	ldr	r2, [r4, #4]
 8022538:	42a3      	cmp	r3, r4
 802253a:	bf0c      	ite	eq
 802253c:	f8c8 2000 	streq.w	r2, [r8]
 8022540:	605a      	strne	r2, [r3, #4]
 8022542:	e7eb      	b.n	802251c <_malloc_r+0xa8>
 8022544:	4623      	mov	r3, r4
 8022546:	6864      	ldr	r4, [r4, #4]
 8022548:	e7ae      	b.n	80224a8 <_malloc_r+0x34>
 802254a:	463c      	mov	r4, r7
 802254c:	687f      	ldr	r7, [r7, #4]
 802254e:	e7b6      	b.n	80224be <_malloc_r+0x4a>
 8022550:	461a      	mov	r2, r3
 8022552:	685b      	ldr	r3, [r3, #4]
 8022554:	42a3      	cmp	r3, r4
 8022556:	d1fb      	bne.n	8022550 <_malloc_r+0xdc>
 8022558:	2300      	movs	r3, #0
 802255a:	6053      	str	r3, [r2, #4]
 802255c:	e7de      	b.n	802251c <_malloc_r+0xa8>
 802255e:	230c      	movs	r3, #12
 8022560:	6033      	str	r3, [r6, #0]
 8022562:	4630      	mov	r0, r6
 8022564:	f000 f80c 	bl	8022580 <__malloc_unlock>
 8022568:	e794      	b.n	8022494 <_malloc_r+0x20>
 802256a:	6005      	str	r5, [r0, #0]
 802256c:	e7d6      	b.n	802251c <_malloc_r+0xa8>
 802256e:	bf00      	nop
 8022570:	24028ee4 	.word	0x24028ee4

08022574 <__malloc_lock>:
 8022574:	4801      	ldr	r0, [pc, #4]	@ (802257c <__malloc_lock+0x8>)
 8022576:	f000 baa2 	b.w	8022abe <__retarget_lock_acquire_recursive>
 802257a:	bf00      	nop
 802257c:	24029028 	.word	0x24029028

08022580 <__malloc_unlock>:
 8022580:	4801      	ldr	r0, [pc, #4]	@ (8022588 <__malloc_unlock+0x8>)
 8022582:	f000 ba9d 	b.w	8022ac0 <__retarget_lock_release_recursive>
 8022586:	bf00      	nop
 8022588:	24029028 	.word	0x24029028

0802258c <__cxa_atexit>:
 802258c:	b510      	push	{r4, lr}
 802258e:	4604      	mov	r4, r0
 8022590:	4804      	ldr	r0, [pc, #16]	@ (80225a4 <__cxa_atexit+0x18>)
 8022592:	4613      	mov	r3, r2
 8022594:	b120      	cbz	r0, 80225a0 <__cxa_atexit+0x14>
 8022596:	460a      	mov	r2, r1
 8022598:	2002      	movs	r0, #2
 802259a:	4621      	mov	r1, r4
 802259c:	f000 faa0 	bl	8022ae0 <__register_exitproc>
 80225a0:	bd10      	pop	{r4, pc}
 80225a2:	bf00      	nop
 80225a4:	08022ae1 	.word	0x08022ae1

080225a8 <std>:
 80225a8:	2300      	movs	r3, #0
 80225aa:	b510      	push	{r4, lr}
 80225ac:	4604      	mov	r4, r0
 80225ae:	e9c0 3300 	strd	r3, r3, [r0]
 80225b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80225b6:	6083      	str	r3, [r0, #8]
 80225b8:	8181      	strh	r1, [r0, #12]
 80225ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80225bc:	81c2      	strh	r2, [r0, #14]
 80225be:	6183      	str	r3, [r0, #24]
 80225c0:	4619      	mov	r1, r3
 80225c2:	2208      	movs	r2, #8
 80225c4:	305c      	adds	r0, #92	@ 0x5c
 80225c6:	f000 f99b 	bl	8022900 <memset>
 80225ca:	4b0d      	ldr	r3, [pc, #52]	@ (8022600 <std+0x58>)
 80225cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80225ce:	4b0d      	ldr	r3, [pc, #52]	@ (8022604 <std+0x5c>)
 80225d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80225d2:	4b0d      	ldr	r3, [pc, #52]	@ (8022608 <std+0x60>)
 80225d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80225d6:	4b0d      	ldr	r3, [pc, #52]	@ (802260c <std+0x64>)
 80225d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80225da:	4b0d      	ldr	r3, [pc, #52]	@ (8022610 <std+0x68>)
 80225dc:	6224      	str	r4, [r4, #32]
 80225de:	429c      	cmp	r4, r3
 80225e0:	d006      	beq.n	80225f0 <std+0x48>
 80225e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80225e6:	4294      	cmp	r4, r2
 80225e8:	d002      	beq.n	80225f0 <std+0x48>
 80225ea:	33d0      	adds	r3, #208	@ 0xd0
 80225ec:	429c      	cmp	r4, r3
 80225ee:	d105      	bne.n	80225fc <std+0x54>
 80225f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80225f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225f8:	f000 ba60 	b.w	8022abc <__retarget_lock_init_recursive>
 80225fc:	bd10      	pop	{r4, pc}
 80225fe:	bf00      	nop
 8022600:	08022751 	.word	0x08022751
 8022604:	08022773 	.word	0x08022773
 8022608:	080227ab 	.word	0x080227ab
 802260c:	080227cf 	.word	0x080227cf
 8022610:	24028ee8 	.word	0x24028ee8

08022614 <stdio_exit_handler>:
 8022614:	4a02      	ldr	r2, [pc, #8]	@ (8022620 <stdio_exit_handler+0xc>)
 8022616:	4903      	ldr	r1, [pc, #12]	@ (8022624 <stdio_exit_handler+0x10>)
 8022618:	4803      	ldr	r0, [pc, #12]	@ (8022628 <stdio_exit_handler+0x14>)
 802261a:	f000 b87b 	b.w	8022714 <_fwalk_sglue>
 802261e:	bf00      	nop
 8022620:	240000dc 	.word	0x240000dc
 8022624:	080232d5 	.word	0x080232d5
 8022628:	240000ec 	.word	0x240000ec

0802262c <cleanup_stdio>:
 802262c:	6841      	ldr	r1, [r0, #4]
 802262e:	4b0c      	ldr	r3, [pc, #48]	@ (8022660 <cleanup_stdio+0x34>)
 8022630:	4299      	cmp	r1, r3
 8022632:	b510      	push	{r4, lr}
 8022634:	4604      	mov	r4, r0
 8022636:	d001      	beq.n	802263c <cleanup_stdio+0x10>
 8022638:	f000 fe4c 	bl	80232d4 <_fflush_r>
 802263c:	68a1      	ldr	r1, [r4, #8]
 802263e:	4b09      	ldr	r3, [pc, #36]	@ (8022664 <cleanup_stdio+0x38>)
 8022640:	4299      	cmp	r1, r3
 8022642:	d002      	beq.n	802264a <cleanup_stdio+0x1e>
 8022644:	4620      	mov	r0, r4
 8022646:	f000 fe45 	bl	80232d4 <_fflush_r>
 802264a:	68e1      	ldr	r1, [r4, #12]
 802264c:	4b06      	ldr	r3, [pc, #24]	@ (8022668 <cleanup_stdio+0x3c>)
 802264e:	4299      	cmp	r1, r3
 8022650:	d004      	beq.n	802265c <cleanup_stdio+0x30>
 8022652:	4620      	mov	r0, r4
 8022654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022658:	f000 be3c 	b.w	80232d4 <_fflush_r>
 802265c:	bd10      	pop	{r4, pc}
 802265e:	bf00      	nop
 8022660:	24028ee8 	.word	0x24028ee8
 8022664:	24028f50 	.word	0x24028f50
 8022668:	24028fb8 	.word	0x24028fb8

0802266c <global_stdio_init.part.0>:
 802266c:	b510      	push	{r4, lr}
 802266e:	4b0b      	ldr	r3, [pc, #44]	@ (802269c <global_stdio_init.part.0+0x30>)
 8022670:	4c0b      	ldr	r4, [pc, #44]	@ (80226a0 <global_stdio_init.part.0+0x34>)
 8022672:	4a0c      	ldr	r2, [pc, #48]	@ (80226a4 <global_stdio_init.part.0+0x38>)
 8022674:	601a      	str	r2, [r3, #0]
 8022676:	4620      	mov	r0, r4
 8022678:	2200      	movs	r2, #0
 802267a:	2104      	movs	r1, #4
 802267c:	f7ff ff94 	bl	80225a8 <std>
 8022680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022684:	2201      	movs	r2, #1
 8022686:	2109      	movs	r1, #9
 8022688:	f7ff ff8e 	bl	80225a8 <std>
 802268c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022690:	2202      	movs	r2, #2
 8022692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022696:	2112      	movs	r1, #18
 8022698:	f7ff bf86 	b.w	80225a8 <std>
 802269c:	24029020 	.word	0x24029020
 80226a0:	24028ee8 	.word	0x24028ee8
 80226a4:	08022615 	.word	0x08022615

080226a8 <__sfp_lock_acquire>:
 80226a8:	4801      	ldr	r0, [pc, #4]	@ (80226b0 <__sfp_lock_acquire+0x8>)
 80226aa:	f000 ba08 	b.w	8022abe <__retarget_lock_acquire_recursive>
 80226ae:	bf00      	nop
 80226b0:	2402902a 	.word	0x2402902a

080226b4 <__sfp_lock_release>:
 80226b4:	4801      	ldr	r0, [pc, #4]	@ (80226bc <__sfp_lock_release+0x8>)
 80226b6:	f000 ba03 	b.w	8022ac0 <__retarget_lock_release_recursive>
 80226ba:	bf00      	nop
 80226bc:	2402902a 	.word	0x2402902a

080226c0 <__sinit>:
 80226c0:	b510      	push	{r4, lr}
 80226c2:	4604      	mov	r4, r0
 80226c4:	f7ff fff0 	bl	80226a8 <__sfp_lock_acquire>
 80226c8:	6a23      	ldr	r3, [r4, #32]
 80226ca:	b11b      	cbz	r3, 80226d4 <__sinit+0x14>
 80226cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226d0:	f7ff bff0 	b.w	80226b4 <__sfp_lock_release>
 80226d4:	4b04      	ldr	r3, [pc, #16]	@ (80226e8 <__sinit+0x28>)
 80226d6:	6223      	str	r3, [r4, #32]
 80226d8:	4b04      	ldr	r3, [pc, #16]	@ (80226ec <__sinit+0x2c>)
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d1f5      	bne.n	80226cc <__sinit+0xc>
 80226e0:	f7ff ffc4 	bl	802266c <global_stdio_init.part.0>
 80226e4:	e7f2      	b.n	80226cc <__sinit+0xc>
 80226e6:	bf00      	nop
 80226e8:	0802262d 	.word	0x0802262d
 80226ec:	24029020 	.word	0x24029020

080226f0 <fiprintf>:
 80226f0:	b40e      	push	{r1, r2, r3}
 80226f2:	b503      	push	{r0, r1, lr}
 80226f4:	4601      	mov	r1, r0
 80226f6:	ab03      	add	r3, sp, #12
 80226f8:	4805      	ldr	r0, [pc, #20]	@ (8022710 <fiprintf+0x20>)
 80226fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80226fe:	6800      	ldr	r0, [r0, #0]
 8022700:	9301      	str	r3, [sp, #4]
 8022702:	f000 fabd 	bl	8022c80 <_vfiprintf_r>
 8022706:	b002      	add	sp, #8
 8022708:	f85d eb04 	ldr.w	lr, [sp], #4
 802270c:	b003      	add	sp, #12
 802270e:	4770      	bx	lr
 8022710:	240000e8 	.word	0x240000e8

08022714 <_fwalk_sglue>:
 8022714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022718:	4607      	mov	r7, r0
 802271a:	4688      	mov	r8, r1
 802271c:	4614      	mov	r4, r2
 802271e:	2600      	movs	r6, #0
 8022720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022724:	f1b9 0901 	subs.w	r9, r9, #1
 8022728:	d505      	bpl.n	8022736 <_fwalk_sglue+0x22>
 802272a:	6824      	ldr	r4, [r4, #0]
 802272c:	2c00      	cmp	r4, #0
 802272e:	d1f7      	bne.n	8022720 <_fwalk_sglue+0xc>
 8022730:	4630      	mov	r0, r6
 8022732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022736:	89ab      	ldrh	r3, [r5, #12]
 8022738:	2b01      	cmp	r3, #1
 802273a:	d907      	bls.n	802274c <_fwalk_sglue+0x38>
 802273c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022740:	3301      	adds	r3, #1
 8022742:	d003      	beq.n	802274c <_fwalk_sglue+0x38>
 8022744:	4629      	mov	r1, r5
 8022746:	4638      	mov	r0, r7
 8022748:	47c0      	blx	r8
 802274a:	4306      	orrs	r6, r0
 802274c:	3568      	adds	r5, #104	@ 0x68
 802274e:	e7e9      	b.n	8022724 <_fwalk_sglue+0x10>

08022750 <__sread>:
 8022750:	b510      	push	{r4, lr}
 8022752:	460c      	mov	r4, r1
 8022754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022758:	f000 f93e 	bl	80229d8 <_read_r>
 802275c:	2800      	cmp	r0, #0
 802275e:	bfab      	itete	ge
 8022760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022762:	89a3      	ldrhlt	r3, [r4, #12]
 8022764:	181b      	addge	r3, r3, r0
 8022766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802276a:	bfac      	ite	ge
 802276c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802276e:	81a3      	strhlt	r3, [r4, #12]
 8022770:	bd10      	pop	{r4, pc}

08022772 <__swrite>:
 8022772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022776:	461f      	mov	r7, r3
 8022778:	898b      	ldrh	r3, [r1, #12]
 802277a:	05db      	lsls	r3, r3, #23
 802277c:	4605      	mov	r5, r0
 802277e:	460c      	mov	r4, r1
 8022780:	4616      	mov	r6, r2
 8022782:	d505      	bpl.n	8022790 <__swrite+0x1e>
 8022784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022788:	2302      	movs	r3, #2
 802278a:	2200      	movs	r2, #0
 802278c:	f000 f912 	bl	80229b4 <_lseek_r>
 8022790:	89a3      	ldrh	r3, [r4, #12]
 8022792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802279a:	81a3      	strh	r3, [r4, #12]
 802279c:	4632      	mov	r2, r6
 802279e:	463b      	mov	r3, r7
 80227a0:	4628      	mov	r0, r5
 80227a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80227a6:	f000 b94d 	b.w	8022a44 <_write_r>

080227aa <__sseek>:
 80227aa:	b510      	push	{r4, lr}
 80227ac:	460c      	mov	r4, r1
 80227ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227b2:	f000 f8ff 	bl	80229b4 <_lseek_r>
 80227b6:	1c43      	adds	r3, r0, #1
 80227b8:	89a3      	ldrh	r3, [r4, #12]
 80227ba:	bf15      	itete	ne
 80227bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80227be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80227c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80227c6:	81a3      	strheq	r3, [r4, #12]
 80227c8:	bf18      	it	ne
 80227ca:	81a3      	strhne	r3, [r4, #12]
 80227cc:	bd10      	pop	{r4, pc}

080227ce <__sclose>:
 80227ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227d2:	f000 b8df 	b.w	8022994 <_close_r>

080227d6 <__swbuf_r>:
 80227d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227d8:	460e      	mov	r6, r1
 80227da:	4614      	mov	r4, r2
 80227dc:	4605      	mov	r5, r0
 80227de:	b118      	cbz	r0, 80227e8 <__swbuf_r+0x12>
 80227e0:	6a03      	ldr	r3, [r0, #32]
 80227e2:	b90b      	cbnz	r3, 80227e8 <__swbuf_r+0x12>
 80227e4:	f7ff ff6c 	bl	80226c0 <__sinit>
 80227e8:	69a3      	ldr	r3, [r4, #24]
 80227ea:	60a3      	str	r3, [r4, #8]
 80227ec:	89a3      	ldrh	r3, [r4, #12]
 80227ee:	071a      	lsls	r2, r3, #28
 80227f0:	d501      	bpl.n	80227f6 <__swbuf_r+0x20>
 80227f2:	6923      	ldr	r3, [r4, #16]
 80227f4:	b943      	cbnz	r3, 8022808 <__swbuf_r+0x32>
 80227f6:	4621      	mov	r1, r4
 80227f8:	4628      	mov	r0, r5
 80227fa:	f000 f82b 	bl	8022854 <__swsetup_r>
 80227fe:	b118      	cbz	r0, 8022808 <__swbuf_r+0x32>
 8022800:	f04f 37ff 	mov.w	r7, #4294967295
 8022804:	4638      	mov	r0, r7
 8022806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022808:	6823      	ldr	r3, [r4, #0]
 802280a:	6922      	ldr	r2, [r4, #16]
 802280c:	1a98      	subs	r0, r3, r2
 802280e:	6963      	ldr	r3, [r4, #20]
 8022810:	b2f6      	uxtb	r6, r6
 8022812:	4283      	cmp	r3, r0
 8022814:	4637      	mov	r7, r6
 8022816:	dc05      	bgt.n	8022824 <__swbuf_r+0x4e>
 8022818:	4621      	mov	r1, r4
 802281a:	4628      	mov	r0, r5
 802281c:	f000 fd5a 	bl	80232d4 <_fflush_r>
 8022820:	2800      	cmp	r0, #0
 8022822:	d1ed      	bne.n	8022800 <__swbuf_r+0x2a>
 8022824:	68a3      	ldr	r3, [r4, #8]
 8022826:	3b01      	subs	r3, #1
 8022828:	60a3      	str	r3, [r4, #8]
 802282a:	6823      	ldr	r3, [r4, #0]
 802282c:	1c5a      	adds	r2, r3, #1
 802282e:	6022      	str	r2, [r4, #0]
 8022830:	701e      	strb	r6, [r3, #0]
 8022832:	6962      	ldr	r2, [r4, #20]
 8022834:	1c43      	adds	r3, r0, #1
 8022836:	429a      	cmp	r2, r3
 8022838:	d004      	beq.n	8022844 <__swbuf_r+0x6e>
 802283a:	89a3      	ldrh	r3, [r4, #12]
 802283c:	07db      	lsls	r3, r3, #31
 802283e:	d5e1      	bpl.n	8022804 <__swbuf_r+0x2e>
 8022840:	2e0a      	cmp	r6, #10
 8022842:	d1df      	bne.n	8022804 <__swbuf_r+0x2e>
 8022844:	4621      	mov	r1, r4
 8022846:	4628      	mov	r0, r5
 8022848:	f000 fd44 	bl	80232d4 <_fflush_r>
 802284c:	2800      	cmp	r0, #0
 802284e:	d0d9      	beq.n	8022804 <__swbuf_r+0x2e>
 8022850:	e7d6      	b.n	8022800 <__swbuf_r+0x2a>
	...

08022854 <__swsetup_r>:
 8022854:	b538      	push	{r3, r4, r5, lr}
 8022856:	4b29      	ldr	r3, [pc, #164]	@ (80228fc <__swsetup_r+0xa8>)
 8022858:	4605      	mov	r5, r0
 802285a:	6818      	ldr	r0, [r3, #0]
 802285c:	460c      	mov	r4, r1
 802285e:	b118      	cbz	r0, 8022868 <__swsetup_r+0x14>
 8022860:	6a03      	ldr	r3, [r0, #32]
 8022862:	b90b      	cbnz	r3, 8022868 <__swsetup_r+0x14>
 8022864:	f7ff ff2c 	bl	80226c0 <__sinit>
 8022868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802286c:	0719      	lsls	r1, r3, #28
 802286e:	d422      	bmi.n	80228b6 <__swsetup_r+0x62>
 8022870:	06da      	lsls	r2, r3, #27
 8022872:	d407      	bmi.n	8022884 <__swsetup_r+0x30>
 8022874:	2209      	movs	r2, #9
 8022876:	602a      	str	r2, [r5, #0]
 8022878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802287c:	81a3      	strh	r3, [r4, #12]
 802287e:	f04f 30ff 	mov.w	r0, #4294967295
 8022882:	e033      	b.n	80228ec <__swsetup_r+0x98>
 8022884:	0758      	lsls	r0, r3, #29
 8022886:	d512      	bpl.n	80228ae <__swsetup_r+0x5a>
 8022888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802288a:	b141      	cbz	r1, 802289e <__swsetup_r+0x4a>
 802288c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022890:	4299      	cmp	r1, r3
 8022892:	d002      	beq.n	802289a <__swsetup_r+0x46>
 8022894:	4628      	mov	r0, r5
 8022896:	f000 f97f 	bl	8022b98 <_free_r>
 802289a:	2300      	movs	r3, #0
 802289c:	6363      	str	r3, [r4, #52]	@ 0x34
 802289e:	89a3      	ldrh	r3, [r4, #12]
 80228a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80228a4:	81a3      	strh	r3, [r4, #12]
 80228a6:	2300      	movs	r3, #0
 80228a8:	6063      	str	r3, [r4, #4]
 80228aa:	6923      	ldr	r3, [r4, #16]
 80228ac:	6023      	str	r3, [r4, #0]
 80228ae:	89a3      	ldrh	r3, [r4, #12]
 80228b0:	f043 0308 	orr.w	r3, r3, #8
 80228b4:	81a3      	strh	r3, [r4, #12]
 80228b6:	6923      	ldr	r3, [r4, #16]
 80228b8:	b94b      	cbnz	r3, 80228ce <__swsetup_r+0x7a>
 80228ba:	89a3      	ldrh	r3, [r4, #12]
 80228bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80228c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80228c4:	d003      	beq.n	80228ce <__swsetup_r+0x7a>
 80228c6:	4621      	mov	r1, r4
 80228c8:	4628      	mov	r0, r5
 80228ca:	f000 fd51 	bl	8023370 <__smakebuf_r>
 80228ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80228d2:	f013 0201 	ands.w	r2, r3, #1
 80228d6:	d00a      	beq.n	80228ee <__swsetup_r+0x9a>
 80228d8:	2200      	movs	r2, #0
 80228da:	60a2      	str	r2, [r4, #8]
 80228dc:	6962      	ldr	r2, [r4, #20]
 80228de:	4252      	negs	r2, r2
 80228e0:	61a2      	str	r2, [r4, #24]
 80228e2:	6922      	ldr	r2, [r4, #16]
 80228e4:	b942      	cbnz	r2, 80228f8 <__swsetup_r+0xa4>
 80228e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80228ea:	d1c5      	bne.n	8022878 <__swsetup_r+0x24>
 80228ec:	bd38      	pop	{r3, r4, r5, pc}
 80228ee:	0799      	lsls	r1, r3, #30
 80228f0:	bf58      	it	pl
 80228f2:	6962      	ldrpl	r2, [r4, #20]
 80228f4:	60a2      	str	r2, [r4, #8]
 80228f6:	e7f4      	b.n	80228e2 <__swsetup_r+0x8e>
 80228f8:	2000      	movs	r0, #0
 80228fa:	e7f7      	b.n	80228ec <__swsetup_r+0x98>
 80228fc:	240000e8 	.word	0x240000e8

08022900 <memset>:
 8022900:	4402      	add	r2, r0
 8022902:	4603      	mov	r3, r0
 8022904:	4293      	cmp	r3, r2
 8022906:	d100      	bne.n	802290a <memset+0xa>
 8022908:	4770      	bx	lr
 802290a:	f803 1b01 	strb.w	r1, [r3], #1
 802290e:	e7f9      	b.n	8022904 <memset+0x4>

08022910 <strncmp>:
 8022910:	b510      	push	{r4, lr}
 8022912:	b16a      	cbz	r2, 8022930 <strncmp+0x20>
 8022914:	3901      	subs	r1, #1
 8022916:	1884      	adds	r4, r0, r2
 8022918:	f810 2b01 	ldrb.w	r2, [r0], #1
 802291c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022920:	429a      	cmp	r2, r3
 8022922:	d103      	bne.n	802292c <strncmp+0x1c>
 8022924:	42a0      	cmp	r0, r4
 8022926:	d001      	beq.n	802292c <strncmp+0x1c>
 8022928:	2a00      	cmp	r2, #0
 802292a:	d1f5      	bne.n	8022918 <strncmp+0x8>
 802292c:	1ad0      	subs	r0, r2, r3
 802292e:	bd10      	pop	{r4, pc}
 8022930:	4610      	mov	r0, r2
 8022932:	e7fc      	b.n	802292e <strncmp+0x1e>

08022934 <_raise_r>:
 8022934:	291f      	cmp	r1, #31
 8022936:	b538      	push	{r3, r4, r5, lr}
 8022938:	4605      	mov	r5, r0
 802293a:	460c      	mov	r4, r1
 802293c:	d904      	bls.n	8022948 <_raise_r+0x14>
 802293e:	2316      	movs	r3, #22
 8022940:	6003      	str	r3, [r0, #0]
 8022942:	f04f 30ff 	mov.w	r0, #4294967295
 8022946:	bd38      	pop	{r3, r4, r5, pc}
 8022948:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802294a:	b112      	cbz	r2, 8022952 <_raise_r+0x1e>
 802294c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022950:	b94b      	cbnz	r3, 8022966 <_raise_r+0x32>
 8022952:	4628      	mov	r0, r5
 8022954:	f000 f864 	bl	8022a20 <_getpid_r>
 8022958:	4622      	mov	r2, r4
 802295a:	4601      	mov	r1, r0
 802295c:	4628      	mov	r0, r5
 802295e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022962:	f000 b84b 	b.w	80229fc <_kill_r>
 8022966:	2b01      	cmp	r3, #1
 8022968:	d00a      	beq.n	8022980 <_raise_r+0x4c>
 802296a:	1c59      	adds	r1, r3, #1
 802296c:	d103      	bne.n	8022976 <_raise_r+0x42>
 802296e:	2316      	movs	r3, #22
 8022970:	6003      	str	r3, [r0, #0]
 8022972:	2001      	movs	r0, #1
 8022974:	e7e7      	b.n	8022946 <_raise_r+0x12>
 8022976:	2100      	movs	r1, #0
 8022978:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802297c:	4620      	mov	r0, r4
 802297e:	4798      	blx	r3
 8022980:	2000      	movs	r0, #0
 8022982:	e7e0      	b.n	8022946 <_raise_r+0x12>

08022984 <raise>:
 8022984:	4b02      	ldr	r3, [pc, #8]	@ (8022990 <raise+0xc>)
 8022986:	4601      	mov	r1, r0
 8022988:	6818      	ldr	r0, [r3, #0]
 802298a:	f7ff bfd3 	b.w	8022934 <_raise_r>
 802298e:	bf00      	nop
 8022990:	240000e8 	.word	0x240000e8

08022994 <_close_r>:
 8022994:	b538      	push	{r3, r4, r5, lr}
 8022996:	4d06      	ldr	r5, [pc, #24]	@ (80229b0 <_close_r+0x1c>)
 8022998:	2300      	movs	r3, #0
 802299a:	4604      	mov	r4, r0
 802299c:	4608      	mov	r0, r1
 802299e:	602b      	str	r3, [r5, #0]
 80229a0:	f7de fe8c 	bl	80016bc <_close>
 80229a4:	1c43      	adds	r3, r0, #1
 80229a6:	d102      	bne.n	80229ae <_close_r+0x1a>
 80229a8:	682b      	ldr	r3, [r5, #0]
 80229aa:	b103      	cbz	r3, 80229ae <_close_r+0x1a>
 80229ac:	6023      	str	r3, [r4, #0]
 80229ae:	bd38      	pop	{r3, r4, r5, pc}
 80229b0:	24029024 	.word	0x24029024

080229b4 <_lseek_r>:
 80229b4:	b538      	push	{r3, r4, r5, lr}
 80229b6:	4d07      	ldr	r5, [pc, #28]	@ (80229d4 <_lseek_r+0x20>)
 80229b8:	4604      	mov	r4, r0
 80229ba:	4608      	mov	r0, r1
 80229bc:	4611      	mov	r1, r2
 80229be:	2200      	movs	r2, #0
 80229c0:	602a      	str	r2, [r5, #0]
 80229c2:	461a      	mov	r2, r3
 80229c4:	f7de fe84 	bl	80016d0 <_lseek>
 80229c8:	1c43      	adds	r3, r0, #1
 80229ca:	d102      	bne.n	80229d2 <_lseek_r+0x1e>
 80229cc:	682b      	ldr	r3, [r5, #0]
 80229ce:	b103      	cbz	r3, 80229d2 <_lseek_r+0x1e>
 80229d0:	6023      	str	r3, [r4, #0]
 80229d2:	bd38      	pop	{r3, r4, r5, pc}
 80229d4:	24029024 	.word	0x24029024

080229d8 <_read_r>:
 80229d8:	b538      	push	{r3, r4, r5, lr}
 80229da:	4d07      	ldr	r5, [pc, #28]	@ (80229f8 <_read_r+0x20>)
 80229dc:	4604      	mov	r4, r0
 80229de:	4608      	mov	r0, r1
 80229e0:	4611      	mov	r1, r2
 80229e2:	2200      	movs	r2, #0
 80229e4:	602a      	str	r2, [r5, #0]
 80229e6:	461a      	mov	r2, r3
 80229e8:	f7de fe4c 	bl	8001684 <_read>
 80229ec:	1c43      	adds	r3, r0, #1
 80229ee:	d102      	bne.n	80229f6 <_read_r+0x1e>
 80229f0:	682b      	ldr	r3, [r5, #0]
 80229f2:	b103      	cbz	r3, 80229f6 <_read_r+0x1e>
 80229f4:	6023      	str	r3, [r4, #0]
 80229f6:	bd38      	pop	{r3, r4, r5, pc}
 80229f8:	24029024 	.word	0x24029024

080229fc <_kill_r>:
 80229fc:	b538      	push	{r3, r4, r5, lr}
 80229fe:	4d07      	ldr	r5, [pc, #28]	@ (8022a1c <_kill_r+0x20>)
 8022a00:	2300      	movs	r3, #0
 8022a02:	4604      	mov	r4, r0
 8022a04:	4608      	mov	r0, r1
 8022a06:	4611      	mov	r1, r2
 8022a08:	602b      	str	r3, [r5, #0]
 8022a0a:	f7de fe2d 	bl	8001668 <_kill>
 8022a0e:	1c43      	adds	r3, r0, #1
 8022a10:	d102      	bne.n	8022a18 <_kill_r+0x1c>
 8022a12:	682b      	ldr	r3, [r5, #0]
 8022a14:	b103      	cbz	r3, 8022a18 <_kill_r+0x1c>
 8022a16:	6023      	str	r3, [r4, #0]
 8022a18:	bd38      	pop	{r3, r4, r5, pc}
 8022a1a:	bf00      	nop
 8022a1c:	24029024 	.word	0x24029024

08022a20 <_getpid_r>:
 8022a20:	f7de be20 	b.w	8001664 <_getpid>

08022a24 <_sbrk_r>:
 8022a24:	b538      	push	{r3, r4, r5, lr}
 8022a26:	4d06      	ldr	r5, [pc, #24]	@ (8022a40 <_sbrk_r+0x1c>)
 8022a28:	2300      	movs	r3, #0
 8022a2a:	4604      	mov	r4, r0
 8022a2c:	4608      	mov	r0, r1
 8022a2e:	602b      	str	r3, [r5, #0]
 8022a30:	f7de fe50 	bl	80016d4 <_sbrk>
 8022a34:	1c43      	adds	r3, r0, #1
 8022a36:	d102      	bne.n	8022a3e <_sbrk_r+0x1a>
 8022a38:	682b      	ldr	r3, [r5, #0]
 8022a3a:	b103      	cbz	r3, 8022a3e <_sbrk_r+0x1a>
 8022a3c:	6023      	str	r3, [r4, #0]
 8022a3e:	bd38      	pop	{r3, r4, r5, pc}
 8022a40:	24029024 	.word	0x24029024

08022a44 <_write_r>:
 8022a44:	b538      	push	{r3, r4, r5, lr}
 8022a46:	4d07      	ldr	r5, [pc, #28]	@ (8022a64 <_write_r+0x20>)
 8022a48:	4604      	mov	r4, r0
 8022a4a:	4608      	mov	r0, r1
 8022a4c:	4611      	mov	r1, r2
 8022a4e:	2200      	movs	r2, #0
 8022a50:	602a      	str	r2, [r5, #0]
 8022a52:	461a      	mov	r2, r3
 8022a54:	f7de fe24 	bl	80016a0 <_write>
 8022a58:	1c43      	adds	r3, r0, #1
 8022a5a:	d102      	bne.n	8022a62 <_write_r+0x1e>
 8022a5c:	682b      	ldr	r3, [r5, #0]
 8022a5e:	b103      	cbz	r3, 8022a62 <_write_r+0x1e>
 8022a60:	6023      	str	r3, [r4, #0]
 8022a62:	bd38      	pop	{r3, r4, r5, pc}
 8022a64:	24029024 	.word	0x24029024

08022a68 <__errno>:
 8022a68:	4b01      	ldr	r3, [pc, #4]	@ (8022a70 <__errno+0x8>)
 8022a6a:	6818      	ldr	r0, [r3, #0]
 8022a6c:	4770      	bx	lr
 8022a6e:	bf00      	nop
 8022a70:	240000e8 	.word	0x240000e8

08022a74 <__libc_init_array>:
 8022a74:	b570      	push	{r4, r5, r6, lr}
 8022a76:	4d0d      	ldr	r5, [pc, #52]	@ (8022aac <__libc_init_array+0x38>)
 8022a78:	4c0d      	ldr	r4, [pc, #52]	@ (8022ab0 <__libc_init_array+0x3c>)
 8022a7a:	1b64      	subs	r4, r4, r5
 8022a7c:	10a4      	asrs	r4, r4, #2
 8022a7e:	2600      	movs	r6, #0
 8022a80:	42a6      	cmp	r6, r4
 8022a82:	d109      	bne.n	8022a98 <__libc_init_array+0x24>
 8022a84:	4d0b      	ldr	r5, [pc, #44]	@ (8022ab4 <__libc_init_array+0x40>)
 8022a86:	4c0c      	ldr	r4, [pc, #48]	@ (8022ab8 <__libc_init_array+0x44>)
 8022a88:	f000 fcd0 	bl	802342c <_init>
 8022a8c:	1b64      	subs	r4, r4, r5
 8022a8e:	10a4      	asrs	r4, r4, #2
 8022a90:	2600      	movs	r6, #0
 8022a92:	42a6      	cmp	r6, r4
 8022a94:	d105      	bne.n	8022aa2 <__libc_init_array+0x2e>
 8022a96:	bd70      	pop	{r4, r5, r6, pc}
 8022a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8022a9c:	4798      	blx	r3
 8022a9e:	3601      	adds	r6, #1
 8022aa0:	e7ee      	b.n	8022a80 <__libc_init_array+0xc>
 8022aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8022aa6:	4798      	blx	r3
 8022aa8:	3601      	adds	r6, #1
 8022aaa:	e7f2      	b.n	8022a92 <__libc_init_array+0x1e>
 8022aac:	08028b7c 	.word	0x08028b7c
 8022ab0:	08028b7c 	.word	0x08028b7c
 8022ab4:	08028b7c 	.word	0x08028b7c
 8022ab8:	08028b98 	.word	0x08028b98

08022abc <__retarget_lock_init_recursive>:
 8022abc:	4770      	bx	lr

08022abe <__retarget_lock_acquire_recursive>:
 8022abe:	4770      	bx	lr

08022ac0 <__retarget_lock_release_recursive>:
 8022ac0:	4770      	bx	lr

08022ac2 <memcpy>:
 8022ac2:	440a      	add	r2, r1
 8022ac4:	4291      	cmp	r1, r2
 8022ac6:	f100 33ff 	add.w	r3, r0, #4294967295
 8022aca:	d100      	bne.n	8022ace <memcpy+0xc>
 8022acc:	4770      	bx	lr
 8022ace:	b510      	push	{r4, lr}
 8022ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022ad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022ad8:	4291      	cmp	r1, r2
 8022ada:	d1f9      	bne.n	8022ad0 <memcpy+0xe>
 8022adc:	bd10      	pop	{r4, pc}
	...

08022ae0 <__register_exitproc>:
 8022ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ae4:	4d27      	ldr	r5, [pc, #156]	@ (8022b84 <__register_exitproc+0xa4>)
 8022ae6:	4607      	mov	r7, r0
 8022ae8:	6828      	ldr	r0, [r5, #0]
 8022aea:	4691      	mov	r9, r2
 8022aec:	460e      	mov	r6, r1
 8022aee:	4698      	mov	r8, r3
 8022af0:	f7ff ffe5 	bl	8022abe <__retarget_lock_acquire_recursive>
 8022af4:	4a24      	ldr	r2, [pc, #144]	@ (8022b88 <__register_exitproc+0xa8>)
 8022af6:	6814      	ldr	r4, [r2, #0]
 8022af8:	b93c      	cbnz	r4, 8022b0a <__register_exitproc+0x2a>
 8022afa:	4b24      	ldr	r3, [pc, #144]	@ (8022b8c <__register_exitproc+0xac>)
 8022afc:	6013      	str	r3, [r2, #0]
 8022afe:	4a24      	ldr	r2, [pc, #144]	@ (8022b90 <__register_exitproc+0xb0>)
 8022b00:	b112      	cbz	r2, 8022b08 <__register_exitproc+0x28>
 8022b02:	6812      	ldr	r2, [r2, #0]
 8022b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8022b08:	4c20      	ldr	r4, [pc, #128]	@ (8022b8c <__register_exitproc+0xac>)
 8022b0a:	6863      	ldr	r3, [r4, #4]
 8022b0c:	2b1f      	cmp	r3, #31
 8022b0e:	dd06      	ble.n	8022b1e <__register_exitproc+0x3e>
 8022b10:	6828      	ldr	r0, [r5, #0]
 8022b12:	f7ff ffd5 	bl	8022ac0 <__retarget_lock_release_recursive>
 8022b16:	f04f 30ff 	mov.w	r0, #4294967295
 8022b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b1e:	b32f      	cbz	r7, 8022b6c <__register_exitproc+0x8c>
 8022b20:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8022b24:	b968      	cbnz	r0, 8022b42 <__register_exitproc+0x62>
 8022b26:	4b1b      	ldr	r3, [pc, #108]	@ (8022b94 <__register_exitproc+0xb4>)
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d0f1      	beq.n	8022b10 <__register_exitproc+0x30>
 8022b2c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8022b30:	f7ff fc6e 	bl	8022410 <malloc>
 8022b34:	2800      	cmp	r0, #0
 8022b36:	d0eb      	beq.n	8022b10 <__register_exitproc+0x30>
 8022b38:	2300      	movs	r3, #0
 8022b3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8022b3e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8022b42:	6863      	ldr	r3, [r4, #4]
 8022b44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022b48:	2201      	movs	r2, #1
 8022b4a:	409a      	lsls	r2, r3
 8022b4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022b50:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8022b54:	4313      	orrs	r3, r2
 8022b56:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8022b5a:	2f02      	cmp	r7, #2
 8022b5c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8022b60:	bf02      	ittt	eq
 8022b62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8022b66:	4313      	orreq	r3, r2
 8022b68:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8022b6c:	6863      	ldr	r3, [r4, #4]
 8022b6e:	6828      	ldr	r0, [r5, #0]
 8022b70:	1c5a      	adds	r2, r3, #1
 8022b72:	3302      	adds	r3, #2
 8022b74:	6062      	str	r2, [r4, #4]
 8022b76:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8022b7a:	f7ff ffa1 	bl	8022ac0 <__retarget_lock_release_recursive>
 8022b7e:	2000      	movs	r0, #0
 8022b80:	e7cb      	b.n	8022b1a <__register_exitproc+0x3a>
 8022b82:	bf00      	nop
 8022b84:	24000138 	.word	0x24000138
 8022b88:	240290b8 	.word	0x240290b8
 8022b8c:	2402902c 	.word	0x2402902c
 8022b90:	080267b4 	.word	0x080267b4
 8022b94:	08022411 	.word	0x08022411

08022b98 <_free_r>:
 8022b98:	b538      	push	{r3, r4, r5, lr}
 8022b9a:	4605      	mov	r5, r0
 8022b9c:	2900      	cmp	r1, #0
 8022b9e:	d041      	beq.n	8022c24 <_free_r+0x8c>
 8022ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ba4:	1f0c      	subs	r4, r1, #4
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	bfb8      	it	lt
 8022baa:	18e4      	addlt	r4, r4, r3
 8022bac:	f7ff fce2 	bl	8022574 <__malloc_lock>
 8022bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8022c28 <_free_r+0x90>)
 8022bb2:	6813      	ldr	r3, [r2, #0]
 8022bb4:	b933      	cbnz	r3, 8022bc4 <_free_r+0x2c>
 8022bb6:	6063      	str	r3, [r4, #4]
 8022bb8:	6014      	str	r4, [r2, #0]
 8022bba:	4628      	mov	r0, r5
 8022bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022bc0:	f7ff bcde 	b.w	8022580 <__malloc_unlock>
 8022bc4:	42a3      	cmp	r3, r4
 8022bc6:	d908      	bls.n	8022bda <_free_r+0x42>
 8022bc8:	6820      	ldr	r0, [r4, #0]
 8022bca:	1821      	adds	r1, r4, r0
 8022bcc:	428b      	cmp	r3, r1
 8022bce:	bf01      	itttt	eq
 8022bd0:	6819      	ldreq	r1, [r3, #0]
 8022bd2:	685b      	ldreq	r3, [r3, #4]
 8022bd4:	1809      	addeq	r1, r1, r0
 8022bd6:	6021      	streq	r1, [r4, #0]
 8022bd8:	e7ed      	b.n	8022bb6 <_free_r+0x1e>
 8022bda:	461a      	mov	r2, r3
 8022bdc:	685b      	ldr	r3, [r3, #4]
 8022bde:	b10b      	cbz	r3, 8022be4 <_free_r+0x4c>
 8022be0:	42a3      	cmp	r3, r4
 8022be2:	d9fa      	bls.n	8022bda <_free_r+0x42>
 8022be4:	6811      	ldr	r1, [r2, #0]
 8022be6:	1850      	adds	r0, r2, r1
 8022be8:	42a0      	cmp	r0, r4
 8022bea:	d10b      	bne.n	8022c04 <_free_r+0x6c>
 8022bec:	6820      	ldr	r0, [r4, #0]
 8022bee:	4401      	add	r1, r0
 8022bf0:	1850      	adds	r0, r2, r1
 8022bf2:	4283      	cmp	r3, r0
 8022bf4:	6011      	str	r1, [r2, #0]
 8022bf6:	d1e0      	bne.n	8022bba <_free_r+0x22>
 8022bf8:	6818      	ldr	r0, [r3, #0]
 8022bfa:	685b      	ldr	r3, [r3, #4]
 8022bfc:	6053      	str	r3, [r2, #4]
 8022bfe:	4408      	add	r0, r1
 8022c00:	6010      	str	r0, [r2, #0]
 8022c02:	e7da      	b.n	8022bba <_free_r+0x22>
 8022c04:	d902      	bls.n	8022c0c <_free_r+0x74>
 8022c06:	230c      	movs	r3, #12
 8022c08:	602b      	str	r3, [r5, #0]
 8022c0a:	e7d6      	b.n	8022bba <_free_r+0x22>
 8022c0c:	6820      	ldr	r0, [r4, #0]
 8022c0e:	1821      	adds	r1, r4, r0
 8022c10:	428b      	cmp	r3, r1
 8022c12:	bf04      	itt	eq
 8022c14:	6819      	ldreq	r1, [r3, #0]
 8022c16:	685b      	ldreq	r3, [r3, #4]
 8022c18:	6063      	str	r3, [r4, #4]
 8022c1a:	bf04      	itt	eq
 8022c1c:	1809      	addeq	r1, r1, r0
 8022c1e:	6021      	streq	r1, [r4, #0]
 8022c20:	6054      	str	r4, [r2, #4]
 8022c22:	e7ca      	b.n	8022bba <_free_r+0x22>
 8022c24:	bd38      	pop	{r3, r4, r5, pc}
 8022c26:	bf00      	nop
 8022c28:	24028ee4 	.word	0x24028ee4

08022c2c <__sfputc_r>:
 8022c2c:	6893      	ldr	r3, [r2, #8]
 8022c2e:	3b01      	subs	r3, #1
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	b410      	push	{r4}
 8022c34:	6093      	str	r3, [r2, #8]
 8022c36:	da08      	bge.n	8022c4a <__sfputc_r+0x1e>
 8022c38:	6994      	ldr	r4, [r2, #24]
 8022c3a:	42a3      	cmp	r3, r4
 8022c3c:	db01      	blt.n	8022c42 <__sfputc_r+0x16>
 8022c3e:	290a      	cmp	r1, #10
 8022c40:	d103      	bne.n	8022c4a <__sfputc_r+0x1e>
 8022c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c46:	f7ff bdc6 	b.w	80227d6 <__swbuf_r>
 8022c4a:	6813      	ldr	r3, [r2, #0]
 8022c4c:	1c58      	adds	r0, r3, #1
 8022c4e:	6010      	str	r0, [r2, #0]
 8022c50:	7019      	strb	r1, [r3, #0]
 8022c52:	4608      	mov	r0, r1
 8022c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c58:	4770      	bx	lr

08022c5a <__sfputs_r>:
 8022c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c5c:	4606      	mov	r6, r0
 8022c5e:	460f      	mov	r7, r1
 8022c60:	4614      	mov	r4, r2
 8022c62:	18d5      	adds	r5, r2, r3
 8022c64:	42ac      	cmp	r4, r5
 8022c66:	d101      	bne.n	8022c6c <__sfputs_r+0x12>
 8022c68:	2000      	movs	r0, #0
 8022c6a:	e007      	b.n	8022c7c <__sfputs_r+0x22>
 8022c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c70:	463a      	mov	r2, r7
 8022c72:	4630      	mov	r0, r6
 8022c74:	f7ff ffda 	bl	8022c2c <__sfputc_r>
 8022c78:	1c43      	adds	r3, r0, #1
 8022c7a:	d1f3      	bne.n	8022c64 <__sfputs_r+0xa>
 8022c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022c80 <_vfiprintf_r>:
 8022c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c84:	460d      	mov	r5, r1
 8022c86:	b09d      	sub	sp, #116	@ 0x74
 8022c88:	4614      	mov	r4, r2
 8022c8a:	4698      	mov	r8, r3
 8022c8c:	4606      	mov	r6, r0
 8022c8e:	b118      	cbz	r0, 8022c98 <_vfiprintf_r+0x18>
 8022c90:	6a03      	ldr	r3, [r0, #32]
 8022c92:	b90b      	cbnz	r3, 8022c98 <_vfiprintf_r+0x18>
 8022c94:	f7ff fd14 	bl	80226c0 <__sinit>
 8022c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022c9a:	07d9      	lsls	r1, r3, #31
 8022c9c:	d405      	bmi.n	8022caa <_vfiprintf_r+0x2a>
 8022c9e:	89ab      	ldrh	r3, [r5, #12]
 8022ca0:	059a      	lsls	r2, r3, #22
 8022ca2:	d402      	bmi.n	8022caa <_vfiprintf_r+0x2a>
 8022ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022ca6:	f7ff ff0a 	bl	8022abe <__retarget_lock_acquire_recursive>
 8022caa:	89ab      	ldrh	r3, [r5, #12]
 8022cac:	071b      	lsls	r3, r3, #28
 8022cae:	d501      	bpl.n	8022cb4 <_vfiprintf_r+0x34>
 8022cb0:	692b      	ldr	r3, [r5, #16]
 8022cb2:	b99b      	cbnz	r3, 8022cdc <_vfiprintf_r+0x5c>
 8022cb4:	4629      	mov	r1, r5
 8022cb6:	4630      	mov	r0, r6
 8022cb8:	f7ff fdcc 	bl	8022854 <__swsetup_r>
 8022cbc:	b170      	cbz	r0, 8022cdc <_vfiprintf_r+0x5c>
 8022cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022cc0:	07dc      	lsls	r4, r3, #31
 8022cc2:	d504      	bpl.n	8022cce <_vfiprintf_r+0x4e>
 8022cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8022cc8:	b01d      	add	sp, #116	@ 0x74
 8022cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cce:	89ab      	ldrh	r3, [r5, #12]
 8022cd0:	0598      	lsls	r0, r3, #22
 8022cd2:	d4f7      	bmi.n	8022cc4 <_vfiprintf_r+0x44>
 8022cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022cd6:	f7ff fef3 	bl	8022ac0 <__retarget_lock_release_recursive>
 8022cda:	e7f3      	b.n	8022cc4 <_vfiprintf_r+0x44>
 8022cdc:	2300      	movs	r3, #0
 8022cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ce0:	2320      	movs	r3, #32
 8022ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8022cea:	2330      	movs	r3, #48	@ 0x30
 8022cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022e9c <_vfiprintf_r+0x21c>
 8022cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022cf4:	f04f 0901 	mov.w	r9, #1
 8022cf8:	4623      	mov	r3, r4
 8022cfa:	469a      	mov	sl, r3
 8022cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d00:	b10a      	cbz	r2, 8022d06 <_vfiprintf_r+0x86>
 8022d02:	2a25      	cmp	r2, #37	@ 0x25
 8022d04:	d1f9      	bne.n	8022cfa <_vfiprintf_r+0x7a>
 8022d06:	ebba 0b04 	subs.w	fp, sl, r4
 8022d0a:	d00b      	beq.n	8022d24 <_vfiprintf_r+0xa4>
 8022d0c:	465b      	mov	r3, fp
 8022d0e:	4622      	mov	r2, r4
 8022d10:	4629      	mov	r1, r5
 8022d12:	4630      	mov	r0, r6
 8022d14:	f7ff ffa1 	bl	8022c5a <__sfputs_r>
 8022d18:	3001      	adds	r0, #1
 8022d1a:	f000 80a7 	beq.w	8022e6c <_vfiprintf_r+0x1ec>
 8022d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022d20:	445a      	add	r2, fp
 8022d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8022d24:	f89a 3000 	ldrb.w	r3, [sl]
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	f000 809f 	beq.w	8022e6c <_vfiprintf_r+0x1ec>
 8022d2e:	2300      	movs	r3, #0
 8022d30:	f04f 32ff 	mov.w	r2, #4294967295
 8022d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d38:	f10a 0a01 	add.w	sl, sl, #1
 8022d3c:	9304      	str	r3, [sp, #16]
 8022d3e:	9307      	str	r3, [sp, #28]
 8022d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8022d46:	4654      	mov	r4, sl
 8022d48:	2205      	movs	r2, #5
 8022d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d4e:	4853      	ldr	r0, [pc, #332]	@ (8022e9c <_vfiprintf_r+0x21c>)
 8022d50:	f7dd fac6 	bl	80002e0 <memchr>
 8022d54:	9a04      	ldr	r2, [sp, #16]
 8022d56:	b9d8      	cbnz	r0, 8022d90 <_vfiprintf_r+0x110>
 8022d58:	06d1      	lsls	r1, r2, #27
 8022d5a:	bf44      	itt	mi
 8022d5c:	2320      	movmi	r3, #32
 8022d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d62:	0713      	lsls	r3, r2, #28
 8022d64:	bf44      	itt	mi
 8022d66:	232b      	movmi	r3, #43	@ 0x2b
 8022d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8022d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8022d72:	d015      	beq.n	8022da0 <_vfiprintf_r+0x120>
 8022d74:	9a07      	ldr	r2, [sp, #28]
 8022d76:	4654      	mov	r4, sl
 8022d78:	2000      	movs	r0, #0
 8022d7a:	f04f 0c0a 	mov.w	ip, #10
 8022d7e:	4621      	mov	r1, r4
 8022d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022d84:	3b30      	subs	r3, #48	@ 0x30
 8022d86:	2b09      	cmp	r3, #9
 8022d88:	d94b      	bls.n	8022e22 <_vfiprintf_r+0x1a2>
 8022d8a:	b1b0      	cbz	r0, 8022dba <_vfiprintf_r+0x13a>
 8022d8c:	9207      	str	r2, [sp, #28]
 8022d8e:	e014      	b.n	8022dba <_vfiprintf_r+0x13a>
 8022d90:	eba0 0308 	sub.w	r3, r0, r8
 8022d94:	fa09 f303 	lsl.w	r3, r9, r3
 8022d98:	4313      	orrs	r3, r2
 8022d9a:	9304      	str	r3, [sp, #16]
 8022d9c:	46a2      	mov	sl, r4
 8022d9e:	e7d2      	b.n	8022d46 <_vfiprintf_r+0xc6>
 8022da0:	9b03      	ldr	r3, [sp, #12]
 8022da2:	1d19      	adds	r1, r3, #4
 8022da4:	681b      	ldr	r3, [r3, #0]
 8022da6:	9103      	str	r1, [sp, #12]
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	bfbb      	ittet	lt
 8022dac:	425b      	neglt	r3, r3
 8022dae:	f042 0202 	orrlt.w	r2, r2, #2
 8022db2:	9307      	strge	r3, [sp, #28]
 8022db4:	9307      	strlt	r3, [sp, #28]
 8022db6:	bfb8      	it	lt
 8022db8:	9204      	strlt	r2, [sp, #16]
 8022dba:	7823      	ldrb	r3, [r4, #0]
 8022dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8022dbe:	d10a      	bne.n	8022dd6 <_vfiprintf_r+0x156>
 8022dc0:	7863      	ldrb	r3, [r4, #1]
 8022dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8022dc4:	d132      	bne.n	8022e2c <_vfiprintf_r+0x1ac>
 8022dc6:	9b03      	ldr	r3, [sp, #12]
 8022dc8:	1d1a      	adds	r2, r3, #4
 8022dca:	681b      	ldr	r3, [r3, #0]
 8022dcc:	9203      	str	r2, [sp, #12]
 8022dce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022dd2:	3402      	adds	r4, #2
 8022dd4:	9305      	str	r3, [sp, #20]
 8022dd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022eac <_vfiprintf_r+0x22c>
 8022dda:	7821      	ldrb	r1, [r4, #0]
 8022ddc:	2203      	movs	r2, #3
 8022dde:	4650      	mov	r0, sl
 8022de0:	f7dd fa7e 	bl	80002e0 <memchr>
 8022de4:	b138      	cbz	r0, 8022df6 <_vfiprintf_r+0x176>
 8022de6:	9b04      	ldr	r3, [sp, #16]
 8022de8:	eba0 000a 	sub.w	r0, r0, sl
 8022dec:	2240      	movs	r2, #64	@ 0x40
 8022dee:	4082      	lsls	r2, r0
 8022df0:	4313      	orrs	r3, r2
 8022df2:	3401      	adds	r4, #1
 8022df4:	9304      	str	r3, [sp, #16]
 8022df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dfa:	4829      	ldr	r0, [pc, #164]	@ (8022ea0 <_vfiprintf_r+0x220>)
 8022dfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022e00:	2206      	movs	r2, #6
 8022e02:	f7dd fa6d 	bl	80002e0 <memchr>
 8022e06:	2800      	cmp	r0, #0
 8022e08:	d03f      	beq.n	8022e8a <_vfiprintf_r+0x20a>
 8022e0a:	4b26      	ldr	r3, [pc, #152]	@ (8022ea4 <_vfiprintf_r+0x224>)
 8022e0c:	bb1b      	cbnz	r3, 8022e56 <_vfiprintf_r+0x1d6>
 8022e0e:	9b03      	ldr	r3, [sp, #12]
 8022e10:	3307      	adds	r3, #7
 8022e12:	f023 0307 	bic.w	r3, r3, #7
 8022e16:	3308      	adds	r3, #8
 8022e18:	9303      	str	r3, [sp, #12]
 8022e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e1c:	443b      	add	r3, r7
 8022e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e20:	e76a      	b.n	8022cf8 <_vfiprintf_r+0x78>
 8022e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e26:	460c      	mov	r4, r1
 8022e28:	2001      	movs	r0, #1
 8022e2a:	e7a8      	b.n	8022d7e <_vfiprintf_r+0xfe>
 8022e2c:	2300      	movs	r3, #0
 8022e2e:	3401      	adds	r4, #1
 8022e30:	9305      	str	r3, [sp, #20]
 8022e32:	4619      	mov	r1, r3
 8022e34:	f04f 0c0a 	mov.w	ip, #10
 8022e38:	4620      	mov	r0, r4
 8022e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e3e:	3a30      	subs	r2, #48	@ 0x30
 8022e40:	2a09      	cmp	r2, #9
 8022e42:	d903      	bls.n	8022e4c <_vfiprintf_r+0x1cc>
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	d0c6      	beq.n	8022dd6 <_vfiprintf_r+0x156>
 8022e48:	9105      	str	r1, [sp, #20]
 8022e4a:	e7c4      	b.n	8022dd6 <_vfiprintf_r+0x156>
 8022e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022e50:	4604      	mov	r4, r0
 8022e52:	2301      	movs	r3, #1
 8022e54:	e7f0      	b.n	8022e38 <_vfiprintf_r+0x1b8>
 8022e56:	ab03      	add	r3, sp, #12
 8022e58:	9300      	str	r3, [sp, #0]
 8022e5a:	462a      	mov	r2, r5
 8022e5c:	4b12      	ldr	r3, [pc, #72]	@ (8022ea8 <_vfiprintf_r+0x228>)
 8022e5e:	a904      	add	r1, sp, #16
 8022e60:	4630      	mov	r0, r6
 8022e62:	f3af 8000 	nop.w
 8022e66:	4607      	mov	r7, r0
 8022e68:	1c78      	adds	r0, r7, #1
 8022e6a:	d1d6      	bne.n	8022e1a <_vfiprintf_r+0x19a>
 8022e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022e6e:	07d9      	lsls	r1, r3, #31
 8022e70:	d405      	bmi.n	8022e7e <_vfiprintf_r+0x1fe>
 8022e72:	89ab      	ldrh	r3, [r5, #12]
 8022e74:	059a      	lsls	r2, r3, #22
 8022e76:	d402      	bmi.n	8022e7e <_vfiprintf_r+0x1fe>
 8022e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022e7a:	f7ff fe21 	bl	8022ac0 <__retarget_lock_release_recursive>
 8022e7e:	89ab      	ldrh	r3, [r5, #12]
 8022e80:	065b      	lsls	r3, r3, #25
 8022e82:	f53f af1f 	bmi.w	8022cc4 <_vfiprintf_r+0x44>
 8022e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e88:	e71e      	b.n	8022cc8 <_vfiprintf_r+0x48>
 8022e8a:	ab03      	add	r3, sp, #12
 8022e8c:	9300      	str	r3, [sp, #0]
 8022e8e:	462a      	mov	r2, r5
 8022e90:	4b05      	ldr	r3, [pc, #20]	@ (8022ea8 <_vfiprintf_r+0x228>)
 8022e92:	a904      	add	r1, sp, #16
 8022e94:	4630      	mov	r0, r6
 8022e96:	f000 f879 	bl	8022f8c <_printf_i>
 8022e9a:	e7e4      	b.n	8022e66 <_vfiprintf_r+0x1e6>
 8022e9c:	080267b8 	.word	0x080267b8
 8022ea0:	080267c2 	.word	0x080267c2
 8022ea4:	00000000 	.word	0x00000000
 8022ea8:	08022c5b 	.word	0x08022c5b
 8022eac:	080267be 	.word	0x080267be

08022eb0 <_printf_common>:
 8022eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022eb4:	4616      	mov	r6, r2
 8022eb6:	4698      	mov	r8, r3
 8022eb8:	688a      	ldr	r2, [r1, #8]
 8022eba:	690b      	ldr	r3, [r1, #16]
 8022ebc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022ec0:	4293      	cmp	r3, r2
 8022ec2:	bfb8      	it	lt
 8022ec4:	4613      	movlt	r3, r2
 8022ec6:	6033      	str	r3, [r6, #0]
 8022ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022ecc:	4607      	mov	r7, r0
 8022ece:	460c      	mov	r4, r1
 8022ed0:	b10a      	cbz	r2, 8022ed6 <_printf_common+0x26>
 8022ed2:	3301      	adds	r3, #1
 8022ed4:	6033      	str	r3, [r6, #0]
 8022ed6:	6823      	ldr	r3, [r4, #0]
 8022ed8:	0699      	lsls	r1, r3, #26
 8022eda:	bf42      	ittt	mi
 8022edc:	6833      	ldrmi	r3, [r6, #0]
 8022ede:	3302      	addmi	r3, #2
 8022ee0:	6033      	strmi	r3, [r6, #0]
 8022ee2:	6825      	ldr	r5, [r4, #0]
 8022ee4:	f015 0506 	ands.w	r5, r5, #6
 8022ee8:	d106      	bne.n	8022ef8 <_printf_common+0x48>
 8022eea:	f104 0a19 	add.w	sl, r4, #25
 8022eee:	68e3      	ldr	r3, [r4, #12]
 8022ef0:	6832      	ldr	r2, [r6, #0]
 8022ef2:	1a9b      	subs	r3, r3, r2
 8022ef4:	42ab      	cmp	r3, r5
 8022ef6:	dc26      	bgt.n	8022f46 <_printf_common+0x96>
 8022ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022efc:	6822      	ldr	r2, [r4, #0]
 8022efe:	3b00      	subs	r3, #0
 8022f00:	bf18      	it	ne
 8022f02:	2301      	movne	r3, #1
 8022f04:	0692      	lsls	r2, r2, #26
 8022f06:	d42b      	bmi.n	8022f60 <_printf_common+0xb0>
 8022f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022f0c:	4641      	mov	r1, r8
 8022f0e:	4638      	mov	r0, r7
 8022f10:	47c8      	blx	r9
 8022f12:	3001      	adds	r0, #1
 8022f14:	d01e      	beq.n	8022f54 <_printf_common+0xa4>
 8022f16:	6823      	ldr	r3, [r4, #0]
 8022f18:	6922      	ldr	r2, [r4, #16]
 8022f1a:	f003 0306 	and.w	r3, r3, #6
 8022f1e:	2b04      	cmp	r3, #4
 8022f20:	bf02      	ittt	eq
 8022f22:	68e5      	ldreq	r5, [r4, #12]
 8022f24:	6833      	ldreq	r3, [r6, #0]
 8022f26:	1aed      	subeq	r5, r5, r3
 8022f28:	68a3      	ldr	r3, [r4, #8]
 8022f2a:	bf0c      	ite	eq
 8022f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022f30:	2500      	movne	r5, #0
 8022f32:	4293      	cmp	r3, r2
 8022f34:	bfc4      	itt	gt
 8022f36:	1a9b      	subgt	r3, r3, r2
 8022f38:	18ed      	addgt	r5, r5, r3
 8022f3a:	2600      	movs	r6, #0
 8022f3c:	341a      	adds	r4, #26
 8022f3e:	42b5      	cmp	r5, r6
 8022f40:	d11a      	bne.n	8022f78 <_printf_common+0xc8>
 8022f42:	2000      	movs	r0, #0
 8022f44:	e008      	b.n	8022f58 <_printf_common+0xa8>
 8022f46:	2301      	movs	r3, #1
 8022f48:	4652      	mov	r2, sl
 8022f4a:	4641      	mov	r1, r8
 8022f4c:	4638      	mov	r0, r7
 8022f4e:	47c8      	blx	r9
 8022f50:	3001      	adds	r0, #1
 8022f52:	d103      	bne.n	8022f5c <_printf_common+0xac>
 8022f54:	f04f 30ff 	mov.w	r0, #4294967295
 8022f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f5c:	3501      	adds	r5, #1
 8022f5e:	e7c6      	b.n	8022eee <_printf_common+0x3e>
 8022f60:	18e1      	adds	r1, r4, r3
 8022f62:	1c5a      	adds	r2, r3, #1
 8022f64:	2030      	movs	r0, #48	@ 0x30
 8022f66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022f6a:	4422      	add	r2, r4
 8022f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022f74:	3302      	adds	r3, #2
 8022f76:	e7c7      	b.n	8022f08 <_printf_common+0x58>
 8022f78:	2301      	movs	r3, #1
 8022f7a:	4622      	mov	r2, r4
 8022f7c:	4641      	mov	r1, r8
 8022f7e:	4638      	mov	r0, r7
 8022f80:	47c8      	blx	r9
 8022f82:	3001      	adds	r0, #1
 8022f84:	d0e6      	beq.n	8022f54 <_printf_common+0xa4>
 8022f86:	3601      	adds	r6, #1
 8022f88:	e7d9      	b.n	8022f3e <_printf_common+0x8e>
	...

08022f8c <_printf_i>:
 8022f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022f90:	7e0f      	ldrb	r7, [r1, #24]
 8022f92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022f94:	2f78      	cmp	r7, #120	@ 0x78
 8022f96:	4691      	mov	r9, r2
 8022f98:	4680      	mov	r8, r0
 8022f9a:	460c      	mov	r4, r1
 8022f9c:	469a      	mov	sl, r3
 8022f9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022fa2:	d807      	bhi.n	8022fb4 <_printf_i+0x28>
 8022fa4:	2f62      	cmp	r7, #98	@ 0x62
 8022fa6:	d80a      	bhi.n	8022fbe <_printf_i+0x32>
 8022fa8:	2f00      	cmp	r7, #0
 8022faa:	f000 80d2 	beq.w	8023152 <_printf_i+0x1c6>
 8022fae:	2f58      	cmp	r7, #88	@ 0x58
 8022fb0:	f000 80b9 	beq.w	8023126 <_printf_i+0x19a>
 8022fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022fb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022fbc:	e03a      	b.n	8023034 <_printf_i+0xa8>
 8022fbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022fc2:	2b15      	cmp	r3, #21
 8022fc4:	d8f6      	bhi.n	8022fb4 <_printf_i+0x28>
 8022fc6:	a101      	add	r1, pc, #4	@ (adr r1, 8022fcc <_printf_i+0x40>)
 8022fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022fcc:	08023025 	.word	0x08023025
 8022fd0:	08023039 	.word	0x08023039
 8022fd4:	08022fb5 	.word	0x08022fb5
 8022fd8:	08022fb5 	.word	0x08022fb5
 8022fdc:	08022fb5 	.word	0x08022fb5
 8022fe0:	08022fb5 	.word	0x08022fb5
 8022fe4:	08023039 	.word	0x08023039
 8022fe8:	08022fb5 	.word	0x08022fb5
 8022fec:	08022fb5 	.word	0x08022fb5
 8022ff0:	08022fb5 	.word	0x08022fb5
 8022ff4:	08022fb5 	.word	0x08022fb5
 8022ff8:	08023139 	.word	0x08023139
 8022ffc:	08023063 	.word	0x08023063
 8023000:	080230f3 	.word	0x080230f3
 8023004:	08022fb5 	.word	0x08022fb5
 8023008:	08022fb5 	.word	0x08022fb5
 802300c:	0802315b 	.word	0x0802315b
 8023010:	08022fb5 	.word	0x08022fb5
 8023014:	08023063 	.word	0x08023063
 8023018:	08022fb5 	.word	0x08022fb5
 802301c:	08022fb5 	.word	0x08022fb5
 8023020:	080230fb 	.word	0x080230fb
 8023024:	6833      	ldr	r3, [r6, #0]
 8023026:	1d1a      	adds	r2, r3, #4
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	6032      	str	r2, [r6, #0]
 802302c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023034:	2301      	movs	r3, #1
 8023036:	e09d      	b.n	8023174 <_printf_i+0x1e8>
 8023038:	6833      	ldr	r3, [r6, #0]
 802303a:	6820      	ldr	r0, [r4, #0]
 802303c:	1d19      	adds	r1, r3, #4
 802303e:	6031      	str	r1, [r6, #0]
 8023040:	0606      	lsls	r6, r0, #24
 8023042:	d501      	bpl.n	8023048 <_printf_i+0xbc>
 8023044:	681d      	ldr	r5, [r3, #0]
 8023046:	e003      	b.n	8023050 <_printf_i+0xc4>
 8023048:	0645      	lsls	r5, r0, #25
 802304a:	d5fb      	bpl.n	8023044 <_printf_i+0xb8>
 802304c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023050:	2d00      	cmp	r5, #0
 8023052:	da03      	bge.n	802305c <_printf_i+0xd0>
 8023054:	232d      	movs	r3, #45	@ 0x2d
 8023056:	426d      	negs	r5, r5
 8023058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802305c:	4859      	ldr	r0, [pc, #356]	@ (80231c4 <_printf_i+0x238>)
 802305e:	230a      	movs	r3, #10
 8023060:	e011      	b.n	8023086 <_printf_i+0xfa>
 8023062:	6821      	ldr	r1, [r4, #0]
 8023064:	6833      	ldr	r3, [r6, #0]
 8023066:	0608      	lsls	r0, r1, #24
 8023068:	f853 5b04 	ldr.w	r5, [r3], #4
 802306c:	d402      	bmi.n	8023074 <_printf_i+0xe8>
 802306e:	0649      	lsls	r1, r1, #25
 8023070:	bf48      	it	mi
 8023072:	b2ad      	uxthmi	r5, r5
 8023074:	2f6f      	cmp	r7, #111	@ 0x6f
 8023076:	4853      	ldr	r0, [pc, #332]	@ (80231c4 <_printf_i+0x238>)
 8023078:	6033      	str	r3, [r6, #0]
 802307a:	bf14      	ite	ne
 802307c:	230a      	movne	r3, #10
 802307e:	2308      	moveq	r3, #8
 8023080:	2100      	movs	r1, #0
 8023082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023086:	6866      	ldr	r6, [r4, #4]
 8023088:	60a6      	str	r6, [r4, #8]
 802308a:	2e00      	cmp	r6, #0
 802308c:	bfa2      	ittt	ge
 802308e:	6821      	ldrge	r1, [r4, #0]
 8023090:	f021 0104 	bicge.w	r1, r1, #4
 8023094:	6021      	strge	r1, [r4, #0]
 8023096:	b90d      	cbnz	r5, 802309c <_printf_i+0x110>
 8023098:	2e00      	cmp	r6, #0
 802309a:	d04b      	beq.n	8023134 <_printf_i+0x1a8>
 802309c:	4616      	mov	r6, r2
 802309e:	fbb5 f1f3 	udiv	r1, r5, r3
 80230a2:	fb03 5711 	mls	r7, r3, r1, r5
 80230a6:	5dc7      	ldrb	r7, [r0, r7]
 80230a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80230ac:	462f      	mov	r7, r5
 80230ae:	42bb      	cmp	r3, r7
 80230b0:	460d      	mov	r5, r1
 80230b2:	d9f4      	bls.n	802309e <_printf_i+0x112>
 80230b4:	2b08      	cmp	r3, #8
 80230b6:	d10b      	bne.n	80230d0 <_printf_i+0x144>
 80230b8:	6823      	ldr	r3, [r4, #0]
 80230ba:	07df      	lsls	r7, r3, #31
 80230bc:	d508      	bpl.n	80230d0 <_printf_i+0x144>
 80230be:	6923      	ldr	r3, [r4, #16]
 80230c0:	6861      	ldr	r1, [r4, #4]
 80230c2:	4299      	cmp	r1, r3
 80230c4:	bfde      	ittt	le
 80230c6:	2330      	movle	r3, #48	@ 0x30
 80230c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80230cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80230d0:	1b92      	subs	r2, r2, r6
 80230d2:	6122      	str	r2, [r4, #16]
 80230d4:	f8cd a000 	str.w	sl, [sp]
 80230d8:	464b      	mov	r3, r9
 80230da:	aa03      	add	r2, sp, #12
 80230dc:	4621      	mov	r1, r4
 80230de:	4640      	mov	r0, r8
 80230e0:	f7ff fee6 	bl	8022eb0 <_printf_common>
 80230e4:	3001      	adds	r0, #1
 80230e6:	d14a      	bne.n	802317e <_printf_i+0x1f2>
 80230e8:	f04f 30ff 	mov.w	r0, #4294967295
 80230ec:	b004      	add	sp, #16
 80230ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230f2:	6823      	ldr	r3, [r4, #0]
 80230f4:	f043 0320 	orr.w	r3, r3, #32
 80230f8:	6023      	str	r3, [r4, #0]
 80230fa:	4833      	ldr	r0, [pc, #204]	@ (80231c8 <_printf_i+0x23c>)
 80230fc:	2778      	movs	r7, #120	@ 0x78
 80230fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023102:	6823      	ldr	r3, [r4, #0]
 8023104:	6831      	ldr	r1, [r6, #0]
 8023106:	061f      	lsls	r7, r3, #24
 8023108:	f851 5b04 	ldr.w	r5, [r1], #4
 802310c:	d402      	bmi.n	8023114 <_printf_i+0x188>
 802310e:	065f      	lsls	r7, r3, #25
 8023110:	bf48      	it	mi
 8023112:	b2ad      	uxthmi	r5, r5
 8023114:	6031      	str	r1, [r6, #0]
 8023116:	07d9      	lsls	r1, r3, #31
 8023118:	bf44      	itt	mi
 802311a:	f043 0320 	orrmi.w	r3, r3, #32
 802311e:	6023      	strmi	r3, [r4, #0]
 8023120:	b11d      	cbz	r5, 802312a <_printf_i+0x19e>
 8023122:	2310      	movs	r3, #16
 8023124:	e7ac      	b.n	8023080 <_printf_i+0xf4>
 8023126:	4827      	ldr	r0, [pc, #156]	@ (80231c4 <_printf_i+0x238>)
 8023128:	e7e9      	b.n	80230fe <_printf_i+0x172>
 802312a:	6823      	ldr	r3, [r4, #0]
 802312c:	f023 0320 	bic.w	r3, r3, #32
 8023130:	6023      	str	r3, [r4, #0]
 8023132:	e7f6      	b.n	8023122 <_printf_i+0x196>
 8023134:	4616      	mov	r6, r2
 8023136:	e7bd      	b.n	80230b4 <_printf_i+0x128>
 8023138:	6833      	ldr	r3, [r6, #0]
 802313a:	6825      	ldr	r5, [r4, #0]
 802313c:	6961      	ldr	r1, [r4, #20]
 802313e:	1d18      	adds	r0, r3, #4
 8023140:	6030      	str	r0, [r6, #0]
 8023142:	062e      	lsls	r6, r5, #24
 8023144:	681b      	ldr	r3, [r3, #0]
 8023146:	d501      	bpl.n	802314c <_printf_i+0x1c0>
 8023148:	6019      	str	r1, [r3, #0]
 802314a:	e002      	b.n	8023152 <_printf_i+0x1c6>
 802314c:	0668      	lsls	r0, r5, #25
 802314e:	d5fb      	bpl.n	8023148 <_printf_i+0x1bc>
 8023150:	8019      	strh	r1, [r3, #0]
 8023152:	2300      	movs	r3, #0
 8023154:	6123      	str	r3, [r4, #16]
 8023156:	4616      	mov	r6, r2
 8023158:	e7bc      	b.n	80230d4 <_printf_i+0x148>
 802315a:	6833      	ldr	r3, [r6, #0]
 802315c:	1d1a      	adds	r2, r3, #4
 802315e:	6032      	str	r2, [r6, #0]
 8023160:	681e      	ldr	r6, [r3, #0]
 8023162:	6862      	ldr	r2, [r4, #4]
 8023164:	2100      	movs	r1, #0
 8023166:	4630      	mov	r0, r6
 8023168:	f7dd f8ba 	bl	80002e0 <memchr>
 802316c:	b108      	cbz	r0, 8023172 <_printf_i+0x1e6>
 802316e:	1b80      	subs	r0, r0, r6
 8023170:	6060      	str	r0, [r4, #4]
 8023172:	6863      	ldr	r3, [r4, #4]
 8023174:	6123      	str	r3, [r4, #16]
 8023176:	2300      	movs	r3, #0
 8023178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802317c:	e7aa      	b.n	80230d4 <_printf_i+0x148>
 802317e:	6923      	ldr	r3, [r4, #16]
 8023180:	4632      	mov	r2, r6
 8023182:	4649      	mov	r1, r9
 8023184:	4640      	mov	r0, r8
 8023186:	47d0      	blx	sl
 8023188:	3001      	adds	r0, #1
 802318a:	d0ad      	beq.n	80230e8 <_printf_i+0x15c>
 802318c:	6823      	ldr	r3, [r4, #0]
 802318e:	079b      	lsls	r3, r3, #30
 8023190:	d413      	bmi.n	80231ba <_printf_i+0x22e>
 8023192:	68e0      	ldr	r0, [r4, #12]
 8023194:	9b03      	ldr	r3, [sp, #12]
 8023196:	4298      	cmp	r0, r3
 8023198:	bfb8      	it	lt
 802319a:	4618      	movlt	r0, r3
 802319c:	e7a6      	b.n	80230ec <_printf_i+0x160>
 802319e:	2301      	movs	r3, #1
 80231a0:	4632      	mov	r2, r6
 80231a2:	4649      	mov	r1, r9
 80231a4:	4640      	mov	r0, r8
 80231a6:	47d0      	blx	sl
 80231a8:	3001      	adds	r0, #1
 80231aa:	d09d      	beq.n	80230e8 <_printf_i+0x15c>
 80231ac:	3501      	adds	r5, #1
 80231ae:	68e3      	ldr	r3, [r4, #12]
 80231b0:	9903      	ldr	r1, [sp, #12]
 80231b2:	1a5b      	subs	r3, r3, r1
 80231b4:	42ab      	cmp	r3, r5
 80231b6:	dcf2      	bgt.n	802319e <_printf_i+0x212>
 80231b8:	e7eb      	b.n	8023192 <_printf_i+0x206>
 80231ba:	2500      	movs	r5, #0
 80231bc:	f104 0619 	add.w	r6, r4, #25
 80231c0:	e7f5      	b.n	80231ae <_printf_i+0x222>
 80231c2:	bf00      	nop
 80231c4:	080267c9 	.word	0x080267c9
 80231c8:	080267da 	.word	0x080267da

080231cc <__sflush_r>:
 80231cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80231d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231d4:	0716      	lsls	r6, r2, #28
 80231d6:	4605      	mov	r5, r0
 80231d8:	460c      	mov	r4, r1
 80231da:	d454      	bmi.n	8023286 <__sflush_r+0xba>
 80231dc:	684b      	ldr	r3, [r1, #4]
 80231de:	2b00      	cmp	r3, #0
 80231e0:	dc02      	bgt.n	80231e8 <__sflush_r+0x1c>
 80231e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	dd48      	ble.n	802327a <__sflush_r+0xae>
 80231e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80231ea:	2e00      	cmp	r6, #0
 80231ec:	d045      	beq.n	802327a <__sflush_r+0xae>
 80231ee:	2300      	movs	r3, #0
 80231f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80231f4:	682f      	ldr	r7, [r5, #0]
 80231f6:	6a21      	ldr	r1, [r4, #32]
 80231f8:	602b      	str	r3, [r5, #0]
 80231fa:	d030      	beq.n	802325e <__sflush_r+0x92>
 80231fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80231fe:	89a3      	ldrh	r3, [r4, #12]
 8023200:	0759      	lsls	r1, r3, #29
 8023202:	d505      	bpl.n	8023210 <__sflush_r+0x44>
 8023204:	6863      	ldr	r3, [r4, #4]
 8023206:	1ad2      	subs	r2, r2, r3
 8023208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802320a:	b10b      	cbz	r3, 8023210 <__sflush_r+0x44>
 802320c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802320e:	1ad2      	subs	r2, r2, r3
 8023210:	2300      	movs	r3, #0
 8023212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023214:	6a21      	ldr	r1, [r4, #32]
 8023216:	4628      	mov	r0, r5
 8023218:	47b0      	blx	r6
 802321a:	1c43      	adds	r3, r0, #1
 802321c:	89a3      	ldrh	r3, [r4, #12]
 802321e:	d106      	bne.n	802322e <__sflush_r+0x62>
 8023220:	6829      	ldr	r1, [r5, #0]
 8023222:	291d      	cmp	r1, #29
 8023224:	d82b      	bhi.n	802327e <__sflush_r+0xb2>
 8023226:	4a2a      	ldr	r2, [pc, #168]	@ (80232d0 <__sflush_r+0x104>)
 8023228:	410a      	asrs	r2, r1
 802322a:	07d6      	lsls	r6, r2, #31
 802322c:	d427      	bmi.n	802327e <__sflush_r+0xb2>
 802322e:	2200      	movs	r2, #0
 8023230:	6062      	str	r2, [r4, #4]
 8023232:	04d9      	lsls	r1, r3, #19
 8023234:	6922      	ldr	r2, [r4, #16]
 8023236:	6022      	str	r2, [r4, #0]
 8023238:	d504      	bpl.n	8023244 <__sflush_r+0x78>
 802323a:	1c42      	adds	r2, r0, #1
 802323c:	d101      	bne.n	8023242 <__sflush_r+0x76>
 802323e:	682b      	ldr	r3, [r5, #0]
 8023240:	b903      	cbnz	r3, 8023244 <__sflush_r+0x78>
 8023242:	6560      	str	r0, [r4, #84]	@ 0x54
 8023244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023246:	602f      	str	r7, [r5, #0]
 8023248:	b1b9      	cbz	r1, 802327a <__sflush_r+0xae>
 802324a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802324e:	4299      	cmp	r1, r3
 8023250:	d002      	beq.n	8023258 <__sflush_r+0x8c>
 8023252:	4628      	mov	r0, r5
 8023254:	f7ff fca0 	bl	8022b98 <_free_r>
 8023258:	2300      	movs	r3, #0
 802325a:	6363      	str	r3, [r4, #52]	@ 0x34
 802325c:	e00d      	b.n	802327a <__sflush_r+0xae>
 802325e:	2301      	movs	r3, #1
 8023260:	4628      	mov	r0, r5
 8023262:	47b0      	blx	r6
 8023264:	4602      	mov	r2, r0
 8023266:	1c50      	adds	r0, r2, #1
 8023268:	d1c9      	bne.n	80231fe <__sflush_r+0x32>
 802326a:	682b      	ldr	r3, [r5, #0]
 802326c:	2b00      	cmp	r3, #0
 802326e:	d0c6      	beq.n	80231fe <__sflush_r+0x32>
 8023270:	2b1d      	cmp	r3, #29
 8023272:	d001      	beq.n	8023278 <__sflush_r+0xac>
 8023274:	2b16      	cmp	r3, #22
 8023276:	d11e      	bne.n	80232b6 <__sflush_r+0xea>
 8023278:	602f      	str	r7, [r5, #0]
 802327a:	2000      	movs	r0, #0
 802327c:	e022      	b.n	80232c4 <__sflush_r+0xf8>
 802327e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023282:	b21b      	sxth	r3, r3
 8023284:	e01b      	b.n	80232be <__sflush_r+0xf2>
 8023286:	690f      	ldr	r7, [r1, #16]
 8023288:	2f00      	cmp	r7, #0
 802328a:	d0f6      	beq.n	802327a <__sflush_r+0xae>
 802328c:	0793      	lsls	r3, r2, #30
 802328e:	680e      	ldr	r6, [r1, #0]
 8023290:	bf08      	it	eq
 8023292:	694b      	ldreq	r3, [r1, #20]
 8023294:	600f      	str	r7, [r1, #0]
 8023296:	bf18      	it	ne
 8023298:	2300      	movne	r3, #0
 802329a:	eba6 0807 	sub.w	r8, r6, r7
 802329e:	608b      	str	r3, [r1, #8]
 80232a0:	f1b8 0f00 	cmp.w	r8, #0
 80232a4:	dde9      	ble.n	802327a <__sflush_r+0xae>
 80232a6:	6a21      	ldr	r1, [r4, #32]
 80232a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80232aa:	4643      	mov	r3, r8
 80232ac:	463a      	mov	r2, r7
 80232ae:	4628      	mov	r0, r5
 80232b0:	47b0      	blx	r6
 80232b2:	2800      	cmp	r0, #0
 80232b4:	dc08      	bgt.n	80232c8 <__sflush_r+0xfc>
 80232b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80232be:	81a3      	strh	r3, [r4, #12]
 80232c0:	f04f 30ff 	mov.w	r0, #4294967295
 80232c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80232c8:	4407      	add	r7, r0
 80232ca:	eba8 0800 	sub.w	r8, r8, r0
 80232ce:	e7e7      	b.n	80232a0 <__sflush_r+0xd4>
 80232d0:	dfbffffe 	.word	0xdfbffffe

080232d4 <_fflush_r>:
 80232d4:	b538      	push	{r3, r4, r5, lr}
 80232d6:	690b      	ldr	r3, [r1, #16]
 80232d8:	4605      	mov	r5, r0
 80232da:	460c      	mov	r4, r1
 80232dc:	b913      	cbnz	r3, 80232e4 <_fflush_r+0x10>
 80232de:	2500      	movs	r5, #0
 80232e0:	4628      	mov	r0, r5
 80232e2:	bd38      	pop	{r3, r4, r5, pc}
 80232e4:	b118      	cbz	r0, 80232ee <_fflush_r+0x1a>
 80232e6:	6a03      	ldr	r3, [r0, #32]
 80232e8:	b90b      	cbnz	r3, 80232ee <_fflush_r+0x1a>
 80232ea:	f7ff f9e9 	bl	80226c0 <__sinit>
 80232ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d0f3      	beq.n	80232de <_fflush_r+0xa>
 80232f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80232f8:	07d0      	lsls	r0, r2, #31
 80232fa:	d404      	bmi.n	8023306 <_fflush_r+0x32>
 80232fc:	0599      	lsls	r1, r3, #22
 80232fe:	d402      	bmi.n	8023306 <_fflush_r+0x32>
 8023300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023302:	f7ff fbdc 	bl	8022abe <__retarget_lock_acquire_recursive>
 8023306:	4628      	mov	r0, r5
 8023308:	4621      	mov	r1, r4
 802330a:	f7ff ff5f 	bl	80231cc <__sflush_r>
 802330e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023310:	07da      	lsls	r2, r3, #31
 8023312:	4605      	mov	r5, r0
 8023314:	d4e4      	bmi.n	80232e0 <_fflush_r+0xc>
 8023316:	89a3      	ldrh	r3, [r4, #12]
 8023318:	059b      	lsls	r3, r3, #22
 802331a:	d4e1      	bmi.n	80232e0 <_fflush_r+0xc>
 802331c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802331e:	f7ff fbcf 	bl	8022ac0 <__retarget_lock_release_recursive>
 8023322:	e7dd      	b.n	80232e0 <_fflush_r+0xc>

08023324 <__swhatbuf_r>:
 8023324:	b570      	push	{r4, r5, r6, lr}
 8023326:	460c      	mov	r4, r1
 8023328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802332c:	2900      	cmp	r1, #0
 802332e:	b096      	sub	sp, #88	@ 0x58
 8023330:	4615      	mov	r5, r2
 8023332:	461e      	mov	r6, r3
 8023334:	da0d      	bge.n	8023352 <__swhatbuf_r+0x2e>
 8023336:	89a3      	ldrh	r3, [r4, #12]
 8023338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802333c:	f04f 0100 	mov.w	r1, #0
 8023340:	bf14      	ite	ne
 8023342:	2340      	movne	r3, #64	@ 0x40
 8023344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023348:	2000      	movs	r0, #0
 802334a:	6031      	str	r1, [r6, #0]
 802334c:	602b      	str	r3, [r5, #0]
 802334e:	b016      	add	sp, #88	@ 0x58
 8023350:	bd70      	pop	{r4, r5, r6, pc}
 8023352:	466a      	mov	r2, sp
 8023354:	f000 f848 	bl	80233e8 <_fstat_r>
 8023358:	2800      	cmp	r0, #0
 802335a:	dbec      	blt.n	8023336 <__swhatbuf_r+0x12>
 802335c:	9901      	ldr	r1, [sp, #4]
 802335e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023366:	4259      	negs	r1, r3
 8023368:	4159      	adcs	r1, r3
 802336a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802336e:	e7eb      	b.n	8023348 <__swhatbuf_r+0x24>

08023370 <__smakebuf_r>:
 8023370:	898b      	ldrh	r3, [r1, #12]
 8023372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023374:	079d      	lsls	r5, r3, #30
 8023376:	4606      	mov	r6, r0
 8023378:	460c      	mov	r4, r1
 802337a:	d507      	bpl.n	802338c <__smakebuf_r+0x1c>
 802337c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023380:	6023      	str	r3, [r4, #0]
 8023382:	6123      	str	r3, [r4, #16]
 8023384:	2301      	movs	r3, #1
 8023386:	6163      	str	r3, [r4, #20]
 8023388:	b003      	add	sp, #12
 802338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802338c:	ab01      	add	r3, sp, #4
 802338e:	466a      	mov	r2, sp
 8023390:	f7ff ffc8 	bl	8023324 <__swhatbuf_r>
 8023394:	9f00      	ldr	r7, [sp, #0]
 8023396:	4605      	mov	r5, r0
 8023398:	4639      	mov	r1, r7
 802339a:	4630      	mov	r0, r6
 802339c:	f7ff f86a 	bl	8022474 <_malloc_r>
 80233a0:	b948      	cbnz	r0, 80233b6 <__smakebuf_r+0x46>
 80233a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233a6:	059a      	lsls	r2, r3, #22
 80233a8:	d4ee      	bmi.n	8023388 <__smakebuf_r+0x18>
 80233aa:	f023 0303 	bic.w	r3, r3, #3
 80233ae:	f043 0302 	orr.w	r3, r3, #2
 80233b2:	81a3      	strh	r3, [r4, #12]
 80233b4:	e7e2      	b.n	802337c <__smakebuf_r+0xc>
 80233b6:	89a3      	ldrh	r3, [r4, #12]
 80233b8:	6020      	str	r0, [r4, #0]
 80233ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80233be:	81a3      	strh	r3, [r4, #12]
 80233c0:	9b01      	ldr	r3, [sp, #4]
 80233c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80233c6:	b15b      	cbz	r3, 80233e0 <__smakebuf_r+0x70>
 80233c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80233cc:	4630      	mov	r0, r6
 80233ce:	f000 f81d 	bl	802340c <_isatty_r>
 80233d2:	b128      	cbz	r0, 80233e0 <__smakebuf_r+0x70>
 80233d4:	89a3      	ldrh	r3, [r4, #12]
 80233d6:	f023 0303 	bic.w	r3, r3, #3
 80233da:	f043 0301 	orr.w	r3, r3, #1
 80233de:	81a3      	strh	r3, [r4, #12]
 80233e0:	89a3      	ldrh	r3, [r4, #12]
 80233e2:	431d      	orrs	r5, r3
 80233e4:	81a5      	strh	r5, [r4, #12]
 80233e6:	e7cf      	b.n	8023388 <__smakebuf_r+0x18>

080233e8 <_fstat_r>:
 80233e8:	b538      	push	{r3, r4, r5, lr}
 80233ea:	4d07      	ldr	r5, [pc, #28]	@ (8023408 <_fstat_r+0x20>)
 80233ec:	2300      	movs	r3, #0
 80233ee:	4604      	mov	r4, r0
 80233f0:	4608      	mov	r0, r1
 80233f2:	4611      	mov	r1, r2
 80233f4:	602b      	str	r3, [r5, #0]
 80233f6:	f7de f964 	bl	80016c2 <_fstat>
 80233fa:	1c43      	adds	r3, r0, #1
 80233fc:	d102      	bne.n	8023404 <_fstat_r+0x1c>
 80233fe:	682b      	ldr	r3, [r5, #0]
 8023400:	b103      	cbz	r3, 8023404 <_fstat_r+0x1c>
 8023402:	6023      	str	r3, [r4, #0]
 8023404:	bd38      	pop	{r3, r4, r5, pc}
 8023406:	bf00      	nop
 8023408:	24029024 	.word	0x24029024

0802340c <_isatty_r>:
 802340c:	b538      	push	{r3, r4, r5, lr}
 802340e:	4d06      	ldr	r5, [pc, #24]	@ (8023428 <_isatty_r+0x1c>)
 8023410:	2300      	movs	r3, #0
 8023412:	4604      	mov	r4, r0
 8023414:	4608      	mov	r0, r1
 8023416:	602b      	str	r3, [r5, #0]
 8023418:	f7de f958 	bl	80016cc <_isatty>
 802341c:	1c43      	adds	r3, r0, #1
 802341e:	d102      	bne.n	8023426 <_isatty_r+0x1a>
 8023420:	682b      	ldr	r3, [r5, #0]
 8023422:	b103      	cbz	r3, 8023426 <_isatty_r+0x1a>
 8023424:	6023      	str	r3, [r4, #0]
 8023426:	bd38      	pop	{r3, r4, r5, pc}
 8023428:	24029024 	.word	0x24029024

0802342c <_init>:
 802342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802342e:	bf00      	nop
 8023430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023432:	bc08      	pop	{r3}
 8023434:	469e      	mov	lr, r3
 8023436:	4770      	bx	lr

08023438 <_fini>:
 8023438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802343a:	bf00      	nop
 802343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802343e:	bc08      	pop	{r3}
 8023440:	469e      	mov	lr, r3
 8023442:	4770      	bx	lr
