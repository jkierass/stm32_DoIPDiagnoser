
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000225ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ac  08022850  08022850  00023850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08025bfc  08025bfc  00026bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08025da4  08025da4  00026da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0003bf18  90000000  90000000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000000e  9003bf18  9003bf18  00063f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08025dbc  08025dbc  00063f26  2**0
                  CONTENTS
  8 .ARM          00000008  08025dbc  08025dbc  00026dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08025dc4  08025dc4  00063f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08025dc4  08025dc4  00026dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08025de0  08025de0  00026de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08025de8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08025f24  00027140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  08026024  00027240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00025db4  24000340  08026124  00027340  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  240260f4  08026124  000280f4  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00063f26  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00064000  2**2
                  ALLOC
 19 .debug_info   000beae4  00000000  00000000  00063f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000156b7  00000000  00000000  00122a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003828  00000000  00000000  001380f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000038c0  00000000  00000000  0013b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00051bdd  00000000  00000000  0013f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00063903  00000000  00000000  00190db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001df99c  00000000  00000000  001f46b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  003d4054  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00009f3c  00000000  00000000  003d4118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0001f012  00000000  00000000  003de054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000084  00000000  00000000  003fd066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022834 	.word	0x08022834

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08022834 	.word	0x08022834

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c b908 	b.w	800c910 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f021 fafb 	bl	8021d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f021 faf6 	bl	8021d08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fa99 	bl	8008c54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f008 fd64 	bl	8009250 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 f8ee 	bl	8009988 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f008 fff6 	bl	80097a8 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f021 fa96 	bl	8021d08 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fc0a 	bl	8005ff4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fc1d 	bl	8006030 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fc15 	bl	8006030 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fc07 	bl	8006030 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fbf8 	bl	8006030 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fbed 	bl	8006030 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fbe0 	bl	8006030 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fbcd 	bl	8006010 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fab3 	bl	8008e90 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 fe39 	bl	80055b4 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 fde0 	bl	800550c <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 fbf0 	bl	800614a <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f006 faca 	bl	8006f10 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fabd 	bl	8005efc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f006 fac2 	bl	8006f10 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fab5 	bl	8005efc <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f021 f9b6 	bl	8021d08 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f021 f9b1 	bl	8021d08 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f021 f9ac 	bl	8021d08 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f021 f9a7 	bl	8021d08 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f005 fd06 	bl	80063e4 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f005 ff62 	bl	80068bc <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f005 ff14 	bl	8006842 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f005 fefc 	bl	8006820 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f006 f8cb 	bl	8006bce <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f005 fc6c 	bl	800631e <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f005 fe8a 	bl	80067b8 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f005 fdff 	bl	80066d4 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240003c8 	.word	0x240003c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000608 	.word	0x24000608
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240005ec 	.word	0x240005ec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f005 fdd2 	bl	80066b2 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f021 f8f3 	bl	8021d08 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f007 fd47 	bl	80085f4 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f007 fdf3 	bl	800878c <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f005 fee5 	bl	8006988 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fa94 	bl	80050fc <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f003 feff 	bl	80049dc <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f005 ff01 	bl	80069ee <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f005 fdd7 	bl	80067b8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f007 fde9 	bl	80087e8 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f005 fa2b 	bl	8006088 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f006 fec1 	bl	80079c4 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00a f8fe 	bl	800ae50 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00a f925 	bl	800aea8 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00a f91e 	bl	800aea8 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00a f900 	bl	800ae74 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240005ec 	.word	0x240005ec
 8000c7c:	24000414 	.word	0x24000414
 8000c80:	2400035c 	.word	0x2400035c
 8000c84:	080054dd 	.word	0x080054dd
 8000c88:	2400036c 	.word	0x2400036c
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	24000670 	.word	0x24000670
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000594 	.word	0x24000594
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080228cc 	.word	0x080228cc
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24000390 	.word	0x24000390
 8000cb0:	080228a8 	.word	0x080228a8
 8000cb4:	080038ad 	.word	0x080038ad
 8000cb8:	2400038c 	.word	0x2400038c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f021 f81e 	bl	8021d08 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 f89c 	bl	8006f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f006 f897 	bl	8006f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f006 f891 	bl	8006f10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f005 fefd 	bl	8006bfc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f005 fef3 	bl	8006bfc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f005 feeb 	bl	8006bfc <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f005 fee3 	bl	8006bfc <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f005 f87b 	bl	8005f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f005 f8aa 	bl	8005fb4 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f009 fd01 	bl	800a8b0 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f004 fd37 	bl	8005928 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f004 fd82 	bl	80059c4 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f004 ffd6 	bl	8005e7c <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f006 f81d 	bl	8006f2c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f006 f827 	bl	8006f48 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000394 	.word	0x24000394
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f004 bfce 	b.w	8005ed8 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f004 bfef 	b.w	8005f50 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f004 ffbd 	bl	8005f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f004 bfe9 	b.w	8005fb4 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f020 fe84 	bl	8021d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f020 fe7f 	bl	8021d08 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f008 ff39 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f005 fdc4 	bl	8006bfc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f004 ff69 	bl	8005f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f004 ff98 	bl	8005fb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f007 fbe4 	bl	80088be <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f007 fc6a 	bl	80089da <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f007 fbb8 	bl	80088be <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f007 fc3e 	bl	80089da <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f004 feef 	bl	8005f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f004 bf1b 	b.w	8005fb4 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000528 	.word	0x24000528
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240004bc 	.word	0x240004bc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f020 fdae 	bl	8021d08 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f008 fe5c 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f004 fea5 	bl	8005f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f004 fed4 	bl	8005fb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f020 fd70 	bl	8021d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f020 fd6b 	bl	8021d08 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f008 fe24 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f005 fc7d 	bl	8006bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 fc73 	bl	8006bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f005 fc69 	bl	8006bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f005 fc5e 	bl	8006bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f005 fc54 	bl	8006bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f005 fc4a 	bl	8006bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f005 fc3f 	bl	8006bfc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f020 fcad 	bl	8021d08 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f020 fca3 	bl	8021d08 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f008 fd61 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f005 fbf6 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f005 fbec 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f005 fbe1 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f005 fbd6 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f005 fbcb 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f005 fbc0 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f005 fbb5 	bl	8006bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f005 fbab 	bl	8006bfc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000698 	.word	0x24000698
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f005 fc6a 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f005 fc66 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f005 fc61 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f005 fc5c 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f005 fc57 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f005 fc52 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f005 fc4d 	bl	8006dcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f005 bc47 	b.w	8006dcc <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000694 	.word	0x24000694
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f004 fce7 	bl	8005f50 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f004 fd16 	bl	8005fb4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f008 fb59 	bl	8009c60 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f008 fb31 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f009 fb62 	bl	800ac9c <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f009 fa0f 	bl	800aa00 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f008 fb18 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	2400069c 	.word	0x2400069c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f009 ba39 	b.w	800aa84 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	2400069c 	.word	0x2400069c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f007 b85a 	b.w	80086d2 <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000414 	.word	0x24000414

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f004 bdcf 	b.w	80061c8 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000608 	.word	0x24000608

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f006 beff 	b.w	8008434 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000594 	.word	0x24000594

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f007 fa50 	bl	8008ae4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f007 ba4b 	b.w	8008ae4 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240004bc 	.word	0x240004bc
 8001654:	24000528 	.word	0x24000528

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f004 bfb8 	b.w	80065ce <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240005ec 	.word	0x240005ec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f020 fc01 	bl	8021e70 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f020 fbf9 	bl	8021e70 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f020 fbbe 	bl	8021e70 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240006e8 	.word	0x240006e8
 8001708:	240260f8 	.word	0x240260f8
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f004 fb40 	bl	8005d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f020 fb9b 	bl	8021e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	08025de8 	.word	0x08025de8
  ldr r2, =_sbss
 800175c:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001760:	240260f4 	.word	0x240260f4

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd15 	bl	8003198 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc99 	b.w	80030a8 <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd11 	b.w	800319c <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240006ec 	.word	0x240006ec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f008 f9ee 	bl	8009bd4 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 f823 	bl	8009844 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f009 fa49 	bl	800ac9c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f009 b8bb 	b.w	800a98c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f008 f9ff 	bl	8009c18 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240006ec 	.word	0x240006ec
 8001828:	08024d2c 	.word	0x08024d2c

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f01f fc54 	bl	80210de <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f004 fa36 	bl	8005ce4 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000748 	.word	0x24000748
 800188c:	24000738 	.word	0x24000738

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f01f fc22 	bl	80210de <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f004 f983 	bl	8005bc4 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f01f ff7b 	bl	80217d0 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000744 	.word	0x24000744
 80018e0:	24000748 	.word	0x24000748
 80018e4:	08022918 	.word	0x08022918
 80018e8:	0802292b 	.word	0x0802292b
 80018ec:	08022955 	.word	0x08022955

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f005 bb01 	b.w	8006f10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400074c 	.word	0x2400074c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f005 bad1 	b.w	8006f10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400074c 	.word	0x2400074c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f005 baab 	b.w	8006f1a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f005 fa85 	bl	8006f04 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	2400074c 	.word	0x2400074c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	240253d3 	.word	0x240253d3

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000770 	.word	0x24000770

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc7c 	b.w	8003396 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bc0b 	b.w	80032b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bddd 	b.w	8003660 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bdcf 	b.w	8003648 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd92 	bl	80035d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bbfe 	b.w	80032c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f00c ff54 	bl	800e97c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00c fadf 	bl	800e0a8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00c b9ad 	b.w	800de54 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f01f faed 	bl	80210de <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00c b9dd 	b.w	800decc <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fbfb 	bl	8003318 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	24000760 	.word	0x24000760

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f004 ff42 	bl	80069ee <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240005ec 	.word	0x240005ec

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	240253cc 	.word	0x240253cc
 8001bbc:	240253ca 	.word	0x240253ca
 8001bc0:	240253c8 	.word	0x240253c8

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f01f fdf7 	bl	80217d0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	240253c8 	.word	0x240253c8
 8001bf0:	240253ca 	.word	0x240253ca
 8001bf4:	080229d4 	.word	0x080229d4
 8001bf8:	08022a37 	.word	0x08022a37
 8001bfc:	08022a7a 	.word	0x08022a7a
 8001c00:	240253ce 	.word	0x240253ce
 8001c04:	240253d0 	.word	0x240253d0

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f01f fdcd 	bl	80217d0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	24000770 	.word	0x24000770
 8001c54:	08022acd 	.word	0x08022acd
 8001c58:	08022b05 	.word	0x08022b05
 8001c5c:	08022a7a 	.word	0x08022a7a
 8001c60:	240253d2 	.word	0x240253d2

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	240253d4 	.word	0x240253d4
 8001cf8:	240253c8 	.word	0x240253c8
 8001cfc:	240253ce 	.word	0x240253ce
 8001d00:	240253ca 	.word	0x240253ca
 8001d04:	240253d0 	.word	0x240253d0
 8001d08:	240253cc 	.word	0x240253cc
 8001d0c:	08022b5c 	.word	0x08022b5c

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f004 fe64 	bl	80069ee <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f004 fe67 	bl	8006a10 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240005ec 	.word	0x240005ec

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f004 febb 	bl	8006ad0 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240005ec 	.word	0x240005ec

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f004 fe40 	bl	8006a10 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f004 fe28 	bl	80069ee <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240005ec 	.word	0x240005ec

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240005ec 	.word	0x240005ec
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f004 fdf7 	bl	80069ee <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	2400075c 	.word	0x2400075c
 8001e0c:	240005ec 	.word	0x240005ec

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f004 fdf5 	bl	8006a10 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240005ec 	.word	0x240005ec

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f004 fde3 	bl	8006a10 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240005ec 	.word	0x240005ec

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f004 fd9a 	bl	80069ce <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	240253d4 	.word	0x240253d4
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000778 	.word	0x24000778
 8001eb8:	24000774 	.word	0x24000774

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f004 f80a 	bl	8005efc <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f004 bd38 	b.w	80069ce <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000778 	.word	0x24000778
 8001fe8:	24000770 	.word	0x24000770
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	240253d4 	.word	0x240253d4
 8002008:	24000774 	.word	0x24000774
 800200c:	24000414 	.word	0x24000414

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00c fcc8 	bl	800e9b0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	240253d4 	.word	0x240253d4

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000760 	.word	0x24000760
 800203c:	080228f8 	.word	0x080228f8

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f01f fba6 	bl	80217d0 <__assert_func>
 8002084:	08022c2c 	.word	0x08022c2c
 8002088:	08024947 	.word	0x08024947
 800208c:	08022c87 	.word	0x08022c87

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f01f f822 	bl	80210de <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f008 ffa8 	bl	800b024 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08022ed0 	.word	0x08022ed0
 80020e0:	24000798 	.word	0x24000798

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f01f be0c 	b.w	8021d18 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219e      	movs	r1, #158	@ 0x9e
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f01f fb26 	bl	80217d0 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	08022d0a 	.word	0x08022d0a
 80021b0:	08022c87 	.word	0x08022c87
 80021b4:	08022cf7 	.word	0x08022cf7

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e4      	movs	r1, #228	@ 0xe4
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f01f fb01 	bl	80217d0 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	08022d4c 	.word	0x08022d4c
 8002250:	08022d95 	.word	0x08022d95
 8002254:	08022c87 	.word	0x08022c87

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f01f fa7a 	bl	80217d0 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f240 1141 	movw	r1, #321	@ 0x141
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	08022dc8 	.word	0x08022dc8
 8002450:	08022de6 	.word	0x08022de6
 8002454:	08022dcd 	.word	0x08022dcd
 8002458:	08022c87 	.word	0x08022c87
 800245c:	08022e13 	.word	0x08022e13
 8002460:	08022e18 	.word	0x08022e18
 8002464:	08022e30 	.word	0x08022e30
 8002468:	08022e35 	.word	0x08022e35
 800246c:	08022e4b 	.word	0x08022e4b
 8002470:	08022e57 	.word	0x08022e57
 8002474:	08022e5c 	.word	0x08022e5c
 8002478:	08022e61 	.word	0x08022e61
 800247c:	08022e66 	.word	0x08022e66

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f005 fc13 	bl	8007d20 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009dc4 	.word	0x24009dc4
 8002504:	24009da0 	.word	0x24009da0
 8002508:	24009db0 	.word	0x24009db0
 800250c:	24000794 	.word	0x24000794
 8002510:	24009dc0 	.word	0x24009dc0
 8002514:	24009db8 	.word	0x24009db8
 8002518:	24009dbc 	.word	0x24009dbc
 800251c:	2400079c 	.word	0x2400079c
 8002520:	24000010 	.word	0x24000010
 8002524:	2400077c 	.word	0x2400077c

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009da8 	.word	0x24009da8

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f005 bc12 	b.w	8007de4 <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009dc0 	.word	0x24009dc0
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009db8 	.word	0x24009db8

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f005 fbb5 	bl	8007d88 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f005 fbd8 	bl	8007dea <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f008 bd5f 	b.w	800b110 <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009da0 	.word	0x24009da0
 8002658:	24000010 	.word	0x24000010
 800265c:	2400077c 	.word	0x2400077c
 8002660:	2400079c 	.word	0x2400079c
 8002664:	24009db0 	.word	0x24009db0
 8002668:	24009da4 	.word	0x24009da4
 800266c:	24000798 	.word	0x24000798

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009db4 	.word	0x24009db4

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f005 fdb9 	bl	8008246 <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009db4 	.word	0x24009db4
 80026e0:	24000790 	.word	0x24000790
 80026e4:	24009da4 	.word	0x24009da4
 80026e8:	24000794 	.word	0x24000794
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009db0 	.word	0x24009db0
 80026f4:	24009da0 	.word	0x24009da0

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f008 fcae 	bl	800b0b8 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	2400077c 	.word	0x2400077c
 8002774:	24000594 	.word	0x24000594
 8002778:	24009dac 	.word	0x24009dac
 800277c:	24009da4 	.word	0x24009da4
 8002780:	24000798 	.word	0x24000798
 8002784:	24009db4 	.word	0x24009db4
 8002788:	24000790 	.word	0x24000790

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b0      	movs	r1, #176	@ 0xb0
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f01f f813 	bl	80217d0 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	08022d4c 	.word	0x08022d4c
 8002848:	08022e6b 	.word	0x08022e6b
 800284c:	08022c87 	.word	0x08022c87

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009dac 	.word	0x24009dac
 80028a0:	24000594 	.word	0x24000594

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	2400077c 	.word	0x2400077c
 8002918:	52001000 	.word	0x52001000
 800291c:	24009da8 	.word	0x24009da8
 8002920:	24009dc4 	.word	0x24009dc4
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00012301 	.word	0x00012301

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f008 bbd8 	b.w	800b110 <osSemaphoreRelease>
 8002960:	24000794 	.word	0x24000794
 8002964:	24009da8 	.word	0x24009da8
 8002968:	2400077c 	.word	0x2400077c
 800296c:	24000790 	.word	0x24000790
 8002970:	24000798 	.word	0x24000798

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f008 fb52 	bl	800b024 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f01e ff1f 	bl	80217d0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f008 fbe3 	bl	800b162 <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009dcc 	.word	0x24009dcc
 80029b0:	08022f0c 	.word	0x08022f0c
 80029b4:	08022f55 	.word	0x08022f55
 80029b8:	08022f84 	.word	0x08022f84
 80029bc:	24009dc8 	.word	0x24009dc8
 80029c0:	08022fea 	.word	0x08022fea

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f008 bb74 	b.w	800b0b8 <osSemaphoreAcquire>
 80029d0:	24009dcc 	.word	0x24009dcc

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f008 bb9a 	b.w	800b110 <osSemaphoreRelease>
 80029dc:	24009dcc 	.word	0x24009dcc

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f008 bb67 	b.w	800b0b8 <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009dcc 	.word	0x24009dcc

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f008 bbeb 	b.w	800b1d8 <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009dc8 	.word	0x24009dc8
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f008 fc0f 	bl	800b23a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f008 fc08 	bl	800b23a <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009dc8 	.word	0x24009dc8

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a3e:	e7fe      	b.n	8002a3e <DMA2D_XferErrorCallback>

08002a40 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a40:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a54:	f008 faa4 	bl	800afa0 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a58:	6860      	ldr	r0, [r4, #4]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4798      	blx	r3
 8002a60:	b978      	cbnz	r0, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a63      	ldrb	r3, [r4, #9]
 8002a64:	b16b      	cbz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a66:	7a23      	ldrb	r3, [r4, #8]
 8002a68:	b95b      	cbnz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a6a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6e:	4620      	mov	r0, r4
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a76:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7e:	f008 bab2 	b.w	800afe6 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a82:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x68>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <_ZN8STM32DMA5startEv+0x6c>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f2      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a90:	7a20      	ldrb	r0, [r4, #8]
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1ef      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a96:	7aa0      	ldrb	r0, [r4, #10]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ec      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa8:	f7ff fefc 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aac:	e7e3      	b.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002aae:	bf00      	nop
 8002ab0:	24000794 	.word	0x24000794
 8002ab4:	24000010 	.word	0x24000010

08002ab8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	4770      	bx	lr
 8002ad0:	080231a0 	.word	0x080231a0
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
}
 8002adc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002ae0:	f7ff ffea 	bl	8002ab8 <_ZN8STM32DMAD1Ev>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f01e fafa 	bl	80210de <_ZdlPvj>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002af2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b04:	f002 0210 	and.w	r2, r2, #16
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	24000608 	.word	0x24000608
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002a3f 	.word	0x08002a3f
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	280a      	cmp	r0, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b4e:	e8df f000 	tbb	[pc, r0]
 8002b52:	1006      	.short	0x1006
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	10101008 	.word	0x10101008
 8002b5c:	10          	.byte	0x10
 8002b5d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b64:	2191      	movs	r1, #145	@ 0x91
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b6a:	f01e fe31 	bl	80217d0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b76:	bf00      	nop
 8002b78:	0802302c 	.word	0x0802302c
 8002b7c:	08023047 	.word	0x08023047
 8002b80:	08023092 	.word	0x08023092

08002b84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b88:	7f88      	ldrb	r0, [r1, #30]
 8002b8a:	f7ff ffdd 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	8aa5      	ldrh	r5, [r4, #20]
 8002b92:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b94:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b9a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b9e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ba0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	2d08      	cmp	r5, #8
 8002baa:	d10e      	bne.n	8002bca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bb0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bb4:	7f20      	ldrb	r0, [r4, #28]
 8002bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bba:	61da      	str	r2, [r3, #28]
        return color;
 8002bbc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bbe:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc0:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc6:	601a      	str	r2, [r3, #0]
    }
}
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bcc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bd4:	4a03      	ldr	r2, [pc, #12]	@ (8002be4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bd6:	e7f6      	b.n	8002bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bd8:	52001000 	.word	0x52001000
 8002bdc:	00010009 	.word	0x00010009
 8002be0:	00022301 	.word	0x00022301
 8002be4:	00032301 	.word	0x00032301

08002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002be8:	b508      	push	{r3, lr}
    switch (format)
 8002bea:	280b      	cmp	r0, #11
 8002bec:	d80b      	bhi.n	8002c06 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002bee:	e8df f000 	tbb	[pc, r0]
 8002bf2:	1206      	.short	0x1206
 8002bf4:	0a0a0a10 	.word	0x0a0a0a10
 8002bf8:	0808080a 	.word	0x0808080a
 8002bfc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c02:	2005      	movs	r0, #5
        break;
 8002c04:	e7fc      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c08:	2170      	movs	r1, #112	@ 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c0e:	f01e fddf 	bl	80217d0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f4      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f2      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	0802302c 	.word	0x0802302c
 8002c20:	080230f6 	.word	0x080230f6
 8002c24:	08023092 	.word	0x08023092

08002c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c2e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ffd9 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c36:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c3a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ffd3 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff ff7f 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c4e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c52:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c56:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c58:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c5a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c62:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c76:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c78:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c7a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c7e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c82:	2c80      	cmp	r4, #128	@ 0x80
 8002c84:	d022      	beq.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c86:	d80f      	bhi.n	8002ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d066      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c8c:	2c40      	cmp	r4, #64	@ 0x40
 8002c8e:	d064      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	d05c      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c94:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c9a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c9c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ca2:	d060      	beq.n	8002d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002ca6:	e03f      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ca8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cac:	d004      	beq.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cae:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cb2:	d1ef      	bne.n	8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	482f      	ldr	r0, [pc, #188]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cb6:	e000      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cba:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cc4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cc6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc8:	6159      	str	r1, [r3, #20]
 8002cca:	e02c      	b.n	8002d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ccc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cd0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cd8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cda:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cdc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cde:	1d21      	adds	r1, r4, #4
 8002ce0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002ce2:	7821      	ldrb	r1, [r4, #0]
 8002ce4:	b141      	cbz	r1, 8002cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002ce6:	2901      	cmp	r1, #1
 8002ce8:	d021      	beq.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002cec:	f240 110b 	movw	r1, #267	@ 0x10b
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002cf4:	f01e fd6c 	bl	80217d0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8861      	ldrh	r1, [r4, #2]
 8002cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d00:	3901      	subs	r1, #1
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d0c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	f041 0120 	orr.w	r1, r1, #32
 8002d16:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	0689      	lsls	r1, r1, #26
 8002d1c:	d4fc      	bmi.n	8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d0be      	beq.n	8002ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d2e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d30:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d32:	8860      	ldrh	r0, [r4, #2]
 8002d34:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d38:	bf18      	it	ne
 8002d3a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d3c:	3801      	subs	r0, #1
 8002d3e:	f021 0110 	bic.w	r1, r1, #16
 8002d42:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d46:	f041 0110 	orr.w	r1, r1, #16
 8002d4a:	61d9      	str	r1, [r3, #28]
                break;
 8002d4c:	e7df      	b.n	8002d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d56:	61da      	str	r2, [r3, #28]
 8002d58:	e7b5      	b.n	8002cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d5a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d5e:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d64:	e7f7      	b.n	8002d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d66:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d6a:	e7dd      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	00012301 	.word	0x00012301
 8002d74:	00020009 	.word	0x00020009
 8002d78:	0002000a 	.word	0x0002000a
 8002d7c:	08023140 	.word	0x08023140
 8002d80:	0802315a 	.word	0x0802315a
 8002d84:	08023092 	.word	0x08023092
 8002d88:	00022301 	.word	0x00022301

08002d8c <DMA2D_XferCpltCallback>:
 8002d8c:	4b02      	ldr	r3, [pc, #8]	@ (8002d98 <DMA2D_XferCpltCallback+0xc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4718      	bx	r3
 8002d98:	240253d4 	.word	0x240253d4

08002d9c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d9c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002da4:	b9d3      	cbnz	r3, 8002ddc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dac:	4919      	ldr	r1, [pc, #100]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	bb38      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc0:	7a20      	ldrb	r0, [r4, #8]
 8002dc2:	bb28      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc4:	7aa0      	ldrb	r0, [r4, #10]
 8002dc6:	bb18      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	f7ff bd64 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002ddc:	7a03      	ldrb	r3, [r0, #8]
 8002dde:	b143      	cbz	r3, 8002df2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002dee:	f7ff fd9d 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002df2:	6860      	ldr	r0, [r4, #4]
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
 8002dfa:	b948      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dfc:	7a63      	ldrb	r3, [r4, #9]
 8002dfe:	b13b      	cbz	r3, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e00:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e02:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e06:	4620      	mov	r0, r4
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e0e:	4718      	bx	r3
    }
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	24000794 	.word	0x24000794
 8002e18:	24000010 	.word	0x24000010
 8002e1c:	24000790 	.word	0x24000790

08002e20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_ZN8STM32DMAC1Ev+0x40>)
 8002e26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4625      	mov	r5, r4
 8002e2c:	2260      	movs	r2, #96	@ 0x60
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	7226      	strb	r6, [r4, #8]
 8002e32:	7266      	strb	r6, [r4, #9]
 8002e34:	f845 3b20 	str.w	r3, [r5], #32
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f00b fefd 	bl	800ec38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e3e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e42:	60ee      	str	r6, [r5, #12]
 8002e44:	3524      	adds	r5, #36	@ 0x24
 8002e46:	429d      	cmp	r5, r3
 8002e48:	d1fb      	bne.n	8002e42 <_ZN8STM32DMAC1Ev+0x22>
 8002e4a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e4e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e50:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e54:	f008 f86f 	bl	800af36 <osMutexNew>
 8002e58:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	080231a0 	.word	0x080231a0

08002e64 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	07d2      	lsls	r2, r2, #31
 8002e6a:	d4fc      	bmi.n	8002e66 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6c:	2223      	movs	r2, #35	@ 0x23
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	52001000 	.word	0x52001000

08002e78 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	d511      	bpl.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e80:	2900      	cmp	r1, #0
 8002e82:	dd0f      	ble.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e84:	f000 031f 	and.w	r3, r0, #31
 8002e88:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e8e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e90:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e94:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e96:	1a0b      	subs	r3, r1, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dcf9      	bgt.n	8002e90 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002eae:	4c10      	ldr	r4, [pc, #64]	@ (8002ef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	07ed      	lsls	r5, r5, #31
 8002eb4:	d4fc      	bmi.n	8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ebe:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ecc:	d00c      	beq.n	8002ee8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ece:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ed0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ed4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002eda:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ede:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ee0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ee2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ee4:	6023      	str	r3, [r4, #0]
    }
}
 8002ee6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ee8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eec:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eee:	e7f9      	b.n	8002ee4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002ef0:	52001000 	.word	0x52001000
 8002ef4:	00010009 	.word	0x00010009
 8002ef8:	00020001 	.word	0x00020001
 8002efc:	00030001 	.word	0x00030001

08002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f00:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f02:	4c0e      	ldr	r4, [pc, #56]	@ (8002f3c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	07ed      	lsls	r5, r5, #31
 8002f08:	d4fc      	bmi.n	8002f04 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f0a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f0c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f12:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f16:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f1a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f1e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f20:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f22:	d007      	beq.n	8002f34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f26:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f2a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f2c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f2e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f30:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f32:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f36:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f38:	6025      	str	r5, [r4, #0]
}
 8002f3a:	e7fa      	b.n	8002f32 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00020001 	.word	0x00020001
 8002f44:	ff020001 	.word	0xff020001

08002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	07ed      	lsls	r5, r5, #31
 8002f50:	d4fc      	bmi.n	8002f4c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f54:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f56:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f60:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f64:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f68:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f6a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f6e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f70:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	52001000 	.word	0x52001000
 8002f7c:	00020001 	.word	0x00020001

08002f80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f80:	2001      	movs	r0, #1
 8002f82:	4770      	bx	lr

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f84:	200c      	movs	r0, #12
 8002f86:	4770      	bx	lr

08002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f88:	230c      	movs	r3, #12
 8002f8a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f8e:	3008      	adds	r0, #8
 8002f90:	4770      	bx	lr

08002f92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f92:	230c      	movs	r3, #12
 8002f94:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f98:	3008      	adds	r0, #8
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fa0:	f44f 7067 	mov.w	r0, #924	@ 0x39c
 8002fa4:	4770      	bx	lr

08002fa6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fa6:	f44f 7367 	mov.w	r3, #924	@ 0x39c
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fb2:	f44f 7367 	mov.w	r3, #924	@ 0x39c
 8002fb6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fba:	3008      	adds	r0, #8
 8002fbc:	4770      	bx	lr

08002fbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fca:	3008      	adds	r0, #8
 8002fcc:	4770      	bx	lr

08002fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f000 be38 	b.w	8003c4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	6003      	str	r3, [r0, #0]
 8002fe4:	f00a f903 	bl	800d1ee <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	08023258 	.word	0x08023258

08002ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff2 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f01e f86f 	bl	80210de <_ZdlPvj>
 8003000:	4620      	mov	r0, r4
 8003002:	bd10      	pop	{r4, pc}

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	f00a f8ef 	bl	800d1ee <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003010:	4620      	mov	r0, r4
 8003012:	bd10      	pop	{r4, pc}
 8003014:	08023224 	.word	0x08023224

08003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff2 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003020:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 8003024:	4620      	mov	r0, r4
 8003026:	f01e f85a 	bl	80210de <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f00a f8d9 	bl	800d1ee <_ZN8touchgfx17AbstractPartitionD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	080231f0 	.word	0x080231f0

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	f7ff fff2 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800304c:	2118      	movs	r1, #24
 800304e:	4620      	mov	r0, r4
 8003050:	f01e f845 	bl	80210de <_ZdlPvj>
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}

08003058 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <_ZN12FrontendHeapD1Ev+0x24>)
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f500 7074 	add.w	r0, r0, #976	@ 0x3d0
 8003064:	f7ff ffba 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003068:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800306c:	f7ff ffca 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003070:	f104 0014 	add.w	r0, r4, #20
 8003074:	f7ff ffdc 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003078:	4620      	mov	r0, r4
 800307a:	bd10      	pop	{r4, pc}
 800307c:	0802328c 	.word	0x0802328c

08003080 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003080:	b508      	push	{r3, lr}
 8003082:	4802      	ldr	r0, [pc, #8]	@ (800308c <__tcf_0+0xc>)
 8003084:	f7ff ffe8 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 8003088:	bd08      	pop	{r3, pc}
 800308a:	bf00      	nop
 800308c:	2400ac88 	.word	0x2400ac88

08003090 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	f7ff ffe0 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 8003098:	f240 5144 	movw	r1, #1348	@ 0x544
 800309c:	4620      	mov	r0, r4
 800309e:	f01e f81e 	bl	80210de <_ZdlPvj>
 80030a2:	4620      	mov	r0, r4
 80030a4:	bd10      	pop	{r4, pc}
	...

080030a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030ac:	f000 fc50 	bl	8003950 <_ZN14BitmapDatabase11getInstanceEv>
 80030b0:	2400      	movs	r4, #0
 80030b2:	4605      	mov	r5, r0
 80030b4:	f000 fc50 	bl	8003958 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030b8:	4623      	mov	r3, r4
 80030ba:	4601      	mov	r1, r0
 80030bc:	4622      	mov	r2, r4
 80030be:	4628      	mov	r0, r5
 80030c0:	9400      	str	r4, [sp, #0]
 80030c2:	f013 f9fd 	bl	80164c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030c6:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <touchgfx_init+0xbc>)
 80030c8:	4a27      	ldr	r2, [pc, #156]	@ (8003168 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ca:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030cc:	4d27      	ldr	r5, [pc, #156]	@ (800316c <touchgfx_init+0xc4>)
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f000 ffd4 	bl	800407c <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030d4:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <touchgfx_init+0xc8>)
 80030d6:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030d8:	4827      	ldr	r0, [pc, #156]	@ (8003178 <touchgfx_init+0xd0>)
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	f013 f89c 	bl	8016218 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	f3bf 8f5b 	dmb	ish
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d435      	bmi.n	8003156 <touchgfx_init+0xae>
 80030ea:	4628      	mov	r0, r5
 80030ec:	f01d fff9 	bl	80210e2 <__cxa_guard_acquire>
 80030f0:	b388      	cbz	r0, 8003156 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80030f2:	4c22      	ldr	r4, [pc, #136]	@ (800317c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80030f4:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80030f6:	f504 767a 	add.w	r6, r4, #1000	@ 0x3e8
        : presenterStorage(pres),
 80030fa:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 80030fe:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003102:	f504 7774 	add.w	r7, r4, #976	@ 0x3d0
 8003106:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003108:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800310a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800310e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003110:	6126      	str	r6, [r4, #16]
 8003112:	f00a f86d 	bl	800d1f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <touchgfx_init+0xdc>)
 8003118:	4640      	mov	r0, r8
 800311a:	6163      	str	r3, [r4, #20]
 800311c:	f00a f868 	bl	800d1f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <touchgfx_init+0xe0>)
 8003122:	4638      	mov	r0, r7
 8003124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003126:	f00a f863 	bl	800d1f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <touchgfx_init+0xe4>)
 800312c:	f504 7079 	add.w	r0, r4, #996	@ 0x3e4
 8003130:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
 8003134:	f001 f818 	bl	8004168 <_ZN5ModelC1Ev>
 8003138:	4622      	mov	r2, r4
 800313a:	f504 7179 	add.w	r1, r4, #996	@ 0x3e4
 800313e:	4630      	mov	r0, r6
 8003140:	f001 f808 	bl	8004154 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003144:	4630      	mov	r0, r6
 8003146:	f000 fd81 	bl	8003c4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800314a:	4811      	ldr	r0, [pc, #68]	@ (8003190 <touchgfx_init+0xe8>)
 800314c:	f01e fb5e 	bl	802180c <atexit>
 8003150:	4628      	mov	r0, r5
 8003152:	f01d ffd2 	bl	80210fa <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003156:	480f      	ldr	r0, [pc, #60]	@ (8003194 <touchgfx_init+0xec>)
}
 8003158:	b002      	add	sp, #8
 800315a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800315e:	f7fe bcdb 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 8003162:	bf00      	nop
 8003164:	24025438 	.word	0x24025438
 8003168:	24009e4c 	.word	0x24009e4c
 800316c:	2400ac84 	.word	0x2400ac84
 8003170:	24009e6c 	.word	0x24009e6c
 8003174:	24009e50 	.word	0x24009e50
 8003178:	24000034 	.word	0x24000034
 800317c:	2400ac88 	.word	0x2400ac88
 8003180:	0802328c 	.word	0x0802328c
 8003184:	080231f0 	.word	0x080231f0
 8003188:	08023224 	.word	0x08023224
 800318c:	08023258 	.word	0x08023258
 8003190:	08003081 	.word	0x08003081
 8003194:	24009dd0 	.word	0x24009dd0

08003198 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003198:	4770      	bx	lr
	...

0800319c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800319c:	4801      	ldr	r0, [pc, #4]	@ (80031a4 <touchgfx_taskEntry+0x8>)
 800319e:	f7fe bccd 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80031a2:	bf00      	nop
 80031a4:	24009dd0 	.word	0x24009dd0

080031a8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031aa:	4c0e      	ldr	r4, [pc, #56]	@ (80031e4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031ae:	4e0f      	ldr	r6, [pc, #60]	@ (80031ec <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031b0:	4620      	mov	r0, r4
static LCD24bpp display;
 80031b2:	4d0f      	ldr	r5, [pc, #60]	@ (80031f0 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031b4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031b6:	f7ff fe33 	bl	8002e20 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031ba:	4628      	mov	r0, r5
 80031bc:	f017 f822 	bl	801a204 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031c0:	480c      	ldr	r0, [pc, #48]	@ (80031f4 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031c2:	f011 f8bf 	bl	8014344 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031c6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031ca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031ce:	4621      	mov	r1, r4
 80031d0:	4809      	ldr	r0, [pc, #36]	@ (80031f8 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031d2:	e9cd 3200 	strd	r3, r2, [sp]
 80031d6:	4633      	mov	r3, r6
 80031d8:	462a      	mov	r2, r5
 80031da:	f7fe fd43 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031de:	b002      	add	sp, #8
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
 80031e2:	bf00      	nop
 80031e4:	24009ed8 	.word	0x24009ed8
 80031e8:	080229c4 	.word	0x080229c4
 80031ec:	2400ac80 	.word	0x2400ac80
 80031f0:	24009e6c 	.word	0x24009e6c
 80031f4:	24009e50 	.word	0x24009e50
 80031f8:	24009dd0 	.word	0x24009dd0

080031fc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80031fc:	4801      	ldr	r0, [pc, #4]	@ (8003204 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80031fe:	f7ff bc5b 	b.w	8002ab8 <_ZN8STM32DMAD1Ev>
 8003202:	bf00      	nop
 8003204:	24009ed8 	.word	0x24009ed8

08003208 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003208:	2000      	movs	r0, #0
 800320a:	4770      	bx	lr

0800320c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800320c:	8081      	strh	r1, [r0, #4]
    }
 800320e:	4770      	bx	lr

08003210 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003210:	80c1      	strh	r1, [r0, #6]
    }
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003214:	8101      	strh	r1, [r0, #8]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003218:	8141      	strh	r1, [r0, #10]
    }
 800321a:	4770      	bx	lr

0800321c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800321c:	4770      	bx	lr

0800321e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800321e:	4770      	bx	lr

08003220 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003220:	4770      	bx	lr

08003222 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003222:	4770      	bx	lr

08003224 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003226:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003228:	88c4      	ldrh	r4, [r0, #6]
 800322a:	6803      	ldr	r3, [r0, #0]
 800322c:	1b12      	subs	r2, r2, r4
 800322e:	8884      	ldrh	r4, [r0, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	1b09      	subs	r1, r1, r4
 8003234:	b212      	sxth	r2, r2
    }
 8003236:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800323a:	b209      	sxth	r1, r1
 800323c:	4718      	bx	r3

0800323e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800323e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003242:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800324e:	6010      	str	r0, [r2, #0]
    }
 8003250:	4770      	bx	lr

08003252 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003252:	2000      	movs	r0, #0
 8003254:	4770      	bx	lr

08003256 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003256:	888b      	ldrh	r3, [r1, #4]
 8003258:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800325a:	2001      	movs	r0, #1
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800325e:	4770      	bx	lr

08003260 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003260:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003266:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800326a:	4770      	bx	lr

0800326c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800326c:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800326e:	b510      	push	{r4, lr}
        return rect.width;
 8003270:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003274:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003278:	8002      	strh	r2, [r0, #0]
 800327a:	8042      	strh	r2, [r0, #2]
 800327c:	8084      	strh	r4, [r0, #4]
 800327e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003280:	bd10      	pop	{r4, pc}

08003282 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003282:	2200      	movs	r2, #0
 8003284:	8002      	strh	r2, [r0, #0]
 8003286:	8042      	strh	r2, [r0, #2]
 8003288:	8082      	strh	r2, [r0, #4]
 800328a:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800328c:	4770      	bx	lr

0800328e <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800328e:	7701      	strb	r1, [r0, #28]
    }
 8003290:	4770      	bx	lr

08003292 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003292:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003296:	4770      	bx	lr

08003298 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003298:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 800329c:	4770      	bx	lr

0800329e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800329e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032a2:	4770      	bx	lr

080032a4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032a4:	2001      	movs	r0, #1
 80032a6:	4770      	bx	lr

080032a8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032a8:	3098      	adds	r0, #152	@ 0x98
 80032aa:	4770      	bx	lr

080032ac <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032ac:	308c      	adds	r0, #140	@ 0x8c
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032b0:	3084      	adds	r0, #132	@ 0x84
 80032b2:	4770      	bx	lr

080032b4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032b4:	4770      	bx	lr
	...

080032b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	4b02      	ldr	r3, [pc, #8]	@ (80032c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032ba:	2290      	movs	r2, #144	@ 0x90
 80032bc:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032c8:	4770      	bx	lr

080032ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032ca:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032cc:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032d0:	4770      	bx	lr

080032d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032d2:	4770      	bx	lr

080032d4 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032d4:	4770      	bx	lr

080032d6 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032d6:	4770      	bx	lr

080032d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032dc:	4611      	mov	r1, r2
 80032de:	6840      	ldr	r0, [r0, #4]
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4718      	bx	r3

080032e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80032e6:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80032ea:	4770      	bx	lr

080032ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	2148      	movs	r1, #72	@ 0x48
 80032f2:	f01d fef4 	bl	80210de <_ZdlPvj>
 80032f6:	4620      	mov	r0, r4
 80032f8:	bd10      	pop	{r4, pc}

080032fa <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	212c      	movs	r1, #44	@ 0x2c
 8003300:	f01d feed 	bl	80210de <_ZdlPvj>
 8003304:	4620      	mov	r0, r4
 8003306:	bd10      	pop	{r4, pc}

08003308 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003308:	b510      	push	{r4, lr}
 800330a:	4604      	mov	r4, r0
 800330c:	21bc      	movs	r1, #188	@ 0xbc
 800330e:	f01d fee6 	bl	80210de <_ZdlPvj>
 8003312:	4620      	mov	r0, r4
 8003314:	bd10      	pop	{r4, pc}
	...

08003318 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4604      	mov	r4, r0
    HAL::initialize();
 800331c:	f00a fdef 	bl	800defe <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003324:	f00f fe96 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 8003328:	4601      	mov	r1, r0
 800332a:	4620      	mov	r0, r4
 800332c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	4908      	ldr	r1, [pc, #32]	@ (8003354 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003332:	4620      	mov	r0, r4
 8003334:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003338:	2300      	movs	r3, #0
 800333a:	461a      	mov	r2, r3
 800333c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003342:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003346:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800334e:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	d0119400 	.word	0xd0119400
 8003358:	2400b2d4 	.word	0x2400b2d4
 800335c:	2400b28c 	.word	0x2400b28c
 8003360:	d0000000 	.word	0xd0000000
 8003364:	00119400 	.word	0x00119400

08003368 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4604      	mov	r4, r0
 800336c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800336e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003370:	f04f 31ff 	mov.w	r1, #4294967295
 8003374:	f007 fe14 	bl	800afa0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003378:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800337a:	f007 fe34 	bl	800afe6 <osMutexRelease>
        streams[handle].isActive = false;
 800337e:	2324      	movs	r3, #36	@ 0x24
 8003380:	fb03 4505 	mla	r5, r3, r5, r4
 8003384:	2300      	movs	r3, #0
 8003386:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 800338a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800338e:	b90b      	cbnz	r3, 8003394 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003390:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003392:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003394:	bd38      	pop	{r3, r4, r5, pc}

08003396 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003396:	f00a bd63 	b.w	800de60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800339a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800339a:	f00a bec4 	b.w	800e126 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800339e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800339e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033a2:	b112      	cbz	r2, 80033aa <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033a4:	6803      	ldr	r3, [r0, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4718      	bx	r3
    }
 80033aa:	4770      	bx	lr

080033ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033ac:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033ae:	6953      	ldr	r3, [r2, #20]
 80033b0:	03db      	lsls	r3, r3, #15
{
 80033b2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033b4:	d51e      	bpl.n	80033f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033bc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033c4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033c8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033cc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033d0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033d2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033d6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033d8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033dc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033de:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80033e2:	d2f9      	bcs.n	80033d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80033e4:	3b20      	subs	r3, #32
 80033e6:	f113 0f20 	cmn.w	r3, #32
 80033ea:	d1f2      	bne.n	80033d2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80033ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033f0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 80033fc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80033fe:	b131      	cbz	r1, 800340e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003402:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003406:	4a04      	ldr	r2, [pc, #16]	@ (8003418 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003408:	4804      	ldr	r0, [pc, #16]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800340a:	f01e f9e1 	bl	80217d0 <__assert_func>
    }
 800340e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003412:	bd08      	pop	{r3, pc}
 8003414:	08023298 	.word	0x08023298
 8003418:	080232ac 	.word	0x080232ac
 800341c:	08023436 	.word	0x08023436

08003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003420:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003422:	b131      	cbz	r1, 8003432 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003426:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800342a:	4a06      	ldr	r2, [pc, #24]	@ (8003444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800342c:	4806      	ldr	r0, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800342e:	f01e f9cf 	bl	80217d0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003432:	6840      	ldr	r0, [r0, #4]
 8003434:	4611      	mov	r1, r2
 8003436:	6803      	ldr	r3, [r0, #0]
    }
 8003438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4718      	bx	r3
 8003440:	08023298 	.word	0x08023298
 8003444:	08023480 	.word	0x08023480
 8003448:	08023436 	.word	0x08023436

0800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800344c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800344e:	b129      	cbz	r1, 800345c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003452:	2179      	movs	r1, #121	@ 0x79
 8003454:	4a03      	ldr	r2, [pc, #12]	@ (8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003456:	4804      	ldr	r0, [pc, #16]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003458:	f01e f9ba 	bl	80217d0 <__assert_func>
    }
 800345c:	68c0      	ldr	r0, [r0, #12]
 800345e:	bd08      	pop	{r3, pc}
 8003460:	08023298 	.word	0x08023298
 8003464:	0802362e 	.word	0x0802362e
 8003468:	08023436 	.word	0x08023436

0800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800346c:	b510      	push	{r4, lr}
 800346e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003470:	b129      	cbz	r1, 800347e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003474:	21a2      	movs	r1, #162	@ 0xa2
 8003476:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003478:	4819      	ldr	r0, [pc, #100]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800347a:	f01e f9a9 	bl	80217d0 <__assert_func>
        switch (cmd)
 800347e:	2a05      	cmp	r2, #5
 8003480:	d815      	bhi.n	80034ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003482:	e8df f002 	tbb	[pc, r2]
 8003486:	1103      	.short	0x1103
 8003488:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 800348c:	6840      	ldr	r0, [r0, #4]
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4798      	blx	r3
 8003494:	b158      	cbz	r0, 80034ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003496:	2301      	movs	r3, #1
 8003498:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800349c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034a0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034a6:	e002      	b.n	80034ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034ae:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034b0:	6203      	str	r3, [r0, #32]
 80034b2:	e7f5      	b.n	80034a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034b4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034bc:	e7f0      	b.n	80034a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034be:	2300      	movs	r3, #0
 80034c0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034c4:	2301      	movs	r3, #1
 80034c6:	6203      	str	r3, [r0, #32]
            break;
 80034c8:	e7f1      	b.n	80034ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034ca:	3b00      	subs	r3, #0
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034d4:	e7eb      	b.n	80034ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034d6:	bf00      	nop
 80034d8:	08023298 	.word	0x08023298
 80034dc:	080237e3 	.word	0x080237e3
 80034e0:	08023436 	.word	0x08023436

080034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80034e4:	b510      	push	{r4, lr}
 80034e6:	460c      	mov	r4, r1
 80034e8:	4611      	mov	r1, r2
 80034ea:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80034ec:	b12c      	cbz	r4, 80034fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80034f0:	2190      	movs	r1, #144	@ 0x90
 80034f2:	4a06      	ldr	r2, [pc, #24]	@ (800350c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80034f4:	4806      	ldr	r0, [pc, #24]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80034f6:	f01e f96b 	bl	80217d0 <__assert_func>
        stream.frameNumber = 0;
 80034fa:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80034fc:	6840      	ldr	r0, [r0, #4]
 80034fe:	6803      	ldr	r3, [r0, #0]
    }
 8003500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4718      	bx	r3
 8003508:	08023298 	.word	0x08023298
 800350c:	080239b7 	.word	0x080239b7
 8003510:	08023436 	.word	0x08023436

08003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003514:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003516:	b129      	cbz	r1, 8003524 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800351a:	2182      	movs	r1, #130	@ 0x82
 800351c:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800351e:	4806      	ldr	r0, [pc, #24]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003520:	f01e f956 	bl	80217d0 <__assert_func>
        stream.tickCount = 0;
 8003524:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003528:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800352c:	bd08      	pop	{r3, pc}
 800352e:	bf00      	nop
 8003530:	08023298 	.word	0x08023298
 8003534:	08023b92 	.word	0x08023b92
 8003538:	08023436 	.word	0x08023436

0800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800353c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003540:	b510      	push	{r4, lr}
 8003542:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003544:	b153      	cbz	r3, 800355c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003546:	f04f 31ff 	mov.w	r1, #4294967295
 800354a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800354c:	f007 fd28 	bl	800afa0 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003550:	2300      	movs	r3, #0
 8003552:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003556:	2301      	movs	r3, #1
 8003558:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800355c:	bd10      	pop	{r4, pc}

0800355e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800355e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003562:	b11a      	cbz	r2, 800356c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003564:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003568:	b102      	cbz	r2, 800356c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800356a:	6018      	str	r0, [r3, #0]
        }
    }
 800356c:	4770      	bx	lr
	...

08003570 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003570:	b510      	push	{r4, lr}
 8003572:	4604      	mov	r4, r0
 8003574:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003576:	b129      	cbz	r1, 8003584 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003578:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800357a:	21d0      	movs	r1, #208	@ 0xd0
 800357c:	4a13      	ldr	r2, [pc, #76]	@ (80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800357e:	4814      	ldr	r0, [pc, #80]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003580:	f01e f926 	bl	80217d0 <__assert_func>
        if (stream.isPlaying)
 8003584:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003588:	b133      	cbz	r3, 8003598 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800358a:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003592:	6963      	ldr	r3, [r4, #20]
 8003594:	4413      	add	r3, r2
 8003596:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003598:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800359c:	b90b      	cbnz	r3, 80035a2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800359e:	2001      	movs	r0, #1
    }
 80035a0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035a6:	6803      	ldr	r3, [r0, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035ac:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035ae:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035b2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1f1      	bne.n	800359e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ee      	bne.n	80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035c2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035c6:	e7eb      	b.n	80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035c8:	08023298 	.word	0x08023298
 80035cc:	08023d4e 	.word	0x08023d4e
 80035d0:	08023436 	.word	0x08023436
 80035d4:	240253d4 	.word	0x240253d4

080035d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035d8:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035da:	4c1a      	ldr	r4, [pc, #104]	@ (8003644 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035dc:	4605      	mov	r5, r0
    HAL::endFrame();
 80035de:	f00a fc81 	bl	800dee4 <_ZN8touchgfx3HAL8endFrameEv>
 80035e2:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035e6:	b913      	cbnz	r3, 80035ee <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80035e8:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80035ec:	b1ab      	cbz	r3, 800361a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80035ee:	69e1      	ldr	r1, [r4, #28]
 80035f0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80035f4:	4353      	muls	r3, r2
 80035f6:	6922      	ldr	r2, [r4, #16]
 80035f8:	434a      	muls	r2, r1
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d30d      	bcc.n	800361a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 80035fe:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003602:	b138      	cbz	r0, 8003614 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800360a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800360c:	bf98      	it	ls
 800360e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003612:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003614:	2301      	movs	r3, #1
 8003616:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800361a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800361c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800361e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003622:	f007 fd75 	bl	800b110 <osSemaphoreRelease>
        if (uiHasMutex)
 8003626:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800362a:	b12b      	cbz	r3, 8003638 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800362c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800362e:	f007 fcda 	bl	800afe6 <osMutexRelease>
            uiHasMutex = false;
 8003632:	2300      	movs	r3, #0
 8003634:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003638:	6868      	ldr	r0, [r5, #4]
 800363a:	6803      	ldr	r3, [r0, #0]
}
 800363c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4718      	bx	r3
 8003644:	2400b28c 	.word	0x2400b28c

08003648 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800364a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800364e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003652:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003656:	f3bf 8f6f 	isb	sy
}
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100

08003660 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003660:	4b02      	ldr	r3, [pc, #8]	@ (800366c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003662:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003674:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003678:	b9d8      	cbnz	r0, 80036b2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 800367a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800367e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003680:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003682:	60d8      	str	r0, [r3, #12]
 8003684:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003686:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 800368a:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800368c:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003690:	6158      	str	r0, [r3, #20]
 8003692:	6198      	str	r0, [r3, #24]
 8003694:	61d8      	str	r0, [r3, #28]
 8003696:	6218      	str	r0, [r3, #32]
 8003698:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 800369a:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 800369c:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036a4:	443c      	add	r4, r7
 80036a6:	42a2      	cmp	r2, r4
 80036a8:	d90a      	bls.n	80036c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036ac:	2152      	movs	r1, #82	@ 0x52
 80036ae:	4a0b      	ldr	r2, [pc, #44]	@ (80036dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036b0:	e003      	b.n	80036ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036b4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036b8:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036ba:	480b      	ldr	r0, [pc, #44]	@ (80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036bc:	f01e f888 	bl	80217d0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036c0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036c4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036c8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036cc:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036ce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036d2:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036d4:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	080240a6 	.word	0x080240a6
 80036dc:	080240e1 	.word	0x080240e1
 80036e0:	08023eef 	.word	0x08023eef
 80036e4:	08023f1f 	.word	0x08023f1f
 80036e8:	08023436 	.word	0x08023436

080036ec <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80036ec:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036ee:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036f0:	4e12      	ldr	r6, [pc, #72]	@ (800373c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80036f2:	4604      	mov	r4, r0
 80036f4:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 80036f8:	6003      	str	r3, [r0, #0]
 80036fa:	6833      	ldr	r3, [r6, #0]
 80036fc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003700:	b10a      	cbz	r2, 8003706 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003702:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003704:	b900      	cbnz	r0, 8003708 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003706:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003708:	6803      	ldr	r3, [r0, #0]
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	4798      	blx	r3
 800370e:	1e43      	subs	r3, r0, #1
 8003710:	425d      	negs	r5, r3
 8003712:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003718:	b130      	cbz	r0, 8003728 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800371a:	6803      	ldr	r3, [r0, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	4798      	blx	r3
 8003720:	2801      	cmp	r0, #1
 8003722:	bf08      	it	eq
 8003724:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003728:	b92d      	cbnz	r5, 8003736 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 800372c:	2127      	movs	r1, #39	@ 0x27
 800372e:	4a06      	ldr	r2, [pc, #24]	@ (8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003730:	4806      	ldr	r0, [pc, #24]	@ (800374c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003732:	f01e f84d 	bl	80217d0 <__assert_func>
    }
 8003736:	4620      	mov	r0, r4
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	bf00      	nop
 800373c:	240253d4 	.word	0x240253d4
 8003740:	08024394 	.word	0x08024394
 8003744:	08024284 	.word	0x08024284
 8003748:	080242e2 	.word	0x080242e2
 800374c:	0802431b 	.word	0x0802431b

08003750 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003750:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003752:	4e24      	ldr	r6, [pc, #144]	@ (80037e4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003754:	6835      	ldr	r5, [r6, #0]
 8003756:	f3bf 8f5b 	dmb	ish
 800375a:	f015 0501 	ands.w	r5, r5, #1
 800375e:	d13f      	bne.n	80037e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003760:	4630      	mov	r0, r6
 8003762:	f01d fcbe 	bl	80210e2 <__cxa_guard_acquire>
 8003766:	2800      	cmp	r0, #0
 8003768:	d03a      	beq.n	80037e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 800376a:	4c1f      	ldr	r4, [pc, #124]	@ (80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 800376c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 800376e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003772:	6125      	str	r5, [r4, #16]
 8003774:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003776:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003778:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 800377a:	e9c4 3500 	strd	r3, r5, [r4]
 800377e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003782:	f011 f83e 	bl	8014802 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003786:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800378a:	f00c fddb 	bl	8010344 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800378e:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003790:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003792:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003794:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003796:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800379a:	f7ff ffa7 	bl	80036ec <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800379e:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037a0:	4816      	ldr	r0, [pc, #88]	@ (80037fc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037a2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037a6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037a8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037ac:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037b0:	2364      	movs	r3, #100	@ 0x64
 80037b2:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037b6:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037ba:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037c4:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037c8:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037cc:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037d2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037d6:	f01e f819 	bl	802180c <atexit>
 80037da:	4630      	mov	r0, r6
 80037dc:	f01d fc8d 	bl	80210fa <__cxa_guard_release>
}
 80037e0:	4801      	ldr	r0, [pc, #4]	@ (80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	2400b1cc 	.word	0x2400b1cc
 80037e8:	2400b1d0 	.word	0x2400b1d0
 80037ec:	08025240 	.word	0x08025240
 80037f0:	080243b4 	.word	0x080243b4
 80037f4:	0802442c 	.word	0x0802442c
 80037f8:	0802528c 	.word	0x0802528c
 80037fc:	080032b5 	.word	0x080032b5
 8003800:	080252c4 	.word	0x080252c4

08003804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003808:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800380a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800380c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003810:	f04f 31ff 	mov.w	r1, #4294967295
 8003814:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003816:	f007 fc4f 	bl	800b0b8 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800381a:	f04f 31ff 	mov.w	r1, #4294967295
 800381e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003820:	f007 fbbe 	bl	800afa0 <osMutexAcquire>
                if (stream.doDecode)
 8003824:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003828:	b343      	cbz	r3, 800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800382a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800382c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003830:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003832:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003836:	f1b8 0f00 	cmp.w	r8, #0
 800383a:	d023      	beq.n	8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	4641      	mov	r1, r8
 8003840:	4628      	mov	r0, r5
 8003842:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800384e:	9700      	str	r7, [sp, #0]
 8003850:	4628      	mov	r0, r5
 8003852:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003856:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800385a:	68a1      	ldr	r1, [r4, #8]
 800385c:	47c0      	blx	r8
                    stream.frameCount++;
 800385e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003860:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003864:	3301      	adds	r3, #1
 8003866:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003868:	b1f0      	cbz	r0, 80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	4628      	mov	r0, r5
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	4798      	blx	r3
 8003872:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003874:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003876:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003878:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 800387c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800387e:	f007 fbb2 	bl	800afe6 <osMutexRelease>
        while (1)
 8003882:	e7c5      	b.n	8003810 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003884:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003886:	2a00      	cmp	r2, #0
 8003888:	d0de      	beq.n	8003848 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800388a:	4628      	mov	r0, r5
 800388c:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003890:	4798      	blx	r3
 8003892:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003894:	4401      	add	r1, r0
 8003896:	4628      	mov	r0, r5
 8003898:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 800389e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038a2:	4413      	add	r3, r2
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	e7cf      	b.n	8003848 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7e3      	b.n	8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038ac <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038ac:	4801      	ldr	r0, [pc, #4]	@ (80038b4 <videoTaskFunc+0x8>)
{
 80038ae:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038b0:	f7ff ffa8 	bl	8003804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038b4:	2400b28c 	.word	0x2400b28c

080038b8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038b8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038ba:	4814      	ldr	r0, [pc, #80]	@ (800390c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038bc:	2500      	movs	r5, #0
 80038be:	f7fe fbef 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038c2:	4c13      	ldr	r4, [pc, #76]	@ (8003910 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038c6:	462a      	mov	r2, r5
 80038c8:	4629      	mov	r1, r5
 80038ca:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038d2:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038d6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d8:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80038dc:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e0:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e4:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80038e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038ec:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80038f4:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038f8:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 80038fc:	f007 fb92 	bl	800b024 <osSemaphoreNew>
 8003900:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003902:	4628      	mov	r0, r5
 8003904:	f007 fb17 	bl	800af36 <osMutexNew>
 8003908:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	2400b2d4 	.word	0x2400b2d4
 8003910:	2400b28c 	.word	0x2400b28c
 8003914:	08024478 	.word	0x08024478

08003918 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003918:	4770      	bx	lr

0800391a <_ZN23ApplicationFontProviderD0Ev>:
 800391a:	b510      	push	{r4, lr}
 800391c:	4604      	mov	r4, r0
 800391e:	2104      	movs	r1, #4
 8003920:	f01d fbdd 	bl	80210de <_ZdlPvj>
 8003924:	4620      	mov	r0, r4
 8003926:	bd10      	pop	{r4, pc}

08003928 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003928:	2901      	cmp	r1, #1
{
 800392a:	b508      	push	{r3, lr}
    switch (typography)
 800392c:	d006      	beq.n	800393c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800392e:	2902      	cmp	r1, #2
 8003930:	d008      	beq.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003932:	b959      	cbnz	r1, 800394c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003934:	f000 fbe0 	bl	80040f8 <_ZN17TypedTextDatabase8getFontsEv>
 8003938:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800393a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800393c:	f000 fbdc 	bl	80040f8 <_ZN17TypedTextDatabase8getFontsEv>
 8003940:	6840      	ldr	r0, [r0, #4]
 8003942:	e7fa      	b.n	800393a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003944:	f000 fbd8 	bl	80040f8 <_ZN17TypedTextDatabase8getFontsEv>
 8003948:	6880      	ldr	r0, [r0, #8]
 800394a:	e7f6      	b.n	800393a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800394c:	2000      	movs	r0, #0
 800394e:	e7f4      	b.n	800393a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003950 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003950:	4800      	ldr	r0, [pc, #0]	@ (8003954 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003952:	4770      	bx	lr
 8003954:	080244c8 	.word	0x080244c8

08003958 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003958:	2004      	movs	r0, #4
 800395a:	4770      	bx	lr

0800395c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800395c:	b513      	push	{r0, r1, r4, lr}
 800395e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003960:	b151      	cbz	r1, 8003978 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003962:	6803      	ldr	r3, [r0, #0]
 8003964:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003966:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003968:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800396c:	689c      	ldr	r4, [r3, #8]
 800396e:	f10d 0303 	add.w	r3, sp, #3
 8003972:	47a0      	blx	r4
        return glyph;
    }
 8003974:	b002      	add	sp, #8
 8003976:	bd10      	pop	{r4, pc}
            return 0;
 8003978:	4608      	mov	r0, r1
 800397a:	e7fb      	b.n	8003974 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800397c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800397c:	89c0      	ldrh	r0, [r0, #14]
 800397e:	4770      	bx	lr

08003980 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003980:	8a00      	ldrh	r0, [r0, #16]
 8003982:	4770      	bx	lr

08003984 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003984:	88c0      	ldrh	r0, [r0, #6]
 8003986:	4770      	bx	lr

08003988 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003988:	8880      	ldrh	r0, [r0, #4]
 800398a:	4770      	bx	lr

0800398c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800398c:	7a80      	ldrb	r0, [r0, #10]
    }
 800398e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003992:	4770      	bx	lr

08003994 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003994:	7a80      	ldrb	r0, [r0, #10]
    }
 8003996:	09c0      	lsrs	r0, r0, #7
 8003998:	4770      	bx	lr

0800399a <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800399a:	2000      	movs	r0, #0
 800399c:	4770      	bx	lr
	...

080039a0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039a8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	00000000 	.word	0x00000000

080039ac <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80039ac:	4770      	bx	lr

080039ae <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80039ae:	4770      	bx	lr

080039b0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80039b0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80039b4:	6808      	ldr	r0, [r1, #0]
 80039b6:	6849      	ldr	r1, [r1, #4]
 80039b8:	c303      	stmia	r3!, {r0, r1}
    }
 80039ba:	4770      	bx	lr

080039bc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80039bc:	4770      	bx	lr

080039be <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80039be:	4770      	bx	lr

080039c0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80039c0:	6041      	str	r1, [r0, #4]
    }
 80039c2:	4770      	bx	lr

080039c4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80039c4:	4770      	bx	lr
	...

080039c8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80039ca:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80039ce:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80039d8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80039dc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	08003a89 	.word	0x08003a89

080039e8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80039e8:	2301      	movs	r3, #1
 80039ea:	7203      	strb	r3, [r0, #8]
    }
 80039ec:	4770      	bx	lr

080039ee <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80039ee:	4770      	bx	lr

080039f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80039f0:	4770      	bx	lr

080039f2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80039f2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80039f4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80039f6:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80039f8:	68c2      	ldr	r2, [r0, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	1054      	asrs	r4, r2, #1
 80039fe:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003a02:	07d2      	lsls	r2, r2, #31
 8003a04:	bf48      	it	mi
 8003a06:	590a      	ldrmi	r2, [r1, r4]
    }
 8003a08:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003a0c:	bf48      	it	mi
 8003a0e:	58d3      	ldrmi	r3, [r2, r3]
 8003a10:	4718      	bx	r3

08003a12 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003a12:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003a14:	6840      	ldr	r0, [r0, #4]
 8003a16:	b130      	cbz	r0, 8003a26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	b91a      	cbnz	r2, 8003a24 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003a1c:	68d8      	ldr	r0, [r3, #12]
 8003a1e:	f000 0001 	and.w	r0, r0, #1
 8003a22:	4770      	bx	lr
 8003a24:	2001      	movs	r0, #1
    }
 8003a26:	4770      	bx	lr

08003a28 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	210c      	movs	r1, #12
 8003a2e:	f01d fb56 	bl	80210de <_ZdlPvj>
 8003a32:	4620      	mov	r0, r4
 8003a34:	bd10      	pop	{r4, pc}

08003a36 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a36:	b510      	push	{r4, lr}
 8003a38:	4604      	mov	r4, r0
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	f01d fb4f 	bl	80210de <_ZdlPvj>
 8003a40:	4620      	mov	r0, r4
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003a44:	b510      	push	{r4, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003a4c:	f01d fb47 	bl	80210de <_ZdlPvj>
 8003a50:	4620      	mov	r0, r4
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003a54:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003a56:	f00f fafd 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 8003a5a:	6803      	ldr	r3, [r0, #0]
    }
 8003a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	4718      	bx	r3

08003a64 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003a68:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003a6c:	b158      	cbz	r0, 8003a86 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003a6e:	6803      	ldr	r3, [r0, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4798      	blx	r3
 8003a74:	b138      	cbz	r0, 8003a86 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003a76:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003a7a:	6803      	ldr	r3, [r0, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003a86:	bd10      	pop	{r4, pc}

08003a88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003a88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003a8c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003a90:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003a92:	68b0      	ldr	r0, [r6, #8]
 8003a94:	6803      	ldr	r3, [r0, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4798      	blx	r3
 8003a9a:	f5b0 7f67 	cmp.w	r0, #924	@ 0x39c
 8003a9e:	d205      	bcs.n	8003aac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003aa0:	4b44      	ldr	r3, [pc, #272]	@ (8003bb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003aa2:	21a3      	movs	r1, #163	@ 0xa3
 8003aa4:	4a44      	ldr	r2, [pc, #272]	@ (8003bb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003aa6:	4845      	ldr	r0, [pc, #276]	@ (8003bbc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003aa8:	f01d fe92 	bl	80217d0 <__assert_func>
 8003aac:	6870      	ldr	r0, [r6, #4]
 8003aae:	6803      	ldr	r3, [r0, #0]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4798      	blx	r3
 8003ab4:	280f      	cmp	r0, #15
 8003ab6:	d803      	bhi.n	8003ac0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003aba:	21a4      	movs	r1, #164	@ 0xa4
 8003abc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003abe:	e7f2      	b.n	8003aa6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003ac0:	68f0      	ldr	r0, [r6, #12]
 8003ac2:	6803      	ldr	r3, [r0, #0]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4798      	blx	r3
 8003ac8:	280b      	cmp	r0, #11
 8003aca:	d803      	bhi.n	8003ad4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003acc:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003ace:	21a5      	movs	r1, #165	@ 0xa5
 8003ad0:	4a39      	ldr	r2, [pc, #228]	@ (8003bb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003ad2:	e7e8      	b.n	8003aa6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003ad4:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003bcc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003ad8:	f00f fabc 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003adc:	3004      	adds	r0, #4
 8003ade:	f00f faf7 	bl	80130d0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003ae2:	f8d9 0000 	ldr.w	r0, [r9]
 8003ae6:	b110      	cbz	r0, 8003aee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003ae8:	6803      	ldr	r3, [r0, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4798      	blx	r3
    if (*currentTrans)
 8003aee:	f8d9 0000 	ldr.w	r0, [r9]
 8003af2:	b110      	cbz	r0, 8003afa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4798      	blx	r3
    if (*currentScreen)
 8003afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003afe:	f8d8 0000 	ldr.w	r0, [r8]
 8003b02:	b110      	cbz	r0, 8003b0a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003b04:	6803      	ldr	r3, [r0, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	4798      	blx	r3
    if (*currentPresenter)
 8003b0a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b0e:	b110      	cbz	r0, 8003b16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003b10:	6803      	ldr	r3, [r0, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4798      	blx	r3
    if (*currentScreen)
 8003b16:	f8d8 0000 	ldr.w	r0, [r8]
 8003b1a:	b110      	cbz	r0, 8003b22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003b1c:	6803      	ldr	r3, [r0, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4798      	blx	r3
    if (*currentPresenter)
 8003b22:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003b26:	b110      	cbz	r0, 8003b2e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003b28:	6803      	ldr	r3, [r0, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003b2e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003b30:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003b32:	f04f 0b00 	mov.w	fp, #0
 8003b36:	6803      	ldr	r3, [r0, #0]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	4798      	blx	r3
 8003b3c:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003b3e:	4604      	mov	r4, r0
 8003b40:	f8c0 b004 	str.w	fp, [r0, #4]
 8003b44:	f880 b008 	strb.w	fp, [r0, #8]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003b4c:	68b0      	ldr	r0, [r6, #8]
 8003b4e:	6803      	ldr	r3, [r0, #0]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	4798      	blx	r3
 8003b54:	4605      	mov	r5, r0
 8003b56:	f000 fb3b 	bl	80041d0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003b5a:	6870      	ldr	r0, [r6, #4]
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	6803      	ldr	r3, [r0, #0]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	4798      	blx	r3
 8003b64:	4606      	mov	r6, r0
 8003b66:	4629      	mov	r1, r5
 8003b68:	f000 fb10 	bl	800418c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003b6c:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003b6e:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003b72:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003b74:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003b78:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003b7c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003b80:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003b82:	f8c6 a008 	str.w	sl, [r6, #8]
 8003b86:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003b88:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003b8a:	4798      	blx	r3
    newPresenter->activate();
 8003b8c:	6833      	ldr	r3, [r6, #0]
 8003b8e:	4630      	mov	r0, r6
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003b94:	4621      	mov	r1, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	f011 fab8 	bl	801510c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	4798      	blx	r3
    newTransition->invalidate();
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	695b      	ldr	r3, [r3, #20]
}
 8003baa:	b001      	add	sp, #4
 8003bac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4718      	bx	r3
 8003bb2:	bf00      	nop
 8003bb4:	08024518 	.word	0x08024518
 8003bb8:	080245a6 	.word	0x080245a6
 8003bbc:	08024678 	.word	0x08024678
 8003bc0:	080246cd 	.word	0x080246cd
 8003bc4:	08024770 	.word	0x08024770
 8003bc8:	08024888 	.word	0x08024888
 8003bcc:	2402541c 	.word	0x2402541c
 8003bd0:	24025418 	.word	0x24025418

08003bd4 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bd4:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003bdc:	b10a      	cbz	r2, 8003be2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003bde:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003be0:	b900      	cbnz	r0, 8003be4 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003be2:	6898      	ldr	r0, [r3, #8]
    }
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	240253d4 	.word	0x240253d4

08003bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	4616      	mov	r6, r2
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 8003bf4:	f00f fb3e 	bl	8013274 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003bf8:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003bfa:	2100      	movs	r1, #0
        instance = this;
 8003bfc:	601c      	str	r4, [r3, #0]
      model(m)
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003c00:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003c04:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c10:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003c12:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 8003c16:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003c18:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003c1c:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003c1e:	f7ff ffd9 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8003c22:	f017 fbf0 	bl	801b406 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003c26:	f7ff ffd5 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8003c2a:	f017 fc63 	bl	801b4f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003c2e:	f7ff ffd1 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8003c32:	f017 fc6b 	bl	801b50c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003c36:	4620      	mov	r0, r4
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
 8003c3a:	bf00      	nop
 8003c3c:	24025428 	.word	0x24025428
 8003c40:	08024834 	.word	0x08024834
 8003c44:	0802481c 	.word	0x0802481c
 8003c48:	240253d4 	.word	0x240253d4

08003c4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003c4e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003c52:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003c5c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003c60:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	08003a89 	.word	0x08003a89

08003c6c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003c6c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003c6e:	4770      	bx	lr

08003c70 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003c70:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c72:	4770      	bx	lr

08003c74 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003c74:	4770      	bx	lr

08003c76 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003c76:	888b      	ldrh	r3, [r1, #4]
 8003c78:	69c0      	ldr	r0, [r0, #28]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	680a      	ldr	r2, [r1, #0]
 8003c7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003c82:	4410      	add	r0, r2
 8003c84:	4770      	bx	lr

08003c86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003c8a:	b1ba      	cbz	r2, 8003cbc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003c8c:	7b10      	ldrb	r0, [r2, #12]
 8003c8e:	b168      	cbz	r0, 8003cac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003c90:	7b53      	ldrb	r3, [r2, #13]
 8003c92:	7ad2      	ldrb	r2, [r2, #11]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	6a23      	ldr	r3, [r4, #32]
 8003c9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	428a      	cmp	r2, r1
 8003ca6:	d102      	bne.n	8003cae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003ca8:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003cac:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003cae:	d805      	bhi.n	8003cbc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003cb0:	3801      	subs	r0, #1
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	b280      	uxth	r0, r0
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1f3      	bne.n	8003ca2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003cba:	e7f7      	b.n	8003cac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e7f5      	b.n	8003cac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003cc0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	212c      	movs	r1, #44	@ 0x2c
 8003cc6:	f01d fa0a 	bl	80210de <_ZdlPvj>
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd10      	pop	{r4, pc}
	...

08003cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003cd0:	b530      	push	{r4, r5, lr}
 8003cd2:	b08b      	sub	sp, #44	@ 0x2c
 8003cd4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003cd6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003cda:	9508      	str	r5, [sp, #32]
 8003cdc:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003ce0:	9507      	str	r5, [sp, #28]
 8003ce2:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003ce6:	9506      	str	r5, [sp, #24]
 8003ce8:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003cec:	9505      	str	r5, [sp, #20]
 8003cee:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003cf2:	9504      	str	r5, [sp, #16]
 8003cf4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003cf8:	9503      	str	r5, [sp, #12]
 8003cfa:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003cfe:	9502      	str	r5, [sp, #8]
 8003d00:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003d04:	9501      	str	r5, [sp, #4]
 8003d06:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003d0a:	9500      	str	r5, [sp, #0]
 8003d0c:	f010 fe36 	bl	801497c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003d12:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003d14:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003d16:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003d18:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003d1a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003d1c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d20:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003d22:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003d24:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003d26:	b00b      	add	sp, #44	@ 0x2c
 8003d28:	bd30      	pop	{r4, r5, pc}
 8003d2a:	bf00      	nop
 8003d2c:	080248ac 	.word	0x080248ac

08003d30 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003d30:	4770      	bx	lr

08003d32 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003d32:	4770      	bx	lr

08003d34 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003d34:	4770      	bx	lr

08003d36 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003d36:	4770      	bx	lr

08003d38 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003d38:	4770      	bx	lr

08003d3a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003d3a:	4770      	bx	lr

08003d3c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003d3c:	4770      	bx	lr

08003d3e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	4604      	mov	r4, r0
}
 8003d42:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8003d46:	f01d f9ca 	bl	80210de <_ZdlPvj>
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	bd10      	pop	{r4, pc}

08003d4e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003d4e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	4604      	mov	r4, r0
        setX(x);
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003d56:	4615      	mov	r5, r2
        setX(x);
 8003d58:	4798      	blx	r3
        setY(y);
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	4629      	mov	r1, r5
 8003d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003d66:	4718      	bx	r3

08003d68 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6c:	4604      	mov	r4, r0
        : presenter(0)
 8003d6e:	2500      	movs	r5, #0
 8003d70:	f011 f820 	bl	8014db4 <_ZN8touchgfx6ScreenC1Ev>
 8003d74:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 8003d76:	4627      	mov	r7, r4
 8003d78:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003d7a:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d7e:	f104 0804 	add.w	r8, r4, #4
 8003d82:	f847 3b40 	str.w	r3, [r7], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003d86:	4b30      	ldr	r3, [pc, #192]	@ (8003e48 <_ZN15Screen1ViewBaseC1Ev+0xe0>)
 8003d88:	4630      	mov	r0, r6
          cachedAbsX(0),
 8003d8a:	6625      	str	r5, [r4, #96]	@ 0x60
        : color(col)
 8003d8c:	66a5      	str	r5, [r4, #104]	@ 0x68
        : x(0), y(0), width(0), height(0)
 8003d8e:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 8003d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d96:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8003d9a:	23ff      	movs	r3, #255	@ 0xff
 8003d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8003da0:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
          parent(0),
 8003da4:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8003da8:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 8003dac:	f009 fcea 	bl	800d784 <_ZN8touchgfx11AnalogClockC1Ev>
        setXY(x, y);
 8003db0:	462a      	mov	r2, r5
 8003db2:	4629      	mov	r1, r5
 8003db4:	4638      	mov	r0, r7
 8003db6:	f7ff ffca 	bl	8003d4e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003dba:	4638      	mov	r0, r7
 8003dbc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003dc0:	f7ff fa28 	bl	8003214 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003dca:	f7ff fa25 	bl	8003218 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003dce:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003dd8:	f009 fda7 	bl	800d92a <_ZN8touchgfx9Container3addERNS_8DrawableE>
    analogClock1.setXY(274, 100);
 8003ddc:	4630      	mov	r0, r6
 8003dde:	2264      	movs	r2, #100	@ 0x64
 8003de0:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8003de4:	f7ff ffb3 	bl	8003d4e <_ZN8touchgfx8Drawable5setXYEss>
    analogClock1.setBackground(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_BACKGROUNDS_SMALL_PLAIN_DARK_ID, 120, 120);
 8003de8:	2378      	movs	r3, #120	@ 0x78
 8003dea:	4629      	mov	r1, r5
 8003dec:	4630      	mov	r0, r6
 8003dee:	461a      	mov	r2, r3
 8003df0:	f009 fb8c 	bl	800d50c <_ZN8touchgfx11AnalogClock13setBackgroundEtss>
    analogClock1.setupSecondHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_SECOND_PLAIN_DARK_ID, 2, 100);
 8003df4:	4630      	mov	r0, r6
 8003df6:	2364      	movs	r3, #100	@ 0x64
 8003df8:	2202      	movs	r2, #2
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	f009 fa2d 	bl	800d25a <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>
    analogClock1.setupMinuteHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_MINUTE_PLAIN_DARK_ID, 10, 87);
 8003e00:	2357      	movs	r3, #87	@ 0x57
 8003e02:	220a      	movs	r2, #10
 8003e04:	4630      	mov	r0, r6
 8003e06:	2102      	movs	r1, #2
 8003e08:	f009 fa1b 	bl	800d242 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>
    analogClock1.setMinuteHandSecondCorrection(false);
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f009 fada 	bl	800d3c8 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>
    analogClock1.setupHourHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_HOUR_PLAIN_DARK_ID, 9, 69);
 8003e14:	2345      	movs	r3, #69	@ 0x45
 8003e16:	2209      	movs	r2, #9
 8003e18:	4630      	mov	r0, r6
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	f009 fa05 	bl	800d22a <_ZN8touchgfx11AnalogClock13setupHourHandEtss>
    analogClock1.setHourHandMinuteCorrection(false);
 8003e20:	4629      	mov	r1, r5
 8003e22:	4630      	mov	r0, r6
 8003e24:	f009 fab6 	bl	800d394 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>
    analogClock1.initializeTime24Hour(10, 10, 0);
 8003e28:	220a      	movs	r2, #10
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	4611      	mov	r1, r2
 8003e30:	f009 fa1f 	bl	800d272 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>
 8003e34:	4640      	mov	r0, r8
 8003e36:	4631      	mov	r1, r6
 8003e38:	f009 fd77 	bl	800d92a <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e42:	bf00      	nop
 8003e44:	08024914 	.word	0x08024914
 8003e48:	08025598 	.word	0x08025598

08003e4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e4c:	4770      	bx	lr
	...

08003e50 <_Z23getFont_verdana_10_4bppv>:
{
 8003e50:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e52:	4d16      	ldr	r5, [pc, #88]	@ (8003eac <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003e54:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e56:	682c      	ldr	r4, [r5, #0]
 8003e58:	f3bf 8f5b 	dmb	ish
 8003e5c:	f014 0401 	ands.w	r4, r4, #1
 8003e60:	d120      	bne.n	8003ea4 <_Z23getFont_verdana_10_4bppv+0x54>
 8003e62:	4628      	mov	r0, r5
 8003e64:	f01d f93d 	bl	80210e2 <__cxa_guard_acquire>
 8003e68:	b1e0      	cbz	r0, 8003ea4 <_Z23getFont_verdana_10_4bppv+0x54>
 8003e6a:	233f      	movs	r3, #63	@ 0x3f
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4910      	ldr	r1, [pc, #64]	@ (8003eb0 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003e74:	4810      	ldr	r0, [pc, #64]	@ (8003eb8 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003e76:	9308      	str	r3, [sp, #32]
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003e7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e7c:	9405      	str	r4, [sp, #20]
 8003e7e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e82:	2304      	movs	r3, #4
 8003e84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e88:	230a      	movs	r3, #10
 8003e8a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e94:	f7ff ff1c 	bl	8003cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e98:	4809      	ldr	r0, [pc, #36]	@ (8003ec0 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003e9a:	f01d fcb7 	bl	802180c <atexit>
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f01d f92b 	bl	80210fa <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003ea4:	4804      	ldr	r0, [pc, #16]	@ (8003eb8 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003ea6:	b00f      	add	sp, #60	@ 0x3c
 8003ea8:	bd30      	pop	{r4, r5, pc}
 8003eaa:	bf00      	nop
 8003eac:	2400b31c 	.word	0x2400b31c
 8003eb0:	08025d74 	.word	0x08025d74
 8003eb4:	08025da4 	.word	0x08025da4
 8003eb8:	2400b320 	.word	0x2400b320
 8003ebc:	08025db0 	.word	0x08025db0
 8003ec0:	08003e4d 	.word	0x08003e4d

08003ec4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ec4:	4770      	bx	lr
	...

08003ec8 <_Z23getFont_verdana_20_4bppv>:
{
 8003ec8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003eca:	4d16      	ldr	r5, [pc, #88]	@ (8003f24 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003ecc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ece:	682c      	ldr	r4, [r5, #0]
 8003ed0:	f3bf 8f5b 	dmb	ish
 8003ed4:	f014 0401 	ands.w	r4, r4, #1
 8003ed8:	d120      	bne.n	8003f1c <_Z23getFont_verdana_20_4bppv+0x54>
 8003eda:	4628      	mov	r0, r5
 8003edc:	f01d f901 	bl	80210e2 <__cxa_guard_acquire>
 8003ee0:	b1e0      	cbz	r0, 8003f1c <_Z23getFont_verdana_20_4bppv+0x54>
 8003ee2:	233f      	movs	r3, #63	@ 0x3f
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4910      	ldr	r1, [pc, #64]	@ (8003f28 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <_Z23getFont_verdana_20_4bppv+0x64>)
 8003eec:	4810      	ldr	r0, [pc, #64]	@ (8003f30 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003ef2:	940a      	str	r4, [sp, #40]	@ 0x28
 8003ef4:	9405      	str	r4, [sp, #20]
 8003ef6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003efa:	2304      	movs	r3, #4
 8003efc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f00:	2314      	movs	r3, #20
 8003f02:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f0c:	f7ff fee0 	bl	8003cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f10:	4809      	ldr	r0, [pc, #36]	@ (8003f38 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003f12:	f01d fc7b 	bl	802180c <atexit>
 8003f16:	4628      	mov	r0, r5
 8003f18:	f01d f8ef 	bl	80210fa <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003f1c:	4804      	ldr	r0, [pc, #16]	@ (8003f30 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003f1e:	b00f      	add	sp, #60	@ 0x3c
 8003f20:	bd30      	pop	{r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	2400b34c 	.word	0x2400b34c
 8003f28:	08025d84 	.word	0x08025d84
 8003f2c:	08025da8 	.word	0x08025da8
 8003f30:	2400b350 	.word	0x2400b350
 8003f34:	08025db4 	.word	0x08025db4
 8003f38:	08003ec5 	.word	0x08003ec5

08003f3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f3c:	4770      	bx	lr
	...

08003f40 <_Z23getFont_verdana_40_4bppv>:
{
 8003f40:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f42:	4d16      	ldr	r5, [pc, #88]	@ (8003f9c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003f44:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f46:	682c      	ldr	r4, [r5, #0]
 8003f48:	f3bf 8f5b 	dmb	ish
 8003f4c:	f014 0401 	ands.w	r4, r4, #1
 8003f50:	d120      	bne.n	8003f94 <_Z23getFont_verdana_40_4bppv+0x54>
 8003f52:	4628      	mov	r0, r5
 8003f54:	f01d f8c5 	bl	80210e2 <__cxa_guard_acquire>
 8003f58:	b1e0      	cbz	r0, 8003f94 <_Z23getFont_verdana_40_4bppv+0x54>
 8003f5a:	233f      	movs	r3, #63	@ 0x3f
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4910      	ldr	r1, [pc, #64]	@ (8003fa0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003f64:	4810      	ldr	r0, [pc, #64]	@ (8003fa8 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f66:	9308      	str	r3, [sp, #32]
 8003f68:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003f6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8003f6c:	9405      	str	r4, [sp, #20]
 8003f6e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f72:	2304      	movs	r3, #4
 8003f74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f78:	2328      	movs	r3, #40	@ 0x28
 8003f7a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f84:	f7ff fea4 	bl	8003cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f88:	4809      	ldr	r0, [pc, #36]	@ (8003fb0 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003f8a:	f01d fc3f 	bl	802180c <atexit>
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f01d f8b3 	bl	80210fa <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003f94:	4804      	ldr	r0, [pc, #16]	@ (8003fa8 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f96:	b00f      	add	sp, #60	@ 0x3c
 8003f98:	bd30      	pop	{r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2400b37c 	.word	0x2400b37c
 8003fa0:	08025d94 	.word	0x08025d94
 8003fa4:	08025dac 	.word	0x08025dac
 8003fa8:	2400b380 	.word	0x2400b380
 8003fac:	08025db8 	.word	0x08025db8
 8003fb0:	08003f3d 	.word	0x08003f3d

08003fb4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4770      	bx	lr

08003fb8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003fb8:	2000      	movs	r0, #0
 8003fba:	4770      	bx	lr

08003fbc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fbc:	b40e      	push	{r1, r2, r3}
 8003fbe:	b503      	push	{r0, r1, lr}
 8003fc0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fc2:	2100      	movs	r1, #0
{
 8003fc4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003fc8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fca:	f00f ffdb 	bl	8013f84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003fce:	b002      	add	sp, #8
 8003fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd4:	b003      	add	sp, #12
 8003fd6:	4770      	bx	lr

08003fd8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fd8:	b40c      	push	{r2, r3}
 8003fda:	b507      	push	{r0, r1, r2, lr}
 8003fdc:	ab04      	add	r3, sp, #16
 8003fde:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003fe2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003fe4:	f00f ffce 	bl	8013f84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003fe8:	b003      	add	sp, #12
 8003fea:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fee:	b002      	add	sp, #8
 8003ff0:	4770      	bx	lr
	...

08003ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ff4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003ffa:	b373      	cbz	r3, 800405a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003ffc:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003ffe:	b92b      	cbnz	r3, 800400c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004000:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004002:	21c5      	movs	r1, #197	@ 0xc5
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004006:	4819      	ldr	r0, [pc, #100]	@ (800406c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004008:	f01d fbe2 	bl	80217d0 <__assert_func>
            return buffer[pos];
 800400c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800400e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004012:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004014:	b30b      	cbz	r3, 800405a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004016:	f011 fd71 	bl	8015afc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800401a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800401c:	2b01      	cmp	r3, #1
 800401e:	d803      	bhi.n	8004028 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004022:	21cb      	movs	r1, #203	@ 0xcb
 8004024:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004026:	e7ee      	b.n	8004006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004028:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800402a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800402e:	1c53      	adds	r3, r2, #1
 8004030:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004032:	2b09      	cmp	r3, #9
 8004034:	4619      	mov	r1, r3
 8004036:	bf88      	it	hi
 8004038:	f1a3 010a 	subhi.w	r1, r3, #10
 800403c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004040:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004042:	4281      	cmp	r1, r0
 8004044:	d109      	bne.n	800405a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8004046:	2b0a      	cmp	r3, #10
 8004048:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800404c:	bf28      	it	cs
 800404e:	2300      	movcs	r3, #0
            return buffer[pos];
 8004050:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004052:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004056:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004058:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800405a:	4620      	mov	r0, r4
}
 800405c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004060:	f011 bc4e 	b.w	8015900 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004064:	08024940 	.word	0x08024940
 8004068:	08024949 	.word	0x08024949
 800406c:	080249f4 	.word	0x080249f4
 8004070:	08024a4c 	.word	0x08024a4c
 8004074:	08024a5a 	.word	0x08024a5a

08004078 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004078:	f011 bc0b 	b.w	8015892 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800407c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800407c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800407e:	bb18      	cbnz	r0, 80040c8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004082:	4813      	ldr	r0, [pc, #76]	@ (80040d0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004084:	681c      	ldr	r4, [r3, #0]
 8004086:	4913      	ldr	r1, [pc, #76]	@ (80040d4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004088:	b1b4      	cbz	r4, 80040b8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	4422      	add	r2, r4
 800408e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004090:	6862      	ldr	r2, [r4, #4]
 8004092:	4422      	add	r2, r4
 8004094:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004096:	68a2      	ldr	r2, [r4, #8]
 8004098:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800409a:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800409c:	2200      	movs	r2, #0
 800409e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80040a0:	f000 f82a 	bl	80040f8 <_ZN17TypedTextDatabase8getFontsEv>
 80040a4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80040a6:	f000 f825 	bl	80040f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80040ac:	601c      	str	r4, [r3, #0]
        fonts = f;
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80040b0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80040b2:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80040b4:	8018      	strh	r0, [r3, #0]
    }
}
 80040b6:	e007      	b.n	80040c8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80040ba:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80040be:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80040c2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d1e8      	bne.n	800409a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80040c8:	bd38      	pop	{r3, r4, r5, pc}
 80040ca:	bf00      	nop
 80040cc:	2400b3b8 	.word	0x2400b3b8
 80040d0:	2400b3b0 	.word	0x2400b3b0
 80040d4:	2400b3ac 	.word	0x2400b3ac
 80040d8:	2400b3b4 	.word	0x2400b3b4
 80040dc:	2402542c 	.word	0x2402542c
 80040e0:	24025434 	.word	0x24025434
 80040e4:	24025430 	.word	0x24025430
 80040e8:	9003bf1c 	.word	0x9003bf1c
 80040ec:	9003bf18 	.word	0x9003bf18
 80040f0:	9003bf20 	.word	0x9003bf20

080040f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80040f4:	2000      	movs	r0, #0
 80040f6:	4770      	bx	lr

080040f8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80040f8:	4800      	ldr	r0, [pc, #0]	@ (80040fc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80040fa:	4770      	bx	lr
 80040fc:	2400b3bc 	.word	0x2400b3bc

08004100 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004100:	b510      	push	{r4, lr}
};
 8004102:	4c05      	ldr	r4, [pc, #20]	@ (8004118 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004104:	f7ff fee0 	bl	8003ec8 <_Z23getFont_verdana_20_4bppv>
};
 8004108:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800410a:	f7ff ff19 	bl	8003f40 <_Z23getFont_verdana_40_4bppv>
};
 800410e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004110:	f7ff fe9e 	bl	8003e50 <_Z23getFont_verdana_10_4bppv>
};
 8004114:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004116:	bd10      	pop	{r4, pc}
 8004118:	2400b3bc 	.word	0x2400b3bc

0800411c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800411c:	b510      	push	{r4, lr}
    pointArray = 0;
 800411e:	2400      	movs	r4, #0
 8004120:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004122:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004124:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004126:	601c      	str	r4, [r3, #0]
}
 8004128:	bd10      	pop	{r4, pc}

0800412a <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800412a:	4770      	bx	lr

0800412c <_ZN19FrontendApplicationD0Ev>:
 800412c:	b510      	push	{r4, lr}
 800412e:	4604      	mov	r4, r0
 8004130:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004134:	f01c ffd3 	bl	80210de <_ZdlPvj>
 8004138:	4620      	mov	r0, r4
 800413a:	bd10      	pop	{r4, pc}

0800413c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800413c:	b510      	push	{r4, lr}
 800413e:	4604      	mov	r4, r0
    {
        model.tick();
 8004140:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004144:	f000 f813 	bl	800416e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004148:	4620      	mov	r0, r4
    }
 800414a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800414e:	f00f b81d 	b.w	801318c <_ZN8touchgfx11Application15handleTickEventEv>
	...

08004154 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004154:	b510      	push	{r4, lr}
 8004156:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004158:	f7ff fd48 	bl	8003bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800415c:	4b01      	ldr	r3, [pc, #4]	@ (8004164 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800415e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004160:	6023      	str	r3, [r4, #0]
}
 8004162:	bd10      	pop	{r4, pc}
 8004164:	08024b34 	.word	0x08024b34

08004168 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004168:	2200      	movs	r2, #0
 800416a:	6002      	str	r2, [r0, #0]
{

}
 800416c:	4770      	bx	lr

0800416e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800416e:	4770      	bx	lr

08004170 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8004170:	4770      	bx	lr

08004172 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004172:	3804      	subs	r0, #4
 8004174:	4770      	bx	lr

08004176 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004176:	4770      	bx	lr

08004178 <_ZN16Screen1PresenterD0Ev>:
 8004178:	b510      	push	{r4, lr}
 800417a:	4604      	mov	r4, r0
 800417c:	2110      	movs	r1, #16
 800417e:	f01c ffae 	bl	80210de <_ZdlPvj>
 8004182:	4620      	mov	r0, r4
 8004184:	bd10      	pop	{r4, pc}

08004186 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004186:	f1a0 0004 	sub.w	r0, r0, #4
 800418a:	e7f5      	b.n	8004178 <_ZN16Screen1PresenterD0Ev>

0800418c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800418c:	2200      	movs	r2, #0
    : view(v)
 800418e:	60c1      	str	r1, [r0, #12]
 8004190:	6082      	str	r2, [r0, #8]
 8004192:	4a02      	ldr	r2, [pc, #8]	@ (800419c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8004194:	6002      	str	r2, [r0, #0]
 8004196:	3218      	adds	r2, #24
 8004198:	6042      	str	r2, [r0, #4]
}
 800419a:	4770      	bx	lr
 800419c:	08024b88 	.word	0x08024b88

080041a0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80041a0:	4770      	bx	lr
	...

080041a4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <_ZN11Screen1ViewD1Ev+0x10>)
 80041a6:	b510      	push	{r4, lr}
 80041a8:	4604      	mov	r4, r0
 80041aa:	6003      	str	r3, [r0, #0]
 80041ac:	f7ff fdc5 	bl	8003d3a <_ZN15Screen1ViewBaseD1Ev>
 80041b0:	4620      	mov	r0, r4
 80041b2:	bd10      	pop	{r4, pc}
 80041b4:	08024bb0 	.word	0x08024bb0

080041b8 <_ZN11Screen1ViewD0Ev>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	f7ff fff2 	bl	80041a4 <_ZN11Screen1ViewD1Ev>
 80041c0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80041c4:	4620      	mov	r0, r4
 80041c6:	f01c ff8a 	bl	80210de <_ZdlPvj>
 80041ca:	4620      	mov	r0, r4
 80041cc:	bd10      	pop	{r4, pc}
	...

080041d0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4604      	mov	r4, r0
 80041d4:	f7ff fdc8 	bl	8003d68 <_ZN15Screen1ViewBaseC1Ev>
 80041d8:	4b01      	ldr	r3, [pc, #4]	@ (80041e0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80041da:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80041dc:	6023      	str	r3, [r4, #0]
}
 80041de:	bd10      	pop	{r4, pc}
 80041e0:	08024bb0 	.word	0x08024bb0

080041e4 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80041e4:	f7ff bdaa 	b.w	8003d3c <_ZN15Screen1ViewBase11setupScreenEv>

080041e8 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80041e8:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80041ea:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80041ee:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80041f0:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80041f2:	2302      	movs	r3, #2
 80041f4:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80041f6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80041fa:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80041fe:	4770      	bx	lr

08004200 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004200:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004204:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004206:	bf04      	itt	eq
 8004208:	2300      	moveq	r3, #0
 800420a:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 800420e:	2000      	movs	r0, #0
 8004210:	4770      	bx	lr

08004212 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr

08004216 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004216:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004218:	6904      	ldr	r4, [r0, #16]
 800421a:	8900      	ldrh	r0, [r0, #8]
 800421c:	46a4      	mov	ip, r4
}
 800421e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004222:	4760      	bx	ip

08004224 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004224:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004226:	68c4      	ldr	r4, [r0, #12]
 8004228:	8900      	ldrh	r0, [r0, #8]
 800422a:	46a4      	mov	ip, r4
}
 800422c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004230:	4760      	bx	ip

08004232 <FT6X06_GestureConfig>:
{
 8004232:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004234:	f100 0518 	add.w	r5, r0, #24
{
 8004238:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800423a:	7809      	ldrb	r1, [r1, #0]
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f911 	bl	8004464 <ft6x06_radian_value>
 8004242:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004244:	7931      	ldrb	r1, [r6, #4]
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f918 	bl	800447c <ft6x06_offset_left_right>
 800424c:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800424e:	7a31      	ldrb	r1, [r6, #8]
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f91f 	bl	8004494 <ft6x06_offset_up_down>
 8004256:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004258:	7b31      	ldrb	r1, [r6, #12]
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f926 	bl	80044ac <ft6x06_disatnce_left_right>
 8004260:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004262:	7c31      	ldrb	r1, [r6, #16]
 8004264:	4628      	mov	r0, r5
 8004266:	f000 f92d 	bl	80044c4 <ft6x06_distance_up_down>
 800426a:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800426c:	7d31      	ldrb	r1, [r6, #20]
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f934 	bl	80044dc <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004274:	42c4      	cmn	r4, r0
}
 8004276:	bf14      	ite	ne
 8004278:	f04f 30ff 	movne.w	r0, #4294967295
 800427c:	2000      	moveq	r0, #0
 800427e:	bd70      	pop	{r4, r5, r6, pc}

08004280 <FT6X06_ReadID>:
{
 8004280:	b513      	push	{r0, r1, r4, lr}
 8004282:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004284:	3018      	adds	r0, #24
 8004286:	f10d 0107 	add.w	r1, sp, #7
 800428a:	f000 f93f 	bl	800450c <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800428e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004292:	6023      	str	r3, [r4, #0]
}
 8004294:	b002      	add	sp, #8
 8004296:	bd10      	pop	{r4, pc}

08004298 <FT6X06_GetState>:
{
 8004298:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800429a:	f100 0518 	add.w	r5, r0, #24
{
 800429e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80042a0:	a901      	add	r1, sp, #4
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f8d1 	bl	800444a <ft6x06_td_status>
 80042a8:	bb08      	cbnz	r0, 80042ee <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80042aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	bf98      	it	ls
 80042b2:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80042b4:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80042b6:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80042b8:	2103      	movs	r1, #3
 80042ba:	4628      	mov	r0, r5
 80042bc:	eb0d 0203 	add.w	r2, sp, r3
 80042c0:	f000 f8b0 	bl	8004424 <ft6x06_read_reg>
 80042c4:	b9b0      	cbnz	r0, 80042f4 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80042c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042d4:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80042d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80042da:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80042dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60a3      	str	r3, [r4, #8]
}
 80042ea:	b003      	add	sp, #12
 80042ec:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80042ee:	f04f 30ff 	mov.w	r0, #4294967295
 80042f2:	e7df      	b.n	80042b4 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80042f8:	e7f7      	b.n	80042ea <FT6X06_GetState+0x52>

080042fa <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80042fa:	3018      	adds	r0, #24
 80042fc:	f000 b8a0 	b.w	8004440 <ft6x06_gest_id>

08004300 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004300:	2101      	movs	r1, #1
 8004302:	3018      	adds	r0, #24
 8004304:	f000 b8f6 	b.w	80044f4 <ft6x06_g_mode>

08004308 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004308:	2100      	movs	r1, #0
 800430a:	3018      	adds	r0, #24
 800430c:	f000 b8f2 	b.w	80044f4 <ft6x06_g_mode>

08004310 <FT6X06_Init>:
{
 8004310:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004312:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004316:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004318:	b96b      	cbnz	r3, 8004336 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800431a:	6803      	ldr	r3, [r0, #0]
 800431c:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff fff2 	bl	8004308 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004324:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004326:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800432a:	bf18      	it	ne
 800432c:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 800432e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004332:	4240      	negs	r0, r0
}
 8004334:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8004336:	2000      	movs	r0, #0
  return ret;
 8004338:	e7fc      	b.n	8004334 <FT6X06_Init+0x24>

0800433a <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800433a:	2000      	movs	r0, #0
 800433c:	4770      	bx	lr

0800433e <FT6X06_GetMultiTouchState>:
{
 800433e:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004340:	f100 0518 	add.w	r5, r0, #24
{
 8004344:	b085      	sub	sp, #20
 8004346:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004348:	4628      	mov	r0, r5
 800434a:	a901      	add	r1, sp, #4
 800434c:	f000 f87d 	bl	800444a <ft6x06_td_status>
 8004350:	2800      	cmp	r0, #0
 8004352:	d145      	bne.n	80043e0 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004354:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004358:	2b02      	cmp	r3, #2
 800435a:	bf98      	it	ls
 800435c:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800435e:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004360:	230c      	movs	r3, #12
 8004362:	aa01      	add	r2, sp, #4
 8004364:	2103      	movs	r1, #3
 8004366:	4628      	mov	r0, r5
 8004368:	f000 f85c 	bl	8004424 <ft6x06_read_reg>
 800436c:	2800      	cmp	r0, #0
 800436e:	d13a      	bne.n	80043e6 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004370:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004374:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004378:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800437a:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800437c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004380:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004382:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004384:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004388:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800438c:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800438e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004398:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800439a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800439e:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80043a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80043a4:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80043a6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043ae:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80043b0:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043b2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80043b6:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043b8:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80043ba:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043be:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80043c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80043ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80043d2:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80043d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80043dc:	b005      	add	sp, #20
 80043de:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	e7bb      	b.n	800435e <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80043ea:	e7f7      	b.n	80043dc <FT6X06_GetMultiTouchState+0x9e>

080043ec <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80043ec:	b190      	cbz	r0, 8004414 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80043ee:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80043f0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80043f2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80043f4:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80043f6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80043f8:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80043fa:	68ca      	ldr	r2, [r1, #12]
 80043fc:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80043fe:	690a      	ldr	r2, [r1, #16]
 8004400:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004402:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004404:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004406:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004408:	4a04      	ldr	r2, [pc, #16]	@ (800441c <FT6X06_RegisterBusIO+0x30>)
 800440a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800440c:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <FT6X06_RegisterBusIO+0x34>)
 800440e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004410:	b103      	cbz	r3, 8004414 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004412:	4718      	bx	r3
}
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	08004217 	.word	0x08004217
 8004420:	08004225 	.word	0x08004225

08004424 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004424:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004426:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800442a:	46a4      	mov	ip, r4
}
 800442c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004430:	4760      	bx	ip

08004432 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004432:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004434:	6804      	ldr	r4, [r0, #0]
 8004436:	6880      	ldr	r0, [r0, #8]
 8004438:	46a4      	mov	ip, r4
}
 800443a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800443e:	4760      	bx	ip

08004440 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004440:	2301      	movs	r3, #1
{
 8004442:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004444:	4619      	mov	r1, r3
 8004446:	f7ff bfed 	b.w	8004424 <ft6x06_read_reg>

0800444a <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800444a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800444c:	460a      	mov	r2, r1
{
 800444e:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004450:	2301      	movs	r3, #1
 8004452:	2102      	movs	r1, #2
 8004454:	f7ff ffe6 	bl	8004424 <ft6x06_read_reg>
  
  if(ret == 0)
 8004458:	b918      	cbnz	r0, 8004462 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800445a:	7823      	ldrb	r3, [r4, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004462:	bd10      	pop	{r4, pc}

08004464 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004464:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004466:	2301      	movs	r3, #1
{
 8004468:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800446c:	f10d 0207 	add.w	r2, sp, #7
 8004470:	2191      	movs	r1, #145	@ 0x91
 8004472:	f7ff ffde 	bl	8004432 <ft6x06_write_reg>
}
 8004476:	b003      	add	sp, #12
 8004478:	f85d fb04 	ldr.w	pc, [sp], #4

0800447c <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800447c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800447e:	2301      	movs	r3, #1
{
 8004480:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004484:	f10d 0207 	add.w	r2, sp, #7
 8004488:	2192      	movs	r1, #146	@ 0x92
 800448a:	f7ff ffd2 	bl	8004432 <ft6x06_write_reg>
}
 800448e:	b003      	add	sp, #12
 8004490:	f85d fb04 	ldr.w	pc, [sp], #4

08004494 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004494:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004496:	2301      	movs	r3, #1
{
 8004498:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800449c:	f10d 0207 	add.w	r2, sp, #7
 80044a0:	2193      	movs	r1, #147	@ 0x93
 80044a2:	f7ff ffc6 	bl	8004432 <ft6x06_write_reg>
}
 80044a6:	b003      	add	sp, #12
 80044a8:	f85d fb04 	ldr.w	pc, [sp], #4

080044ac <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044ac:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80044ae:	2301      	movs	r3, #1
{
 80044b0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80044b4:	f10d 0207 	add.w	r2, sp, #7
 80044b8:	2194      	movs	r1, #148	@ 0x94
 80044ba:	f7ff ffba 	bl	8004432 <ft6x06_write_reg>
}
 80044be:	b003      	add	sp, #12
 80044c0:	f85d fb04 	ldr.w	pc, [sp], #4

080044c4 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044c4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80044c6:	2301      	movs	r3, #1
{
 80044c8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80044cc:	f10d 0207 	add.w	r2, sp, #7
 80044d0:	2195      	movs	r1, #149	@ 0x95
 80044d2:	f7ff ffae 	bl	8004432 <ft6x06_write_reg>
}
 80044d6:	b003      	add	sp, #12
 80044d8:	f85d fb04 	ldr.w	pc, [sp], #4

080044dc <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044dc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80044de:	2301      	movs	r3, #1
{
 80044e0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80044e4:	f10d 0207 	add.w	r2, sp, #7
 80044e8:	2196      	movs	r1, #150	@ 0x96
 80044ea:	f7ff ffa2 	bl	8004432 <ft6x06_write_reg>
}
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d fb04 	ldr.w	pc, [sp], #4

080044f4 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044f4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80044f6:	2301      	movs	r3, #1
{
 80044f8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80044fc:	f10d 0207 	add.w	r2, sp, #7
 8004500:	21a4      	movs	r1, #164	@ 0xa4
 8004502:	f7ff ff96 	bl	8004432 <ft6x06_write_reg>
}
 8004506:	b003      	add	sp, #12
 8004508:	f85d fb04 	ldr.w	pc, [sp], #4

0800450c <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800450c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800450e:	2301      	movs	r3, #1
 8004510:	21a8      	movs	r1, #168	@ 0xa8
 8004512:	f7ff bf87 	b.w	8004424 <ft6x06_read_reg>
	...

08004518 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004518:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800451a:	2201      	movs	r2, #1
 800451c:	4b07      	ldr	r3, [pc, #28]	@ (800453c <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800451e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004522:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004524:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004526:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004528:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800452a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800452e:	f006 f9f5 	bl	800a91c <HAL_SDRAM_SendCommand>
 8004532:	3800      	subs	r0, #0
 8004534:	bf18      	it	ne
 8004536:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004538:	4240      	negs	r0, r0
 800453a:	bd08      	pop	{r3, pc}
 800453c:	2400b3c8 	.word	0x2400b3c8

08004540 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004540:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004542:	2202      	movs	r2, #2
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004546:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800454a:	2101      	movs	r1, #1
 800454c:	2200      	movs	r2, #0
 800454e:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004556:	4619      	mov	r1, r3
 8004558:	f006 f9e0 	bl	800a91c <HAL_SDRAM_SendCommand>
 800455c:	3800      	subs	r0, #0
 800455e:	bf18      	it	ne
 8004560:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004562:	4240      	negs	r0, r0
 8004564:	bd08      	pop	{r3, pc}
 8004566:	bf00      	nop
 8004568:	2400b3c8 	.word	0x2400b3c8

0800456c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800456c:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800456e:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8004572:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004574:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004576:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004578:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 800457a:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 800457c:	6991      	ldr	r1, [r2, #24]
 800457e:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004580:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004582:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004584:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004586:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004588:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800458a:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800458c:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800458e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004596:	f006 f9c1 	bl	800a91c <HAL_SDRAM_SendCommand>
 800459a:	3800      	subs	r0, #0
 800459c:	bf18      	it	ne
 800459e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80045a0:	4240      	negs	r0, r0
 80045a2:	bd10      	pop	{r4, pc}
 80045a4:	2400b3c8 	.word	0x2400b3c8

080045a8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80045a8:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80045aa:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80045ac:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80045b0:	2108      	movs	r1, #8
 80045b2:	2200      	movs	r2, #0
 80045b4:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80045b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045bc:	4619      	mov	r1, r3
 80045be:	f006 f9ad 	bl	800a91c <HAL_SDRAM_SendCommand>
 80045c2:	3800      	subs	r0, #0
 80045c4:	bf18      	it	ne
 80045c6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80045c8:	4240      	negs	r0, r0
 80045ca:	bd08      	pop	{r3, pc}
 80045cc:	2400b3c8 	.word	0x2400b3c8

080045d0 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80045d0:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80045d2:	f006 f9c2 	bl	800a95a <HAL_SDRAM_ProgramRefreshRate>
 80045d6:	3800      	subs	r0, #0
 80045d8:	bf18      	it	ne
 80045da:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80045dc:	4240      	negs	r0, r0
 80045de:	bd08      	pop	{r3, pc}

080045e0 <IS42S32800J_Init>:
{
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80045e4:	6809      	ldr	r1, [r1, #0]
{
 80045e6:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80045e8:	f7ff ff96 	bl	8004518 <IS42S32800J_ClockEnable>
 80045ec:	b110      	cbz	r0, 80045f4 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80045ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80045f4:	f001 fc7c 	bl	8005ef0 <HAL_GetTick>
 80045f8:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80045fa:	f001 fc79 	bl	8005ef0 <HAL_GetTick>
 80045fe:	4286      	cmp	r6, r0
 8004600:	d0fb      	beq.n	80045fa <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff ff9b 	bl	8004540 <IS42S32800J_Precharge>
 800460a:	2800      	cmp	r0, #0
 800460c:	d1ef      	bne.n	80045ee <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800460e:	4628      	mov	r0, r5
 8004610:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004614:	f7ff ffc8 	bl	80045a8 <IS42S32800J_RefreshMode>
 8004618:	2800      	cmp	r0, #0
 800461a:	d1e8      	bne.n	80045ee <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f7ff ffa4 	bl	800456c <IS42S32800J_ModeRegConfig>
 8004624:	2800      	cmp	r0, #0
 8004626:	d1e2      	bne.n	80045ee <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004628:	68a1      	ldr	r1, [r4, #8]
 800462a:	4628      	mov	r0, r5
 800462c:	f7ff ffd0 	bl	80045d0 <IS42S32800J_RefreshRate>
 8004630:	3800      	subs	r0, #0
 8004632:	bf18      	it	ne
 8004634:	2001      	movne	r0, #1
 8004636:	4240      	negs	r0, r0
  return ret;
 8004638:	e7db      	b.n	80045f2 <IS42S32800J_Init+0x12>

0800463a <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800463a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800463e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004642:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004646:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800464a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800464e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004652:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004656:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004658:	2000      	movs	r0, #0
 800465a:	4770      	bx	lr

0800465c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800465c:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800465e:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004662:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004664:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004668:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800466a:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800466c:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 800466e:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004670:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004672:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004674:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004676:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004678:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 800467a:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800467c:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 800467e:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004680:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004682:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004686:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 800468a:	2310      	movs	r3, #16
 800468c:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800468e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004692:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004694:	f240 1301 	movw	r3, #257	@ 0x101
 8004698:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800469a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800469e:	f004 fd44 	bl	800912a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80046a2:	2800      	cmp	r0, #0

}
 80046a4:	bf14      	ite	ne
 80046a6:	f06f 0004 	mvnne.w	r0, #4
 80046aa:	2000      	moveq	r0, #0
 80046ac:	b015      	add	sp, #84	@ 0x54
 80046ae:	f85d fb04 	ldr.w	pc, [sp], #4

080046b2 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046b2:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b4:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80046b8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046ba:	bf08      	it	eq
 80046bc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80046c0:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046c2:	bf18      	it	ne
 80046c4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80046c8:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046ca:	a906      	add	r1, sp, #24
{
 80046cc:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046ce:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80046d0:	2306      	movs	r3, #6
 80046d2:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046d4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046d6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80046da:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 80046dc:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046de:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80046e0:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046e4:	f004 fc20 	bl	8008f28 <HAL_QSPI_Command>
 80046e8:	bb20      	cbnz	r0, 8004734 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80046ea:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80046ee:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80046f0:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80046f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80046f6:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046f8:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80046fa:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80046fe:	f04f 0310 	mov.w	r3, #16
 8004702:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004706:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800470a:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800470c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004710:	bf14      	ite	ne
 8004712:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004716:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800471a:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800471c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800471e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004722:	f004 fd02 	bl	800912a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004726:	2800      	cmp	r0, #0
 8004728:	bf14      	ite	ne
 800472a:	f06f 0004 	mvnne.w	r0, #4
 800472e:	2000      	moveq	r0, #0
}
 8004730:	b015      	add	sp, #84	@ 0x54
 8004732:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004734:	f06f 0001 	mvn.w	r0, #1
 8004738:	e7fa      	b.n	8004730 <MT25TL01G_WriteEnable+0x7e>

0800473a <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800473a:	2903      	cmp	r1, #3
{
 800473c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800473e:	bf08      	it	eq
 8004740:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004744:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004746:	bf18      	it	ne
 8004748:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800474c:	4604      	mov	r4, r0
 800474e:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004750:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004752:	23b7      	movs	r3, #183	@ 0xb7
 8004754:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004756:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004758:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800475c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800475e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004760:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004762:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004766:	f7ff ffa4 	bl	80046b2 <MT25TL01G_WriteEnable>
 800476a:	b118      	cbz	r0, 8004774 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 800476c:	f06f 0001 	mvn.w	r0, #1
}
 8004770:	b00f      	add	sp, #60	@ 0x3c
 8004772:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004778:	4669      	mov	r1, sp
 800477a:	4620      	mov	r0, r4
 800477c:	f004 fbd4 	bl	8008f28 <HAL_QSPI_Command>
 8004780:	2800      	cmp	r0, #0
 8004782:	d1f3      	bne.n	800476c <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004784:	4629      	mov	r1, r5
 8004786:	4620      	mov	r0, r4
 8004788:	f7ff ff68 	bl	800465c <MT25TL01G_AutoPollingMemReady>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0ef      	beq.n	8004770 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004790:	e7ec      	b.n	800476c <MT25TL01G_Enter4BytesAddressMode+0x32>

08004792 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004792:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004794:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004798:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800479e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80047a0:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047a2:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80047a4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80047a6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80047ac:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80047ae:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047b0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047b2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047b6:	f004 fbb7 	bl	8008f28 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80047ba:	2800      	cmp	r0, #0
}
 80047bc:	bf14      	ite	ne
 80047be:	f06f 0001 	mvnne.w	r0, #1
 80047c2:	2000      	moveq	r0, #0
 80047c4:	b00f      	add	sp, #60	@ 0x3c
 80047c6:	f85d fb04 	ldr.w	pc, [sp], #4

080047ca <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80047ca:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80047d0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047d6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80047d8:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047da:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80047dc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80047de:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80047e4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80047e6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047e8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047ea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047ee:	f004 fb9b 	bl	8008f28 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80047f2:	2800      	cmp	r0, #0
}
 80047f4:	bf14      	ite	ne
 80047f6:	f06f 0001 	mvnne.w	r0, #1
 80047fa:	2000      	moveq	r0, #0
 80047fc:	b00f      	add	sp, #60	@ 0x3c
 80047fe:	f85d fb04 	ldr.w	pc, [sp], #4

08004802 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004802:	b500      	push	{lr}
 8004804:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004806:	2903      	cmp	r1, #3
 8004808:	d80e      	bhi.n	8004828 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800480a:	e8df f001 	tbb	[pc, r1]
 800480e:	2902      	.short	0x2902
 8004810:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004816:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004818:	230e      	movs	r3, #14
 800481a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800481c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004820:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004822:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004826:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004828:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800482a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800482e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004832:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004834:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800483a:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800483c:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800483e:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004842:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004844:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004846:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004848:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800484c:	f004 fcbe 	bl	80091cc <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004850:	2800      	cmp	r0, #0
}
 8004852:	bf14      	ite	ne
 8004854:	f06f 0005 	mvnne.w	r0, #5
 8004858:	2000      	moveq	r0, #0
 800485a:	b011      	add	sp, #68	@ 0x44
 800485c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004864:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004866:	233d      	movs	r3, #61	@ 0x3d
 8004868:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800486a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800486e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004874:	e7d7      	b.n	8004826 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004876:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800487a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800487c:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800487e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004880:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004884:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004886:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800488a:	e7cc      	b.n	8004826 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800488c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004890:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004892:	23ed      	movs	r3, #237	@ 0xed
 8004894:	e7f3      	b.n	800487e <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004896 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004896:	b500      	push	{lr}
 8004898:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800489a:	2903      	cmp	r1, #3
 800489c:	d80e      	bhi.n	80048bc <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800489e:	e8df f001 	tbb	[pc, r1]
 80048a2:	2502      	.short	0x2502
 80048a4:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048aa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80048ac:	230c      	movs	r3, #12
 80048ae:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80048b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80048b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80048ba:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80048bc:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80048be:	466a      	mov	r2, sp
 80048c0:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80048c2:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80048c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80048c8:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048ce:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80048d4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80048d8:	f004 fc78 	bl	80091cc <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80048dc:	2800      	cmp	r0, #0
}
 80048de:	bf14      	ite	ne
 80048e0:	f06f 0005 	mvnne.w	r0, #5
 80048e4:	2000      	moveq	r0, #0
 80048e6:	b011      	add	sp, #68	@ 0x44
 80048e8:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048f0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80048f2:	23bc      	movs	r3, #188	@ 0xbc
 80048f4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80048f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048fa:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80048fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004900:	e7db      	b.n	80048ba <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004906:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004908:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800490a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800490c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004910:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004912:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004916:	e7d0      	b.n	80048ba <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004918:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800491c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800491e:	23eb      	movs	r3, #235	@ 0xeb
 8004920:	e7f3      	b.n	800490a <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004922 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004922:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004928:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800492a:	bf18      	it	ne
 800492c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004930:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004932:	bf08      	it	eq
 8004934:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004938:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800493a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800493c:	2366      	movs	r3, #102	@ 0x66
 800493e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004940:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004942:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004946:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004948:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800494a:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800494c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004950:	f004 faea 	bl	8008f28 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004954:	2800      	cmp	r0, #0
}
 8004956:	bf14      	ite	ne
 8004958:	f06f 0001 	mvnne.w	r0, #1
 800495c:	2000      	moveq	r0, #0
 800495e:	b00f      	add	sp, #60	@ 0x3c
 8004960:	f85d fb04 	ldr.w	pc, [sp], #4

08004964 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004964:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004966:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800496a:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800496c:	bf18      	it	ne
 800496e:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004972:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004974:	bf08      	it	eq
 8004976:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800497a:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800497c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800497e:	2399      	movs	r3, #153	@ 0x99
 8004980:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004982:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004984:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004988:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800498a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800498c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800498e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004992:	f004 fac9 	bl	8008f28 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004996:	2800      	cmp	r0, #0
}
 8004998:	bf14      	ite	ne
 800499a:	f06f 0001 	mvnne.w	r0, #1
 800499e:	2000      	moveq	r0, #0
 80049a0:	b00f      	add	sp, #60	@ 0x3c
 80049a2:	f85d fb04 	ldr.w	pc, [sp], #4

080049a6 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80049a6:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049a8:	6884      	ldr	r4, [r0, #8]
 80049aa:	8800      	ldrh	r0, [r0, #0]
 80049ac:	46a4      	mov	ip, r4
}
 80049ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049b2:	4760      	bx	ip

080049b4 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80049b4:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049b6:	6844      	ldr	r4, [r0, #4]
 80049b8:	8800      	ldrh	r0, [r0, #0]
 80049ba:	46a4      	mov	ip, r4
}
 80049bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049c0:	4760      	bx	ip

080049c2 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80049c2:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80049c4:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80049ca:	4798      	blx	r3
 80049cc:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80049ce:	68e3      	ldr	r3, [r4, #12]
 80049d0:	4798      	blx	r3
 80049d2:	1b83      	subs	r3, r0, r6
 80049d4:	42ab      	cmp	r3, r5
 80049d6:	d3fa      	bcc.n	80049ce <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080049dc <OTM8009A_Init>:
{
 80049dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049e0:	2300      	movs	r3, #0
 80049e2:	f100 0510 	add.w	r5, r0, #16
{
 80049e6:	4607      	mov	r7, r0
 80049e8:	460e      	mov	r6, r1
 80049ea:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049ec:	4619      	mov	r1, r3
 80049ee:	4ade      	ldr	r2, [pc, #888]	@ (8004d68 <OTM8009A_Init+0x38c>)
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 fb99 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80049f6:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80049fa:	4adc      	ldr	r2, [pc, #880]	@ (8004d6c <OTM8009A_Init+0x390>)
 80049fc:	21ff      	movs	r1, #255	@ 0xff
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fb92 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004a06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a08:	4ad9      	ldr	r2, [pc, #868]	@ (8004d70 <OTM8009A_Init+0x394>)
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 fb8b 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a12:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a16:	4ad7      	ldr	r2, [pc, #860]	@ (8004d74 <OTM8009A_Init+0x398>)
 8004a18:	21ff      	movs	r1, #255	@ 0xff
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 fb84 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a24:	4ad2      	ldr	r2, [pc, #840]	@ (8004d70 <OTM8009A_Init+0x394>)
 8004a26:	4619      	mov	r1, r3
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 fb7d 	bl	8005128 <otm8009a_write_reg>
 8004a2e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004a30:	2300      	movs	r3, #0
 8004a32:	4ad1      	ldr	r2, [pc, #836]	@ (8004d78 <OTM8009A_Init+0x39c>)
 8004a34:	21c4      	movs	r1, #196	@ 0xc4
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fb76 	bl	8005128 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a3c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004a3e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ffbe 	bl	80049c2 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004a46:	2300      	movs	r3, #0
 8004a48:	4acc      	ldr	r2, [pc, #816]	@ (8004d7c <OTM8009A_Init+0x3a0>)
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f000 fb6b 	bl	8005128 <otm8009a_write_reg>
 8004a52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004a54:	2300      	movs	r3, #0
 8004a56:	4aca      	ldr	r2, [pc, #808]	@ (8004d80 <OTM8009A_Init+0x3a4>)
 8004a58:	21c4      	movs	r1, #196	@ 0xc4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f000 fb64 	bl	8005128 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a60:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004a62:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a64:	4638      	mov	r0, r7
 8004a66:	f7ff ffac 	bl	80049c2 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4ac5      	ldr	r2, [pc, #788]	@ (8004d84 <OTM8009A_Init+0x3a8>)
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4619      	mov	r1, r3
 8004a72:	f000 fb59 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004a76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004a78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004a7a:	4ac3      	ldr	r2, [pc, #780]	@ (8004d88 <OTM8009A_Init+0x3ac>)
 8004a7c:	21c5      	movs	r1, #197	@ 0xc5
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 fb52 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004a84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004a86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004a88:	4ac0      	ldr	r2, [pc, #768]	@ (8004d8c <OTM8009A_Init+0x3b0>)
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 fb4b 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a92:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004a94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a96:	4abe      	ldr	r2, [pc, #760]	@ (8004d90 <OTM8009A_Init+0x3b4>)
 8004a98:	21c5      	movs	r1, #197	@ 0xc5
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 fb44 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004aa0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004aa2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004aa4:	4abb      	ldr	r2, [pc, #748]	@ (8004d94 <OTM8009A_Init+0x3b8>)
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 fb3d 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004aae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ab0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004ab2:	4ab9      	ldr	r2, [pc, #740]	@ (8004d98 <OTM8009A_Init+0x3bc>)
 8004ab4:	21c0      	movs	r1, #192	@ 0xc0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fb36 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004abc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004abe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ac0:	4aa9      	ldr	r2, [pc, #676]	@ (8004d68 <OTM8009A_Init+0x38c>)
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 fb2f 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004aca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004acc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004ace:	4ab3      	ldr	r2, [pc, #716]	@ (8004d9c <OTM8009A_Init+0x3c0>)
 8004ad0:	21d9      	movs	r1, #217	@ 0xd9
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 fb28 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ad8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004ada:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004adc:	4ab0      	ldr	r2, [pc, #704]	@ (8004da0 <OTM8009A_Init+0x3c4>)
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 fb21 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004ae6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ae8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004aea:	4aae      	ldr	r2, [pc, #696]	@ (8004da4 <OTM8009A_Init+0x3c8>)
 8004aec:	21c1      	movs	r1, #193	@ 0xc1
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 fb1a 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004af4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004af6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004af8:	4aab      	ldr	r2, [pc, #684]	@ (8004da8 <OTM8009A_Init+0x3cc>)
 8004afa:	4619      	mov	r1, r3
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 fb13 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b02:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004b04:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b06:	4aa9      	ldr	r2, [pc, #676]	@ (8004dac <OTM8009A_Init+0x3d0>)
 8004b08:	21c5      	movs	r1, #197	@ 0xc5
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fb0c 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b12:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b14:	4aa6      	ldr	r2, [pc, #664]	@ (8004db0 <OTM8009A_Init+0x3d4>)
 8004b16:	4619      	mov	r1, r3
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 fb05 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b1e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b20:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b22:	4a9b      	ldr	r2, [pc, #620]	@ (8004d90 <OTM8009A_Init+0x3b4>)
 8004b24:	21c5      	movs	r1, #197	@ 0xc5
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fafe 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b2c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b2e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b30:	4a8d      	ldr	r2, [pc, #564]	@ (8004d68 <OTM8009A_Init+0x38c>)
 8004b32:	4619      	mov	r1, r3
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 faf7 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b3a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b3e:	4a9d      	ldr	r2, [pc, #628]	@ (8004db4 <OTM8009A_Init+0x3d8>)
 8004b40:	21d8      	movs	r1, #216	@ 0xd8
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 faf0 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b4c:	4a9a      	ldr	r2, [pc, #616]	@ (8004db8 <OTM8009A_Init+0x3dc>)
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fae9 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b5a:	4a98      	ldr	r2, [pc, #608]	@ (8004dbc <OTM8009A_Init+0x3e0>)
 8004b5c:	21c5      	movs	r1, #197	@ 0xc5
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fae2 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b68:	4a95      	ldr	r2, [pc, #596]	@ (8004dc0 <OTM8009A_Init+0x3e4>)
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fadb 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b72:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b76:	4a93      	ldr	r2, [pc, #588]	@ (8004dc4 <OTM8009A_Init+0x3e8>)
 8004b78:	21c0      	movs	r1, #192	@ 0xc0
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fad4 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b80:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b82:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b84:	4a90      	ldr	r2, [pc, #576]	@ (8004dc8 <OTM8009A_Init+0x3ec>)
 8004b86:	4619      	mov	r1, r3
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f000 facd 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b8e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b90:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b92:	4a8e      	ldr	r2, [pc, #568]	@ (8004dcc <OTM8009A_Init+0x3f0>)
 8004b94:	21c5      	movs	r1, #197	@ 0xc5
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 fac6 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8004dd0 <OTM8009A_Init+0x3f4>)
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 fabf 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004baa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004bac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004bae:	4a89      	ldr	r2, [pc, #548]	@ (8004dd4 <OTM8009A_Init+0x3f8>)
 8004bb0:	21c4      	movs	r1, #196	@ 0xc4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fab8 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004bb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004bba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004bbc:	4a78      	ldr	r2, [pc, #480]	@ (8004da0 <OTM8009A_Init+0x3c4>)
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fab1 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004bc6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004bc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004bca:	4a83      	ldr	r2, [pc, #524]	@ (8004dd8 <OTM8009A_Init+0x3fc>)
 8004bcc:	21c1      	movs	r1, #193	@ 0xc1
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 faaa 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004bd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004bd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004bd8:	4a80      	ldr	r2, [pc, #512]	@ (8004ddc <OTM8009A_Init+0x400>)
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 faa3 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004be2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004be4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004be6:	4a7e      	ldr	r2, [pc, #504]	@ (8004de0 <OTM8009A_Init+0x404>)
 8004be8:	21b3      	movs	r1, #179	@ 0xb3
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 fa9c 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004bf2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d70 <OTM8009A_Init+0x394>)
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 fa95 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004bfe:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004c02:	4a78      	ldr	r2, [pc, #480]	@ (8004de4 <OTM8009A_Init+0x408>)
 8004c04:	21ce      	movs	r1, #206	@ 0xce
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 fa8e 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004c0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c10:	4a75      	ldr	r2, [pc, #468]	@ (8004de8 <OTM8009A_Init+0x40c>)
 8004c12:	4619      	mov	r1, r3
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 fa87 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c1a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c1e:	4a73      	ldr	r2, [pc, #460]	@ (8004dec <OTM8009A_Init+0x410>)
 8004c20:	21ce      	movs	r1, #206	@ 0xce
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 fa80 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c2c:	4a70      	ldr	r2, [pc, #448]	@ (8004df0 <OTM8009A_Init+0x414>)
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 fa79 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c36:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004df4 <OTM8009A_Init+0x418>)
 8004c3c:	21ce      	movs	r1, #206	@ 0xce
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fa72 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c48:	4a6b      	ldr	r2, [pc, #428]	@ (8004df8 <OTM8009A_Init+0x41c>)
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 fa6b 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c52:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c56:	4a69      	ldr	r2, [pc, #420]	@ (8004dfc <OTM8009A_Init+0x420>)
 8004c58:	21cf      	movs	r1, #207	@ 0xcf
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 fa64 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c64:	4a66      	ldr	r2, [pc, #408]	@ (8004e00 <OTM8009A_Init+0x424>)
 8004c66:	4619      	mov	r1, r3
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 fa5d 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c72:	4a64      	ldr	r2, [pc, #400]	@ (8004e04 <OTM8009A_Init+0x428>)
 8004c74:	21cf      	movs	r1, #207	@ 0xcf
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fa56 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c80:	4a3b      	ldr	r2, [pc, #236]	@ (8004d70 <OTM8009A_Init+0x394>)
 8004c82:	4619      	mov	r1, r3
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 fa4f 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c8a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e08 <OTM8009A_Init+0x42c>)
 8004c90:	21cb      	movs	r1, #203	@ 0xcb
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 fa48 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c9c:	4a5b      	ldr	r2, [pc, #364]	@ (8004e0c <OTM8009A_Init+0x430>)
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 fa41 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ca6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ca8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004caa:	4a59      	ldr	r2, [pc, #356]	@ (8004e10 <OTM8009A_Init+0x434>)
 8004cac:	21cb      	movs	r1, #203	@ 0xcb
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 fa3a 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004cb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004cb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004de8 <OTM8009A_Init+0x40c>)
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fa33 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004cc2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004cc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004cc6:	4a53      	ldr	r2, [pc, #332]	@ (8004e14 <OTM8009A_Init+0x438>)
 8004cc8:	21cb      	movs	r1, #203	@ 0xcb
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 fa2c 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004cd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cd4:	4a46      	ldr	r2, [pc, #280]	@ (8004df0 <OTM8009A_Init+0x414>)
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 fa25 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cde:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ce0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8004e18 <OTM8009A_Init+0x43c>)
 8004ce4:	21cb      	movs	r1, #203	@ 0xcb
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 fa1e 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cf0:	4a41      	ldr	r2, [pc, #260]	@ (8004df8 <OTM8009A_Init+0x41c>)
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 fa17 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004cfa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004cfe:	4a47      	ldr	r2, [pc, #284]	@ (8004e1c <OTM8009A_Init+0x440>)
 8004d00:	21cb      	movs	r1, #203	@ 0xcb
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fa10 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e00 <OTM8009A_Init+0x424>)
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fa09 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d16:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d1a:	4a41      	ldr	r2, [pc, #260]	@ (8004e20 <OTM8009A_Init+0x444>)
 8004d1c:	21cb      	movs	r1, #203	@ 0xcb
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fa02 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d28:	4a3e      	ldr	r2, [pc, #248]	@ (8004e24 <OTM8009A_Init+0x448>)
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 f9fb 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d32:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d36:	4a3c      	ldr	r2, [pc, #240]	@ (8004e28 <OTM8009A_Init+0x44c>)
 8004d38:	21cb      	movs	r1, #203	@ 0xcb
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 f9f4 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d44:	4a39      	ldr	r2, [pc, #228]	@ (8004e2c <OTM8009A_Init+0x450>)
 8004d46:	4619      	mov	r1, r3
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f9ed 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d4e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d52:	4a37      	ldr	r2, [pc, #220]	@ (8004e30 <OTM8009A_Init+0x454>)
 8004d54:	21cb      	movs	r1, #203	@ 0xcb
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 f9e6 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d60:	4a03      	ldr	r2, [pc, #12]	@ (8004d70 <OTM8009A_Init+0x394>)
 8004d62:	4619      	mov	r1, r3
 8004d64:	4628      	mov	r0, r5
 8004d66:	e065      	b.n	8004e34 <OTM8009A_Init+0x458>
 8004d68:	08024ce9 	.word	0x08024ce9
 8004d6c:	08024ce5 	.word	0x08024ce5
 8004d70:	08024cea 	.word	0x08024cea
 8004d74:	08024ce3 	.word	0x08024ce3
 8004d78:	08024ceb 	.word	0x08024ceb
 8004d7c:	08024cec 	.word	0x08024cec
 8004d80:	08024ced 	.word	0x08024ced
 8004d84:	08024cee 	.word	0x08024cee
 8004d88:	08024cef 	.word	0x08024cef
 8004d8c:	08024cf0 	.word	0x08024cf0
 8004d90:	08024cf1 	.word	0x08024cf1
 8004d94:	08024cf2 	.word	0x08024cf2
 8004d98:	08024cf3 	.word	0x08024cf3
 8004d9c:	08024cf4 	.word	0x08024cf4
 8004da0:	08024cf7 	.word	0x08024cf7
 8004da4:	08024cf8 	.word	0x08024cf8
 8004da8:	08024cf9 	.word	0x08024cf9
 8004dac:	08024cfa 	.word	0x08024cfa
 8004db0:	08024cfb 	.word	0x08024cfb
 8004db4:	08024ce1 	.word	0x08024ce1
 8004db8:	08024cfc 	.word	0x08024cfc
 8004dbc:	08024cfd 	.word	0x08024cfd
 8004dc0:	08024cfe 	.word	0x08024cfe
 8004dc4:	08024cff 	.word	0x08024cff
 8004dc8:	08024d00 	.word	0x08024d00
 8004dcc:	08024d01 	.word	0x08024d01
 8004dd0:	08024cf5 	.word	0x08024cf5
 8004dd4:	08024d02 	.word	0x08024d02
 8004dd8:	08024d03 	.word	0x08024d03
 8004ddc:	08024d04 	.word	0x08024d04
 8004de0:	08024cdf 	.word	0x08024cdf
 8004de4:	08024cd9 	.word	0x08024cd9
 8004de8:	08024d05 	.word	0x08024d05
 8004dec:	08024ccb 	.word	0x08024ccb
 8004df0:	08024d06 	.word	0x08024d06
 8004df4:	08024cbd 	.word	0x08024cbd
 8004df8:	08024d07 	.word	0x08024d07
 8004dfc:	08024cb3 	.word	0x08024cb3
 8004e00:	08024d08 	.word	0x08024d08
 8004e04:	08024d15 	.word	0x08024d15
 8004e08:	08024ca9 	.word	0x08024ca9
 8004e0c:	08024d09 	.word	0x08024d09
 8004e10:	08024c9a 	.word	0x08024c9a
 8004e14:	08024c8b 	.word	0x08024c8b
 8004e18:	08024c81 	.word	0x08024c81
 8004e1c:	08024c72 	.word	0x08024c72
 8004e20:	08024c63 	.word	0x08024c63
 8004e24:	08024d0a 	.word	0x08024d0a
 8004e28:	08024c59 	.word	0x08024c59
 8004e2c:	08024d0b 	.word	0x08024d0b
 8004e30:	08024c4f 	.word	0x08024c4f
 8004e34:	f000 f978 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e38:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8005078 <OTM8009A_Init+0x69c>)
 8004e3e:	21cc      	movs	r1, #204	@ 0xcc
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 f971 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e4a:	4a8c      	ldr	r2, [pc, #560]	@ (800507c <OTM8009A_Init+0x6a0>)
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f96a 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e54:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e58:	4a89      	ldr	r2, [pc, #548]	@ (8005080 <OTM8009A_Init+0x6a4>)
 8004e5a:	21cc      	movs	r1, #204	@ 0xcc
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 f963 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e66:	4a87      	ldr	r2, [pc, #540]	@ (8005084 <OTM8009A_Init+0x6a8>)
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f95c 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e70:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e74:	4a84      	ldr	r2, [pc, #528]	@ (8005088 <OTM8009A_Init+0x6ac>)
 8004e76:	21cc      	movs	r1, #204	@ 0xcc
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f955 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e82:	4a82      	ldr	r2, [pc, #520]	@ (800508c <OTM8009A_Init+0x6b0>)
 8004e84:	4619      	mov	r1, r3
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f94e 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e8c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e90:	4a7f      	ldr	r2, [pc, #508]	@ (8005090 <OTM8009A_Init+0x6b4>)
 8004e92:	21cc      	movs	r1, #204	@ 0xcc
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f947 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8005094 <OTM8009A_Init+0x6b8>)
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f940 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004ea8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004eaa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004eac:	4a7a      	ldr	r2, [pc, #488]	@ (8005098 <OTM8009A_Init+0x6bc>)
 8004eae:	21cc      	movs	r1, #204	@ 0xcc
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f939 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004eb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004eb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004eba:	4a78      	ldr	r2, [pc, #480]	@ (800509c <OTM8009A_Init+0x6c0>)
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 f932 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004ec4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ec6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004ec8:	4a75      	ldr	r2, [pc, #468]	@ (80050a0 <OTM8009A_Init+0x6c4>)
 8004eca:	21cc      	movs	r1, #204	@ 0xcc
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 f92b 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ed2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004ed4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ed6:	4a73      	ldr	r2, [pc, #460]	@ (80050a4 <OTM8009A_Init+0x6c8>)
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f924 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ee0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ee2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ee4:	4a70      	ldr	r2, [pc, #448]	@ (80050a8 <OTM8009A_Init+0x6cc>)
 8004ee6:	21c5      	movs	r1, #197	@ 0xc5
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 f91d 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004eee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ef0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80050ac <OTM8009A_Init+0x6d0>)
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f916 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004efc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004efe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004f00:	4a6b      	ldr	r2, [pc, #428]	@ (80050b0 <OTM8009A_Init+0x6d4>)
 8004f02:	21f5      	movs	r1, #245	@ 0xf5
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f90f 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004f0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f0e:	4a69      	ldr	r2, [pc, #420]	@ (80050b4 <OTM8009A_Init+0x6d8>)
 8004f10:	4619      	mov	r1, r3
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 f908 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f1c:	4a66      	ldr	r2, [pc, #408]	@ (80050b8 <OTM8009A_Init+0x6dc>)
 8004f1e:	21c6      	movs	r1, #198	@ 0xc6
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 f901 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f2a:	4a64      	ldr	r2, [pc, #400]	@ (80050bc <OTM8009A_Init+0x6e0>)
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 f8fa 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f34:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f38:	4a61      	ldr	r2, [pc, #388]	@ (80050c0 <OTM8009A_Init+0x6e4>)
 8004f3a:	21ff      	movs	r1, #255	@ 0xff
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f000 f8f3 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f46:	4a5d      	ldr	r2, [pc, #372]	@ (80050bc <OTM8009A_Init+0x6e0>)
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f8ec 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f54:	4a59      	ldr	r2, [pc, #356]	@ (80050bc <OTM8009A_Init+0x6e0>)
 8004f56:	4619      	mov	r1, r3
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 f8e5 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f5e:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f62:	4a58      	ldr	r2, [pc, #352]	@ (80050c4 <OTM8009A_Init+0x6e8>)
 8004f64:	21e1      	movs	r1, #225	@ 0xe1
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f8de 	bl	8005128 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f70:	4a52      	ldr	r2, [pc, #328]	@ (80050bc <OTM8009A_Init+0x6e0>)
 8004f72:	4619      	mov	r1, r3
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f8d7 	bl	8005128 <otm8009a_write_reg>
 8004f7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	4a52      	ldr	r2, [pc, #328]	@ (80050c8 <OTM8009A_Init+0x6ec>)
 8004f80:	21e2      	movs	r1, #226	@ 0xe2
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 f8d0 	bl	8005128 <otm8009a_write_reg>
 8004f88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80050cc <OTM8009A_Init+0x6f0>)
 8004f8e:	2111      	movs	r1, #17
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f8c9 	bl	8005128 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004f96:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f98:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f7ff fd11 	bl	80049c2 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8004fa0:	4f4b      	ldr	r7, [pc, #300]	@ (80050d0 <OTM8009A_Init+0x6f4>)
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d061      	beq.n	800506a <OTM8009A_Init+0x68e>
 8004fa6:	2e02      	cmp	r6, #2
 8004fa8:	d107      	bne.n	8004fba <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004faa:	2300      	movs	r3, #0
 8004fac:	4a49      	ldr	r2, [pc, #292]	@ (80050d4 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004fae:	213a      	movs	r1, #58	@ 0x3a
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f8b9 	bl	8005128 <otm8009a_write_reg>
 8004fb6:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004fb8:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004fba:	f1b8 0f01 	cmp.w	r8, #1
 8004fbe:	d157      	bne.n	8005070 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004fc0:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004fc2:	f10d 0207 	add.w	r2, sp, #7
 8004fc6:	2136      	movs	r1, #54	@ 0x36
 8004fc8:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004fca:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f000 f8aa 	bl	8005128 <otm8009a_write_reg>
 8004fd4:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	4a3f      	ldr	r2, [pc, #252]	@ (80050d8 <OTM8009A_Init+0x6fc>)
 8004fda:	212a      	movs	r1, #42	@ 0x2a
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f8a3 	bl	8005128 <otm8009a_write_reg>
 8004fe2:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80050dc <OTM8009A_Init+0x700>)
 8004fe8:	212b      	movs	r1, #43	@ 0x2b
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f89c 	bl	8005128 <otm8009a_write_reg>
 8004ff0:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004ff2:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004ff6:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4a39      	ldr	r2, [pc, #228]	@ (80050e0 <OTM8009A_Init+0x704>)
 8004ffc:	2151      	movs	r1, #81	@ 0x51
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f892 	bl	8005128 <otm8009a_write_reg>
 8005004:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005006:	4633      	mov	r3, r6
 8005008:	4a36      	ldr	r2, [pc, #216]	@ (80050e4 <OTM8009A_Init+0x708>)
 800500a:	2153      	movs	r1, #83	@ 0x53
 800500c:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800500e:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005010:	f000 f88a 	bl	8005128 <otm8009a_write_reg>
 8005014:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005016:	4633      	mov	r3, r6
 8005018:	4a33      	ldr	r2, [pc, #204]	@ (80050e8 <OTM8009A_Init+0x70c>)
 800501a:	2155      	movs	r1, #85	@ 0x55
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f883 	bl	8005128 <otm8009a_write_reg>
 8005022:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005024:	4633      	mov	r3, r6
 8005026:	4a31      	ldr	r2, [pc, #196]	@ (80050ec <OTM8009A_Init+0x710>)
 8005028:	215e      	movs	r1, #94	@ 0x5e
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f87c 	bl	8005128 <otm8009a_write_reg>
 8005030:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005032:	4633      	mov	r3, r6
 8005034:	4a2e      	ldr	r2, [pc, #184]	@ (80050f0 <OTM8009A_Init+0x714>)
 8005036:	2129      	movs	r1, #41	@ 0x29
 8005038:	4628      	mov	r0, r5
 800503a:	f000 f875 	bl	8005128 <otm8009a_write_reg>
 800503e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005040:	4633      	mov	r3, r6
 8005042:	4631      	mov	r1, r6
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <OTM8009A_Init+0x6e0>)
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f86e 	bl	8005128 <otm8009a_write_reg>
 800504c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800504e:	4633      	mov	r3, r6
 8005050:	4a28      	ldr	r2, [pc, #160]	@ (80050f4 <OTM8009A_Init+0x718>)
 8005052:	212c      	movs	r1, #44	@ 0x2c
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f867 	bl	8005128 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800505a:	42c4      	cmn	r4, r0
}
 800505c:	bf14      	ite	ne
 800505e:	f04f 30ff 	movne.w	r0, #4294967295
 8005062:	4630      	moveq	r0, r6
 8005064:	b002      	add	sp, #8
 8005066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800506a:	4633      	mov	r3, r6
 800506c:	4a22      	ldr	r2, [pc, #136]	@ (80050f8 <OTM8009A_Init+0x71c>)
 800506e:	e79e      	b.n	8004fae <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005070:	2300      	movs	r3, #0
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	e7bf      	b.n	8004ff6 <OTM8009A_Init+0x61a>
 8005076:	bf00      	nop
 8005078:	08024c45 	.word	0x08024c45
 800507c:	08024d09 	.word	0x08024d09
 8005080:	08024c36 	.word	0x08024c36
 8005084:	08024d05 	.word	0x08024d05
 8005088:	08024c27 	.word	0x08024c27
 800508c:	08024d06 	.word	0x08024d06
 8005090:	08024c1d 	.word	0x08024c1d
 8005094:	08024d07 	.word	0x08024d07
 8005098:	08024c0e 	.word	0x08024c0e
 800509c:	08024d08 	.word	0x08024d08
 80050a0:	08024bff 	.word	0x08024bff
 80050a4:	08024cf5 	.word	0x08024cf5
 80050a8:	08024d16 	.word	0x08024d16
 80050ac:	08024d17 	.word	0x08024d17
 80050b0:	08024d18 	.word	0x08024d18
 80050b4:	08024d19 	.word	0x08024d19
 80050b8:	08024d1a 	.word	0x08024d1a
 80050bc:	08024ce9 	.word	0x08024ce9
 80050c0:	08024bfc 	.word	0x08024bfc
 80050c4:	08024bec 	.word	0x08024bec
 80050c8:	08024bdc 	.word	0x08024bdc
 80050cc:	08024d0c 	.word	0x08024d0c
 80050d0:	2400b3d8 	.word	0x2400b3d8
 80050d4:	08024d0d 	.word	0x08024d0d
 80050d8:	08024d1f 	.word	0x08024d1f
 80050dc:	08024d1b 	.word	0x08024d1b
 80050e0:	08024d0f 	.word	0x08024d0f
 80050e4:	08024d10 	.word	0x08024d10
 80050e8:	08024d11 	.word	0x08024d11
 80050ec:	08024d12 	.word	0x08024d12
 80050f0:	08024d13 	.word	0x08024d13
 80050f4:	08024d14 	.word	0x08024d14
 80050f8:	08024d0e 	.word	0x08024d0e

080050fc <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80050fc:	b160      	cbz	r0, 8005118 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80050fe:	684b      	ldr	r3, [r1, #4]
 8005100:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005102:	688b      	ldr	r3, [r1, #8]
 8005104:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005106:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005108:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800510a:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800510c:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <OTM8009A_RegisterBusIO+0x24>)
 800510e:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <OTM8009A_RegisterBusIO+0x28>)
 8005112:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005114:	2000      	movs	r0, #0
 8005116:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	080049a7 	.word	0x080049a7
 8005124:	080049b5 	.word	0x080049b5

08005128 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005128:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800512a:	6804      	ldr	r4, [r0, #0]
 800512c:	6880      	ldr	r0, [r0, #8]
 800512e:	46a4      	mov	ip, r4
}
 8005130:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005134:	4760      	bx	ip
	...

08005138 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005138:	4a10      	ldr	r2, [pc, #64]	@ (800517c <BSP_I2C4_DeInit+0x44>)
{
 800513a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800513c:	6813      	ldr	r3, [r2, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005142:	b10b      	cbz	r3, 8005148 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005144:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005146:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800514c:	480c      	ldr	r0, [pc, #48]	@ (8005180 <BSP_I2C4_DeInit+0x48>)
 800514e:	f001 fe3d 	bl	8006dcc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005152:	480b      	ldr	r0, [pc, #44]	@ (8005180 <BSP_I2C4_DeInit+0x48>)
 8005154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005158:	f001 fe38 	bl	8006dcc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800515c:	4a09      	ldr	r2, [pc, #36]	@ (8005184 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800515e:	480a      	ldr	r0, [pc, #40]	@ (8005188 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005160:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8005164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005168:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800516c:	f002 f87e 	bl	800726c <HAL_I2C_DeInit>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0e7      	beq.n	8005144 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8005174:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005178:	e7e5      	b.n	8005146 <BSP_I2C4_DeInit+0xe>
 800517a:	bf00      	nop
 800517c:	2400be3c 	.word	0x2400be3c
 8005180:	58020c00 	.word	0x58020c00
 8005184:	58024400 	.word	0x58024400
 8005188:	2400b3e4 	.word	0x2400b3e4

0800518c <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800518c:	2300      	movs	r3, #0
 800518e:	2201      	movs	r2, #1
{
 8005190:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005192:	6041      	str	r1, [r0, #4]
{
 8005194:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005196:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005198:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800519c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80051a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80051a4:	f002 f80c 	bl	80071c0 <HAL_I2C_Init>
 80051a8:	4601      	mov	r1, r0
 80051aa:	b108      	cbz	r0, 80051b0 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
}
 80051ae:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80051b0:	4620      	mov	r0, r4
 80051b2:	f002 fa32 	bl	800761a <HAL_I2CEx_ConfigAnalogFilter>
 80051b6:	4601      	mov	r1, r0
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1f7      	bne.n	80051ac <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80051bc:	4620      	mov	r0, r4
 80051be:	f002 fa52 	bl	8007666 <HAL_I2CEx_ConfigDigitalFilter>
 80051c2:	3800      	subs	r0, #0
 80051c4:	bf18      	it	ne
 80051c6:	2001      	movne	r0, #1
 80051c8:	e7f1      	b.n	80051ae <MX_I2C4_Init+0x22>
	...

080051cc <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80051cc:	4ba1      	ldr	r3, [pc, #644]	@ (8005454 <BSP_I2C4_Init+0x288>)
 80051ce:	48a2      	ldr	r0, [pc, #648]	@ (8005458 <BSP_I2C4_Init+0x28c>)
{
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80051d4:	6003      	str	r3, [r0, #0]
{
 80051d6:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 80051d8:	4ba0      	ldr	r3, [pc, #640]	@ (800545c <BSP_I2C4_Init+0x290>)
 80051da:	681c      	ldr	r4, [r3, #0]
 80051dc:	b11c      	cbz	r4, 80051e6 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80051de:	2000      	movs	r0, #0
}
 80051e0:	b013      	add	sp, #76	@ 0x4c
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80051ea:	f002 fa11 	bl	8007610 <HAL_I2C_GetState>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d1f5      	bne.n	80051de <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80051f2:	4d9b      	ldr	r5, [pc, #620]	@ (8005460 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80051f4:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80051f8:	2702      	movs	r7, #2
 80051fa:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80051fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005200:	a90d      	add	r1, sp, #52	@ 0x34
 8005202:	4898      	ldr	r0, [pc, #608]	@ (8005464 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800520c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	930a      	str	r3, [sp, #40]	@ 0x28
 8005216:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005218:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800521c:	f043 0308 	orr.w	r3, r3, #8
 8005220:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005224:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005228:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005236:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800523a:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800523e:	f001 fcdd 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005246:	a90d      	add	r1, sp, #52	@ 0x34
 8005248:	4886      	ldr	r0, [pc, #536]	@ (8005464 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800524a:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800524c:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005250:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005254:	f001 fcd2 	bl	8006bfc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005258:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8005264:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526c:	930c      	str	r3, [sp, #48]	@ 0x30
 800526e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8005270:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800527c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005284:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005288:	f004 fcd8 	bl	8009c3c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800528c:	2800      	cmp	r0, #0
 800528e:	d06f      	beq.n	8005370 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005290:	4b75      	ldr	r3, [pc, #468]	@ (8005468 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8005292:	4622      	mov	r2, r4
 8005294:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005296:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800529a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800529e:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8005470 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80052a2:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80052a6:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80052aa:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80052ae:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80052b0:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80052b4:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80052b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 80052bc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80052c0:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80052c2:	4b6a      	ldr	r3, [pc, #424]	@ (800546c <BSP_I2C4_Init+0x2a0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
{
 80052c6:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80052c8:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80052cc:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 80052d0:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80052d4:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80052d8:	d35d      	bcc.n	8005396 <BSP_I2C4_Init+0x1ca>
 80052da:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80052dc:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80052de:	9d00      	ldr	r5, [sp, #0]
 80052e0:	42bd      	cmp	r5, r7
 80052e2:	d852      	bhi.n	800538a <BSP_I2C4_Init+0x1be>
 80052e4:	42be      	cmp	r6, r7
 80052e6:	d350      	bcc.n	800538a <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80052e8:	4591      	cmp	r9, r2
 80052ea:	d04e      	beq.n	800538a <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80052ec:	2514      	movs	r5, #20
 80052ee:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80052f2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80052f4:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80052f6:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80052fa:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80052fc:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005300:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005304:	d93e      	bls.n	8005384 <BSP_I2C4_Init+0x1b8>
 8005306:	4a59      	ldr	r2, [pc, #356]	@ (800546c <BSP_I2C4_Init+0x2a0>)
 8005308:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800530a:	4b58      	ldr	r3, [pc, #352]	@ (800546c <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800530c:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	4956      	ldr	r1, [pc, #344]	@ (8005470 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005316:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005318:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800531a:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800531c:	0043      	lsls	r3, r0, #1
 800531e:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8005322:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8005326:	f10b 0b01 	add.w	fp, fp, #1
 800532a:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 800532e:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8005332:	9508      	str	r5, [sp, #32]
 8005334:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005336:	9b05      	ldr	r3, [sp, #20]
 8005338:	429f      	cmp	r7, r3
 800533a:	d138      	bne.n	80053ae <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005340:	d816      	bhi.n	8005370 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005342:	2114      	movs	r1, #20
 8005344:	9a01      	ldr	r2, [sp, #4]
 8005346:	4b4a      	ldr	r3, [pc, #296]	@ (8005470 <BSP_I2C4_Init+0x2a4>)
 8005348:	434a      	muls	r2, r1
 800534a:	1899      	adds	r1, r3, r2
 800534c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800534e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005350:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005354:	684b      	ldr	r3, [r1, #4]
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800535c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800535e:	688b      	ldr	r3, [r1, #8]
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005366:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005368:	68cb      	ldr	r3, [r1, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800536e:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005370:	4621      	mov	r1, r4
 8005372:	4839      	ldr	r0, [pc, #228]	@ (8005458 <BSP_I2C4_Init+0x28c>)
 8005374:	f7ff ff0a 	bl	800518c <MX_I2C4_Init>
 8005378:	2800      	cmp	r0, #0
 800537a:	f43f af30 	beq.w	80051de <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800537e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005382:	e72d      	b.n	80051e0 <BSP_I2C4_Init+0x14>
 8005384:	4691      	mov	r9, r2
 8005386:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800538a:	f10e 0e01 	add.w	lr, lr, #1
 800538e:	440f      	add	r7, r1
 8005390:	f1be 0f10 	cmp.w	lr, #16
 8005394:	d1a3      	bne.n	80052de <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005396:	f1bc 0f10 	cmp.w	ip, #16
 800539a:	4488      	add	r8, r1
 800539c:	d196      	bne.n	80052cc <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800539e:	3201      	adds	r2, #1
 80053a0:	4401      	add	r1, r0
 80053a2:	2a10      	cmp	r2, #16
 80053a4:	d18f      	bne.n	80052c6 <BSP_I2C4_Init+0xfa>
 80053a6:	f1ba 0f00 	cmp.w	sl, #0
 80053aa:	d1ac      	bne.n	8005306 <BSP_I2C4_Init+0x13a>
 80053ac:	e7ad      	b.n	800530a <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80053ae:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80053b0:	f04f 0c00 	mov.w	ip, #0
 80053b4:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80053b6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80053ba:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80053bc:	441d      	add	r5, r3
 80053be:	441e      	add	r6, r3
 80053c0:	9503      	str	r5, [sp, #12]
 80053c2:	ebab 0503 	sub.w	r5, fp, r3
 80053c6:	9607      	str	r6, [sp, #28]
 80053c8:	006d      	lsls	r5, r5, #1
 80053ca:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80053cc:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80053ce:	f240 5214 	movw	r2, #1300	@ 0x514
 80053d2:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80053d6:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80053da:	4295      	cmp	r5, r2
 80053dc:	d92f      	bls.n	800543e <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80053de:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80053e2:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80053e6:	d22a      	bcs.n	800543e <BSP_I2C4_Init+0x272>
 80053e8:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80053ea:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80053ee:	f8dd 9000 	ldr.w	r9, [sp]
 80053f2:	442e      	add	r6, r5
 80053f4:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80053f8:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80053fc:	f240 4212 	movw	r2, #1042	@ 0x412
 8005400:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005404:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005408:	4592      	cmp	sl, r2
 800540a:	d811      	bhi.n	8005430 <BSP_I2C4_Init+0x264>
 800540c:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005410:	d30e      	bcc.n	8005430 <BSP_I2C4_Init+0x264>
 8005412:	4580      	cmp	r8, r0
 8005414:	d90c      	bls.n	8005430 <BSP_I2C4_Init+0x264>
              error = -error;
 8005416:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800541a:	bf28      	it	cs
 800541c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800541e:	9a02      	ldr	r2, [sp, #8]
 8005420:	4592      	cmp	sl, r2
 8005422:	d205      	bcs.n	8005430 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8005424:	9a04      	ldr	r2, [sp, #16]
 8005426:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005428:	9a06      	ldr	r2, [sp, #24]
 800542a:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800542e:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005430:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005434:	4498      	add	r8, r3
 8005436:	441e      	add	r6, r3
 8005438:	eba9 0903 	sub.w	r9, r9, r3
 800543c:	d1dc      	bne.n	80053f8 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800543e:	9a00      	ldr	r2, [sp, #0]
 8005440:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005444:	441d      	add	r5, r3
 8005446:	eba2 0203 	sub.w	r2, r2, r3
 800544a:	9200      	str	r2, [sp, #0]
 800544c:	d1bf      	bne.n	80053ce <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800544e:	3701      	adds	r7, #1
 8005450:	3114      	adds	r1, #20
 8005452:	e770      	b.n	8005336 <BSP_I2C4_Init+0x16a>
 8005454:	58001c00 	.word	0x58001c00
 8005458:	2400b3e4 	.word	0x2400b3e4
 800545c:	2400be3c 	.word	0x2400be3c
 8005460:	58024400 	.word	0x58024400
 8005464:	58020c00 	.word	0x58020c00
 8005468:	3b9aca00 	.word	0x3b9aca00
 800546c:	2400b438 	.word	0x2400b438
 8005470:	2400b43c 	.word	0x2400b43c

08005474 <BSP_I2C4_WriteReg>:
{
 8005474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005476:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800547a:	9200      	str	r2, [sp, #0]
 800547c:	460a      	mov	r2, r1
 800547e:	4601      	mov	r1, r0
 8005480:	4808      	ldr	r0, [pc, #32]	@ (80054a4 <BSP_I2C4_WriteReg+0x30>)
 8005482:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005486:	2301      	movs	r3, #1
 8005488:	f001 ff0a 	bl	80072a0 <HAL_I2C_Mem_Write>
 800548c:	b140      	cbz	r0, 80054a0 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800548e:	4805      	ldr	r0, [pc, #20]	@ (80054a4 <BSP_I2C4_WriteReg+0x30>)
 8005490:	f002 f8c1 	bl	8007616 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005494:	2804      	cmp	r0, #4
 8005496:	bf14      	ite	ne
 8005498:	f06f 0003 	mvnne.w	r0, #3
 800549c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80054a0:	b004      	add	sp, #16
 80054a2:	bd10      	pop	{r4, pc}
 80054a4:	2400b3e4 	.word	0x2400b3e4

080054a8 <BSP_I2C4_ReadReg>:
{
 80054a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80054aa:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80054ae:	9200      	str	r2, [sp, #0]
 80054b0:	460a      	mov	r2, r1
 80054b2:	4601      	mov	r1, r0
 80054b4:	4808      	ldr	r0, [pc, #32]	@ (80054d8 <BSP_I2C4_ReadReg+0x30>)
 80054b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054ba:	2301      	movs	r3, #1
 80054bc:	f001 ffca 	bl	8007454 <HAL_I2C_Mem_Read>
 80054c0:	b140      	cbz	r0, 80054d4 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80054c2:	4805      	ldr	r0, [pc, #20]	@ (80054d8 <BSP_I2C4_ReadReg+0x30>)
 80054c4:	f002 f8a7 	bl	8007616 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80054c8:	2804      	cmp	r0, #4
 80054ca:	bf14      	ite	ne
 80054cc:	f06f 0003 	mvnne.w	r0, #3
 80054d0:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80054d4:	b004      	add	sp, #16
 80054d6:	bd10      	pop	{r4, pc}
 80054d8:	2400b3e4 	.word	0x2400b3e4

080054dc <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80054dc:	f000 bd08 	b.w	8005ef0 <HAL_GetTick>

080054e0 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80054e0:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80054e2:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 80054e6:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80054e8:	684a      	ldr	r2, [r1, #4]
 80054ea:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80054ec:	2201      	movs	r2, #1
 80054ee:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80054f0:	688a      	ldr	r2, [r1, #8]
 80054f2:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80054f4:	680a      	ldr	r2, [r1, #0]
 80054f6:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80054f8:	2200      	movs	r2, #0
 80054fa:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80054fe:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005500:	68ca      	ldr	r2, [r1, #12]
 8005502:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005504:	f003 bcc4 	b.w	8008e90 <HAL_QSPI_Init>
 8005508:	52005000 	.word	0x52005000

0800550c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800550c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800550e:	b988      	cbnz	r0, 8005534 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005510:	4c0a      	ldr	r4, [pc, #40]	@ (800553c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005512:	480b      	ldr	r0, [pc, #44]	@ (8005540 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005514:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005516:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005518:	b94b      	cbnz	r3, 800552e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800551a:	f7ff f9bc 	bl	8004896 <MT25TL01G_EnableMemoryMappedModeSTR>
 800551e:	b110      	cbz	r0, 8005526 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005520:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005524:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005526:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005528:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800552a:	7023      	strb	r3, [r4, #0]
 800552c:	e7fa      	b.n	8005524 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800552e:	f7ff f968 	bl	8004802 <MT25TL01G_EnableMemoryMappedModeDTR>
 8005532:	e7f4      	b.n	800551e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005534:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005538:	e7f4      	b.n	8005524 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800553a:	bf00      	nop
 800553c:	2400be40 	.word	0x2400be40
 8005540:	240003c8 	.word	0x240003c8

08005544 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	460c      	mov	r4, r1
 8005548:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800554a:	bb30      	cbnz	r0, 800559a <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800554c:	4d17      	ldr	r5, [pc, #92]	@ (80055ac <BSP_QSPI_ConfigFlash+0x68>)
 800554e:	782b      	ldrb	r3, [r5, #0]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d025      	beq.n	80055a0 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005554:	fab2 f382 	clz	r3, r2
 8005558:	4e15      	ldr	r6, [pc, #84]	@ (80055b0 <BSP_QSPI_ConfigFlash+0x6c>)
 800555a:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800555c:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005562:	f003 fc95 	bl	8008e90 <HAL_QSPI_Init>
 8005566:	b9f0      	cbnz	r0, 80055a6 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005568:	786b      	ldrb	r3, [r5, #1]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d10f      	bne.n	800558e <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800556e:	2c03      	cmp	r4, #3
 8005570:	d105      	bne.n	800557e <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005572:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005574:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005576:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005578:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800557a:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff f923 	bl	80047ca <MT25TL01G_ExitQPIMode>
 8005584:	2800      	cmp	r0, #0
 8005586:	d0f4      	beq.n	8005572 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005588:	f06f 0004 	mvn.w	r0, #4
 800558c:	e7f6      	b.n	800557c <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800558e:	2c03      	cmp	r4, #3
 8005590:	d1ef      	bne.n	8005572 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff f8fd 	bl	8004792 <MT25TL01G_EnterQPIMode>
 8005598:	e7f4      	b.n	8005584 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800559a:	f06f 0001 	mvn.w	r0, #1
 800559e:	e7ed      	b.n	800557c <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80055a0:	f06f 0019 	mvn.w	r0, #25
 80055a4:	e7ea      	b.n	800557c <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80055a6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80055aa:	e7e7      	b.n	800557c <BSP_QSPI_ConfigFlash+0x38>
 80055ac:	2400be40 	.word	0x2400be40
 80055b0:	240003c8 	.word	0x240003c8

080055b4 <BSP_QSPI_Init>:
{
 80055b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	460c      	mov	r4, r1
 80055ba:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80055bc:	2800      	cmp	r0, #0
 80055be:	f040 81ac 	bne.w	800591a <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80055c2:	4d03      	ldr	r5, [pc, #12]	@ (80055d0 <BSP_QSPI_Init+0x1c>)
 80055c4:	782f      	ldrb	r7, [r5, #0]
 80055c6:	b12f      	cbz	r7, 80055d4 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 80055c8:	2000      	movs	r0, #0
}
 80055ca:	b024      	add	sp, #144	@ 0x90
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	2400be40 	.word	0x2400be40
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80055d4:	4bc3      	ldr	r3, [pc, #780]	@ (80058e4 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055d6:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80055da:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80055dc:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 80055de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80055e2:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80055e6:	48c0      	ldr	r0, [pc, #768]	@ (80058e8 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80055e8:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80055ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80055f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80055f8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80055fc:	9201      	str	r2, [sp, #4]
 80055fe:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005600:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005606:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005608:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800560a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800560e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005614:	f042 0202 	orr.w	r2, r2, #2
 8005618:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800561c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005620:	f002 0202 	and.w	r2, r2, #2
 8005624:	9202      	str	r2, [sp, #8]
 8005626:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800562c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005630:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005638:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800563c:	9203      	str	r2, [sp, #12]
 800563e:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005644:	f042 0208 	orr.w	r2, r2, #8
 8005648:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800564c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005650:	f002 0208 	and.w	r2, r2, #8
 8005654:	9204      	str	r2, [sp, #16]
 8005656:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800565c:	f042 0220 	orr.w	r2, r2, #32
 8005660:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005668:	f002 0220 	and.w	r2, r2, #32
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005674:	f042 0220 	orr.w	r2, r2, #32
 8005678:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800567c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005680:	f002 0220 	and.w	r2, r2, #32
 8005684:	9206      	str	r2, [sp, #24]
 8005686:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005698:	f002 0220 	and.w	r2, r2, #32
 800569c:	9207      	str	r2, [sp, #28]
 800569e:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80056a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056b0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80056b4:	9208      	str	r2, [sp, #32]
 80056b6:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80056b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056c8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80056cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80056d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056e0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80056e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80056e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80056e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056f8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80056fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80056fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005700:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005704:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005708:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800570c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	930c      	str	r3, [sp, #48]	@ 0x30
 8005716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005718:	2302      	movs	r3, #2
 800571a:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800571e:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005720:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005722:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005726:	f001 fa69 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800572a:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800572c:	a916      	add	r1, sp, #88	@ 0x58
 800572e:	486f      	ldr	r0, [pc, #444]	@ (80058ec <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005730:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005732:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005736:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800573a:	f001 fa5f 	bl	8006bfc <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800573e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005742:	a916      	add	r1, sp, #88	@ 0x58
 8005744:	486a      	ldr	r0, [pc, #424]	@ (80058f0 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005746:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005748:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800574a:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800574c:	f001 fa56 	bl	8006bfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005750:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005752:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005756:	4867      	ldr	r0, [pc, #412]	@ (80058f4 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005758:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800575c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800575e:	f001 fa4d 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005762:	a916      	add	r1, sp, #88	@ 0x58
 8005764:	4864      	ldr	r0, [pc, #400]	@ (80058f8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005766:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800576a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800576e:	f001 fa45 	bl	8006bfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005772:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005774:	a916      	add	r1, sp, #88	@ 0x58
 8005776:	485f      	ldr	r0, [pc, #380]	@ (80058f4 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005778:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800577a:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800577c:	f001 fa3e 	bl	8006bfc <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005780:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005782:	a916      	add	r1, sp, #88	@ 0x58
 8005784:	485c      	ldr	r0, [pc, #368]	@ (80058f8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005786:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005788:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800578a:	f001 fa37 	bl	8006bfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800578e:	a916      	add	r1, sp, #88	@ 0x58
 8005790:	4856      	ldr	r0, [pc, #344]	@ (80058ec <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005792:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005796:	f001 fa31 	bl	8006bfc <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800579a:	a916      	add	r1, sp, #88	@ 0x58
 800579c:	4856      	ldr	r0, [pc, #344]	@ (80058f8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800579e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80057a2:	f001 fa2b 	bl	8006bfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80057a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80057aa:	a916      	add	r1, sp, #88	@ 0x58
 80057ac:	484f      	ldr	r0, [pc, #316]	@ (80058ec <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80057ae:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80057b0:	f001 fa24 	bl	8006bfc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80057b4:	463a      	mov	r2, r7
 80057b6:	210f      	movs	r1, #15
 80057b8:	205c      	movs	r0, #92	@ 0x5c
 80057ba:	f000 fbc9 	bl	8005f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80057be:	205c      	movs	r0, #92	@ 0x5c
 80057c0:	f000 fbf8 	bl	8005fb4 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80057c4:	a811      	add	r0, sp, #68	@ 0x44
 80057c6:	f7fe ff38 	bl	800463a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80057ca:	7863      	ldrb	r3, [r4, #1]
 80057cc:	4a4b      	ldr	r2, [pc, #300]	@ (80058fc <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80057ce:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80057d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057d6:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80057da:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057de:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 80057e2:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80057e6:	a90d      	add	r1, sp, #52	@ 0x34
 80057e8:	4845      	ldr	r0, [pc, #276]	@ (8005900 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057ea:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80057ec:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057ee:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80057f0:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057f2:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80057f4:	f7ff fe74 	bl	80054e0 <MX_QSPI_Init>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	f040 8091 	bne.w	8005920 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80057fe:	2103      	movs	r1, #3
 8005800:	483f      	ldr	r0, [pc, #252]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005802:	f7ff f88e 	bl	8004922 <MT25TL01G_ResetEnable>
 8005806:	2800      	cmp	r0, #0
 8005808:	f040 8084 	bne.w	8005914 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800580c:	2103      	movs	r1, #3
 800580e:	483c      	ldr	r0, [pc, #240]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005810:	f7ff f8a8 	bl	8004964 <MT25TL01G_ResetMemory>
 8005814:	2800      	cmp	r0, #0
 8005816:	d17d      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005818:	7869      	ldrb	r1, [r5, #1]
 800581a:	4839      	ldr	r0, [pc, #228]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 800581c:	f7fe ff1e 	bl	800465c <MT25TL01G_AutoPollingMemReady>
 8005820:	4601      	mov	r1, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d176      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005826:	4836      	ldr	r0, [pc, #216]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005828:	f7ff f87b 	bl	8004922 <MT25TL01G_ResetEnable>
 800582c:	4601      	mov	r1, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	d170      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005832:	4833      	ldr	r0, [pc, #204]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005834:	f7ff f896 	bl	8004964 <MT25TL01G_ResetMemory>
 8005838:	4601      	mov	r1, r0
 800583a:	2800      	cmp	r0, #0
 800583c:	d16a      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800583e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005840:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005842:	482f      	ldr	r0, [pc, #188]	@ (8005900 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005844:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005846:	f7fe ff09 	bl	800465c <MT25TL01G_AutoPollingMemReady>
 800584a:	2800      	cmp	r0, #0
 800584c:	d162      	bne.n	8005914 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800584e:	7869      	ldrb	r1, [r5, #1]
 8005850:	482b      	ldr	r0, [pc, #172]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005852:	f7fe ff72 	bl	800473a <MT25TL01G_Enter4BytesAddressMode>
 8005856:	2800      	cmp	r0, #0
 8005858:	d15c      	bne.n	8005914 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800585a:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 800585e:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005862:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005864:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005868:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800586a:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800586c:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800586e:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005870:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005874:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005876:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005878:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800587c:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005880:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005884:	481e      	ldr	r0, [pc, #120]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005886:	f003 fb4f 	bl	8008f28 <HAL_QSPI_Command>
 800588a:	2800      	cmp	r0, #0
 800588c:	d142      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005892:	f10d 0102 	add.w	r1, sp, #2
 8005896:	481a      	ldr	r0, [pc, #104]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 8005898:	f003 fbe7 	bl	800906a <HAL_QSPI_Receive>
 800589c:	2800      	cmp	r0, #0
 800589e:	d139      	bne.n	8005914 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058a0:	7869      	ldrb	r1, [r5, #1]
 80058a2:	4817      	ldr	r0, [pc, #92]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 80058a4:	f7fe ff05 	bl	80046b2 <MT25TL01G_WriteEnable>
 80058a8:	bba0      	cbnz	r0, 8005914 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80058aa:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b0:	a916      	add	r1, sp, #88	@ 0x58
 80058b2:	4813      	ldr	r0, [pc, #76]	@ (8005900 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80058b4:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80058b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058be:	051b      	lsls	r3, r3, #20
 80058c0:	0d1b      	lsrs	r3, r3, #20
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ce:	f003 fb2b 	bl	8008f28 <HAL_QSPI_Command>
 80058d2:	b9f8      	cbnz	r0, 8005914 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	f10d 0102 	add.w	r1, sp, #2
 80058dc:	4808      	ldr	r0, [pc, #32]	@ (8005900 <BSP_QSPI_Init+0x34c>)
 80058de:	f003 fb68 	bl	8008fb2 <HAL_QSPI_Transmit>
 80058e2:	e00f      	b.n	8005904 <BSP_QSPI_Init+0x350>
 80058e4:	58024400 	.word	0x58024400
 80058e8:	58020400 	.word	0x58020400
 80058ec:	58021800 	.word	0x58021800
 80058f0:	58020c00 	.word	0x58020c00
 80058f4:	58021c00 	.word	0x58021c00
 80058f8:	58021400 	.word	0x58021400
 80058fc:	08024d24 	.word	0x08024d24
 8005900:	240003c8 	.word	0x240003c8
 8005904:	b930      	cbnz	r0, 8005914 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005906:	7862      	ldrb	r2, [r4, #1]
 8005908:	7821      	ldrb	r1, [r4, #0]
 800590a:	f7ff fe1b 	bl	8005544 <BSP_QSPI_ConfigFlash>
 800590e:	2800      	cmp	r0, #0
 8005910:	f43f ae5a 	beq.w	80055c8 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005914:	f06f 0004 	mvn.w	r0, #4
 8005918:	e657      	b.n	80055ca <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800591a:	f06f 0001 	mvn.w	r0, #1
 800591e:	e654      	b.n	80055ca <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005920:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005924:	e651      	b.n	80055ca <BSP_QSPI_Init+0x16>
 8005926:	bf00      	nop

08005928 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005928:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800592a:	4604      	mov	r4, r0
 800592c:	b970      	cbnz	r0, 800594c <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <BSP_SDRAM_DeInit+0x2c>)
 8005930:	4809      	ldr	r0, [pc, #36]	@ (8005958 <BSP_SDRAM_DeInit+0x30>)
 8005932:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005934:	f004 ffe4 	bl	800a900 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005938:	207a      	movs	r0, #122	@ 0x7a
 800593a:	f000 fb49 	bl	8005fd0 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800593e:	4807      	ldr	r0, [pc, #28]	@ (800595c <BSP_SDRAM_DeInit+0x34>)
 8005940:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <BSP_SDRAM_DeInit+0x38>)
 8005942:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005944:	f003 f82a 	bl	800899c <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005948:	4620      	mov	r0, r4
}
 800594a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800594c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005950:	e7fb      	b.n	800594a <BSP_SDRAM_DeInit+0x22>
 8005952:	bf00      	nop
 8005954:	52004140 	.word	0x52004140
 8005958:	2400bf44 	.word	0x2400bf44
 800595c:	2400be4c 	.word	0x2400be4c
 8005960:	52000040 	.word	0x52000040

08005964 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005964:	2201      	movs	r2, #1
 8005966:	4915      	ldr	r1, [pc, #84]	@ (80059bc <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <MX_SDRAM_Init+0x5c>)
{
 800596a:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800596c:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005970:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005972:	2104      	movs	r1, #4
 8005974:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005976:	2440      	movs	r4, #64	@ 0x40
{
 8005978:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800597a:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800597e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005982:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005986:	2200      	movs	r2, #0
 8005988:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800598c:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005990:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005994:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005996:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005998:	2207      	movs	r2, #7
 800599a:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800599c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80059a0:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80059a2:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80059a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80059a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80059ac:	f004 ff80 	bl	800a8b0 <HAL_SDRAM_Init>
}
 80059b0:	3800      	subs	r0, #0
 80059b2:	bf18      	it	ne
 80059b4:	2001      	movne	r0, #1
 80059b6:	b008      	add	sp, #32
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	bf00      	nop
 80059bc:	52004140 	.word	0x52004140
 80059c0:	2400bf44 	.word	0x2400bf44

080059c4 <BSP_SDRAM_Init>:
{
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80059c6:	4605      	mov	r5, r0
{
 80059c8:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 80059ca:	2800      	cmp	r0, #0
 80059cc:	f040 80dd 	bne.w	8005b8a <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 80059d0:	4b71      	ldr	r3, [pc, #452]	@ (8005b98 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80059d2:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80059d4:	a909      	add	r1, sp, #36	@ 0x24
 80059d6:	4871      	ldr	r0, [pc, #452]	@ (8005b9c <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80059d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80059dc:	4c70      	ldr	r4, [pc, #448]	@ (8005ba0 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80059de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80059e2:	4e70      	ldr	r6, [pc, #448]	@ (8005ba4 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80059e4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80059e8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80059ec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80059f0:	9201      	str	r2, [sp, #4]
 80059f2:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80059f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005a00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005a04:	f002 0201 	and.w	r2, r2, #1
 8005a08:	9202      	str	r2, [sp, #8]
 8005a0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a10:	f042 0208 	orr.w	r2, r2, #8
 8005a14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a1c:	f002 0208 	and.w	r2, r2, #8
 8005a20:	9203      	str	r2, [sp, #12]
 8005a22:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a28:	f042 0210 	orr.w	r2, r2, #16
 8005a2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a34:	f002 0210 	and.w	r2, r2, #16
 8005a38:	9204      	str	r2, [sp, #16]
 8005a3a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a4c:	f002 0220 	and.w	r2, r2, #32
 8005a50:	9205      	str	r2, [sp, #20]
 8005a52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a64:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005a68:	9206      	str	r2, [sp, #24]
 8005a6a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a7c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a90:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9a:	9308      	str	r3, [sp, #32]
 8005a9c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005aaa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005aae:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005ab0:	f001 f8a4 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005ab4:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005ab8:	a909      	add	r1, sp, #36	@ 0x24
 8005aba:	483b      	ldr	r0, [pc, #236]	@ (8005ba8 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005abc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005abe:	f001 f89d 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005ac2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005ac6:	a909      	add	r1, sp, #36	@ 0x24
 8005ac8:	4838      	ldr	r0, [pc, #224]	@ (8005bac <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005aca:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005acc:	f001 f896 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005ad0:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005ad4:	a909      	add	r1, sp, #36	@ 0x24
 8005ad6:	4836      	ldr	r0, [pc, #216]	@ (8005bb0 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005ad8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005ada:	f001 f88f 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005ade:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005ae2:	a909      	add	r1, sp, #36	@ 0x24
 8005ae4:	4833      	ldr	r0, [pc, #204]	@ (8005bb4 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005ae6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005ae8:	f001 f888 	bl	8006bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005aec:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005af0:	a909      	add	r1, sp, #36	@ 0x24
 8005af2:	4831      	ldr	r0, [pc, #196]	@ (8005bb8 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005af4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005af6:	f001 f881 	bl	8006bfc <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005afa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005afe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005b02:	f240 2002 	movw	r0, #514	@ 0x202
 8005b06:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005b0a:	6334      	str	r4, [r6, #48]	@ 0x30
 8005b0c:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005b0e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005b12:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005b16:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005b18:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005b1a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005b1e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005b22:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005b26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005b2a:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005b2c:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005b2e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005b30:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005b38:	f002 ff30 	bl	800899c <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f002 febe 	bl	80088be <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005b42:	462a      	mov	r2, r5
 8005b44:	210f      	movs	r1, #15
 8005b46:	207a      	movs	r0, #122	@ 0x7a
 8005b48:	f000 fa02 	bl	8005f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005b4c:	207a      	movs	r0, #122	@ 0x7a
 8005b4e:	f000 fa31 	bl	8005fb4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff ff06 	bl	8005964 <MX_SDRAM_Init>
 8005b58:	b9d0      	cbnz	r0, 8005b90 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005b5a:	4919      	ldr	r1, [pc, #100]	@ (8005bc0 <BSP_SDRAM_Init+0x1fc>)
 8005b5c:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005b5e:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005b62:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005b66:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005b68:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005b6c:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005b6e:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005b76:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005b78:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005b7a:	f7fe fd31 	bl	80045e0 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	bf18      	it	ne
 8005b82:	f06f 0004 	mvnne.w	r0, #4
}
 8005b86:	b00f      	add	sp, #60	@ 0x3c
 8005b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005b8a:	f06f 0001 	mvn.w	r0, #1
 8005b8e:	e7fa      	b.n	8005b86 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005b94:	e7f7      	b.n	8005b86 <BSP_SDRAM_Init+0x1c2>
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	58020c00 	.word	0x58020c00
 8005ba0:	2400beb8 	.word	0x2400beb8
 8005ba4:	2400bf44 	.word	0x2400bf44
 8005ba8:	58021000 	.word	0x58021000
 8005bac:	58021400 	.word	0x58021400
 8005bb0:	58021800 	.word	0x58021800
 8005bb4:	58021c00 	.word	0x58021c00
 8005bb8:	58022000 	.word	0x58022000
 8005bbc:	52000040 	.word	0x52000040
 8005bc0:	2400bf24 	.word	0x2400bf24

08005bc4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005bcc:	4606      	mov	r6, r0
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d15c      	bne.n	8005c8c <BSP_TS_Init+0xc8>
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	1e5a      	subs	r2, r3, #1
 8005bd6:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005bda:	d257      	bcs.n	8005c8c <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005bdc:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005bde:	1e51      	subs	r1, r2, #1
 8005be0:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005be4:	d252      	bcs.n	8005c8c <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bf28      	it	cs
 8005bea:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005bec:	68e2      	ldr	r2, [r4, #12]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d84c      	bhi.n	8005c8c <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005bf2:	2370      	movs	r3, #112	@ 0x70
 8005bf4:	2254      	movs	r2, #84	@ 0x54
 8005bf6:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005cd0 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005bfe:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005c02:	4b2e      	ldr	r3, [pc, #184]	@ (8005cbc <BSP_TS_Init+0xf8>)
 8005c04:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005c06:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc0 <BSP_TS_Init+0xfc>)
 8005c08:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <BSP_TS_Init+0x100>)
 8005c0c:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <BSP_TS_Init+0x104>)
 8005c10:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005c12:	4b2e      	ldr	r3, [pc, #184]	@ (8005ccc <BSP_TS_Init+0x108>)
 8005c14:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005c16:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005c1a:	a906      	add	r1, sp, #24
 8005c1c:	482c      	ldr	r0, [pc, #176]	@ (8005cd0 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005c1e:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005c22:	f7fe fbe3 	bl	80043ec <FT6X06_RegisterBusIO>
 8005c26:	b9c0      	cbnz	r0, 8005c5a <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005c28:	4669      	mov	r1, sp
 8005c2a:	4829      	ldr	r0, [pc, #164]	@ (8005cd0 <BSP_TS_Init+0x10c>)
 8005c2c:	f7fe fb28 	bl	8004280 <FT6X06_ReadID>
 8005c30:	b998      	cbnz	r0, 8005c5a <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005c32:	9b00      	ldr	r3, [sp, #0]
 8005c34:	2b11      	cmp	r3, #17
 8005c36:	d110      	bne.n	8005c5a <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005c38:	a903      	add	r1, sp, #12
 8005c3a:	4825      	ldr	r0, [pc, #148]	@ (8005cd0 <BSP_TS_Init+0x10c>)
 8005c3c:	f7fe fad4 	bl	80041e8 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005c40:	4f24      	ldr	r7, [pc, #144]	@ (8005cd4 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005c42:	4b25      	ldr	r3, [pc, #148]	@ (8005cd8 <BSP_TS_Init+0x114>)
 8005c44:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005ce0 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005c48:	4821      	ldr	r0, [pc, #132]	@ (8005cd0 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005c4a:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005c4e:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4798      	blx	r3
 8005c56:	4605      	mov	r5, r0
 8005c58:	b1d8      	cbz	r0, 8005c92 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005c5a:	b116      	cbz	r6, 8005c62 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c60:	e010      	b.n	8005c84 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8005c62:	2601      	movs	r6, #1
 8005c64:	e7d7      	b.n	8005c16 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005c66:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005c68:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005c6a:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005c6c:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005c6e:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005c70:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005c76:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005c78:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005c7a:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005c7c:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005c7e:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005c80:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005c84:	4628      	mov	r0, r5
 8005c86:	b00c      	add	sp, #48	@ 0x30
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005c8c:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005c90:	e7f8      	b.n	8005c84 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005c92:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005c94:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005c96:	4e11      	ldr	r6, [pc, #68]	@ (8005cdc <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005c98:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005c9a:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005ca4:	68e3      	ldr	r3, [r4, #12]
 8005ca6:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	4798      	blx	r3
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dad8      	bge.n	8005c66 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cb4:	f06f 0504 	mvn.w	r5, #4
 8005cb8:	e7e4      	b.n	8005c84 <BSP_TS_Init+0xc0>
 8005cba:	bf00      	nop
 8005cbc:	080051cd 	.word	0x080051cd
 8005cc0:	08005139 	.word	0x08005139
 8005cc4:	080054a9 	.word	0x080054a9
 8005cc8:	08005475 	.word	0x08005475
 8005ccc:	080054dd 	.word	0x080054dd
 8005cd0:	2400bf78 	.word	0x2400bf78
 8005cd4:	2400bfa0 	.word	0x2400bfa0
 8005cd8:	24000038 	.word	0x24000038
 8005cdc:	2400bfa4 	.word	0x2400bfa4
 8005ce0:	2400bfcc 	.word	0x2400bfcc

08005ce4 <BSP_TS_GetState>:
{
 8005ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d14d      	bne.n	8005d8a <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005cee:	4b28      	ldr	r3, [pc, #160]	@ (8005d90 <BSP_TS_GetState+0xac>)
 8005cf0:	a901      	add	r1, sp, #4
 8005cf2:	4a28      	ldr	r2, [pc, #160]	@ (8005d94 <BSP_TS_GetState+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6810      	ldr	r0, [r2, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4798      	blx	r3
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	db41      	blt.n	8005d84 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005d00:	4925      	ldr	r1, [pc, #148]	@ (8005d98 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8005d02:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005d04:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005d06:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	d037      	beq.n	8005d7c <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d0c:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005d0e:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d12:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8005d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d1a:	bf1e      	ittt	ne
 8005d1c:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8005d1e:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8005d20:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005d22:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005d26:	bf1c      	itt	ne
 8005d28:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8005d2c:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005d30:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005d34:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005d36:	bf44      	itt	mi
 8005d38:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8005d3c:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d3e:	680f      	ldr	r7, [r1, #0]
 8005d40:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d42:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005d44:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d46:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005d48:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d4a:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d4e:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005d52:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d54:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d56:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005d58:	bf8c      	ite	hi
 8005d5a:	eba2 0c05 	subhi.w	ip, r2, r5
 8005d5e:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005d62:	4283      	cmp	r3, r0
 8005d64:	bf8c      	ite	hi
 8005d66:	1a1e      	subhi	r6, r3, r0
 8005d68:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005d6a:	4567      	cmp	r7, ip
 8005d6c:	d301      	bcc.n	8005d72 <BSP_TS_GetState+0x8e>
 8005d6e:	42b7      	cmp	r7, r6
 8005d70:	d205      	bcs.n	8005d7e <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005d72:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005d74:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005d76:	2000      	movs	r0, #0
}
 8005d78:	b005      	add	sp, #20
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8005d7c:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005d7e:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8005d82:	e7f8      	b.n	8005d76 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d84:	f06f 0004 	mvn.w	r0, #4
 8005d88:	e7f6      	b.n	8005d78 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d8a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005d8e:	e7f3      	b.n	8005d78 <BSP_TS_GetState+0x94>
 8005d90:	2400bfcc 	.word	0x2400bfcc
 8005d94:	2400bfa0 	.word	0x2400bfa0
 8005d98:	2400bfa4 	.word	0x2400bfa4

08005d9c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <SystemInit+0xb8>)
 8005d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005da2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8005da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	f042 0210 	orr.w	r2, r2, #16
 8005db0:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005db2:	4a29      	ldr	r2, [pc, #164]	@ (8005e58 <SystemInit+0xbc>)
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d805      	bhi.n	8005dca <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	f023 030f 	bic.w	r3, r3, #15
 8005dc4:	f043 0307 	orr.w	r3, r3, #7
 8005dc8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005dca:	4b24      	ldr	r3, [pc, #144]	@ (8005e5c <SystemInit+0xc0>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005dd8:	4a21      	ldr	r2, [pc, #132]	@ (8005e60 <SystemInit+0xc4>)
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005dde:	491e      	ldr	r1, [pc, #120]	@ (8005e58 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8005de0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005de2:	680a      	ldr	r2, [r1, #0]
 8005de4:	0712      	lsls	r2, r2, #28
 8005de6:	d505      	bpl.n	8005df4 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005de8:	680a      	ldr	r2, [r1, #0]
 8005dea:	f022 020f 	bic.w	r2, r2, #15
 8005dee:	f042 0207 	orr.w	r2, r2, #7
 8005df2:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005df4:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005df6:	491b      	ldr	r1, [pc, #108]	@ (8005e64 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8005df8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005dfa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005dfc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005dfe:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005e00:	4919      	ldr	r1, [pc, #100]	@ (8005e68 <SystemInit+0xcc>)
 8005e02:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005e04:	4919      	ldr	r1, [pc, #100]	@ (8005e6c <SystemInit+0xd0>)
 8005e06:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005e0a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005e0e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8005e18:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e20:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8005e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005e2c:	4b10      	ldr	r3, [pc, #64]	@ (8005e70 <SystemInit+0xd4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e38:	d203      	bcs.n	8005e42 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <SystemInit+0xd8>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <SystemInit+0xdc>)
 8005e44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005e48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8005e4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005e4e:	4b01      	ldr	r3, [pc, #4]	@ (8005e54 <SystemInit+0xb8>)
 8005e50:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8005e52:	4770      	bx	lr
 8005e54:	e000ed00 	.word	0xe000ed00
 8005e58:	52002000 	.word	0x52002000
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	eaf6ed7f 	.word	0xeaf6ed7f
 8005e64:	02020200 	.word	0x02020200
 8005e68:	01ff0000 	.word	0x01ff0000
 8005e6c:	01010280 	.word	0x01010280
 8005e70:	5c001000 	.word	0x5c001000
 8005e74:	51008000 	.word	0x51008000
 8005e78:	52004000 	.word	0x52004000

08005e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e7c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e7e:	2003      	movs	r0, #3
 8005e80:	f000 f854 	bl	8005f2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e84:	f003 fcde 	bl	8009844 <HAL_RCC_GetSysClockFreq>
 8005e88:	490f      	ldr	r1, [pc, #60]	@ (8005ec8 <HAL_Init+0x4c>)
 8005e8a:	4a10      	ldr	r2, [pc, #64]	@ (8005ecc <HAL_Init+0x50>)
 8005e8c:	698b      	ldr	r3, [r1, #24]
 8005e8e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e9a:	698b      	ldr	r3, [r1, #24]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
 8005ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed0 <HAL_Init+0x54>)
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	fa20 f303 	lsr.w	r3, r0, r3
 8005eac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eae:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_Init+0x58>)
 8005eb0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f7fb fb58 	bl	8001568 <HAL_InitTick>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	b918      	cbnz	r0, 8005ec4 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ebc:	f7fb f844 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005ec4:	2401      	movs	r4, #1
 8005ec6:	e7fb      	b.n	8005ec0 <HAL_Init+0x44>
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	08024d2c 	.word	0x08024d2c
 8005ed0:	24000068 	.word	0x24000068
 8005ed4:	2400006c 	.word	0x2400006c

08005ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005ed8:	4a03      	ldr	r2, [pc, #12]	@ (8005ee8 <HAL_IncTick+0x10>)
 8005eda:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <HAL_IncTick+0x14>)
 8005edc:	6811      	ldr	r1, [r2, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	440b      	add	r3, r1
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2400bfd0 	.word	0x2400bfd0
 8005eec:	24000070 	.word	0x24000070

08005ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005ef0:	4b01      	ldr	r3, [pc, #4]	@ (8005ef8 <HAL_GetTick+0x8>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	2400bfd0 	.word	0x2400bfd0

08005efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f00:	f7ff fff6 	bl	8005ef0 <HAL_GetTick>
 8005f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005f08:	bf1e      	ittt	ne
 8005f0a:	4b04      	ldrne	r3, [pc, #16]	@ (8005f1c <HAL_Delay+0x20>)
 8005f0c:	781b      	ldrbne	r3, [r3, #0]
 8005f0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f10:	f7ff ffee 	bl	8005ef0 <HAL_GetTick>
 8005f14:	1b43      	subs	r3, r0, r5
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	d3fa      	bcc.n	8005f10 <HAL_Delay+0x14>
  {
  }
}
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	24000070 	.word	0x24000070

08005f20 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005f20:	4b01      	ldr	r3, [pc, #4]	@ (8005f28 <HAL_GetREVID+0x8>)
 8005f22:	6818      	ldr	r0, [r3, #0]
}
 8005f24:	0c00      	lsrs	r0, r0, #16
 8005f26:	4770      	bx	lr
 8005f28:	5c001000 	.word	0x5c001000

08005f2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f2c:	4907      	ldr	r1, [pc, #28]	@ (8005f4c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f2e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f30:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f3a:	0412      	lsls	r2, r2, #16
 8005f3c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005f48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005f4a:	4770      	bx	lr
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f50:	4b16      	ldr	r3, [pc, #88]	@ (8005fac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f52:	b530      	push	{r4, r5, lr}
 8005f54:	68dc      	ldr	r4, [r3, #12]
 8005f56:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	bf28      	it	cs
 8005f64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f66:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f6c:	bf8c      	ite	hi
 8005f6e:	3c03      	subhi	r4, #3
 8005f70:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f72:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8005f76:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f78:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f80:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f84:	fa03 f304 	lsl.w	r3, r3, r4
 8005f88:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005f90:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005f92:	db06      	blt.n	8005fa2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f94:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005f98:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005f9c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005fa0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa2:	f000 000f 	and.w	r0, r0, #15
 8005fa6:	4a02      	ldr	r2, [pc, #8]	@ (8005fb0 <HAL_NVIC_SetPriority+0x60>)
 8005fa8:	5413      	strb	r3, [r2, r0]
 8005faa:	e7f9      	b.n	8005fa0 <HAL_NVIC_SetPriority+0x50>
 8005fac:	e000ed00 	.word	0xe000ed00
 8005fb0:	e000ed14 	.word	0xe000ed14

08005fb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	db07      	blt.n	8005fc8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fb8:	2301      	movs	r3, #1
 8005fba:	0941      	lsrs	r1, r0, #5
 8005fbc:	f000 001f 	and.w	r0, r0, #31
 8005fc0:	4a02      	ldr	r2, [pc, #8]	@ (8005fcc <HAL_NVIC_EnableIRQ+0x18>)
 8005fc2:	4083      	lsls	r3, r0
 8005fc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000e100 	.word	0xe000e100

08005fd0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	db0c      	blt.n	8005fee <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd4:	0943      	lsrs	r3, r0, #5
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f000 001f 	and.w	r0, r0, #31
 8005fdc:	4904      	ldr	r1, [pc, #16]	@ (8005ff0 <HAL_NVIC_DisableIRQ+0x20>)
 8005fde:	3320      	adds	r3, #32
 8005fe0:	4082      	lsls	r2, r0
 8005fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fe6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005fea:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005fee:	4770      	bx	lr
 8005ff0:	e000e100 	.word	0xe000e100

08005ff4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005ff4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ff8:	4b04      	ldr	r3, [pc, #16]	@ (800600c <HAL_MPU_Disable+0x18>)
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ffc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006000:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	e000ed00 	.word	0xe000ed00

08006010 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006010:	4b06      	ldr	r3, [pc, #24]	@ (800602c <HAL_MPU_Enable+0x1c>)
 8006012:	f040 0001 	orr.w	r0, r0, #1
 8006016:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800601a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800601c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006022:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006026:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800602a:	4770      	bx	lr
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006030:	7843      	ldrb	r3, [r0, #1]
 8006032:	4a14      	ldr	r2, [pc, #80]	@ (8006084 <HAL_MPU_ConfigRegion+0x54>)
 8006034:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006038:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006044:	6843      	ldr	r3, [r0, #4]
 8006046:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800604a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800604c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800604e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006050:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006054:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006056:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006058:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800605a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800605e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006060:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006064:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006066:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800606a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800606c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006070:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006072:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006076:	7a01      	ldrb	r1, [r0, #8]
 8006078:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800607c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000ed00 	.word	0xe000ed00

08006088 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006088:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800608a:	4604      	mov	r4, r0
 800608c:	b908      	cbnz	r0, 8006092 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800608e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006090:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006092:	7f43      	ldrb	r3, [r0, #29]
 8006094:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006098:	b913      	cbnz	r3, 80060a0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800609a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800609c:	f7fa ff6c 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80060a4:	7923      	ldrb	r3, [r4, #4]
 80060a6:	b9e3      	cbnz	r3, 80060e2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	4a13      	ldr	r2, [pc, #76]	@ (80060f8 <HAL_CRC_Init+0x70>)
 80060ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	f022 0218 	bic.w	r2, r2, #24
 80060b4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060b6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80060b8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060ba:	b9d2      	cbnz	r2, 80060f2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80060c0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80060c2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	6961      	ldr	r1, [r4, #20]
 80060c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060cc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80060ce:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80060d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80060dc:	2301      	movs	r3, #1
 80060de:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80060e0:	e7d6      	b.n	8006090 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80060e2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f808 	bl	80060fc <HAL_CRCEx_Polynomial_Set>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d0e2      	beq.n	80060b6 <HAL_CRC_Init+0x2e>
 80060f0:	e7cd      	b.n	800608e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80060f2:	6922      	ldr	r2, [r4, #16]
 80060f4:	e7e4      	b.n	80060c0 <HAL_CRC_Init+0x38>
 80060f6:	bf00      	nop
 80060f8:	04c11db7 	.word	0x04c11db7

080060fc <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80060fc:	07cb      	lsls	r3, r1, #31
{
 80060fe:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006100:	d50d      	bpl.n	800611e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006102:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006104:	3b01      	subs	r3, #1
 8006106:	d31d      	bcc.n	8006144 <HAL_CRCEx_Polynomial_Set+0x48>
 8006108:	fa21 f403 	lsr.w	r4, r1, r3
 800610c:	07e4      	lsls	r4, r4, #31
 800610e:	d5f9      	bpl.n	8006104 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006110:	2a10      	cmp	r2, #16
 8006112:	d013      	beq.n	800613c <HAL_CRCEx_Polynomial_Set+0x40>
 8006114:	2a10      	cmp	r2, #16
 8006116:	d804      	bhi.n	8006122 <HAL_CRCEx_Polynomial_Set+0x26>
 8006118:	b13a      	cbz	r2, 800612a <HAL_CRCEx_Polynomial_Set+0x2e>
 800611a:	2a08      	cmp	r2, #8
 800611c:	d010      	beq.n	8006140 <HAL_CRCEx_Polynomial_Set+0x44>
 800611e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006120:	e00b      	b.n	800613a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8006122:	2a18      	cmp	r2, #24
 8006124:	d1fb      	bne.n	800611e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8006126:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8006128:	d8f9      	bhi.n	800611e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800612e:	6883      	ldr	r3, [r0, #8]
 8006130:	f023 0318 	bic.w	r3, r3, #24
 8006134:	4313      	orrs	r3, r2
 8006136:	6083      	str	r3, [r0, #8]
 8006138:	2000      	movs	r0, #0
}
 800613a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800613c:	2b07      	cmp	r3, #7
 800613e:	e7f3      	b.n	8006128 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8006140:	2b0f      	cmp	r3, #15
 8006142:	e7f1      	b.n	8006128 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8006144:	2a10      	cmp	r2, #16
 8006146:	d1e5      	bne.n	8006114 <HAL_CRCEx_Polynomial_Set+0x18>
 8006148:	e7e9      	b.n	800611e <HAL_CRCEx_Polynomial_Set+0x22>

0800614a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800614a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800614c:	4604      	mov	r4, r0
 800614e:	2800      	cmp	r0, #0
 8006150:	d036      	beq.n	80061c0 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006152:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8006156:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800615a:	b91b      	cbnz	r3, 8006164 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800615c:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006160:	f7fa ff22 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006164:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006166:	69e0      	ldr	r0, [r4, #28]
 8006168:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800616a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006172:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800617a:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006182:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006184:	68a2      	ldr	r2, [r4, #8]
 8006186:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800618a:	4302      	orrs	r2, r0
 800618c:	f021 0101 	bic.w	r1, r1, #1
 8006190:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006192:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006194:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006198:	0c12      	lsrs	r2, r2, #16
 800619a:	0412      	lsls	r2, r2, #16
 800619c:	430a      	orrs	r2, r1
 800619e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80061a2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80061a6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80061aa:	0552      	lsls	r2, r2, #21
 80061ac:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061b0:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061b2:	430a      	orrs	r2, r1
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061b6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061b8:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061ba:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80061be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80061c0:	2001      	movs	r0, #1
 80061c2:	e7fc      	b.n	80061be <HAL_DMA2D_Init+0x74>

080061c4 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80061c4:	4770      	bx	lr

080061c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80061c6:	4770      	bx	lr

080061c8 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80061c8:	6803      	ldr	r3, [r0, #0]
{
 80061ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80061cc:	685e      	ldr	r6, [r3, #4]
{
 80061ce:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80061d0:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80061d2:	07f2      	lsls	r2, r6, #31
 80061d4:	d514      	bpl.n	8006200 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80061d6:	05e9      	lsls	r1, r5, #23
 80061d8:	d512      	bpl.n	8006200 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061e0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80061e2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80061ea:	2201      	movs	r2, #1
 80061ec:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80061ee:	2304      	movs	r3, #4
 80061f0:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80061f4:	2300      	movs	r3, #0
 80061f6:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80061fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80061fc:	b103      	cbz	r3, 8006200 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80061fe:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006200:	06b2      	lsls	r2, r6, #26
 8006202:	d516      	bpl.n	8006232 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006204:	04ab      	lsls	r3, r5, #18
 8006206:	d514      	bpl.n	8006232 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006210:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006212:	2220      	movs	r2, #32
 8006214:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006218:	f043 0302 	orr.w	r3, r3, #2
 800621c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800621e:	2304      	movs	r3, #4
 8006220:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006224:	2300      	movs	r3, #0
 8006226:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800622a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800622c:	b10b      	cbz	r3, 8006232 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800622e:	4620      	mov	r0, r4
 8006230:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006232:	0730      	lsls	r0, r6, #28
 8006234:	d516      	bpl.n	8006264 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006236:	0529      	lsls	r1, r5, #20
 8006238:	d514      	bpl.n	8006264 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006242:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006244:	2208      	movs	r2, #8
 8006246:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800624a:	f043 0304 	orr.w	r3, r3, #4
 800624e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006250:	2304      	movs	r3, #4
 8006252:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006256:	2300      	movs	r3, #0
 8006258:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800625c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800625e:	b10b      	cbz	r3, 8006264 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8006260:	4620      	mov	r0, r4
 8006262:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006264:	0772      	lsls	r2, r6, #29
 8006266:	d50b      	bpl.n	8006280 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006268:	056b      	lsls	r3, r5, #21
 800626a:	d509      	bpl.n	8006280 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800626c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800626e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006276:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006278:	2204      	movs	r2, #4
 800627a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800627c:	f7ff ffa2 	bl	80061c4 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006280:	07b0      	lsls	r0, r6, #30
 8006282:	d514      	bpl.n	80062ae <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006284:	05a9      	lsls	r1, r5, #22
 8006286:	d512      	bpl.n	80062ae <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006290:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006292:	2202      	movs	r2, #2
 8006294:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006298:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800629a:	2301      	movs	r3, #1
 800629c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80062a0:	2300      	movs	r3, #0
 80062a2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80062a6:	6a23      	ldr	r3, [r4, #32]
 80062a8:	b10b      	cbz	r3, 80062ae <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80062aa:	4620      	mov	r0, r4
 80062ac:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80062ae:	06f2      	lsls	r2, r6, #27
 80062b0:	d513      	bpl.n	80062da <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80062b2:	04eb      	lsls	r3, r5, #19
 80062b4:	d511      	bpl.n	80062da <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80062b6:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80062b8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80062c2:	2210      	movs	r2, #16
 80062c4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80062c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062c8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80062d0:	2300      	movs	r3, #0
 80062d2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80062d6:	f7ff ff76 	bl	80061c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}

080062dc <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	4607      	mov	r7, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e8:	f7ff fe02 	bl	8005ef0 <HAL_GetTick>
 80062ec:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80062f2:	07d2      	lsls	r2, r2, #31
 80062f4:	d50a      	bpl.n	800630c <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80062f6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80062fa:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 80062fc:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80062fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006302:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006306:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800630c:	f7ff fdf0 	bl	8005ef0 <HAL_GetTick>
 8006310:	eba0 0008 	sub.w	r0, r0, r8
 8006314:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006318:	d9e9      	bls.n	80062ee <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800631a:	2003      	movs	r0, #3
 800631c:	e7f4      	b.n	8006308 <DSI_ShortWrite.constprop.0+0x2c>

0800631e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800631e:	7c03      	ldrb	r3, [r0, #16]
{
 8006320:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006322:	2b01      	cmp	r3, #1
 8006324:	d05b      	beq.n	80063de <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006326:	6803      	ldr	r3, [r0, #0]
 8006328:	2000      	movs	r0, #0
 800632a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800632e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006332:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006334:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006336:	d507      	bpl.n	8006348 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006338:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800633c:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006340:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006344:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006348:	0788      	lsls	r0, r1, #30
 800634a:	d505      	bpl.n	8006358 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800634c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006350:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006354:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006358:	0748      	lsls	r0, r1, #29
 800635a:	d505      	bpl.n	8006368 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800635c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006360:	f040 0001 	orr.w	r0, r0, #1
 8006364:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006368:	0708      	lsls	r0, r1, #28
 800636a:	d505      	bpl.n	8006378 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800636c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006370:	f040 0002 	orr.w	r0, r0, #2
 8006374:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006378:	06c8      	lsls	r0, r1, #27
 800637a:	d505      	bpl.n	8006388 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800637c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006380:	f040 000c 	orr.w	r0, r0, #12
 8006384:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006388:	0688      	lsls	r0, r1, #26
 800638a:	d505      	bpl.n	8006398 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800638c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006390:	f040 0010 	orr.w	r0, r0, #16
 8006394:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006398:	0648      	lsls	r0, r1, #25
 800639a:	d505      	bpl.n	80063a8 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800639c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063a0:	f040 0020 	orr.w	r0, r0, #32
 80063a4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80063a8:	0608      	lsls	r0, r1, #24
 80063aa:	d505      	bpl.n	80063b8 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80063ac:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063b0:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80063b4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80063b8:	05c8      	lsls	r0, r1, #23
 80063ba:	d505      	bpl.n	80063c8 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80063bc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063c0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80063c4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80063c8:	0589      	lsls	r1, r1, #22
 80063ca:	d505      	bpl.n	80063d8 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80063cc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80063d0:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 80063d4:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80063d8:	2000      	movs	r0, #0
 80063da:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 80063dc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80063de:	2002      	movs	r0, #2
}
 80063e0:	4770      	bx	lr
	...

080063e4 <HAL_DSI_Init>:
{
 80063e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80063e6:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80063e8:	4604      	mov	r4, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f000 80ea 	beq.w	80065c4 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80063f0:	7c43      	ldrb	r3, [r0, #17]
 80063f2:	b90b      	cbnz	r3, 80063f8 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80063f4:	f7fa fdfc 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80063f8:	2303      	movs	r3, #3
 80063fa:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006406:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800640a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800640e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800641a:	f7ff fd69 	bl	8005ef0 <HAL_GetTick>
 800641e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8006426:	04d9      	lsls	r1, r3, #19
 8006428:	d56e      	bpl.n	8006508 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800642a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800642e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006432:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8006436:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800643a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800643e:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006442:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006444:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006448:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800644a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800644e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006450:	430b      	orrs	r3, r1
 8006452:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006456:	2300      	movs	r3, #0
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8006466:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006472:	f7ff fd43 	bl	8005efc <HAL_Delay>
  tickstart = HAL_GetTick();
 8006476:	f7ff fd3b 	bl	8005ef0 <HAL_GetTick>
 800647a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006482:	05d2      	lsls	r2, r2, #23
 8006484:	d548      	bpl.n	8006518 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8006486:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006488:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800648a:	9202      	str	r2, [sp, #8]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	f002 0201 	and.w	r2, r2, #1
 800649a:	9202      	str	r2, [sp, #8]
 800649c:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80064a4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80064aa:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064ac:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80064ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064b2:	f042 0202 	orr.w	r2, r2, #2
 80064b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80064ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064be:	f042 0204 	orr.w	r2, r2, #4
 80064c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80064c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80064ca:	f022 0203 	bic.w	r2, r2, #3
 80064ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80064d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80064d6:	430a      	orrs	r2, r1
 80064d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 80064dc:	f7ff fd08 	bl	8005ef0 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80064e0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80064e2:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80064e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064e8:	079b      	lsls	r3, r3, #30
 80064ea:	d025      	beq.n	8006538 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064f2:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80064f6:	2b94      	cmp	r3, #148	@ 0x94
 80064f8:	d025      	beq.n	8006546 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80064fa:	f7ff fcf9 	bl	8005ef0 <HAL_GetTick>
 80064fe:	1b80      	subs	r0, r0, r6
 8006500:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006504:	d9f2      	bls.n	80064ec <HAL_DSI_Init+0x108>
 8006506:	e014      	b.n	8006532 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006508:	f7ff fcf2 	bl	8005ef0 <HAL_GetTick>
 800650c:	1b80      	subs	r0, r0, r6
 800650e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006512:	d985      	bls.n	8006420 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006514:	2003      	movs	r0, #3
 8006516:	e053      	b.n	80065c0 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006518:	f7ff fcea 	bl	8005ef0 <HAL_GetTick>
 800651c:	1b80      	subs	r0, r0, r6
 800651e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006522:	d9ab      	bls.n	800647c <HAL_DSI_Init+0x98>
 8006524:	e7f6      	b.n	8006514 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006526:	f7ff fce3 	bl	8005ef0 <HAL_GetTick>
 800652a:	1b80      	subs	r0, r0, r6
 800652c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006530:	d902      	bls.n	8006538 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8006532:	2300      	movs	r3, #0
 8006534:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8006536:	e7ed      	b.n	8006514 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800653e:	f003 0314 	and.w	r3, r3, #20
 8006542:	2b14      	cmp	r3, #20
 8006544:	d1ef      	bne.n	8006526 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006546:	686b      	ldr	r3, [r5, #4]
 8006548:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800654c:	4a1e      	ldr	r2, [pc, #120]	@ (80065c8 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800654e:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf38      	it	cc
 8006554:	2301      	movcc	r3, #1
 8006556:	435a      	muls	r2, r3
 8006558:	68ab      	ldr	r3, [r5, #8]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	409a      	lsls	r2, r3
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	434b      	muls	r3, r1
 8006564:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800656e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006572:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006576:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800657a:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800657c:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800657e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006582:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006586:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800658a:	9003      	str	r0, [sp, #12]
 800658c:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800658e:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	f002 0201 	and.w	r2, r2, #1
 800659c:	9203      	str	r2, [sp, #12]
 800659e:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80065a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80065a4:	f022 0203 	bic.w	r2, r2, #3
 80065a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80065ac:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80065b0:	430a      	orrs	r2, r1
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80065ba:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80065bc:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80065be:	7463      	strb	r3, [r4, #17]
}
 80065c0:	b004      	add	sp, #16
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80065c4:	2001      	movs	r0, #1
 80065c6:	e7fb      	b.n	80065c0 <HAL_DSI_Init+0x1dc>
 80065c8:	003d0900 	.word	0x003d0900

080065cc <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80065cc:	4770      	bx	lr

080065ce <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80065ce:	6803      	ldr	r3, [r0, #0]
 80065d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80065d4:	07d1      	lsls	r1, r2, #31
{
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80065da:	d508      	bpl.n	80065ee <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80065dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80065e0:	07d2      	lsls	r2, r2, #31
 80065e2:	d504      	bpl.n	80065ee <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80065e4:	2201      	movs	r2, #1
 80065e6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80065ea:	f7fb fc35 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80065f4:	0791      	lsls	r1, r2, #30
 80065f6:	d509      	bpl.n	800660c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80065f8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80065fc:	0792      	lsls	r2, r2, #30
 80065fe:	d505      	bpl.n	800660c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006600:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006602:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006604:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006608:	f7fb fc58 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800660c:	69a3      	ldr	r3, [r4, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d04e      	beq.n	80066b0 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006612:	6821      	ldr	r1, [r4, #0]
 8006614:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006618:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800661c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800661e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006622:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8006626:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006628:	b291      	uxth	r1, r2
 800662a:	b119      	cbz	r1, 8006634 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800662c:	6961      	ldr	r1, [r4, #20]
 800662e:	f041 0101 	orr.w	r1, r1, #1
 8006632:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006634:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8006638:	d003      	beq.n	8006642 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800663a:	6962      	ldr	r2, [r4, #20]
 800663c:	f042 0202 	orr.w	r2, r2, #2
 8006640:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006642:	07d8      	lsls	r0, r3, #31
 8006644:	d503      	bpl.n	800664e <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006646:	6962      	ldr	r2, [r4, #20]
 8006648:	f042 0204 	orr.w	r2, r2, #4
 800664c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800664e:	0799      	lsls	r1, r3, #30
 8006650:	d503      	bpl.n	800665a <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006652:	6962      	ldr	r2, [r4, #20]
 8006654:	f042 0208 	orr.w	r2, r2, #8
 8006658:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800665a:	f013 0f0c 	tst.w	r3, #12
 800665e:	d003      	beq.n	8006668 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006660:	6962      	ldr	r2, [r4, #20]
 8006662:	f042 0210 	orr.w	r2, r2, #16
 8006666:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006668:	06da      	lsls	r2, r3, #27
 800666a:	d503      	bpl.n	8006674 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800666c:	6962      	ldr	r2, [r4, #20]
 800666e:	f042 0220 	orr.w	r2, r2, #32
 8006672:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006674:	0698      	lsls	r0, r3, #26
 8006676:	d503      	bpl.n	8006680 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006678:	6962      	ldr	r2, [r4, #20]
 800667a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800667e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006680:	0659      	lsls	r1, r3, #25
 8006682:	d503      	bpl.n	800668c <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006684:	6962      	ldr	r2, [r4, #20]
 8006686:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800668a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800668c:	061a      	lsls	r2, r3, #24
 800668e:	d503      	bpl.n	8006698 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006690:	6962      	ldr	r2, [r4, #20]
 8006692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006696:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006698:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800669c:	d003      	beq.n	80066a6 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066a4:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80066a6:	6963      	ldr	r3, [r4, #20]
 80066a8:	b113      	cbz	r3, 80066b0 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff ff8e 	bl	80065cc <HAL_DSI_ErrorCallback>
}
 80066b0:	bd10      	pop	{r4, pc}

080066b2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80066b2:	7c02      	ldrb	r2, [r0, #16]
{
 80066b4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80066b6:	2a01      	cmp	r2, #1
 80066b8:	d00a      	beq.n	80066d0 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80066ba:	6802      	ldr	r2, [r0, #0]
 80066bc:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80066be:	f020 0003 	bic.w	r0, r0, #3
 80066c2:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80066c4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80066c6:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80066c8:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80066ca:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80066cc:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80066ce:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80066d0:	2002      	movs	r0, #2
}
 80066d2:	4770      	bx	lr

080066d4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80066d4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80066d6:	7c03      	ldrb	r3, [r0, #16]
{
 80066d8:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d069      	beq.n	80067b2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80066de:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80066e0:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80066e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80066ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80066f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	f022 0203 	bic.w	r2, r2, #3
 8006708:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	4302      	orrs	r2, r0
 800670e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	f022 0207 	bic.w	r2, r2, #7
 8006716:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006718:	6958      	ldr	r0, [r3, #20]
 800671a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800671e:	432a      	orrs	r2, r5
 8006720:	694d      	ldr	r5, [r1, #20]
 8006722:	432a      	orrs	r2, r5
 8006724:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006726:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006728:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	f022 020f 	bic.w	r2, r2, #15
 8006730:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	4302      	orrs	r2, r0
 8006736:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006738:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800673c:	f022 020e 	bic.w	r2, r2, #14
 8006740:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006744:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006748:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800674c:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800674e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006752:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006754:	0c12      	lsrs	r2, r2, #16
 8006756:	0412      	lsls	r2, r2, #16
 8006758:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800675a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800675c:	4302      	orrs	r2, r0
 800675e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006760:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006764:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006768:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800676c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006770:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006774:	432a      	orrs	r2, r5
 8006776:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006778:	432a      	orrs	r2, r5
 800677a:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800677c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800677e:	432a      	orrs	r2, r5
 8006780:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006782:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006784:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006788:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006790:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006792:	430a      	orrs	r2, r1
 8006794:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006796:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80067a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067a6:	f042 0202 	orr.w	r2, r2, #2
 80067aa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80067ae:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80067b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80067b2:	2002      	movs	r0, #2
 80067b4:	e7fc      	b.n	80067b0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080067b8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80067b8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80067ba:	7c03      	ldrb	r3, [r0, #16]
{
 80067bc:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d029      	beq.n	8006816 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	4b15      	ldr	r3, [pc, #84]	@ (800681c <HAL_DSI_ConfigCommand+0x64>)
 80067c6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80067c8:	4023      	ands	r3, r4
 80067ca:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80067cc:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80067ce:	e9d1 3500 	ldrd	r3, r5, [r1]
 80067d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80067d4:	688d      	ldr	r5, [r1, #8]
 80067d6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80067d8:	68cd      	ldr	r5, [r1, #12]
 80067da:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80067dc:	690d      	ldr	r5, [r1, #16]
 80067de:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80067e0:	694d      	ldr	r5, [r1, #20]
 80067e2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80067e4:	698d      	ldr	r5, [r1, #24]
 80067e6:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80067e8:	69cd      	ldr	r5, [r1, #28]
 80067ea:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80067ec:	6a0d      	ldr	r5, [r1, #32]
 80067ee:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80067f0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80067f2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80067f4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80067f6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80067f8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80067fa:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80067fc:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80067fe:	4323      	orrs	r3, r4
 8006800:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006802:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006804:	f023 0302 	bic.w	r3, r3, #2
 8006808:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800680a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800680c:	430b      	orrs	r3, r1
 800680e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006810:	2000      	movs	r0, #0
 8006812:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006814:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006816:	2002      	movs	r0, #2
 8006818:	e7fc      	b.n	8006814 <HAL_DSI_ConfigCommand+0x5c>
 800681a:	bf00      	nop
 800681c:	fef080ff 	.word	0xfef080ff

08006820 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006820:	7c02      	ldrb	r2, [r0, #16]
{
 8006822:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006824:	2a01      	cmp	r2, #1
 8006826:	d00a      	beq.n	800683e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006828:	6802      	ldr	r2, [r0, #0]
 800682a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800682c:	f020 001f 	bic.w	r0, r0, #31
 8006830:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006832:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006834:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006836:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006838:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800683a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800683c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800683e:	2002      	movs	r0, #2
}
 8006840:	4770      	bx	lr

08006842 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006842:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006844:	7c03      	ldrb	r3, [r0, #16]
{
 8006846:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006848:	2b01      	cmp	r3, #1
 800684a:	d034      	beq.n	80068b6 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800684c:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006850:	4298      	cmp	r0, r3
 8006852:	bf38      	it	cc
 8006854:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800685c:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006860:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006864:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006868:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800686c:	4302      	orrs	r2, r0
 800686e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006872:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006876:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800687a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800687e:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006882:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006886:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006888:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800688c:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800688e:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006890:	432a      	orrs	r2, r5
 8006892:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006894:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006896:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800689a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800689e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80068a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80068a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80068aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80068b2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80068b4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80068b6:	2002      	movs	r0, #2
 80068b8:	e7fc      	b.n	80068b4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080068bc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80068bc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068be:	7c03      	ldrb	r3, [r0, #16]
{
 80068c0:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d05b      	beq.n	800697e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80068c6:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80068c8:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80068ca:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80068cc:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80068ce:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80068d2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80068da:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80068dc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80068de:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80068e0:	b292      	uxth	r2, r2
 80068e2:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80068e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80068e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068ea:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80068ec:	4a25      	ldr	r2, [pc, #148]	@ (8006984 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80068ee:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80068f0:	4010      	ands	r0, r2
 80068f2:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80068f4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80068f6:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80068f8:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80068fa:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80068fc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80068fe:	4010      	ands	r0, r2
 8006900:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006902:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006904:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006906:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006908:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800690a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800690e:	4010      	ands	r0, r2
 8006910:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006914:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006918:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800691a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800691c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006920:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006924:	4010      	ands	r0, r2
 8006926:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800692a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800692e:	4328      	orrs	r0, r5
 8006930:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006934:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006938:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800693c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006940:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006944:	698d      	ldr	r5, [r1, #24]
 8006946:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006948:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800694a:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800694c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006950:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006954:	4010      	ands	r0, r2
 8006956:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800695a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800695e:	4328      	orrs	r0, r5
 8006960:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006964:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006968:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800696a:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800696c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006970:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006974:	430a      	orrs	r2, r1
 8006976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800697a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800697c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800697e:	2002      	movs	r0, #2
 8006980:	e7fc      	b.n	800697c <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006982:	bf00      	nop
 8006984:	ffff0000 	.word	0xffff0000

08006988 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006988:	7c03      	ldrb	r3, [r0, #16]
{
 800698a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800698c:	2b01      	cmp	r3, #1
 800698e:	d01c      	beq.n	80069ca <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006990:	6802      	ldr	r2, [r0, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	6851      	ldr	r1, [r2, #4]
 8006998:	f041 0101 	orr.w	r1, r1, #1
 800699c:	6051      	str	r1, [r2, #4]
 800699e:	6851      	ldr	r1, [r2, #4]
 80069a0:	f001 0101 	and.w	r1, r1, #1
 80069a4:	9100      	str	r1, [sp, #0]
 80069a6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80069ae:	f041 0108 	orr.w	r1, r1, #8
 80069b2:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80069b6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069ba:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80069bc:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80069be:	f002 0208 	and.w	r2, r2, #8
 80069c2:	9201      	str	r2, [sp, #4]
 80069c4:	9a01      	ldr	r2, [sp, #4]
}
 80069c6:	b002      	add	sp, #8
 80069c8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80069ca:	2002      	movs	r0, #2
 80069cc:	e7fb      	b.n	80069c6 <HAL_DSI_Start+0x3e>

080069ce <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ce:	7c02      	ldrb	r2, [r0, #16]
{
 80069d0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80069d2:	2a01      	cmp	r2, #1
 80069d4:	d009      	beq.n	80069ea <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80069d6:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069d8:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80069da:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 80069de:	f042 0204 	orr.w	r2, r2, #4
 80069e2:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 80069e6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80069e8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80069ea:	2002      	movs	r0, #2
}
 80069ec:	4770      	bx	lr

080069ee <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80069ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80069f0:	7c05      	ldrb	r5, [r0, #16]
{
 80069f2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80069f4:	2d01      	cmp	r5, #1
 80069f6:	d009      	beq.n	8006a0c <HAL_DSI_ShortWrite+0x1e>
 80069f8:	2501      	movs	r5, #1
 80069fa:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80069fc:	9d06      	ldr	r5, [sp, #24]
 80069fe:	9500      	str	r5, [sp, #0]
 8006a00:	f7ff fc6c 	bl	80062dc <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a04:	2300      	movs	r3, #0
 8006a06:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006a08:	b003      	add	sp, #12
 8006a0a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	e7fb      	b.n	8006a08 <HAL_DSI_ShortWrite+0x1a>

08006a10 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8006a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a16:	7c03      	ldrb	r3, [r0, #16]
{
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006a1c:	2b01      	cmp	r3, #1
{
 8006a1e:	4615      	mov	r5, r2
 8006a20:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006a24:	d052      	beq.n	8006acc <HAL_DSI_LongWrite+0xbc>
 8006a26:	2301      	movs	r3, #1
 8006a28:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a2a:	f7ff fa61 	bl	8005ef0 <HAL_GetTick>
 8006a2e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006a34:	f013 0a01 	ands.w	sl, r3, #1
 8006a38:	d019      	beq.n	8006a6e <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006a3a:	2c03      	cmp	r4, #3
 8006a3c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006a3e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006a42:	bf28      	it	cs
 8006a44:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006a46:	4283      	cmp	r3, r0
 8006a48:	d11d      	bne.n	8006a86 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006a4a:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006a4c:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006a4e:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006a52:	bb10      	cbnz	r0, 8006a9a <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006a54:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006a56:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006a5a:	0223      	lsls	r3, r4, #8
 8006a5c:	0224      	lsls	r4, r4, #8
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006a64:	431d      	orrs	r5, r3
 8006a66:	4325      	orrs	r5, r4
 8006a68:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a6a:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006a6c:	e009      	b.n	8006a82 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006a6e:	f7ff fa3f 	bl	8005ef0 <HAL_GetTick>
 8006a72:	eba0 000b 	sub.w	r0, r0, fp
 8006a76:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006a7a:	d9d9      	bls.n	8006a30 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006a7c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006a7e:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006a86:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006a90:	fa01 f10c 	lsl.w	r1, r1, ip
 8006a94:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006a98:	e7d5      	b.n	8006a46 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006a9a:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006a9c:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006aa0:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006aa2:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006aa4:	bf28      	it	cs
 8006aa6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006aaa:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006aae:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006ab2:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006ab4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006ab8:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006aba:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006abe:	d1f4      	bne.n	8006aaa <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006ac0:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006ac4:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006ac6:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006aca:	e7c2      	b.n	8006a52 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006acc:	2002      	movs	r0, #2
 8006ace:	e7d8      	b.n	8006a82 <HAL_DSI_LongWrite+0x72>

08006ad0 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ad6:	7c03      	ldrb	r3, [r0, #16]
{
 8006ad8:	4605      	mov	r5, r0
 8006ada:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006adc:	2b01      	cmp	r3, #1
{
 8006ade:	4617      	mov	r7, r2
 8006ae0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006ae4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006ae8:	d06f      	beq.n	8006bca <HAL_DSI_Read+0xfa>
 8006aea:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006aec:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006aee:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006af0:	d90d      	bls.n	8006b0e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006af2:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006af6:	2237      	movs	r2, #55	@ 0x37
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	b2f3      	uxtb	r3, r6
 8006afc:	f7ff fbee 	bl	80062dc <DSI_ShortWrite.constprop.0>
 8006b00:	b128      	cbz	r0, 8006b0e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006b02:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006b04:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006b06:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006b08:	b003      	add	sp, #12
 8006b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006b0e:	f1b9 0f06 	cmp.w	r9, #6
 8006b12:	d10f      	bne.n	8006b34 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006b16:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006b1e:	f043 0306 	orr.w	r3, r3, #6
 8006b22:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006b24:	f7ff f9e4 	bl	8005ef0 <HAL_GetTick>
 8006b28:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	dc27      	bgt.n	8006b7e <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006b2e:	2000      	movs	r0, #0
 8006b30:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006b32:	e7e9      	b.n	8006b08 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006b34:	f1b9 0f04 	cmp.w	r9, #4
 8006b38:	d105      	bne.n	8006b46 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b3a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006b3c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b3e:	f044 0404 	orr.w	r4, r4, #4
 8006b42:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006b44:	e7ee      	b.n	8006b24 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006b46:	f1b9 0f14 	cmp.w	r9, #20
 8006b4a:	d108      	bne.n	8006b5e <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006b4c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b50:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006b52:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b54:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006b58:	f044 0414 	orr.w	r4, r4, #20
 8006b5c:	e7f1      	b.n	8006b42 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006b5e:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006b62:	d1ce      	bne.n	8006b02 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006b64:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b68:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006b6a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006b70:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b74:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006b78:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006b7c:	e7e1      	b.n	8006b42 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006b7e:	682a      	ldr	r2, [r5, #0]
 8006b80:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006b82:	f013 0310 	ands.w	r3, r3, #16
 8006b86:	d10d      	bne.n	8006ba4 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006b88:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006b8a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	bf28      	it	cs
 8006b90:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006b92:	00d9      	lsls	r1, r3, #3
 8006b94:	fa20 f101 	lsr.w	r1, r0, r1
 8006b98:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1f8      	bne.n	8006b92 <HAL_DSI_Read+0xc2>
        pdata++;
 8006ba0:	4417      	add	r7, r2
        datasize--;
 8006ba2:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006ba4:	f7ff f9a4 	bl	8005ef0 <HAL_GetTick>
 8006ba8:	1b00      	subs	r0, r0, r4
 8006baa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006bae:	d903      	bls.n	8006bb8 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006bb0:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006bb2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006bb4:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006bb6:	e7a7      	b.n	8006b08 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006bbc:	0652      	lsls	r2, r2, #25
 8006bbe:	d4b4      	bmi.n	8006b2a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bc4:	069b      	lsls	r3, r3, #26
 8006bc6:	d49c      	bmi.n	8006b02 <HAL_DSI_Read+0x32>
 8006bc8:	e7af      	b.n	8006b2a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006bca:	2002      	movs	r0, #2
 8006bcc:	e79c      	b.n	8006b08 <HAL_DSI_Read+0x38>

08006bce <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bce:	7c02      	ldrb	r2, [r0, #16]
{
 8006bd0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006bd2:	2a01      	cmp	r2, #1
 8006bd4:	d00f      	beq.n	8006bf6 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006bd6:	6802      	ldr	r2, [r0, #0]
 8006bd8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006bdc:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006be0:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006be4:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006be8:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bec:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006bee:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006bf2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006bf4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006bf6:	2002      	movs	r0, #2
}
 8006bf8:	4770      	bx	lr
	...

08006bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006c00:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c02:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8006dc8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c06:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c0a:	680a      	ldr	r2, [r1, #0]
 8006c0c:	fa32 f503 	lsrs.w	r5, r2, r3
 8006c10:	d102      	bne.n	8006c18 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006c12:	b003      	add	sp, #12
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c18:	2501      	movs	r5, #1
 8006c1a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006c1e:	ea18 0202 	ands.w	r2, r8, r2
 8006c22:	f000 80bb 	beq.w	8006d9c <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c26:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c28:	2703      	movs	r7, #3
 8006c2a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c2e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c32:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c36:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c38:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c3c:	2f01      	cmp	r7, #1
 8006c3e:	d834      	bhi.n	8006caa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006c40:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c42:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c46:	68cf      	ldr	r7, [r1, #12]
 8006c48:	fa07 f70e 	lsl.w	r7, r7, lr
 8006c4c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006c50:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006c52:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c54:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c58:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006c5c:	409f      	lsls	r7, r3
 8006c5e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006c62:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006c64:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c66:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c68:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c6c:	688f      	ldr	r7, [r1, #8]
 8006c6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006c72:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006c76:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c78:	d119      	bne.n	8006cae <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006c7a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c7e:	f003 0a07 	and.w	sl, r3, #7
 8006c82:	f04f 0b0f 	mov.w	fp, #15
 8006c86:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006c8a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006c8e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c92:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006c96:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c9a:	690f      	ldr	r7, [r1, #16]
 8006c9c:	fa07 f70a 	lsl.w	r7, r7, sl
 8006ca0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006ca4:	f8c8 7020 	str.w	r7, [r8, #32]
 8006ca8:	e001      	b.n	8006cae <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006caa:	2d03      	cmp	r5, #3
 8006cac:	d1da      	bne.n	8006c64 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006cae:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cb0:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cb4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cb8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cbc:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006cc0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cc2:	d06b      	beq.n	8006d9c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006cc8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ccc:	f003 0c03 	and.w	ip, r3, #3
 8006cd0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cd4:	f045 0502 	orr.w	r5, r5, #2
 8006cd8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cdc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ce0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006ce4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006ce8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cec:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cf0:	f005 0502 	and.w	r5, r5, #2
 8006cf4:	9501      	str	r5, [sp, #4]
 8006cf6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006cf8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cfa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cfe:	4d31      	ldr	r5, [pc, #196]	@ (8006dc4 <HAL_GPIO_Init+0x1c8>)
 8006d00:	42a8      	cmp	r0, r5
 8006d02:	d04d      	beq.n	8006da0 <HAL_GPIO_Init+0x1a4>
 8006d04:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d08:	42a8      	cmp	r0, r5
 8006d0a:	d04b      	beq.n	8006da4 <HAL_GPIO_Init+0x1a8>
 8006d0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d10:	42a8      	cmp	r0, r5
 8006d12:	d049      	beq.n	8006da8 <HAL_GPIO_Init+0x1ac>
 8006d14:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d18:	42a8      	cmp	r0, r5
 8006d1a:	d047      	beq.n	8006dac <HAL_GPIO_Init+0x1b0>
 8006d1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d20:	42a8      	cmp	r0, r5
 8006d22:	d045      	beq.n	8006db0 <HAL_GPIO_Init+0x1b4>
 8006d24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d28:	42a8      	cmp	r0, r5
 8006d2a:	d043      	beq.n	8006db4 <HAL_GPIO_Init+0x1b8>
 8006d2c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d30:	42a8      	cmp	r0, r5
 8006d32:	d041      	beq.n	8006db8 <HAL_GPIO_Init+0x1bc>
 8006d34:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d38:	42a8      	cmp	r0, r5
 8006d3a:	d03f      	beq.n	8006dbc <HAL_GPIO_Init+0x1c0>
 8006d3c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d40:	42a8      	cmp	r0, r5
 8006d42:	d03d      	beq.n	8006dc0 <HAL_GPIO_Init+0x1c4>
 8006d44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d48:	42a8      	cmp	r0, r5
 8006d4a:	bf14      	ite	ne
 8006d4c:	250a      	movne	r5, #10
 8006d4e:	2509      	moveq	r5, #9
 8006d50:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d54:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d58:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d5c:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006d5e:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8006d62:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006d64:	bf0c      	ite	eq
 8006d66:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006d68:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d6a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8006d6e:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006d70:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8006d72:	bf0c      	ite	eq
 8006d74:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006d76:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d78:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8006d7c:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006d7e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006d82:	bf0c      	ite	eq
 8006d84:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006d86:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d88:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006d8a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8006d8e:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006d92:	bf54      	ite	pl
 8006d94:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006d96:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006d98:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	e734      	b.n	8006c0a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006da0:	2500      	movs	r5, #0
 8006da2:	e7d5      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006da4:	2501      	movs	r5, #1
 8006da6:	e7d3      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006da8:	2502      	movs	r5, #2
 8006daa:	e7d1      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006dac:	2503      	movs	r5, #3
 8006dae:	e7cf      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006db0:	2504      	movs	r5, #4
 8006db2:	e7cd      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006db4:	2505      	movs	r5, #5
 8006db6:	e7cb      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006db8:	2506      	movs	r5, #6
 8006dba:	e7c9      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006dbc:	2507      	movs	r5, #7
 8006dbe:	e7c7      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006dc0:	2508      	movs	r5, #8
 8006dc2:	e7c5      	b.n	8006d50 <HAL_GPIO_Init+0x154>
 8006dc4:	58020000 	.word	0x58020000
 8006dc8:	58024400 	.word	0x58024400

08006dcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006dd0:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006dd2:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006dd6:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006dda:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006dde:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8006de2:	fa31 f302 	lsrs.w	r3, r1, r2
 8006de6:	d101      	bne.n	8006dec <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006dec:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8006df0:	ea1c 0601 	ands.w	r6, ip, r1
 8006df4:	d070      	beq.n	8006ed8 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006df6:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006dfa:	f002 0703 	and.w	r7, r2, #3
 8006dfe:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8006e02:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e04:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006e08:	fa08 f907 	lsl.w	r9, r8, r7
 8006e0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006e10:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006e14:	4b3a      	ldr	r3, [pc, #232]	@ (8006f00 <HAL_GPIO_DeInit+0x134>)
 8006e16:	4298      	cmp	r0, r3
 8006e18:	d060      	beq.n	8006edc <HAL_GPIO_DeInit+0x110>
 8006e1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	d05e      	beq.n	8006ee0 <HAL_GPIO_DeInit+0x114>
 8006e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e26:	4298      	cmp	r0, r3
 8006e28:	d05c      	beq.n	8006ee4 <HAL_GPIO_DeInit+0x118>
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e2e:	4298      	cmp	r0, r3
 8006e30:	d05a      	beq.n	8006ee8 <HAL_GPIO_DeInit+0x11c>
 8006e32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e36:	4298      	cmp	r0, r3
 8006e38:	d058      	beq.n	8006eec <HAL_GPIO_DeInit+0x120>
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	d056      	beq.n	8006ef0 <HAL_GPIO_DeInit+0x124>
 8006e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e46:	4298      	cmp	r0, r3
 8006e48:	d054      	beq.n	8006ef4 <HAL_GPIO_DeInit+0x128>
 8006e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e4e:	4298      	cmp	r0, r3
 8006e50:	d052      	beq.n	8006ef8 <HAL_GPIO_DeInit+0x12c>
 8006e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e56:	4298      	cmp	r0, r3
 8006e58:	d050      	beq.n	8006efc <HAL_GPIO_DeInit+0x130>
 8006e5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bf0c      	ite	eq
 8006e62:	2309      	moveq	r3, #9
 8006e64:	230a      	movne	r3, #10
 8006e66:	40bb      	lsls	r3, r7
 8006e68:	4573      	cmp	r3, lr
 8006e6a:	d117      	bne.n	8006e9c <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006e6c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006e70:	ea23 0306 	bic.w	r3, r3, r6
 8006e74:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006e78:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006e7c:	ea23 0306 	bic.w	r3, r3, r6
 8006e80:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	ea23 0306 	bic.w	r3, r3, r6
 8006e8a:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	ea23 0306 	bic.w	r3, r3, r6
 8006e92:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006e94:	68ab      	ldr	r3, [r5, #8]
 8006e96:	ea23 0309 	bic.w	r3, r3, r9
 8006e9a:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006e9c:	0053      	lsls	r3, r2, #1
 8006e9e:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006ea0:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006ea2:	fa0b f303 	lsl.w	r3, fp, r3
 8006ea6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006eaa:	431d      	orrs	r5, r3
 8006eac:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006eae:	f002 0507 	and.w	r5, r2, #7
 8006eb2:	6a37      	ldr	r7, [r6, #32]
 8006eb4:	00ad      	lsls	r5, r5, #2
 8006eb6:	fa08 f505 	lsl.w	r5, r8, r5
 8006eba:	ea27 0705 	bic.w	r7, r7, r5
 8006ebe:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ec0:	68c5      	ldr	r5, [r0, #12]
 8006ec2:	ea25 0503 	bic.w	r5, r5, r3
 8006ec6:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ec8:	6845      	ldr	r5, [r0, #4]
 8006eca:	ea25 050c 	bic.w	r5, r5, ip
 8006ece:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ed0:	6885      	ldr	r5, [r0, #8]
 8006ed2:	ea25 0303 	bic.w	r3, r5, r3
 8006ed6:	6083      	str	r3, [r0, #8]
    position++;
 8006ed8:	3201      	adds	r2, #1
 8006eda:	e782      	b.n	8006de2 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006edc:	2300      	movs	r3, #0
 8006ede:	e7c2      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e7c0      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e7be      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e7bc      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006eec:	2304      	movs	r3, #4
 8006eee:	e7ba      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ef0:	2305      	movs	r3, #5
 8006ef2:	e7b8      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	e7b6      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006ef8:	2307      	movs	r3, #7
 8006efa:	e7b4      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006efc:	2308      	movs	r3, #8
 8006efe:	e7b2      	b.n	8006e66 <HAL_GPIO_DeInit+0x9a>
 8006f00:	58020000 	.word	0x58020000

08006f04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006f04:	6903      	ldr	r3, [r0, #16]
 8006f06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006f08:	bf14      	ite	ne
 8006f0a:	2001      	movne	r0, #1
 8006f0c:	2000      	moveq	r0, #0
 8006f0e:	4770      	bx	lr

08006f10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f10:	b10a      	cbz	r2, 8006f16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f12:	6181      	str	r1, [r0, #24]
  }
}
 8006f14:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f16:	0409      	lsls	r1, r1, #16
 8006f18:	e7fb      	b.n	8006f12 <HAL_GPIO_WritePin+0x2>

08006f1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f1a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f1c:	ea01 0203 	and.w	r2, r1, r3
 8006f20:	ea21 0103 	bic.w	r1, r1, r3
 8006f24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f28:	6181      	str	r1, [r0, #24]
}
 8006f2a:	4770      	bx	lr

08006f2c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006f2c:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <HAL_HSEM_FastTake+0x14>)
 8006f2e:	3020      	adds	r0, #32
 8006f30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <HAL_HSEM_FastTake+0x18>)
 8006f36:	1ac0      	subs	r0, r0, r3
 8006f38:	bf18      	it	ne
 8006f3a:	2001      	movne	r0, #1
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	58026400 	.word	0x58026400
 8006f44:	80000300 	.word	0x80000300

08006f48 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006f48:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8006f4c:	4b01      	ldr	r3, [pc, #4]	@ (8006f54 <HAL_HSEM_Release+0xc>)
 8006f4e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8006f52:	4770      	bx	lr
 8006f54:	58026400 	.word	0x58026400

08006f58 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f58:	6803      	ldr	r3, [r0, #0]
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	0791      	lsls	r1, r2, #30
 8006f5e:	d501      	bpl.n	8006f64 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f60:	2200      	movs	r2, #0
 8006f62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	07d2      	lsls	r2, r2, #31
 8006f68:	d403      	bmi.n	8006f72 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	f042 0201 	orr.w	r2, r2, #1
 8006f70:	619a      	str	r2, [r3, #24]
  }
}
 8006f72:	4770      	bx	lr

08006f74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f74:	b530      	push	{r4, r5, lr}
 8006f76:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f78:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f7c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f7e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f80:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f86:	4a05      	ldr	r2, [pc, #20]	@ (8006f9c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f88:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f8a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f92:	ea20 0002 	bic.w	r0, r0, r2
 8006f96:	4303      	orrs	r3, r0
 8006f98:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f9a:	bd30      	pop	{r4, r5, pc}
 8006f9c:	03ff63ff 	.word	0x03ff63ff

08006fa0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fa0:	6803      	ldr	r3, [r0, #0]
{
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fa6:	699c      	ldr	r4, [r3, #24]
{
 8006fa8:	4605      	mov	r5, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fae:	f014 0410 	ands.w	r4, r4, #16
 8006fb2:	d06f      	beq.n	8007094 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8006fb4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fb6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006fb8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fba:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	0690      	lsls	r0, r2, #26
 8006fc2:	d461      	bmi.n	8007088 <I2C_IsErrorOccurred+0xe8>
 8006fc4:	f1b8 0f00 	cmp.w	r8, #0
 8006fc8:	d035      	beq.n	8007036 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8006fca:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8006fce:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8006fd0:	682e      	ldr	r6, [r5, #0]
 8006fd2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fd4:	05d9      	lsls	r1, r3, #23
 8006fd6:	d505      	bpl.n	8006fe4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006fdc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8006fe0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fe2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fe4:	055a      	lsls	r2, r3, #21
 8006fe6:	d505      	bpl.n	8006ff4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006fec:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8006ff0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ff2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	d54f      	bpl.n	8007098 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ffc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007000:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007002:	4628      	mov	r0, r5
 8007004:	f7ff ffa8 	bl	8006f58 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007008:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800700a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800700c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007010:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007014:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800701e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007020:	4323      	orrs	r3, r4
 8007022:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007024:	2320      	movs	r3, #32
 8007026:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800702a:	2300      	movs	r3, #0
 800702c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007030:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007034:	e032      	b.n	800709c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007036:	1c7a      	adds	r2, r7, #1
 8007038:	d0c1      	beq.n	8006fbe <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800703a:	f7fe ff59 	bl	8005ef0 <HAL_GetTick>
 800703e:	1b80      	subs	r0, r0, r6
 8007040:	42b8      	cmp	r0, r7
 8007042:	d801      	bhi.n	8007048 <I2C_IsErrorOccurred+0xa8>
 8007044:	2f00      	cmp	r7, #0
 8007046:	d1b9      	bne.n	8006fbc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800704c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007050:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007052:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007054:	0400      	lsls	r0, r0, #16
 8007056:	d50a      	bpl.n	800706e <I2C_IsErrorOccurred+0xce>
 8007058:	0449      	lsls	r1, r1, #17
 800705a:	d408      	bmi.n	800706e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800705c:	2a20      	cmp	r2, #32
 800705e:	d006      	beq.n	800706e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007066:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007068:	f7fe ff42 	bl	8005ef0 <HAL_GetTick>
 800706c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	069b      	lsls	r3, r3, #26
 8007074:	d4a2      	bmi.n	8006fbc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007076:	f7fe ff3b 	bl	8005ef0 <HAL_GetTick>
 800707a:	1b80      	subs	r0, r0, r6
 800707c:	2819      	cmp	r0, #25
 800707e:	d9f6      	bls.n	800706e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007080:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007082:	f04f 0801 	mov.w	r8, #1
 8007086:	e799      	b.n	8006fbc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007088:	f1b8 0f00 	cmp.w	r8, #0
 800708c:	d19d      	bne.n	8006fca <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800708e:	2220      	movs	r2, #32
 8007090:	61da      	str	r2, [r3, #28]
 8007092:	e79a      	b.n	8006fca <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007094:	4620      	mov	r0, r4
 8007096:	e79b      	b.n	8006fd0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007098:	2800      	cmp	r0, #0
 800709a:	d1b2      	bne.n	8007002 <I2C_IsErrorOccurred+0x62>
}
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070a0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	079b      	lsls	r3, r3, #30
 80070ae:	d501      	bpl.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80070b0:	2000      	movs	r0, #0
 80070b2:	e01f      	b.n	80070f4 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b4:	4632      	mov	r2, r6
 80070b6:	4629      	mov	r1, r5
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7ff ff71 	bl	8006fa0 <I2C_IsErrorOccurred>
 80070be:	b9c0      	cbnz	r0, 80070f2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80070c0:	1c6a      	adds	r2, r5, #1
 80070c2:	d0f1      	beq.n	80070a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c4:	f7fe ff14 	bl	8005ef0 <HAL_GetTick>
 80070c8:	1b80      	subs	r0, r0, r6
 80070ca:	42a8      	cmp	r0, r5
 80070cc:	d801      	bhi.n	80070d2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d1ea      	bne.n	80070a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f013 0302 	ands.w	r3, r3, #2
 80070da:	d1e5      	bne.n	80070a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80070de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070e2:	f042 0220 	orr.w	r2, r2, #32
 80070e6:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	2220      	movs	r2, #32
 80070ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80070f2:	2001      	movs	r0, #1
}
 80070f4:	bd70      	pop	{r4, r5, r6, pc}

080070f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80070f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80070fe:	4604      	mov	r4, r0
 8007100:	460f      	mov	r7, r1
 8007102:	4616      	mov	r6, r2
 8007104:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	ea37 0303 	bics.w	r3, r7, r3
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	42b3      	cmp	r3, r6
 8007116:	d001      	beq.n	800711c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007118:	2000      	movs	r0, #0
 800711a:	e025      	b.n	8007168 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800711c:	4642      	mov	r2, r8
 800711e:	4629      	mov	r1, r5
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff ff3d 	bl	8006fa0 <I2C_IsErrorOccurred>
 8007126:	b9f0      	cbnz	r0, 8007166 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007128:	1c6b      	adds	r3, r5, #1
 800712a:	d0ec      	beq.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712c:	f7fe fee0 	bl	8005ef0 <HAL_GetTick>
 8007130:	eba0 0008 	sub.w	r0, r0, r8
 8007134:	42a8      	cmp	r0, r5
 8007136:	d801      	bhi.n	800713c <I2C_WaitOnFlagUntilTimeout+0x46>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d1e4      	bne.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	ea37 0303 	bics.w	r3, r7, r3
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	42b3      	cmp	r3, r6
 800714c:	d1db      	bne.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800714e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007150:	f043 0320 	orr.w	r3, r3, #32
 8007154:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007156:	2320      	movs	r3, #32
 8007158:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	2300      	movs	r3, #0
 800715e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007162:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007166:	2001      	movs	r0, #1
}
 8007168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800716c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	069b      	lsls	r3, r3, #26
 800717a:	d501      	bpl.n	8007180 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800717c:	2000      	movs	r0, #0
 800717e:	e01d      	b.n	80071bc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007180:	4632      	mov	r2, r6
 8007182:	4629      	mov	r1, r5
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff ff0b 	bl	8006fa0 <I2C_IsErrorOccurred>
 800718a:	b9b0      	cbnz	r0, 80071ba <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718c:	f7fe feb0 	bl	8005ef0 <HAL_GetTick>
 8007190:	1b80      	subs	r0, r0, r6
 8007192:	42a8      	cmp	r0, r5
 8007194:	d801      	bhi.n	800719a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007196:	2d00      	cmp	r5, #0
 8007198:	d1ec      	bne.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f013 0320 	ands.w	r3, r3, #32
 80071a2:	d1e7      	bne.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80071a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071aa:	f042 0220 	orr.w	r2, r2, #32
 80071ae:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	2220      	movs	r2, #32
 80071b2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80071ba:	2001      	movs	r0, #1
}
 80071bc:	bd70      	pop	{r4, r5, r6, pc}

080071be <HAL_I2C_MspInit>:
}
 80071be:	4770      	bx	lr

080071c0 <HAL_I2C_Init>:
{
 80071c0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80071c2:	4604      	mov	r4, r0
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d04e      	beq.n	8007266 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80071cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071d0:	b91b      	cbnz	r3, 80071da <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80071d2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80071d6:	f7ff fff2 	bl	80071be <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80071da:	2324      	movs	r3, #36	@ 0x24
 80071dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071ea:	6862      	ldr	r2, [r4, #4]
 80071ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80071f0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071f8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071fa:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071fe:	2901      	cmp	r1, #1
 8007200:	d106      	bne.n	8007210 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007206:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800720e:	e007      	b.n	8007220 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007210:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007214:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007216:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007218:	d1f6      	bne.n	8007208 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007220:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007222:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800722a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800722e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007236:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007238:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800723c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800723e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007240:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007244:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007246:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800724a:	430a      	orrs	r2, r1
 800724c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007256:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800725a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800725e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007264:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007266:	2001      	movs	r0, #1
 8007268:	e7fc      	b.n	8007264 <HAL_I2C_Init+0xa4>

0800726a <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800726a:	4770      	bx	lr

0800726c <HAL_I2C_DeInit>:
{
 800726c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800726e:	4604      	mov	r4, r0
 8007270:	b198      	cbz	r0, 800729a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007272:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007274:	2324      	movs	r3, #36	@ 0x24
 8007276:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007282:	f7ff fff2 	bl	800726a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007286:	2000      	movs	r0, #0
 8007288:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800728a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800728e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007292:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007294:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007298:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800729a:	2001      	movs	r0, #1
 800729c:	e7fc      	b.n	8007298 <HAL_I2C_DeInit+0x2c>
	...

080072a0 <HAL_I2C_Mem_Write>:
{
 80072a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80072aa:	4604      	mov	r4, r0
 80072ac:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ae:	2b20      	cmp	r3, #32
{
 80072b0:	4616      	mov	r6, r2
 80072b2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80072b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ba:	f040 80c6 	bne.w	800744a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80072be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072c0:	b113      	cbz	r3, 80072c8 <HAL_I2C_Mem_Write+0x28>
 80072c2:	f1ba 0f00 	cmp.w	sl, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072cc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80072ce:	2001      	movs	r0, #1
}
 80072d0:	b003      	add	sp, #12
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80072d6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f000 80b5 	beq.w	800744a <HAL_I2C_Mem_Write+0x1aa>
 80072e0:	f04f 0b01 	mov.w	fp, #1
 80072e4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80072e8:	f7fe fe02 	bl	8005ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ec:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80072ee:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072f0:	9000      	str	r0, [sp, #0]
 80072f2:	465a      	mov	r2, fp
 80072f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7ff fefc 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d1e5      	bne.n	80072ce <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007302:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007304:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007306:	fa5f f289 	uxtb.w	r2, r9
 800730a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800730c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007310:	2340      	movs	r3, #64	@ 0x40
 8007312:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007318:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800731a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800731c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800731e:	4b4c      	ldr	r3, [pc, #304]	@ (8007450 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007320:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800732a:	f7ff fe23 	bl	8006f74 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800732e:	462a      	mov	r2, r5
 8007330:	4641      	mov	r1, r8
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff feb4 	bl	80070a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007338:	bb18      	cbnz	r0, 8007382 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800733a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800733e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007340:	d115      	bne.n	800736e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007342:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	2200      	movs	r2, #0
 8007346:	2180      	movs	r1, #128	@ 0x80
 8007348:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800734a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800734c:	4643      	mov	r3, r8
 800734e:	9500      	str	r5, [sp, #0]
 8007350:	f7ff fed1 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 8007354:	b9a8      	cbnz	r0, 8007382 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007356:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2bff      	cmp	r3, #255	@ 0xff
 800735c:	d815      	bhi.n	800738a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800735e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007364:	b292      	uxth	r2, r2
 8007366:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	9000      	str	r0, [sp, #0]
 800736c:	e012      	b.n	8007394 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800736e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007370:	4641      	mov	r1, r8
 8007372:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007374:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007376:	462a      	mov	r2, r5
 8007378:	f7ff fe92 	bl	80070a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800737c:	b908      	cbnz	r0, 8007382 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	e7df      	b.n	8007342 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007382:	2300      	movs	r3, #0
 8007384:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007388:	e7a1      	b.n	80072ce <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800738a:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800738c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007390:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007392:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007394:	4639      	mov	r1, r7
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff fdec 	bl	8006f74 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800739c:	462a      	mov	r2, r5
 800739e:	4641      	mov	r1, r8
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7ff fe7d 	bl	80070a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d191      	bne.n	80072ce <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	f813 1b01 	ldrb.w	r1, [r3], #1
 80073b2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80073b4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80073b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80073b8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80073ba:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80073bc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80073be:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80073c0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80073c2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80073c6:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	b1b3      	cbz	r3, 80073fa <HAL_I2C_Mem_Write+0x15a>
 80073cc:	b9aa      	cbnz	r2, 80073fa <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ce:	4643      	mov	r3, r8
 80073d0:	2180      	movs	r1, #128	@ 0x80
 80073d2:	4620      	mov	r0, r4
 80073d4:	9500      	str	r5, [sp, #0]
 80073d6:	f7ff fe8e 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f47f af77 	bne.w	80072ce <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2bff      	cmp	r3, #255	@ 0xff
 80073e6:	d928      	bls.n	800743a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e8:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ee:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073f0:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073f2:	4639      	mov	r1, r7
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff fdbd 	bl	8006f74 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80073fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1cc      	bne.n	800739c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007402:	462a      	mov	r2, r5
 8007404:	4641      	mov	r1, r8
 8007406:	4620      	mov	r0, r4
 8007408:	f7ff feb0 	bl	800716c <I2C_WaitOnSTOPFlagUntilTimeout>
 800740c:	2800      	cmp	r0, #0
 800740e:	f47f af5e 	bne.w	80072ce <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	2120      	movs	r1, #32
 8007416:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800741e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007422:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800742c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007430:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007434:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007438:	e74a      	b.n	80072d0 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800743a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800743c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007440:	b292      	uxth	r2, r2
 8007442:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	9000      	str	r0, [sp, #0]
 8007448:	e7d3      	b.n	80073f2 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800744a:	2002      	movs	r0, #2
 800744c:	e740      	b.n	80072d0 <HAL_I2C_Mem_Write+0x30>
 800744e:	bf00      	nop
 8007450:	80002000 	.word	0x80002000

08007454 <HAL_I2C_Mem_Read>:
{
 8007454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800745a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800745e:	4604      	mov	r4, r0
 8007460:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007462:	2b20      	cmp	r3, #32
{
 8007464:	4616      	mov	r6, r2
 8007466:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800746a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800746e:	f040 80c9 	bne.w	8007604 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007472:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007474:	b113      	cbz	r3, 800747c <HAL_I2C_Mem_Read+0x28>
 8007476:	f1ba 0f00 	cmp.w	sl, #0
 800747a:	d106      	bne.n	800748a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800747c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007480:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007482:	2001      	movs	r0, #1
}
 8007484:	b003      	add	sp, #12
 8007486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800748a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800748e:	2b01      	cmp	r3, #1
 8007490:	f000 80b8 	beq.w	8007604 <HAL_I2C_Mem_Read+0x1b0>
 8007494:	f04f 0b01 	mov.w	fp, #1
 8007498:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800749c:	f7fe fd28 	bl	8005ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074a0:	2319      	movs	r3, #25
 80074a2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80074a4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074a6:	465a      	mov	r2, fp
 80074a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7ff fe22 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d1e4      	bne.n	8007482 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074b8:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80074ba:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074bc:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074be:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074c2:	2240      	movs	r2, #64	@ 0x40
 80074c4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80074c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ca:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074cc:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80074ce:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074d0:	4a4d      	ldr	r2, [pc, #308]	@ (8007608 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80074d2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074d6:	9200      	str	r2, [sp, #0]
 80074d8:	fa5f f289 	uxtb.w	r2, r9
 80074dc:	f7ff fd4a 	bl	8006f74 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e0:	462a      	mov	r2, r5
 80074e2:	4641      	mov	r1, r8
 80074e4:	4620      	mov	r0, r4
 80074e6:	f7ff fddb 	bl	80070a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80074ea:	bb20      	cbnz	r0, 8007536 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074ec:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074f0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074f2:	d116      	bne.n	8007522 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074f4:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80074f6:	2200      	movs	r2, #0
 80074f8:	2140      	movs	r1, #64	@ 0x40
 80074fa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074fc:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80074fe:	4643      	mov	r3, r8
 8007500:	9500      	str	r5, [sp, #0]
 8007502:	f7ff fdf8 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 8007506:	b9b0      	cbnz	r0, 8007536 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007508:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	2bff      	cmp	r3, #255	@ 0xff
 800750e:	4b3f      	ldr	r3, [pc, #252]	@ (800760c <HAL_I2C_Mem_Read+0x1b8>)
 8007510:	d815      	bhi.n	800753e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007512:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007514:	b292      	uxth	r2, r2
 8007516:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007520:	e012      	b.n	8007548 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007522:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007524:	4641      	mov	r1, r8
 8007526:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007528:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800752a:	462a      	mov	r2, r5
 800752c:	f7ff fdb8 	bl	80070a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007530:	b908      	cbnz	r0, 8007536 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	e7de      	b.n	80074f4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007536:	2300      	movs	r3, #0
 8007538:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800753c:	e7a1      	b.n	8007482 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800753e:	22ff      	movs	r2, #255	@ 0xff
 8007540:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007548:	4639      	mov	r1, r7
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fd12 	bl	8006f74 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007550:	4643      	mov	r3, r8
 8007552:	2200      	movs	r2, #0
 8007554:	2104      	movs	r1, #4
 8007556:	4620      	mov	r0, r4
 8007558:	9500      	str	r5, [sp, #0]
 800755a:	f7ff fdcc 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 800755e:	2800      	cmp	r0, #0
 8007560:	d18f      	bne.n	8007482 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007568:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800756a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800756c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800756e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007570:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007572:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007574:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007576:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007578:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800757a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800757c:	b29b      	uxth	r3, r3
 800757e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007580:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	b1b3      	cbz	r3, 80075b4 <HAL_I2C_Mem_Read+0x160>
 8007586:	b9aa      	cbnz	r2, 80075b4 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007588:	4643      	mov	r3, r8
 800758a:	2180      	movs	r1, #128	@ 0x80
 800758c:	4620      	mov	r0, r4
 800758e:	9500      	str	r5, [sp, #0]
 8007590:	f7ff fdb1 	bl	80070f6 <I2C_WaitOnFlagUntilTimeout>
 8007594:	2800      	cmp	r0, #0
 8007596:	f47f af74 	bne.w	8007482 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2bff      	cmp	r3, #255	@ 0xff
 80075a0:	d928      	bls.n	80075f4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a2:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075aa:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075ac:	4639      	mov	r1, r7
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7ff fce0 	bl	8006f74 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80075b4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1c9      	bne.n	8007550 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075bc:	462a      	mov	r2, r5
 80075be:	4641      	mov	r1, r8
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff fdd3 	bl	800716c <I2C_WaitOnSTOPFlagUntilTimeout>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f47f af5b 	bne.w	8007482 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	2120      	movs	r1, #32
 80075d0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80075d8:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80075dc:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80075e6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80075ea:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075ee:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80075f2:	e747      	b.n	8007484 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80075f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80075fa:	b292      	uxth	r2, r2
 80075fc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	9000      	str	r0, [sp, #0]
 8007602:	e7d3      	b.n	80075ac <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8007604:	2002      	movs	r0, #2
 8007606:	e73d      	b.n	8007484 <HAL_I2C_Mem_Read+0x30>
 8007608:	80002000 	.word	0x80002000
 800760c:	80002400 	.word	0x80002400

08007610 <HAL_I2C_GetState>:
  return hi2c->State;
 8007610:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8007614:	4770      	bx	lr

08007616 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007616:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8007618:	4770      	bx	lr

0800761a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800761a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800761c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007620:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007622:	2a20      	cmp	r2, #32
 8007624:	b2d4      	uxtb	r4, r2
 8007626:	d11c      	bne.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007628:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800762c:	2a01      	cmp	r2, #1
 800762e:	d018      	beq.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007630:	2224      	movs	r2, #36	@ 0x24
 8007632:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007636:	6802      	ldr	r2, [r0, #0]
 8007638:	6810      	ldr	r0, [r2, #0]
 800763a:	f020 0001 	bic.w	r0, r0, #1
 800763e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007640:	6810      	ldr	r0, [r2, #0]
 8007642:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8007646:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007648:	6810      	ldr	r0, [r2, #0]
 800764a:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800764c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800764e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007650:	6811      	ldr	r1, [r2, #0]
 8007652:	f041 0101 	orr.w	r1, r1, #1
 8007656:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007658:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800765c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007660:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007662:	2002      	movs	r0, #2
 8007664:	e7fc      	b.n	8007660 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007666:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007668:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800766c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800766e:	2a20      	cmp	r2, #32
 8007670:	b2d4      	uxtb	r4, r2
 8007672:	d11b      	bne.n	80076ac <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007674:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007678:	2a01      	cmp	r2, #1
 800767a:	d017      	beq.n	80076ac <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800767c:	2224      	movs	r2, #36	@ 0x24
 800767e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007682:	6802      	ldr	r2, [r0, #0]
 8007684:	6810      	ldr	r0, [r2, #0]
 8007686:	f020 0001 	bic.w	r0, r0, #1
 800768a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800768c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800768e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007692:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007696:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007698:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800769a:	6811      	ldr	r1, [r2, #0]
 800769c:	f041 0101 	orr.w	r1, r1, #1
 80076a0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80076a6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80076aa:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80076ac:	2002      	movs	r0, #2
 80076ae:	e7fc      	b.n	80076aa <HAL_I2CEx_ConfigDigitalFilter+0x44>

080076b0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80076b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80076b2:	2401      	movs	r4, #1
 80076b4:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80076b6:	2500      	movs	r5, #0
 80076b8:	194e      	adds	r6, r1, r5
 80076ba:	443d      	add	r5, r7
 80076bc:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80076be:	42be      	cmp	r6, r7
 80076c0:	d112      	bne.n	80076e8 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80076c2:	2c10      	cmp	r4, #16
 80076c4:	d108      	bne.n	80076d8 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80076c6:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80076c8:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 80076ca:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 80076cc:	601d      	str	r5, [r3, #0]
  p = 0;
 80076ce:	4623      	mov	r3, r4
  si = Huffsize[0];
 80076d0:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80076d2:	5cc8      	ldrb	r0, [r1, r3]
 80076d4:	b9d8      	cbnz	r0, 800770e <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80076d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 80076d8:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 80076da:	3401      	adds	r4, #1
 80076dc:	19ee      	adds	r6, r5, r7
 80076de:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80076e2:	d9e9      	bls.n	80076b8 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 80076e4:	2001      	movs	r0, #1
 80076e6:	e7f6      	b.n	80076d6 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 80076e8:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 80076ec:	e7e7      	b.n	80076be <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 80076ee:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80076f2:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80076f4:	5cc8      	ldrb	r0, [r1, r3]
 80076f6:	19dc      	adds	r4, r3, r7
 80076f8:	42a8      	cmp	r0, r5
 80076fa:	d0f8      	beq.n	80076ee <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 80076fc:	2d1f      	cmp	r5, #31
 80076fe:	d8f1      	bhi.n	80076e4 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007700:	fa06 f005 	lsl.w	r0, r6, r5
 8007704:	42a0      	cmp	r0, r4
 8007706:	d9ed      	bls.n	80076e4 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8007708:	0064      	lsls	r4, r4, #1
    si++;
 800770a:	3501      	adds	r5, #1
 800770c:	e7e1      	b.n	80076d2 <JPEG_Bits_To_SizeCodes+0x22>
 800770e:	1ae7      	subs	r7, r4, r3
 8007710:	e7f0      	b.n	80076f4 <JPEG_Bits_To_SizeCodes+0x44>

08007712 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007714:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8007718:	460d      	mov	r5, r1
 800771a:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800771c:	ab01      	add	r3, sp, #4
 800771e:	aa43      	add	r2, sp, #268	@ 0x10c
 8007720:	a902      	add	r1, sp, #8
 8007722:	f7ff ffc5 	bl	80076b0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007726:	b938      	cbnz	r0, 8007738 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8007728:	9e01      	ldr	r6, [sp, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	f104 010f 	add.w	r1, r4, #15
 8007730:	360f      	adds	r6, #15
 8007732:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007734:	42a1      	cmp	r1, r4
 8007736:	d102      	bne.n	800773e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007738:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800773c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800773e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007742:	2e0b      	cmp	r6, #11
 8007744:	d80a      	bhi.n	800775c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007746:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800774a:	f852 cb04 	ldr.w	ip, [r2], #4
 800774e:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007752:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007756:	3f01      	subs	r7, #1
 8007758:	55af      	strb	r7, [r5, r6]
      k++;
 800775a:	e7eb      	b.n	8007734 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800775c:	2001      	movs	r0, #1
 800775e:	e7eb      	b.n	8007738 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08007760 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007760:	4603      	mov	r3, r0
 8007762:	4608      	mov	r0, r1
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007766:	681c      	ldr	r4, [r3, #0]
{
 8007768:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800776a:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800776e:	429a      	cmp	r2, r3
 8007770:	d125      	bne.n	80077be <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007772:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007776:	a901      	add	r1, sp, #4
 8007778:	f7ff ffcb 	bl	8007712 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800777c:	b9e8      	cbnz	r0, 80077ba <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800777e:	aa01      	add	r2, sp, #4
 8007780:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007784:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007788:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800778a:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800778c:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800778e:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007790:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007792:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8007796:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007798:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800779a:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800779e:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80077a2:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077a4:	7b13      	ldrb	r3, [r2, #12]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077ac:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80077ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077b2:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80077b6:	42b4      	cmp	r4, r6
 80077b8:	d1e9      	bne.n	800778e <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80077ba:	b011      	add	sp, #68	@ 0x44
 80077bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80077be:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d102      	bne.n	80077cc <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80077c6:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 80077ca:	e7d4      	b.n	8007776 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80077cc:	2001      	movs	r0, #1
 80077ce:	e7f4      	b.n	80077ba <JPEG_Set_HuffDC_Mem+0x5a>

080077d0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80077d4:	6804      	ldr	r4, [r0, #0]
{
 80077d6:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 80077da:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80077dc:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d149      	bne.n	8007878 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80077e4:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80077e8:	466b      	mov	r3, sp
 80077ea:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 80077ee:	a901      	add	r1, sp, #4
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ff5d 	bl	80076b0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d13a      	bne.n	8007870 <JPEG_Set_HuffAC_Mem+0xa0>
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	460d      	mov	r5, r1
 80077fe:	f106 0c0f 	add.w	ip, r6, #15
 8007802:	4617      	mov	r7, r2
 8007804:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007806:	f04f 0e0a 	mov.w	lr, #10
 800780a:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800780c:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800780e:	4561      	cmp	r1, ip
 8007810:	d139      	bne.n	8007886 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007812:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007816:	a942      	add	r1, sp, #264	@ 0x108
 8007818:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800781c:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800781e:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007824:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007828:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800782c:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800782e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007832:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007834:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007838:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800783a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800783e:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007840:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007844:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007846:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800784a:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800784c:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800784e:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007852:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007856:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007858:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007862:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007868:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800786c:	42b4      	cmp	r4, r6
 800786e:	d1e7      	bne.n	8007840 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007870:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007878:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800787c:	429a      	cmp	r2, r3
 800787e:	d10f      	bne.n	80078a0 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007880:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007884:	e7b0      	b.n	80077e8 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007886:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800788a:	b15b      	cbz	r3, 80078a4 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800788c:	2bf0      	cmp	r3, #240	@ 0xf0
 800788e:	d015      	beq.n	80078bc <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007890:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007892:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007896:	3b01      	subs	r3, #1
 8007898:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800789c:	2ba1      	cmp	r3, #161	@ 0xa1
 800789e:	d902      	bls.n	80078a6 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80078a0:	2001      	movs	r0, #1
 80078a2:	e7e5      	b.n	8007870 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80078a4:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80078a6:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80078aa:	f857 8b04 	ldr.w	r8, [r7], #4
 80078ae:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80078b2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80078b6:	3a01      	subs	r2, #1
 80078b8:	54f2      	strb	r2, [r6, r3]
      k++;
 80078ba:	e7a8      	b.n	800780e <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 80078bc:	23a1      	movs	r3, #161	@ 0xa1
 80078be:	e7f2      	b.n	80078a6 <JPEG_Set_HuffAC_Mem+0xd6>

080078c0 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80078c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80078c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80078c6:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80078c8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80078ca:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80078cc:	f002 0203 	and.w	r2, r2, #3
 80078d0:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	bf0c      	ite	eq
 80078d6:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80078da:	f022 0208 	bicne.w	r2, r2, #8
 80078de:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80078e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ea:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80078ee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80078f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80078f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007902:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007906:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007910:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007912:	f002 020c 	and.w	r2, r2, #12
 8007916:	2a08      	cmp	r2, #8
 8007918:	d104      	bne.n	8007924 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800791a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800791c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007922:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007924:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007926:	f002 020c 	and.w	r2, r2, #12
 800792a:	2a0c      	cmp	r2, #12
 800792c:	d1f9      	bne.n	8007922 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800792e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007930:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007934:	e7f4      	b.n	8007920 <JPEG_Init_Process+0x60>
	...

08007938 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800793a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800793c:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800793e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007940:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007942:	42aa      	cmp	r2, r5
 8007944:	d313      	bcc.n	800796e <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007946:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007948:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800794a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800794c:	428b      	cmp	r3, r1
 800794e:	d30e      	bcc.n	800796e <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007950:	4f18      	ldr	r7, [pc, #96]	@ (80079b4 <JPEG_DMA_StartProcess+0x7c>)
 8007952:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007954:	4f18      	ldr	r7, [pc, #96]	@ (80079b8 <JPEG_DMA_StartProcess+0x80>)
 8007956:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007958:	4e18      	ldr	r6, [pc, #96]	@ (80079bc <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800795a:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800795c:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800795e:	4e18      	ldr	r6, [pc, #96]	@ (80079c0 <JPEG_DMA_StartProcess+0x88>)
 8007960:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007962:	b105      	cbz	r5, 8007966 <JPEG_DMA_StartProcess+0x2e>
 8007964:	b931      	cbnz	r1, 8007974 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007966:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007968:	f043 0304 	orr.w	r3, r3, #4
 800796c:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800796e:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007970:	b003      	add	sp, #12
 8007972:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007974:	fbb2 f6f5 	udiv	r6, r2, r5
 8007978:	fb05 2516 	mls	r5, r5, r6, r2
 800797c:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800797e:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007980:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007982:	fbb3 f2f1 	udiv	r2, r3, r1
 8007986:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800798a:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800798c:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800798e:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007990:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007992:	9500      	str	r5, [sp, #0]
 8007994:	69e2      	ldr	r2, [r4, #28]
 8007996:	f001 f848 	bl	8008a2a <HAL_MDMA_Start_IT>
 800799a:	2800      	cmp	r0, #0
 800799c:	d1e3      	bne.n	8007966 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	9500      	str	r5, [sp, #0]
 80079a2:	3240      	adds	r2, #64	@ 0x40
 80079a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80079a6:	69a1      	ldr	r1, [r4, #24]
 80079a8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80079aa:	f001 f83e 	bl	8008a2a <HAL_MDMA_Start_IT>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0de      	beq.n	8007970 <JPEG_DMA_StartProcess+0x38>
 80079b2:	e7d8      	b.n	8007966 <JPEG_DMA_StartProcess+0x2e>
 80079b4:	08007efb 	.word	0x08007efb
 80079b8:	08007df3 	.word	0x08007df3
 80079bc:	080083b9 	.word	0x080083b9
 80079c0:	080083ab 	.word	0x080083ab

080079c4 <HAL_JPEG_Init>:
{
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80079c6:	4605      	mov	r5, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f000 80f2 	beq.w	8007bb2 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80079ce:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80079d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80079d6:	b91b      	cbnz	r3, 80079e0 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 80079d8:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 80079dc:	f7f9 fb58 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 80079e0:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80079e2:	2302      	movs	r3, #2
 80079e4:	4a86      	ldr	r2, [pc, #536]	@ (8007c00 <HAL_JPEG_Init+0x23c>)
 80079e6:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 80079ea:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 80079ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80079f0:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a04:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007a08:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007a0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a10:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007a12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a18:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007a1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a20:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007a22:	4b78      	ldr	r3, [pc, #480]	@ (8007c04 <HAL_JPEG_Init+0x240>)
 8007a24:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007a26:	4b78      	ldr	r3, [pc, #480]	@ (8007c08 <HAL_JPEG_Init+0x244>)
 8007a28:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007a2a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007a2c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a30:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007a32:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a34:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a36:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a38:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007a3c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007a3e:	4333      	orrs	r3, r6
 8007a40:	7c56      	ldrb	r6, [r2, #17]
 8007a42:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a46:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007a4a:	4281      	cmp	r1, r0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c0c <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007a50:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007a54:	4a6e      	ldr	r2, [pc, #440]	@ (8007c10 <HAL_JPEG_Init+0x24c>)
 8007a56:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a5a:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007a5e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007a62:	4610      	mov	r0, r2
 8007a64:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a66:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007a6a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007a6e:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a72:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007a74:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a76:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a7a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a7c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007a80:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007a84:	ea43 030c 	orr.w	r3, r3, ip
 8007a88:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007a8c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a90:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007a94:	42be      	cmp	r6, r7
 8007a96:	d1ec      	bne.n	8007a72 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007a98:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007a9c:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007aa0:	0c1b      	lsrs	r3, r3, #16
 8007aa2:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007aa4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007aa8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007aac:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007ab0:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007ab4:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ab6:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007aba:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007abc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007ac0:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007ac4:	4333      	orrs	r3, r6
 8007ac6:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007aca:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ace:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007ad2:	4281      	cmp	r1, r0
 8007ad4:	d1ec      	bne.n	8007ab0 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007ad6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007ada:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007ade:	4a4d      	ldr	r2, [pc, #308]	@ (8007c14 <HAL_JPEG_Init+0x250>)
 8007ae0:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007ae4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007ae6:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007aea:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007aee:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007af2:	4013      	ands	r3, r2
  *address = value;
 8007af4:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007af8:	2301      	movs	r3, #1
 8007afa:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007afe:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007b02:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007b06:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007b0a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007b0e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007b10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007b14:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007b18:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b1c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007b1e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007b22:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007b26:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c18 <HAL_JPEG_Init+0x254>)
 8007b2c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007b30:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007b34:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007b38:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b3c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007b3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007b42:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007b46:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007b4a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007b4c:	4a33      	ldr	r2, [pc, #204]	@ (8007c1c <HAL_JPEG_Init+0x258>)
 8007b4e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007b52:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007b56:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b5a:	4b31      	ldr	r3, [pc, #196]	@ (8007c20 <HAL_JPEG_Init+0x25c>)
 8007b5c:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007b60:	4b30      	ldr	r3, [pc, #192]	@ (8007c24 <HAL_JPEG_Init+0x260>)
 8007b62:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007b66:	4b30      	ldr	r3, [pc, #192]	@ (8007c28 <HAL_JPEG_Init+0x264>)
 8007b68:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007b6c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007b70:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007b76:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007b7a:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007b7e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b80:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007b84:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007b86:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007b8a:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007b8e:	4333      	orrs	r3, r6
 8007b90:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007b94:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b98:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007b9c:	4281      	cmp	r1, r0
 8007b9e:	d1ec      	bne.n	8007b7a <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007ba0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007ba4:	491a      	ldr	r1, [pc, #104]	@ (8007c10 <HAL_JPEG_Init+0x24c>)
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f7ff fe12 	bl	80077d0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007bac:	b118      	cbz	r0, 8007bb6 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007bb2:	2001      	movs	r0, #1
}
 8007bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007bb6:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007bba:	4918      	ldr	r1, [pc, #96]	@ (8007c1c <HAL_JPEG_Init+0x258>)
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f7ff fe07 	bl	80077d0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1f3      	bne.n	8007bae <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007bc6:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007bca:	490d      	ldr	r1, [pc, #52]	@ (8007c00 <HAL_JPEG_Init+0x23c>)
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff fdc7 	bl	8007760 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1eb      	bne.n	8007bae <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007bd6:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007bda:	4914      	ldr	r1, [pc, #80]	@ (8007c2c <HAL_JPEG_Init+0x268>)
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f7ff fdbf 	bl	8007760 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d1e3      	bne.n	8007bae <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bec:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007bee:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007bf0:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007bf2:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007bf4:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007bf8:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007bfa:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007bfc:	e7da      	b.n	8007bb4 <HAL_JPEG_Init+0x1f0>
 8007bfe:	bf00      	nop
 8007c00:	08024f7c 	.word	0x08024f7c
 8007c04:	08024d7c 	.word	0x08024d7c
 8007c08:	08024d3c 	.word	0x08024d3c
 8007c0c:	0b0a0908 	.word	0x0b0a0908
 8007c10:	08024eae 	.word	0x08024eae
 8007c14:	ffff0000 	.word	0xffff0000
 8007c18:	09080706 	.word	0x09080706
 8007c1c:	08024dfc 	.word	0x08024dfc
 8007c20:	01000404 	.word	0x01000404
 8007c24:	05070403 	.word	0x05070403
 8007c28:	04040201 	.word	0x04040201
 8007c2c:	08024f60 	.word	0x08024f60

08007c30 <HAL_JPEG_GetInfo>:
{
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d06f      	beq.n	8007d18 <HAL_JPEG_GetInfo+0xe8>
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d06d      	beq.n	8007d18 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007c3c:	6804      	ldr	r4, [r0, #0]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d047      	beq.n	8007cd8 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	f013 0303 	ands.w	r3, r3, #3
 8007c4e:	d005      	beq.n	8007c5c <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d15e      	bne.n	8007d18 <HAL_JPEG_GetInfo+0xe8>
 8007c5a:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007c5c:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007c5e:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007c60:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007c64:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007c66:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007c68:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007c6a:	68e2      	ldr	r2, [r4, #12]
 8007c6c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007c70:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007c72:	d13c      	bne.n	8007cee <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007c74:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007c76:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007c78:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007c7c:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007c7e:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007c80:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007c82:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007c86:	d129      	bne.n	8007cdc <HAL_JPEG_GetInfo+0xac>
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f013 0f0f 	tst.w	r3, #15
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007c96:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	3450      	adds	r4, #80	@ 0x50
 8007c9c:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007d1c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007ca0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007ca2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007ca6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007caa:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007cae:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007cb2:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007cb4:	fa29 f206 	lsr.w	r2, r9, r6
 8007cb8:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007cba:	2a01      	cmp	r2, #1
 8007cbc:	d119      	bne.n	8007cf2 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007cbe:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007cc0:	3608      	adds	r6, #8
 8007cc2:	3701      	adds	r7, #1
 8007cc4:	2e20      	cmp	r6, #32
 8007cc6:	d1f5      	bne.n	8007cb4 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007cc8:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007cca:	2d40      	cmp	r5, #64	@ 0x40
 8007ccc:	d1ed      	bne.n	8007caa <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007cce:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007cd0:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007cd2:	610b      	str	r3, [r1, #16]
}
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	2310      	movs	r3, #16
 8007cda:	e7bf      	b.n	8007c5c <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007cdc:	2d03      	cmp	r5, #3
 8007cde:	d106      	bne.n	8007cee <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f013 0f0f 	tst.w	r3, #15
 8007ce6:	bf0c      	ite	eq
 8007ce8:	2301      	moveq	r3, #1
 8007cea:	2300      	movne	r3, #0
 8007cec:	e7d3      	b.n	8007c96 <HAL_JPEG_GetInfo+0x66>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e7d1      	b.n	8007c96 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007cf2:	fb0e fb02 	mul.w	fp, lr, r2
 8007cf6:	f897 a000 	ldrb.w	sl, [r7]
 8007cfa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cfc:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007d00:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007d04:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007d06:	bf8b      	itete	hi
 8007d08:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007d0c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007d10:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007d12:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007d16:	e7d3      	b.n	8007cc0 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007d18:	2001      	movs	r0, #1
 8007d1a:	e7db      	b.n	8007cd4 <HAL_JPEG_GetInfo+0xa4>
 8007d1c:	08024dbc 	.word	0x08024dbc

08007d20 <HAL_JPEG_Decode_DMA>:
{
 8007d20:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007d22:	4604      	mov	r4, r0
 8007d24:	b348      	cbz	r0, 8007d7a <HAL_JPEG_Decode_DMA+0x5a>
 8007d26:	b341      	cbz	r1, 8007d7a <HAL_JPEG_Decode_DMA+0x5a>
 8007d28:	b33b      	cbz	r3, 8007d7a <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007d2a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007d2e:	2d01      	cmp	r5, #1
 8007d30:	d028      	beq.n	8007d84 <HAL_JPEG_Decode_DMA+0x64>
 8007d32:	2501      	movs	r5, #1
 8007d34:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007d38:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8007d3c:	2d01      	cmp	r5, #1
 8007d3e:	d11e      	bne.n	8007d7e <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007d40:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8007d42:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007d44:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007d48:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007d4a:	f025 050f 	bic.w	r5, r5, #15
 8007d4e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007d50:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007d52:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007d56:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007d5a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007d5c:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007d5e:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007d60:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8007d62:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8007d64:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007d66:	f7ff fdab 	bl	80078c0 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007d6a:	f7ff fde5 	bl	8007938 <JPEG_DMA_StartProcess>
 8007d6e:	b128      	cbz	r0, 8007d7c <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d70:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007d72:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d76:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007d7a:	2001      	movs	r0, #1
}
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007d84:	2002      	movs	r0, #2
 8007d86:	e7f9      	b.n	8007d7c <HAL_JPEG_Decode_DMA+0x5c>

08007d88 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007d88:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007d8a:	f003 030c 	and.w	r3, r3, #12
 8007d8e:	2b0c      	cmp	r3, #12
 8007d90:	d10d      	bne.n	8007dae <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007d92:	07cb      	lsls	r3, r1, #31
 8007d94:	d503      	bpl.n	8007d9e <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007d96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007d98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d9c:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007d9e:	0789      	lsls	r1, r1, #30
 8007da0:	d503      	bpl.n	8007daa <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007da2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007da8:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8007daa:	2000      	movs	r0, #0
 8007dac:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007dae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007db0:	f003 030c 	and.w	r3, r3, #12
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d1f8      	bne.n	8007daa <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007db8:	f011 0301 	ands.w	r3, r1, #1
 8007dbc:	d004      	beq.n	8007dc8 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007dbe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007dc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007dc4:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8007dc6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007dc8:	078a      	lsls	r2, r1, #30
 8007dca:	d505      	bpl.n	8007dd8 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007dcc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8007dce:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007dd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dd6:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8007dd8:	6801      	ldr	r1, [r0, #0]
 8007dda:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007ddc:	ea22 0303 	bic.w	r3, r2, r3
 8007de0:	630b      	str	r3, [r1, #48]	@ 0x30
 8007de2:	e7e2      	b.n	8007daa <HAL_JPEG_Pause+0x22>

08007de4 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007de4:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007de6:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007de8:	4770      	bx	lr

08007dea <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007dea:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007dec:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007dee:	4770      	bx	lr

08007df0 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8007df0:	4770      	bx	lr

08007df2 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007df2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8007df4:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007df6:	6803      	ldr	r3, [r0, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007e00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e02:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007e0e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007e10:	f043 0304 	orr.w	r3, r3, #4
 8007e14:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8007e16:	f7fa fc2b 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8007e1a:	bd08      	pop	{r3, pc}

08007e1c <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8007e1c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8007e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8007e24:	b922      	cbnz	r2, 8007e30 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8007e26:	2101      	movs	r1, #1
 8007e28:	f7ff ffae 	bl	8007d88 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	e004      	b.n	8007e3a <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007e34:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007e36:	d924      	bls.n	8007e82 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007e38:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8007e3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e3c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8007e40:	d11e      	bne.n	8007e80 <JPEG_ReadInputData+0x64>
 8007e42:	b1ea      	cbz	r2, 8007e80 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8007e44:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8007e48:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8007e4a:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8007e4e:	d827      	bhi.n	8007ea0 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007e50:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8007e52:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007e54:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007e56:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007e58:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8007e5a:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007e5c:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007e5e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007e62:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007e66:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007e68:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007e6c:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007e70:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007e74:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007e76:	6a22      	ldr	r2, [r4, #32]
 8007e78:	f102 0204 	add.w	r2, r2, #4
 8007e7c:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007e7e:	d1e8      	bne.n	8007e52 <JPEG_ReadInputData+0x36>
}
 8007e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d1d2      	bne.n	8007e2c <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007e86:	6a01      	ldr	r1, [r0, #32]
 8007e88:	f7fa fb84 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8007e8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007e8e:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007e90:	bf84      	itt	hi
 8007e92:	f023 0303 	bichi.w	r3, r3, #3
 8007e96:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8007e98:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8007e9a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8007e9c:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8007e9e:	e7cc      	b.n	8007e3a <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8007ea0:	2a03      	cmp	r2, #3
 8007ea2:	d918      	bls.n	8007ed6 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007ea4:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8007ea6:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8007ea8:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007eaa:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007eac:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8007eae:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007eb0:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007eb2:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007eb6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007eba:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007ebc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007ec0:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007ec4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007ec8:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8007eca:	6a22      	ldr	r2, [r4, #32]
 8007ecc:	f102 0204 	add.w	r2, r2, #4
 8007ed0:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8007ed2:	d1e8      	bne.n	8007ea6 <JPEG_ReadInputData+0x8a>
 8007ed4:	e7d4      	b.n	8007e80 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8007ed6:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007ed8:	6a25      	ldr	r5, [r4, #32]
 8007eda:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8007edc:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007ede:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8007ee0:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007ee2:	fa05 f506 	lsl.w	r5, r5, r6
 8007ee6:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8007eea:	6a25      	ldr	r5, [r4, #32]
 8007eec:	f105 0501 	add.w	r5, r5, #1
 8007ef0:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8007ef2:	d1f1      	bne.n	8007ed8 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007ef8:	e7c2      	b.n	8007e80 <JPEG_ReadInputData+0x64>

08007efa <JPEG_MDMAInCpltCallback>:
{
 8007efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007efc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007f02:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007f06:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007f08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007f0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007f0e:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d11a      	bne.n	8007f50 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007f1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007f1c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f1e:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007f20:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f26:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007f2e:	6a21      	ldr	r1, [r4, #32]
 8007f30:	f7fa fb30 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8007f34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	d327      	bcc.n	8007f8a <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8007f3a:	b95d      	cbnz	r5, 8007f54 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f3c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8007f3e:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f40:	f043 0304 	orr.w	r3, r3, #4
 8007f44:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f46:	2306      	movs	r3, #6
 8007f48:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8007f4c:	f7fa fb90 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8007f50:	b003      	add	sp, #12
 8007f52:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007f54:	fbb3 f2f5 	udiv	r2, r3, r5
 8007f58:	fb05 3212 	mls	r2, r5, r2, r3
 8007f5c:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007f5e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007f60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007f62:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007f64:	04db      	lsls	r3, r3, #19
 8007f66:	d40a      	bmi.n	8007f7e <JPEG_MDMAInCpltCallback+0x84>
 8007f68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f6a:	b143      	cbz	r3, 8007f7e <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	3240      	adds	r2, #64	@ 0x40
 8007f70:	9100      	str	r1, [sp, #0]
 8007f72:	69a1      	ldr	r1, [r4, #24]
 8007f74:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007f76:	f000 fd58 	bl	8008a2a <HAL_MDMA_Start_IT>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1de      	bne.n	8007f3c <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007f7e:	6822      	ldr	r2, [r4, #0]
 8007f80:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007f82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f88:	e7e2      	b.n	8007f50 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0e8      	beq.n	8007f60 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8007f8e:	079a      	lsls	r2, r3, #30
 8007f90:	d0e6      	beq.n	8007f60 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	3304      	adds	r3, #4
 8007f98:	e7e1      	b.n	8007f5e <JPEG_MDMAInCpltCallback+0x64>

08007f9a <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007f9a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007f9e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007fa2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8007fa4:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d32a      	bcc.n	8008000 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8007faa:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8007fac:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8007fae:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007fb0:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8007fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8007fb4:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007fb6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007fb8:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8007fba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007fbc:	69e0      	ldr	r0, [r4, #28]
 8007fbe:	4428      	add	r0, r5
 8007fc0:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8007fc4:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007fc6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007fc8:	69e0      	ldr	r0, [r4, #28]
 8007fca:	4428      	add	r0, r5
 8007fcc:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007fd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007fd4:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007fd6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007fd8:	69e0      	ldr	r0, [r4, #28]
 8007fda:	4428      	add	r0, r5
 8007fdc:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8007fde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fe0:	f103 0304 	add.w	r3, r3, #4
 8007fe4:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8007fe6:	d1e1      	bne.n	8007fac <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8007fe8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d106      	bne.n	8007ffe <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007ff0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ff2:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7fa faeb 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008000:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008002:	4293      	cmp	r3, r2
 8008004:	d9fb      	bls.n	8007ffe <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008006:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008008:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800800e:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008010:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008012:	d105      	bne.n	8008020 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008014:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008016:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008018:	429f      	cmp	r7, r3
 800801a:	d119      	bne.n	8008050 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800801c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800801e:	e7e9      	b.n	8007ff4 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008020:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008022:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008026:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008028:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800802a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800802c:	69e1      	ldr	r1, [r4, #28]
 800802e:	4429      	add	r1, r5
 8008030:	0a1d      	lsrs	r5, r3, #8
 8008032:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008034:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008036:	69e1      	ldr	r1, [r4, #28]
 8008038:	4429      	add	r1, r5
 800803a:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800803c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800803e:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008040:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008042:	69e1      	ldr	r1, [r4, #28]
 8008044:	4429      	add	r1, r5
 8008046:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008048:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800804a:	3304      	adds	r3, #4
 800804c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800804e:	e7de      	b.n	800800e <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008050:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008052:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008054:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008056:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008058:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800805a:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800805c:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800805e:	d114      	bne.n	800808a <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008060:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008062:	4620      	mov	r0, r4
 8008064:	f7fa fab4 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800806c:	1d2b      	adds	r3, r5, #4
 800806e:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008070:	2b03      	cmp	r3, #3
 8008072:	d8c4      	bhi.n	8007ffe <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008074:	00da      	lsls	r2, r3, #3
 8008076:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008078:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800807a:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800807c:	fa26 f202 	lsr.w	r2, r6, r2
 8008080:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8008082:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008084:	3201      	adds	r2, #1
 8008086:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008088:	e7f2      	b.n	8008070 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800808a:	f002 0303 	and.w	r3, r2, #3
 800808e:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008092:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	fa26 f303 	lsr.w	r3, r6, r3
 800809a:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800809e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080a0:	3301      	adds	r3, #1
 80080a2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80080a4:	e7d9      	b.n	800805a <JPEG_StoreOutputData+0xc0>

080080a6 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080a6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	2b02      	cmp	r3, #2
{
 80080ae:	b510      	push	{r4, lr}
 80080b0:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080b2:	d114      	bne.n	80080de <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80080b4:	6803      	ldr	r3, [r0, #0]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b8:	065b      	lsls	r3, r3, #25
 80080ba:	d510      	bpl.n	80080de <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80080bc:	1d01      	adds	r1, r0, #4
 80080be:	f7ff fdb7 	bl	8007c30 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80080c2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80080c4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80080c6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80080c8:	f7fa fa2e 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080d4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80080d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80080de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80080e0:	04d9      	lsls	r1, r3, #19
 80080e2:	d407      	bmi.n	80080f4 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080e8:	0792      	lsls	r2, r2, #30
 80080ea:	d544      	bpl.n	8008176 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80080ec:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 80080ee:	4620      	mov	r0, r4
 80080f0:	f7ff fe94 	bl	8007e1c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80080f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80080f6:	0499      	lsls	r1, r3, #18
 80080f8:	d407      	bmi.n	800810a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080fe:	0712      	lsls	r2, r2, #28
 8008100:	d53e      	bpl.n	8008180 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008102:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008104:	4620      	mov	r0, r4
 8008106:	f7ff ff48 	bl	8007f9a <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800810e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008112:	2a20      	cmp	r2, #32
 8008114:	d13c      	bne.n	8008190 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	f022 0201 	bic.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800811e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008120:	f002 020c 	and.w	r2, r2, #12
 8008124:	2a08      	cmp	r2, #8
 8008126:	d103      	bne.n	8008130 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800812e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008132:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008136:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008138:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800813a:	b133      	cbz	r3, 800814a <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800813c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800813e:	4620      	mov	r0, r4
 8008140:	69e1      	ldr	r1, [r4, #28]
 8008142:	f7fa fa45 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800814a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800814c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800814e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008150:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008154:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008158:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800815a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008164:	f04f 0201 	mov.w	r2, #1
 8008168:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800816c:	d10d      	bne.n	800818a <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800816e:	f7fa fa81 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8008172:	2001      	movs	r0, #1
}
 8008174:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008178:	0758      	lsls	r0, r3, #29
 800817a:	d5bb      	bpl.n	80080f4 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800817c:	2101      	movs	r1, #1
 800817e:	e7b6      	b.n	80080ee <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008182:	06db      	lsls	r3, r3, #27
 8008184:	d5c1      	bpl.n	800810a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8008186:	2101      	movs	r1, #1
 8008188:	e7bc      	b.n	8008104 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800818a:	f7ff fe31 	bl	8007df0 <HAL_JPEG_EncodeCpltCallback>
 800818e:	e7f0      	b.n	8008172 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8008190:	2000      	movs	r0, #0
 8008192:	e7ef      	b.n	8008174 <JPEG_Process+0xce>

08008194 <JPEG_DMA_PollResidualData>:
{
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4604      	mov	r4, r0
 8008198:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800819a:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800819c:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800819e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80081a2:	d122      	bne.n	80081ea <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80081a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a6:	06d0      	lsls	r0, r2, #27
 80081a8:	d51f      	bpl.n	80081ea <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80081aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80081ac:	69e1      	ldr	r1, [r4, #28]
 80081ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081b0:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80081b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081b4:	69e2      	ldr	r2, [r4, #28]
 80081b6:	440a      	add	r2, r1
 80081b8:	0a19      	lsrs	r1, r3, #8
 80081ba:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80081bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081be:	69e2      	ldr	r2, [r4, #28]
 80081c0:	440a      	add	r2, r1
 80081c2:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80081c4:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80081c6:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80081c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081ca:	69e2      	ldr	r2, [r4, #28]
 80081cc:	440a      	add	r2, r1
 80081ce:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80081d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081d2:	3304      	adds	r3, #4
 80081d4:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80081d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80081d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081da:	429a      	cmp	r2, r3
 80081dc:	d105      	bne.n	80081ea <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80081de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081e0:	4620      	mov	r0, r4
 80081e2:	69e1      	ldr	r1, [r4, #28]
 80081e4:	f7fa f9f4 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80081e8:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80081ea:	3e01      	subs	r6, #1
 80081ec:	d1d5      	bne.n	800819a <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80081ee:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80081f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80081f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80081f4:	06c9      	lsls	r1, r1, #27
 80081f6:	d501      	bpl.n	80081fc <JPEG_DMA_PollResidualData+0x68>
 80081f8:	0492      	lsls	r2, r2, #18
 80081fa:	d420      	bmi.n	800823e <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008204:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008206:	b133      	cbz	r3, 8008216 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008208:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800820a:	4620      	mov	r0, r4
 800820c:	69e1      	ldr	r1, [r4, #28]
 800820e:	f7fa f9df 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008216:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008218:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800821a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800821c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008220:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008224:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008226:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008228:	f04f 0200 	mov.w	r2, #0
 800822c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008230:	f04f 0201 	mov.w	r2, #1
 8008234:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008238:	d102      	bne.n	8008240 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800823a:	f7fa fa1b 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800823e:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008240:	f7ff fdd6 	bl	8007df0 <HAL_JPEG_EncodeCpltCallback>
}
 8008244:	e7fb      	b.n	800823e <JPEG_DMA_PollResidualData+0xaa>

08008246 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008246:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008248:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800824c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800824e:	4604      	mov	r4, r0
 8008250:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008252:	d014      	beq.n	800827e <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008254:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008256:	f003 030c 	and.w	r3, r3, #12
 800825a:	2b0c      	cmp	r3, #12
 800825c:	d146      	bne.n	80082ec <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800825e:	07cb      	lsls	r3, r1, #31
 8008260:	d520      	bpl.n	80082a4 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008262:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008268:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800826a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800826c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800826e:	b941      	cbnz	r1, 8008282 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008270:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008272:	f043 0304 	orr.w	r3, r3, #4
 8008276:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008278:	2306      	movs	r3, #6
 800827a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800827e:	2001      	movs	r0, #1
 8008280:	e01d      	b.n	80082be <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8008282:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008284:	fbb3 f2f1 	udiv	r2, r3, r1
 8008288:	fb01 3212 	mls	r2, r1, r2, r3
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008290:	b143      	cbz	r3, 80082a4 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	2101      	movs	r1, #1
 8008296:	3240      	adds	r2, #64	@ 0x40
 8008298:	9100      	str	r1, [sp, #0]
 800829a:	69a1      	ldr	r1, [r4, #24]
 800829c:	f000 fbc5 	bl	8008a2a <HAL_MDMA_Start_IT>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d1e5      	bne.n	8008270 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80082a4:	07a8      	lsls	r0, r5, #30
 80082a6:	d509      	bpl.n	80082bc <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80082a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082ae:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80082b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082b2:	0419      	lsls	r1, r3, #16
 80082b4:	d505      	bpl.n	80082c2 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff ff6c 	bl	8008194 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 80082bc:	2000      	movs	r0, #0
}
 80082be:	b003      	add	sp, #12
 80082c0:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80082c2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80082c4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 80082c6:	2900      	cmp	r1, #0
 80082c8:	d0d2      	beq.n	8008270 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80082ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082cc:	fbb3 f2f1 	udiv	r2, r3, r1
 80082d0:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80082d4:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80082d6:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80082d8:	2201      	movs	r2, #1
 80082da:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80082dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80082de:	9200      	str	r2, [sp, #0]
 80082e0:	69e2      	ldr	r2, [r4, #28]
 80082e2:	f000 fba2 	bl	8008a2a <HAL_MDMA_Start_IT>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0e8      	beq.n	80082bc <HAL_JPEG_Resume+0x76>
 80082ea:	e7c1      	b.n	8008270 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80082ec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d1e2      	bne.n	80082bc <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80082f6:	f011 0301 	ands.w	r3, r1, #1
 80082fa:	d004      	beq.n	8008306 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80082fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008302:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008304:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008306:	07aa      	lsls	r2, r5, #30
 8008308:	d505      	bpl.n	8008316 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800830a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800830c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008310:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008314:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008316:	6821      	ldr	r1, [r4, #0]
 8008318:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800831a:	4313      	orrs	r3, r2
 800831c:	630b      	str	r3, [r1, #48]	@ 0x30
 800831e:	e7cd      	b.n	80082bc <HAL_JPEG_Resume+0x76>

08008320 <JPEG_DMA_EndProcess>:
{
 8008320:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008322:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008324:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008326:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008334:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008336:	429a      	cmp	r2, r3
 8008338:	d105      	bne.n	8008346 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800833a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800833c:	69c1      	ldr	r1, [r0, #28]
 800833e:	f7fa f947 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800834a:	f015 0510 	ands.w	r5, r5, #16
 800834e:	d124      	bne.n	800839a <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008350:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008352:	b12b      	cbz	r3, 8008360 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008354:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008356:	4620      	mov	r0, r4
 8008358:	69e1      	ldr	r1, [r4, #28]
 800835a:	f7fa f939 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800835e:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008360:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008362:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800836c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800836e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008370:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008374:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008378:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800837a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008384:	f04f 0201 	mov.w	r2, #1
 8008388:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800838c:	d102      	bne.n	8008394 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800838e:	f7fa f971 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 8008392:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008394:	f7ff fd2c 	bl	8007df0 <HAL_JPEG_EncodeCpltCallback>
 8008398:	e7fb      	b.n	8008392 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800839a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800839c:	049b      	lsls	r3, r3, #18
 800839e:	d4f8      	bmi.n	8008392 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80083a0:	4620      	mov	r0, r4
}
 80083a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80083a6:	f7ff bef5 	b.w	8008194 <JPEG_DMA_PollResidualData>

080083aa <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80083aa:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80083ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	d501      	bpl.n	80083b6 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80083b2:	f7ff bfb5 	b.w	8008320 <JPEG_DMA_EndProcess>
}
 80083b6:	4770      	bx	lr

080083b8 <JPEG_MDMAOutCpltCallback>:
{
 80083b8:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80083ba:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083c0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80083c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80083c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083c8:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80083cc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80083d0:	0412      	lsls	r2, r2, #16
 80083d2:	0c12      	lsrs	r2, r2, #16
 80083d4:	2a0c      	cmp	r2, #12
 80083d6:	d125      	bne.n	8008424 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80083d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083da:	069a      	lsls	r2, r3, #26
 80083dc:	d424      	bmi.n	8008428 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80083de:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083e0:	4620      	mov	r0, r4
 80083e2:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083e8:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083f2:	f7fa f8ed 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80083f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083f8:	049b      	lsls	r3, r3, #18
 80083fa:	d415      	bmi.n	8008428 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80083fc:	6821      	ldr	r1, [r4, #0]
 80083fe:	2301      	movs	r3, #1
 8008400:	3144      	adds	r1, #68	@ 0x44
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008406:	69e2      	ldr	r2, [r4, #28]
 8008408:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800840a:	f000 fb0e 	bl	8008a2a <HAL_MDMA_Start_IT>
 800840e:	b158      	cbz	r0, 8008428 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008410:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008412:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008414:	f043 0304 	orr.w	r3, r3, #4
 8008418:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800841a:	2306      	movs	r3, #6
 800841c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008420:	f7fa f926 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8008424:	b002      	add	sp, #8
 8008426:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008428:	6822      	ldr	r2, [r4, #0]
 800842a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800842c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008430:	6313      	str	r3, [r2, #48]	@ 0x30
 8008432:	e7f7      	b.n	8008424 <JPEG_MDMAOutCpltCallback+0x6c>

08008434 <HAL_JPEG_IRQHandler>:
{
 8008434:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008436:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800843a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800843c:	3b03      	subs	r3, #3
 800843e:	2b01      	cmp	r3, #1
 8008440:	d850      	bhi.n	80084e4 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008442:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b08      	cmp	r3, #8
 800844a:	d103      	bne.n	8008454 <HAL_JPEG_IRQHandler+0x20>
}
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008450:	f7ff be29 	b.w	80080a6 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008454:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b0c      	cmp	r3, #12
 800845c:	d142      	bne.n	80084e4 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800845e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d114      	bne.n	8008492 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008468:	6803      	ldr	r3, [r0, #0]
 800846a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846c:	0659      	lsls	r1, r3, #25
 800846e:	d510      	bpl.n	8008492 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008470:	1d01      	adds	r1, r0, #4
 8008472:	f7ff fbdd 	bl	8007c30 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008476:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008478:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800847a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800847c:	f7fa f854 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800848a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800848c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008496:	0692      	lsls	r2, r2, #26
 8008498:	d524      	bpl.n	80084e4 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800849a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800849c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800849e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084a2:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80084ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ae:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80084b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80084b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084b6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80084ba:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80084bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d101      	bne.n	80084c8 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80084c4:	f000 fafa 	bl	8008abc <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80084c8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80084ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d103      	bne.n	80084da <HAL_JPEG_IRQHandler+0xa6>
}
 80084d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80084d6:	f000 baf1 	b.w	8008abc <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80084da:	4620      	mov	r0, r4
}
 80084dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80084e0:	f7ff bf1e 	b.w	8008320 <JPEG_DMA_EndProcess>
}
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084e6:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084e8:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80084ea:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084ee:	3284      	adds	r2, #132	@ 0x84
 80084f0:	1883      	adds	r3, r0, r2
{
 80084f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084f6:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084f8:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084fc:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80084fe:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008502:	684c      	ldr	r4, [r1, #4]
 8008504:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008508:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800850c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008510:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008512:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008514:	68c5      	ldr	r5, [r0, #12]
 8008516:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800851a:	443d      	add	r5, r7
 800851c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008520:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008522:	68c6      	ldr	r6, [r0, #12]
 8008524:	68cd      	ldr	r5, [r1, #12]
 8008526:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800852a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800852c:	689d      	ldr	r5, [r3, #8]
 800852e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8008532:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008534:	688d      	ldr	r5, [r1, #8]
 8008536:	68c7      	ldr	r7, [r0, #12]
 8008538:	3501      	adds	r5, #1
 800853a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800853e:	443d      	add	r5, r7
 8008540:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008544:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008546:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008548:	691d      	ldr	r5, [r3, #16]
 800854a:	f025 0507 	bic.w	r5, r5, #7
 800854e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008550:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008552:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008554:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008558:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800855c:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008560:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8008564:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008568:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800856c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8008570:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008572:	695d      	ldr	r5, [r3, #20]
 8008574:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008578:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800857a:	694d      	ldr	r5, [r1, #20]
 800857c:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800857e:	69dd      	ldr	r5, [r3, #28]
 8008580:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8008584:	f025 0507 	bic.w	r5, r5, #7
 8008588:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800858a:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800858e:	433d      	orrs	r5, r7
 8008590:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008592:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008594:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008596:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800859a:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800859c:	b31e      	cbz	r6, 80085e6 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800859e:	2e01      	cmp	r6, #1
 80085a0:	d023      	beq.n	80085ea <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085a2:	1eb5      	subs	r5, r6, #2
 80085a4:	2d02      	cmp	r5, #2
 80085a6:	d922      	bls.n	80085ee <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80085a8:	2e07      	cmp	r6, #7
 80085aa:	bf14      	ite	ne
 80085ac:	2501      	movne	r5, #1
 80085ae:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085b0:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80085b2:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085b6:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80085ba:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085bc:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80085be:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80085c0:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085c2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80085c4:	436e      	muls	r6, r5
 80085c6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80085ca:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085cc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80085ce:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 80085d2:	f024 0407 	bic.w	r4, r4, #7
 80085d6:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085d8:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085da:	5883      	ldr	r3, [r0, r2]
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	5083      	str	r3, [r0, r2]
}
 80085e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80085e6:	2504      	movs	r5, #4
 80085e8:	e7e2      	b.n	80085b0 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80085ea:	2503      	movs	r5, #3
 80085ec:	e7e0      	b.n	80085b0 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80085ee:	2502      	movs	r5, #2
 80085f0:	e7de      	b.n	80085b0 <LTDC_SetConfig+0xca>
	...

080085f4 <HAL_LTDC_Init>:
{
 80085f4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80085f6:	4604      	mov	r4, r0
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d063      	beq.n	80086c4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80085fc:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8008600:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008604:	b91b      	cbnz	r3, 800860e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8008606:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800860a:	f7f8 fdc7 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800860e:	2302      	movs	r3, #2
 8008610:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800861c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800861e:	6999      	ldr	r1, [r3, #24]
 8008620:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008624:	4302      	orrs	r2, r0
 8008626:	68e0      	ldr	r0, [r4, #12]
 8008628:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800862a:	6920      	ldr	r0, [r4, #16]
 800862c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800862e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008630:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008632:	4925      	ldr	r1, [pc, #148]	@ (80086c8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008634:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	400a      	ands	r2, r1
 800863a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008642:	69a0      	ldr	r0, [r4, #24]
 8008644:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008646:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008648:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	400a      	ands	r2, r1
 800864e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008656:	6a20      	ldr	r0, [r4, #32]
 8008658:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800865a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800865c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	400a      	ands	r2, r1
 8008662:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008664:	691a      	ldr	r2, [r3, #16]
 8008666:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800866a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800866c:	4302      	orrs	r2, r0
 800866e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008670:	695a      	ldr	r2, [r3, #20]
 8008672:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008674:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008676:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800867e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008680:	430a      	orrs	r2, r1
 8008682:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008686:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800868a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800868e:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008694:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008696:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800869a:	432a      	orrs	r2, r5
 800869c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086a0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80086a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086aa:	f042 0206 	orr.w	r2, r2, #6
 80086ae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80086b8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086ba:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80086be:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80086c4:	2001      	movs	r0, #1
 80086c6:	e7fc      	b.n	80086c2 <HAL_LTDC_Init+0xce>
 80086c8:	f000f800 	.word	0xf000f800

080086cc <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80086cc:	4770      	bx	lr

080086ce <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80086ce:	4770      	bx	lr

080086d0 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80086d0:	4770      	bx	lr

080086d2 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80086d2:	6803      	ldr	r3, [r0, #0]
{
 80086d4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80086d6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80086d8:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80086da:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80086dc:	0772      	lsls	r2, r6, #29
 80086de:	d514      	bpl.n	800870a <HAL_LTDC_IRQHandler+0x38>
 80086e0:	0769      	lsls	r1, r5, #29
 80086e2:	d512      	bpl.n	800870a <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80086e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086e6:	f022 0204 	bic.w	r2, r2, #4
 80086ea:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80086ec:	2204      	movs	r2, #4
 80086ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80086f0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80086fc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80086fe:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008702:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008706:	f7ff ffe1 	bl	80086cc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800870a:	07b2      	lsls	r2, r6, #30
 800870c:	d516      	bpl.n	800873c <HAL_LTDC_IRQHandler+0x6a>
 800870e:	07ab      	lsls	r3, r5, #30
 8008710:	d514      	bpl.n	800873c <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008712:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008714:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008718:	f022 0202 	bic.w	r2, r2, #2
 800871c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800871e:	2202      	movs	r2, #2
 8008720:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008722:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800872c:	2304      	movs	r3, #4
 800872e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008732:	2300      	movs	r3, #0
 8008734:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008738:	f7ff ffc8 	bl	80086cc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800873c:	07f0      	lsls	r0, r6, #31
 800873e:	d510      	bpl.n	8008762 <HAL_LTDC_IRQHandler+0x90>
 8008740:	07e9      	lsls	r1, r5, #31
 8008742:	d50e      	bpl.n	8008762 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008744:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008746:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008750:	2201      	movs	r2, #1
 8008752:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008754:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008756:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800875a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800875e:	f7ff ffb6 	bl	80086ce <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008762:	0732      	lsls	r2, r6, #28
 8008764:	d511      	bpl.n	800878a <HAL_LTDC_IRQHandler+0xb8>
 8008766:	072b      	lsls	r3, r5, #28
 8008768:	d50f      	bpl.n	800878a <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800876a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800876c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800876e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008770:	f022 0208 	bic.w	r2, r2, #8
 8008774:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008776:	2208      	movs	r2, #8
 8008778:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800877a:	2301      	movs	r3, #1
 800877c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008780:	2300      	movs	r3, #0
 8008782:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008786:	f7ff ffa3 	bl	80086d0 <HAL_LTDC_ReloadEventCallback>
}
 800878a:	bd70      	pop	{r4, r5, r6, pc}

0800878c <HAL_LTDC_ConfigLayer>:
{
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008790:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800879a:	2b01      	cmp	r3, #1
 800879c:	f04f 0002 	mov.w	r0, #2
 80087a0:	d01f      	beq.n	80087e2 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087a2:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80087a4:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087a8:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087aa:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087ae:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80087b2:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087b6:	3438      	adds	r4, #56	@ 0x38
 80087b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c4:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80087c6:	4630      	mov	r0, r6
 80087c8:	4662      	mov	r2, ip
 80087ca:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087cc:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80087ce:	f7ff fe8a 	bl	80084e6 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80087d2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80087d4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80087d6:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80087da:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80087de:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80087e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080087e8 <HAL_LTDC_SetPitch>:
{
 80087e8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80087ea:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	f04f 0302 	mov.w	r3, #2
 80087f4:	d02c      	beq.n	8008850 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80087f6:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087f8:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80087fc:	fb04 0402 	mla	r4, r4, r2, r0
 8008800:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008802:	b33c      	cbz	r4, 8008854 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008804:	2c01      	cmp	r4, #1
 8008806:	d027      	beq.n	8008858 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008808:	1ea5      	subs	r5, r4, #2
 800880a:	429d      	cmp	r5, r3
 800880c:	d902      	bls.n	8008814 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800880e:	2c07      	cmp	r4, #7
 8008810:	bf18      	it	ne
 8008812:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008814:	01d2      	lsls	r2, r2, #7
 8008816:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008818:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800881a:	3284      	adds	r2, #132	@ 0x84
 800881c:	4422      	add	r2, r4
 800881e:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8008820:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8008824:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 8008828:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800882a:	4c0c      	ldr	r4, [pc, #48]	@ (800885c <HAL_LTDC_SetPitch+0x74>)
 800882c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800882e:	f045 0501 	orr.w	r5, r5, #1
 8008832:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008834:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008836:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800883a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800883c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008844:	2301      	movs	r3, #1
 8008846:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800884a:	2300      	movs	r3, #0
 800884c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008850:	4618      	mov	r0, r3
 8008852:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008854:	2304      	movs	r3, #4
 8008856:	e7dd      	b.n	8008814 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008858:	2303      	movs	r3, #3
 800885a:	e7db      	b.n	8008814 <HAL_LTDC_SetPitch+0x2c>
 800885c:	50001000 	.word	0x50001000

08008860 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008860:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008862:	6804      	ldr	r4, [r0, #0]
 8008864:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008868:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800886c:	6965      	ldr	r5, [r4, #20]
 800886e:	ea4f 4555 	mov.w	r5, r5, lsr #17
 8008872:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8008876:	ea45 0503 	orr.w	r5, r5, r3
 800887a:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800887c:	9d03      	ldr	r5, [sp, #12]
 800887e:	6963      	ldr	r3, [r4, #20]
 8008880:	f105 35ff 	add.w	r5, r5, #4294967295
 8008884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008888:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800888c:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800888e:	f04f 031f 	mov.w	r3, #31
 8008892:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008894:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008896:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008898:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800889a:	bf0c      	ite	eq
 800889c:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80088a0:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80088a4:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80088a8:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80088aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088ac:	bf0c      	ite	eq
 80088ae:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80088b2:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 80088b6:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80088b8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80088ba:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80088bc:	bd30      	pop	{r4, r5, pc}

080088be <HAL_MDMA_Init>:
{
 80088be:	b538      	push	{r3, r4, r5, lr}
 80088c0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80088c2:	f7fd fb15 	bl	8005ef0 <HAL_GetTick>
 80088c6:	4605      	mov	r5, r0
  if(hmdma == NULL)
 80088c8:	2c00      	cmp	r4, #0
 80088ca:	d061      	beq.n	8008990 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 80088cc:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80088ce:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80088d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80088d4:	2302      	movs	r3, #2
 80088d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80088da:	68d3      	ldr	r3, [r2, #12]
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	07d2      	lsls	r2, r2, #31
 80088e8:	d448      	bmi.n	800897c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80088ea:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80088f2:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	69e1      	ldr	r1, [r4, #28]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	6a21      	ldr	r1, [r4, #32]
 80088fe:	430a      	orrs	r2, r1
 8008900:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008902:	430a      	orrs	r2, r1
 8008904:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008906:	430a      	orrs	r2, r1
 8008908:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800890a:	430a      	orrs	r2, r1
 800890c:	68a1      	ldr	r1, [r4, #8]
 800890e:	430a      	orrs	r2, r1
 8008910:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008912:	3901      	subs	r1, #1
 8008914:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800891e:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008920:	d103      	bne.n	800892a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008928:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800892a:	2200      	movs	r2, #0
 800892c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800892e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008930:	2a00      	cmp	r2, #0
 8008932:	da04      	bge.n	800893e <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008934:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008936:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008938:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800893c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800893e:	b292      	uxth	r2, r2
 8008940:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008942:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008944:	2a00      	cmp	r2, #0
 8008946:	da25      	bge.n	8008994 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008948:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800894a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800894c:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008950:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008952:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008954:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008958:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800895c:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	d019      	beq.n	8008998 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008964:	b2c9      	uxtb	r1, r1
 8008966:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008968:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800896a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800896c:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800896e:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008970:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008972:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008976:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800897a:	e00a      	b.n	8008992 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800897c:	f7fd fab8 	bl	8005ef0 <HAL_GetTick>
 8008980:	1b40      	subs	r0, r0, r5
 8008982:	2805      	cmp	r0, #5
 8008984:	d9ad      	bls.n	80088e2 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008986:	2340      	movs	r3, #64	@ 0x40
 8008988:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800898a:	2303      	movs	r3, #3
 800898c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008990:	2001      	movs	r0, #1
}
 8008992:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008994:	6a18      	ldr	r0, [r3, #32]
 8008996:	e7dd      	b.n	8008954 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008998:	629a      	str	r2, [r3, #40]	@ 0x28
 800899a:	e7e5      	b.n	8008968 <HAL_MDMA_Init+0xaa>

0800899c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800899c:	b1d8      	cbz	r0, 80089d6 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800899e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80089a0:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80089a2:	68d3      	ldr	r3, [r2, #12]
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80089ae:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80089b0:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80089b2:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80089b4:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80089b6:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80089b8:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80089ba:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80089bc:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80089be:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80089c0:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80089c2:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80089c4:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80089c6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80089ca:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80089ce:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 80089d2:	4618      	mov	r0, r3
 80089d4:	4770      	bx	lr
    return HAL_ERROR;
 80089d6:	2001      	movs	r0, #1
}
 80089d8:	4770      	bx	lr

080089da <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80089da:	4603      	mov	r3, r0
{
 80089dc:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80089de:	b300      	cbz	r0, 8008a22 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 80089e0:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80089e4:	2801      	cmp	r0, #1
 80089e6:	d01e      	beq.n	8008a26 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80089e8:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80089ea:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80089ee:	42a5      	cmp	r5, r4
 80089f0:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80089f2:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80089f6:	d112      	bne.n	8008a1e <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80089f8:	681c      	ldr	r4, [r3, #0]
 80089fa:	6925      	ldr	r5, [r4, #16]
 80089fc:	006d      	lsls	r5, r5, #1
 80089fe:	d407      	bmi.n	8008a10 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008a00:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008a02:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a04:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008a06:	b939      	cbnz	r1, 8008a18 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a08:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008a0c:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a0e:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008a16:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008a18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008a1c:	e7f6      	b.n	8008a0c <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008a1e:	4620      	mov	r0, r4
 8008a20:	e7f6      	b.n	8008a10 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008a22:	2001      	movs	r0, #1
 8008a24:	e7f7      	b.n	8008a16 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008a26:	2002      	movs	r0, #2
 8008a28:	e7f5      	b.n	8008a16 <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008a2a <HAL_MDMA_Start_IT>:
{
 8008a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d042      	beq.n	8008ab8 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008a32:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008a36:	2d01      	cmp	r5, #1
 8008a38:	d03c      	beq.n	8008ab4 <HAL_MDMA_Start_IT+0x8a>
 8008a3a:	2501      	movs	r5, #1
 8008a3c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008a40:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008a44:	2d01      	cmp	r5, #1
 8008a46:	f04f 0500 	mov.w	r5, #0
 8008a4a:	d131      	bne.n	8008ab0 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008a4c:	2602      	movs	r6, #2
 8008a4e:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a52:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008a54:	6805      	ldr	r5, [r0, #0]
 8008a56:	68ee      	ldr	r6, [r5, #12]
 8008a58:	f026 0601 	bic.w	r6, r6, #1
 8008a5c:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008a5e:	9e06      	ldr	r6, [sp, #24]
 8008a60:	9600      	str	r6, [sp, #0]
 8008a62:	f7ff fefd 	bl	8008860 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008a66:	68eb      	ldr	r3, [r5, #12]
 8008a68:	f043 0306 	orr.w	r3, r3, #6
 8008a6c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008a6e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008a70:	b11b      	cbz	r3, 8008a7a <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008a72:	68eb      	ldr	r3, [r5, #12]
 8008a74:	f043 0310 	orr.w	r3, r3, #16
 8008a78:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008a7a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008a7c:	b11b      	cbz	r3, 8008a86 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008a7e:	68eb      	ldr	r3, [r5, #12]
 8008a80:	f043 0308 	orr.w	r3, r3, #8
 8008a84:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008a86:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008a88:	b11b      	cbz	r3, 8008a92 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008a8a:	68eb      	ldr	r3, [r5, #12]
 8008a8c:	f043 0320 	orr.w	r3, r3, #32
 8008a90:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008a92:	68eb      	ldr	r3, [r5, #12]
 8008a94:	f043 0301 	orr.w	r3, r3, #1
 8008a98:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa0:	d103      	bne.n	8008aaa <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008aa2:	68eb      	ldr	r3, [r5, #12]
 8008aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aa8:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008aaa:	2000      	movs	r0, #0
}
 8008aac:	b002      	add	sp, #8
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008ab0:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008ab4:	2002      	movs	r0, #2
 8008ab6:	e7f9      	b.n	8008aac <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008ab8:	2001      	movs	r0, #1
 8008aba:	e7f7      	b.n	8008aac <HAL_MDMA_Start_IT+0x82>

08008abc <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008abc:	b128      	cbz	r0, 8008aca <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008abe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d003      	beq.n	8008ace <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008ac6:	2380      	movs	r3, #128	@ 0x80
 8008ac8:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008aca:	2001      	movs	r0, #1
 8008acc:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008ace:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008ad6:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008ad8:	68d3      	ldr	r3, [r2, #12]
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	60d3      	str	r3, [r2, #12]
}
 8008ae0:	4770      	bx	lr
	...

08008ae4 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008ae4:	2300      	movs	r3, #0
{
 8008ae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008ae8:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008aea:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008aee:	4b58      	ldr	r3, [pc, #352]	@ (8008c50 <HAL_MDMA_IRQHandler+0x16c>)
{
 8008af0:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008af2:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008af4:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008af6:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008af8:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008afa:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008afe:	3a40      	subs	r2, #64	@ 0x40
 8008b00:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008b04:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b08:	4202      	tst	r2, r0
 8008b0a:	f000 809e 	beq.w	8008c4a <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	07d1      	lsls	r1, r2, #31
 8008b12:	d529      	bpl.n	8008b68 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	0792      	lsls	r2, r2, #30
 8008b18:	d526      	bpl.n	8008b68 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	f022 0202 	bic.w	r2, r2, #2
 8008b20:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008b22:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b24:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008b26:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b28:	bf54      	ite	pl
 8008b2a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008b2e:	f041 0102 	orrmi.w	r1, r1, #2
 8008b32:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008b34:	0591      	lsls	r1, r2, #22
 8008b36:	d503      	bpl.n	8008b40 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008b38:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b3a:	f041 0104 	orr.w	r1, r1, #4
 8008b3e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008b40:	05d0      	lsls	r0, r2, #23
 8008b42:	d503      	bpl.n	8008b4c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008b44:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b46:	f041 0108 	orr.w	r1, r1, #8
 8008b4a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008b4c:	0551      	lsls	r1, r2, #21
 8008b4e:	d503      	bpl.n	8008b58 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008b50:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b52:	f041 0110 	orr.w	r1, r1, #16
 8008b56:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008b58:	0512      	lsls	r2, r2, #20
 8008b5a:	d503      	bpl.n	8008b64 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008b5c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008b5e:	f042 0220 	orr.w	r2, r2, #32
 8008b62:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008b64:	2201      	movs	r2, #1
 8008b66:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	06d0      	lsls	r0, r2, #27
 8008b6c:	d508      	bpl.n	8008b80 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	0691      	lsls	r1, r2, #26
 8008b72:	d505      	bpl.n	8008b80 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008b74:	2210      	movs	r2, #16
 8008b76:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008b78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008b7a:	b10b      	cbz	r3, 8008b80 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	0712      	lsls	r2, r2, #28
 8008b86:	d508      	bpl.n	8008b9a <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	06d0      	lsls	r0, r2, #27
 8008b8c:	d505      	bpl.n	8008b9a <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008b8e:	2208      	movs	r2, #8
 8008b90:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008b92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008b94:	b10b      	cbz	r3, 8008b9a <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008b96:	4620      	mov	r0, r4
 8008b98:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	0751      	lsls	r1, r2, #29
 8008ba0:	d508      	bpl.n	8008bb4 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	0712      	lsls	r2, r2, #28
 8008ba6:	d505      	bpl.n	8008bb4 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008ba8:	2204      	movs	r2, #4
 8008baa:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008bac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008bae:	b10b      	cbz	r3, 8008bb4 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	0790      	lsls	r0, r2, #30
 8008bba:	d524      	bpl.n	8008c06 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	0751      	lsls	r1, r2, #29
 8008bc0:	d521      	bpl.n	8008c06 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008bc8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008bca:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008bce:	2a04      	cmp	r2, #4
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	d10c      	bne.n	8008bf0 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008bd6:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008bd8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008bdc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008be0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d031      	beq.n	8008c4a <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008be6:	4620      	mov	r0, r4
}
 8008be8:	b003      	add	sp, #12
 8008bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008bee:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008bf4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008bf6:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008bfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008bfe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008c00:	b10b      	cbz	r3, 8008c06 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008c02:	4620      	mov	r0, r4
 8008c04:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008c06:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008c08:	b1fb      	cbz	r3, 8008c4a <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c0a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008c0e:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008c12:	2304      	movs	r3, #4
 8008c14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	3201      	adds	r2, #1
 8008c26:	42aa      	cmp	r2, r5
 8008c28:	9201      	str	r2, [sp, #4]
 8008c2a:	d802      	bhi.n	8008c32 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	07d2      	lsls	r2, r2, #31
 8008c30:	d4f7      	bmi.n	8008c22 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008c32:	2200      	movs	r2, #0
 8008c34:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008c3c:	bf4c      	ite	mi
 8008c3e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c40:	2301      	movpl	r3, #1
 8008c42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008c46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c48:	e7cb      	b.n	8008be2 <HAL_MDMA_IRQHandler+0xfe>
}
 8008c4a:	b003      	add	sp, #12
 8008c4c:	bd30      	pop	{r4, r5, pc}
 8008c4e:	bf00      	nop
 8008c50:	2400006c 	.word	0x2400006c

08008c54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c54:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c56:	4d1c      	ldr	r5, [pc, #112]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008c58:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c5a:	68eb      	ldr	r3, [r5, #12]
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	2b06      	cmp	r3, #6
 8008c62:	d006      	beq.n	8008c72 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c64:	68e8      	ldr	r0, [r5, #12]
 8008c66:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008c6a:	1b00      	subs	r0, r0, r4
 8008c6c:	bf18      	it	ne
 8008c6e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c72:	68eb      	ldr	r3, [r5, #12]
 8008c74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008c78:	4303      	orrs	r3, r0
 8008c7a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008c7c:	f7fd f938 	bl	8005ef0 <HAL_GetTick>
 8008c80:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c82:	686b      	ldr	r3, [r5, #4]
 8008c84:	049a      	lsls	r2, r3, #18
 8008c86:	d508      	bpl.n	8008c9a <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008c88:	f1a4 031d 	sub.w	r3, r4, #29
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d90c      	bls.n	8008caa <HAL_PWREx_ConfigSupply+0x56>
 8008c90:	3c2d      	subs	r4, #45	@ 0x2d
 8008c92:	2c01      	cmp	r4, #1
 8008c94:	d909      	bls.n	8008caa <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008c96:	2000      	movs	r0, #0
 8008c98:	e7ea      	b.n	8008c70 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c9a:	f7fd f929 	bl	8005ef0 <HAL_GetTick>
 8008c9e:	1b80      	subs	r0, r0, r6
 8008ca0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008ca4:	d9ed      	bls.n	8008c82 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e7e2      	b.n	8008c70 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008caa:	f7fd f921 	bl	8005ef0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008cae:	4d06      	ldr	r5, [pc, #24]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008cb0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008cb2:	68eb      	ldr	r3, [r5, #12]
 8008cb4:	03db      	lsls	r3, r3, #15
 8008cb6:	d4ee      	bmi.n	8008c96 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cb8:	f7fd f91a 	bl	8005ef0 <HAL_GetTick>
 8008cbc:	1b00      	subs	r0, r0, r4
 8008cbe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008cc2:	d9f6      	bls.n	8008cb2 <HAL_PWREx_ConfigSupply+0x5e>
 8008cc4:	e7ef      	b.n	8008ca6 <HAL_PWREx_ConfigSupply+0x52>
 8008cc6:	bf00      	nop
 8008cc8:	58024800 	.word	0x58024800

08008ccc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008cd0:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8008cd2:	b136      	cbz	r6, 8008ce2 <QSPI_Config+0x16>
 8008cd4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008cd8:	d003      	beq.n	8008ce2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008cda:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008cdc:	6804      	ldr	r4, [r0, #0]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008ce2:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008ce6:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008cea:	f1ba 0f00 	cmp.w	sl, #0
 8008cee:	d04c      	beq.n	8008d8a <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cf0:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008cf2:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cf4:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8008cf8:	ea4a 0406 	orr.w	r4, sl, r6
 8008cfc:	680b      	ldr	r3, [r1, #0]
 8008cfe:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8008d02:	ea44 0a02 	orr.w	sl, r4, r2
 8008d06:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008d0a:	f1be 0f00 	cmp.w	lr, #0
 8008d0e:	d024      	beq.n	8008d5a <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d10:	688e      	ldr	r6, [r1, #8]
 8008d12:	ea4a 040e 	orr.w	r4, sl, lr
 8008d16:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d18:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d1a:	b19f      	cbz	r7, 8008d44 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d1c:	433b      	orrs	r3, r7
 8008d1e:	4303      	orrs	r3, r0
 8008d20:	68c8      	ldr	r0, [r1, #12]
 8008d22:	ea43 0309 	orr.w	r3, r3, r9
 8008d26:	ea43 0308 	orr.w	r3, r3, r8
 8008d2a:	4333      	orrs	r3, r6
 8008d2c:	4303      	orrs	r3, r0
 8008d2e:	ea43 030c 	orr.w	r3, r3, ip
 8008d32:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d34:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d38:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d3a:	d001      	beq.n	8008d40 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008d3c:	684b      	ldr	r3, [r1, #4]
 8008d3e:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d44:	4303      	orrs	r3, r0
 8008d46:	ea43 0309 	orr.w	r3, r3, r9
 8008d4a:	ea43 0308 	orr.w	r3, r3, r8
 8008d4e:	4333      	orrs	r3, r6
 8008d50:	ea43 030c 	orr.w	r3, r3, ip
 8008d54:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d56:	616b      	str	r3, [r5, #20]
 8008d58:	e7f2      	b.n	8008d40 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d5a:	b167      	cbz	r7, 8008d76 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d5c:	433b      	orrs	r3, r7
 8008d5e:	4303      	orrs	r3, r0
 8008d60:	68c8      	ldr	r0, [r1, #12]
 8008d62:	ea43 0309 	orr.w	r3, r3, r9
 8008d66:	ea43 0308 	orr.w	r3, r3, r8
 8008d6a:	4303      	orrs	r3, r0
 8008d6c:	ea43 030c 	orr.w	r3, r3, ip
 8008d70:	ea43 030a 	orr.w	r3, r3, sl
 8008d74:	e7de      	b.n	8008d34 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d76:	4303      	orrs	r3, r0
 8008d78:	ea43 0309 	orr.w	r3, r3, r9
 8008d7c:	ea43 0408 	orr.w	r4, r3, r8
 8008d80:	ea44 030c 	orr.w	r3, r4, ip
 8008d84:	ea43 030a 	orr.w	r3, r3, sl
 8008d88:	e7e5      	b.n	8008d56 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008d8a:	f1be 0f00 	cmp.w	lr, #0
 8008d8e:	d02c      	beq.n	8008dea <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d90:	ea46 050e 	orr.w	r5, r6, lr
 8008d94:	688b      	ldr	r3, [r1, #8]
 8008d96:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d98:	694e      	ldr	r6, [r1, #20]
 8008d9a:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d9c:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d9e:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008da2:	04b6      	lsls	r6, r6, #18
 8008da4:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008da6:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008daa:	b1a7      	cbz	r7, 8008dd6 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dac:	433b      	orrs	r3, r7
 8008dae:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008db0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008db4:	ea43 0308 	orr.w	r3, r3, r8
 8008db8:	ea43 030e 	orr.w	r3, r3, lr
 8008dbc:	ea43 030c 	orr.w	r3, r3, ip
 8008dc0:	ea43 0300 	orr.w	r3, r3, r0
 8008dc4:	ea43 0306 	orr.w	r3, r3, r6
 8008dc8:	ea43 0305 	orr.w	r3, r3, r5
 8008dcc:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008dce:	d0b7      	beq.n	8008d40 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008dd0:	684b      	ldr	r3, [r1, #4]
 8008dd2:	61a3      	str	r3, [r4, #24]
 8008dd4:	e7b4      	b.n	8008d40 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dd6:	ea43 0308 	orr.w	r3, r3, r8
 8008dda:	ea43 030e 	orr.w	r3, r3, lr
 8008dde:	ea43 030c 	orr.w	r3, r3, ip
 8008de2:	4333      	orrs	r3, r6
 8008de4:	432b      	orrs	r3, r5
 8008de6:	6163      	str	r3, [r4, #20]
 8008de8:	e7aa      	b.n	8008d40 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008dea:	b1d7      	cbz	r7, 8008e22 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dec:	ea46 0307 	orr.w	r3, r6, r7
 8008df0:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008df2:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008df4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008df8:	ea43 0302 	orr.w	r3, r3, r2
 8008dfc:	ea43 0304 	orr.w	r3, r3, r4
 8008e00:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8008e02:	ea43 0304 	orr.w	r3, r3, r4
 8008e06:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8008e08:	ea43 0304 	orr.w	r3, r3, r4
 8008e0c:	68cc      	ldr	r4, [r1, #12]
 8008e0e:	ea43 0304 	orr.w	r3, r3, r4
 8008e12:	694c      	ldr	r4, [r1, #20]
 8008e14:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008e18:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e1a:	d091      	beq.n	8008d40 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008e1c:	684b      	ldr	r3, [r1, #4]
 8008e1e:	6183      	str	r3, [r0, #24]
 8008e20:	e78e      	b.n	8008d40 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d08c      	beq.n	8008d40 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e26:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008e28:	6800      	ldr	r0, [r0, #0]
 8008e2a:	4333      	orrs	r3, r6
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008e30:	4313      	orrs	r3, r2
 8008e32:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8008e34:	4313      	orrs	r3, r2
 8008e36:	694a      	ldr	r2, [r1, #20]
 8008e38:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8008e3c:	6143      	str	r3, [r0, #20]
}
 8008e3e:	e77f      	b.n	8008d40 <QSPI_Config+0x74>

08008e40 <QSPI_WaitFlagStateUntilTimeout>:
{
 8008e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e44:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460e      	mov	r6, r1
 8008e4c:	4615      	mov	r5, r2
 8008e4e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	6893      	ldr	r3, [r2, #8]
 8008e54:	4233      	tst	r3, r6
 8008e56:	bf14      	ite	ne
 8008e58:	2301      	movne	r3, #1
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	42ab      	cmp	r3, r5
 8008e5e:	d101      	bne.n	8008e64 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008e60:	2000      	movs	r0, #0
 8008e62:	e012      	b.n	8008e8a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008e64:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008e68:	d0f3      	beq.n	8008e52 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7fd f841 	bl	8005ef0 <HAL_GetTick>
 8008e6e:	1bc0      	subs	r0, r0, r7
 8008e70:	4540      	cmp	r0, r8
 8008e72:	d802      	bhi.n	8008e7a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008e74:	f1b8 0f00 	cmp.w	r8, #0
 8008e78:	d1ea      	bne.n	8008e50 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008e7a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008e7c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008e7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008e82:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e84:	f043 0301 	orr.w	r3, r3, #1
 8008e88:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8008e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008e90 <HAL_QSPI_Init>:
{
 8008e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008e94:	f7fd f82c 	bl	8005ef0 <HAL_GetTick>
 8008e98:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8008e9a:	2c00      	cmp	r4, #0
 8008e9c:	d03f      	beq.n	8008f1e <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008e9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008ea2:	b92b      	cbnz	r3, 8008eb0 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f7f8 f9b7 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8008eaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008eae:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008eb0:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008eb2:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	680a      	ldr	r2, [r1, #0]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8008ebe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ec2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008ec4:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	2120      	movs	r1, #32
 8008ecc:	462b      	mov	r3, r5
 8008ece:	f7ff ffb7 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008ed2:	bb10      	cbnz	r0, 8008f1a <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008ed4:	6822      	ldr	r2, [r4, #0]
 8008ed6:	69e5      	ldr	r5, [r4, #28]
 8008ed8:	68e3      	ldr	r3, [r4, #12]
 8008eda:	6811      	ldr	r1, [r2, #0]
 8008edc:	432b      	orrs	r3, r5
 8008ede:	6a25      	ldr	r5, [r4, #32]
 8008ee0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8008ee4:	432b      	orrs	r3, r5
 8008ee6:	6865      	ldr	r5, [r4, #4]
 8008ee8:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8008eec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008ef4:	6855      	ldr	r5, [r2, #4]
 8008ef6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008efa:	430b      	orrs	r3, r1
 8008efc:	6921      	ldr	r1, [r4, #16]
 8008efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008f02:	4908      	ldr	r1, [pc, #32]	@ (8008f24 <HAL_QSPI_Init+0x94>)
 8008f04:	4029      	ands	r1, r5
 8008f06:	430b      	orrs	r3, r1
 8008f08:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008f0a:	6813      	ldr	r3, [r2, #0]
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8008f12:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f14:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008f16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8008f1a:	b003      	add	sp, #12
 8008f1c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008f1e:	2001      	movs	r0, #1
 8008f20:	e7fb      	b.n	8008f1a <HAL_QSPI_Init+0x8a>
 8008f22:	bf00      	nop
 8008f24:	ffe0f8fe 	.word	0xffe0f8fe

08008f28 <HAL_QSPI_Command>:
{
 8008f28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	468a      	mov	sl, r1
 8008f30:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8008f32:	f7fc ffdd 	bl	8005ef0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008f36:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8008f3a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d036      	beq.n	8008fae <HAL_QSPI_Command+0x86>
 8008f40:	2301      	movs	r3, #1
 8008f42:	2602      	movs	r6, #2
 8008f44:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008f48:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	fa5f f983 	uxtb.w	r9, r3
 8008f52:	d128      	bne.n	8008fa6 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f54:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008f56:	4603      	mov	r3, r0
 8008f58:	2120      	movs	r1, #32
 8008f5a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f5c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008f5e:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008f62:	f8cd 8000 	str.w	r8, [sp]
 8008f66:	f7ff ff6b 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b9a0      	cbnz	r0, 8008f98 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4651      	mov	r1, sl
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff feaa 	bl	8008ccc <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008f78:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8008f7c:	b953      	cbnz	r3, 8008f94 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008f7e:	463b      	mov	r3, r7
 8008f80:	464a      	mov	r2, r9
 8008f82:	4631      	mov	r1, r6
 8008f84:	4620      	mov	r0, r4
 8008f86:	f8cd 8000 	str.w	r8, [sp]
 8008f8a:	f7ff ff59 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008f8e:	b960      	cbnz	r0, 8008faa <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008f94:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	b002      	add	sp, #8
 8008fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8008fa6:	4635      	mov	r5, r6
 8008fa8:	e7f6      	b.n	8008f98 <HAL_QSPI_Command+0x70>
 8008faa:	4605      	mov	r5, r0
 8008fac:	e7f4      	b.n	8008f98 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8008fae:	2502      	movs	r5, #2
 8008fb0:	e7f5      	b.n	8008f9e <HAL_QSPI_Command+0x76>

08008fb2 <HAL_QSPI_Transmit>:
{
 8008fb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4688      	mov	r8, r1
 8008fba:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8008fbc:	f7fc ff98 	bl	8005ef0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008fc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8008fc4:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008fc6:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d04c      	beq.n	8009066 <HAL_QSPI_Transmit+0xb4>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008fd2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	b2d8      	uxtb	r0, r3
 8008fda:	d142      	bne.n	8009062 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8008fe0:	f1b8 0f00 	cmp.w	r8, #0
 8008fe4:	d038      	beq.n	8009058 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008fe6:	2312      	movs	r3, #18
 8008fe8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008fec:	692b      	ldr	r3, [r5, #16]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008ff2:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8008ff4:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008ffc:	696b      	ldr	r3, [r5, #20]
 8008ffe:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009002:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009004:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009006:	b99b      	cbnz	r3, 8009030 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009008:	4633      	mov	r3, r6
 800900a:	2201      	movs	r2, #1
 800900c:	2102      	movs	r1, #2
 800900e:	4620      	mov	r0, r4
 8009010:	9700      	str	r7, [sp, #0]
 8009012:	f7ff ff15 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009016:	b910      	cbnz	r0, 800901e <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	2202      	movs	r2, #2
 800901c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800901e:	2301      	movs	r3, #1
 8009020:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009024:	2300      	movs	r3, #0
 8009026:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800902a:	b002      	add	sp, #8
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009030:	4633      	mov	r3, r6
 8009032:	2201      	movs	r2, #1
 8009034:	2104      	movs	r1, #4
 8009036:	4620      	mov	r0, r4
 8009038:	9700      	str	r7, [sp, #0]
 800903a:	f7ff ff01 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800903e:	2800      	cmp	r0, #0
 8009040:	d1ed      	bne.n	800901e <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009042:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800904a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800904c:	3301      	adds	r3, #1
 800904e:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009050:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009052:	3b01      	subs	r3, #1
 8009054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009056:	e7d5      	b.n	8009004 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009058:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800905a:	f043 0308 	orr.w	r3, r3, #8
 800905e:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009060:	e7e0      	b.n	8009024 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8009062:	2002      	movs	r0, #2
 8009064:	e7de      	b.n	8009024 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009066:	2002      	movs	r0, #2
 8009068:	e7df      	b.n	800902a <HAL_QSPI_Transmit+0x78>

0800906a <HAL_QSPI_Receive>:
{
 800906a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800906e:	4604      	mov	r4, r0
 8009070:	4617      	mov	r7, r2
 8009072:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009074:	f7fc ff3c 	bl	8005ef0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009078:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800907a:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800907c:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800907e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009082:	2b01      	cmp	r3, #1
 8009084:	d04f      	beq.n	8009126 <HAL_QSPI_Receive+0xbc>
 8009086:	2301      	movs	r3, #1
 8009088:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800908c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009090:	2b01      	cmp	r3, #1
 8009092:	b2d8      	uxtb	r0, r3
 8009094:	d145      	bne.n	8009122 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009096:	2300      	movs	r3, #0
 8009098:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	d03b      	beq.n	8009118 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80090a0:	2322      	movs	r3, #34	@ 0x22
 80090a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80090a6:	692b      	ldr	r3, [r5, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80090ac:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80090ae:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80090b2:	3301      	adds	r3, #1
 80090b4:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80090b6:	6969      	ldr	r1, [r5, #20]
 80090b8:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80090bc:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80090c0:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80090c2:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80090c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80090c6:	b99b      	cbnz	r3, 80090f0 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80090c8:	4633      	mov	r3, r6
 80090ca:	2201      	movs	r2, #1
 80090cc:	2102      	movs	r1, #2
 80090ce:	4620      	mov	r0, r4
 80090d0:	9700      	str	r7, [sp, #0]
 80090d2:	f7ff feb5 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80090d6:	b910      	cbnz	r0, 80090de <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	2202      	movs	r2, #2
 80090dc:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80090de:	2301      	movs	r3, #1
 80090e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80090e4:	2300      	movs	r3, #0
 80090e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80090ea:	b002      	add	sp, #8
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80090f0:	4633      	mov	r3, r6
 80090f2:	2201      	movs	r2, #1
 80090f4:	2106      	movs	r1, #6
 80090f6:	4620      	mov	r0, r4
 80090f8:	9700      	str	r7, [sp, #0]
 80090fa:	f7ff fea1 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80090fe:	2800      	cmp	r0, #0
 8009100:	d1ed      	bne.n	80090de <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009102:	f895 2020 	ldrb.w	r2, [r5, #32]
 8009106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009108:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800910a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800910c:	3301      	adds	r3, #1
 800910e:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009112:	3b01      	subs	r3, #1
 8009114:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009116:	e7d5      	b.n	80090c4 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009118:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800911a:	f043 0308 	orr.w	r3, r3, #8
 800911e:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009120:	e7e0      	b.n	80090e4 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009122:	2002      	movs	r0, #2
 8009124:	e7de      	b.n	80090e4 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009126:	2002      	movs	r0, #2
 8009128:	e7df      	b.n	80090ea <HAL_QSPI_Receive+0x80>

0800912a <HAL_QSPI_AutoPolling>:
{
 800912a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800912e:	4604      	mov	r4, r0
 8009130:	461f      	mov	r7, r3
 8009132:	4689      	mov	r9, r1
 8009134:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009136:	f7fc fedb 	bl	8005ef0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800913a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800913e:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009140:	2b01      	cmp	r3, #1
 8009142:	d041      	beq.n	80091c8 <HAL_QSPI_AutoPolling+0x9e>
 8009144:	2301      	movs	r3, #1
 8009146:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800914a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800914e:	2b01      	cmp	r3, #1
 8009150:	fa5f f883 	uxtb.w	r8, r3
 8009154:	d136      	bne.n	80091c4 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009156:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009158:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800915a:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800915c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800915e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009162:	4603      	mov	r3, r0
 8009164:	9700      	str	r7, [sp, #0]
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff fe6a 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800916c:	bb20      	cbnz	r0, 80091b8 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800916e:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009170:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009172:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009174:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009176:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009178:	686b      	ldr	r3, [r5, #4]
 800917a:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800917c:	68ab      	ldr	r3, [r5, #8]
 800917e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009180:	6813      	ldr	r3, [r2, #0]
 8009182:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009186:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009188:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800918a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800918e:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009190:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8009194:	68eb      	ldr	r3, [r5, #12]
 8009196:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800919a:	f7ff fd97 	bl	8008ccc <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800919e:	4633      	mov	r3, r6
 80091a0:	4642      	mov	r2, r8
 80091a2:	2108      	movs	r1, #8
 80091a4:	4620      	mov	r0, r4
 80091a6:	9700      	str	r7, [sp, #0]
 80091a8:	f7ff fe4a 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80091ac:	b920      	cbnz	r0, 80091b8 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	2208      	movs	r2, #8
 80091b2:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80091b4:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80091b8:	2300      	movs	r3, #0
 80091ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80091c4:	2002      	movs	r0, #2
 80091c6:	e7f7      	b.n	80091b8 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 80091c8:	2002      	movs	r0, #2
 80091ca:	e7f8      	b.n	80091be <HAL_QSPI_AutoPolling+0x94>

080091cc <HAL_QSPI_MemoryMapped>:
{
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	4604      	mov	r4, r0
 80091d0:	4616      	mov	r6, r2
 80091d2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80091d4:	f7fc fe8c 	bl	8005ef0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80091d8:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80091dc:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80091de:	2a01      	cmp	r2, #1
 80091e0:	d033      	beq.n	800924a <HAL_QSPI_MemoryMapped+0x7e>
 80091e2:	2201      	movs	r2, #1
 80091e4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091e8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80091ec:	2a01      	cmp	r2, #1
 80091ee:	d12a      	bne.n	8009246 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091f0:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80091f2:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80091f4:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091f6:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80091f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80091fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80091fe:	9100      	str	r1, [sp, #0]
 8009200:	2120      	movs	r1, #32
 8009202:	f7ff fe1d 	bl	8008e40 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009206:	4605      	mov	r5, r0
 8009208:	b9b8      	cbnz	r0, 800923a <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	6872      	ldr	r2, [r6, #4]
 800920e:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009210:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009212:	f020 0008 	bic.w	r0, r0, #8
 8009216:	ea40 0002 	orr.w	r0, r0, r2
 800921a:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800921c:	d107      	bne.n	800922e <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800921e:	6832      	ldr	r2, [r6, #0]
 8009220:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009222:	2210      	movs	r2, #16
 8009224:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800922c:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800922e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8009232:	4639      	mov	r1, r7
 8009234:	4620      	mov	r0, r4
 8009236:	f7ff fd49 	bl	8008ccc <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800923a:	2300      	movs	r3, #0
 800923c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009240:	4628      	mov	r0, r5
 8009242:	b003      	add	sp, #12
 8009244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009246:	2502      	movs	r5, #2
 8009248:	e7f7      	b.n	800923a <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800924a:	2502      	movs	r5, #2
 800924c:	e7f8      	b.n	8009240 <HAL_QSPI_MemoryMapped+0x74>
	...

08009250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009252:	4604      	mov	r4, r0
 8009254:	2800      	cmp	r0, #0
 8009256:	d074      	beq.n	8009342 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009258:	6803      	ldr	r3, [r0, #0]
 800925a:	07d8      	lsls	r0, r3, #31
 800925c:	d45e      	bmi.n	800931c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	0799      	lsls	r1, r3, #30
 8009262:	f100 80ad 	bmi.w	80093c0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	06da      	lsls	r2, r3, #27
 800926a:	d527      	bpl.n	80092bc <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800926c:	4a9c      	ldr	r2, [pc, #624]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 800926e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009270:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009276:	2b08      	cmp	r3, #8
 8009278:	d007      	beq.n	800928a <HAL_RCC_OscConfig+0x3a>
 800927a:	2b18      	cmp	r3, #24
 800927c:	f040 8103 	bne.w	8009486 <HAL_RCC_OscConfig+0x236>
 8009280:	f001 0303 	and.w	r3, r1, #3
 8009284:	2b01      	cmp	r3, #1
 8009286:	f040 80fe 	bne.w	8009486 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	05db      	lsls	r3, r3, #23
 800928e:	d502      	bpl.n	8009296 <HAL_RCC_OscConfig+0x46>
 8009290:	69e3      	ldr	r3, [r4, #28]
 8009292:	2b80      	cmp	r3, #128	@ 0x80
 8009294:	d155      	bne.n	8009342 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009296:	f7fc fe43 	bl	8005f20 <HAL_GetREVID>
 800929a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800929e:	6a21      	ldr	r1, [r4, #32]
 80092a0:	4298      	cmp	r0, r3
 80092a2:	4b8f      	ldr	r3, [pc, #572]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 80092a4:	f200 80e8 	bhi.w	8009478 <HAL_RCC_OscConfig+0x228>
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	2920      	cmp	r1, #32
 80092ac:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 80092b0:	bf0c      	ite	eq
 80092b2:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 80092b6:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80092ba:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	0719      	lsls	r1, r3, #28
 80092c0:	f100 8123 	bmi.w	800950a <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	069a      	lsls	r2, r3, #26
 80092c8:	f100 8144 	bmi.w	8009554 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	075d      	lsls	r5, r3, #29
 80092d0:	d51e      	bpl.n	8009310 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092d2:	4d84      	ldr	r5, [pc, #528]	@ (80094e4 <HAL_RCC_OscConfig+0x294>)
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092da:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092dc:	f7fc fe08 	bl	8005ef0 <HAL_GetTick>
 80092e0:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092e2:	682b      	ldr	r3, [r5, #0]
 80092e4:	05da      	lsls	r2, r3, #23
 80092e6:	f140 815a 	bpl.w	800959e <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	4d7c      	ldr	r5, [pc, #496]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	f040 815c 	bne.w	80095ac <HAL_RCC_OscConfig+0x35c>
 80092f4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092fc:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009300:	f7fc fdf6 	bl	8005ef0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009304:	4e76      	ldr	r6, [pc, #472]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009306:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009308:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800930a:	079b      	lsls	r3, r3, #30
 800930c:	f140 8174 	bpl.w	80095f8 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009310:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009312:	2900      	cmp	r1, #0
 8009314:	f040 8177 	bne.w	8009606 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009318:	2000      	movs	r0, #0
 800931a:	e02b      	b.n	8009374 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800931c:	4a70      	ldr	r2, [pc, #448]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 800931e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009320:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009326:	2b10      	cmp	r3, #16
 8009328:	d005      	beq.n	8009336 <HAL_RCC_OscConfig+0xe6>
 800932a:	2b18      	cmp	r3, #24
 800932c:	d10b      	bne.n	8009346 <HAL_RCC_OscConfig+0xf6>
 800932e:	f001 0303 	and.w	r3, r1, #3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d107      	bne.n	8009346 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	039a      	lsls	r2, r3, #14
 800933a:	d590      	bpl.n	800925e <HAL_RCC_OscConfig+0xe>
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d18d      	bne.n	800925e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009342:	2001      	movs	r0, #1
 8009344:	e016      	b.n	8009374 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	4d65      	ldr	r5, [pc, #404]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 800934a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800934e:	d112      	bne.n	8009376 <HAL_RCC_OscConfig+0x126>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009356:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009358:	f7fc fdca 	bl	8005ef0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800935c:	4e60      	ldr	r6, [pc, #384]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800935e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	039b      	lsls	r3, r3, #14
 8009364:	f53f af7b 	bmi.w	800925e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009368:	f7fc fdc2 	bl	8005ef0 <HAL_GetTick>
 800936c:	1b40      	subs	r0, r0, r5
 800936e:	2864      	cmp	r0, #100	@ 0x64
 8009370:	d9f6      	bls.n	8009360 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8009372:	2003      	movs	r0, #3
}
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009376:	b9a3      	cbnz	r3, 80093a2 <HAL_RCC_OscConfig+0x152>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009386:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009388:	f7fc fdb2 	bl	8005ef0 <HAL_GetTick>
 800938c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800938e:	682b      	ldr	r3, [r5, #0]
 8009390:	039f      	lsls	r7, r3, #14
 8009392:	f57f af64 	bpl.w	800925e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009396:	f7fc fdab 	bl	8005ef0 <HAL_GetTick>
 800939a:	1b80      	subs	r0, r0, r6
 800939c:	2864      	cmp	r0, #100	@ 0x64
 800939e:	d9f6      	bls.n	800938e <HAL_RCC_OscConfig+0x13e>
 80093a0:	e7e7      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	d103      	bne.n	80093b2 <HAL_RCC_OscConfig+0x162>
 80093aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	e7ce      	b.n	8009350 <HAL_RCC_OscConfig+0x100>
 80093b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093be:	e7ca      	b.n	8009356 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093c0:	4947      	ldr	r1, [pc, #284]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 80093c2:	68e2      	ldr	r2, [r4, #12]
 80093c4:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093c6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80093c8:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80093cc:	d003      	beq.n	80093d6 <HAL_RCC_OscConfig+0x186>
 80093ce:	2b18      	cmp	r3, #24
 80093d0:	d12a      	bne.n	8009428 <HAL_RCC_OscConfig+0x1d8>
 80093d2:	0780      	lsls	r0, r0, #30
 80093d4:	d128      	bne.n	8009428 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093d6:	680b      	ldr	r3, [r1, #0]
 80093d8:	075b      	lsls	r3, r3, #29
 80093da:	d501      	bpl.n	80093e0 <HAL_RCC_OscConfig+0x190>
 80093dc:	2a00      	cmp	r2, #0
 80093de:	d0b0      	beq.n	8009342 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093e0:	4d3f      	ldr	r5, [pc, #252]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 80093e2:	682b      	ldr	r3, [r5, #0]
 80093e4:	f023 0319 	bic.w	r3, r3, #25
 80093e8:	4313      	orrs	r3, r2
 80093ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80093ec:	f7fc fd80 	bl	8005ef0 <HAL_GetTick>
 80093f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	075f      	lsls	r7, r3, #29
 80093f6:	d511      	bpl.n	800941c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093f8:	f7fc fd92 	bl	8005f20 <HAL_GetREVID>
 80093fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	4298      	cmp	r0, r3
 8009404:	686b      	ldr	r3, [r5, #4]
 8009406:	d822      	bhi.n	800944e <HAL_RCC_OscConfig+0x1fe>
 8009408:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800940c:	2a40      	cmp	r2, #64	@ 0x40
 800940e:	bf0c      	ite	eq
 8009410:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8009414:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009418:	606b      	str	r3, [r5, #4]
 800941a:	e724      	b.n	8009266 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800941c:	f7fc fd68 	bl	8005ef0 <HAL_GetTick>
 8009420:	1b80      	subs	r0, r0, r6
 8009422:	2802      	cmp	r0, #2
 8009424:	d9e5      	bls.n	80093f2 <HAL_RCC_OscConfig+0x1a2>
 8009426:	e7a4      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009428:	4d2d      	ldr	r5, [pc, #180]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800942a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800942c:	b1a2      	cbz	r2, 8009458 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800942e:	f023 0319 	bic.w	r3, r3, #25
 8009432:	4313      	orrs	r3, r2
 8009434:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009436:	f7fc fd5b 	bl	8005ef0 <HAL_GetTick>
 800943a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	0758      	lsls	r0, r3, #29
 8009440:	d4da      	bmi.n	80093f8 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009442:	f7fc fd55 	bl	8005ef0 <HAL_GetTick>
 8009446:	1b80      	subs	r0, r0, r6
 8009448:	2802      	cmp	r0, #2
 800944a:	d9f7      	bls.n	800943c <HAL_RCC_OscConfig+0x1ec>
 800944c:	e791      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009452:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009456:	e7df      	b.n	8009418 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800945e:	f7fc fd47 	bl	8005ef0 <HAL_GetTick>
 8009462:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	0759      	lsls	r1, r3, #29
 8009468:	f57f aefd 	bpl.w	8009266 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800946c:	f7fc fd40 	bl	8005ef0 <HAL_GetTick>
 8009470:	1b80      	subs	r0, r0, r6
 8009472:	2802      	cmp	r0, #2
 8009474:	d9f6      	bls.n	8009464 <HAL_RCC_OscConfig+0x214>
 8009476:	e77c      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800947e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009482:	60da      	str	r2, [r3, #12]
 8009484:	e71a      	b.n	80092bc <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009486:	69e3      	ldr	r3, [r4, #28]
 8009488:	4d15      	ldr	r5, [pc, #84]	@ (80094e0 <HAL_RCC_OscConfig+0x290>)
 800948a:	b36b      	cbz	r3, 80094e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009492:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009494:	f7fc fd2c 	bl	8005ef0 <HAL_GetTick>
 8009498:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	05df      	lsls	r7, r3, #23
 800949e:	d511      	bpl.n	80094c4 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094a0:	f7fc fd3e 	bl	8005f20 <HAL_GetREVID>
 80094a4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80094a8:	6a22      	ldr	r2, [r4, #32]
 80094aa:	4298      	cmp	r0, r3
 80094ac:	d810      	bhi.n	80094d0 <HAL_RCC_OscConfig+0x280>
 80094ae:	686b      	ldr	r3, [r5, #4]
 80094b0:	2a20      	cmp	r2, #32
 80094b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80094b6:	bf0c      	ite	eq
 80094b8:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80094bc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80094c0:	606b      	str	r3, [r5, #4]
 80094c2:	e6fb      	b.n	80092bc <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80094c4:	f7fc fd14 	bl	8005ef0 <HAL_GetTick>
 80094c8:	1b80      	subs	r0, r0, r6
 80094ca:	2802      	cmp	r0, #2
 80094cc:	d9e5      	bls.n	800949a <HAL_RCC_OscConfig+0x24a>
 80094ce:	e750      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094d0:	68eb      	ldr	r3, [r5, #12]
 80094d2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80094d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80094da:	60eb      	str	r3, [r5, #12]
 80094dc:	e6ee      	b.n	80092bc <HAL_RCC_OscConfig+0x6c>
 80094de:	bf00      	nop
 80094e0:	58024400 	.word	0x58024400
 80094e4:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094f0:	f7fc fcfe 	bl	8005ef0 <HAL_GetTick>
 80094f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	05d8      	lsls	r0, r3, #23
 80094fa:	f57f aedf 	bpl.w	80092bc <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80094fe:	f7fc fcf7 	bl	8005ef0 <HAL_GetTick>
 8009502:	1b80      	subs	r0, r0, r6
 8009504:	2802      	cmp	r0, #2
 8009506:	d9f6      	bls.n	80094f6 <HAL_RCC_OscConfig+0x2a6>
 8009508:	e733      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800950a:	6963      	ldr	r3, [r4, #20]
 800950c:	4da5      	ldr	r5, [pc, #660]	@ (80097a4 <HAL_RCC_OscConfig+0x554>)
 800950e:	b183      	cbz	r3, 8009532 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009510:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009512:	f043 0301 	orr.w	r3, r3, #1
 8009516:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009518:	f7fc fcea 	bl	8005ef0 <HAL_GetTick>
 800951c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800951e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009520:	079b      	lsls	r3, r3, #30
 8009522:	f53f aecf 	bmi.w	80092c4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009526:	f7fc fce3 	bl	8005ef0 <HAL_GetTick>
 800952a:	1b80      	subs	r0, r0, r6
 800952c:	2802      	cmp	r0, #2
 800952e:	d9f6      	bls.n	800951e <HAL_RCC_OscConfig+0x2ce>
 8009530:	e71f      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009532:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800953a:	f7fc fcd9 	bl	8005ef0 <HAL_GetTick>
 800953e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009540:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009542:	079f      	lsls	r7, r3, #30
 8009544:	f57f aebe 	bpl.w	80092c4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009548:	f7fc fcd2 	bl	8005ef0 <HAL_GetTick>
 800954c:	1b80      	subs	r0, r0, r6
 800954e:	2802      	cmp	r0, #2
 8009550:	d9f6      	bls.n	8009540 <HAL_RCC_OscConfig+0x2f0>
 8009552:	e70e      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009554:	69a3      	ldr	r3, [r4, #24]
 8009556:	4d93      	ldr	r5, [pc, #588]	@ (80097a4 <HAL_RCC_OscConfig+0x554>)
 8009558:	b183      	cbz	r3, 800957c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009560:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009562:	f7fc fcc5 	bl	8005ef0 <HAL_GetTick>
 8009566:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	0498      	lsls	r0, r3, #18
 800956c:	f53f aeae 	bmi.w	80092cc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009570:	f7fc fcbe 	bl	8005ef0 <HAL_GetTick>
 8009574:	1b80      	subs	r0, r0, r6
 8009576:	2802      	cmp	r0, #2
 8009578:	d9f6      	bls.n	8009568 <HAL_RCC_OscConfig+0x318>
 800957a:	e6fa      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009582:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009584:	f7fc fcb4 	bl	8005ef0 <HAL_GetTick>
 8009588:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	0499      	lsls	r1, r3, #18
 800958e:	f57f ae9d 	bpl.w	80092cc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009592:	f7fc fcad 	bl	8005ef0 <HAL_GetTick>
 8009596:	1b80      	subs	r0, r0, r6
 8009598:	2802      	cmp	r0, #2
 800959a:	d9f6      	bls.n	800958a <HAL_RCC_OscConfig+0x33a>
 800959c:	e6e9      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800959e:	f7fc fca7 	bl	8005ef0 <HAL_GetTick>
 80095a2:	1b80      	subs	r0, r0, r6
 80095a4:	2864      	cmp	r0, #100	@ 0x64
 80095a6:	f67f ae9c 	bls.w	80092e2 <HAL_RCC_OscConfig+0x92>
 80095aa:	e6e2      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095ac:	b9b3      	cbnz	r3, 80095dc <HAL_RCC_OscConfig+0x38c>
 80095ae:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095b0:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095b4:	f023 0301 	bic.w	r3, r3, #1
 80095b8:	672b      	str	r3, [r5, #112]	@ 0x70
 80095ba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80095bc:	f023 0304 	bic.w	r3, r3, #4
 80095c0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80095c2:	f7fc fc95 	bl	8005ef0 <HAL_GetTick>
 80095c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80095c8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80095ca:	0798      	lsls	r0, r3, #30
 80095cc:	f57f aea0 	bpl.w	8009310 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095d0:	f7fc fc8e 	bl	8005ef0 <HAL_GetTick>
 80095d4:	1b80      	subs	r0, r0, r6
 80095d6:	42b8      	cmp	r0, r7
 80095d8:	d9f6      	bls.n	80095c8 <HAL_RCC_OscConfig+0x378>
 80095da:	e6ca      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095dc:	2b05      	cmp	r3, #5
 80095de:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80095e0:	d103      	bne.n	80095ea <HAL_RCC_OscConfig+0x39a>
 80095e2:	f043 0304 	orr.w	r3, r3, #4
 80095e6:	672b      	str	r3, [r5, #112]	@ 0x70
 80095e8:	e684      	b.n	80092f4 <HAL_RCC_OscConfig+0xa4>
 80095ea:	f023 0301 	bic.w	r3, r3, #1
 80095ee:	672b      	str	r3, [r5, #112]	@ 0x70
 80095f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80095f2:	f023 0304 	bic.w	r3, r3, #4
 80095f6:	e680      	b.n	80092fa <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f8:	f7fc fc7a 	bl	8005ef0 <HAL_GetTick>
 80095fc:	1b40      	subs	r0, r0, r5
 80095fe:	42b8      	cmp	r0, r7
 8009600:	f67f ae82 	bls.w	8009308 <HAL_RCC_OscConfig+0xb8>
 8009604:	e6b5      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009606:	4d67      	ldr	r5, [pc, #412]	@ (80097a4 <HAL_RCC_OscConfig+0x554>)
 8009608:	692b      	ldr	r3, [r5, #16]
 800960a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800960e:	2b18      	cmp	r3, #24
 8009610:	d07a      	beq.n	8009708 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8009612:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009614:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8009616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800961a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800961c:	d167      	bne.n	80096ee <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800961e:	f7fc fc67 	bl	8005ef0 <HAL_GetTick>
 8009622:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	0199      	lsls	r1, r3, #6
 8009628:	d45b      	bmi.n	80096e2 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800962a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800962c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800962e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	4313      	orrs	r3, r2
 8009638:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800963a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800963e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009642:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009644:	3b01      	subs	r3, #1
 8009646:	3a01      	subs	r2, #1
 8009648:	025b      	lsls	r3, r3, #9
 800964a:	0412      	lsls	r2, r2, #16
 800964c:	b29b      	uxth	r3, r3
 800964e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009652:	4313      	orrs	r3, r2
 8009654:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009656:	3a01      	subs	r2, #1
 8009658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800965c:	4313      	orrs	r3, r2
 800965e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009660:	3a01      	subs	r2, #1
 8009662:	0612      	lsls	r2, r2, #24
 8009664:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009668:	4313      	orrs	r3, r2
 800966a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800966c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800966e:	f023 0301 	bic.w	r3, r3, #1
 8009672:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009674:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009676:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009678:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800967c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009680:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009684:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009686:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009688:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800968a:	f023 030c 	bic.w	r3, r3, #12
 800968e:	4313      	orrs	r3, r2
 8009690:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009692:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009694:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009696:	f023 0302 	bic.w	r3, r3, #2
 800969a:	4313      	orrs	r3, r2
 800969c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800969e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ac:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096ae:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096b4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80096b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096c6:	f7fc fc13 	bl	8005ef0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096ca:	4d36      	ldr	r5, [pc, #216]	@ (80097a4 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 80096cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	019a      	lsls	r2, r3, #6
 80096d2:	f53f ae21 	bmi.w	8009318 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096d6:	f7fc fc0b 	bl	8005ef0 <HAL_GetTick>
 80096da:	1b00      	subs	r0, r0, r4
 80096dc:	2802      	cmp	r0, #2
 80096de:	d9f6      	bls.n	80096ce <HAL_RCC_OscConfig+0x47e>
 80096e0:	e647      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096e2:	f7fc fc05 	bl	8005ef0 <HAL_GetTick>
 80096e6:	1b80      	subs	r0, r0, r6
 80096e8:	2802      	cmp	r0, #2
 80096ea:	d99b      	bls.n	8009624 <HAL_RCC_OscConfig+0x3d4>
 80096ec:	e641      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80096ee:	f7fc fbff 	bl	8005ef0 <HAL_GetTick>
 80096f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	019b      	lsls	r3, r3, #6
 80096f8:	f57f ae0e 	bpl.w	8009318 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096fc:	f7fc fbf8 	bl	8005ef0 <HAL_GetTick>
 8009700:	1b00      	subs	r0, r0, r4
 8009702:	2802      	cmp	r0, #2
 8009704:	d9f6      	bls.n	80096f4 <HAL_RCC_OscConfig+0x4a4>
 8009706:	e634      	b.n	8009372 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009708:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800970a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800970c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800970e:	f43f ae18 	beq.w	8009342 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009712:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009716:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009718:	4281      	cmp	r1, r0
 800971a:	f47f ae12 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800971e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009722:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009724:	428a      	cmp	r2, r1
 8009726:	f47f ae0c 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800972a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800972c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009730:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009732:	4291      	cmp	r1, r2
 8009734:	f47f ae05 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009738:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800973a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800973e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009740:	4291      	cmp	r1, r2
 8009742:	f47f adfe 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009746:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009748:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800974c:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800974e:	4291      	cmp	r1, r2
 8009750:	f47f adf7 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009754:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009756:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800975a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800975c:	4293      	cmp	r3, r2
 800975e:	f47f adf0 	bne.w	8009342 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009762:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009764:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009766:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800976a:	429a      	cmp	r2, r3
 800976c:	f43f add4 	beq.w	8009318 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009770:	4d0c      	ldr	r5, [pc, #48]	@ (80097a4 <HAL_RCC_OscConfig+0x554>)
 8009772:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800977a:	f7fc fbb9 	bl	8005ef0 <HAL_GetTick>
 800977e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009780:	f7fc fbb6 	bl	8005ef0 <HAL_GetTick>
 8009784:	42b0      	cmp	r0, r6
 8009786:	d0fb      	beq.n	8009780 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009788:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800978a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800978c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009790:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009794:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009798:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800979a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80097a2:	e5b9      	b.n	8009318 <HAL_RCC_OscConfig+0xc8>
 80097a4:	58024400 	.word	0x58024400

080097a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	4c23      	ldr	r4, [pc, #140]	@ (8009838 <HAL_RCC_MCOConfig+0x90>)
 80097ac:	b088      	sub	sp, #32
 80097ae:	460e      	mov	r6, r1
 80097b0:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80097b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 80097b6:	b9f8      	cbnz	r0, 80097f8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80097b8:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097bc:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80097c0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 80097c2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80097c6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80097ca:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d4:	2302      	movs	r3, #2
 80097d6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097da:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097dc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80097e0:	4816      	ldr	r0, [pc, #88]	@ (800983c <HAL_RCC_MCOConfig+0x94>)
 80097e2:	f7fd fa0b 	bl	8006bfc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80097ec:	ea43 0106 	orr.w	r1, r3, r6
 80097f0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80097f2:	6121      	str	r1, [r4, #16]
  }
}
 80097f4:	b008      	add	sp, #32
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80097f8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009800:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009802:	480f      	ldr	r0, [pc, #60]	@ (8009840 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009804:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009808:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009814:	2302      	movs	r3, #2
 8009816:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009820:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009822:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009824:	f7fd f9ea 	bl	8006bfc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800982e:	ea43 0106 	orr.w	r1, r3, r6
 8009832:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009836:	e7dc      	b.n	80097f2 <HAL_RCC_MCOConfig+0x4a>
 8009838:	58024400 	.word	0x58024400
 800983c:	58020000 	.word	0x58020000
 8009840:	58020800 	.word	0x58020800

08009844 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009844:	4b49      	ldr	r3, [pc, #292]	@ (800996c <HAL_RCC_GetSysClockFreq+0x128>)
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800984c:	2a10      	cmp	r2, #16
{
 800984e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009850:	f000 8088 	beq.w	8009964 <HAL_RCC_GetSysClockFreq+0x120>
 8009854:	2a18      	cmp	r2, #24
 8009856:	d00c      	beq.n	8009872 <HAL_RCC_GetSysClockFreq+0x2e>
 8009858:	2a00      	cmp	r2, #0
 800985a:	f040 8085 	bne.w	8009968 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	4843      	ldr	r0, [pc, #268]	@ (8009970 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009862:	f012 0f20 	tst.w	r2, #32
 8009866:	d003      	beq.n	8009870 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800986e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009870:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009872:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009874:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009876:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009878:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800987c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009882:	d0f5      	beq.n	8009870 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009884:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009888:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800988c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009890:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009894:	4362      	muls	r2, r4
 8009896:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800989a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800989c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098a0:	ee06 2a90 	vmov	s13, r2
 80098a4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80098a8:	d04e      	beq.n	8009948 <HAL_RCC_GetSysClockFreq+0x104>
 80098aa:	2902      	cmp	r1, #2
 80098ac:	d03e      	beq.n	800992c <HAL_RCC_GetSysClockFreq+0xe8>
 80098ae:	2900      	cmp	r1, #0
 80098b0:	d14a      	bne.n	8009948 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	0692      	lsls	r2, r2, #26
 80098b6:	d527      	bpl.n	8009908 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009970 <HAL_RCC_GetSysClockFreq+0x12c>)
 80098bc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098c2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c8:	ee07 2a90 	vmov	s15, r2
 80098cc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80098d0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80098d4:	ee07 3a10 	vmov	s14, r3
 80098d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80098e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80098e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80098e8:	4b20      	ldr	r3, [pc, #128]	@ (800996c <HAL_RCC_GetSysClockFreq+0x128>)
 80098ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80098f0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80098f2:	ee07 3a10 	vmov	s14, r3
 80098f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80098fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80098fe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009902:	ee17 0a90 	vmov	r0, s15
 8009906:	e7b3      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800991e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009974 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009922:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009926:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800992a:	e7dd      	b.n	80098e8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800992c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800993a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009942:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009978 <HAL_RCC_GetSysClockFreq+0x134>
 8009946:	e7ec      	b.n	8009922 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800995e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800997c <HAL_RCC_GetSysClockFreq+0x138>
 8009962:	e7de      	b.n	8009922 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009964:	4806      	ldr	r0, [pc, #24]	@ (8009980 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009966:	e783      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009968:	4806      	ldr	r0, [pc, #24]	@ (8009984 <HAL_RCC_GetSysClockFreq+0x140>)
 800996a:	e781      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x2c>
 800996c:	58024400 	.word	0x58024400
 8009970:	03d09000 	.word	0x03d09000
 8009974:	4c742400 	.word	0x4c742400
 8009978:	4bbebc20 	.word	0x4bbebc20
 800997c:	4a742400 	.word	0x4a742400
 8009980:	017d7840 	.word	0x017d7840
 8009984:	003d0900 	.word	0x003d0900

08009988 <HAL_RCC_ClockConfig>:
{
 8009988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800998e:	4604      	mov	r4, r0
 8009990:	b910      	cbnz	r0, 8009998 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009992:	2001      	movs	r0, #1
}
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009998:	4a88      	ldr	r2, [pc, #544]	@ (8009bbc <HAL_RCC_ClockConfig+0x234>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	428b      	cmp	r3, r1
 80099a2:	f0c0 8093 	bcc.w	8009acc <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	075f      	lsls	r7, r3, #29
 80099aa:	f100 809b 	bmi.w	8009ae4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ae:	071e      	lsls	r6, r3, #28
 80099b0:	d50b      	bpl.n	80099ca <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099b2:	4983      	ldr	r1, [pc, #524]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 80099b4:	6960      	ldr	r0, [r4, #20]
 80099b6:	69ca      	ldr	r2, [r1, #28]
 80099b8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80099bc:	4290      	cmp	r0, r2
 80099be:	d904      	bls.n	80099ca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099c0:	69ca      	ldr	r2, [r1, #28]
 80099c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80099c6:	4302      	orrs	r2, r0
 80099c8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099ca:	06d8      	lsls	r0, r3, #27
 80099cc:	d50b      	bpl.n	80099e6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099ce:	497c      	ldr	r1, [pc, #496]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 80099d0:	69a0      	ldr	r0, [r4, #24]
 80099d2:	69ca      	ldr	r2, [r1, #28]
 80099d4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80099d8:	4290      	cmp	r0, r2
 80099da:	d904      	bls.n	80099e6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099dc:	69ca      	ldr	r2, [r1, #28]
 80099de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80099e2:	4302      	orrs	r2, r0
 80099e4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099e6:	0699      	lsls	r1, r3, #26
 80099e8:	d50b      	bpl.n	8009a02 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099ea:	4975      	ldr	r1, [pc, #468]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 80099ec:	69e0      	ldr	r0, [r4, #28]
 80099ee:	6a0a      	ldr	r2, [r1, #32]
 80099f0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80099f4:	4290      	cmp	r0, r2
 80099f6:	d904      	bls.n	8009a02 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099f8:	6a0a      	ldr	r2, [r1, #32]
 80099fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80099fe:	4302      	orrs	r2, r0
 8009a00:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a02:	079a      	lsls	r2, r3, #30
 8009a04:	d50b      	bpl.n	8009a1e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a06:	496e      	ldr	r1, [pc, #440]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009a08:	68e0      	ldr	r0, [r4, #12]
 8009a0a:	698a      	ldr	r2, [r1, #24]
 8009a0c:	f002 020f 	and.w	r2, r2, #15
 8009a10:	4290      	cmp	r0, r2
 8009a12:	d904      	bls.n	8009a1e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a14:	698a      	ldr	r2, [r1, #24]
 8009a16:	f022 020f 	bic.w	r2, r2, #15
 8009a1a:	4302      	orrs	r2, r0
 8009a1c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a1e:	07df      	lsls	r7, r3, #31
 8009a20:	d46e      	bmi.n	8009b00 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	079e      	lsls	r6, r3, #30
 8009a26:	f100 80a1 	bmi.w	8009b6c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a2a:	4964      	ldr	r1, [pc, #400]	@ (8009bbc <HAL_RCC_ClockConfig+0x234>)
 8009a2c:	680a      	ldr	r2, [r1, #0]
 8009a2e:	f002 020f 	and.w	r2, r2, #15
 8009a32:	42aa      	cmp	r2, r5
 8009a34:	f200 80a8 	bhi.w	8009b88 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a38:	0758      	lsls	r0, r3, #29
 8009a3a:	f100 80b1 	bmi.w	8009ba0 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a3e:	0719      	lsls	r1, r3, #28
 8009a40:	d50b      	bpl.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a42:	495f      	ldr	r1, [pc, #380]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009a44:	6960      	ldr	r0, [r4, #20]
 8009a46:	69ca      	ldr	r2, [r1, #28]
 8009a48:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009a4c:	4290      	cmp	r0, r2
 8009a4e:	d204      	bcs.n	8009a5a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a50:	69ca      	ldr	r2, [r1, #28]
 8009a52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009a56:	4302      	orrs	r2, r0
 8009a58:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a5a:	06da      	lsls	r2, r3, #27
 8009a5c:	d50b      	bpl.n	8009a76 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a5e:	4958      	ldr	r1, [pc, #352]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009a60:	69a0      	ldr	r0, [r4, #24]
 8009a62:	69ca      	ldr	r2, [r1, #28]
 8009a64:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009a68:	4290      	cmp	r0, r2
 8009a6a:	d204      	bcs.n	8009a76 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a6c:	69ca      	ldr	r2, [r1, #28]
 8009a6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009a72:	4302      	orrs	r2, r0
 8009a74:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a76:	069b      	lsls	r3, r3, #26
 8009a78:	d50b      	bpl.n	8009a92 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a7a:	4a51      	ldr	r2, [pc, #324]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009a7c:	69e1      	ldr	r1, [r4, #28]
 8009a7e:	6a13      	ldr	r3, [r2, #32]
 8009a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a84:	4299      	cmp	r1, r3
 8009a86:	d204      	bcs.n	8009a92 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a88:	6a13      	ldr	r3, [r2, #32]
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a92:	f7ff fed7 	bl	8009844 <HAL_RCC_GetSysClockFreq>
 8009a96:	494a      	ldr	r1, [pc, #296]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009a98:	4a4a      	ldr	r2, [pc, #296]	@ (8009bc4 <HAL_RCC_ClockConfig+0x23c>)
 8009a9a:	698b      	ldr	r3, [r1, #24]
 8009a9c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009aa0:	5cd3      	ldrb	r3, [r2, r3]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009aa8:	698b      	ldr	r3, [r1, #24]
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	5cd3      	ldrb	r3, [r2, r3]
 8009ab0:	4a45      	ldr	r2, [pc, #276]	@ (8009bc8 <HAL_RCC_ClockConfig+0x240>)
 8009ab2:	f003 031f 	and.w	r3, r3, #31
 8009ab6:	fa20 f303 	lsr.w	r3, r0, r3
 8009aba:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009abc:	4b43      	ldr	r3, [pc, #268]	@ (8009bcc <HAL_RCC_ClockConfig+0x244>)
 8009abe:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009ac0:	4b43      	ldr	r3, [pc, #268]	@ (8009bd0 <HAL_RCC_ClockConfig+0x248>)
}
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	f7f7 bd4e 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009acc:	6813      	ldr	r3, [r2, #0]
 8009ace:	f023 030f 	bic.w	r3, r3, #15
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	428b      	cmp	r3, r1
 8009ade:	f47f af58 	bne.w	8009992 <HAL_RCC_ClockConfig+0xa>
 8009ae2:	e760      	b.n	80099a6 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ae4:	4936      	ldr	r1, [pc, #216]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009ae6:	6920      	ldr	r0, [r4, #16]
 8009ae8:	698a      	ldr	r2, [r1, #24]
 8009aea:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009aee:	4290      	cmp	r0, r2
 8009af0:	f67f af5d 	bls.w	80099ae <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009af4:	698a      	ldr	r2, [r1, #24]
 8009af6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009afa:	4302      	orrs	r2, r0
 8009afc:	618a      	str	r2, [r1, #24]
 8009afe:	e756      	b.n	80099ae <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009b00:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009b02:	68a1      	ldr	r1, [r4, #8]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b0e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b10:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b12:	2902      	cmp	r1, #2
 8009b14:	d11d      	bne.n	8009b52 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b16:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b1a:	f43f af3a 	beq.w	8009992 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b1e:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b20:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b24:	4f26      	ldr	r7, [pc, #152]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b26:	f022 0207 	bic.w	r2, r2, #7
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009b2e:	f7fc f9df 	bl	8005ef0 <HAL_GetTick>
 8009b32:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	6862      	ldr	r2, [r4, #4]
 8009b38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b3c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009b40:	f43f af6f 	beq.w	8009a22 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b44:	f7fc f9d4 	bl	8005ef0 <HAL_GetTick>
 8009b48:	1b80      	subs	r0, r0, r6
 8009b4a:	4540      	cmp	r0, r8
 8009b4c:	d9f2      	bls.n	8009b34 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009b4e:	2003      	movs	r0, #3
 8009b50:	e720      	b.n	8009994 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b52:	2903      	cmp	r1, #3
 8009b54:	d102      	bne.n	8009b5c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b56:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b5a:	e7de      	b.n	8009b1a <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b5c:	2901      	cmp	r1, #1
 8009b5e:	d102      	bne.n	8009b66 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b60:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009b64:	e7d9      	b.n	8009b1a <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b66:	f012 0f04 	tst.w	r2, #4
 8009b6a:	e7d6      	b.n	8009b1a <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b6c:	4914      	ldr	r1, [pc, #80]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009b6e:	68e0      	ldr	r0, [r4, #12]
 8009b70:	698a      	ldr	r2, [r1, #24]
 8009b72:	f002 020f 	and.w	r2, r2, #15
 8009b76:	4290      	cmp	r0, r2
 8009b78:	f4bf af57 	bcs.w	8009a2a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b7c:	698a      	ldr	r2, [r1, #24]
 8009b7e:	f022 020f 	bic.w	r2, r2, #15
 8009b82:	4302      	orrs	r2, r0
 8009b84:	618a      	str	r2, [r1, #24]
 8009b86:	e750      	b.n	8009a2a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b88:	680a      	ldr	r2, [r1, #0]
 8009b8a:	f022 020f 	bic.w	r2, r2, #15
 8009b8e:	432a      	orrs	r2, r5
 8009b90:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b92:	680a      	ldr	r2, [r1, #0]
 8009b94:	f002 020f 	and.w	r2, r2, #15
 8009b98:	42aa      	cmp	r2, r5
 8009b9a:	f47f aefa 	bne.w	8009992 <HAL_RCC_ClockConfig+0xa>
 8009b9e:	e74b      	b.n	8009a38 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ba0:	4907      	ldr	r1, [pc, #28]	@ (8009bc0 <HAL_RCC_ClockConfig+0x238>)
 8009ba2:	6920      	ldr	r0, [r4, #16]
 8009ba4:	698a      	ldr	r2, [r1, #24]
 8009ba6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009baa:	4290      	cmp	r0, r2
 8009bac:	f4bf af47 	bcs.w	8009a3e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009bb0:	698a      	ldr	r2, [r1, #24]
 8009bb2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009bb6:	4302      	orrs	r2, r0
 8009bb8:	618a      	str	r2, [r1, #24]
 8009bba:	e740      	b.n	8009a3e <HAL_RCC_ClockConfig+0xb6>
 8009bbc:	52002000 	.word	0x52002000
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	08024d2c 	.word	0x08024d2c
 8009bc8:	24000068 	.word	0x24000068
 8009bcc:	2400006c 	.word	0x2400006c
 8009bd0:	24000074 	.word	0x24000074

08009bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bd4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009bd6:	f7ff fe35 	bl	8009844 <HAL_RCC_GetSysClockFreq>
 8009bda:	4a0b      	ldr	r2, [pc, #44]	@ (8009c08 <HAL_RCC_GetHCLKFreq+0x34>)
 8009bdc:	490b      	ldr	r1, [pc, #44]	@ (8009c0c <HAL_RCC_GetHCLKFreq+0x38>)
 8009bde:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009be0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009be2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009be6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009bea:	5ccb      	ldrb	r3, [r1, r3]
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bf4:	5c88      	ldrb	r0, [r1, r2]
 8009bf6:	4a06      	ldr	r2, [pc, #24]	@ (8009c10 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009bf8:	f000 001f 	and.w	r0, r0, #31
 8009bfc:	fa23 f000 	lsr.w	r0, r3, r0
 8009c00:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c02:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <HAL_RCC_GetHCLKFreq+0x40>)
 8009c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009c06:	bd08      	pop	{r3, pc}
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	08024d2c 	.word	0x08024d2c
 8009c10:	24000068 	.word	0x24000068
 8009c14:	2400006c 	.word	0x2400006c

08009c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c18:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c1a:	f7ff ffdb 	bl	8009bd4 <HAL_RCC_GetHCLKFreq>
 8009c1e:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c20:	4a05      	ldr	r2, [pc, #20]	@ (8009c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009c28:	5cd3      	ldrb	r3, [r2, r3]
 8009c2a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c2e:	40d8      	lsrs	r0, r3
 8009c30:	bd08      	pop	{r3, pc}
 8009c32:	bf00      	nop
 8009c34:	58024400 	.word	0x58024400
 8009c38:	08024d2c 	.word	0x08024d2c

08009c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c3e:	f7ff ffc9 	bl	8009bd4 <HAL_RCC_GetHCLKFreq>
 8009c42:	4b05      	ldr	r3, [pc, #20]	@ (8009c58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009c44:	4a05      	ldr	r2, [pc, #20]	@ (8009c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009c4c:	5cd3      	ldrb	r3, [r2, r3]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c52:	40d8      	lsrs	r0, r3
 8009c54:	bd08      	pop	{r3, pc}
 8009c56:	bf00      	nop
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	08024d2c 	.word	0x08024d2c

08009c60 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009c60:	233f      	movs	r3, #63	@ 0x3f
 8009c62:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c64:	4b11      	ldr	r3, [pc, #68]	@ (8009cac <HAL_RCC_GetClockConfig+0x4c>)
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	f002 0207 	and.w	r2, r2, #7
 8009c6c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009c6e:	699a      	ldr	r2, [r3, #24]
 8009c70:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009c74:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	f002 020f 	and.w	r2, r2, #15
 8009c7c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c84:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009c86:	69da      	ldr	r2, [r3, #28]
 8009c88:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c8c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009c8e:	69da      	ldr	r2, [r3, #28]
 8009c90:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009c94:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c9c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c9e:	4b04      	ldr	r3, [pc, #16]	@ (8009cb0 <HAL_RCC_GetClockConfig+0x50>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	600b      	str	r3, [r1, #0]
}
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	52002000 	.word	0x52002000

08009cb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cb6:	4c3a      	ldr	r4, [pc, #232]	@ (8009da0 <RCCEx_PLL2_Config+0xec>)
{
 8009cb8:	4606      	mov	r6, r0
 8009cba:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d069      	beq.n	8009d9a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ccc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cce:	f7fc f90f 	bl	8005ef0 <HAL_GetTick>
 8009cd2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	011a      	lsls	r2, r3, #4
 8009cd8:	d44b      	bmi.n	8009d72 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009cda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009cdc:	6832      	ldr	r2, [r6, #0]
 8009cde:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009ce2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009ce6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ce8:	68b3      	ldr	r3, [r6, #8]
 8009cea:	68f2      	ldr	r2, [r6, #12]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	3a01      	subs	r2, #1
 8009cf0:	025b      	lsls	r3, r3, #9
 8009cf2:	0412      	lsls	r2, r2, #16
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	6872      	ldr	r2, [r6, #4]
 8009cfe:	3a01      	subs	r2, #1
 8009d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d04:	4313      	orrs	r3, r2
 8009d06:	6932      	ldr	r2, [r6, #16]
 8009d08:	3a01      	subs	r2, #1
 8009d0a:	0612      	lsls	r2, r2, #24
 8009d0c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d10:	4313      	orrs	r3, r2
 8009d12:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d16:	6972      	ldr	r2, [r6, #20]
 8009d18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d22:	69b2      	ldr	r2, [r6, #24]
 8009d24:	f023 0320 	bic.w	r3, r3, #32
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d2e:	f023 0310 	bic.w	r3, r3, #16
 8009d32:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d36:	69f2      	ldr	r2, [r6, #28]
 8009d38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d3c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009d44:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d48:	f043 0310 	orr.w	r3, r3, #16
 8009d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009d50:	b9b5      	cbnz	r5, 8009d80 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d56:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d58:	4c11      	ldr	r4, [pc, #68]	@ (8009da0 <RCCEx_PLL2_Config+0xec>)
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d60:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d62:	f7fc f8c5 	bl	8005ef0 <HAL_GetTick>
 8009d66:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	d50f      	bpl.n	8009d8e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e005      	b.n	8009d7e <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d72:	f7fc f8bd 	bl	8005ef0 <HAL_GetTick>
 8009d76:	1bc0      	subs	r0, r0, r7
 8009d78:	2802      	cmp	r0, #2
 8009d7a:	d9ab      	bls.n	8009cd4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009d7c:	2003      	movs	r0, #3
}
 8009d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d80:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d82:	bf0c      	ite	eq
 8009d84:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d88:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8009d8c:	e7e3      	b.n	8009d56 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d8e:	f7fc f8af 	bl	8005ef0 <HAL_GetTick>
 8009d92:	1b40      	subs	r0, r0, r5
 8009d94:	2802      	cmp	r0, #2
 8009d96:	d9e7      	bls.n	8009d68 <RCCEx_PLL2_Config+0xb4>
 8009d98:	e7f0      	b.n	8009d7c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	e7ef      	b.n	8009d7e <RCCEx_PLL2_Config+0xca>
 8009d9e:	bf00      	nop
 8009da0:	58024400 	.word	0x58024400

08009da4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009da6:	4c3a      	ldr	r4, [pc, #232]	@ (8009e90 <RCCEx_PLL3_Config+0xec>)
{
 8009da8:	4606      	mov	r6, r0
 8009daa:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d069      	beq.n	8009e8a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dbc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dbe:	f7fc f897 	bl	8005ef0 <HAL_GetTick>
 8009dc2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	009a      	lsls	r2, r3, #2
 8009dc8:	d44b      	bmi.n	8009e62 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009dca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009dcc:	6832      	ldr	r2, [r6, #0]
 8009dce:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8009dd2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009dd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009dd8:	68b3      	ldr	r3, [r6, #8]
 8009dda:	68f2      	ldr	r2, [r6, #12]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	3a01      	subs	r2, #1
 8009de0:	025b      	lsls	r3, r3, #9
 8009de2:	0412      	lsls	r2, r2, #16
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009dea:	4313      	orrs	r3, r2
 8009dec:	6872      	ldr	r2, [r6, #4]
 8009dee:	3a01      	subs	r2, #1
 8009df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009df4:	4313      	orrs	r3, r2
 8009df6:	6932      	ldr	r2, [r6, #16]
 8009df8:	3a01      	subs	r2, #1
 8009dfa:	0612      	lsls	r2, r2, #24
 8009dfc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e00:	4313      	orrs	r3, r2
 8009e02:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e06:	6972      	ldr	r2, [r6, #20]
 8009e08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e12:	69b2      	ldr	r2, [r6, #24]
 8009e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e22:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e24:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e26:	69f2      	ldr	r2, [r6, #28]
 8009e28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e2c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009e34:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009e40:	b9b5      	cbnz	r5, 8009e70 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e46:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e48:	4c11      	ldr	r4, [pc, #68]	@ (8009e90 <RCCEx_PLL3_Config+0xec>)
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e50:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e52:	f7fc f84d 	bl	8005ef0 <HAL_GetTick>
 8009e56:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	d50f      	bpl.n	8009e7e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8009e5e:	2000      	movs	r0, #0
 8009e60:	e005      	b.n	8009e6e <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e62:	f7fc f845 	bl	8005ef0 <HAL_GetTick>
 8009e66:	1bc0      	subs	r0, r0, r7
 8009e68:	2802      	cmp	r0, #2
 8009e6a:	d9ab      	bls.n	8009dc4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009e6c:	2003      	movs	r0, #3
}
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e70:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e72:	bf0c      	ite	eq
 8009e74:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e78:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8009e7c:	e7e3      	b.n	8009e46 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e7e:	f7fc f837 	bl	8005ef0 <HAL_GetTick>
 8009e82:	1b40      	subs	r0, r0, r5
 8009e84:	2802      	cmp	r0, #2
 8009e86:	d9e7      	bls.n	8009e58 <RCCEx_PLL3_Config+0xb4>
 8009e88:	e7f0      	b.n	8009e6c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	e7ef      	b.n	8009e6e <RCCEx_PLL3_Config+0xca>
 8009e8e:	bf00      	nop
 8009e90:	58024400 	.word	0x58024400

08009e94 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e98:	6803      	ldr	r3, [r0, #0]
{
 8009e9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e9c:	011c      	lsls	r4, r3, #4
 8009e9e:	d51e      	bpl.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ea0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8009ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea6:	d02a      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009ea8:	d80f      	bhi.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009eaa:	b1d3      	cbz	r3, 8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eb0:	d01d      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8009eb2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	05d8      	lsls	r0, r3, #23
 8009eb8:	d54f      	bpl.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009eba:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d84b      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8009ec0:	e8df f003 	tbb	[pc, r3]
 8009ec4:	27443d22 	.word	0x27443d22
 8009ec8:	27          	.byte	0x27
 8009ec9:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009eca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ece:	d1f0      	bne.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ed0:	4a86      	ldr	r2, [pc, #536]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ed2:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8009ed4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009ed6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009eda:	430b      	orrs	r3, r1
 8009edc:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ede:	2600      	movs	r6, #0
 8009ee0:	e7e8      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee2:	4a82      	ldr	r2, [pc, #520]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ee4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8009eec:	e7f0      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eee:	2102      	movs	r1, #2
 8009ef0:	3008      	adds	r0, #8
 8009ef2:	f7ff fedf 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ef6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d1db      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8009efc:	e7e8      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009efe:	2102      	movs	r1, #2
 8009f00:	3028      	adds	r0, #40	@ 0x28
 8009f02:	f7ff ff4f 	bl	8009da4 <RCCEx_PLL3_Config>
 8009f06:	e7f6      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f08:	4a78      	ldr	r2, [pc, #480]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f0a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009f12:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8009f14:	bb1c      	cbnz	r4, 8009f5e <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f16:	4a75      	ldr	r2, [pc, #468]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f18:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8009f1a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f1c:	f023 0307 	bic.w	r3, r3, #7
 8009f20:	430b      	orrs	r3, r1
 8009f22:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	0599      	lsls	r1, r3, #22
 8009f28:	d528      	bpl.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009f2a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8009f2c:	2b80      	cmp	r3, #128	@ 0x80
 8009f2e:	d043      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8009f30:	d817      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8009f32:	b3a3      	cbz	r3, 8009f9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8009f34:	2b40      	cmp	r3, #64	@ 0x40
 8009f36:	d038      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009f38:	2601      	movs	r6, #1
 8009f3a:	4634      	mov	r4, r6
 8009f3c:	e01e      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f105 0008 	add.w	r0, r5, #8
 8009f44:	f7ff feb6 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f48:	4604      	mov	r4, r0
        break;
 8009f4a:	e7e3      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8009f52:	f7ff ff27 	bl	8009da4 <RCCEx_PLL3_Config>
 8009f56:	e7f7      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f58:	2601      	movs	r6, #1
 8009f5a:	4634      	mov	r4, r6
 8009f5c:	e7e2      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f5e:	4626      	mov	r6, r4
 8009f60:	e7e0      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f64:	d002      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8009f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f6a:	d1e5      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 8009f6c:	bb54      	cbnz	r4, 8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f6e:	4a5f      	ldr	r2, [pc, #380]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f70:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009f72:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f74:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	055a      	lsls	r2, r3, #21
 8009f80:	d531      	bpl.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009f82:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8009f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f8a:	d049      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f8c:	d81c      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d039      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f96:	d03c      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8009f98:	2601      	movs	r6, #1
 8009f9a:	4634      	mov	r4, r6
 8009f9c:	e023      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9e:	4a53      	ldr	r2, [pc, #332]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009fa0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8009fa8:	e7e0      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009faa:	2100      	movs	r1, #0
 8009fac:	f105 0008 	add.w	r0, r5, #8
 8009fb0:	f7ff fe80 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fb4:	4604      	mov	r4, r0
        break;
 8009fb6:	e7d9      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8009fbe:	f7ff fef1 	bl	8009da4 <RCCEx_PLL3_Config>
 8009fc2:	e7f7      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009fc4:	4626      	mov	r6, r4
 8009fc6:	e7d9      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fcc:	d002      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8009fce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fd2:	d1e1      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 8009fd4:	bb54      	cbnz	r4, 800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009fd6:	4a45      	ldr	r2, [pc, #276]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009fd8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8009fdc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009fde:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	051b      	lsls	r3, r3, #20
 8009fea:	d530      	bpl.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009fec:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8009ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ff4:	d045      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009ff6:	d81b      	bhi.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009ff8:	b3b3      	cbz	r3, 800a068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ffe:	d039      	beq.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a000:	2601      	movs	r6, #1
 800a002:	4634      	mov	r4, r6
 800a004:	e023      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a006:	4a39      	ldr	r2, [pc, #228]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a008:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a00a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a00e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a010:	e7e0      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a012:	2100      	movs	r1, #0
 800a014:	f105 0008 	add.w	r0, r5, #8
 800a018:	f7ff fe4c 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a01c:	4604      	mov	r4, r0
        break;
 800a01e:	e7d9      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a020:	2100      	movs	r1, #0
 800a022:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a026:	f7ff febd 	bl	8009da4 <RCCEx_PLL3_Config>
 800a02a:	e7f7      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a02c:	4626      	mov	r6, r4
 800a02e:	e7da      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a030:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a034:	d002      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a03a:	d1e1      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a03c:	bb3c      	cbnz	r4, 800a08e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a03e:	4a2b      	ldr	r2, [pc, #172]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a040:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a044:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a046:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a04a:	430b      	orrs	r3, r1
 800a04c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	019f      	lsls	r7, r3, #6
 800a052:	d528      	bpl.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a054:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a056:	2b20      	cmp	r3, #32
 800a058:	d03e      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a05a:	d81a      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a05c:	b1db      	cbz	r3, 800a096 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d034      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a062:	2601      	movs	r6, #1
 800a064:	4634      	mov	r4, r6
 800a066:	e01e      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a068:	4a20      	ldr	r2, [pc, #128]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a06a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a06c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a070:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a072:	e7e3      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a074:	2100      	movs	r1, #0
 800a076:	f105 0008 	add.w	r0, r5, #8
 800a07a:	f7ff fe1b 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a07e:	4604      	mov	r4, r0
        break;
 800a080:	e7dc      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a082:	2100      	movs	r1, #0
 800a084:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a088:	f7ff fe8c 	bl	8009da4 <RCCEx_PLL3_Config>
 800a08c:	e7f7      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a08e:	4626      	mov	r6, r4
 800a090:	e7dd      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a092:	2b30      	cmp	r3, #48	@ 0x30
 800a094:	d1e5      	bne.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a096:	bb34      	cbnz	r4, 800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a098:	4a14      	ldr	r2, [pc, #80]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a09a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a09c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a09e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a0a2:	430b      	orrs	r3, r1
 800a0a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0a6:	682b      	ldr	r3, [r5, #0]
 800a0a8:	04d8      	lsls	r0, r3, #19
 800a0aa:	d530      	bpl.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0b2:	f000 8097 	beq.w	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a0b6:	d81b      	bhi.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 8086 	beq.w	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a0be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0c2:	f000 8088 	beq.w	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a0c6:	2601      	movs	r6, #1
 800a0c8:	4634      	mov	r4, r6
 800a0ca:	e020      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0cc:	4a07      	ldr	r2, [pc, #28]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a0d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a0d6:	e7de      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0d8:	2102      	movs	r1, #2
 800a0da:	f105 0008 	add.w	r0, r5, #8
 800a0de:	f7ff fde9 	bl	8009cb4 <RCCEx_PLL2_Config>
 800a0e2:	4604      	mov	r4, r0
        break;
 800a0e4:	e7d7      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a0e6:	4626      	mov	r6, r4
 800a0e8:	e7dd      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a0ea:	bf00      	nop
 800a0ec:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0f4:	d002      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a0f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0fa:	d1e4      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d177      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a100:	4a9e      	ldr	r2, [pc, #632]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a102:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a104:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	0499      	lsls	r1, r3, #18
 800a112:	d50c      	bpl.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a114:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11a:	f000 8083 	beq.w	800a224 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a11e:	d869      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d06f      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a128:	d075      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a12a:	2601      	movs	r6, #1
 800a12c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	045a      	lsls	r2, r3, #17
 800a132:	d50e      	bpl.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a134:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a13c:	f000 8093 	beq.w	800a266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a140:	d878      	bhi.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d07e      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a14a:	f000 8085 	beq.w	800a258 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a14e:	2601      	movs	r6, #1
 800a150:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	015b      	lsls	r3, r3, #5
 800a156:	d515      	bpl.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a158:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a15a:	b14b      	cbz	r3, 800a170 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a15c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a160:	f040 8089 	bne.w	800a276 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a164:	2101      	movs	r1, #1
 800a166:	f105 0008 	add.w	r0, r5, #8
 800a16a:	f7ff fda3 	bl	8009cb4 <RCCEx_PLL2_Config>
 800a16e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a170:	2c00      	cmp	r4, #0
 800a172:	f040 8083 	bne.w	800a27c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a176:	4a81      	ldr	r2, [pc, #516]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a178:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a17a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a17c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a180:	430b      	orrs	r3, r1
 800a182:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	041f      	lsls	r7, r3, #16
 800a188:	d511      	bpl.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a18a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a18c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a190:	d076      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a196:	d079      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d17e      	bne.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	d17f      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1a0:	4a76      	ldr	r2, [pc, #472]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a1a2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a1a4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1a6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	01d8      	lsls	r0, r3, #7
 800a1b2:	f140 8085 	bpl.w	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a1b6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	f200 80e5 	bhi.w	800a388 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a1be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a1c2:	0076      	.short	0x0076
 800a1c4:	00d50071 	.word	0x00d50071
 800a1c8:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ca:	4a6c      	ldr	r2, [pc, #432]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a1cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a1ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a1d4:	e792      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	f105 0008 	add.w	r0, r5, #8
 800a1dc:	f7ff fd6a 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1e0:	4604      	mov	r4, r0
        break;
 800a1e2:	e78b      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a1ea:	f7ff fddb 	bl	8009da4 <RCCEx_PLL3_Config>
 800a1ee:	e7f7      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a1f0:	4626      	mov	r6, r4
 800a1f2:	e78c      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a1f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1f8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a1fc:	d002      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a1fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a202:	d192      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a204:	b9a4      	cbnz	r4, 800a230 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a206:	4a5d      	ldr	r2, [pc, #372]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a208:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a20a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a20c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a210:	430b      	orrs	r3, r1
 800a212:	6513      	str	r3, [r2, #80]	@ 0x50
 800a214:	e78b      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a216:	2101      	movs	r1, #1
 800a218:	f105 0008 	add.w	r0, r5, #8
 800a21c:	f7ff fd4a 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a220:	4604      	mov	r4, r0
        break;
 800a222:	e7ef      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a224:	2101      	movs	r1, #1
 800a226:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a22a:	f7ff fdbb 	bl	8009da4 <RCCEx_PLL3_Config>
 800a22e:	e7f7      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a230:	4626      	mov	r6, r4
 800a232:	e77c      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a234:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a238:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a23c:	d002      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a23e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a242:	d184      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a244:	b9ac      	cbnz	r4, 800a272 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a246:	4a4d      	ldr	r2, [pc, #308]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a248:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a24c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a24e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a252:	430b      	orrs	r3, r1
 800a254:	6593      	str	r3, [r2, #88]	@ 0x58
 800a256:	e77c      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a258:	2101      	movs	r1, #1
 800a25a:	f105 0008 	add.w	r0, r5, #8
 800a25e:	f7ff fd29 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a262:	4604      	mov	r4, r0
        break;
 800a264:	e7ee      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a266:	2101      	movs	r1, #1
 800a268:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a26c:	f7ff fd9a 	bl	8009da4 <RCCEx_PLL3_Config>
 800a270:	e7f7      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a272:	4626      	mov	r6, r4
 800a274:	e76d      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a276:	2601      	movs	r6, #1
 800a278:	4634      	mov	r4, r6
 800a27a:	e783      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800a27c:	4626      	mov	r6, r4
 800a27e:	e781      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a280:	4a3e      	ldr	r2, [pc, #248]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a282:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a288:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a28a:	e787      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a28c:	2101      	movs	r1, #1
 800a28e:	f105 0008 	add.w	r0, r5, #8
 800a292:	f7ff fd0f 	bl	8009cb4 <RCCEx_PLL2_Config>
 800a296:	4604      	mov	r4, r0
        break;
 800a298:	e780      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a29a:	2601      	movs	r6, #1
 800a29c:	4634      	mov	r4, r6
 800a29e:	e786      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800a2a0:	4626      	mov	r6, r4
 800a2a2:	e784      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a4:	4a35      	ldr	r2, [pc, #212]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2a6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a2ae:	2c00      	cmp	r4, #0
 800a2b0:	d16d      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a2b2:	4a32      	ldr	r2, [pc, #200]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2b4:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a2b6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a2b8:	f023 0303 	bic.w	r3, r3, #3
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	0259      	lsls	r1, r3, #9
 800a2c4:	d539      	bpl.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2c6:	4f2e      	ldr	r7, [pc, #184]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2ce:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a2d0:	f7fb fe0e 	bl	8005ef0 <HAL_GetTick>
 800a2d4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	05da      	lsls	r2, r3, #23
 800a2da:	d55a      	bpl.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800a2dc:	2c00      	cmp	r4, #0
 800a2de:	d176      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a2e0:	4b26      	ldr	r3, [pc, #152]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2e2:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a2e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2e8:	4042      	eors	r2, r0
 800a2ea:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a2ee:	d00b      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2f2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2f8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a2fc:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a300:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a304:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a306:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a308:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a30c:	d04a      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a30e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a312:	491a      	ldr	r1, [pc, #104]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a314:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a318:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a31c:	d153      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800a31e:	6908      	ldr	r0, [r1, #16]
 800a320:	4a18      	ldr	r2, [pc, #96]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800a322:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a326:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a32a:	4302      	orrs	r2, r0
 800a32c:	610a      	str	r2, [r1, #16]
 800a32e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a332:	4a12      	ldr	r2, [pc, #72]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a334:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a336:	430b      	orrs	r3, r1
 800a338:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	07d8      	lsls	r0, r3, #31
 800a33e:	d50a      	bpl.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a340:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a344:	2b10      	cmp	r3, #16
 800a346:	d05b      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a348:	d843      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d047      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d04f      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a352:	2601      	movs	r6, #1
 800a354:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a356:	682b      	ldr	r3, [r5, #0]
 800a358:	0799      	lsls	r1, r3, #30
 800a35a:	d567      	bpl.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a35c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a35e:	2b05      	cmp	r3, #5
 800a360:	d87a      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a362:	e8df f003 	tbb	[pc, r3]
 800a366:	555b      	.short	0x555b
 800a368:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a36c:	2102      	movs	r1, #2
 800a36e:	f105 0008 	add.w	r0, r5, #8
 800a372:	f7ff fc9f 	bl	8009cb4 <RCCEx_PLL2_Config>
 800a376:	4604      	mov	r4, r0
        break;
 800a378:	e799      	b.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a37a:	bf00      	nop
 800a37c:	58024400 	.word	0x58024400
 800a380:	58024800 	.word	0x58024800
 800a384:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800a388:	2601      	movs	r6, #1
 800a38a:	4634      	mov	r4, r6
 800a38c:	e798      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a38e:	4626      	mov	r6, r4
 800a390:	e796      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a392:	f7fb fdad 	bl	8005ef0 <HAL_GetTick>
 800a396:	eba0 0008 	sub.w	r0, r0, r8
 800a39a:	2864      	cmp	r0, #100	@ 0x64
 800a39c:	d99b      	bls.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800a39e:	2603      	movs	r6, #3
 800a3a0:	4634      	mov	r4, r6
 800a3a2:	e7ca      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800a3a4:	f7fb fda4 	bl	8005ef0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800a3ac:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ae:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b2:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a3b6:	079b      	lsls	r3, r3, #30
 800a3b8:	d4a9      	bmi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ba:	f7fb fd99 	bl	8005ef0 <HAL_GetTick>
 800a3be:	1bc0      	subs	r0, r0, r7
 800a3c0:	4548      	cmp	r0, r9
 800a3c2:	d9f6      	bls.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a3c4:	e7eb      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3c6:	690a      	ldr	r2, [r1, #16]
 800a3c8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a3cc:	e7ae      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a3ce:	4626      	mov	r6, r4
 800a3d0:	e7b3      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a3d2:	f023 0208 	bic.w	r2, r3, #8
 800a3d6:	2a20      	cmp	r2, #32
 800a3d8:	d001      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a3da:	2b18      	cmp	r3, #24
 800a3dc:	d1b9      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800a3de:	b9ac      	cbnz	r4, 800a40c <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a3e0:	4a20      	ldr	r2, [pc, #128]	@ (800a464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a3e2:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a3e6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a3e8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3f0:	e7b1      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	f105 0008 	add.w	r0, r5, #8
 800a3f8:	f7ff fc5c 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3fc:	4604      	mov	r4, r0
        break;
 800a3fe:	e7ee      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a400:	2101      	movs	r1, #1
 800a402:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a406:	f7ff fccd 	bl	8009da4 <RCCEx_PLL3_Config>
 800a40a:	e7f7      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x568>
 800a40c:	4626      	mov	r6, r4
 800a40e:	e7a2      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a410:	2101      	movs	r1, #1
 800a412:	f105 0008 	add.w	r0, r5, #8
 800a416:	f7ff fc4d 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a41a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a41c:	b9fc      	cbnz	r4, 800a45e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a41e:	4a11      	ldr	r2, [pc, #68]	@ (800a464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a420:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a422:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a424:	f023 0307 	bic.w	r3, r3, #7
 800a428:	430b      	orrs	r3, r1
 800a42a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	075a      	lsls	r2, r3, #29
 800a430:	d52b      	bpl.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a432:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a436:	2b05      	cmp	r3, #5
 800a438:	f200 816e 	bhi.w	800a718 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a43c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a440:	0014001a 	.word	0x0014001a
 800a444:	001a0166 	.word	0x001a0166
 800a448:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a44c:	2101      	movs	r1, #1
 800a44e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a452:	f7ff fca7 	bl	8009da4 <RCCEx_PLL3_Config>
 800a456:	e7e0      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a458:	2601      	movs	r6, #1
 800a45a:	4634      	mov	r4, r6
 800a45c:	e7e6      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a45e:	4626      	mov	r6, r4
 800a460:	e7e4      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a462:	bf00      	nop
 800a464:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a468:	2101      	movs	r1, #1
 800a46a:	f105 0008 	add.w	r0, r5, #8
 800a46e:	f7ff fc21 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a472:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a474:	2c00      	cmp	r4, #0
 800a476:	f040 8152 	bne.w	800a71e <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a47a:	4aaa      	ldr	r2, [pc, #680]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a47c:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a480:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a482:	f023 0307 	bic.w	r3, r3, #7
 800a486:	430b      	orrs	r3, r1
 800a488:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	069b      	lsls	r3, r3, #26
 800a48e:	d510      	bpl.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a490:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a498:	f000 8160 	beq.w	800a75c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800a49c:	f200 8144 	bhi.w	800a728 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 814a 	beq.w	800a73a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a4a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4aa:	f000 8150 	beq.w	800a74e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a4ae:	2601      	movs	r6, #1
 800a4b0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	065f      	lsls	r7, r3, #25
 800a4b6:	d510      	bpl.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4b8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a4bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c0:	f000 816e 	beq.w	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a4c4:	f200 8152 	bhi.w	800a76c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8158 	beq.w	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a4ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4d2:	f000 815e 	beq.w	800a792 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a4d6:	2601      	movs	r6, #1
 800a4d8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	0618      	lsls	r0, r3, #24
 800a4de:	d510      	bpl.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a4e0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a4e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4e8:	f000 817c 	beq.w	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a4ec:	f200 8160 	bhi.w	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 8166 	beq.w	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a4f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4fa:	f000 816c 	beq.w	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a4fe:	2601      	movs	r6, #1
 800a500:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	0719      	lsls	r1, r3, #28
 800a506:	d514      	bpl.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a508:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a50c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a510:	d107      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a512:	2102      	movs	r1, #2
 800a514:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a518:	f7ff fc44 	bl	8009da4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a51c:	2800      	cmp	r0, #0
 800a51e:	bf18      	it	ne
 800a520:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a522:	4a80      	ldr	r2, [pc, #512]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a524:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a528:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a52a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a52e:	430b      	orrs	r3, r1
 800a530:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a532:	682b      	ldr	r3, [r5, #0]
 800a534:	06da      	lsls	r2, r3, #27
 800a536:	d514      	bpl.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a538:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a540:	d107      	bne.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a542:	2102      	movs	r1, #2
 800a544:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a548:	f7ff fc2c 	bl	8009da4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a54c:	2800      	cmp	r0, #0
 800a54e:	bf18      	it	ne
 800a550:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a552:	4a74      	ldr	r2, [pc, #464]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a554:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a558:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a55a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a55e:	430b      	orrs	r3, r1
 800a560:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a562:	682b      	ldr	r3, [r5, #0]
 800a564:	031b      	lsls	r3, r3, #12
 800a566:	d51b      	bpl.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800a568:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a56c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a570:	f000 8140 	beq.w	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a574:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a578:	d007      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800a57a:	2900      	cmp	r1, #0
 800a57c:	f040 8140 	bne.w	800a800 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a580:	f105 0008 	add.w	r0, r5, #8
 800a584:	f7ff fb96 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a588:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	f040 813b 	bne.w	800a806 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a590:	4a64      	ldr	r2, [pc, #400]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a592:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a596:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a598:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a59c:	430b      	orrs	r3, r1
 800a59e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	035f      	lsls	r7, r3, #13
 800a5a4:	d50f      	bpl.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800a5a6:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a5aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5ae:	f000 813b 	beq.w	800a828 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800a5b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a5b6:	f000 812d 	beq.w	800a814 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a5ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5be:	f000 8124 	beq.w	800a80a <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a5c2:	2601      	movs	r6, #1
 800a5c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a5c6:	682b      	ldr	r3, [r5, #0]
 800a5c8:	03d8      	lsls	r0, r3, #15
 800a5ca:	d509      	bpl.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a5cc:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8133 	beq.w	800a83a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800a5d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d8:	f000 813d 	beq.w	800a856 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a5dc:	2601      	movs	r6, #1
 800a5de:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	0099      	lsls	r1, r3, #2
 800a5e4:	d507      	bpl.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a5ec:	f7ff fbda 	bl	8009da4 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	bf18      	it	ne
 800a5f4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5f6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a5fa:	039a      	lsls	r2, r3, #14
 800a5fc:	f140 8143 	bpl.w	800a886 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800a600:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a604:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a608:	f000 813f 	beq.w	800a88a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800a60c:	f200 812c 	bhi.w	800a868 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a610:	2800      	cmp	r0, #0
 800a612:	f000 812f 	beq.w	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800a616:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a618:	02df      	lsls	r7, r3, #11
 800a61a:	d506      	bpl.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a61c:	4841      	ldr	r0, [pc, #260]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a61e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a620:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a622:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a626:	4332      	orrs	r2, r6
 800a628:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a62a:	00de      	lsls	r6, r3, #3
 800a62c:	d507      	bpl.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a62e:	483d      	ldr	r0, [pc, #244]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a630:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a634:	6902      	ldr	r2, [r0, #16]
 800a636:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a63a:	4332      	orrs	r2, r6
 800a63c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a63e:	0298      	lsls	r0, r3, #10
 800a640:	d506      	bpl.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a642:	4838      	ldr	r0, [pc, #224]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a644:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a646:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a648:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a64c:	4332      	orrs	r2, r6
 800a64e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a650:	005a      	lsls	r2, r3, #1
 800a652:	d509      	bpl.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a654:	4a33      	ldr	r2, [pc, #204]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a656:	6910      	ldr	r0, [r2, #16]
 800a658:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a65c:	6110      	str	r0, [r2, #16]
 800a65e:	6910      	ldr	r0, [r2, #16]
 800a660:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a664:	4330      	orrs	r0, r6
 800a666:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da06      	bge.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a66c:	482d      	ldr	r0, [pc, #180]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a66e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a670:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a672:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a676:	4332      	orrs	r2, r6
 800a678:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a67a:	021f      	lsls	r7, r3, #8
 800a67c:	d507      	bpl.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a67e:	4a29      	ldr	r2, [pc, #164]	@ (800a724 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a680:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a684:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a686:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a68a:	4303      	orrs	r3, r0
 800a68c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a68e:	07ce      	lsls	r6, r1, #31
 800a690:	d506      	bpl.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a692:	2100      	movs	r1, #0
 800a694:	f105 0008 	add.w	r0, r5, #8
 800a698:	f7ff fb0c 	bl	8009cb4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a69c:	4607      	mov	r7, r0
 800a69e:	b900      	cbnz	r0, 800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800a6a0:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a6a2:	686b      	ldr	r3, [r5, #4]
 800a6a4:	079c      	lsls	r4, r3, #30
 800a6a6:	d506      	bpl.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	f105 0008 	add.w	r0, r5, #8
 800a6ae:	f7ff fb01 	bl	8009cb4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	b900      	cbnz	r0, 800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800a6b6:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6b8:	686b      	ldr	r3, [r5, #4]
 800a6ba:	0758      	lsls	r0, r3, #29
 800a6bc:	d506      	bpl.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6be:	2102      	movs	r1, #2
 800a6c0:	f105 0008 	add.w	r0, r5, #8
 800a6c4:	f7ff faf6 	bl	8009cb4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	b900      	cbnz	r0, 800a6ce <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800a6cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a6ce:	686b      	ldr	r3, [r5, #4]
 800a6d0:	0719      	lsls	r1, r3, #28
 800a6d2:	d506      	bpl.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a6da:	f7ff fb63 	bl	8009da4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a6de:	4606      	mov	r6, r0
 800a6e0:	b900      	cbnz	r0, 800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800a6e2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a6e4:	686b      	ldr	r3, [r5, #4]
 800a6e6:	06da      	lsls	r2, r3, #27
 800a6e8:	d506      	bpl.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a6f0:	f7ff fb58 	bl	8009da4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	b900      	cbnz	r0, 800a6fa <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800a6f8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6fa:	686b      	ldr	r3, [r5, #4]
 800a6fc:	069b      	lsls	r3, r3, #26
 800a6fe:	f100 80ca 	bmi.w	800a896 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800a702:	1e20      	subs	r0, r4, #0
 800a704:	bf18      	it	ne
 800a706:	2001      	movne	r0, #1
}
 800a708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a70c:	2101      	movs	r1, #1
 800a70e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a712:	f7ff fb47 	bl	8009da4 <RCCEx_PLL3_Config>
 800a716:	e6ac      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a718:	2601      	movs	r6, #1
 800a71a:	4634      	mov	r4, r6
 800a71c:	e6b5      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a71e:	4626      	mov	r6, r4
 800a720:	e6b3      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a722:	bf00      	nop
 800a724:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a728:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a72c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a730:	d003      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a736:	f47f aeba 	bne.w	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800a73a:	b9ac      	cbnz	r4, 800a768 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a73c:	4a5b      	ldr	r2, [pc, #364]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a73e:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800a742:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a744:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a748:	430b      	orrs	r3, r1
 800a74a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a74c:	e6b1      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a74e:	2100      	movs	r1, #0
 800a750:	f105 0008 	add.w	r0, r5, #8
 800a754:	f7ff faae 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a758:	4604      	mov	r4, r0
        break;
 800a75a:	e7ee      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a75c:	2102      	movs	r1, #2
 800a75e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a762:	f7ff fb1f 	bl	8009da4 <RCCEx_PLL3_Config>
 800a766:	e7f7      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a768:	4626      	mov	r6, r4
 800a76a:	e6a2      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a76c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a770:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800a774:	d003      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a776:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a77a:	f47f aeac 	bne.w	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800a77e:	b9ac      	cbnz	r4, 800a7ac <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a780:	4a4a      	ldr	r2, [pc, #296]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a782:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800a786:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a788:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a78c:	430b      	orrs	r3, r1
 800a78e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a790:	e6a3      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a792:	2100      	movs	r1, #0
 800a794:	f105 0008 	add.w	r0, r5, #8
 800a798:	f7ff fa8c 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a79c:	4604      	mov	r4, r0
        break;
 800a79e:	e7ee      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7a6:	f7ff fafd 	bl	8009da4 <RCCEx_PLL3_Config>
 800a7aa:	e7f7      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a7ac:	4626      	mov	r6, r4
 800a7ae:	e694      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a7b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a7b4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a7b8:	d003      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a7ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a7be:	f47f ae9e 	bne.w	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800a7c2:	b9ac      	cbnz	r4, 800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a7c4:	4a39      	ldr	r2, [pc, #228]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a7c6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800a7ca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a7cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7d4:	e695      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	f105 0008 	add.w	r0, r5, #8
 800a7dc:	f7ff fa6a 	bl	8009cb4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e0:	4604      	mov	r4, r0
        break;
 800a7e2:	e7ee      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e4:	2102      	movs	r1, #2
 800a7e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7ea:	f7ff fadb 	bl	8009da4 <RCCEx_PLL3_Config>
 800a7ee:	e7f7      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a7f0:	4626      	mov	r6, r4
 800a7f2:	e686      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7fa:	f7ff fad3 	bl	8009da4 <RCCEx_PLL3_Config>
 800a7fe:	e6c3      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800a800:	2601      	movs	r6, #1
 800a802:	4634      	mov	r4, r6
 800a804:	e6cc      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800a806:	4626      	mov	r6, r4
 800a808:	e6ca      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a80a:	4a28      	ldr	r2, [pc, #160]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a80c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a80e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a812:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a814:	b97c      	cbnz	r4, 800a836 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a816:	4a25      	ldr	r2, [pc, #148]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a818:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800a81c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a81e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a822:	430b      	orrs	r3, r1
 800a824:	6553      	str	r3, [r2, #84]	@ 0x54
 800a826:	e6ce      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a828:	2101      	movs	r1, #1
 800a82a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a82e:	f7ff fab9 	bl	8009da4 <RCCEx_PLL3_Config>
 800a832:	4604      	mov	r4, r0
        break;
 800a834:	e7ee      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a836:	4626      	mov	r6, r4
 800a838:	e6c5      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83a:	4a1c      	ldr	r2, [pc, #112]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a83c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a83e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a842:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a844:	b974      	cbnz	r4, 800a864 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a846:	4a19      	ldr	r2, [pc, #100]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a848:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800a84a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a84c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a850:	430b      	orrs	r3, r1
 800a852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a854:	e6c4      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a856:	2102      	movs	r1, #2
 800a858:	f105 0008 	add.w	r0, r5, #8
 800a85c:	f7ff fa2a 	bl	8009cb4 <RCCEx_PLL2_Config>
 800a860:	4604      	mov	r4, r0
        break;
 800a862:	e7ef      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800a864:	4626      	mov	r6, r4
 800a866:	e6bb      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800a868:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800a86c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800a870:	f47f aed1 	bne.w	800a616 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800a874:	2c00      	cmp	r4, #0
 800a876:	f47f aecf 	bne.w	800a618 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a87a:	4c0c      	ldr	r4, [pc, #48]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a87c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a87e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a882:	4302      	orrs	r2, r0
 800a884:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800a886:	4634      	mov	r4, r6
 800a888:	e6c6      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a88a:	4f08      	ldr	r7, [pc, #32]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a88c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a88e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a892:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800a894:	e7ee      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a896:	2102      	movs	r1, #2
 800a898:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a89c:	f7ff fa82 	bl	8009da4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f43f af2e 	beq.w	800a702 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e72e      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800a8aa:	bf00      	nop
 800a8ac:	58024400 	.word	0x58024400

0800a8b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	b1f0      	cbz	r0, 800a8f6 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8b8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a8bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a8c0:	b91b      	cbnz	r3, 800a8ca <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a8c2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8c6:	f7f6 fd6b 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8ca:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8cc:	1d21      	adds	r1, r4, #4
 800a8ce:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8d0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8d4:	f000 fa15 	bl	800ad02 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a8d8:	6862      	ldr	r2, [r4, #4]
 800a8da:	4629      	mov	r1, r5
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	f000 fa48 	bl	800ad72 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a8e2:	4a06      	ldr	r2, [pc, #24]	@ (800a8fc <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800a8e4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8ec:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	e7fc      	b.n	800a8f4 <HAL_SDRAM_Init+0x44>
 800a8fa:	bf00      	nop
 800a8fc:	52004000 	.word	0x52004000

0800a900 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800a900:	b510      	push	{r4, lr}
 800a902:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800a904:	f7f6 fde6 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800a908:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a90c:	f000 fa67 	bl	800adde <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800a910:	2000      	movs	r0, #0
 800a912:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800a916:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800a91a:	bd10      	pop	{r4, pc}

0800a91c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a91c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a91e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800a922:	4605      	mov	r5, r0
 800a924:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a926:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a928:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a92a:	d010      	beq.n	800a94e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a92c:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800a930:	2c01      	cmp	r4, #1
 800a932:	d110      	bne.n	800a956 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a934:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a936:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a938:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a93c:	f000 fa5e 	bl	800adfc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a940:	6833      	ldr	r3, [r6, #0]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d104      	bne.n	800a950 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a946:	2305      	movs	r3, #5
 800a948:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a94c:	2000      	movs	r0, #0
}
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a950:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800a954:	e7fa      	b.n	800a94c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a956:	2001      	movs	r0, #1
 800a958:	e7f9      	b.n	800a94e <HAL_SDRAM_SendCommand+0x32>

0800a95a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a95a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a95c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800a960:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a962:	2b02      	cmp	r3, #2
 800a964:	b2d8      	uxtb	r0, r3
 800a966:	d00d      	beq.n	800a984 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a968:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	b2dd      	uxtb	r5, r3
 800a970:	d109      	bne.n	800a986 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a972:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a974:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a976:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a97a:	f000 fa51 	bl	800ae20 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a97e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a980:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800a984:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a986:	2001      	movs	r0, #1
 800a988:	e7fc      	b.n	800a984 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800a98a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a98a:	4770      	bx	lr

0800a98c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a98c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a990:	2b01      	cmp	r3, #1
 800a992:	d12f      	bne.n	800a9f4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a996:	4a18      	ldr	r2, [pc, #96]	@ (800a9f8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a998:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a99c:	6803      	ldr	r3, [r0, #0]
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d01a      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a6:	d017      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9a8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d013      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00f      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d00b      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9c0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d007      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9c8:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d003      	beq.n	800a9d8 <HAL_TIM_Base_Start+0x4c>
 800a9d0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d107      	bne.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9d8:	6899      	ldr	r1, [r3, #8]
 800a9da:	4a08      	ldr	r2, [pc, #32]	@ (800a9fc <HAL_TIM_Base_Start+0x70>)
 800a9dc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9de:	2a06      	cmp	r2, #6
 800a9e0:	d006      	beq.n	800a9f0 <HAL_TIM_Base_Start+0x64>
 800a9e2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800a9e6:	d003      	beq.n	800a9f0 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	f042 0201 	orr.w	r2, r2, #1
 800a9ee:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	4770      	bx	lr
    return HAL_ERROR;
 800a9f4:	2001      	movs	r0, #1
}
 800a9f6:	4770      	bx	lr
 800a9f8:	40010000 	.word	0x40010000
 800a9fc:	00010007 	.word	0x00010007

0800aa00 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa00:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d133      	bne.n	800aa70 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa0e:	6803      	ldr	r3, [r0, #0]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa18:	4a16      	ldr	r2, [pc, #88]	@ (800aa74 <HAL_TIM_Base_Start_IT+0x74>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d01a      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa22:	d017      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa24:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d013      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d00f      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00b      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa3c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d007      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa44:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x54>
 800aa4c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d107      	bne.n	800aa64 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa54:	6899      	ldr	r1, [r3, #8]
 800aa56:	4a08      	ldr	r2, [pc, #32]	@ (800aa78 <HAL_TIM_Base_Start_IT+0x78>)
 800aa58:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5a:	2a06      	cmp	r2, #6
 800aa5c:	d006      	beq.n	800aa6c <HAL_TIM_Base_Start_IT+0x6c>
 800aa5e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800aa62:	d003      	beq.n	800aa6c <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	4770      	bx	lr
    return HAL_ERROR;
 800aa70:	2001      	movs	r0, #1
}
 800aa72:	4770      	bx	lr
 800aa74:	40010000 	.word	0x40010000
 800aa78:	00010007 	.word	0x00010007

0800aa7c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800aa7c:	4770      	bx	lr

0800aa7e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800aa80:	4770      	bx	lr

0800aa82 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800aa82:	4770      	bx	lr

0800aa84 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800aa84:	6803      	ldr	r3, [r0, #0]
{
 800aa86:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800aa88:	68dd      	ldr	r5, [r3, #12]
{
 800aa8a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800aa8c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa8e:	07b2      	lsls	r2, r6, #30
 800aa90:	d50d      	bpl.n	800aaae <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa92:	07a9      	lsls	r1, r5, #30
 800aa94:	d50b      	bpl.n	800aaae <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa96:	f06f 0202 	mvn.w	r2, #2
 800aa9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	079a      	lsls	r2, r3, #30
 800aaa4:	d075      	beq.n	800ab92 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa6:	f7ff ffea 	bl	800aa7e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aaae:	0773      	lsls	r3, r6, #29
 800aab0:	d510      	bpl.n	800aad4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aab2:	0768      	lsls	r0, r5, #29
 800aab4:	d50e      	bpl.n	800aad4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800aabc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aabe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aac0:	2202      	movs	r2, #2
 800aac2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800aaca:	d068      	beq.n	800ab9e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800aacc:	f7ff ffd7 	bl	800aa7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad0:	2300      	movs	r3, #0
 800aad2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aad4:	0731      	lsls	r1, r6, #28
 800aad6:	d50f      	bpl.n	800aaf8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aad8:	072a      	lsls	r2, r5, #28
 800aada:	d50d      	bpl.n	800aaf8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800aae2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aae6:	2204      	movs	r2, #4
 800aae8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	079b      	lsls	r3, r3, #30
 800aaee:	d05c      	beq.n	800abaa <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf0:	f7ff ffc5 	bl	800aa7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aaf8:	06f1      	lsls	r1, r6, #27
 800aafa:	d510      	bpl.n	800ab1e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aafc:	06ea      	lsls	r2, r5, #27
 800aafe:	d50e      	bpl.n	800ab1e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ab06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab0a:	2208      	movs	r2, #8
 800ab0c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ab14:	d04f      	beq.n	800abb6 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab16:	f7ff ffb2 	bl	800aa7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab1e:	07f3      	lsls	r3, r6, #31
 800ab20:	d508      	bpl.n	800ab34 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab22:	07e8      	lsls	r0, r5, #31
 800ab24:	d506      	bpl.n	800ab34 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab2c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab30:	f7f6 f9fe 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab34:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800ab38:	d008      	beq.n	800ab4c <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab3a:	0629      	lsls	r1, r5, #24
 800ab3c:	d506      	bpl.n	800ab4c <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800ab44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ab48:	f000 f8d9 	bl	800acfe <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab4c:	05f2      	lsls	r2, r6, #23
 800ab4e:	d508      	bpl.n	800ab62 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab50:	062b      	lsls	r3, r5, #24
 800ab52:	d506      	bpl.n	800ab62 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ab5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ab5e:	f000 f8cf 	bl	800ad00 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab62:	0670      	lsls	r0, r6, #25
 800ab64:	d508      	bpl.n	800ab78 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab66:	0669      	lsls	r1, r5, #25
 800ab68:	d506      	bpl.n	800ab78 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800ab70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ab74:	f7ff ff85 	bl	800aa82 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab78:	06b2      	lsls	r2, r6, #26
 800ab7a:	d522      	bpl.n	800abc2 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab7c:	06ab      	lsls	r3, r5, #26
 800ab7e:	d520      	bpl.n	800abc2 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ab86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab88:	611a      	str	r2, [r3, #16]
}
 800ab8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ab8e:	f000 b8b5 	b.w	800acfc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab92:	f7ff ff73 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7ff ff72 	bl	800aa80 <HAL_TIM_PWM_PulseFinishedCallback>
 800ab9c:	e785      	b.n	800aaaa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab9e:	f7ff ff6d 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7ff ff6c 	bl	800aa80 <HAL_TIM_PWM_PulseFinishedCallback>
 800aba8:	e792      	b.n	800aad0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abaa:	f7ff ff67 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abae:	4620      	mov	r0, r4
 800abb0:	f7ff ff66 	bl	800aa80 <HAL_TIM_PWM_PulseFinishedCallback>
 800abb4:	e79e      	b.n	800aaf4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb6:	f7ff ff61 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abba:	4620      	mov	r0, r4
 800abbc:	f7ff ff60 	bl	800aa80 <HAL_TIM_PWM_PulseFinishedCallback>
 800abc0:	e7ab      	b.n	800ab1a <HAL_TIM_IRQHandler+0x96>
}
 800abc2:	bd70      	pop	{r4, r5, r6, pc}

0800abc4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abc4:	4a33      	ldr	r2, [pc, #204]	@ (800ac94 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800abc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abc8:	4290      	cmp	r0, r2
 800abca:	d012      	beq.n	800abf2 <TIM_Base_SetConfig+0x2e>
 800abcc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800abd0:	d00f      	beq.n	800abf2 <TIM_Base_SetConfig+0x2e>
 800abd2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800abd6:	4290      	cmp	r0, r2
 800abd8:	d00b      	beq.n	800abf2 <TIM_Base_SetConfig+0x2e>
 800abda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abde:	4290      	cmp	r0, r2
 800abe0:	d007      	beq.n	800abf2 <TIM_Base_SetConfig+0x2e>
 800abe2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abe6:	4290      	cmp	r0, r2
 800abe8:	d003      	beq.n	800abf2 <TIM_Base_SetConfig+0x2e>
 800abea:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800abee:	4290      	cmp	r0, r2
 800abf0:	d119      	bne.n	800ac26 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800abf2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800abf8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abfa:	4a26      	ldr	r2, [pc, #152]	@ (800ac94 <TIM_Base_SetConfig+0xd0>)
 800abfc:	4290      	cmp	r0, r2
 800abfe:	d01d      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac00:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ac04:	d01a      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac06:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac0a:	4290      	cmp	r0, r2
 800ac0c:	d016      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac12:	4290      	cmp	r0, r2
 800ac14:	d012      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac1a:	4290      	cmp	r0, r2
 800ac1c:	d00e      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac1e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac22:	4290      	cmp	r0, r2
 800ac24:	d00a      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac26:	4a1c      	ldr	r2, [pc, #112]	@ (800ac98 <TIM_Base_SetConfig+0xd4>)
 800ac28:	4290      	cmp	r0, r2
 800ac2a:	d007      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac30:	4290      	cmp	r0, r2
 800ac32:	d003      	beq.n	800ac3c <TIM_Base_SetConfig+0x78>
 800ac34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac38:	4290      	cmp	r0, r2
 800ac3a:	d103      	bne.n	800ac44 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac40:	68ca      	ldr	r2, [r1, #12]
 800ac42:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac44:	694a      	ldr	r2, [r1, #20]
 800ac46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac4a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ac4c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac4e:	688b      	ldr	r3, [r1, #8]
 800ac50:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac52:	680b      	ldr	r3, [r1, #0]
 800ac54:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac56:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <TIM_Base_SetConfig+0xd0>)
 800ac58:	4298      	cmp	r0, r3
 800ac5a:	d00f      	beq.n	800ac7c <TIM_Base_SetConfig+0xb8>
 800ac5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac60:	4298      	cmp	r0, r3
 800ac62:	d00b      	beq.n	800ac7c <TIM_Base_SetConfig+0xb8>
 800ac64:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	d007      	beq.n	800ac7c <TIM_Base_SetConfig+0xb8>
 800ac6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac70:	4298      	cmp	r0, r3
 800ac72:	d003      	beq.n	800ac7c <TIM_Base_SetConfig+0xb8>
 800ac74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac78:	4298      	cmp	r0, r3
 800ac7a:	d101      	bne.n	800ac80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac7c:	690b      	ldr	r3, [r1, #16]
 800ac7e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac80:	2301      	movs	r3, #1
 800ac82:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac84:	6903      	ldr	r3, [r0, #16]
 800ac86:	07db      	lsls	r3, r3, #31
 800ac88:	d503      	bpl.n	800ac92 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac8a:	6903      	ldr	r3, [r0, #16]
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	6103      	str	r3, [r0, #16]
  }
}
 800ac92:	4770      	bx	lr
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40014000 	.word	0x40014000

0800ac9c <HAL_TIM_Base_Init>:
{
 800ac9c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ac9e:	4604      	mov	r4, r0
 800aca0:	b350      	cbz	r0, 800acf8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800aca2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800aca6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800acaa:	b91b      	cbnz	r3, 800acb4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800acac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800acb0:	f7ff fe6b 	bl	800a98a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800acb4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800acba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acbe:	f7ff ff81 	bl	800abc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acc2:	2301      	movs	r3, #1
  return HAL_OK;
 800acc4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acc6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800acce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800acd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800acd6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800acda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ace6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800acea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800acee:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800acf2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800acf6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800acf8:	2001      	movs	r0, #1
 800acfa:	e7fc      	b.n	800acf6 <HAL_TIM_Base_Init+0x5a>

0800acfc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800acfc:	4770      	bx	lr

0800acfe <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800acfe:	4770      	bx	lr

0800ad00 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800ad00:	4770      	bx	lr

0800ad02 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad06:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ad0a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800ad0e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800ad12:	ea43 0308 	orr.w	r3, r3, r8
 800ad16:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800ad1a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ad1e:	6809      	ldr	r1, [r1, #0]
 800ad20:	b991      	cbnz	r1, 800ad48 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad22:	ea43 030e 	orr.w	r3, r3, lr
 800ad26:	6801      	ldr	r1, [r0, #0]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800ad2e:	ea43 030c 	orr.w	r3, r3, ip
 800ad32:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800ad36:	433b      	orrs	r3, r7
 800ad38:	4333      	orrs	r3, r6
 800ad3a:	432b      	orrs	r3, r5
 800ad3c:	4323      	orrs	r3, r4
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ad42:	2000      	movs	r0, #0
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad48:	6801      	ldr	r1, [r0, #0]
 800ad4a:	ea43 030e 	orr.w	r3, r3, lr
 800ad4e:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800ad52:	430b      	orrs	r3, r1
 800ad54:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ad56:	ea42 030c 	orr.w	r3, r2, ip
 800ad5a:	6841      	ldr	r1, [r0, #4]
 800ad5c:	433b      	orrs	r3, r7
 800ad5e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800ad62:	4333      	orrs	r3, r6
 800ad64:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800ad68:	432b      	orrs	r3, r5
 800ad6a:	4323      	orrs	r3, r4
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	6043      	str	r3, [r0, #4]
 800ad70:	e7e7      	b.n	800ad42 <FMC_SDRAM_Init+0x40>

0800ad72 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad72:	68cb      	ldr	r3, [r1, #12]
 800ad74:	f103 3cff 	add.w	ip, r3, #4294967295
 800ad78:	694b      	ldr	r3, [r1, #20]
{
 800ad7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	680f      	ldr	r7, [r1, #0]
 800ad80:	684c      	ldr	r4, [r1, #4]
 800ad82:	688e      	ldr	r6, [r1, #8]
 800ad84:	051b      	lsls	r3, r3, #20
 800ad86:	690d      	ldr	r5, [r1, #16]
 800ad88:	3c01      	subs	r4, #1
 800ad8a:	6989      	ldr	r1, [r1, #24]
 800ad8c:	3e01      	subs	r6, #1
 800ad8e:	3d01      	subs	r5, #1
 800ad90:	3f01      	subs	r7, #1
 800ad92:	3901      	subs	r1, #1
 800ad94:	0124      	lsls	r4, r4, #4
 800ad96:	0236      	lsls	r6, r6, #8
 800ad98:	042d      	lsls	r5, r5, #16
 800ad9a:	0609      	lsls	r1, r1, #24
 800ad9c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ada0:	b95a      	cbnz	r2, 800adba <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ada2:	433b      	orrs	r3, r7
 800ada4:	6882      	ldr	r2, [r0, #8]
 800ada6:	4323      	orrs	r3, r4
 800ada8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800adac:	4333      	orrs	r3, r6
 800adae:	432b      	orrs	r3, r5
 800adb0:	430b      	orrs	r3, r1
 800adb2:	4313      	orrs	r3, r2
 800adb4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800adb6:	2000      	movs	r0, #0
 800adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800adba:	6882      	ldr	r2, [r0, #8]
 800adbc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800adc0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800adc4:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800adc6:	ea44 0306 	orr.w	r3, r4, r6
 800adca:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800adcc:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800adce:	68c2      	ldr	r2, [r0, #12]
 800add0:	432b      	orrs	r3, r5
 800add2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800add6:	430b      	orrs	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	60c3      	str	r3, [r0, #12]
 800addc:	e7eb      	b.n	800adb6 <FMC_SDRAM_Timing_Init+0x44>

0800adde <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800adde:	4603      	mov	r3, r0
 800ade0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800ade4:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800ade8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800adec:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800adee:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800adf2:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800adf4:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800adf6:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800adf8:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800adfa:	4770      	bx	lr

0800adfc <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800adfc:	6902      	ldr	r2, [r0, #16]
{
 800adfe:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ae00:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ae04:	0d92      	lsrs	r2, r2, #22
 800ae06:	4323      	orrs	r3, r4
 800ae08:	68cc      	ldr	r4, [r1, #12]
 800ae0a:	0592      	lsls	r2, r2, #22
 800ae0c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ae10:	4313      	orrs	r3, r2
 800ae12:	688a      	ldr	r2, [r1, #8]
 800ae14:	3a01      	subs	r2, #1
 800ae16:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ae1a:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	bd10      	pop	{r4, pc}

0800ae20 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ae20:	6943      	ldr	r3, [r0, #20]
 800ae22:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ae26:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800ae2a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800ae2e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800ae30:	2000      	movs	r0, #0
 800ae32:	4770      	bx	lr

0800ae34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae34:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ae3a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae3c:	f001 fee4 	bl	800cc08 <xTaskGetSchedulerState>
 800ae40:	2801      	cmp	r0, #1
 800ae42:	d003      	beq.n	800ae4c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ae44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ae48:	f000 bc4c 	b.w	800b6e4 <xPortSysTickHandler>
}
 800ae4c:	bd08      	pop	{r3, pc}
	...

0800ae50 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae50:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae54:	b92b      	cbnz	r3, 800ae62 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae56:	4b06      	ldr	r3, [pc, #24]	@ (800ae70 <osKernelInitialize+0x20>)
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	b928      	cbnz	r0, 800ae68 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae60:	4770      	bx	lr
    stat = osErrorISR;
 800ae62:	f06f 0005 	mvn.w	r0, #5
 800ae66:	4770      	bx	lr
    } else {
      stat = osError;
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	2400c694 	.word	0x2400c694

0800ae74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae74:	b510      	push	{r4, lr}
 800ae76:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae7a:	b95c      	cbnz	r4, 800ae94 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ae7c:	4b08      	ldr	r3, [pc, #32]	@ (800aea0 <osKernelStart+0x2c>)
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	2a01      	cmp	r2, #1
 800ae82:	d10a      	bne.n	800ae9a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae84:	4a07      	ldr	r2, [pc, #28]	@ (800aea4 <osKernelStart+0x30>)
 800ae86:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae88:	2202      	movs	r2, #2
 800ae8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae8c:	f001 fd5c 	bl	800c948 <vTaskStartScheduler>
      stat = osOK;
 800ae90:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ae92:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ae94:	f06f 0005 	mvn.w	r0, #5
 800ae98:	e7fb      	b.n	800ae92 <osKernelStart+0x1e>
      stat = osError;
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ae9e:	e7f8      	b.n	800ae92 <osKernelStart+0x1e>
 800aea0:	2400c694 	.word	0x2400c694
 800aea4:	e000ed00 	.word	0xe000ed00

0800aea8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	4614      	mov	r4, r2
 800aeac:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aeae:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aeb0:	460b      	mov	r3, r1
  hTask = NULL;
 800aeb2:	9205      	str	r2, [sp, #20]
 800aeb4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800aeb8:	b9ca      	cbnz	r2, 800aeee <osThreadNew+0x46>
 800aeba:	b1c0      	cbz	r0, 800aeee <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800aebc:	b36c      	cbz	r4, 800af1a <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800aebe:	69a5      	ldr	r5, [r4, #24]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	bf08      	it	eq
 800aec4:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aec6:	1e69      	subs	r1, r5, #1
 800aec8:	46ac      	mov	ip, r5
 800aeca:	2937      	cmp	r1, #55	@ 0x37
 800aecc:	d82a      	bhi.n	800af24 <osThreadNew+0x7c>
 800aece:	6861      	ldr	r1, [r4, #4]
 800aed0:	07c9      	lsls	r1, r1, #31
 800aed2:	d427      	bmi.n	800af24 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800aed4:	6966      	ldr	r6, [r4, #20]
 800aed6:	b16e      	cbz	r6, 800aef4 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aed8:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800aeda:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aedc:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800aee0:	b157      	cbz	r7, 800aef8 <osThreadNew+0x50>
 800aee2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800aee6:	d902      	bls.n	800aeee <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aee8:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aeea:	b104      	cbz	r4, 800aeee <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aeec:	b9e6      	cbnz	r6, 800af28 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aeee:	9805      	ldr	r0, [sp, #20]
}
 800aef0:	b007      	add	sp, #28
 800aef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800aef4:	2280      	movs	r2, #128	@ 0x80
 800aef6:	e7f0      	b.n	800aeda <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aef8:	f1be 0f00 	cmp.w	lr, #0
 800aefc:	d1f7      	bne.n	800aeee <osThreadNew+0x46>
      if (mem == 0) {
 800aefe:	6924      	ldr	r4, [r4, #16]
 800af00:	2c00      	cmp	r4, #0
 800af02:	d1f4      	bne.n	800aeee <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af04:	ac05      	add	r4, sp, #20
 800af06:	b292      	uxth	r2, r2
 800af08:	e9cd c400 	strd	ip, r4, [sp]
 800af0c:	f001 fbb9 	bl	800c682 <xTaskCreate>
 800af10:	2801      	cmp	r0, #1
            hTask = NULL;
 800af12:	bf1c      	itt	ne
 800af14:	2300      	movne	r3, #0
 800af16:	9305      	strne	r3, [sp, #20]
 800af18:	e7e9      	b.n	800aeee <osThreadNew+0x46>
    name = NULL;
 800af1a:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800af1c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800af20:	2280      	movs	r2, #128	@ 0x80
 800af22:	e7ef      	b.n	800af04 <osThreadNew+0x5c>
        return (NULL);
 800af24:	4610      	mov	r0, r2
 800af26:	e7e3      	b.n	800aef0 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af28:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800af2c:	9500      	str	r5, [sp, #0]
 800af2e:	f001 fb70 	bl	800c612 <xTaskCreateStatic>
 800af32:	9005      	str	r0, [sp, #20]
 800af34:	e7db      	b.n	800aeee <osThreadNew+0x46>

0800af36 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800af36:	b570      	push	{r4, r5, r6, lr}
 800af38:	4605      	mov	r5, r0
 800af3a:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800af3e:	b116      	cbz	r6, 800af46 <osMutexNew+0x10>
  hMutex = NULL;
 800af40:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800af42:	4620      	mov	r0, r4
 800af44:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800af46:	b110      	cbz	r0, 800af4e <osMutexNew+0x18>
      type = attr->attr_bits;
 800af48:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800af4a:	0733      	lsls	r3, r6, #28
 800af4c:	d4f8      	bmi.n	800af40 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800af4e:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800af52:	b17d      	cbz	r5, 800af74 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af54:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800af58:	b151      	cbz	r1, 800af70 <osMutexNew+0x3a>
 800af5a:	2b4f      	cmp	r3, #79	@ 0x4f
 800af5c:	d9f0      	bls.n	800af40 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800af5e:	b1de      	cbz	r6, 800af98 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800af60:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800af62:	f000 fec8 	bl	800bcf6 <xQueueCreateMutexStatic>
 800af66:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800af68:	2800      	cmp	r0, #0
 800af6a:	d0e9      	beq.n	800af40 <osMutexNew+0xa>
          name = attr->name;
 800af6c:	682d      	ldr	r5, [r5, #0]
 800af6e:	e00a      	b.n	800af86 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e5      	bne.n	800af40 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800af74:	b196      	cbz	r6, 800af9c <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800af76:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800af78:	f000 fef1 	bl	800bd5e <xQueueCreateMutex>
 800af7c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800af7e:	2800      	cmp	r0, #0
 800af80:	d0de      	beq.n	800af40 <osMutexNew+0xa>
        if (attr != NULL) {
 800af82:	2d00      	cmp	r5, #0
 800af84:	d1f2      	bne.n	800af6c <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800af86:	4629      	mov	r1, r5
 800af88:	4620      	mov	r0, r4
 800af8a:	f001 f97d 	bl	800c288 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800af8e:	2e00      	cmp	r6, #0
 800af90:	d0d7      	beq.n	800af42 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800af92:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800af96:	e7d4      	b.n	800af42 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800af98:	2001      	movs	r0, #1
 800af9a:	e7e2      	b.n	800af62 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800af9c:	2001      	movs	r0, #1
 800af9e:	e7eb      	b.n	800af78 <osMutexNew+0x42>

0800afa0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4603      	mov	r3, r0
 800afa4:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afa6:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800afaa:	f003 0201 	and.w	r2, r3, #1
 800afae:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800afb2:	b995      	cbnz	r5, 800afda <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d913      	bls.n	800afe0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800afb8:	b162      	cbz	r2, 800afd4 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800afba:	f001 f8f6 	bl	800c1aa <xQueueTakeMutexRecursive>
 800afbe:	2801      	cmp	r0, #1
 800afc0:	d101      	bne.n	800afc6 <osMutexAcquire+0x26>
  stat = osOK;
 800afc2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800afc6:	2c00      	cmp	r4, #0
 800afc8:	bf14      	ite	ne
 800afca:	f06f 0001 	mvnne.w	r0, #1
 800afce:	f06f 0002 	mvneq.w	r0, #2
 800afd2:	e7f7      	b.n	800afc4 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800afd4:	f001 f82c 	bl	800c030 <xQueueSemaphoreTake>
 800afd8:	e7f1      	b.n	800afbe <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800afda:	f06f 0005 	mvn.w	r0, #5
 800afde:	e7f1      	b.n	800afc4 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800afe0:	f06f 0003 	mvn.w	r0, #3
 800afe4:	e7ee      	b.n	800afc4 <osMutexAcquire+0x24>

0800afe6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800afe6:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afe8:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800afec:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800afee:	f002 0301 	and.w	r3, r2, #1
 800aff2:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800aff6:	b979      	cbnz	r1, 800b018 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800aff8:	2a01      	cmp	r2, #1
 800affa:	d910      	bls.n	800b01e <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800affc:	b13b      	cbz	r3, 800b00e <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800affe:	f000 fe8f 	bl	800bd20 <xQueueGiveMutexRecursive>
 800b002:	2801      	cmp	r0, #1
  stat = osOK;
 800b004:	bf0c      	ite	eq
 800b006:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b008:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b00c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b00e:	461a      	mov	r2, r3
 800b010:	4619      	mov	r1, r3
 800b012:	f000 fdbe 	bl	800bb92 <xQueueGenericSend>
 800b016:	e7f4      	b.n	800b002 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b018:	f06f 0005 	mvn.w	r0, #5
 800b01c:	e7f6      	b.n	800b00c <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b01e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b022:	e7f3      	b.n	800b00c <osMutexRelease+0x26>

0800b024 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b026:	4604      	mov	r4, r0
 800b028:	460e      	mov	r6, r1
 800b02a:	4615      	mov	r5, r2
 800b02c:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b030:	b942      	cbnz	r2, 800b044 <osSemaphoreNew+0x20>
 800b032:	b138      	cbz	r0, 800b044 <osSemaphoreNew+0x20>
 800b034:	4288      	cmp	r0, r1
 800b036:	d305      	bcc.n	800b044 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b038:	b155      	cbz	r5, 800b050 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b03a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b03e:	b12b      	cbz	r3, 800b04c <osSemaphoreNew+0x28>
 800b040:	2f4f      	cmp	r7, #79	@ 0x4f
 800b042:	d822      	bhi.n	800b08a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b044:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b046:	4620      	mov	r0, r4
 800b048:	b003      	add	sp, #12
 800b04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b04c:	2f00      	cmp	r7, #0
 800b04e:	d1f9      	bne.n	800b044 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b050:	2c01      	cmp	r4, #1
 800b052:	d00c      	beq.n	800b06e <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b054:	4620      	mov	r0, r4
 800b056:	4631      	mov	r1, r6
 800b058:	f000 fd7d 	bl	800bb56 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b05c:	4604      	mov	r4, r0
 800b05e:	2800      	cmp	r0, #0
 800b060:	d0f0      	beq.n	800b044 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b062:	b985      	cbnz	r5, 800b086 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f001 f90e 	bl	800c288 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b06c:	e7eb      	b.n	800b046 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b06e:	2203      	movs	r2, #3
 800b070:	2100      	movs	r1, #0
 800b072:	2001      	movs	r0, #1
 800b074:	f000 fd26 	bl	800bac4 <xQueueGenericCreate>
 800b078:	e00e      	b.n	800b098 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b07a:	461a      	mov	r2, r3
 800b07c:	f000 fd49 	bl	800bb12 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b080:	4604      	mov	r4, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d0de      	beq.n	800b044 <osSemaphoreNew+0x20>
          name = attr->name;
 800b086:	682d      	ldr	r5, [r5, #0]
 800b088:	e7ec      	b.n	800b064 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b08a:	2801      	cmp	r0, #1
 800b08c:	d1f5      	bne.n	800b07a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b08e:	2103      	movs	r1, #3
 800b090:	9100      	str	r1, [sp, #0]
 800b092:	4611      	mov	r1, r2
 800b094:	f000 fcc8 	bl	800ba28 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b098:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d0d2      	beq.n	800b044 <osSemaphoreNew+0x20>
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d0df      	beq.n	800b062 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	f000 fd73 	bl	800bb92 <xQueueGenericSend>
 800b0ac:	2801      	cmp	r0, #1
 800b0ae:	d0d8      	beq.n	800b062 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f001 f913 	bl	800c2dc <vQueueDelete>
      if (hSemaphore != NULL) {
 800b0b6:	e7c5      	b.n	800b044 <osSemaphoreNew+0x20>

0800b0b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b0b8:	b513      	push	{r0, r1, r4, lr}
 800b0ba:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b0bc:	b328      	cbz	r0, 800b10a <osSemaphoreAcquire+0x52>
 800b0be:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b0c2:	b1cb      	cbz	r3, 800b0f8 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b0c4:	bb09      	cbnz	r1, 800b10a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b0c6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b0c8:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b0ca:	f001 f88f 	bl	800c1ec <xQueueReceiveFromISR>
 800b0ce:	2801      	cmp	r0, #1
 800b0d0:	d003      	beq.n	800b0da <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b0d2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b0d6:	b002      	add	sp, #8
 800b0d8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	b90b      	cbnz	r3, 800b0e2 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e7f9      	b.n	800b0d6 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b0e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	e7f2      	b.n	800b0de <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b0f8:	f000 ff9a 	bl	800c030 <xQueueSemaphoreTake>
 800b0fc:	2801      	cmp	r0, #1
 800b0fe:	d0ee      	beq.n	800b0de <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b100:	2c00      	cmp	r4, #0
 800b102:	d0e6      	beq.n	800b0d2 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b104:	f06f 0001 	mvn.w	r0, #1
 800b108:	e7e5      	b.n	800b0d6 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b10a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b10e:	e7e2      	b.n	800b0d6 <osSemaphoreAcquire+0x1e>

0800b110 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b110:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b112:	b318      	cbz	r0, 800b15c <osSemaphoreRelease+0x4c>
 800b114:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b118:	b1cb      	cbz	r3, 800b14e <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b11a:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b11c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b11e:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b120:	f000 fe97 	bl	800be52 <xQueueGiveFromISR>
 800b124:	2801      	cmp	r0, #1
 800b126:	d004      	beq.n	800b132 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b128:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b12c:	b003      	add	sp, #12
 800b12e:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	b14b      	cbz	r3, 800b14a <osSemaphoreRelease+0x3a>
 800b136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b13e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b14a:	2000      	movs	r0, #0
 800b14c:	e7ee      	b.n	800b12c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b14e:	461a      	mov	r2, r3
 800b150:	4619      	mov	r1, r3
 800b152:	f000 fd1e 	bl	800bb92 <xQueueGenericSend>
 800b156:	2801      	cmp	r0, #1
 800b158:	d0f7      	beq.n	800b14a <osSemaphoreRelease+0x3a>
 800b15a:	e7e5      	b.n	800b128 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b15c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b160:	e7e4      	b.n	800b12c <osSemaphoreRelease+0x1c>

0800b162 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b164:	4605      	mov	r5, r0
 800b166:	460e      	mov	r6, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b16e:	b11f      	cbz	r7, 800b178 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b170:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b172:	4628      	mov	r0, r5
 800b174:	b003      	add	sp, #12
 800b176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b178:	2800      	cmp	r0, #0
 800b17a:	d0f9      	beq.n	800b170 <osMessageQueueNew+0xe>
 800b17c:	2900      	cmp	r1, #0
 800b17e:	d0f7      	beq.n	800b170 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b180:	b1da      	cbz	r2, 800b1ba <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b182:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b186:	b183      	cbz	r3, 800b1aa <osMessageQueueNew+0x48>
 800b188:	2a4f      	cmp	r2, #79	@ 0x4f
 800b18a:	d9f1      	bls.n	800b170 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b18c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b18e:	2a00      	cmp	r2, #0
 800b190:	d0ee      	beq.n	800b170 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b192:	434d      	muls	r5, r1
 800b194:	6966      	ldr	r6, [r4, #20]
 800b196:	42ae      	cmp	r6, r5
 800b198:	d3ea      	bcc.n	800b170 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b19a:	9700      	str	r7, [sp, #0]
 800b19c:	f000 fc44 	bl	800ba28 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d0e4      	beq.n	800b170 <osMessageQueueNew+0xe>
        name = attr->name;
 800b1a6:	6824      	ldr	r4, [r4, #0]
 800b1a8:	e011      	b.n	800b1ce <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1aa:	2a00      	cmp	r2, #0
 800b1ac:	d1e0      	bne.n	800b170 <osMessageQueueNew+0xe>
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1dd      	bne.n	800b170 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1b4:	6963      	ldr	r3, [r4, #20]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1da      	bne.n	800b170 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4631      	mov	r1, r6
 800b1c0:	f000 fc80 	bl	800bac4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d0d2      	beq.n	800b170 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	d1eb      	bne.n	800b1a6 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f001 f859 	bl	800c288 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b1d6:	e7cc      	b.n	800b172 <osMessageQueueNew+0x10>

0800b1d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b1d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1da:	461c      	mov	r4, r3
 800b1dc:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b1e0:	b1de      	cbz	r6, 800b21a <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1e2:	b338      	cbz	r0, 800b234 <osMessageQueuePut+0x5c>
 800b1e4:	b331      	cbz	r1, 800b234 <osMessageQueuePut+0x5c>
 800b1e6:	bb2b      	cbnz	r3, 800b234 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b1e8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b1ea:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b1ec:	f000 fdd4 	bl	800bd98 <xQueueGenericSendFromISR>
 800b1f0:	2801      	cmp	r0, #1
 800b1f2:	d003      	beq.n	800b1fc <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b1f4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	b90b      	cbnz	r3, 800b204 <osMessageQueuePut+0x2c>
  stat = osOK;
 800b200:	2000      	movs	r0, #0
 800b202:	e7f9      	b.n	800b1f8 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b204:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	e7f2      	b.n	800b200 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b21a:	b158      	cbz	r0, 800b234 <osMessageQueuePut+0x5c>
 800b21c:	b151      	cbz	r1, 800b234 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b21e:	4633      	mov	r3, r6
 800b220:	4622      	mov	r2, r4
 800b222:	f000 fcb6 	bl	800bb92 <xQueueGenericSend>
 800b226:	2801      	cmp	r0, #1
 800b228:	d0ea      	beq.n	800b200 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d0e2      	beq.n	800b1f4 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b22e:	f06f 0001 	mvn.w	r0, #1
 800b232:	e7e1      	b.n	800b1f8 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b234:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b238:	e7de      	b.n	800b1f8 <osMessageQueuePut+0x20>

0800b23a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b23a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b23c:	461c      	mov	r4, r3
 800b23e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b242:	b1db      	cbz	r3, 800b27c <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b244:	b330      	cbz	r0, 800b294 <osMessageQueueGet+0x5a>
 800b246:	b329      	cbz	r1, 800b294 <osMessageQueueGet+0x5a>
 800b248:	bb24      	cbnz	r4, 800b294 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b24a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b24c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b24e:	f000 ffcd 	bl	800c1ec <xQueueReceiveFromISR>
 800b252:	2801      	cmp	r0, #1
 800b254:	d003      	beq.n	800b25e <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b256:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b25a:	b003      	add	sp, #12
 800b25c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	b90b      	cbnz	r3, 800b266 <osMessageQueueGet+0x2c>
  stat = osOK;
 800b262:	2000      	movs	r0, #0
 800b264:	e7f9      	b.n	800b25a <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b266:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b26a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b26e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	e7f2      	b.n	800b262 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b27c:	b150      	cbz	r0, 800b294 <osMessageQueueGet+0x5a>
 800b27e:	b149      	cbz	r1, 800b294 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b280:	4622      	mov	r2, r4
 800b282:	f000 fe37 	bl	800bef4 <xQueueReceive>
 800b286:	2801      	cmp	r0, #1
 800b288:	d0eb      	beq.n	800b262 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b28a:	2c00      	cmp	r4, #0
 800b28c:	d0e3      	beq.n	800b256 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b28e:	f06f 0001 	mvn.w	r0, #1
 800b292:	e7e2      	b.n	800b25a <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b294:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b298:	e7df      	b.n	800b25a <osMessageQueueGet+0x20>
	...

0800b29c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b29c:	4b03      	ldr	r3, [pc, #12]	@ (800b2ac <vApplicationGetIdleTaskMemory+0x10>)
 800b29e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2a0:	4b03      	ldr	r3, [pc, #12]	@ (800b2b0 <vApplicationGetIdleTaskMemory+0x14>)
 800b2a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2a4:	2380      	movs	r3, #128	@ 0x80
 800b2a6:	6013      	str	r3, [r2, #0]
}
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	2400c634 	.word	0x2400c634
 800b2b0:	2400c434 	.word	0x2400c434

0800b2b4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2b4:	4b03      	ldr	r3, [pc, #12]	@ (800b2c4 <vApplicationGetTimerTaskMemory+0x10>)
 800b2b6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2b8:	4b03      	ldr	r3, [pc, #12]	@ (800b2c8 <vApplicationGetTimerTaskMemory+0x14>)
 800b2ba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2c0:	6013      	str	r3, [r2, #0]
}
 800b2c2:	4770      	bx	lr
 800b2c4:	2400c3d4 	.word	0x2400c3d4
 800b2c8:	2400bfd4 	.word	0x2400bfd4

0800b2cc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2cc:	4b10      	ldr	r3, [pc, #64]	@ (800b310 <prvInsertBlockIntoFreeList+0x44>)
{
 800b2ce:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4283      	cmp	r3, r0
 800b2d6:	d3fb      	bcc.n	800b2d0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2d8:	6854      	ldr	r4, [r2, #4]
 800b2da:	1911      	adds	r1, r2, r4
 800b2dc:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2de:	bf01      	itttt	eq
 800b2e0:	6841      	ldreq	r1, [r0, #4]
 800b2e2:	4610      	moveq	r0, r2
 800b2e4:	1909      	addeq	r1, r1, r4
 800b2e6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2e8:	6844      	ldr	r4, [r0, #4]
 800b2ea:	1901      	adds	r1, r0, r4
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	d10c      	bne.n	800b30a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2f0:	4908      	ldr	r1, [pc, #32]	@ (800b314 <prvInsertBlockIntoFreeList+0x48>)
 800b2f2:	6809      	ldr	r1, [r1, #0]
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	d003      	beq.n	800b300 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2f8:	6859      	ldr	r1, [r3, #4]
 800b2fa:	4421      	add	r1, r4
 800b2fc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2fe:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b300:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b302:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b304:	bf18      	it	ne
 800b306:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b308:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b30a:	4619      	mov	r1, r3
 800b30c:	e7f8      	b.n	800b300 <prvInsertBlockIntoFreeList+0x34>
 800b30e:	bf00      	nop
 800b310:	2400c6b0 	.word	0x2400c6b0
 800b314:	2400c6ac 	.word	0x2400c6ac

0800b318 <pvPortMalloc>:
{
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b31e:	f001 f9df 	bl	800c6e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b322:	4940      	ldr	r1, [pc, #256]	@ (800b424 <pvPortMalloc+0x10c>)
 800b324:	4d40      	ldr	r5, [pc, #256]	@ (800b428 <pvPortMalloc+0x110>)
 800b326:	680b      	ldr	r3, [r1, #0]
 800b328:	b9f3      	cbnz	r3, 800b368 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b32a:	4a40      	ldr	r2, [pc, #256]	@ (800b42c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b32c:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b32e:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b330:	4e3f      	ldr	r6, [pc, #252]	@ (800b430 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b332:	bf1b      	ittet	ne
 800b334:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b336:	4b3f      	ldrne	r3, [pc, #252]	@ (800b434 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b338:	4b3f      	ldreq	r3, [pc, #252]	@ (800b438 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b33a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b33e:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b340:	bf18      	it	ne
 800b342:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b344:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b346:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b348:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b34a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b34e:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b352:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b354:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b356:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b35a:	4b38      	ldr	r3, [pc, #224]	@ (800b43c <pvPortMalloc+0x124>)
 800b35c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b35e:	4b38      	ldr	r3, [pc, #224]	@ (800b440 <pvPortMalloc+0x128>)
 800b360:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b362:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b366:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b368:	682e      	ldr	r6, [r5, #0]
 800b36a:	4226      	tst	r6, r4
 800b36c:	d155      	bne.n	800b41a <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b36e:	2c00      	cmp	r4, #0
 800b370:	d046      	beq.n	800b400 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b372:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b376:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b378:	bf1c      	itt	ne
 800b37a:	f023 0307 	bicne.w	r3, r3, #7
 800b37e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b380:	2b00      	cmp	r3, #0
 800b382:	d04a      	beq.n	800b41a <pvPortMalloc+0x102>
 800b384:	4f2e      	ldr	r7, [pc, #184]	@ (800b440 <pvPortMalloc+0x128>)
 800b386:	683c      	ldr	r4, [r7, #0]
 800b388:	429c      	cmp	r4, r3
 800b38a:	d346      	bcc.n	800b41a <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b38c:	4a28      	ldr	r2, [pc, #160]	@ (800b430 <pvPortMalloc+0x118>)
 800b38e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b390:	6868      	ldr	r0, [r5, #4]
 800b392:	4298      	cmp	r0, r3
 800b394:	d204      	bcs.n	800b3a0 <pvPortMalloc+0x88>
 800b396:	f8d5 c000 	ldr.w	ip, [r5]
 800b39a:	f1bc 0f00 	cmp.w	ip, #0
 800b39e:	d115      	bne.n	800b3cc <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b3a0:	6809      	ldr	r1, [r1, #0]
 800b3a2:	42a9      	cmp	r1, r5
 800b3a4:	d039      	beq.n	800b41a <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3a6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3a8:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3ac:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3ae:	1ac2      	subs	r2, r0, r3
 800b3b0:	2a10      	cmp	r2, #16
 800b3b2:	d912      	bls.n	800b3da <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3b4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b6:	0741      	lsls	r1, r0, #29
 800b3b8:	d00b      	beq.n	800b3d2 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	e7fe      	b.n	800b3ca <pvPortMalloc+0xb2>
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4665      	mov	r5, ip
 800b3d0:	e7de      	b.n	800b390 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3d2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3d4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3d6:	f7ff ff79 	bl	800b2cc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3da:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3dc:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3de:	4917      	ldr	r1, [pc, #92]	@ (800b43c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3e0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3e2:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3e4:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b3e6:	4a17      	ldr	r2, [pc, #92]	@ (800b444 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3e8:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b3ea:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b3ec:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3ee:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b3f0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3f4:	bf38      	it	cc
 800b3f6:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3f8:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3fc:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b3fe:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b400:	f001 fa12 	bl	800c828 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b404:	0763      	lsls	r3, r4, #29
 800b406:	d00a      	beq.n	800b41e <pvPortMalloc+0x106>
 800b408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	e7fe      	b.n	800b418 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b41a:	2400      	movs	r4, #0
 800b41c:	e7f0      	b.n	800b400 <pvPortMalloc+0xe8>
}
 800b41e:	4620      	mov	r0, r4
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	2400c6ac 	.word	0x2400c6ac
 800b428:	2400c698 	.word	0x2400c698
 800b42c:	2400c6b8 	.word	0x2400c6b8
 800b430:	2400c6b0 	.word	0x2400c6b0
 800b434:	24024d58 	.word	0x24024d58
 800b438:	000186a0 	.word	0x000186a0
 800b43c:	2400c6a4 	.word	0x2400c6a4
 800b440:	2400c6a8 	.word	0x2400c6a8
 800b444:	2400c6a0 	.word	0x2400c6a0

0800b448 <vPortFree>:
{
 800b448:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b44a:	4604      	mov	r4, r0
 800b44c:	b390      	cbz	r0, 800b4b4 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b44e:	4a1a      	ldr	r2, [pc, #104]	@ (800b4b8 <vPortFree+0x70>)
 800b450:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	4213      	tst	r3, r2
 800b458:	d108      	bne.n	800b46c <vPortFree+0x24>
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	e7fe      	b.n	800b46a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b46c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b470:	b141      	cbz	r1, 800b484 <vPortFree+0x3c>
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	e7fe      	b.n	800b482 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b484:	ea23 0302 	bic.w	r3, r3, r2
 800b488:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b48c:	f001 f928 	bl	800c6e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b490:	4a0a      	ldr	r2, [pc, #40]	@ (800b4bc <vPortFree+0x74>)
 800b492:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b496:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b49a:	6811      	ldr	r1, [r2, #0]
 800b49c:	440b      	add	r3, r1
 800b49e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4a0:	f7ff ff14 	bl	800b2cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4a4:	4a06      	ldr	r2, [pc, #24]	@ (800b4c0 <vPortFree+0x78>)
 800b4a6:	6813      	ldr	r3, [r2, #0]
 800b4a8:	3301      	adds	r3, #1
}
 800b4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b4ae:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b4b0:	f001 b9ba 	b.w	800c828 <xTaskResumeAll>
}
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	bf00      	nop
 800b4b8:	2400c698 	.word	0x2400c698
 800b4bc:	2400c6a8 	.word	0x2400c6a8
 800b4c0:	2400c69c 	.word	0x2400c69c

0800b4c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4cc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ce:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4d8:	4770      	bx	lr

0800b4da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4de:	4770      	bx	lr

0800b4e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4e0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4e2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b4e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4e8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4ea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b4ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b4ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	6003      	str	r3, [r0, #0]
}
 800b4f4:	4770      	bx	lr

0800b4f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4f6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4f8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4fa:	1c63      	adds	r3, r4, #1
 800b4fc:	d10a      	bne.n	800b514 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4fe:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b504:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b506:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b508:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b50a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b50c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b50e:	3301      	adds	r3, #1
 800b510:	6003      	str	r3, [r0, #0]
}
 800b512:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b514:	f100 0208 	add.w	r2, r0, #8
 800b518:	4613      	mov	r3, r2
 800b51a:	6852      	ldr	r2, [r2, #4]
 800b51c:	6815      	ldr	r5, [r2, #0]
 800b51e:	42a5      	cmp	r5, r4
 800b520:	d9fa      	bls.n	800b518 <vListInsert+0x22>
 800b522:	e7ed      	b.n	800b500 <vListInsert+0xa>

0800b524 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b524:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b526:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b52a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b52c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b52e:	6859      	ldr	r1, [r3, #4]
 800b530:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b532:	bf08      	it	eq
 800b534:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b536:	2200      	movs	r2, #0
 800b538:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	3a01      	subs	r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b540:	6818      	ldr	r0, [r3, #0]
}
 800b542:	4770      	bx	lr

0800b544 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b544:	4808      	ldr	r0, [pc, #32]	@ (800b568 <prvPortStartFirstTask+0x24>)
 800b546:	6800      	ldr	r0, [r0, #0]
 800b548:	6800      	ldr	r0, [r0, #0]
 800b54a:	f380 8808 	msr	MSP, r0
 800b54e:	f04f 0000 	mov.w	r0, #0
 800b552:	f380 8814 	msr	CONTROL, r0
 800b556:	b662      	cpsie	i
 800b558:	b661      	cpsie	f
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	df00      	svc	0
 800b564:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b566:	0000      	.short	0x0000
 800b568:	e000ed08 	.word	0xe000ed08

0800b56c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b56c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b57c <vPortEnableVFP+0x10>
 800b570:	6801      	ldr	r1, [r0, #0]
 800b572:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b576:	6001      	str	r1, [r0, #0]
 800b578:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b57a:	0000      	.short	0x0000
 800b57c:	e000ed88 	.word	0xe000ed88

0800b580 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b580:	2300      	movs	r3, #0
{
 800b582:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b584:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <prvTaskExitError+0x3c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	d008      	beq.n	800b5a0 <prvTaskExitError+0x20>
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	e7fe      	b.n	800b59e <prvTaskExitError+0x1e>
 800b5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0fc      	beq.n	800b5b0 <prvTaskExitError+0x30>
}
 800b5b6:	b002      	add	sp, #8
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	24000078 	.word	0x24000078

0800b5c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5c4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5c8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b5cc:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5ce:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5d0:	4b03      	ldr	r3, [pc, #12]	@ (800b5e0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5d2:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5d4:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5d6:	f06f 0302 	mvn.w	r3, #2
 800b5da:	6203      	str	r3, [r0, #32]
}
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	0800b581 	.word	0x0800b581
	...

0800b5f0 <SVC_Handler>:
	__asm volatile (
 800b5f0:	4b07      	ldr	r3, [pc, #28]	@ (800b610 <pxCurrentTCBConst2>)
 800b5f2:	6819      	ldr	r1, [r3, #0]
 800b5f4:	6808      	ldr	r0, [r1, #0]
 800b5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	f380 8809 	msr	PSP, r0
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f04f 0000 	mov.w	r0, #0
 800b606:	f380 8811 	msr	BASEPRI, r0
 800b60a:	4770      	bx	lr
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst2>:
 800b610:	24025298 	.word	0x24025298

0800b614 <vPortEnterCritical>:
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b624:	4a0a      	ldr	r2, [pc, #40]	@ (800b650 <vPortEnterCritical+0x3c>)
 800b626:	6813      	ldr	r3, [r2, #0]
 800b628:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b62a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b62c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b62e:	d10e      	bne.n	800b64e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b634:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	b143      	cbz	r3, 800b64e <vPortEnterCritical+0x3a>
 800b63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	e7fe      	b.n	800b64c <vPortEnterCritical+0x38>
}
 800b64e:	4770      	bx	lr
 800b650:	24000078 	.word	0x24000078

0800b654 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b654:	4a08      	ldr	r2, [pc, #32]	@ (800b678 <vPortExitCritical+0x24>)
 800b656:	6813      	ldr	r3, [r2, #0]
 800b658:	b943      	cbnz	r3, 800b66c <vPortExitCritical+0x18>
 800b65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	e7fe      	b.n	800b66a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b66c:	3b01      	subs	r3, #1
 800b66e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b670:	b90b      	cbnz	r3, 800b676 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b672:	f383 8811 	msr	BASEPRI, r3
}
 800b676:	4770      	bx	lr
 800b678:	24000078 	.word	0x24000078
 800b67c:	00000000 	.word	0x00000000

0800b680 <PendSV_Handler>:
	__asm volatile
 800b680:	f3ef 8009 	mrs	r0, PSP
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	4b15      	ldr	r3, [pc, #84]	@ (800b6e0 <pxCurrentTCBConst>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	f01e 0f10 	tst.w	lr, #16
 800b690:	bf08      	it	eq
 800b692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	6010      	str	r0, [r2, #0]
 800b69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6a4:	f380 8811 	msr	BASEPRI, r0
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f001 f998 	bl	800c9e4 <vTaskSwitchContext>
 800b6b4:	f04f 0000 	mov.w	r0, #0
 800b6b8:	f380 8811 	msr	BASEPRI, r0
 800b6bc:	bc09      	pop	{r0, r3}
 800b6be:	6819      	ldr	r1, [r3, #0]
 800b6c0:	6808      	ldr	r0, [r1, #0]
 800b6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c6:	f01e 0f10 	tst.w	lr, #16
 800b6ca:	bf08      	it	eq
 800b6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6d0:	f380 8809 	msr	PSP, r0
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	f3af 8000 	nop.w

0800b6e0 <pxCurrentTCBConst>:
 800b6e0:	24025298 	.word	0x24025298

0800b6e4 <xPortSysTickHandler>:
{
 800b6e4:	b508      	push	{r3, lr}
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b6f6:	f001 f801 	bl	800c6fc <xTaskIncrementTick>
 800b6fa:	b128      	cbz	r0, 800b708 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b704:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b708:	2300      	movs	r3, #0
 800b70a:	f383 8811 	msr	BASEPRI, r3
}
 800b70e:	bd08      	pop	{r3, pc}

0800b710 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b710:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b714:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b716:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b71a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b71c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b71e:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <vPortSetupTimerInterrupt+0x20>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	fbb3 f3f1 	udiv	r3, r3, r1
 800b726:	3b01      	subs	r3, #1
 800b728:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b72a:	2307      	movs	r3, #7
 800b72c:	6113      	str	r3, [r2, #16]
}
 800b72e:	4770      	bx	lr
 800b730:	2400006c 	.word	0x2400006c

0800b734 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b734:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800b738:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b73a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b73e:	4a38      	ldr	r2, [pc, #224]	@ (800b820 <xPortStartScheduler+0xec>)
 800b740:	4291      	cmp	r1, r2
 800b742:	d108      	bne.n	800b756 <xPortStartScheduler+0x22>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	e7fe      	b.n	800b754 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b756:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b75a:	4b32      	ldr	r3, [pc, #200]	@ (800b824 <xPortStartScheduler+0xf0>)
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d108      	bne.n	800b772 <xPortStartScheduler+0x3e>
 800b760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	e7fe      	b.n	800b770 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b772:	4b2d      	ldr	r3, [pc, #180]	@ (800b828 <xPortStartScheduler+0xf4>)
 800b774:	781a      	ldrb	r2, [r3, #0]
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b77a:	22ff      	movs	r2, #255	@ 0xff
 800b77c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b77e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b780:	4a2a      	ldr	r2, [pc, #168]	@ (800b82c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b788:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b78c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b790:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b792:	2307      	movs	r3, #7
 800b794:	4a26      	ldr	r2, [pc, #152]	@ (800b830 <xPortStartScheduler+0xfc>)
 800b796:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b798:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800b79c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b79e:	0609      	lsls	r1, r1, #24
 800b7a0:	d40a      	bmi.n	800b7b8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d011      	beq.n	800b7ca <xPortStartScheduler+0x96>
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	e7fe      	b.n	800b7b6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	f88d 3003 	strb.w	r3, [sp, #3]
 800b7c8:	e7e6      	b.n	800b798 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7ce:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800b7d2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7d4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	4a13      	ldr	r2, [pc, #76]	@ (800b828 <xPortStartScheduler+0xf4>)
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7de:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7e6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7ea:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7f2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b7f6:	f7ff ff8b 	bl	800b710 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <xPortStartScheduler+0x100>)
 800b7fc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b7fe:	f7ff feb5 	bl	800b56c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b802:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b806:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b80a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b80e:	f7ff fe99 	bl	800b544 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b812:	f001 f8e7 	bl	800c9e4 <vTaskSwitchContext>
}
 800b816:	4628      	mov	r0, r5
	prvTaskExitError();
 800b818:	f7ff feb2 	bl	800b580 <prvTaskExitError>
}
 800b81c:	b003      	add	sp, #12
 800b81e:	bd30      	pop	{r4, r5, pc}
 800b820:	410fc271 	.word	0x410fc271
 800b824:	410fc270 	.word	0x410fc270
 800b828:	e000e400 	.word	0xe000e400
 800b82c:	24024d5c 	.word	0x24024d5c
 800b830:	24024d58 	.word	0x24024d58
 800b834:	24000078 	.word	0x24000078

0800b838 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b838:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b83c:	2b0f      	cmp	r3, #15
 800b83e:	d90e      	bls.n	800b85e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b840:	4a11      	ldr	r2, [pc, #68]	@ (800b888 <vPortValidateInterruptPriority+0x50>)
 800b842:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b844:	4a11      	ldr	r2, [pc, #68]	@ (800b88c <vPortValidateInterruptPriority+0x54>)
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d908      	bls.n	800b85e <vPortValidateInterruptPriority+0x26>
 800b84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	e7fe      	b.n	800b85c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b85e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b862:	4a0b      	ldr	r2, [pc, #44]	@ (800b890 <vPortValidateInterruptPriority+0x58>)
 800b864:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b86e:	4293      	cmp	r3, r2
 800b870:	d908      	bls.n	800b884 <vPortValidateInterruptPriority+0x4c>
 800b872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	e7fe      	b.n	800b882 <vPortValidateInterruptPriority+0x4a>
	}
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	e000e3f0 	.word	0xe000e3f0
 800b88c:	24024d5c 	.word	0x24024d5c
 800b890:	24024d58 	.word	0x24024d58

0800b894 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b894:	b510      	push	{r4, lr}
 800b896:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b898:	f7ff febc 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b89c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b89e:	f7ff fed9 	bl	800b654 <vPortExitCritical>

	return xReturn;
}
 800b8a2:	fab4 f084 	clz	r0, r4
 800b8a6:	0940      	lsrs	r0, r0, #5
 800b8a8:	bd10      	pop	{r4, pc}

0800b8aa <prvCopyDataToQueue>:
{
 800b8aa:	b570      	push	{r4, r5, r6, lr}
 800b8ac:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800b8b0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8b2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8b4:	b942      	cbnz	r2, 800b8c8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8b6:	6806      	ldr	r6, [r0, #0]
 800b8b8:	b99e      	cbnz	r6, 800b8e2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8ba:	6880      	ldr	r0, [r0, #8]
 800b8bc:	f001 f9f2 	bl	800cca4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8c0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8c2:	3501      	adds	r5, #1
 800b8c4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b8c8:	b96e      	cbnz	r6, 800b8e6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8ca:	6840      	ldr	r0, [r0, #4]
 800b8cc:	f016 fafd 	bl	8021eca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b8d4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8d6:	68a2      	ldr	r2, [r4, #8]
 800b8d8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8da:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8dc:	bf24      	itt	cs
 800b8de:	6823      	ldrcs	r3, [r4, #0]
 800b8e0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	e7ed      	b.n	800b8c2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8e6:	68c0      	ldr	r0, [r0, #12]
 800b8e8:	f016 faef 	bl	8021eca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	4251      	negs	r1, r2
 800b8f2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8f8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8fa:	bf3e      	ittt	cc
 800b8fc:	68a3      	ldrcc	r3, [r4, #8]
 800b8fe:	185b      	addcc	r3, r3, r1
 800b900:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b902:	2e02      	cmp	r6, #2
 800b904:	d1ed      	bne.n	800b8e2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b906:	b10d      	cbz	r5, 800b90c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800b908:	3d01      	subs	r5, #1
 800b90a:	e7ea      	b.n	800b8e2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800b90c:	4628      	mov	r0, r5
 800b90e:	e7d8      	b.n	800b8c2 <prvCopyDataToQueue+0x18>

0800b910 <prvCopyDataFromQueue>:
{
 800b910:	4603      	mov	r3, r0
 800b912:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800b916:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b918:	b162      	cbz	r2, 800b934 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b91a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b91c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b91e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b920:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b922:	60dc      	str	r4, [r3, #12]
}
 800b924:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b928:	bf24      	itt	cs
 800b92a:	6819      	ldrcs	r1, [r3, #0]
 800b92c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b92e:	68d9      	ldr	r1, [r3, #12]
 800b930:	f016 bacb 	b.w	8021eca <memcpy>
}
 800b934:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <prvUnlockQueue>:
{
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b93e:	f7ff fe69 	bl	800b614 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b942:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b946:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b94a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b94c:	2d00      	cmp	r5, #0
 800b94e:	dc14      	bgt.n	800b97a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b950:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b952:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b956:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800b95a:	f7ff fe7b 	bl	800b654 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b95e:	f7ff fe59 	bl	800b614 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b962:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800b966:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b968:	2d00      	cmp	r5, #0
 800b96a:	dc12      	bgt.n	800b992 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b96c:	23ff      	movs	r3, #255	@ 0xff
 800b96e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800b972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b976:	f7ff be6d 	b.w	800b654 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b97a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0e7      	beq.n	800b950 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b980:	4630      	mov	r0, r6
 800b982:	f001 f8ab 	bl	800cadc <xTaskRemoveFromEventList>
 800b986:	b108      	cbz	r0, 800b98c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b988:	f001 f932 	bl	800cbf0 <vTaskMissedYield>
			--cTxLock;
 800b98c:	3d01      	subs	r5, #1
 800b98e:	b26d      	sxtb	r5, r5
 800b990:	e7dc      	b.n	800b94c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0e9      	beq.n	800b96c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b998:	4630      	mov	r0, r6
 800b99a:	f001 f89f 	bl	800cadc <xTaskRemoveFromEventList>
 800b99e:	b108      	cbz	r0, 800b9a4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b9a0:	f001 f926 	bl	800cbf0 <vTaskMissedYield>
				--cRxLock;
 800b9a4:	3d01      	subs	r5, #1
 800b9a6:	b26d      	sxtb	r5, r5
 800b9a8:	e7de      	b.n	800b968 <prvUnlockQueue+0x2e>

0800b9aa <xQueueGenericReset>:
{
 800b9aa:	b538      	push	{r3, r4, r5, lr}
 800b9ac:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	b940      	cbnz	r0, 800b9c4 <xQueueGenericReset+0x1a>
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	e7fe      	b.n	800b9c2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800b9c4:	f7ff fe26 	bl	800b614 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9c8:	6822      	ldr	r2, [r4, #0]
 800b9ca:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ce:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d0:	434b      	muls	r3, r1
 800b9d2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9da:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800b9dc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9de:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9e0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b9e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800b9ea:	b9a5      	cbnz	r5, 800ba16 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	b173      	cbz	r3, 800ba0e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9f0:	f104 0010 	add.w	r0, r4, #16
 800b9f4:	f001 f872 	bl	800cadc <xTaskRemoveFromEventList>
 800b9f8:	b148      	cbz	r0, 800ba0e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800b9fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ba0e:	f7ff fe21 	bl	800b654 <vPortExitCritical>
}
 800ba12:	2001      	movs	r0, #1
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba16:	f104 0010 	add.w	r0, r4, #16
 800ba1a:	f7ff fd53 	bl	800b4c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba1e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ba22:	f7ff fd4f 	bl	800b4c4 <vListInitialise>
 800ba26:	e7f2      	b.n	800ba0e <xQueueGenericReset+0x64>

0800ba28 <xQueueGenericCreateStatic>:
	{
 800ba28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba2e:	b940      	cbnz	r0, 800ba42 <xQueueGenericCreateStatic+0x1a>
 800ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	e7fe      	b.n	800ba40 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ba42:	b943      	cbnz	r3, 800ba56 <xQueueGenericCreateStatic+0x2e>
 800ba44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	e7fe      	b.n	800ba54 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba56:	b14a      	cbz	r2, 800ba6c <xQueueGenericCreateStatic+0x44>
 800ba58:	b991      	cbnz	r1, 800ba80 <xQueueGenericCreateStatic+0x58>
 800ba5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	e7fe      	b.n	800ba6a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba6c:	b141      	cbz	r1, 800ba80 <xQueueGenericCreateStatic+0x58>
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba80:	2350      	movs	r3, #80	@ 0x50
 800ba82:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	2b50      	cmp	r3, #80	@ 0x50
 800ba88:	d008      	beq.n	800ba9c <xQueueGenericCreateStatic+0x74>
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba9c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba9e:	2d00      	cmp	r5, #0
 800baa0:	bf08      	it	eq
 800baa2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800baa4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800baa6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800baaa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800baac:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff ff7a 	bl	800b9aa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bab6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800baba:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800babc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bac0:	b003      	add	sp, #12
 800bac2:	bd30      	pop	{r4, r5, pc}

0800bac4 <xQueueGenericCreate>:
	{
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	460d      	mov	r5, r1
 800bac8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800baca:	4606      	mov	r6, r0
 800bacc:	b940      	cbnz	r0, 800bae0 <xQueueGenericCreate+0x1c>
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	e7fe      	b.n	800bade <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bae2:	3050      	adds	r0, #80	@ 0x50
 800bae4:	f7ff fc18 	bl	800b318 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bae8:	4604      	mov	r4, r0
 800baea:	b170      	cbz	r0, 800bb0a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800baec:	2300      	movs	r3, #0
 800baee:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800baf2:	b165      	cbz	r5, 800bb0e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baf4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baf8:	2101      	movs	r1, #1
 800bafa:	4620      	mov	r0, r4
 800bafc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bafe:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb02:	f7ff ff52 	bl	800b9aa <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bb06:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb0e:	4603      	mov	r3, r0
 800bb10:	e7f2      	b.n	800baf8 <xQueueGenericCreate+0x34>

0800bb12 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bb12:	b513      	push	{r0, r1, r4, lr}
 800bb14:	4613      	mov	r3, r2
 800bb16:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bb18:	b940      	cbnz	r0, 800bb2c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	e7fe      	b.n	800bb2a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb2c:	4288      	cmp	r0, r1
 800bb2e:	d208      	bcs.n	800bb42 <xQueueCreateCountingSemaphoreStatic+0x30>
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	e7fe      	b.n	800bb40 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb42:	2202      	movs	r2, #2
 800bb44:	9200      	str	r2, [sp, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	4611      	mov	r1, r2
 800bb4a:	f7ff ff6d 	bl	800ba28 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bb4e:	b100      	cbz	r0, 800bb52 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb50:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bb52:	b002      	add	sp, #8
 800bb54:	bd10      	pop	{r4, pc}

0800bb56 <xQueueCreateCountingSemaphore>:
	{
 800bb56:	b510      	push	{r4, lr}
 800bb58:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bb5a:	b940      	cbnz	r0, 800bb6e <xQueueCreateCountingSemaphore+0x18>
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	e7fe      	b.n	800bb6c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb6e:	4288      	cmp	r0, r1
 800bb70:	d208      	bcs.n	800bb84 <xQueueCreateCountingSemaphore+0x2e>
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	e7fe      	b.n	800bb82 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb84:	2202      	movs	r2, #2
 800bb86:	2100      	movs	r1, #0
 800bb88:	f7ff ff9c 	bl	800bac4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800bb8c:	b100      	cbz	r0, 800bb90 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb8e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bb90:	bd10      	pop	{r4, pc}

0800bb92 <xQueueGenericSend>:
{
 800bb92:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bb96:	460f      	mov	r7, r1
 800bb98:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bb9a:	4604      	mov	r4, r0
{
 800bb9c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bb9e:	b940      	cbnz	r0, 800bbb2 <xQueueGenericSend+0x20>
 800bba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbb2:	b951      	cbnz	r1, 800bbca <xQueueGenericSend+0x38>
 800bbb4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bbb6:	b143      	cbz	r3, 800bbca <xQueueGenericSend+0x38>
 800bbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbca:	2e02      	cmp	r6, #2
 800bbcc:	d10b      	bne.n	800bbe6 <xQueueGenericSend+0x54>
 800bbce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d008      	beq.n	800bbe6 <xQueueGenericSend+0x54>
 800bbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	e7fe      	b.n	800bbe4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbe6:	f001 f80f 	bl	800cc08 <xTaskGetSchedulerState>
 800bbea:	4605      	mov	r5, r0
 800bbec:	b330      	cbz	r0, 800bc3c <xQueueGenericSend+0xaa>
 800bbee:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bbf0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bbf4:	f7ff fd0e 	bl	800b614 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbf8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bbfa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d301      	bcc.n	800bc04 <xQueueGenericSend+0x72>
 800bc00:	2e02      	cmp	r6, #2
 800bc02:	d127      	bne.n	800bc54 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc04:	4632      	mov	r2, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f7ff fe4e 	bl	800b8aa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bc10:	b11b      	cbz	r3, 800bc1a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc12:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bc16:	f000 ff61 	bl	800cadc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800bc1a:	b148      	cbz	r0, 800bc30 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800bc1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bc30:	f7ff fd10 	bl	800b654 <vPortExitCritical>
				return pdPASS;
 800bc34:	2001      	movs	r0, #1
}
 800bc36:	b004      	add	sp, #16
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0d6      	beq.n	800bbf0 <xQueueGenericSend+0x5e>
 800bc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	e7fe      	b.n	800bc52 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc54:	9b01      	ldr	r3, [sp, #4]
 800bc56:	b91b      	cbnz	r3, 800bc60 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800bc58:	f7ff fcfc 	bl	800b654 <vPortExitCritical>
					return errQUEUE_FULL;
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7ea      	b.n	800bc36 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800bc60:	b915      	cbnz	r5, 800bc68 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc62:	a802      	add	r0, sp, #8
 800bc64:	f000 ff7c 	bl	800cb60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bc68:	f7ff fcf4 	bl	800b654 <vPortExitCritical>
		vTaskSuspendAll();
 800bc6c:	f000 fd38 	bl	800c6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc70:	f7ff fcd0 	bl	800b614 <vPortEnterCritical>
 800bc74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bc78:	2bff      	cmp	r3, #255	@ 0xff
 800bc7a:	d101      	bne.n	800bc80 <xQueueGenericSend+0xee>
 800bc7c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bc80:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bc84:	2bff      	cmp	r3, #255	@ 0xff
 800bc86:	d101      	bne.n	800bc8c <xQueueGenericSend+0xfa>
 800bc88:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bc8c:	f7ff fce2 	bl	800b654 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc90:	a901      	add	r1, sp, #4
 800bc92:	a802      	add	r0, sp, #8
 800bc94:	f000 ff70 	bl	800cb78 <xTaskCheckForTimeOut>
 800bc98:	bb38      	cbnz	r0, 800bcea <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc9a:	f7ff fcbb 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc9e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bca0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d10e      	bne.n	800bcc4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bca6:	f7ff fcd5 	bl	800b654 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcaa:	9901      	ldr	r1, [sp, #4]
 800bcac:	f104 0010 	add.w	r0, r4, #16
 800bcb0:	f000 fedc 	bl	800ca6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7ff fe40 	bl	800b93a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcba:	f000 fdb5 	bl	800c828 <xTaskResumeAll>
 800bcbe:	b148      	cbz	r0, 800bcd4 <xQueueGenericSend+0x142>
 800bcc0:	2501      	movs	r5, #1
 800bcc2:	e797      	b.n	800bbf4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800bcc4:	f7ff fcc6 	bl	800b654 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f7ff fe36 	bl	800b93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcce:	f000 fdab 	bl	800c828 <xTaskResumeAll>
 800bcd2:	e7f5      	b.n	800bcc0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800bcd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bcd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcdc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	e7ea      	b.n	800bcc0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff fe25 	bl	800b93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcf0:	f000 fd9a 	bl	800c828 <xTaskResumeAll>
			return errQUEUE_FULL;
 800bcf4:	e7b2      	b.n	800bc5c <xQueueGenericSend+0xca>

0800bcf6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bcf6:	2200      	movs	r2, #0
	{
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	9000      	str	r0, [sp, #0]
 800bd00:	2001      	movs	r0, #1
 800bd02:	f7ff fe91 	bl	800ba28 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800bd06:	4604      	mov	r4, r0
 800bd08:	b138      	cbz	r0, 800bd1a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd0a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd10:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd12:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd14:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd16:	f7ff ff3c 	bl	800bb92 <xQueueGenericSend>
	}
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	b002      	add	sp, #8
 800bd1e:	bd10      	pop	{r4, pc}

0800bd20 <xQueueGiveMutexRecursive>:
	{
 800bd20:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800bd22:	4604      	mov	r4, r0
 800bd24:	b940      	cbnz	r0, 800bd38 <xQueueGiveMutexRecursive+0x18>
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	e7fe      	b.n	800bd36 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bd38:	6885      	ldr	r5, [r0, #8]
 800bd3a:	f000 ff5f 	bl	800cbfc <xTaskGetCurrentTaskHandle>
 800bd3e:	4285      	cmp	r5, r0
 800bd40:	d10b      	bne.n	800bd5a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bd42:	68e3      	ldr	r3, [r4, #12]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bd48:	b10b      	cbz	r3, 800bd4e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800bd4a:	2001      	movs	r0, #1
	}
 800bd4c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	4620      	mov	r0, r4
 800bd54:	f7ff ff1d 	bl	800bb92 <xQueueGenericSend>
 800bd58:	e7f7      	b.n	800bd4a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800bd5a:	2000      	movs	r0, #0
		return xReturn;
 800bd5c:	e7f6      	b.n	800bd4c <xQueueGiveMutexRecursive+0x2c>

0800bd5e <xQueueCreateMutex>:
	{
 800bd5e:	b570      	push	{r4, r5, r6, lr}
 800bd60:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd62:	2050      	movs	r0, #80	@ 0x50
 800bd64:	f7ff fad8 	bl	800b318 <pvPortMalloc>
 800bd68:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800bd6a:	b198      	cbz	r0, 800bd94 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd6c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800bd6e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd70:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd72:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bd76:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd7a:	f7ff fe16 	bl	800b9aa <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd7e:	462b      	mov	r3, r5
 800bd80:	462a      	mov	r2, r5
 800bd82:	4629      	mov	r1, r5
 800bd84:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bd86:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd8a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd8c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd8e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd90:	f7ff feff 	bl	800bb92 <xQueueGenericSend>
	}
 800bd94:	4620      	mov	r0, r4
 800bd96:	bd70      	pop	{r4, r5, r6, pc}

0800bd98 <xQueueGenericSendFromISR>:
{
 800bd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd9c:	4689      	mov	r9, r1
 800bd9e:	4617      	mov	r7, r2
 800bda0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bda2:	4604      	mov	r4, r0
 800bda4:	b940      	cbnz	r0, 800bdb8 <xQueueGenericSendFromISR+0x20>
 800bda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	e7fe      	b.n	800bdb6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdb8:	b951      	cbnz	r1, 800bdd0 <xQueueGenericSendFromISR+0x38>
 800bdba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bdbc:	b143      	cbz	r3, 800bdd0 <xQueueGenericSendFromISR+0x38>
 800bdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	e7fe      	b.n	800bdce <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd0:	2e02      	cmp	r6, #2
 800bdd2:	d10b      	bne.n	800bdec <xQueueGenericSendFromISR+0x54>
 800bdd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d008      	beq.n	800bdec <xQueueGenericSendFromISR+0x54>
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	e7fe      	b.n	800bdea <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdec:	f7ff fd24 	bl	800b838 <vPortValidateInterruptPriority>
	__asm volatile
 800bdf0:	f3ef 8811 	mrs	r8, BASEPRI
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800be06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be08:	429a      	cmp	r2, r3
 800be0a:	d301      	bcc.n	800be10 <xQueueGenericSendFromISR+0x78>
 800be0c:	2e02      	cmp	r6, #2
 800be0e:	d11e      	bne.n	800be4e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800be10:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be14:	4632      	mov	r2, r6
 800be16:	4649      	mov	r1, r9
 800be18:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800be1a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be1e:	f7ff fd44 	bl	800b8aa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800be22:	1c6b      	adds	r3, r5, #1
 800be24:	d10e      	bne.n	800be44 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800be28:	b13b      	cbz	r3, 800be3a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be2a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800be2e:	f000 fe55 	bl	800cadc <xTaskRemoveFromEventList>
 800be32:	b110      	cbz	r0, 800be3a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800be34:	b10f      	cbz	r7, 800be3a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be36:	2301      	movs	r3, #1
 800be38:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800be3a:	2001      	movs	r0, #1
	__asm volatile
 800be3c:	f388 8811 	msr	BASEPRI, r8
}
 800be40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be44:	3501      	adds	r5, #1
 800be46:	b26d      	sxtb	r5, r5
 800be48:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800be4c:	e7f5      	b.n	800be3a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800be4e:	2000      	movs	r0, #0
 800be50:	e7f4      	b.n	800be3c <xQueueGenericSendFromISR+0xa4>

0800be52 <xQueueGiveFromISR>:
{
 800be52:	b570      	push	{r4, r5, r6, lr}
 800be54:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800be56:	4604      	mov	r4, r0
 800be58:	b940      	cbnz	r0, 800be6c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	e7fe      	b.n	800be6a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800be6c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800be6e:	b143      	cbz	r3, 800be82 <xQueueGiveFromISR+0x30>
 800be70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	e7fe      	b.n	800be80 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be82:	6803      	ldr	r3, [r0, #0]
 800be84:	b953      	cbnz	r3, 800be9c <xQueueGiveFromISR+0x4a>
 800be86:	6883      	ldr	r3, [r0, #8]
 800be88:	b143      	cbz	r3, 800be9c <xQueueGiveFromISR+0x4a>
 800be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	e7fe      	b.n	800be9a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be9c:	f7ff fccc 	bl	800b838 <vPortValidateInterruptPriority>
	__asm volatile
 800bea0:	f3ef 8611 	mrs	r6, BASEPRI
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beb4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800beb6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800beb8:	4293      	cmp	r3, r2
 800beba:	d919      	bls.n	800bef0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bec0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800bec2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800bec4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bec6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800bec8:	d10d      	bne.n	800bee6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800becc:	b13b      	cbz	r3, 800bede <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bece:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bed2:	f000 fe03 	bl	800cadc <xTaskRemoveFromEventList>
 800bed6:	b110      	cbz	r0, 800bede <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800bed8:	b10d      	cbz	r5, 800bede <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800beda:	2301      	movs	r3, #1
 800bedc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800bede:	2001      	movs	r0, #1
	__asm volatile
 800bee0:	f386 8811 	msr	BASEPRI, r6
}
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bee6:	3301      	adds	r3, #1
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800beee:	e7f6      	b.n	800bede <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800bef0:	2000      	movs	r0, #0
 800bef2:	e7f5      	b.n	800bee0 <xQueueGiveFromISR+0x8e>

0800bef4 <xQueueReceive>:
{
 800bef4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bef8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800befa:	4604      	mov	r4, r0
{
 800befc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800befe:	b940      	cbnz	r0, 800bf12 <xQueueReceive+0x1e>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	e7fe      	b.n	800bf10 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf12:	b951      	cbnz	r1, 800bf2a <xQueueReceive+0x36>
 800bf14:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bf16:	b143      	cbz	r3, 800bf2a <xQueueReceive+0x36>
 800bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	e7fe      	b.n	800bf28 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf2a:	f000 fe6d 	bl	800cc08 <xTaskGetSchedulerState>
 800bf2e:	4605      	mov	r5, r0
 800bf30:	b318      	cbz	r0, 800bf7a <xQueueReceive+0x86>
 800bf32:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bf34:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bf38:	f7ff fb6c 	bl	800b614 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf3c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf3e:	b347      	cbz	r7, 800bf92 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf40:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf42:	4631      	mov	r1, r6
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff fce3 	bl	800b910 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf4a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	b173      	cbz	r3, 800bf6e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf50:	f104 0010 	add.w	r0, r4, #16
 800bf54:	f000 fdc2 	bl	800cadc <xTaskRemoveFromEventList>
 800bf58:	b148      	cbz	r0, 800bf6e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800bf5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bf6e:	f7ff fb71 	bl	800b654 <vPortExitCritical>
				return pdPASS;
 800bf72:	2001      	movs	r0, #1
}
 800bf74:	b004      	add	sp, #16
 800bf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf7a:	9b01      	ldr	r3, [sp, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0d9      	beq.n	800bf34 <xQueueReceive+0x40>
 800bf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	e7fe      	b.n	800bf90 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	b91b      	cbnz	r3, 800bf9e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800bf96:	f7ff fb5d 	bl	800b654 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e7ea      	b.n	800bf74 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800bf9e:	b915      	cbnz	r5, 800bfa6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfa0:	a802      	add	r0, sp, #8
 800bfa2:	f000 fddd 	bl	800cb60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bfa6:	f7ff fb55 	bl	800b654 <vPortExitCritical>
		vTaskSuspendAll();
 800bfaa:	f000 fb99 	bl	800c6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfae:	f7ff fb31 	bl	800b614 <vPortEnterCritical>
 800bfb2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bfb6:	2bff      	cmp	r3, #255	@ 0xff
 800bfb8:	d101      	bne.n	800bfbe <xQueueReceive+0xca>
 800bfba:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bfbe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bfc2:	2bff      	cmp	r3, #255	@ 0xff
 800bfc4:	d101      	bne.n	800bfca <xQueueReceive+0xd6>
 800bfc6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bfca:	f7ff fb43 	bl	800b654 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfce:	a901      	add	r1, sp, #4
 800bfd0:	a802      	add	r0, sp, #8
 800bfd2:	f000 fdd1 	bl	800cb78 <xTaskCheckForTimeOut>
 800bfd6:	bb00      	cbnz	r0, 800c01a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff fc5b 	bl	800b894 <prvIsQueueEmpty>
 800bfde:	b1b0      	cbz	r0, 800c00e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfe0:	9901      	ldr	r1, [sp, #4]
 800bfe2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bfe6:	f000 fd41 	bl	800ca6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfea:	4620      	mov	r0, r4
 800bfec:	f7ff fca5 	bl	800b93a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bff0:	f000 fc1a 	bl	800c828 <xTaskResumeAll>
 800bff4:	b948      	cbnz	r0, 800c00a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800bff6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bffe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	2501      	movs	r5, #1
 800c00c:	e794      	b.n	800bf38 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c00e:	4620      	mov	r0, r4
 800c010:	f7ff fc93 	bl	800b93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c014:	f000 fc08 	bl	800c828 <xTaskResumeAll>
 800c018:	e7f7      	b.n	800c00a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff fc8d 	bl	800b93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c020:	f000 fc02 	bl	800c828 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c024:	4620      	mov	r0, r4
 800c026:	f7ff fc35 	bl	800b894 <prvIsQueueEmpty>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d0ed      	beq.n	800c00a <xQueueReceive+0x116>
 800c02e:	e7b4      	b.n	800bf9a <xQueueReceive+0xa6>

0800c030 <xQueueSemaphoreTake>:
{
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c034:	4604      	mov	r4, r0
{
 800c036:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c038:	b940      	cbnz	r0, 800c04c <xQueueSemaphoreTake+0x1c>
 800c03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	e7fe      	b.n	800c04a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c04c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c04e:	b145      	cbz	r5, 800c062 <xQueueSemaphoreTake+0x32>
 800c050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	e7fe      	b.n	800c060 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c062:	f000 fdd1 	bl	800cc08 <xTaskGetSchedulerState>
 800c066:	4606      	mov	r6, r0
 800c068:	b320      	cbz	r0, 800c0b4 <xQueueSemaphoreTake+0x84>
 800c06a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c06c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c06e:	f7ff fad1 	bl	800b614 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c072:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c074:	b353      	cbz	r3, 800c0cc <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c076:	3b01      	subs	r3, #1
 800c078:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	b913      	cbnz	r3, 800c084 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c07e:	f000 fea1 	bl	800cdc4 <pvTaskIncrementMutexHeldCount>
 800c082:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	b173      	cbz	r3, 800c0a6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c088:	f104 0010 	add.w	r0, r4, #16
 800c08c:	f000 fd26 	bl	800cadc <xTaskRemoveFromEventList>
 800c090:	b148      	cbz	r0, 800c0a6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c092:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c09a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c0a6:	f7ff fad5 	bl	800b654 <vPortExitCritical>
				return pdPASS;
 800c0aa:	2001      	movs	r0, #1
}
 800c0ac:	b005      	add	sp, #20
 800c0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b0:	4635      	mov	r5, r6
 800c0b2:	e7db      	b.n	800c06c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0fa      	beq.n	800c0b0 <xQueueSemaphoreTake+0x80>
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	e7fe      	b.n	800c0ca <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	b953      	cbnz	r3, 800c0e6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	d066      	beq.n	800c1a2 <xQueueSemaphoreTake+0x172>
 800c0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	e7fe      	b.n	800c0e4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c0e6:	b916      	cbnz	r6, 800c0ee <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0e8:	a802      	add	r0, sp, #8
 800c0ea:	f000 fd39 	bl	800cb60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c0ee:	f7ff fab1 	bl	800b654 <vPortExitCritical>
		vTaskSuspendAll();
 800c0f2:	f000 faf5 	bl	800c6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0f6:	f7ff fa8d 	bl	800b614 <vPortEnterCritical>
 800c0fa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c0fe:	2bff      	cmp	r3, #255	@ 0xff
 800c100:	d101      	bne.n	800c106 <xQueueSemaphoreTake+0xd6>
 800c102:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c106:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c10a:	2bff      	cmp	r3, #255	@ 0xff
 800c10c:	d101      	bne.n	800c112 <xQueueSemaphoreTake+0xe2>
 800c10e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c112:	f7ff fa9f 	bl	800b654 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c116:	a901      	add	r1, sp, #4
 800c118:	a802      	add	r0, sp, #8
 800c11a:	f000 fd2d 	bl	800cb78 <xTaskCheckForTimeOut>
 800c11e:	bb50      	cbnz	r0, 800c176 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c120:	4620      	mov	r0, r4
 800c122:	f7ff fbb7 	bl	800b894 <prvIsQueueEmpty>
 800c126:	b300      	cbz	r0, 800c16a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	b93b      	cbnz	r3, 800c13c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c12c:	f7ff fa72 	bl	800b614 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c130:	68a0      	ldr	r0, [r4, #8]
 800c132:	f000 fd79 	bl	800cc28 <xTaskPriorityInherit>
 800c136:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c138:	f7ff fa8c 	bl	800b654 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c13c:	9901      	ldr	r1, [sp, #4]
 800c13e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c142:	f000 fc93 	bl	800ca6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c146:	4620      	mov	r0, r4
 800c148:	f7ff fbf7 	bl	800b93a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c14c:	f000 fb6c 	bl	800c828 <xTaskResumeAll>
 800c150:	b948      	cbnz	r0, 800c166 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c152:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c15a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	2601      	movs	r6, #1
 800c168:	e781      	b.n	800c06e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff fbe5 	bl	800b93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c170:	f000 fb5a 	bl	800c828 <xTaskResumeAll>
 800c174:	e7f7      	b.n	800c166 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff fbdf 	bl	800b93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c17c:	f000 fb54 	bl	800c828 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff fb87 	bl	800b894 <prvIsQueueEmpty>
 800c186:	2800      	cmp	r0, #0
 800c188:	d0ed      	beq.n	800c166 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c18a:	b165      	cbz	r5, 800c1a6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c18c:	f7ff fa42 	bl	800b614 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c190:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c192:	b119      	cbz	r1, 800c19c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c194:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c196:	6819      	ldr	r1, [r3, #0]
 800c198:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c19c:	68a0      	ldr	r0, [r4, #8]
 800c19e:	f000 fdc3 	bl	800cd28 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c1a2:	f7ff fa57 	bl	800b654 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	e780      	b.n	800c0ac <xQueueSemaphoreTake+0x7c>

0800c1aa <xQueueTakeMutexRecursive>:
	{
 800c1aa:	b570      	push	{r4, r5, r6, lr}
 800c1ac:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	b940      	cbnz	r0, 800c1c4 <xQueueTakeMutexRecursive+0x1a>
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	e7fe      	b.n	800c1c2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c1c4:	6886      	ldr	r6, [r0, #8]
 800c1c6:	f000 fd19 	bl	800cbfc <xTaskGetCurrentTaskHandle>
 800c1ca:	4286      	cmp	r6, r0
 800c1cc:	d104      	bne.n	800c1d8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c1ce:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c1d0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60e3      	str	r3, [r4, #12]
	}
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7ff ff28 	bl	800c030 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d0f8      	beq.n	800c1d6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c1e4:	68e3      	ldr	r3, [r4, #12]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	60e3      	str	r3, [r4, #12]
 800c1ea:	e7f4      	b.n	800c1d6 <xQueueTakeMutexRecursive+0x2c>

0800c1ec <xQueueReceiveFromISR>:
{
 800c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	4689      	mov	r9, r1
 800c1f2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	b940      	cbnz	r0, 800c20a <xQueueReceiveFromISR+0x1e>
 800c1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	e7fe      	b.n	800c208 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c20a:	b951      	cbnz	r1, 800c222 <xQueueReceiveFromISR+0x36>
 800c20c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c20e:	b143      	cbz	r3, 800c222 <xQueueReceiveFromISR+0x36>
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	e7fe      	b.n	800c220 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c222:	f7ff fb09 	bl	800b838 <vPortValidateInterruptPriority>
	__asm volatile
 800c226:	f3ef 8711 	mrs	r7, BASEPRI
 800c22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c23a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c23c:	b30d      	cbz	r5, 800c282 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c23e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c242:	4649      	mov	r1, r9
 800c244:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c246:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c248:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c24a:	f7ff fb61 	bl	800b910 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c24e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c250:	1c73      	adds	r3, r6, #1
 800c252:	d111      	bne.n	800c278 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	b153      	cbz	r3, 800c26e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c258:	f104 0010 	add.w	r0, r4, #16
 800c25c:	f000 fc3e 	bl	800cadc <xTaskRemoveFromEventList>
 800c260:	b128      	cbz	r0, 800c26e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c262:	f1b8 0f00 	cmp.w	r8, #0
 800c266:	d002      	beq.n	800c26e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c268:	2301      	movs	r3, #1
 800c26a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c26e:	2001      	movs	r0, #1
	__asm volatile
 800c270:	f387 8811 	msr	BASEPRI, r7
}
 800c274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c278:	3601      	adds	r6, #1
 800c27a:	b276      	sxtb	r6, r6
 800c27c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c280:	e7f5      	b.n	800c26e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c282:	4628      	mov	r0, r5
 800c284:	e7f4      	b.n	800c270 <xQueueReceiveFromISR+0x84>
	...

0800c288 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c288:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c28a:	4a07      	ldr	r2, [pc, #28]	@ (800c2a8 <vQueueAddToRegistry+0x20>)
	{
 800c28c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c28e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c292:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c296:	b91d      	cbnz	r5, 800c2a0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c298:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c29c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c29e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	d1f3      	bne.n	800c28e <vQueueAddToRegistry+0x6>
 800c2a6:	e7fa      	b.n	800c29e <vQueueAddToRegistry+0x16>
 800c2a8:	24024d60 	.word	0x24024d60

0800c2ac <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2ac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2ae:	4a09      	ldr	r2, [pc, #36]	@ (800c2d4 <vQueueUnregisterQueue+0x28>)
	{
 800c2b0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2b2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c2b6:	00dc      	lsls	r4, r3, #3
 800c2b8:	4281      	cmp	r1, r0
 800c2ba:	d106      	bne.n	800c2ca <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c2bc:	4a06      	ldr	r2, [pc, #24]	@ (800c2d8 <vQueueUnregisterQueue+0x2c>)
 800c2be:	2100      	movs	r1, #0
 800c2c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c2c4:	4422      	add	r2, r4
 800c2c6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c2c8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	2b08      	cmp	r3, #8
 800c2ce:	d1f0      	bne.n	800c2b2 <vQueueUnregisterQueue+0x6>
 800c2d0:	e7fa      	b.n	800c2c8 <vQueueUnregisterQueue+0x1c>
 800c2d2:	bf00      	nop
 800c2d4:	24024d64 	.word	0x24024d64
 800c2d8:	24024d60 	.word	0x24024d60

0800c2dc <vQueueDelete>:
{
 800c2dc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c2de:	b940      	cbnz	r0, 800c2f2 <vQueueDelete+0x16>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	e7fe      	b.n	800c2f0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c2f2:	f7ff ffdb 	bl	800c2ac <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2f6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c2fa:	b91b      	cbnz	r3, 800c304 <vQueueDelete+0x28>
}
 800c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c300:	f7ff b8a2 	b.w	800b448 <vPortFree>
}
 800c304:	bd10      	pop	{r4, pc}

0800c306 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c306:	b570      	push	{r4, r5, r6, lr}
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c30e:	f7ff f981 	bl	800b614 <vPortEnterCritical>
 800c312:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c316:	2bff      	cmp	r3, #255	@ 0xff
 800c318:	d102      	bne.n	800c320 <vQueueWaitForMessageRestricted+0x1a>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c320:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c324:	2bff      	cmp	r3, #255	@ 0xff
 800c326:	d102      	bne.n	800c32e <vQueueWaitForMessageRestricted+0x28>
 800c328:	2300      	movs	r3, #0
 800c32a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c32e:	f7ff f991 	bl	800b654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c332:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c334:	b92b      	cbnz	r3, 800c342 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c336:	4632      	mov	r2, r6
 800c338:	4629      	mov	r1, r5
 800c33a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c33e:	f000 fbaf 	bl	800caa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c342:	4620      	mov	r0, r4
	}
 800c344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c348:	f7ff baf7 	b.w	800b93a <prvUnlockQueue>

0800c34c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c352:	f7ff f95f 	bl	800b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c356:	4b2f      	ldr	r3, [pc, #188]	@ (800c414 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c358:	4e2f      	ldr	r6, [pc, #188]	@ (800c418 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	4f2f      	ldr	r7, [pc, #188]	@ (800c41c <prvAddNewTaskToReadyList+0xd0>)
 800c35e:	3201      	adds	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c362:	6835      	ldr	r5, [r6, #0]
 800c364:	2d00      	cmp	r5, #0
 800c366:	d14a      	bne.n	800c3fe <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c368:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d11f      	bne.n	800c3b0 <prvAddNewTaskToReadyList+0x64>
 800c370:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c372:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c374:	4640      	mov	r0, r8
 800c376:	f7ff f8a5 	bl	800b4c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c37a:	f108 0814 	add.w	r8, r8, #20
 800c37e:	2d38      	cmp	r5, #56	@ 0x38
 800c380:	d1f7      	bne.n	800c372 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c382:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c444 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c386:	4d26      	ldr	r5, [pc, #152]	@ (800c420 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c388:	4640      	mov	r0, r8
 800c38a:	f7ff f89b 	bl	800b4c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c38e:	4628      	mov	r0, r5
 800c390:	f7ff f898 	bl	800b4c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c394:	4823      	ldr	r0, [pc, #140]	@ (800c424 <prvAddNewTaskToReadyList+0xd8>)
 800c396:	f7ff f895 	bl	800b4c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c39a:	4823      	ldr	r0, [pc, #140]	@ (800c428 <prvAddNewTaskToReadyList+0xdc>)
 800c39c:	f7ff f892 	bl	800b4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3a0:	4822      	ldr	r0, [pc, #136]	@ (800c42c <prvAddNewTaskToReadyList+0xe0>)
 800c3a2:	f7ff f88f 	bl	800b4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3a6:	4b22      	ldr	r3, [pc, #136]	@ (800c430 <prvAddNewTaskToReadyList+0xe4>)
 800c3a8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3ac:	4b21      	ldr	r3, [pc, #132]	@ (800c434 <prvAddNewTaskToReadyList+0xe8>)
 800c3ae:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c3b0:	4a21      	ldr	r2, [pc, #132]	@ (800c438 <prvAddNewTaskToReadyList+0xec>)
 800c3b2:	6813      	ldr	r3, [r2, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c3b8:	4a20      	ldr	r2, [pc, #128]	@ (800c43c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3ba:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c3bc:	6811      	ldr	r1, [r2, #0]
 800c3be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c3c0:	428b      	cmp	r3, r1
 800c3c2:	d900      	bls.n	800c3c6 <prvAddNewTaskToReadyList+0x7a>
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	2014      	movs	r0, #20
 800c3c8:	1d21      	adds	r1, r4, #4
 800c3ca:	fb00 7003 	mla	r0, r0, r3, r7
 800c3ce:	f7ff f887 	bl	800b4e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c3d2:	f7ff f93f 	bl	800b654 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800c440 <prvAddNewTaskToReadyList+0xf4>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	b173      	cbz	r3, 800c3fa <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3dc:	6833      	ldr	r3, [r6, #0]
 800c3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d209      	bcs.n	800c3fa <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c3e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	f3bf 8f6f 	isb	sy
}
 800c3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c3fe:	4b10      	ldr	r3, [pc, #64]	@ (800c440 <prvAddNewTaskToReadyList+0xf4>)
 800c400:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c402:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c404:	2a00      	cmp	r2, #0
 800c406:	d1d3      	bne.n	800c3b0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c408:	6832      	ldr	r2, [r6, #0]
 800c40a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d8cf      	bhi.n	800c3b0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c410:	6034      	str	r4, [r6, #0]
 800c412:	e7cd      	b.n	800c3b0 <prvAddNewTaskToReadyList+0x64>
 800c414:	24024dc4 	.word	0x24024dc4
 800c418:	24025298 	.word	0x24025298
 800c41c:	24024e38 	.word	0x24024e38
 800c420:	24024e10 	.word	0x24024e10
 800c424:	24024df4 	.word	0x24024df4
 800c428:	24024de0 	.word	0x24024de0
 800c42c:	24024dc8 	.word	0x24024dc8
 800c430:	24024e0c 	.word	0x24024e0c
 800c434:	24024e08 	.word	0x24024e08
 800c438:	24024da8 	.word	0x24024da8
 800c43c:	24024dbc 	.word	0x24024dbc
 800c440:	24024db8 	.word	0x24024db8
 800c444:	24024e24 	.word	0x24024e24

0800c448 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c44a:	4b15      	ldr	r3, [pc, #84]	@ (800c4a0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c44c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c44e:	4d15      	ldr	r5, [pc, #84]	@ (800c4a4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c450:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c452:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c454:	6828      	ldr	r0, [r5, #0]
 800c456:	3004      	adds	r0, #4
 800c458:	f7ff f864 	bl	800b524 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c45c:	1c73      	adds	r3, r6, #1
 800c45e:	d107      	bne.n	800c470 <prvAddCurrentTaskToDelayedList+0x28>
 800c460:	b137      	cbz	r7, 800c470 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c462:	6829      	ldr	r1, [r5, #0]
 800c464:	4810      	ldr	r0, [pc, #64]	@ (800c4a8 <prvAddCurrentTaskToDelayedList+0x60>)
 800c466:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c46c:	f7ff b838 	b.w	800b4e0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c470:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c472:	682b      	ldr	r3, [r5, #0]
 800c474:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c476:	d307      	bcc.n	800c488 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c478:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ac <prvAddCurrentTaskToDelayedList+0x64>)
 800c47a:	6818      	ldr	r0, [r3, #0]
 800c47c:	6829      	ldr	r1, [r5, #0]
}
 800c47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c482:	3104      	adds	r1, #4
 800c484:	f7ff b837 	b.w	800b4f6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c488:	4b09      	ldr	r3, [pc, #36]	@ (800c4b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	6829      	ldr	r1, [r5, #0]
 800c48e:	3104      	adds	r1, #4
 800c490:	f7ff f831 	bl	800b4f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	42a2      	cmp	r2, r4
 800c49a:	d900      	bls.n	800c49e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c49c:	601c      	str	r4, [r3, #0]
}
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	24024dc0 	.word	0x24024dc0
 800c4a4:	24025298 	.word	0x24025298
 800c4a8:	24024dc8 	.word	0x24024dc8
 800c4ac:	24024e08 	.word	0x24024e08
 800c4b0:	24024e0c 	.word	0x24024e0c
 800c4b4:	24024da4 	.word	0x24024da4

0800c4b8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b8:	4a06      	ldr	r2, [pc, #24]	@ (800c4d4 <prvResetNextTaskUnblockTime+0x1c>)
 800c4ba:	6813      	ldr	r3, [r2, #0]
 800c4bc:	6819      	ldr	r1, [r3, #0]
 800c4be:	4b06      	ldr	r3, [pc, #24]	@ (800c4d8 <prvResetNextTaskUnblockTime+0x20>)
 800c4c0:	b919      	cbnz	r1, 800c4ca <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4c6:	601a      	str	r2, [r3, #0]
}
 800c4c8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4ce:	68d2      	ldr	r2, [r2, #12]
 800c4d0:	6852      	ldr	r2, [r2, #4]
 800c4d2:	e7f8      	b.n	800c4c6 <prvResetNextTaskUnblockTime+0xe>
 800c4d4:	24024e0c 	.word	0x24024e0c
 800c4d8:	24024da4 	.word	0x24024da4

0800c4dc <prvDeleteTCB>:
	{
 800c4dc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4de:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c4e2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4e4:	b93b      	cbnz	r3, 800c4f6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c4e6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c4e8:	f7fe ffae 	bl	800b448 <vPortFree>
				vPortFree( pxTCB );
 800c4ec:	4620      	mov	r0, r4
	}
 800c4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c4f2:	f7fe bfa9 	b.w	800b448 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d0f9      	beq.n	800c4ee <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d008      	beq.n	800c510 <prvDeleteTCB+0x34>
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	e7fe      	b.n	800c50e <prvDeleteTCB+0x32>
	}
 800c510:	bd10      	pop	{r4, pc}
	...

0800c514 <prvIdleTask>:
{
 800c514:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c516:	4c14      	ldr	r4, [pc, #80]	@ (800c568 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c518:	4f14      	ldr	r7, [pc, #80]	@ (800c56c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c51a:	4d15      	ldr	r5, [pc, #84]	@ (800c570 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	b983      	cbnz	r3, 800c542 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c520:	4b14      	ldr	r3, [pc, #80]	@ (800c574 <prvIdleTask+0x60>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d909      	bls.n	800c53c <prvIdleTask+0x28>
				taskYIELD();
 800c528:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c530:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c53c:	f7f4 f8dc 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c540:	e7eb      	b.n	800c51a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c542:	f7ff f867 	bl	800b614 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c54a:	1d30      	adds	r0, r6, #4
 800c54c:	f7fe ffea 	bl	800b524 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	3b01      	subs	r3, #1
 800c554:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	3b01      	subs	r3, #1
 800c55a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c55c:	f7ff f87a 	bl	800b654 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ffbb 	bl	800c4dc <prvDeleteTCB>
 800c566:	e7d9      	b.n	800c51c <prvIdleTask+0x8>
 800c568:	24024ddc 	.word	0x24024ddc
 800c56c:	24024de0 	.word	0x24024de0
 800c570:	24024dc4 	.word	0x24024dc4
 800c574:	24024e38 	.word	0x24024e38

0800c578 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c57c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c57e:	4607      	mov	r7, r0
 800c580:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c582:	21a5      	movs	r1, #165	@ 0xa5
 800c584:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c586:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c588:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c58a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c58e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c590:	f015 fbba 	bl	8021d08 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c594:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c596:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c598:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c59c:	b3b5      	cbz	r5, 800c60c <prvInitialiseNewTask.constprop.0+0x94>
 800c59e:	1e6b      	subs	r3, r5, #1
 800c5a0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c5a4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5a6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c5aa:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c5ae:	b109      	cbz	r1, 800c5b4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	d1f8      	bne.n	800c5a6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5ba:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c5bc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5c0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5c2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c5c4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5c8:	bf28      	it	cs
 800c5ca:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c5cc:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c5ce:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5d0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5d4:	f7fe ff81 	bl	800b4da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5d8:	f104 0018 	add.w	r0, r4, #24
 800c5dc:	f7fe ff7d 	bl	800b4da <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c5e0:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5ea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ec:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5ee:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c5f0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5f4:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5f8:	f7fe ffe2 	bl	800b5c0 <pxPortInitialiseStack>
 800c5fc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c5fe:	f1b9 0f00 	cmp.w	r9, #0
 800c602:	d001      	beq.n	800c608 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c604:	f8c9 4000 	str.w	r4, [r9]
}
 800c608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c60c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c610:	e7d3      	b.n	800c5ba <prvInitialiseNewTask.constprop.0+0x42>

0800c612 <xTaskCreateStatic>:
	{
 800c612:	b570      	push	{r4, r5, r6, lr}
 800c614:	b086      	sub	sp, #24
 800c616:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c61a:	b945      	cbnz	r5, 800c62e <xTaskCreateStatic+0x1c>
 800c61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	e7fe      	b.n	800c62c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c62e:	b944      	cbnz	r4, 800c642 <xTaskCreateStatic+0x30>
 800c630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	e7fe      	b.n	800c640 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c642:	2660      	movs	r6, #96	@ 0x60
 800c644:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c646:	9e05      	ldr	r6, [sp, #20]
 800c648:	2e60      	cmp	r6, #96	@ 0x60
 800c64a:	d008      	beq.n	800c65e <xTaskCreateStatic+0x4c>
 800c64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	e7fe      	b.n	800c65c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c65e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c660:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c662:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c664:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c668:	ad04      	add	r5, sp, #16
 800c66a:	9402      	str	r4, [sp, #8]
 800c66c:	9501      	str	r5, [sp, #4]
 800c66e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c670:	9500      	str	r5, [sp, #0]
 800c672:	f7ff ff81 	bl	800c578 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff fe68 	bl	800c34c <prvAddNewTaskToReadyList>
	}
 800c67c:	9804      	ldr	r0, [sp, #16]
 800c67e:	b006      	add	sp, #24
 800c680:	bd70      	pop	{r4, r5, r6, pc}

0800c682 <xTaskCreate>:
	{
 800c682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c686:	4607      	mov	r7, r0
 800c688:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c68a:	0090      	lsls	r0, r2, #2
	{
 800c68c:	4688      	mov	r8, r1
 800c68e:	4616      	mov	r6, r2
 800c690:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c692:	f7fe fe41 	bl	800b318 <pvPortMalloc>
			if( pxStack != NULL )
 800c696:	4605      	mov	r5, r0
 800c698:	b920      	cbnz	r0, 800c6a4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c69a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c69e:	b005      	add	sp, #20
 800c6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6a4:	2060      	movs	r0, #96	@ 0x60
 800c6a6:	f7fe fe37 	bl	800b318 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	b198      	cbz	r0, 800c6d6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6ae:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c6b0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6b6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6bc:	9002      	str	r0, [sp, #8]
 800c6be:	4638      	mov	r0, r7
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	464b      	mov	r3, r9
 800c6c8:	f7ff ff56 	bl	800c578 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f7ff fe3d 	bl	800c34c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	e7e3      	b.n	800c69e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f7fe feb6 	bl	800b448 <vPortFree>
		if( pxNewTCB != NULL )
 800c6dc:	e7dd      	b.n	800c69a <xTaskCreate+0x18>
	...

0800c6e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c6e0:	4a02      	ldr	r2, [pc, #8]	@ (800c6ec <vTaskSuspendAll+0xc>)
 800c6e2:	6813      	ldr	r3, [r2, #0]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	6013      	str	r3, [r2, #0]
}
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	24024da0 	.word	0x24024da0

0800c6f0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c6f0:	4b01      	ldr	r3, [pc, #4]	@ (800c6f8 <xTaskGetTickCount+0x8>)
 800c6f2:	6818      	ldr	r0, [r3, #0]
}
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	24024dc0 	.word	0x24024dc0

0800c6fc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6fc:	4b3f      	ldr	r3, [pc, #252]	@ (800c7fc <xTaskIncrementTick+0x100>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
{
 800c700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c704:	2b00      	cmp	r3, #0
 800c706:	d172      	bne.n	800c7ee <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c708:	4b3d      	ldr	r3, [pc, #244]	@ (800c800 <xTaskIncrementTick+0x104>)
 800c70a:	681c      	ldr	r4, [r3, #0]
 800c70c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c70e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c710:	b9bc      	cbnz	r4, 800c742 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c712:	4b3c      	ldr	r3, [pc, #240]	@ (800c804 <xTaskIncrementTick+0x108>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	6812      	ldr	r2, [r2, #0]
 800c718:	b142      	cbz	r2, 800c72c <xTaskIncrementTick+0x30>
 800c71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	e7fe      	b.n	800c72a <xTaskIncrementTick+0x2e>
 800c72c:	4a36      	ldr	r2, [pc, #216]	@ (800c808 <xTaskIncrementTick+0x10c>)
 800c72e:	6819      	ldr	r1, [r3, #0]
 800c730:	6810      	ldr	r0, [r2, #0]
 800c732:	6018      	str	r0, [r3, #0]
 800c734:	6011      	str	r1, [r2, #0]
 800c736:	4a35      	ldr	r2, [pc, #212]	@ (800c80c <xTaskIncrementTick+0x110>)
 800c738:	6813      	ldr	r3, [r2, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	6013      	str	r3, [r2, #0]
 800c73e:	f7ff febb 	bl	800c4b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c742:	4d33      	ldr	r5, [pc, #204]	@ (800c810 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c744:	f04f 0b00 	mov.w	fp, #0
 800c748:	4e32      	ldr	r6, [pc, #200]	@ (800c814 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c74a:	682b      	ldr	r3, [r5, #0]
 800c74c:	4f32      	ldr	r7, [pc, #200]	@ (800c818 <xTaskIncrementTick+0x11c>)
 800c74e:	429c      	cmp	r4, r3
 800c750:	d212      	bcs.n	800c778 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	2114      	movs	r1, #20
 800c756:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c758:	434a      	muls	r2, r1
 800c75a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800c75c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800c75e:	4a2f      	ldr	r2, [pc, #188]	@ (800c81c <xTaskIncrementTick+0x120>)
 800c760:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800c762:	bf28      	it	cs
 800c764:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800c768:	2a00      	cmp	r2, #0
 800c76a:	bf18      	it	ne
 800c76c:	f04f 0b01 	movne.w	fp, #1
}
 800c770:	4658      	mov	r0, fp
 800c772:	b003      	add	sp, #12
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c778:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c804 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c77c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800c824 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c780:	f8d9 2000 	ldr.w	r2, [r9]
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	b91a      	cbnz	r2, 800c790 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c788:	f04f 32ff 	mov.w	r2, #4294967295
 800c78c:	602a      	str	r2, [r5, #0]
					break;
 800c78e:	e7e0      	b.n	800c752 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c790:	f8d9 2000 	ldr.w	r2, [r9]
 800c794:	68d2      	ldr	r2, [r2, #12]
 800c796:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c79a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800c79e:	428c      	cmp	r4, r1
 800c7a0:	d201      	bcs.n	800c7a6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800c7a2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7a4:	e7d5      	b.n	800c752 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a6:	f108 0304 	add.w	r3, r8, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	f7fe feb9 	bl	800b524 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7b2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800c7b6:	b119      	cbz	r1, 800c7c0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7b8:	f108 0018 	add.w	r0, r8, #24
 800c7bc:	f7fe feb2 	bl	800b524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7c0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800c7c4:	f8da 1000 	ldr.w	r1, [sl]
 800c7c8:	4288      	cmp	r0, r1
 800c7ca:	d901      	bls.n	800c7d0 <xTaskIncrementTick+0xd4>
 800c7cc:	f8ca 0000 	str.w	r0, [sl]
 800c7d0:	2314      	movs	r3, #20
 800c7d2:	9901      	ldr	r1, [sp, #4]
 800c7d4:	fb03 6000 	mla	r0, r3, r0, r6
 800c7d8:	f7fe fe82 	bl	800b4e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7dc:	6838      	ldr	r0, [r7, #0]
 800c7de:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800c7e2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800c7e4:	4291      	cmp	r1, r2
 800c7e6:	bf28      	it	cs
 800c7e8:	f04f 0b01 	movcs.w	fp, #1
 800c7ec:	e7c8      	b.n	800c780 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800c7ee:	4a0c      	ldr	r2, [pc, #48]	@ (800c820 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800c7f0:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800c7f4:	6813      	ldr	r3, [r2, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	e7b9      	b.n	800c770 <xTaskIncrementTick+0x74>
 800c7fc:	24024da0 	.word	0x24024da0
 800c800:	24024dc0 	.word	0x24024dc0
 800c804:	24024e0c 	.word	0x24024e0c
 800c808:	24024e08 	.word	0x24024e08
 800c80c:	24024dac 	.word	0x24024dac
 800c810:	24024da4 	.word	0x24024da4
 800c814:	24024e38 	.word	0x24024e38
 800c818:	24025298 	.word	0x24025298
 800c81c:	24024db0 	.word	0x24024db0
 800c820:	24024db4 	.word	0x24024db4
 800c824:	24024dbc 	.word	0x24024dbc

0800c828 <xTaskResumeAll>:
{
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800c82c:	4c30      	ldr	r4, [pc, #192]	@ (800c8f0 <xTaskResumeAll+0xc8>)
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	b943      	cbnz	r3, 800c844 <xTaskResumeAll+0x1c>
 800c832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	e7fe      	b.n	800c842 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800c844:	f7fe fee6 	bl	800b614 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c84e:	6824      	ldr	r4, [r4, #0]
 800c850:	b12c      	cbz	r4, 800c85e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800c852:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c854:	f7fe fefe 	bl	800b654 <vPortExitCritical>
}
 800c858:	4620      	mov	r0, r4
 800c85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c85e:	4b25      	ldr	r3, [pc, #148]	@ (800c8f4 <xTaskResumeAll+0xcc>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0f5      	beq.n	800c852 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c866:	4d24      	ldr	r5, [pc, #144]	@ (800c8f8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800c868:	4e24      	ldr	r6, [pc, #144]	@ (800c8fc <xTaskResumeAll+0xd4>)
 800c86a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800c90c <xTaskResumeAll+0xe4>
 800c86e:	e01d      	b.n	800c8ac <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c870:	68eb      	ldr	r3, [r5, #12]
 800c872:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c874:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c876:	f104 0018 	add.w	r0, r4, #24
 800c87a:	f7fe fe53 	bl	800b524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c87e:	4638      	mov	r0, r7
 800c880:	f7fe fe50 	bl	800b524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c884:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c886:	6832      	ldr	r2, [r6, #0]
 800c888:	4293      	cmp	r3, r2
 800c88a:	d900      	bls.n	800c88e <xTaskResumeAll+0x66>
 800c88c:	6033      	str	r3, [r6, #0]
 800c88e:	2014      	movs	r0, #20
 800c890:	4639      	mov	r1, r7
 800c892:	fb00 8003 	mla	r0, r0, r3, r8
 800c896:	f7fe fe23 	bl	800b4e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c89a:	4b19      	ldr	r3, [pc, #100]	@ (800c900 <xTaskResumeAll+0xd8>)
 800c89c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d302      	bcc.n	800c8ac <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800c8a6:	4b17      	ldr	r3, [pc, #92]	@ (800c904 <xTaskResumeAll+0xdc>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1de      	bne.n	800c870 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800c8b2:	b10c      	cbz	r4, 800c8b8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800c8b4:	f7ff fe00 	bl	800c4b8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8b8:	4d13      	ldr	r5, [pc, #76]	@ (800c908 <xTaskResumeAll+0xe0>)
 800c8ba:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c8bc:	b144      	cbz	r4, 800c8d0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800c8be:	4e11      	ldr	r6, [pc, #68]	@ (800c904 <xTaskResumeAll+0xdc>)
 800c8c0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c8c2:	f7ff ff1b 	bl	800c6fc <xTaskIncrementTick>
 800c8c6:	b100      	cbz	r0, 800c8ca <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800c8c8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8ca:	3c01      	subs	r4, #1
 800c8cc:	d1f9      	bne.n	800c8c2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800c8ce:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c904 <xTaskResumeAll+0xdc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d0bc      	beq.n	800c852 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800c8d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c8ec:	2401      	movs	r4, #1
 800c8ee:	e7b1      	b.n	800c854 <xTaskResumeAll+0x2c>
 800c8f0:	24024da0 	.word	0x24024da0
 800c8f4:	24024dc4 	.word	0x24024dc4
 800c8f8:	24024df4 	.word	0x24024df4
 800c8fc:	24024dbc 	.word	0x24024dbc
 800c900:	24025298 	.word	0x24025298
 800c904:	24024db0 	.word	0x24024db0
 800c908:	24024db4 	.word	0x24024db4
 800c90c:	24024e38 	.word	0x24024e38

0800c910 <vTaskSetApplicationTaskTag>:
	{
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c914:	4604      	mov	r4, r0
 800c916:	b908      	cbnz	r0, 800c91c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c918:	4b04      	ldr	r3, [pc, #16]	@ (800c92c <vTaskSetApplicationTaskTag+0x1c>)
 800c91a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c91c:	f7fe fe7a 	bl	800b614 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c920:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800c922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c926:	f7fe be95 	b.w	800b654 <vPortExitCritical>
 800c92a:	bf00      	nop
 800c92c:	24025298 	.word	0x24025298

0800c930 <xTaskCallApplicationTaskHook>:
	{
 800c930:	4603      	mov	r3, r0
 800c932:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c934:	b90b      	cbnz	r3, 800c93a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c936:	4b03      	ldr	r3, [pc, #12]	@ (800c944 <xTaskCallApplicationTaskHook+0x14>)
 800c938:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c93a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c93c:	b103      	cbz	r3, 800c940 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c93e:	4718      	bx	r3
	}
 800c940:	4618      	mov	r0, r3
 800c942:	4770      	bx	lr
 800c944:	24025298 	.word	0x24025298

0800c948 <vTaskStartScheduler>:
{
 800c948:	b510      	push	{r4, lr}
 800c94a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c94c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c94e:	aa07      	add	r2, sp, #28
 800c950:	a906      	add	r1, sp, #24
 800c952:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c954:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c958:	f7fe fca0 	bl	800b29c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c95c:	9b05      	ldr	r3, [sp, #20]
 800c95e:	9a07      	ldr	r2, [sp, #28]
 800c960:	9302      	str	r3, [sp, #8]
 800c962:	9b06      	ldr	r3, [sp, #24]
 800c964:	4919      	ldr	r1, [pc, #100]	@ (800c9cc <vTaskStartScheduler+0x84>)
 800c966:	481a      	ldr	r0, [pc, #104]	@ (800c9d0 <vTaskStartScheduler+0x88>)
 800c968:	e9cd 4300 	strd	r4, r3, [sp]
 800c96c:	4623      	mov	r3, r4
 800c96e:	f7ff fe50 	bl	800c612 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c972:	b340      	cbz	r0, 800c9c6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800c974:	f000 fa84 	bl	800ce80 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c978:	2801      	cmp	r0, #1
 800c97a:	d119      	bne.n	800c9b0 <vTaskStartScheduler+0x68>
 800c97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295
 800c990:	4b10      	ldr	r3, [pc, #64]	@ (800c9d4 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800c992:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c996:	4b10      	ldr	r3, [pc, #64]	@ (800c9d8 <vTaskStartScheduler+0x90>)
 800c998:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c99a:	4b10      	ldr	r3, [pc, #64]	@ (800c9dc <vTaskStartScheduler+0x94>)
 800c99c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <vTaskStartScheduler+0x98>)
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f7ff ffc5 	bl	800c930 <xTaskCallApplicationTaskHook>
}
 800c9a6:	b008      	add	sp, #32
 800c9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c9ac:	f7fe bec2 	b.w	800b734 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d108      	bne.n	800c9c6 <vTaskStartScheduler+0x7e>
 800c9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	e7fe      	b.n	800c9c4 <vTaskStartScheduler+0x7c>
}
 800c9c6:	b008      	add	sp, #32
 800c9c8:	bd10      	pop	{r4, pc}
 800c9ca:	bf00      	nop
 800c9cc:	08024f98 	.word	0x08024f98
 800c9d0:	0800c515 	.word	0x0800c515
 800c9d4:	24024da4 	.word	0x24024da4
 800c9d8:	24024db8 	.word	0x24024db8
 800c9dc:	24024dc0 	.word	0x24024dc0
 800c9e0:	24025298 	.word	0x24025298

0800c9e4 <vTaskSwitchContext>:
{
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca58 <vTaskSwitchContext+0x74>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	4b1c      	ldr	r3, [pc, #112]	@ (800ca5c <vTaskSwitchContext+0x78>)
 800c9ec:	b112      	cbz	r2, 800c9f4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]
}
 800c9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c9f4:	4c1a      	ldr	r4, [pc, #104]	@ (800ca60 <vTaskSwitchContext+0x7c>)
 800c9f6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f8:	4e1a      	ldr	r6, [pc, #104]	@ (800ca64 <vTaskSwitchContext+0x80>)
 800c9fa:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800c9fc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c9fe:	6820      	ldr	r0, [r4, #0]
 800ca00:	f7ff ff96 	bl	800c930 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca04:	6832      	ldr	r2, [r6, #0]
 800ca06:	4918      	ldr	r1, [pc, #96]	@ (800ca68 <vTaskSwitchContext+0x84>)
 800ca08:	fb07 f302 	mul.w	r3, r7, r2
 800ca0c:	58cd      	ldr	r5, [r1, r3]
 800ca0e:	18c8      	adds	r0, r1, r3
 800ca10:	b1ad      	cbz	r5, 800ca3e <vTaskSwitchContext+0x5a>
 800ca12:	6845      	ldr	r5, [r0, #4]
 800ca14:	3308      	adds	r3, #8
 800ca16:	686d      	ldr	r5, [r5, #4]
 800ca18:	440b      	add	r3, r1
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	6045      	str	r5, [r0, #4]
 800ca1e:	bf04      	itt	eq
 800ca20:	686b      	ldreq	r3, [r5, #4]
 800ca22:	6043      	streq	r3, [r0, #4]
 800ca24:	2314      	movs	r3, #20
 800ca26:	fb03 1102 	mla	r1, r3, r2, r1
 800ca2a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ca2c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ca34:	6820      	ldr	r0, [r4, #0]
}
 800ca36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800ca3a:	f7ff bf79 	b.w	800c930 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca3e:	b942      	cbnz	r2, 800ca52 <vTaskSwitchContext+0x6e>
 800ca40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	e7fe      	b.n	800ca50 <vTaskSwitchContext+0x6c>
 800ca52:	3a01      	subs	r2, #1
 800ca54:	e7d8      	b.n	800ca08 <vTaskSwitchContext+0x24>
 800ca56:	bf00      	nop
 800ca58:	24024da0 	.word	0x24024da0
 800ca5c:	24024db0 	.word	0x24024db0
 800ca60:	24025298 	.word	0x24025298
 800ca64:	24024dbc 	.word	0x24024dbc
 800ca68:	24024e38 	.word	0x24024e38

0800ca6c <vTaskPlaceOnEventList>:
{
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ca70:	b940      	cbnz	r0, 800ca84 <vTaskPlaceOnEventList+0x18>
 800ca72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	e7fe      	b.n	800ca82 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca84:	4b05      	ldr	r3, [pc, #20]	@ (800ca9c <vTaskPlaceOnEventList+0x30>)
 800ca86:	6819      	ldr	r1, [r3, #0]
 800ca88:	3118      	adds	r1, #24
 800ca8a:	f7fe fd34 	bl	800b4f6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca8e:	4620      	mov	r0, r4
 800ca90:	2101      	movs	r1, #1
}
 800ca92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca96:	f7ff bcd7 	b.w	800c448 <prvAddCurrentTaskToDelayedList>
 800ca9a:	bf00      	nop
 800ca9c:	24025298 	.word	0x24025298

0800caa0 <vTaskPlaceOnEventListRestricted>:
	{
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	460d      	mov	r5, r1
 800caa4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800caa6:	b940      	cbnz	r0, 800caba <vTaskPlaceOnEventListRestricted+0x1a>
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	e7fe      	b.n	800cab8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800caba:	4b07      	ldr	r3, [pc, #28]	@ (800cad8 <vTaskPlaceOnEventListRestricted+0x38>)
 800cabc:	6819      	ldr	r1, [r3, #0]
 800cabe:	3118      	adds	r1, #24
 800cac0:	f7fe fd0e 	bl	800b4e0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cac4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cac6:	4621      	mov	r1, r4
 800cac8:	bf0c      	ite	eq
 800caca:	4628      	moveq	r0, r5
 800cacc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cad4:	f7ff bcb8 	b.w	800c448 <prvAddCurrentTaskToDelayedList>
 800cad8:	24025298 	.word	0x24025298

0800cadc <xTaskRemoveFromEventList>:
{
 800cadc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cade:	68c3      	ldr	r3, [r0, #12]
 800cae0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cae2:	b944      	cbnz	r4, 800caf6 <xTaskRemoveFromEventList+0x1a>
 800cae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	e7fe      	b.n	800caf4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800caf6:	f104 0518 	add.w	r5, r4, #24
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7fe fd12 	bl	800b524 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb00:	4b11      	ldr	r3, [pc, #68]	@ (800cb48 <xTaskRemoveFromEventList+0x6c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	b9d3      	cbnz	r3, 800cb3c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb06:	1d25      	adds	r5, r4, #4
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f7fe fd0b 	bl	800b524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb0e:	4a0f      	ldr	r2, [pc, #60]	@ (800cb4c <xTaskRemoveFromEventList+0x70>)
 800cb10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb12:	6811      	ldr	r1, [r2, #0]
 800cb14:	428b      	cmp	r3, r1
 800cb16:	d900      	bls.n	800cb1a <xTaskRemoveFromEventList+0x3e>
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	2014      	movs	r0, #20
 800cb1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cb50 <xTaskRemoveFromEventList+0x74>)
 800cb1e:	4629      	mov	r1, r5
 800cb20:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb24:	f7fe fcdc 	bl	800b4e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb28:	4b0a      	ldr	r3, [pc, #40]	@ (800cb54 <xTaskRemoveFromEventList+0x78>)
 800cb2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d906      	bls.n	800cb42 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800cb34:	2001      	movs	r0, #1
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <xTaskRemoveFromEventList+0x7c>)
 800cb38:	6018      	str	r0, [r3, #0]
}
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4807      	ldr	r0, [pc, #28]	@ (800cb5c <xTaskRemoveFromEventList+0x80>)
 800cb40:	e7f0      	b.n	800cb24 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800cb42:	2000      	movs	r0, #0
	return xReturn;
 800cb44:	e7f9      	b.n	800cb3a <xTaskRemoveFromEventList+0x5e>
 800cb46:	bf00      	nop
 800cb48:	24024da0 	.word	0x24024da0
 800cb4c:	24024dbc 	.word	0x24024dbc
 800cb50:	24024e38 	.word	0x24024e38
 800cb54:	24025298 	.word	0x24025298
 800cb58:	24024db0 	.word	0x24024db0
 800cb5c:	24024df4 	.word	0x24024df4

0800cb60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb60:	4b03      	ldr	r3, [pc, #12]	@ (800cb70 <vTaskInternalSetTimeOutState+0x10>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb66:	4b03      	ldr	r3, [pc, #12]	@ (800cb74 <vTaskInternalSetTimeOutState+0x14>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6043      	str	r3, [r0, #4]
}
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	24024dac 	.word	0x24024dac
 800cb74:	24024dc0 	.word	0x24024dc0

0800cb78 <xTaskCheckForTimeOut>:
{
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	b940      	cbnz	r0, 800cb92 <xTaskCheckForTimeOut+0x1a>
 800cb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	e7fe      	b.n	800cb90 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800cb92:	b941      	cbnz	r1, 800cba6 <xTaskCheckForTimeOut+0x2e>
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	e7fe      	b.n	800cba4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800cba6:	f7fe fd35 	bl	800b614 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe8 <xTaskCheckForTimeOut+0x70>)
 800cbac:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	d010      	beq.n	800cbd6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbb4:	480d      	ldr	r0, [pc, #52]	@ (800cbec <xTaskCheckForTimeOut+0x74>)
 800cbb6:	682e      	ldr	r6, [r5, #0]
 800cbb8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbba:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbbc:	4286      	cmp	r6, r0
 800cbbe:	d001      	beq.n	800cbc4 <xTaskCheckForTimeOut+0x4c>
 800cbc0:	428a      	cmp	r2, r1
 800cbc2:	d90f      	bls.n	800cbe4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbc4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbc6:	4283      	cmp	r3, r0
 800cbc8:	d90a      	bls.n	800cbe0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800cbca:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbcc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800cbce:	4413      	add	r3, r2
 800cbd0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbd2:	f7ff ffc5 	bl	800cb60 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800cbd6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cbd8:	f7fe fd3c 	bl	800b654 <vPortExitCritical>
}
 800cbdc:	4620      	mov	r0, r4
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cbe4:	2401      	movs	r4, #1
 800cbe6:	e7f7      	b.n	800cbd8 <xTaskCheckForTimeOut+0x60>
 800cbe8:	24024dc0 	.word	0x24024dc0
 800cbec:	24024dac 	.word	0x24024dac

0800cbf0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cbf0:	4b01      	ldr	r3, [pc, #4]	@ (800cbf8 <vTaskMissedYield+0x8>)
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	601a      	str	r2, [r3, #0]
}
 800cbf6:	4770      	bx	lr
 800cbf8:	24024db0 	.word	0x24024db0

0800cbfc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cbfc:	4b01      	ldr	r3, [pc, #4]	@ (800cc04 <xTaskGetCurrentTaskHandle+0x8>)
 800cbfe:	6818      	ldr	r0, [r3, #0]
	}
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	24025298 	.word	0x24025298

0800cc08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cc08:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <xTaskGetSchedulerState+0x18>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	b133      	cbz	r3, 800cc1c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc0e:	4b05      	ldr	r3, [pc, #20]	@ (800cc24 <xTaskGetSchedulerState+0x1c>)
 800cc10:	6818      	ldr	r0, [r3, #0]
 800cc12:	fab0 f080 	clz	r0, r0
 800cc16:	0940      	lsrs	r0, r0, #5
 800cc18:	0040      	lsls	r0, r0, #1
 800cc1a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc1c:	2001      	movs	r0, #1
	}
 800cc1e:	4770      	bx	lr
 800cc20:	24024db8 	.word	0x24024db8
 800cc24:	24024da0 	.word	0x24024da0

0800cc28 <xTaskPriorityInherit>:
	{
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	b338      	cbz	r0, 800cc7e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc2e:	4d1a      	ldr	r5, [pc, #104]	@ (800cc98 <xTaskPriorityInherit+0x70>)
 800cc30:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cc32:	682a      	ldr	r2, [r5, #0]
 800cc34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d226      	bcs.n	800cc88 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc3a:	6982      	ldr	r2, [r0, #24]
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	db04      	blt.n	800cc4a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc40:	682a      	ldr	r2, [r5, #0]
 800cc42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cc44:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cc48:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc4a:	2214      	movs	r2, #20
 800cc4c:	4e13      	ldr	r6, [pc, #76]	@ (800cc9c <xTaskPriorityInherit+0x74>)
 800cc4e:	fb02 6303 	mla	r3, r2, r3, r6
 800cc52:	6962      	ldr	r2, [r4, #20]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d113      	bne.n	800cc80 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc58:	1d27      	adds	r7, r4, #4
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f7fe fc62 	bl	800b524 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc60:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc62:	4a0f      	ldr	r2, [pc, #60]	@ (800cca0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc66:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc68:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc6a:	428b      	cmp	r3, r1
 800cc6c:	d900      	bls.n	800cc70 <xTaskPriorityInherit+0x48>
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	2014      	movs	r0, #20
 800cc72:	4639      	mov	r1, r7
 800cc74:	fb00 6003 	mla	r0, r0, r3, r6
 800cc78:	f7fe fc32 	bl	800b4e0 <vListInsertEnd>
				xReturn = pdTRUE;
 800cc7c:	2001      	movs	r0, #1
	}
 800cc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc86:	e7f9      	b.n	800cc7c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800cc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8e:	4298      	cmp	r0, r3
 800cc90:	bf2c      	ite	cs
 800cc92:	2000      	movcs	r0, #0
 800cc94:	2001      	movcc	r0, #1
 800cc96:	e7f2      	b.n	800cc7e <xTaskPriorityInherit+0x56>
 800cc98:	24025298 	.word	0x24025298
 800cc9c:	24024e38 	.word	0x24024e38
 800cca0:	24024dbc 	.word	0x24024dbc

0800cca4 <xTaskPriorityDisinherit>:
	{
 800cca4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cca6:	b908      	cbnz	r0, 800ccac <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800cca8:	2000      	movs	r0, #0
	}
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ccac:	4b1b      	ldr	r3, [pc, #108]	@ (800cd1c <xTaskPriorityDisinherit+0x78>)
 800ccae:	681c      	ldr	r4, [r3, #0]
 800ccb0:	4284      	cmp	r4, r0
 800ccb2:	d008      	beq.n	800ccc6 <xTaskPriorityDisinherit+0x22>
 800ccb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	e7fe      	b.n	800ccc4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccc6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ccc8:	b943      	cbnz	r3, 800ccdc <xTaskPriorityDisinherit+0x38>
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	e7fe      	b.n	800ccda <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccdc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ccde:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cce0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cce2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cce4:	4291      	cmp	r1, r2
 800cce6:	d0df      	beq.n	800cca8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1dd      	bne.n	800cca8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccec:	1d25      	adds	r5, r4, #4
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f7fe fc18 	bl	800b524 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccfc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccfe:	4a08      	ldr	r2, [pc, #32]	@ (800cd20 <xTaskPriorityDisinherit+0x7c>)
 800cd00:	6811      	ldr	r1, [r2, #0]
 800cd02:	428b      	cmp	r3, r1
 800cd04:	d900      	bls.n	800cd08 <xTaskPriorityDisinherit+0x64>
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	4a06      	ldr	r2, [pc, #24]	@ (800cd24 <xTaskPriorityDisinherit+0x80>)
 800cd0a:	2014      	movs	r0, #20
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	fb00 2003 	mla	r0, r0, r3, r2
 800cd12:	f7fe fbe5 	bl	800b4e0 <vListInsertEnd>
					xReturn = pdTRUE;
 800cd16:	2001      	movs	r0, #1
		return xReturn;
 800cd18:	e7c7      	b.n	800ccaa <xTaskPriorityDisinherit+0x6>
 800cd1a:	bf00      	nop
 800cd1c:	24025298 	.word	0x24025298
 800cd20:	24024dbc 	.word	0x24024dbc
 800cd24:	24024e38 	.word	0x24024e38

0800cd28 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cd28:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d042      	beq.n	800cdb6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd30:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cd32:	b942      	cbnz	r2, 800cd46 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	e7fe      	b.n	800cd44 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd46:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800cd48:	4299      	cmp	r1, r3
 800cd4a:	bf38      	it	cc
 800cd4c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd4e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cd50:	428b      	cmp	r3, r1
 800cd52:	d030      	beq.n	800cdb6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd54:	2a01      	cmp	r2, #1
 800cd56:	d12e      	bne.n	800cdb6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800cd58:	4a17      	ldr	r2, [pc, #92]	@ (800cdb8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800cd5a:	6812      	ldr	r2, [r2, #0]
 800cd5c:	4282      	cmp	r2, r0
 800cd5e:	d108      	bne.n	800cd72 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	e7fe      	b.n	800cd70 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd72:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd74:	4d11      	ldr	r5, [pc, #68]	@ (800cdbc <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd76:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd78:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cd7c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd7e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd82:	bfa8      	it	ge
 800cd84:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd88:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd8a:	bfa8      	it	ge
 800cd8c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d111      	bne.n	800cdb6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd92:	1d06      	adds	r6, r0, #4
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7fe fbc5 	bl	800b524 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800cd9a:	4a09      	ldr	r2, [pc, #36]	@ (800cdc0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800cd9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd9e:	6811      	ldr	r1, [r2, #0]
 800cda0:	428b      	cmp	r3, r1
 800cda2:	d900      	bls.n	800cda6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	2014      	movs	r0, #20
 800cda8:	4631      	mov	r1, r6
 800cdaa:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800cdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800cdb2:	f7fe bb95 	b.w	800b4e0 <vListInsertEnd>
	}
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	24025298 	.word	0x24025298
 800cdbc:	24024e38 	.word	0x24024e38
 800cdc0:	24024dbc 	.word	0x24024dbc

0800cdc4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800cdc4:	4b04      	ldr	r3, [pc, #16]	@ (800cdd8 <pvTaskIncrementMutexHeldCount+0x14>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	b11a      	cbz	r2, 800cdd2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800cdca:	6819      	ldr	r1, [r3, #0]
 800cdcc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800cdce:	3201      	adds	r2, #1
 800cdd0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800cdd2:	6818      	ldr	r0, [r3, #0]
	}
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	24025298 	.word	0x24025298

0800cddc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800cddc:	4291      	cmp	r1, r2
{
 800cdde:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cde0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cde2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800cde4:	d80a      	bhi.n	800cdfc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cde6:	1ad2      	subs	r2, r2, r3
 800cde8:	6983      	ldr	r3, [r0, #24]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d20d      	bcs.n	800ce0a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cdee:	1d01      	adds	r1, r0, #4
 800cdf0:	4b07      	ldr	r3, [pc, #28]	@ (800ce10 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdf2:	6818      	ldr	r0, [r3, #0]
 800cdf4:	f7fe fb7f 	bl	800b4f6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800cdf8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800cdfa:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d201      	bcs.n	800ce04 <prvInsertTimerInActiveList+0x28>
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d202      	bcs.n	800ce0a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce04:	1d01      	adds	r1, r0, #4
 800ce06:	4b03      	ldr	r3, [pc, #12]	@ (800ce14 <prvInsertTimerInActiveList+0x38>)
 800ce08:	e7f3      	b.n	800cdf2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ce0a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ce0c:	e7f5      	b.n	800cdfa <prvInsertTimerInActiveList+0x1e>
 800ce0e:	bf00      	nop
 800ce10:	24025398 	.word	0x24025398
 800ce14:	2402539c 	.word	0x2402539c

0800ce18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ce1a:	4c11      	ldr	r4, [pc, #68]	@ (800ce60 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ce1c:	f7fe fbfa 	bl	800b614 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ce20:	6825      	ldr	r5, [r4, #0]
 800ce22:	b9bd      	cbnz	r5, 800ce54 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce24:	4f0f      	ldr	r7, [pc, #60]	@ (800ce64 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ce26:	4e10      	ldr	r6, [pc, #64]	@ (800ce68 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f7fe fb4b 	bl	800b4c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7fe fb48 	bl	800b4c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce34:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce36:	4a0e      	ldr	r2, [pc, #56]	@ (800ce70 <prvCheckForValidListAndQueue+0x58>)
 800ce38:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ce3a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce3c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce74 <prvCheckForValidListAndQueue+0x5c>)
 800ce40:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce42:	4b0d      	ldr	r3, [pc, #52]	@ (800ce78 <prvCheckForValidListAndQueue+0x60>)
 800ce44:	9500      	str	r5, [sp, #0]
 800ce46:	f7fe fdef 	bl	800ba28 <xQueueGenericCreateStatic>
 800ce4a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce4c:	b110      	cbz	r0, 800ce54 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce4e:	490b      	ldr	r1, [pc, #44]	@ (800ce7c <prvCheckForValidListAndQueue+0x64>)
 800ce50:	f7ff fa1a 	bl	800c288 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ce54:	b003      	add	sp, #12
 800ce56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ce5a:	f7fe bbfb 	b.w	800b654 <vPortExitCritical>
 800ce5e:	bf00      	nop
 800ce60:	24025394 	.word	0x24025394
 800ce64:	240253b4 	.word	0x240253b4
 800ce68:	240253a0 	.word	0x240253a0
 800ce6c:	2402539c 	.word	0x2402539c
 800ce70:	240252ec 	.word	0x240252ec
 800ce74:	24025398 	.word	0x24025398
 800ce78:	2402529c 	.word	0x2402529c
 800ce7c:	08024f9d 	.word	0x08024f9d

0800ce80 <xTimerCreateTimerTask>:
{
 800ce80:	b510      	push	{r4, lr}
 800ce82:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ce84:	f7ff ffc8 	bl	800ce18 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ce88:	4b12      	ldr	r3, [pc, #72]	@ (800ced4 <xTimerCreateTimerTask+0x54>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	b1b3      	cbz	r3, 800cebc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce8e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce90:	aa07      	add	r2, sp, #28
 800ce92:	a906      	add	r1, sp, #24
 800ce94:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce96:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce9a:	f7fe fa0b 	bl	800b2b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce9e:	9b05      	ldr	r3, [sp, #20]
 800cea0:	9a07      	ldr	r2, [sp, #28]
 800cea2:	9302      	str	r3, [sp, #8]
 800cea4:	9b06      	ldr	r3, [sp, #24]
 800cea6:	490c      	ldr	r1, [pc, #48]	@ (800ced8 <xTimerCreateTimerTask+0x58>)
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	2302      	movs	r3, #2
 800ceac:	480b      	ldr	r0, [pc, #44]	@ (800cedc <xTimerCreateTimerTask+0x5c>)
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	f7ff fbae 	bl	800c612 <xTaskCreateStatic>
 800ceb6:	4b0a      	ldr	r3, [pc, #40]	@ (800cee0 <xTimerCreateTimerTask+0x60>)
 800ceb8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ceba:	b940      	cbnz	r0, 800cece <xTimerCreateTimerTask+0x4e>
 800cebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800cecc:	e7fe      	b.n	800cecc <xTimerCreateTimerTask+0x4c>
}
 800cece:	2001      	movs	r0, #1
 800ced0:	b008      	add	sp, #32
 800ced2:	bd10      	pop	{r4, pc}
 800ced4:	24025394 	.word	0x24025394
 800ced8:	08024fa2 	.word	0x08024fa2
 800cedc:	0800cfdd 	.word	0x0800cfdd
 800cee0:	24025390 	.word	0x24025390

0800cee4 <xTimerGenericCommand>:
{
 800cee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cee6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800cee8:	4604      	mov	r4, r0
{
 800ceea:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800ceec:	b940      	cbnz	r0, 800cf00 <xTimerGenericCommand+0x1c>
 800ceee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	e7fe      	b.n	800cefe <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800cf00:	4d0c      	ldr	r5, [pc, #48]	@ (800cf34 <xTimerGenericCommand+0x50>)
 800cf02:	6828      	ldr	r0, [r5, #0]
 800cf04:	b178      	cbz	r0, 800cf26 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf06:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf08:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf0a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf0e:	dc0c      	bgt.n	800cf2a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf10:	f7ff fe7a 	bl	800cc08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf14:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf16:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf18:	4669      	mov	r1, sp
 800cf1a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf1c:	bf0c      	ite	eq
 800cf1e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf20:	461a      	movne	r2, r3
 800cf22:	f7fe fe36 	bl	800bb92 <xQueueGenericSend>
}
 800cf26:	b004      	add	sp, #16
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	4669      	mov	r1, sp
 800cf2e:	f7fe ff33 	bl	800bd98 <xQueueGenericSendFromISR>
 800cf32:	e7f8      	b.n	800cf26 <xTimerGenericCommand+0x42>
 800cf34:	24025394 	.word	0x24025394

0800cf38 <prvSampleTimeNow>:
{
 800cf38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800cf3c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800cfd8 <prvSampleTimeNow+0xa0>
{
 800cf40:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800cf42:	f7ff fbd5 	bl	800c6f0 <xTaskGetTickCount>
 800cf46:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800cf48:	f8d8 3000 	ldr.w	r3, [r8]
 800cf4c:	4283      	cmp	r3, r0
 800cf4e:	d909      	bls.n	800cf64 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf50:	4f1f      	ldr	r7, [pc, #124]	@ (800cfd0 <prvSampleTimeNow+0x98>)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	b96a      	cbnz	r2, 800cf74 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800cf58:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd4 <prvSampleTimeNow+0x9c>)
 800cf5a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800cf60:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800cf62:	e000      	b.n	800cf66 <prvSampleTimeNow+0x2e>
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800cf68:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800cf6a:	f8c8 5000 	str.w	r5, [r8]
}
 800cf6e:	b002      	add	sp, #8
 800cf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf74:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf76:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf78:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf7c:	f104 0a04 	add.w	sl, r4, #4
 800cf80:	4650      	mov	r0, sl
 800cf82:	f7fe facf 	bl	800b524 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf86:	6a23      	ldr	r3, [r4, #32]
 800cf88:	4620      	mov	r0, r4
 800cf8a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf8c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800cf90:	075b      	lsls	r3, r3, #29
 800cf92:	d5de      	bpl.n	800cf52 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf94:	69a3      	ldr	r3, [r4, #24]
 800cf96:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800cf98:	4599      	cmp	r9, r3
 800cf9a:	d206      	bcs.n	800cfaa <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf9c:	4651      	mov	r1, sl
 800cf9e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfa0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfa2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfa4:	f7fe faa7 	bl	800b4f6 <vListInsert>
 800cfa8:	e7d3      	b.n	800cf52 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfaa:	2300      	movs	r3, #0
 800cfac:	464a      	mov	r2, r9
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	f7ff ff96 	bl	800cee4 <xTimerGenericCommand>
				configASSERT( xResult );
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d1ca      	bne.n	800cf52 <prvSampleTimeNow+0x1a>
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	e7fe      	b.n	800cfcc <prvSampleTimeNow+0x94>
 800cfce:	bf00      	nop
 800cfd0:	2402539c 	.word	0x2402539c
 800cfd4:	24025398 	.word	0x24025398
 800cfd8:	2402538c 	.word	0x2402538c

0800cfdc <prvTimerTask>:
{
 800cfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfe0:	4d6e      	ldr	r5, [pc, #440]	@ (800d19c <prvTimerTask+0x1c0>)
{
 800cfe2:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cfe4:	4e6e      	ldr	r6, [pc, #440]	@ (800d1a0 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfe6:	682b      	ldr	r3, [r5, #0]
 800cfe8:	f8d3 8000 	ldr.w	r8, [r3]
 800cfec:	f1b8 0f00 	cmp.w	r8, #0
 800cff0:	d035      	beq.n	800d05e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cff2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cff4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cff6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800cffa:	f7ff fb71 	bl	800c6e0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cffe:	a804      	add	r0, sp, #16
 800d000:	f7ff ff9a 	bl	800cf38 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d004:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d006:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d169      	bne.n	800d0e0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d00c:	2c00      	cmp	r4, #0
 800d00e:	d14c      	bne.n	800d0aa <prvTimerTask+0xce>
 800d010:	4540      	cmp	r0, r8
 800d012:	d350      	bcc.n	800d0b6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d014:	f7ff fc08 	bl	800c828 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d01e:	1d38      	adds	r0, r7, #4
 800d020:	f7fe fa80 	bl	800b524 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d024:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d028:	0758      	lsls	r0, r3, #29
 800d02a:	d51a      	bpl.n	800d062 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d02c:	69b9      	ldr	r1, [r7, #24]
 800d02e:	4643      	mov	r3, r8
 800d030:	464a      	mov	r2, r9
 800d032:	4638      	mov	r0, r7
 800d034:	4441      	add	r1, r8
 800d036:	f7ff fed1 	bl	800cddc <prvInsertTimerInActiveList>
 800d03a:	b1b0      	cbz	r0, 800d06a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d03c:	4623      	mov	r3, r4
 800d03e:	4642      	mov	r2, r8
 800d040:	4621      	mov	r1, r4
 800d042:	4638      	mov	r0, r7
 800d044:	9400      	str	r4, [sp, #0]
 800d046:	f7ff ff4d 	bl	800cee4 <xTimerGenericCommand>
			configASSERT( xResult );
 800d04a:	b970      	cbnz	r0, 800d06a <prvTimerTask+0x8e>
 800d04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	e7fe      	b.n	800d05c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d05e:	2401      	movs	r4, #1
 800d060:	e7cb      	b.n	800cffa <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d062:	f023 0301 	bic.w	r3, r3, #1
 800d066:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	4638      	mov	r0, r7
 800d06e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d070:	2200      	movs	r2, #0
 800d072:	a904      	add	r1, sp, #16
 800d074:	6830      	ldr	r0, [r6, #0]
 800d076:	f7fe ff3d 	bl	800bef4 <xQueueReceive>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0b3      	beq.n	800cfe6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d07e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d080:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d082:	2b00      	cmp	r3, #0
 800d084:	db2f      	blt.n	800d0e6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d086:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d088:	6963      	ldr	r3, [r4, #20]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d132      	bne.n	800d0f4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d08e:	a803      	add	r0, sp, #12
 800d090:	f7ff ff52 	bl	800cf38 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d094:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d096:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d098:	2b09      	cmp	r3, #9
 800d09a:	d8e9      	bhi.n	800d070 <prvTimerTask+0x94>
 800d09c:	e8df f003 	tbb	[pc, r3]
 800d0a0:	572e2e2e 	.word	0x572e2e2e
 800d0a4:	2e2e765e 	.word	0x2e2e765e
 800d0a8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d1a4 <prvTimerTask+0x1c8>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681c      	ldr	r4, [r3, #0]
 800d0b0:	fab4 f484 	clz	r4, r4
 800d0b4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	eba8 0109 	sub.w	r1, r8, r9
 800d0bc:	6830      	ldr	r0, [r6, #0]
 800d0be:	f7ff f922 	bl	800c306 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0c2:	f7ff fbb1 	bl	800c828 <xTaskResumeAll>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d1d2      	bne.n	800d070 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d0ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	e7c7      	b.n	800d070 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d0e0:	f7ff fba2 	bl	800c828 <xTaskResumeAll>
}
 800d0e4:	e7c4      	b.n	800d070 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0e6:	9b05      	ldr	r3, [sp, #20]
 800d0e8:	9907      	ldr	r1, [sp, #28]
 800d0ea:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dbbe      	blt.n	800d070 <prvTimerTask+0x94>
 800d0f2:	e7c8      	b.n	800d086 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0f4:	1d20      	adds	r0, r4, #4
 800d0f6:	f7fe fa15 	bl	800b524 <uxListRemove>
 800d0fa:	e7c8      	b.n	800d08e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d100:	4620      	mov	r0, r4
 800d102:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d104:	f043 0301 	orr.w	r3, r3, #1
 800d108:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d10c:	9b05      	ldr	r3, [sp, #20]
 800d10e:	4419      	add	r1, r3
 800d110:	f7ff fe64 	bl	800cddc <prvInsertTimerInActiveList>
 800d114:	2800      	cmp	r0, #0
 800d116:	d0ab      	beq.n	800d070 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d118:	6a23      	ldr	r3, [r4, #32]
 800d11a:	4620      	mov	r0, r4
 800d11c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d11e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d122:	0759      	lsls	r1, r3, #29
 800d124:	d5a4      	bpl.n	800d070 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d126:	69a2      	ldr	r2, [r4, #24]
 800d128:	2300      	movs	r3, #0
 800d12a:	9905      	ldr	r1, [sp, #20]
 800d12c:	4620      	mov	r0, r4
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	440a      	add	r2, r1
 800d132:	4619      	mov	r1, r3
 800d134:	f7ff fed6 	bl	800cee4 <xTimerGenericCommand>
							configASSERT( xResult );
 800d138:	2800      	cmp	r0, #0
 800d13a:	d199      	bne.n	800d070 <prvTimerTask+0x94>
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	e7fe      	b.n	800d14c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d14e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d152:	f023 0301 	bic.w	r3, r3, #1
 800d156:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d15a:	e789      	b.n	800d070 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d15c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d160:	f043 0301 	orr.w	r3, r3, #1
 800d164:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d168:	9905      	ldr	r1, [sp, #20]
 800d16a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d16c:	b941      	cbnz	r1, 800d180 <prvTimerTask+0x1a4>
 800d16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	e7fe      	b.n	800d17e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d180:	4603      	mov	r3, r0
 800d182:	4401      	add	r1, r0
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff fe29 	bl	800cddc <prvInsertTimerInActiveList>
					break;
 800d18a:	e771      	b.n	800d070 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d18c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d190:	079a      	lsls	r2, r3, #30
 800d192:	d4de      	bmi.n	800d152 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d194:	4620      	mov	r0, r4
 800d196:	f7fe f957 	bl	800b448 <vPortFree>
 800d19a:	e769      	b.n	800d070 <prvTimerTask+0x94>
 800d19c:	2402539c 	.word	0x2402539c
 800d1a0:	24025394 	.word	0x24025394
 800d1a4:	24025398 	.word	0x24025398

0800d1a8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d1a8:	8880      	ldrh	r0, [r0, #4]
 800d1aa:	4770      	bx	lr

0800d1ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	6803      	ldr	r3, [r0, #0]
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b8:	4798      	blx	r3
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	4628      	mov	r0, r5
 800d1c0:	1ba4      	subs	r4, r4, r6
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	b2a4      	uxth	r4, r4
 800d1c6:	4798      	blx	r3
 800d1c8:	fbb4 f0f0 	udiv	r0, r4, r0
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}

0800d1ce <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	8083      	strh	r3, [r0, #4]
 800d1d2:	4770      	bx	lr

0800d1d4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	6803      	ldr	r3, [r0, #0]
 800d1d8:	4604      	mov	r4, r0
 800d1da:	8881      	ldrh	r1, [r0, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1de:	4798      	blx	r3
 800d1e0:	88a3      	ldrh	r3, [r4, #4]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	80a3      	strh	r3, [r4, #4]
 800d1e6:	bd10      	pop	{r4, pc}

0800d1e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d1e8:	6803      	ldr	r3, [r0, #0]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ec:	4718      	bx	r3

0800d1ee <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d1ee:	4770      	bx	lr

0800d1f0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d1f0:	4a02      	ldr	r2, [pc, #8]	@ (800d1fc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d1f2:	6002      	str	r2, [r0, #0]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	8082      	strh	r2, [r0, #4]
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	08024fb4 	.word	0x08024fb4

0800d200 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d200:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800d202:	4770      	bx	lr

0800d204 <_ZN8touchgfx11AnalogClock20getAnimationDurationEv>:
 800d204:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 800d208:	4770      	bx	lr

0800d20a <_ZNK8touchgfx11AnalogClock17invalidateContentEv>:
 800d20a:	b510      	push	{r4, lr}
 800d20c:	6803      	ldr	r3, [r0, #0]
 800d20e:	4604      	mov	r4, r0
 800d210:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d214:	4798      	blx	r3
 800d216:	b110      	cbz	r0, 800d21e <_ZNK8touchgfx11AnalogClock17invalidateContentEv+0x14>
 800d218:	4620      	mov	r0, r4
 800d21a:	f7f6 f8c0 	bl	800339e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <_ZN8touchgfx11AnalogClock17setRotationCenterEss>:
 800d220:	f8a0 1326 	strh.w	r1, [r0, #806]	@ 0x326
 800d224:	f8a0 2328 	strh.w	r2, [r0, #808]	@ 0x328
 800d228:	4770      	bx	lr

0800d22a <_ZN8touchgfx11AnalogClock13setupHourHandEtss>:
 800d22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d22c:	6805      	ldr	r5, [r0, #0]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 800d236:	460a      	mov	r2, r1
 800d238:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 800d23c:	47a8      	blx	r5
 800d23e:	b003      	add	sp, #12
 800d240:	bd30      	pop	{r4, r5, pc}

0800d242 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>:
 800d242:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d244:	6805      	ldr	r5, [r0, #0]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4613      	mov	r3, r2
 800d24a:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 800d24e:	460a      	mov	r2, r1
 800d250:	f500 71a4 	add.w	r1, r0, #328	@ 0x148
 800d254:	47a8      	blx	r5
 800d256:	b003      	add	sp, #12
 800d258:	bd30      	pop	{r4, r5, pc}

0800d25a <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>:
 800d25a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d25c:	6805      	ldr	r5, [r0, #0]
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 800d266:	460a      	mov	r2, r1
 800d268:	f500 710d 	add.w	r1, r0, #564	@ 0x234
 800d26c:	47a8      	blx	r5
 800d26e:	b003      	add	sp, #12
 800d270:	bd30      	pop	{r4, r5, pc}

0800d272 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>:
 800d272:	b570      	push	{r4, r5, r6, lr}
 800d274:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800d278:	2601      	movs	r6, #1
 800d27a:	4604      	mov	r4, r0
 800d27c:	f8a0 532a 	strh.w	r5, [r0, #810]	@ 0x32a
 800d280:	f880 532c 	strb.w	r5, [r0, #812]	@ 0x32c
 800d284:	f8b0 5324 	ldrh.w	r5, [r0, #804]	@ 0x324
 800d288:	f8a0 6324 	strh.w	r6, [r0, #804]	@ 0x324
 800d28c:	6806      	ldr	r6, [r0, #0]
 800d28e:	f8d6 6088 	ldr.w	r6, [r6, #136]	@ 0x88
 800d292:	47b0      	blx	r6
 800d294:	f8a4 5324 	strh.w	r5, [r4, #804]	@ 0x324
 800d298:	bd70      	pop	{r4, r5, r6, pc}

0800d29a <_ZN8touchgfx11AnalogClock20initializeTime12HourEhhhb>:
 800d29a:	b4f0      	push	{r4, r5, r6, r7}
 800d29c:	6804      	ldr	r4, [r0, #0]
 800d29e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800d2a2:	f8d4 50c4 	ldr.w	r5, [r4, #196]	@ 0xc4
 800d2a6:	240c      	movs	r4, #12
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	46ac      	mov	ip, r5
 800d2ac:	fbb1 f7f4 	udiv	r7, r1, r4
 800d2b0:	fb07 1114 	mls	r1, r7, r4, r1
 800d2b4:	bf18      	it	ne
 800d2b6:	2400      	movne	r4, #0
 800d2b8:	fa54 f181 	uxtab	r1, r4, r1
 800d2bc:	bcf0      	pop	{r4, r5, r6, r7}
 800d2be:	b2c9      	uxtb	r1, r1
 800d2c0:	4760      	bx	ip

0800d2c2 <_ZN8touchgfx11AnalogClock8setAlphaEh>:
 800d2c2:	f880 1058 	strb.w	r1, [r0, #88]	@ 0x58
 800d2c6:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
 800d2ca:	f880 1170 	strb.w	r1, [r0, #368]	@ 0x170
 800d2ce:	f880 125c 	strb.w	r1, [r0, #604]	@ 0x25c
 800d2d2:	4770      	bx	lr

0800d2d4 <_ZNK8touchgfx11AnalogClock8getAlphaEv>:
 800d2d4:	f890 0058 	ldrb.w	r0, [r0, #88]	@ 0x58
 800d2d8:	4770      	bx	lr
	...

0800d2dc <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh>:
 800d2dc:	ee07 1a90 	vmov	s15, r1
 800d2e0:	ee07 3a10 	vmov	s14, r3
 800d2e4:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800d31c <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x40>
 800d2e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d2ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d2f8:	ee86 0a87 	vdiv.f32	s0, s13, s14
 800d2fc:	ee07 2a10 	vmov	s14, r2
 800d300:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d308:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800d320 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x44>
 800d30c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d310:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d314:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	42700000 	.word	0x42700000
 800d320:	40490fdb 	.word	0x40490fdb

0800d324 <_ZNK8touchgfx11AnalogClock27getHourHandMinuteCorrectionEv>:
 800d324:	f890 032d 	ldrb.w	r0, [r0, #813]	@ 0x32d
 800d328:	4770      	bx	lr

0800d32a <_ZNK8touchgfx11AnalogClock29getMinuteHandSecondCorrectionEv>:
 800d32a:	f890 032e 	ldrb.w	r0, [r0, #814]	@ 0x32e
 800d32e:	4770      	bx	lr

0800d330 <_ZNK8touchgfx11AnalogClock16animationEnabledEv>:
 800d330:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 800d334:	2801      	cmp	r0, #1
 800d336:	bf94      	ite	ls
 800d338:	2000      	movls	r0, #0
 800d33a:	2001      	movhi	r0, #1
 800d33c:	4770      	bx	lr

0800d33e <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>:
 800d33e:	f8a0 1324 	strh.w	r1, [r0, #804]	@ 0x324
 800d342:	f8c0 2320 	str.w	r2, [r0, #800]	@ 0x320
 800d346:	4770      	bx	lr

0800d348 <_ZN8touchgfx11AnalogClockD1Ev>:
 800d348:	4770      	bx	lr

0800d34a <_ZN8touchgfx11AnalogClockD0Ev>:
 800d34a:	b510      	push	{r4, lr}
 800d34c:	4604      	mov	r4, r0
 800d34e:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800d352:	f013 fec4 	bl	80210de <_ZdlPvj>
 800d356:	4620      	mov	r0, r4
 800d358:	bd10      	pop	{r4, pc}

0800d35a <_ZN8touchgfx11AnalogClock13setBackgroundEt>:
 800d35a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d35c:	4606      	mov	r6, r0
 800d35e:	6803      	ldr	r3, [r0, #0]
 800d360:	a802      	add	r0, sp, #8
 800d362:	460c      	mov	r4, r1
 800d364:	f8d3 7098 	ldr.w	r7, [r3, #152]	@ 0x98
 800d368:	f820 1d08 	strh.w	r1, [r0, #-8]!
 800d36c:	f009 f8bc 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d370:	4605      	mov	r5, r0
 800d372:	a802      	add	r0, sp, #8
 800d374:	f820 4d04 	strh.w	r4, [r0, #-4]!
 800d378:	f009 f8ea 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d37c:	2202      	movs	r2, #2
 800d37e:	4621      	mov	r1, r4
 800d380:	fb90 f3f2 	sdiv	r3, r0, r2
 800d384:	fb95 f2f2 	sdiv	r2, r5, r2
 800d388:	b21b      	sxth	r3, r3
 800d38a:	4630      	mov	r0, r6
 800d38c:	b212      	sxth	r2, r2
 800d38e:	47b8      	blx	r7
 800d390:	b003      	add	sp, #12
 800d392:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d394 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>:
 800d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	4604      	mov	r4, r0
 800d39a:	6803      	ldr	r3, [r0, #0]
 800d39c:	f880 132d 	strb.w	r1, [r0, #813]	@ 0x32d
 800d3a0:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800d3a4:	f000 faae 	bl	800d904 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 faad 	bl	800d90a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 faac 	bl	800d910 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800d3b8:	463a      	mov	r2, r7
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4620      	mov	r0, r4
 800d3c0:	46ac      	mov	ip, r5
 800d3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	4760      	bx	ip

0800d3c8 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>:
 800d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	6803      	ldr	r3, [r0, #0]
 800d3d0:	f880 132e 	strb.w	r1, [r0, #814]	@ 0x32e
 800d3d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800d3d8:	f000 fa94 	bl	800d904 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800d3dc:	4606      	mov	r6, r0
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 fa93 	bl	800d90a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 fa92 	bl	800d910 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	4631      	mov	r1, r6
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	46ac      	mov	ip, r5
 800d3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fa:	4760      	bx	ip

0800d3fc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	6803      	ldr	r3, [r0, #0]
 800d400:	4604      	mov	r4, r0
 800d402:	4615      	mov	r5, r2
 800d404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d406:	4798      	blx	r3
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	4629      	mov	r1, r5
 800d40c:	4620      	mov	r0, r4
 800d40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d414:	4718      	bx	r3
	...

0800d418 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss>:
 800d418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d41a:	461f      	mov	r7, r3
 800d41c:	460c      	mov	r4, r1
 800d41e:	4605      	mov	r5, r0
 800d420:	4616      	mov	r6, r2
 800d422:	ed2d 8b02 	vpush	{d8}
 800d426:	6803      	ldr	r3, [r0, #0]
 800d428:	b083      	sub	sp, #12
 800d42a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d42c:	4798      	blx	r3
 800d42e:	a902      	add	r1, sp, #8
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	4620      	mov	r0, r4
 800d434:	f821 6d04 	strh.w	r6, [r1, #-4]!
 800d438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d43a:	4798      	blx	r3
 800d43c:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 800d440:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d444:	4620      	mov	r0, r4
 800d446:	f7ff ffd9 	bl	800d3fc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	4620      	mov	r0, r4
 800d44e:	2100      	movs	r1, #0
 800d450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d452:	4798      	blx	r3
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	4620      	mov	r0, r4
 800d458:	2100      	movs	r1, #0
 800d45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d45c:	4798      	blx	r3
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 800d464:	4620      	mov	r0, r4
 800d466:	f9b5 1326 	ldrsh.w	r1, [r5, #806]	@ 0x326
 800d46a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800d46e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800d472:	1bc9      	subs	r1, r1, r7
 800d474:	1ad2      	subs	r2, r2, r3
 800d476:	47b0      	blx	r6
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	4620      	mov	r0, r4
 800d47c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800d508 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss+0xf0>
 800d480:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d484:	4798      	blx	r3
 800d486:	f9b5 2326 	ldrsh.w	r2, [r5, #806]	@ 0x326
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	4620      	mov	r0, r4
 800d48e:	ee08 2a10 	vmov	s16, r2
 800d492:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 800d496:	f8d3 60a4 	ldr.w	r6, [r3, #164]	@ 0xa4
 800d49a:	ee08 2a90 	vmov	s17, r2
 800d49e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800d4a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d4a6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800d4aa:	4798      	blx	r3
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	eeb0 1a40 	vmov.f32	s2, s0
 800d4b2:	eeb0 0a48 	vmov.f32	s0, s16
 800d4b6:	eef0 0a68 	vmov.f32	s1, s17
 800d4ba:	47b0      	blx	r6
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 800d4c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d4c8:	4798      	blx	r3
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	eeb0 8a40 	vmov.f32	s16, s0
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d4d6:	4798      	blx	r3
 800d4d8:	4620      	mov	r0, r4
 800d4da:	eef0 0a40 	vmov.f32	s1, s0
 800d4de:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e2:	47b0      	blx	r6
 800d4e4:	6823      	ldr	r3, [r4, #0]
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4ec:	4798      	blx	r3
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4f6:	4798      	blx	r3
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 800d4fe:	b003      	add	sp, #12
 800d500:	ecbd 8b02 	vpop	{d8}
 800d504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d506:	bf00      	nop
 800d508:	43960000 	.word	0x43960000

0800d50c <_ZN8touchgfx11AnalogClock13setBackgroundEtss>:
 800d50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d50e:	4616      	mov	r6, r2
 800d510:	aa02      	add	r2, sp, #8
 800d512:	4604      	mov	r4, r0
 800d514:	3030      	adds	r0, #48	@ 0x30
 800d516:	f822 1d04 	strh.w	r1, [r2, #-4]!
 800d51a:	4611      	mov	r1, r2
 800d51c:	461f      	mov	r7, r3
 800d51e:	f003 fe3e 	bl	801119e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d522:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 800d526:	4620      	mov	r0, r4
 800d528:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 800d52c:	f7ff ff66 	bl	800d3fc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	463a      	mov	r2, r7
 800d534:	4631      	mov	r1, r6
 800d536:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 800d53a:	4620      	mov	r0, r4
 800d53c:	47a8      	blx	r5
 800d53e:	b003      	add	sp, #12
 800d540:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 800d542:	6802      	ldr	r2, [r0, #0]
 800d544:	eeb0 1a40 	vmov.f32	s2, s0
 800d548:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 800d54c:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800d54e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 800d552:	4710      	bx	r2

0800d554 <_ZN8touchgfx11AnalogClock11updateClockEv>:
 800d554:	b530      	push	{r4, r5, lr}
 800d556:	ed2d 8b02 	vpush	{d8}
 800d55a:	f890 332a 	ldrb.w	r3, [r0, #810]	@ 0x32a
 800d55e:	b083      	sub	sp, #12
 800d560:	4604      	mov	r4, r0
 800d562:	b15b      	cbz	r3, 800d57c <_ZN8touchgfx11AnalogClock11updateClockEv+0x28>
 800d564:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d568:	b943      	cbnz	r3, 800d57c <_ZN8touchgfx11AnalogClock11updateClockEv+0x28>
 800d56a:	ed90 0a26 	vldr	s0, [r0, #152]	@ 0x98
 800d56e:	305c      	adds	r0, #92	@ 0x5c
 800d570:	eddf 7a83 	vldr	s15, [pc, #524]	@ 800d780 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 800d574:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d578:	f7ff ffe3 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d57c:	f894 332b 	ldrb.w	r3, [r4, #811]	@ 0x32b
 800d580:	b163      	cbz	r3, 800d59c <_ZN8touchgfx11AnalogClock11updateClockEv+0x48>
 800d582:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d586:	b94b      	cbnz	r3, 800d59c <_ZN8touchgfx11AnalogClock11updateClockEv+0x48>
 800d588:	ed94 0a61 	vldr	s0, [r4, #388]	@ 0x184
 800d58c:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 800d590:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800d780 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 800d594:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d598:	f7ff ffd3 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d59c:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 800d5a0:	b163      	cbz	r3, 800d5bc <_ZN8touchgfx11AnalogClock11updateClockEv+0x68>
 800d5a2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d5a6:	b94b      	cbnz	r3, 800d5bc <_ZN8touchgfx11AnalogClock11updateClockEv+0x68>
 800d5a8:	ed94 0a9c 	vldr	s0, [r4, #624]	@ 0x270
 800d5ac:	f504 700d 	add.w	r0, r4, #564	@ 0x234
 800d5b0:	eddf 7a73 	vldr	s15, [pc, #460]	@ 800d780 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 800d5b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5b8:	f7ff ffc3 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d5bc:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d045      	beq.n	800d650 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 800d5c4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800d5c8:	f894 132a 	ldrb.w	r1, [r4, #810]	@ 0x32a
 800d5cc:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 800d5d0:	4291      	cmp	r1, r2
 800d5d2:	d107      	bne.n	800d5e4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x90>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d03b      	beq.n	800d650 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 800d5d8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800d5dc:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 800d5e0:	4288      	cmp	r0, r1
 800d5e2:	d035      	beq.n	800d650 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 800d5e4:	6821      	ldr	r1, [r4, #0]
 800d5e6:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 800d5ea:	b10b      	cbz	r3, 800d5f0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x9c>
 800d5ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d5f0:	210c      	movs	r1, #12
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	47a8      	blx	r5
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	eeb0 8a40 	vmov.f32	s16, s0
 800d5fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d602:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
 800d606:	4798      	blx	r3
 800d608:	b970      	cbnz	r0, 800d628 <_ZN8touchgfx11AnalogClock11updateClockEv+0xd4>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d612:	4798      	blx	r3
 800d614:	b110      	cbz	r0, 800d61c <_ZN8touchgfx11AnalogClock11updateClockEv+0xc8>
 800d616:	4628      	mov	r0, r5
 800d618:	f002 ff7e 	bl	8010518 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 800d61c:	eeb0 0a48 	vmov.f32	s0, s16
 800d620:	4628      	mov	r0, r5
 800d622:	f7ff ff8e 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d626:	e013      	b.n	800d650 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 800d628:	4628      	mov	r0, r5
 800d62a:	f002 ff2a 	bl	8010482 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 800d62e:	4603      	mov	r3, r0
 800d630:	2800      	cmp	r0, #0
 800d632:	d1ea      	bne.n	800d60a <_ZN8touchgfx11AnalogClock11updateClockEv+0xb6>
 800d634:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 800d638:	4628      	mov	r0, r5
 800d63a:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 800d63e:	eeb0 0a48 	vmov.f32	s0, s16
 800d642:	9100      	str	r1, [sp, #0]
 800d644:	2102      	movs	r1, #2
 800d646:	f002 ff1f 	bl	8010488 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 800d64a:	4628      	mov	r0, r5
 800d64c:	f002 ff31 	bl	80104b2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 800d650:	f894 316d 	ldrb.w	r3, [r4, #365]	@ 0x16d
 800d654:	2b00      	cmp	r3, #0
 800d656:	d045      	beq.n	800d6e4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 800d658:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800d65c:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 800d660:	f894 332e 	ldrb.w	r3, [r4, #814]	@ 0x32e
 800d664:	4291      	cmp	r1, r2
 800d666:	d107      	bne.n	800d678 <_ZN8touchgfx11AnalogClock11updateClockEv+0x124>
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d03b      	beq.n	800d6e4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 800d66c:	f894 032c 	ldrb.w	r0, [r4, #812]	@ 0x32c
 800d670:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800d674:	4288      	cmp	r0, r1
 800d676:	d035      	beq.n	800d6e4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 800d678:	6821      	ldr	r1, [r4, #0]
 800d67a:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 800d67e:	b10b      	cbz	r3, 800d684 <_ZN8touchgfx11AnalogClock11updateClockEv+0x130>
 800d680:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d684:	213c      	movs	r1, #60	@ 0x3c
 800d686:	4620      	mov	r0, r4
 800d688:	47a8      	blx	r5
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	4620      	mov	r0, r4
 800d68e:	eeb0 8a40 	vmov.f32	s16, s0
 800d692:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d696:	f504 75a4 	add.w	r5, r4, #328	@ 0x148
 800d69a:	4798      	blx	r3
 800d69c:	b970      	cbnz	r0, 800d6bc <_ZN8touchgfx11AnalogClock11updateClockEv+0x168>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d6a6:	4798      	blx	r3
 800d6a8:	b110      	cbz	r0, 800d6b0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x15c>
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f002 ff34 	bl	8010518 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 800d6b0:	eeb0 0a48 	vmov.f32	s0, s16
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	f7ff ff44 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d6ba:	e013      	b.n	800d6e4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f002 fee0 	bl	8010482 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d1ea      	bne.n	800d69e <_ZN8touchgfx11AnalogClock11updateClockEv+0x14a>
 800d6c8:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 800d6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6d6:	9100      	str	r1, [sp, #0]
 800d6d8:	2102      	movs	r1, #2
 800d6da:	f002 fed5 	bl	8010488 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f002 fee7 	bl	80104b2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 800d6e4:	f894 3259 	ldrb.w	r3, [r4, #601]	@ 0x259
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d039      	beq.n	800d760 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 800d6ec:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 800d6f0:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d033      	beq.n	800d760 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	213c      	movs	r1, #60	@ 0x3c
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 800d702:	2300      	movs	r3, #0
 800d704:	47a8      	blx	r5
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	4620      	mov	r0, r4
 800d70a:	eeb0 8a40 	vmov.f32	s16, s0
 800d70e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d712:	f504 750d 	add.w	r5, r4, #564	@ 0x234
 800d716:	4798      	blx	r3
 800d718:	b970      	cbnz	r0, 800d738 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1e4>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	4620      	mov	r0, r4
 800d71e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d722:	4798      	blx	r3
 800d724:	b110      	cbz	r0, 800d72c <_ZN8touchgfx11AnalogClock11updateClockEv+0x1d8>
 800d726:	4628      	mov	r0, r5
 800d728:	f002 fef6 	bl	8010518 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 800d72c:	eeb0 0a48 	vmov.f32	s0, s16
 800d730:	4628      	mov	r0, r5
 800d732:	f7ff ff06 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d736:	e013      	b.n	800d760 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 800d738:	4628      	mov	r0, r5
 800d73a:	f002 fea2 	bl	8010482 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 800d73e:	4603      	mov	r3, r0
 800d740:	2800      	cmp	r0, #0
 800d742:	d1ea      	bne.n	800d71a <_ZN8touchgfx11AnalogClock11updateClockEv+0x1c6>
 800d744:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 800d748:	4628      	mov	r0, r5
 800d74a:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 800d74e:	eeb0 0a48 	vmov.f32	s0, s16
 800d752:	9100      	str	r1, [sp, #0]
 800d754:	2102      	movs	r1, #2
 800d756:	f002 fe97 	bl	8010488 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 800d75a:	4628      	mov	r0, r5
 800d75c:	f002 fea9 	bl	80104b2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 800d760:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d764:	f884 332a 	strb.w	r3, [r4, #810]	@ 0x32a
 800d768:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d76c:	f884 332b 	strb.w	r3, [r4, #811]	@ 0x32b
 800d770:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d774:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 800d778:	b003      	add	sp, #12
 800d77a:	ecbd 8b02 	vpop	{d8}
 800d77e:	bd30      	pop	{r4, r5, pc}
 800d780:	40c90fdb 	.word	0x40c90fdb

0800d784 <_ZN8touchgfx11AnalogClockC1Ev>:
 800d784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d788:	4604      	mov	r4, r0
 800d78a:	2500      	movs	r5, #0
 800d78c:	ed2d 8b02 	vpush	{d8}
 800d790:	b083      	sub	sp, #12
 800d792:	4626      	mov	r6, r4
 800d794:	f000 f89a 	bl	800d8cc <_ZN8touchgfx13AbstractClockC1Ev>
 800d798:	4b31      	ldr	r3, [pc, #196]	@ (800d860 <_ZN8touchgfx11AnalogClockC1Ev+0xdc>)
 800d79a:	2201      	movs	r2, #1
 800d79c:	a902      	add	r1, sp, #8
 800d79e:	f846 3b30 	str.w	r3, [r6], #48
 800d7a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7a6:	f884 2055 	strb.w	r2, [r4, #85]	@ 0x55
 800d7aa:	f104 095c 	add.w	r9, r4, #92	@ 0x5c
 800d7ae:	4a2d      	ldr	r2, [pc, #180]	@ (800d864 <_ZN8touchgfx11AnalogClockC1Ev+0xe0>)
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800d7b6:	f504 78a4 	add.w	r8, r4, #328	@ 0x148
 800d7ba:	6322      	str	r2, [r4, #48]	@ 0x30
 800d7bc:	f504 770d 	add.w	r7, r4, #564	@ 0x234
 800d7c0:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 800d7c4:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800d7c8:	86a5      	strh	r5, [r4, #52]	@ 0x34
 800d7ca:	86e5      	strh	r5, [r4, #54]	@ 0x36
 800d7cc:	8725      	strh	r5, [r4, #56]	@ 0x38
 800d7ce:	8765      	strh	r5, [r4, #58]	@ 0x3a
 800d7d0:	87a5      	strh	r5, [r4, #60]	@ 0x3c
 800d7d2:	87e5      	strh	r5, [r4, #62]	@ 0x3e
 800d7d4:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800d7d8:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800d7dc:	64e5      	str	r5, [r4, #76]	@ 0x4c
 800d7de:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 800d7e2:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
 800d7e6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 800d7ea:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 800d868 <_ZN8touchgfx11AnalogClockC1Ev+0xe4>
 800d7ee:	e9c4 5511 	strd	r5, r5, [r4, #68]	@ 0x44
 800d7f2:	f003 fcd4 	bl	801119e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	f002 ffba 	bl	8010770 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	f002 ffb7 	bl	8010770 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 800d802:	4638      	mov	r0, r7
 800d804:	f002 ffb4 	bl	8010770 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 800d808:	4b18      	ldr	r3, [pc, #96]	@ (800d86c <_ZN8touchgfx11AnalogClockC1Ev+0xe8>)
 800d80a:	4631      	mov	r1, r6
 800d80c:	4620      	mov	r0, r4
 800d80e:	f8c4 3320 	str.w	r3, [r4, #800]	@ 0x320
 800d812:	f8c4 5324 	str.w	r5, [r4, #804]	@ 0x324
 800d816:	f8c4 5328 	str.w	r5, [r4, #808]	@ 0x328
 800d81a:	f884 532c 	strb.w	r5, [r4, #812]	@ 0x32c
 800d81e:	f884 532d 	strb.w	r5, [r4, #813]	@ 0x32d
 800d822:	f884 532e 	strb.w	r5, [r4, #814]	@ 0x32e
 800d826:	f000 f880 	bl	800d92a <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d82a:	eeb0 0a48 	vmov.f32	s0, s16
 800d82e:	4648      	mov	r0, r9
 800d830:	f7ff fe87 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d834:	eeb0 0a48 	vmov.f32	s0, s16
 800d838:	4640      	mov	r0, r8
 800d83a:	f7ff fe82 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d83e:	4638      	mov	r0, r7
 800d840:	eeb0 0a48 	vmov.f32	s0, s16
 800d844:	f7ff fe7d 	bl	800d542 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 800d848:	4620      	mov	r0, r4
 800d84a:	f884 5081 	strb.w	r5, [r4, #129]	@ 0x81
 800d84e:	f884 516d 	strb.w	r5, [r4, #365]	@ 0x16d
 800d852:	f884 5259 	strb.w	r5, [r4, #601]	@ 0x259
 800d856:	b003      	add	sp, #12
 800d858:	ecbd 8b02 	vpop	{d8}
 800d85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d860:	08024fe8 	.word	0x08024fe8
 800d864:	08025600 	.word	0x08025600
 800d868:	00000000 	.word	0x00000000
 800d86c:	08015119 	.word	0x08015119

0800d870 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800d870:	b470      	push	{r4, r5, r6}
 800d872:	2518      	movs	r5, #24
 800d874:	fbb1 f6f5 	udiv	r6, r1, r5
 800d878:	fb06 1115 	mls	r1, r6, r5, r1
 800d87c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 800d880:	213c      	movs	r1, #60	@ 0x3c
 800d882:	fbb2 f5f1 	udiv	r5, r2, r1
 800d886:	fb05 2211 	mls	r2, r5, r1, r2
 800d88a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 800d88e:	fbb3 f2f1 	udiv	r2, r3, r1
 800d892:	fb02 3311 	mls	r3, r2, r1, r3
 800d896:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 800d89a:	6803      	ldr	r3, [r0, #0]
 800d89c:	bc70      	pop	{r4, r5, r6}
 800d89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8a2:	4718      	bx	r3

0800d8a4 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800d8a4:	b4f0      	push	{r4, r5, r6, r7}
 800d8a6:	6804      	ldr	r4, [r0, #0]
 800d8a8:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800d8ac:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 800d8b0:	240c      	movs	r4, #12
 800d8b2:	2e00      	cmp	r6, #0
 800d8b4:	46ac      	mov	ip, r5
 800d8b6:	fbb1 f7f4 	udiv	r7, r1, r4
 800d8ba:	fb07 1114 	mls	r1, r7, r4, r1
 800d8be:	bf18      	it	ne
 800d8c0:	2400      	movne	r4, #0
 800d8c2:	fa54 f181 	uxtab	r1, r4, r1
 800d8c6:	bcf0      	pop	{r4, r5, r6, r7}
 800d8c8:	b2c9      	uxtb	r1, r1
 800d8ca:	4760      	bx	ip

0800d8cc <_ZN8touchgfx13AbstractClockC1Ev>:
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800d8d4:	490a      	ldr	r1, [pc, #40]	@ (800d900 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800d8d6:	8082      	strh	r2, [r0, #4]
 800d8d8:	80c2      	strh	r2, [r0, #6]
 800d8da:	8102      	strh	r2, [r0, #8]
 800d8dc:	8142      	strh	r2, [r0, #10]
 800d8de:	8182      	strh	r2, [r0, #12]
 800d8e0:	81c2      	strh	r2, [r0, #14]
 800d8e2:	8202      	strh	r2, [r0, #16]
 800d8e4:	8242      	strh	r2, [r0, #18]
 800d8e6:	61c2      	str	r2, [r0, #28]
 800d8e8:	8402      	strh	r2, [r0, #32]
 800d8ea:	8442      	strh	r2, [r0, #34]	@ 0x22
 800d8ec:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800d8f0:	6001      	str	r1, [r0, #0]
 800d8f2:	6282      	str	r2, [r0, #40]	@ 0x28
 800d8f4:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800d8f6:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 800d8fa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d8fe:	4770      	bx	lr
 800d900:	080250d0 	.word	0x080250d0

0800d904 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 800d904:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800d908:	4770      	bx	lr

0800d90a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800d90a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800d90e:	4770      	bx	lr

0800d910 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800d910:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800d914:	4770      	bx	lr

0800d916 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d916:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d918:	2000      	movs	r0, #0
 800d91a:	b12b      	cbz	r3, 800d928 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d91c:	b920      	cbnz	r0, 800d928 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d91e:	1a5a      	subs	r2, r3, r1
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	4250      	negs	r0, r2
 800d924:	4150      	adcs	r0, r2
 800d926:	e7f8      	b.n	800d91a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d928:	4770      	bx	lr

0800d92a <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d92a:	2300      	movs	r3, #0
 800d92c:	6148      	str	r0, [r1, #20]
 800d92e:	618b      	str	r3, [r1, #24]
 800d930:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d932:	b913      	cbnz	r3, 800d93a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d934:	6281      	str	r1, [r0, #40]	@ 0x28
 800d936:	4770      	bx	lr
 800d938:	4613      	mov	r3, r2
 800d93a:	699a      	ldr	r2, [r3, #24]
 800d93c:	2a00      	cmp	r2, #0
 800d93e:	d1fb      	bne.n	800d938 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d940:	6199      	str	r1, [r3, #24]
 800d942:	4770      	bx	lr

0800d944 <_ZN8touchgfx9Container9removeAllEv>:
 800d944:	2200      	movs	r2, #0
 800d946:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d948:	b123      	cbz	r3, 800d954 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d94a:	6999      	ldr	r1, [r3, #24]
 800d94c:	6281      	str	r1, [r0, #40]	@ 0x28
 800d94e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d952:	e7f8      	b.n	800d946 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d954:	4770      	bx	lr

0800d956 <_ZN8touchgfx9Container6unlinkEv>:
 800d956:	2300      	movs	r3, #0
 800d958:	6283      	str	r3, [r0, #40]	@ 0x28
 800d95a:	4770      	bx	lr

0800d95c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d95c:	2200      	movs	r2, #0
 800d95e:	8002      	strh	r2, [r0, #0]
 800d960:	8042      	strh	r2, [r0, #2]
 800d962:	8082      	strh	r2, [r0, #4]
 800d964:	80c2      	strh	r2, [r0, #6]
 800d966:	4770      	bx	lr

0800d968 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	460d      	mov	r5, r1
 800d96c:	4616      	mov	r6, r2
 800d96e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d970:	b13c      	cbz	r4, 800d982 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	4620      	mov	r0, r4
 800d976:	4632      	mov	r2, r6
 800d978:	4629      	mov	r1, r5
 800d97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d97c:	4798      	blx	r3
 800d97e:	69a4      	ldr	r4, [r4, #24]
 800d980:	e7f6      	b.n	800d970 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d982:	bd70      	pop	{r4, r5, r6, pc}

0800d984 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	460d      	mov	r5, r1
 800d988:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d98a:	b134      	cbz	r4, 800d99a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	4621      	mov	r1, r4
 800d990:	4628      	mov	r0, r5
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	4798      	blx	r3
 800d996:	69a4      	ldr	r4, [r4, #24]
 800d998:	e7f7      	b.n	800d98a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d99a:	bd38      	pop	{r3, r4, r5, pc}

0800d99c <_ZN8touchgfx9ContainerD1Ev>:
 800d99c:	4770      	bx	lr

0800d99e <_ZN8touchgfx9ContainerD0Ev>:
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	212c      	movs	r1, #44	@ 0x2c
 800d9a4:	f013 fb9b 	bl	80210de <_ZdlPvj>
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	bd10      	pop	{r4, pc}

0800d9ac <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d9ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d9ae:	b19b      	cbz	r3, 800d9d8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d9b0:	428b      	cmp	r3, r1
 800d9b2:	d109      	bne.n	800d9c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d9b4:	699a      	ldr	r2, [r3, #24]
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	6159      	str	r1, [r3, #20]
 800d9ba:	6282      	str	r2, [r0, #40]	@ 0x28
 800d9bc:	b902      	cbnz	r2, 800d9c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d9be:	4770      	bx	lr
 800d9c0:	6199      	str	r1, [r3, #24]
 800d9c2:	4770      	bx	lr
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	b13a      	cbz	r2, 800d9d8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d9c8:	699a      	ldr	r2, [r3, #24]
 800d9ca:	428a      	cmp	r2, r1
 800d9cc:	d1fa      	bne.n	800d9c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d9ce:	698a      	ldr	r2, [r1, #24]
 800d9d0:	619a      	str	r2, [r3, #24]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d9d8:	4770      	bx	lr

0800d9da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d9da:	b410      	push	{r4}
 800d9dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d9de:	4604      	mov	r4, r0
 800d9e0:	b92b      	cbnz	r3, 800d9ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d9e2:	6803      	ldr	r3, [r0, #0]
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9ec:	4718      	bx	r3
 800d9ee:	b941      	cbnz	r1, 800da02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d9f0:	6193      	str	r3, [r2, #24]
 800d9f2:	6282      	str	r2, [r0, #40]	@ 0x28
 800d9f4:	6154      	str	r4, [r2, #20]
 800d9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d0f9      	beq.n	800d9f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800da02:	4299      	cmp	r1, r3
 800da04:	6998      	ldr	r0, [r3, #24]
 800da06:	d1f9      	bne.n	800d9fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800da08:	6190      	str	r0, [r2, #24]
 800da0a:	618a      	str	r2, [r1, #24]
 800da0c:	e7f2      	b.n	800d9f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800da0e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800da0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da12:	461f      	mov	r7, r3
 800da14:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800da18:	460d      	mov	r5, r1
 800da1a:	4616      	mov	r6, r2
 800da1c:	b103      	cbz	r3, 800da20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800da1e:	6038      	str	r0, [r7, #0]
 800da20:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800da22:	b314      	cbz	r4, 800da6a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800da24:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800da28:	b1eb      	cbz	r3, 800da66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800da2e:	428d      	cmp	r5, r1
 800da30:	db19      	blt.n	800da66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da32:	b289      	uxth	r1, r1
 800da34:	8923      	ldrh	r3, [r4, #8]
 800da36:	440b      	add	r3, r1
 800da38:	b21b      	sxth	r3, r3
 800da3a:	429d      	cmp	r5, r3
 800da3c:	da13      	bge.n	800da66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da3e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800da42:	4296      	cmp	r6, r2
 800da44:	db0f      	blt.n	800da66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da46:	b292      	uxth	r2, r2
 800da48:	8963      	ldrh	r3, [r4, #10]
 800da4a:	4413      	add	r3, r2
 800da4c:	b21b      	sxth	r3, r3
 800da4e:	429e      	cmp	r6, r3
 800da50:	da09      	bge.n	800da66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	1ab2      	subs	r2, r6, r2
 800da56:	1a69      	subs	r1, r5, r1
 800da58:	4620      	mov	r0, r4
 800da5a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800da5e:	b212      	sxth	r2, r2
 800da60:	463b      	mov	r3, r7
 800da62:	b209      	sxth	r1, r1
 800da64:	47c0      	blx	r8
 800da66:	69a4      	ldr	r4, [r4, #24]
 800da68:	e7db      	b.n	800da22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800da6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800da70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	4c6d      	ldr	r4, [pc, #436]	@ (800dc2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800da76:	b0a1      	sub	sp, #132	@ 0x84
 800da78:	4606      	mov	r6, r0
 800da7a:	6824      	ldr	r4, [r4, #0]
 800da7c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800da7e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800da82:	2400      	movs	r4, #0
 800da84:	9303      	str	r3, [sp, #12]
 800da86:	802c      	strh	r4, [r5, #0]
 800da88:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800da8a:	802c      	strh	r4, [r5, #0]
 800da8c:	601c      	str	r4, [r3, #0]
 800da8e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800da92:	f7ff ffbc 	bl	800da0e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800da96:	f1b9 0f03 	cmp.w	r9, #3
 800da9a:	f340 80c1 	ble.w	800dc20 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800da9e:	4631      	mov	r1, r6
 800daa0:	a80c      	add	r0, sp, #48	@ 0x30
 800daa2:	f006 fc35 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800daa6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800daaa:	9306      	str	r3, [sp, #24]
 800daac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800dab0:	9307      	str	r3, [sp, #28]
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	f8d3 a000 	ldr.w	sl, [r3]
 800dab8:	f1ba 0f00 	cmp.w	sl, #0
 800dabc:	f000 80b3 	beq.w	800dc26 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800dac0:	4651      	mov	r1, sl
 800dac2:	a810      	add	r0, sp, #64	@ 0x40
 800dac4:	f006 fc24 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dac8:	2002      	movs	r0, #2
 800daca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	9a06      	ldr	r2, [sp, #24]
 800dad2:	fb91 f1f0 	sdiv	r1, r1, r0
 800dad6:	189d      	adds	r5, r3, r2
 800dad8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800dadc:	9a07      	ldr	r2, [sp, #28]
 800dade:	4419      	add	r1, r3
 800dae0:	9b02      	ldr	r3, [sp, #8]
 800dae2:	4413      	add	r3, r2
 800dae4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800dae8:	1a6d      	subs	r5, r5, r1
 800daea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800daee:	fb92 f2f0 	sdiv	r2, r2, r0
 800daf2:	440a      	add	r2, r1
 800daf4:	1a9b      	subs	r3, r3, r2
 800daf6:	435b      	muls	r3, r3
 800daf8:	fb05 3505 	mla	r5, r5, r5, r3
 800dafc:	4f4c      	ldr	r7, [pc, #304]	@ (800dc30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800dafe:	ac10      	add	r4, sp, #64	@ 0x40
 800db00:	f1b9 0f0c 	cmp.w	r9, #12
 800db04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800db06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800db0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800db0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db10:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800db14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db18:	f04f 0303 	mov.w	r3, #3
 800db1c:	bfd8      	it	le
 800db1e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800db22:	f04f 0400 	mov.w	r4, #0
 800db26:	f8cd 9000 	str.w	r9, [sp]
 800db2a:	bfcc      	ite	gt
 800db2c:	4698      	movgt	r8, r3
 800db2e:	fb92 f8f3 	sdivle	r8, r2, r3
 800db32:	1c63      	adds	r3, r4, #1
 800db34:	aa10      	add	r2, sp, #64	@ 0x40
 800db36:	f004 0401 	and.w	r4, r4, #1
 800db3a:	f04f 0b00 	mov.w	fp, #0
 800db3e:	9308      	str	r3, [sp, #32]
 800db40:	9b00      	ldr	r3, [sp, #0]
 800db42:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800db46:	fb93 f3f8 	sdiv	r3, r3, r8
 800db4a:	3404      	adds	r4, #4
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	9a04      	ldr	r2, [sp, #16]
 800db52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800db56:	fb13 f302 	smulbb	r3, r3, r2
 800db5a:	9a01      	ldr	r2, [sp, #4]
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	1899      	adds	r1, r3, r2
 800db60:	9305      	str	r3, [sp, #20]
 800db62:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800db66:	b209      	sxth	r1, r1
 800db68:	4299      	cmp	r1, r3
 800db6a:	db4d      	blt.n	800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db6c:	8932      	ldrh	r2, [r6, #8]
 800db6e:	4413      	add	r3, r2
 800db70:	b21b      	sxth	r3, r3
 800db72:	4299      	cmp	r1, r3
 800db74:	da48      	bge.n	800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	6827      	ldr	r7, [r4, #0]
 800db7a:	fb17 f703 	smulbb	r7, r7, r3
 800db7e:	9b02      	ldr	r3, [sp, #8]
 800db80:	b2bf      	uxth	r7, r7
 800db82:	18fa      	adds	r2, r7, r3
 800db84:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800db88:	b212      	sxth	r2, r2
 800db8a:	429a      	cmp	r2, r3
 800db8c:	db3c      	blt.n	800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db8e:	8970      	ldrh	r0, [r6, #10]
 800db90:	4403      	add	r3, r0
 800db92:	b21b      	sxth	r3, r3
 800db94:	429a      	cmp	r2, r3
 800db96:	da37      	bge.n	800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800db98:	2300      	movs	r3, #0
 800db9a:	4630      	mov	r0, r6
 800db9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db9e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800dba0:	f7ff ff35 	bl	800da0e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800dba4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dba6:	b37a      	cbz	r2, 800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dba8:	4552      	cmp	r2, sl
 800dbaa:	d02d      	beq.n	800dc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dbac:	4611      	mov	r1, r2
 800dbae:	a80e      	add	r0, sp, #56	@ 0x38
 800dbb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbb2:	f006 fbad 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dbb6:	f04f 0e02 	mov.w	lr, #2
 800dbba:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800dbbe:	9a06      	ldr	r2, [sp, #24]
 800dbc0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800dbca:	4413      	add	r3, r2
 800dbcc:	9a07      	ldr	r2, [sp, #28]
 800dbce:	fb91 f1fe 	sdiv	r1, r1, lr
 800dbd2:	fb9c fcfe 	sdiv	ip, ip, lr
 800dbd6:	4401      	add	r1, r0
 800dbd8:	1a58      	subs	r0, r3, r1
 800dbda:	9b02      	ldr	r3, [sp, #8]
 800dbdc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800dbe0:	4413      	add	r3, r2
 800dbe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbe4:	448c      	add	ip, r1
 800dbe6:	eba3 030c 	sub.w	r3, r3, ip
 800dbea:	435b      	muls	r3, r3
 800dbec:	fb00 3300 	mla	r3, r0, r0, r3
 800dbf0:	42ab      	cmp	r3, r5
 800dbf2:	d208      	bcs.n	800dc06 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800dbf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbf6:	461d      	mov	r5, r3
 800dbf8:	9803      	ldr	r0, [sp, #12]
 800dbfa:	6001      	str	r1, [r0, #0]
 800dbfc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800dbfe:	9805      	ldr	r0, [sp, #20]
 800dc00:	8008      	strh	r0, [r1, #0]
 800dc02:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800dc04:	800f      	strh	r7, [r1, #0]
 800dc06:	4692      	mov	sl, r2
 800dc08:	f10b 0b01 	add.w	fp, fp, #1
 800dc0c:	3408      	adds	r4, #8
 800dc0e:	f1bb 0f04 	cmp.w	fp, #4
 800dc12:	d19d      	bne.n	800db50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800dc14:	9b00      	ldr	r3, [sp, #0]
 800dc16:	9c08      	ldr	r4, [sp, #32]
 800dc18:	444b      	add	r3, r9
 800dc1a:	4544      	cmp	r4, r8
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	d188      	bne.n	800db32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800dc20:	b021      	add	sp, #132	@ 0x84
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	f04f 35ff 	mov.w	r5, #4294967295
 800dc2a:	e767      	b.n	800dafc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800dc2c:	240253d4 	.word	0x240253d4
 800dc30:	08022850 	.word	0x08022850

0800dc34 <_ZN8touchgfx4RectaNERKS0_>:
 800dc34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc38:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dc3c:	888c      	ldrh	r4, [r1, #4]
 800dc3e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dc42:	443c      	add	r4, r7
 800dc44:	b2a4      	uxth	r4, r4
 800dc46:	fa0f f884 	sxth.w	r8, r4
 800dc4a:	45c1      	cmp	r9, r8
 800dc4c:	da2f      	bge.n	800dcae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc4e:	8882      	ldrh	r2, [r0, #4]
 800dc50:	444a      	add	r2, r9
 800dc52:	b292      	uxth	r2, r2
 800dc54:	fa0f fe82 	sxth.w	lr, r2
 800dc58:	4577      	cmp	r7, lr
 800dc5a:	da28      	bge.n	800dcae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc5c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dc60:	88cb      	ldrh	r3, [r1, #6]
 800dc62:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800dc66:	442b      	add	r3, r5
 800dc68:	b21b      	sxth	r3, r3
 800dc6a:	429e      	cmp	r6, r3
 800dc6c:	da1f      	bge.n	800dcae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc6e:	88c3      	ldrh	r3, [r0, #6]
 800dc70:	4433      	add	r3, r6
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	fa0f fc83 	sxth.w	ip, r3
 800dc78:	4565      	cmp	r5, ip
 800dc7a:	da18      	bge.n	800dcae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dc7c:	454f      	cmp	r7, r9
 800dc7e:	bfb8      	it	lt
 800dc80:	464f      	movlt	r7, r9
 800dc82:	42b5      	cmp	r5, r6
 800dc84:	bfb8      	it	lt
 800dc86:	4635      	movlt	r5, r6
 800dc88:	45f0      	cmp	r8, lr
 800dc8a:	bfd8      	it	le
 800dc8c:	4622      	movle	r2, r4
 800dc8e:	1bd2      	subs	r2, r2, r7
 800dc90:	8082      	strh	r2, [r0, #4]
 800dc92:	884a      	ldrh	r2, [r1, #2]
 800dc94:	88c9      	ldrh	r1, [r1, #6]
 800dc96:	8007      	strh	r7, [r0, #0]
 800dc98:	440a      	add	r2, r1
 800dc9a:	8045      	strh	r5, [r0, #2]
 800dc9c:	b292      	uxth	r2, r2
 800dc9e:	b211      	sxth	r1, r2
 800dca0:	458c      	cmp	ip, r1
 800dca2:	bfa8      	it	ge
 800dca4:	4613      	movge	r3, r2
 800dca6:	1b5b      	subs	r3, r3, r5
 800dca8:	80c3      	strh	r3, [r0, #6]
 800dcaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcae:	2300      	movs	r3, #0
 800dcb0:	8003      	strh	r3, [r0, #0]
 800dcb2:	8043      	strh	r3, [r0, #2]
 800dcb4:	8083      	strh	r3, [r0, #4]
 800dcb6:	80c3      	strh	r3, [r0, #6]
 800dcb8:	e7f7      	b.n	800dcaa <_ZN8touchgfx4RectaNERKS0_+0x76>

0800dcba <_ZNK8touchgfx4Rect7isEmptyEv>:
 800dcba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	dd06      	ble.n	800dcd0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800dcc2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	bfcc      	ite	gt
 800dcca:	2000      	movgt	r0, #0
 800dccc:	2001      	movle	r0, #1
 800dcce:	4770      	bx	lr
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	4770      	bx	lr

0800dcd4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800dcde:	8003      	strh	r3, [r0, #0]
 800dce0:	8043      	strh	r3, [r0, #2]
 800dce2:	8083      	strh	r3, [r0, #4]
 800dce4:	80c3      	strh	r3, [r0, #6]
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	d040      	beq.n	800dd6c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800dcea:	1d28      	adds	r0, r5, #4
 800dcec:	f7ff ffe5 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcf0:	b988      	cbnz	r0, 800dd16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff ffe1 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcf8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800dcfc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800dd00:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800dd04:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800dd08:	b138      	cbz	r0, 800dd1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800dd0a:	8022      	strh	r2, [r4, #0]
 800dd0c:	8063      	strh	r3, [r4, #2]
 800dd0e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800dd12:	f8a4 c006 	strh.w	ip, [r4, #6]
 800dd16:	69ad      	ldr	r5, [r5, #24]
 800dd18:	e7e5      	b.n	800dce6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800dd1a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dd1e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dd22:	4290      	cmp	r0, r2
 800dd24:	4607      	mov	r7, r0
 800dd26:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800dd2a:	460e      	mov	r6, r1
 800dd2c:	bfa8      	it	ge
 800dd2e:	4617      	movge	r7, r2
 800dd30:	4299      	cmp	r1, r3
 800dd32:	4472      	add	r2, lr
 800dd34:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dd38:	bfa8      	it	ge
 800dd3a:	461e      	movge	r6, r3
 800dd3c:	4440      	add	r0, r8
 800dd3e:	4471      	add	r1, lr
 800dd40:	4463      	add	r3, ip
 800dd42:	b200      	sxth	r0, r0
 800dd44:	8027      	strh	r7, [r4, #0]
 800dd46:	b212      	sxth	r2, r2
 800dd48:	8066      	strh	r6, [r4, #2]
 800dd4a:	b209      	sxth	r1, r1
 800dd4c:	b21b      	sxth	r3, r3
 800dd4e:	4290      	cmp	r0, r2
 800dd50:	bfac      	ite	ge
 800dd52:	ebc7 0200 	rsbge	r2, r7, r0
 800dd56:	ebc7 0202 	rsblt	r2, r7, r2
 800dd5a:	4299      	cmp	r1, r3
 800dd5c:	bfac      	ite	ge
 800dd5e:	ebc6 0301 	rsbge	r3, r6, r1
 800dd62:	ebc6 0303 	rsblt	r3, r6, r3
 800dd66:	80a2      	strh	r2, [r4, #4]
 800dd68:	80e3      	strh	r3, [r4, #6]
 800dd6a:	e7d4      	b.n	800dd16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd72 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dd72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dd76:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800dd7a:	b383      	cbz	r3, 800ddde <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dd7c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dd7e:	b374      	cbz	r4, 800ddde <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dd80:	f9b1 5000 	ldrsh.w	r5, [r1]
 800dd84:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dd88:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800dd8c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800dd90:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800dd94:	b303      	cbz	r3, 800ddd8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dd96:	4668      	mov	r0, sp
 800dd98:	1d21      	adds	r1, r4, #4
 800dd9a:	f8ad 5000 	strh.w	r5, [sp]
 800dd9e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dda2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800dda6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ddaa:	f7ff ff43 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 800ddae:	4668      	mov	r0, sp
 800ddb0:	f7ff ff83 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 800ddb4:	b980      	cbnz	r0, 800ddd8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ddb6:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddba:	4669      	mov	r1, sp
 800ddbc:	88a2      	ldrh	r2, [r4, #4]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	1a9b      	subs	r3, r3, r2
 800ddc2:	88e2      	ldrh	r2, [r4, #6]
 800ddc4:	f8ad 3000 	strh.w	r3, [sp]
 800ddc8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ddcc:	1a9b      	subs	r3, r3, r2
 800ddce:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	4798      	blx	r3
 800ddd8:	69a4      	ldr	r4, [r4, #24]
 800ddda:	2c00      	cmp	r4, #0
 800dddc:	d1d8      	bne.n	800dd90 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ddde:	b002      	add	sp, #8
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dde4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800dde4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dde6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800ddea:	460d      	mov	r5, r1
 800ddec:	4616      	mov	r6, r2
 800ddee:	b323      	cbz	r3, 800de3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ddf0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ddf2:	b314      	cbz	r4, 800de3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ddf4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ddf8:	b1eb      	cbz	r3, 800de36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ddfa:	6828      	ldr	r0, [r5, #0]
 800ddfc:	466b      	mov	r3, sp
 800ddfe:	6869      	ldr	r1, [r5, #4]
 800de00:	c303      	stmia	r3!, {r0, r1}
 800de02:	4668      	mov	r0, sp
 800de04:	1d21      	adds	r1, r4, #4
 800de06:	f7ff ff15 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 800de0a:	4668      	mov	r0, sp
 800de0c:	f7ff ff55 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 800de10:	b988      	cbnz	r0, 800de36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800de12:	f8bd 3000 	ldrh.w	r3, [sp]
 800de16:	4669      	mov	r1, sp
 800de18:	88a2      	ldrh	r2, [r4, #4]
 800de1a:	4620      	mov	r0, r4
 800de1c:	1a9b      	subs	r3, r3, r2
 800de1e:	88e2      	ldrh	r2, [r4, #6]
 800de20:	f8ad 3000 	strh.w	r3, [sp]
 800de24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800de28:	1a9b      	subs	r3, r3, r2
 800de2a:	4632      	mov	r2, r6
 800de2c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de34:	4798      	blx	r3
 800de36:	69a4      	ldr	r4, [r4, #24]
 800de38:	e7db      	b.n	800ddf2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800de3a:	b002      	add	sp, #8
 800de3c:	bd70      	pop	{r4, r5, r6, pc}

0800de3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800de3e:	6803      	ldr	r3, [r0, #0]
 800de40:	b513      	push	{r0, r1, r4, lr}
 800de42:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800de46:	2300      	movs	r3, #0
 800de48:	e9cd 3300 	strd	r3, r3, [sp]
 800de4c:	466b      	mov	r3, sp
 800de4e:	47a0      	blx	r4
 800de50:	b002      	add	sp, #8
 800de52:	bd10      	pop	{r4, pc}

0800de54 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800de54:	2301      	movs	r3, #1
 800de56:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800de5a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800de5e:	4770      	bx	lr

0800de60 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800de60:	2301      	movs	r3, #1
 800de62:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800de66:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800de6a:	4770      	bx	lr

0800de6c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800de6c:	6843      	ldr	r3, [r0, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	725a      	strb	r2, [r3, #9]
 800de72:	6840      	ldr	r0, [r0, #4]
 800de74:	6803      	ldr	r3, [r0, #0]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	4718      	bx	r3

0800de7a <_ZN8touchgfx3HAL8flushDMAEv>:
 800de7a:	6840      	ldr	r0, [r0, #4]
 800de7c:	6803      	ldr	r3, [r0, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	4718      	bx	r3

0800de82 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800de82:	b530      	push	{r4, r5, lr}
 800de84:	b08b      	sub	sp, #44	@ 0x2c
 800de86:	6804      	ldr	r4, [r0, #0]
 800de88:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800de8c:	9509      	str	r5, [sp, #36]	@ 0x24
 800de8e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800de92:	9508      	str	r5, [sp, #32]
 800de94:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800de98:	9507      	str	r5, [sp, #28]
 800de9a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800de9e:	9506      	str	r5, [sp, #24]
 800dea0:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800dea4:	9505      	str	r5, [sp, #20]
 800dea6:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800deaa:	9504      	str	r5, [sp, #16]
 800deac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800deb0:	9503      	str	r5, [sp, #12]
 800deb2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800deb6:	9502      	str	r5, [sp, #8]
 800deb8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800debc:	e9cd 3500 	strd	r3, r5, [sp]
 800dec0:	4613      	mov	r3, r2
 800dec2:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800dec4:	2200      	movs	r2, #0
 800dec6:	47a0      	blx	r4
 800dec8:	b00b      	add	sp, #44	@ 0x2c
 800deca:	bd30      	pop	{r4, r5, pc}

0800decc <_ZN8touchgfx3HAL10beginFrameEv>:
 800decc:	4b04      	ldr	r3, [pc, #16]	@ (800dee0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	b123      	cbz	r3, 800dedc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ded2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800ded6:	f080 0001 	eor.w	r0, r0, #1
 800deda:	4770      	bx	lr
 800dedc:	2001      	movs	r0, #1
 800dede:	4770      	bx	lr
 800dee0:	240253d2 	.word	0x240253d2

0800dee4 <_ZN8touchgfx3HAL8endFrameEv>:
 800dee4:	b510      	push	{r4, lr}
 800dee6:	4604      	mov	r4, r0
 800dee8:	6840      	ldr	r0, [r0, #4]
 800deea:	6803      	ldr	r3, [r0, #0]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	4798      	blx	r3
 800def0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800def4:	b113      	cbz	r3, 800defc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800def6:	2301      	movs	r3, #1
 800def8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800defc:	bd10      	pop	{r4, pc}

0800defe <_ZN8touchgfx3HAL10initializeEv>:
 800defe:	b510      	push	{r4, lr}
 800df00:	4604      	mov	r4, r0
 800df02:	f7f4 fd37 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 800df06:	f7f3 fd8d 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800df0a:	6860      	ldr	r0, [r4, #4]
 800df0c:	6803      	ldr	r3, [r0, #0]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	4798      	blx	r3
 800df12:	68e0      	ldr	r0, [r4, #12]
 800df14:	6803      	ldr	r3, [r0, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	4798      	blx	r3
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	4620      	mov	r0, r4
 800df1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df24:	4718      	bx	r3
	...

0800df28 <_ZN8touchgfx3HAL4tickEv>:
 800df28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800df2a:	6803      	ldr	r3, [r0, #0]
 800df2c:	4604      	mov	r4, r0
 800df2e:	4d5b      	ldr	r5, [pc, #364]	@ (800e09c <_ZN8touchgfx3HAL4tickEv+0x174>)
 800df30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df34:	4798      	blx	r3
 800df36:	2800      	cmp	r0, #0
 800df38:	f000 8095 	beq.w	800e066 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800df3c:	2001      	movs	r0, #1
 800df3e:	2600      	movs	r6, #0
 800df40:	f7f3 fcd6 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800df44:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800df48:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800df4c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800df50:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800df54:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800df58:	b133      	cbz	r3, 800df68 <_ZN8touchgfx3HAL4tickEv+0x40>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	4620      	mov	r0, r4
 800df5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800df62:	4798      	blx	r3
 800df64:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800df68:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800df6c:	2601      	movs	r6, #1
 800df6e:	6862      	ldr	r2, [r4, #4]
 800df70:	f083 0301 	eor.w	r3, r3, #1
 800df74:	702e      	strb	r6, [r5, #0]
 800df76:	7253      	strb	r3, [r2, #9]
 800df78:	f005 f86c 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 800df7c:	6803      	ldr	r3, [r0, #0]
 800df7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df80:	4798      	blx	r3
 800df82:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800df86:	b90b      	cbnz	r3, 800df8c <_ZN8touchgfx3HAL4tickEv+0x64>
 800df88:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800df8c:	f005 f862 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 800df90:	6803      	ldr	r3, [r0, #0]
 800df92:	695b      	ldr	r3, [r3, #20]
 800df94:	4798      	blx	r3
 800df96:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800df98:	6803      	ldr	r3, [r0, #0]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	4798      	blx	r3
 800df9e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800dfa2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800dfae:	b10a      	cbz	r2, 800dfb4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1eb      	bne.n	800df8c <_ZN8touchgfx3HAL4tickEv+0x64>
 800dfb4:	4a3a      	ldr	r2, [pc, #232]	@ (800e0a0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800dfb6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800dfba:	7813      	ldrb	r3, [r2, #0]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	b25b      	sxtb	r3, r3
 800dfc0:	4299      	cmp	r1, r3
 800dfc2:	7013      	strb	r3, [r2, #0]
 800dfc4:	dc10      	bgt.n	800dfe8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	68e0      	ldr	r0, [r4, #12]
 800dfca:	a902      	add	r1, sp, #8
 800dfcc:	7013      	strb	r3, [r2, #0]
 800dfce:	aa03      	add	r2, sp, #12
 800dfd0:	6803      	ldr	r3, [r0, #0]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	4798      	blx	r3
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d050      	beq.n	800e07e <_ZN8touchgfx3HAL4tickEv+0x156>
 800dfdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dfe6:	4798      	blx	r3
 800dfe8:	2300      	movs	r3, #0
 800dfea:	6960      	ldr	r0, [r4, #20]
 800dfec:	f88d 3007 	strb.w	r3, [sp, #7]
 800dff0:	b158      	cbz	r0, 800e00a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dff2:	6803      	ldr	r3, [r0, #0]
 800dff4:	f10d 0107 	add.w	r1, sp, #7
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	4798      	blx	r3
 800dffc:	b128      	cbz	r0, 800e00a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dffe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e000:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e004:	6803      	ldr	r3, [r0, #0]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	4798      	blx	r3
 800e00a:	f104 001c 	add.w	r0, r4, #28
 800e00e:	f012 fa69 	bl	80204e4 <_ZN8touchgfx8Gestures4tickEv>
 800e012:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800e016:	b30b      	cbz	r3, 800e05c <_ZN8touchgfx3HAL4tickEv+0x134>
 800e018:	6920      	ldr	r0, [r4, #16]
 800e01a:	6803      	ldr	r3, [r0, #0]
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	4798      	blx	r3
 800e020:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e022:	4606      	mov	r6, r0
 800e024:	b903      	cbnz	r3, 800e028 <_ZN8touchgfx3HAL4tickEv+0x100>
 800e026:	6760      	str	r0, [r4, #116]	@ 0x74
 800e028:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e02a:	4a1e      	ldr	r2, [pc, #120]	@ (800e0a4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e02c:	1af3      	subs	r3, r6, r3
 800e02e:	4293      	cmp	r3, r2
 800e030:	d914      	bls.n	800e05c <_ZN8touchgfx3HAL4tickEv+0x134>
 800e032:	6920      	ldr	r0, [r4, #16]
 800e034:	6803      	ldr	r3, [r0, #0]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	4798      	blx	r3
 800e03a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e03c:	2264      	movs	r2, #100	@ 0x64
 800e03e:	1af3      	subs	r3, r6, r3
 800e040:	fbb3 f3f2 	udiv	r3, r3, r2
 800e044:	fbb0 f0f3 	udiv	r0, r0, r3
 800e048:	2800      	cmp	r0, #0
 800e04a:	dc1d      	bgt.n	800e088 <_ZN8touchgfx3HAL4tickEv+0x160>
 800e04c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800e050:	6920      	ldr	r0, [r4, #16]
 800e052:	2100      	movs	r1, #0
 800e054:	6803      	ldr	r3, [r0, #0]
 800e056:	69db      	ldr	r3, [r3, #28]
 800e058:	4798      	blx	r3
 800e05a:	6766      	str	r6, [r4, #116]	@ 0x74
 800e05c:	f004 fffa 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 800e060:	6803      	ldr	r3, [r0, #0]
 800e062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e064:	4798      	blx	r3
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	4620      	mov	r0, r4
 800e06a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e06e:	4798      	blx	r3
 800e070:	2001      	movs	r0, #1
 800e072:	f7f3 fc6d 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e076:	2300      	movs	r3, #0
 800e078:	702b      	strb	r3, [r5, #0]
 800e07a:	b004      	add	sp, #16
 800e07c:	bd70      	pop	{r4, r5, r6, pc}
 800e07e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e082:	4620      	mov	r0, r4
 800e084:	4798      	blx	r3
 800e086:	e7af      	b.n	800dfe8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e088:	2863      	cmp	r0, #99	@ 0x63
 800e08a:	bfcb      	itete	gt
 800e08c:	2300      	movgt	r3, #0
 800e08e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800e092:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800e096:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800e09a:	e7d9      	b.n	800e050 <_ZN8touchgfx3HAL4tickEv+0x128>
 800e09c:	240253d8 	.word	0x240253d8
 800e0a0:	240253d9 	.word	0x240253d9
 800e0a4:	05f5e100 	.word	0x05f5e100

0800e0a8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	f7f4 fc92 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	6863      	ldr	r3, [r4, #4]
 800e0b4:	729a      	strb	r2, [r3, #10]
 800e0b6:	bd10      	pop	{r4, pc}

0800e0b8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e0b8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800e0ba:	301c      	adds	r0, #28
 800e0bc:	f012 ba10 	b.w	80204e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e0c0 <_ZN8touchgfx3HAL5touchEll>:
 800e0c0:	b530      	push	{r4, r5, lr}
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	a804      	add	r0, sp, #16
 800e0c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e0cc:	f004 fd8e 	bl	8012bec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e0d0:	9b04      	ldr	r3, [sp, #16]
 800e0d2:	a906      	add	r1, sp, #24
 800e0d4:	a803      	add	r0, sp, #12
 800e0d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e0da:	9b05      	ldr	r3, [sp, #20]
 800e0dc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e0e0:	f004 fdd6 	bl	8012c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e0e4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800e0e8:	f104 001c 	add.w	r0, r4, #28
 800e0ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e0f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e0f4:	b189      	cbz	r1, 800e11a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e0f6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e102:	462a      	mov	r2, r5
 800e104:	f012 f9fc 	bl	8020500 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e108:	b128      	cbz	r0, 800e116 <_ZN8touchgfx3HAL5touchEll+0x56>
 800e10a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e10e:	6623      	str	r3, [r4, #96]	@ 0x60
 800e110:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e114:	6663      	str	r3, [r4, #100]	@ 0x64
 800e116:	b007      	add	sp, #28
 800e118:	bd30      	pop	{r4, r5, pc}
 800e11a:	f012 fa31 	bl	8020580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e11e:	2301      	movs	r3, #1
 800e120:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e124:	e7f1      	b.n	800e10a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e126 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e126:	b510      	push	{r4, lr}
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d046      	beq.n	800e1ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e12c:	ea81 0002 	eor.w	r0, r1, r2
 800e130:	07c4      	lsls	r4, r0, #31
 800e132:	d508      	bpl.n	800e146 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e134:	440b      	add	r3, r1
 800e136:	3a01      	subs	r2, #1
 800e138:	428b      	cmp	r3, r1
 800e13a:	d93e      	bls.n	800e1ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e13c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e140:	f801 0b01 	strb.w	r0, [r1], #1
 800e144:	e7f8      	b.n	800e138 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e146:	07d0      	lsls	r0, r2, #31
 800e148:	bf42      	ittt	mi
 800e14a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e14e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e152:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e156:	2b01      	cmp	r3, #1
 800e158:	d911      	bls.n	800e17e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e15a:	ea81 0402 	eor.w	r4, r1, r2
 800e15e:	4610      	mov	r0, r2
 800e160:	07a4      	lsls	r4, r4, #30
 800e162:	d022      	beq.n	800e1aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e164:	f023 0401 	bic.w	r4, r3, #1
 800e168:	440c      	add	r4, r1
 800e16a:	428c      	cmp	r4, r1
 800e16c:	4602      	mov	r2, r0
 800e16e:	d904      	bls.n	800e17a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e170:	8812      	ldrh	r2, [r2, #0]
 800e172:	3002      	adds	r0, #2
 800e174:	f821 2b02 	strh.w	r2, [r1], #2
 800e178:	e7f7      	b.n	800e16a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	f023 0003 	bic.w	r0, r3, #3
 800e182:	4408      	add	r0, r1
 800e184:	4288      	cmp	r0, r1
 800e186:	4614      	mov	r4, r2
 800e188:	d904      	bls.n	800e194 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e18a:	6824      	ldr	r4, [r4, #0]
 800e18c:	3204      	adds	r2, #4
 800e18e:	f841 4b04 	str.w	r4, [r1], #4
 800e192:	e7f7      	b.n	800e184 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e194:	f003 0303 	and.w	r3, r3, #3
 800e198:	3a01      	subs	r2, #1
 800e19a:	440b      	add	r3, r1
 800e19c:	428b      	cmp	r3, r1
 800e19e:	d90c      	bls.n	800e1ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e1a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e1a4:	f801 0b01 	strb.w	r0, [r1], #1
 800e1a8:	e7f8      	b.n	800e19c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e1aa:	0790      	lsls	r0, r2, #30
 800e1ac:	d0e7      	beq.n	800e17e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e1ae:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e1b2:	3b02      	subs	r3, #2
 800e1b4:	f821 0b02 	strh.w	r0, [r1], #2
 800e1b8:	e7e1      	b.n	800e17e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	bd10      	pop	{r4, pc}

0800e1be <_ZN8touchgfx3HAL7noTouchEv>:
 800e1be:	b510      	push	{r4, lr}
 800e1c0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	b153      	cbz	r3, 800e1de <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e1c8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800e1d2:	301c      	adds	r0, #28
 800e1d4:	f012 f9d4 	bl	8020580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e1de:	bd10      	pop	{r4, pc}

0800e1e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	b085      	sub	sp, #20
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	4699      	mov	r9, r3
 800e1ec:	ad04      	add	r5, sp, #16
 800e1ee:	460f      	mov	r7, r1
 800e1f0:	4690      	mov	r8, r2
 800e1f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e1f6:	69a0      	ldr	r0, [r4, #24]
 800e1f8:	6806      	ldr	r6, [r0, #0]
 800e1fa:	9501      	str	r5, [sp, #4]
 800e1fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800e200:	9500      	str	r5, [sp, #0]
 800e202:	6835      	ldr	r5, [r6, #0]
 800e204:	47a8      	blx	r5
 800e206:	4d10      	ldr	r5, [pc, #64]	@ (800e248 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e208:	4606      	mov	r6, r0
 800e20a:	f8a5 9000 	strh.w	r9, [r5]
 800e20e:	f7f5 fce1 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e212:	6803      	ldr	r3, [r0, #0]
 800e214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e216:	4798      	blx	r3
 800e218:	b128      	cbz	r0, 800e226 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e21a:	2801      	cmp	r0, #1
 800e21c:	d00b      	beq.n	800e236 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e21e:	4630      	mov	r0, r6
 800e220:	b005      	add	sp, #20
 800e222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e226:	882b      	ldrh	r3, [r5, #0]
 800e228:	fb08 7203 	mla	r2, r8, r3, r7
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e232:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e234:	e7f3      	b.n	800e21e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e236:	882a      	ldrh	r2, [r5, #0]
 800e238:	9b03      	ldr	r3, [sp, #12]
 800e23a:	fb08 7202 	mla	r2, r8, r2, r7
 800e23e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e242:	1a9a      	subs	r2, r3, r2
 800e244:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800e246:	e7ea      	b.n	800e21e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e248:	240253ce 	.word	0x240253ce

0800e24c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24e:	b08b      	sub	sp, #44	@ 0x2c
 800e250:	4617      	mov	r7, r2
 800e252:	4604      	mov	r4, r0
 800e254:	460e      	mov	r6, r1
 800e256:	461d      	mov	r5, r3
 800e258:	f7f5 fcbc 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e25c:	6803      	ldr	r3, [r0, #0]
 800e25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e260:	4798      	blx	r3
 800e262:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e266:	9007      	str	r0, [sp, #28]
 800e268:	4631      	mov	r1, r6
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e270:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e272:	4620      	mov	r0, r4
 800e274:	881b      	ldrh	r3, [r3, #0]
 800e276:	9306      	str	r3, [sp, #24]
 800e278:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e27c:	9305      	str	r3, [sp, #20]
 800e27e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e288:	9303      	str	r3, [sp, #12]
 800e28a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e28e:	9302      	str	r3, [sp, #8]
 800e290:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e294:	e9cd 5300 	strd	r5, r3, [sp]
 800e298:	463b      	mov	r3, r7
 800e29a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800e29c:	2200      	movs	r2, #0
 800e29e:	47a8      	blx	r5
 800e2a0:	b00b      	add	sp, #44	@ 0x2c
 800e2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a4:	240253ce 	.word	0x240253ce

0800e2a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2ac:	4698      	mov	r8, r3
 800e2ae:	6803      	ldr	r3, [r0, #0]
 800e2b0:	b08b      	sub	sp, #44	@ 0x2c
 800e2b2:	4617      	mov	r7, r2
 800e2b4:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800e2b6:	460e      	mov	r6, r1
 800e2b8:	4b13      	ldr	r3, [pc, #76]	@ (800e308 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	f8b3 9000 	ldrh.w	r9, [r3]
 800e2c0:	f7f5 fc88 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e2c4:	6803      	ldr	r3, [r0, #0]
 800e2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c8:	4798      	blx	r3
 800e2ca:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	4631      	mov	r1, r6
 800e2d2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e2d6:	2302      	movs	r3, #2
 800e2d8:	4620      	mov	r0, r4
 800e2da:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e2de:	2301      	movs	r3, #1
 800e2e0:	9305      	str	r3, [sp, #20]
 800e2e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e2ec:	9303      	str	r3, [sp, #12]
 800e2ee:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e2f2:	9302      	str	r3, [sp, #8]
 800e2f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e2f8:	e9cd 8300 	strd	r8, r3, [sp]
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	47a8      	blx	r5
 800e300:	b00b      	add	sp, #44	@ 0x2c
 800e302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e306:	bf00      	nop
 800e308:	240253ce 	.word	0x240253ce

0800e30c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e310:	4698      	mov	r8, r3
 800e312:	6803      	ldr	r3, [r0, #0]
 800e314:	b087      	sub	sp, #28
 800e316:	460e      	mov	r6, r1
 800e318:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800e31a:	4617      	mov	r7, r2
 800e31c:	4b0f      	ldr	r3, [pc, #60]	@ (800e35c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e31e:	4604      	mov	r4, r0
 800e320:	f8b3 9000 	ldrh.w	r9, [r3]
 800e324:	f7f5 fc56 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e328:	6803      	ldr	r3, [r0, #0]
 800e32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32c:	4798      	blx	r3
 800e32e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800e332:	463a      	mov	r2, r7
 800e334:	4631      	mov	r1, r6
 800e336:	f8cd 900c 	str.w	r9, [sp, #12]
 800e33a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e33e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800e342:	4620      	mov	r0, r4
 800e344:	9302      	str	r3, [sp, #8]
 800e346:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	4643      	mov	r3, r8
 800e354:	47a8      	blx	r5
 800e356:	b007      	add	sp, #28
 800e358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e35c:	240253ce 	.word	0x240253ce

0800e360 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4604      	mov	r4, r0
 800e366:	b08f      	sub	sp, #60	@ 0x3c
 800e368:	4610      	mov	r0, r2
 800e36a:	460d      	mov	r5, r1
 800e36c:	4691      	mov	r9, r2
 800e36e:	461e      	mov	r6, r3
 800e370:	f007 ff6a 	bl	8016248 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e374:	2800      	cmp	r0, #0
 800e376:	f000 809d 	beq.w	800e4b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	4620      	mov	r0, r4
 800e37e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e382:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e388:	4798      	blx	r3
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	4620      	mov	r0, r4
 800e38e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e394:	4798      	blx	r3
 800e396:	f8bb 3000 	ldrh.w	r3, [fp]
 800e39a:	4f5c      	ldr	r7, [pc, #368]	@ (800e50c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	f8ba 3000 	ldrh.w	r3, [sl]
 800e3a2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	9302      	str	r3, [sp, #8]
 800e3aa:	883b      	ldrh	r3, [r7, #0]
 800e3ac:	9303      	str	r3, [sp, #12]
 800e3ae:	4b58      	ldr	r3, [pc, #352]	@ (800e510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e3b0:	881a      	ldrh	r2, [r3, #0]
 800e3b2:	9305      	str	r3, [sp, #20]
 800e3b4:	9204      	str	r2, [sp, #16]
 800e3b6:	f008 f897 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e3ba:	8038      	strh	r0, [r7, #0]
 800e3bc:	4640      	mov	r0, r8
 800e3be:	f008 f8c7 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e3c2:	9b05      	ldr	r3, [sp, #20]
 800e3c4:	b280      	uxth	r0, r0
 800e3c6:	8018      	strh	r0, [r3, #0]
 800e3c8:	4b52      	ldr	r3, [pc, #328]	@ (800e514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d174      	bne.n	800e4ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e3d0:	883b      	ldrh	r3, [r7, #0]
 800e3d2:	f8aa 0000 	strh.w	r0, [sl]
 800e3d6:	f8ab 3000 	strh.w	r3, [fp]
 800e3da:	4648      	mov	r0, r9
 800e3dc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800e3e0:	f007 ff32 	bl	8016248 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e3ea:	4611      	mov	r1, r2
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e3f2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e3f6:	f7f5 fcaa 	bl	8003d4e <_ZN8touchgfx8Drawable5setXYEss>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800e400:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e404:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dd5c      	ble.n	800e4c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e40c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e410:	2b00      	cmp	r3, #0
 800e412:	dd58      	ble.n	800e4c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e414:	462a      	mov	r2, r5
 800e416:	ab0a      	add	r3, sp, #40	@ 0x28
 800e418:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e41c:	6851      	ldr	r1, [r2, #4]
 800e41e:	c303      	stmia	r3!, {r0, r1}
 800e420:	4631      	mov	r1, r6
 800e422:	a80a      	add	r0, sp, #40	@ 0x28
 800e424:	f7ff fc06 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 800e428:	4b38      	ldr	r3, [pc, #224]	@ (800e50c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e42a:	2100      	movs	r1, #0
 800e42c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e430:	4b37      	ldr	r3, [pc, #220]	@ (800e510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e432:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e436:	aa0a      	add	r2, sp, #40	@ 0x28
 800e438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e43c:	910c      	str	r1, [sp, #48]	@ 0x30
 800e43e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e442:	ab08      	add	r3, sp, #32
 800e444:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e448:	e883 0003 	stmia.w	r3, {r0, r1}
 800e44c:	4618      	mov	r0, r3
 800e44e:	a90c      	add	r1, sp, #48	@ 0x30
 800e450:	f7ff fbf0 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 800e454:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d13c      	bne.n	800e4d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e45a:	2000      	movs	r0, #0
 800e45c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e460:	2600      	movs	r6, #0
 800e462:	696b      	ldr	r3, [r5, #20]
 800e464:	a908      	add	r1, sp, #32
 800e466:	682a      	ldr	r2, [r5, #0]
 800e468:	4628      	mov	r0, r5
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	616e      	str	r6, [r5, #20]
 800e46e:	6892      	ldr	r2, [r2, #8]
 800e470:	4790      	blx	r2
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	4652      	mov	r2, sl
 800e476:	4649      	mov	r1, r9
 800e478:	616b      	str	r3, [r5, #20]
 800e47a:	4628      	mov	r0, r5
 800e47c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e480:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e484:	f7f5 fc63 	bl	8003d4e <_ZN8touchgfx8Drawable5setXYEss>
 800e488:	9a01      	ldr	r2, [sp, #4]
 800e48a:	4b23      	ldr	r3, [pc, #140]	@ (800e518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e48c:	4620      	mov	r0, r4
 800e48e:	801a      	strh	r2, [r3, #0]
 800e490:	9a02      	ldr	r2, [sp, #8]
 800e492:	4b22      	ldr	r3, [pc, #136]	@ (800e51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e494:	801a      	strh	r2, [r3, #0]
 800e496:	9a03      	ldr	r2, [sp, #12]
 800e498:	4b1c      	ldr	r3, [pc, #112]	@ (800e50c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e49a:	801a      	strh	r2, [r3, #0]
 800e49c:	4b1c      	ldr	r3, [pc, #112]	@ (800e510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e49e:	9a04      	ldr	r2, [sp, #16]
 800e4a0:	801a      	strh	r2, [r3, #0]
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4aa:	4798      	blx	r3
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	4798      	blx	r3
 800e4b4:	b00f      	add	sp, #60	@ 0x3c
 800e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ba:	883b      	ldrh	r3, [r7, #0]
 800e4bc:	f8ab 0000 	strh.w	r0, [fp]
 800e4c0:	f8aa 3000 	strh.w	r3, [sl]
 800e4c4:	e789      	b.n	800e3da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e4c6:	462a      	mov	r2, r5
 800e4c8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e4ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e4ce:	6851      	ldr	r1, [r2, #4]
 800e4d0:	c303      	stmia	r3!, {r0, r1}
 800e4d2:	e7a9      	b.n	800e428 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e4d4:	a807      	add	r0, sp, #28
 800e4d6:	f008 f97d 	bl	80167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e4da:	4606      	mov	r6, r0
 800e4dc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e4de:	6803      	ldr	r3, [r0, #0]
 800e4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e2:	4798      	blx	r3
 800e4e4:	4286      	cmp	r6, r0
 800e4e6:	d1b8      	bne.n	800e45a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e4e8:	f7f5 fb74 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e4ec:	6803      	ldr	r3, [r0, #0]
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	a807      	add	r0, sp, #28
 800e4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4f4:	9305      	str	r3, [sp, #20]
 800e4f6:	f008 f96d 	bl	80167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e4fa:	9b05      	ldr	r3, [sp, #20]
 800e4fc:	4601      	mov	r1, r0
 800e4fe:	4630      	mov	r0, r6
 800e500:	4798      	blx	r3
 800e502:	f080 0001 	eor.w	r0, r0, #1
 800e506:	b2c0      	uxtb	r0, r0
 800e508:	e7a8      	b.n	800e45c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e50a:	bf00      	nop
 800e50c:	240253c8 	.word	0x240253c8
 800e510:	240253ca 	.word	0x240253ca
 800e514:	240253cc 	.word	0x240253cc
 800e518:	240253ce 	.word	0x240253ce
 800e51c:	240253d0 	.word	0x240253d0

0800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e520:	4b07      	ldr	r3, [pc, #28]	@ (800e540 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e522:	b510      	push	{r4, lr}
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	4604      	mov	r4, r0
 800e528:	b13b      	cbz	r3, 800e53a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e52a:	6803      	ldr	r3, [r0, #0]
 800e52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e52e:	4798      	blx	r3
 800e530:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e532:	4283      	cmp	r3, r0
 800e534:	d101      	bne.n	800e53a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e536:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e53c:	e7fc      	b.n	800e538 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e53e:	bf00      	nop
 800e540:	240253d2 	.word	0x240253d2

0800e544 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e548:	461d      	mov	r5, r3
 800e54a:	b08a      	sub	sp, #40	@ 0x28
 800e54c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e550:	4690      	mov	r8, r2
 800e552:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e556:	2400      	movs	r4, #0
 800e558:	4607      	mov	r7, r0
 800e55a:	fb06 8505 	mla	r5, r6, r5, r8
 800e55e:	9404      	str	r4, [sp, #16]
 800e560:	f88d 4020 	strb.w	r4, [sp, #32]
 800e564:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e568:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e56c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e570:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e574:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e578:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e57c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e580:	f7ff ffce 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e584:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e58e:	a901      	add	r1, sp, #4
 800e590:	9505      	str	r5, [sp, #20]
 800e592:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e596:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e59a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e59e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e5a2:	6803      	ldr	r3, [r0, #0]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	4798      	blx	r3
 800e5a8:	b00a      	add	sp, #40	@ 0x28
 800e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5ae <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e5ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5b2:	b08b      	sub	sp, #44	@ 0x2c
 800e5b4:	2400      	movs	r4, #0
 800e5b6:	4691      	mov	r9, r2
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e5be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e5c2:	4688      	mov	r8, r1
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	9404      	str	r4, [sp, #16]
 800e5c8:	fb06 9505 	mla	r5, r6, r5, r9
 800e5cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5d0:	f7ff ffa6 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e5d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e5d8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e5e2:	a901      	add	r1, sp, #4
 800e5e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e5e8:	9505      	str	r5, [sp, #20]
 800e5ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e5ee:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e5f2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e5f6:	f8cd 8010 	str.w	r8, [sp, #16]
 800e5fa:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e5fe:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e602:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e606:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e60a:	6803      	ldr	r3, [r0, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	4798      	blx	r3
 800e610:	b00b      	add	sp, #44	@ 0x2c
 800e612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	b08a      	sub	sp, #40	@ 0x28
 800e61e:	4698      	mov	r8, r3
 800e620:	2300      	movs	r3, #0
 800e622:	4606      	mov	r6, r0
 800e624:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e628:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e62c:	2d0b      	cmp	r5, #11
 800e62e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e632:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e636:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e63a:	9304      	str	r3, [sp, #16]
 800e63c:	d137      	bne.n	800e6ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e63e:	2380      	movs	r3, #128	@ 0x80
 800e640:	f88d 0020 	strb.w	r0, [sp, #32]
 800e644:	4630      	mov	r0, r6
 800e646:	9203      	str	r2, [sp, #12]
 800e648:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e64c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e650:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e654:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e658:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e65c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e660:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e664:	f7ff ff5c 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e668:	2c0b      	cmp	r4, #11
 800e66a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e66e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e672:	bf94      	ite	ls
 800e674:	4b19      	ldrls	r3, [pc, #100]	@ (800e6dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e676:	2100      	movhi	r1, #0
 800e678:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e67c:	bf98      	it	ls
 800e67e:	5d19      	ldrbls	r1, [r3, r4]
 800e680:	fb02 8307 	mla	r3, r2, r7, r8
 800e684:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e688:	10c9      	asrs	r1, r1, #3
 800e68a:	fb01 0003 	mla	r0, r1, r3, r0
 800e68e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e692:	a901      	add	r1, sp, #4
 800e694:	9005      	str	r0, [sp, #20]
 800e696:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e69a:	2300      	movs	r3, #0
 800e69c:	6870      	ldr	r0, [r6, #4]
 800e69e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e6a2:	6803      	ldr	r3, [r0, #0]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	4798      	blx	r3
 800e6a8:	b00a      	add	sp, #40	@ 0x28
 800e6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ae:	2d02      	cmp	r5, #2
 800e6b0:	d109      	bne.n	800e6c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e6b2:	28ff      	cmp	r0, #255	@ 0xff
 800e6b4:	d105      	bne.n	800e6c2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e6b6:	f1bc 0f00 	cmp.w	ip, #0
 800e6ba:	bf14      	ite	ne
 800e6bc:	2340      	movne	r3, #64	@ 0x40
 800e6be:	2320      	moveq	r3, #32
 800e6c0:	e7be      	b.n	800e640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e6c2:	2340      	movs	r3, #64	@ 0x40
 800e6c4:	e7bc      	b.n	800e640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e6c6:	28ff      	cmp	r0, #255	@ 0xff
 800e6c8:	d105      	bne.n	800e6d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e6ca:	f1bc 0f00 	cmp.w	ip, #0
 800e6ce:	bf14      	ite	ne
 800e6d0:	2304      	movne	r3, #4
 800e6d2:	2301      	moveq	r3, #1
 800e6d4:	e7b4      	b.n	800e640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e6d6:	2304      	movs	r3, #4
 800e6d8:	e7b2      	b.n	800e640 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e6da:	bf00      	nop
 800e6dc:	080251f4 	.word	0x080251f4

0800e6e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	b08b      	sub	sp, #44	@ 0x2c
 800e6e6:	461d      	mov	r5, r3
 800e6e8:	2400      	movs	r4, #0
 800e6ea:	4688      	mov	r8, r1
 800e6ec:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e6f0:	4693      	mov	fp, r2
 800e6f2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e6fc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e700:	9404      	str	r4, [sp, #16]
 800e702:	bf14      	ite	ne
 800e704:	2308      	movne	r3, #8
 800e706:	2302      	moveq	r3, #2
 800e708:	fb05 b50a 	mla	r5, r5, sl, fp
 800e70c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e710:	f7ff ff06 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e714:	2e0b      	cmp	r6, #11
 800e716:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e71a:	a901      	add	r1, sp, #4
 800e71c:	bf98      	it	ls
 800e71e:	4b13      	ldrls	r3, [pc, #76]	@ (800e76c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e720:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e724:	bf98      	it	ls
 800e726:	5d9c      	ldrbls	r4, [r3, r6]
 800e728:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e72c:	10e4      	asrs	r4, r4, #3
 800e72e:	f8cd 8010 	str.w	r8, [sp, #16]
 800e732:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e736:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e73a:	fb04 0405 	mla	r4, r4, r5, r0
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e744:	2300      	movs	r3, #0
 800e746:	9405      	str	r4, [sp, #20]
 800e748:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e74c:	f88d 9020 	strb.w	r9, [sp, #32]
 800e750:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e754:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e758:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e75c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e760:	6803      	ldr	r3, [r0, #0]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	4798      	blx	r3
 800e766:	b00b      	add	sp, #44	@ 0x2c
 800e768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76c:	080251f4 	.word	0x080251f4

0800e770 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	461e      	mov	r6, r3
 800e776:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e778:	460f      	mov	r7, r1
 800e77a:	4690      	mov	r8, r2
 800e77c:	881d      	ldrh	r5, [r3, #0]
 800e77e:	f7f5 fa29 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e786:	4798      	blx	r3
 800e788:	280b      	cmp	r0, #11
 800e78a:	bf96      	itet	ls
 800e78c:	4b05      	ldrls	r3, [pc, #20]	@ (800e7a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e78e:	2400      	movhi	r4, #0
 800e790:	5c1c      	ldrbls	r4, [r3, r0]
 800e792:	fb08 7005 	mla	r0, r8, r5, r7
 800e796:	10e4      	asrs	r4, r4, #3
 800e798:	fb04 6000 	mla	r0, r4, r0, r6
 800e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a0:	240253ce 	.word	0x240253ce
 800e7a4:	080251f4 	.word	0x080251f4

0800e7a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7aa:	b08b      	sub	sp, #44	@ 0x2c
 800e7ac:	461f      	mov	r7, r3
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4616      	mov	r6, r2
 800e7b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e7b6:	2500      	movs	r5, #0
 800e7b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e7bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e7c0:	9504      	str	r5, [sp, #16]
 800e7c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e7c6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e7ca:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e7ce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e7d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e7d6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e7da:	f88d 3020 	strb.w	r3, [sp, #32]
 800e7de:	f7ff fe9f 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e7e2:	463a      	mov	r2, r7
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f7ff ffc1 	bl	800e770 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e828 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e7f0:	9005      	str	r0, [sp, #20]
 800e7f2:	881b      	ldrh	r3, [r3, #0]
 800e7f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e7f8:	f7f5 f9ec 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e7fc:	6803      	ldr	r3, [r0, #0]
 800e7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e800:	4798      	blx	r3
 800e802:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e804:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e808:	a901      	add	r1, sp, #4
 800e80a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	6860      	ldr	r0, [r4, #4]
 800e812:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e816:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e81a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e81e:	6803      	ldr	r3, [r0, #0]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	4798      	blx	r3
 800e824:	b00b      	add	sp, #44	@ 0x2c
 800e826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e828:	240253ce 	.word	0x240253ce

0800e82c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82e:	b08d      	sub	sp, #52	@ 0x34
 800e830:	2501      	movs	r5, #1
 800e832:	4604      	mov	r4, r0
 800e834:	466b      	mov	r3, sp
 800e836:	9503      	str	r5, [sp, #12]
 800e838:	e883 0006 	stmia.w	r3, {r1, r2}
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8bd 6000 	ldrh.w	r6, [sp]
 800e842:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e846:	9306      	str	r3, [sp, #24]
 800e848:	6803      	ldr	r3, [r0, #0]
 800e84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e84c:	4798      	blx	r3
 800e84e:	463a      	mov	r2, r7
 800e850:	4631      	mov	r1, r6
 800e852:	4603      	mov	r3, r0
 800e854:	4620      	mov	r0, r4
 800e856:	f7ff ff8b 	bl	800e770 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e85a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e85c:	9004      	str	r0, [sp, #16]
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e864:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e868:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e86c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e870:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e878:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e87c:	f7f5 f9aa 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e880:	6803      	ldr	r3, [r0, #0]
 800e882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e884:	4798      	blx	r3
 800e886:	23ff      	movs	r3, #255	@ 0xff
 800e888:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e88c:	a903      	add	r1, sp, #12
 800e88e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e892:	6860      	ldr	r0, [r4, #4]
 800e894:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e898:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e89c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e8a0:	6803      	ldr	r3, [r0, #0]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	4798      	blx	r3
 800e8a6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e8a8:	b00d      	add	sp, #52	@ 0x34
 800e8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ac:	240253ce 	.word	0x240253ce

0800e8b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b4:	b08c      	sub	sp, #48	@ 0x30
 800e8b6:	461e      	mov	r6, r3
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	466d      	mov	r5, sp
 800e8be:	9306      	str	r3, [sp, #24]
 800e8c0:	6803      	ldr	r3, [r0, #0]
 800e8c2:	e885 0006 	stmia.w	r5, {r1, r2}
 800e8c6:	2501      	movs	r5, #1
 800e8c8:	f8bd 7000 	ldrh.w	r7, [sp]
 800e8cc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e8d0:	9503      	str	r5, [sp, #12]
 800e8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8d4:	4798      	blx	r3
 800e8d6:	4642      	mov	r2, r8
 800e8d8:	4639      	mov	r1, r7
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f7ff ff47 	bl	800e770 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e8e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e8e6:	9004      	str	r0, [sp, #16]
 800e8e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e8ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e8f0:	9607      	str	r6, [sp, #28]
 800e8f2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e8f6:	4b10      	ldr	r3, [pc, #64]	@ (800e938 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e8fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e900:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e904:	f7f5 f966 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 800e908:	6803      	ldr	r3, [r0, #0]
 800e90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e90c:	4798      	blx	r3
 800e90e:	23ff      	movs	r3, #255	@ 0xff
 800e910:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e914:	a903      	add	r1, sp, #12
 800e916:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e91a:	6860      	ldr	r0, [r4, #4]
 800e91c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e920:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e924:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e928:	6803      	ldr	r3, [r0, #0]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4798      	blx	r3
 800e92e:	4630      	mov	r0, r6
 800e930:	b00c      	add	sp, #48	@ 0x30
 800e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e936:	bf00      	nop
 800e938:	240253ce 	.word	0x240253ce

0800e93c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93e:	b085      	sub	sp, #20
 800e940:	4605      	mov	r5, r0
 800e942:	ac02      	add	r4, sp, #8
 800e944:	e884 0006 	stmia.w	r4, {r1, r2}
 800e948:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e94c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e950:	f7ff fde6 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e954:	4631      	mov	r1, r6
 800e956:	4603      	mov	r3, r0
 800e958:	463a      	mov	r2, r7
 800e95a:	4628      	mov	r0, r5
 800e95c:	f7ff ff08 	bl	800e770 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e960:	4a05      	ldr	r2, [pc, #20]	@ (800e978 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e962:	682b      	ldr	r3, [r5, #0]
 800e964:	8812      	ldrh	r2, [r2, #0]
 800e966:	9200      	str	r2, [sp, #0]
 800e968:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800e96a:	4603      	mov	r3, r0
 800e96c:	4628      	mov	r0, r5
 800e96e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e972:	47b0      	blx	r6
 800e974:	b005      	add	sp, #20
 800e976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e978:	240253ce 	.word	0x240253ce

0800e97c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e982:	4604      	mov	r4, r0
 800e984:	b19b      	cbz	r3, 800e9ae <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e986:	2002      	movs	r0, #2
 800e988:	f7f3 f812 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e98c:	2300      	movs	r3, #0
 800e98e:	4620      	mov	r0, r4
 800e990:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e994:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800e99e:	f7ff fdbf 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e9a2:	4601      	mov	r1, r0
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	462b      	mov	r3, r5
 800e9a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9ac:	4718      	bx	r3
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}

0800e9b0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	2003      	movs	r0, #3
 800e9b8:	b149      	cbz	r1, 800e9ce <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e9ba:	f7f2 ff99 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e9be:	6928      	ldr	r0, [r5, #16]
 800e9c0:	b168      	cbz	r0, 800e9de <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	695b      	ldr	r3, [r3, #20]
 800e9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9cc:	4718      	bx	r3
 800e9ce:	f7f2 ffbf 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e9d2:	6928      	ldr	r0, [r5, #16]
 800e9d4:	b118      	cbz	r0, 800e9de <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	4621      	mov	r1, r4
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	e7f4      	b.n	800e9c8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e9de:	bd70      	pop	{r4, r5, r6, pc}

0800e9e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	428b      	cmp	r3, r1
 800e9ec:	d006      	beq.n	800e9fc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e9ee:	6803      	ldr	r3, [r0, #0]
 800e9f0:	b929      	cbnz	r1, 800e9fe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e9f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e9f6:	4798      	blx	r3
 800e9f8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e9fc:	bd38      	pop	{r3, r4, r5, pc}
 800e9fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ea02:	e7f8      	b.n	800e9f6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800ea04 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ea04:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ea06:	b510      	push	{r4, lr}
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	b95b      	cbnz	r3, 800ea26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea0e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d007      	beq.n	800ea26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea16:	6840      	ldr	r0, [r0, #4]
 800ea18:	f000 f91a 	bl	800ec50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ea1c:	b118      	cbz	r0, 800ea26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea1e:	6862      	ldr	r2, [r4, #4]
 800ea20:	7a53      	ldrb	r3, [r2, #9]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d0fc      	beq.n	800ea20 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ea26:	f7f3 ffcd 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	f7ff ffd7 	bl	800e9e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7ff fd74 	bl	800e520 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	bf00      	nop
 800ea3c:	240253d2 	.word	0x240253d2

0800ea40 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	4604      	mov	r4, r0
 800ea44:	6803      	ldr	r3, [r0, #0]
 800ea46:	b919      	cbnz	r1, 800ea50 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800ea48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea4e:	4718      	bx	r3
 800ea50:	2200      	movs	r2, #0
 800ea52:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800ea56:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800ea5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea5c:	4798      	blx	r3
 800ea5e:	6863      	ldr	r3, [r4, #4]
 800ea60:	2101      	movs	r1, #1
 800ea62:	4605      	mov	r5, r0
 800ea64:	4620      	mov	r0, r4
 800ea66:	7299      	strb	r1, [r3, #10]
 800ea68:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800ea6c:	f7ff ffb8 	bl	800e9e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ea70:	4628      	mov	r0, r5
 800ea72:	bd70      	pop	{r4, r5, r6, pc}

0800ea74 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ea74:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ea78:	1a13      	subs	r3, r2, r0
 800ea7a:	4258      	negs	r0, r3
 800ea7c:	4158      	adcs	r0, r3
 800ea7e:	4770      	bx	lr

0800ea80 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ea80:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ea84:	1a9b      	subs	r3, r3, r2
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bfdc      	itt	le
 800ea8a:	6882      	ldrle	r2, [r0, #8]
 800ea8c:	189b      	addle	r3, r3, r2
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	bfcc      	ite	gt
 800ea92:	2000      	movgt	r0, #0
 800ea94:	2001      	movle	r0, #1
 800ea96:	4770      	bx	lr

0800ea98 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ea98:	6902      	ldr	r2, [r0, #16]
 800ea9a:	6843      	ldr	r3, [r0, #4]
 800ea9c:	2024      	movs	r0, #36	@ 0x24
 800ea9e:	fb00 3002 	mla	r0, r0, r2, r3
 800eaa2:	4770      	bx	lr

0800eaa4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800eaa4:	6803      	ldr	r3, [r0, #0]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	4718      	bx	r3

0800eaaa <_ZN8touchgfx13DMA_Interface7executeEv>:
 800eaaa:	2301      	movs	r3, #1
 800eaac:	b570      	push	{r4, r5, r6, lr}
 800eaae:	7203      	strb	r3, [r0, #8]
 800eab0:	4604      	mov	r4, r0
 800eab2:	6840      	ldr	r0, [r0, #4]
 800eab4:	6803      	ldr	r3, [r0, #0]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	4798      	blx	r3
 800eaba:	6803      	ldr	r3, [r0, #0]
 800eabc:	4605      	mov	r5, r0
 800eabe:	2b40      	cmp	r3, #64	@ 0x40
 800eac0:	d00c      	beq.n	800eadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eac2:	d810      	bhi.n	800eae6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	d01d      	beq.n	800eb04 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800eac8:	d804      	bhi.n	800ead4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d006      	beq.n	800eadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d02c      	beq.n	800eb2c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	2b08      	cmp	r3, #8
 800ead6:	d01d      	beq.n	800eb14 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800ead8:	2b20      	cmp	r3, #32
 800eada:	d1fa      	bne.n	800ead2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	4620      	mov	r0, r4
 800eae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eae2:	4798      	blx	r3
 800eae4:	e013      	b.n	800eb0e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800eae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaea:	d0f7      	beq.n	800eadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eaec:	d804      	bhi.n	800eaf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800eaee:	2b80      	cmp	r3, #128	@ 0x80
 800eaf0:	d0f4      	beq.n	800eadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eaf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eaf6:	e7f0      	b.n	800eada <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800eaf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eafc:	d0ee      	beq.n	800eadc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eafe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb02:	e7e5      	b.n	800ead0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	7f01      	ldrb	r1, [r0, #28]
 800eb08:	4620      	mov	r0, r4
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0c:	4798      	blx	r3
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb12:	e006      	b.n	800eb22 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800eb14:	6823      	ldr	r3, [r4, #0]
 800eb16:	7f01      	ldrb	r1, [r0, #28]
 800eb18:	4620      	mov	r0, r4
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb1c:	4798      	blx	r3
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb22:	4629      	mov	r1, r5
 800eb24:	4620      	mov	r0, r4
 800eb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb2a:	4718      	bx	r3
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	4620      	mov	r0, r4
 800eb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb32:	4798      	blx	r3
 800eb34:	e7f3      	b.n	800eb1e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800eb36 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800eb36:	4770      	bx	lr

0800eb38 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800eb38:	4770      	bx	lr

0800eb3a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800eb3a:	4770      	bx	lr

0800eb3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800eb3c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800eb40:	b510      	push	{r4, lr}
 800eb42:	1ad2      	subs	r2, r2, r3
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	bfdc      	itt	le
 800eb48:	6884      	ldrle	r4, [r0, #8]
 800eb4a:	1912      	addle	r2, r2, r4
 800eb4c:	2a01      	cmp	r2, #1
 800eb4e:	dd16      	ble.n	800eb7e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800eb50:	6842      	ldr	r2, [r0, #4]
 800eb52:	2424      	movs	r4, #36	@ 0x24
 800eb54:	fb04 2303 	mla	r3, r4, r3, r2
 800eb58:	f101 0220 	add.w	r2, r1, #32
 800eb5c:	f851 4b04 	ldr.w	r4, [r1], #4
 800eb60:	4291      	cmp	r1, r2
 800eb62:	f843 4b04 	str.w	r4, [r3], #4
 800eb66:	d1f9      	bne.n	800eb5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800eb68:	780a      	ldrb	r2, [r1, #0]
 800eb6a:	701a      	strb	r2, [r3, #0]
 800eb6c:	68c3      	ldr	r3, [r0, #12]
 800eb6e:	6882      	ldr	r2, [r0, #8]
 800eb70:	f3bf 8f5b 	dmb	ish
 800eb74:	3301      	adds	r3, #1
 800eb76:	429a      	cmp	r2, r3
 800eb78:	bfd8      	it	le
 800eb7a:	1a9b      	suble	r3, r3, r2
 800eb7c:	60c3      	str	r3, [r0, #12]
 800eb7e:	bd10      	pop	{r4, pc}

0800eb80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800eb80:	6903      	ldr	r3, [r0, #16]
 800eb82:	6882      	ldr	r2, [r0, #8]
 800eb84:	f3bf 8f5b 	dmb	ish
 800eb88:	3301      	adds	r3, #1
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	bfd8      	it	le
 800eb8e:	1a9b      	suble	r3, r3, r2
 800eb90:	6103      	str	r3, [r0, #16]
 800eb92:	4770      	bx	lr

0800eb94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	4604      	mov	r4, r0
 800eb98:	460e      	mov	r6, r1
 800eb9a:	6860      	ldr	r0, [r4, #4]
 800eb9c:	6803      	ldr	r3, [r0, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	4798      	blx	r3
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1f9      	bne.n	800eb9a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800eba6:	4d0d      	ldr	r5, [pc, #52]	@ (800ebdc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800eba8:	6828      	ldr	r0, [r5, #0]
 800ebaa:	6803      	ldr	r3, [r0, #0]
 800ebac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebae:	4798      	blx	r3
 800ebb0:	f7f3 ff16 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ebb4:	6828      	ldr	r0, [r5, #0]
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	f7ff ff12 	bl	800e9e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ebbc:	6860      	ldr	r0, [r4, #4]
 800ebbe:	4631      	mov	r1, r6
 800ebc0:	6803      	ldr	r3, [r0, #0]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	4798      	blx	r3
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	4620      	mov	r0, r4
 800ebca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebcc:	4798      	blx	r3
 800ebce:	6828      	ldr	r0, [r5, #0]
 800ebd0:	6803      	ldr	r3, [r0, #0]
 800ebd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebd8:	4718      	bx	r3
 800ebda:	bf00      	nop
 800ebdc:	240253d4 	.word	0x240253d4

0800ebe0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ebe0:	b508      	push	{r3, lr}
 800ebe2:	f7f3 feef 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ebe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ebea:	f7f3 bef3 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ebee <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	2114      	movs	r1, #20
 800ebf4:	f012 fa73 	bl	80210de <_ZdlPvj>
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	bd10      	pop	{r4, pc}

0800ebfc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4604      	mov	r4, r0
 800ec00:	6840      	ldr	r0, [r0, #4]
 800ec02:	6803      	ldr	r3, [r0, #0]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4798      	blx	r3
 800ec08:	4605      	mov	r5, r0
 800ec0a:	b930      	cbnz	r0, 800ec1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ec0c:	7a23      	ldrb	r3, [r4, #8]
 800ec0e:	b123      	cbz	r3, 800ec1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ec10:	6860      	ldr	r0, [r4, #4]
 800ec12:	6803      	ldr	r3, [r0, #0]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	4798      	blx	r3
 800ec18:	7225      	strb	r5, [r4, #8]
 800ec1a:	6860      	ldr	r0, [r4, #4]
 800ec1c:	6803      	ldr	r3, [r0, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4798      	blx	r3
 800ec22:	b928      	cbnz	r0, 800ec30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	4620      	mov	r0, r4
 800ec28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec2e:	4718      	bx	r3
 800ec30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec34:	f7f3 bedc 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ec38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	6082      	str	r2, [r0, #8]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4c03      	ldr	r4, [pc, #12]	@ (800ec4c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ec40:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ec44:	e9c0 4100 	strd	r4, r1, [r0]
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08025208 	.word	0x08025208

0800ec50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ec50:	6840      	ldr	r0, [r0, #4]
 800ec52:	6803      	ldr	r3, [r0, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4718      	bx	r3

0800ec58 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800ec58:	2300      	movs	r3, #0
 800ec5a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800ec5c:	8503      	strh	r3, [r0, #40]	@ 0x28
 800ec5e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800ec60:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ec62:	6980      	ldr	r0, [r0, #24]
 800ec64:	b110      	cbz	r0, 800ec6c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800ec66:	6803      	ldr	r3, [r0, #0]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	4718      	bx	r3
 800ec6c:	4770      	bx	lr

0800ec6e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800ec6e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800ec72:	4770      	bx	lr

0800ec74 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	0e0b      	lsrs	r3, r1, #24
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	7783      	strb	r3, [r0, #30]
 800ec7e:	6803      	ldr	r3, [r0, #0]
 800ec80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec82:	4798      	blx	r3
 800ec84:	6803      	ldr	r3, [r0, #0]
 800ec86:	4629      	mov	r1, r5
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	4798      	blx	r3
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	4620      	mov	r0, r4
 800ec90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec92:	4798      	blx	r3
 800ec94:	61a0      	str	r0, [r4, #24]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}

0800ec98 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800ec98:	7741      	strb	r1, [r0, #29]
 800ec9a:	4770      	bx	lr

0800ec9c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800ec9c:	b530      	push	{r4, r5, lr}
 800ec9e:	460d      	mov	r5, r1
 800eca0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800eca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	6023      	str	r3, [r4, #0]
 800ecb0:	bd30      	pop	{r4, r5, pc}

0800ecb2 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800ecb2:	b538      	push	{r3, r4, r5, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	1d03      	adds	r3, r0, #4
 800ecb8:	6808      	ldr	r0, [r1, #0]
 800ecba:	2500      	movs	r5, #0
 800ecbc:	6849      	ldr	r1, [r1, #4]
 800ecbe:	c303      	stmia	r3!, {r0, r1}
 800ecc0:	6813      	ldr	r3, [r2, #0]
 800ecc2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ecc6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800ecca:	6853      	ldr	r3, [r2, #4]
 800eccc:	61a5      	str	r5, [r4, #24]
 800ecce:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800ecd2:	f005 fd89 	bl	80147e8 <_ZN8touchgfx9Matrix3x35resetEv>
 800ecd6:	23ff      	movs	r3, #255	@ 0xff
 800ecd8:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800ecdc:	7763      	strb	r3, [r4, #29]
 800ecde:	77a3      	strb	r3, [r4, #30]
 800ece0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ece4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ece6:	2301      	movs	r3, #1
 800ece8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800ecec:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ecf0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800ecf0:	ee70 7a41 	vsub.f32	s15, s0, s2
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	ed2d 8b0a 	vpush	{d8-d12}
 800ed02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed06:	b086      	sub	sp, #24
 800ed08:	eeb0 ba40 	vmov.f32	s22, s0
 800ed0c:	6802      	ldr	r2, [r0, #0]
 800ed0e:	eef0 ba60 	vmov.f32	s23, s1
 800ed12:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800ed16:	eef0 aa41 	vmov.f32	s21, s2
 800ed1a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ed1c:	eeb0 aa61 	vmov.f32	s20, s3
 800ed20:	eeb0 ca42 	vmov.f32	s24, s4
 800ed24:	eef0 ca62 	vmov.f32	s25, s5
 800ed28:	d112      	bne.n	800ed50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ed2a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800ed2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	d10b      	bne.n	800ed50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ed38:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800ed3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ed3e:	3901      	subs	r1, #1
 800ed40:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ed44:	b006      	add	sp, #24
 800ed46:	ecbd 8b0a 	vpop	{d8-d12}
 800ed4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4e:	4710      	bx	r2
 800ed50:	23ff      	movs	r3, #255	@ 0xff
 800ed52:	4628      	mov	r0, r5
 800ed54:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800ed58:	77ab      	strb	r3, [r5, #30]
 800ed5a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ed5c:	4798      	blx	r3
 800ed5e:	eeb0 0a4b 	vmov.f32	s0, s22
 800ed62:	eef0 0a6b 	vmov.f32	s1, s23
 800ed66:	4604      	mov	r4, r0
 800ed68:	4640      	mov	r0, r8
 800ed6a:	f005 fdec 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ed6e:	eef0 8a40 	vmov.f32	s17, s0
 800ed72:	ed8d 0a00 	vstr	s0, [sp]
 800ed76:	eeb0 0a6a 	vmov.f32	s0, s21
 800ed7a:	eef0 9a60 	vmov.f32	s19, s1
 800ed7e:	edcd 0a01 	vstr	s1, [sp, #4]
 800ed82:	4640      	mov	r0, r8
 800ed84:	eef0 0a4a 	vmov.f32	s1, s20
 800ed88:	f005 fddd 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ed8c:	eef4 8a40 	vcmp.f32	s17, s0
 800ed90:	eeb0 8a40 	vmov.f32	s16, s0
 800ed94:	ed8d 0a02 	vstr	s0, [sp, #8]
 800ed98:	eeb0 9a60 	vmov.f32	s18, s1
 800ed9c:	edcd 0a03 	vstr	s1, [sp, #12]
 800eda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda4:	eef4 9a60 	vcmp.f32	s19, s1
 800eda8:	bf0c      	ite	eq
 800edaa:	2301      	moveq	r3, #1
 800edac:	2300      	movne	r3, #0
 800edae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb2:	eef4 8a40 	vcmp.f32	s17, s0
 800edb6:	7463      	strb	r3, [r4, #17]
 800edb8:	bf0c      	ite	eq
 800edba:	2301      	moveq	r3, #1
 800edbc:	2300      	movne	r3, #0
 800edbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc2:	74a3      	strb	r3, [r4, #18]
 800edc4:	d024      	beq.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800edc6:	eef4 9a60 	vcmp.f32	s19, s1
 800edca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edce:	d01f      	beq.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800edd0:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800edd4:	4640      	mov	r0, r8
 800edd6:	ee7a aacb 	vsub.f32	s21, s21, s22
 800edda:	eeb0 0a4b 	vmov.f32	s0, s22
 800edde:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800ede2:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800ede6:	eef0 0a6b 	vmov.f32	s1, s23
 800edea:	eea7 0acc 	vfms.f32	s0, s15, s24
 800edee:	eeec 0a87 	vfma.f32	s1, s25, s14
 800edf2:	f005 fda8 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800edf6:	ed8d 0a04 	vstr	s0, [sp, #16]
 800edfa:	ee30 0a68 	vsub.f32	s0, s0, s17
 800edfe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ee02:	edcd 0a05 	vstr	s1, [sp, #20]
 800ee06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0a:	d121      	bne.n	800ee50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	74a3      	strb	r3, [r4, #18]
 800ee10:	7c63      	ldrb	r3, [r4, #17]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d051      	beq.n	800eeba <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800ee16:	ee39 7a69 	vsub.f32	s14, s18, s19
 800ee1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ef10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800ee1e:	eef4 9ac9 	vcmpe.f32	s19, s18
 800ee22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2a:	edc4 7a08 	vstr	s15, [r4, #32]
 800ee2e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800ee32:	ee17 3a90 	vmov	r3, s15
 800ee36:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800ee3a:	b21a      	sxth	r2, r3
 800ee3c:	ee17 3a90 	vmov	r3, s15
 800ee40:	bf48      	it	mi
 800ee42:	8122      	strhmi	r2, [r4, #8]
 800ee44:	b21b      	sxth	r3, r3
 800ee46:	bf56      	itet	pl
 800ee48:	80e2      	strhpl	r2, [r4, #6]
 800ee4a:	80e3      	strhmi	r3, [r4, #6]
 800ee4c:	8123      	strhpl	r3, [r4, #8]
 800ee4e:	e02c      	b.n	800eeaa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ee50:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800ee54:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800ee58:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ee5c:	edc4 7a05 	vstr	s15, [r4, #20]
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	d102      	bne.n	800ee6c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800ee66:	2301      	movs	r3, #1
 800ee68:	7463      	strb	r3, [r4, #17]
 800ee6a:	e7d1      	b.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800ee6c:	eeb0 7a69 	vmov.f32	s14, s19
 800ee70:	ee39 9a69 	vsub.f32	s18, s18, s19
 800ee74:	ee38 8a68 	vsub.f32	s16, s16, s17
 800ee78:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800ee7c:	ed84 7a06 	vstr	s14, [r4, #24]
 800ee80:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800ee84:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ee88:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800ef14 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800ee8c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ee90:	ed84 8a07 	vstr	s16, [r4, #28]
 800ee94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ee98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9c:	edc4 7a08 	vstr	s15, [r4, #32]
 800eea0:	d503      	bpl.n	800eeaa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eea2:	eeb1 8a48 	vneg.f32	s16, s16
 800eea6:	ed84 8a07 	vstr	s16, [r4, #28]
 800eeaa:	60e7      	str	r7, [r4, #12]
 800eeac:	7426      	strb	r6, [r4, #16]
 800eeae:	61ac      	str	r4, [r5, #24]
 800eeb0:	b006      	add	sp, #24
 800eeb2:	ecbd 8b0a 	vpop	{d8-d12}
 800eeb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeba:	7ca3      	ldrb	r3, [r4, #18]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d0f4      	beq.n	800eeaa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eec0:	ee38 7a68 	vsub.f32	s14, s16, s17
 800eec4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ef10 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800eec8:	eef4 8ac8 	vcmpe.f32	s17, s16
 800eecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed4:	edc4 7a08 	vstr	s15, [r4, #32]
 800eed8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800eedc:	ee17 3a90 	vmov	r3, s15
 800eee0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800eee4:	b21a      	sxth	r2, r3
 800eee6:	ee17 3a90 	vmov	r3, s15
 800eeea:	bf48      	it	mi
 800eeec:	8122      	strhmi	r2, [r4, #8]
 800eeee:	b21b      	sxth	r3, r3
 800eef0:	bf56      	itet	pl
 800eef2:	80e2      	strhpl	r2, [r4, #6]
 800eef4:	80e3      	strhmi	r3, [r4, #6]
 800eef6:	8123      	strhpl	r3, [r4, #8]
 800eef8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800eefc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ef00:	1a9b      	subs	r3, r3, r2
 800ef02:	ee07 3a90 	vmov	s15, r3
 800ef06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef0a:	edc4 7a07 	vstr	s15, [r4, #28]
 800ef0e:	e7cc      	b.n	800eeaa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ef10:	447ffffe 	.word	0x447ffffe
 800ef14:	44800000 	.word	0x44800000

0800ef18 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	ed2d 8b02 	vpush	{d8}
 800ef1e:	eef0 8a62 	vmov.f32	s17, s5
 800ef22:	2100      	movs	r1, #0
 800ef24:	4604      	mov	r4, r0
 800ef26:	eeb0 8a42 	vmov.f32	s16, s4
 800ef2a:	f011 fe69 	bl	8020c00 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800ef2e:	eef0 7a68 	vmov.f32	s15, s17
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	4620      	mov	r0, r4
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef3c:	ee17 2a90 	vmov	r2, s15
 800ef40:	eef0 7a48 	vmov.f32	s15, s16
 800ef44:	ecbd 8b02 	vpop	{d8}
 800ef48:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef50:	ee17 1a90 	vmov	r1, s15
 800ef54:	4718      	bx	r3

0800ef56 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800ef56:	b510      	push	{r4, lr}
 800ef58:	ed2d 8b02 	vpush	{d8}
 800ef5c:	eef0 8a63 	vmov.f32	s17, s7
 800ef60:	2100      	movs	r1, #0
 800ef62:	4604      	mov	r4, r0
 800ef64:	eeb0 8a43 	vmov.f32	s16, s6
 800ef68:	f011 ff0c 	bl	8020d84 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800ef6c:	eef0 7a68 	vmov.f32	s15, s17
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	4620      	mov	r0, r4
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef7a:	ee17 2a90 	vmov	r2, s15
 800ef7e:	eef0 7a48 	vmov.f32	s15, s16
 800ef82:	ecbd 8b02 	vpop	{d8}
 800ef86:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ef8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef8e:	ee17 1a90 	vmov	r1, s15
 800ef92:	4718      	bx	r3

0800ef94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800ef94:	b513      	push	{r0, r1, r4, lr}
 800ef96:	4604      	mov	r4, r0
 800ef98:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ef9a:	f005 fcd4 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ef9e:	eef0 7a60 	vmov.f32	s15, s1
 800efa2:	4620      	mov	r0, r4
 800efa4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efa8:	ee17 2a90 	vmov	r2, s15
 800efac:	eef0 7a40 	vmov.f32	s15, s0
 800efb0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efb4:	ee17 1a90 	vmov	r1, s15
 800efb8:	b002      	add	sp, #8
 800efba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efbe:	f011 bd79 	b.w	8020ab4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800efc2:	b513      	push	{r0, r1, r4, lr}
 800efc4:	4604      	mov	r4, r0
 800efc6:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800efc8:	f005 fcbd 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800efcc:	eef0 7a60 	vmov.f32	s15, s1
 800efd0:	4620      	mov	r0, r4
 800efd2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efd6:	ee17 2a90 	vmov	r2, s15
 800efda:	eef0 7a40 	vmov.f32	s15, s0
 800efde:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800efe2:	ee17 1a90 	vmov	r1, s15
 800efe6:	b002      	add	sp, #8
 800efe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efec:	f011 bdaf 	b.w	8020b4e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800eff0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff2:	2400      	movs	r4, #0
 800eff4:	9f07      	ldr	r7, [sp, #28]
 800eff6:	f04f 0e01 	mov.w	lr, #1
 800effa:	4626      	mov	r6, r4
 800effc:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800f000:	4463      	add	r3, ip
 800f002:	4563      	cmp	r3, ip
 800f004:	d02d      	beq.n	800f062 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800f006:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800f00a:	2d06      	cmp	r5, #6
 800f00c:	d8f9      	bhi.n	800f002 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f00e:	fa0e f505 	lsl.w	r5, lr, r5
 800f012:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800f016:	d10d      	bne.n	800f034 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800f018:	f015 0f10 	tst.w	r5, #16
 800f01c:	d117      	bne.n	800f04e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800f01e:	072d      	lsls	r5, r5, #28
 800f020:	d5ef      	bpl.n	800f002 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f022:	3801      	subs	r0, #1
 800f024:	b91e      	cbnz	r6, 800f02e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800f026:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800f02a:	682d      	ldr	r5, [r5, #0]
 800f02c:	600d      	str	r5, [r1, #0]
 800f02e:	b96c      	cbnz	r4, 800f04c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f030:	2601      	movs	r6, #1
 800f032:	e7e6      	b.n	800f002 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f034:	b926      	cbnz	r6, 800f040 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800f036:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f03a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f03e:	600b      	str	r3, [r1, #0]
 800f040:	b924      	cbnz	r4, 800f04c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f042:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f046:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f04e:	3801      	subs	r0, #1
 800f050:	b91c      	cbnz	r4, 800f05a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800f052:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800f056:	6824      	ldr	r4, [r4, #0]
 800f058:	6014      	str	r4, [r2, #0]
 800f05a:	2e00      	cmp	r6, #0
 800f05c:	d1f6      	bne.n	800f04c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f05e:	2401      	movs	r4, #1
 800f060:	e7cf      	b.n	800f002 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f062:	b90e      	cbnz	r6, 800f068 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800f064:	2300      	movs	r3, #0
 800f066:	600b      	str	r3, [r1, #0]
 800f068:	2c00      	cmp	r4, #0
 800f06a:	d1ef      	bne.n	800f04c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f06c:	2300      	movs	r3, #0
 800f06e:	e7ec      	b.n	800f04a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800f070 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	ed2d 8b0a 	vpush	{d8-d12}
 800f076:	eef0 ba40 	vmov.f32	s23, s0
 800f07a:	4604      	mov	r4, r0
 800f07c:	eeb0 ca60 	vmov.f32	s24, s1
 800f080:	460d      	mov	r5, r1
 800f082:	eef0 aa41 	vmov.f32	s21, s2
 800f086:	eeb0 ba61 	vmov.f32	s22, s3
 800f08a:	eeb0 9a42 	vmov.f32	s18, s4
 800f08e:	eef0 9a62 	vmov.f32	s19, s5
 800f092:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800f096:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800f09a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800f09e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800f0a2:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800f0a6:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800f0aa:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800f0ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f0b2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800f0b6:	f012 f83d 	bl	8021134 <sqrtf>
 800f0ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c2:	d12e      	bne.n	800f122 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800f0c4:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800f0c8:	ee39 7acb 	vsub.f32	s14, s19, s22
 800f0cc:	eeb0 8a6a 	vmov.f32	s16, s21
 800f0d0:	eef0 8a4b 	vmov.f32	s17, s22
 800f0d4:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800f0d8:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800f0dc:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800f0e0:	eee7 8aca 	vfms.f32	s17, s15, s20
 800f0e4:	2d02      	cmp	r5, #2
 800f0e6:	dc2f      	bgt.n	800f148 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800f0e8:	3501      	adds	r5, #1
 800f0ea:	eef0 1a4b 	vmov.f32	s3, s22
 800f0ee:	eeb0 1a6a 	vmov.f32	s2, s21
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	eef0 2a68 	vmov.f32	s5, s17
 800f0fa:	eeb0 2a48 	vmov.f32	s4, s16
 800f0fe:	eef0 0a4c 	vmov.f32	s1, s24
 800f102:	eeb0 0a6b 	vmov.f32	s0, s23
 800f106:	f7ff ffb3 	bl	800f070 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f10a:	eef0 0a68 	vmov.f32	s1, s17
 800f10e:	eeb0 0a48 	vmov.f32	s0, s16
 800f112:	4620      	mov	r0, r4
 800f114:	f7ff ff55 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f118:	eeb0 ba68 	vmov.f32	s22, s17
 800f11c:	eef0 aa48 	vmov.f32	s21, s16
 800f120:	e7b9      	b.n	800f096 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800f122:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800f126:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f12a:	ee78 8acc 	vsub.f32	s17, s17, s24
 800f12e:	ee28 7a27 	vmul.f32	s14, s16, s15
 800f132:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f136:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800f13a:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800f13e:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800f142:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800f146:	e7cd      	b.n	800f0e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800f148:	eef0 0a68 	vmov.f32	s1, s17
 800f14c:	4620      	mov	r0, r4
 800f14e:	eeb0 0a48 	vmov.f32	s0, s16
 800f152:	f7ff ff36 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f156:	ecbd 8b0a 	vpop	{d8-d12}
 800f15a:	bd38      	pop	{r3, r4, r5, pc}

0800f15c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	ed2d 8b0a 	vpush	{d8-d12}
 800f162:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800f166:	4604      	mov	r4, r0
 800f168:	eeb0 ca40 	vmov.f32	s24, s0
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	eeb0 9a60 	vmov.f32	s18, s1
 800f172:	eef0 9a41 	vmov.f32	s19, s2
 800f176:	eef0 8a61 	vmov.f32	s17, s3
 800f17a:	eeb0 ba42 	vmov.f32	s22, s4
 800f17e:	eef0 ba62 	vmov.f32	s23, s5
 800f182:	eeb0 aa43 	vmov.f32	s20, s6
 800f186:	eef0 aa63 	vmov.f32	s21, s7
 800f18a:	eeb0 8a44 	vmov.f32	s16, s8
 800f18e:	eef0 ca64 	vmov.f32	s25, s9
 800f192:	d12c      	bne.n	800f1ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800f194:	eef0 0a62 	vmov.f32	s1, s5
 800f198:	eeb0 0a42 	vmov.f32	s0, s4
 800f19c:	f7ff ff11 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f1a0:	ee79 9acb 	vsub.f32	s19, s19, s22
 800f1a4:	ee7a caec 	vsub.f32	s25, s21, s25
 800f1a8:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800f1ac:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f1b0:	ee69 9aac 	vmul.f32	s19, s19, s25
 800f1b4:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f1b8:	eef4 9ac8 	vcmpe.f32	s19, s16
 800f1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c0:	db0f      	blt.n	800f1e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	eef0 2a6a 	vmov.f32	s5, s21
 800f1c8:	eeb0 2a4a 	vmov.f32	s4, s20
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	eef0 1a6b 	vmov.f32	s3, s23
 800f1d2:	eeb0 1a4b 	vmov.f32	s2, s22
 800f1d6:	eef0 0a49 	vmov.f32	s1, s18
 800f1da:	eeb0 0a4c 	vmov.f32	s0, s24
 800f1de:	f7ff ff47 	bl	800f070 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f1e2:	eef0 0a6a 	vmov.f32	s1, s21
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	eeb0 0a4a 	vmov.f32	s0, s20
 800f1ec:	e035      	b.n	800f25a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d138      	bne.n	800f264 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f1f2:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800f1f6:	ee33 6a48 	vsub.f32	s12, s6, s16
 800f1fa:	ee71 7a42 	vsub.f32	s15, s2, s4
 800f1fe:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800f202:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800f206:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f20a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f212:	d027      	beq.n	800f264 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f214:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800f218:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800f21c:	eea4 8a83 	vfma.f32	s16, s9, s6
 800f220:	eee1 8a22 	vfma.f32	s17, s2, s5
 800f224:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800f228:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800f22c:	eee6 7a28 	vfma.f32	s15, s12, s17
 800f230:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800f234:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800f238:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800f23c:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800f240:	ee3c ca40 	vsub.f32	s24, s24, s0
 800f244:	ee39 9a60 	vsub.f32	s18, s18, s1
 800f248:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f24c:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800f250:	eef4 7ac9 	vcmpe.f32	s15, s18
 800f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f258:	db04      	blt.n	800f264 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f25a:	f7ff feb2 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f25e:	ecbd 8b0a 	vpop	{d8-d12}
 800f262:	bd10      	pop	{r4, pc}
 800f264:	eef0 0a6b 	vmov.f32	s1, s23
 800f268:	4620      	mov	r0, r4
 800f26a:	eeb0 0a4b 	vmov.f32	s0, s22
 800f26e:	f7ff fea8 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f272:	e7b6      	b.n	800f1e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800f274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800f274:	b510      	push	{r4, lr}
 800f276:	ed2d 8b0c 	vpush	{d8-d13}
 800f27a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800f27e:	4604      	mov	r4, r0
 800f280:	eeb0 9a40 	vmov.f32	s18, s0
 800f284:	eef0 9a60 	vmov.f32	s19, s1
 800f288:	eef0 aa41 	vmov.f32	s21, s2
 800f28c:	eeb0 ba61 	vmov.f32	s22, s3
 800f290:	b933      	cbnz	r3, 800f2a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800f292:	f7ff fe96 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f296:	eef0 0a4b 	vmov.f32	s1, s22
 800f29a:	eeb0 0a6a 	vmov.f32	s0, s21
 800f29e:	e015      	b.n	800f2cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800f2a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	ee71 8a40 	vsub.f32	s17, s2, s0
 800f2aa:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800f2ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f2b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f2b6:	d10f      	bne.n	800f2d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800f2b8:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f2bc:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f2c0:	f7ff fe7f 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2c4:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800f2c8:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7ff fe78 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2d2:	ecbd 8b0c 	vpop	{d8-d13}
 800f2d6:	bd10      	pop	{r4, pc}
 800f2d8:	f7ff fe73 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f2dc:	eef0 0a69 	vmov.f32	s1, s19
 800f2e0:	eeb0 0a49 	vmov.f32	s0, s18
 800f2e4:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800f414 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800f2e8:	eeb1 aa68 	vneg.f32	s20, s17
 800f2ec:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f418 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800f2f0:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f2fa:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f41c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800f2fe:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f420 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800f302:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f424 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800f306:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f30a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f30e:	f7ff fe58 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f312:	eef0 0a69 	vmov.f32	s1, s19
 800f316:	eeb0 0a49 	vmov.f32	s0, s18
 800f31a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f428 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800f31e:	4620      	mov	r0, r4
 800f320:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f324:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f328:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f32c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f330:	f7ff fe47 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f334:	eef0 0a69 	vmov.f32	s1, s19
 800f338:	eeb0 0a49 	vmov.f32	s0, s18
 800f33c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f42c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800f340:	4620      	mov	r0, r4
 800f342:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f346:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f34a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f34e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f352:	f7ff fe36 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f356:	eef0 0a69 	vmov.f32	s1, s19
 800f35a:	eeb0 0a49 	vmov.f32	s0, s18
 800f35e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f430 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800f362:	4620      	mov	r0, r4
 800f364:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f368:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f36c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f370:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f374:	f7ff fe25 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f378:	ee79 0a88 	vadd.f32	s1, s19, s16
 800f37c:	ee39 0a28 	vadd.f32	s0, s18, s17
 800f380:	4620      	mov	r0, r4
 800f382:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f386:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f38a:	f7ff fe1a 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f38e:	eef0 0a69 	vmov.f32	s1, s19
 800f392:	eeb0 0a49 	vmov.f32	s0, s18
 800f396:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f434 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800f39a:	4620      	mov	r0, r4
 800f39c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3a0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3a4:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f3a8:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f3ac:	f7ff fe09 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3b0:	eef0 0a69 	vmov.f32	s1, s19
 800f3b4:	eeb0 0a49 	vmov.f32	s0, s18
 800f3b8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f438 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800f3bc:	4620      	mov	r0, r4
 800f3be:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3c2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3c6:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f3ca:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f3ce:	f7ff fdf8 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3d2:	eef0 0a69 	vmov.f32	s1, s19
 800f3d6:	eeb0 0a49 	vmov.f32	s0, s18
 800f3da:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f43c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800f3de:	4620      	mov	r0, r4
 800f3e0:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f3e4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3e8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f3ec:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f3f0:	f7ff fde7 	bl	800efc2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f3f4:	eef0 0a69 	vmov.f32	s1, s19
 800f3f8:	eeb0 0a49 	vmov.f32	s0, s18
 800f3fc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f440 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800f400:	4620      	mov	r0, r4
 800f402:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f406:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f40a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f40e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f412:	e73e      	b.n	800f292 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800f414:	3d23d70a 	.word	0x3d23d70a
 800f418:	3e8f5c29 	.word	0x3e8f5c29
 800f41c:	3f19999a 	.word	0x3f19999a
 800f420:	3f4ccccd 	.word	0x3f4ccccd
 800f424:	3f75c28f 	.word	0x3f75c28f
 800f428:	3e4ccccd 	.word	0x3e4ccccd
 800f42c:	3ecccccd 	.word	0x3ecccccd
 800f430:	3f3851ec 	.word	0x3f3851ec
 800f434:	3fa3d70a 	.word	0x3fa3d70a
 800f438:	3fcccccd 	.word	0x3fcccccd
 800f43c:	3fe66666 	.word	0x3fe66666
 800f440:	3ffae148 	.word	0x3ffae148

0800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	ed2d 8b06 	vpush	{d8-d10}
 800f44a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f44e:	eef0 aa40 	vmov.f32	s21, s0
 800f452:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f456:	4604      	mov	r4, r0
 800f458:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f45c:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f460:	eeb0 aa60 	vmov.f32	s20, s1
 800f464:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f468:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f46c:	f011 fe62 	bl	8021134 <sqrtf>
 800f470:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f478:	dd36      	ble.n	800f4e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f47a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f47e:	2600      	movs	r6, #0
 800f480:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f484:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f488:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f48c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f490:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f494:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f498:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f49c:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f4a0:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f4a4:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f4a8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f4ac:	b1fd      	cbz	r5, 800f4ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f4ae:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f4b2:	eef0 0a49 	vmov.f32	s1, s18
 800f4b6:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f4ba:	eeb0 0a69 	vmov.f32	s0, s19
 800f4be:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f4c8:	f7ff fd64 	bl	800ef94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f4cc:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f4d0:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f4d4:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f4d8:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f4dc:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f4e0:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f4e4:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f4e8:	ecbd 8b06 	vpop	{d8-d10}
 800f4ec:	bd70      	pop	{r4, r5, r6, pc}
 800f4ee:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f4f2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f4f6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f4fa:	b16b      	cbz	r3, 800f518 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f4fc:	eef0 1a49 	vmov.f32	s3, s18
 800f500:	4620      	mov	r0, r4
 800f502:	eeb0 1a69 	vmov.f32	s2, s19
 800f506:	eef0 0a62 	vmov.f32	s1, s5
 800f50a:	eeb0 0a42 	vmov.f32	s0, s4
 800f50e:	f7ff feb1 	bl	800f274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f512:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f516:	e7db      	b.n	800f4d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f518:	eef0 4a48 	vmov.f32	s9, s16
 800f51c:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f520:	eeb0 4a68 	vmov.f32	s8, s17
 800f524:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f528:	eef0 3a49 	vmov.f32	s7, s18
 800f52c:	4620      	mov	r0, r4
 800f52e:	eeb0 3a69 	vmov.f32	s6, s19
 800f532:	f7ff fe13 	bl	800f15c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f536:	e7cb      	b.n	800f4d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f538 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f538:	ee07 2a90 	vmov	s15, r2
 800f53c:	ee07 1a10 	vmov	s14, r1
 800f540:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f544:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f558 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f548:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f54c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f550:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f554:	f7ff bf76 	b.w	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f558:	3d000000 	.word	0x3d000000

0800f55c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	ed2d 8b02 	vpush	{d8}
 800f562:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f566:	4604      	mov	r4, r0
 800f568:	b31d      	cbz	r5, 800f5b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f56a:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f56e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f572:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f576:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f57a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f57e:	eef0 0a68 	vmov.f32	s1, s17
 800f582:	f7ff fd07 	bl	800ef94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f586:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f58a:	eef0 1a48 	vmov.f32	s3, s16
 800f58e:	4620      	mov	r0, r4
 800f590:	eeb0 0a41 	vmov.f32	s0, s2
 800f594:	eef0 0a68 	vmov.f32	s1, s17
 800f598:	f7ff fe6c 	bl	800f274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f59c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f5a0:	eef0 1a68 	vmov.f32	s3, s17
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	eef0 0a48 	vmov.f32	s1, s16
 800f5aa:	eeb0 0a41 	vmov.f32	s0, s2
 800f5ae:	f7ff fe61 	bl	800f274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	ecbd 8b02 	vpop	{d8}
 800f5b8:	bd38      	pop	{r3, r4, r5, pc}

0800f5ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	ed2d 8b02 	vpush	{d8}
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	eeb0 8a40 	vmov.f32	s16, s0
 800f5c6:	eef0 8a60 	vmov.f32	s17, s1
 800f5ca:	f7ff ffc7 	bl	800f55c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f5ce:	b9d0      	cbnz	r0, 800f606 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f5d6:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f5da:	eef0 0a68 	vmov.f32	s1, s17
 800f5de:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f5e2:	eeb0 0a48 	vmov.f32	s0, s16
 800f5e6:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f5ea:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f5ee:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f5f2:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f5f6:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f5fa:	f7ff fdaf 	bl	800f15c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f5fe:	2001      	movs	r0, #1
 800f600:	ecbd 8b02 	vpop	{d8}
 800f604:	bd10      	pop	{r4, pc}
 800f606:	2000      	movs	r0, #0
 800f608:	e7fa      	b.n	800f600 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f60a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f60a:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f60e:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f612:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f616:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f61a:	f7ff be2b 	b.w	800f274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f620 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	b089      	sub	sp, #36	@ 0x24
 800f626:	461c      	mov	r4, r3
 800f628:	4682      	mov	sl, r0
 800f62a:	4615      	mov	r5, r2
 800f62c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f630:	f10d 0820 	add.w	r8, sp, #32
 800f634:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f636:	9304      	str	r3, [sp, #16]
 800f638:	2300      	movs	r3, #0
 800f63a:	9105      	str	r1, [sp, #20]
 800f63c:	9306      	str	r3, [sp, #24]
 800f63e:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f648:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f64c:	9b05      	ldr	r3, [sp, #20]
 800f64e:	429d      	cmp	r5, r3
 800f650:	d96d      	bls.n	800f72e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f652:	3d01      	subs	r5, #1
 800f654:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f658:	2b06      	cmp	r3, #6
 800f65a:	d8f7      	bhi.n	800f64c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f65c:	a201      	add	r2, pc, #4	@ (adr r2, 800f664 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f683 	.word	0x0800f683
 800f668:	0800f64d 	.word	0x0800f64d
 800f66c:	0800f681 	.word	0x0800f681
 800f670:	0800f6a5 	.word	0x0800f6a5
 800f674:	0800f6a5 	.word	0x0800f6a5
 800f678:	0800f6a9 	.word	0x0800f6a9
 800f67c:	0800f6e9 	.word	0x0800f6e9
 800f680:	3c02      	subs	r4, #2
 800f682:	4650      	mov	r0, sl
 800f684:	9400      	str	r4, [sp, #0]
 800f686:	462b      	mov	r3, r5
 800f688:	4642      	mov	r2, r8
 800f68a:	a906      	add	r1, sp, #24
 800f68c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f690:	f7ff fcae 	bl	800eff0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f694:	eddd 0a07 	vldr	s1, [sp, #28]
 800f698:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff fed1 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f6a2:	e7d3      	b.n	800f64c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f6a4:	3c01      	subs	r4, #1
 800f6a6:	e7ec      	b.n	800f682 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f6a8:	f1a4 0b04 	sub.w	fp, r4, #4
 800f6ac:	3c02      	subs	r4, #2
 800f6ae:	4650      	mov	r0, sl
 800f6b0:	462b      	mov	r3, r5
 800f6b2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f6b6:	f8cd b000 	str.w	fp, [sp]
 800f6ba:	4642      	mov	r2, r8
 800f6bc:	a906      	add	r1, sp, #24
 800f6be:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f6c2:	f7ff fc95 	bl	800eff0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f6c6:	eddd 2a07 	vldr	s5, [sp, #28]
 800f6ca:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f6d4:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f6d8:	edd4 0a01 	vldr	s1, [r4, #4]
 800f6dc:	ed94 0a00 	vldr	s0, [r4]
 800f6e0:	f7ff fc1a 	bl	800ef18 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f6e4:	465c      	mov	r4, fp
 800f6e6:	e7b1      	b.n	800f64c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f6e8:	f1a4 0b06 	sub.w	fp, r4, #6
 800f6ec:	3c02      	subs	r4, #2
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f6f6:	f8cd b000 	str.w	fp, [sp]
 800f6fa:	4642      	mov	r2, r8
 800f6fc:	a906      	add	r1, sp, #24
 800f6fe:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f702:	f7ff fc75 	bl	800eff0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f706:	eddd 3a07 	vldr	s7, [sp, #28]
 800f70a:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f70e:	4630      	mov	r0, r6
 800f710:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f714:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f718:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f71c:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f720:	edd4 0a01 	vldr	s1, [r4, #4]
 800f724:	ed94 0a00 	vldr	s0, [r4]
 800f728:	f7ff fc15 	bl	800ef56 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f72c:	e7da      	b.n	800f6e4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f72e:	9b04      	ldr	r3, [sp, #16]
 800f730:	b113      	cbz	r3, 800f738 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ff69 	bl	800f60a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f738:	b009      	add	sp, #36	@ 0x24
 800f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73e:	bf00      	nop

0800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f740:	eef0 7a60 	vmov.f32	s15, s1
 800f744:	6803      	ldr	r3, [r0, #0]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f74c:	ee17 2a90 	vmov	r2, s15
 800f750:	eef0 7a40 	vmov.f32	s15, s0
 800f754:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f758:	ee17 1a90 	vmov	r1, s15
 800f75c:	4718      	bx	r3
	...

0800f760 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f760:	4b04      	ldr	r3, [pc, #16]	@ (800f774 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f762:	b510      	push	{r4, lr}
 800f764:	4604      	mov	r4, r0
 800f766:	f840 3b14 	str.w	r3, [r0], #20
 800f76a:	f001 fd95 	bl	8011298 <_ZN8touchgfx7OutlineD1Ev>
 800f76e:	4620      	mov	r0, r4
 800f770:	bd10      	pop	{r4, pc}
 800f772:	bf00      	nop
 800f774:	08025a04 	.word	0x08025a04

0800f778 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	ed2d 8b04 	vpush	{d8-d9}
 800f780:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f784:	b0b5      	sub	sp, #212	@ 0xd4
 800f786:	4605      	mov	r5, r0
 800f788:	468b      	mov	fp, r1
 800f78a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f78e:	9206      	str	r2, [sp, #24]
 800f790:	461e      	mov	r6, r3
 800f792:	2400      	movs	r4, #0
 800f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f798:	f240 814f 	bls.w	800fa3a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f79c:	23ff      	movs	r3, #255	@ 0xff
 800f79e:	1d02      	adds	r2, r0, #4
 800f7a0:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800fa40 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f7a4:	f04f 0800 	mov.w	r8, #0
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	af08      	add	r7, sp, #32
 800f7ac:	6981      	ldr	r1, [r0, #24]
 800f7ae:	a808      	add	r0, sp, #32
 800f7b0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f7b2:	eef0 9a49 	vmov.f32	s19, s18
 800f7b6:	f011 f831 	bl	802081c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f7ba:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f7be:	4ba1      	ldr	r3, [pc, #644]	@ (800fa44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f7c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f7c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	9308      	str	r3, [sp, #32]
 800f7cc:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f7d0:	edd5 6a08 	vldr	s13, [r5, #32]
 800f7d4:	eeb0 8a49 	vmov.f32	s16, s18
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	9325      	str	r3, [sp, #148]	@ 0x94
 800f7de:	f04f 0300 	mov.w	r3, #0
 800f7e2:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f7e6:	7f6a      	ldrb	r2, [r5, #29]
 800f7e8:	eef0 8a49 	vmov.f32	s17, s18
 800f7ec:	bf48      	it	mi
 800f7ee:	eef1 7a67 	vnegmi.f32	s15, s15
 800f7f2:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f7f6:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f7fa:	46c1      	mov	r9, r8
 800f7fc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f800:	f04f 0a01 	mov.w	sl, #1
 800f804:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f808:	7fab      	ldrb	r3, [r5, #30]
 800f80a:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f80c:	435a      	muls	r2, r3
 800f80e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f812:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f816:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f81a:	1c53      	adds	r3, r2, #1
 800f81c:	942b      	str	r4, [sp, #172]	@ 0xac
 800f81e:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f820:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f824:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f828:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f82a:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f82c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f834:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f836:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f838:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f83a:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f83c:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f83e:	4644      	mov	r4, r8
 800f840:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f844:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f848:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f84c:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f850:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f854:	9b06      	ldr	r3, [sp, #24]
 800f856:	454b      	cmp	r3, r9
 800f858:	f000 80cc 	beq.w	800f9f4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f85c:	f109 0301 	add.w	r3, r9, #1
 800f860:	9305      	str	r3, [sp, #20]
 800f862:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f866:	2b06      	cmp	r3, #6
 800f868:	d839      	bhi.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f86a:	e8df f003 	tbb	[pc, r3]
 800f86e:	3b04      	.short	0x3b04
 800f870:	817c6f60 	.word	0x817c6f60
 800f874:	a0          	.byte	0xa0
 800f875:	00          	.byte	0x00
 800f876:	45c1      	cmp	r9, r8
 800f878:	d92b      	bls.n	800f8d2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f87a:	eef0 0a49 	vmov.f32	s1, s18
 800f87e:	4638      	mov	r0, r7
 800f880:	eeb0 0a69 	vmov.f32	s0, s19
 800f884:	f7ff fdde 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f888:	4638      	mov	r0, r7
 800f88a:	f7ff fe67 	bl	800f55c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f88e:	4681      	mov	r9, r0
 800f890:	b9f8      	cbnz	r0, 800f8d2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f892:	eef0 0a49 	vmov.f32	s1, s18
 800f896:	4638      	mov	r0, r7
 800f898:	eeb0 0a69 	vmov.f32	s0, s19
 800f89c:	f7ff fe8d 	bl	800f5ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	4623      	mov	r3, r4
 800f8a4:	9a05      	ldr	r2, [sp, #20]
 800f8a6:	4641      	mov	r1, r8
 800f8a8:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f8ac:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f8b0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f8b4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f8b8:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f8bc:	e9cd b600 	strd	fp, r6, [sp]
 800f8c0:	f7ff feae 	bl	800f620 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f8c4:	eef0 0a49 	vmov.f32	s1, s18
 800f8c8:	eeb0 0a69 	vmov.f32	s0, s19
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	f7ff fe74 	bl	800f5ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f8d2:	eeb0 8a49 	vmov.f32	s16, s18
 800f8d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f8da:	eef0 8a69 	vmov.f32	s17, s19
 800f8de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f8e2:	e7b7      	b.n	800f854 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f8e4:	45c1      	cmp	r9, r8
 800f8e6:	d90d      	bls.n	800f904 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7ff fe37 	bl	800f55c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f8ee:	b948      	cbnz	r0, 800f904 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f8f0:	4623      	mov	r3, r4
 800f8f2:	464a      	mov	r2, r9
 800f8f4:	4641      	mov	r1, r8
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f8fc:	e9cd b600 	strd	fp, r6, [sp]
 800f900:	f7ff fe8e 	bl	800f620 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f904:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f908:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f90c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f910:	3402      	adds	r4, #2
 800f912:	edd3 8a00 	vldr	s17, [r3]
 800f916:	46c8      	mov	r8, r9
 800f918:	ed93 8a01 	vldr	s16, [r3, #4]
 800f91c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f920:	eef0 9a68 	vmov.f32	s19, s17
 800f924:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f928:	eeb0 9a48 	vmov.f32	s18, s16
 800f92c:	e7d7      	b.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f92e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f932:	4638      	mov	r0, r7
 800f934:	3402      	adds	r4, #2
 800f936:	edd3 8a00 	vldr	s17, [r3]
 800f93a:	ed93 8a01 	vldr	s16, [r3, #4]
 800f93e:	eeb0 0a68 	vmov.f32	s0, s17
 800f942:	eef0 0a48 	vmov.f32	s1, s16
 800f946:	f7ff fd7d 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f94a:	e7c8      	b.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f94c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f950:	edd3 8a00 	vldr	s17, [r3]
 800f954:	eef0 0a48 	vmov.f32	s1, s16
 800f958:	4638      	mov	r0, r7
 800f95a:	eeb0 0a68 	vmov.f32	s0, s17
 800f95e:	3401      	adds	r4, #1
 800f960:	f7ff fd70 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f964:	e7bb      	b.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f966:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f96a:	ed93 8a00 	vldr	s16, [r3]
 800f96e:	e7f1      	b.n	800f954 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f970:	00a3      	lsls	r3, r4, #2
 800f972:	eef0 0a48 	vmov.f32	s1, s16
 800f976:	eeb0 0a68 	vmov.f32	s0, s17
 800f97a:	4638      	mov	r0, r7
 800f97c:	f103 0208 	add.w	r2, r3, #8
 800f980:	f103 090c 	add.w	r9, r3, #12
 800f984:	4433      	add	r3, r6
 800f986:	3404      	adds	r4, #4
 800f988:	4432      	add	r2, r6
 800f98a:	44b1      	add	r9, r6
 800f98c:	edd3 1a01 	vldr	s3, [r3, #4]
 800f990:	ed92 2a00 	vldr	s4, [r2]
 800f994:	edd9 2a00 	vldr	s5, [r9]
 800f998:	ed93 1a00 	vldr	s2, [r3]
 800f99c:	9207      	str	r2, [sp, #28]
 800f99e:	f7ff fabb 	bl	800ef18 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f9a2:	9a07      	ldr	r2, [sp, #28]
 800f9a4:	ed99 8a00 	vldr	s16, [r9]
 800f9a8:	edd2 8a00 	vldr	s17, [r2]
 800f9ac:	e797      	b.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f9ae:	00a3      	lsls	r3, r4, #2
 800f9b0:	eef0 0a48 	vmov.f32	s1, s16
 800f9b4:	eeb0 0a68 	vmov.f32	s0, s17
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f103 0210 	add.w	r2, r3, #16
 800f9be:	f103 0914 	add.w	r9, r3, #20
 800f9c2:	4433      	add	r3, r6
 800f9c4:	3406      	adds	r4, #6
 800f9c6:	4432      	add	r2, r6
 800f9c8:	44b1      	add	r9, r6
 800f9ca:	edd3 2a03 	vldr	s5, [r3, #12]
 800f9ce:	ed92 3a00 	vldr	s6, [r2]
 800f9d2:	edd9 3a00 	vldr	s7, [r9]
 800f9d6:	ed93 2a02 	vldr	s4, [r3, #8]
 800f9da:	edd3 1a01 	vldr	s3, [r3, #4]
 800f9de:	ed93 1a00 	vldr	s2, [r3]
 800f9e2:	9207      	str	r2, [sp, #28]
 800f9e4:	f7ff fab7 	bl	800ef56 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f9e8:	9a07      	ldr	r2, [sp, #28]
 800f9ea:	ed99 8a00 	vldr	s16, [r9]
 800f9ee:	edd2 8a00 	vldr	s17, [r2]
 800f9f2:	e774      	b.n	800f8de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f9f4:	9b06      	ldr	r3, [sp, #24]
 800f9f6:	af08      	add	r7, sp, #32
 800f9f8:	4543      	cmp	r3, r8
 800f9fa:	d90f      	bls.n	800fa1c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f9fc:	4638      	mov	r0, r7
 800f9fe:	f7ff fdad 	bl	800f55c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fa02:	b958      	cbnz	r0, 800fa1c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800fa04:	2301      	movs	r3, #1
 800fa06:	9703      	str	r7, [sp, #12]
 800fa08:	f8cd b000 	str.w	fp, [sp]
 800fa0c:	4641      	mov	r1, r8
 800fa0e:	9a06      	ldr	r2, [sp, #24]
 800fa10:	4628      	mov	r0, r5
 800fa12:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fa16:	4623      	mov	r3, r4
 800fa18:	f7ff fe02 	bl	800f620 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fa1c:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800fa20:	4638      	mov	r0, r7
 800fa22:	f010 ff8f 	bl	8020944 <_ZN8touchgfx6Canvas6renderEh>
 800fa26:	4604      	mov	r4, r0
 800fa28:	4638      	mov	r0, r7
 800fa2a:	f7ff fe99 	bl	800f760 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fa2e:	4620      	mov	r0, r4
 800fa30:	b035      	add	sp, #212	@ 0xd4
 800fa32:	ecbd 8b04 	vpop	{d8-d9}
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3a:	2401      	movs	r4, #1
 800fa3c:	e7f7      	b.n	800fa2e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800fa3e:	bf00      	nop
 800fa40:	00000000 	.word	0x00000000
 800fa44:	0802522c 	.word	0x0802522c

0800fa48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800fa48:	b510      	push	{r4, lr}
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	f7ff fe88 	bl	800f760 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fa50:	21b0      	movs	r1, #176	@ 0xb0
 800fa52:	4620      	mov	r0, r4
 800fa54:	f011 fb43 	bl	80210de <_ZdlPvj>
 800fa58:	4620      	mov	r0, r4
 800fa5a:	bd10      	pop	{r4, pc}

0800fa5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800fa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa60:	4698      	mov	r8, r3
 800fa62:	23ff      	movs	r3, #255	@ 0xff
 800fa64:	4607      	mov	r7, r0
 800fa66:	4689      	mov	r9, r1
 800fa68:	4692      	mov	sl, r2
 800fa6a:	1d02      	adds	r2, r0, #4
 800fa6c:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800fa70:	2400      	movs	r4, #0
 800fa72:	44ca      	add	sl, r9
 800fa74:	ed2d 8b06 	vpush	{d8-d10}
 800fa78:	b0aa      	sub	sp, #168	@ 0xa8
 800fa7a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800fc80 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	eef0 8a48 	vmov.f32	s17, s16
 800fa84:	6981      	ldr	r1, [r0, #24]
 800fa86:	a80d      	add	r0, sp, #52	@ 0x34
 800fa88:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fa8a:	f010 fec7 	bl	802081c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800fa8e:	7f3b      	ldrb	r3, [r7, #28]
 800fa90:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800fc80 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fa94:	4628      	mov	r0, r5
 800fa96:	1e5a      	subs	r2, r3, #1
 800fa98:	eeb0 0a60 	vmov.f32	s0, s1
 800fa9c:	4253      	negs	r3, r2
 800fa9e:	4153      	adcs	r3, r2
 800faa0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800faa4:	f004 ff4f 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800faa8:	eeb0 9a40 	vmov.f32	s18, s0
 800faac:	eef0 9a60 	vmov.f32	s19, s1
 800fab0:	45ca      	cmp	sl, r9
 800fab2:	f000 80cd 	beq.w	800fc50 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800fab6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800faba:	2b06      	cmp	r3, #6
 800fabc:	d8f8      	bhi.n	800fab0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fabe:	e8df f003 	tbb	[pc, r3]
 800fac2:	0804      	.short	0x0804
 800fac4:	58533f2a 	.word	0x58533f2a
 800fac8:	8a          	.byte	0x8a
 800fac9:	00          	.byte	0x00
 800faca:	a80d      	add	r0, sp, #52	@ 0x34
 800facc:	f010 ff18 	bl	8020900 <_ZN8touchgfx6Canvas5closeEv>
 800fad0:	e7ee      	b.n	800fab0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fad2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fad6:	4628      	mov	r0, r5
 800fad8:	ed93 8a01 	vldr	s16, [r3, #4]
 800fadc:	edd3 8a00 	vldr	s17, [r3]
 800fae0:	eef0 0a48 	vmov.f32	s1, s16
 800fae4:	eeb0 0a68 	vmov.f32	s0, s17
 800fae8:	f004 ff2d 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800faec:	a80d      	add	r0, sp, #52	@ 0x34
 800faee:	eef0 7a60 	vmov.f32	s15, s1
 800faf2:	eeb0 9a40 	vmov.f32	s18, s0
 800faf6:	eef0 9a60 	vmov.f32	s19, s1
 800fafa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fafe:	ee17 2a90 	vmov	r2, s15
 800fb02:	eef0 7a40 	vmov.f32	s15, s0
 800fb06:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fb0a:	ee17 1a90 	vmov	r1, s15
 800fb0e:	f010 ffd1 	bl	8020ab4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800fb12:	3402      	adds	r4, #2
 800fb14:	e7cc      	b.n	800fab0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb16:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	edd3 8a00 	vldr	s17, [r3]
 800fb20:	ed93 8a01 	vldr	s16, [r3, #4]
 800fb24:	eeb0 0a68 	vmov.f32	s0, s17
 800fb28:	eef0 0a48 	vmov.f32	s1, s16
 800fb2c:	f004 ff0b 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb30:	a80d      	add	r0, sp, #52	@ 0x34
 800fb32:	eeb0 9a40 	vmov.f32	s18, s0
 800fb36:	eef0 9a60 	vmov.f32	s19, s1
 800fb3a:	f7ff fe01 	bl	800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fb3e:	e7e8      	b.n	800fb12 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800fb40:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb44:	edd3 8a00 	vldr	s17, [r3]
 800fb48:	eef0 0a48 	vmov.f32	s1, s16
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	eeb0 0a68 	vmov.f32	s0, s17
 800fb52:	3401      	adds	r4, #1
 800fb54:	f004 fef7 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb58:	a80d      	add	r0, sp, #52	@ 0x34
 800fb5a:	eef0 9a60 	vmov.f32	s19, s1
 800fb5e:	eeb0 9a40 	vmov.f32	s18, s0
 800fb62:	f7ff fded 	bl	800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fb66:	e7a3      	b.n	800fab0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fb68:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fb6c:	ed93 8a00 	vldr	s16, [r3]
 800fb70:	e7ea      	b.n	800fb48 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800fb72:	1ca3      	adds	r3, r4, #2
 800fb74:	4628      	mov	r0, r5
 800fb76:	3404      	adds	r4, #4
 800fb78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800fb7c:	ed53 0a01 	vldr	s1, [r3, #-4]
 800fb80:	ed13 0a02 	vldr	s0, [r3, #-8]
 800fb84:	edd3 8a00 	vldr	s17, [r3]
 800fb88:	ed93 8a01 	vldr	s16, [r3, #4]
 800fb8c:	f004 fedb 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fb90:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fb94:	eeb0 0a68 	vmov.f32	s0, s17
 800fb98:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fb9c:	eef0 0a48 	vmov.f32	s1, s16
 800fba0:	4628      	mov	r0, r5
 800fba2:	f004 fed0 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fba6:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800fbaa:	eef0 2a60 	vmov.f32	s5, s1
 800fbae:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800fbb2:	eeb0 2a40 	vmov.f32	s4, s0
 800fbb6:	a80d      	add	r0, sp, #52	@ 0x34
 800fbb8:	eeb0 aa40 	vmov.f32	s20, s0
 800fbbc:	eef0 aa60 	vmov.f32	s21, s1
 800fbc0:	eeb0 0a49 	vmov.f32	s0, s18
 800fbc4:	eef0 0a69 	vmov.f32	s1, s19
 800fbc8:	f7ff f9a6 	bl	800ef18 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fbcc:	eef0 9a6a 	vmov.f32	s19, s21
 800fbd0:	eeb0 9a4a 	vmov.f32	s18, s20
 800fbd4:	e76c      	b.n	800fab0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fbd6:	1d26      	adds	r6, r4, #4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	3406      	adds	r4, #6
 800fbdc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fbe0:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fbe4:	ed16 0a04 	vldr	s0, [r6, #-16]
 800fbe8:	edd6 8a00 	vldr	s17, [r6]
 800fbec:	ed96 8a01 	vldr	s16, [r6, #4]
 800fbf0:	f004 fea9 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fbf4:	ed8d 0a07 	vstr	s0, [sp, #28]
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	ed16 0a02 	vldr	s0, [r6, #-8]
 800fbfe:	edcd 0a08 	vstr	s1, [sp, #32]
 800fc02:	ed56 0a01 	vldr	s1, [r6, #-4]
 800fc06:	f004 fe9e 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc0a:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800fc0e:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800fc12:	eeb0 0a68 	vmov.f32	s0, s17
 800fc16:	eef0 0a48 	vmov.f32	s1, s16
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f004 fe93 	bl	8014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fc20:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800fc24:	eeb0 3a40 	vmov.f32	s6, s0
 800fc28:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800fc2c:	eef0 3a60 	vmov.f32	s7, s1
 800fc30:	eddd 1a08 	vldr	s3, [sp, #32]
 800fc34:	eeb0 aa40 	vmov.f32	s20, s0
 800fc38:	ed9d 1a07 	vldr	s2, [sp, #28]
 800fc3c:	eef0 aa60 	vmov.f32	s21, s1
 800fc40:	a80d      	add	r0, sp, #52	@ 0x34
 800fc42:	eef0 0a69 	vmov.f32	s1, s19
 800fc46:	eeb0 0a49 	vmov.f32	s0, s18
 800fc4a:	f7ff f984 	bl	800ef56 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800fc4e:	e7bd      	b.n	800fbcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800fc50:	7f7b      	ldrb	r3, [r7, #29]
 800fc52:	a80d      	add	r0, sp, #52	@ 0x34
 800fc54:	7fb9      	ldrb	r1, [r7, #30]
 800fc56:	4359      	muls	r1, r3
 800fc58:	1c4b      	adds	r3, r1, #1
 800fc5a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800fc5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fc62:	f010 fe6f 	bl	8020944 <_ZN8touchgfx6Canvas6renderEh>
 800fc66:	4b07      	ldr	r3, [pc, #28]	@ (800fc84 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800fc68:	4604      	mov	r4, r0
 800fc6a:	a812      	add	r0, sp, #72	@ 0x48
 800fc6c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc6e:	f001 fb13 	bl	8011298 <_ZN8touchgfx7OutlineD1Ev>
 800fc72:	4620      	mov	r0, r4
 800fc74:	b02a      	add	sp, #168	@ 0xa8
 800fc76:	ecbd 8b06 	vpop	{d8-d10}
 800fc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc7e:	bf00      	nop
 800fc80:	00000000 	.word	0x00000000
 800fc84:	08025a04 	.word	0x08025a04

0800fc88 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800fc88:	b410      	push	{r4}
 800fc8a:	7f04      	ldrb	r4, [r0, #28]
 800fc8c:	b11c      	cbz	r4, 800fc96 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800fc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc92:	f7ff bee3 	b.w	800fa5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800fc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc9a:	f7ff bd6d 	b.w	800f778 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0800fc9e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800fc9e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fca2:	4691      	mov	r9, r2
 800fca4:	4602      	mov	r2, r0
 800fca6:	4606      	mov	r6, r0
 800fca8:	4688      	mov	r8, r1
 800fcaa:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800fcae:	469a      	mov	sl, r3
 800fcb0:	ab02      	add	r3, sp, #8
 800fcb2:	af02      	add	r7, sp, #8
 800fcb4:	6851      	ldr	r1, [r2, #4]
 800fcb6:	c303      	stmia	r3!, {r0, r1}
 800fcb8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	dd2f      	ble.n	800fd20 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fcc0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800fcc4:	2c00      	cmp	r4, #0
 800fcc6:	dd2b      	ble.n	800fd20 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fcc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fccc:	441c      	add	r4, r3
 800fcce:	b2a4      	uxth	r4, r4
 800fcd0:	b225      	sxth	r5, r4
 800fcd2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800fcd6:	42ab      	cmp	r3, r5
 800fcd8:	da22      	bge.n	800fd20 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800fcda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcdc:	464a      	mov	r2, r9
 800fcde:	9701      	str	r7, [sp, #4]
 800fce0:	4641      	mov	r1, r8
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	4630      	mov	r0, r6
 800fce6:	4653      	mov	r3, sl
 800fce8:	f7ff ffce 	bl	800fc88 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800fcec:	b940      	cbnz	r0, 800fd00 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800fcee:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d004      	beq.n	800fd00 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	105b      	asrs	r3, r3, #1
 800fcfa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fcfe:	e7ec      	b.n	800fcda <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 800fd00:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800fd04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fd08:	4413      	add	r3, r2
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	441a      	add	r2, r3
 800fd0e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800fd12:	b212      	sxth	r2, r2
 800fd14:	4295      	cmp	r5, r2
 800fd16:	dadc      	bge.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800fd18:	1ae3      	subs	r3, r4, r3
 800fd1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd1e:	e7d8      	b.n	800fcd2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800fd20:	b004      	add	sp, #16
 800fd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fd26 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fd26:	0c0b      	lsrs	r3, r1, #16
 800fd28:	60c1      	str	r1, [r0, #12]
 800fd2a:	7481      	strb	r1, [r0, #18]
 800fd2c:	7403      	strb	r3, [r0, #16]
 800fd2e:	0a0b      	lsrs	r3, r1, #8
 800fd30:	7443      	strb	r3, [r0, #17]
 800fd32:	4770      	bx	lr

0800fd34 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fd34:	f1a0 0008 	sub.w	r0, r0, #8
 800fd38:	e7f5      	b.n	800fd26 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0800fd3c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800fd3c:	b508      	push	{r3, lr}
 800fd3e:	4b05      	ldr	r3, [pc, #20]	@ (800fd54 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	6803      	ldr	r3, [r0, #0]
 800fd44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd48:	4798      	blx	r3
 800fd4a:	1e43      	subs	r3, r0, #1
 800fd4c:	4258      	negs	r0, r3
 800fd4e:	4158      	adcs	r0, r3
 800fd50:	bd08      	pop	{r3, pc}
 800fd52:	bf00      	nop
 800fd54:	240253d4 	.word	0x240253d4

0800fd58 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800fd58:	4770      	bx	lr

0800fd5a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800fd5a:	3808      	subs	r0, #8
 800fd5c:	4770      	bx	lr

0800fd5e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800fd5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fd62:	b410      	push	{r4}
 800fd64:	188c      	adds	r4, r1, r2
 800fd66:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fd6a:	68c2      	ldr	r2, [r0, #12]
 800fd6c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800fd70:	4620      	mov	r0, r4
 800fd72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd76:	f7f3 b899 	b.w	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800fd7a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800fd7a:	f7f3 b873 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

0800fd7e <_ZN8touchgfx13PainterRGB888D0Ev>:
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	4604      	mov	r4, r0
 800fd82:	2114      	movs	r1, #20
 800fd84:	f011 f9ab 	bl	80210de <_ZdlPvj>
 800fd88:	4620      	mov	r0, r4
 800fd8a:	bd10      	pop	{r4, pc}

0800fd8c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800fd8c:	f1a0 0008 	sub.w	r0, r0, #8
 800fd90:	e7f5      	b.n	800fd7e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800fd94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800fd94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd9c:	4411      	add	r1, r2
 800fd9e:	7c42      	ldrb	r2, [r0, #17]
 800fda0:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800fda4:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800fda8:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800fdac:	2a00      	cmp	r2, #0
 800fdae:	f000 8084 	beq.w	800feba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800fdb2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fdb6:	ed90 7a08 	vldr	s14, [r0, #32]
 800fdba:	42a2      	cmp	r2, r4
 800fdbc:	68c3      	ldr	r3, [r0, #12]
 800fdbe:	db20      	blt.n	800fe02 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800fdc0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fdc4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdcc:	bfc8      	it	gt
 800fdce:	2200      	movgt	r2, #0
 800fdd0:	589a      	ldr	r2, [r3, r2]
 800fdd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800fdd6:	7c03      	ldrb	r3, [r0, #16]
 800fdd8:	fa5f fc82 	uxtb.w	ip, r2
 800fddc:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800fde0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800fde4:	440e      	add	r6, r1
 800fde6:	b36b      	cbz	r3, 800fe44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fde8:	2dff      	cmp	r5, #255	@ 0xff
 800fdea:	d12b      	bne.n	800fe44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fdec:	42b1      	cmp	r1, r6
 800fdee:	f080 8204 	bcs.w	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fdf2:	f881 c000 	strb.w	ip, [r1]
 800fdf6:	3103      	adds	r1, #3
 800fdf8:	f801 7c02 	strb.w	r7, [r1, #-2]
 800fdfc:	f801 4c01 	strb.w	r4, [r1, #-1]
 800fe00:	e7f4      	b.n	800fdec <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800fe02:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800fe06:	42a7      	cmp	r7, r4
 800fe08:	dc08      	bgt.n	800fe1c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800fe0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe0e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fe12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe16:	bfd8      	it	le
 800fe18:	2200      	movle	r2, #0
 800fe1a:	e7d9      	b.n	800fdd0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fe1c:	1aa2      	subs	r2, r4, r2
 800fe1e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fe22:	ee07 2a90 	vmov	s15, r2
 800fe26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe36:	ee17 2a90 	vmov	r2, s15
 800fe3a:	bfd8      	it	le
 800fe3c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800fe40:	0092      	lsls	r2, r2, #2
 800fe42:	e7c5      	b.n	800fdd0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fe44:	0e12      	lsrs	r2, r2, #24
 800fe46:	4355      	muls	r5, r2
 800fe48:	1c6a      	adds	r2, r5, #1
 800fe4a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800fe4e:	122d      	asrs	r5, r5, #8
 800fe50:	43e8      	mvns	r0, r5
 800fe52:	b2ad      	uxth	r5, r5
 800fe54:	fb1c fc05 	smulbb	ip, ip, r5
 800fe58:	b2c0      	uxtb	r0, r0
 800fe5a:	fb17 f705 	smulbb	r7, r7, r5
 800fe5e:	fb14 f505 	smulbb	r5, r4, r5
 800fe62:	fa1f fc8c 	uxth.w	ip, ip
 800fe66:	b2bf      	uxth	r7, r7
 800fe68:	b2ad      	uxth	r5, r5
 800fe6a:	428e      	cmp	r6, r1
 800fe6c:	f101 0303 	add.w	r3, r1, #3
 800fe70:	f240 81c3 	bls.w	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fe74:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800fe78:	fb02 c200 	mla	r2, r2, r0, ip
 800fe7c:	b292      	uxth	r2, r2
 800fe7e:	1c51      	adds	r1, r2, #1
 800fe80:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fe84:	1212      	asrs	r2, r2, #8
 800fe86:	f803 2c03 	strb.w	r2, [r3, #-3]
 800fe8a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800fe8e:	fb02 7200 	mla	r2, r2, r0, r7
 800fe92:	b292      	uxth	r2, r2
 800fe94:	1c51      	adds	r1, r2, #1
 800fe96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fe9a:	1212      	asrs	r2, r2, #8
 800fe9c:	f803 2c02 	strb.w	r2, [r3, #-2]
 800fea0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800fea4:	fb02 5200 	mla	r2, r2, r0, r5
 800fea8:	b292      	uxth	r2, r2
 800feaa:	1c51      	adds	r1, r2, #1
 800feac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800feb0:	4619      	mov	r1, r3
 800feb2:	1212      	asrs	r2, r2, #8
 800feb4:	f803 2c01 	strb.w	r2, [r3, #-1]
 800feb8:	e7d7      	b.n	800fe6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800feba:	7c82      	ldrb	r2, [r0, #18]
 800febc:	2a00      	cmp	r2, #0
 800febe:	d047      	beq.n	800ff50 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800fec0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fec4:	ee07 2a10 	vmov	s14, r2
 800fec8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fecc:	ee07 3a90 	vmov	s15, r3
 800fed0:	461a      	mov	r2, r3
 800fed2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fed6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fede:	f200 808e 	bhi.w	800fffe <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800fee2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fee6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800feea:	68c7      	ldr	r7, [r0, #12]
 800feec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fef4:	ee06 6a90 	vmov	s13, r6
 800fef8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fefc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	bf4a      	itet	mi
 800ff06:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800ff0a:	4634      	movpl	r4, r6
 800ff0c:	ee17 4a90 	vmovmi	r4, s15
 800ff10:	edd0 7a08 	vldr	s15, [r0, #32]
 800ff14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff18:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800ff1c:	448e      	add	lr, r1
 800ff1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff22:	bfc8      	it	gt
 800ff24:	2200      	movgt	r2, #0
 800ff26:	58bf      	ldr	r7, [r7, r2]
 800ff28:	7c02      	ldrb	r2, [r0, #16]
 800ff2a:	fa5f f987 	uxtb.w	r9, r7
 800ff2e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800ff32:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800ff36:	b31a      	cbz	r2, 800ff80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800ff38:	2dff      	cmp	r5, #255	@ 0xff
 800ff3a:	d121      	bne.n	800ff80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800ff3c:	4571      	cmp	r1, lr
 800ff3e:	d25d      	bcs.n	800fffc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800ff40:	f881 9000 	strb.w	r9, [r1]
 800ff44:	3103      	adds	r1, #3
 800ff46:	f801 8c02 	strb.w	r8, [r1, #-2]
 800ff4a:	f801 cc01 	strb.w	ip, [r1, #-1]
 800ff4e:	e7f5      	b.n	800ff3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800ff50:	ee07 4a90 	vmov	s15, r4
 800ff54:	ed90 7a06 	vldr	s14, [r0, #24]
 800ff58:	edd0 6a05 	vldr	s13, [r0, #20]
 800ff5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff68:	edd0 7a08 	vldr	s15, [r0, #32]
 800ff6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff74:	bf44      	itt	mi
 800ff76:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800ff7a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800ff7e:	e7a5      	b.n	800fecc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800ff80:	0e3f      	lsrs	r7, r7, #24
 800ff82:	436f      	muls	r7, r5
 800ff84:	1c7a      	adds	r2, r7, #1
 800ff86:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800ff8a:	1212      	asrs	r2, r2, #8
 800ff8c:	ea6f 0a02 	mvn.w	sl, r2
 800ff90:	b292      	uxth	r2, r2
 800ff92:	fb19 f902 	smulbb	r9, r9, r2
 800ff96:	fa5f fa8a 	uxtb.w	sl, sl
 800ff9a:	fb18 f802 	smulbb	r8, r8, r2
 800ff9e:	fb1c fc02 	smulbb	ip, ip, r2
 800ffa2:	fa1f f989 	uxth.w	r9, r9
 800ffa6:	fa1f f888 	uxth.w	r8, r8
 800ffaa:	fa1f fc8c 	uxth.w	ip, ip
 800ffae:	458e      	cmp	lr, r1
 800ffb0:	f101 0203 	add.w	r2, r1, #3
 800ffb4:	d922      	bls.n	800fffc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800ffb6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800ffba:	fb01 910a 	mla	r1, r1, sl, r9
 800ffbe:	b289      	uxth	r1, r1
 800ffc0:	1c4f      	adds	r7, r1, #1
 800ffc2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800ffc6:	1209      	asrs	r1, r1, #8
 800ffc8:	f802 1c03 	strb.w	r1, [r2, #-3]
 800ffcc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800ffd0:	fb01 810a 	mla	r1, r1, sl, r8
 800ffd4:	b289      	uxth	r1, r1
 800ffd6:	1c4f      	adds	r7, r1, #1
 800ffd8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800ffdc:	1209      	asrs	r1, r1, #8
 800ffde:	f802 1c02 	strb.w	r1, [r2, #-2]
 800ffe2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ffe6:	fb01 c10a 	mla	r1, r1, sl, ip
 800ffea:	b289      	uxth	r1, r1
 800ffec:	1c4f      	adds	r7, r1, #1
 800ffee:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fff2:	1209      	asrs	r1, r1, #8
 800fff4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fff8:	4611      	mov	r1, r2
 800fffa:	e7d8      	b.n	800ffae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 800fffc:	191a      	adds	r2, r3, r4
 800fffe:	4433      	add	r3, r6
 8010000:	b21b      	sxth	r3, r3
 8010002:	4293      	cmp	r3, r2
 8010004:	f340 80f9 	ble.w	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010008:	edd0 7a07 	vldr	s15, [r0, #28]
 801000c:	ee06 2a90 	vmov	s13, r2
 8010010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010014:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010018:	eef4 7ae6 	vcmpe.f32	s15, s13
 801001c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010020:	f340 80b0 	ble.w	8010184 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8010024:	ee06 3a10 	vmov	s12, r3
 8010028:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801002c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8010200 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8010030:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010034:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010038:	ed90 6a08 	vldr	s12, [r0, #32]
 801003c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010040:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8010044:	bfd6      	itet	le
 8010046:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801004a:	469c      	movgt	ip, r3
 801004c:	ee17 ca90 	vmovle	ip, s15
 8010050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010054:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8010204 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8010058:	ebac 0202 	sub.w	r2, ip, r2
 801005c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8010060:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010064:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010068:	188c      	adds	r4, r1, r2
 801006a:	7c02      	ldrb	r2, [r0, #16]
 801006c:	b1d2      	cbz	r2, 80100a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801006e:	2dff      	cmp	r5, #255	@ 0xff
 8010070:	d118      	bne.n	80100a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8010072:	42a1      	cmp	r1, r4
 8010074:	d261      	bcs.n	801013a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8010076:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801007a:	68c6      	ldr	r6, [r0, #12]
 801007c:	3103      	adds	r1, #3
 801007e:	ee17 7a10 	vmov	r7, s14
 8010082:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8010086:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801008a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801008e:	7856      	ldrb	r6, [r2, #1]
 8010090:	f801 6c02 	strb.w	r6, [r1, #-2]
 8010094:	7892      	ldrb	r2, [r2, #2]
 8010096:	f801 2c01 	strb.w	r2, [r1, #-1]
 801009a:	ed90 7a08 	vldr	s14, [r0, #32]
 801009e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100a2:	e7e6      	b.n	8010072 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 80100a4:	68c2      	ldr	r2, [r0, #12]
 80100a6:	428c      	cmp	r4, r1
 80100a8:	f101 0e03 	add.w	lr, r1, #3
 80100ac:	d945      	bls.n	801013a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80100ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80100b2:	ee17 9a10 	vmov	r9, s14
 80100b6:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80100ba:	f898 7003 	ldrb.w	r7, [r8, #3]
 80100be:	fb07 f605 	mul.w	r6, r7, r5
 80100c2:	1c77      	adds	r7, r6, #1
 80100c4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80100c8:	123f      	asrs	r7, r7, #8
 80100ca:	b2b9      	uxth	r1, r7
 80100cc:	43ff      	mvns	r7, r7
 80100ce:	b2fe      	uxtb	r6, r7
 80100d0:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80100d4:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80100d8:	fb19 f906 	smulbb	r9, r9, r6
 80100dc:	fb07 9701 	mla	r7, r7, r1, r9
 80100e0:	b2bf      	uxth	r7, r7
 80100e2:	f107 0901 	add.w	r9, r7, #1
 80100e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80100ea:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80100ee:	fb19 f906 	smulbb	r9, r9, r6
 80100f2:	123f      	asrs	r7, r7, #8
 80100f4:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80100f8:	f898 7001 	ldrb.w	r7, [r8, #1]
 80100fc:	fb07 9701 	mla	r7, r7, r1, r9
 8010100:	b2bf      	uxth	r7, r7
 8010102:	f107 0901 	add.w	r9, r7, #1
 8010106:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801010a:	123f      	asrs	r7, r7, #8
 801010c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8010110:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8010114:	f898 8002 	ldrb.w	r8, [r8, #2]
 8010118:	fb17 f606 	smulbb	r6, r7, r6
 801011c:	fb08 6601 	mla	r6, r8, r1, r6
 8010120:	b2b6      	uxth	r6, r6
 8010122:	1c71      	adds	r1, r6, #1
 8010124:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8010128:	4671      	mov	r1, lr
 801012a:	1236      	asrs	r6, r6, #8
 801012c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8010130:	ed90 7a08 	vldr	s14, [r0, #32]
 8010134:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010138:	e7b5      	b.n	80100a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801013a:	4563      	cmp	r3, ip
 801013c:	dd5d      	ble.n	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801013e:	edd0 7a08 	vldr	s15, [r0, #32]
 8010142:	eba3 030c 	sub.w	r3, r3, ip
 8010146:	68c4      	ldr	r4, [r0, #12]
 8010148:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801014c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010154:	7c00      	ldrb	r0, [r0, #16]
 8010156:	440b      	add	r3, r1
 8010158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015c:	bfd8      	it	le
 801015e:	2200      	movle	r2, #0
 8010160:	58a2      	ldr	r2, [r4, r2]
 8010162:	b2d4      	uxtb	r4, r2
 8010164:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8010168:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801016c:	b160      	cbz	r0, 8010188 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801016e:	2dff      	cmp	r5, #255	@ 0xff
 8010170:	d10a      	bne.n	8010188 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8010172:	4299      	cmp	r1, r3
 8010174:	d241      	bcs.n	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010176:	700c      	strb	r4, [r1, #0]
 8010178:	3103      	adds	r1, #3
 801017a:	f801 cc02 	strb.w	ip, [r1, #-2]
 801017e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8010182:	e7f6      	b.n	8010172 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8010184:	4694      	mov	ip, r2
 8010186:	e7da      	b.n	801013e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8010188:	0e12      	lsrs	r2, r2, #24
 801018a:	436a      	muls	r2, r5
 801018c:	1c55      	adds	r5, r2, #1
 801018e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8010192:	122d      	asrs	r5, r5, #8
 8010194:	43ee      	mvns	r6, r5
 8010196:	b2ad      	uxth	r5, r5
 8010198:	fb14 f405 	smulbb	r4, r4, r5
 801019c:	b2f6      	uxtb	r6, r6
 801019e:	fb1c f005 	smulbb	r0, ip, r5
 80101a2:	fb17 f505 	smulbb	r5, r7, r5
 80101a6:	b2a4      	uxth	r4, r4
 80101a8:	b280      	uxth	r0, r0
 80101aa:	b2ad      	uxth	r5, r5
 80101ac:	428b      	cmp	r3, r1
 80101ae:	f101 0203 	add.w	r2, r1, #3
 80101b2:	d922      	bls.n	80101fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80101b4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80101b8:	fb01 4106 	mla	r1, r1, r6, r4
 80101bc:	b289      	uxth	r1, r1
 80101be:	1c4f      	adds	r7, r1, #1
 80101c0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80101c4:	1209      	asrs	r1, r1, #8
 80101c6:	f802 1c03 	strb.w	r1, [r2, #-3]
 80101ca:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80101ce:	fb01 0106 	mla	r1, r1, r6, r0
 80101d2:	b289      	uxth	r1, r1
 80101d4:	1c4f      	adds	r7, r1, #1
 80101d6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80101da:	1209      	asrs	r1, r1, #8
 80101dc:	f802 1c02 	strb.w	r1, [r2, #-2]
 80101e0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80101e4:	fb01 5106 	mla	r1, r1, r6, r5
 80101e8:	b289      	uxth	r1, r1
 80101ea:	1c4f      	adds	r7, r1, #1
 80101ec:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80101f0:	1209      	asrs	r1, r1, #8
 80101f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80101f6:	4611      	mov	r1, r2
 80101f8:	e7d8      	b.n	80101ac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	bf00      	nop
 8010200:	447ffffe 	.word	0x447ffffe
 8010204:	00000000 	.word	0x00000000

08010208 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8010208:	4770      	bx	lr

0801020a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801020a:	4770      	bx	lr

0801020c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801020c:	b510      	push	{r4, lr}
 801020e:	4604      	mov	r4, r0
 8010210:	2124      	movs	r1, #36	@ 0x24
 8010212:	f010 ff64 	bl	80210de <_ZdlPvj>
 8010216:	4620      	mov	r0, r4
 8010218:	bd10      	pop	{r4, pc}
	...

0801021c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801021c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801021e:	6803      	ldr	r3, [r0, #0]
 8010220:	460d      	mov	r5, r1
 8010222:	4604      	mov	r4, r0
 8010224:	4601      	mov	r1, r0
 8010226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010228:	a802      	add	r0, sp, #8
 801022a:	4798      	blx	r3
 801022c:	6828      	ldr	r0, [r5, #0]
 801022e:	6869      	ldr	r1, [r5, #4]
 8010230:	466b      	mov	r3, sp
 8010232:	c303      	stmia	r3!, {r0, r1}
 8010234:	4668      	mov	r0, sp
 8010236:	4619      	mov	r1, r3
 8010238:	f7fd fcfc 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 801023c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801023e:	b188      	cbz	r0, 8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010240:	6803      	ldr	r3, [r0, #0]
 8010242:	1d21      	adds	r1, r4, #4
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	4798      	blx	r3
 8010248:	b160      	cbz	r0, 8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801024a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	dd08      	ble.n	8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010252:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8010256:	2d00      	cmp	r5, #0
 8010258:	dd04      	ble.n	8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801025a:	4a2b      	ldr	r2, [pc, #172]	@ (8010308 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801025c:	7812      	ldrb	r2, [r2, #0]
 801025e:	b11a      	cbz	r2, 8010268 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8010260:	2a01      	cmp	r2, #1
 8010262:	d029      	beq.n	80102b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8010264:	b004      	add	sp, #16
 8010266:	bd70      	pop	{r4, r5, r6, pc}
 8010268:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801026c:	441d      	add	r5, r3
 801026e:	b2ad      	uxth	r5, r5
 8010270:	b22e      	sxth	r6, r5
 8010272:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8010276:	42b3      	cmp	r3, r6
 8010278:	daf4      	bge.n	8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	4669      	mov	r1, sp
 801027e:	4620      	mov	r0, r4
 8010280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010282:	4798      	blx	r3
 8010284:	b940      	cbnz	r0, 8010298 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8010286:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d004      	beq.n	8010298 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801028e:	3301      	adds	r3, #1
 8010290:	105b      	asrs	r3, r3, #1
 8010292:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010296:	e7f0      	b.n	801027a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8010298:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801029c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80102a0:	4413      	add	r3, r2
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	441a      	add	r2, r3
 80102a6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80102aa:	b212      	sxth	r2, r2
 80102ac:	4296      	cmp	r6, r2
 80102ae:	dae0      	bge.n	8010272 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80102b0:	1aeb      	subs	r3, r5, r3
 80102b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80102b6:	e7dc      	b.n	8010272 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80102b8:	f8bd 5000 	ldrh.w	r5, [sp]
 80102bc:	441d      	add	r5, r3
 80102be:	b2ad      	uxth	r5, r5
 80102c0:	b22e      	sxth	r6, r5
 80102c2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80102c6:	42b3      	cmp	r3, r6
 80102c8:	dacc      	bge.n	8010264 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	4669      	mov	r1, sp
 80102ce:	4620      	mov	r0, r4
 80102d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d2:	4798      	blx	r3
 80102d4:	b940      	cbnz	r0, 80102e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80102d6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d004      	beq.n	80102e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80102de:	3301      	adds	r3, #1
 80102e0:	105b      	asrs	r3, r3, #1
 80102e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80102e6:	e7f0      	b.n	80102ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80102e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80102ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80102f0:	4413      	add	r3, r2
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	441a      	add	r2, r3
 80102f6:	f8ad 3000 	strh.w	r3, [sp]
 80102fa:	b212      	sxth	r2, r2
 80102fc:	4296      	cmp	r6, r2
 80102fe:	dae0      	bge.n	80102c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010300:	1aeb      	subs	r3, r5, r3
 8010302:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010306:	e7dc      	b.n	80102c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010308:	240253cc 	.word	0x240253cc

0801030c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801030c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801030e:	6803      	ldr	r3, [r0, #0]
 8010310:	4604      	mov	r4, r0
 8010312:	4601      	mov	r1, r0
 8010314:	4668      	mov	r0, sp
 8010316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010318:	4798      	blx	r3
 801031a:	2100      	movs	r1, #0
 801031c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010320:	4668      	mov	r0, sp
 8010322:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010326:	9102      	str	r1, [sp, #8]
 8010328:	a902      	add	r1, sp, #8
 801032a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801032e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010332:	f7fd fc7f 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	4669      	mov	r1, sp
 801033a:	4620      	mov	r0, r4
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	4798      	blx	r3
 8010340:	b004      	add	sp, #16
 8010342:	bd10      	pop	{r4, pc}

08010344 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8010344:	2101      	movs	r1, #1
 8010346:	2200      	movs	r2, #0
 8010348:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801034c:	490a      	ldr	r1, [pc, #40]	@ (8010378 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801034e:	8082      	strh	r2, [r0, #4]
 8010350:	6001      	str	r1, [r0, #0]
 8010352:	21ff      	movs	r1, #255	@ 0xff
 8010354:	80c2      	strh	r2, [r0, #6]
 8010356:	8102      	strh	r2, [r0, #8]
 8010358:	8142      	strh	r2, [r0, #10]
 801035a:	8182      	strh	r2, [r0, #12]
 801035c:	81c2      	strh	r2, [r0, #14]
 801035e:	8202      	strh	r2, [r0, #16]
 8010360:	8242      	strh	r2, [r0, #18]
 8010362:	61c2      	str	r2, [r0, #28]
 8010364:	8402      	strh	r2, [r0, #32]
 8010366:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010368:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801036c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8010370:	6282      	str	r2, [r0, #40]	@ 0x28
 8010372:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010376:	4770      	bx	lr
 8010378:	080252e4 	.word	0x080252e4

0801037c <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 801037c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8010380:	4770      	bx	lr

08010382 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8010382:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8010386:	4770      	bx	lr

08010388 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8010388:	6802      	ldr	r2, [r0, #0]
 801038a:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 801038e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8010390:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8010394:	4710      	bx	r2

08010396 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8010396:	6802      	ldr	r2, [r0, #0]
 8010398:	eef0 0a40 	vmov.f32	s1, s0
 801039c:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 80103a0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80103a2:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80103a6:	4710      	bx	r2

080103a8 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 80103a8:	6802      	ldr	r2, [r0, #0]
 80103aa:	eeb0 1a40 	vmov.f32	s2, s0
 80103ae:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 80103b2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80103b4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80103b8:	4710      	bx	r2

080103ba <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 80103ba:	6802      	ldr	r2, [r0, #0]
 80103bc:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 80103c0:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80103c2:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 80103c6:	4710      	bx	r2

080103c8 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 80103c8:	6802      	ldr	r2, [r0, #0]
 80103ca:	eef0 0a40 	vmov.f32	s1, s0
 80103ce:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 80103d2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80103d4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80103d8:	4710      	bx	r2

080103da <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 80103da:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80103de:	4770      	bx	lr

080103e0 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 80103e0:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 80103e4:	4770      	bx	lr

080103e6 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 80103e6:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 80103ea:	4770      	bx	lr

080103ec <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80103ec:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 80103f0:	4770      	bx	lr

080103f2 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80103f2:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 80103f6:	4770      	bx	lr

080103f8 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 80103f8:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 80103fc:	4770      	bx	lr

080103fe <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 80103fe:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8010402:	4770      	bx	lr

08010404 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8010404:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8010408:	4770      	bx	lr

0801040a <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 801040a:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 801040e:	4770      	bx	lr

08010410 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8010410:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8010414:	4770      	bx	lr

08010416 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8010416:	ee07 2a90 	vmov	s15, r2
 801041a:	6803      	ldr	r3, [r0, #0]
 801041c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010420:	ee07 1a90 	vmov	s15, r1
 8010424:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010428:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801042c:	4718      	bx	r3

0801042e <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801042e:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8010432:	4770      	bx	lr

08010434 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8010434:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8010438:	4770      	bx	lr

0801043a <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 801043a:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 801043e:	4770      	bx	lr

08010440 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8010440:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8010444:	4770      	bx	lr

08010446 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8010446:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 801044a:	4770      	bx	lr

0801044c <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 801044c:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 8010450:	4770      	bx	lr

08010452 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8010452:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8010456:	4770      	bx	lr

08010458 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8010458:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 801045c:	4770      	bx	lr

0801045e <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801045e:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 8010462:	4770      	bx	lr

08010464 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8010464:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8010468:	4770      	bx	lr

0801046a <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 801046a:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 801046e:	4770      	bx	lr

08010470 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8010470:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 8010474:	4770      	bx	lr

08010476 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8010476:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 801047a:	4770      	bx	lr

0801047c <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801047c:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8010480:	4770      	bx	lr

08010482 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>:
 8010482:	f890 00ea 	ldrb.w	r0, [r0, #234]	@ 0xea
 8010486:	4770      	bx	lr

08010488 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>:
 8010488:	b510      	push	{r4, lr}
 801048a:	2414      	movs	r4, #20
 801048c:	fb04 0101 	mla	r1, r4, r1, r0
 8010490:	2001      	movs	r0, #1
 8010492:	f8a1 309c 	strh.w	r3, [r1, #156]	@ 0x9c
 8010496:	9b02      	ldr	r3, [sp, #8]
 8010498:	f881 0090 	strb.w	r0, [r1, #144]	@ 0x90
 801049c:	ed81 0a26 	vstr	s0, [r1, #152]	@ 0x98
 80104a0:	f8a1 209e 	strh.w	r2, [r1, #158]	@ 0x9e
 80104a4:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
 80104a8:	bd10      	pop	{r4, pc}

080104aa <_ZN8touchgfx22AnimationTextureMapper16getAnimationStepEv>:
 80104aa:	f8b0 00e8 	ldrh.w	r0, [r0, #232]	@ 0xe8
 80104ae:	4770      	bx	lr

080104b0 <_ZN8touchgfx22AnimationTextureMapperD1Ev>:
 80104b0:	4770      	bx	lr

080104b2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>:
 80104b2:	b510      	push	{r4, lr}
 80104b4:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 80104b8:	4604      	mov	r4, r0
 80104ba:	b92b      	cbnz	r3, 80104c8 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x16>
 80104bc:	f002 fdca 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 80104c0:	4621      	mov	r1, r4
 80104c2:	3004      	adds	r0, #4
 80104c4:	f002 fe94 	bl	80131f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80104c8:	2300      	movs	r3, #0
 80104ca:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80104ce:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 80104d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104d4:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80104d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80104da:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 80104de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80104e0:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 80104e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104e6:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 80104ea:	2301      	movs	r3, #1
 80104ec:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 80104f0:	4623      	mov	r3, r4
 80104f2:	f893 1090 	ldrb.w	r1, [r3, #144]	@ 0x90
 80104f6:	b129      	cbz	r1, 8010504 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x52>
 80104f8:	f8b3 109c 	ldrh.w	r1, [r3, #156]	@ 0x9c
 80104fc:	f8b3 009e 	ldrh.w	r0, [r3, #158]	@ 0x9e
 8010500:	42c1      	cmn	r1, r0
 8010502:	d108      	bne.n	8010516 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x64>
 8010504:	3314      	adds	r3, #20
 8010506:	4293      	cmp	r3, r2
 8010508:	d1f3      	bne.n	80104f2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x40>
 801050a:	6823      	ldr	r3, [r4, #0]
 801050c:	4620      	mov	r0, r4
 801050e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010514:	4718      	bx	r3
 8010516:	bd10      	pop	{r4, pc}

08010518 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>:
 8010518:	b510      	push	{r4, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	f002 fd9a 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 8010520:	3004      	adds	r0, #4
 8010522:	4621      	mov	r1, r4
 8010524:	f002 fdbb 	bl	801309e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010528:	2300      	movs	r3, #0
 801052a:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 801052e:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 8010532:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8010536:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 801053a:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 801053e:	bd10      	pop	{r4, pc}

08010540 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8010540:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 8010544:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8010548:	f000 b9c4 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801054c <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801054c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010550:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010558:	fe30 0a27 	vselgt.f32	s0, s0, s15
 801055c:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 8010560:	f000 b9b8 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08010564 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8010564:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8010568:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 801056c:	f000 b9b2 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08010570 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8010570:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8010574:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8010578:	f000 b9ac 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801057c <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801057c:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8010580:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8010584:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 8010588:	f000 b9a4 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801058c <_ZN8touchgfx22AnimationTextureMapperD0Ev>:
 801058c:	b510      	push	{r4, lr}
 801058e:	4604      	mov	r4, r0
 8010590:	21ec      	movs	r1, #236	@ 0xec
 8010592:	f010 fda4 	bl	80210de <_ZdlPvj>
 8010596:	4620      	mov	r0, r4
 8010598:	bd10      	pop	{r4, pc}
	...

0801059c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	ed2d 8b06 	vpush	{d8-d10}
 80105a4:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 80105a8:	b083      	sub	sp, #12
 80105aa:	4604      	mov	r4, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 80c3 	beq.w	8010738 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 80105b2:	2600      	movs	r6, #0
 80105b4:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 80105b8:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
 80105bc:	4605      	mov	r5, r0
 80105be:	3301      	adds	r3, #1
 80105c0:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
 80105c4:	ed90 9a0f 	vldr	s18, [r0, #60]	@ 0x3c
 80105c8:	46b2      	mov	sl, r6
 80105ca:	edd0 9a10 	vldr	s19, [r0, #64]	@ 0x40
 80105ce:	46b0      	mov	r8, r6
 80105d0:	46b3      	mov	fp, r6
 80105d2:	eddf aa5c 	vldr	s21, [pc, #368]	@ 8010744 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1a8>
 80105d6:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 80105da:	9601      	str	r6, [sp, #4]
 80105dc:	f895 9090 	ldrb.w	r9, [r5, #144]	@ 0x90
 80105e0:	f1b9 0f00 	cmp.w	r9, #0
 80105e4:	d049      	beq.n	801067a <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xde>
 80105e6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 80105ea:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 80105ee:	4298      	cmp	r0, r3
 80105f0:	d337      	bcc.n	8010662 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 80105f2:	ed95 7a26 	vldr	s14, [r5, #152]	@ 0x98
 80105f6:	edd5 7a25 	vldr	s15, [r5, #148]	@ 0x94
 80105fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010602:	dd73      	ble.n	80106ec <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x150>
 8010604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010608:	ed9f aa4f 	vldr	s20, [pc, #316]	@ 8010748 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1ac>
 801060c:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8010610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010614:	ee17 2a90 	vmov	r2, s15
 8010618:	b212      	sxth	r2, r2
 801061a:	1ac0      	subs	r0, r0, r3
 801061c:	2100      	movs	r1, #0
 801061e:	f8b5 309e 	ldrh.w	r3, [r5, #158]	@ 0x9e
 8010622:	b280      	uxth	r0, r0
 8010624:	f8d5 70a0 	ldr.w	r7, [r5, #160]	@ 0xa0
 8010628:	47b8      	blx	r7
 801062a:	ee07 0a90 	vmov	s15, r0
 801062e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8010632:	f1b8 0f02 	cmp.w	r8, #2
 8010636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801063a:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 801063e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010642:	d05f      	beq.n	8010704 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x168>
 8010644:	f1b8 0f03 	cmp.w	r8, #3
 8010648:	d061      	beq.n	801070e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x172>
 801064a:	f1b8 0f01 	cmp.w	r8, #1
 801064e:	bf15      	itete	ne
 8010650:	ed94 8a25 	vldrne	s16, [r4, #148]	@ 0x94
 8010654:	edd4 8a2a 	vldreq	s17, [r4, #168]	@ 0xa8
 8010658:	ee37 8a88 	vaddne.f32	s16, s15, s16
 801065c:	ee77 8aa8 	vaddeq.f32	s17, s15, s17
 8010660:	46ca      	mov	sl, r9
 8010662:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 8010666:	f8b5 109e 	ldrh.w	r1, [r5, #158]	@ 0x9e
 801066a:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	@ 0xe8
 801066e:	440b      	add	r3, r1
 8010670:	429a      	cmp	r2, r3
 8010672:	bf34      	ite	cc
 8010674:	464e      	movcc	r6, r9
 8010676:	f885 b090 	strbcs.w	fp, [r5, #144]	@ 0x90
 801067a:	f108 0801 	add.w	r8, r8, #1
 801067e:	3514      	adds	r5, #20
 8010680:	f1b8 0f04 	cmp.w	r8, #4
 8010684:	d1aa      	bne.n	80105dc <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x40>
 8010686:	f1ba 0f00 	cmp.w	sl, #0
 801068a:	d147      	bne.n	801071c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x180>
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	b19b      	cbz	r3, 80106b8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	eeb0 0a69 	vmov.f32	s0, s19
 8010696:	4620      	mov	r0, r4
 8010698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801069c:	4798      	blx	r3
 801069e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80106a2:	b148      	cbz	r0, 80106b8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 80106a4:	6803      	ldr	r3, [r0, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	4798      	blx	r3
 80106aa:	b128      	cbz	r0, 80106b8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 80106ac:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80106b0:	4621      	mov	r1, r4
 80106b2:	6803      	ldr	r3, [r0, #0]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	4798      	blx	r3
 80106b8:	2e00      	cmp	r6, #0
 80106ba:	d13d      	bne.n	8010738 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	4620      	mov	r0, r4
 80106c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80106c4:	4798      	blx	r3
 80106c6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d034      	beq.n	8010738 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 80106ce:	6803      	ldr	r3, [r0, #0]
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	4798      	blx	r3
 80106d4:	b380      	cbz	r0, 8010738 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 80106d6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 80106da:	4621      	mov	r1, r4
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	b003      	add	sp, #12
 80106e2:	ecbd 8b06 	vpop	{d8-d10}
 80106e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ea:	4718      	bx	r3
 80106ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106f0:	ed9f aa16 	vldr	s20, [pc, #88]	@ 801074c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1b0>
 80106f4:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80106f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106fc:	ee17 2a90 	vmov	r2, s15
 8010700:	b212      	sxth	r2, r2
 8010702:	e78a      	b.n	801061a <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x7e>
 8010704:	ed94 9a2f 	vldr	s18, [r4, #188]	@ 0xbc
 8010708:	ee37 9a89 	vadd.f32	s18, s15, s18
 801070c:	e7a8      	b.n	8010660 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc4>
 801070e:	edd4 9a34 	vldr	s19, [r4, #208]	@ 0xd0
 8010712:	f8cd 9004 	str.w	r9, [sp, #4]
 8010716:	ee77 9aa9 	vadd.f32	s19, s15, s19
 801071a:	e7a2      	b.n	8010662 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	eeb0 1a49 	vmov.f32	s2, s18
 8010722:	eef0 0a68 	vmov.f32	s1, s17
 8010726:	4620      	mov	r0, r4
 8010728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801072a:	eeb0 0a48 	vmov.f32	s0, s16
 801072e:	4798      	blx	r3
 8010730:	9b01      	ldr	r3, [sp, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d0b3      	beq.n	801069e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x102>
 8010736:	e7ab      	b.n	8010690 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xf4>
 8010738:	b003      	add	sp, #12
 801073a:	ecbd 8b06 	vpop	{d8-d10}
 801073e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010742:	bf00      	nop
 8010744:	447a0000 	.word	0x447a0000
 8010748:	00000001 	.word	0x00000001
 801074c:	ffffffff 	.word	0xffffffff

08010750 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 8010750:	b513      	push	{r0, r1, r4, lr}
 8010752:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8010756:	4604      	mov	r4, r0
 8010758:	b143      	cbz	r3, 801076c <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 801075a:	4601      	mov	r1, r0
 801075c:	4668      	mov	r0, sp
 801075e:	f000 fa24 	bl	8010baa <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	4669      	mov	r1, sp
 8010766:	4620      	mov	r0, r4
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	4798      	blx	r3
 801076c:	b002      	add	sp, #8
 801076e:	bd10      	pop	{r4, pc}

08010770 <_ZN8touchgfx22AnimationTextureMapperC1Ev>:
 8010770:	b513      	push	{r0, r1, r4, lr}
 8010772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010776:	a902      	add	r1, sp, #8
 8010778:	4604      	mov	r4, r0
 801077a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801077e:	f000 f85d 	bl	801083c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8010782:	4b0a      	ldr	r3, [pc, #40]	@ (80107ac <_ZN8touchgfx22AnimationTextureMapperC1Ev+0x3c>)
 8010784:	4620      	mov	r0, r4
 8010786:	6023      	str	r3, [r4, #0]
 8010788:	2300      	movs	r3, #0
 801078a:	e9c4 3338 	strd	r3, r3, [r4, #224]	@ 0xe0
 801078e:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 8010792:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8010796:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 801079a:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801079e:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 80107a2:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 80107a6:	b002      	add	sp, #8
 80107a8:	bd10      	pop	{r4, pc}
 80107aa:	bf00      	nop
 80107ac:	0802535c 	.word	0x0802535c

080107b0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 80107b0:	b510      	push	{r4, lr}
 80107b2:	ed2d 8b04 	vpush	{d8-d9}
 80107b6:	6803      	ldr	r3, [r0, #0]
 80107b8:	4604      	mov	r4, r0
 80107ba:	eeb0 8a40 	vmov.f32	s16, s0
 80107be:	eef0 8a60 	vmov.f32	s17, s1
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	eeb0 9a41 	vmov.f32	s18, s2
 80107c8:	4798      	blx	r3
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	4620      	mov	r0, r4
 80107ce:	eef0 0a68 	vmov.f32	s1, s17
 80107d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107d4:	eeb0 1a49 	vmov.f32	s2, s18
 80107d8:	eeb0 0a48 	vmov.f32	s0, s16
 80107dc:	4798      	blx	r3
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	4620      	mov	r0, r4
 80107e2:	699b      	ldr	r3, [r3, #24]
 80107e4:	ecbd 8b04 	vpop	{d8-d9}
 80107e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ec:	4718      	bx	r3

080107ee <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80107ee:	b510      	push	{r4, lr}
 80107f0:	ed2d 8b02 	vpush	{d8}
 80107f4:	6803      	ldr	r3, [r0, #0]
 80107f6:	4604      	mov	r4, r0
 80107f8:	eeb0 8a40 	vmov.f32	s16, s0
 80107fc:	699b      	ldr	r3, [r3, #24]
 80107fe:	4798      	blx	r3
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	4620      	mov	r0, r4
 8010804:	eeb0 0a48 	vmov.f32	s0, s16
 8010808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801080c:	4798      	blx	r3
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	4620      	mov	r0, r4
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	ecbd 8b02 	vpop	{d8}
 8010818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801081c:	4718      	bx	r3

0801081e <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 801081e:	2200      	movs	r2, #0
 8010820:	8002      	strh	r2, [r0, #0]
 8010822:	8042      	strh	r2, [r0, #2]
 8010824:	8082      	strh	r2, [r0, #4]
 8010826:	80c2      	strh	r2, [r0, #6]
 8010828:	4770      	bx	lr

0801082a <_ZN8touchgfx13TextureMapperD1Ev>:
 801082a:	4770      	bx	lr

0801082c <_ZN8touchgfx13TextureMapperD0Ev>:
 801082c:	b510      	push	{r4, lr}
 801082e:	4604      	mov	r4, r0
 8010830:	2190      	movs	r1, #144	@ 0x90
 8010832:	f010 fc54 	bl	80210de <_ZdlPvj>
 8010836:	4620      	mov	r0, r4
 8010838:	bd10      	pop	{r4, pc}
	...

0801083c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	2301      	movs	r3, #1
 8010840:	2500      	movs	r5, #0
 8010842:	4604      	mov	r4, r0
 8010844:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8010848:	4b1f      	ldr	r3, [pc, #124]	@ (80108c8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 801084a:	8085      	strh	r5, [r0, #4]
 801084c:	80c5      	strh	r5, [r0, #6]
 801084e:	8105      	strh	r5, [r0, #8]
 8010850:	8145      	strh	r5, [r0, #10]
 8010852:	8185      	strh	r5, [r0, #12]
 8010854:	81c5      	strh	r5, [r0, #14]
 8010856:	8205      	strh	r5, [r0, #16]
 8010858:	8245      	strh	r5, [r0, #18]
 801085a:	61c5      	str	r5, [r0, #28]
 801085c:	8405      	strh	r5, [r0, #32]
 801085e:	8445      	strh	r5, [r0, #34]	@ 0x22
 8010860:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8010864:	6003      	str	r3, [r0, #0]
 8010866:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801086a:	880b      	ldrh	r3, [r1, #0]
 801086c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801086e:	23ff      	movs	r3, #255	@ 0xff
 8010870:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8010874:	f000 fc93 	bl	801119e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010878:	4b14      	ldr	r3, [pc, #80]	@ (80108cc <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 801087a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801087e:	4914      	ldr	r1, [pc, #80]	@ (80108d0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8010880:	6023      	str	r3, [r4, #0]
 8010882:	2300      	movs	r3, #0
 8010884:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8010888:	4620      	mov	r0, r4
 801088a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801088c:	6323      	str	r3, [r4, #48]	@ 0x30
 801088e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010890:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010892:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010894:	6463      	str	r3, [r4, #68]	@ 0x44
 8010896:	64a3      	str	r3, [r4, #72]	@ 0x48
 8010898:	6523      	str	r3, [r4, #80]	@ 0x50
 801089a:	6563      	str	r3, [r4, #84]	@ 0x54
 801089c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801089e:	6623      	str	r3, [r4, #96]	@ 0x60
 80108a0:	66a3      	str	r3, [r4, #104]	@ 0x68
 80108a2:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80108a4:	6763      	str	r3, [r4, #116]	@ 0x74
 80108a6:	67a3      	str	r3, [r4, #120]	@ 0x78
 80108a8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 80108ac:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80108b0:	230c      	movs	r3, #12
 80108b2:	6422      	str	r2, [r4, #64]	@ 0x40
 80108b4:	64e1      	str	r1, [r4, #76]	@ 0x4c
 80108b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80108b8:	6662      	str	r2, [r4, #100]	@ 0x64
 80108ba:	6722      	str	r2, [r4, #112]	@ 0x70
 80108bc:	67e2      	str	r2, [r4, #124]	@ 0x7c
 80108be:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80108c2:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 80108c6:	bd38      	pop	{r3, r4, r5, pc}
 80108c8:	08025600 	.word	0x08025600
 80108cc:	08025484 	.word	0x08025484
 80108d0:	447a0000 	.word	0x447a0000

080108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	ed2d 8b04 	vpush	{d8-d9}
 80108da:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 80108de:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80108e0:	4604      	mov	r4, r0
 80108e2:	add0      	add	r5, sp, #832	@ 0x340
 80108e4:	f825 3d40 	strh.w	r3, [r5, #-64]!
 80108e8:	4628      	mov	r0, r5
 80108ea:	f005 fdfd 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80108ee:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80108f0:	4606      	mov	r6, r0
 80108f2:	4628      	mov	r0, r5
 80108f4:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 80108f8:	f005 fe2a 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80108fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010900:	1c72      	adds	r2, r6, #1
 8010902:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8010906:	3001      	adds	r0, #1
 8010908:	ee07 2a90 	vmov	s15, r2
 801090c:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8010910:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8010914:	ee06 0a90 	vmov	s13, r0
 8010918:	ee36 6a47 	vsub.f32	s12, s12, s14
 801091c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801091e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010922:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 8010926:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801092a:	9312      	str	r3, [sp, #72]	@ 0x48
 801092c:	9316      	str	r3, [sp, #88]	@ 0x58
 801092e:	a830      	add	r0, sp, #192	@ 0xc0
 8010930:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010934:	931a      	str	r3, [sp, #104]	@ 0x68
 8010936:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801093a:	931e      	str	r3, [sp, #120]	@ 0x78
 801093c:	2300      	movs	r3, #0
 801093e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8010942:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 8010946:	ae70      	add	r6, sp, #448	@ 0x1c0
 8010948:	9320      	str	r3, [sp, #128]	@ 0x80
 801094a:	9321      	str	r3, [sp, #132]	@ 0x84
 801094c:	9322      	str	r3, [sp, #136]	@ 0x88
 801094e:	9324      	str	r3, [sp, #144]	@ 0x90
 8010950:	9325      	str	r3, [sp, #148]	@ 0x94
 8010952:	9326      	str	r3, [sp, #152]	@ 0x98
 8010954:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010956:	9329      	str	r3, [sp, #164]	@ 0xa4
 8010958:	932a      	str	r3, [sp, #168]	@ 0xa8
 801095a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801095c:	932d      	str	r3, [sp, #180]	@ 0xb4
 801095e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8010960:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8010964:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8010968:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 801096c:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 8010970:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 8010974:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 8010978:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 801097c:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 8010980:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8010984:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8010988:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 801098c:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 8010990:	f005 f904 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 8010994:	eeb1 0a49 	vneg.f32	s0, s18
 8010998:	a830      	add	r0, sp, #192	@ 0xc0
 801099a:	f005 f9cf 	bl	8015d3c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801099e:	eeb1 0a68 	vneg.f32	s0, s17
 80109a2:	f005 f9d9 	bl	8015d58 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80109a6:	eeb1 0a48 	vneg.f32	s0, s16
 80109aa:	f005 f9e4 	bl	8015d76 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80109ae:	a840      	add	r0, sp, #256	@ 0x100
 80109b0:	f005 f8f4 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 80109b4:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 80109b8:	a840      	add	r0, sp, #256	@ 0x100
 80109ba:	f005 f943 	bl	8015c44 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80109be:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 80109c2:	f005 f969 	bl	8015c98 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80109c6:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 80109ca:	f005 f98e 	bl	8015cea <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 80109ce:	a850      	add	r0, sp, #320	@ 0x140
 80109d0:	f005 f8e4 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 80109d4:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 80109d8:	a850      	add	r0, sp, #320	@ 0x140
 80109da:	f005 f9db 	bl	8015d94 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 80109de:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 80109e2:	f005 f9e3 	bl	8015dac <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 80109e6:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 80109ea:	f005 f9ec 	bl	8015dc6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 80109ee:	a860      	add	r0, sp, #384	@ 0x180
 80109f0:	f005 f8d4 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 80109f4:	eeb0 0a49 	vmov.f32	s0, s18
 80109f8:	a860      	add	r0, sp, #384	@ 0x180
 80109fa:	f005 f99f 	bl	8015d3c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80109fe:	eeb0 0a68 	vmov.f32	s0, s17
 8010a02:	f005 f9a9 	bl	8015d58 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8010a06:	eeb0 0a48 	vmov.f32	s0, s16
 8010a0a:	f005 f9b4 	bl	8015d76 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8010a0e:	aa50      	add	r2, sp, #320	@ 0x140
 8010a10:	a960      	add	r1, sp, #384	@ 0x180
 8010a12:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8010a14:	f005 f8da 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a18:	4628      	mov	r0, r5
 8010a1a:	aa40      	add	r2, sp, #256	@ 0x100
 8010a1c:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8010a1e:	f005 f8d5 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a22:	4629      	mov	r1, r5
 8010a24:	aa30      	add	r2, sp, #192	@ 0xc0
 8010a26:	a870      	add	r0, sp, #448	@ 0x1c0
 8010a28:	f005 f8d0 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a2c:	a880      	add	r0, sp, #512	@ 0x200
 8010a2e:	f005 f8b5 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 8010a32:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8010a36:	a880      	add	r0, sp, #512	@ 0x200
 8010a38:	eeb1 0a40 	vneg.f32	s0, s0
 8010a3c:	f005 f97e 	bl	8015d3c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8010a40:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8010a44:	a880      	add	r0, sp, #512	@ 0x200
 8010a46:	eeb1 0a40 	vneg.f32	s0, s0
 8010a4a:	f005 f985 	bl	8015d58 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8010a4e:	a890      	add	r0, sp, #576	@ 0x240
 8010a50:	f005 f8a4 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 8010a54:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8010a58:	a890      	add	r0, sp, #576	@ 0x240
 8010a5a:	f005 f8e3 	bl	8015c24 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8010a5e:	a8a0      	add	r0, sp, #640	@ 0x280
 8010a60:	f005 f89c 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 8010a64:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8010a68:	a8a0      	add	r0, sp, #640	@ 0x280
 8010a6a:	f005 f967 	bl	8015d3c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8010a6e:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8010a72:	f005 f971 	bl	8015d58 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8010a76:	aa90      	add	r2, sp, #576	@ 0x240
 8010a78:	a9a0      	add	r1, sp, #640	@ 0x280
 8010a7a:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8010a7c:	f005 f8a6 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a80:	4628      	mov	r0, r5
 8010a82:	aa80      	add	r2, sp, #512	@ 0x200
 8010a84:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8010a86:	f005 f8a1 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	466d      	mov	r5, sp
 8010a8e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010a90:	4668      	mov	r0, sp
 8010a92:	f005 f89b 	bl	8015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8010a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aa0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010aa2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8010aac:	0129      	lsls	r1, r5, #4
 8010aae:	ab20      	add	r3, sp, #128	@ 0x80
 8010ab0:	3501      	adds	r5, #1
 8010ab2:	a870      	add	r0, sp, #448	@ 0x1c0
 8010ab4:	185e      	adds	r6, r3, r1
 8010ab6:	ab10      	add	r3, sp, #64	@ 0x40
 8010ab8:	4419      	add	r1, r3
 8010aba:	f005 f83f 	bl	8015b3c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8010abe:	2d04      	cmp	r5, #4
 8010ac0:	ed86 0a00 	vstr	s0, [r6]
 8010ac4:	edc6 0a01 	vstr	s1, [r6, #4]
 8010ac8:	ed86 1a02 	vstr	s2, [r6, #8]
 8010acc:	edc6 1a03 	vstr	s3, [r6, #12]
 8010ad0:	d1ec      	bne.n	8010aac <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8010ad2:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8010ad6:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 8010ada:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 8010ade:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010ae2:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 8010ae6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010aea:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 8010aee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010af2:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 8010af6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010afa:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 8010afe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8010b02:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 8010b06:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b0a:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 8010b0e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010b12:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 8010b16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b1a:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 8010b1e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010b22:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 8010b26:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 8010b2a:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 8010b2e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b32:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 8010b36:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010b3a:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 8010b3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b42:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 8010b46:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010b4a:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 8010b4e:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 8010b52:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 8010b56:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b5a:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 8010b5e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8010b62:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 8010b66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010b6e:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 8010b72:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 8010b76:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 8010b7a:	ecbd 8b04 	vpop	{d8-d9}
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}

08010b80 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	4604      	mov	r4, r0
 8010b84:	f000 fb0b 	bl	801119e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010b88:	4620      	mov	r0, r4
 8010b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b8e:	f7ff bea1 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08010b92 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8010b92:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8010b96:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 8010b9a:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 8010b9e:	f7ff be99 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08010ba2 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8010ba2:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 8010ba6:	f7ff be95 	b.w	80108d4 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08010baa <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8010baa:	b510      	push	{r4, lr}
 8010bac:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 8010bb0:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 8010bb4:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 8010bb8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010bbc:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 8010bc0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8010bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc8:	bf54      	ite	pl
 8010bca:	eeb0 7a65 	vmovpl.f32	s14, s11
 8010bce:	eeb0 7a67 	vmovmi.f32	s14, s15
 8010bd2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8010bde:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be6:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8010bea:	febb 7a47 	vrintm.f32	s14, s14
 8010bee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010bfa:	bf56      	itet	pl
 8010bfc:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8010c00:	2200      	movmi	r2, #0
 8010c02:	ee17 3a10 	vmovpl	r3, s14
 8010c06:	ee07 4a10 	vmov	s14, r4
 8010c0a:	bf58      	it	pl
 8010c0c:	b21a      	sxthpl	r2, r3
 8010c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010c16:	8002      	strh	r2, [r0, #0]
 8010c18:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8010c1c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010c20:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 8010c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c28:	bf58      	it	pl
 8010c2a:	eef0 7a46 	vmovpl.f32	s15, s12
 8010c2e:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 8010c32:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3a:	bf58      	it	pl
 8010c3c:	eef0 7a66 	vmovpl.f32	s15, s13
 8010c40:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 8010c44:	fefa 7a67 	vrintp.f32	s15, s15
 8010c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	bfdc      	itt	le
 8010c52:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8010c56:	ee17 3a90 	vmovle	r3, s15
 8010c5a:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 8010c5e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8010c62:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010c66:	bfd8      	it	le
 8010c68:	b21c      	sxthle	r4, r3
 8010c6a:	1aa2      	subs	r2, r4, r2
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	8082      	strh	r2, [r0, #4]
 8010c72:	bf54      	ite	pl
 8010c74:	eeb0 7a65 	vmovpl.f32	s14, s11
 8010c78:	eeb0 7a67 	vmovmi.f32	s14, s15
 8010c7c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8010c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c84:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8010c88:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c90:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8010c94:	febb 7a47 	vrintm.f32	s14, s14
 8010c98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca0:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010ca4:	bf56      	itet	pl
 8010ca6:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8010caa:	2300      	movmi	r3, #0
 8010cac:	ee17 3a10 	vmovpl	r3, s14
 8010cb0:	ee07 1a10 	vmov	s14, r1
 8010cb4:	bf58      	it	pl
 8010cb6:	b21b      	sxthpl	r3, r3
 8010cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010cc0:	8043      	strh	r3, [r0, #2]
 8010cc2:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8010cc6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	bf58      	it	pl
 8010cd0:	eef0 7a46 	vmovpl.f32	s15, s12
 8010cd4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	bf58      	it	pl
 8010cde:	eef0 7a66 	vmovpl.f32	s15, s13
 8010ce2:	fefa 7a67 	vrintp.f32	s15, s15
 8010ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cee:	bfde      	ittt	le
 8010cf0:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8010cf4:	ee17 1a90 	vmovle	r1, s15
 8010cf8:	b209      	sxthle	r1, r1
 8010cfa:	1acb      	subs	r3, r1, r3
 8010cfc:	80c3      	strh	r3, [r0, #6]
 8010cfe:	bd10      	pop	{r4, pc}

08010d00 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8010d00:	4603      	mov	r3, r0
 8010d02:	3026      	adds	r0, #38	@ 0x26
 8010d04:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8010d08:	b90b      	cbnz	r3, 8010d0e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8010d0a:	f003 bec9 	b.w	8014aa0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8010d0e:	f003 bed7 	b.w	8014ac0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08010d14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8010d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d18:	4604      	mov	r4, r0
 8010d1a:	469b      	mov	fp, r3
 8010d1c:	ed2d 8b04 	vpush	{d8-d9}
 8010d20:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8010d24:	b0b3      	sub	sp, #204	@ 0xcc
 8010d26:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010d2a:	f9b1 6000 	ldrsh.w	r6, [r1]
 8010d2e:	8888      	ldrh	r0, [r1, #4]
 8010d30:	9206      	str	r2, [sp, #24]
 8010d32:	2200      	movs	r2, #0
 8010d34:	4430      	add	r0, r6
 8010d36:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 8010d3a:	f8dd 9104 	ldr.w	r9, [sp, #260]	@ 0x104
 8010d3e:	b280      	uxth	r0, r0
 8010d40:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8010d44:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 8010d46:	fa0f fe80 	sxth.w	lr, r0
 8010d4a:	9211      	str	r2, [sp, #68]	@ 0x44
 8010d4c:	4596      	cmp	lr, r2
 8010d4e:	f340 8129 	ble.w	8010fa4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8010d52:	45b4      	cmp	ip, r6
 8010d54:	f340 8126 	ble.w	8010fa4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8010d58:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010d5c:	88ca      	ldrh	r2, [r1, #6]
 8010d5e:	442a      	add	r2, r5
 8010d60:	b292      	uxth	r2, r2
 8010d62:	b211      	sxth	r1, r2
 8010d64:	2900      	cmp	r1, #0
 8010d66:	f340 811d 	ble.w	8010fa4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8010d6a:	42ab      	cmp	r3, r5
 8010d6c:	f340 811a 	ble.w	8010fa4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8010d70:	45f4      	cmp	ip, lr
 8010d72:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8010d76:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010d7a:	bfb8      	it	lt
 8010d7c:	fa1f f08c 	uxthlt.w	r0, ip
 8010d80:	428b      	cmp	r3, r1
 8010d82:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8010d86:	bfb8      	it	lt
 8010d88:	b29a      	uxthlt	r2, r3
 8010d8a:	1b80      	subs	r0, r0, r6
 8010d8c:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 8010d90:	1b52      	subs	r2, r2, r5
 8010d92:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8010d96:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8010d9a:	ab11      	add	r3, sp, #68	@ 0x44
 8010d9c:	ad13      	add	r5, sp, #76	@ 0x4c
 8010d9e:	6822      	ldr	r2, [r4, #0]
 8010da0:	1d26      	adds	r6, r4, #4
 8010da2:	9307      	str	r3, [sp, #28]
 8010da4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dae:	4629      	mov	r1, r5
 8010db0:	4620      	mov	r0, r4
 8010db2:	4790      	blx	r2
 8010db4:	4621      	mov	r1, r4
 8010db6:	a815      	add	r0, sp, #84	@ 0x54
 8010db8:	f003 faaa 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010dbc:	a815      	add	r0, sp, #84	@ 0x54
 8010dbe:	f001 ff95 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010dc2:	9b07      	ldr	r3, [sp, #28]
 8010dc4:	4631      	mov	r1, r6
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f001 ffd4 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8010dd2:	f001 ff8b 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f005 fc78 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 8010ddc:	9007      	str	r0, [sp, #28]
 8010dde:	2800      	cmp	r0, #0
 8010de0:	f000 80db 	beq.w	8010f9a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8010de4:	f8db 2000 	ldr.w	r2, [fp]
 8010de8:	a90d      	add	r1, sp, #52	@ 0x34
 8010dea:	a809      	add	r0, sp, #36	@ 0x24
 8010dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8010dee:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010df2:	920a      	str	r2, [sp, #40]	@ 0x28
 8010df4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8010df8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010dfa:	f8db 200c 	ldr.w	r2, [fp, #12]
 8010dfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8010e00:	f8da 2000 	ldr.w	r2, [sl]
 8010e04:	920d      	str	r2, [sp, #52]	@ 0x34
 8010e06:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010e0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e0c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010e10:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010e12:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010e16:	9210      	str	r2, [sp, #64]	@ 0x40
 8010e18:	4632      	mov	r2, r6
 8010e1a:	f001 ff8f 	bl	8012d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010e1e:	4632      	mov	r2, r6
 8010e20:	a90e      	add	r1, sp, #56	@ 0x38
 8010e22:	a80a      	add	r0, sp, #40	@ 0x28
 8010e24:	f001 ff8a 	bl	8012d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010e28:	4632      	mov	r2, r6
 8010e2a:	a90f      	add	r1, sp, #60	@ 0x3c
 8010e2c:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e2e:	f001 ff85 	bl	8012d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010e32:	4632      	mov	r2, r6
 8010e34:	a910      	add	r1, sp, #64	@ 0x40
 8010e36:	a80c      	add	r0, sp, #48	@ 0x30
 8010e38:	f001 ff80 	bl	8012d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010e3c:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8010e40:	edd7 4a00 	vldr	s9, [r7]
 8010e44:	eef0 6a67 	vmov.f32	s13, s15
 8010e48:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8010e4c:	edd7 5a01 	vldr	s11, [r7, #4]
 8010e50:	eeb0 7a67 	vmov.f32	s14, s15
 8010e54:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8010e58:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8010e5c:	ed98 4a00 	vldr	s8, [r8]
 8010e60:	eeb0 6a67 	vmov.f32	s12, s15
 8010e64:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8010e68:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8010e6c:	ed98 5a01 	vldr	s10, [r8, #4]
 8010e70:	ed99 9a00 	vldr	s18, [r9]
 8010e74:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010e78:	ed99 8a01 	vldr	s16, [r9, #4]
 8010e7c:	edd9 8a02 	vldr	s17, [r9, #8]
 8010e80:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010e84:	ee16 6a10 	vmov	r6, s12
 8010e88:	eeb0 6a67 	vmov.f32	s12, s15
 8010e8c:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8010e90:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8010e94:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010e98:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8010e9c:	ed8d 4a21 	vstr	s8, [sp, #132]	@ 0x84
 8010ea0:	edcd 4a22 	vstr	s9, [sp, #136]	@ 0x88
 8010ea4:	ee16 0a10 	vmov	r0, s12
 8010ea8:	eeb0 6a67 	vmov.f32	s12, s15
 8010eac:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8010eb0:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8010eb4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010eb8:	ed8d 5a26 	vstr	s10, [sp, #152]	@ 0x98
 8010ebc:	edcd 5a27 	vstr	s11, [sp, #156]	@ 0x9c
 8010ec0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8010ec4:	ee16 1a10 	vmov	r1, s12
 8010ec8:	eeb0 6a67 	vmov.f32	s12, s15
 8010ecc:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8010ed0:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8010ed4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010ed8:	68ff      	ldr	r7, [r7, #12]
 8010eda:	9624      	str	r6, [sp, #144]	@ 0x90
 8010edc:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010ee0:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 8010ee4:	ee16 2a10 	vmov	r2, s12
 8010ee8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8010eec:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 8010ef0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010ef4:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8010ef8:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8010efc:	4628      	mov	r0, r5
 8010efe:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8010f02:	9b06      	ldr	r3, [sp, #24]
 8010f04:	922d      	str	r2, [sp, #180]	@ 0xb4
 8010f06:	4a29      	ldr	r2, [pc, #164]	@ (8010fac <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8010f08:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010f0a:	8812      	ldrh	r2, [r2, #0]
 8010f0c:	9b07      	ldr	r3, [sp, #28]
 8010f0e:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8010f12:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8010f16:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8010f1a:	9218      	str	r2, [sp, #96]	@ 0x60
 8010f1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f1e:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 8010f22:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8010f26:	9731      	str	r7, [sp, #196]	@ 0xc4
 8010f28:	f005 fc00 	bl	801672c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8010f2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f005 fada 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f34:	901b      	str	r0, [sp, #108]	@ 0x6c
 8010f36:	4628      	mov	r0, r5
 8010f38:	f005 fb0a 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f3c:	901c      	str	r0, [sp, #112]	@ 0x70
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f005 fad2 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f44:	eeb4 9a48 	vcmp.f32	s18, s16
 8010f48:	901d      	str	r0, [sp, #116]	@ 0x74
 8010f4a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	d107      	bne.n	8010f64 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8010f54:	eeb4 8a68 	vcmp.f32	s16, s17
 8010f58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	bf08      	it	eq
 8010f62:	461e      	moveq	r6, r3
 8010f64:	4b12      	ldr	r3, [pc, #72]	@ (8010fb0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010f6c:	b10a      	cbz	r2, 8010f72 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8010f6e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8010f70:	b905      	cbnz	r5, 8010f74 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8010f72:	689d      	ldr	r5, [r3, #8]
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	4620      	mov	r0, r4
 8010f78:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 8010f7a:	f7ff fec1 	bl	8010d00 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8010f7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010f82:	aa1e      	add	r2, sp, #120	@ 0x78
 8010f84:	9604      	str	r6, [sp, #16]
 8010f86:	a917      	add	r1, sp, #92	@ 0x5c
 8010f88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010f8c:	ab13      	add	r3, sp, #76	@ 0x4c
 8010f8e:	4628      	mov	r0, r5
 8010f90:	9301      	str	r3, [sp, #4]
 8010f92:	ab15      	add	r3, sp, #84	@ 0x54
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	ab19      	add	r3, sp, #100	@ 0x64
 8010f98:	47b8      	blx	r7
 8010f9a:	b033      	add	sp, #204	@ 0xcc
 8010f9c:	ecbd 8b04 	vpop	{d8-d9}
 8010fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8010fa8:	e6f7      	b.n	8010d9a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8010faa:	bf00      	nop
 8010fac:	240253ce 	.word	0x240253ce
 8010fb0:	240253d4 	.word	0x240253d4

08010fb4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8010fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb8:	ed2d 8b02 	vpush	{d8}
 8010fbc:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8010fc0:	b098      	sub	sp, #96	@ 0x60
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4688      	mov	r8, r1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d077      	beq.n	80110ba <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8010fca:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f005 fa8a 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010fd4:	ee07 0a90 	vmov	s15, r0
 8010fd8:	4628      	mov	r0, r5
 8010fda:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010fde:	f005 fab7 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010fe2:	4b4e      	ldr	r3, [pc, #312]	@ (801111c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8010fe4:	ee07 0a90 	vmov	s15, r0
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fee:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d066      	beq.n	80110c4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8010ff6:	eeb0 6a47 	vmov.f32	s12, s14
 8010ffa:	ee17 3a10 	vmov	r3, s14
 8010ffe:	eeb0 4a48 	vmov.f32	s8, s16
 8011002:	eeb0 7a48 	vmov.f32	s14, s16
 8011006:	eef0 4a67 	vmov.f32	s9, s15
 801100a:	eeb0 8a67 	vmov.f32	s16, s15
 801100e:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 8011012:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 8011016:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 801101a:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 801101e:	ee73 1a65 	vsub.f32	s3, s6, s11
 8011022:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 8011026:	ee72 6ac5 	vsub.f32	s13, s5, s10
 801102a:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 801102e:	ee32 1a45 	vsub.f32	s2, s4, s10
 8011032:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8011034:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8011036:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 801103a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801103c:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8011040:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8011044:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8011048:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801104c:	eee1 6a21 	vfma.f32	s13, s2, s3
 8011050:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011058:	dd3d      	ble.n	80110d6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 801105a:	ed8d 5a04 	vstr	s10, [sp, #16]
 801105e:	ed8d 2a05 	vstr	s4, [sp, #20]
 8011062:	edcd 2a06 	vstr	s5, [sp, #24]
 8011066:	f8cd c01c 	str.w	ip, [sp, #28]
 801106a:	edcd 5a08 	vstr	s11, [sp, #32]
 801106e:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 8011072:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8011076:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011078:	960c      	str	r6, [sp, #48]	@ 0x30
 801107a:	950d      	str	r5, [sp, #52]	@ 0x34
 801107c:	920e      	str	r2, [sp, #56]	@ 0x38
 801107e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011080:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8011084:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 8011088:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 801108c:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 8011090:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 8011094:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8011098:	9316      	str	r3, [sp, #88]	@ 0x58
 801109a:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 801109e:	ab14      	add	r3, sp, #80	@ 0x50
 80110a0:	2200      	movs	r2, #0
 80110a2:	4641      	mov	r1, r8
 80110a4:	4620      	mov	r0, r4
 80110a6:	9303      	str	r3, [sp, #12]
 80110a8:	ab10      	add	r3, sp, #64	@ 0x40
 80110aa:	9302      	str	r3, [sp, #8]
 80110ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80110ae:	9301      	str	r3, [sp, #4]
 80110b0:	ab08      	add	r3, sp, #32
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	ab04      	add	r3, sp, #16
 80110b6:	f7ff fe2d 	bl	8010d14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80110ba:	b018      	add	sp, #96	@ 0x60
 80110bc:	ecbd 8b02 	vpop	{d8}
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c4:	eeb0 6a48 	vmov.f32	s12, s16
 80110c8:	ee17 3a90 	vmov	r3, s15
 80110cc:	eef0 4a47 	vmov.f32	s9, s14
 80110d0:	eeb0 4a67 	vmov.f32	s8, s15
 80110d4:	e79b      	b.n	801100e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 80110d6:	ed8d 5a05 	vstr	s10, [sp, #20]
 80110da:	ed8d 2a04 	vstr	s4, [sp, #16]
 80110de:	f8cd c018 	str.w	ip, [sp, #24]
 80110e2:	edcd 2a07 	vstr	s5, [sp, #28]
 80110e6:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 80110ea:	ed8d 3a08 	vstr	s6, [sp, #32]
 80110ee:	970a      	str	r7, [sp, #40]	@ 0x28
 80110f0:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 80110f4:	960d      	str	r6, [sp, #52]	@ 0x34
 80110f6:	950c      	str	r5, [sp, #48]	@ 0x30
 80110f8:	900e      	str	r0, [sp, #56]	@ 0x38
 80110fa:	920f      	str	r2, [sp, #60]	@ 0x3c
 80110fc:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8011100:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 8011104:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 8011108:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 801110c:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 8011110:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8011114:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 8011118:	9317      	str	r3, [sp, #92]	@ 0x5c
 801111a:	e7c0      	b.n	801109e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 801111c:	240253cc 	.word	0x240253cc

08011120 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011120:	2300      	movs	r3, #0
 8011122:	8083      	strh	r3, [r0, #4]
 8011124:	80c3      	strh	r3, [r0, #6]
 8011126:	8003      	strh	r3, [r0, #0]
 8011128:	8043      	strh	r3, [r0, #2]
 801112a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801112e:	2bff      	cmp	r3, #255	@ 0xff
 8011130:	bf01      	itttt	eq
 8011132:	890b      	ldrheq	r3, [r1, #8]
 8011134:	8083      	strheq	r3, [r0, #4]
 8011136:	894b      	ldrheq	r3, [r1, #10]
 8011138:	80c3      	strheq	r3, [r0, #6]
 801113a:	4770      	bx	lr

0801113c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801113c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	466b      	mov	r3, sp
 8011142:	6808      	ldr	r0, [r1, #0]
 8011144:	6849      	ldr	r1, [r1, #4]
 8011146:	c303      	stmia	r3!, {r0, r1}
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	4669      	mov	r1, sp
 801114c:	4620      	mov	r0, r4
 801114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011150:	4798      	blx	r3
 8011152:	4b08      	ldr	r3, [pc, #32]	@ (8011174 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801115a:	b10a      	cbz	r2, 8011160 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801115c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801115e:	b900      	cbnz	r0, 8011162 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011160:	6898      	ldr	r0, [r3, #8]
 8011162:	6803      	ldr	r3, [r0, #0]
 8011164:	4669      	mov	r1, sp
 8011166:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011168:	6a1d      	ldr	r5, [r3, #32]
 801116a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801116e:	47a8      	blx	r5
 8011170:	b003      	add	sp, #12
 8011172:	bd30      	pop	{r4, r5, pc}
 8011174:	240253d4 	.word	0x240253d4

08011178 <_ZN8touchgfx3BoxD1Ev>:
 8011178:	4770      	bx	lr

0801117a <_ZN8touchgfx3BoxD0Ev>:
 801117a:	b510      	push	{r4, lr}
 801117c:	4604      	mov	r4, r0
 801117e:	212c      	movs	r1, #44	@ 0x2c
 8011180:	f00f ffad 	bl	80210de <_ZdlPvj>
 8011184:	4620      	mov	r0, r4
 8011186:	bd10      	pop	{r4, pc}

08011188 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011188:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801118c:	b12a      	cbz	r2, 801119a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801118e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011192:	b112      	cbz	r2, 801119a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011194:	6803      	ldr	r3, [r0, #0]
 8011196:	695b      	ldr	r3, [r3, #20]
 8011198:	4718      	bx	r3
 801119a:	4770      	bx	lr

0801119c <_ZN8touchgfx5ImageD1Ev>:
 801119c:	4770      	bx	lr

0801119e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801119e:	b570      	push	{r4, r5, r6, lr}
 80111a0:	880b      	ldrh	r3, [r1, #0]
 80111a2:	460d      	mov	r5, r1
 80111a4:	4604      	mov	r4, r0
 80111a6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80111a8:	4608      	mov	r0, r1
 80111aa:	f005 f99d 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111ae:	4606      	mov	r6, r0
 80111b0:	4628      	mov	r0, r5
 80111b2:	f005 f9cd 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	4605      	mov	r5, r0
 80111ba:	4631      	mov	r1, r6
 80111bc:	4620      	mov	r0, r4
 80111be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111c0:	4798      	blx	r3
 80111c2:	6823      	ldr	r3, [r4, #0]
 80111c4:	4629      	mov	r1, r5
 80111c6:	4620      	mov	r0, r4
 80111c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111ce:	4718      	bx	r3

080111d0 <_ZN8touchgfx5ImageD0Ev>:
 80111d0:	b510      	push	{r4, lr}
 80111d2:	4604      	mov	r4, r0
 80111d4:	212c      	movs	r1, #44	@ 0x2c
 80111d6:	f00f ff82 	bl	80210de <_ZdlPvj>
 80111da:	4620      	mov	r0, r4
 80111dc:	bd10      	pop	{r4, pc}

080111de <_ZNK8touchgfx5Image12getSolidRectEv>:
 80111de:	b510      	push	{r4, lr}
 80111e0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80111e4:	4604      	mov	r4, r0
 80111e6:	2bff      	cmp	r3, #255	@ 0xff
 80111e8:	d006      	beq.n	80111f8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80111ea:	2300      	movs	r3, #0
 80111ec:	8003      	strh	r3, [r0, #0]
 80111ee:	8043      	strh	r3, [r0, #2]
 80111f0:	8083      	strh	r3, [r0, #4]
 80111f2:	80c3      	strh	r3, [r0, #6]
 80111f4:	4620      	mov	r0, r4
 80111f6:	bd10      	pop	{r4, pc}
 80111f8:	3126      	adds	r1, #38	@ 0x26
 80111fa:	f005 f9dd 	bl	80165b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80111fe:	e7f9      	b.n	80111f4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011200 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8011200:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8011204:	b12a      	cbz	r2, 8011212 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011206:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801120a:	b112      	cbz	r2, 8011212 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	695b      	ldr	r3, [r3, #20]
 8011210:	4718      	bx	r3
 8011212:	4770      	bx	lr

08011214 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011218:	4604      	mov	r4, r0
 801121a:	b088      	sub	sp, #32
 801121c:	2500      	movs	r5, #0
 801121e:	460f      	mov	r7, r1
 8011220:	f854 3b26 	ldr.w	r3, [r4], #38
 8011224:	a904      	add	r1, sp, #16
 8011226:	4606      	mov	r6, r0
 8011228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801122a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801122e:	4798      	blx	r3
 8011230:	4620      	mov	r0, r4
 8011232:	f005 f959 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011236:	4680      	mov	r8, r0
 8011238:	4620      	mov	r0, r4
 801123a:	f005 f989 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801123e:	9506      	str	r5, [sp, #24]
 8011240:	ad06      	add	r5, sp, #24
 8011242:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011246:	4639      	mov	r1, r7
 8011248:	f8ad 801c 	strh.w	r8, [sp, #28]
 801124c:	4628      	mov	r0, r5
 801124e:	f7fc fcf1 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 8011252:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011256:	2b00      	cmp	r3, #0
 8011258:	dd19      	ble.n	801128e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801125a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801125e:	2b00      	cmp	r3, #0
 8011260:	dd15      	ble.n	801128e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011262:	4b0c      	ldr	r3, [pc, #48]	@ (8011294 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801126a:	b10a      	cbz	r2, 8011270 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801126c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801126e:	b900      	cbnz	r0, 8011272 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011270:	6898      	ldr	r0, [r3, #8]
 8011272:	2701      	movs	r7, #1
 8011274:	6801      	ldr	r1, [r0, #0]
 8011276:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801127a:	9702      	str	r7, [sp, #8]
 801127c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011280:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011284:	e9cd 5600 	strd	r5, r6, [sp]
 8011288:	688d      	ldr	r5, [r1, #8]
 801128a:	4621      	mov	r1, r4
 801128c:	47a8      	blx	r5
 801128e:	b008      	add	sp, #32
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	240253d4 	.word	0x240253d4

08011298 <_ZN8touchgfx7OutlineD1Ev>:
 8011298:	4770      	bx	lr

0801129a <_ZN8touchgfx7OutlineD0Ev>:
 801129a:	b510      	push	{r4, lr}
 801129c:	4604      	mov	r4, r0
 801129e:	2130      	movs	r1, #48	@ 0x30
 80112a0:	f00f ff1d 	bl	80210de <_ZdlPvj>
 80112a4:	4620      	mov	r0, r4
 80112a6:	bd10      	pop	{r4, pc}

080112a8 <_ZN8touchgfx7Outline5resetEv>:
 80112a8:	b510      	push	{r4, lr}
 80112aa:	4604      	mov	r4, r0
 80112ac:	f000 fe72 	bl	8011f94 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80112b0:	60e0      	str	r0, [r4, #12]
 80112b2:	f000 fe75 	bl	8011fa0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80112b6:	68e3      	ldr	r3, [r4, #12]
 80112b8:	08c0      	lsrs	r0, r0, #3
 80112ba:	2200      	movs	r2, #0
 80112bc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80112c0:	6123      	str	r3, [r4, #16]
 80112c2:	3801      	subs	r0, #1
 80112c4:	60a2      	str	r2, [r4, #8]
 80112c6:	6060      	str	r0, [r4, #4]
 80112c8:	8019      	strh	r1, [r3, #0]
 80112ca:	8059      	strh	r1, [r3, #2]
 80112cc:	809a      	strh	r2, [r3, #4]
 80112ce:	80da      	strh	r2, [r3, #6]
 80112d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80112d2:	f023 0301 	bic.w	r3, r3, #1
 80112d6:	f043 0302 	orr.w	r3, r3, #2
 80112da:	6263      	str	r3, [r4, #36]	@ 0x24
 80112dc:	bd10      	pop	{r4, pc}
	...

080112e0 <_ZN8touchgfx7OutlineC1Ev>:
 80112e0:	4b0a      	ldr	r3, [pc, #40]	@ (801130c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80112e2:	b510      	push	{r4, lr}
 80112e4:	6003      	str	r3, [r0, #0]
 80112e6:	2300      	movs	r3, #0
 80112e8:	4604      	mov	r4, r0
 80112ea:	6243      	str	r3, [r0, #36]	@ 0x24
 80112ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80112f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112f4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80112f8:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80112fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011300:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8011304:	f7ff ffd0 	bl	80112a8 <_ZN8touchgfx7Outline5resetEv>
 8011308:	4620      	mov	r0, r4
 801130a:	bd10      	pop	{r4, pc}
 801130c:	0802566c 	.word	0x0802566c

08011310 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8011310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011314:	b093      	sub	sp, #76	@ 0x4c
 8011316:	1156      	asrs	r6, r2, #5
 8011318:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801131a:	9305      	str	r3, [sp, #20]
 801131c:	1153      	asrs	r3, r2, #5
 801131e:	f004 051f 	and.w	r5, r4, #31
 8011322:	9303      	str	r3, [sp, #12]
 8011324:	1163      	asrs	r3, r4, #5
 8011326:	9504      	str	r5, [sp, #16]
 8011328:	1165      	asrs	r5, r4, #5
 801132a:	9306      	str	r3, [sp, #24]
 801132c:	f002 031f 	and.w	r3, r2, #31
 8011330:	42ae      	cmp	r6, r5
 8011332:	f040 80f4 	bne.w	801151e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8011336:	9c04      	ldr	r4, [sp, #16]
 8011338:	9a05      	ldr	r2, [sp, #20]
 801133a:	42a3      	cmp	r3, r4
 801133c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8011340:	6902      	ldr	r2, [r0, #16]
 8011342:	d125      	bne.n	8011390 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8011344:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011348:	459e      	cmp	lr, r3
 801134a:	d103      	bne.n	8011354 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801134c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011350:	429e      	cmp	r6, r3
 8011352:	d035      	beq.n	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011354:	88d1      	ldrh	r1, [r2, #6]
 8011356:	8893      	ldrh	r3, [r2, #4]
 8011358:	430b      	orrs	r3, r1
 801135a:	d010      	beq.n	801137e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801135c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011360:	2b00      	cmp	r3, #0
 8011362:	db0c      	blt.n	801137e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011364:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011366:	428b      	cmp	r3, r1
 8011368:	da09      	bge.n	801137e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801136a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801136e:	428b      	cmp	r3, r1
 8011370:	f103 0301 	add.w	r3, r3, #1
 8011374:	bf38      	it	cc
 8011376:	3208      	addcc	r2, #8
 8011378:	6083      	str	r3, [r0, #8]
 801137a:	bf38      	it	cc
 801137c:	6102      	strcc	r2, [r0, #16]
 801137e:	6903      	ldr	r3, [r0, #16]
 8011380:	9a03      	ldr	r2, [sp, #12]
 8011382:	f8a3 e000 	strh.w	lr, [r3]
 8011386:	805a      	strh	r2, [r3, #2]
 8011388:	2200      	movs	r2, #0
 801138a:	809a      	strh	r2, [r3, #4]
 801138c:	80da      	strh	r2, [r3, #6]
 801138e:	e017      	b.n	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011390:	9c05      	ldr	r4, [sp, #20]
 8011392:	114e      	asrs	r6, r1, #5
 8011394:	f001 0c1f 	and.w	ip, r1, #31
 8011398:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801139c:	f004 041f 	and.w	r4, r4, #31
 80113a0:	4576      	cmp	r6, lr
 80113a2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80113a6:	9402      	str	r4, [sp, #8]
 80113a8:	9c04      	ldr	r4, [sp, #16]
 80113aa:	eba4 0403 	sub.w	r4, r4, r3
 80113ae:	d10a      	bne.n	80113c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80113b0:	9b02      	ldr	r3, [sp, #8]
 80113b2:	44a0      	add	r8, r4
 80113b4:	449c      	add	ip, r3
 80113b6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80113ba:	fb04 a40c 	mla	r4, r4, ip, sl
 80113be:	80d4      	strh	r4, [r2, #6]
 80113c0:	b013      	add	sp, #76	@ 0x4c
 80113c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c6:	9d05      	ldr	r5, [sp, #20]
 80113c8:	1a69      	subs	r1, r5, r1
 80113ca:	bf51      	iteee	pl
 80113cc:	f1cc 0520 	rsbpl	r5, ip, #32
 80113d0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80113d4:	4249      	negmi	r1, r1
 80113d6:	2500      	movmi	r5, #0
 80113d8:	bf5d      	ittte	pl
 80113da:	436c      	mulpl	r4, r5
 80113dc:	2520      	movpl	r5, #32
 80113de:	f04f 0901 	movpl.w	r9, #1
 80113e2:	f04f 39ff 	movmi.w	r9, #4294967295
 80113e6:	9501      	str	r5, [sp, #4]
 80113e8:	9f01      	ldr	r7, [sp, #4]
 80113ea:	444e      	add	r6, r9
 80113ec:	fb94 f5f1 	sdiv	r5, r4, r1
 80113f0:	fb01 4415 	mls	r4, r1, r5, r4
 80113f4:	44bc      	add	ip, r7
 80113f6:	2c00      	cmp	r4, #0
 80113f8:	bfbc      	itt	lt
 80113fa:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80113fe:	1864      	addlt	r4, r4, r1
 8011400:	44a8      	add	r8, r5
 8011402:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011406:	f8a2 8004 	strh.w	r8, [r2, #4]
 801140a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801140e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011412:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011416:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801141a:	ea58 0202 	orrs.w	r2, r8, r2
 801141e:	d011      	beq.n	8011444 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011420:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011424:	f1b8 0f00 	cmp.w	r8, #0
 8011428:	db0c      	blt.n	8011444 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801142a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801142c:	4590      	cmp	r8, r2
 801142e:	da09      	bge.n	8011444 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011430:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011434:	4590      	cmp	r8, r2
 8011436:	bf3c      	itt	cc
 8011438:	f10c 0208 	addcc.w	r2, ip, #8
 801143c:	6102      	strcc	r2, [r0, #16]
 801143e:	f108 0201 	add.w	r2, r8, #1
 8011442:	6082      	str	r2, [r0, #8]
 8011444:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011448:	2700      	movs	r7, #0
 801144a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801144e:	45b6      	cmp	lr, r6
 8011450:	f8ac 6000 	strh.w	r6, [ip]
 8011454:	442b      	add	r3, r5
 8011456:	f8ac 2002 	strh.w	r2, [ip, #2]
 801145a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801145e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011462:	d04b      	beq.n	80114fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8011464:	9f04      	ldr	r7, [sp, #16]
 8011466:	1a64      	subs	r4, r4, r1
 8011468:	f04f 0a00 	mov.w	sl, #0
 801146c:	1aff      	subs	r7, r7, r3
 801146e:	443d      	add	r5, r7
 8011470:	016d      	lsls	r5, r5, #5
 8011472:	fb95 f8f1 	sdiv	r8, r5, r1
 8011476:	fb01 5518 	mls	r5, r1, r8, r5
 801147a:	2d00      	cmp	r5, #0
 801147c:	bfbc      	itt	lt
 801147e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011482:	186d      	addlt	r5, r5, r1
 8011484:	f108 0701 	add.w	r7, r8, #1
 8011488:	9703      	str	r7, [sp, #12]
 801148a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801148e:	1964      	adds	r4, r4, r5
 8011490:	444e      	add	r6, r9
 8011492:	bf54      	ite	pl
 8011494:	9f03      	ldrpl	r7, [sp, #12]
 8011496:	4647      	movmi	r7, r8
 8011498:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801149c:	bf58      	it	pl
 801149e:	1a64      	subpl	r4, r4, r1
 80114a0:	443b      	add	r3, r7
 80114a2:	44bb      	add	fp, r7
 80114a4:	f8ac b004 	strh.w	fp, [ip, #4]
 80114a8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80114ac:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80114b0:	f8ac b006 	strh.w	fp, [ip, #6]
 80114b4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80114b8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80114bc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80114c0:	ea5b 0707 	orrs.w	r7, fp, r7
 80114c4:	d011      	beq.n	80114ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80114c6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80114ca:	f1bb 0f00 	cmp.w	fp, #0
 80114ce:	db0c      	blt.n	80114ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80114d0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80114d2:	45bb      	cmp	fp, r7
 80114d4:	da09      	bge.n	80114ea <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80114d6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80114da:	45bb      	cmp	fp, r7
 80114dc:	bf3c      	itt	cc
 80114de:	f10c 0708 	addcc.w	r7, ip, #8
 80114e2:	6107      	strcc	r7, [r0, #16]
 80114e4:	f10b 0701 	add.w	r7, fp, #1
 80114e8:	6087      	str	r7, [r0, #8]
 80114ea:	6907      	ldr	r7, [r0, #16]
 80114ec:	45b6      	cmp	lr, r6
 80114ee:	803e      	strh	r6, [r7, #0]
 80114f0:	807a      	strh	r2, [r7, #2]
 80114f2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80114f6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80114fa:	d1c6      	bne.n	801148a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80114fc:	9a04      	ldr	r2, [sp, #16]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	6902      	ldr	r2, [r0, #16]
 8011502:	8891      	ldrh	r1, [r2, #4]
 8011504:	88d6      	ldrh	r6, [r2, #6]
 8011506:	4419      	add	r1, r3
 8011508:	8091      	strh	r1, [r2, #4]
 801150a:	9902      	ldr	r1, [sp, #8]
 801150c:	f101 0c20 	add.w	ip, r1, #32
 8011510:	9901      	ldr	r1, [sp, #4]
 8011512:	ebac 0c01 	sub.w	ip, ip, r1
 8011516:	fb03 630c 	mla	r3, r3, ip, r6
 801151a:	80d3      	strh	r3, [r2, #6]
 801151c:	e750      	b.n	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801151e:	9d05      	ldr	r5, [sp, #20]
 8011520:	1aa2      	subs	r2, r4, r2
 8011522:	eba5 0501 	sub.w	r5, r5, r1
 8011526:	9202      	str	r2, [sp, #8]
 8011528:	9508      	str	r5, [sp, #32]
 801152a:	f140 8128 	bpl.w	801177e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801152e:	9a03      	ldr	r2, [sp, #12]
 8011530:	2a00      	cmp	r2, #0
 8011532:	f6ff af45 	blt.w	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011536:	9a02      	ldr	r2, [sp, #8]
 8011538:	f04f 34ff 	mov.w	r4, #4294967295
 801153c:	4252      	negs	r2, r2
 801153e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011540:	2400      	movs	r4, #0
 8011542:	9202      	str	r2, [sp, #8]
 8011544:	9a06      	ldr	r2, [sp, #24]
 8011546:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801154a:	9206      	str	r2, [sp, #24]
 801154c:	462a      	mov	r2, r5
 801154e:	435a      	muls	r2, r3
 8011550:	9401      	str	r4, [sp, #4]
 8011552:	9c02      	ldr	r4, [sp, #8]
 8011554:	9d02      	ldr	r5, [sp, #8]
 8011556:	fb92 f4f4 	sdiv	r4, r2, r4
 801155a:	fb05 2214 	mls	r2, r5, r4, r2
 801155e:	2a00      	cmp	r2, #0
 8011560:	9207      	str	r2, [sp, #28]
 8011562:	bfbc      	itt	lt
 8011564:	1952      	addlt	r2, r2, r5
 8011566:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801156a:	6905      	ldr	r5, [r0, #16]
 801156c:	bfb8      	it	lt
 801156e:	9207      	strlt	r2, [sp, #28]
 8011570:	eb04 0901 	add.w	r9, r4, r1
 8011574:	9a01      	ldr	r2, [sp, #4]
 8011576:	ea4f 1669 	mov.w	r6, r9, asr #5
 801157a:	429a      	cmp	r2, r3
 801157c:	f040 8111 	bne.w	80117a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8011580:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011584:	429e      	cmp	r6, r3
 8011586:	d104      	bne.n	8011592 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8011588:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801158c:	9a03      	ldr	r2, [sp, #12]
 801158e:	429a      	cmp	r2, r3
 8011590:	d01b      	beq.n	80115ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011592:	88ea      	ldrh	r2, [r5, #6]
 8011594:	88ab      	ldrh	r3, [r5, #4]
 8011596:	4313      	orrs	r3, r2
 8011598:	d010      	beq.n	80115bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801159a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801159e:	2a00      	cmp	r2, #0
 80115a0:	db0c      	blt.n	80115bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80115a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80115a4:	429a      	cmp	r2, r3
 80115a6:	da09      	bge.n	80115bc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80115a8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	f102 0201 	add.w	r2, r2, #1
 80115b2:	bf38      	it	cc
 80115b4:	3508      	addcc	r5, #8
 80115b6:	6082      	str	r2, [r0, #8]
 80115b8:	bf38      	it	cc
 80115ba:	6105      	strcc	r5, [r0, #16]
 80115bc:	6903      	ldr	r3, [r0, #16]
 80115be:	9a03      	ldr	r2, [sp, #12]
 80115c0:	801e      	strh	r6, [r3, #0]
 80115c2:	805a      	strh	r2, [r3, #2]
 80115c4:	2200      	movs	r2, #0
 80115c6:	809a      	strh	r2, [r3, #4]
 80115c8:	80da      	strh	r2, [r3, #6]
 80115ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115cc:	9a03      	ldr	r2, [sp, #12]
 80115ce:	6901      	ldr	r1, [r0, #16]
 80115d0:	441a      	add	r2, r3
 80115d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80115d6:	42b3      	cmp	r3, r6
 80115d8:	d103      	bne.n	80115e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80115da:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d01a      	beq.n	8011618 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80115e2:	88cc      	ldrh	r4, [r1, #6]
 80115e4:	888b      	ldrh	r3, [r1, #4]
 80115e6:	4323      	orrs	r3, r4
 80115e8:	d010      	beq.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80115ea:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80115ee:	2c00      	cmp	r4, #0
 80115f0:	db0c      	blt.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80115f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80115f4:	429c      	cmp	r4, r3
 80115f6:	da09      	bge.n	801160c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80115f8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80115fc:	429c      	cmp	r4, r3
 80115fe:	f104 0401 	add.w	r4, r4, #1
 8011602:	bf38      	it	cc
 8011604:	3108      	addcc	r1, #8
 8011606:	6084      	str	r4, [r0, #8]
 8011608:	bf38      	it	cc
 801160a:	6101      	strcc	r1, [r0, #16]
 801160c:	6903      	ldr	r3, [r0, #16]
 801160e:	2100      	movs	r1, #0
 8011610:	801e      	strh	r6, [r3, #0]
 8011612:	805a      	strh	r2, [r3, #2]
 8011614:	8099      	strh	r1, [r3, #4]
 8011616:	80d9      	strh	r1, [r3, #6]
 8011618:	9b06      	ldr	r3, [sp, #24]
 801161a:	4293      	cmp	r3, r2
 801161c:	f000 8082 	beq.w	8011724 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8011620:	9b08      	ldr	r3, [sp, #32]
 8011622:	9902      	ldr	r1, [sp, #8]
 8011624:	015b      	lsls	r3, r3, #5
 8011626:	9c02      	ldr	r4, [sp, #8]
 8011628:	fb93 f1f1 	sdiv	r1, r3, r1
 801162c:	fb04 3311 	mls	r3, r4, r1, r3
 8011630:	9103      	str	r1, [sp, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	9308      	str	r3, [sp, #32]
 8011636:	da04      	bge.n	8011642 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011638:	1e4b      	subs	r3, r1, #1
 801163a:	9303      	str	r3, [sp, #12]
 801163c:	9b08      	ldr	r3, [sp, #32]
 801163e:	4423      	add	r3, r4
 8011640:	9308      	str	r3, [sp, #32]
 8011642:	9b07      	ldr	r3, [sp, #28]
 8011644:	464f      	mov	r7, r9
 8011646:	9902      	ldr	r1, [sp, #8]
 8011648:	2600      	movs	r6, #0
 801164a:	1a5b      	subs	r3, r3, r1
 801164c:	9307      	str	r3, [sp, #28]
 801164e:	9b01      	ldr	r3, [sp, #4]
 8011650:	f1c3 0320 	rsb	r3, r3, #32
 8011654:	930e      	str	r3, [sp, #56]	@ 0x38
 8011656:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011658:	9b01      	ldr	r3, [sp, #4]
 801165a:	1a5b      	subs	r3, r3, r1
 801165c:	930a      	str	r3, [sp, #40]	@ 0x28
 801165e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8011662:	185b      	adds	r3, r3, r1
 8011664:	bf58      	it	pl
 8011666:	9902      	ldrpl	r1, [sp, #8]
 8011668:	9307      	str	r3, [sp, #28]
 801166a:	bf57      	itett	pl
 801166c:	1a5b      	subpl	r3, r3, r1
 801166e:	9903      	ldrmi	r1, [sp, #12]
 8011670:	9307      	strpl	r3, [sp, #28]
 8011672:	9b03      	ldrpl	r3, [sp, #12]
 8011674:	bf58      	it	pl
 8011676:	1c59      	addpl	r1, r3, #1
 8011678:	2a00      	cmp	r2, #0
 801167a:	4489      	add	r9, r1
 801167c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8011680:	db2e      	blt.n	80116e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011682:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011684:	4293      	cmp	r3, r2
 8011686:	dd2b      	ble.n	80116e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011688:	9c01      	ldr	r4, [sp, #4]
 801168a:	6905      	ldr	r5, [r0, #16]
 801168c:	46a0      	mov	r8, r4
 801168e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8011690:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011694:	45a0      	cmp	r8, r4
 8011696:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801169a:	f040 814c 	bne.w	8011936 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801169e:	f9b5 1000 	ldrsh.w	r1, [r5]
 80116a2:	4551      	cmp	r1, sl
 80116a4:	d103      	bne.n	80116ae <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80116a6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80116aa:	4291      	cmp	r1, r2
 80116ac:	d018      	beq.n	80116e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80116ae:	ea5c 010e 	orrs.w	r1, ip, lr
 80116b2:	d00f      	beq.n	80116d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80116b4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80116b8:	2900      	cmp	r1, #0
 80116ba:	db0b      	blt.n	80116d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80116bc:	428b      	cmp	r3, r1
 80116be:	dd09      	ble.n	80116d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80116c0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80116c4:	4299      	cmp	r1, r3
 80116c6:	f101 0101 	add.w	r1, r1, #1
 80116ca:	bf38      	it	cc
 80116cc:	3508      	addcc	r5, #8
 80116ce:	6081      	str	r1, [r0, #8]
 80116d0:	bf38      	it	cc
 80116d2:	6105      	strcc	r5, [r0, #16]
 80116d4:	6903      	ldr	r3, [r0, #16]
 80116d6:	f8a3 a000 	strh.w	sl, [r3]
 80116da:	805a      	strh	r2, [r3, #2]
 80116dc:	809e      	strh	r6, [r3, #4]
 80116de:	80de      	strh	r6, [r3, #6]
 80116e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116e2:	6901      	ldr	r1, [r0, #16]
 80116e4:	441a      	add	r2, r3
 80116e6:	88cc      	ldrh	r4, [r1, #6]
 80116e8:	888b      	ldrh	r3, [r1, #4]
 80116ea:	4323      	orrs	r3, r4
 80116ec:	d010      	beq.n	8011710 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80116ee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80116f2:	2c00      	cmp	r4, #0
 80116f4:	db0c      	blt.n	8011710 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80116f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80116f8:	429c      	cmp	r4, r3
 80116fa:	da09      	bge.n	8011710 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80116fc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011700:	429c      	cmp	r4, r3
 8011702:	f104 0401 	add.w	r4, r4, #1
 8011706:	bf38      	it	cc
 8011708:	3108      	addcc	r1, #8
 801170a:	6084      	str	r4, [r0, #8]
 801170c:	bf38      	it	cc
 801170e:	6101      	strcc	r1, [r0, #16]
 8011710:	6903      	ldr	r3, [r0, #16]
 8011712:	464f      	mov	r7, r9
 8011714:	f8a3 a000 	strh.w	sl, [r3]
 8011718:	805a      	strh	r2, [r3, #2]
 801171a:	809e      	strh	r6, [r3, #4]
 801171c:	80de      	strh	r6, [r3, #6]
 801171e:	9b06      	ldr	r3, [sp, #24]
 8011720:	4293      	cmp	r3, r2
 8011722:	d19c      	bne.n	801165e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011724:	9b01      	ldr	r3, [sp, #4]
 8011726:	6907      	ldr	r7, [r0, #16]
 8011728:	f1c3 0620 	rsb	r6, r3, #32
 801172c:	9b05      	ldr	r3, [sp, #20]
 801172e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8011732:	9b04      	ldr	r3, [sp, #16]
 8011734:	429e      	cmp	r6, r3
 8011736:	f040 81c7 	bne.w	8011ac8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801173a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801173e:	459e      	cmp	lr, r3
 8011740:	d104      	bne.n	801174c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8011742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011746:	429a      	cmp	r2, r3
 8011748:	f43f ae3a 	beq.w	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801174c:	88f9      	ldrh	r1, [r7, #6]
 801174e:	88bb      	ldrh	r3, [r7, #4]
 8011750:	430b      	orrs	r3, r1
 8011752:	d010      	beq.n	8011776 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011758:	2b00      	cmp	r3, #0
 801175a:	db0c      	blt.n	8011776 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801175c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801175e:	428b      	cmp	r3, r1
 8011760:	da09      	bge.n	8011776 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011762:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011766:	428b      	cmp	r3, r1
 8011768:	f103 0301 	add.w	r3, r3, #1
 801176c:	bf38      	it	cc
 801176e:	3708      	addcc	r7, #8
 8011770:	6083      	str	r3, [r0, #8]
 8011772:	bf38      	it	cc
 8011774:	6107      	strcc	r7, [r0, #16]
 8011776:	6903      	ldr	r3, [r0, #16]
 8011778:	f8a3 e000 	strh.w	lr, [r3]
 801177c:	e603      	b.n	8011386 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801177e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011780:	9c03      	ldr	r4, [sp, #12]
 8011782:	42a2      	cmp	r2, r4
 8011784:	f6ff ae1c 	blt.w	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011788:	9c06      	ldr	r4, [sp, #24]
 801178a:	42a2      	cmp	r2, r4
 801178c:	9c08      	ldr	r4, [sp, #32]
 801178e:	bfbc      	itt	lt
 8011790:	3201      	addlt	r2, #1
 8011792:	9206      	strlt	r2, [sp, #24]
 8011794:	f1c3 0220 	rsb	r2, r3, #32
 8011798:	4362      	muls	r2, r4
 801179a:	2401      	movs	r4, #1
 801179c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801179e:	2420      	movs	r4, #32
 80117a0:	e6d6      	b.n	8011550 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80117a2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80117a6:	f009 021f 	and.w	r2, r9, #31
 80117aa:	f001 011f 	and.w	r1, r1, #31
 80117ae:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80117b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80117b4:	45b0      	cmp	r8, r6
 80117b6:	9a01      	ldr	r2, [sp, #4]
 80117b8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80117bc:	eba2 0203 	sub.w	r2, r2, r3
 80117c0:	d108      	bne.n	80117d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80117c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117c4:	4496      	add	lr, r2
 80117c6:	4419      	add	r1, r3
 80117c8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80117cc:	fb02 a101 	mla	r1, r2, r1, sl
 80117d0:	80e9      	strh	r1, [r5, #6]
 80117d2:	e6fa      	b.n	80115ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80117d4:	2c00      	cmp	r4, #0
 80117d6:	f2c0 80a7 	blt.w	8011928 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80117da:	2701      	movs	r7, #1
 80117dc:	f1c1 0c20 	rsb	ip, r1, #32
 80117e0:	970a      	str	r7, [sp, #40]	@ 0x28
 80117e2:	2720      	movs	r7, #32
 80117e4:	fb02 f20c 	mul.w	r2, r2, ip
 80117e8:	9709      	str	r7, [sp, #36]	@ 0x24
 80117ea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80117ec:	fb92 fcf4 	sdiv	ip, r2, r4
 80117f0:	fb04 221c 	mls	r2, r4, ip, r2
 80117f4:	4439      	add	r1, r7
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	bfbc      	itt	lt
 80117fa:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80117fe:	1912      	addlt	r2, r2, r4
 8011800:	fb0c a101 	mla	r1, ip, r1, sl
 8011804:	44e6      	add	lr, ip
 8011806:	80e9      	strh	r1, [r5, #6]
 8011808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801180a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801180e:	eb08 0501 	add.w	r5, r8, r1
 8011812:	6901      	ldr	r1, [r0, #16]
 8011814:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8011818:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801181c:	ea58 070e 	orrs.w	r7, r8, lr
 8011820:	d010      	beq.n	8011844 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011822:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011826:	f1be 0f00 	cmp.w	lr, #0
 801182a:	db0b      	blt.n	8011844 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801182c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801182e:	45be      	cmp	lr, r7
 8011830:	da08      	bge.n	8011844 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011832:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011836:	45be      	cmp	lr, r7
 8011838:	bf3c      	itt	cc
 801183a:	3108      	addcc	r1, #8
 801183c:	6101      	strcc	r1, [r0, #16]
 801183e:	f10e 0101 	add.w	r1, lr, #1
 8011842:	6081      	str	r1, [r0, #8]
 8011844:	6901      	ldr	r1, [r0, #16]
 8011846:	f04f 0e00 	mov.w	lr, #0
 801184a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801184e:	42ae      	cmp	r6, r5
 8011850:	800d      	strh	r5, [r1, #0]
 8011852:	4463      	add	r3, ip
 8011854:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011858:	f8a1 e004 	strh.w	lr, [r1, #4]
 801185c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8011860:	d053      	beq.n	801190a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8011862:	9901      	ldr	r1, [sp, #4]
 8011864:	1b12      	subs	r2, r2, r4
 8011866:	1ac9      	subs	r1, r1, r3
 8011868:	4461      	add	r1, ip
 801186a:	0149      	lsls	r1, r1, #5
 801186c:	fb91 fef4 	sdiv	lr, r1, r4
 8011870:	fb04 111e 	mls	r1, r4, lr, r1
 8011874:	2900      	cmp	r1, #0
 8011876:	bfbc      	itt	lt
 8011878:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801187c:	1909      	addlt	r1, r1, r4
 801187e:	f10e 0701 	add.w	r7, lr, #1
 8011882:	970d      	str	r7, [sp, #52]	@ 0x34
 8011884:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8011888:	1852      	adds	r2, r2, r1
 801188a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801188c:	bf54      	ite	pl
 801188e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8011892:	46f4      	movmi	ip, lr
 8011894:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8011898:	bf58      	it	pl
 801189a:	1b12      	subpl	r2, r2, r4
 801189c:	4463      	add	r3, ip
 801189e:	443d      	add	r5, r7
 80118a0:	44e3      	add	fp, ip
 80118a2:	f8aa b004 	strh.w	fp, [sl, #4]
 80118a6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80118aa:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80118ae:	f8aa b006 	strh.w	fp, [sl, #6]
 80118b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80118b6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80118ba:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80118be:	ea5b 070a 	orrs.w	r7, fp, sl
 80118c2:	d014      	beq.n	80118ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80118c4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80118c8:	f1ba 0f00 	cmp.w	sl, #0
 80118cc:	db0f      	blt.n	80118ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80118ce:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80118d0:	45ba      	cmp	sl, r7
 80118d2:	da0c      	bge.n	80118ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80118d4:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80118d8:	45ba      	cmp	sl, r7
 80118da:	f10a 0a01 	add.w	sl, sl, #1
 80118de:	bf38      	it	cc
 80118e0:	f10c 0c08 	addcc.w	ip, ip, #8
 80118e4:	f8c0 a008 	str.w	sl, [r0, #8]
 80118e8:	bf38      	it	cc
 80118ea:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80118ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80118f2:	f04f 0700 	mov.w	r7, #0
 80118f6:	42ae      	cmp	r6, r5
 80118f8:	f8ac 5000 	strh.w	r5, [ip]
 80118fc:	f8ac 8002 	strh.w	r8, [ip, #2]
 8011900:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011904:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011908:	d1bc      	bne.n	8011884 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801190a:	6904      	ldr	r4, [r0, #16]
 801190c:	9a01      	ldr	r2, [sp, #4]
 801190e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	88a2      	ldrh	r2, [r4, #4]
 8011914:	3120      	adds	r1, #32
 8011916:	441a      	add	r2, r3
 8011918:	80a2      	strh	r2, [r4, #4]
 801191a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801191c:	1a89      	subs	r1, r1, r2
 801191e:	88e2      	ldrh	r2, [r4, #6]
 8011920:	fb03 2301 	mla	r3, r3, r1, r2
 8011924:	80e3      	strh	r3, [r4, #6]
 8011926:	e650      	b.n	80115ca <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011928:	f04f 37ff 	mov.w	r7, #4294967295
 801192c:	434a      	muls	r2, r1
 801192e:	4264      	negs	r4, r4
 8011930:	970a      	str	r7, [sp, #40]	@ 0x28
 8011932:	2700      	movs	r7, #0
 8011934:	e758      	b.n	80117e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8011936:	ea4f 1867 	mov.w	r8, r7, asr #5
 801193a:	f009 031f 	and.w	r3, r9, #31
 801193e:	f007 071f 	and.w	r7, r7, #31
 8011942:	fa1f fc8c 	uxth.w	ip, ip
 8011946:	45d0      	cmp	r8, sl
 8011948:	930f      	str	r3, [sp, #60]	@ 0x3c
 801194a:	fa1f fe8e 	uxth.w	lr, lr
 801194e:	d10a      	bne.n	8011966 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8011950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011952:	449c      	add	ip, r3
 8011954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011956:	441f      	add	r7, r3
 8011958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801195a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801195e:	fb03 e707 	mla	r7, r3, r7, lr
 8011962:	80ef      	strh	r7, [r5, #6]
 8011964:	e6bc      	b.n	80116e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011966:	2900      	cmp	r1, #0
 8011968:	f2c0 80a6 	blt.w	8011ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801196c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801196e:	f1c7 0320 	rsb	r3, r7, #32
 8011972:	4363      	muls	r3, r4
 8011974:	2401      	movs	r4, #1
 8011976:	940d      	str	r4, [sp, #52]	@ 0x34
 8011978:	2420      	movs	r4, #32
 801197a:	940c      	str	r4, [sp, #48]	@ 0x30
 801197c:	fb93 f4f1 	sdiv	r4, r3, r1
 8011980:	fb01 3b14 	mls	fp, r1, r4, r3
 8011984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011986:	f1bb 0f00 	cmp.w	fp, #0
 801198a:	441f      	add	r7, r3
 801198c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801198e:	bfbc      	itt	lt
 8011990:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011994:	448b      	addlt	fp, r1
 8011996:	fb04 e707 	mla	r7, r4, r7, lr
 801199a:	44a4      	add	ip, r4
 801199c:	80ef      	strh	r7, [r5, #6]
 801199e:	f8a5 c004 	strh.w	ip, [r5, #4]
 80119a2:	eb08 0503 	add.w	r5, r8, r3
 80119a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80119aa:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80119ae:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80119b2:	ea5e 0307 	orrs.w	r3, lr, r7
 80119b6:	d011      	beq.n	80119dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80119b8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80119bc:	f1be 0f00 	cmp.w	lr, #0
 80119c0:	db0c      	blt.n	80119dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80119c2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80119c4:	45be      	cmp	lr, r7
 80119c6:	da09      	bge.n	80119dc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80119c8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80119cc:	45be      	cmp	lr, r7
 80119ce:	bf3c      	itt	cc
 80119d0:	f10c 0708 	addcc.w	r7, ip, #8
 80119d4:	6107      	strcc	r7, [r0, #16]
 80119d6:	f10e 0701 	add.w	r7, lr, #1
 80119da:	6087      	str	r7, [r0, #8]
 80119dc:	6907      	ldr	r7, [r0, #16]
 80119de:	b213      	sxth	r3, r2
 80119e0:	4555      	cmp	r5, sl
 80119e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80119e4:	807b      	strh	r3, [r7, #2]
 80119e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e8:	803d      	strh	r5, [r7, #0]
 80119ea:	80be      	strh	r6, [r7, #4]
 80119ec:	eb04 0c03 	add.w	ip, r4, r3
 80119f0:	80fe      	strh	r6, [r7, #6]
 80119f2:	d050      	beq.n	8011a96 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80119f4:	9b01      	ldr	r3, [sp, #4]
 80119f6:	eba3 070c 	sub.w	r7, r3, ip
 80119fa:	ebab 0301 	sub.w	r3, fp, r1
 80119fe:	443c      	add	r4, r7
 8011a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a02:	0164      	lsls	r4, r4, #5
 8011a04:	fb94 f8f1 	sdiv	r8, r4, r1
 8011a08:	fb01 4418 	mls	r4, r1, r8, r4
 8011a0c:	2c00      	cmp	r4, #0
 8011a0e:	bfbc      	itt	lt
 8011a10:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011a14:	1864      	addlt	r4, r4, r1
 8011a16:	f108 0701 	add.w	r7, r8, #1
 8011a1a:	9711      	str	r7, [sp, #68]	@ 0x44
 8011a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a1e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011a22:	191b      	adds	r3, r3, r4
 8011a24:	f8be b004 	ldrh.w	fp, [lr, #4]
 8011a28:	bf54      	ite	pl
 8011a2a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8011a2c:	4647      	movmi	r7, r8
 8011a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a30:	bf58      	it	pl
 8011a32:	1a5b      	subpl	r3, r3, r1
 8011a34:	44bb      	add	fp, r7
 8011a36:	44bc      	add	ip, r7
 8011a38:	bf58      	it	pl
 8011a3a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8011a3c:	f8ae b004 	strh.w	fp, [lr, #4]
 8011a40:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011a44:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011a48:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011a4a:	f8ae b006 	strh.w	fp, [lr, #6]
 8011a4e:	443d      	add	r5, r7
 8011a50:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011a54:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011a58:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8011a5c:	ea5b 0307 	orrs.w	r3, fp, r7
 8011a60:	d011      	beq.n	8011a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011a62:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8011a66:	f1bb 0f00 	cmp.w	fp, #0
 8011a6a:	db0c      	blt.n	8011a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011a6c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011a6e:	45bb      	cmp	fp, r7
 8011a70:	da09      	bge.n	8011a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011a72:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011a76:	45bb      	cmp	fp, r7
 8011a78:	bf3c      	itt	cc
 8011a7a:	f10e 0708 	addcc.w	r7, lr, #8
 8011a7e:	6107      	strcc	r7, [r0, #16]
 8011a80:	f10b 0701 	add.w	r7, fp, #1
 8011a84:	6087      	str	r7, [r0, #8]
 8011a86:	6907      	ldr	r7, [r0, #16]
 8011a88:	4555      	cmp	r5, sl
 8011a8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a8c:	803d      	strh	r5, [r7, #0]
 8011a8e:	807b      	strh	r3, [r7, #2]
 8011a90:	80be      	strh	r6, [r7, #4]
 8011a92:	80fe      	strh	r6, [r7, #6]
 8011a94:	d1c2      	bne.n	8011a1c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8011a96:	9b01      	ldr	r3, [sp, #4]
 8011a98:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8011a9a:	eba3 0c0c 	sub.w	ip, r3, ip
 8011a9e:	6903      	ldr	r3, [r0, #16]
 8011aa0:	3720      	adds	r7, #32
 8011aa2:	8899      	ldrh	r1, [r3, #4]
 8011aa4:	4461      	add	r1, ip
 8011aa6:	8099      	strh	r1, [r3, #4]
 8011aa8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011aaa:	1a7f      	subs	r7, r7, r1
 8011aac:	88d9      	ldrh	r1, [r3, #6]
 8011aae:	fb0c 1c07 	mla	ip, ip, r7, r1
 8011ab2:	f8a3 c006 	strh.w	ip, [r3, #6]
 8011ab6:	e613      	b.n	80116e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8011abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011abe:	4249      	negs	r1, r1
 8011ac0:	940d      	str	r4, [sp, #52]	@ 0x34
 8011ac2:	2400      	movs	r4, #0
 8011ac4:	437b      	muls	r3, r7
 8011ac6:	e758      	b.n	801197a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8011ac8:	9905      	ldr	r1, [sp, #20]
 8011aca:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8011ace:	f009 0c1f 	and.w	ip, r9, #31
 8011ad2:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8011ad6:	f001 011f 	and.w	r1, r1, #31
 8011ada:	45f3      	cmp	fp, lr
 8011adc:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8011ae0:	9102      	str	r1, [sp, #8]
 8011ae2:	9904      	ldr	r1, [sp, #16]
 8011ae4:	eba1 0406 	sub.w	r4, r1, r6
 8011ae8:	d108      	bne.n	8011afc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8011aea:	9b02      	ldr	r3, [sp, #8]
 8011aec:	44a0      	add	r8, r4
 8011aee:	449c      	add	ip, r3
 8011af0:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011af4:	fb04 a40c 	mla	r4, r4, ip, sl
 8011af8:	80fc      	strh	r4, [r7, #6]
 8011afa:	e461      	b.n	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011afc:	9905      	ldr	r1, [sp, #20]
 8011afe:	ebb1 0109 	subs.w	r1, r1, r9
 8011b02:	bf51      	iteee	pl
 8011b04:	f1cc 0520 	rsbpl	r5, ip, #32
 8011b08:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011b0c:	4249      	negmi	r1, r1
 8011b0e:	2500      	movmi	r5, #0
 8011b10:	bf5d      	ittte	pl
 8011b12:	436c      	mulpl	r4, r5
 8011b14:	2520      	movpl	r5, #32
 8011b16:	f04f 0901 	movpl.w	r9, #1
 8011b1a:	f04f 39ff 	movmi.w	r9, #4294967295
 8011b1e:	9501      	str	r5, [sp, #4]
 8011b20:	9b01      	ldr	r3, [sp, #4]
 8011b22:	fb94 f5f1 	sdiv	r5, r4, r1
 8011b26:	fb01 4415 	mls	r4, r1, r5, r4
 8011b2a:	449c      	add	ip, r3
 8011b2c:	eb0b 0309 	add.w	r3, fp, r9
 8011b30:	2c00      	cmp	r4, #0
 8011b32:	bfbc      	itt	lt
 8011b34:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011b38:	1864      	addlt	r4, r4, r1
 8011b3a:	44a8      	add	r8, r5
 8011b3c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011b40:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011b44:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011b48:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b4c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011b50:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011b54:	ea58 0707 	orrs.w	r7, r8, r7
 8011b58:	d011      	beq.n	8011b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011b5a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011b5e:	f1b8 0f00 	cmp.w	r8, #0
 8011b62:	db0c      	blt.n	8011b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011b64:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011b66:	45b8      	cmp	r8, r7
 8011b68:	da09      	bge.n	8011b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011b6a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8011b6e:	45b8      	cmp	r8, r7
 8011b70:	bf3c      	itt	cc
 8011b72:	f10c 0708 	addcc.w	r7, ip, #8
 8011b76:	6107      	strcc	r7, [r0, #16]
 8011b78:	f108 0701 	add.w	r7, r8, #1
 8011b7c:	6087      	str	r7, [r0, #8]
 8011b7e:	6907      	ldr	r7, [r0, #16]
 8011b80:	f04f 0c00 	mov.w	ip, #0
 8011b84:	b212      	sxth	r2, r2
 8011b86:	459e      	cmp	lr, r3
 8011b88:	803b      	strh	r3, [r7, #0]
 8011b8a:	442e      	add	r6, r5
 8011b8c:	807a      	strh	r2, [r7, #2]
 8011b8e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8011b92:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011b96:	d04b      	beq.n	8011c30 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8011b98:	9f04      	ldr	r7, [sp, #16]
 8011b9a:	1a64      	subs	r4, r4, r1
 8011b9c:	f04f 0a00 	mov.w	sl, #0
 8011ba0:	1bbf      	subs	r7, r7, r6
 8011ba2:	443d      	add	r5, r7
 8011ba4:	016d      	lsls	r5, r5, #5
 8011ba6:	fb95 f8f1 	sdiv	r8, r5, r1
 8011baa:	fb01 5518 	mls	r5, r1, r8, r5
 8011bae:	4565      	cmp	r5, ip
 8011bb0:	bfbc      	itt	lt
 8011bb2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011bb6:	186d      	addlt	r5, r5, r1
 8011bb8:	f108 0701 	add.w	r7, r8, #1
 8011bbc:	9703      	str	r7, [sp, #12]
 8011bbe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011bc2:	1964      	adds	r4, r4, r5
 8011bc4:	444b      	add	r3, r9
 8011bc6:	bf54      	ite	pl
 8011bc8:	9f03      	ldrpl	r7, [sp, #12]
 8011bca:	4647      	movmi	r7, r8
 8011bcc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011bd0:	bf58      	it	pl
 8011bd2:	1a64      	subpl	r4, r4, r1
 8011bd4:	443e      	add	r6, r7
 8011bd6:	44bb      	add	fp, r7
 8011bd8:	f8ac b004 	strh.w	fp, [ip, #4]
 8011bdc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011be0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011be4:	f8ac b006 	strh.w	fp, [ip, #6]
 8011be8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011bec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011bf0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011bf4:	ea5b 0707 	orrs.w	r7, fp, r7
 8011bf8:	d011      	beq.n	8011c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011bfa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8011bfe:	f1bb 0f00 	cmp.w	fp, #0
 8011c02:	db0c      	blt.n	8011c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011c04:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011c06:	45bb      	cmp	fp, r7
 8011c08:	da09      	bge.n	8011c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8011c0a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011c0e:	45bb      	cmp	fp, r7
 8011c10:	bf3c      	itt	cc
 8011c12:	f10c 0708 	addcc.w	r7, ip, #8
 8011c16:	6107      	strcc	r7, [r0, #16]
 8011c18:	f10b 0701 	add.w	r7, fp, #1
 8011c1c:	6087      	str	r7, [r0, #8]
 8011c1e:	6907      	ldr	r7, [r0, #16]
 8011c20:	459e      	cmp	lr, r3
 8011c22:	803b      	strh	r3, [r7, #0]
 8011c24:	807a      	strh	r2, [r7, #2]
 8011c26:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011c2a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011c2e:	d1c6      	bne.n	8011bbe <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8011c30:	9b04      	ldr	r3, [sp, #16]
 8011c32:	1b9e      	subs	r6, r3, r6
 8011c34:	6903      	ldr	r3, [r0, #16]
 8011c36:	889a      	ldrh	r2, [r3, #4]
 8011c38:	4432      	add	r2, r6
 8011c3a:	809a      	strh	r2, [r3, #4]
 8011c3c:	9a02      	ldr	r2, [sp, #8]
 8011c3e:	f102 0c20 	add.w	ip, r2, #32
 8011c42:	9a01      	ldr	r2, [sp, #4]
 8011c44:	ebac 0c02 	sub.w	ip, ip, r2
 8011c48:	88da      	ldrh	r2, [r3, #6]
 8011c4a:	fb06 260c 	mla	r6, r6, ip, r2
 8011c4e:	80de      	strh	r6, [r3, #6]
 8011c50:	f7ff bbb6 	b.w	80113c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08011c54 <_ZN8touchgfx7Outline6lineToEii>:
 8011c54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011c56:	079b      	lsls	r3, r3, #30
 8011c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c5a:	460e      	mov	r6, r1
 8011c5c:	4615      	mov	r5, r2
 8011c5e:	d511      	bpl.n	8011c84 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011c60:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8011c64:	ea86 0701 	eor.w	r7, r6, r1
 8011c68:	ea85 0302 	eor.w	r3, r5, r2
 8011c6c:	433b      	orrs	r3, r7
 8011c6e:	d009      	beq.n	8011c84 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011c70:	4633      	mov	r3, r6
 8011c72:	9500      	str	r5, [sp, #0]
 8011c74:	f7ff fb4c 	bl	8011310 <_ZN8touchgfx7Outline10renderLineEiiii>
 8011c78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011c7a:	f043 0301 	orr.w	r3, r3, #1
 8011c7e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8011c82:	6243      	str	r3, [r0, #36]	@ 0x24
 8011c84:	b003      	add	sp, #12
 8011c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c88 <_ZN8touchgfx7Outline6moveToEii>:
 8011c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c8a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	4604      	mov	r4, r0
 8011c90:	460e      	mov	r6, r1
 8011c92:	079a      	lsls	r2, r3, #30
 8011c94:	d401      	bmi.n	8011c9a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8011c96:	f7ff fb07 	bl	80112a8 <_ZN8touchgfx7Outline5resetEv>
 8011c9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011c9c:	07db      	lsls	r3, r3, #31
 8011c9e:	d504      	bpl.n	8011caa <_ZN8touchgfx7Outline6moveToEii+0x22>
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8011ca6:	f7ff ffd5 	bl	8011c54 <_ZN8touchgfx7Outline6lineToEii>
 8011caa:	6923      	ldr	r3, [r4, #16]
 8011cac:	1170      	asrs	r0, r6, #5
 8011cae:	1169      	asrs	r1, r5, #5
 8011cb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cb4:	4290      	cmp	r0, r2
 8011cb6:	d103      	bne.n	8011cc0 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8011cb8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011cbc:	4291      	cmp	r1, r2
 8011cbe:	d01a      	beq.n	8011cf6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8011cc0:	88df      	ldrh	r7, [r3, #6]
 8011cc2:	889a      	ldrh	r2, [r3, #4]
 8011cc4:	433a      	orrs	r2, r7
 8011cc6:	d010      	beq.n	8011cea <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011cc8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011ccc:	2a00      	cmp	r2, #0
 8011cce:	db0c      	blt.n	8011cea <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011cd0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011cd2:	42ba      	cmp	r2, r7
 8011cd4:	da09      	bge.n	8011cea <_ZN8touchgfx7Outline6moveToEii+0x62>
 8011cd6:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8011cda:	42ba      	cmp	r2, r7
 8011cdc:	f102 0201 	add.w	r2, r2, #1
 8011ce0:	bf38      	it	cc
 8011ce2:	3308      	addcc	r3, #8
 8011ce4:	60a2      	str	r2, [r4, #8]
 8011ce6:	bf38      	it	cc
 8011ce8:	6123      	strcc	r3, [r4, #16]
 8011cea:	6923      	ldr	r3, [r4, #16]
 8011cec:	2200      	movs	r2, #0
 8011cee:	8018      	strh	r0, [r3, #0]
 8011cf0:	8059      	strh	r1, [r3, #2]
 8011cf2:	809a      	strh	r2, [r3, #4]
 8011cf4:	80da      	strh	r2, [r3, #6]
 8011cf6:	6166      	str	r6, [r4, #20]
 8011cf8:	6225      	str	r5, [r4, #32]
 8011cfa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8011d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d04:	b0d0      	sub	sp, #320	@ 0x140
 8011d06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011d0a:	466c      	mov	r4, sp
 8011d0c:	4627      	mov	r7, r4
 8011d0e:	1a0d      	subs	r5, r1, r0
 8011d10:	f100 0308 	add.w	r3, r0, #8
 8011d14:	2d48      	cmp	r5, #72	@ 0x48
 8011d16:	f340 80d5 	ble.w	8011ec4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8011d1a:	112d      	asrs	r5, r5, #4
 8011d1c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011d20:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011d24:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8011d28:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8011d2c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011d30:	6816      	ldr	r6, [r2, #0]
 8011d32:	6006      	str	r6, [r0, #0]
 8011d34:	6856      	ldr	r6, [r2, #4]
 8011d36:	6046      	str	r6, [r0, #4]
 8011d38:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011d3c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8011d40:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011d44:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011d48:	f1a1 0208 	sub.w	r2, r1, #8
 8011d4c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8011d50:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8011d54:	4565      	cmp	r5, ip
 8011d56:	db06      	blt.n	8011d66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8011d58:	d119      	bne.n	8011d8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011d5a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8011d5e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8011d62:	42ae      	cmp	r6, r5
 8011d64:	dd13      	ble.n	8011d8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8011d66:	460e      	mov	r6, r1
 8011d68:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8011d6c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8011d70:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011d74:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8011d78:	601d      	str	r5, [r3, #0]
 8011d7a:	6875      	ldr	r5, [r6, #4]
 8011d7c:	605d      	str	r5, [r3, #4]
 8011d7e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011d82:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011d86:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011d8a:	f821 ec02 	strh.w	lr, [r1, #-2]
 8011d8e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011d92:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8011d96:	42ae      	cmp	r6, r5
 8011d98:	db06      	blt.n	8011da8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8011d9a:	d116      	bne.n	8011dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011d9c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8011da0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8011da4:	45ac      	cmp	ip, r5
 8011da6:	da10      	bge.n	8011dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011da8:	681d      	ldr	r5, [r3, #0]
 8011daa:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011dae:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011db2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011db6:	6005      	str	r5, [r0, #0]
 8011db8:	685d      	ldr	r5, [r3, #4]
 8011dba:	f8a0 8008 	strh.w	r8, [r0, #8]
 8011dbe:	6045      	str	r5, [r0, #4]
 8011dc0:	8146      	strh	r6, [r0, #10]
 8011dc2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8011dc6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011dca:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8011dce:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011dd2:	4565      	cmp	r5, ip
 8011dd4:	db06      	blt.n	8011de4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8011dd6:	d119      	bne.n	8011e0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011dd8:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8011ddc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011de0:	42ae      	cmp	r6, r5
 8011de2:	da13      	bge.n	8011e0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011de4:	460e      	mov	r6, r1
 8011de6:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011dea:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8011dee:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011df2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8011df6:	6005      	str	r5, [r0, #0]
 8011df8:	6875      	ldr	r5, [r6, #4]
 8011dfa:	6045      	str	r5, [r0, #4]
 8011dfc:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011e00:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011e04:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011e08:	f821 ec02 	strh.w	lr, [r1, #-2]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011e12:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8011e16:	45e6      	cmp	lr, ip
 8011e18:	dbf8      	blt.n	8011e0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011e1a:	d105      	bne.n	8011e28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011e1c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e20:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011e24:	42ae      	cmp	r6, r5
 8011e26:	dbf1      	blt.n	8011e0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011e28:	4615      	mov	r5, r2
 8011e2a:	3a08      	subs	r2, #8
 8011e2c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8011e30:	45b4      	cmp	ip, r6
 8011e32:	dbf9      	blt.n	8011e28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011e34:	d105      	bne.n	8011e42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8011e36:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011e3a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8011e3e:	45b0      	cmp	r8, r6
 8011e40:	dbf2      	blt.n	8011e28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011e42:	4293      	cmp	r3, r2
 8011e44:	f1a5 0608 	sub.w	r6, r5, #8
 8011e48:	d816      	bhi.n	8011e78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8011e4a:	f8d6 c000 	ldr.w	ip, [r6]
 8011e4e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8011e52:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8011e56:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8011e5a:	f8c3 c000 	str.w	ip, [r3]
 8011e5e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8011e62:	f8c3 c004 	str.w	ip, [r3, #4]
 8011e66:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011e6a:	f825 ec06 	strh.w	lr, [r5, #-6]
 8011e6e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011e72:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011e76:	e7c9      	b.n	8011e0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011e78:	f8d6 e000 	ldr.w	lr, [r6]
 8011e7c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8011e80:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8011e84:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8011e88:	f8c0 e000 	str.w	lr, [r0]
 8011e8c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8011e90:	1a16      	subs	r6, r2, r0
 8011e92:	f8c0 e004 	str.w	lr, [r0, #4]
 8011e96:	f825 ac08 	strh.w	sl, [r5, #-8]
 8011e9a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8011e9e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011ea2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8011ea6:	1acd      	subs	r5, r1, r3
 8011ea8:	10ed      	asrs	r5, r5, #3
 8011eaa:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8011eae:	bfb5      	itete	lt
 8011eb0:	e9c4 0200 	strdlt	r0, r2, [r4]
 8011eb4:	e9c4 3100 	strdge	r3, r1, [r4]
 8011eb8:	460a      	movlt	r2, r1
 8011eba:	4603      	movge	r3, r0
 8011ebc:	3408      	adds	r4, #8
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	4611      	mov	r1, r2
 8011ec2:	e724      	b.n	8011d0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011ec4:	4299      	cmp	r1, r3
 8011ec6:	d927      	bls.n	8011f18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8011ec8:	f1a3 0210 	sub.w	r2, r3, #16
 8011ecc:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8011ed0:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8011ed4:	45ac      	cmp	ip, r5
 8011ed6:	db06      	blt.n	8011ee6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8011ed8:	d11c      	bne.n	8011f14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8011eda:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8011ede:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8011ee2:	42ae      	cmp	r6, r5
 8011ee4:	da16      	bge.n	8011f14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8011ee6:	4615      	mov	r5, r2
 8011ee8:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8011eec:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8011ef0:	3a08      	subs	r2, #8
 8011ef2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8011ef6:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8011efa:	6196      	str	r6, [r2, #24]
 8011efc:	42a8      	cmp	r0, r5
 8011efe:	686e      	ldr	r6, [r5, #4]
 8011f00:	f8a2 9010 	strh.w	r9, [r2, #16]
 8011f04:	61d6      	str	r6, [r2, #28]
 8011f06:	f8a2 c012 	strh.w	ip, [r2, #18]
 8011f0a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8011f0e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8011f12:	d1db      	bne.n	8011ecc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8011f14:	3308      	adds	r3, #8
 8011f16:	e7d5      	b.n	8011ec4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8011f18:	42bc      	cmp	r4, r7
 8011f1a:	d903      	bls.n	8011f24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8011f1c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8011f20:	3c08      	subs	r4, #8
 8011f22:	e6f4      	b.n	8011d0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011f24:	b050      	add	sp, #320	@ 0x140
 8011f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011f2a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8011f2a:	b510      	push	{r4, lr}
 8011f2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011f2e:	4604      	mov	r4, r0
 8011f30:	07da      	lsls	r2, r3, #31
 8011f32:	d507      	bpl.n	8011f44 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8011f34:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8011f38:	f7ff fe8c 	bl	8011c54 <_ZN8touchgfx7Outline6lineToEii>
 8011f3c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011f3e:	f023 0301 	bic.w	r3, r3, #1
 8011f42:	6243      	str	r3, [r0, #36]	@ 0x24
 8011f44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011f46:	079b      	lsls	r3, r3, #30
 8011f48:	d521      	bpl.n	8011f8e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8011f4a:	6923      	ldr	r3, [r4, #16]
 8011f4c:	88d9      	ldrh	r1, [r3, #6]
 8011f4e:	889a      	ldrh	r2, [r3, #4]
 8011f50:	430a      	orrs	r2, r1
 8011f52:	d010      	beq.n	8011f76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011f54:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	db0c      	blt.n	8011f76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011f5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011f5e:	428a      	cmp	r2, r1
 8011f60:	da09      	bge.n	8011f76 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011f62:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011f66:	4291      	cmp	r1, r2
 8011f68:	f102 0201 	add.w	r2, r2, #1
 8011f6c:	bf88      	it	hi
 8011f6e:	3308      	addhi	r3, #8
 8011f70:	60a2      	str	r2, [r4, #8]
 8011f72:	bf88      	it	hi
 8011f74:	6123      	strhi	r3, [r4, #16]
 8011f76:	68a1      	ldr	r1, [r4, #8]
 8011f78:	b129      	cbz	r1, 8011f86 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011f7a:	6863      	ldr	r3, [r4, #4]
 8011f7c:	4299      	cmp	r1, r3
 8011f7e:	d802      	bhi.n	8011f86 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011f80:	68e0      	ldr	r0, [r4, #12]
 8011f82:	f7ff febd 	bl	8011d00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8011f86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011f88:	f023 0302 	bic.w	r3, r3, #2
 8011f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011f8e:	68e0      	ldr	r0, [r4, #12]
 8011f90:	bd10      	pop	{r4, pc}
	...

08011f94 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011f94:	4b01      	ldr	r3, [pc, #4]	@ (8011f9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8011f96:	6818      	ldr	r0, [r3, #0]
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	240253dc 	.word	0x240253dc

08011fa0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8011fa0:	4b01      	ldr	r3, [pc, #4]	@ (8011fa8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8011fa2:	6818      	ldr	r0, [r3, #0]
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	240253e0 	.word	0x240253e0

08011fac <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	6803      	ldr	r3, [r0, #0]
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb4:	4798      	blx	r3
 8011fb6:	1b03      	subs	r3, r0, r4
 8011fb8:	4258      	negs	r0, r3
 8011fba:	4158      	adcs	r0, r3
 8011fbc:	bd10      	pop	{r4, pc}
	...

08011fc0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011fc0:	4b01      	ldr	r3, [pc, #4]	@ (8011fc8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011fc2:	6019      	str	r1, [r3, #0]
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	240253e4 	.word	0x240253e4

08011fcc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd0:	4696      	mov	lr, r2
 8011fd2:	b097      	sub	sp, #92	@ 0x5c
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	4614      	mov	r4, r2
 8011fd8:	460e      	mov	r6, r1
 8011fda:	461f      	mov	r7, r3
 8011fdc:	f10d 0c1c 	add.w	ip, sp, #28
 8011fe0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8011fe4:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8011fe8:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8011fec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ff0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ff4:	f8de 3000 	ldr.w	r3, [lr]
 8011ff8:	f104 0e14 	add.w	lr, r4, #20
 8011ffc:	f8cc 3000 	str.w	r3, [ip]
 8012000:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012004:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012008:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801200c:	f8de 3000 	ldr.w	r3, [lr]
 8012010:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012014:	f8cc 3000 	str.w	r3, [ip]
 8012018:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801201c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012024:	f8de 3000 	ldr.w	r3, [lr]
 8012028:	4631      	mov	r1, r6
 801202a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801202c:	4628      	mov	r0, r5
 801202e:	f8cc 3000 	str.w	r3, [ip]
 8012032:	682b      	ldr	r3, [r5, #0]
 8012034:	9201      	str	r2, [sp, #4]
 8012036:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012038:	f8cd 8008 	str.w	r8, [sp, #8]
 801203c:	9200      	str	r2, [sp, #0]
 801203e:	aa07      	add	r2, sp, #28
 8012040:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012044:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012048:	463b      	mov	r3, r7
 801204a:	47d8      	blx	fp
 801204c:	46a6      	mov	lr, r4
 801204e:	f10d 0c1c 	add.w	ip, sp, #28
 8012052:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012056:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801205a:	f8de 3000 	ldr.w	r3, [lr]
 801205e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012062:	343c      	adds	r4, #60	@ 0x3c
 8012064:	f8cc 3000 	str.w	r3, [ip]
 8012068:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801206c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012070:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012074:	f8de 3000 	ldr.w	r3, [lr]
 8012078:	f8cc 3000 	str.w	r3, [ip]
 801207c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	4631      	mov	r1, r6
 801208a:	4628      	mov	r0, r5
 801208c:	f8cc 3000 	str.w	r3, [ip]
 8012090:	682b      	ldr	r3, [r5, #0]
 8012092:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012096:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012098:	f8cd 8008 	str.w	r8, [sp, #8]
 801209c:	9201      	str	r2, [sp, #4]
 801209e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80120a0:	9200      	str	r2, [sp, #0]
 80120a2:	aa07      	add	r2, sp, #28
 80120a4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80120a6:	463b      	mov	r3, r7
 80120a8:	47a0      	blx	r4
 80120aa:	b017      	add	sp, #92	@ 0x5c
 80120ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	b08d      	sub	sp, #52	@ 0x34
 80120b6:	4688      	mov	r8, r1
 80120b8:	f8d3 c000 	ldr.w	ip, [r3]
 80120bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80120be:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80120c2:	680f      	ldr	r7, [r1, #0]
 80120c4:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80120c8:	eba7 070c 	sub.w	r7, r7, ip
 80120cc:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80120d0:	edd3 6a07 	vldr	s13, [r3, #28]
 80120d4:	42bc      	cmp	r4, r7
 80120d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80120d8:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80120dc:	bfa8      	it	ge
 80120de:	463c      	movge	r4, r7
 80120e0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80120e4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80120e8:	ee07 4a90 	vmov	s15, r4
 80120ec:	eb09 0e0c 	add.w	lr, r9, ip
 80120f0:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80120f4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80120f8:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80120fc:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8012100:	4571      	cmp	r1, lr
 8012102:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012106:	ee65 4a24 	vmul.f32	s9, s10, s9
 801210a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801210e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012112:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012116:	ee32 1a05 	vadd.f32	s2, s4, s10
 801211a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801211e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012122:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012126:	ee22 2a07 	vmul.f32	s4, s4, s14
 801212a:	f340 808c 	ble.w	8012246 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801212e:	eba1 060e 	sub.w	r6, r1, lr
 8012132:	fb96 f5f4 	sdiv	r5, r6, r4
 8012136:	ee07 5a10 	vmov	s14, r5
 801213a:	2d00      	cmp	r5, #0
 801213c:	fb04 6615 	mls	r6, r4, r5, r6
 8012140:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012144:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012148:	eee7 0a24 	vfma.f32	s1, s14, s9
 801214c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012150:	dd12      	ble.n	8012178 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012152:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012156:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801215a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801215e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012166:	bf14      	ite	ne
 8012168:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801216c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012170:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012174:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012178:	fb05 f204 	mul.w	r2, r5, r4
 801217c:	1abf      	subs	r7, r7, r2
 801217e:	4494      	add	ip, r2
 8012180:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012184:	4411      	add	r1, r2
 8012186:	eb09 020c 	add.w	r2, r9, ip
 801218a:	b209      	sxth	r1, r1
 801218c:	443a      	add	r2, r7
 801218e:	428a      	cmp	r2, r1
 8012190:	bfc4      	itt	gt
 8012192:	eba1 0209 	subgt.w	r2, r1, r9
 8012196:	eba2 070c 	subgt.w	r7, r2, ip
 801219a:	2f00      	cmp	r7, #0
 801219c:	dd50      	ble.n	8012240 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801219e:	fb97 f1f4 	sdiv	r1, r7, r4
 80121a2:	fb04 7211 	mls	r2, r4, r1, r7
 80121a6:	b90a      	cbnz	r2, 80121ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80121a8:	3901      	subs	r1, #1
 80121aa:	4622      	mov	r2, r4
 80121ac:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80121b0:	6840      	ldr	r0, [r0, #4]
 80121b2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80121b6:	44b6      	add	lr, r6
 80121b8:	f8d0 a000 	ldr.w	sl, [r0]
 80121bc:	2900      	cmp	r1, #0
 80121be:	bfcc      	ite	gt
 80121c0:	46a1      	movgt	r9, r4
 80121c2:	4691      	movle	r9, r2
 80121c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80121c6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80121c8:	fb04 e505 	mla	r5, r4, r5, lr
 80121cc:	eef0 6a42 	vmov.f32	s13, s4
 80121d0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80121d4:	9008      	str	r0, [sp, #32]
 80121d6:	eeb0 7a61 	vmov.f32	s14, s3
 80121da:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80121dc:	695b      	ldr	r3, [r3, #20]
 80121de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80121e2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80121e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80121ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80121ec:	445b      	add	r3, fp
 80121ee:	9307      	str	r3, [sp, #28]
 80121f0:	ee16 3a90 	vmov	r3, s13
 80121f4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80121f8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80121fc:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012200:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012204:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012208:	ee17 7a90 	vmov	r7, s15
 801220c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012210:	fb97 f7f4 	sdiv	r7, r7, r4
 8012214:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012218:	ee17 ca90 	vmov	ip, s15
 801221c:	fb9c fcf4 	sdiv	ip, ip, r4
 8012220:	fb0c 3306 	mla	r3, ip, r6, r3
 8012224:	9302      	str	r3, [sp, #8]
 8012226:	ee17 3a10 	vmov	r3, s14
 801222a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801222e:	fb07 3706 	mla	r7, r7, r6, r3
 8012232:	eba9 0306 	sub.w	r3, r9, r6
 8012236:	e9cd 4700 	strd	r4, r7, [sp]
 801223a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801223e:	47a0      	blx	r4
 8012240:	b00d      	add	sp, #52	@ 0x34
 8012242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012246:	2500      	movs	r5, #0
 8012248:	462e      	mov	r6, r5
 801224a:	e799      	b.n	8012180 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801224c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012250:	b0db      	sub	sp, #364	@ 0x16c
 8012252:	461d      	mov	r5, r3
 8012254:	4614      	mov	r4, r2
 8012256:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801225a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801225c:	4629      	mov	r1, r5
 801225e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012260:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8012264:	9009      	str	r0, [sp, #36]	@ 0x24
 8012266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012268:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801226c:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8012270:	9310      	str	r3, [sp, #64]	@ 0x40
 8012272:	6803      	ldr	r3, [r0, #0]
 8012274:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8012276:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801227a:	47b8      	blx	r7
 801227c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801227e:	6058      	str	r0, [r3, #4]
 8012280:	2800      	cmp	r0, #0
 8012282:	f000 83a1 	beq.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012286:	682b      	ldr	r3, [r5, #0]
 8012288:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801228c:	ed94 7a02 	vldr	s14, [r4, #8]
 8012290:	9314      	str	r3, [sp, #80]	@ 0x50
 8012292:	686b      	ldr	r3, [r5, #4]
 8012294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012298:	9315      	str	r3, [sp, #84]	@ 0x54
 801229a:	4bc1      	ldr	r3, [pc, #772]	@ (80125a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801229c:	7819      	ldrb	r1, [r3, #0]
 801229e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80122a2:	2900      	cmp	r1, #0
 80122a4:	bf16      	itet	ne
 80122a6:	4619      	movne	r1, r3
 80122a8:	4611      	moveq	r1, r2
 80122aa:	4613      	movne	r3, r2
 80122ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b0:	9116      	str	r1, [sp, #88]	@ 0x58
 80122b2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80122b6:	f240 8387 	bls.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122ba:	ed94 7a07 	vldr	s14, [r4, #28]
 80122be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c6:	f240 837f 	bls.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122ca:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80122ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d6:	f240 8377 	bls.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122da:	6822      	ldr	r2, [r4, #0]
 80122dc:	4bb1      	ldr	r3, [pc, #708]	@ (80125a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80122de:	429a      	cmp	r2, r3
 80122e0:	f2c0 8372 	blt.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122e4:	49b0      	ldr	r1, [pc, #704]	@ (80125a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80122e6:	6963      	ldr	r3, [r4, #20]
 80122e8:	428a      	cmp	r2, r1
 80122ea:	f300 836d 	bgt.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122ee:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80122f2:	48ae      	ldr	r0, [pc, #696]	@ (80125ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80122f4:	33ff      	adds	r3, #255	@ 0xff
 80122f6:	4283      	cmp	r3, r0
 80122f8:	f200 8366 	bhi.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80122fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80122fe:	4dac      	ldr	r5, [pc, #688]	@ (80125b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012300:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012304:	33ff      	adds	r3, #255	@ 0xff
 8012306:	42ab      	cmp	r3, r5
 8012308:	f200 835e 	bhi.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801230c:	6862      	ldr	r2, [r4, #4]
 801230e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8012312:	33ff      	adds	r3, #255	@ 0xff
 8012314:	4283      	cmp	r3, r0
 8012316:	f200 8357 	bhi.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801231a:	69a1      	ldr	r1, [r4, #24]
 801231c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8012320:	33ff      	adds	r3, #255	@ 0xff
 8012322:	4283      	cmp	r3, r0
 8012324:	f200 8350 	bhi.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012328:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801232a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801232e:	30ff      	adds	r0, #255	@ 0xff
 8012330:	42a8      	cmp	r0, r5
 8012332:	f200 8349 	bhi.w	80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012336:	428a      	cmp	r2, r1
 8012338:	f280 8110 	bge.w	801255c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801233c:	429a      	cmp	r2, r3
 801233e:	f300 8119 	bgt.w	8012574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012342:	4299      	cmp	r1, r3
 8012344:	f280 811d 	bge.w	8012582 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012348:	2502      	movs	r5, #2
 801234a:	2701      	movs	r7, #1
 801234c:	46a9      	mov	r9, r5
 801234e:	46b8      	mov	r8, r7
 8012350:	f04f 0a00 	mov.w	sl, #0
 8012354:	4621      	mov	r1, r4
 8012356:	a849      	add	r0, sp, #292	@ 0x124
 8012358:	f003 fd42 	bl	8015de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801235c:	4622      	mov	r2, r4
 801235e:	4653      	mov	r3, sl
 8012360:	a949      	add	r1, sp, #292	@ 0x124
 8012362:	f8cd 9000 	str.w	r9, [sp]
 8012366:	a819      	add	r0, sp, #100	@ 0x64
 8012368:	f003 fe6a 	bl	8016040 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801236c:	4622      	mov	r2, r4
 801236e:	4653      	mov	r3, sl
 8012370:	a949      	add	r1, sp, #292	@ 0x124
 8012372:	f8cd 8000 	str.w	r8, [sp]
 8012376:	a829      	add	r0, sp, #164	@ 0xa4
 8012378:	f003 fe62 	bl	8016040 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801237c:	4643      	mov	r3, r8
 801237e:	4622      	mov	r2, r4
 8012380:	a949      	add	r1, sp, #292	@ 0x124
 8012382:	f8cd 9000 	str.w	r9, [sp]
 8012386:	a839      	add	r0, sp, #228	@ 0xe4
 8012388:	f003 fe5a 	bl	8016040 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801238c:	42af      	cmp	r7, r5
 801238e:	af12      	add	r7, sp, #72	@ 0x48
 8012390:	bfb7      	itett	lt
 8012392:	2300      	movlt	r3, #0
 8012394:	2301      	movge	r3, #1
 8012396:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8012398:	ac19      	addlt	r4, sp, #100	@ 0x64
 801239a:	bfb1      	iteee	lt
 801239c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801239e:	ad19      	addge	r5, sp, #100	@ 0x64
 80123a0:	930e      	strge	r3, [sp, #56]	@ 0x38
 80123a2:	ac29      	addge	r4, sp, #164	@ 0xa4
 80123a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123aa:	e887 0003 	stmia.w	r7, {r0, r1}
 80123ae:	b928      	cbnz	r0, 80123bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80123b0:	4b80      	ldr	r3, [pc, #512]	@ (80125b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80123b2:	6818      	ldr	r0, [r3, #0]
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123b8:	4798      	blx	r3
 80123ba:	6038      	str	r0, [r7, #0]
 80123bc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80123be:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80123c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80123c6:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80123c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80123ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123cc:	6963      	ldr	r3, [r4, #20]
 80123ce:	440b      	add	r3, r1
 80123d0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80123d4:	4408      	add	r0, r1
 80123d6:	b200      	sxth	r0, r0
 80123d8:	4283      	cmp	r3, r0
 80123da:	900d      	str	r0, [sp, #52]	@ 0x34
 80123dc:	f280 80dd 	bge.w	801259a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80123e0:	428b      	cmp	r3, r1
 80123e2:	da08      	bge.n	80123f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80123e4:	2a00      	cmp	r2, #0
 80123e6:	dd06      	ble.n	80123f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80123e8:	1acb      	subs	r3, r1, r3
 80123ea:	429a      	cmp	r2, r3
 80123ec:	f2c0 80e4 	blt.w	80125b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f300 80e2 	bgt.w	80125ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80123f6:	6967      	ldr	r7, [r4, #20]
 80123f8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80123fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123fe:	443b      	add	r3, r7
 8012400:	461f      	mov	r7, r3
 8012402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012404:	1bdf      	subs	r7, r3, r7
 8012406:	4297      	cmp	r7, r2
 8012408:	bfa8      	it	ge
 801240a:	4617      	movge	r7, r2
 801240c:	2f00      	cmp	r7, #0
 801240e:	f340 8166 	ble.w	80126de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012412:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012414:	6829      	ldr	r1, [r5, #0]
 8012416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801241a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801241e:	4411      	add	r1, r2
 8012420:	6820      	ldr	r0, [r4, #0]
 8012422:	4299      	cmp	r1, r3
 8012424:	dd1a      	ble.n	801245c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012426:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801242a:	4402      	add	r2, r0
 801242c:	440b      	add	r3, r1
 801242e:	b21b      	sxth	r3, r3
 8012430:	429a      	cmp	r2, r3
 8012432:	dc13      	bgt.n	801245c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012434:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012436:	a912      	add	r1, sp, #72	@ 0x48
 8012438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801243a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	9206      	str	r2, [sp, #24]
 8012440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012442:	9500      	str	r5, [sp, #0]
 8012444:	9205      	str	r2, [sp, #20]
 8012446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012448:	e9cd b203 	strd	fp, r2, [sp, #12]
 801244c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801244e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012452:	aa49      	add	r2, sp, #292	@ 0x124
 8012454:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012458:	4623      	mov	r3, r4
 801245a:	47c8      	blx	r9
 801245c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012460:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012464:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012468:	ee37 7a27 	vadd.f32	s14, s14, s15
 801246c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012470:	68a1      	ldr	r1, [r4, #8]
 8012472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012476:	ed94 6a08 	vldr	s12, [r4, #32]
 801247a:	edd4 6a07 	vldr	s13, [r4, #28]
 801247e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012482:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012486:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801248a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801248e:	edc4 6a07 	vstr	s13, [r4, #28]
 8012492:	441a      	add	r2, r3
 8012494:	6963      	ldr	r3, [r4, #20]
 8012496:	3301      	adds	r3, #1
 8012498:	6022      	str	r2, [r4, #0]
 801249a:	6163      	str	r3, [r4, #20]
 801249c:	69a3      	ldr	r3, [r4, #24]
 801249e:	3b01      	subs	r3, #1
 80124a0:	61a3      	str	r3, [r4, #24]
 80124a2:	6923      	ldr	r3, [r4, #16]
 80124a4:	440b      	add	r3, r1
 80124a6:	68e1      	ldr	r1, [r4, #12]
 80124a8:	428b      	cmp	r3, r1
 80124aa:	6123      	str	r3, [r4, #16]
 80124ac:	db15      	blt.n	80124da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80124ae:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80124b2:	3201      	adds	r2, #1
 80124b4:	1a5b      	subs	r3, r3, r1
 80124b6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80124ba:	6022      	str	r2, [r4, #0]
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	edc4 6a07 	vstr	s13, [r4, #28]
 80124c2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80124c6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80124ca:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80124ce:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80124d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124d6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80124da:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80124de:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80124e2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80124e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124ea:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80124ee:	68a9      	ldr	r1, [r5, #8]
 80124f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124f4:	ed95 6a08 	vldr	s12, [r5, #32]
 80124f8:	edd5 6a07 	vldr	s13, [r5, #28]
 80124fc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012500:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012504:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012508:	e9d5 2300 	ldrd	r2, r3, [r5]
 801250c:	edc5 6a07 	vstr	s13, [r5, #28]
 8012510:	441a      	add	r2, r3
 8012512:	696b      	ldr	r3, [r5, #20]
 8012514:	3301      	adds	r3, #1
 8012516:	602a      	str	r2, [r5, #0]
 8012518:	616b      	str	r3, [r5, #20]
 801251a:	69ab      	ldr	r3, [r5, #24]
 801251c:	3b01      	subs	r3, #1
 801251e:	61ab      	str	r3, [r5, #24]
 8012520:	692b      	ldr	r3, [r5, #16]
 8012522:	440b      	add	r3, r1
 8012524:	68e9      	ldr	r1, [r5, #12]
 8012526:	428b      	cmp	r3, r1
 8012528:	612b      	str	r3, [r5, #16]
 801252a:	db15      	blt.n	8012558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801252c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012530:	3201      	adds	r2, #1
 8012532:	1a5b      	subs	r3, r3, r1
 8012534:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012538:	602a      	str	r2, [r5, #0]
 801253a:	612b      	str	r3, [r5, #16]
 801253c:	edc5 6a07 	vstr	s13, [r5, #28]
 8012540:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012544:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012548:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801254c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012554:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012558:	3f01      	subs	r7, #1
 801255a:	e757      	b.n	801240c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801255c:	4299      	cmp	r1, r3
 801255e:	dc13      	bgt.n	8012588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012560:	429a      	cmp	r2, r3
 8012562:	da14      	bge.n	801258e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012564:	2502      	movs	r5, #2
 8012566:	2703      	movs	r7, #3
 8012568:	f04f 0800 	mov.w	r8, #0
 801256c:	46a9      	mov	r9, r5
 801256e:	f04f 0a01 	mov.w	sl, #1
 8012572:	e6ef      	b.n	8012354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012574:	2501      	movs	r5, #1
 8012576:	2700      	movs	r7, #0
 8012578:	46a9      	mov	r9, r5
 801257a:	46b8      	mov	r8, r7
 801257c:	f04f 0a02 	mov.w	sl, #2
 8012580:	e6e8      	b.n	8012354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012582:	2501      	movs	r5, #1
 8012584:	2702      	movs	r7, #2
 8012586:	e6e1      	b.n	801234c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012588:	2500      	movs	r5, #0
 801258a:	2701      	movs	r7, #1
 801258c:	e7f4      	b.n	8012578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801258e:	2702      	movs	r7, #2
 8012590:	2503      	movs	r5, #3
 8012592:	f04f 0900 	mov.w	r9, #0
 8012596:	46b8      	mov	r8, r7
 8012598:	e7e9      	b.n	801256e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801259a:	4613      	mov	r3, r2
 801259c:	e728      	b.n	80123f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801259e:	bf00      	nop
 80125a0:	240253cc 	.word	0x240253cc
 80125a4:	fffd8f01 	.word	0xfffd8f01
 80125a8:	00027100 	.word	0x00027100
 80125ac:	0004e1ff 	.word	0x0004e1ff
 80125b0:	0004e1fe 	.word	0x0004e1fe
 80125b4:	240253d4 	.word	0x240253d4
 80125b8:	4613      	mov	r3, r2
 80125ba:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80125bc:	469e      	mov	lr, r3
 80125be:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80125c0:	469c      	mov	ip, r3
 80125c2:	9111      	str	r1, [sp, #68]	@ 0x44
 80125c4:	f04f 0900 	mov.w	r9, #0
 80125c8:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80125cc:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80125d0:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80125d4:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80125d8:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80125dc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80125e0:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80125e4:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80125e8:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80125ec:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80125f0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80125f4:	f1bc 0f00 	cmp.w	ip, #0
 80125f8:	d147      	bne.n	801268a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80125fa:	eb03 0c07 	add.w	ip, r3, r7
 80125fe:	1ad7      	subs	r7, r2, r3
 8012600:	f1b9 0f00 	cmp.w	r9, #0
 8012604:	d009      	beq.n	801261a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012606:	9029      	str	r0, [sp, #164]	@ 0xa4
 8012608:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801260c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8012610:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8012614:	912d      	str	r1, [sp, #180]	@ 0xb4
 8012616:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801261a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801261c:	f04f 0800 	mov.w	r8, #0
 8012620:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012624:	9111      	str	r1, [sp, #68]	@ 0x44
 8012626:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801262a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801262e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012632:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012636:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801263a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801263e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8012642:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012646:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801264a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801264e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8012652:	f1be 0f00 	cmp.w	lr, #0
 8012656:	d031      	beq.n	80126bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012658:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801265a:	4450      	add	r0, sl
 801265c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012660:	4431      	add	r1, r6
 8012662:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012666:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801266a:	4549      	cmp	r1, r9
 801266c:	db08      	blt.n	8012680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801266e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012672:	3001      	adds	r0, #1
 8012674:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012678:	eba1 0109 	sub.w	r1, r1, r9
 801267c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012680:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012684:	f04f 0801 	mov.w	r8, #1
 8012688:	e7e3      	b.n	8012652 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801268a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801268c:	4450      	add	r0, sl
 801268e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012692:	4431      	add	r1, r6
 8012694:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012698:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801269c:	4541      	cmp	r1, r8
 801269e:	db08      	blt.n	80126b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80126a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80126a4:	3001      	adds	r0, #1
 80126a6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80126aa:	eba1 0108 	sub.w	r1, r1, r8
 80126ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80126b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80126b6:	f04f 0901 	mov.w	r9, #1
 80126ba:	e79b      	b.n	80125f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80126bc:	449c      	add	ip, r3
 80126be:	1aff      	subs	r7, r7, r3
 80126c0:	f1b8 0f00 	cmp.w	r8, #0
 80126c4:	d009      	beq.n	80126da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80126c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80126c8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80126cc:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80126d0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80126d4:	911d      	str	r1, [sp, #116]	@ 0x74
 80126d6:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80126da:	1ad2      	subs	r2, r2, r3
 80126dc:	e68b      	b.n	80123f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80126de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126e0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 80d1 	beq.w	801288a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80126e8:	ad19      	add	r5, sp, #100	@ 0x64
 80126ea:	ac39      	add	r4, sp, #228	@ 0xe4
 80126ec:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80126ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80126f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80126f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80126f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126fa:	6963      	ldr	r3, [r4, #20]
 80126fc:	440b      	add	r3, r1
 80126fe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012702:	4408      	add	r0, r1
 8012704:	b200      	sxth	r0, r0
 8012706:	4283      	cmp	r3, r0
 8012708:	900d      	str	r0, [sp, #52]	@ 0x34
 801270a:	f280 80c1 	bge.w	8012890 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801270e:	428b      	cmp	r3, r1
 8012710:	da08      	bge.n	8012724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012712:	2a00      	cmp	r2, #0
 8012714:	dd06      	ble.n	8012724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012716:	1acb      	subs	r3, r1, r3
 8012718:	429a      	cmp	r2, r3
 801271a:	f2c0 80bb 	blt.w	8012894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801271e:	2b00      	cmp	r3, #0
 8012720:	f300 80b9 	bgt.w	8012896 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012724:	6967      	ldr	r7, [r4, #20]
 8012726:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801272a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801272c:	443b      	add	r3, r7
 801272e:	461f      	mov	r7, r3
 8012730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012732:	1bdf      	subs	r7, r3, r7
 8012734:	4297      	cmp	r7, r2
 8012736:	bfa8      	it	ge
 8012738:	4617      	movge	r7, r2
 801273a:	2f00      	cmp	r7, #0
 801273c:	f340 813c 	ble.w	80129b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012740:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012742:	6829      	ldr	r1, [r5, #0]
 8012744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012748:	f9bb 3000 	ldrsh.w	r3, [fp]
 801274c:	4411      	add	r1, r2
 801274e:	6820      	ldr	r0, [r4, #0]
 8012750:	4299      	cmp	r1, r3
 8012752:	dd1a      	ble.n	801278a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012754:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012758:	4402      	add	r2, r0
 801275a:	440b      	add	r3, r1
 801275c:	b21b      	sxth	r3, r3
 801275e:	429a      	cmp	r2, r3
 8012760:	dc13      	bgt.n	801278a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012762:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012764:	a912      	add	r1, sp, #72	@ 0x48
 8012766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012768:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	9206      	str	r2, [sp, #24]
 801276e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012770:	9500      	str	r5, [sp, #0]
 8012772:	9205      	str	r2, [sp, #20]
 8012774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012776:	e9cd b203 	strd	fp, r2, [sp, #12]
 801277a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801277c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012780:	aa49      	add	r2, sp, #292	@ 0x124
 8012782:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012786:	4623      	mov	r3, r4
 8012788:	47c8      	blx	r9
 801278a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801278e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012792:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012796:	ee37 7a27 	vadd.f32	s14, s14, s15
 801279a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801279e:	68a1      	ldr	r1, [r4, #8]
 80127a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127a4:	ed94 6a08 	vldr	s12, [r4, #32]
 80127a8:	edd4 6a07 	vldr	s13, [r4, #28]
 80127ac:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80127b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80127b4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80127b8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80127bc:	edc4 6a07 	vstr	s13, [r4, #28]
 80127c0:	441a      	add	r2, r3
 80127c2:	6963      	ldr	r3, [r4, #20]
 80127c4:	3301      	adds	r3, #1
 80127c6:	6022      	str	r2, [r4, #0]
 80127c8:	6163      	str	r3, [r4, #20]
 80127ca:	69a3      	ldr	r3, [r4, #24]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	61a3      	str	r3, [r4, #24]
 80127d0:	6923      	ldr	r3, [r4, #16]
 80127d2:	440b      	add	r3, r1
 80127d4:	68e1      	ldr	r1, [r4, #12]
 80127d6:	428b      	cmp	r3, r1
 80127d8:	6123      	str	r3, [r4, #16]
 80127da:	db15      	blt.n	8012808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80127dc:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80127e0:	3201      	adds	r2, #1
 80127e2:	1a5b      	subs	r3, r3, r1
 80127e4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80127e8:	6022      	str	r2, [r4, #0]
 80127ea:	6123      	str	r3, [r4, #16]
 80127ec:	edc4 6a07 	vstr	s13, [r4, #28]
 80127f0:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80127f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80127f8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80127fc:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012804:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012808:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801280c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012810:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012818:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801281c:	68a9      	ldr	r1, [r5, #8]
 801281e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012822:	ed95 6a08 	vldr	s12, [r5, #32]
 8012826:	edd5 6a07 	vldr	s13, [r5, #28]
 801282a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801282e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012832:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012836:	e9d5 2300 	ldrd	r2, r3, [r5]
 801283a:	edc5 6a07 	vstr	s13, [r5, #28]
 801283e:	441a      	add	r2, r3
 8012840:	696b      	ldr	r3, [r5, #20]
 8012842:	3301      	adds	r3, #1
 8012844:	602a      	str	r2, [r5, #0]
 8012846:	616b      	str	r3, [r5, #20]
 8012848:	69ab      	ldr	r3, [r5, #24]
 801284a:	3b01      	subs	r3, #1
 801284c:	61ab      	str	r3, [r5, #24]
 801284e:	692b      	ldr	r3, [r5, #16]
 8012850:	440b      	add	r3, r1
 8012852:	68e9      	ldr	r1, [r5, #12]
 8012854:	428b      	cmp	r3, r1
 8012856:	612b      	str	r3, [r5, #16]
 8012858:	db15      	blt.n	8012886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801285a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801285e:	3201      	adds	r2, #1
 8012860:	1a5b      	subs	r3, r3, r1
 8012862:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012866:	602a      	str	r2, [r5, #0]
 8012868:	612b      	str	r3, [r5, #16]
 801286a:	edc5 6a07 	vstr	s13, [r5, #28]
 801286e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012872:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012876:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801287a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012882:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012886:	3f01      	subs	r7, #1
 8012888:	e757      	b.n	801273a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801288a:	ad39      	add	r5, sp, #228	@ 0xe4
 801288c:	ac19      	add	r4, sp, #100	@ 0x64
 801288e:	e72d      	b.n	80126ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012890:	4613      	mov	r3, r2
 8012892:	e744      	b.n	801271e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012894:	4613      	mov	r3, r2
 8012896:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8012898:	469e      	mov	lr, r3
 801289a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801289e:	461f      	mov	r7, r3
 80128a0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80128a4:	f04f 0900 	mov.w	r9, #0
 80128a8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80128ac:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80128b0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80128b4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80128b8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80128bc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80128be:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80128c2:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80128c6:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80128ca:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80128ce:	960e      	str	r6, [sp, #56]	@ 0x38
 80128d0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80128d4:	2f00      	cmp	r7, #0
 80128d6:	d146      	bne.n	8012966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80128d8:	449c      	add	ip, r3
 80128da:	1ad7      	subs	r7, r2, r3
 80128dc:	f1b9 0f00 	cmp.w	r9, #0
 80128e0:	d009      	beq.n	80128f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80128e2:	9039      	str	r0, [sp, #228]	@ 0xe4
 80128e4:	913d      	str	r1, [sp, #244]	@ 0xf4
 80128e6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80128ea:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80128ee:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80128f2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80128f6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80128f8:	f04f 0800 	mov.w	r8, #0
 80128fc:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012900:	910e      	str	r1, [sp, #56]	@ 0x38
 8012902:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012906:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801290a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801290e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012912:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012916:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801291a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801291e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012922:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012926:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801292a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801292e:	f1be 0f00 	cmp.w	lr, #0
 8012932:	d030      	beq.n	8012996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012934:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012936:	4450      	add	r0, sl
 8012938:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801293c:	4431      	add	r1, r6
 801293e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012942:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012946:	4549      	cmp	r1, r9
 8012948:	db08      	blt.n	801295c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801294a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801294e:	3001      	adds	r0, #1
 8012950:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012954:	eba1 0109 	sub.w	r1, r1, r9
 8012958:	ee37 7a06 	vadd.f32	s14, s14, s12
 801295c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012960:	f04f 0801 	mov.w	r8, #1
 8012964:	e7e3      	b.n	801292e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012966:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012968:	4450      	add	r0, sl
 801296a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801296e:	4431      	add	r1, r6
 8012970:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012974:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012978:	4541      	cmp	r1, r8
 801297a:	db08      	blt.n	801298e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801297c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012980:	3001      	adds	r0, #1
 8012982:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012986:	eba1 0108 	sub.w	r1, r1, r8
 801298a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801298e:	3f01      	subs	r7, #1
 8012990:	f04f 0901 	mov.w	r9, #1
 8012994:	e79e      	b.n	80128d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012996:	449c      	add	ip, r3
 8012998:	1aff      	subs	r7, r7, r3
 801299a:	f1b8 0f00 	cmp.w	r8, #0
 801299e:	d009      	beq.n	80129b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80129a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80129a2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80129a6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80129aa:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80129ae:	911d      	str	r1, [sp, #116]	@ 0x74
 80129b0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80129b4:	1ad2      	subs	r2, r2, r3
 80129b6:	e6b5      	b.n	8012724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80129b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	b923      	cbnz	r3, 80129c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129be:	4b04      	ldr	r3, [pc, #16]	@ (80129d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80129c0:	6818      	ldr	r0, [r3, #0]
 80129c2:	6803      	ldr	r3, [r0, #0]
 80129c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129c6:	4798      	blx	r3
 80129c8:	b05b      	add	sp, #364	@ 0x16c
 80129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ce:	bf00      	nop
 80129d0:	240253d4 	.word	0x240253d4

080129d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80129d4:	2b03      	cmp	r3, #3
 80129d6:	d818      	bhi.n	8012a0a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80129d8:	e8df f003 	tbb	[pc, r3]
 80129dc:	130d0602 	.word	0x130d0602
 80129e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80129e4:	1850      	adds	r0, r2, r1
 80129e6:	4770      	bx	lr
 80129e8:	8803      	ldrh	r3, [r0, #0]
 80129ea:	8880      	ldrh	r0, [r0, #4]
 80129ec:	4418      	add	r0, r3
 80129ee:	b200      	sxth	r0, r0
 80129f0:	1a80      	subs	r0, r0, r2
 80129f2:	3801      	subs	r0, #1
 80129f4:	4770      	bx	lr
 80129f6:	8803      	ldrh	r3, [r0, #0]
 80129f8:	8880      	ldrh	r0, [r0, #4]
 80129fa:	4418      	add	r0, r3
 80129fc:	b200      	sxth	r0, r0
 80129fe:	1a40      	subs	r0, r0, r1
 8012a00:	e7f7      	b.n	80129f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012a02:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012a06:	4410      	add	r0, r2
 8012a08:	4770      	bx	lr
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	4770      	bx	lr

08012a0e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012a0e:	2b03      	cmp	r3, #3
 8012a10:	d817      	bhi.n	8012a42 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8012a12:	e8df f003 	tbb	[pc, r3]
 8012a16:	0602      	.short	0x0602
 8012a18:	1009      	.short	0x1009
 8012a1a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012a1e:	1850      	adds	r0, r2, r1
 8012a20:	4770      	bx	lr
 8012a22:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012a26:	e7fa      	b.n	8012a1e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012a28:	8843      	ldrh	r3, [r0, #2]
 8012a2a:	88c0      	ldrh	r0, [r0, #6]
 8012a2c:	4418      	add	r0, r3
 8012a2e:	b200      	sxth	r0, r0
 8012a30:	1a80      	subs	r0, r0, r2
 8012a32:	3801      	subs	r0, #1
 8012a34:	4770      	bx	lr
 8012a36:	8843      	ldrh	r3, [r0, #2]
 8012a38:	88c0      	ldrh	r0, [r0, #6]
 8012a3a:	4418      	add	r0, r3
 8012a3c:	b200      	sxth	r0, r0
 8012a3e:	1a40      	subs	r0, r0, r1
 8012a40:	e7f7      	b.n	8012a32 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012a42:	2000      	movs	r0, #0
 8012a44:	4770      	bx	lr
	...

08012a48 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012a48:	4b01      	ldr	r3, [pc, #4]	@ (8012a50 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	4770      	bx	lr
 8012a50:	240253e4 	.word	0x240253e4

08012a54 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012a54:	4603      	mov	r3, r0
 8012a56:	b1c8      	cbz	r0, 8012a8c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012a58:	0c02      	lsrs	r2, r0, #16
 8012a5a:	0412      	lsls	r2, r2, #16
 8012a5c:	b9a2      	cbnz	r2, 8012a88 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8012a5e:	0403      	lsls	r3, r0, #16
 8012a60:	2010      	movs	r0, #16
 8012a62:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8012a66:	bf04      	itt	eq
 8012a68:	021b      	lsleq	r3, r3, #8
 8012a6a:	3008      	addeq	r0, #8
 8012a6c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8012a70:	bf04      	itt	eq
 8012a72:	011b      	lsleq	r3, r3, #4
 8012a74:	3004      	addeq	r0, #4
 8012a76:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8012a7a:	bf04      	itt	eq
 8012a7c:	009b      	lsleq	r3, r3, #2
 8012a7e:	3002      	addeq	r0, #2
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	db04      	blt.n	8012a8e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012a84:	3001      	adds	r0, #1
 8012a86:	4770      	bx	lr
 8012a88:	2000      	movs	r0, #0
 8012a8a:	e7ea      	b.n	8012a62 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012a8c:	2020      	movs	r0, #32
 8012a8e:	4770      	bx	lr

08012a90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	b087      	sub	sp, #28
 8012a96:	460d      	mov	r5, r1
 8012a98:	4616      	mov	r6, r2
 8012a9a:	4698      	mov	r8, r3
 8012a9c:	4601      	mov	r1, r0
 8012a9e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8012aa2:	b120      	cbz	r0, 8012aae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012aa4:	b11a      	cbz	r2, 8012aae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012aa6:	2d1f      	cmp	r5, #31
 8012aa8:	d801      	bhi.n	8012aae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012aaa:	2b1f      	cmp	r3, #31
 8012aac:	d904      	bls.n	8012ab8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8012aae:	2000      	movs	r0, #0
 8012ab0:	6038      	str	r0, [r7, #0]
 8012ab2:	b007      	add	sp, #28
 8012ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab8:	b97d      	cbnz	r5, 8012ada <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8012aba:	b143      	cbz	r3, 8012ace <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8012abc:	4602      	mov	r2, r0
 8012abe:	462b      	mov	r3, r5
 8012ac0:	4641      	mov	r1, r8
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	e9cd 4700 	strd	r4, r7, [sp]
 8012ac8:	f7ff ffe2 	bl	8012a90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012acc:	e7f1      	b.n	8012ab2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012ace:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012ad6:	603b      	str	r3, [r7, #0]
 8012ad8:	e7eb      	b.n	8012ab2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012ada:	fa32 fa05 	lsrs.w	sl, r2, r5
 8012ade:	d106      	bne.n	8012aee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8012ae0:	4346      	muls	r6, r0
 8012ae2:	fbb6 f0f4 	udiv	r0, r6, r4
 8012ae6:	fb04 6610 	mls	r6, r4, r0, r6
 8012aea:	603e      	str	r6, [r7, #0]
 8012aec:	e7e1      	b.n	8012ab2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012aee:	2201      	movs	r2, #1
 8012af0:	fa00 fb05 	lsl.w	fp, r0, r5
 8012af4:	40aa      	lsls	r2, r5
 8012af6:	fbbb f9f4 	udiv	r9, fp, r4
 8012afa:	3a01      	subs	r2, #1
 8012afc:	fb0a f309 	mul.w	r3, sl, r9
 8012b00:	fb04 b919 	mls	r9, r4, r9, fp
 8012b04:	4016      	ands	r6, r2
 8012b06:	9303      	str	r3, [sp, #12]
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7ff ffa3 	bl	8012a54 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012b0e:	462b      	mov	r3, r5
 8012b10:	460a      	mov	r2, r1
 8012b12:	4601      	mov	r1, r0
 8012b14:	4630      	mov	r0, r6
 8012b16:	e9cd 4700 	strd	r4, r7, [sp]
 8012b1a:	f7ff ffb9 	bl	8012a90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012b1e:	4606      	mov	r6, r0
 8012b20:	4648      	mov	r0, r9
 8012b22:	eb05 0108 	add.w	r1, r5, r8
 8012b26:	f7ff ff95 	bl	8012a54 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012b2a:	ab05      	add	r3, sp, #20
 8012b2c:	464a      	mov	r2, r9
 8012b2e:	e9cd 4300 	strd	r4, r3, [sp]
 8012b32:	4603      	mov	r3, r0
 8012b34:	4650      	mov	r0, sl
 8012b36:	f7ff ffab 	bl	8012a90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012b3a:	6839      	ldr	r1, [r7, #0]
 8012b3c:	9a05      	ldr	r2, [sp, #20]
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	4411      	add	r1, r2
 8012b42:	fbb1 f2f4 	udiv	r2, r1, r4
 8012b46:	18d3      	adds	r3, r2, r3
 8012b48:	fb04 1412 	mls	r4, r4, r2, r1
 8012b4c:	441e      	add	r6, r3
 8012b4e:	603c      	str	r4, [r7, #0]
 8012b50:	4430      	add	r0, r6
 8012b52:	e7ae      	b.n	8012ab2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012b54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b58:	b085      	sub	sp, #20
 8012b5a:	f1b0 0900 	subs.w	r9, r0, #0
 8012b5e:	461d      	mov	r5, r3
 8012b60:	4617      	mov	r7, r2
 8012b62:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012b64:	bfbb      	ittet	lt
 8012b66:	f1c9 0900 	rsblt	r9, r9, #0
 8012b6a:	f04f 36ff 	movlt.w	r6, #4294967295
 8012b6e:	2601      	movge	r6, #1
 8012b70:	6823      	ldrlt	r3, [r4, #0]
 8012b72:	bfbc      	itt	lt
 8012b74:	425b      	neglt	r3, r3
 8012b76:	6023      	strlt	r3, [r4, #0]
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	da04      	bge.n	8012b86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	4257      	negs	r7, r2
 8012b80:	4276      	negs	r6, r6
 8012b82:	425b      	negs	r3, r3
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	2d00      	cmp	r5, #0
 8012b88:	4638      	mov	r0, r7
 8012b8a:	bfba      	itte	lt
 8012b8c:	426d      	neglt	r5, r5
 8012b8e:	f04f 38ff 	movlt.w	r8, #4294967295
 8012b92:	f04f 0801 	movge.w	r8, #1
 8012b96:	f7ff ff5d 	bl	8012a54 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012b9a:	ab03      	add	r3, sp, #12
 8012b9c:	463a      	mov	r2, r7
 8012b9e:	e9cd 5300 	strd	r5, r3, [sp]
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	4648      	mov	r0, r9
 8012ba6:	f7ff ff73 	bl	8012a90 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	9a03      	ldr	r2, [sp, #12]
 8012bae:	4546      	cmp	r6, r8
 8012bb0:	441a      	add	r2, r3
 8012bb2:	fb92 f3f5 	sdiv	r3, r2, r5
 8012bb6:	4418      	add	r0, r3
 8012bb8:	fb05 2313 	mls	r3, r5, r3, r2
 8012bbc:	bf18      	it	ne
 8012bbe:	4240      	negne	r0, r0
 8012bc0:	1c72      	adds	r2, r6, #1
 8012bc2:	6023      	str	r3, [r4, #0]
 8012bc4:	d105      	bne.n	8012bd2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f1c3 0200 	rsb	r2, r3, #0
 8012bcc:	db0b      	blt.n	8012be6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012bce:	6022      	str	r2, [r4, #0]
 8012bd0:	e006      	b.n	8012be0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012bd2:	2e01      	cmp	r6, #1
 8012bd4:	d104      	bne.n	8012be0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	da02      	bge.n	8012be0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012bda:	442b      	add	r3, r5
 8012bdc:	3801      	subs	r0, #1
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	b005      	add	sp, #20
 8012be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012be6:	3801      	subs	r0, #1
 8012be8:	1b52      	subs	r2, r2, r5
 8012bea:	e7f0      	b.n	8012bce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08012bec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012bf0:	4c1c      	ldr	r4, [pc, #112]	@ (8012c64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	6807      	ldr	r7, [r0, #0]
 8012bf6:	69a3      	ldr	r3, [r4, #24]
 8012bf8:	b92b      	cbnz	r3, 8012c06 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012bfa:	6840      	ldr	r0, [r0, #4]
 8012bfc:	e9c5 7000 	strd	r7, r0, [r5]
 8012c00:	b004      	add	sp, #16
 8012c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c06:	f04f 0802 	mov.w	r8, #2
 8012c0a:	68a2      	ldr	r2, [r4, #8]
 8012c0c:	ae04      	add	r6, sp, #16
 8012c0e:	6820      	ldr	r0, [r4, #0]
 8012c10:	fb93 f1f8 	sdiv	r1, r3, r8
 8012c14:	440a      	add	r2, r1
 8012c16:	69e1      	ldr	r1, [r4, #28]
 8012c18:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012c1c:	463a      	mov	r2, r7
 8012c1e:	9600      	str	r6, [sp, #0]
 8012c20:	f7ff ff98 	bl	8012b54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012c24:	69a3      	ldr	r3, [r4, #24]
 8012c26:	4607      	mov	r7, r0
 8012c28:	686a      	ldr	r2, [r5, #4]
 8012c2a:	6a21      	ldr	r1, [r4, #32]
 8012c2c:	9600      	str	r6, [sp, #0]
 8012c2e:	6860      	ldr	r0, [r4, #4]
 8012c30:	f7ff ff90 	bl	8012b54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012c34:	69a3      	ldr	r3, [r4, #24]
 8012c36:	6962      	ldr	r2, [r4, #20]
 8012c38:	4407      	add	r7, r0
 8012c3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012c3c:	9600      	str	r6, [sp, #0]
 8012c3e:	68e0      	ldr	r0, [r4, #12]
 8012c40:	fb93 f8f8 	sdiv	r8, r3, r8
 8012c44:	4442      	add	r2, r8
 8012c46:	9203      	str	r2, [sp, #12]
 8012c48:	682a      	ldr	r2, [r5, #0]
 8012c4a:	f7ff ff83 	bl	8012b54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012c4e:	4680      	mov	r8, r0
 8012c50:	9600      	str	r6, [sp, #0]
 8012c52:	69a3      	ldr	r3, [r4, #24]
 8012c54:	686a      	ldr	r2, [r5, #4]
 8012c56:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012c58:	6920      	ldr	r0, [r4, #16]
 8012c5a:	f7ff ff7b 	bl	8012b54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012c5e:	4440      	add	r0, r8
 8012c60:	e7cc      	b.n	8012bfc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012c62:	bf00      	nop
 8012c64:	240253e8 	.word	0x240253e8

08012c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012c68:	4b07      	ldr	r3, [pc, #28]	@ (8012c88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d109      	bne.n	8012c84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012c70:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012c74:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012c78:	8003      	strh	r3, [r0, #0]
 8012c7a:	4b04      	ldr	r3, [pc, #16]	@ (8012c8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	3b01      	subs	r3, #1
 8012c80:	1a9b      	subs	r3, r3, r2
 8012c82:	800b      	strh	r3, [r1, #0]
 8012c84:	4770      	bx	lr
 8012c86:	bf00      	nop
 8012c88:	240253cc 	.word	0x240253cc
 8012c8c:	240253c8 	.word	0x240253c8

08012c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012c90:	4b07      	ldr	r3, [pc, #28]	@ (8012cb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012c92:	b510      	push	{r4, lr}
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d108      	bne.n	8012cac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012c9a:	4b06      	ldr	r3, [pc, #24]	@ (8012cb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012c9c:	880c      	ldrh	r4, [r1, #0]
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	1b1b      	subs	r3, r3, r4
 8012ca8:	8003      	strh	r3, [r0, #0]
 8012caa:	800a      	strh	r2, [r1, #0]
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	bf00      	nop
 8012cb0:	240253cc 	.word	0x240253cc
 8012cb4:	240253c8 	.word	0x240253c8

08012cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8012ce4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012cba:	b510      	push	{r4, lr}
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d10e      	bne.n	8012ce0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012cc2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012cc6:	8843      	ldrh	r3, [r0, #2]
 8012cc8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012ccc:	18ca      	adds	r2, r1, r3
 8012cce:	4b06      	ldr	r3, [pc, #24]	@ (8012ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012cd0:	8044      	strh	r4, [r0, #2]
 8012cd2:	881b      	ldrh	r3, [r3, #0]
 8012cd4:	1a9b      	subs	r3, r3, r2
 8012cd6:	8003      	strh	r3, [r0, #0]
 8012cd8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012cdc:	8081      	strh	r1, [r0, #4]
 8012cde:	80c3      	strh	r3, [r0, #6]
 8012ce0:	bd10      	pop	{r4, pc}
 8012ce2:	bf00      	nop
 8012ce4:	240253cc 	.word	0x240253cc
 8012ce8:	240253c8 	.word	0x240253c8

08012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012cec:	4b08      	ldr	r3, [pc, #32]	@ (8012d10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d10c      	bne.n	8012d0e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8012cf4:	8803      	ldrh	r3, [r0, #0]
 8012cf6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012cfa:	8842      	ldrh	r2, [r0, #2]
 8012cfc:	8002      	strh	r2, [r0, #0]
 8012cfe:	185a      	adds	r2, r3, r1
 8012d00:	4b04      	ldr	r3, [pc, #16]	@ (8012d14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	1a9b      	subs	r3, r3, r2
 8012d06:	8043      	strh	r3, [r0, #2]
 8012d08:	88c3      	ldrh	r3, [r0, #6]
 8012d0a:	80c1      	strh	r1, [r0, #6]
 8012d0c:	8083      	strh	r3, [r0, #4]
 8012d0e:	4770      	bx	lr
 8012d10:	240253cc 	.word	0x240253cc
 8012d14:	240253c8 	.word	0x240253c8

08012d18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012d18:	4b07      	ldr	r3, [pc, #28]	@ (8012d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012d1a:	b510      	push	{r4, lr}
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	d108      	bne.n	8012d34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012d22:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012d26:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012d2a:	8003      	strh	r3, [r0, #0]
 8012d2c:	8893      	ldrh	r3, [r2, #4]
 8012d2e:	3b01      	subs	r3, #1
 8012d30:	1b1b      	subs	r3, r3, r4
 8012d32:	800b      	strh	r3, [r1, #0]
 8012d34:	bd10      	pop	{r4, pc}
 8012d36:	bf00      	nop
 8012d38:	240253cc 	.word	0x240253cc

08012d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8012d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8012d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d111      	bne.n	8012d68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8012d44:	680b      	ldr	r3, [r1, #0]
 8012d46:	ed90 7a00 	vldr	s14, [r0]
 8012d4a:	6003      	str	r3, [r0, #0]
 8012d4c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012d50:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8012d70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8012d54:	ee07 3a90 	vmov	s15, r3
 8012d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d64:	edc1 7a00 	vstr	s15, [r1]
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	240253cc 	.word	0x240253cc
 8012d70:	38d1b717 	.word	0x38d1b717

08012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012d74:	4b0a      	ldr	r3, [pc, #40]	@ (8012da0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012d76:	460a      	mov	r2, r1
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d10d      	bne.n	8012d9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012d80:	8881      	ldrh	r1, [r0, #4]
 8012d82:	8803      	ldrh	r3, [r0, #0]
 8012d84:	440b      	add	r3, r1
 8012d86:	4601      	mov	r1, r0
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	f821 3b02 	strh.w	r3, [r1], #2
 8012d8e:	f7ff ffc3 	bl	8012d18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012d92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012d96:	88c2      	ldrh	r2, [r0, #6]
 8012d98:	80c3      	strh	r3, [r0, #6]
 8012d9a:	8082      	strh	r2, [r0, #4]
 8012d9c:	bd10      	pop	{r4, pc}
 8012d9e:	bf00      	nop
 8012da0:	240253cc 	.word	0x240253cc

08012da4 <_ZN8touchgfx11Application13requestRedrawEv>:
 8012da4:	4b06      	ldr	r3, [pc, #24]	@ (8012dc0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8012da6:	2100      	movs	r1, #0
 8012da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012dac:	4b05      	ldr	r3, [pc, #20]	@ (8012dc4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012dae:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8012db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012db6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8012dba:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8012dbe:	4770      	bx	lr
 8012dc0:	240253c8 	.word	0x240253c8
 8012dc4:	240253ca 	.word	0x240253ca

08012dc8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012dc8:	4b03      	ldr	r3, [pc, #12]	@ (8012dd8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012dca:	6818      	ldr	r0, [r3, #0]
 8012dcc:	b110      	cbz	r0, 8012dd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012dce:	6803      	ldr	r3, [r0, #0]
 8012dd0:	699b      	ldr	r3, [r3, #24]
 8012dd2:	4718      	bx	r3
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop
 8012dd8:	24025418 	.word	0x24025418

08012ddc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012ddc:	4770      	bx	lr
	...

08012de0 <_ZN8touchgfx11Application4drawEv>:
 8012de0:	4b09      	ldr	r3, [pc, #36]	@ (8012e08 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012de2:	b507      	push	{r0, r1, r2, lr}
 8012de4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012de8:	2100      	movs	r1, #0
 8012dea:	4b08      	ldr	r3, [pc, #32]	@ (8012e0c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012dec:	9100      	str	r1, [sp, #0]
 8012dee:	4669      	mov	r1, sp
 8012df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012df4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012df8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012dfc:	6803      	ldr	r3, [r0, #0]
 8012dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e00:	4798      	blx	r3
 8012e02:	b003      	add	sp, #12
 8012e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e08:	240253c8 	.word	0x240253c8
 8012e0c:	240253ca 	.word	0x240253ca

08012e10 <_ZN8touchgfx11Application10invalidateEv>:
 8012e10:	4b09      	ldr	r3, [pc, #36]	@ (8012e38 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012e12:	b082      	sub	sp, #8
 8012e14:	2100      	movs	r1, #0
 8012e16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e1a:	4b08      	ldr	r3, [pc, #32]	@ (8012e3c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012e1c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012e20:	aa02      	add	r2, sp, #8
 8012e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e26:	9100      	str	r1, [sp, #0]
 8012e28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012e2c:	6803      	ldr	r3, [r0, #0]
 8012e2e:	e912 0006 	ldmdb	r2, {r1, r2}
 8012e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e34:	b002      	add	sp, #8
 8012e36:	4718      	bx	r3
 8012e38:	240253c8 	.word	0x240253c8
 8012e3c:	240253ca 	.word	0x240253ca

08012e40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012e40:	4b03      	ldr	r3, [pc, #12]	@ (8012e50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012e42:	6818      	ldr	r0, [r3, #0]
 8012e44:	b110      	cbz	r0, 8012e4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012e46:	6803      	ldr	r3, [r0, #0]
 8012e48:	69db      	ldr	r3, [r3, #28]
 8012e4a:	4718      	bx	r3
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	24025418 	.word	0x24025418

08012e54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012e54:	4b03      	ldr	r3, [pc, #12]	@ (8012e64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012e56:	6818      	ldr	r0, [r3, #0]
 8012e58:	b110      	cbz	r0, 8012e60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012e5a:	6803      	ldr	r3, [r0, #0]
 8012e5c:	6a1b      	ldr	r3, [r3, #32]
 8012e5e:	4718      	bx	r3
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	24025418 	.word	0x24025418

08012e68 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8012e6e:	4770      	bx	lr

08012e70 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012e70:	4b03      	ldr	r3, [pc, #12]	@ (8012e80 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012e72:	6818      	ldr	r0, [r3, #0]
 8012e74:	b110      	cbz	r0, 8012e7c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012e76:	6803      	ldr	r3, [r0, #0]
 8012e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e7a:	4718      	bx	r3
 8012e7c:	4770      	bx	lr
 8012e7e:	bf00      	nop
 8012e80:	24025418 	.word	0x24025418

08012e84 <_ZN8touchgfx11ApplicationD1Ev>:
 8012e84:	4770      	bx	lr

08012e86 <_ZN8touchgfx11ApplicationD0Ev>:
 8012e86:	b510      	push	{r4, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8012e8e:	f00e f926 	bl	80210de <_ZdlPvj>
 8012e92:	4620      	mov	r0, r4
 8012e94:	bd10      	pop	{r4, pc}

08012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012e96:	b510      	push	{r4, lr}
 8012e98:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012e9c:	888a      	ldrh	r2, [r1, #4]
 8012e9e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012ea2:	4422      	add	r2, r4
 8012ea4:	b212      	sxth	r2, r2
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	da15      	bge.n	8012ed6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012eaa:	8882      	ldrh	r2, [r0, #4]
 8012eac:	4413      	add	r3, r2
 8012eae:	b21b      	sxth	r3, r3
 8012eb0:	429c      	cmp	r4, r3
 8012eb2:	da10      	bge.n	8012ed6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012eb4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012eb8:	88c9      	ldrh	r1, [r1, #6]
 8012eba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012ebe:	4419      	add	r1, r3
 8012ec0:	b209      	sxth	r1, r1
 8012ec2:	428a      	cmp	r2, r1
 8012ec4:	da07      	bge.n	8012ed6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012ec6:	88c0      	ldrh	r0, [r0, #6]
 8012ec8:	4410      	add	r0, r2
 8012eca:	b200      	sxth	r0, r0
 8012ecc:	4283      	cmp	r3, r0
 8012ece:	bfac      	ite	ge
 8012ed0:	2000      	movge	r0, #0
 8012ed2:	2001      	movlt	r0, #1
 8012ed4:	bd10      	pop	{r4, pc}
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	e7fc      	b.n	8012ed4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012eda <_ZN8touchgfx4Rect10restrictToEss>:
 8012eda:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	da04      	bge.n	8012eee <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012ee4:	8884      	ldrh	r4, [r0, #4]
 8012ee6:	4423      	add	r3, r4
 8012ee8:	8083      	strh	r3, [r0, #4]
 8012eea:	2300      	movs	r3, #0
 8012eec:	8003      	strh	r3, [r0, #0]
 8012eee:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012ef2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012ef6:	1b09      	subs	r1, r1, r4
 8012ef8:	428b      	cmp	r3, r1
 8012efa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012efe:	bfc8      	it	gt
 8012f00:	8081      	strhgt	r1, [r0, #4]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	da04      	bge.n	8012f10 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012f06:	88c1      	ldrh	r1, [r0, #6]
 8012f08:	440b      	add	r3, r1
 8012f0a:	80c3      	strh	r3, [r0, #6]
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	8043      	strh	r3, [r0, #2]
 8012f10:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012f14:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012f18:	1a52      	subs	r2, r2, r1
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	bfc8      	it	gt
 8012f1e:	80c2      	strhgt	r2, [r0, #6]
 8012f20:	bd10      	pop	{r4, pc}
	...

08012f24 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012f24:	4b10      	ldr	r3, [pc, #64]	@ (8012f68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8012f26:	b510      	push	{r4, lr}
 8012f28:	460c      	mov	r4, r1
 8012f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8012f6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012f30:	4620      	mov	r0, r4
 8012f32:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012f36:	f7ff ffd0 	bl	8012eda <_ZN8touchgfx4Rect10restrictToEss>
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012f70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8012f3c:	6818      	ldr	r0, [r3, #0]
 8012f3e:	b190      	cbz	r0, 8012f66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012f40:	6803      	ldr	r3, [r0, #0]
 8012f42:	4621      	mov	r1, r4
 8012f44:	689b      	ldr	r3, [r3, #8]
 8012f46:	4798      	blx	r3
 8012f48:	4b0a      	ldr	r3, [pc, #40]	@ (8012f74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	b118      	cbz	r0, 8012f56 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	4621      	mov	r1, r4
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	4798      	blx	r3
 8012f56:	4b08      	ldr	r3, [pc, #32]	@ (8012f78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012f58:	4621      	mov	r1, r4
 8012f5a:	6818      	ldr	r0, [r3, #0]
 8012f5c:	6803      	ldr	r3, [r0, #0]
 8012f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f62:	69db      	ldr	r3, [r3, #28]
 8012f64:	4718      	bx	r3
 8012f66:	bd10      	pop	{r4, pc}
 8012f68:	240253ca 	.word	0x240253ca
 8012f6c:	240253c8 	.word	0x240253c8
 8012f70:	24025418 	.word	0x24025418
 8012f74:	24025414 	.word	0x24025414
 8012f78:	240253d4 	.word	0x240253d4

08012f7c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7e:	4606      	mov	r6, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	460f      	mov	r7, r1
 8012f84:	f7fa fe99 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f88:	b9e8      	cbnz	r0, 8012fc6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012f8a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8012f8e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8012f92:	42a5      	cmp	r5, r4
 8012f94:	db17      	blt.n	8012fc6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012f96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012f9a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	db11      	blt.n	8012fc6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012fa2:	88b9      	ldrh	r1, [r7, #4]
 8012fa4:	440d      	add	r5, r1
 8012fa6:	88b1      	ldrh	r1, [r6, #4]
 8012fa8:	440c      	add	r4, r1
 8012faa:	b22d      	sxth	r5, r5
 8012fac:	b224      	sxth	r4, r4
 8012fae:	42a5      	cmp	r5, r4
 8012fb0:	dc09      	bgt.n	8012fc6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012fb2:	88f8      	ldrh	r0, [r7, #6]
 8012fb4:	4410      	add	r0, r2
 8012fb6:	88f2      	ldrh	r2, [r6, #6]
 8012fb8:	4413      	add	r3, r2
 8012fba:	b200      	sxth	r0, r0
 8012fbc:	b21b      	sxth	r3, r3
 8012fbe:	4298      	cmp	r0, r3
 8012fc0:	bfcc      	ite	gt
 8012fc2:	2000      	movgt	r0, #0
 8012fc4:	2001      	movle	r0, #1
 8012fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fca:	4604      	mov	r4, r0
 8012fcc:	4608      	mov	r0, r1
 8012fce:	460d      	mov	r5, r1
 8012fd0:	f7fa fe73 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012fd4:	b978      	cbnz	r0, 8012ff6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f7fa fe6f 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012fdc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012fe0:	b150      	cbz	r0, 8012ff8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012fe2:	8026      	strh	r6, [r4, #0]
 8012fe4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012fe8:	8063      	strh	r3, [r4, #2]
 8012fea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012fee:	80a3      	strh	r3, [r4, #4]
 8012ff0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012ff4:	80e3      	strh	r3, [r4, #6]
 8012ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012ffc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013000:	42b1      	cmp	r1, r6
 8013002:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013006:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801300a:	460f      	mov	r7, r1
 801300c:	88ed      	ldrh	r5, [r5, #6]
 801300e:	bfa8      	it	ge
 8013010:	4637      	movge	r7, r6
 8013012:	4293      	cmp	r3, r2
 8013014:	4618      	mov	r0, r3
 8013016:	4466      	add	r6, ip
 8013018:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801301c:	bfa8      	it	ge
 801301e:	4610      	movge	r0, r2
 8013020:	442a      	add	r2, r5
 8013022:	88e5      	ldrh	r5, [r4, #6]
 8013024:	4461      	add	r1, ip
 8013026:	b236      	sxth	r6, r6
 8013028:	8027      	strh	r7, [r4, #0]
 801302a:	442b      	add	r3, r5
 801302c:	b209      	sxth	r1, r1
 801302e:	b212      	sxth	r2, r2
 8013030:	8060      	strh	r0, [r4, #2]
 8013032:	b21b      	sxth	r3, r3
 8013034:	428e      	cmp	r6, r1
 8013036:	bfac      	ite	ge
 8013038:	ebc7 0106 	rsbge	r1, r7, r6
 801303c:	ebc7 0101 	rsblt	r1, r7, r1
 8013040:	429a      	cmp	r2, r3
 8013042:	bfac      	ite	ge
 8013044:	ebc0 0202 	rsbge	r2, r0, r2
 8013048:	ebc0 0203 	rsblt	r2, r0, r3
 801304c:	80a1      	strh	r1, [r4, #4]
 801304e:	80e2      	strh	r2, [r4, #6]
 8013050:	e7d1      	b.n	8012ff6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013054 <_ZN8touchgfx11Application11getInstanceEv>:
 8013054:	4b01      	ldr	r3, [pc, #4]	@ (801305c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013056:	6818      	ldr	r0, [r3, #0]
 8013058:	4770      	bx	lr
 801305a:	bf00      	nop
 801305c:	24025428 	.word	0x24025428

08013060 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013060:	2300      	movs	r3, #0
 8013062:	b510      	push	{r4, lr}
 8013064:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8013068:	4604      	mov	r4, r0
 801306a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801306e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8013072:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8013076:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801307a:	429a      	cmp	r2, r3
 801307c:	d90e      	bls.n	801309c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801307e:	18e2      	adds	r2, r4, r3
 8013080:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8013084:	b122      	cbz	r2, 8013090 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8013086:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801308a:	6803      	ldr	r3, [r0, #0]
 801308c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801308e:	4798      	blx	r3
 8013090:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8013094:	3301      	adds	r3, #1
 8013096:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801309a:	e7ea      	b.n	8013072 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801309c:	bd10      	pop	{r4, pc}

0801309e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801309e:	b530      	push	{r4, r5, lr}
 80130a0:	2200      	movs	r2, #0
 80130a2:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80130a6:	b293      	uxth	r3, r2
 80130a8:	429d      	cmp	r5, r3
 80130aa:	d90e      	bls.n	80130ca <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80130ac:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80130b0:	428b      	cmp	r3, r1
 80130b2:	d10b      	bne.n	80130cc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80130b4:	1884      	adds	r4, r0, r2
 80130b6:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80130ba:	b13b      	cbz	r3, 80130cc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80130bc:	3b01      	subs	r3, #1
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80130c4:	b90b      	cbnz	r3, 80130ca <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80130c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80130ca:	bd30      	pop	{r4, r5, pc}
 80130cc:	3201      	adds	r2, #1
 80130ce:	e7ea      	b.n	80130a6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080130d0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80130d0:	2300      	movs	r3, #0
 80130d2:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80130d6:	30a4      	adds	r0, #164	@ 0xa4
 80130d8:	f820 3c24 	strh.w	r3, [r0, #-36]
 80130dc:	f802 3b01 	strb.w	r3, [r2], #1
 80130e0:	4282      	cmp	r2, r0
 80130e2:	d1fb      	bne.n	80130dc <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80130e4:	4770      	bx	lr
	...

080130e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80130e8:	b570      	push	{r4, r5, r6, lr}
 80130ea:	4c0b      	ldr	r4, [pc, #44]	@ (8013118 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80130ec:	4605      	mov	r5, r0
 80130ee:	460e      	mov	r6, r1
 80130f0:	6820      	ldr	r0, [r4, #0]
 80130f2:	b110      	cbz	r0, 80130fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80130f4:	6803      	ldr	r3, [r0, #0]
 80130f6:	695b      	ldr	r3, [r3, #20]
 80130f8:	4798      	blx	r3
 80130fa:	1d28      	adds	r0, r5, #4
 80130fc:	f7ff ffe8 	bl	80130d0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013100:	6026      	str	r6, [r4, #0]
 8013102:	6833      	ldr	r3, [r6, #0]
 8013104:	4630      	mov	r0, r6
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	4798      	blx	r3
 801310a:	682b      	ldr	r3, [r5, #0]
 801310c:	4628      	mov	r0, r5
 801310e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013114:	4718      	bx	r3
 8013116:	bf00      	nop
 8013118:	24025418 	.word	0x24025418

0801311c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801311c:	2300      	movs	r3, #0
 801311e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8013122:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8013126:	461a      	mov	r2, r3
 8013128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801312a:	461c      	mov	r4, r3
 801312c:	461d      	mov	r5, r3
 801312e:	459c      	cmp	ip, r3
 8013130:	dd1a      	ble.n	8013168 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8013132:	18c6      	adds	r6, r0, r3
 8013134:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8013138:	b16e      	cbz	r6, 8013156 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801313a:	429a      	cmp	r2, r3
 801313c:	d008      	beq.n	8013150 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801313e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8013142:	fa1f fe82 	uxth.w	lr, r2
 8013146:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801314a:	1887      	adds	r7, r0, r2
 801314c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8013150:	3201      	adds	r2, #1
 8013152:	3301      	adds	r3, #1
 8013154:	e7eb      	b.n	801312e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8013156:	4299      	cmp	r1, r3
 8013158:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801315c:	bfa8      	it	ge
 801315e:	3501      	addge	r5, #1
 8013160:	429e      	cmp	r6, r3
 8013162:	bfc8      	it	gt
 8013164:	3401      	addgt	r4, #1
 8013166:	e7f4      	b.n	8013152 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8013168:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801316c:	1b49      	subs	r1, r1, r5
 801316e:	1b1b      	subs	r3, r3, r4
 8013170:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8013174:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8013178:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801317c:	4293      	cmp	r3, r2
 801317e:	dd03      	ble.n	8013188 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8013180:	3b01      	subs	r3, #1
 8013182:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8013186:	e7f7      	b.n	8013178 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801318c <_ZN8touchgfx11Application15handleTickEventEv>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	4d16      	ldr	r5, [pc, #88]	@ (80131e8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8013190:	4604      	mov	r4, r0
 8013192:	6828      	ldr	r0, [r5, #0]
 8013194:	b140      	cbz	r0, 80131a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013196:	7a03      	ldrb	r3, [r0, #8]
 8013198:	b933      	cbnz	r3, 80131a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801319a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801319e:	6803      	ldr	r3, [r0, #0]
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131a6:	4718      	bx	r3
 80131a8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80131ac:	4e0f      	ldr	r6, [pc, #60]	@ (80131ec <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80131ae:	b973      	cbnz	r3, 80131ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80131b0:	b168      	cbz	r0, 80131ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80131b2:	7a03      	ldrb	r3, [r0, #8]
 80131b4:	b15b      	cbz	r3, 80131ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80131b6:	6830      	ldr	r0, [r6, #0]
 80131b8:	b110      	cbz	r0, 80131c0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80131ba:	6803      	ldr	r3, [r0, #0]
 80131bc:	691b      	ldr	r3, [r3, #16]
 80131be:	4798      	blx	r3
 80131c0:	6828      	ldr	r0, [r5, #0]
 80131c2:	6803      	ldr	r3, [r0, #0]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	4798      	blx	r3
 80131c8:	2301      	movs	r3, #1
 80131ca:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80131ce:	3404      	adds	r4, #4
 80131d0:	4620      	mov	r0, r4
 80131d2:	f7ff ff45 	bl	8013060 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80131d6:	4620      	mov	r0, r4
 80131d8:	f7ff ffa0 	bl	801311c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80131dc:	6830      	ldr	r0, [r6, #0]
 80131de:	b110      	cbz	r0, 80131e6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80131e0:	6803      	ldr	r3, [r0, #0]
 80131e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131e4:	e7dd      	b.n	80131a2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	2402541c 	.word	0x2402541c
 80131ec:	24025418 	.word	0x24025418

080131f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80131f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f2:	2300      	movs	r3, #0
 80131f4:	4604      	mov	r4, r0
 80131f6:	460d      	mov	r5, r1
 80131f8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80131fc:	4618      	mov	r0, r3
 80131fe:	b29a      	uxth	r2, r3
 8013200:	4291      	cmp	r1, r2
 8013202:	d912      	bls.n	801322a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8013204:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8013208:	18e6      	adds	r6, r4, r3
 801320a:	42af      	cmp	r7, r5
 801320c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8013210:	d105      	bne.n	801321e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8013212:	2aff      	cmp	r2, #255	@ 0xff
 8013214:	d002      	beq.n	801321c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8013216:	3201      	adds	r2, #1
 8013218:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321e:	2a00      	cmp	r2, #0
 8013220:	f103 0301 	add.w	r3, r3, #1
 8013224:	bf08      	it	eq
 8013226:	2001      	moveq	r0, #1
 8013228:	e7e9      	b.n	80131fe <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801322a:	b120      	cbz	r0, 8013236 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801322c:	2920      	cmp	r1, #32
 801322e:	d102      	bne.n	8013236 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8013230:	4620      	mov	r0, r4
 8013232:	f7ff ff73 	bl	801311c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013236:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801323a:	2b1f      	cmp	r3, #31
 801323c:	d8ee      	bhi.n	801321c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801323e:	18e2      	adds	r2, r4, r3
 8013240:	2101      	movs	r1, #1
 8013242:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8013246:	185a      	adds	r2, r3, r1
 8013248:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801324c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013250:	e7e4      	b.n	801321c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08013252 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8013252:	4603      	mov	r3, r0
 8013254:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8013258:	2200      	movs	r2, #0
 801325a:	801a      	strh	r2, [r3, #0]
 801325c:	3308      	adds	r3, #8
 801325e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8013262:	f823 2c04 	strh.w	r2, [r3, #-4]
 8013266:	f823 2c02 	strh.w	r2, [r3, #-2]
 801326a:	428b      	cmp	r3, r1
 801326c:	d1f5      	bne.n	801325a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801326e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8013272:	4770      	bx	lr

08013274 <_ZN8touchgfx11ApplicationC1Ev>:
 8013274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013276:	4b1d      	ldr	r3, [pc, #116]	@ (80132ec <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013278:	4606      	mov	r6, r0
 801327a:	4604      	mov	r4, r0
 801327c:	2500      	movs	r5, #0
 801327e:	f846 3b04 	str.w	r3, [r6], #4
 8013282:	22a8      	movs	r2, #168	@ 0xa8
 8013284:	2100      	movs	r1, #0
 8013286:	4630      	mov	r0, r6
 8013288:	f00e fd3e 	bl	8021d08 <memset>
 801328c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8013290:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013294:	4f16      	ldr	r7, [pc, #88]	@ (80132f0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013296:	f7ff ffdc 	bl	8013252 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801329a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801329e:	f7ff ffd8 	bl	8013252 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80132a2:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80132a6:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80132aa:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80132ae:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80132b2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80132b6:	490f      	ldr	r1, [pc, #60]	@ (80132f4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80132b8:	480f      	ldr	r0, [pc, #60]	@ (80132f8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80132ba:	f00d f89f 	bl	80203fc <CRC_Lock>
 80132be:	4b0f      	ldr	r3, [pc, #60]	@ (80132fc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80132c0:	b158      	cbz	r0, 80132da <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80132c2:	801d      	strh	r5, [r3, #0]
 80132c4:	2300      	movs	r3, #0
 80132c6:	4a0e      	ldr	r2, [pc, #56]	@ (8013300 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80132c8:	4630      	mov	r0, r6
 80132ca:	6013      	str	r3, [r2, #0]
 80132cc:	4a0d      	ldr	r2, [pc, #52]	@ (8013304 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80132ce:	603b      	str	r3, [r7, #0]
 80132d0:	6013      	str	r3, [r2, #0]
 80132d2:	f7ff fefd 	bl	80130d0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80132d6:	4620      	mov	r0, r4
 80132d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80132de:	2002      	movs	r0, #2
 80132e0:	801a      	strh	r2, [r3, #0]
 80132e2:	6038      	str	r0, [r7, #0]
 80132e4:	f001 fd9e 	bl	8014e24 <_ZN8touchgfx6Screen4drawEv>
 80132e8:	e7ec      	b.n	80132c4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80132ea:	bf00      	nop
 80132ec:	0802567c 	.word	0x0802567c
 80132f0:	24025418 	.word	0x24025418
 80132f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80132f8:	f407a5c2 	.word	0xf407a5c2
 80132fc:	2400007c 	.word	0x2400007c
 8013300:	24025428 	.word	0x24025428
 8013304:	2402541c 	.word	0x2402541c

08013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013308:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801330c:	3b01      	subs	r3, #1
 801330e:	b29b      	uxth	r3, r3
 8013310:	428b      	cmp	r3, r1
 8013312:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8013316:	b510      	push	{r4, lr}
 8013318:	d908      	bls.n	801332c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801331a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801331e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013328:	685a      	ldr	r2, [r3, #4]
 801332a:	6062      	str	r2, [r4, #4]
 801332c:	bd10      	pop	{r4, pc}
	...

08013330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	b08f      	sub	sp, #60	@ 0x3c
 8013336:	4b8f      	ldr	r3, [pc, #572]	@ (8013574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8013338:	4683      	mov	fp, r0
 801333a:	ac0a      	add	r4, sp, #40	@ 0x28
 801333c:	e884 0006 	stmia.w	r4, {r1, r2}
 8013340:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013344:	4620      	mov	r0, r4
 8013346:	4b8c      	ldr	r3, [pc, #560]	@ (8013578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8013348:	f9b3 1000 	ldrsh.w	r1, [r3]
 801334c:	f7ff fdc5 	bl	8012eda <_ZN8touchgfx4Rect10restrictToEss>
 8013350:	4620      	mov	r0, r4
 8013352:	f7fa fcb2 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013356:	2800      	cmp	r0, #0
 8013358:	d16a      	bne.n	8013430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801335a:	9403      	str	r4, [sp, #12]
 801335c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013360:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013364:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8013368:	9301      	str	r3, [sp, #4]
 801336a:	35a4      	adds	r5, #164	@ 0xa4
 801336c:	b15c      	cbz	r4, 8013386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801336e:	4629      	mov	r1, r5
 8013370:	9803      	ldr	r0, [sp, #12]
 8013372:	f7ff fe03 	bl	8012f7c <_ZNK8touchgfx4Rect8includesERKS0_>
 8013376:	3c01      	subs	r4, #1
 8013378:	b118      	cbz	r0, 8013382 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801337a:	b2a1      	uxth	r1, r4
 801337c:	9801      	ldr	r0, [sp, #4]
 801337e:	f7ff ffc3 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013382:	3d08      	subs	r5, #8
 8013384:	e7f2      	b.n	801336c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8013386:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801338a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801338e:	f8cd a010 	str.w	sl, [sp, #16]
 8013392:	9302      	str	r3, [sp, #8]
 8013394:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013398:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801339c:	9306      	str	r3, [sp, #24]
 801339e:	445c      	add	r4, fp
 80133a0:	2500      	movs	r5, #0
 80133a2:	4626      	mov	r6, r4
 80133a4:	f8cd a014 	str.w	sl, [sp, #20]
 80133a8:	462f      	mov	r7, r5
 80133aa:	9b05      	ldr	r3, [sp, #20]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d073      	beq.n	8013498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80133b0:	9903      	ldr	r1, [sp, #12]
 80133b2:	4630      	mov	r0, r6
 80133b4:	f7ff fd6f 	bl	8012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80133b8:	b350      	cbz	r0, 8013410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80133ba:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80133be:	f9b6 c000 	ldrsh.w	ip, [r6]
 80133c2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80133c6:	45e6      	cmp	lr, ip
 80133c8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80133cc:	db33      	blt.n	8013436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80133ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80133d2:	88b3      	ldrh	r3, [r6, #4]
 80133d4:	4472      	add	r2, lr
 80133d6:	4463      	add	r3, ip
 80133d8:	b212      	sxth	r2, r2
 80133da:	b21b      	sxth	r3, r3
 80133dc:	429a      	cmp	r2, r3
 80133de:	dc2a      	bgt.n	8013436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80133e0:	fa1f f289 	uxth.w	r2, r9
 80133e4:	88f3      	ldrh	r3, [r6, #6]
 80133e6:	45c8      	cmp	r8, r9
 80133e8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80133ec:	4413      	add	r3, r2
 80133ee:	fa1f fc88 	uxth.w	ip, r8
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	fa0f fe83 	sxth.w	lr, r3
 80133f8:	db0f      	blt.n	801341a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80133fa:	eba3 030c 	sub.w	r3, r3, ip
 80133fe:	1ac9      	subs	r1, r1, r3
 8013400:	b209      	sxth	r1, r1
 8013402:	2900      	cmp	r1, #0
 8013404:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013408:	dd12      	ble.n	8013430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801340a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801340e:	4605      	mov	r5, r0
 8013410:	9b05      	ldr	r3, [sp, #20]
 8013412:	3e08      	subs	r6, #8
 8013414:	3b01      	subs	r3, #1
 8013416:	9305      	str	r3, [sp, #20]
 8013418:	e7c7      	b.n	80133aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801341a:	4461      	add	r1, ip
 801341c:	b209      	sxth	r1, r1
 801341e:	4571      	cmp	r1, lr
 8013420:	dc38      	bgt.n	8013494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013422:	eba2 020c 	sub.w	r2, r2, ip
 8013426:	b212      	sxth	r2, r2
 8013428:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801342c:	2a00      	cmp	r2, #0
 801342e:	dcee      	bgt.n	801340e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013430:	b00f      	add	sp, #60	@ 0x3c
 8013432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013436:	45c8      	cmp	r8, r9
 8013438:	db2c      	blt.n	8013494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801343a:	88f3      	ldrh	r3, [r6, #6]
 801343c:	4499      	add	r9, r3
 801343e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8013442:	4498      	add	r8, r3
 8013444:	fa0f f989 	sxth.w	r9, r9
 8013448:	fa0f f888 	sxth.w	r8, r8
 801344c:	45c1      	cmp	r9, r8
 801344e:	db21      	blt.n	8013494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013450:	fa1f f28c 	uxth.w	r2, ip
 8013454:	88b3      	ldrh	r3, [r6, #4]
 8013456:	45e6      	cmp	lr, ip
 8013458:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801345c:	4413      	add	r3, r2
 801345e:	fa1f f88e 	uxth.w	r8, lr
 8013462:	b29b      	uxth	r3, r3
 8013464:	fa0f f983 	sxth.w	r9, r3
 8013468:	db0a      	blt.n	8013480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801346a:	eba3 0308 	sub.w	r3, r3, r8
 801346e:	1ac9      	subs	r1, r1, r3
 8013470:	b209      	sxth	r1, r1
 8013472:	2900      	cmp	r1, #0
 8013474:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8013478:	ddda      	ble.n	8013430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801347a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801347e:	e7c6      	b.n	801340e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013480:	4441      	add	r1, r8
 8013482:	b209      	sxth	r1, r1
 8013484:	4549      	cmp	r1, r9
 8013486:	dc05      	bgt.n	8013494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013488:	eba2 0208 	sub.w	r2, r2, r8
 801348c:	b212      	sxth	r2, r2
 801348e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8013492:	e7cb      	b.n	801342c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013494:	4607      	mov	r7, r0
 8013496:	e7bb      	b.n	8013410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013498:	2d00      	cmp	r5, #0
 801349a:	d181      	bne.n	80133a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801349c:	2f00      	cmp	r7, #0
 801349e:	f000 81dd 	beq.w	801385c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80134a2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80134a6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80134aa:	b2b3      	uxth	r3, r6
 80134ac:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80134b0:	9305      	str	r3, [sp, #20]
 80134b2:	9a05      	ldr	r2, [sp, #20]
 80134b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80134b8:	4413      	add	r3, r2
 80134ba:	b2ba      	uxth	r2, r7
 80134bc:	4492      	add	sl, r2
 80134be:	b29b      	uxth	r3, r3
 80134c0:	fa1f fa8a 	uxth.w	sl, sl
 80134c4:	fa0f f883 	sxth.w	r8, r3
 80134c8:	fa0f f98a 	sxth.w	r9, sl
 80134cc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80134d0:	9b04      	ldr	r3, [sp, #16]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d052      	beq.n	801357c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80134d6:	9903      	ldr	r1, [sp, #12]
 80134d8:	4620      	mov	r0, r4
 80134da:	f7ff fcdc 	bl	8012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80134de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80134e2:	b1c0      	cbz	r0, 8013516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80134e4:	f9b4 e000 	ldrsh.w	lr, [r4]
 80134e8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80134ec:	4576      	cmp	r6, lr
 80134ee:	dc22      	bgt.n	8013536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80134f0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80134f4:	44f4      	add	ip, lr
 80134f6:	fa0f fc8c 	sxth.w	ip, ip
 80134fa:	45e0      	cmp	r8, ip
 80134fc:	db1b      	blt.n	8013536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80134fe:	428f      	cmp	r7, r1
 8013500:	fa1f fc81 	uxth.w	ip, r1
 8013504:	88e1      	ldrh	r1, [r4, #6]
 8013506:	dc0d      	bgt.n	8013524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8013508:	ebaa 0c0c 	sub.w	ip, sl, ip
 801350c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013510:	eba1 010c 	sub.w	r1, r1, ip
 8013514:	80e1      	strh	r1, [r4, #6]
 8013516:	4628      	mov	r0, r5
 8013518:	9904      	ldr	r1, [sp, #16]
 801351a:	3c08      	subs	r4, #8
 801351c:	4605      	mov	r5, r0
 801351e:	3901      	subs	r1, #1
 8013520:	9104      	str	r1, [sp, #16]
 8013522:	e7d3      	b.n	80134cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8013524:	4461      	add	r1, ip
 8013526:	b209      	sxth	r1, r1
 8013528:	4549      	cmp	r1, r9
 801352a:	dcf5      	bgt.n	8013518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801352c:	eba2 0c0c 	sub.w	ip, r2, ip
 8013530:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013534:	e7ef      	b.n	8013516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013536:	428f      	cmp	r7, r1
 8013538:	dcee      	bgt.n	8013518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801353a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801353e:	4461      	add	r1, ip
 8013540:	b209      	sxth	r1, r1
 8013542:	4589      	cmp	r9, r1
 8013544:	dbe8      	blt.n	8013518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013546:	4576      	cmp	r6, lr
 8013548:	fa1f fc8e 	uxth.w	ip, lr
 801354c:	88a1      	ldrh	r1, [r4, #4]
 801354e:	dc07      	bgt.n	8013560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8013550:	eba3 0c0c 	sub.w	ip, r3, ip
 8013554:	f8a4 8000 	strh.w	r8, [r4]
 8013558:	eba1 010c 	sub.w	r1, r1, ip
 801355c:	80a1      	strh	r1, [r4, #4]
 801355e:	e7da      	b.n	8013516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013560:	4461      	add	r1, ip
 8013562:	b209      	sxth	r1, r1
 8013564:	4588      	cmp	r8, r1
 8013566:	dbd7      	blt.n	8013518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013568:	9905      	ldr	r1, [sp, #20]
 801356a:	eba1 0c0c 	sub.w	ip, r1, ip
 801356e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8013572:	e7d0      	b.n	8013516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013574:	240253ca 	.word	0x240253ca
 8013578:	240253c8 	.word	0x240253c8
 801357c:	2d00      	cmp	r5, #0
 801357e:	f000 816d 	beq.w	801385c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013582:	9b06      	ldr	r3, [sp, #24]
 8013584:	445b      	add	r3, fp
 8013586:	461c      	mov	r4, r3
 8013588:	9b02      	ldr	r3, [sp, #8]
 801358a:	3301      	adds	r3, #1
 801358c:	f000 8166 	beq.w	801385c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013590:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8013594:	9803      	ldr	r0, [sp, #12]
 8013596:	4629      	mov	r1, r5
 8013598:	f7ff fcf0 	bl	8012f7c <_ZNK8touchgfx4Rect8includesERKS0_>
 801359c:	b120      	cbz	r0, 80135a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801359e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80135a2:	9801      	ldr	r0, [sp, #4]
 80135a4:	f7ff feb0 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80135a8:	9903      	ldr	r1, [sp, #12]
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7ff fc73 	bl	8012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	f000 809c 	beq.w	80136ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80135b6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80135ba:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80135be:	fa1f f189 	uxth.w	r1, r9
 80135c2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80135c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80135c8:	eb01 0c03 	add.w	ip, r1, r3
 80135cc:	b283      	uxth	r3, r0
 80135ce:	4548      	cmp	r0, r9
 80135d0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80135d4:	fa1f fa8c 	uxth.w	sl, ip
 80135d8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80135dc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80135e0:	eb03 050c 	add.w	r5, r3, ip
 80135e4:	b2ad      	uxth	r5, r5
 80135e6:	9505      	str	r5, [sp, #20]
 80135e8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80135ec:	9504      	str	r5, [sp, #16]
 80135ee:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80135f2:	f340 8099 	ble.w	8013728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80135f6:	1a5b      	subs	r3, r3, r1
 80135f8:	4596      	cmp	lr, r2
 80135fa:	fa0f f08a 	sxth.w	r0, sl
 80135fe:	b29b      	uxth	r3, r3
 8013600:	b21e      	sxth	r6, r3
 8013602:	dd2e      	ble.n	8013662 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013604:	9f02      	ldr	r7, [sp, #8]
 8013606:	fa1f fe8e 	uxth.w	lr, lr
 801360a:	b292      	uxth	r2, r2
 801360c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8013610:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013614:	9f04      	ldr	r7, [sp, #16]
 8013616:	ebae 0102 	sub.w	r1, lr, r2
 801361a:	44a6      	add	lr, r4
 801361c:	1a3f      	subs	r7, r7, r0
 801361e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8013622:	b289      	uxth	r1, r1
 8013624:	4402      	add	r2, r0
 8013626:	fa0f fe8e 	sxth.w	lr, lr
 801362a:	b20d      	sxth	r5, r1
 801362c:	b212      	sxth	r2, r2
 801362e:	436f      	muls	r7, r5
 8013630:	ebae 0202 	sub.w	r2, lr, r2
 8013634:	4372      	muls	r2, r6
 8013636:	4297      	cmp	r7, r2
 8013638:	db09      	blt.n	801364e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801363a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801363e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8013642:	449c      	add	ip, r3
 8013644:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013648:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801364c:	e686      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801364e:	4421      	add	r1, r4
 8013650:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8013654:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8013658:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801365c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013660:	e67c      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013662:	9f04      	ldr	r7, [sp, #16]
 8013664:	42b8      	cmp	r0, r7
 8013666:	da27      	bge.n	80136b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013668:	9902      	ldr	r1, [sp, #8]
 801366a:	1a3f      	subs	r7, r7, r0
 801366c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8013670:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013674:	eb05 010e 	add.w	r1, r5, lr
 8013678:	fa1f f881 	uxth.w	r8, r1
 801367c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8013680:	4411      	add	r1, r2
 8013682:	fa0f f988 	sxth.w	r9, r8
 8013686:	eba2 020e 	sub.w	r2, r2, lr
 801368a:	eba1 0108 	sub.w	r1, r1, r8
 801368e:	4372      	muls	r2, r6
 8013690:	b289      	uxth	r1, r1
 8013692:	fa0f f881 	sxth.w	r8, r1
 8013696:	fb08 f707 	mul.w	r7, r8, r7
 801369a:	42ba      	cmp	r2, r7
 801369c:	dc06      	bgt.n	80136ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801369e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80136a2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80136a6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80136aa:	e7ca      	b.n	8013642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80136ac:	4429      	add	r1, r5
 80136ae:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80136b2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80136b6:	e651      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80136b8:	9805      	ldr	r0, [sp, #20]
 80136ba:	2d06      	cmp	r5, #6
 80136bc:	ebaa 0000 	sub.w	r0, sl, r0
 80136c0:	b280      	uxth	r0, r0
 80136c2:	fa0f fe80 	sxth.w	lr, r0
 80136c6:	d817      	bhi.n	80136f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80136c8:	9b04      	ldr	r3, [sp, #16]
 80136ca:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80136ce:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80136d2:	1c6b      	adds	r3, r5, #1
 80136d4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80136d8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80136dc:	9b01      	ldr	r3, [sp, #4]
 80136de:	9801      	ldr	r0, [sp, #4]
 80136e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80136e4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80136e8:	805a      	strh	r2, [r3, #2]
 80136ea:	809e      	strh	r6, [r3, #4]
 80136ec:	80d9      	strh	r1, [r3, #6]
 80136ee:	9b02      	ldr	r3, [sp, #8]
 80136f0:	3c08      	subs	r4, #8
 80136f2:	3b01      	subs	r3, #1
 80136f4:	9302      	str	r3, [sp, #8]
 80136f6:	e747      	b.n	8013588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80136f8:	9a02      	ldr	r2, [sp, #8]
 80136fa:	45b6      	cmp	lr, r6
 80136fc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013700:	db0d      	blt.n	801371e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013702:	449c      	add	ip, r3
 8013704:	445a      	add	r2, fp
 8013706:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801370a:	fa1f fc8c 	uxth.w	ip, ip
 801370e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8013712:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8013716:	448c      	add	ip, r1
 8013718:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801371c:	e61e      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801371e:	445a      	add	r2, fp
 8013720:	4484      	add	ip, r0
 8013722:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8013726:	e78f      	b.n	8013648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013728:	fa1f f18e 	uxth.w	r1, lr
 801372c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8013730:	b293      	uxth	r3, r2
 8013732:	4596      	cmp	lr, r2
 8013734:	eb01 0806 	add.w	r8, r1, r6
 8013738:	9306      	str	r3, [sp, #24]
 801373a:	fa1f f888 	uxth.w	r8, r8
 801373e:	9f06      	ldr	r7, [sp, #24]
 8013740:	fa0f f388 	sxth.w	r3, r8
 8013744:	9307      	str	r3, [sp, #28]
 8013746:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801374a:	443b      	add	r3, r7
 801374c:	b29b      	uxth	r3, r3
 801374e:	9308      	str	r3, [sp, #32]
 8013750:	da24      	bge.n	801379c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013752:	9905      	ldr	r1, [sp, #20]
 8013754:	eba3 0308 	sub.w	r3, r3, r8
 8013758:	eba2 020e 	sub.w	r2, r2, lr
 801375c:	eba9 0000 	sub.w	r0, r9, r0
 8013760:	ebaa 0401 	sub.w	r4, sl, r1
 8013764:	b29b      	uxth	r3, r3
 8013766:	b2a4      	uxth	r4, r4
 8013768:	b219      	sxth	r1, r3
 801376a:	b225      	sxth	r5, r4
 801376c:	4348      	muls	r0, r1
 801376e:	436a      	muls	r2, r5
 8013770:	4282      	cmp	r2, r0
 8013772:	9a02      	ldr	r2, [sp, #8]
 8013774:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013778:	445a      	add	r2, fp
 801377a:	dc06      	bgt.n	801378a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801377c:	9b07      	ldr	r3, [sp, #28]
 801377e:	44a4      	add	ip, r4
 8013780:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8013784:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8013788:	e75e      	b.n	8013648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801378a:	9904      	ldr	r1, [sp, #16]
 801378c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8013790:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8013794:	4433      	add	r3, r6
 8013796:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801379a:	e5df      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801379c:	9f06      	ldr	r7, [sp, #24]
 801379e:	9b04      	ldr	r3, [sp, #16]
 80137a0:	1bc9      	subs	r1, r1, r7
 80137a2:	fa0f f78a 	sxth.w	r7, sl
 80137a6:	b289      	uxth	r1, r1
 80137a8:	429f      	cmp	r7, r3
 80137aa:	fa0f fe81 	sxth.w	lr, r1
 80137ae:	dd23      	ble.n	80137f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80137b0:	9a05      	ldr	r2, [sp, #20]
 80137b2:	eba9 0000 	sub.w	r0, r9, r0
 80137b6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80137ba:	ebaa 0202 	sub.w	r2, sl, r2
 80137be:	9d07      	ldr	r5, [sp, #28]
 80137c0:	fb0e f000 	mul.w	r0, lr, r0
 80137c4:	b292      	uxth	r2, r2
 80137c6:	eba5 0a03 	sub.w	sl, r5, r3
 80137ca:	9b02      	ldr	r3, [sp, #8]
 80137cc:	b214      	sxth	r4, r2
 80137ce:	00db      	lsls	r3, r3, #3
 80137d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80137d4:	445b      	add	r3, fp
 80137d6:	4550      	cmp	r0, sl
 80137d8:	db03      	blt.n	80137e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80137da:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80137de:	4494      	add	ip, r2
 80137e0:	e732      	b.n	8013648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80137e2:	9a04      	ldr	r2, [sp, #16]
 80137e4:	4431      	add	r1, r6
 80137e6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80137ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80137ee:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80137f2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80137f6:	e75c      	b.n	80136b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80137f8:	9b08      	ldr	r3, [sp, #32]
 80137fa:	2d06      	cmp	r5, #6
 80137fc:	eba3 0308 	sub.w	r3, r3, r8
 8013800:	b29b      	uxth	r3, r3
 8013802:	b218      	sxth	r0, r3
 8013804:	d813      	bhi.n	801382e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8013806:	9b07      	ldr	r3, [sp, #28]
 8013808:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801380c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013810:	1c6b      	adds	r3, r5, #1
 8013812:	9901      	ldr	r1, [sp, #4]
 8013814:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013818:	9b01      	ldr	r3, [sp, #4]
 801381a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801381e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013822:	805a      	strh	r2, [r3, #2]
 8013824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013826:	f8a3 e006 	strh.w	lr, [r3, #6]
 801382a:	809a      	strh	r2, [r3, #4]
 801382c:	e75f      	b.n	80136ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801382e:	9c02      	ldr	r4, [sp, #8]
 8013830:	4570      	cmp	r0, lr
 8013832:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013836:	db0d      	blt.n	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8013838:	4431      	add	r1, r6
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	445c      	add	r4, fp
 801383e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013842:	b289      	uxth	r1, r1
 8013844:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8013848:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801384c:	4419      	add	r1, r3
 801384e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013852:	e583      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013854:	445c      	add	r4, fp
 8013856:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801385a:	e79b      	b.n	8013794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801385c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013860:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013864:	1e65      	subs	r5, r4, #1
 8013866:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801386a:	b2ad      	uxth	r5, r5
 801386c:	42b5      	cmp	r5, r6
 801386e:	d044      	beq.n	80138fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013870:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013874:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8013878:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801387c:	4282      	cmp	r2, r0
 801387e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013882:	d11f      	bne.n	80138c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013884:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8013888:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801388c:	459c      	cmp	ip, r3
 801388e:	d119      	bne.n	80138c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013890:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013894:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013898:	19d8      	adds	r0, r3, r7
 801389a:	b200      	sxth	r0, r0
 801389c:	4288      	cmp	r0, r1
 801389e:	d109      	bne.n	80138b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80138a0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80138a4:	4413      	add	r3, r2
 80138a6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80138aa:	4629      	mov	r1, r5
 80138ac:	9801      	ldr	r0, [sp, #4]
 80138ae:	f7ff fd2b 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80138b2:	e003      	b.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80138b4:	4411      	add	r1, r2
 80138b6:	b209      	sxth	r1, r1
 80138b8:	42b9      	cmp	r1, r7
 80138ba:	d0f3      	beq.n	80138a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80138bc:	3d01      	subs	r5, #1
 80138be:	3c08      	subs	r4, #8
 80138c0:	b2ad      	uxth	r5, r5
 80138c2:	e7d3      	b.n	801386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80138c4:	42b9      	cmp	r1, r7
 80138c6:	d1f9      	bne.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80138c8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80138cc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80138d0:	4299      	cmp	r1, r3
 80138d2:	d1f3      	bne.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80138d4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80138d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80138dc:	181f      	adds	r7, r3, r0
 80138de:	b23f      	sxth	r7, r7
 80138e0:	42ba      	cmp	r2, r7
 80138e2:	d105      	bne.n	80138f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80138e4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80138e8:	440b      	add	r3, r1
 80138ea:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80138ee:	e7dc      	b.n	80138aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80138f0:	440a      	add	r2, r1
 80138f2:	b212      	sxth	r2, r2
 80138f4:	4290      	cmp	r0, r2
 80138f6:	d1e1      	bne.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80138f8:	e7f6      	b.n	80138e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80138fa:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80138fe:	2e07      	cmp	r6, #7
 8013900:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013904:	d812      	bhi.n	801392c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8013906:	1c75      	adds	r5, r6, #1
 8013908:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801390c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8013910:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8013914:	9d01      	ldr	r5, [sp, #4]
 8013916:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801391a:	442c      	add	r4, r5
 801391c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8013920:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013924:	8061      	strh	r1, [r4, #2]
 8013926:	80a2      	strh	r2, [r4, #4]
 8013928:	80e3      	strh	r3, [r4, #6]
 801392a:	e581      	b.n	8013430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801392c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013930:	3e01      	subs	r6, #1
 8013932:	445c      	add	r4, fp
 8013934:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8013938:	f04f 37ff 	mov.w	r7, #4294967295
 801393c:	2500      	movs	r5, #0
 801393e:	9305      	str	r3, [sp, #20]
 8013940:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013944:	1e72      	subs	r2, r6, #1
 8013946:	9302      	str	r3, [sp, #8]
 8013948:	4691      	mov	r9, r2
 801394a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801394e:	9304      	str	r3, [sp, #16]
 8013950:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8013954:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801395e:	9207      	str	r2, [sp, #28]
 8013960:	bf16      	itet	ne
 8013962:	9905      	ldrne	r1, [sp, #20]
 8013964:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013968:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801396c:	9306      	str	r3, [sp, #24]
 801396e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013972:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013976:	fb18 f801 	smulbb	r8, r8, r1
 801397a:	6859      	ldr	r1, [r3, #4]
 801397c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013980:	4671      	mov	r1, lr
 8013982:	a80c      	add	r0, sp, #48	@ 0x30
 8013984:	f7ff fb20 	bl	8012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013988:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801398c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013990:	f04f 0c08 	mov.w	ip, #8
 8013994:	9b04      	ldr	r3, [sp, #16]
 8013996:	9a02      	ldr	r2, [sp, #8]
 8013998:	fb10 f001 	smulbb	r0, r0, r1
 801399c:	fb02 8803 	mla	r8, r2, r3, r8
 80139a0:	eba0 0108 	sub.w	r1, r0, r8
 80139a4:	fb90 f0fc 	sdiv	r0, r0, ip
 80139a8:	4288      	cmp	r0, r1
 80139aa:	dc20      	bgt.n	80139ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80139ac:	4551      	cmp	r1, sl
 80139ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80139b2:	da03      	bge.n	80139bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80139b4:	b1d9      	cbz	r1, 80139ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80139b6:	468a      	mov	sl, r1
 80139b8:	464f      	mov	r7, r9
 80139ba:	4635      	mov	r5, r6
 80139bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80139c0:	f119 0f02 	cmn.w	r9, #2
 80139c4:	d1c6      	bne.n	8013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80139c6:	4616      	mov	r6, r2
 80139c8:	3201      	adds	r2, #1
 80139ca:	f1a4 0408 	sub.w	r4, r4, #8
 80139ce:	d1b7      	bne.n	8013940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80139d0:	9b01      	ldr	r3, [sp, #4]
 80139d2:	b2ac      	uxth	r4, r5
 80139d4:	00ed      	lsls	r5, r5, #3
 80139d6:	1958      	adds	r0, r3, r5
 80139d8:	1c7b      	adds	r3, r7, #1
 80139da:	d10b      	bne.n	80139f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80139dc:	4601      	mov	r1, r0
 80139de:	9803      	ldr	r0, [sp, #12]
 80139e0:	f7ff faf2 	bl	8012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80139e4:	4621      	mov	r1, r4
 80139e6:	9801      	ldr	r0, [sp, #4]
 80139e8:	f7ff fc8e 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80139ec:	e4b6      	b.n	801335c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80139ee:	464f      	mov	r7, r9
 80139f0:	4635      	mov	r5, r6
 80139f2:	e7ed      	b.n	80139d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80139f4:	9b01      	ldr	r3, [sp, #4]
 80139f6:	00ff      	lsls	r7, r7, #3
 80139f8:	445d      	add	r5, fp
 80139fa:	19d9      	adds	r1, r3, r7
 80139fc:	445f      	add	r7, fp
 80139fe:	f7ff fae3 	bl	8012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013a02:	9b03      	ldr	r3, [sp, #12]
 8013a04:	cb03      	ldmia	r3!, {r0, r1}
 8013a06:	9b03      	ldr	r3, [sp, #12]
 8013a08:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8013a0c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8013a10:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013a14:	6869      	ldr	r1, [r5, #4]
 8013a16:	c303      	stmia	r3!, {r0, r1}
 8013a18:	e7e4      	b.n	80139e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8013a1a:	bf00      	nop

08013a1c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a20:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8013a24:	b09b      	sub	sp, #108	@ 0x6c
 8013a26:	4604      	mov	r4, r0
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f7fa f946 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a2e:	4605      	mov	r5, r0
 8013a30:	b948      	cbnz	r0, 8013a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8013a32:	6823      	ldr	r3, [r4, #0]
 8013a34:	4620      	mov	r0, r4
 8013a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a38:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013a3c:	4798      	blx	r3
 8013a3e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8013a42:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8013a46:	4bc5      	ldr	r3, [pc, #788]	@ (8013d5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d03f      	beq.n	8013ace <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013a4e:	4dc4      	ldr	r5, [pc, #784]	@ (8013d60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8013a50:	4628      	mov	r0, r5
 8013a52:	f7fa f932 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a56:	4606      	mov	r6, r0
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d138      	bne.n	8013ace <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f7ff f92b 	bl	8012cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013a62:	6823      	ldr	r3, [r4, #0]
 8013a64:	6829      	ldr	r1, [r5, #0]
 8013a66:	4620      	mov	r0, r4
 8013a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a6a:	686a      	ldr	r2, [r5, #4]
 8013a6c:	4798      	blx	r3
 8013a6e:	802e      	strh	r6, [r5, #0]
 8013a70:	806e      	strh	r6, [r5, #2]
 8013a72:	80ae      	strh	r6, [r5, #4]
 8013a74:	80ee      	strh	r6, [r5, #6]
 8013a76:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8013a7a:	4dba      	ldr	r5, [pc, #744]	@ (8013d64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8013a7c:	4640      	mov	r0, r8
 8013a7e:	f7ff fbe8 	bl	8013252 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013a82:	882e      	ldrh	r6, [r5, #0]
 8013a84:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8013a88:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013a8c:	4633      	mov	r3, r6
 8013a8e:	42bb      	cmp	r3, r7
 8013a90:	d224      	bcs.n	8013adc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013a92:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8013a96:	2907      	cmp	r1, #7
 8013a98:	d816      	bhi.n	8013ac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8013a9a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013a9e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8013aa2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8013aa6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013aaa:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013aae:	1c4a      	adds	r2, r1, #1
 8013ab0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8013ab4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8013ab8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8013abc:	f8a2 a002 	strh.w	sl, [r2, #2]
 8013ac0:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013ac4:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	e7df      	b.n	8013a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8013ace:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d1cf      	bne.n	8013a76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8013ad6:	b01b      	add	sp, #108	@ 0x6c
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8013ae0:	42b3      	cmp	r3, r6
 8013ae2:	d90c      	bls.n	8013afe <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8013ae4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013ae8:	6822      	ldr	r2, [r4, #0]
 8013aea:	3601      	adds	r6, #1
 8013aec:	4620      	mov	r0, r4
 8013aee:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8013af0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8013af4:	b2b6      	uxth	r6, r6
 8013af6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8013afa:	47b8      	blx	r7
 8013afc:	e7ee      	b.n	8013adc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013afe:	4a9a      	ldr	r2, [pc, #616]	@ (8013d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013b00:	6813      	ldr	r3, [r2, #0]
 8013b02:	4691      	mov	r9, r2
 8013b04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	f040 80e0 	bne.w	8013cce <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8013b0e:	8829      	ldrh	r1, [r5, #0]
 8013b10:	2600      	movs	r6, #0
 8013b12:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8013b16:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8013b1a:	33ae      	adds	r3, #174	@ 0xae
 8013b1c:	428f      	cmp	r7, r1
 8013b1e:	f103 0308 	add.w	r3, r3, #8
 8013b22:	dd0a      	ble.n	8013b3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8013b24:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8013b28:	3101      	adds	r1, #1
 8013b2a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8013b2e:	4402      	add	r2, r0
 8013b30:	b212      	sxth	r2, r2
 8013b32:	4296      	cmp	r6, r2
 8013b34:	bfb8      	it	lt
 8013b36:	4616      	movlt	r6, r2
 8013b38:	e7f0      	b.n	8013b1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8013b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8013d6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013b3c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8013d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	2b0f      	cmp	r3, #15
 8013b44:	bf8c      	ite	hi
 8013b46:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8013b4a:	f04f 0b01 	movls.w	fp, #1
 8013b4e:	2300      	movs	r3, #0
 8013b50:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013b54:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8013b58:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8013b5c:	4b82      	ldr	r3, [pc, #520]	@ (8013d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013b5e:	4438      	add	r0, r7
 8013b60:	b207      	sxth	r7, r0
 8013b62:	6818      	ldr	r0, [r3, #0]
 8013b64:	42b7      	cmp	r7, r6
 8013b66:	6803      	ldr	r3, [r0, #0]
 8013b68:	f280 8083 	bge.w	8013c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013b70:	4798      	blx	r3
 8013b72:	eb07 030b 	add.w	r3, r7, fp
 8013b76:	4298      	cmp	r0, r3
 8013b78:	da07      	bge.n	8013b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013b7a:	42b0      	cmp	r0, r6
 8013b7c:	da05      	bge.n	8013b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013b7e:	4287      	cmp	r7, r0
 8013b80:	dd6c      	ble.n	8013c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013b82:	2f00      	cmp	r7, #0
 8013b84:	dd6a      	ble.n	8013c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013b86:	4630      	mov	r0, r6
 8013b88:	e004      	b.n	8013b94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8013b8a:	4287      	cmp	r7, r0
 8013b8c:	dcfb      	bgt.n	8013b86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8013b8e:	42b0      	cmp	r0, r6
 8013b90:	bfa8      	it	ge
 8013b92:	4630      	movge	r0, r6
 8013b94:	4b76      	ldr	r3, [pc, #472]	@ (8013d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8013b96:	1bc0      	subs	r0, r0, r7
 8013b98:	2200      	movs	r2, #0
 8013b9a:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ba2:	882f      	ldrh	r7, [r5, #0]
 8013ba4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ba8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013bac:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013bb0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013bb4:	42bb      	cmp	r3, r7
 8013bb6:	d9cd      	bls.n	8013b54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013bb8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8013bbc:	ab07      	add	r3, sp, #28
 8013bbe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013bc2:	6851      	ldr	r1, [r2, #4]
 8013bc4:	c303      	stmia	r3!, {r0, r1}
 8013bc6:	a905      	add	r1, sp, #20
 8013bc8:	a807      	add	r0, sp, #28
 8013bca:	f7ff f964 	bl	8012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	d04c      	beq.n	8013c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8013bd2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013bd6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8013bda:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8013bde:	4686      	mov	lr, r0
 8013be0:	4290      	cmp	r0, r2
 8013be2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8013be6:	4450      	add	r0, sl
 8013be8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013bec:	bfb8      	it	lt
 8013bee:	4696      	movlt	lr, r2
 8013bf0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013bf4:	4452      	add	r2, sl
 8013bf6:	b280      	uxth	r0, r0
 8013bf8:	4299      	cmp	r1, r3
 8013bfa:	468c      	mov	ip, r1
 8013bfc:	b292      	uxth	r2, r2
 8013bfe:	9302      	str	r3, [sp, #8]
 8013c00:	bfb8      	it	lt
 8013c02:	469c      	movlt	ip, r3
 8013c04:	b203      	sxth	r3, r0
 8013c06:	fa0f fa82 	sxth.w	sl, r2
 8013c0a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8013c0e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8013c12:	4553      	cmp	r3, sl
 8013c14:	bfb8      	it	lt
 8013c16:	4602      	movlt	r2, r0
 8013c18:	9b02      	ldr	r3, [sp, #8]
 8013c1a:	eba2 020e 	sub.w	r2, r2, lr
 8013c1e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013c22:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8013c26:	4411      	add	r1, r2
 8013c28:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	b289      	uxth	r1, r1
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	b208      	sxth	r0, r1
 8013c34:	b21a      	sxth	r2, r3
 8013c36:	4290      	cmp	r0, r2
 8013c38:	bfb8      	it	lt
 8013c3a:	460b      	movlt	r3, r1
 8013c3c:	eba3 030c 	sub.w	r3, r3, ip
 8013c40:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013c44:	a807      	add	r0, sp, #28
 8013c46:	f7fa f838 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c4a:	b920      	cbnz	r0, 8013c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8013c4c:	6823      	ldr	r3, [r4, #0]
 8013c4e:	a907      	add	r1, sp, #28
 8013c50:	4620      	mov	r0, r4
 8013c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c54:	4798      	blx	r3
 8013c56:	3701      	adds	r7, #1
 8013c58:	b2bf      	uxth	r7, r7
 8013c5a:	e7a9      	b.n	8013bb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013c5c:	f8d9 0000 	ldr.w	r0, [r9]
 8013c60:	2101      	movs	r1, #1
 8013c62:	6803      	ldr	r3, [r0, #0]
 8013c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013c68:	4798      	blx	r3
 8013c6a:	e773      	b.n	8013b54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013c6c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013c70:	e7e8      	b.n	8013c44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8013c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c74:	4798      	blx	r3
 8013c76:	4b3f      	ldr	r3, [pc, #252]	@ (8013d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	f43f af2b 	beq.w	8013ad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013c80:	2300      	movs	r3, #0
 8013c82:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8013c86:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8013c8a:	882b      	ldrh	r3, [r5, #0]
 8013c8c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8013c90:	42ab      	cmp	r3, r5
 8013c92:	f4bf af20 	bcs.w	8013ad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013c96:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8013c9a:	2907      	cmp	r1, #7
 8013c9c:	d814      	bhi.n	8013cc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8013c9e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8013ca2:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8013ca6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8013caa:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8013cae:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013cb2:	1c4a      	adds	r2, r1, #1
 8013cb4:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8013cb8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8013cbc:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8013cc0:	f8a2 c002 	strh.w	ip, [r2, #2]
 8013cc4:	8097      	strh	r7, [r2, #4]
 8013cc6:	80d6      	strh	r6, [r2, #6]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	e7e0      	b.n	8013c90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8013cce:	2b02      	cmp	r3, #2
 8013cd0:	f040 8133 	bne.w	8013f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8013cd4:	4b28      	ldr	r3, [pc, #160]	@ (8013d78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8013cd6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	f000 8098 	beq.w	8013e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013ce2:	882a      	ldrh	r2, [r5, #0]
 8013ce4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8013ce8:	3201      	adds	r2, #1
 8013cea:	b292      	uxth	r2, r2
 8013cec:	2900      	cmp	r1, #0
 8013cee:	d0c2      	beq.n	8013c76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013cf0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8013cf4:	4694      	mov	ip, r2
 8013cf6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8013cfa:	f04f 0900 	mov.w	r9, #0
 8013cfe:	441e      	add	r6, r3
 8013d00:	b236      	sxth	r6, r6
 8013d02:	fa1f f38c 	uxth.w	r3, ip
 8013d06:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8013d0a:	4299      	cmp	r1, r3
 8013d0c:	f240 80be 	bls.w	8013e8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8013d10:	4427      	add	r7, r4
 8013d12:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8013d16:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8013d1a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8013d1e:	4283      	cmp	r3, r0
 8013d20:	f340 80a0 	ble.w	8013e64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8013d24:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8013d28:	46e1      	mov	r9, ip
 8013d2a:	4406      	add	r6, r0
 8013d2c:	b236      	sxth	r6, r6
 8013d2e:	429e      	cmp	r6, r3
 8013d30:	bfa8      	it	ge
 8013d32:	461e      	movge	r6, r3
 8013d34:	f10c 0c01 	add.w	ip, ip, #1
 8013d38:	e7e3      	b.n	8013d02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8013d3a:	d10a      	bne.n	8013d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8013d3c:	4562      	cmp	r2, ip
 8013d3e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8013d42:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8013d46:	bfb8      	it	lt
 8013d48:	4662      	movlt	r2, ip
 8013d4a:	4288      	cmp	r0, r1
 8013d4c:	bfb8      	it	lt
 8013d4e:	461f      	movlt	r7, r3
 8013d50:	e086      	b.n	8013e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013d52:	428a      	cmp	r2, r1
 8013d54:	bfb8      	it	lt
 8013d56:	460a      	movlt	r2, r1
 8013d58:	e082      	b.n	8013e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013d5a:	bf00      	nop
 8013d5c:	24025414 	.word	0x24025414
 8013d60:	24025420 	.word	0x24025420
 8013d64:	2400007c 	.word	0x2400007c
 8013d68:	240253d4 	.word	0x240253d4
 8013d6c:	240253ca 	.word	0x240253ca
 8013d70:	240253c8 	.word	0x240253c8
 8013d74:	240253d2 	.word	0x240253d2
 8013d78:	240253cc 	.word	0x240253cc
 8013d7c:	19a1      	adds	r1, r4, r6
 8013d7e:	ab07      	add	r3, sp, #28
 8013d80:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8013d84:	6849      	ldr	r1, [r1, #4]
 8013d86:	c303      	stmia	r3!, {r0, r1}
 8013d88:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013d8c:	a807      	add	r0, sp, #28
 8013d8e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013d92:	2b13      	cmp	r3, #19
 8013d94:	440b      	add	r3, r1
 8013d96:	bfd8      	it	le
 8013d98:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013d9c:	1a9b      	subs	r3, r3, r2
 8013d9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013da2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013da6:	f7fe ffa1 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013daa:	a807      	add	r0, sp, #28
 8013dac:	f7f9 ff85 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013db0:	bb78      	cbnz	r0, 8013e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013db2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8013db6:	4426      	add	r6, r4
 8013db8:	f8d9 0000 	ldr.w	r0, [r9]
 8013dbc:	f1bc 0f14 	cmp.w	ip, #20
 8013dc0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013dc4:	f8d0 e000 	ldr.w	lr, [r0]
 8013dc8:	bfa8      	it	ge
 8013dca:	f04f 0c14 	movge.w	ip, #20
 8013dce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013dd2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013dd6:	fa1f fc8c 	uxth.w	ip, ip
 8013dda:	f8cd c000 	str.w	ip, [sp]
 8013dde:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8013de2:	47d8      	blx	fp
 8013de4:	4683      	mov	fp, r0
 8013de6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013dea:	a807      	add	r0, sp, #28
 8013dec:	f7fe ff64 	bl	8012cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013df0:	6823      	ldr	r3, [r4, #0]
 8013df2:	4620      	mov	r0, r4
 8013df4:	a907      	add	r1, sp, #28
 8013df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013df8:	4798      	blx	r3
 8013dfa:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013dfe:	eba0 000b 	sub.w	r0, r0, fp
 8013e02:	b200      	sxth	r0, r0
 8013e04:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8013e08:	b918      	cbnz	r0, 8013e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013e0a:	b2b9      	uxth	r1, r7
 8013e0c:	4650      	mov	r0, sl
 8013e0e:	f7ff fa7b 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013e12:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8013e16:	f1bb 0f00 	cmp.w	fp, #0
 8013e1a:	f43f af2c 	beq.w	8013c76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013e1e:	882b      	ldrh	r3, [r5, #0]
 8013e20:	2700      	movs	r7, #0
 8013e22:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8013e26:	3301      	adds	r3, #1
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	b299      	uxth	r1, r3
 8013e2c:	00fe      	lsls	r6, r7, #3
 8013e2e:	458b      	cmp	fp, r1
 8013e30:	d9a4      	bls.n	8013d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8013e32:	4426      	add	r6, r4
 8013e34:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8013e38:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8013e3c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013e40:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8013e44:	4408      	add	r0, r1
 8013e46:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8013e4a:	4461      	add	r1, ip
 8013e4c:	b200      	sxth	r0, r0
 8013e4e:	b209      	sxth	r1, r1
 8013e50:	4288      	cmp	r0, r1
 8013e52:	f6bf af72 	bge.w	8013d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8013e56:	4584      	cmp	ip, r0
 8013e58:	4662      	mov	r2, ip
 8013e5a:	461f      	mov	r7, r3
 8013e5c:	bfb8      	it	lt
 8013e5e:	4602      	movlt	r2, r0
 8013e60:	3301      	adds	r3, #1
 8013e62:	e7e2      	b.n	8013e2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8013e64:	d10e      	bne.n	8013e84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8013e66:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8013e6a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013e6e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8013e72:	4473      	add	r3, lr
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	429e      	cmp	r6, r3
 8013e78:	bfa8      	it	ge
 8013e7a:	461e      	movge	r6, r3
 8013e7c:	4287      	cmp	r7, r0
 8013e7e:	bfb8      	it	lt
 8013e80:	46e1      	movlt	r9, ip
 8013e82:	e757      	b.n	8013d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013e84:	4286      	cmp	r6, r0
 8013e86:	bfa8      	it	ge
 8013e88:	4606      	movge	r6, r0
 8013e8a:	e753      	b.n	8013d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013e8c:	eb0a 0007 	add.w	r0, sl, r7
 8013e90:	4427      	add	r7, r4
 8013e92:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8013e96:	f1bb 0f13 	cmp.w	fp, #19
 8013e9a:	bfdc      	itt	le
 8013e9c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8013ea0:	445e      	addle	r6, fp
 8013ea2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013ea6:	bfd8      	it	le
 8013ea8:	b236      	sxthle	r6, r6
 8013eaa:	f7f9 ff06 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013eae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	f47f af1a 	bne.w	8013cec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8013eb8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8013ebc:	fa1f fb8b 	uxth.w	fp, fp
 8013ec0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013ec4:	1ab6      	subs	r6, r6, r2
 8013ec6:	4829      	ldr	r0, [pc, #164]	@ (8013f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8013ec8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8013ecc:	2e14      	cmp	r6, #20
 8013ece:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8013ed2:	6800      	ldr	r0, [r0, #0]
 8013ed4:	bfa8      	it	ge
 8013ed6:	2614      	movge	r6, #20
 8013ed8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013edc:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013ee0:	b289      	uxth	r1, r1
 8013ee2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013ee6:	b2b6      	uxth	r6, r6
 8013ee8:	f8d0 c000 	ldr.w	ip, [r0]
 8013eec:	b292      	uxth	r2, r2
 8013eee:	455e      	cmp	r6, fp
 8013ef0:	bf94      	ite	ls
 8013ef2:	9600      	strls	r6, [sp, #0]
 8013ef4:	f8cd b000 	strhi.w	fp, [sp]
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8013efe:	47b0      	blx	r6
 8013f00:	6823      	ldr	r3, [r4, #0]
 8013f02:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013f06:	a907      	add	r1, sp, #28
 8013f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	4798      	blx	r3
 8013f0e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8013f12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8013f16:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8013f1a:	1a5b      	subs	r3, r3, r1
 8013f1c:	440a      	add	r2, r1
 8013f1e:	b21b      	sxth	r3, r3
 8013f20:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8013f24:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f47f aeda 	bne.w	8013ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013f2e:	fa1f f189 	uxth.w	r1, r9
 8013f32:	4650      	mov	r0, sl
 8013f34:	f7ff f9e8 	bl	8013308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013f38:	e6d3      	b.n	8013ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013f3a:	882e      	ldrh	r6, [r5, #0]
 8013f3c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013f40:	42b3      	cmp	r3, r6
 8013f42:	f67f ae98 	bls.w	8013c76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013f46:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8013f4a:	ab07      	add	r3, sp, #28
 8013f4c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013f50:	6851      	ldr	r1, [r2, #4]
 8013f52:	c303      	stmia	r3!, {r0, r1}
 8013f54:	a807      	add	r0, sp, #28
 8013f56:	f7f9 feb0 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f5a:	b920      	cbnz	r0, 8013f66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8013f5c:	6823      	ldr	r3, [r4, #0]
 8013f5e:	a907      	add	r1, sp, #28
 8013f60:	4620      	mov	r0, r4
 8013f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f64:	4798      	blx	r3
 8013f66:	3601      	adds	r6, #1
 8013f68:	b2b6      	uxth	r6, r6
 8013f6a:	e7e7      	b.n	8013f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8013f6c:	240253d4 	.word	0x240253d4

08013f70 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013f70:	4b03      	ldr	r3, [pc, #12]	@ (8013f80 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013f72:	2200      	movs	r2, #0
 8013f74:	801a      	strh	r2, [r3, #0]
 8013f76:	805a      	strh	r2, [r3, #2]
 8013f78:	809a      	strh	r2, [r3, #4]
 8013f7a:	80da      	strh	r2, [r3, #6]
 8013f7c:	4770      	bx	lr
 8013f7e:	bf00      	nop
 8013f80:	24025420 	.word	0x24025420

08013f84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f88:	b09d      	sub	sp, #116	@ 0x74
 8013f8a:	4606      	mov	r6, r0
 8013f8c:	4614      	mov	r4, r2
 8013f8e:	468a      	mov	sl, r1
 8013f90:	a803      	add	r0, sp, #12
 8013f92:	461d      	mov	r5, r3
 8013f94:	f001 f8ed 	bl	8015172 <_ZN8touchgfx12TextProviderC1Ev>
 8013f98:	6833      	ldr	r3, [r6, #0]
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8013fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fa2:	4798      	blx	r3
 8013fa4:	6833      	ldr	r3, [r6, #0]
 8013fa6:	4607      	mov	r7, r0
 8013fa8:	4630      	mov	r0, r6
 8013faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fac:	4798      	blx	r3
 8013fae:	462a      	mov	r2, r5
 8013fb0:	2500      	movs	r5, #0
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	9000      	str	r0, [sp, #0]
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	462c      	mov	r4, r5
 8013fba:	46a9      	mov	r9, r5
 8013fbc:	46a8      	mov	r8, r5
 8013fbe:	a803      	add	r0, sp, #12
 8013fc0:	f001 f92a 	bl	8015218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	9302      	str	r3, [sp, #8]
 8013fc8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013fcc:	429c      	cmp	r4, r3
 8013fce:	d002      	beq.n	8013fd6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013fd0:	455c      	cmp	r4, fp
 8013fd2:	bf18      	it	ne
 8013fd4:	4625      	movne	r5, r4
 8013fd6:	ab02      	add	r3, sp, #8
 8013fd8:	4632      	mov	r2, r6
 8013fda:	4651      	mov	r1, sl
 8013fdc:	a803      	add	r0, sp, #12
 8013fde:	f001 fc0f 	bl	8015800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	b108      	cbz	r0, 8013fea <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8013fe6:	280a      	cmp	r0, #10
 8013fe8:	d10a      	bne.n	8014000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013fea:	45c1      	cmp	r9, r8
 8013fec:	bf38      	it	cc
 8013fee:	46c1      	movcc	r9, r8
 8013ff0:	f04f 0800 	mov.w	r8, #0
 8013ff4:	2c00      	cmp	r4, #0
 8013ff6:	d1e5      	bne.n	8013fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013ff8:	4648      	mov	r0, r9
 8013ffa:	b01d      	add	sp, #116	@ 0x74
 8013ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014000:	9a02      	ldr	r2, [sp, #8]
 8014002:	2a00      	cmp	r2, #0
 8014004:	d0de      	beq.n	8013fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014006:	7b57      	ldrb	r7, [r2, #13]
 8014008:	4629      	mov	r1, r5
 801400a:	6833      	ldr	r3, [r6, #0]
 801400c:	007f      	lsls	r7, r7, #1
 801400e:	8894      	ldrh	r4, [r2, #4]
 8014010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014012:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8014016:	7a97      	ldrb	r7, [r2, #10]
 8014018:	4307      	orrs	r7, r0
 801401a:	4630      	mov	r0, r6
 801401c:	4798      	blx	r3
 801401e:	4438      	add	r0, r7
 8014020:	4480      	add	r8, r0
 8014022:	fa1f f888 	uxth.w	r8, r8
 8014026:	e7e5      	b.n	8013ff4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014028 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014028:	b508      	push	{r3, lr}
 801402a:	6803      	ldr	r3, [r0, #0]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	4798      	blx	r3
 8014030:	b128      	cbz	r0, 801403e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014032:	7b43      	ldrb	r3, [r0, #13]
 8014034:	7a80      	ldrb	r0, [r0, #10]
 8014036:	005b      	lsls	r3, r3, #1
 8014038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801403c:	4318      	orrs	r0, r3
 801403e:	bd08      	pop	{r3, pc}

08014040 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014040:	b40e      	push	{r1, r2, r3}
 8014042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014044:	b09e      	sub	sp, #120	@ 0x78
 8014046:	4605      	mov	r5, r0
 8014048:	ab23      	add	r3, sp, #140	@ 0x8c
 801404a:	a805      	add	r0, sp, #20
 801404c:	f853 4b04 	ldr.w	r4, [r3], #4
 8014050:	9303      	str	r3, [sp, #12]
 8014052:	f001 f88e 	bl	8015172 <_ZN8touchgfx12TextProviderC1Ev>
 8014056:	682b      	ldr	r3, [r5, #0]
 8014058:	4628      	mov	r0, r5
 801405a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801405c:	4798      	blx	r3
 801405e:	682b      	ldr	r3, [r5, #0]
 8014060:	4606      	mov	r6, r0
 8014062:	4628      	mov	r0, r5
 8014064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014066:	4798      	blx	r3
 8014068:	4633      	mov	r3, r6
 801406a:	4621      	mov	r1, r4
 801406c:	ae1e      	add	r6, sp, #120	@ 0x78
 801406e:	2400      	movs	r4, #0
 8014070:	9000      	str	r0, [sp, #0]
 8014072:	9a03      	ldr	r2, [sp, #12]
 8014074:	a805      	add	r0, sp, #20
 8014076:	f001 f8cf 	bl	8015218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801407a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801407e:	462a      	mov	r2, r5
 8014080:	4633      	mov	r3, r6
 8014082:	4621      	mov	r1, r4
 8014084:	a805      	add	r0, sp, #20
 8014086:	f001 fbbb 	bl	8015800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801408a:	b300      	cbz	r0, 80140ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801408c:	280a      	cmp	r0, #10
 801408e:	d01a      	beq.n	80140c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014090:	9f04      	ldr	r7, [sp, #16]
 8014092:	b1c7      	cbz	r7, 80140c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014094:	7b78      	ldrb	r0, [r7, #13]
 8014096:	7a3b      	ldrb	r3, [r7, #8]
 8014098:	00c1      	lsls	r1, r0, #3
 801409a:	88ea      	ldrh	r2, [r5, #6]
 801409c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80140a0:	4319      	orrs	r1, r3
 80140a2:	0643      	lsls	r3, r0, #25
 80140a4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80140a8:	bf48      	it	mi
 80140aa:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80140ae:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80140b2:	bf48      	it	mi
 80140b4:	b219      	sxthmi	r1, r3
 80140b6:	79fb      	ldrb	r3, [r7, #7]
 80140b8:	4303      	orrs	r3, r0
 80140ba:	4413      	add	r3, r2
 80140bc:	1a5b      	subs	r3, r3, r1
 80140be:	b21b      	sxth	r3, r3
 80140c0:	429c      	cmp	r4, r3
 80140c2:	bfb8      	it	lt
 80140c4:	461c      	movlt	r4, r3
 80140c6:	4633      	mov	r3, r6
 80140c8:	462a      	mov	r2, r5
 80140ca:	2100      	movs	r1, #0
 80140cc:	e7da      	b.n	8014084 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80140ce:	b2a0      	uxth	r0, r4
 80140d0:	b01e      	add	sp, #120	@ 0x78
 80140d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80140d6:	b003      	add	sp, #12
 80140d8:	4770      	bx	lr

080140da <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80140da:	7a43      	ldrb	r3, [r0, #9]
 80140dc:	8880      	ldrh	r0, [r0, #4]
 80140de:	4418      	add	r0, r3
 80140e0:	b280      	uxth	r0, r0
 80140e2:	4770      	bx	lr

080140e4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80140e4:	6803      	ldr	r3, [r0, #0]
 80140e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140e8:	4718      	bx	r3

080140ea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80140ea:	b40e      	push	{r1, r2, r3}
 80140ec:	b570      	push	{r4, r5, r6, lr}
 80140ee:	b09d      	sub	sp, #116	@ 0x74
 80140f0:	4604      	mov	r4, r0
 80140f2:	ab21      	add	r3, sp, #132	@ 0x84
 80140f4:	a803      	add	r0, sp, #12
 80140f6:	f853 5b04 	ldr.w	r5, [r3], #4
 80140fa:	9302      	str	r3, [sp, #8]
 80140fc:	f001 f839 	bl	8015172 <_ZN8touchgfx12TextProviderC1Ev>
 8014100:	6823      	ldr	r3, [r4, #0]
 8014102:	4620      	mov	r0, r4
 8014104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014106:	4798      	blx	r3
 8014108:	6823      	ldr	r3, [r4, #0]
 801410a:	4606      	mov	r6, r0
 801410c:	4620      	mov	r0, r4
 801410e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014110:	2401      	movs	r4, #1
 8014112:	4798      	blx	r3
 8014114:	4633      	mov	r3, r6
 8014116:	9000      	str	r0, [sp, #0]
 8014118:	4629      	mov	r1, r5
 801411a:	9a02      	ldr	r2, [sp, #8]
 801411c:	a803      	add	r0, sp, #12
 801411e:	f001 f87b 	bl	8015218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014122:	a803      	add	r0, sp, #12
 8014124:	f001 fbec 	bl	8015900 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014128:	b2a3      	uxth	r3, r4
 801412a:	b138      	cbz	r0, 801413c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801412c:	280a      	cmp	r0, #10
 801412e:	a803      	add	r0, sp, #12
 8014130:	bf04      	itt	eq
 8014132:	3301      	addeq	r3, #1
 8014134:	b21c      	sxtheq	r4, r3
 8014136:	f001 fbe3 	bl	8015900 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801413a:	e7f5      	b.n	8014128 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801413c:	4618      	mov	r0, r3
 801413e:	b01d      	add	sp, #116	@ 0x74
 8014140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014144:	b003      	add	sp, #12
 8014146:	4770      	bx	lr

08014148 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8014148:	b40e      	push	{r1, r2, r3}
 801414a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801414c:	b09e      	sub	sp, #120	@ 0x78
 801414e:	4604      	mov	r4, r0
 8014150:	ab23      	add	r3, sp, #140	@ 0x8c
 8014152:	a805      	add	r0, sp, #20
 8014154:	f853 5b04 	ldr.w	r5, [r3], #4
 8014158:	9303      	str	r3, [sp, #12]
 801415a:	f001 f80a 	bl	8015172 <_ZN8touchgfx12TextProviderC1Ev>
 801415e:	6823      	ldr	r3, [r4, #0]
 8014160:	4620      	mov	r0, r4
 8014162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014164:	4798      	blx	r3
 8014166:	6823      	ldr	r3, [r4, #0]
 8014168:	4606      	mov	r6, r0
 801416a:	4620      	mov	r0, r4
 801416c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801416e:	4798      	blx	r3
 8014170:	4633      	mov	r3, r6
 8014172:	4629      	mov	r1, r5
 8014174:	9000      	str	r0, [sp, #0]
 8014176:	9a03      	ldr	r2, [sp, #12]
 8014178:	a805      	add	r0, sp, #20
 801417a:	f001 f84d 	bl	8015218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801417e:	ad1e      	add	r5, sp, #120	@ 0x78
 8014180:	2100      	movs	r1, #0
 8014182:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8014186:	4622      	mov	r2, r4
 8014188:	a805      	add	r0, sp, #20
 801418a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801418e:	462b      	mov	r3, r5
 8014190:	f001 fb36 	bl	8015800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014194:	b1d8      	cbz	r0, 80141ce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8014196:	280a      	cmp	r0, #10
 8014198:	d012      	beq.n	80141c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801419a:	9804      	ldr	r0, [sp, #16]
 801419c:	b180      	cbz	r0, 80141c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801419e:	7b47      	ldrb	r7, [r0, #13]
 80141a0:	88e2      	ldrh	r2, [r4, #6]
 80141a2:	00fb      	lsls	r3, r7, #3
 80141a4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80141a8:	7a03      	ldrb	r3, [r0, #8]
 80141aa:	430b      	orrs	r3, r1
 80141ac:	0679      	lsls	r1, r7, #25
 80141ae:	bf44      	itt	mi
 80141b0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80141b4:	b21b      	sxthmi	r3, r3
 80141b6:	1ad3      	subs	r3, r2, r3
 80141b8:	b21b      	sxth	r3, r3
 80141ba:	429e      	cmp	r6, r3
 80141bc:	bfa8      	it	ge
 80141be:	461e      	movge	r6, r3
 80141c0:	462b      	mov	r3, r5
 80141c2:	4622      	mov	r2, r4
 80141c4:	2100      	movs	r1, #0
 80141c6:	a805      	add	r0, sp, #20
 80141c8:	f001 fb1a 	bl	8015800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80141cc:	e7e2      	b.n	8014194 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80141ce:	4630      	mov	r0, r6
 80141d0:	b01e      	add	sp, #120	@ 0x78
 80141d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80141d6:	b003      	add	sp, #12
 80141d8:	4770      	bx	lr

080141da <_ZNK8touchgfx8Drawable10invalidateEv>:
 80141da:	b513      	push	{r0, r1, r4, lr}
 80141dc:	6803      	ldr	r3, [r0, #0]
 80141de:	2400      	movs	r4, #0
 80141e0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80141e4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80141e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80141ec:	4669      	mov	r1, sp
 80141ee:	691b      	ldr	r3, [r3, #16]
 80141f0:	9400      	str	r4, [sp, #0]
 80141f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80141f6:	4798      	blx	r3
 80141f8:	b002      	add	sp, #8
 80141fa:	bd10      	pop	{r4, pc}

080141fc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80141fc:	b538      	push	{r3, r4, r5, lr}
 80141fe:	680b      	ldr	r3, [r1, #0]
 8014200:	460c      	mov	r4, r1
 8014202:	4605      	mov	r5, r0
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	4798      	blx	r3
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	4620      	mov	r0, r4
 801420c:	4629      	mov	r1, r5
 801420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014210:	4798      	blx	r3
 8014212:	4628      	mov	r0, r5
 8014214:	bd38      	pop	{r3, r4, r5, pc}

08014216 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014216:	b410      	push	{r4}
 8014218:	880a      	ldrh	r2, [r1, #0]
 801421a:	8884      	ldrh	r4, [r0, #4]
 801421c:	4422      	add	r2, r4
 801421e:	800a      	strh	r2, [r1, #0]
 8014220:	884a      	ldrh	r2, [r1, #2]
 8014222:	88c4      	ldrh	r4, [r0, #6]
 8014224:	4422      	add	r2, r4
 8014226:	804a      	strh	r2, [r1, #2]
 8014228:	6940      	ldr	r0, [r0, #20]
 801422a:	b120      	cbz	r0, 8014236 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801422c:	6803      	ldr	r3, [r0, #0]
 801422e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014234:	4718      	bx	r3
 8014236:	f85d 4b04 	ldr.w	r4, [sp], #4
 801423a:	4770      	bx	lr

0801423c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801423c:	b570      	push	{r4, r5, r6, lr}
 801423e:	8882      	ldrh	r2, [r0, #4]
 8014240:	460c      	mov	r4, r1
 8014242:	880b      	ldrh	r3, [r1, #0]
 8014244:	4605      	mov	r5, r0
 8014246:	4413      	add	r3, r2
 8014248:	800b      	strh	r3, [r1, #0]
 801424a:	884b      	ldrh	r3, [r1, #2]
 801424c:	88c2      	ldrh	r2, [r0, #6]
 801424e:	4413      	add	r3, r2
 8014250:	804b      	strh	r3, [r1, #2]
 8014252:	1d01      	adds	r1, r0, #4
 8014254:	4620      	mov	r0, r4
 8014256:	f7f9 fced 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 801425a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	dd0b      	ble.n	801427a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014262:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014266:	2b00      	cmp	r3, #0
 8014268:	dd07      	ble.n	801427a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801426a:	6968      	ldr	r0, [r5, #20]
 801426c:	b128      	cbz	r0, 801427a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801426e:	6803      	ldr	r3, [r0, #0]
 8014270:	4621      	mov	r1, r4
 8014272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014278:	4718      	bx	r3
 801427a:	bd70      	pop	{r4, r5, r6, pc}

0801427c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801427c:	b570      	push	{r4, r5, r6, lr}
 801427e:	8882      	ldrh	r2, [r0, #4]
 8014280:	460c      	mov	r4, r1
 8014282:	880b      	ldrh	r3, [r1, #0]
 8014284:	4605      	mov	r5, r0
 8014286:	4413      	add	r3, r2
 8014288:	800b      	strh	r3, [r1, #0]
 801428a:	884b      	ldrh	r3, [r1, #2]
 801428c:	88c2      	ldrh	r2, [r0, #6]
 801428e:	4413      	add	r3, r2
 8014290:	804b      	strh	r3, [r1, #2]
 8014292:	1d01      	adds	r1, r0, #4
 8014294:	4620      	mov	r0, r4
 8014296:	f7f9 fccd 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 801429a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	dd19      	ble.n	80142d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80142a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	dd15      	ble.n	80142d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80142aa:	6968      	ldr	r0, [r5, #20]
 80142ac:	b128      	cbz	r0, 80142ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80142ae:	6803      	ldr	r3, [r0, #0]
 80142b0:	4621      	mov	r1, r4
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142b8:	4718      	bx	r3
 80142ba:	4b07      	ldr	r3, [pc, #28]	@ (80142d8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	3304      	adds	r3, #4
 80142c0:	429d      	cmp	r5, r3
 80142c2:	d108      	bne.n	80142d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80142c4:	f7fe fec6 	bl	8013054 <_ZN8touchgfx11Application11getInstanceEv>
 80142c8:	6803      	ldr	r3, [r0, #0]
 80142ca:	6821      	ldr	r1, [r4, #0]
 80142cc:	6862      	ldr	r2, [r4, #4]
 80142ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142d4:	4718      	bx	r3
 80142d6:	bd70      	pop	{r4, r5, r6, pc}
 80142d8:	24025418 	.word	0x24025418

080142dc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	4604      	mov	r4, r0
 80142e0:	4616      	mov	r6, r2
 80142e2:	460d      	mov	r5, r1
 80142e4:	b901      	cbnz	r1, 80142e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80142e6:	b192      	cbz	r2, 801430e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80142e8:	6823      	ldr	r3, [r4, #0]
 80142ea:	4620      	mov	r0, r4
 80142ec:	699b      	ldr	r3, [r3, #24]
 80142ee:	4798      	blx	r3
 80142f0:	88e2      	ldrh	r2, [r4, #6]
 80142f2:	88a1      	ldrh	r1, [r4, #4]
 80142f4:	4620      	mov	r0, r4
 80142f6:	4432      	add	r2, r6
 80142f8:	4429      	add	r1, r5
 80142fa:	b212      	sxth	r2, r2
 80142fc:	b209      	sxth	r1, r1
 80142fe:	f7ef fd26 	bl	8003d4e <_ZN8touchgfx8Drawable5setXYEss>
 8014302:	6823      	ldr	r3, [r4, #0]
 8014304:	4620      	mov	r0, r4
 8014306:	699b      	ldr	r3, [r3, #24]
 8014308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801430c:	4718      	bx	r3
 801430e:	bd70      	pop	{r4, r5, r6, pc}

08014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014310:	b510      	push	{r4, lr}
 8014312:	2300      	movs	r3, #0
 8014314:	4604      	mov	r4, r0
 8014316:	4608      	mov	r0, r1
 8014318:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801431c:	8023      	strh	r3, [r4, #0]
 801431e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014322:	8063      	strh	r3, [r4, #2]
 8014324:	6803      	ldr	r3, [r0, #0]
 8014326:	80a1      	strh	r1, [r4, #4]
 8014328:	4621      	mov	r1, r4
 801432a:	80e2      	strh	r2, [r4, #6]
 801432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801432e:	4798      	blx	r3
 8014330:	4620      	mov	r0, r4
 8014332:	bd10      	pop	{r4, pc}

08014334 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8014334:	4770      	bx	lr

08014336 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8014336:	b510      	push	{r4, lr}
 8014338:	4604      	mov	r4, r0
 801433a:	211c      	movs	r1, #28
 801433c:	f00c fecf 	bl	80210de <_ZdlPvj>
 8014340:	4620      	mov	r0, r4
 8014342:	bd10      	pop	{r4, pc}

08014344 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8014344:	4a04      	ldr	r2, [pc, #16]	@ (8014358 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8014346:	6002      	str	r2, [r0, #0]
 8014348:	2200      	movs	r2, #0
 801434a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801434e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014352:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014356:	4770      	bx	lr
 8014358:	080256d0 	.word	0x080256d0

0801435c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014360:	4604      	mov	r4, r0
 8014362:	b087      	sub	sp, #28
 8014364:	4696      	mov	lr, r2
 8014366:	6880      	ldr	r0, [r0, #8]
 8014368:	8b22      	ldrh	r2, [r4, #24]
 801436a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801436e:	9105      	str	r1, [sp, #20]
 8014370:	1c51      	adds	r1, r2, #1
 8014372:	8321      	strh	r1, [r4, #24]
 8014374:	2101      	movs	r1, #1
 8014376:	5481      	strb	r1, [r0, r2]
 8014378:	4689      	mov	r9, r1
 801437a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801437e:	8b60      	ldrh	r0, [r4, #26]
 8014380:	ee06 2a90 	vmov	s13, r2
 8014384:	68e2      	ldr	r2, [r4, #12]
 8014386:	1845      	adds	r5, r0, r1
 8014388:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801438c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014390:	8365      	strh	r5, [r4, #26]
 8014392:	edc2 6a00 	vstr	s13, [r2]
 8014396:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801439a:	8b60      	ldrh	r0, [r4, #26]
 801439c:	ee07 2a10 	vmov	s14, r2
 80143a0:	68e2      	ldr	r2, [r4, #12]
 80143a2:	1845      	adds	r5, r0, r1
 80143a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80143a8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80143ac:	8365      	strh	r5, [r4, #26]
 80143ae:	1d18      	adds	r0, r3, #4
 80143b0:	460d      	mov	r5, r1
 80143b2:	ed82 7a00 	vstr	s14, [r2]
 80143b6:	f8be 2000 	ldrh.w	r2, [lr]
 80143ba:	9203      	str	r2, [sp, #12]
 80143bc:	2200      	movs	r2, #0
 80143be:	4613      	mov	r3, r2
 80143c0:	4694      	mov	ip, r2
 80143c2:	9201      	str	r2, [sp, #4]
 80143c4:	9202      	str	r2, [sp, #8]
 80143c6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80143ca:	9e05      	ldr	r6, [sp, #20]
 80143cc:	f108 0701 	add.w	r7, r8, #1
 80143d0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80143d4:	428e      	cmp	r6, r1
 80143d6:	b2bf      	uxth	r7, r7
 80143d8:	eb0a 0b08 	add.w	fp, sl, r8
 80143dc:	f340 80b6 	ble.w	801454c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 80143e0:	9b03      	ldr	r3, [sp, #12]
 80143e2:	f9b0 c000 	ldrsh.w	ip, [r0]
 80143e6:	fa43 fb05 	asr.w	fp, r3, r5
 80143ea:	f00b 0b01 	and.w	fp, fp, #1
 80143ee:	fa5f f38b 	uxtb.w	r3, fp
 80143f2:	9304      	str	r3, [sp, #16]
 80143f4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80143f8:	f1bb 0f00 	cmp.w	fp, #0
 80143fc:	d057      	beq.n	80144ae <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 80143fe:	ee07 ca90 	vmov	s15, ip
 8014402:	8327      	strh	r7, [r4, #24]
 8014404:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014408:	ee07 3a90 	vmov	s15, r3
 801440c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014410:	f1b9 0f00 	cmp.w	r9, #0
 8014414:	d028      	beq.n	8014468 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8014416:	f04f 0602 	mov.w	r6, #2
 801441a:	f80a 6008 	strb.w	r6, [sl, r8]
 801441e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014422:	68e7      	ldr	r7, [r4, #12]
 8014424:	f108 0901 	add.w	r9, r8, #1
 8014428:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801442c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014430:	edc7 5a00 	vstr	s11, [r7]
 8014434:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014438:	68e7      	ldr	r7, [r4, #12]
 801443a:	f108 0901 	add.w	r9, r8, #1
 801443e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014442:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014446:	edc7 7a00 	vstr	s15, [r7]
 801444a:	3501      	adds	r5, #1
 801444c:	2d10      	cmp	r5, #16
 801444e:	d106      	bne.n	801445e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8014450:	9d02      	ldr	r5, [sp, #8]
 8014452:	3501      	adds	r5, #1
 8014454:	9502      	str	r5, [sp, #8]
 8014456:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801445a:	9503      	str	r5, [sp, #12]
 801445c:	2500      	movs	r5, #0
 801445e:	3101      	adds	r1, #1
 8014460:	3004      	adds	r0, #4
 8014462:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014466:	e7ae      	b.n	80143c6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8014468:	f04f 0605 	mov.w	r6, #5
 801446c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8014470:	f80a 6008 	strb.w	r6, [sl, r8]
 8014474:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014478:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801447c:	68e7      	ldr	r7, [r4, #12]
 801447e:	f108 0901 	add.w	r9, r8, #1
 8014482:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014486:	f8a4 901a 	strh.w	r9, [r4, #26]
 801448a:	ed87 5a00 	vstr	s10, [r7]
 801448e:	ee05 2a10 	vmov	s10, r2
 8014492:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014496:	68e7      	ldr	r7, [r4, #12]
 8014498:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801449c:	f108 0901 	add.w	r9, r8, #1
 80144a0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80144a4:	f8a4 901a 	strh.w	r9, [r4, #26]
 80144a8:	ed87 5a00 	vstr	s10, [r7]
 80144ac:	e7b7      	b.n	801441e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 80144ae:	f1b9 0f00 	cmp.w	r9, #0
 80144b2:	d147      	bne.n	8014544 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 80144b4:	f04f 0605 	mov.w	r6, #5
 80144b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80144bc:	8327      	strh	r7, [r4, #24]
 80144be:	f80a 6008 	strb.w	r6, [sl, r8]
 80144c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144c6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80144ca:	68e7      	ldr	r7, [r4, #12]
 80144cc:	f108 0901 	add.w	r9, r8, #1
 80144d0:	9e01      	ldr	r6, [sp, #4]
 80144d2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80144d6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80144da:	4466      	add	r6, ip
 80144dc:	edc7 7a00 	vstr	s15, [r7]
 80144e0:	ee07 2a90 	vmov	s15, r2
 80144e4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80144e8:	441a      	add	r2, r3
 80144ea:	68e7      	ldr	r7, [r4, #12]
 80144ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144f0:	f108 0901 	add.w	r9, r8, #1
 80144f4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80144f8:	f8a4 901a 	strh.w	r9, [r4, #26]
 80144fc:	edc7 7a00 	vstr	s15, [r7]
 8014500:	ee07 6a90 	vmov	s15, r6
 8014504:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801450c:	68e7      	ldr	r7, [r4, #12]
 801450e:	f108 0901 	add.w	r9, r8, #1
 8014512:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014516:	ee67 7a86 	vmul.f32	s15, s15, s12
 801451a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801451e:	edc7 7a00 	vstr	s15, [r7]
 8014522:	ee07 2a90 	vmov	s15, r2
 8014526:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801452a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801452e:	68e7      	ldr	r7, [r4, #12]
 8014530:	f108 0901 	add.w	r9, r8, #1
 8014534:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014538:	ee67 7a86 	vmul.f32	s15, s15, s12
 801453c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014540:	edc7 7a00 	vstr	s15, [r7]
 8014544:	461a      	mov	r2, r3
 8014546:	f8cd c004 	str.w	ip, [sp, #4]
 801454a:	e77e      	b.n	801444a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801454c:	f1b9 0f00 	cmp.w	r9, #0
 8014550:	d028      	beq.n	80145a4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8014552:	ee07 ca90 	vmov	s15, ip
 8014556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801455a:	eef4 6a67 	vcmp.f32	s13, s15
 801455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014562:	d108      	bne.n	8014576 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8014564:	ee07 3a90 	vmov	s15, r3
 8014568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801456c:	eeb4 7a67 	vcmp.f32	s14, s15
 8014570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014574:	d016      	beq.n	80145a4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8014576:	2302      	movs	r3, #2
 8014578:	8327      	strh	r7, [r4, #24]
 801457a:	f88b 3000 	strb.w	r3, [fp]
 801457e:	8b62      	ldrh	r2, [r4, #26]
 8014580:	68e3      	ldr	r3, [r4, #12]
 8014582:	1c51      	adds	r1, r2, #1
 8014584:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014588:	8361      	strh	r1, [r4, #26]
 801458a:	edc3 6a00 	vstr	s13, [r3]
 801458e:	8b62      	ldrh	r2, [r4, #26]
 8014590:	68e3      	ldr	r3, [r4, #12]
 8014592:	1c51      	adds	r1, r2, #1
 8014594:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014598:	8361      	strh	r1, [r4, #26]
 801459a:	ed83 7a00 	vstr	s14, [r3]
 801459e:	b007      	add	sp, #28
 80145a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a4:	2305      	movs	r3, #5
 80145a6:	eddd 7a01 	vldr	s15, [sp, #4]
 80145aa:	8327      	strh	r7, [r4, #24]
 80145ac:	f88b 3000 	strb.w	r3, [fp]
 80145b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145b4:	8b61      	ldrh	r1, [r4, #26]
 80145b6:	68e3      	ldr	r3, [r4, #12]
 80145b8:	1c4d      	adds	r5, r1, #1
 80145ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80145be:	8365      	strh	r5, [r4, #26]
 80145c0:	edc3 7a00 	vstr	s15, [r3]
 80145c4:	ee07 2a90 	vmov	s15, r2
 80145c8:	8b61      	ldrh	r1, [r4, #26]
 80145ca:	68e3      	ldr	r3, [r4, #12]
 80145cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145d0:	1c4d      	adds	r5, r1, #1
 80145d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80145d6:	8365      	strh	r5, [r4, #26]
 80145d8:	edc3 7a00 	vstr	s15, [r3]
 80145dc:	e7cf      	b.n	801457e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

080145e0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80145e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145e4:	4604      	mov	r4, r0
 80145e6:	b08e      	sub	sp, #56	@ 0x38
 80145e8:	4699      	mov	r9, r3
 80145ea:	4688      	mov	r8, r1
 80145ec:	4615      	mov	r5, r2
 80145ee:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80145f0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 80145f4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80145f6:	f7ef f8ab 	bl	8003750 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 80145fa:	6060      	str	r0, [r4, #4]
 80145fc:	f1b9 0f00 	cmp.w	r9, #0
 8014600:	f000 80e8 	beq.w	80147d4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014604:	2800      	cmp	r0, #0
 8014606:	f000 80e5 	beq.w	80147d4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801460a:	a805      	add	r0, sp, #20
 801460c:	f000 f8f9 	bl	8014802 <_ZN8touchgfx9Matrix3x3C1Ev>
 8014610:	6833      	ldr	r3, [r6, #0]
 8014612:	4630      	mov	r0, r6
 8014614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014616:	4798      	blx	r3
 8014618:	a805      	add	r0, sp, #20
 801461a:	eef0 0a40 	vmov.f32	s1, s0
 801461e:	f000 f8f4 	bl	801480a <_ZN8touchgfx9Matrix3x35scaleEff>
 8014622:	6860      	ldr	r0, [r4, #4]
 8014624:	f1ba 0f03 	cmp.w	sl, #3
 8014628:	d83b      	bhi.n	80146a2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801462a:	e8df f00a 	tbb	[pc, sl]
 801462e:	1002      	.short	0x1002
 8014630:	9f71      	.short	0x9f71
 8014632:	6803      	ldr	r3, [r0, #0]
 8014634:	462a      	mov	r2, r5
 8014636:	4641      	mov	r1, r8
 8014638:	689b      	ldr	r3, [r3, #8]
 801463a:	4798      	blx	r3
 801463c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014640:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014644:	ee07 7a90 	vmov	s15, r7
 8014648:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801464c:	e026      	b.n	801469c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801464e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014652:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014656:	8869      	ldrh	r1, [r5, #2]
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801465e:	aa03      	add	r2, sp, #12
 8014660:	1a5b      	subs	r3, r3, r1
 8014662:	4641      	mov	r1, r8
 8014664:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014668:	882b      	ldrh	r3, [r5, #0]
 801466a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801466e:	88ab      	ldrh	r3, [r5, #4]
 8014670:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014674:	6803      	ldr	r3, [r0, #0]
 8014676:	689b      	ldr	r3, [r3, #8]
 8014678:	4798      	blx	r3
 801467a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80147dc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801467e:	a805      	add	r0, sp, #20
 8014680:	f000 f8e8 	bl	8014854 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014684:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014688:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801468a:	ee07 7a90 	vmov	s15, r7
 801468e:	1a9b      	subs	r3, r3, r2
 8014690:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014694:	ee00 3a10 	vmov	s0, r3
 8014698:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801469c:	a805      	add	r0, sp, #20
 801469e:	f000 f927 	bl	80148f0 <_ZN8touchgfx9Matrix3x39translateEff>
 80146a2:	6860      	ldr	r0, [r4, #4]
 80146a4:	a905      	add	r1, sp, #20
 80146a6:	2500      	movs	r5, #0
 80146a8:	f109 0602 	add.w	r6, r9, #2
 80146ac:	6803      	ldr	r3, [r0, #0]
 80146ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80146b0:	4798      	blx	r3
 80146b2:	6860      	ldr	r0, [r4, #4]
 80146b4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80146b6:	6803      	ldr	r3, [r0, #0]
 80146b8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80146bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146be:	4798      	blx	r3
 80146c0:	6860      	ldr	r0, [r4, #4]
 80146c2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80146c6:	6803      	ldr	r3, [r0, #0]
 80146c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ca:	4798      	blx	r3
 80146cc:	6860      	ldr	r0, [r4, #4]
 80146ce:	2101      	movs	r1, #1
 80146d0:	6803      	ldr	r3, [r0, #0]
 80146d2:	68db      	ldr	r3, [r3, #12]
 80146d4:	4798      	blx	r3
 80146d6:	f8b9 7000 	ldrh.w	r7, [r9]
 80146da:	f104 0310 	add.w	r3, r4, #16
 80146de:	61a5      	str	r5, [r4, #24]
 80146e0:	f104 0208 	add.w	r2, r4, #8
 80146e4:	f104 0114 	add.w	r1, r4, #20
 80146e8:	f104 000c 	add.w	r0, r4, #12
 80146ec:	f7ef fd16 	bl	800411c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 80146f0:	42af      	cmp	r7, r5
 80146f2:	dd60      	ble.n	80147b6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 80146f4:	8831      	ldrh	r1, [r6, #0]
 80146f6:	1cb2      	adds	r2, r6, #2
 80146f8:	4620      	mov	r0, r4
 80146fa:	3501      	adds	r5, #1
 80146fc:	f101 030f 	add.w	r3, r1, #15
 8014700:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8014704:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014708:	f7ff fe28 	bl	801435c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801470c:	4606      	mov	r6, r0
 801470e:	e7ef      	b.n	80146f0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8014710:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014714:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014718:	8829      	ldrh	r1, [r5, #0]
 801471a:	1a9b      	subs	r3, r3, r2
 801471c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014720:	aa03      	add	r2, sp, #12
 8014722:	1a5b      	subs	r3, r3, r1
 8014724:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014728:	886d      	ldrh	r5, [r5, #2]
 801472a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801472e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014732:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014736:	1a5b      	subs	r3, r3, r1
 8014738:	4641      	mov	r1, r8
 801473a:	1b5b      	subs	r3, r3, r5
 801473c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014740:	6803      	ldr	r3, [r0, #0]
 8014742:	689b      	ldr	r3, [r3, #8]
 8014744:	4798      	blx	r3
 8014746:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80147e0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801474a:	a805      	add	r0, sp, #20
 801474c:	f000 f882 	bl	8014854 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014750:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014754:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014756:	1a9b      	subs	r3, r3, r2
 8014758:	ee00 3a90 	vmov	s1, r3
 801475c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014760:	1bdb      	subs	r3, r3, r7
 8014762:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014766:	ee00 3a10 	vmov	s0, r3
 801476a:	e795      	b.n	8014698 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801476c:	886b      	ldrh	r3, [r5, #2]
 801476e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014772:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014776:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801477a:	8829      	ldrh	r1, [r5, #0]
 801477c:	1a9b      	subs	r3, r3, r2
 801477e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014782:	aa03      	add	r2, sp, #12
 8014784:	1a5b      	subs	r3, r3, r1
 8014786:	4641      	mov	r1, r8
 8014788:	f8ad 300e 	strh.w	r3, [sp, #14]
 801478c:	88eb      	ldrh	r3, [r5, #6]
 801478e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014792:	6803      	ldr	r3, [r0, #0]
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	4798      	blx	r3
 8014798:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80147e4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801479c:	a805      	add	r0, sp, #20
 801479e:	f000 f859 	bl	8014854 <_ZN8touchgfx9Matrix3x36rotateEf>
 80147a2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80147a6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80147aa:	1bdb      	subs	r3, r3, r7
 80147ac:	ee00 3a90 	vmov	s1, r3
 80147b0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80147b4:	e748      	b.n	8014648 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 80147b6:	6860      	ldr	r0, [r4, #4]
 80147b8:	2100      	movs	r1, #0
 80147ba:	8b22      	ldrh	r2, [r4, #24]
 80147bc:	6803      	ldr	r3, [r0, #0]
 80147be:	9101      	str	r1, [sp, #4]
 80147c0:	8b61      	ldrh	r1, [r4, #26]
 80147c2:	9100      	str	r1, [sp, #0]
 80147c4:	6a1d      	ldr	r5, [r3, #32]
 80147c6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80147ca:	47a8      	blx	r5
 80147cc:	6860      	ldr	r0, [r4, #4]
 80147ce:	6803      	ldr	r3, [r0, #0]
 80147d0:	69db      	ldr	r3, [r3, #28]
 80147d2:	4798      	blx	r3
 80147d4:	b00e      	add	sp, #56	@ 0x38
 80147d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147da:	bf00      	nop
 80147dc:	42b40000 	.word	0x42b40000
 80147e0:	43340000 	.word	0x43340000
 80147e4:	43870000 	.word	0x43870000

080147e8 <_ZN8touchgfx9Matrix3x35resetEv>:
 80147e8:	2300      	movs	r3, #0
 80147ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80147ee:	6043      	str	r3, [r0, #4]
 80147f0:	6002      	str	r2, [r0, #0]
 80147f2:	6083      	str	r3, [r0, #8]
 80147f4:	60c3      	str	r3, [r0, #12]
 80147f6:	6102      	str	r2, [r0, #16]
 80147f8:	6143      	str	r3, [r0, #20]
 80147fa:	6183      	str	r3, [r0, #24]
 80147fc:	61c3      	str	r3, [r0, #28]
 80147fe:	6202      	str	r2, [r0, #32]
 8014800:	4770      	bx	lr

08014802 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8014802:	b508      	push	{r3, lr}
 8014804:	f7ff fff0 	bl	80147e8 <_ZN8touchgfx9Matrix3x35resetEv>
 8014808:	bd08      	pop	{r3, pc}

0801480a <_ZN8touchgfx9Matrix3x35scaleEff>:
 801480a:	edd0 7a00 	vldr	s15, [r0]
 801480e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014812:	edc0 7a00 	vstr	s15, [r0]
 8014816:	edd0 7a01 	vldr	s15, [r0, #4]
 801481a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801481e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014822:	edd0 7a02 	vldr	s15, [r0, #8]
 8014826:	ee27 0a80 	vmul.f32	s0, s15, s0
 801482a:	edd0 7a03 	vldr	s15, [r0, #12]
 801482e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014832:	ed80 0a02 	vstr	s0, [r0, #8]
 8014836:	edc0 7a03 	vstr	s15, [r0, #12]
 801483a:	edd0 7a04 	vldr	s15, [r0, #16]
 801483e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014842:	edc0 7a04 	vstr	s15, [r0, #16]
 8014846:	edd0 7a05 	vldr	s15, [r0, #20]
 801484a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801484e:	edc0 0a05 	vstr	s1, [r0, #20]
 8014852:	4770      	bx	lr

08014854 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014854:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80148e8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8014858:	ee20 0a27 	vmul.f32	s0, s0, s15
 801485c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80148ec <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014860:	b510      	push	{r4, lr}
 8014862:	ed2d 8b02 	vpush	{d8}
 8014866:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801486a:	4604      	mov	r4, r0
 801486c:	eeb0 0a68 	vmov.f32	s0, s17
 8014870:	f00c fd6e 	bl	8021350 <cosf>
 8014874:	eeb0 8a40 	vmov.f32	s16, s0
 8014878:	eeb0 0a68 	vmov.f32	s0, s17
 801487c:	f00c fca4 	bl	80211c8 <sinf>
 8014880:	edd4 6a03 	vldr	s13, [r4, #12]
 8014884:	edd4 4a00 	vldr	s9, [r4]
 8014888:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801488c:	ed94 7a04 	vldr	s14, [r4, #16]
 8014890:	ed94 5a01 	vldr	s10, [r4, #4]
 8014894:	ee66 6a88 	vmul.f32	s13, s13, s16
 8014898:	edd4 5a02 	vldr	s11, [r4, #8]
 801489c:	eee8 7a24 	vfma.f32	s15, s16, s9
 80148a0:	eee0 6a24 	vfma.f32	s13, s0, s9
 80148a4:	edc4 7a00 	vstr	s15, [r4]
 80148a8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80148ac:	ee27 7a08 	vmul.f32	s14, s14, s16
 80148b0:	edc4 6a03 	vstr	s13, [r4, #12]
 80148b4:	eee8 7a05 	vfma.f32	s15, s16, s10
 80148b8:	eea0 7a05 	vfma.f32	s14, s0, s10
 80148bc:	edc4 7a01 	vstr	s15, [r4, #4]
 80148c0:	edd4 7a05 	vldr	s15, [r4, #20]
 80148c4:	ed84 7a04 	vstr	s14, [r4, #16]
 80148c8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80148cc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80148d0:	eea8 6a25 	vfma.f32	s12, s16, s11
 80148d4:	eee0 7a25 	vfma.f32	s15, s0, s11
 80148d8:	ecbd 8b02 	vpop	{d8}
 80148dc:	ed84 6a02 	vstr	s12, [r4, #8]
 80148e0:	edc4 7a05 	vstr	s15, [r4, #20]
 80148e4:	bd10      	pop	{r4, pc}
 80148e6:	bf00      	nop
 80148e8:	40490fdb 	.word	0x40490fdb
 80148ec:	43340000 	.word	0x43340000

080148f0 <_ZN8touchgfx9Matrix3x39translateEff>:
 80148f0:	ed90 6a06 	vldr	s12, [r0, #24]
 80148f4:	edd0 7a00 	vldr	s15, [r0]
 80148f8:	edd0 6a07 	vldr	s13, [r0, #28]
 80148fc:	eee6 7a00 	vfma.f32	s15, s12, s0
 8014900:	ed90 7a08 	vldr	s14, [r0, #32]
 8014904:	edc0 7a00 	vstr	s15, [r0]
 8014908:	edd0 7a01 	vldr	s15, [r0, #4]
 801490c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8014910:	edc0 7a01 	vstr	s15, [r0, #4]
 8014914:	edd0 7a02 	vldr	s15, [r0, #8]
 8014918:	eee7 7a00 	vfma.f32	s15, s14, s0
 801491c:	edc0 7a02 	vstr	s15, [r0, #8]
 8014920:	edd0 7a03 	vldr	s15, [r0, #12]
 8014924:	eee6 7a20 	vfma.f32	s15, s12, s1
 8014928:	edc0 7a03 	vstr	s15, [r0, #12]
 801492c:	edd0 7a04 	vldr	s15, [r0, #16]
 8014930:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8014934:	edc0 7a04 	vstr	s15, [r0, #16]
 8014938:	edd0 7a05 	vldr	s15, [r0, #20]
 801493c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014940:	edc0 7a05 	vstr	s15, [r0, #20]
 8014944:	4770      	bx	lr

08014946 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8014946:	edd0 6a01 	vldr	s13, [r0, #4]
 801494a:	b084      	sub	sp, #16
 801494c:	edd0 7a04 	vldr	s15, [r0, #16]
 8014950:	ed90 7a03 	vldr	s14, [r0, #12]
 8014954:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8014958:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801495c:	edd0 6a00 	vldr	s13, [r0]
 8014960:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014964:	ed90 7a05 	vldr	s14, [r0, #20]
 8014968:	eee6 0a80 	vfma.f32	s1, s13, s0
 801496c:	ed90 0a02 	vldr	s0, [r0, #8]
 8014970:	ee30 0a80 	vadd.f32	s0, s1, s0
 8014974:	ee77 0a87 	vadd.f32	s1, s15, s14
 8014978:	b004      	add	sp, #16
 801497a:	4770      	bx	lr

0801497c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801497c:	b530      	push	{r4, r5, lr}
 801497e:	8083      	strh	r3, [r0, #4]
 8014980:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014984:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014988:	80c3      	strh	r3, [r0, #6]
 801498a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801498e:	6141      	str	r1, [r0, #20]
 8014990:	7203      	strb	r3, [r0, #8]
 8014992:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014996:	8302      	strh	r2, [r0, #24]
 8014998:	7243      	strb	r3, [r0, #9]
 801499a:	7a83      	ldrb	r3, [r0, #10]
 801499c:	f365 0306 	bfi	r3, r5, #0, #7
 80149a0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80149a4:	f365 13c7 	bfi	r3, r5, #7, #1
 80149a8:	7283      	strb	r3, [r0, #10]
 80149aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80149ae:	72c3      	strb	r3, [r0, #11]
 80149b0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80149b4:	7303      	strb	r3, [r0, #12]
 80149b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80149ba:	81c3      	strh	r3, [r0, #14]
 80149bc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80149c0:	8203      	strh	r3, [r0, #16]
 80149c2:	4b01      	ldr	r3, [pc, #4]	@ (80149c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80149c4:	6003      	str	r3, [r0, #0]
 80149c6:	bd30      	pop	{r4, r5, pc}
 80149c8:	080256e4 	.word	0x080256e4

080149cc <_ZNK8touchgfx9ConstFont4findEt>:
 80149cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149ce:	6944      	ldr	r4, [r0, #20]
 80149d0:	b3bc      	cbz	r4, 8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80149d2:	88a3      	ldrh	r3, [r4, #4]
 80149d4:	8b02      	ldrh	r2, [r0, #24]
 80149d6:	1acb      	subs	r3, r1, r3
 80149d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80149dc:	d431      	bmi.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80149de:	4293      	cmp	r3, r2
 80149e0:	dd0c      	ble.n	80149fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80149e2:	230e      	movs	r3, #14
 80149e4:	fb03 4302 	mla	r3, r3, r2, r4
 80149e8:	889b      	ldrh	r3, [r3, #4]
 80149ea:	1a5b      	subs	r3, r3, r1
 80149ec:	1ad3      	subs	r3, r2, r3
 80149ee:	429a      	cmp	r2, r3
 80149f0:	db27      	blt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	bfbc      	itt	lt
 80149f6:	2302      	movlt	r3, #2
 80149f8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80149fc:	2500      	movs	r5, #0
 80149fe:	260e      	movs	r6, #14
 8014a00:	4295      	cmp	r5, r2
 8014a02:	dc1e      	bgt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014a04:	fb06 4003 	mla	r0, r6, r3, r4
 8014a08:	8887      	ldrh	r7, [r0, #4]
 8014a0a:	42b9      	cmp	r1, r7
 8014a0c:	d01a      	beq.n	8014a44 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014a0e:	d20d      	bcs.n	8014a2c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014a10:	1e5a      	subs	r2, r3, #1
 8014a12:	4295      	cmp	r5, r2
 8014a14:	dc15      	bgt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014a16:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014a1a:	1a5b      	subs	r3, r3, r1
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	db0f      	blt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014a22:	429d      	cmp	r5, r3
 8014a24:	ddec      	ble.n	8014a00 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014a26:	1953      	adds	r3, r2, r5
 8014a28:	105b      	asrs	r3, r3, #1
 8014a2a:	e7e9      	b.n	8014a00 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014a2c:	1c5d      	adds	r5, r3, #1
 8014a2e:	42aa      	cmp	r2, r5
 8014a30:	db07      	blt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014a32:	8a43      	ldrh	r3, [r0, #18]
 8014a34:	1acb      	subs	r3, r1, r3
 8014a36:	442b      	add	r3, r5
 8014a38:	429d      	cmp	r5, r3
 8014a3a:	dc02      	bgt.n	8014a42 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	dadf      	bge.n	8014a00 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014a40:	e7f1      	b.n	8014a26 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014a42:	2000      	movs	r0, #0
 8014a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a46 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a48:	4604      	mov	r4, r0
 8014a4a:	4617      	mov	r7, r2
 8014a4c:	461e      	mov	r6, r3
 8014a4e:	b911      	cbnz	r1, 8014a56 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014a50:	2500      	movs	r5, #0
 8014a52:	4628      	mov	r0, r5
 8014a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a56:	290a      	cmp	r1, #10
 8014a58:	d0fa      	beq.n	8014a50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014a5a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8014a5e:	4291      	cmp	r1, r2
 8014a60:	d0f6      	beq.n	8014a50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014a62:	f242 020b 	movw	r2, #8203	@ 0x200b
 8014a66:	4291      	cmp	r1, r2
 8014a68:	d0f2      	beq.n	8014a50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014a6a:	f7ff ffaf 	bl	80149cc <_ZNK8touchgfx9ConstFont4findEt>
 8014a6e:	4605      	mov	r5, r0
 8014a70:	b950      	cbnz	r0, 8014a88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014a72:	6823      	ldr	r3, [r4, #0]
 8014a74:	4620      	mov	r0, r4
 8014a76:	691b      	ldr	r3, [r3, #16]
 8014a78:	4798      	blx	r3
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7ff ffa5 	bl	80149cc <_ZNK8touchgfx9ConstFont4findEt>
 8014a82:	4605      	mov	r5, r0
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d0e3      	beq.n	8014a50 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014a88:	6823      	ldr	r3, [r4, #0]
 8014a8a:	4629      	mov	r1, r5
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a90:	4798      	blx	r3
 8014a92:	6038      	str	r0, [r7, #0]
 8014a94:	6823      	ldr	r3, [r4, #0]
 8014a96:	4620      	mov	r0, r4
 8014a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a9a:	4798      	blx	r3
 8014a9c:	7030      	strb	r0, [r6, #0]
 8014a9e:	e7d8      	b.n	8014a52 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014aa0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8014aa0:	b538      	push	{r3, r4, r5, lr}
 8014aa2:	4605      	mov	r5, r0
 8014aa4:	f001 fe96 	bl	80167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f001 fdd6 	bl	801665c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	bf14      	ite	ne
 8014ab4:	2002      	movne	r0, #2
 8014ab6:	2000      	moveq	r0, #0
 8014ab8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8014abc:	b280      	uxth	r0, r0
 8014abe:	bd38      	pop	{r3, r4, r5, pc}

08014ac0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	4605      	mov	r5, r0
 8014ac4:	f001 fe86 	bl	80167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014ac8:	4604      	mov	r4, r0
 8014aca:	4628      	mov	r0, r5
 8014acc:	f001 fdc6 	bl	801665c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	bf14      	ite	ne
 8014ad4:	2002      	movne	r0, #2
 8014ad6:	2000      	moveq	r0, #0
 8014ad8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8014adc:	f040 0001 	orr.w	r0, r0, #1
 8014ae0:	b280      	uxth	r0, r0
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}

08014ae4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	4770      	bx	lr

08014ae8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014ae8:	2001      	movs	r0, #1
 8014aea:	4770      	bx	lr

08014aec <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8014aec:	2002      	movs	r0, #2
 8014aee:	4770      	bx	lr

08014af0 <_ZN8touchgfx6ScreenD1Ev>:
 8014af0:	4770      	bx	lr

08014af2 <_ZN8touchgfx12GestureEventD1Ev>:
 8014af2:	4770      	bx	lr

08014af4 <_ZN8touchgfx9DragEventD1Ev>:
 8014af4:	4770      	bx	lr

08014af6 <_ZN8touchgfx10ClickEventD1Ev>:
 8014af6:	4770      	bx	lr

08014af8 <_ZN8touchgfx10ClickEventD0Ev>:
 8014af8:	b510      	push	{r4, lr}
 8014afa:	4604      	mov	r4, r0
 8014afc:	210c      	movs	r1, #12
 8014afe:	f00c faee 	bl	80210de <_ZdlPvj>
 8014b02:	4620      	mov	r0, r4
 8014b04:	bd10      	pop	{r4, pc}

08014b06 <_ZN8touchgfx9DragEventD0Ev>:
 8014b06:	b510      	push	{r4, lr}
 8014b08:	4604      	mov	r4, r0
 8014b0a:	2110      	movs	r1, #16
 8014b0c:	f00c fae7 	bl	80210de <_ZdlPvj>
 8014b10:	4620      	mov	r0, r4
 8014b12:	bd10      	pop	{r4, pc}

08014b14 <_ZN8touchgfx12GestureEventD0Ev>:
 8014b14:	b510      	push	{r4, lr}
 8014b16:	4604      	mov	r4, r0
 8014b18:	210c      	movs	r1, #12
 8014b1a:	f00c fae0 	bl	80210de <_ZdlPvj>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	bd10      	pop	{r4, pc}

08014b22 <_ZN8touchgfx6ScreenD0Ev>:
 8014b22:	b510      	push	{r4, lr}
 8014b24:	4604      	mov	r4, r0
 8014b26:	213c      	movs	r1, #60	@ 0x3c
 8014b28:	f00c fad9 	bl	80210de <_ZdlPvj>
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	bd10      	pop	{r4, pc}

08014b30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014b30:	b530      	push	{r4, r5, lr}
 8014b32:	460d      	mov	r5, r1
 8014b34:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8014b36:	b087      	sub	sp, #28
 8014b38:	4604      	mov	r4, r0
 8014b3a:	b301      	cbz	r1, 8014b7e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8014b3c:	a801      	add	r0, sp, #4
 8014b3e:	f7ff fbe7 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b42:	892a      	ldrh	r2, [r5, #8]
 8014b44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014b48:	7928      	ldrb	r0, [r5, #4]
 8014b4a:	1ad2      	subs	r2, r2, r3
 8014b4c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014b4e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014b52:	441a      	add	r2, r3
 8014b54:	896b      	ldrh	r3, [r5, #10]
 8014b56:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014b5a:	f88d 0010 	strb.w	r0, [sp, #16]
 8014b5e:	1b5b      	subs	r3, r3, r5
 8014b60:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8014b62:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014b64:	442b      	add	r3, r5
 8014b66:	4d07      	ldr	r5, [pc, #28]	@ (8014b84 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014b68:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014b6c:	a903      	add	r1, sp, #12
 8014b6e:	9503      	str	r5, [sp, #12]
 8014b70:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014b74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b78:	6803      	ldr	r3, [r0, #0]
 8014b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014b7c:	4798      	blx	r3
 8014b7e:	b007      	add	sp, #28
 8014b80:	bd30      	pop	{r4, r5, pc}
 8014b82:	bf00      	nop
 8014b84:	08025774 	.word	0x08025774

08014b88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b8e:	b08a      	sub	sp, #40	@ 0x28
 8014b90:	4604      	mov	r4, r0
 8014b92:	460d      	mov	r5, r1
 8014b94:	b113      	cbz	r3, 8014b9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014b96:	790b      	ldrb	r3, [r1, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d044      	beq.n	8014c26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014b9c:	f104 0804 	add.w	r8, r4, #4
 8014ba0:	a803      	add	r0, sp, #12
 8014ba2:	4641      	mov	r1, r8
 8014ba4:	f7ff fbb4 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014ba8:	792b      	ldrb	r3, [r5, #4]
 8014baa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014bae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014bb2:	b983      	cbnz	r3, 8014bd6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014bb4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8014bb8:	892a      	ldrh	r2, [r5, #8]
 8014bba:	88e9      	ldrh	r1, [r5, #6]
 8014bbc:	4640      	mov	r0, r8
 8014bbe:	1b92      	subs	r2, r2, r6
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	1bc9      	subs	r1, r1, r7
 8014bc4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8014bc8:	b212      	sxth	r2, r2
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	b209      	sxth	r1, r1
 8014bce:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014bd2:	f7f8 ff4d 	bl	800da70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014bd6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014bd8:	b329      	cbz	r1, 8014c26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014bda:	a805      	add	r0, sp, #20
 8014bdc:	f7ff fb98 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014be0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014be4:	792b      	ldrb	r3, [r5, #4]
 8014be6:	a907      	add	r1, sp, #28
 8014be8:	1abf      	subs	r7, r7, r2
 8014bea:	88ea      	ldrh	r2, [r5, #6]
 8014bec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014bee:	4417      	add	r7, r2
 8014bf0:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8014bf2:	f88d 3020 	strb.w	r3, [sp, #32]
 8014bf6:	4417      	add	r7, r2
 8014bf8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014bfc:	1ab6      	subs	r6, r6, r2
 8014bfe:	892a      	ldrh	r2, [r5, #8]
 8014c00:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8014c04:	4416      	add	r6, r2
 8014c06:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014c08:	4416      	add	r6, r2
 8014c0a:	4a08      	ldr	r2, [pc, #32]	@ (8014c2c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014c0c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8014c10:	2600      	movs	r6, #0
 8014c12:	9207      	str	r2, [sp, #28]
 8014c14:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8014c18:	6803      	ldr	r3, [r0, #0]
 8014c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c1c:	4798      	blx	r3
 8014c1e:	792b      	ldrb	r3, [r5, #4]
 8014c20:	b10b      	cbz	r3, 8014c26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014c22:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8014c26:	b00a      	add	sp, #40	@ 0x28
 8014c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c2c:	0802574c 	.word	0x0802574c

08014c30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c34:	460c      	mov	r4, r1
 8014c36:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8014c38:	b088      	sub	sp, #32
 8014c3a:	4605      	mov	r5, r0
 8014c3c:	2900      	cmp	r1, #0
 8014c3e:	d06d      	beq.n	8014d1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014c40:	4668      	mov	r0, sp
 8014c42:	f7ff fb65 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014c46:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8014c48:	88e3      	ldrh	r3, [r4, #6]
 8014c4a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014c4e:	440b      	add	r3, r1
 8014c50:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014c54:	b21b      	sxth	r3, r3
 8014c56:	4543      	cmp	r3, r8
 8014c58:	db31      	blt.n	8014cbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014c5a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014c5e:	44c4      	add	ip, r8
 8014c60:	fa0f fc8c 	sxth.w	ip, ip
 8014c64:	4563      	cmp	r3, ip
 8014c66:	da2a      	bge.n	8014cbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014c68:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8014c6a:	8926      	ldrh	r6, [r4, #8]
 8014c6c:	4416      	add	r6, r2
 8014c6e:	b236      	sxth	r6, r6
 8014c70:	42be      	cmp	r6, r7
 8014c72:	db24      	blt.n	8014cbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014c74:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014c78:	4438      	add	r0, r7
 8014c7a:	b200      	sxth	r0, r0
 8014c7c:	4286      	cmp	r6, r0
 8014c7e:	da1e      	bge.n	8014cbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014c80:	8963      	ldrh	r3, [r4, #10]
 8014c82:	4419      	add	r1, r3
 8014c84:	b209      	sxth	r1, r1
 8014c86:	4541      	cmp	r1, r8
 8014c88:	db08      	blt.n	8014c9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014c8a:	4561      	cmp	r1, ip
 8014c8c:	da06      	bge.n	8014c9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014c8e:	89a3      	ldrh	r3, [r4, #12]
 8014c90:	441a      	add	r2, r3
 8014c92:	b212      	sxth	r2, r2
 8014c94:	42ba      	cmp	r2, r7
 8014c96:	db01      	blt.n	8014c9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014c98:	4282      	cmp	r2, r0
 8014c9a:	db10      	blt.n	8014cbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014c9c:	4b21      	ldr	r3, [pc, #132]	@ (8014d24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014c9e:	a904      	add	r1, sp, #16
 8014ca0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014ca2:	9304      	str	r3, [sp, #16]
 8014ca4:	2302      	movs	r3, #2
 8014ca6:	f88d 3014 	strb.w	r3, [sp, #20]
 8014caa:	2300      	movs	r3, #0
 8014cac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014cb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014cb4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014cb8:	6803      	ldr	r3, [r0, #0]
 8014cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cbc:	4798      	blx	r3
 8014cbe:	1d29      	adds	r1, r5, #4
 8014cc0:	a802      	add	r0, sp, #8
 8014cc2:	f7ff fb25 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014cc6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014cca:	88e0      	ldrh	r0, [r4, #6]
 8014ccc:	eba3 0808 	sub.w	r8, r3, r8
 8014cd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014cd4:	7921      	ldrb	r1, [r4, #4]
 8014cd6:	fa1f f888 	uxth.w	r8, r8
 8014cda:	1bdf      	subs	r7, r3, r7
 8014cdc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8014ce0:	b2bb      	uxth	r3, r7
 8014ce2:	4440      	add	r0, r8
 8014ce4:	8922      	ldrh	r2, [r4, #8]
 8014ce6:	8967      	ldrh	r7, [r4, #10]
 8014ce8:	4460      	add	r0, ip
 8014cea:	89a4      	ldrh	r4, [r4, #12]
 8014cec:	441a      	add	r2, r3
 8014cee:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8014cf0:	44b8      	add	r8, r7
 8014cf2:	4423      	add	r3, r4
 8014cf4:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014cf8:	4432      	add	r2, r6
 8014cfa:	44e0      	add	r8, ip
 8014cfc:	4433      	add	r3, r6
 8014cfe:	4c0a      	ldr	r4, [pc, #40]	@ (8014d28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014d00:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014d02:	f88d 1014 	strb.w	r1, [sp, #20]
 8014d06:	a904      	add	r1, sp, #16
 8014d08:	9404      	str	r4, [sp, #16]
 8014d0a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014d0e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014d12:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d16:	6803      	ldr	r3, [r0, #0]
 8014d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d1a:	4798      	blx	r3
 8014d1c:	b008      	add	sp, #32
 8014d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d22:	bf00      	nop
 8014d24:	0802574c 	.word	0x0802574c
 8014d28:	08025760 	.word	0x08025760

08014d2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d2e:	4604      	mov	r4, r0
 8014d30:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014d34:	3201      	adds	r2, #1
 8014d36:	d112      	bne.n	8014d5e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014d38:	2500      	movs	r5, #0
 8014d3a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014d3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014d42:	6803      	ldr	r3, [r0, #0]
 8014d44:	9500      	str	r5, [sp, #0]
 8014d46:	466d      	mov	r5, sp
 8014d48:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014d4c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d50:	4629      	mov	r1, r5
 8014d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d54:	4798      	blx	r3
 8014d56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d5e:	4620      	mov	r0, r4
 8014d60:	b003      	add	sp, #12
 8014d62:	bd30      	pop	{r4, r5, pc}

08014d64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014d64:	b513      	push	{r0, r1, r4, lr}
 8014d66:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	d109      	bne.n	8014d84 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014d70:	4601      	mov	r1, r0
 8014d72:	4668      	mov	r0, sp
 8014d74:	f7ff facc 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014d78:	f8bd 3000 	ldrh.w	r3, [sp]
 8014d7c:	8423      	strh	r3, [r4, #32]
 8014d7e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014d82:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014d84:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014d88:	b002      	add	sp, #8
 8014d8a:	bd10      	pop	{r4, pc}

08014d8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014d8c:	b513      	push	{r0, r1, r4, lr}
 8014d8e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8014d92:	4604      	mov	r4, r0
 8014d94:	3301      	adds	r3, #1
 8014d96:	d109      	bne.n	8014dac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014d98:	4601      	mov	r1, r0
 8014d9a:	4668      	mov	r0, sp
 8014d9c:	f7ff fab8 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8014da4:	8423      	strh	r3, [r4, #32]
 8014da6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014daa:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014dac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8014db0:	b002      	add	sp, #8
 8014db2:	bd10      	pop	{r4, pc}

08014db4 <_ZN8touchgfx6ScreenC1Ev>:
 8014db4:	b570      	push	{r4, r5, r6, lr}
 8014db6:	4b17      	ldr	r3, [pc, #92]	@ (8014e14 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014db8:	4605      	mov	r5, r0
 8014dba:	4a17      	ldr	r2, [pc, #92]	@ (8014e18 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	f845 3b04 	str.w	r3, [r5], #4
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	6042      	str	r2, [r0, #4]
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	8103      	strh	r3, [r0, #8]
 8014dca:	8143      	strh	r3, [r0, #10]
 8014dcc:	8183      	strh	r3, [r0, #12]
 8014dce:	81c3      	strh	r3, [r0, #14]
 8014dd0:	8203      	strh	r3, [r0, #16]
 8014dd2:	8243      	strh	r3, [r0, #18]
 8014dd4:	8283      	strh	r3, [r0, #20]
 8014dd6:	82c3      	strh	r3, [r0, #22]
 8014dd8:	6203      	str	r3, [r0, #32]
 8014dda:	8483      	strh	r3, [r0, #36]	@ 0x24
 8014ddc:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8014dde:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8014de2:	6343      	str	r3, [r0, #52]	@ 0x34
 8014de4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8014de8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014dec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014df0:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8014df4:	4b09      	ldr	r3, [pc, #36]	@ (8014e1c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014df6:	4628      	mov	r0, r5
 8014df8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014dfc:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8014dfe:	4a08      	ldr	r2, [pc, #32]	@ (8014e20 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014e00:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014e04:	4798      	blx	r3
 8014e06:	6863      	ldr	r3, [r4, #4]
 8014e08:	4628      	mov	r0, r5
 8014e0a:	4631      	mov	r1, r6
 8014e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e0e:	4798      	blx	r3
 8014e10:	4620      	mov	r0, r4
 8014e12:	bd70      	pop	{r4, r5, r6, pc}
 8014e14:	08025788 	.word	0x08025788
 8014e18:	0802516c 	.word	0x0802516c
 8014e1c:	240253ca 	.word	0x240253ca
 8014e20:	240253c8 	.word	0x240253c8

08014e24 <_ZN8touchgfx6Screen4drawEv>:
 8014e24:	4b09      	ldr	r3, [pc, #36]	@ (8014e4c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014e26:	b507      	push	{r0, r1, r2, lr}
 8014e28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014e2c:	2100      	movs	r1, #0
 8014e2e:	4b08      	ldr	r3, [pc, #32]	@ (8014e50 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014e30:	9100      	str	r1, [sp, #0]
 8014e32:	4669      	mov	r1, sp
 8014e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014e3c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014e40:	6803      	ldr	r3, [r0, #0]
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	4798      	blx	r3
 8014e46:	b003      	add	sp, #12
 8014e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e4c:	240253c8 	.word	0x240253c8
 8014e50:	240253ca 	.word	0x240253ca

08014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e58:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014e5c:	b089      	sub	sp, #36	@ 0x24
 8014e5e:	4680      	mov	r8, r0
 8014e60:	460c      	mov	r4, r1
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	4615      	mov	r5, r2
 8014e66:	dd0e      	ble.n	8014e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014e68:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dd0a      	ble.n	8014e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014e70:	4628      	mov	r0, r5
 8014e72:	f7ff ff5b 	bl	8014d2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014e76:	4621      	mov	r1, r4
 8014e78:	f7fe f80d 	bl	8012e96 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014e7c:	69eb      	ldr	r3, [r5, #28]
 8014e7e:	b928      	cbnz	r0, 8014e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014e80:	461d      	mov	r5, r3
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d1f4      	bne.n	8014e70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014e86:	b009      	add	sp, #36	@ 0x24
 8014e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8c:	ae04      	add	r6, sp, #16
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	f000 80b5 	beq.w	8014ffe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014e94:	682b      	ldr	r3, [r5, #0]
 8014e96:	4629      	mov	r1, r5
 8014e98:	a802      	add	r0, sp, #8
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	4798      	blx	r3
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	f7ff ff60 	bl	8014d64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014ea4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014ea8:	4407      	add	r7, r0
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f7ff ff6e 	bl	8014d8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014eb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014eb4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014eb8:	b23f      	sxth	r7, r7
 8014eba:	4418      	add	r0, r3
 8014ebc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014ec0:	4621      	mov	r1, r4
 8014ec2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014ec6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014eca:	4630      	mov	r0, r6
 8014ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ed0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014ed4:	f7f8 feae 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7ff ff27 	bl	8014d2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014ede:	ab06      	add	r3, sp, #24
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014ee6:	e883 0003 	stmia.w	r3, {r0, r1}
 8014eea:	4611      	mov	r1, r2
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7f8 fea1 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 8014ef2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014ef6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014efa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014efe:	4299      	cmp	r1, r3
 8014f00:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014f04:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014f08:	d10b      	bne.n	8014f22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014f0a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014f0e:	4552      	cmp	r2, sl
 8014f10:	d107      	bne.n	8014f22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014f12:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014f16:	455a      	cmp	r2, fp
 8014f18:	d103      	bne.n	8014f22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014f1a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014f1e:	454a      	cmp	r2, r9
 8014f20:	d06d      	beq.n	8014ffe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014f22:	f1bb 0f00 	cmp.w	fp, #0
 8014f26:	dd65      	ble.n	8014ff4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014f28:	f1b9 0f00 	cmp.w	r9, #0
 8014f2c:	dd62      	ble.n	8014ff4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014f2e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014f32:	fa1f f08a 	uxth.w	r0, sl
 8014f36:	4552      	cmp	r2, sl
 8014f38:	9000      	str	r0, [sp, #0]
 8014f3a:	da12      	bge.n	8014f62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	9b00      	ldr	r3, [sp, #0]
 8014f40:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014f44:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014f48:	1a9a      	subs	r2, r3, r2
 8014f4a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014f4e:	4631      	mov	r1, r6
 8014f50:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014f54:	4640      	mov	r0, r8
 8014f56:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014f5a:	69ea      	ldr	r2, [r5, #28]
 8014f5c:	f7ff ff7a 	bl	8014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014f60:	9b01      	ldr	r3, [sp, #4]
 8014f62:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014f66:	b29f      	uxth	r7, r3
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	da0d      	bge.n	8014f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014f6c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014f70:	1aba      	subs	r2, r7, r2
 8014f72:	f8ad a012 	strh.w	sl, [sp, #18]
 8014f76:	4631      	mov	r1, r6
 8014f78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014f7c:	4640      	mov	r0, r8
 8014f7e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014f82:	69ea      	ldr	r2, [r5, #28]
 8014f84:	f7ff ff66 	bl	8014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014f88:	8822      	ldrh	r2, [r4, #0]
 8014f8a:	445f      	add	r7, fp
 8014f8c:	88a3      	ldrh	r3, [r4, #4]
 8014f8e:	b2bf      	uxth	r7, r7
 8014f90:	4413      	add	r3, r2
 8014f92:	b23a      	sxth	r2, r7
 8014f94:	b29b      	uxth	r3, r3
 8014f96:	b219      	sxth	r1, r3
 8014f98:	4291      	cmp	r1, r2
 8014f9a:	dd0d      	ble.n	8014fb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014f9c:	1bdb      	subs	r3, r3, r7
 8014f9e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014fa2:	f8ad a012 	strh.w	sl, [sp, #18]
 8014fa6:	4631      	mov	r1, r6
 8014fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014fac:	4640      	mov	r0, r8
 8014fae:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014fb2:	69ea      	ldr	r2, [r5, #28]
 8014fb4:	f7ff ff4e 	bl	8014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014fb8:	88e2      	ldrh	r2, [r4, #6]
 8014fba:	8863      	ldrh	r3, [r4, #2]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	9a00      	ldr	r2, [sp, #0]
 8014fc0:	444a      	add	r2, r9
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	fa1f f982 	uxth.w	r9, r2
 8014fc8:	b219      	sxth	r1, r3
 8014fca:	fa0f f289 	sxth.w	r2, r9
 8014fce:	428a      	cmp	r2, r1
 8014fd0:	da15      	bge.n	8014ffe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014fd2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014fd6:	eba3 0309 	sub.w	r3, r3, r9
 8014fda:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014fde:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014fe2:	4631      	mov	r1, r6
 8014fe4:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014fe8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ff0:	69ea      	ldr	r2, [r5, #28]
 8014ff2:	e001      	b.n	8014ff8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014ff4:	69ea      	ldr	r2, [r5, #28]
 8014ff6:	4621      	mov	r1, r4
 8014ff8:	4640      	mov	r0, r8
 8014ffa:	f7ff ff2b 	bl	8014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014ffe:	4628      	mov	r0, r5
 8015000:	f7ff fe94 	bl	8014d2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015004:	6861      	ldr	r1, [r4, #4]
 8015006:	4602      	mov	r2, r0
 8015008:	4633      	mov	r3, r6
 801500a:	6820      	ldr	r0, [r4, #0]
 801500c:	c303      	stmia	r3!, {r0, r1}
 801500e:	4611      	mov	r1, r2
 8015010:	4630      	mov	r0, r6
 8015012:	f7f8 fe0f 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 8015016:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801501a:	2b00      	cmp	r3, #0
 801501c:	f77f af33 	ble.w	8014e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015020:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015024:	2b00      	cmp	r3, #0
 8015026:	f77f af2e 	ble.w	8014e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801502a:	4628      	mov	r0, r5
 801502c:	f7ff fe9a 	bl	8014d64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015030:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015034:	1a18      	subs	r0, r3, r0
 8015036:	f8ad 0010 	strh.w	r0, [sp, #16]
 801503a:	4628      	mov	r0, r5
 801503c:	f7ff fea6 	bl	8014d8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015040:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015044:	4631      	mov	r1, r6
 8015046:	1a18      	subs	r0, r3, r0
 8015048:	f8ad 0012 	strh.w	r0, [sp, #18]
 801504c:	4628      	mov	r0, r5
 801504e:	682b      	ldr	r3, [r5, #0]
 8015050:	689b      	ldr	r3, [r3, #8]
 8015052:	4798      	blx	r3
 8015054:	e717      	b.n	8014e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08015056 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8015056:	b570      	push	{r4, r5, r6, lr}
 8015058:	1d06      	adds	r6, r0, #4
 801505a:	b086      	sub	sp, #24
 801505c:	460c      	mov	r4, r1
 801505e:	2300      	movs	r3, #0
 8015060:	4631      	mov	r1, r6
 8015062:	4605      	mov	r5, r0
 8015064:	a802      	add	r0, sp, #8
 8015066:	9301      	str	r3, [sp, #4]
 8015068:	f7ff f952 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801506c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015070:	8822      	ldrh	r2, [r4, #0]
 8015072:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015076:	1ad2      	subs	r2, r2, r3
 8015078:	8863      	ldrh	r3, [r4, #2]
 801507a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801507e:	1a5b      	subs	r3, r3, r1
 8015080:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015084:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015088:	aa01      	add	r2, sp, #4
 801508a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801508e:	4630      	mov	r0, r6
 8015090:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015094:	a904      	add	r1, sp, #16
 8015096:	f8ad 3012 	strh.w	r3, [sp, #18]
 801509a:	f7f8 fea3 	bl	800dde4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801509e:	9a01      	ldr	r2, [sp, #4]
 80150a0:	b11a      	cbz	r2, 80150aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80150a2:	4621      	mov	r1, r4
 80150a4:	4628      	mov	r0, r5
 80150a6:	f7ff fed5 	bl	8014e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80150aa:	b006      	add	sp, #24
 80150ac:	bd70      	pop	{r4, r5, r6, pc}

080150ae <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80150ae:	4602      	mov	r2, r0
 80150b0:	b530      	push	{r4, r5, lr}
 80150b2:	4604      	mov	r4, r0
 80150b4:	b085      	sub	sp, #20
 80150b6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80150ba:	460d      	mov	r5, r1
 80150bc:	466b      	mov	r3, sp
 80150be:	6851      	ldr	r1, [r2, #4]
 80150c0:	c303      	stmia	r3!, {r0, r1}
 80150c2:	4629      	mov	r1, r5
 80150c4:	4668      	mov	r0, sp
 80150c6:	f7f8 fdb5 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 80150ca:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80150ce:	b12b      	cbz	r3, 80150dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80150d0:	4669      	mov	r1, sp
 80150d2:	4620      	mov	r0, r4
 80150d4:	f7ff ffbf 	bl	8015056 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80150d8:	b005      	add	sp, #20
 80150da:	bd30      	pop	{r4, r5, pc}
 80150dc:	3404      	adds	r4, #4
 80150de:	a802      	add	r0, sp, #8
 80150e0:	4621      	mov	r1, r4
 80150e2:	f7ff f915 	bl	8014310 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80150e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80150ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80150ee:	4669      	mov	r1, sp
 80150f0:	4620      	mov	r0, r4
 80150f2:	1a9b      	subs	r3, r3, r2
 80150f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80150f8:	f8ad 3000 	strh.w	r3, [sp]
 80150fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015100:	1a9b      	subs	r3, r3, r2
 8015102:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015106:	f7f8 fe34 	bl	800dd72 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801510a:	e7e5      	b.n	80150d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801510c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801510c:	460b      	mov	r3, r1
 801510e:	680a      	ldr	r2, [r1, #0]
 8015110:	1d01      	adds	r1, r0, #4
 8015112:	6992      	ldr	r2, [r2, #24]
 8015114:	4618      	mov	r0, r3
 8015116:	4710      	bx	r2

08015118 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8015118:	4298      	cmp	r0, r3
 801511a:	d200      	bcs.n	801511e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801511c:	b913      	cbnz	r3, 8015124 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801511e:	440a      	add	r2, r1
 8015120:	b210      	sxth	r0, r2
 8015122:	4770      	bx	lr
 8015124:	ee07 2a90 	vmov	s15, r2
 8015128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801512c:	ee07 0a90 	vmov	s15, r0
 8015130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015138:	ee07 3a10 	vmov	s14, r3
 801513c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015144:	ee07 1a90 	vmov	s15, r1
 8015148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801514c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015150:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801515c:	bfcc      	ite	gt
 801515e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8015162:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801516a:	ee17 3a90 	vmov	r3, s15
 801516e:	b218      	sxth	r0, r3
 8015170:	4770      	bx	lr

08015172 <_ZN8touchgfx12TextProviderC1Ev>:
 8015172:	b538      	push	{r3, r4, r5, lr}
 8015174:	2500      	movs	r5, #0
 8015176:	2302      	movs	r3, #2
 8015178:	4604      	mov	r4, r0
 801517a:	220e      	movs	r2, #14
 801517c:	7403      	strb	r3, [r0, #16]
 801517e:	4629      	mov	r1, r5
 8015180:	6145      	str	r5, [r0, #20]
 8015182:	7605      	strb	r5, [r0, #24]
 8015184:	83c5      	strh	r5, [r0, #30]
 8015186:	8405      	strh	r5, [r0, #32]
 8015188:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801518a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801518c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801518e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8015192:	e9c0 5500 	strd	r5, r5, [r0]
 8015196:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801519a:	304c      	adds	r0, #76	@ 0x4c
 801519c:	f00c fdb4 	bl	8021d08 <memset>
 80151a0:	2301      	movs	r3, #1
 80151a2:	4620      	mov	r0, r4
 80151a4:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80151a8:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80151ac:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80151b0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80151b4:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80151b8:	f7ee ff5e 	bl	8004078 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80151bc:	4620      	mov	r0, r4
 80151be:	bd38      	pop	{r3, r4, r5, pc}

080151c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80151c0:	b530      	push	{r4, r5, lr}
 80151c2:	2500      	movs	r5, #0
 80151c4:	2401      	movs	r4, #1
 80151c6:	6843      	ldr	r3, [r0, #4]
 80151c8:	b913      	cbnz	r3, 80151d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80151ca:	6803      	ldr	r3, [r0, #0]
 80151cc:	b313      	cbz	r3, 8015214 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80151ce:	6043      	str	r3, [r0, #4]
 80151d0:	7e03      	ldrb	r3, [r0, #24]
 80151d2:	b143      	cbz	r3, 80151e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80151d4:	6943      	ldr	r3, [r0, #20]
 80151d6:	b12b      	cbz	r3, 80151e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80151d8:	881a      	ldrh	r2, [r3, #0]
 80151da:	b11a      	cbz	r2, 80151e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80151dc:	1c9a      	adds	r2, r3, #2
 80151de:	6142      	str	r2, [r0, #20]
 80151e0:	8818      	ldrh	r0, [r3, #0]
 80151e2:	bd30      	pop	{r4, r5, pc}
 80151e4:	7605      	strb	r5, [r0, #24]
 80151e6:	6843      	ldr	r3, [r0, #4]
 80151e8:	8819      	ldrh	r1, [r3, #0]
 80151ea:	b199      	cbz	r1, 8015214 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80151ec:	1c9a      	adds	r2, r3, #2
 80151ee:	2902      	cmp	r1, #2
 80151f0:	6042      	str	r2, [r0, #4]
 80151f2:	d1f5      	bne.n	80151e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80151f4:	7c03      	ldrb	r3, [r0, #16]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d8e5      	bhi.n	80151c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80151fa:	1c5a      	adds	r2, r3, #1
 80151fc:	3302      	adds	r3, #2
 80151fe:	7402      	strb	r2, [r0, #16]
 8015200:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015204:	6143      	str	r3, [r0, #20]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d0dd      	beq.n	80151c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801520a:	881b      	ldrh	r3, [r3, #0]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d0da      	beq.n	80151c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015210:	7604      	strb	r4, [r0, #24]
 8015212:	e7d8      	b.n	80151c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015214:	2000      	movs	r0, #0
 8015216:	e7e4      	b.n	80151e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08015218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8015218:	6001      	str	r1, [r0, #0]
 801521a:	2100      	movs	r1, #0
 801521c:	b430      	push	{r4, r5}
 801521e:	6041      	str	r1, [r0, #4]
 8015220:	6815      	ldr	r5, [r2, #0]
 8015222:	6085      	str	r5, [r0, #8]
 8015224:	6852      	ldr	r2, [r2, #4]
 8015226:	6443      	str	r3, [r0, #68]	@ 0x44
 8015228:	9b02      	ldr	r3, [sp, #8]
 801522a:	60c2      	str	r2, [r0, #12]
 801522c:	7401      	strb	r1, [r0, #16]
 801522e:	6141      	str	r1, [r0, #20]
 8015230:	7601      	strb	r1, [r0, #24]
 8015232:	8701      	strh	r1, [r0, #56]	@ 0x38
 8015234:	8401      	strh	r1, [r0, #32]
 8015236:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801523a:	6483      	str	r3, [r0, #72]	@ 0x48
 801523c:	bc30      	pop	{r4, r5}
 801523e:	f7ee bf1b 	b.w	8004078 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015242 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015244:	4605      	mov	r5, r0
 8015246:	4608      	mov	r0, r1
 8015248:	b1f1      	cbz	r1, 8015288 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801524a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801524e:	460b      	mov	r3, r1
 8015250:	f101 0708 	add.w	r7, r1, #8
 8015254:	4622      	mov	r2, r4
 8015256:	6818      	ldr	r0, [r3, #0]
 8015258:	3308      	adds	r3, #8
 801525a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801525e:	4626      	mov	r6, r4
 8015260:	42bb      	cmp	r3, r7
 8015262:	c603      	stmia	r6!, {r0, r1}
 8015264:	4634      	mov	r4, r6
 8015266:	d1f6      	bne.n	8015256 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015268:	6818      	ldr	r0, [r3, #0]
 801526a:	6030      	str	r0, [r6, #0]
 801526c:	4610      	mov	r0, r2
 801526e:	889b      	ldrh	r3, [r3, #4]
 8015270:	80b3      	strh	r3, [r6, #4]
 8015272:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8015276:	015b      	lsls	r3, r3, #5
 8015278:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801527c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8015280:	430b      	orrs	r3, r1
 8015282:	425b      	negs	r3, r3
 8015284:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8015288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801528a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801528a:	b538      	push	{r3, r4, r5, lr}
 801528c:	460c      	mov	r4, r1
 801528e:	6811      	ldr	r1, [r2, #0]
 8015290:	4610      	mov	r0, r2
 8015292:	68cd      	ldr	r5, [r1, #12]
 8015294:	4619      	mov	r1, r3
 8015296:	47a8      	blx	r5
 8015298:	2800      	cmp	r0, #0
 801529a:	bf08      	it	eq
 801529c:	4620      	moveq	r0, r4
 801529e:	bd38      	pop	{r3, r4, r5, pc}

080152a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80152a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a4:	468c      	mov	ip, r1
 80152a6:	4604      	mov	r4, r0
 80152a8:	4615      	mov	r5, r2
 80152aa:	b942      	cbnz	r2, 80152be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 80152ac:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80152b0:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80152b4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80152b8:	4628      	mov	r0, r5
 80152ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152be:	7b50      	ldrb	r0, [r2, #13]
 80152c0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 80152c4:	8893      	ldrh	r3, [r2, #4]
 80152c6:	0106      	lsls	r6, r0, #4
 80152c8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80152cc:	79ee      	ldrb	r6, [r5, #7]
 80152ce:	4316      	orrs	r6, r2
 80152d0:	185a      	adds	r2, r3, r1
 80152d2:	b291      	uxth	r1, r2
 80152d4:	b2b7      	uxth	r7, r6
 80152d6:	291d      	cmp	r1, #29
 80152d8:	d87f      	bhi.n	80153da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80152da:	2201      	movs	r2, #1
 80152dc:	10f6      	asrs	r6, r6, #3
 80152de:	408a      	lsls	r2, r1
 80152e0:	4974      	ldr	r1, [pc, #464]	@ (80154b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80152e2:	420a      	tst	r2, r1
 80152e4:	d12e      	bne.n	8015344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80152e6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 80152ea:	d076      	beq.n	80153da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80152ec:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 80152f0:	462b      	mov	r3, r5
 80152f2:	f105 0e08 	add.w	lr, r5, #8
 80152f6:	4615      	mov	r5, r2
 80152f8:	6818      	ldr	r0, [r3, #0]
 80152fa:	3308      	adds	r3, #8
 80152fc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015300:	4694      	mov	ip, r2
 8015302:	4573      	cmp	r3, lr
 8015304:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015308:	4662      	mov	r2, ip
 801530a:	d1f5      	bne.n	80152f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801530c:	6818      	ldr	r0, [r3, #0]
 801530e:	f8cc 0000 	str.w	r0, [ip]
 8015312:	889b      	ldrh	r3, [r3, #4]
 8015314:	f8ac 3004 	strh.w	r3, [ip, #4]
 8015318:	b2b3      	uxth	r3, r6
 801531a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801531e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8015322:	1aca      	subs	r2, r1, r3
 8015324:	1bcf      	subs	r7, r1, r7
 8015326:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801532a:	b292      	uxth	r2, r2
 801532c:	1afb      	subs	r3, r7, r3
 801532e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8015332:	10d2      	asrs	r2, r2, #3
 8015334:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8015338:	4302      	orrs	r2, r0
 801533a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801533e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8015342:	e7b9      	b.n	80152b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8015344:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8015348:	462b      	mov	r3, r5
 801534a:	f105 0808 	add.w	r8, r5, #8
 801534e:	4615      	mov	r5, r2
 8015350:	6818      	ldr	r0, [r3, #0]
 8015352:	3308      	adds	r3, #8
 8015354:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015358:	4696      	mov	lr, r2
 801535a:	4543      	cmp	r3, r8
 801535c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015360:	4672      	mov	r2, lr
 8015362:	d1f5      	bne.n	8015350 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8015364:	6818      	ldr	r0, [r3, #0]
 8015366:	f8ce 0000 	str.w	r0, [lr]
 801536a:	889b      	ldrh	r3, [r3, #4]
 801536c:	f8ae 3004 	strh.w	r3, [lr, #4]
 8015370:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8015372:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015376:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8015378:	f640 6333 	movw	r3, #3635	@ 0xe33
 801537c:	4299      	cmp	r1, r3
 801537e:	d111      	bne.n	80153a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8015380:	f8dc 3000 	ldr.w	r3, [ip]
 8015384:	4660      	mov	r0, ip
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	4798      	blx	r3
 801538a:	7b41      	ldrb	r1, [r0, #13]
 801538c:	00cb      	lsls	r3, r1, #3
 801538e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015392:	7a03      	ldrb	r3, [r0, #8]
 8015394:	4313      	orrs	r3, r2
 8015396:	064a      	lsls	r2, r1, #25
 8015398:	bf44      	itt	mi
 801539a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801539e:	b21b      	sxthmi	r3, r3
 80153a0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80153a4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80153a8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80153ac:	443b      	add	r3, r7
 80153ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80153b2:	4433      	add	r3, r6
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80153ba:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80153be:	10db      	asrs	r3, r3, #3
 80153c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80153c4:	4313      	orrs	r3, r2
 80153c6:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 80153ca:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80153ce:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 80153d2:	1a9b      	subs	r3, r3, r2
 80153d4:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80153d8:	e76e      	b.n	80152b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80153da:	f023 0204 	bic.w	r2, r3, #4
 80153de:	f640 611b 	movw	r1, #3611	@ 0xe1b
 80153e2:	428a      	cmp	r2, r1
 80153e4:	d003      	beq.n	80153ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 80153e6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d120      	bne.n	8015430 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 80153ee:	3b01      	subs	r3, #1
 80153f0:	4662      	mov	r2, ip
 80153f2:	4629      	mov	r1, r5
 80153f4:	4620      	mov	r0, r4
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	f7ff ff47 	bl	801528a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80153fc:	7b41      	ldrb	r1, [r0, #13]
 80153fe:	00cb      	lsls	r3, r1, #3
 8015400:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015404:	7a03      	ldrb	r3, [r0, #8]
 8015406:	0648      	lsls	r0, r1, #25
 8015408:	ea43 0302 	orr.w	r3, r3, r2
 801540c:	bf44      	itt	mi
 801540e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015412:	b21b      	sxthmi	r3, r3
 8015414:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015418:	7b6b      	ldrb	r3, [r5, #13]
 801541a:	7aaa      	ldrb	r2, [r5, #10]
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015422:	4313      	orrs	r3, r2
 8015424:	115a      	asrs	r2, r3, #5
 8015426:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801542a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801542e:	e032      	b.n	8015496 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8015430:	00c2      	lsls	r2, r0, #3
 8015432:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8015436:	7a2a      	ldrb	r2, [r5, #8]
 8015438:	430a      	orrs	r2, r1
 801543a:	0641      	lsls	r1, r0, #25
 801543c:	f640 6109 	movw	r1, #3593	@ 0xe09
 8015440:	bf44      	itt	mi
 8015442:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8015446:	b212      	sxthmi	r2, r2
 8015448:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801544c:	f023 0210 	bic.w	r2, r3, #16
 8015450:	428a      	cmp	r2, r1
 8015452:	d003      	beq.n	801545c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8015454:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015458:	4293      	cmp	r3, r2
 801545a:	d129      	bne.n	80154b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801545c:	7b6e      	ldrb	r6, [r5, #13]
 801545e:	4629      	mov	r1, r5
 8015460:	4620      	mov	r0, r4
 8015462:	0076      	lsls	r6, r6, #1
 8015464:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8015468:	7aae      	ldrb	r6, [r5, #10]
 801546a:	4316      	orrs	r6, r2
 801546c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8015470:	4293      	cmp	r3, r2
 8015472:	4662      	mov	r2, ip
 8015474:	bf16      	itet	ne
 8015476:	f103 33ff 	addne.w	r3, r3, #4294967295
 801547a:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801547e:	b29b      	uxthne	r3, r3
 8015480:	f7ff ff03 	bl	801528a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015484:	7b43      	ldrb	r3, [r0, #13]
 8015486:	7a82      	ldrb	r2, [r0, #10]
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801548e:	4313      	orrs	r3, r2
 8015490:	1af6      	subs	r6, r6, r3
 8015492:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8015496:	7b69      	ldrb	r1, [r5, #13]
 8015498:	00cb      	lsls	r3, r1, #3
 801549a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801549e:	7a2b      	ldrb	r3, [r5, #8]
 80154a0:	4313      	orrs	r3, r2
 80154a2:	064a      	lsls	r2, r1, #25
 80154a4:	bf44      	itt	mi
 80154a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80154aa:	b21b      	sxthmi	r3, r3
 80154ac:	1bdb      	subs	r3, r3, r7
 80154ae:	e746      	b.n	801533e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80154b0:	2300      	movs	r3, #0
 80154b2:	e7ba      	b.n	801542a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 80154b4:	3fc00079 	.word	0x3fc00079

080154b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80154b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154bc:	4604      	mov	r4, r0
 80154be:	b942      	cbnz	r2, 80154d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80154c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80154c4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80154c8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80154cc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80154d0:	e047      	b.n	8015562 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80154d2:	7b51      	ldrb	r1, [r2, #13]
 80154d4:	8893      	ldrh	r3, [r2, #4]
 80154d6:	010d      	lsls	r5, r1, #4
 80154d8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80154dc:	79d5      	ldrb	r5, [r2, #7]
 80154de:	4305      	orrs	r5, r0
 80154e0:	2d04      	cmp	r5, #4
 80154e2:	bfcc      	ite	gt
 80154e4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80154e8:	f04f 0e01 	movle.w	lr, #1
 80154ec:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80154f0:	f200 80ab 	bhi.w	801564a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80154f4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80154f8:	4283      	cmp	r3, r0
 80154fa:	d216      	bcs.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80154fc:	f240 605b 	movw	r0, #1627	@ 0x65b
 8015500:	4283      	cmp	r3, r0
 8015502:	d859      	bhi.n	80155b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015504:	f240 6057 	movw	r0, #1623	@ 0x657
 8015508:	4283      	cmp	r3, r0
 801550a:	d20e      	bcs.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801550c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015510:	d24a      	bcs.n	80155a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015512:	f240 604e 	movw	r0, #1614	@ 0x64e
 8015516:	4283      	cmp	r3, r0
 8015518:	d207      	bcs.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801551a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801551e:	4283      	cmp	r3, r0
 8015520:	d02a      	beq.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015522:	d821      	bhi.n	8015568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015524:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8015528:	d35b      	bcc.n	80155e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801552a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801552e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015532:	f040 80d0 	bne.w	80156d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015536:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801553a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801553e:	f040 80ca 	bne.w	80156d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015542:	00cb      	lsls	r3, r1, #3
 8015544:	0649      	lsls	r1, r1, #25
 8015546:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801554a:	7a13      	ldrb	r3, [r2, #8]
 801554c:	ea43 0300 	orr.w	r3, r3, r0
 8015550:	bf44      	itt	mi
 8015552:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015556:	b21b      	sxthmi	r3, r3
 8015558:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801555c:	1b5d      	subs	r5, r3, r5
 801555e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015562:	4610      	mov	r0, r2
 8015564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015568:	f240 604b 	movw	r0, #1611	@ 0x64b
 801556c:	4283      	cmp	r3, r0
 801556e:	d338      	bcc.n	80155e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015570:	f240 604c 	movw	r0, #1612	@ 0x64c
 8015574:	4283      	cmp	r3, r0
 8015576:	d9d8      	bls.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015578:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801557c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8015580:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015584:	f040 80f3 	bne.w	801576e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015588:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801558c:	f040 80ef 	bne.w	801576e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015590:	00cb      	lsls	r3, r1, #3
 8015592:	064e      	lsls	r6, r1, #25
 8015594:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015598:	7a13      	ldrb	r3, [r2, #8]
 801559a:	ea43 0300 	orr.w	r3, r3, r0
 801559e:	bf44      	itt	mi
 80155a0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80155a4:	b21b      	sxthmi	r3, r3
 80155a6:	e7d9      	b.n	801555c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80155a8:	f240 6054 	movw	r0, #1620	@ 0x654
 80155ac:	4283      	cmp	r3, r0
 80155ae:	d8e3      	bhi.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80155b0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80155b4:	d9e0      	bls.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80155b6:	e7b8      	b.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80155b8:	f240 6074 	movw	r0, #1652	@ 0x674
 80155bc:	4283      	cmp	r3, r0
 80155be:	d0b4      	beq.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80155c0:	d82d      	bhi.n	801561e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80155c2:	f240 605e 	movw	r0, #1630	@ 0x65e
 80155c6:	4283      	cmp	r3, r0
 80155c8:	d804      	bhi.n	80155d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80155ca:	f240 605d 	movw	r0, #1629	@ 0x65d
 80155ce:	4283      	cmp	r3, r0
 80155d0:	d3d2      	bcc.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80155d2:	e7aa      	b.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80155d4:	f240 605f 	movw	r0, #1631	@ 0x65f
 80155d8:	4283      	cmp	r3, r0
 80155da:	d0cd      	beq.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80155dc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80155e0:	d0a3      	beq.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80155e2:	00cb      	lsls	r3, r1, #3
 80155e4:	0649      	lsls	r1, r1, #25
 80155e6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80155ea:	7a13      	ldrb	r3, [r2, #8]
 80155ec:	ea43 0300 	orr.w	r3, r3, r0
 80155f0:	bf44      	itt	mi
 80155f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80155f6:	b21b      	sxthmi	r3, r3
 80155f8:	1b5d      	subs	r5, r3, r5
 80155fa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80155fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015602:	7b53      	ldrb	r3, [r2, #13]
 8015604:	015b      	lsls	r3, r3, #5
 8015606:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801560a:	7993      	ldrb	r3, [r2, #6]
 801560c:	430b      	orrs	r3, r1
 801560e:	2105      	movs	r1, #5
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	fb93 f3f1 	sdiv	r3, r3, r1
 8015616:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801561a:	440b      	add	r3, r1
 801561c:	e756      	b.n	80154cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801561e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8015622:	4283      	cmp	r3, r0
 8015624:	d809      	bhi.n	801563a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015626:	f240 60df 	movw	r0, #1759	@ 0x6df
 801562a:	4283      	cmp	r3, r0
 801562c:	f4bf af7d 	bcs.w	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015630:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8015634:	2b05      	cmp	r3, #5
 8015636:	d8d4      	bhi.n	80155e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015638:	e777      	b.n	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801563a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801563e:	4283      	cmp	r3, r0
 8015640:	d09a      	beq.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015642:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8015646:	4283      	cmp	r3, r0
 8015648:	e7ca      	b.n	80155e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801564a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801564e:	d22b      	bcs.n	80156a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015650:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8015654:	4283      	cmp	r3, r0
 8015656:	d28f      	bcs.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015658:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801565c:	4283      	cmp	r3, r0
 801565e:	d816      	bhi.n	801568e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015660:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8015664:	4283      	cmp	r3, r0
 8015666:	f4bf af60 	bcs.w	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801566a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801566e:	4283      	cmp	r3, r0
 8015670:	d80a      	bhi.n	8015688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015672:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8015676:	4283      	cmp	r3, r0
 8015678:	f4bf af57 	bcs.w	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801567c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8015680:	4283      	cmp	r3, r0
 8015682:	f43f af79 	beq.w	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015686:	e7ac      	b.n	80155e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015688:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801568c:	e7f8      	b.n	8015680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801568e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8015692:	4283      	cmp	r3, r0
 8015694:	d802      	bhi.n	801569c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8015696:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801569a:	e798      	b.n	80155ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801569c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80156a0:	4283      	cmp	r3, r0
 80156a2:	f47f af42 	bne.w	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80156a6:	e767      	b.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80156a8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80156ac:	4283      	cmp	r3, r0
 80156ae:	f43f af63 	beq.w	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80156b2:	d802      	bhi.n	80156ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80156b4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80156b8:	e7f2      	b.n	80156a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80156ba:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80156be:	4283      	cmp	r3, r0
 80156c0:	d805      	bhi.n	80156ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80156c2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80156c6:	4283      	cmp	r3, r0
 80156c8:	f4ff af2f 	bcc.w	801552a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80156cc:	e754      	b.n	8015578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80156ce:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80156d2:	4283      	cmp	r3, r0
 80156d4:	e7af      	b.n	8015636 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80156d6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80156da:	4617      	mov	r7, r2
 80156dc:	f102 0808 	add.w	r8, r2, #8
 80156e0:	4666      	mov	r6, ip
 80156e2:	6838      	ldr	r0, [r7, #0]
 80156e4:	3708      	adds	r7, #8
 80156e6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80156ea:	46e6      	mov	lr, ip
 80156ec:	4547      	cmp	r7, r8
 80156ee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80156f2:	46f4      	mov	ip, lr
 80156f4:	d1f5      	bne.n	80156e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80156f6:	6838      	ldr	r0, [r7, #0]
 80156f8:	f8ce 0000 	str.w	r0, [lr]
 80156fc:	88b9      	ldrh	r1, [r7, #4]
 80156fe:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015702:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015706:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801570a:	d009      	beq.n	8015720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801570c:	7b51      	ldrb	r1, [r2, #13]
 801570e:	7992      	ldrb	r2, [r2, #6]
 8015710:	0149      	lsls	r1, r1, #5
 8015712:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015716:	4311      	orrs	r1, r2
 8015718:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801571c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015720:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015724:	b2ad      	uxth	r5, r5
 8015726:	d00d      	beq.n	8015744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8015728:	442b      	add	r3, r5
 801572a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801572e:	b29b      	uxth	r3, r3
 8015730:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015734:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015738:	10db      	asrs	r3, r3, #3
 801573a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801573e:	4313      	orrs	r3, r2
 8015740:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015744:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015748:	00cb      	lsls	r3, r1, #3
 801574a:	064f      	lsls	r7, r1, #25
 801574c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015750:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015754:	ea43 0302 	orr.w	r3, r3, r2
 8015758:	bf44      	itt	mi
 801575a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801575e:	b21b      	sxthmi	r3, r3
 8015760:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015764:	1b5b      	subs	r3, r3, r5
 8015766:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801576a:	4632      	mov	r2, r6
 801576c:	e6f9      	b.n	8015562 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801576e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015772:	4617      	mov	r7, r2
 8015774:	f102 0908 	add.w	r9, r2, #8
 8015778:	4666      	mov	r6, ip
 801577a:	6838      	ldr	r0, [r7, #0]
 801577c:	3708      	adds	r7, #8
 801577e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015782:	46e0      	mov	r8, ip
 8015784:	454f      	cmp	r7, r9
 8015786:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801578a:	46c4      	mov	ip, r8
 801578c:	d1f5      	bne.n	801577a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801578e:	6838      	ldr	r0, [r7, #0]
 8015790:	f8c8 0000 	str.w	r0, [r8]
 8015794:	88b9      	ldrh	r1, [r7, #4]
 8015796:	f8a8 1004 	strh.w	r1, [r8, #4]
 801579a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801579e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80157a2:	d009      	beq.n	80157b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80157a4:	7b51      	ldrb	r1, [r2, #13]
 80157a6:	7992      	ldrb	r2, [r2, #6]
 80157a8:	0149      	lsls	r1, r1, #5
 80157aa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80157ae:	4311      	orrs	r1, r2
 80157b0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80157b4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80157b8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80157bc:	d00e      	beq.n	80157dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80157be:	eba3 030e 	sub.w	r3, r3, lr
 80157c2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80157cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80157d0:	10db      	asrs	r3, r3, #3
 80157d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80157d6:	4313      	orrs	r3, r2
 80157d8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80157dc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80157e0:	00cb      	lsls	r3, r1, #3
 80157e2:	0648      	lsls	r0, r1, #25
 80157e4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80157e8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80157ec:	ea43 0302 	orr.w	r3, r3, r2
 80157f0:	bf44      	itt	mi
 80157f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80157f6:	b21b      	sxthmi	r3, r3
 80157f8:	1b5d      	subs	r5, r3, r5
 80157fa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80157fe:	e7b4      	b.n	801576a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08015800 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015804:	461e      	mov	r6, r3
 8015806:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015808:	4604      	mov	r4, r0
 801580a:	4617      	mov	r7, r2
 801580c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015810:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015814:	f7ee fbee 	bl	8003ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015818:	4605      	mov	r5, r0
 801581a:	b918      	cbnz	r0, 8015824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801581c:	6030      	str	r0, [r6, #0]
 801581e:	4628      	mov	r0, r5
 8015820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	4601      	mov	r1, r0
 8015828:	4638      	mov	r0, r7
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	4798      	blx	r3
 801582e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015832:	4602      	mov	r2, r0
 8015834:	6030      	str	r0, [r6, #0]
 8015836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801583a:	d213      	bcs.n	8015864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801583c:	4643      	mov	r3, r8
 801583e:	4639      	mov	r1, r7
 8015840:	4620      	mov	r0, r4
 8015842:	f7ff fe39 	bl	80154b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015846:	6030      	str	r0, [r6, #0]
 8015848:	6833      	ldr	r3, [r6, #0]
 801584a:	b143      	cbz	r3, 801585e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801584c:	7b5a      	ldrb	r2, [r3, #13]
 801584e:	7a9b      	ldrb	r3, [r3, #10]
 8015850:	0052      	lsls	r2, r2, #1
 8015852:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015856:	4313      	orrs	r3, r2
 8015858:	bf0c      	ite	eq
 801585a:	2301      	moveq	r3, #1
 801585c:	2300      	movne	r3, #0
 801585e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015862:	e7dc      	b.n	801581e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015864:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015868:	b29b      	uxth	r3, r3
 801586a:	2b7f      	cmp	r3, #127	@ 0x7f
 801586c:	d804      	bhi.n	8015878 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801586e:	4639      	mov	r1, r7
 8015870:	4620      	mov	r0, r4
 8015872:	f7ff fd15 	bl	80152a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015876:	e7e6      	b.n	8015846 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015878:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801587c:	2b00      	cmp	r3, #0
 801587e:	d0e3      	beq.n	8015848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015880:	f640 1302 	movw	r3, #2306	@ 0x902
 8015884:	429d      	cmp	r5, r3
 8015886:	d1df      	bne.n	8015848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015888:	4601      	mov	r1, r0
 801588a:	4620      	mov	r0, r4
 801588c:	f7ff fcd9 	bl	8015242 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015890:	e7d9      	b.n	8015846 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015892 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015892:	b510      	push	{r4, lr}
 8015894:	4604      	mov	r4, r0
 8015896:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801589a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801589c:	b1e1      	cbz	r1, 80158d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801589e:	2b0a      	cmp	r3, #10
 80158a0:	d02d      	beq.n	80158fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80158a2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80158a4:	3901      	subs	r1, #1
 80158a6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80158aa:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80158ac:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80158b0:	1c51      	adds	r1, r2, #1
 80158b2:	b289      	uxth	r1, r1
 80158b4:	2901      	cmp	r1, #1
 80158b6:	bf8a      	itet	hi
 80158b8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80158bc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80158be:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80158c0:	1c5a      	adds	r2, r3, #1
 80158c2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80158c4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80158c6:	4413      	add	r3, r2
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	2b09      	cmp	r3, #9
 80158cc:	bf88      	it	hi
 80158ce:	3b0a      	subhi	r3, #10
 80158d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80158d4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80158d6:	e7de      	b.n	8015896 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80158d8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80158da:	2b0a      	cmp	r3, #10
 80158dc:	d00f      	beq.n	80158fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80158de:	4620      	mov	r0, r4
 80158e0:	f7ff fc6e 	bl	80151c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80158e4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80158e6:	1c5a      	adds	r2, r3, #1
 80158e8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80158ea:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80158ec:	4413      	add	r3, r2
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	2b09      	cmp	r3, #9
 80158f2:	bf88      	it	hi
 80158f4:	3b0a      	subhi	r3, #10
 80158f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80158fa:	8458      	strh	r0, [r3, #34]	@ 0x22
 80158fc:	e7ec      	b.n	80158d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80158fe:	bd10      	pop	{r4, pc}

08015900 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015904:	4604      	mov	r4, r0
 8015906:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801590a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801590c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801590e:	3a01      	subs	r2, #1
 8015910:	8702      	strh	r2, [r0, #56]	@ 0x38
 8015912:	1c5a      	adds	r2, r3, #1
 8015914:	b292      	uxth	r2, r2
 8015916:	2a09      	cmp	r2, #9
 8015918:	bf8a      	itet	hi
 801591a:	3b09      	subhi	r3, #9
 801591c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801591e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8015920:	f7ff ffb7 	bl	8015892 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015924:	8c23      	ldrh	r3, [r4, #32]
 8015926:	2b01      	cmp	r3, #1
 8015928:	bf9c      	itt	ls
 801592a:	3301      	addls	r3, #1
 801592c:	8423      	strhls	r3, [r4, #32]
 801592e:	8be3      	ldrh	r3, [r4, #30]
 8015930:	b90b      	cbnz	r3, 8015936 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015932:	2302      	movs	r3, #2
 8015934:	83e3      	strh	r3, [r4, #30]
 8015936:	8be3      	ldrh	r3, [r4, #30]
 8015938:	4628      	mov	r0, r5
 801593a:	3b01      	subs	r3, #1
 801593c:	b29b      	uxth	r3, r3
 801593e:	83e3      	strh	r3, [r4, #30]
 8015940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015944:	8365      	strh	r5, [r4, #26]
 8015946:	bd38      	pop	{r3, r4, r5, pc}

08015948 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015948:	428a      	cmp	r2, r1
 801594a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801594e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8015950:	d932      	bls.n	80159b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8015952:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8015954:	1a54      	subs	r4, r2, r1
 8015956:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801595a:	19ee      	adds	r6, r5, r7
 801595c:	fa1f fe84 	uxth.w	lr, r4
 8015960:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8015964:	3e01      	subs	r6, #1
 8015966:	b2b4      	uxth	r4, r6
 8015968:	eba4 090e 	sub.w	r9, r4, lr
 801596c:	fa1f f989 	uxth.w	r9, r9
 8015970:	2c09      	cmp	r4, #9
 8015972:	4626      	mov	r6, r4
 8015974:	bf88      	it	hi
 8015976:	f1a4 060a 	subhi.w	r6, r4, #10
 801597a:	f1bc 0f00 	cmp.w	ip, #0
 801597e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015982:	bf08      	it	eq
 8015984:	f04f 0c02 	moveq.w	ip, #2
 8015988:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801598c:	b2a4      	uxth	r4, r4
 801598e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015992:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8015996:	454c      	cmp	r4, r9
 8015998:	fa1f fc8c 	uxth.w	ip, ip
 801599c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80159a0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80159a4:	d1e4      	bne.n	8015970 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80159a6:	eba5 050e 	sub.w	r5, r5, lr
 80159aa:	eb0e 0408 	add.w	r4, lr, r8
 80159ae:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80159b2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80159b4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80159b8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80159ba:	250a      	movs	r5, #10
 80159bc:	1a64      	subs	r4, r4, r1
 80159be:	4439      	add	r1, r7
 80159c0:	b289      	uxth	r1, r1
 80159c2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80159c4:	2909      	cmp	r1, #9
 80159c6:	bf88      	it	hi
 80159c8:	390a      	subhi	r1, #10
 80159ca:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80159cc:	b18a      	cbz	r2, 80159f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80159ce:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80159d0:	3a01      	subs	r2, #1
 80159d2:	3101      	adds	r1, #1
 80159d4:	b292      	uxth	r2, r2
 80159d6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80159da:	8701      	strh	r1, [r0, #56]	@ 0x38
 80159dc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80159de:	b901      	cbnz	r1, 80159e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80159e0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80159e2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80159e4:	3901      	subs	r1, #1
 80159e6:	b289      	uxth	r1, r1
 80159e8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80159ea:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80159ee:	844c      	strh	r4, [r1, #34]	@ 0x22
 80159f0:	e7ec      	b.n	80159cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80159f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159f6:	f7ff bf4c 	b.w	8015892 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080159fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80159fa:	b570      	push	{r4, r5, r6, lr}
 80159fc:	2500      	movs	r5, #0
 80159fe:	4295      	cmp	r5, r2
 8015a00:	d011      	beq.n	8015a26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015a02:	8bc4      	ldrh	r4, [r0, #30]
 8015a04:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015a08:	4414      	add	r4, r2
 8015a0a:	3c01      	subs	r4, #1
 8015a0c:	1b64      	subs	r4, r4, r5
 8015a0e:	b2a4      	uxth	r4, r4
 8015a10:	2c01      	cmp	r4, #1
 8015a12:	bf88      	it	hi
 8015a14:	3c02      	subhi	r4, #2
 8015a16:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015a1a:	8b64      	ldrh	r4, [r4, #26]
 8015a1c:	42b4      	cmp	r4, r6
 8015a1e:	d117      	bne.n	8015a50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015a20:	3501      	adds	r5, #1
 8015a22:	b2ad      	uxth	r5, r5
 8015a24:	e7eb      	b.n	80159fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015a26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015a2a:	2400      	movs	r4, #0
 8015a2c:	4413      	add	r3, r2
 8015a2e:	b2a2      	uxth	r2, r4
 8015a30:	429a      	cmp	r2, r3
 8015a32:	da0f      	bge.n	8015a54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015a34:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8015a36:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8015a3a:	3401      	adds	r4, #1
 8015a3c:	4432      	add	r2, r6
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	2a09      	cmp	r2, #9
 8015a42:	bf88      	it	hi
 8015a44:	3a0a      	subhi	r2, #10
 8015a46:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8015a4a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8015a4c:	42aa      	cmp	r2, r5
 8015a4e:	d0ee      	beq.n	8015a2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8015a50:	2000      	movs	r0, #0
 8015a52:	bd70      	pop	{r4, r5, r6, pc}
 8015a54:	2001      	movs	r0, #1
 8015a56:	e7fc      	b.n	8015a52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08015a58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	4605      	mov	r5, r0
 8015a5e:	4616      	mov	r6, r2
 8015a60:	1c8c      	adds	r4, r1, #2
 8015a62:	8809      	ldrh	r1, [r1, #0]
 8015a64:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015a68:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8015a6c:	42b3      	cmp	r3, r6
 8015a6e:	d124      	bne.n	8015aba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015a70:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015a74:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015a78:	f001 070f 	and.w	r7, r1, #15
 8015a7c:	4652      	mov	r2, sl
 8015a7e:	f8cd 8000 	str.w	r8, [sp]
 8015a82:	464b      	mov	r3, r9
 8015a84:	4621      	mov	r1, r4
 8015a86:	4628      	mov	r0, r5
 8015a88:	f7ff ffb7 	bl	80159fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8015a8c:	4683      	mov	fp, r0
 8015a8e:	b168      	cbz	r0, 8015aac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015a90:	eb0a 0109 	add.w	r1, sl, r9
 8015a94:	463a      	mov	r2, r7
 8015a96:	4628      	mov	r0, r5
 8015a98:	4441      	add	r1, r8
 8015a9a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8015a9e:	4649      	mov	r1, r9
 8015aa0:	f7ff ff52 	bl	8015948 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015aa4:	4658      	mov	r0, fp
 8015aa6:	b003      	add	sp, #12
 8015aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aac:	eb07 010a 	add.w	r1, r7, sl
 8015ab0:	4449      	add	r1, r9
 8015ab2:	4441      	add	r1, r8
 8015ab4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015ab8:	e7d2      	b.n	8015a60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8015aba:	f04f 0b00 	mov.w	fp, #0
 8015abe:	e7f1      	b.n	8015aa4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015ac0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015ac0:	b570      	push	{r4, r5, r6, lr}
 8015ac2:	8810      	ldrh	r0, [r2, #0]
 8015ac4:	4298      	cmp	r0, r3
 8015ac6:	d817      	bhi.n	8015af8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015ac8:	1e48      	subs	r0, r1, #1
 8015aca:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015ace:	4298      	cmp	r0, r3
 8015ad0:	d312      	bcc.n	8015af8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015ad2:	2400      	movs	r4, #0
 8015ad4:	428c      	cmp	r4, r1
 8015ad6:	d20f      	bcs.n	8015af8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015ad8:	1860      	adds	r0, r4, r1
 8015ada:	1040      	asrs	r0, r0, #1
 8015adc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015ae0:	0085      	lsls	r5, r0, #2
 8015ae2:	42b3      	cmp	r3, r6
 8015ae4:	d902      	bls.n	8015aec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	b284      	uxth	r4, r0
 8015aea:	e7f3      	b.n	8015ad4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015aec:	d201      	bcs.n	8015af2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015aee:	b281      	uxth	r1, r0
 8015af0:	e7f0      	b.n	8015ad4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015af2:	442a      	add	r2, r5
 8015af4:	8850      	ldrh	r0, [r2, #2]
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	2000      	movs	r0, #0
 8015afa:	e7fc      	b.n	8015af6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08015afc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8015afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b00:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8015b02:	4604      	mov	r4, r0
 8015b04:	260b      	movs	r6, #11
 8015b06:	886f      	ldrh	r7, [r5, #2]
 8015b08:	087f      	lsrs	r7, r7, #1
 8015b0a:	3e01      	subs	r6, #1
 8015b0c:	d013      	beq.n	8015b36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015b0e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8015b10:	462a      	mov	r2, r5
 8015b12:	4639      	mov	r1, r7
 8015b14:	4620      	mov	r0, r4
 8015b16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015b1a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015b1e:	4643      	mov	r3, r8
 8015b20:	f7ff ffce 	bl	8015ac0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015b24:	b138      	cbz	r0, 8015b36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015b26:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8015b2a:	4642      	mov	r2, r8
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f7ff ff93 	bl	8015a58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	d1e9      	bne.n	8015b0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015b3c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8015b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b3e:	2300      	movs	r3, #0
 8015b40:	b08d      	sub	sp, #52	@ 0x34
 8015b42:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8015b46:	f101 0710 	add.w	r7, r1, #16
 8015b4a:	9304      	str	r3, [sp, #16]
 8015b4c:	aa04      	add	r2, sp, #16
 8015b4e:	9305      	str	r3, [sp, #20]
 8015b50:	9306      	str	r3, [sp, #24]
 8015b52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8015b56:	9307      	str	r3, [sp, #28]
 8015b58:	4613      	mov	r3, r2
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8015b98 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8015b62:	ecb4 7a01 	vldmia	r4!, {s14}
 8015b66:	ecf5 6a01 	vldmia	r5!, {s13}
 8015b6a:	42bc      	cmp	r4, r7
 8015b6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015b70:	d1f7      	bne.n	8015b62 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8015b72:	3010      	adds	r0, #16
 8015b74:	ece2 7a01 	vstmia	r2!, {s15}
 8015b78:	42b0      	cmp	r0, r6
 8015b7a:	d1ee      	bne.n	8015b5a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8015b7c:	ac0c      	add	r4, sp, #48	@ 0x30
 8015b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b80:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015b84:	ed9d 0a08 	vldr	s0, [sp, #32]
 8015b88:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 8015b8c:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8015b90:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8015b94:	b00d      	add	sp, #52	@ 0x34
 8015b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b98:	00000000 	.word	0x00000000

08015b9c <_ZN8touchgfx9Matrix4x4C1Ev>:
 8015b9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8015bc8 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8015ba6:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8015baa:	2200      	movs	r2, #0
 8015bac:	4293      	cmp	r3, r2
 8015bae:	f102 0201 	add.w	r2, r2, #1
 8015bb2:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8015bb6:	2a04      	cmp	r2, #4
 8015bb8:	ece1 6a01 	vstmia	r1!, {s13}
 8015bbc:	d1f6      	bne.n	8015bac <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	2b04      	cmp	r3, #4
 8015bc2:	d1f0      	bne.n	8015ba6 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8015bc4:	4770      	bx	lr
 8015bc6:	bf00      	nop
 8015bc8:	00000000 	.word	0x00000000

08015bcc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8015bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	4690      	mov	r8, r2
 8015bd6:	f7ff ffe1 	bl	8015b9c <_ZN8touchgfx9Matrix4x4C1Ev>
 8015bda:	4628      	mov	r0, r5
 8015bdc:	4621      	mov	r1, r4
 8015bde:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8015be2:	2300      	movs	r3, #0
 8015be4:	eb08 0603 	add.w	r6, r8, r3
 8015be8:	460f      	mov	r7, r1
 8015bea:	2400      	movs	r4, #0
 8015bec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8015c20 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8015bf0:	4632      	mov	r2, r6
 8015bf2:	3401      	adds	r4, #1
 8015bf4:	ecf7 6a01 	vldmia	r7!, {s13}
 8015bf8:	3610      	adds	r6, #16
 8015bfa:	ed92 7a00 	vldr	s14, [r2]
 8015bfe:	2c04      	cmp	r4, #4
 8015c00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015c04:	d1f4      	bne.n	8015bf0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8015c06:	18c2      	adds	r2, r0, r3
 8015c08:	3304      	adds	r3, #4
 8015c0a:	2b10      	cmp	r3, #16
 8015c0c:	edc2 7a00 	vstr	s15, [r2]
 8015c10:	d1e8      	bne.n	8015be4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8015c12:	3110      	adds	r1, #16
 8015c14:	3010      	adds	r0, #16
 8015c16:	4561      	cmp	r1, ip
 8015c18:	d1e3      	bne.n	8015be2 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c20:	00000000 	.word	0x00000000

08015c24 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8015c24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015c28:	f100 0320 	add.w	r3, r0, #32
 8015c2c:	3030      	adds	r0, #48	@ 0x30
 8015c2e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015c32:	ecf3 7a01 	vldmia	r3!, {s15}
 8015c36:	4283      	cmp	r3, r0
 8015c38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015c3c:	edc3 7a03 	vstr	s15, [r3, #12]
 8015c40:	d1f7      	bne.n	8015c32 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8015c42:	4770      	bx	lr

08015c44 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8015c44:	b510      	push	{r4, lr}
 8015c46:	ed2d 8b02 	vpush	{d8}
 8015c4a:	eef0 8a40 	vmov.f32	s17, s0
 8015c4e:	4604      	mov	r4, r0
 8015c50:	f00b faba 	bl	80211c8 <sinf>
 8015c54:	eeb0 8a40 	vmov.f32	s16, s0
 8015c58:	eeb0 0a68 	vmov.f32	s0, s17
 8015c5c:	f00b fb78 	bl	8021350 <cosf>
 8015c60:	eeb1 6a48 	vneg.f32	s12, s16
 8015c64:	f104 0310 	add.w	r3, r4, #16
 8015c68:	f104 0220 	add.w	r2, r4, #32
 8015c6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8015c70:	edd3 6a00 	vldr	s13, [r3]
 8015c74:	ee26 7a27 	vmul.f32	s14, s12, s15
 8015c78:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015c7c:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015c80:	eee6 7a88 	vfma.f32	s15, s13, s16
 8015c84:	eca3 7a01 	vstmia	r3!, {s14}
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	edc3 7a03 	vstr	s15, [r3, #12]
 8015c8e:	d1ed      	bne.n	8015c6c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8015c90:	4620      	mov	r0, r4
 8015c92:	ecbd 8b02 	vpop	{d8}
 8015c96:	bd10      	pop	{r4, pc}

08015c98 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	ed2d 8b02 	vpush	{d8}
 8015c9e:	eef0 8a40 	vmov.f32	s17, s0
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	f00b fa90 	bl	80211c8 <sinf>
 8015ca8:	eeb0 8a40 	vmov.f32	s16, s0
 8015cac:	eeb0 0a68 	vmov.f32	s0, s17
 8015cb0:	f00b fb4e 	bl	8021350 <cosf>
 8015cb4:	eeb1 6a48 	vneg.f32	s12, s16
 8015cb8:	4623      	mov	r3, r4
 8015cba:	f104 0210 	add.w	r2, r4, #16
 8015cbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8015cc2:	edd3 6a00 	vldr	s13, [r3]
 8015cc6:	ee27 7a88 	vmul.f32	s14, s15, s16
 8015cca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cce:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015cd2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015cd6:	eca3 7a01 	vstmia	r3!, {s14}
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	edc3 7a07 	vstr	s15, [r3, #28]
 8015ce0:	d1ed      	bne.n	8015cbe <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	ecbd 8b02 	vpop	{d8}
 8015ce8:	bd10      	pop	{r4, pc}

08015cea <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8015cea:	b510      	push	{r4, lr}
 8015cec:	ed2d 8b02 	vpush	{d8}
 8015cf0:	eef0 8a40 	vmov.f32	s17, s0
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	f00b fa67 	bl	80211c8 <sinf>
 8015cfa:	eeb0 8a40 	vmov.f32	s16, s0
 8015cfe:	eeb0 0a68 	vmov.f32	s0, s17
 8015d02:	f00b fb25 	bl	8021350 <cosf>
 8015d06:	eeb1 6a48 	vneg.f32	s12, s16
 8015d0a:	4623      	mov	r3, r4
 8015d0c:	f104 0210 	add.w	r2, r4, #16
 8015d10:	edd3 7a04 	vldr	s15, [r3, #16]
 8015d14:	edd3 6a00 	vldr	s13, [r3]
 8015d18:	ee26 7a27 	vmul.f32	s14, s12, s15
 8015d1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d20:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015d24:	eee6 7a88 	vfma.f32	s15, s13, s16
 8015d28:	eca3 7a01 	vstmia	r3!, {s14}
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	edc3 7a03 	vstr	s15, [r3, #12]
 8015d32:	d1ed      	bne.n	8015d10 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8015d34:	4620      	mov	r0, r4
 8015d36:	ecbd 8b02 	vpop	{d8}
 8015d3a:	bd10      	pop	{r4, pc}

08015d3c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	f100 0210 	add.w	r2, r0, #16
 8015d42:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8015d46:	edd3 7a00 	vldr	s15, [r3]
 8015d4a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015d4e:	ece3 7a01 	vstmia	r3!, {s15}
 8015d52:	4293      	cmp	r3, r2
 8015d54:	d1f5      	bne.n	8015d42 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8015d56:	4770      	bx	lr

08015d58 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8015d58:	f100 0310 	add.w	r3, r0, #16
 8015d5c:	f100 0220 	add.w	r2, r0, #32
 8015d60:	ed93 7a08 	vldr	s14, [r3, #32]
 8015d64:	edd3 7a00 	vldr	s15, [r3]
 8015d68:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015d6c:	ece3 7a01 	vstmia	r3!, {s15}
 8015d70:	4293      	cmp	r3, r2
 8015d72:	d1f5      	bne.n	8015d60 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8015d74:	4770      	bx	lr

08015d76 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8015d76:	f100 0320 	add.w	r3, r0, #32
 8015d7a:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8015d7e:	ed93 7a04 	vldr	s14, [r3, #16]
 8015d82:	edd3 7a00 	vldr	s15, [r3]
 8015d86:	eee7 7a00 	vfma.f32	s15, s14, s0
 8015d8a:	ece3 7a01 	vstmia	r3!, {s15}
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d1f5      	bne.n	8015d7e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8015d92:	4770      	bx	lr

08015d94 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8015d94:	4603      	mov	r3, r0
 8015d96:	f100 0210 	add.w	r2, r0, #16
 8015d9a:	edd3 7a00 	vldr	s15, [r3]
 8015d9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015da2:	ece3 7a01 	vstmia	r3!, {s15}
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d1f7      	bne.n	8015d9a <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8015daa:	4770      	bx	lr

08015dac <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8015dac:	f100 0310 	add.w	r3, r0, #16
 8015db0:	f100 0220 	add.w	r2, r0, #32
 8015db4:	edd3 7a00 	vldr	s15, [r3]
 8015db8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015dbc:	ece3 7a01 	vstmia	r3!, {s15}
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d1f7      	bne.n	8015db4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8015dc4:	4770      	bx	lr

08015dc6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8015dc6:	f100 0320 	add.w	r3, r0, #32
 8015dca:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8015dce:	edd3 7a00 	vldr	s15, [r3]
 8015dd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015dd6:	ece3 7a01 	vstmia	r3!, {s15}
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d1f7      	bne.n	8015dce <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8015dde:	4770      	bx	lr

08015de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8015de0:	b570      	push	{r4, r5, r6, lr}
 8015de2:	694a      	ldr	r2, [r1, #20]
 8015de4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8015de6:	684b      	ldr	r3, [r1, #4]
 8015de8:	1b54      	subs	r4, r2, r5
 8015dea:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8015dec:	f000 8106 	beq.w	8015ffc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8015df0:	1b9b      	subs	r3, r3, r6
 8015df2:	d003      	beq.n	8015dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015df4:	4363      	muls	r3, r4
 8015df6:	2210      	movs	r2, #16
 8015df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015dfc:	680c      	ldr	r4, [r1, #0]
 8015dfe:	698a      	ldr	r2, [r1, #24]
 8015e00:	1b65      	subs	r5, r4, r5
 8015e02:	f000 80fd 	beq.w	8016000 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015e06:	1b92      	subs	r2, r2, r6
 8015e08:	d003      	beq.n	8015e12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015e0a:	436a      	muls	r2, r5
 8015e0c:	2410      	movs	r4, #16
 8015e0e:	fb92 f2f4 	sdiv	r2, r2, r4
 8015e12:	1a9b      	subs	r3, r3, r2
 8015e14:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801603c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015e18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e1c:	460a      	mov	r2, r1
 8015e1e:	ee07 3a90 	vmov	s15, r3
 8015e22:	f100 040c 	add.w	r4, r0, #12
 8015e26:	4603      	mov	r3, r0
 8015e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e2c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015e30:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015e34:	eeb1 6a43 	vneg.f32	s12, s6
 8015e38:	edd2 7a02 	vldr	s15, [r2, #8]
 8015e3c:	3214      	adds	r2, #20
 8015e3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015e42:	ece3 6a01 	vstmia	r3!, {s13}
 8015e46:	429c      	cmp	r4, r3
 8015e48:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e50:	edc3 7a02 	vstr	s15, [r3, #8]
 8015e54:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e5c:	edc3 7a05 	vstr	s15, [r3, #20]
 8015e60:	d1ea      	bne.n	8015e38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015e62:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015e64:	698b      	ldr	r3, [r1, #24]
 8015e66:	edd0 4a02 	vldr	s9, [r0, #8]
 8015e6a:	1a9b      	subs	r3, r3, r2
 8015e6c:	edd0 3a00 	vldr	s7, [r0]
 8015e70:	edd0 6a01 	vldr	s13, [r0, #4]
 8015e74:	ee07 3a90 	vmov	s15, r3
 8015e78:	684b      	ldr	r3, [r1, #4]
 8015e7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015e7e:	ed90 5a05 	vldr	s10, [r0, #20]
 8015e82:	1a9b      	subs	r3, r3, r2
 8015e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e88:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015e8c:	ed90 2a03 	vldr	s4, [r0, #12]
 8015e90:	ee07 3a10 	vmov	s14, r3
 8015e94:	edd0 5a04 	vldr	s11, [r0, #16]
 8015e98:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015e9c:	ed90 1a07 	vldr	s2, [r0, #28]
 8015ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ea4:	edd0 2a06 	vldr	s5, [r0, #24]
 8015ea8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015eac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015eb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015eb4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015eb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015ebc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015ec0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8015ec4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015ec6:	694a      	ldr	r2, [r1, #20]
 8015ec8:	1b13      	subs	r3, r2, r4
 8015eca:	ee07 3a10 	vmov	s14, r3
 8015ece:	680b      	ldr	r3, [r1, #0]
 8015ed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ed4:	1b1b      	subs	r3, r3, r4
 8015ed6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015eda:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015ede:	ee07 3a10 	vmov	s14, r3
 8015ee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ee6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015eea:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015eee:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015ef2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8015ef6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015ef8:	698b      	ldr	r3, [r1, #24]
 8015efa:	1a9b      	subs	r3, r3, r2
 8015efc:	ee06 3a90 	vmov	s13, r3
 8015f00:	684b      	ldr	r3, [r1, #4]
 8015f02:	1a9b      	subs	r3, r3, r2
 8015f04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015f08:	ee07 3a10 	vmov	s14, r3
 8015f0c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f14:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015f18:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f1c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015f20:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015f24:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8015f28:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015f2a:	694a      	ldr	r2, [r1, #20]
 8015f2c:	1b13      	subs	r3, r2, r4
 8015f2e:	ee07 3a10 	vmov	s14, r3
 8015f32:	680b      	ldr	r3, [r1, #0]
 8015f34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f38:	1b1b      	subs	r3, r3, r4
 8015f3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f3e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015f42:	ee07 3a10 	vmov	s14, r3
 8015f46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f4e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015f52:	edd0 5a08 	vldr	s11, [r0, #32]
 8015f56:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015f5a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015f5e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015f62:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8015f66:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015f68:	698b      	ldr	r3, [r1, #24]
 8015f6a:	1a9b      	subs	r3, r3, r2
 8015f6c:	ee07 3a10 	vmov	s14, r3
 8015f70:	684b      	ldr	r3, [r1, #4]
 8015f72:	1a9b      	subs	r3, r3, r2
 8015f74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f78:	ee01 3a90 	vmov	s3, r3
 8015f7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f80:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015f84:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015f88:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015f8c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015f90:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015f94:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8015f98:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015f9a:	694a      	ldr	r2, [r1, #20]
 8015f9c:	1b13      	subs	r3, r2, r4
 8015f9e:	ee03 3a10 	vmov	s6, r3
 8015fa2:	680b      	ldr	r3, [r1, #0]
 8015fa4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015fa8:	1b1b      	subs	r3, r3, r4
 8015faa:	ee23 3a04 	vmul.f32	s6, s6, s8
 8015fae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8015fb2:	ee03 3a10 	vmov	s6, r3
 8015fb6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015fba:	ee23 4a04 	vmul.f32	s8, s6, s8
 8015fbe:	eee1 5a04 	vfma.f32	s11, s2, s8
 8015fc2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015fc6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015fca:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8015fce:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015fd2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fda:	dd13      	ble.n	8016004 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015fe0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015fe4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8015fe6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	dd15      	ble.n	8016020 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015ff8:	6403      	str	r3, [r0, #64]	@ 0x40
 8015ffa:	bd70      	pop	{r4, r5, r6, pc}
 8015ffc:	4623      	mov	r3, r4
 8015ffe:	e6fd      	b.n	8015dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016000:	462a      	mov	r2, r5
 8016002:	e706      	b.n	8015e12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016004:	d502      	bpl.n	801600c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016006:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801600a:	e7e9      	b.n	8015fe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801600c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016010:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016014:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601c:	dade      	bge.n	8015fdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801601e:	e7f2      	b.n	8016006 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016020:	d502      	bpl.n	8016028 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016022:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016026:	e7e7      	b.n	8015ff8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016028:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801602c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016030:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016038:	dadc      	bge.n	8015ff4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801603a:	e7f2      	b.n	8016022 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801603c:	3d800000 	.word	0x3d800000

08016040 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016044:	2714      	movs	r7, #20
 8016046:	435f      	muls	r7, r3
 8016048:	eb02 0c07 	add.w	ip, r2, r7
 801604c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016050:	f115 0e0f 	adds.w	lr, r5, #15
 8016054:	f100 80a2 	bmi.w	801619c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016058:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801605c:	9c08      	ldr	r4, [sp, #32]
 801605e:	2614      	movs	r6, #20
 8016060:	f8c0 e014 	str.w	lr, [r0, #20]
 8016064:	4366      	muls	r6, r4
 8016066:	eb02 0806 	add.w	r8, r2, r6
 801606a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801606e:	f115 040f 	adds.w	r4, r5, #15
 8016072:	f100 809f 	bmi.w	80161b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8016076:	1124      	asrs	r4, r4, #4
 8016078:	eba4 040e 	sub.w	r4, r4, lr
 801607c:	6184      	str	r4, [r0, #24]
 801607e:	2c00      	cmp	r4, #0
 8016080:	f000 808a 	beq.w	8016198 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8016084:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8016088:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801608c:	5995      	ldr	r5, [r2, r6]
 801608e:	eba4 0809 	sub.w	r8, r4, r9
 8016092:	59d4      	ldr	r4, [r2, r7]
 8016094:	eba5 0a04 	sub.w	sl, r5, r4
 8016098:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801609c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80160a0:	fb0e fe05 	mul.w	lr, lr, r5
 80160a4:	fb0a ee19 	mls	lr, sl, r9, lr
 80160a8:	fb08 e404 	mla	r4, r8, r4, lr
 80160ac:	3c01      	subs	r4, #1
 80160ae:	19a4      	adds	r4, r4, r6
 80160b0:	f100 808c 	bmi.w	80161cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80160b4:	fb94 fef6 	sdiv	lr, r4, r6
 80160b8:	fb06 441e 	mls	r4, r6, lr, r4
 80160bc:	f8c0 e000 	str.w	lr, [r0]
 80160c0:	6104      	str	r4, [r0, #16]
 80160c2:	2d00      	cmp	r5, #0
 80160c4:	f2c0 8095 	blt.w	80161f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80160c8:	fb95 f4f6 	sdiv	r4, r5, r6
 80160cc:	fb06 5514 	mls	r5, r6, r4, r5
 80160d0:	6044      	str	r4, [r0, #4]
 80160d2:	6085      	str	r5, [r0, #8]
 80160d4:	60c6      	str	r6, [r0, #12]
 80160d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80160da:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80160de:	6945      	ldr	r5, [r0, #20]
 80160e0:	59d2      	ldr	r2, [r2, r7]
 80160e2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80160e6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8016214 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80160ea:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80160ee:	ee07 4a10 	vmov	s14, r4
 80160f2:	6804      	ldr	r4, [r0, #0]
 80160f4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80160f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160fc:	ee07 2a90 	vmov	s15, r2
 8016100:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801610c:	edd3 6a00 	vldr	s13, [r3]
 8016110:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016114:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8016118:	eee6 6a27 	vfma.f32	s13, s12, s15
 801611c:	edc0 6a07 	vstr	s13, [r0, #28]
 8016120:	edd0 6a01 	vldr	s13, [r0, #4]
 8016124:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8016128:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801612c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8016130:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016134:	ed80 6a08 	vstr	s12, [r0, #32]
 8016138:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801613a:	6242      	str	r2, [r0, #36]	@ 0x24
 801613c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8016140:	ed93 6a03 	vldr	s12, [r3, #12]
 8016144:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016148:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801614c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016150:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8016154:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8016158:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801615c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016160:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8016164:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016166:	6302      	str	r2, [r0, #48]	@ 0x30
 8016168:	ed93 6a06 	vldr	s12, [r3, #24]
 801616c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8016170:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016174:	eeb0 7a46 	vmov.f32	s14, s12
 8016178:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801617c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016180:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8016184:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8016188:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801618c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016190:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8016194:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8016196:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801619c:	2410      	movs	r4, #16
 801619e:	f1c5 0501 	rsb	r5, r5, #1
 80161a2:	fb9e fef4 	sdiv	lr, lr, r4
 80161a6:	f015 050f 	ands.w	r5, r5, #15
 80161aa:	bf18      	it	ne
 80161ac:	2501      	movne	r5, #1
 80161ae:	ebae 0e05 	sub.w	lr, lr, r5
 80161b2:	e753      	b.n	801605c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80161b4:	f04f 0910 	mov.w	r9, #16
 80161b8:	f1c5 0501 	rsb	r5, r5, #1
 80161bc:	fb94 f4f9 	sdiv	r4, r4, r9
 80161c0:	f015 050f 	ands.w	r5, r5, #15
 80161c4:	bf18      	it	ne
 80161c6:	2501      	movne	r5, #1
 80161c8:	1b64      	subs	r4, r4, r5
 80161ca:	e755      	b.n	8016078 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80161cc:	4264      	negs	r4, r4
 80161ce:	fb94 fef6 	sdiv	lr, r4, r6
 80161d2:	f1ce 0800 	rsb	r8, lr, #0
 80161d6:	fb06 441e 	mls	r4, r6, lr, r4
 80161da:	f8c0 8000 	str.w	r8, [r0]
 80161de:	6104      	str	r4, [r0, #16]
 80161e0:	2c00      	cmp	r4, #0
 80161e2:	f43f af6e 	beq.w	80160c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80161e6:	ea6f 0e0e 	mvn.w	lr, lr
 80161ea:	1b34      	subs	r4, r6, r4
 80161ec:	f8c0 e000 	str.w	lr, [r0]
 80161f0:	e766      	b.n	80160c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80161f2:	426d      	negs	r5, r5
 80161f4:	fb95 f4f6 	sdiv	r4, r5, r6
 80161f8:	f1c4 0e00 	rsb	lr, r4, #0
 80161fc:	fb06 5514 	mls	r5, r6, r4, r5
 8016200:	f8c0 e004 	str.w	lr, [r0, #4]
 8016204:	6085      	str	r5, [r0, #8]
 8016206:	2d00      	cmp	r5, #0
 8016208:	f43f af64 	beq.w	80160d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801620c:	43e4      	mvns	r4, r4
 801620e:	1b75      	subs	r5, r6, r5
 8016210:	6044      	str	r4, [r0, #4]
 8016212:	e75e      	b.n	80160d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8016214:	3d800000 	.word	0x3d800000

08016218 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016218:	4b01      	ldr	r3, [pc, #4]	@ (8016220 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801621a:	6018      	str	r0, [r3, #0]
 801621c:	4770      	bx	lr
 801621e:	bf00      	nop
 8016220:	2402543c 	.word	0x2402543c

08016224 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8016224:	4b06      	ldr	r3, [pc, #24]	@ (8016240 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8016226:	881a      	ldrh	r2, [r3, #0]
 8016228:	4282      	cmp	r2, r0
 801622a:	d807      	bhi.n	801623c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801622c:	4b05      	ldr	r3, [pc, #20]	@ (8016244 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801622e:	881b      	ldrh	r3, [r3, #0]
 8016230:	4413      	add	r3, r2
 8016232:	4298      	cmp	r0, r3
 8016234:	bfac      	ite	ge
 8016236:	2000      	movge	r0, #0
 8016238:	2001      	movlt	r0, #1
 801623a:	4770      	bx	lr
 801623c:	2000      	movs	r0, #0
 801623e:	4770      	bx	lr
 8016240:	2402545c 	.word	0x2402545c
 8016244:	24025460 	.word	0x24025460

08016248 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016248:	b508      	push	{r3, lr}
 801624a:	4601      	mov	r1, r0
 801624c:	f7ff ffea 	bl	8016224 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016250:	b118      	cbz	r0, 801625a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8016252:	4b02      	ldr	r3, [pc, #8]	@ (801625c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801625a:	bd08      	pop	{r3, pc}
 801625c:	24025440 	.word	0x24025440

08016260 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8016260:	b538      	push	{r3, r4, r5, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	f7ff ffde 	bl	8016224 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016268:	b1d8      	cbz	r0, 80162a2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801626a:	4b0f      	ldr	r3, [pc, #60]	@ (80162a8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801626c:	881b      	ldrh	r3, [r3, #0]
 801626e:	1ae4      	subs	r4, r4, r3
 8016270:	230e      	movs	r3, #14
 8016272:	4363      	muls	r3, r4
 8016274:	4c0d      	ldr	r4, [pc, #52]	@ (80162ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8016276:	6825      	ldr	r5, [r4, #0]
 8016278:	18ea      	adds	r2, r5, r3
 801627a:	7b12      	ldrb	r2, [r2, #12]
 801627c:	f012 0220 	ands.w	r2, r2, #32
 8016280:	d010      	beq.n	80162a4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8016282:	f9b1 2000 	ldrsh.w	r2, [r1]
 8016286:	52ea      	strh	r2, [r5, r3]
 8016288:	6822      	ldr	r2, [r4, #0]
 801628a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801628e:	441a      	add	r2, r3
 8016290:	8055      	strh	r5, [r2, #2]
 8016292:	6822      	ldr	r2, [r4, #0]
 8016294:	4413      	add	r3, r2
 8016296:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801629a:	809a      	strh	r2, [r3, #4]
 801629c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80162a0:	80da      	strh	r2, [r3, #6]
 80162a2:	bd38      	pop	{r3, r4, r5, pc}
 80162a4:	4610      	mov	r0, r2
 80162a6:	e7fc      	b.n	80162a2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80162a8:	2402545c 	.word	0x2402545c
 80162ac:	24025444 	.word	0x24025444

080162b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80162b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80162b4:	4606      	mov	r6, r0
 80162b6:	460c      	mov	r4, r1
 80162b8:	f7ff ffb4 	bl	8016224 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80162bc:	b918      	cbnz	r0, 80162c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80162be:	2000      	movs	r0, #0
 80162c0:	b002      	add	sp, #8
 80162c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162c6:	4608      	mov	r0, r1
 80162c8:	f7f7 fcf7 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 80162cc:	2800      	cmp	r0, #0
 80162ce:	d1f6      	bne.n	80162be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80162d0:	4b3f      	ldr	r3, [pc, #252]	@ (80163d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80162d2:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80163d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80162d6:	881d      	ldrh	r5, [r3, #0]
 80162d8:	f8d9 a000 	ldr.w	sl, [r9]
 80162dc:	46c8      	mov	r8, r9
 80162de:	1b73      	subs	r3, r6, r5
 80162e0:	250e      	movs	r5, #14
 80162e2:	435d      	muls	r5, r3
 80162e4:	eb0a 0705 	add.w	r7, sl, r5
 80162e8:	7b3b      	ldrb	r3, [r7, #12]
 80162ea:	f013 0f20 	tst.w	r3, #32
 80162ee:	d0e6      	beq.n	80162be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80162f0:	4621      	mov	r1, r4
 80162f2:	4638      	mov	r0, r7
 80162f4:	f7fc fe42 	bl	8012f7c <_ZNK8touchgfx4Rect8includesERKS0_>
 80162f8:	2800      	cmp	r0, #0
 80162fa:	d1e1      	bne.n	80162c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80162fc:	4639      	mov	r1, r7
 80162fe:	4620      	mov	r0, r4
 8016300:	f7fc fe3c 	bl	8012f7c <_ZNK8touchgfx4Rect8includesERKS0_>
 8016304:	b108      	cbz	r0, 801630a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8016306:	4621      	mov	r1, r4
 8016308:	e020      	b.n	801634c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801630a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801630e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8016312:	429a      	cmp	r2, r3
 8016314:	d11e      	bne.n	8016354 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016316:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801631a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801631e:	429a      	cmp	r2, r3
 8016320:	d118      	bne.n	8016354 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016322:	6820      	ldr	r0, [r4, #0]
 8016324:	466b      	mov	r3, sp
 8016326:	6861      	ldr	r1, [r4, #4]
 8016328:	c303      	stmia	r3!, {r0, r1}
 801632a:	4639      	mov	r1, r7
 801632c:	4668      	mov	r0, sp
 801632e:	f7fc fe4b 	bl	8012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016332:	f8d9 3000 	ldr.w	r3, [r9]
 8016336:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801633a:	442b      	add	r3, r5
 801633c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016340:	4413      	add	r3, r2
 8016342:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8016346:	4293      	cmp	r3, r2
 8016348:	dc04      	bgt.n	8016354 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801634a:	4669      	mov	r1, sp
 801634c:	4630      	mov	r0, r6
 801634e:	f7ff ff87 	bl	8016260 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8016352:	e7b5      	b.n	80162c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016354:	f8d8 3000 	ldr.w	r3, [r8]
 8016358:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801635c:	442b      	add	r3, r5
 801635e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016362:	4291      	cmp	r1, r2
 8016364:	d119      	bne.n	801639a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016366:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801636a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801636e:	4291      	cmp	r1, r2
 8016370:	d113      	bne.n	801639a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016372:	6820      	ldr	r0, [r4, #0]
 8016374:	466a      	mov	r2, sp
 8016376:	6861      	ldr	r1, [r4, #4]
 8016378:	c203      	stmia	r2!, {r0, r1}
 801637a:	4619      	mov	r1, r3
 801637c:	4668      	mov	r0, sp
 801637e:	f7fc fe23 	bl	8012fc8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016382:	f8d8 3000 	ldr.w	r3, [r8]
 8016386:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801638a:	442b      	add	r3, r5
 801638c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016390:	4413      	add	r3, r2
 8016392:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8016396:	4293      	cmp	r3, r2
 8016398:	ddd7      	ble.n	801634a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801639a:	4620      	mov	r0, r4
 801639c:	f7f7 fc8d 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 80163a0:	b990      	cbnz	r0, 80163c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80163a2:	88a7      	ldrh	r7, [r4, #4]
 80163a4:	88e3      	ldrh	r3, [r4, #6]
 80163a6:	fb17 f703 	smulbb	r7, r7, r3
 80163aa:	f8d8 3000 	ldr.w	r3, [r8]
 80163ae:	441d      	add	r5, r3
 80163b0:	4628      	mov	r0, r5
 80163b2:	f7f7 fc82 	bl	800dcba <_ZNK8touchgfx4Rect7isEmptyEv>
 80163b6:	b948      	cbnz	r0, 80163cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80163b8:	88ab      	ldrh	r3, [r5, #4]
 80163ba:	88ea      	ldrh	r2, [r5, #6]
 80163bc:	fb13 f302 	smulbb	r3, r3, r2
 80163c0:	42bb      	cmp	r3, r7
 80163c2:	f6bf af7c 	bge.w	80162be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80163c6:	e79e      	b.n	8016306 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80163c8:	2700      	movs	r7, #0
 80163ca:	e7ee      	b.n	80163aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80163cc:	2300      	movs	r3, #0
 80163ce:	e7f7      	b.n	80163c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80163d0:	2402545c 	.word	0x2402545c
 80163d4:	24025444 	.word	0x24025444

080163d8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80163d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163da:	4c24      	ldr	r4, [pc, #144]	@ (801646c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80163dc:	6823      	ldr	r3, [r4, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d042      	beq.n	8016468 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80163e2:	4a23      	ldr	r2, [pc, #140]	@ (8016470 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80163e4:	4d23      	ldr	r5, [pc, #140]	@ (8016474 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80163e6:	8811      	ldrh	r1, [r2, #0]
 80163e8:	f8b5 c000 	ldrh.w	ip, [r5]
 80163ec:	4822      	ldr	r0, [pc, #136]	@ (8016478 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80163ee:	4461      	add	r1, ip
 80163f0:	1c4a      	adds	r2, r1, #1
 80163f2:	008f      	lsls	r7, r1, #2
 80163f4:	f022 0201 	bic.w	r2, r2, #1
 80163f8:	19de      	adds	r6, r3, r7
 80163fa:	0412      	lsls	r2, r2, #16
 80163fc:	6006      	str	r6, [r0, #0]
 80163fe:	4e1f      	ldr	r6, [pc, #124]	@ (801647c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8016400:	0c12      	lsrs	r2, r2, #16
 8016402:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016406:	19da      	adds	r2, r3, r7
 8016408:	6032      	str	r2, [r6, #0]
 801640a:	220e      	movs	r2, #14
 801640c:	fb02 f20c 	mul.w	r2, r2, ip
 8016410:	3203      	adds	r2, #3
 8016412:	f022 0203 	bic.w	r2, r2, #3
 8016416:	443a      	add	r2, r7
 8016418:	4f19      	ldr	r7, [pc, #100]	@ (8016480 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801641a:	4413      	add	r3, r2
 801641c:	603b      	str	r3, [r7, #0]
 801641e:	2300      	movs	r3, #0
 8016420:	4f18      	ldr	r7, [pc, #96]	@ (8016484 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8016422:	469c      	mov	ip, r3
 8016424:	803b      	strh	r3, [r7, #0]
 8016426:	4f18      	ldr	r7, [pc, #96]	@ (8016488 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8016428:	683f      	ldr	r7, [r7, #0]
 801642a:	1aba      	subs	r2, r7, r2
 801642c:	4f17      	ldr	r7, [pc, #92]	@ (801648c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801642e:	603a      	str	r2, [r7, #0]
 8016430:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8016434:	4a16      	ldr	r2, [pc, #88]	@ (8016490 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8016436:	8013      	strh	r3, [r2, #0]
 8016438:	428b      	cmp	r3, r1
 801643a:	d10d      	bne.n	8016458 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801643c:	882d      	ldrh	r5, [r5, #0]
 801643e:	2300      	movs	r3, #0
 8016440:	6830      	ldr	r0, [r6, #0]
 8016442:	240e      	movs	r4, #14
 8016444:	429d      	cmp	r5, r3
 8016446:	d90f      	bls.n	8016468 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016448:	fb04 0203 	mla	r2, r4, r3, r0
 801644c:	3301      	adds	r3, #1
 801644e:	7b11      	ldrb	r1, [r2, #12]
 8016450:	f36f 1145 	bfc	r1, #5, #1
 8016454:	7311      	strb	r1, [r2, #12]
 8016456:	e7f5      	b.n	8016444 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8016458:	6822      	ldr	r2, [r4, #0]
 801645a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801645e:	6802      	ldr	r2, [r0, #0]
 8016460:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016464:	3301      	adds	r3, #1
 8016466:	e7e7      	b.n	8016438 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8016468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646a:	bf00      	nop
 801646c:	24025440 	.word	0x24025440
 8016470:	2402545c 	.word	0x2402545c
 8016474:	24025460 	.word	0x24025460
 8016478:	24025454 	.word	0x24025454
 801647c:	24025444 	.word	0x24025444
 8016480:	2402544c 	.word	0x2402544c
 8016484:	2402545e 	.word	0x2402545e
 8016488:	24025448 	.word	0x24025448
 801648c:	24025458 	.word	0x24025458
 8016490:	24025450 	.word	0x24025450

08016494 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8016494:	4b06      	ldr	r3, [pc, #24]	@ (80164b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	b943      	cbnz	r3, 80164ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801649a:	b139      	cbz	r1, 80164ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801649c:	4b05      	ldr	r3, [pc, #20]	@ (80164b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801649e:	801a      	strh	r2, [r3, #0]
 80164a0:	4b05      	ldr	r3, [pc, #20]	@ (80164b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80164a2:	6019      	str	r1, [r3, #0]
 80164a4:	4b05      	ldr	r3, [pc, #20]	@ (80164bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80164a6:	6018      	str	r0, [r3, #0]
 80164a8:	f7ff bf96 	b.w	80163d8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	2402544c 	.word	0x2402544c
 80164b4:	24025460 	.word	0x24025460
 80164b8:	24025448 	.word	0x24025448
 80164bc:	24025440 	.word	0x24025440

080164c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80164c0:	b470      	push	{r4, r5, r6}
 80164c2:	4c07      	ldr	r4, [pc, #28]	@ (80164e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80164c4:	4605      	mov	r5, r0
 80164c6:	4610      	mov	r0, r2
 80164c8:	9a03      	ldr	r2, [sp, #12]
 80164ca:	6826      	ldr	r6, [r4, #0]
 80164cc:	b936      	cbnz	r6, 80164dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80164ce:	6025      	str	r5, [r4, #0]
 80164d0:	4c04      	ldr	r4, [pc, #16]	@ (80164e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80164d2:	8021      	strh	r1, [r4, #0]
 80164d4:	4619      	mov	r1, r3
 80164d6:	bc70      	pop	{r4, r5, r6}
 80164d8:	f7ff bfdc 	b.w	8016494 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80164dc:	bc70      	pop	{r4, r5, r6}
 80164de:	4770      	bx	lr
 80164e0:	24025464 	.word	0x24025464
 80164e4:	2402545c 	.word	0x2402545c

080164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80164e8:	4a12      	ldr	r2, [pc, #72]	@ (8016534 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80164ea:	8803      	ldrh	r3, [r0, #0]
 80164ec:	8812      	ldrh	r2, [r2, #0]
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d207      	bcs.n	8016502 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80164f2:	4a11      	ldr	r2, [pc, #68]	@ (8016538 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80164f4:	2114      	movs	r1, #20
 80164f6:	6812      	ldr	r2, [r2, #0]
 80164f8:	fb01 2303 	mla	r3, r1, r3, r2
 80164fc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8016500:	4770      	bx	lr
 8016502:	490e      	ldr	r1, [pc, #56]	@ (801653c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8016504:	8809      	ldrh	r1, [r1, #0]
 8016506:	4411      	add	r1, r2
 8016508:	428b      	cmp	r3, r1
 801650a:	da04      	bge.n	8016516 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801650c:	1a9b      	subs	r3, r3, r2
 801650e:	4a0c      	ldr	r2, [pc, #48]	@ (8016540 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8016510:	210e      	movs	r1, #14
 8016512:	6812      	ldr	r2, [r2, #0]
 8016514:	e7f0      	b.n	80164f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8016516:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801651a:	4293      	cmp	r3, r2
 801651c:	d108      	bne.n	8016530 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801651e:	4b09      	ldr	r3, [pc, #36]	@ (8016544 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8016520:	781b      	ldrb	r3, [r3, #0]
 8016522:	b91b      	cbnz	r3, 801652c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8016524:	4b08      	ldr	r3, [pc, #32]	@ (8016548 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8016526:	f9b3 0000 	ldrsh.w	r0, [r3]
 801652a:	4770      	bx	lr
 801652c:	4b07      	ldr	r3, [pc, #28]	@ (801654c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801652e:	e7fa      	b.n	8016526 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8016530:	2000      	movs	r0, #0
 8016532:	4770      	bx	lr
 8016534:	2402545c 	.word	0x2402545c
 8016538:	24025464 	.word	0x24025464
 801653c:	24025460 	.word	0x24025460
 8016540:	24025444 	.word	0x24025444
 8016544:	240253cc 	.word	0x240253cc
 8016548:	240253ce 	.word	0x240253ce
 801654c:	240253d0 	.word	0x240253d0

08016550 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8016550:	4a12      	ldr	r2, [pc, #72]	@ (801659c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8016552:	8803      	ldrh	r3, [r0, #0]
 8016554:	8812      	ldrh	r2, [r2, #0]
 8016556:	4293      	cmp	r3, r2
 8016558:	d207      	bcs.n	801656a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801655a:	4a11      	ldr	r2, [pc, #68]	@ (80165a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801655c:	2114      	movs	r1, #20
 801655e:	6812      	ldr	r2, [r2, #0]
 8016560:	fb01 2303 	mla	r3, r1, r3, r2
 8016564:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8016568:	4770      	bx	lr
 801656a:	490e      	ldr	r1, [pc, #56]	@ (80165a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801656c:	8809      	ldrh	r1, [r1, #0]
 801656e:	4411      	add	r1, r2
 8016570:	428b      	cmp	r3, r1
 8016572:	da04      	bge.n	801657e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8016574:	1a9b      	subs	r3, r3, r2
 8016576:	4a0c      	ldr	r2, [pc, #48]	@ (80165a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8016578:	210e      	movs	r1, #14
 801657a:	6812      	ldr	r2, [r2, #0]
 801657c:	e7f0      	b.n	8016560 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801657e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016582:	4293      	cmp	r3, r2
 8016584:	d108      	bne.n	8016598 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8016586:	4b09      	ldr	r3, [pc, #36]	@ (80165ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	b91b      	cbnz	r3, 8016594 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801658c:	4b08      	ldr	r3, [pc, #32]	@ (80165b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801658e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016592:	4770      	bx	lr
 8016594:	4b07      	ldr	r3, [pc, #28]	@ (80165b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8016596:	e7fa      	b.n	801658e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8016598:	2000      	movs	r0, #0
 801659a:	4770      	bx	lr
 801659c:	2402545c 	.word	0x2402545c
 80165a0:	24025464 	.word	0x24025464
 80165a4:	24025460 	.word	0x24025460
 80165a8:	24025444 	.word	0x24025444
 80165ac:	240253cc 	.word	0x240253cc
 80165b0:	240253d0 	.word	0x240253d0
 80165b4:	240253ce 	.word	0x240253ce

080165b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80165b8:	4a22      	ldr	r2, [pc, #136]	@ (8016644 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80165ba:	b530      	push	{r4, r5, lr}
 80165bc:	880b      	ldrh	r3, [r1, #0]
 80165be:	8812      	ldrh	r2, [r2, #0]
 80165c0:	4293      	cmp	r3, r2
 80165c2:	d213      	bcs.n	80165ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80165c4:	4a20      	ldr	r2, [pc, #128]	@ (8016648 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80165c6:	2114      	movs	r1, #20
 80165c8:	6812      	ldr	r2, [r2, #0]
 80165ca:	fb01 2303 	mla	r3, r1, r3, r2
 80165ce:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80165d2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80165d6:	8a1a      	ldrh	r2, [r3, #16]
 80165d8:	8a5b      	ldrh	r3, [r3, #18]
 80165da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80165de:	8004      	strh	r4, [r0, #0]
 80165e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165e4:	8041      	strh	r1, [r0, #2]
 80165e6:	8082      	strh	r2, [r0, #4]
 80165e8:	80c3      	strh	r3, [r0, #6]
 80165ea:	e024      	b.n	8016636 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80165ec:	4917      	ldr	r1, [pc, #92]	@ (801664c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80165ee:	8809      	ldrh	r1, [r1, #0]
 80165f0:	4411      	add	r1, r2
 80165f2:	428b      	cmp	r3, r1
 80165f4:	da10      	bge.n	8016618 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80165f6:	1a9b      	subs	r3, r3, r2
 80165f8:	220e      	movs	r2, #14
 80165fa:	4353      	muls	r3, r2
 80165fc:	4a14      	ldr	r2, [pc, #80]	@ (8016650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80165fe:	6811      	ldr	r1, [r2, #0]
 8016600:	18ca      	adds	r2, r1, r3
 8016602:	5ecd      	ldrsh	r5, [r1, r3]
 8016604:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8016608:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801660c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8016610:	8005      	strh	r5, [r0, #0]
 8016612:	8044      	strh	r4, [r0, #2]
 8016614:	8081      	strh	r1, [r0, #4]
 8016616:	e7e7      	b.n	80165e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8016618:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801661c:	4293      	cmp	r3, r2
 801661e:	d10b      	bne.n	8016638 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8016620:	4b0c      	ldr	r3, [pc, #48]	@ (8016654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8016622:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016626:	4b0c      	ldr	r3, [pc, #48]	@ (8016658 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8016628:	8081      	strh	r1, [r0, #4]
 801662a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801662e:	2300      	movs	r3, #0
 8016630:	80c2      	strh	r2, [r0, #6]
 8016632:	8003      	strh	r3, [r0, #0]
 8016634:	8043      	strh	r3, [r0, #2]
 8016636:	bd30      	pop	{r4, r5, pc}
 8016638:	2300      	movs	r3, #0
 801663a:	8003      	strh	r3, [r0, #0]
 801663c:	8043      	strh	r3, [r0, #2]
 801663e:	8083      	strh	r3, [r0, #4]
 8016640:	e7d2      	b.n	80165e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8016642:	bf00      	nop
 8016644:	2402545c 	.word	0x2402545c
 8016648:	24025464 	.word	0x24025464
 801664c:	24025460 	.word	0x24025460
 8016650:	24025444 	.word	0x24025444
 8016654:	240253c8 	.word	0x240253c8
 8016658:	240253ca 	.word	0x240253ca

0801665c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801665c:	4a17      	ldr	r2, [pc, #92]	@ (80166bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801665e:	8803      	ldrh	r3, [r0, #0]
 8016660:	8812      	ldrh	r2, [r2, #0]
 8016662:	4293      	cmp	r3, r2
 8016664:	d213      	bcs.n	801668e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8016666:	4a16      	ldr	r2, [pc, #88]	@ (80166c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8016668:	2114      	movs	r1, #20
 801666a:	6812      	ldr	r2, [r2, #0]
 801666c:	fb01 2303 	mla	r3, r1, r3, r2
 8016670:	8a1a      	ldrh	r2, [r3, #16]
 8016672:	8919      	ldrh	r1, [r3, #8]
 8016674:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016678:	428a      	cmp	r2, r1
 801667a:	db1d      	blt.n	80166b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801667c:	8a58      	ldrh	r0, [r3, #18]
 801667e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016682:	895b      	ldrh	r3, [r3, #10]
 8016684:	4298      	cmp	r0, r3
 8016686:	bfac      	ite	ge
 8016688:	2000      	movge	r0, #0
 801668a:	2001      	movlt	r0, #1
 801668c:	4770      	bx	lr
 801668e:	490d      	ldr	r1, [pc, #52]	@ (80166c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8016690:	8809      	ldrh	r1, [r1, #0]
 8016692:	4411      	add	r1, r2
 8016694:	428b      	cmp	r3, r1
 8016696:	da0d      	bge.n	80166b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8016698:	1a9b      	subs	r3, r3, r2
 801669a:	4a0b      	ldr	r2, [pc, #44]	@ (80166c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801669c:	210e      	movs	r1, #14
 801669e:	6812      	ldr	r2, [r2, #0]
 80166a0:	fb01 2303 	mla	r3, r1, r3, r2
 80166a4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80166a8:	891a      	ldrh	r2, [r3, #8]
 80166aa:	4291      	cmp	r1, r2
 80166ac:	db04      	blt.n	80166b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80166ae:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80166b2:	e7e6      	b.n	8016682 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80166b4:	2000      	movs	r0, #0
 80166b6:	4770      	bx	lr
 80166b8:	2001      	movs	r0, #1
 80166ba:	4770      	bx	lr
 80166bc:	2402545c 	.word	0x2402545c
 80166c0:	24025464 	.word	0x24025464
 80166c4:	24025460 	.word	0x24025460
 80166c8:	24025444 	.word	0x24025444

080166cc <_ZNK8touchgfx6Bitmap7getDataEv>:
 80166cc:	4a12      	ldr	r2, [pc, #72]	@ (8016718 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80166ce:	8803      	ldrh	r3, [r0, #0]
 80166d0:	8811      	ldrh	r1, [r2, #0]
 80166d2:	428b      	cmp	r3, r1
 80166d4:	d20b      	bcs.n	80166ee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80166d6:	4a11      	ldr	r2, [pc, #68]	@ (801671c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80166d8:	6812      	ldr	r2, [r2, #0]
 80166da:	b112      	cbz	r2, 80166e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80166dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80166e0:	b9c0      	cbnz	r0, 8016714 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80166e2:	4a0f      	ldr	r2, [pc, #60]	@ (8016720 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80166e4:	6811      	ldr	r1, [r2, #0]
 80166e6:	2214      	movs	r2, #20
 80166e8:	4353      	muls	r3, r2
 80166ea:	58c8      	ldr	r0, [r1, r3]
 80166ec:	4770      	bx	lr
 80166ee:	4a0d      	ldr	r2, [pc, #52]	@ (8016724 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80166f0:	8812      	ldrh	r2, [r2, #0]
 80166f2:	440a      	add	r2, r1
 80166f4:	4293      	cmp	r3, r2
 80166f6:	da04      	bge.n	8016702 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80166f8:	4a08      	ldr	r2, [pc, #32]	@ (801671c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80166fa:	6812      	ldr	r2, [r2, #0]
 80166fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016700:	4770      	bx	lr
 8016702:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016706:	4293      	cmp	r3, r2
 8016708:	d103      	bne.n	8016712 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801670a:	4b07      	ldr	r3, [pc, #28]	@ (8016728 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8016710:	4770      	bx	lr
 8016712:	2000      	movs	r0, #0
 8016714:	4770      	bx	lr
 8016716:	bf00      	nop
 8016718:	2402545c 	.word	0x2402545c
 801671c:	24025440 	.word	0x24025440
 8016720:	24025464 	.word	0x24025464
 8016724:	24025460 	.word	0x24025460
 8016728:	240253d4 	.word	0x240253d4

0801672c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801672c:	4b24      	ldr	r3, [pc, #144]	@ (80167c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801672e:	8802      	ldrh	r2, [r0, #0]
 8016730:	8818      	ldrh	r0, [r3, #0]
 8016732:	4282      	cmp	r2, r0
 8016734:	d221      	bcs.n	801677a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8016736:	4b23      	ldr	r3, [pc, #140]	@ (80167c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016738:	6819      	ldr	r1, [r3, #0]
 801673a:	2314      	movs	r3, #20
 801673c:	fb03 1302 	mla	r3, r3, r2, r1
 8016740:	6858      	ldr	r0, [r3, #4]
 8016742:	2800      	cmp	r0, #0
 8016744:	d03a      	beq.n	80167bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016746:	4920      	ldr	r1, [pc, #128]	@ (80167c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016748:	6809      	ldr	r1, [r1, #0]
 801674a:	2900      	cmp	r1, #0
 801674c:	d036      	beq.n	80167bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801674e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016752:	2900      	cmp	r1, #0
 8016754:	d032      	beq.n	80167bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016756:	891a      	ldrh	r2, [r3, #8]
 8016758:	8958      	ldrh	r0, [r3, #10]
 801675a:	4350      	muls	r0, r2
 801675c:	7c5a      	ldrb	r2, [r3, #17]
 801675e:	7cdb      	ldrb	r3, [r3, #19]
 8016760:	0952      	lsrs	r2, r2, #5
 8016762:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8016766:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801676a:	2b0b      	cmp	r3, #11
 801676c:	bf18      	it	ne
 801676e:	0040      	lslne	r0, r0, #1
 8016770:	3003      	adds	r0, #3
 8016772:	f020 0003 	bic.w	r0, r0, #3
 8016776:	4408      	add	r0, r1
 8016778:	4770      	bx	lr
 801677a:	4b14      	ldr	r3, [pc, #80]	@ (80167cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	4403      	add	r3, r0
 8016780:	429a      	cmp	r2, r3
 8016782:	da1a      	bge.n	80167ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016784:	4b12      	ldr	r3, [pc, #72]	@ (80167d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8016786:	1a10      	subs	r0, r2, r0
 8016788:	210e      	movs	r1, #14
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	fb01 3000 	mla	r0, r1, r0, r3
 8016790:	7b03      	ldrb	r3, [r0, #12]
 8016792:	f003 031f 	and.w	r3, r3, #31
 8016796:	2b0b      	cmp	r3, #11
 8016798:	d10b      	bne.n	80167b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801679a:	8903      	ldrh	r3, [r0, #8]
 801679c:	8940      	ldrh	r0, [r0, #10]
 801679e:	4358      	muls	r0, r3
 80167a0:	4b09      	ldr	r3, [pc, #36]	@ (80167c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80167a2:	3003      	adds	r0, #3
 80167a4:	6819      	ldr	r1, [r3, #0]
 80167a6:	f020 0303 	bic.w	r3, r0, #3
 80167aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80167ae:	4418      	add	r0, r3
 80167b0:	4770      	bx	lr
 80167b2:	2b0d      	cmp	r3, #13
 80167b4:	d101      	bne.n	80167ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80167b6:	300d      	adds	r0, #13
 80167b8:	4770      	bx	lr
 80167ba:	2000      	movs	r0, #0
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	2402545c 	.word	0x2402545c
 80167c4:	24025464 	.word	0x24025464
 80167c8:	24025440 	.word	0x24025440
 80167cc:	24025460 	.word	0x24025460
 80167d0:	24025444 	.word	0x24025444

080167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80167d4:	4b1f      	ldr	r3, [pc, #124]	@ (8016854 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80167d6:	b510      	push	{r4, lr}
 80167d8:	8802      	ldrh	r2, [r0, #0]
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d21a      	bcs.n	8016816 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80167e0:	4b1d      	ldr	r3, [pc, #116]	@ (8016858 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80167e2:	2114      	movs	r1, #20
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	fb01 3102 	mla	r1, r1, r2, r3
 80167ea:	7c4b      	ldrb	r3, [r1, #17]
 80167ec:	0958      	lsrs	r0, r3, #5
 80167ee:	7ccb      	ldrb	r3, [r1, #19]
 80167f0:	491a      	ldr	r1, [pc, #104]	@ (801685c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80167f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80167f6:	6809      	ldr	r1, [r1, #0]
 80167f8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80167fc:	b2d8      	uxtb	r0, r3
 80167fe:	b149      	cbz	r1, 8016814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016800:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016804:	b132      	cbz	r2, 8016814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016806:	2b0e      	cmp	r3, #14
 8016808:	d021      	beq.n	801684e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801680a:	280f      	cmp	r0, #15
 801680c:	d01d      	beq.n	801684a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801680e:	2810      	cmp	r0, #16
 8016810:	bf08      	it	eq
 8016812:	2002      	moveq	r0, #2
 8016814:	bd10      	pop	{r4, pc}
 8016816:	4912      	ldr	r1, [pc, #72]	@ (8016860 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8016818:	8809      	ldrh	r1, [r1, #0]
 801681a:	4419      	add	r1, r3
 801681c:	428a      	cmp	r2, r1
 801681e:	da09      	bge.n	8016834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	4a10      	ldr	r2, [pc, #64]	@ (8016864 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8016824:	210e      	movs	r1, #14
 8016826:	6812      	ldr	r2, [r2, #0]
 8016828:	fb01 2303 	mla	r3, r1, r3, r2
 801682c:	7b18      	ldrb	r0, [r3, #12]
 801682e:	f000 001f 	and.w	r0, r0, #31
 8016832:	e7ef      	b.n	8016814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016834:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8016838:	429a      	cmp	r2, r3
 801683a:	d108      	bne.n	801684e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801683c:	f7ed f9ca 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016840:	6803      	ldr	r3, [r0, #0]
 8016842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016848:	4718      	bx	r3
 801684a:	2001      	movs	r0, #1
 801684c:	e7e2      	b.n	8016814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801684e:	2000      	movs	r0, #0
 8016850:	e7e0      	b.n	8016814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016852:	bf00      	nop
 8016854:	2402545c 	.word	0x2402545c
 8016858:	24025464 	.word	0x24025464
 801685c:	24025440 	.word	0x24025440
 8016860:	24025460 	.word	0x24025460
 8016864:	24025444 	.word	0x24025444

08016868 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8016868:	2018      	movs	r0, #24
 801686a:	4770      	bx	lr

0801686c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801686c:	2001      	movs	r0, #1
 801686e:	4770      	bx	lr

08016870 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8016870:	4b02      	ldr	r3, [pc, #8]	@ (801687c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8016872:	8818      	ldrh	r0, [r3, #0]
 8016874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016878:	b280      	uxth	r0, r0
 801687a:	4770      	bx	lr
 801687c:	240253ce 	.word	0x240253ce

08016880 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016880:	2bff      	cmp	r3, #255	@ 0xff
 8016882:	d04c      	beq.n	801691e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016884:	2a2c      	cmp	r2, #44	@ 0x2c
 8016886:	d030      	beq.n	80168ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8016888:	d80f      	bhi.n	80168aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801688a:	2a08      	cmp	r2, #8
 801688c:	d043      	beq.n	8016916 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801688e:	d805      	bhi.n	801689c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8016890:	2a04      	cmp	r2, #4
 8016892:	d03e      	beq.n	8016912 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8016894:	2a05      	cmp	r2, #5
 8016896:	d03a      	beq.n	801690e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8016898:	2300      	movs	r3, #0
 801689a:	e024      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801689c:	2a0a      	cmp	r2, #10
 801689e:	d03a      	beq.n	8016916 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80168a0:	d301      	bcc.n	80168a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80168a2:	2a0b      	cmp	r2, #11
 80168a4:	d1f8      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80168a8:	e01d      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168aa:	2a30      	cmp	r2, #48	@ 0x30
 80168ac:	d035      	beq.n	801691a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80168ae:	d80a      	bhi.n	80168c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80168b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80168b2:	684b      	ldr	r3, [r1, #4]
 80168b4:	d023      	beq.n	80168fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80168b6:	d90d      	bls.n	80168d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80168b8:	781a      	ldrb	r2, [r3, #0]
 80168ba:	785b      	ldrb	r3, [r3, #1]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d1eb      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168c0:	b98a      	cbnz	r2, 80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80168c4:	e00f      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168c6:	2a32      	cmp	r2, #50	@ 0x32
 80168c8:	d027      	beq.n	801691a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80168ca:	d301      	bcc.n	80168d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80168cc:	2a33      	cmp	r2, #51	@ 0x33
 80168ce:	d1e3      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168d0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80168d2:	e008      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168d4:	781a      	ldrb	r2, [r3, #0]
 80168d6:	785b      	ldrb	r3, [r3, #1]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d1dd      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168dc:	2a00      	cmp	r2, #0
 80168de:	d0f0      	beq.n	80168c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80168e0:	2a01      	cmp	r2, #1
 80168e2:	d1d9      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168e4:	6943      	ldr	r3, [r0, #20]
 80168e6:	4618      	mov	r0, r3
 80168e8:	4770      	bx	lr
 80168ea:	684b      	ldr	r3, [r1, #4]
 80168ec:	781a      	ldrb	r2, [r3, #0]
 80168ee:	785b      	ldrb	r3, [r3, #1]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d1d1      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168f4:	b14a      	cbz	r2, 801690a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80168f6:	2a01      	cmp	r2, #1
 80168f8:	bf08      	it	eq
 80168fa:	68c3      	ldreq	r3, [r0, #12]
 80168fc:	e7f3      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168fe:	781a      	ldrb	r2, [r3, #0]
 8016900:	785b      	ldrb	r3, [r3, #1]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d1c8      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016906:	2a00      	cmp	r2, #0
 8016908:	d1ed      	bne.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801690a:	69c3      	ldr	r3, [r0, #28]
 801690c:	e7eb      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801690e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8016910:	e7e9      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016912:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016914:	e7e7      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016916:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8016918:	e7e5      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801691a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801691c:	e7e3      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801691e:	2a2c      	cmp	r2, #44	@ 0x2c
 8016920:	d030      	beq.n	8016984 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8016922:	d80f      	bhi.n	8016944 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8016924:	2a08      	cmp	r2, #8
 8016926:	d042      	beq.n	80169ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016928:	d805      	bhi.n	8016936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801692a:	2a04      	cmp	r2, #4
 801692c:	d03d      	beq.n	80169aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801692e:	2a05      	cmp	r2, #5
 8016930:	d1b2      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016932:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8016934:	e7d7      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016936:	2a0a      	cmp	r2, #10
 8016938:	d039      	beq.n	80169ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801693a:	d301      	bcc.n	8016940 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801693c:	2a0b      	cmp	r2, #11
 801693e:	d1ab      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016940:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8016942:	e7d0      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016944:	2a30      	cmp	r2, #48	@ 0x30
 8016946:	d034      	beq.n	80169b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016948:	d80b      	bhi.n	8016962 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801694a:	2a2e      	cmp	r2, #46	@ 0x2e
 801694c:	684b      	ldr	r3, [r1, #4]
 801694e:	d023      	beq.n	8016998 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016950:	d90e      	bls.n	8016970 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8016952:	781a      	ldrb	r2, [r3, #0]
 8016954:	785b      	ldrb	r3, [r3, #1]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d19e      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801695a:	2a00      	cmp	r2, #0
 801695c:	d1c3      	bne.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801695e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8016960:	e7c1      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016962:	2a32      	cmp	r2, #50	@ 0x32
 8016964:	d025      	beq.n	80169b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016966:	d301      	bcc.n	801696c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016968:	2a33      	cmp	r2, #51	@ 0x33
 801696a:	d195      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801696c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801696e:	e7ba      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016970:	781a      	ldrb	r2, [r3, #0]
 8016972:	785b      	ldrb	r3, [r3, #1]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d18f      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016978:	2a00      	cmp	r2, #0
 801697a:	d0f0      	beq.n	801695e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801697c:	2a01      	cmp	r2, #1
 801697e:	d18b      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016980:	6983      	ldr	r3, [r0, #24]
 8016982:	e7b0      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016984:	684b      	ldr	r3, [r1, #4]
 8016986:	781a      	ldrb	r2, [r3, #0]
 8016988:	785b      	ldrb	r3, [r3, #1]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d184      	bne.n	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801698e:	b152      	cbz	r2, 80169a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8016990:	2a01      	cmp	r2, #1
 8016992:	bf08      	it	eq
 8016994:	6903      	ldreq	r3, [r0, #16]
 8016996:	e7a6      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016998:	781a      	ldrb	r2, [r3, #0]
 801699a:	785b      	ldrb	r3, [r3, #1]
 801699c:	2b00      	cmp	r3, #0
 801699e:	f47f af7b 	bne.w	8016898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80169a2:	2a00      	cmp	r2, #0
 80169a4:	d19f      	bne.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80169a6:	6a03      	ldr	r3, [r0, #32]
 80169a8:	e79d      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80169aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80169ac:	e79b      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80169ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80169b0:	e799      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80169b2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80169b4:	e797      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080169b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80169b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ba:	b085      	sub	sp, #20
 80169bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80169be:	9203      	str	r2, [sp, #12]
 80169c0:	6870      	ldr	r0, [r6, #4]
 80169c2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80169c6:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80169ca:	9101      	str	r1, [sp, #4]
 80169cc:	fa1f f885 	uxth.w	r8, r5
 80169d0:	43ed      	mvns	r5, r5
 80169d2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80169d6:	b2ed      	uxtb	r5, r5
 80169d8:	fb00 2404 	mla	r4, r0, r4, r2
 80169dc:	6832      	ldr	r2, [r6, #0]
 80169de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80169e2:	4414      	add	r4, r2
 80169e4:	f8dc 2000 	ldr.w	r2, [ip]
 80169e8:	9202      	str	r2, [sp, #8]
 80169ea:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80169ee:	f102 0e04 	add.w	lr, r2, #4
 80169f2:	9a01      	ldr	r2, [sp, #4]
 80169f4:	2a00      	cmp	r2, #0
 80169f6:	dc03      	bgt.n	8016a00 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80169f8:	9a03      	ldr	r2, [sp, #12]
 80169fa:	2a00      	cmp	r2, #0
 80169fc:	f340 8116 	ble.w	8016c2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016a00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016a02:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016a06:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016a0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016a0c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016a10:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	dd0e      	ble.n	8016a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016a18:	1406      	asrs	r6, r0, #16
 8016a1a:	d405      	bmi.n	8016a28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a1c:	4556      	cmp	r6, sl
 8016a1e:	da03      	bge.n	8016a28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a20:	1416      	asrs	r6, r2, #16
 8016a22:	d401      	bmi.n	8016a28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a24:	454e      	cmp	r6, r9
 8016a26:	db07      	blt.n	8016a38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016a28:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016a2a:	3b01      	subs	r3, #1
 8016a2c:	3403      	adds	r4, #3
 8016a2e:	4430      	add	r0, r6
 8016a30:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016a32:	4432      	add	r2, r6
 8016a34:	e7ee      	b.n	8016a14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016a36:	d063      	beq.n	8016b00 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016a38:	1e5e      	subs	r6, r3, #1
 8016a3a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8016a3c:	fb07 0706 	mla	r7, r7, r6, r0
 8016a40:	143f      	asrs	r7, r7, #16
 8016a42:	d454      	bmi.n	8016aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a44:	4557      	cmp	r7, sl
 8016a46:	da52      	bge.n	8016aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a48:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8016a4a:	fb07 2606 	mla	r6, r7, r6, r2
 8016a4e:	1436      	asrs	r6, r6, #16
 8016a50:	d44d      	bmi.n	8016aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a52:	454e      	cmp	r6, r9
 8016a54:	da4b      	bge.n	8016aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a56:	1ce6      	adds	r6, r4, #3
 8016a58:	4699      	mov	r9, r3
 8016a5a:	f1b9 0f00 	cmp.w	r9, #0
 8016a5e:	f106 0603 	add.w	r6, r6, #3
 8016a62:	dd48      	ble.n	8016af6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8016a64:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016a68:	1417      	asrs	r7, r2, #16
 8016a6a:	9902      	ldr	r1, [sp, #8]
 8016a6c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016a70:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a74:	fb0b 1707 	mla	r7, fp, r7, r1
 8016a78:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016a7c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016a7e:	f817 700a 	ldrb.w	r7, [r7, sl]
 8016a82:	fb1b fb05 	smulbb	fp, fp, r5
 8016a86:	4408      	add	r0, r1
 8016a88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016a8a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016a8e:	440a      	add	r2, r1
 8016a90:	eb0e 0a07 	add.w	sl, lr, r7
 8016a94:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8016a98:	fb07 b708 	mla	r7, r7, r8, fp
 8016a9c:	b2bf      	uxth	r7, r7
 8016a9e:	f107 0b01 	add.w	fp, r7, #1
 8016aa2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016aa6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016aaa:	fb1b fb05 	smulbb	fp, fp, r5
 8016aae:	123f      	asrs	r7, r7, #8
 8016ab0:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016ab4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016ab8:	fb07 b708 	mla	r7, r7, r8, fp
 8016abc:	b2bf      	uxth	r7, r7
 8016abe:	f107 0b01 	add.w	fp, r7, #1
 8016ac2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016ac6:	123f      	asrs	r7, r7, #8
 8016ac8:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016acc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016ad0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016ad4:	fb1a fa05 	smulbb	sl, sl, r5
 8016ad8:	fb07 a708 	mla	r7, r7, r8, sl
 8016adc:	b2bf      	uxth	r7, r7
 8016ade:	f107 0a01 	add.w	sl, r7, #1
 8016ae2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016ae6:	123f      	asrs	r7, r7, #8
 8016ae8:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016aec:	e7b5      	b.n	8016a5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8016aee:	2700      	movs	r7, #0
 8016af0:	1bde      	subs	r6, r3, r7
 8016af2:	2e00      	cmp	r6, #0
 8016af4:	dc42      	bgt.n	8016b7c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8016af6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016afa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016afe:	441c      	add	r4, r3
 8016b00:	9b01      	ldr	r3, [sp, #4]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	f340 8092 	ble.w	8016c2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b16:	eef0 6a62 	vmov.f32	s13, s5
 8016b1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016b26:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8016b2a:	eef0 6a43 	vmov.f32	s13, s6
 8016b2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016b32:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8016b36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b4e:	ee12 2a90 	vmov	r2, s5
 8016b52:	eef0 2a47 	vmov.f32	s5, s14
 8016b56:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b5a:	ee13 2a10 	vmov	r2, s6
 8016b5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8016b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b62:	eeb0 3a67 	vmov.f32	s6, s15
 8016b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b6a:	9312      	str	r3, [sp, #72]	@ 0x48
 8016b6c:	9b01      	ldr	r3, [sp, #4]
 8016b6e:	9a03      	ldr	r2, [sp, #12]
 8016b70:	3b01      	subs	r3, #1
 8016b72:	9301      	str	r3, [sp, #4]
 8016b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b76:	bf08      	it	eq
 8016b78:	4613      	moveq	r3, r2
 8016b7a:	e73a      	b.n	80169f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016b7c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8016b80:	d44e      	bmi.n	8016c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016b82:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016b86:	4556      	cmp	r6, sl
 8016b88:	dd4a      	ble.n	8016c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016b8a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016b8e:	d447      	bmi.n	8016c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016b90:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8016b94:	4559      	cmp	r1, fp
 8016b96:	dd43      	ble.n	8016c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016b98:	fa0f f986 	sxth.w	r9, r6
 8016b9c:	9902      	ldr	r1, [sp, #8]
 8016b9e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016ba2:	fb0b 1909 	mla	r9, fp, r9, r1
 8016ba6:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016baa:	f819 900a 	ldrb.w	r9, [r9, sl]
 8016bae:	fb1b fb05 	smulbb	fp, fp, r5
 8016bb2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016bb6:	eb0e 0a09 	add.w	sl, lr, r9
 8016bba:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8016bbe:	fb09 b908 	mla	r9, r9, r8, fp
 8016bc2:	fa1f f989 	uxth.w	r9, r9
 8016bc6:	f109 0b01 	add.w	fp, r9, #1
 8016bca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016bce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bd2:	f804 9006 	strb.w	r9, [r4, r6]
 8016bd6:	4426      	add	r6, r4
 8016bd8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016bdc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016be0:	fb1b fb05 	smulbb	fp, fp, r5
 8016be4:	fb09 b908 	mla	r9, r9, r8, fp
 8016be8:	fa1f f989 	uxth.w	r9, r9
 8016bec:	f109 0b01 	add.w	fp, r9, #1
 8016bf0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016bf4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bf8:	f886 9001 	strb.w	r9, [r6, #1]
 8016bfc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016c00:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016c04:	fb1a fa05 	smulbb	sl, sl, r5
 8016c08:	fb09 a908 	mla	r9, r9, r8, sl
 8016c0c:	fa1f f989 	uxth.w	r9, r9
 8016c10:	f109 0a01 	add.w	sl, r9, #1
 8016c14:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016c18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c1c:	f886 9002 	strb.w	r9, [r6, #2]
 8016c20:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016c22:	3701      	adds	r7, #1
 8016c24:	4408      	add	r0, r1
 8016c26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016c28:	440a      	add	r2, r1
 8016c2a:	e761      	b.n	8016af0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016c2c:	b005      	add	sp, #20
 8016c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c36:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016c38:	4693      	mov	fp, r2
 8016c3a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016c3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016c40:	6868      	ldr	r0, [r5, #4]
 8016c42:	6877      	ldr	r7, [r6, #4]
 8016c44:	9100      	str	r1, [sp, #0]
 8016c46:	3704      	adds	r7, #4
 8016c48:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016c4c:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8016c50:	fb00 2404 	mla	r4, r0, r4, r2
 8016c54:	682a      	ldr	r2, [r5, #0]
 8016c56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016c5a:	4414      	add	r4, r2
 8016c5c:	6832      	ldr	r2, [r6, #0]
 8016c5e:	9201      	str	r2, [sp, #4]
 8016c60:	9a00      	ldr	r2, [sp, #0]
 8016c62:	2a00      	cmp	r2, #0
 8016c64:	dc03      	bgt.n	8016c6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016c66:	f1bb 0f00 	cmp.w	fp, #0
 8016c6a:	f340 80bc 	ble.w	8016de6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016c6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c70:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8016c74:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c7a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016c7e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	dd0c      	ble.n	8016ca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016c86:	1405      	asrs	r5, r0, #16
 8016c88:	d405      	bmi.n	8016c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016c8a:	4555      	cmp	r5, sl
 8016c8c:	da03      	bge.n	8016c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016c8e:	1415      	asrs	r5, r2, #16
 8016c90:	d401      	bmi.n	8016c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016c92:	454d      	cmp	r5, r9
 8016c94:	db05      	blt.n	8016ca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016c96:	4440      	add	r0, r8
 8016c98:	4472      	add	r2, lr
 8016c9a:	3b01      	subs	r3, #1
 8016c9c:	3403      	adds	r4, #3
 8016c9e:	e7f0      	b.n	8016c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016ca0:	d03f      	beq.n	8016d22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8016ca2:	1e5d      	subs	r5, r3, #1
 8016ca4:	fb08 0c05 	mla	ip, r8, r5, r0
 8016ca8:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8016cac:	d42e      	bmi.n	8016d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016cae:	45d4      	cmp	ip, sl
 8016cb0:	da2c      	bge.n	8016d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016cb2:	fb0e 2505 	mla	r5, lr, r5, r2
 8016cb6:	142d      	asrs	r5, r5, #16
 8016cb8:	d428      	bmi.n	8016d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016cba:	454d      	cmp	r5, r9
 8016cbc:	da26      	bge.n	8016d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016cbe:	1ce5      	adds	r5, r4, #3
 8016cc0:	469c      	mov	ip, r3
 8016cc2:	f1bc 0f00 	cmp.w	ip, #0
 8016cc6:	f105 0503 	add.w	r5, r5, #3
 8016cca:	dd25      	ble.n	8016d18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8016ccc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016cd0:	ea4f 4922 	mov.w	r9, r2, asr #16
 8016cd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016cd8:	4472      	add	r2, lr
 8016cda:	468a      	mov	sl, r1
 8016cdc:	9901      	ldr	r1, [sp, #4]
 8016cde:	fb0a 1909 	mla	r9, sl, r9, r1
 8016ce2:	1401      	asrs	r1, r0, #16
 8016ce4:	4440      	add	r0, r8
 8016ce6:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016cea:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016cee:	eb07 0a09 	add.w	sl, r7, r9
 8016cf2:	f817 9009 	ldrb.w	r9, [r7, r9]
 8016cf6:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016cfa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016cfe:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016d02:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016d06:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016d0a:	e7da      	b.n	8016cc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016d0c:	2500      	movs	r5, #0
 8016d0e:	eba3 0c05 	sub.w	ip, r3, r5
 8016d12:	f1bc 0f00 	cmp.w	ip, #0
 8016d16:	dc3b      	bgt.n	8016d90 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8016d18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d20:	441c      	add	r4, r3
 8016d22:	9b00      	ldr	r3, [sp, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	dd5e      	ble.n	8016de6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016d28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016d2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d32:	eeb0 6a62 	vmov.f32	s12, s5
 8016d36:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d42:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016d46:	eeb0 6a43 	vmov.f32	s12, s6
 8016d4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d4e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016d52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016d62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016d6a:	ee12 2a90 	vmov	r2, s5
 8016d6e:	eef0 2a47 	vmov.f32	s5, s14
 8016d72:	fb92 f8f3 	sdiv	r8, r2, r3
 8016d76:	ee13 2a10 	vmov	r2, s6
 8016d7a:	eeb0 3a67 	vmov.f32	s6, s15
 8016d7e:	fb92 fef3 	sdiv	lr, r2, r3
 8016d82:	9b00      	ldr	r3, [sp, #0]
 8016d84:	3b01      	subs	r3, #1
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016d8a:	bf08      	it	eq
 8016d8c:	465b      	moveq	r3, fp
 8016d8e:	e767      	b.n	8016c60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016d90:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016d94:	d423      	bmi.n	8016dde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016d96:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8016d9a:	45cc      	cmp	ip, r9
 8016d9c:	dd1f      	ble.n	8016dde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016d9e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016da2:	d41c      	bmi.n	8016dde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016da4:	68f1      	ldr	r1, [r6, #12]
 8016da6:	4551      	cmp	r1, sl
 8016da8:	dd19      	ble.n	8016dde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016daa:	fa0f fc8c 	sxth.w	ip, ip
 8016dae:	9901      	ldr	r1, [sp, #4]
 8016db0:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8016db4:	f81c c009 	ldrb.w	ip, [ip, r9]
 8016db8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016dbc:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8016dc0:	eb07 090c 	add.w	r9, r7, ip
 8016dc4:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016dc8:	f804 a00c 	strb.w	sl, [r4, ip]
 8016dcc:	44a4      	add	ip, r4
 8016dce:	f899 a001 	ldrb.w	sl, [r9, #1]
 8016dd2:	f88c a001 	strb.w	sl, [ip, #1]
 8016dd6:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016dda:	f88c 9002 	strb.w	r9, [ip, #2]
 8016dde:	4440      	add	r0, r8
 8016de0:	4472      	add	r2, lr
 8016de2:	3501      	adds	r5, #1
 8016de4:	e793      	b.n	8016d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8016de6:	b003      	add	sp, #12
 8016de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df0:	b085      	sub	sp, #20
 8016df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016df6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016df8:	9202      	str	r2, [sp, #8]
 8016dfa:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016dfe:	6860      	ldr	r0, [r4, #4]
 8016e00:	9203      	str	r2, [sp, #12]
 8016e02:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016e06:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016e0a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016e0e:	fb00 2505 	mla	r5, r0, r5, r2
 8016e12:	6822      	ldr	r2, [r4, #0]
 8016e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e18:	4415      	add	r5, r2
 8016e1a:	f8dc 2000 	ldr.w	r2, [ip]
 8016e1e:	9200      	str	r2, [sp, #0]
 8016e20:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016e24:	3204      	adds	r2, #4
 8016e26:	9201      	str	r2, [sp, #4]
 8016e28:	2900      	cmp	r1, #0
 8016e2a:	dc03      	bgt.n	8016e34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016e2c:	9a02      	ldr	r2, [sp, #8]
 8016e2e:	2a00      	cmp	r2, #0
 8016e30:	f340 8127 	ble.w	8017082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016e34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e36:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016e3a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016e3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016e40:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016e44:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	dd0d      	ble.n	8016e68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016e4c:	1422      	asrs	r2, r4, #16
 8016e4e:	d405      	bmi.n	8016e5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e50:	4542      	cmp	r2, r8
 8016e52:	da03      	bge.n	8016e5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e54:	1402      	asrs	r2, r0, #16
 8016e56:	d401      	bmi.n	8016e5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e58:	42ba      	cmp	r2, r7
 8016e5a:	db06      	blt.n	8016e6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016e5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e5e:	4474      	add	r4, lr
 8016e60:	3b01      	subs	r3, #1
 8016e62:	3503      	adds	r5, #3
 8016e64:	4410      	add	r0, r2
 8016e66:	e7ef      	b.n	8016e48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e68:	d075      	beq.n	8016f56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8016e6a:	1e5a      	subs	r2, r3, #1
 8016e6c:	fb0e 4602 	mla	r6, lr, r2, r4
 8016e70:	1436      	asrs	r6, r6, #16
 8016e72:	d465      	bmi.n	8016f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016e74:	4546      	cmp	r6, r8
 8016e76:	da63      	bge.n	8016f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016e78:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016e7a:	fb06 0202 	mla	r2, r6, r2, r0
 8016e7e:	1412      	asrs	r2, r2, #16
 8016e80:	d45e      	bmi.n	8016f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016e82:	42ba      	cmp	r2, r7
 8016e84:	da5c      	bge.n	8016f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016e86:	1cef      	adds	r7, r5, #3
 8016e88:	4699      	mov	r9, r3
 8016e8a:	f1b9 0f00 	cmp.w	r9, #0
 8016e8e:	dd5d      	ble.n	8016f4c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8016e90:	1402      	asrs	r2, r0, #16
 8016e92:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016e96:	1426      	asrs	r6, r4, #16
 8016e98:	4692      	mov	sl, r2
 8016e9a:	9a00      	ldr	r2, [sp, #0]
 8016e9c:	fb08 220a 	mla	r2, r8, sl, r2
 8016ea0:	5d92      	ldrb	r2, [r2, r6]
 8016ea2:	9e01      	ldr	r6, [sp, #4]
 8016ea4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016ea8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016eac:	d041      	beq.n	8016f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016eae:	9a03      	ldr	r2, [sp, #12]
 8016eb0:	fa5f fb86 	uxtb.w	fp, r6
 8016eb4:	fb02 f808 	mul.w	r8, r2, r8
 8016eb8:	f108 0201 	add.w	r2, r8, #1
 8016ebc:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016ec0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016ec4:	1212      	asrs	r2, r2, #8
 8016ec6:	fa1f fa82 	uxth.w	sl, r2
 8016eca:	43d2      	mvns	r2, r2
 8016ecc:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ed0:	b2d2      	uxtb	r2, r2
 8016ed2:	fb08 b802 	mla	r8, r8, r2, fp
 8016ed6:	fa1f f888 	uxth.w	r8, r8
 8016eda:	f108 0b01 	add.w	fp, r8, #1
 8016ede:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016ee2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016ee6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016eea:	fb1b fb0a 	smulbb	fp, fp, sl
 8016eee:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016ef2:	fb16 fa0a 	smulbb	sl, r6, sl
 8016ef6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016efa:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016efe:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016f02:	fb06 aa02 	mla	sl, r6, r2, sl
 8016f06:	fb08 b802 	mla	r8, r8, r2, fp
 8016f0a:	fa1f fa8a 	uxth.w	sl, sl
 8016f0e:	fa1f f888 	uxth.w	r8, r8
 8016f12:	f10a 0601 	add.w	r6, sl, #1
 8016f16:	f108 0b01 	add.w	fp, r8, #1
 8016f1a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016f1e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016f22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f26:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016f2a:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016f2e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016f32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016f34:	4474      	add	r4, lr
 8016f36:	3703      	adds	r7, #3
 8016f38:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f3c:	4410      	add	r0, r2
 8016f3e:	e7a4      	b.n	8016e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016f40:	f04f 0800 	mov.w	r8, #0
 8016f44:	eba3 0208 	sub.w	r2, r3, r8
 8016f48:	2a00      	cmp	r2, #0
 8016f4a:	dc3b      	bgt.n	8016fc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8016f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f54:	441d      	add	r5, r3
 8016f56:	2900      	cmp	r1, #0
 8016f58:	f340 8093 	ble.w	8017082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016f5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f66:	3901      	subs	r1, #1
 8016f68:	eeb0 6a62 	vmov.f32	s12, s5
 8016f6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016f70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f78:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016f7c:	eeb0 6a43 	vmov.f32	s12, s6
 8016f80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f84:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016f88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016fa0:	ee12 2a90 	vmov	r2, s5
 8016fa4:	eef0 2a47 	vmov.f32	s5, s14
 8016fa8:	fb92 fef3 	sdiv	lr, r2, r3
 8016fac:	ee13 2a10 	vmov	r2, s6
 8016fb0:	eeb0 3a67 	vmov.f32	s6, s15
 8016fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fb8:	9a02      	ldr	r2, [sp, #8]
 8016fba:	9312      	str	r3, [sp, #72]	@ 0x48
 8016fbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fbe:	bf08      	it	eq
 8016fc0:	4613      	moveq	r3, r2
 8016fc2:	e731      	b.n	8016e28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016fc4:	1427      	asrs	r7, r4, #16
 8016fc6:	d456      	bmi.n	8017076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016fc8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016fcc:	42be      	cmp	r6, r7
 8016fce:	dd52      	ble.n	8017076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016fd0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016fd4:	d44f      	bmi.n	8017076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016fd6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016fda:	454a      	cmp	r2, r9
 8016fdc:	dd4b      	ble.n	8017076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016fde:	9a00      	ldr	r2, [sp, #0]
 8016fe0:	b236      	sxth	r6, r6
 8016fe2:	fb09 2606 	mla	r6, r9, r6, r2
 8016fe6:	5df2      	ldrb	r2, [r6, r7]
 8016fe8:	9e01      	ldr	r6, [sp, #4]
 8016fea:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016fee:	0e3a      	lsrs	r2, r7, #24
 8016ff0:	d041      	beq.n	8017076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016ff2:	9e03      	ldr	r6, [sp, #12]
 8016ff4:	fa5f fb87 	uxtb.w	fp, r7
 8016ff8:	4372      	muls	r2, r6
 8016ffa:	1c56      	adds	r6, r2, #1
 8016ffc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017000:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017004:	1212      	asrs	r2, r2, #8
 8017006:	f815 9006 	ldrb.w	r9, [r5, r6]
 801700a:	fa1f fa82 	uxth.w	sl, r2
 801700e:	43d2      	mvns	r2, r2
 8017010:	fb1b fb0a 	smulbb	fp, fp, sl
 8017014:	b2d2      	uxtb	r2, r2
 8017016:	fb09 b902 	mla	r9, r9, r2, fp
 801701a:	fa1f f989 	uxth.w	r9, r9
 801701e:	f109 0b01 	add.w	fp, r9, #1
 8017022:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017026:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801702a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801702e:	fb1b fb0a 	smulbb	fp, fp, sl
 8017032:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017036:	fb17 fa0a 	smulbb	sl, r7, sl
 801703a:	f805 9006 	strb.w	r9, [r5, r6]
 801703e:	442e      	add	r6, r5
 8017040:	78b7      	ldrb	r7, [r6, #2]
 8017042:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017046:	fb07 aa02 	mla	sl, r7, r2, sl
 801704a:	fb09 b902 	mla	r9, r9, r2, fp
 801704e:	fa1f fa8a 	uxth.w	sl, sl
 8017052:	fa1f f989 	uxth.w	r9, r9
 8017056:	f10a 0701 	add.w	r7, sl, #1
 801705a:	f109 0b01 	add.w	fp, r9, #1
 801705e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017062:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017066:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801706a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801706e:	f886 a002 	strb.w	sl, [r6, #2]
 8017072:	f886 9001 	strb.w	r9, [r6, #1]
 8017076:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017078:	4474      	add	r4, lr
 801707a:	f108 0801 	add.w	r8, r8, #1
 801707e:	4410      	add	r0, r2
 8017080:	e760      	b.n	8016f44 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8017082:	b005      	add	sp, #20
 8017084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017088 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801708c:	b085      	sub	sp, #20
 801708e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017092:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017094:	9203      	str	r2, [sp, #12]
 8017096:	6868      	ldr	r0, [r5, #4]
 8017098:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801709c:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80170a0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80170a4:	fb00 2404 	mla	r4, r0, r4, r2
 80170a8:	682a      	ldr	r2, [r5, #0]
 80170aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80170ae:	4414      	add	r4, r2
 80170b0:	f8dc 2000 	ldr.w	r2, [ip]
 80170b4:	9201      	str	r2, [sp, #4]
 80170b6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80170ba:	3204      	adds	r2, #4
 80170bc:	9202      	str	r2, [sp, #8]
 80170be:	2900      	cmp	r1, #0
 80170c0:	dc03      	bgt.n	80170ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80170c2:	9a03      	ldr	r2, [sp, #12]
 80170c4:	2a00      	cmp	r2, #0
 80170c6:	f340 8137 	ble.w	8017338 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80170ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80170cc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80170d0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80170d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80170d6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80170da:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80170de:	2b00      	cmp	r3, #0
 80170e0:	dd0d      	ble.n	80170fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80170e2:	1405      	asrs	r5, r0, #16
 80170e4:	d405      	bmi.n	80170f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80170e6:	4545      	cmp	r5, r8
 80170e8:	da03      	bge.n	80170f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80170ea:	1415      	asrs	r5, r2, #16
 80170ec:	d401      	bmi.n	80170f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80170ee:	42bd      	cmp	r5, r7
 80170f0:	db06      	blt.n	8017100 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80170f2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80170f4:	4470      	add	r0, lr
 80170f6:	3b01      	subs	r3, #1
 80170f8:	3403      	adds	r4, #3
 80170fa:	442a      	add	r2, r5
 80170fc:	e7ef      	b.n	80170de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80170fe:	d070      	beq.n	80171e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017100:	1e5d      	subs	r5, r3, #1
 8017102:	fb0e 0605 	mla	r6, lr, r5, r0
 8017106:	1436      	asrs	r6, r6, #16
 8017108:	d462      	bmi.n	80171d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801710a:	4546      	cmp	r6, r8
 801710c:	da60      	bge.n	80171d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801710e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017110:	fb06 2505 	mla	r5, r6, r5, r2
 8017114:	142d      	asrs	r5, r5, #16
 8017116:	d45b      	bmi.n	80171d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017118:	42bd      	cmp	r5, r7
 801711a:	da59      	bge.n	80171d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801711c:	1ce5      	adds	r5, r4, #3
 801711e:	469a      	mov	sl, r3
 8017120:	f1ba 0f00 	cmp.w	sl, #0
 8017124:	dd58      	ble.n	80171d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8017126:	1416      	asrs	r6, r2, #16
 8017128:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801712c:	1407      	asrs	r7, r0, #16
 801712e:	46b1      	mov	r9, r6
 8017130:	9e01      	ldr	r6, [sp, #4]
 8017132:	fb08 6609 	mla	r6, r8, r9, r6
 8017136:	5df6      	ldrb	r6, [r6, r7]
 8017138:	9f02      	ldr	r7, [sp, #8]
 801713a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801713e:	0e37      	lsrs	r7, r6, #24
 8017140:	2fff      	cmp	r7, #255	@ 0xff
 8017142:	f000 80f0 	beq.w	8017326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017146:	fa5f f887 	uxtb.w	r8, r7
 801714a:	b3d7      	cbz	r7, 80171c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801714c:	fa1f f788 	uxth.w	r7, r8
 8017150:	ea6f 0808 	mvn.w	r8, r8
 8017154:	fa5f fb86 	uxtb.w	fp, r6
 8017158:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801715c:	fa5f f888 	uxtb.w	r8, r8
 8017160:	fb1b fb07 	smulbb	fp, fp, r7
 8017164:	fb09 b908 	mla	r9, r9, r8, fp
 8017168:	fa1f f989 	uxth.w	r9, r9
 801716c:	f109 0b01 	add.w	fp, r9, #1
 8017170:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017174:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8017178:	fb1b fb08 	smulbb	fp, fp, r8
 801717c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017180:	f805 9c03 	strb.w	r9, [r5, #-3]
 8017184:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8017188:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801718c:	fb09 b907 	mla	r9, r9, r7, fp
 8017190:	fa1f f989 	uxth.w	r9, r9
 8017194:	f109 0b01 	add.w	fp, r9, #1
 8017198:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801719c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171a0:	f805 9c02 	strb.w	r9, [r5, #-2]
 80171a4:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80171a8:	fb19 f808 	smulbb	r8, r9, r8
 80171ac:	fb06 8607 	mla	r6, r6, r7, r8
 80171b0:	b2b6      	uxth	r6, r6
 80171b2:	f106 0801 	add.w	r8, r6, #1
 80171b6:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80171ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80171be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80171c2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80171c4:	4470      	add	r0, lr
 80171c6:	3503      	adds	r5, #3
 80171c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171cc:	4432      	add	r2, r6
 80171ce:	e7a7      	b.n	8017120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80171d0:	2600      	movs	r6, #0
 80171d2:	1b9d      	subs	r5, r3, r6
 80171d4:	2d00      	cmp	r5, #0
 80171d6:	dc3b      	bgt.n	8017250 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80171d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171e0:	441c      	add	r4, r3
 80171e2:	2900      	cmp	r1, #0
 80171e4:	f340 80a8 	ble.w	8017338 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80171e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80171ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80171f2:	3901      	subs	r1, #1
 80171f4:	eeb0 6a62 	vmov.f32	s12, s5
 80171f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80171fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017200:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017204:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017208:	eeb0 6a43 	vmov.f32	s12, s6
 801720c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017210:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017214:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017218:	ee61 7a27 	vmul.f32	s15, s2, s15
 801721c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017220:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017224:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017228:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801722c:	ee12 2a90 	vmov	r2, s5
 8017230:	eef0 2a47 	vmov.f32	s5, s14
 8017234:	fb92 fef3 	sdiv	lr, r2, r3
 8017238:	ee13 2a10 	vmov	r2, s6
 801723c:	eeb0 3a67 	vmov.f32	s6, s15
 8017240:	fb92 f3f3 	sdiv	r3, r2, r3
 8017244:	9a03      	ldr	r2, [sp, #12]
 8017246:	9312      	str	r3, [sp, #72]	@ 0x48
 8017248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801724a:	bf08      	it	eq
 801724c:	4613      	moveq	r3, r2
 801724e:	e736      	b.n	80170be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017250:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017254:	d457      	bmi.n	8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017256:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801725a:	4547      	cmp	r7, r8
 801725c:	dd53      	ble.n	8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801725e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8017262:	d450      	bmi.n	8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017264:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8017268:	454d      	cmp	r5, r9
 801726a:	dd4c      	ble.n	8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801726c:	9d01      	ldr	r5, [sp, #4]
 801726e:	b23f      	sxth	r7, r7
 8017270:	fb09 5707 	mla	r7, r9, r7, r5
 8017274:	f817 5008 	ldrb.w	r5, [r7, r8]
 8017278:	9f02      	ldr	r7, [sp, #8]
 801727a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801727e:	0e2f      	lsrs	r7, r5, #24
 8017280:	2fff      	cmp	r7, #255	@ 0xff
 8017282:	d045      	beq.n	8017310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017284:	fa5f f987 	uxtb.w	r9, r7
 8017288:	b3ef      	cbz	r7, 8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801728a:	fa1f f889 	uxth.w	r8, r9
 801728e:	ea6f 0909 	mvn.w	r9, r9
 8017292:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017296:	fa5f fb85 	uxtb.w	fp, r5
 801729a:	f814 a007 	ldrb.w	sl, [r4, r7]
 801729e:	fa5f f989 	uxtb.w	r9, r9
 80172a2:	fb1b fb08 	smulbb	fp, fp, r8
 80172a6:	fb0a ba09 	mla	sl, sl, r9, fp
 80172aa:	fa1f fa8a 	uxth.w	sl, sl
 80172ae:	f10a 0b01 	add.w	fp, sl, #1
 80172b2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80172b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172ba:	f804 a007 	strb.w	sl, [r4, r7]
 80172be:	4427      	add	r7, r4
 80172c0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80172c4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80172c8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80172cc:	fb1b fb09 	smulbb	fp, fp, r9
 80172d0:	fb0a ba08 	mla	sl, sl, r8, fp
 80172d4:	fa1f fa8a 	uxth.w	sl, sl
 80172d8:	f10a 0b01 	add.w	fp, sl, #1
 80172dc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80172e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172e4:	f887 a001 	strb.w	sl, [r7, #1]
 80172e8:	f897 a002 	ldrb.w	sl, [r7, #2]
 80172ec:	fb1a f909 	smulbb	r9, sl, r9
 80172f0:	fb05 9508 	mla	r5, r5, r8, r9
 80172f4:	b2ad      	uxth	r5, r5
 80172f6:	f105 0901 	add.w	r9, r5, #1
 80172fa:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80172fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017302:	f887 9002 	strb.w	r9, [r7, #2]
 8017306:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017308:	4470      	add	r0, lr
 801730a:	3601      	adds	r6, #1
 801730c:	442a      	add	r2, r5
 801730e:	e760      	b.n	80171d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017310:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017314:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8017318:	55e5      	strb	r5, [r4, r7]
 801731a:	4427      	add	r7, r4
 801731c:	0c2d      	lsrs	r5, r5, #16
 801731e:	f887 8001 	strb.w	r8, [r7, #1]
 8017322:	70bd      	strb	r5, [r7, #2]
 8017324:	e7ef      	b.n	8017306 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017326:	0a37      	lsrs	r7, r6, #8
 8017328:	f805 6c03 	strb.w	r6, [r5, #-3]
 801732c:	0c36      	lsrs	r6, r6, #16
 801732e:	f805 7c02 	strb.w	r7, [r5, #-2]
 8017332:	f805 6c01 	strb.w	r6, [r5, #-1]
 8017336:	e744      	b.n	80171c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017338:	b005      	add	sp, #20
 801733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801733e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801733e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017342:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017344:	9201      	str	r2, [sp, #4]
 8017346:	6870      	ldr	r0, [r6, #4]
 8017348:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801734c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8017350:	fa1f fe85 	uxth.w	lr, r5
 8017354:	43ed      	mvns	r5, r5
 8017356:	f8dc 8000 	ldr.w	r8, [ip]
 801735a:	b2ed      	uxtb	r5, r5
 801735c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8017360:	fb00 2404 	mla	r4, r0, r4, r2
 8017364:	6832      	ldr	r2, [r6, #0]
 8017366:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801736a:	4414      	add	r4, r2
 801736c:	2900      	cmp	r1, #0
 801736e:	dc03      	bgt.n	8017378 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017370:	9a01      	ldr	r2, [sp, #4]
 8017372:	2a00      	cmp	r2, #0
 8017374:	f340 810d 	ble.w	8017592 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017378:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801737a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801737e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017384:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017388:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801738c:	2b00      	cmp	r3, #0
 801738e:	dd0e      	ble.n	80173ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017390:	1406      	asrs	r6, r0, #16
 8017392:	d405      	bmi.n	80173a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017394:	4556      	cmp	r6, sl
 8017396:	da03      	bge.n	80173a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017398:	1416      	asrs	r6, r2, #16
 801739a:	d401      	bmi.n	80173a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801739c:	454e      	cmp	r6, r9
 801739e:	db07      	blt.n	80173b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80173a0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80173a2:	3b01      	subs	r3, #1
 80173a4:	3403      	adds	r4, #3
 80173a6:	4430      	add	r0, r6
 80173a8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80173aa:	4432      	add	r2, r6
 80173ac:	e7ee      	b.n	801738c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80173ae:	d060      	beq.n	8017472 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80173b0:	1e5e      	subs	r6, r3, #1
 80173b2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80173b4:	fb07 0706 	mla	r7, r7, r6, r0
 80173b8:	143f      	asrs	r7, r7, #16
 80173ba:	d451      	bmi.n	8017460 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80173bc:	4557      	cmp	r7, sl
 80173be:	da4f      	bge.n	8017460 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80173c0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80173c2:	fb07 2606 	mla	r6, r7, r6, r2
 80173c6:	1436      	asrs	r6, r6, #16
 80173c8:	d44a      	bmi.n	8017460 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80173ca:	454e      	cmp	r6, r9
 80173cc:	da48      	bge.n	8017460 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80173ce:	1ce6      	adds	r6, r4, #3
 80173d0:	4699      	mov	r9, r3
 80173d2:	f1b9 0f00 	cmp.w	r9, #0
 80173d6:	f106 0603 	add.w	r6, r6, #3
 80173da:	dd45      	ble.n	8017468 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80173dc:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80173e0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80173e4:	1417      	asrs	r7, r2, #16
 80173e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80173ea:	fb0b a707 	mla	r7, fp, r7, sl
 80173ee:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80173f2:	fb1b fb05 	smulbb	fp, fp, r5
 80173f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80173fa:	eb08 0a07 	add.w	sl, r8, r7
 80173fe:	f818 7007 	ldrb.w	r7, [r8, r7]
 8017402:	fb07 b70e 	mla	r7, r7, lr, fp
 8017406:	b2bf      	uxth	r7, r7
 8017408:	f107 0b01 	add.w	fp, r7, #1
 801740c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017410:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8017414:	fb1b fb05 	smulbb	fp, fp, r5
 8017418:	123f      	asrs	r7, r7, #8
 801741a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801741e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8017422:	fb07 b70e 	mla	r7, r7, lr, fp
 8017426:	b2bf      	uxth	r7, r7
 8017428:	f107 0b01 	add.w	fp, r7, #1
 801742c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017430:	123f      	asrs	r7, r7, #8
 8017432:	f806 7c05 	strb.w	r7, [r6, #-5]
 8017436:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801743a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801743e:	fb1a fa05 	smulbb	sl, sl, r5
 8017442:	fb07 a70e 	mla	r7, r7, lr, sl
 8017446:	b2bf      	uxth	r7, r7
 8017448:	f107 0a01 	add.w	sl, r7, #1
 801744c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017450:	123f      	asrs	r7, r7, #8
 8017452:	f806 7c04 	strb.w	r7, [r6, #-4]
 8017456:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017458:	4438      	add	r0, r7
 801745a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801745c:	443a      	add	r2, r7
 801745e:	e7b8      	b.n	80173d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017460:	2700      	movs	r7, #0
 8017462:	1bde      	subs	r6, r3, r7
 8017464:	2e00      	cmp	r6, #0
 8017466:	dc3f      	bgt.n	80174e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8017468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801746c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017470:	441c      	add	r4, r3
 8017472:	2900      	cmp	r1, #0
 8017474:	f340 808d 	ble.w	8017592 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801747c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801747e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017482:	3901      	subs	r1, #1
 8017484:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017488:	eef0 6a62 	vmov.f32	s13, s5
 801748c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017490:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017494:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017498:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801749c:	eef0 6a43 	vmov.f32	s13, s6
 80174a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80174a4:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80174a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80174ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80174b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80174b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80174b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80174bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80174c0:	ee12 2a90 	vmov	r2, s5
 80174c4:	eef0 2a47 	vmov.f32	s5, s14
 80174c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80174cc:	ee13 2a10 	vmov	r2, s6
 80174d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80174d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174d4:	eeb0 3a67 	vmov.f32	s6, s15
 80174d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80174dc:	9a01      	ldr	r2, [sp, #4]
 80174de:	9310      	str	r3, [sp, #64]	@ 0x40
 80174e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174e2:	bf08      	it	eq
 80174e4:	4613      	moveq	r3, r2
 80174e6:	e741      	b.n	801736c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80174e8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80174ec:	d44b      	bmi.n	8017586 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80174ee:	f8dc b008 	ldr.w	fp, [ip, #8]
 80174f2:	45cb      	cmp	fp, r9
 80174f4:	dd47      	ble.n	8017586 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80174f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80174fa:	d444      	bmi.n	8017586 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80174fc:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8017500:	4556      	cmp	r6, sl
 8017502:	dd40      	ble.n	8017586 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017504:	fa0f f68b 	sxth.w	r6, fp
 8017508:	fb0a 9906 	mla	r9, sl, r6, r9
 801750c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017510:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017514:	f814 b006 	ldrb.w	fp, [r4, r6]
 8017518:	fb1b fb05 	smulbb	fp, fp, r5
 801751c:	eb08 0a09 	add.w	sl, r8, r9
 8017520:	f818 9009 	ldrb.w	r9, [r8, r9]
 8017524:	fb09 b90e 	mla	r9, r9, lr, fp
 8017528:	fa1f f989 	uxth.w	r9, r9
 801752c:	f109 0b01 	add.w	fp, r9, #1
 8017530:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017534:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017538:	f804 9006 	strb.w	r9, [r4, r6]
 801753c:	4426      	add	r6, r4
 801753e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8017542:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017546:	fb1b fb05 	smulbb	fp, fp, r5
 801754a:	fb09 b90e 	mla	r9, r9, lr, fp
 801754e:	fa1f f989 	uxth.w	r9, r9
 8017552:	f109 0b01 	add.w	fp, r9, #1
 8017556:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801755a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801755e:	f886 9001 	strb.w	r9, [r6, #1]
 8017562:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017566:	f896 a002 	ldrb.w	sl, [r6, #2]
 801756a:	fb1a fa05 	smulbb	sl, sl, r5
 801756e:	fb09 a90e 	mla	r9, r9, lr, sl
 8017572:	fa1f f989 	uxth.w	r9, r9
 8017576:	f109 0a01 	add.w	sl, r9, #1
 801757a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801757e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017582:	f886 9002 	strb.w	r9, [r6, #2]
 8017586:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017588:	3701      	adds	r7, #1
 801758a:	4430      	add	r0, r6
 801758c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801758e:	4432      	add	r2, r6
 8017590:	e767      	b.n	8017462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8017592:	b003      	add	sp, #12
 8017594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017598 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801759c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801759e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80175a2:	9201      	str	r2, [sp, #4]
 80175a4:	6868      	ldr	r0, [r5, #4]
 80175a6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80175a8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80175ac:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80175b0:	fb00 2404 	mla	r4, r0, r4, r2
 80175b4:	682a      	ldr	r2, [r5, #0]
 80175b6:	f8d7 8000 	ldr.w	r8, [r7]
 80175ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80175be:	4414      	add	r4, r2
 80175c0:	2900      	cmp	r1, #0
 80175c2:	dc03      	bgt.n	80175cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80175c4:	9a01      	ldr	r2, [sp, #4]
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	f340 80af 	ble.w	801772a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80175cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175ce:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80175d2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80175d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80175d8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80175dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	dd0c      	ble.n	80175fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80175e4:	1405      	asrs	r5, r0, #16
 80175e6:	d405      	bmi.n	80175f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80175e8:	4555      	cmp	r5, sl
 80175ea:	da03      	bge.n	80175f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80175ec:	1415      	asrs	r5, r2, #16
 80175ee:	d401      	bmi.n	80175f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80175f0:	454d      	cmp	r5, r9
 80175f2:	db05      	blt.n	8017600 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80175f4:	4470      	add	r0, lr
 80175f6:	4462      	add	r2, ip
 80175f8:	3b01      	subs	r3, #1
 80175fa:	3403      	adds	r4, #3
 80175fc:	e7f0      	b.n	80175e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80175fe:	d038      	beq.n	8017672 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017600:	1e5d      	subs	r5, r3, #1
 8017602:	fb0e 0605 	mla	r6, lr, r5, r0
 8017606:	1436      	asrs	r6, r6, #16
 8017608:	d42a      	bmi.n	8017660 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801760a:	4556      	cmp	r6, sl
 801760c:	da28      	bge.n	8017660 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801760e:	fb0c 2505 	mla	r5, ip, r5, r2
 8017612:	142d      	asrs	r5, r5, #16
 8017614:	d424      	bmi.n	8017660 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8017616:	454d      	cmp	r5, r9
 8017618:	da22      	bge.n	8017660 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801761a:	1ce6      	adds	r6, r4, #3
 801761c:	4699      	mov	r9, r3
 801761e:	f1b9 0f00 	cmp.w	r9, #0
 8017622:	f106 0603 	add.w	r6, r6, #3
 8017626:	dd1f      	ble.n	8017668 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8017628:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801762c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017630:	1415      	asrs	r5, r2, #16
 8017632:	4470      	add	r0, lr
 8017634:	4462      	add	r2, ip
 8017636:	f109 39ff 	add.w	r9, r9, #4294967295
 801763a:	fb0b a505 	mla	r5, fp, r5, sl
 801763e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017642:	eb08 0a05 	add.w	sl, r8, r5
 8017646:	f818 5005 	ldrb.w	r5, [r8, r5]
 801764a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801764e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8017652:	f806 5c05 	strb.w	r5, [r6, #-5]
 8017656:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801765a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801765e:	e7de      	b.n	801761e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017660:	2600      	movs	r6, #0
 8017662:	1b9d      	subs	r5, r3, r6
 8017664:	2d00      	cmp	r5, #0
 8017666:	dc38      	bgt.n	80176da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801766c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017670:	441c      	add	r4, r3
 8017672:	2900      	cmp	r1, #0
 8017674:	dd59      	ble.n	801772a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8017676:	ee30 0a04 	vadd.f32	s0, s0, s8
 801767a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801767c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017680:	3901      	subs	r1, #1
 8017682:	eeb0 6a62 	vmov.f32	s12, s5
 8017686:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801768a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801768e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017692:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8017696:	eeb0 6a43 	vmov.f32	s12, s6
 801769a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801769e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80176a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80176a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80176aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80176ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80176b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80176b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80176ba:	ee12 2a90 	vmov	r2, s5
 80176be:	eef0 2a47 	vmov.f32	s5, s14
 80176c2:	fb92 fef3 	sdiv	lr, r2, r3
 80176c6:	ee13 2a10 	vmov	r2, s6
 80176ca:	eeb0 3a67 	vmov.f32	s6, s15
 80176ce:	fb92 fcf3 	sdiv	ip, r2, r3
 80176d2:	9a01      	ldr	r2, [sp, #4]
 80176d4:	bf08      	it	eq
 80176d6:	4613      	moveq	r3, r2
 80176d8:	e772      	b.n	80175c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80176da:	ea5f 4920 	movs.w	r9, r0, asr #16
 80176de:	d420      	bmi.n	8017722 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80176e0:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80176e4:	45cb      	cmp	fp, r9
 80176e6:	dd1c      	ble.n	8017722 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80176e8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80176ec:	d419      	bmi.n	8017722 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80176ee:	68fd      	ldr	r5, [r7, #12]
 80176f0:	4555      	cmp	r5, sl
 80176f2:	dd16      	ble.n	8017722 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80176f4:	fa0f f58b 	sxth.w	r5, fp
 80176f8:	fb0a 9505 	mla	r5, sl, r5, r9
 80176fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017700:	f818 9005 	ldrb.w	r9, [r8, r5]
 8017704:	eb08 0b05 	add.w	fp, r8, r5
 8017708:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801770c:	f804 9005 	strb.w	r9, [r4, r5]
 8017710:	4425      	add	r5, r4
 8017712:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8017716:	f885 9001 	strb.w	r9, [r5, #1]
 801771a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801771e:	f885 9002 	strb.w	r9, [r5, #2]
 8017722:	4470      	add	r0, lr
 8017724:	4462      	add	r2, ip
 8017726:	3601      	adds	r6, #1
 8017728:	e79b      	b.n	8017662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801772a:	b003      	add	sp, #12
 801772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017730 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017734:	b085      	sub	sp, #20
 8017736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801773a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801773c:	9202      	str	r2, [sp, #8]
 801773e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8017742:	6860      	ldr	r0, [r4, #4]
 8017744:	9203      	str	r2, [sp, #12]
 8017746:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801774a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801774e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8017752:	fb00 2505 	mla	r5, r0, r5, r2
 8017756:	6822      	ldr	r2, [r4, #0]
 8017758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801775c:	4415      	add	r5, r2
 801775e:	f8dc 2000 	ldr.w	r2, [ip]
 8017762:	9201      	str	r2, [sp, #4]
 8017764:	2900      	cmp	r1, #0
 8017766:	dc03      	bgt.n	8017770 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8017768:	9a02      	ldr	r2, [sp, #8]
 801776a:	2a00      	cmp	r2, #0
 801776c:	f340 8122 	ble.w	80179b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017770:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017772:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017776:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801777a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801777c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017780:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017784:	2b00      	cmp	r3, #0
 8017786:	dd0d      	ble.n	80177a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017788:	1422      	asrs	r2, r4, #16
 801778a:	d405      	bmi.n	8017798 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801778c:	4542      	cmp	r2, r8
 801778e:	da03      	bge.n	8017798 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017790:	1402      	asrs	r2, r0, #16
 8017792:	d401      	bmi.n	8017798 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017794:	42ba      	cmp	r2, r7
 8017796:	db06      	blt.n	80177a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017798:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801779a:	4474      	add	r4, lr
 801779c:	3b01      	subs	r3, #1
 801779e:	3503      	adds	r5, #3
 80177a0:	4410      	add	r0, r2
 80177a2:	e7ef      	b.n	8017784 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80177a4:	d072      	beq.n	801788c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80177a6:	1e5a      	subs	r2, r3, #1
 80177a8:	fb0e 4602 	mla	r6, lr, r2, r4
 80177ac:	1436      	asrs	r6, r6, #16
 80177ae:	d462      	bmi.n	8017876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80177b0:	4546      	cmp	r6, r8
 80177b2:	da60      	bge.n	8017876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80177b4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80177b6:	fb06 0202 	mla	r2, r6, r2, r0
 80177ba:	1412      	asrs	r2, r2, #16
 80177bc:	d45b      	bmi.n	8017876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80177be:	42ba      	cmp	r2, r7
 80177c0:	da59      	bge.n	8017876 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80177c2:	1cef      	adds	r7, r5, #3
 80177c4:	4699      	mov	r9, r3
 80177c6:	f1b9 0f00 	cmp.w	r9, #0
 80177ca:	dd5a      	ble.n	8017882 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80177cc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80177d0:	1426      	asrs	r6, r4, #16
 80177d2:	1402      	asrs	r2, r0, #16
 80177d4:	fb08 6202 	mla	r2, r8, r2, r6
 80177d8:	9e01      	ldr	r6, [sp, #4]
 80177da:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80177de:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80177e2:	d041      	beq.n	8017868 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80177e4:	9a03      	ldr	r2, [sp, #12]
 80177e6:	fa5f fb86 	uxtb.w	fp, r6
 80177ea:	fb02 f808 	mul.w	r8, r2, r8
 80177ee:	f108 0201 	add.w	r2, r8, #1
 80177f2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80177f6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80177fa:	1212      	asrs	r2, r2, #8
 80177fc:	fa1f fa82 	uxth.w	sl, r2
 8017800:	43d2      	mvns	r2, r2
 8017802:	fb1b fb0a 	smulbb	fp, fp, sl
 8017806:	b2d2      	uxtb	r2, r2
 8017808:	fb08 b802 	mla	r8, r8, r2, fp
 801780c:	fa1f f888 	uxth.w	r8, r8
 8017810:	f108 0b01 	add.w	fp, r8, #1
 8017814:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017818:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801781c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017820:	fb1b fb0a 	smulbb	fp, fp, sl
 8017824:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017828:	fb16 fa0a 	smulbb	sl, r6, sl
 801782c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017830:	f807 8c03 	strb.w	r8, [r7, #-3]
 8017834:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017838:	fb06 aa02 	mla	sl, r6, r2, sl
 801783c:	fb08 b802 	mla	r8, r8, r2, fp
 8017840:	fa1f fa8a 	uxth.w	sl, sl
 8017844:	fa1f f888 	uxth.w	r8, r8
 8017848:	f10a 0601 	add.w	r6, sl, #1
 801784c:	f108 0b01 	add.w	fp, r8, #1
 8017850:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8017854:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017858:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801785c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017860:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017864:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801786a:	4474      	add	r4, lr
 801786c:	3703      	adds	r7, #3
 801786e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017872:	4410      	add	r0, r2
 8017874:	e7a7      	b.n	80177c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017876:	f04f 0800 	mov.w	r8, #0
 801787a:	eba3 0208 	sub.w	r2, r3, r8
 801787e:	2a00      	cmp	r2, #0
 8017880:	dc3b      	bgt.n	80178fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017886:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801788a:	441d      	add	r5, r3
 801788c:	2900      	cmp	r1, #0
 801788e:	f340 8091 	ble.w	80179b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017892:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017898:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801789c:	3901      	subs	r1, #1
 801789e:	eeb0 6a62 	vmov.f32	s12, s5
 80178a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80178a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80178aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80178ae:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80178b2:	eeb0 6a43 	vmov.f32	s12, s6
 80178b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80178ba:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80178be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80178c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80178c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80178ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80178ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80178d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80178d6:	ee12 2a90 	vmov	r2, s5
 80178da:	eef0 2a47 	vmov.f32	s5, s14
 80178de:	fb92 fef3 	sdiv	lr, r2, r3
 80178e2:	ee13 2a10 	vmov	r2, s6
 80178e6:	eeb0 3a67 	vmov.f32	s6, s15
 80178ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80178ee:	9a02      	ldr	r2, [sp, #8]
 80178f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80178f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178f4:	bf08      	it	eq
 80178f6:	4613      	moveq	r3, r2
 80178f8:	e734      	b.n	8017764 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80178fa:	1427      	asrs	r7, r4, #16
 80178fc:	d454      	bmi.n	80179a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80178fe:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017902:	42be      	cmp	r6, r7
 8017904:	dd50      	ble.n	80179a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017906:	ea5f 4920 	movs.w	r9, r0, asr #16
 801790a:	d44d      	bmi.n	80179a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801790c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017910:	454a      	cmp	r2, r9
 8017912:	dd49      	ble.n	80179a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017914:	b236      	sxth	r6, r6
 8017916:	9a01      	ldr	r2, [sp, #4]
 8017918:	fb09 7606 	mla	r6, r9, r6, r7
 801791c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017920:	0e3a      	lsrs	r2, r7, #24
 8017922:	d041      	beq.n	80179a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017924:	9e03      	ldr	r6, [sp, #12]
 8017926:	fa5f fb87 	uxtb.w	fp, r7
 801792a:	4372      	muls	r2, r6
 801792c:	1c56      	adds	r6, r2, #1
 801792e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017932:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017936:	1212      	asrs	r2, r2, #8
 8017938:	f815 9006 	ldrb.w	r9, [r5, r6]
 801793c:	fa1f fa82 	uxth.w	sl, r2
 8017940:	43d2      	mvns	r2, r2
 8017942:	fb1b fb0a 	smulbb	fp, fp, sl
 8017946:	b2d2      	uxtb	r2, r2
 8017948:	fb09 b902 	mla	r9, r9, r2, fp
 801794c:	fa1f f989 	uxth.w	r9, r9
 8017950:	f109 0b01 	add.w	fp, r9, #1
 8017954:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017958:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801795c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017960:	fb1b fb0a 	smulbb	fp, fp, sl
 8017964:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017968:	fb17 fa0a 	smulbb	sl, r7, sl
 801796c:	f805 9006 	strb.w	r9, [r5, r6]
 8017970:	442e      	add	r6, r5
 8017972:	78b7      	ldrb	r7, [r6, #2]
 8017974:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017978:	fb07 aa02 	mla	sl, r7, r2, sl
 801797c:	fb09 b902 	mla	r9, r9, r2, fp
 8017980:	fa1f fa8a 	uxth.w	sl, sl
 8017984:	fa1f f989 	uxth.w	r9, r9
 8017988:	f10a 0701 	add.w	r7, sl, #1
 801798c:	f109 0b01 	add.w	fp, r9, #1
 8017990:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017994:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017998:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801799c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80179a0:	f886 a002 	strb.w	sl, [r6, #2]
 80179a4:	f886 9001 	strb.w	r9, [r6, #1]
 80179a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80179aa:	4474      	add	r4, lr
 80179ac:	f108 0801 	add.w	r8, r8, #1
 80179b0:	4410      	add	r0, r2
 80179b2:	e762      	b.n	801787a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80179b4:	b005      	add	sp, #20
 80179b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80179ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179be:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80179c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80179c4:	9201      	str	r2, [sp, #4]
 80179c6:	6860      	ldr	r0, [r4, #4]
 80179c8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80179cc:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80179d0:	fb00 2505 	mla	r5, r0, r5, r2
 80179d4:	6822      	ldr	r2, [r4, #0]
 80179d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179da:	4415      	add	r5, r2
 80179dc:	f8dc 2000 	ldr.w	r2, [ip]
 80179e0:	9200      	str	r2, [sp, #0]
 80179e2:	2900      	cmp	r1, #0
 80179e4:	dc03      	bgt.n	80179ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80179e6:	9a01      	ldr	r2, [sp, #4]
 80179e8:	2a00      	cmp	r2, #0
 80179ea:	f340 812b 	ble.w	8017c44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80179ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80179f0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80179f4:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80179f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179fa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80179fe:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	dd0e      	ble.n	8017a24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017a06:	1422      	asrs	r2, r4, #16
 8017a08:	d405      	bmi.n	8017a16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017a0a:	4572      	cmp	r2, lr
 8017a0c:	da03      	bge.n	8017a16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017a0e:	1402      	asrs	r2, r0, #16
 8017a10:	d401      	bmi.n	8017a16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017a12:	42ba      	cmp	r2, r7
 8017a14:	db07      	blt.n	8017a26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017a16:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017a18:	3b01      	subs	r3, #1
 8017a1a:	3503      	adds	r5, #3
 8017a1c:	4414      	add	r4, r2
 8017a1e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a20:	4410      	add	r0, r2
 8017a22:	e7ee      	b.n	8017a02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017a24:	d06f      	beq.n	8017b06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017a26:	1e5a      	subs	r2, r3, #1
 8017a28:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017a2a:	fb06 4602 	mla	r6, r6, r2, r4
 8017a2e:	1436      	asrs	r6, r6, #16
 8017a30:	d45e      	bmi.n	8017af0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017a32:	4576      	cmp	r6, lr
 8017a34:	da5c      	bge.n	8017af0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017a36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017a38:	fb06 0202 	mla	r2, r6, r2, r0
 8017a3c:	1412      	asrs	r2, r2, #16
 8017a3e:	d457      	bmi.n	8017af0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017a40:	42ba      	cmp	r2, r7
 8017a42:	da55      	bge.n	8017af0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017a44:	1cee      	adds	r6, r5, #3
 8017a46:	469a      	mov	sl, r3
 8017a48:	f1ba 0f00 	cmp.w	sl, #0
 8017a4c:	dd56      	ble.n	8017afc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017a4e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017a52:	1427      	asrs	r7, r4, #16
 8017a54:	1402      	asrs	r2, r0, #16
 8017a56:	fb0e 7202 	mla	r2, lr, r2, r7
 8017a5a:	9f00      	ldr	r7, [sp, #0]
 8017a5c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8017a60:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8017a64:	d03c      	beq.n	8017ae0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017a66:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8017a6a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017a6e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017a72:	fa5f f28e 	uxtb.w	r2, lr
 8017a76:	b2ff      	uxtb	r7, r7
 8017a78:	f000 80dd 	beq.w	8017c36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8017a7c:	fa1f f882 	uxth.w	r8, r2
 8017a80:	43d2      	mvns	r2, r2
 8017a82:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8017a86:	fb17 f708 	smulbb	r7, r7, r8
 8017a8a:	b2d2      	uxtb	r2, r2
 8017a8c:	fb19 f908 	smulbb	r9, r9, r8
 8017a90:	fb0e 7702 	mla	r7, lr, r2, r7
 8017a94:	fb1b f808 	smulbb	r8, fp, r8
 8017a98:	b2bf      	uxth	r7, r7
 8017a9a:	f107 0e01 	add.w	lr, r7, #1
 8017a9e:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017aa2:	123f      	asrs	r7, r7, #8
 8017aa4:	f806 7c03 	strb.w	r7, [r6, #-3]
 8017aa8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8017aac:	fb07 9902 	mla	r9, r7, r2, r9
 8017ab0:	fa1f f989 	uxth.w	r9, r9
 8017ab4:	f109 0701 	add.w	r7, r9, #1
 8017ab8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017abc:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017ac0:	fb07 8802 	mla	r8, r7, r2, r8
 8017ac4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017ac8:	fa1f f888 	uxth.w	r8, r8
 8017acc:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017ad0:	f108 0201 	add.w	r2, r8, #1
 8017ad4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017ad8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017adc:	f806 8c01 	strb.w	r8, [r6, #-1]
 8017ae0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017ae2:	3603      	adds	r6, #3
 8017ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ae8:	4414      	add	r4, r2
 8017aea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017aec:	4410      	add	r0, r2
 8017aee:	e7ab      	b.n	8017a48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017af0:	f04f 0e00 	mov.w	lr, #0
 8017af4:	eba3 020e 	sub.w	r2, r3, lr
 8017af8:	2a00      	cmp	r2, #0
 8017afa:	dc3d      	bgt.n	8017b78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8017afc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b04:	441d      	add	r5, r3
 8017b06:	2900      	cmp	r1, #0
 8017b08:	f340 809c 	ble.w	8017c44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017b0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b16:	3901      	subs	r1, #1
 8017b18:	eeb0 6a62 	vmov.f32	s12, s5
 8017b1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017b20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b28:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8017b2c:	eeb0 6a43 	vmov.f32	s12, s6
 8017b30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b34:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8017b38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b50:	ee12 2a90 	vmov	r2, s5
 8017b54:	eef0 2a47 	vmov.f32	s5, s14
 8017b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b5c:	ee13 2a10 	vmov	r2, s6
 8017b60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017b62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b64:	eeb0 3a67 	vmov.f32	s6, s15
 8017b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b6c:	9a01      	ldr	r2, [sp, #4]
 8017b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b72:	bf08      	it	eq
 8017b74:	4613      	moveq	r3, r2
 8017b76:	e734      	b.n	80179e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8017b78:	1427      	asrs	r7, r4, #16
 8017b7a:	d44d      	bmi.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017b7c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017b80:	42be      	cmp	r6, r7
 8017b82:	dd49      	ble.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017b84:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017b88:	d446      	bmi.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017b8a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017b8e:	4542      	cmp	r2, r8
 8017b90:	dd42      	ble.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017b92:	b236      	sxth	r6, r6
 8017b94:	9a00      	ldr	r2, [sp, #0]
 8017b96:	fb08 7606 	mla	r6, r8, r6, r7
 8017b9a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017b9e:	0e3a      	lsrs	r2, r7, #24
 8017ba0:	d03a      	beq.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017ba2:	2aff      	cmp	r2, #255	@ 0xff
 8017ba4:	b2d6      	uxtb	r6, r2
 8017ba6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017baa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017bae:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017bb2:	b2ff      	uxtb	r7, r7
 8017bb4:	d037      	beq.n	8017c26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8017bb6:	fa1f f986 	uxth.w	r9, r6
 8017bba:	4472      	add	r2, lr
 8017bbc:	43f6      	mvns	r6, r6
 8017bbe:	f815 8002 	ldrb.w	r8, [r5, r2]
 8017bc2:	fb17 f709 	smulbb	r7, r7, r9
 8017bc6:	fb1a fa09 	smulbb	sl, sl, r9
 8017bca:	b2f6      	uxtb	r6, r6
 8017bcc:	fb1b f909 	smulbb	r9, fp, r9
 8017bd0:	fb08 7706 	mla	r7, r8, r6, r7
 8017bd4:	b2bf      	uxth	r7, r7
 8017bd6:	f107 0801 	add.w	r8, r7, #1
 8017bda:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8017bde:	123f      	asrs	r7, r7, #8
 8017be0:	54af      	strb	r7, [r5, r2]
 8017be2:	442a      	add	r2, r5
 8017be4:	7857      	ldrb	r7, [r2, #1]
 8017be6:	fb07 aa06 	mla	sl, r7, r6, sl
 8017bea:	fa1f fa8a 	uxth.w	sl, sl
 8017bee:	f10a 0701 	add.w	r7, sl, #1
 8017bf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017bf6:	7897      	ldrb	r7, [r2, #2]
 8017bf8:	fb07 9906 	mla	r9, r7, r6, r9
 8017bfc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017c00:	fa1f f989 	uxth.w	r9, r9
 8017c04:	f882 a001 	strb.w	sl, [r2, #1]
 8017c08:	f109 0601 	add.w	r6, r9, #1
 8017c0c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017c10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c14:	f882 9002 	strb.w	r9, [r2, #2]
 8017c18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017c1a:	f10e 0e01 	add.w	lr, lr, #1
 8017c1e:	4414      	add	r4, r2
 8017c20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017c22:	4410      	add	r0, r2
 8017c24:	e766      	b.n	8017af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017c26:	4472      	add	r2, lr
 8017c28:	54af      	strb	r7, [r5, r2]
 8017c2a:	442a      	add	r2, r5
 8017c2c:	f882 a001 	strb.w	sl, [r2, #1]
 8017c30:	f882 b002 	strb.w	fp, [r2, #2]
 8017c34:	e7f0      	b.n	8017c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017c36:	f806 7c03 	strb.w	r7, [r6, #-3]
 8017c3a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017c3e:	f806 bc01 	strb.w	fp, [r6, #-1]
 8017c42:	e74d      	b.n	8017ae0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017c44:	b003      	add	sp, #12
 8017c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017c4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c50:	b087      	sub	sp, #28
 8017c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017c56:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017c58:	9204      	str	r2, [sp, #16]
 8017c5a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017c5e:	6860      	ldr	r0, [r4, #4]
 8017c60:	9205      	str	r2, [sp, #20]
 8017c62:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8017c66:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8017c6a:	9101      	str	r1, [sp, #4]
 8017c6c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8017c70:	fb00 2505 	mla	r5, r0, r5, r2
 8017c74:	6822      	ldr	r2, [r4, #0]
 8017c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c7a:	4415      	add	r5, r2
 8017c7c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017c80:	3201      	adds	r2, #1
 8017c82:	f022 0201 	bic.w	r2, r2, #1
 8017c86:	9202      	str	r2, [sp, #8]
 8017c88:	f8dc 2000 	ldr.w	r2, [ip]
 8017c8c:	9203      	str	r2, [sp, #12]
 8017c8e:	9a01      	ldr	r2, [sp, #4]
 8017c90:	2a00      	cmp	r2, #0
 8017c92:	dc03      	bgt.n	8017c9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017c94:	9a04      	ldr	r2, [sp, #16]
 8017c96:	2a00      	cmp	r2, #0
 8017c98:	f340 8135 	ble.w	8017f06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017c9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017c9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017ca2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017ca6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017ca8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017cac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	dd0d      	ble.n	8017cd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017cb4:	1422      	asrs	r2, r4, #16
 8017cb6:	d405      	bmi.n	8017cc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017cb8:	4542      	cmp	r2, r8
 8017cba:	da03      	bge.n	8017cc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017cbc:	1402      	asrs	r2, r0, #16
 8017cbe:	d401      	bmi.n	8017cc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017cc0:	42ba      	cmp	r2, r7
 8017cc2:	db06      	blt.n	8017cd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017cc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017cc6:	4474      	add	r4, lr
 8017cc8:	3b01      	subs	r3, #1
 8017cca:	3503      	adds	r5, #3
 8017ccc:	4410      	add	r0, r2
 8017cce:	e7ef      	b.n	8017cb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017cd0:	d077      	beq.n	8017dc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8017cd2:	1e5a      	subs	r2, r3, #1
 8017cd4:	fb0e 4602 	mla	r6, lr, r2, r4
 8017cd8:	1436      	asrs	r6, r6, #16
 8017cda:	d469      	bmi.n	8017db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017cdc:	4546      	cmp	r6, r8
 8017cde:	da67      	bge.n	8017db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017ce0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017ce2:	fb06 0202 	mla	r2, r6, r2, r0
 8017ce6:	1412      	asrs	r2, r2, #16
 8017ce8:	d462      	bmi.n	8017db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017cea:	42ba      	cmp	r2, r7
 8017cec:	da60      	bge.n	8017db0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017cee:	1cee      	adds	r6, r5, #3
 8017cf0:	4699      	mov	r9, r3
 8017cf2:	f1b9 0f00 	cmp.w	r9, #0
 8017cf6:	dd5f      	ble.n	8017db8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017cf8:	1422      	asrs	r2, r4, #16
 8017cfa:	9902      	ldr	r1, [sp, #8]
 8017cfc:	1407      	asrs	r7, r0, #16
 8017cfe:	fb01 2707 	mla	r7, r1, r7, r2
 8017d02:	9903      	ldr	r1, [sp, #12]
 8017d04:	087a      	lsrs	r2, r7, #1
 8017d06:	5c8a      	ldrb	r2, [r1, r2]
 8017d08:	07f9      	lsls	r1, r7, #31
 8017d0a:	bf54      	ite	pl
 8017d0c:	f002 020f 	andpl.w	r2, r2, #15
 8017d10:	1112      	asrmi	r2, r2, #4
 8017d12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017d16:	b2d2      	uxtb	r2, r2
 8017d18:	2a00      	cmp	r2, #0
 8017d1a:	d042      	beq.n	8017da2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017d1c:	497b      	ldr	r1, [pc, #492]	@ (8017f0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017d1e:	680f      	ldr	r7, [r1, #0]
 8017d20:	9905      	ldr	r1, [sp, #20]
 8017d22:	fa5f fb87 	uxtb.w	fp, r7
 8017d26:	434a      	muls	r2, r1
 8017d28:	f102 0801 	add.w	r8, r2, #1
 8017d2c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8017d30:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8017d34:	1212      	asrs	r2, r2, #8
 8017d36:	fa1f fa82 	uxth.w	sl, r2
 8017d3a:	43d2      	mvns	r2, r2
 8017d3c:	fb1b fb0a 	smulbb	fp, fp, sl
 8017d40:	b2d2      	uxtb	r2, r2
 8017d42:	fb08 b802 	mla	r8, r8, r2, fp
 8017d46:	fa1f f888 	uxth.w	r8, r8
 8017d4a:	f108 0b01 	add.w	fp, r8, #1
 8017d4e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017d52:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017d56:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017d5a:	fb1b fb0a 	smulbb	fp, fp, sl
 8017d5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017d62:	fb17 fa0a 	smulbb	sl, r7, sl
 8017d66:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017d6a:	f806 8c03 	strb.w	r8, [r6, #-3]
 8017d6e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8017d72:	fb07 aa02 	mla	sl, r7, r2, sl
 8017d76:	fb08 b802 	mla	r8, r8, r2, fp
 8017d7a:	fa1f fa8a 	uxth.w	sl, sl
 8017d7e:	fa1f f888 	uxth.w	r8, r8
 8017d82:	f10a 0701 	add.w	r7, sl, #1
 8017d86:	f108 0b01 	add.w	fp, r8, #1
 8017d8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017d8e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017d92:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017d96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017d9a:	f806 ac01 	strb.w	sl, [r6, #-1]
 8017d9e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8017da2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017da4:	4474      	add	r4, lr
 8017da6:	3603      	adds	r6, #3
 8017da8:	f109 39ff 	add.w	r9, r9, #4294967295
 8017dac:	4410      	add	r0, r2
 8017dae:	e7a0      	b.n	8017cf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017db0:	2700      	movs	r7, #0
 8017db2:	1bda      	subs	r2, r3, r7
 8017db4:	2a00      	cmp	r2, #0
 8017db6:	dc3e      	bgt.n	8017e36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017db8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017dbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017dc0:	441d      	add	r5, r3
 8017dc2:	9b01      	ldr	r3, [sp, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	f340 809e 	ble.w	8017f06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017dca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017dd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017dd4:	eeb0 6a62 	vmov.f32	s12, s5
 8017dd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017ddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017de0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017de4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8017de8:	eeb0 6a43 	vmov.f32	s12, s6
 8017dec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017df0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8017df4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017df8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017dfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017e00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017e04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017e08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017e0c:	ee12 2a90 	vmov	r2, s5
 8017e10:	eef0 2a47 	vmov.f32	s5, s14
 8017e14:	fb92 fef3 	sdiv	lr, r2, r3
 8017e18:	ee13 2a10 	vmov	r2, s6
 8017e1c:	eeb0 3a67 	vmov.f32	s6, s15
 8017e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e24:	9314      	str	r3, [sp, #80]	@ 0x50
 8017e26:	9b01      	ldr	r3, [sp, #4]
 8017e28:	9a04      	ldr	r2, [sp, #16]
 8017e2a:	3b01      	subs	r3, #1
 8017e2c:	9301      	str	r3, [sp, #4]
 8017e2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017e30:	bf08      	it	eq
 8017e32:	4613      	moveq	r3, r2
 8017e34:	e72b      	b.n	8017c8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017e36:	1426      	asrs	r6, r4, #16
 8017e38:	d460      	bmi.n	8017efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017e3a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017e3e:	42b2      	cmp	r2, r6
 8017e40:	dd5c      	ble.n	8017efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017e42:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017e46:	d459      	bmi.n	8017efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017e48:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017e4c:	4542      	cmp	r2, r8
 8017e4e:	dd55      	ble.n	8017efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017e50:	9a02      	ldr	r2, [sp, #8]
 8017e52:	9903      	ldr	r1, [sp, #12]
 8017e54:	fb08 6602 	mla	r6, r8, r2, r6
 8017e58:	0872      	lsrs	r2, r6, #1
 8017e5a:	07f6      	lsls	r6, r6, #31
 8017e5c:	5c8a      	ldrb	r2, [r1, r2]
 8017e5e:	bf54      	ite	pl
 8017e60:	f002 020f 	andpl.w	r2, r2, #15
 8017e64:	1112      	asrmi	r2, r2, #4
 8017e66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017e6a:	b2d2      	uxtb	r2, r2
 8017e6c:	2a00      	cmp	r2, #0
 8017e6e:	d045      	beq.n	8017efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017e70:	4926      	ldr	r1, [pc, #152]	@ (8017f0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017e72:	f8d1 8000 	ldr.w	r8, [r1]
 8017e76:	9905      	ldr	r1, [sp, #20]
 8017e78:	fa5f fb88 	uxtb.w	fp, r8
 8017e7c:	434a      	muls	r2, r1
 8017e7e:	1c56      	adds	r6, r2, #1
 8017e80:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017e84:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017e88:	1212      	asrs	r2, r2, #8
 8017e8a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017e8e:	fa1f fa82 	uxth.w	sl, r2
 8017e92:	43d2      	mvns	r2, r2
 8017e94:	fb1b fb0a 	smulbb	fp, fp, sl
 8017e98:	b2d2      	uxtb	r2, r2
 8017e9a:	fb09 b902 	mla	r9, r9, r2, fp
 8017e9e:	fa1f f989 	uxth.w	r9, r9
 8017ea2:	f109 0b01 	add.w	fp, r9, #1
 8017ea6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017eaa:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8017eae:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8017eb2:	fb1b fb0a 	smulbb	fp, fp, sl
 8017eb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017eba:	fb18 fa0a 	smulbb	sl, r8, sl
 8017ebe:	f805 9006 	strb.w	r9, [r5, r6]
 8017ec2:	442e      	add	r6, r5
 8017ec4:	f896 8002 	ldrb.w	r8, [r6, #2]
 8017ec8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017ecc:	fb08 aa02 	mla	sl, r8, r2, sl
 8017ed0:	fb09 b902 	mla	r9, r9, r2, fp
 8017ed4:	fa1f fa8a 	uxth.w	sl, sl
 8017ed8:	fa1f f989 	uxth.w	r9, r9
 8017edc:	f10a 0801 	add.w	r8, sl, #1
 8017ee0:	f109 0b01 	add.w	fp, r9, #1
 8017ee4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8017ee8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017eec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017ef0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017ef4:	f886 a002 	strb.w	sl, [r6, #2]
 8017ef8:	f886 9001 	strb.w	r9, [r6, #1]
 8017efc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017efe:	4474      	add	r4, lr
 8017f00:	3701      	adds	r7, #1
 8017f02:	4410      	add	r0, r2
 8017f04:	e755      	b.n	8017db2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8017f06:	b007      	add	sp, #28
 8017f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0c:	240253e4 	.word	0x240253e4

08017f10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	b085      	sub	sp, #20
 8017f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017f1a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017f1c:	9203      	str	r2, [sp, #12]
 8017f1e:	6860      	ldr	r0, [r4, #4]
 8017f20:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017f24:	9100      	str	r1, [sp, #0]
 8017f26:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8017f2a:	fb00 2606 	mla	r6, r0, r6, r2
 8017f2e:	6822      	ldr	r2, [r4, #0]
 8017f30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017f34:	4416      	add	r6, r2
 8017f36:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017f3a:	3201      	adds	r2, #1
 8017f3c:	f022 0201 	bic.w	r2, r2, #1
 8017f40:	9201      	str	r2, [sp, #4]
 8017f42:	f8dc 2000 	ldr.w	r2, [ip]
 8017f46:	9202      	str	r2, [sp, #8]
 8017f48:	9a00      	ldr	r2, [sp, #0]
 8017f4a:	2a00      	cmp	r2, #0
 8017f4c:	dc03      	bgt.n	8017f56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017f4e:	9a03      	ldr	r2, [sp, #12]
 8017f50:	2a00      	cmp	r2, #0
 8017f52:	f340 8140 	ble.w	80181d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017f56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017f58:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017f5c:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8017f60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017f62:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017f66:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	dd0e      	ble.n	8017f8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017f6e:	142a      	asrs	r2, r5, #16
 8017f70:	d405      	bmi.n	8017f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f72:	4572      	cmp	r2, lr
 8017f74:	da03      	bge.n	8017f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f76:	1422      	asrs	r2, r4, #16
 8017f78:	d401      	bmi.n	8017f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f7a:	42ba      	cmp	r2, r7
 8017f7c:	db07      	blt.n	8017f8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017f80:	3b01      	subs	r3, #1
 8017f82:	3603      	adds	r6, #3
 8017f84:	4415      	add	r5, r2
 8017f86:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017f88:	4414      	add	r4, r2
 8017f8a:	e7ee      	b.n	8017f6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017f8c:	d072      	beq.n	8018074 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017f8e:	1e5a      	subs	r2, r3, #1
 8017f90:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017f92:	fb00 5002 	mla	r0, r0, r2, r5
 8017f96:	1400      	asrs	r0, r0, #16
 8017f98:	d463      	bmi.n	8018062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017f9a:	4570      	cmp	r0, lr
 8017f9c:	da61      	bge.n	8018062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017f9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017fa0:	fb00 4202 	mla	r2, r0, r2, r4
 8017fa4:	1412      	asrs	r2, r2, #16
 8017fa6:	d45c      	bmi.n	8018062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017fa8:	42ba      	cmp	r2, r7
 8017faa:	da5a      	bge.n	8018062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017fac:	1cf0      	adds	r0, r6, #3
 8017fae:	469a      	mov	sl, r3
 8017fb0:	f1ba 0f00 	cmp.w	sl, #0
 8017fb4:	dd59      	ble.n	801806a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017fb6:	142a      	asrs	r2, r5, #16
 8017fb8:	9901      	ldr	r1, [sp, #4]
 8017fba:	1427      	asrs	r7, r4, #16
 8017fbc:	fb01 2707 	mla	r7, r1, r7, r2
 8017fc0:	9902      	ldr	r1, [sp, #8]
 8017fc2:	087a      	lsrs	r2, r7, #1
 8017fc4:	5c8a      	ldrb	r2, [r1, r2]
 8017fc6:	07f9      	lsls	r1, r7, #31
 8017fc8:	bf54      	ite	pl
 8017fca:	f002 020f 	andpl.w	r2, r2, #15
 8017fce:	1112      	asrmi	r2, r2, #4
 8017fd0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017fd4:	b2d2      	uxtb	r2, r2
 8017fd6:	2a00      	cmp	r2, #0
 8017fd8:	d03b      	beq.n	8018052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017fda:	4980      	ldr	r1, [pc, #512]	@ (80181dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017fdc:	2aff      	cmp	r2, #255	@ 0xff
 8017fde:	680f      	ldr	r7, [r1, #0]
 8017fe0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017fe4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017fe8:	b2ff      	uxtb	r7, r7
 8017fea:	f000 80ed 	beq.w	80181c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017fee:	fa1f f882 	uxth.w	r8, r2
 8017ff2:	43d2      	mvns	r2, r2
 8017ff4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017ff8:	fb17 f708 	smulbb	r7, r7, r8
 8017ffc:	b2d2      	uxtb	r2, r2
 8017ffe:	fb19 f908 	smulbb	r9, r9, r8
 8018002:	fb0e 7702 	mla	r7, lr, r2, r7
 8018006:	fb1b f808 	smulbb	r8, fp, r8
 801800a:	b2bf      	uxth	r7, r7
 801800c:	f107 0e01 	add.w	lr, r7, #1
 8018010:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018014:	123f      	asrs	r7, r7, #8
 8018016:	f800 7c03 	strb.w	r7, [r0, #-3]
 801801a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801801e:	fb07 9902 	mla	r9, r7, r2, r9
 8018022:	fa1f f989 	uxth.w	r9, r9
 8018026:	f109 0701 	add.w	r7, r9, #1
 801802a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801802e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8018032:	fb07 8802 	mla	r8, r7, r2, r8
 8018036:	ea4f 2929 	mov.w	r9, r9, asr #8
 801803a:	fa1f f888 	uxth.w	r8, r8
 801803e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018042:	f108 0201 	add.w	r2, r8, #1
 8018046:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801804a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801804e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8018052:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018054:	3003      	adds	r0, #3
 8018056:	f10a 3aff 	add.w	sl, sl, #4294967295
 801805a:	4415      	add	r5, r2
 801805c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801805e:	4414      	add	r4, r2
 8018060:	e7a6      	b.n	8017fb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018062:	2700      	movs	r7, #0
 8018064:	1bda      	subs	r2, r3, r7
 8018066:	2a00      	cmp	r2, #0
 8018068:	dc40      	bgt.n	80180ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801806a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801806e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018072:	441e      	add	r6, r3
 8018074:	9b00      	ldr	r3, [sp, #0]
 8018076:	2b00      	cmp	r3, #0
 8018078:	f340 80ad 	ble.w	80181d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801807c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018086:	eeb0 6a62 	vmov.f32	s12, s5
 801808a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801808e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018092:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018096:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801809a:	eeb0 6a43 	vmov.f32	s12, s6
 801809e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80180a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80180a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80180aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80180ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80180b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80180b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80180ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80180be:	ee12 2a90 	vmov	r2, s5
 80180c2:	eef0 2a47 	vmov.f32	s5, s14
 80180c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80180ca:	ee13 2a10 	vmov	r2, s6
 80180ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80180d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180d2:	eeb0 3a67 	vmov.f32	s6, s15
 80180d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80180da:	9312      	str	r3, [sp, #72]	@ 0x48
 80180dc:	9b00      	ldr	r3, [sp, #0]
 80180de:	9a03      	ldr	r2, [sp, #12]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	9300      	str	r3, [sp, #0]
 80180e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180e6:	bf08      	it	eq
 80180e8:	4613      	moveq	r3, r2
 80180ea:	e72d      	b.n	8017f48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80180ec:	1428      	asrs	r0, r5, #16
 80180ee:	d45c      	bmi.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80180f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80180f4:	4282      	cmp	r2, r0
 80180f6:	dd58      	ble.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80180f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80180fc:	d455      	bmi.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80180fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018102:	4572      	cmp	r2, lr
 8018104:	dd51      	ble.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018106:	9a01      	ldr	r2, [sp, #4]
 8018108:	9902      	ldr	r1, [sp, #8]
 801810a:	fb0e 0002 	mla	r0, lr, r2, r0
 801810e:	0842      	lsrs	r2, r0, #1
 8018110:	07c0      	lsls	r0, r0, #31
 8018112:	5c8a      	ldrb	r2, [r1, r2]
 8018114:	bf54      	ite	pl
 8018116:	f002 020f 	andpl.w	r2, r2, #15
 801811a:	1112      	asrmi	r2, r2, #4
 801811c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018120:	b2d2      	uxtb	r2, r2
 8018122:	2a00      	cmp	r2, #0
 8018124:	d041      	beq.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018126:	492d      	ldr	r1, [pc, #180]	@ (80181dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018128:	2aff      	cmp	r2, #255	@ 0xff
 801812a:	6808      	ldr	r0, [r1, #0]
 801812c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018130:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018134:	fa5f fe80 	uxtb.w	lr, r0
 8018138:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801813c:	d03b      	beq.n	80181b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801813e:	fa1f f982 	uxth.w	r9, r2
 8018142:	4438      	add	r0, r7
 8018144:	43d2      	mvns	r2, r2
 8018146:	f816 8000 	ldrb.w	r8, [r6, r0]
 801814a:	fb1e fe09 	smulbb	lr, lr, r9
 801814e:	fb1a fa09 	smulbb	sl, sl, r9
 8018152:	b2d2      	uxtb	r2, r2
 8018154:	fb1b f909 	smulbb	r9, fp, r9
 8018158:	fb08 ee02 	mla	lr, r8, r2, lr
 801815c:	fa1f fe8e 	uxth.w	lr, lr
 8018160:	f10e 0801 	add.w	r8, lr, #1
 8018164:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8018168:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801816c:	f806 e000 	strb.w	lr, [r6, r0]
 8018170:	4430      	add	r0, r6
 8018172:	f890 e001 	ldrb.w	lr, [r0, #1]
 8018176:	fb0e aa02 	mla	sl, lr, r2, sl
 801817a:	fa1f fa8a 	uxth.w	sl, sl
 801817e:	f10a 0e01 	add.w	lr, sl, #1
 8018182:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8018186:	f890 e002 	ldrb.w	lr, [r0, #2]
 801818a:	fb0e 9902 	mla	r9, lr, r2, r9
 801818e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018192:	fa1f f989 	uxth.w	r9, r9
 8018196:	f880 a001 	strb.w	sl, [r0, #1]
 801819a:	f109 0201 	add.w	r2, r9, #1
 801819e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80181a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80181a6:	f880 9002 	strb.w	r9, [r0, #2]
 80181aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80181ac:	3701      	adds	r7, #1
 80181ae:	4415      	add	r5, r2
 80181b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80181b2:	4414      	add	r4, r2
 80181b4:	e756      	b.n	8018064 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80181b6:	4438      	add	r0, r7
 80181b8:	f806 e000 	strb.w	lr, [r6, r0]
 80181bc:	4430      	add	r0, r6
 80181be:	f880 a001 	strb.w	sl, [r0, #1]
 80181c2:	f880 b002 	strb.w	fp, [r0, #2]
 80181c6:	e7f0      	b.n	80181aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80181c8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80181cc:	f800 9c02 	strb.w	r9, [r0, #-2]
 80181d0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80181d4:	e73d      	b.n	8018052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80181d6:	b005      	add	sp, #20
 80181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181dc:	240253e4 	.word	0x240253e4

080181e0 <_ZN8touchgfx8LCD24bppD1Ev>:
 80181e0:	4770      	bx	lr

080181e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 80181e2:	4770      	bx	lr

080181e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 80181e4:	4770      	bx	lr

080181e6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 80181e6:	4770      	bx	lr

080181e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 80181e8:	4770      	bx	lr

080181ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80181ea:	4770      	bx	lr

080181ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80181ec:	4770      	bx	lr

080181ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80181ee:	4770      	bx	lr

080181f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80181f0:	4770      	bx	lr

080181f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80181f2:	4770      	bx	lr

080181f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80181f4:	4770      	bx	lr

080181f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80181f6:	4770      	bx	lr

080181f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80181f8:	4770      	bx	lr

080181fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80181fa:	4770      	bx	lr

080181fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80181fc:	4770      	bx	lr

080181fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80181fe:	4770      	bx	lr

08018200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018200:	4770      	bx	lr

08018202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018202:	4770      	bx	lr

08018204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018204:	4770      	bx	lr

08018206 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018206:	4770      	bx	lr

08018208 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018208:	4770      	bx	lr

0801820a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801820a:	4770      	bx	lr

0801820c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801820c:	4770      	bx	lr

0801820e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801820e:	4770      	bx	lr

08018210 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018210:	4770      	bx	lr
	...

08018214 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018216:	4606      	mov	r6, r0
 8018218:	b087      	sub	sp, #28
 801821a:	4615      	mov	r5, r2
 801821c:	461f      	mov	r7, r3
 801821e:	b353      	cbz	r3, 8018276 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018220:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018224:	2b00      	cmp	r3, #0
 8018226:	dd26      	ble.n	8018276 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018228:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801822c:	2b00      	cmp	r3, #0
 801822e:	dd22      	ble.n	8018276 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018230:	6808      	ldr	r0, [r1, #0]
 8018232:	aa04      	add	r2, sp, #16
 8018234:	6849      	ldr	r1, [r1, #4]
 8018236:	4c1b      	ldr	r4, [pc, #108]	@ (80182a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018238:	c203      	stmia	r2!, {r0, r1}
 801823a:	a804      	add	r0, sp, #16
 801823c:	f7fa fd56 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018240:	6820      	ldr	r0, [r4, #0]
 8018242:	6803      	ldr	r3, [r0, #0]
 8018244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018246:	4798      	blx	r3
 8018248:	2fff      	cmp	r7, #255	@ 0xff
 801824a:	d016      	beq.n	801827a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801824c:	f010 0f08 	tst.w	r0, #8
 8018250:	6820      	ldr	r0, [r4, #0]
 8018252:	d015      	beq.n	8018280 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8018254:	2400      	movs	r4, #0
 8018256:	6801      	ldr	r1, [r0, #0]
 8018258:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801825c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018260:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8018264:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018268:	9401      	str	r4, [sp, #4]
 801826a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801826e:	9400      	str	r4, [sp, #0]
 8018270:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8018272:	4629      	mov	r1, r5
 8018274:	47a0      	blx	r4
 8018276:	b007      	add	sp, #28
 8018278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801827a:	f010 0f02 	tst.w	r0, #2
 801827e:	e7e7      	b.n	8018250 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8018280:	6803      	ldr	r3, [r0, #0]
 8018282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018284:	4798      	blx	r3
 8018286:	4b08      	ldr	r3, [pc, #32]	@ (80182a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8018288:	4601      	mov	r1, r0
 801828a:	4630      	mov	r0, r6
 801828c:	881a      	ldrh	r2, [r3, #0]
 801828e:	6833      	ldr	r3, [r6, #0]
 8018290:	e9cd 5700 	strd	r5, r7, [sp]
 8018294:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018296:	ab04      	add	r3, sp, #16
 8018298:	47a8      	blx	r5
 801829a:	6820      	ldr	r0, [r4, #0]
 801829c:	6803      	ldr	r3, [r0, #0]
 801829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182a0:	4798      	blx	r3
 80182a2:	e7e8      	b.n	8018276 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80182a4:	240253d4 	.word	0x240253d4
 80182a8:	240253ce 	.word	0x240253ce

080182ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80182ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182b0:	b08b      	sub	sp, #44	@ 0x2c
 80182b2:	460d      	mov	r5, r1
 80182b4:	4616      	mov	r6, r2
 80182b6:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80182ba:	f1b8 0f00 	cmp.w	r8, #0
 80182be:	d047      	beq.n	8018350 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80182c0:	6810      	ldr	r0, [r2, #0]
 80182c2:	ac06      	add	r4, sp, #24
 80182c4:	6851      	ldr	r1, [r2, #4]
 80182c6:	4f51      	ldr	r7, [pc, #324]	@ (801840c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80182c8:	c403      	stmia	r4!, {r0, r1}
 80182ca:	6818      	ldr	r0, [r3, #0]
 80182cc:	ac08      	add	r4, sp, #32
 80182ce:	6859      	ldr	r1, [r3, #4]
 80182d0:	c403      	stmia	r4!, {r0, r1}
 80182d2:	a806      	add	r0, sp, #24
 80182d4:	f7fa fd0a 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80182d8:	4631      	mov	r1, r6
 80182da:	a808      	add	r0, sp, #32
 80182dc:	f7fa fd4a 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80182e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80182e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80182e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80182ec:	6838      	ldr	r0, [r7, #0]
 80182ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80182f2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80182f6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 80182fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80182fe:	440d      	add	r5, r1
 8018300:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018304:	440a      	add	r2, r1
 8018306:	f8ad 2020 	strh.w	r2, [sp, #32]
 801830a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801830e:	4413      	add	r3, r2
 8018310:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018314:	6803      	ldr	r3, [r0, #0]
 8018316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018318:	4798      	blx	r3
 801831a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801831e:	d01a      	beq.n	8018356 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8018320:	f010 0f04 	tst.w	r0, #4
 8018324:	6838      	ldr	r0, [r7, #0]
 8018326:	d019      	beq.n	801835c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8018328:	2100      	movs	r1, #0
 801832a:	6807      	ldr	r7, [r0, #0]
 801832c:	b2a4      	uxth	r4, r4
 801832e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018332:	b2b6      	uxth	r6, r6
 8018334:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8018338:	9401      	str	r4, [sp, #4]
 801833a:	9600      	str	r6, [sp, #0]
 801833c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018340:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8018344:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018348:	9102      	str	r1, [sp, #8]
 801834a:	4629      	mov	r1, r5
 801834c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801834e:	47a0      	blx	r4
 8018350:	b00b      	add	sp, #44	@ 0x2c
 8018352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018356:	f010 0f01 	tst.w	r0, #1
 801835a:	e7e3      	b.n	8018324 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801835c:	6803      	ldr	r3, [r0, #0]
 801835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018360:	4798      	blx	r3
 8018362:	4a2b      	ldr	r2, [pc, #172]	@ (8018410 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8018364:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8018368:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801836c:	8813      	ldrh	r3, [r2, #0]
 801836e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8018372:	fb03 f404 	mul.w	r4, r3, r4
 8018376:	fb03 c101 	mla	r1, r3, r1, ip
 801837a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801837e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018382:	4408      	add	r0, r1
 8018384:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8018388:	4404      	add	r4, r0
 801838a:	d02e      	beq.n	80183ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801838c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8018390:	1b9b      	subs	r3, r3, r6
 8018392:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8018396:	1b96      	subs	r6, r2, r6
 8018398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801839c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80183a0:	42a0      	cmp	r0, r4
 80183a2:	d22d      	bcs.n	8018400 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80183a4:	eb00 0e01 	add.w	lr, r0, r1
 80183a8:	4570      	cmp	r0, lr
 80183aa:	d210      	bcs.n	80183ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80183ac:	f890 9000 	ldrb.w	r9, [r0]
 80183b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80183b4:	fb19 f90c 	smulbb	r9, r9, ip
 80183b8:	fb02 9208 	mla	r2, r2, r8, r9
 80183bc:	b292      	uxth	r2, r2
 80183be:	f102 0901 	add.w	r9, r2, #1
 80183c2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80183c6:	1212      	asrs	r2, r2, #8
 80183c8:	f800 2b01 	strb.w	r2, [r0], #1
 80183cc:	e7ec      	b.n	80183a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80183ce:	4418      	add	r0, r3
 80183d0:	4435      	add	r5, r6
 80183d2:	e7e5      	b.n	80183a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80183d4:	8813      	ldrh	r3, [r2, #0]
 80183d6:	1b9b      	subs	r3, r3, r6
 80183d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183dc:	4418      	add	r0, r3
 80183de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80183e2:	1b9b      	subs	r3, r3, r6
 80183e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183e8:	441d      	add	r5, r3
 80183ea:	42a0      	cmp	r0, r4
 80183ec:	d208      	bcs.n	8018400 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80183ee:	eb00 0c01 	add.w	ip, r0, r1
 80183f2:	4560      	cmp	r0, ip
 80183f4:	d2ee      	bcs.n	80183d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80183f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80183fa:	f800 3b01 	strb.w	r3, [r0], #1
 80183fe:	e7f8      	b.n	80183f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8018400:	6838      	ldr	r0, [r7, #0]
 8018402:	6803      	ldr	r3, [r0, #0]
 8018404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018406:	4798      	blx	r3
 8018408:	e7a2      	b.n	8018350 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801840a:	bf00      	nop
 801840c:	240253d4 	.word	0x240253d4
 8018410:	240253ce 	.word	0x240253ce

08018414 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8018414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018416:	2300      	movs	r3, #0
 8018418:	b085      	sub	sp, #20
 801841a:	9300      	str	r3, [sp, #0]
 801841c:	4b41      	ldr	r3, [pc, #260]	@ (8018524 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d136      	bne.n	8018492 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8018424:	4a40      	ldr	r2, [pc, #256]	@ (8018528 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018426:	f9b2 2000 	ldrsh.w	r2, [r2]
 801842a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d131      	bne.n	8018496 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8018432:	4b3e      	ldr	r3, [pc, #248]	@ (801852c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8018434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018438:	ac02      	add	r4, sp, #8
 801843a:	6808      	ldr	r0, [r1, #0]
 801843c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018440:	ab02      	add	r3, sp, #8
 8018442:	6849      	ldr	r1, [r1, #4]
 8018444:	4d3a      	ldr	r5, [pc, #232]	@ (8018530 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8018446:	c303      	stmia	r3!, {r0, r1}
 8018448:	4669      	mov	r1, sp
 801844a:	4620      	mov	r0, r4
 801844c:	f7fa fc92 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018450:	4668      	mov	r0, sp
 8018452:	f7fa fc4b 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018456:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801845a:	f8bd 2000 	ldrh.w	r2, [sp]
 801845e:	462e      	mov	r6, r5
 8018460:	6828      	ldr	r0, [r5, #0]
 8018462:	4413      	add	r3, r2
 8018464:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018468:	f8ad 3008 	strh.w	r3, [sp, #8]
 801846c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018470:	4413      	add	r3, r2
 8018472:	f8ad 300a 	strh.w	r3, [sp, #10]
 8018476:	6803      	ldr	r3, [r0, #0]
 8018478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801847a:	4798      	blx	r3
 801847c:	f010 0f01 	tst.w	r0, #1
 8018480:	d00b      	beq.n	801849a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8018482:	6828      	ldr	r0, [r5, #0]
 8018484:	6803      	ldr	r3, [r0, #0]
 8018486:	e894 0006 	ldmia.w	r4, {r1, r2}
 801848a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801848c:	4798      	blx	r3
 801848e:	b005      	add	sp, #20
 8018490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018492:	4a26      	ldr	r2, [pc, #152]	@ (801852c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8018494:	e7c7      	b.n	8018426 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8018496:	4b24      	ldr	r3, [pc, #144]	@ (8018528 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018498:	e7cc      	b.n	8018434 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801849a:	6830      	ldr	r0, [r6, #0]
 801849c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80184a0:	6803      	ldr	r3, [r0, #0]
 80184a2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80184a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184a8:	4798      	blx	r3
 80184aa:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80184ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80184b2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80184b6:	fb14 3402 	smlabb	r4, r4, r2, r3
 80184ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80184be:	4404      	add	r4, r0
 80184c0:	6830      	ldr	r0, [r6, #0]
 80184c2:	6803      	ldr	r3, [r0, #0]
 80184c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184c6:	4798      	blx	r3
 80184c8:	4917      	ldr	r1, [pc, #92]	@ (8018528 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80184ca:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80184ce:	880b      	ldrh	r3, [r1, #0]
 80184d0:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80184d4:	fb03 c202 	mla	r2, r3, r2, ip
 80184d8:	437b      	muls	r3, r7
 80184da:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80184de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80184e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80184e6:	4410      	add	r0, r2
 80184e8:	18c2      	adds	r2, r0, r3
 80184ea:	4290      	cmp	r0, r2
 80184ec:	d214      	bcs.n	8018518 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80184ee:	eb00 0c07 	add.w	ip, r0, r7
 80184f2:	4560      	cmp	r0, ip
 80184f4:	d204      	bcs.n	8018500 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80184f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184fa:	f800 3b01 	strb.w	r3, [r0], #1
 80184fe:	e7f8      	b.n	80184f2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8018500:	880b      	ldrh	r3, [r1, #0]
 8018502:	1b5b      	subs	r3, r3, r5
 8018504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018508:	4418      	add	r0, r3
 801850a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801850e:	1b5b      	subs	r3, r3, r5
 8018510:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018514:	441c      	add	r4, r3
 8018516:	e7e8      	b.n	80184ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8018518:	6830      	ldr	r0, [r6, #0]
 801851a:	6803      	ldr	r3, [r0, #0]
 801851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801851e:	4798      	blx	r3
 8018520:	e7b5      	b.n	801848e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8018522:	bf00      	nop
 8018524:	240253cc 	.word	0x240253cc
 8018528:	240253ce 	.word	0x240253ce
 801852c:	240253d0 	.word	0x240253d0
 8018530:	240253d4 	.word	0x240253d4

08018534 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	b08f      	sub	sp, #60	@ 0x3c
 801853a:	461c      	mov	r4, r3
 801853c:	9203      	str	r2, [sp, #12]
 801853e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018542:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018544:	6820      	ldr	r0, [r4, #0]
 8018546:	9100      	str	r1, [sp, #0]
 8018548:	9204      	str	r2, [sp, #16]
 801854a:	aa0a      	add	r2, sp, #40	@ 0x28
 801854c:	6861      	ldr	r1, [r4, #4]
 801854e:	c203      	stmia	r2!, {r0, r1}
 8018550:	6818      	ldr	r0, [r3, #0]
 8018552:	aa0c      	add	r2, sp, #48	@ 0x30
 8018554:	6859      	ldr	r1, [r3, #4]
 8018556:	c203      	stmia	r2!, {r0, r1}
 8018558:	a80a      	add	r0, sp, #40	@ 0x28
 801855a:	f7fa fbc7 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801855e:	4621      	mov	r1, r4
 8018560:	a80c      	add	r0, sp, #48	@ 0x30
 8018562:	f7fa fc07 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018566:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801856a:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801856e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018572:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8018576:	bfdb      	ittet	le
 8018578:	b2b3      	uxthle	r3, r6
 801857a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801857e:	2301      	movgt	r3, #1
 8018580:	fb92 f3f3 	sdivle	r3, r2, r3
 8018584:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018588:	441d      	add	r5, r3
 801858a:	fb92 f1f3 	sdiv	r1, r2, r3
 801858e:	fa1f fc81 	uxth.w	ip, r1
 8018592:	3d01      	subs	r5, #1
 8018594:	fb0c 2413 	mls	r4, ip, r3, r2
 8018598:	4661      	mov	r1, ip
 801859a:	fb14 f406 	smulbb	r4, r4, r6
 801859e:	4404      	add	r4, r0
 80185a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80185a4:	b2a4      	uxth	r4, r4
 80185a6:	b131      	cbz	r1, 80185b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80185a8:	9b03      	ldr	r3, [sp, #12]
 80185aa:	9900      	ldr	r1, [sp, #0]
 80185ac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80185b0:	ba1b      	rev	r3, r3
 80185b2:	4419      	add	r1, r3
 80185b4:	9100      	str	r1, [sp, #0]
 80185b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80185ba:	b2ad      	uxth	r5, r5
 80185bc:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80185c0:	4418      	add	r0, r3
 80185c2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80185c6:	00ad      	lsls	r5, r5, #2
 80185c8:	441a      	add	r2, r3
 80185ca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80185ce:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80185d2:	9301      	str	r3, [sp, #4]
 80185d4:	4b79      	ldr	r3, [pc, #484]	@ (80187bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80185d6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80185da:	6818      	ldr	r0, [r3, #0]
 80185dc:	6803      	ldr	r3, [r0, #0]
 80185de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185e0:	4798      	blx	r3
 80185e2:	4a77      	ldr	r2, [pc, #476]	@ (80187c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80185e4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80185e8:	2c00      	cmp	r4, #0
 80185ea:	8813      	ldrh	r3, [r2, #0]
 80185ec:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80185f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80185f2:	fb03 c101 	mla	r1, r3, r1, ip
 80185f6:	fb06 f303 	mul.w	r3, r6, r3
 80185fa:	bf18      	it	ne
 80185fc:	2600      	movne	r6, #0
 80185fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018602:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018606:	4408      	add	r0, r1
 8018608:	4403      	add	r3, r0
 801860a:	9306      	str	r3, [sp, #24]
 801860c:	f105 0304 	add.w	r3, r5, #4
 8018610:	9305      	str	r3, [sp, #20]
 8018612:	9b01      	ldr	r3, [sp, #4]
 8018614:	bf08      	it	eq
 8018616:	461e      	moveq	r6, r3
 8018618:	2300      	movs	r3, #0
 801861a:	b2b6      	uxth	r6, r6
 801861c:	9302      	str	r3, [sp, #8]
 801861e:	9a06      	ldr	r2, [sp, #24]
 8018620:	4290      	cmp	r0, r2
 8018622:	f080 80c2 	bcs.w	80187aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8018626:	b963      	cbnz	r3, 8018642 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8018628:	9b00      	ldr	r3, [sp, #0]
 801862a:	781a      	ldrb	r2, [r3, #0]
 801862c:	0993      	lsrs	r3, r2, #6
 801862e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018632:	9202      	str	r2, [sp, #8]
 8018634:	1e5a      	subs	r2, r3, #1
 8018636:	2a02      	cmp	r2, #2
 8018638:	d815      	bhi.n	8018666 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801863a:	9a00      	ldr	r2, [sp, #0]
 801863c:	b29b      	uxth	r3, r3
 801863e:	3201      	adds	r2, #1
 8018640:	9200      	str	r2, [sp, #0]
 8018642:	b1b4      	cbz	r4, 8018672 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8018644:	429c      	cmp	r4, r3
 8018646:	bf91      	iteee	ls
 8018648:	1b1c      	subls	r4, r3, r4
 801864a:	1ae4      	subhi	r4, r4, r3
 801864c:	4635      	movhi	r5, r6
 801864e:	f04f 0e00 	movhi.w	lr, #0
 8018652:	bf9b      	ittet	ls
 8018654:	fa1f fe84 	uxthls.w	lr, r4
 8018658:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801865c:	b2a4      	uxthhi	r4, r4
 801865e:	2400      	movls	r4, #0
 8018660:	4673      	mov	r3, lr
 8018662:	462e      	mov	r6, r5
 8018664:	e7db      	b.n	801861e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8018666:	9a00      	ldr	r2, [sp, #0]
 8018668:	9b00      	ldr	r3, [sp, #0]
 801866a:	3202      	adds	r2, #2
 801866c:	785b      	ldrb	r3, [r3, #1]
 801866e:	9200      	str	r2, [sp, #0]
 8018670:	e7e7      	b.n	8018642 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8018672:	2204      	movs	r2, #4
 8018674:	9905      	ldr	r1, [sp, #20]
 8018676:	429e      	cmp	r6, r3
 8018678:	4615      	mov	r5, r2
 801867a:	9a02      	ldr	r2, [sp, #8]
 801867c:	bf94      	ite	ls
 801867e:	eba3 0e06 	subls.w	lr, r3, r6
 8018682:	46a6      	movhi	lr, r4
 8018684:	fb15 1202 	smlabb	r2, r5, r2, r1
 8018688:	9903      	ldr	r1, [sp, #12]
 801868a:	bf8c      	ite	hi
 801868c:	1af5      	subhi	r5, r6, r3
 801868e:	fa1f fe8e 	uxthls.w	lr, lr
 8018692:	f851 c002 	ldr.w	ip, [r1, r2]
 8018696:	bf9a      	itte	ls
 8018698:	4625      	movls	r5, r4
 801869a:	4632      	movls	r2, r6
 801869c:	b2ad      	uxthhi	r5, r5
 801869e:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80186a2:	bf88      	it	hi
 80186a4:	461a      	movhi	r2, r3
 80186a6:	b179      	cbz	r1, 80186c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80186a8:	29ff      	cmp	r1, #255	@ 0xff
 80186aa:	fa5f f98c 	uxtb.w	r9, ip
 80186ae:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80186b2:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80186b6:	d126      	bne.n	8018706 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80186b8:	9f04      	ldr	r7, [sp, #16]
 80186ba:	2fff      	cmp	r7, #255	@ 0xff
 80186bc:	d123      	bne.n	8018706 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80186be:	4682      	mov	sl, r0
 80186c0:	4611      	mov	r1, r2
 80186c2:	f10a 0a03 	add.w	sl, sl, #3
 80186c6:	b9a9      	cbnz	r1, 80186f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80186c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80186cc:	429e      	cmp	r6, r3
 80186ce:	4410      	add	r0, r2
 80186d0:	d8c6      	bhi.n	8018660 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80186d2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80186d6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80186da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186dc:	1b64      	subs	r4, r4, r5
 80186de:	9a01      	ldr	r2, [sp, #4]
 80186e0:	881b      	ldrh	r3, [r3, #0]
 80186e2:	b2a4      	uxth	r4, r4
 80186e4:	1a9b      	subs	r3, r3, r2
 80186e6:	2c00      	cmp	r4, #0
 80186e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186ec:	bf18      	it	ne
 80186ee:	2500      	movne	r5, #0
 80186f0:	4418      	add	r0, r3
 80186f2:	e7b5      	b.n	8018660 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80186f4:	3901      	subs	r1, #1
 80186f6:	f80a 9c03 	strb.w	r9, [sl, #-3]
 80186fa:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80186fe:	f80a cc01 	strb.w	ip, [sl, #-1]
 8018702:	b289      	uxth	r1, r1
 8018704:	e7dd      	b.n	80186c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8018706:	9f04      	ldr	r7, [sp, #16]
 8018708:	fb07 fa01 	mul.w	sl, r7, r1
 801870c:	f10a 0101 	add.w	r1, sl, #1
 8018710:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8018714:	1209      	asrs	r1, r1, #8
 8018716:	ea6f 0a01 	mvn.w	sl, r1
 801871a:	b289      	uxth	r1, r1
 801871c:	fb19 f901 	smulbb	r9, r9, r1
 8018720:	fa5f fa8a 	uxtb.w	sl, sl
 8018724:	fb18 f801 	smulbb	r8, r8, r1
 8018728:	fb1c f101 	smulbb	r1, ip, r1
 801872c:	fa1f f789 	uxth.w	r7, r9
 8018730:	4684      	mov	ip, r0
 8018732:	4691      	mov	r9, r2
 8018734:	9707      	str	r7, [sp, #28]
 8018736:	b289      	uxth	r1, r1
 8018738:	fa1f f788 	uxth.w	r7, r8
 801873c:	9708      	str	r7, [sp, #32]
 801873e:	f10c 0c03 	add.w	ip, ip, #3
 8018742:	f1b9 0f00 	cmp.w	r9, #0
 8018746:	d0bf      	beq.n	80186c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8018748:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801874c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018750:	9f07      	ldr	r7, [sp, #28]
 8018752:	fa1f f989 	uxth.w	r9, r9
 8018756:	fb08 780a 	mla	r8, r8, sl, r7
 801875a:	9f08      	ldr	r7, [sp, #32]
 801875c:	fa1f f888 	uxth.w	r8, r8
 8018760:	f108 0b01 	add.w	fp, r8, #1
 8018764:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018768:	ea4f 2828 	mov.w	r8, r8, asr #8
 801876c:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8018770:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8018774:	fb08 780a 	mla	r8, r8, sl, r7
 8018778:	fa1f f888 	uxth.w	r8, r8
 801877c:	f108 0b01 	add.w	fp, r8, #1
 8018780:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018784:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018788:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801878c:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8018790:	fb08 180a 	mla	r8, r8, sl, r1
 8018794:	fa1f f888 	uxth.w	r8, r8
 8018798:	f108 0b01 	add.w	fp, r8, #1
 801879c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80187a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80187a4:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80187a8:	e7c9      	b.n	801873e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80187aa:	4b04      	ldr	r3, [pc, #16]	@ (80187bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80187ac:	6818      	ldr	r0, [r3, #0]
 80187ae:	6803      	ldr	r3, [r0, #0]
 80187b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187b2:	4798      	blx	r3
 80187b4:	b00f      	add	sp, #60	@ 0x3c
 80187b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ba:	bf00      	nop
 80187bc:	240253d4 	.word	0x240253d4
 80187c0:	240253ce 	.word	0x240253ce

080187c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80187c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c8:	b089      	sub	sp, #36	@ 0x24
 80187ca:	4607      	mov	r7, r0
 80187cc:	4689      	mov	r9, r1
 80187ce:	4692      	mov	sl, r2
 80187d0:	ac08      	add	r4, sp, #32
 80187d2:	461e      	mov	r6, r3
 80187d4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80187d8:	4620      	mov	r0, r4
 80187da:	f7fd ff77 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	4605      	mov	r5, r0
 80187e2:	4620      	mov	r0, r4
 80187e4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80187e8:	f7fd fe7e 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187ec:	4683      	mov	fp, r0
 80187ee:	4620      	mov	r0, r4
 80187f0:	f7fd feae 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187f4:	4653      	mov	r3, sl
 80187f6:	464a      	mov	r2, r9
 80187f8:	4639      	mov	r1, r7
 80187fa:	9500      	str	r5, [sp, #0]
 80187fc:	e9cd b001 	strd	fp, r0, [sp, #4]
 8018800:	a806      	add	r0, sp, #24
 8018802:	47c0      	blx	r8
 8018804:	a906      	add	r1, sp, #24
 8018806:	4630      	mov	r0, r6
 8018808:	f7fd fd52 	bl	80162b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801880c:	4628      	mov	r0, r5
 801880e:	b009      	add	sp, #36	@ 0x24
 8018810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018814 <_ZN8touchgfx8LCD24bppD0Ev>:
 8018814:	b510      	push	{r4, lr}
 8018816:	4604      	mov	r4, r0
 8018818:	216c      	movs	r1, #108	@ 0x6c
 801881a:	f008 fc60 	bl	80210de <_ZdlPvj>
 801881e:	4620      	mov	r0, r4
 8018820:	bd10      	pop	{r4, pc}

08018822 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8018822:	b510      	push	{r4, lr}
 8018824:	4604      	mov	r4, r0
 8018826:	2104      	movs	r1, #4
 8018828:	f008 fc59 	bl	80210de <_ZdlPvj>
 801882c:	4620      	mov	r0, r4
 801882e:	bd10      	pop	{r4, pc}

08018830 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8018830:	b510      	push	{r4, lr}
 8018832:	4604      	mov	r4, r0
 8018834:	2104      	movs	r1, #4
 8018836:	f008 fc52 	bl	80210de <_ZdlPvj>
 801883a:	4620      	mov	r0, r4
 801883c:	bd10      	pop	{r4, pc}

0801883e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801883e:	b510      	push	{r4, lr}
 8018840:	4604      	mov	r4, r0
 8018842:	f640 0144 	movw	r1, #2116	@ 0x844
 8018846:	f008 fc4a 	bl	80210de <_ZdlPvj>
 801884a:	4620      	mov	r0, r4
 801884c:	bd10      	pop	{r4, pc}

0801884e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801884e:	b510      	push	{r4, lr}
 8018850:	4604      	mov	r4, r0
 8018852:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8018856:	f008 fc42 	bl	80210de <_ZdlPvj>
 801885a:	4620      	mov	r0, r4
 801885c:	bd10      	pop	{r4, pc}

0801885e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801885e:	b510      	push	{r4, lr}
 8018860:	4604      	mov	r4, r0
 8018862:	2104      	movs	r1, #4
 8018864:	f008 fc3b 	bl	80210de <_ZdlPvj>
 8018868:	4620      	mov	r0, r4
 801886a:	bd10      	pop	{r4, pc}

0801886c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801886c:	b510      	push	{r4, lr}
 801886e:	4604      	mov	r4, r0
 8018870:	2104      	movs	r1, #4
 8018872:	f008 fc34 	bl	80210de <_ZdlPvj>
 8018876:	4620      	mov	r0, r4
 8018878:	bd10      	pop	{r4, pc}

0801887a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801887a:	b510      	push	{r4, lr}
 801887c:	4604      	mov	r4, r0
 801887e:	2104      	movs	r1, #4
 8018880:	f008 fc2d 	bl	80210de <_ZdlPvj>
 8018884:	4620      	mov	r0, r4
 8018886:	bd10      	pop	{r4, pc}

08018888 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8018888:	b510      	push	{r4, lr}
 801888a:	4604      	mov	r4, r0
 801888c:	2104      	movs	r1, #4
 801888e:	f008 fc26 	bl	80210de <_ZdlPvj>
 8018892:	4620      	mov	r0, r4
 8018894:	bd10      	pop	{r4, pc}

08018896 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018896:	b510      	push	{r4, lr}
 8018898:	4604      	mov	r4, r0
 801889a:	2104      	movs	r1, #4
 801889c:	f008 fc1f 	bl	80210de <_ZdlPvj>
 80188a0:	4620      	mov	r0, r4
 80188a2:	bd10      	pop	{r4, pc}

080188a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80188a4:	b510      	push	{r4, lr}
 80188a6:	4604      	mov	r4, r0
 80188a8:	2104      	movs	r1, #4
 80188aa:	f008 fc18 	bl	80210de <_ZdlPvj>
 80188ae:	4620      	mov	r0, r4
 80188b0:	bd10      	pop	{r4, pc}

080188b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80188b2:	b510      	push	{r4, lr}
 80188b4:	4604      	mov	r4, r0
 80188b6:	2104      	movs	r1, #4
 80188b8:	f008 fc11 	bl	80210de <_ZdlPvj>
 80188bc:	4620      	mov	r0, r4
 80188be:	bd10      	pop	{r4, pc}

080188c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80188c0:	b510      	push	{r4, lr}
 80188c2:	4604      	mov	r4, r0
 80188c4:	2104      	movs	r1, #4
 80188c6:	f008 fc0a 	bl	80210de <_ZdlPvj>
 80188ca:	4620      	mov	r0, r4
 80188cc:	bd10      	pop	{r4, pc}

080188ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80188ce:	b510      	push	{r4, lr}
 80188d0:	4604      	mov	r4, r0
 80188d2:	2104      	movs	r1, #4
 80188d4:	f008 fc03 	bl	80210de <_ZdlPvj>
 80188d8:	4620      	mov	r0, r4
 80188da:	bd10      	pop	{r4, pc}

080188dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80188dc:	b510      	push	{r4, lr}
 80188de:	4604      	mov	r4, r0
 80188e0:	2104      	movs	r1, #4
 80188e2:	f008 fbfc 	bl	80210de <_ZdlPvj>
 80188e6:	4620      	mov	r0, r4
 80188e8:	bd10      	pop	{r4, pc}

080188ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80188ea:	b510      	push	{r4, lr}
 80188ec:	4604      	mov	r4, r0
 80188ee:	2104      	movs	r1, #4
 80188f0:	f008 fbf5 	bl	80210de <_ZdlPvj>
 80188f4:	4620      	mov	r0, r4
 80188f6:	bd10      	pop	{r4, pc}

080188f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80188f8:	b510      	push	{r4, lr}
 80188fa:	4604      	mov	r4, r0
 80188fc:	2104      	movs	r1, #4
 80188fe:	f008 fbee 	bl	80210de <_ZdlPvj>
 8018902:	4620      	mov	r0, r4
 8018904:	bd10      	pop	{r4, pc}

08018906 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018906:	b510      	push	{r4, lr}
 8018908:	4604      	mov	r4, r0
 801890a:	2104      	movs	r1, #4
 801890c:	f008 fbe7 	bl	80210de <_ZdlPvj>
 8018910:	4620      	mov	r0, r4
 8018912:	bd10      	pop	{r4, pc}

08018914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018914:	b510      	push	{r4, lr}
 8018916:	4604      	mov	r4, r0
 8018918:	2104      	movs	r1, #4
 801891a:	f008 fbe0 	bl	80210de <_ZdlPvj>
 801891e:	4620      	mov	r0, r4
 8018920:	bd10      	pop	{r4, pc}

08018922 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018922:	b510      	push	{r4, lr}
 8018924:	4604      	mov	r4, r0
 8018926:	2104      	movs	r1, #4
 8018928:	f008 fbd9 	bl	80210de <_ZdlPvj>
 801892c:	4620      	mov	r0, r4
 801892e:	bd10      	pop	{r4, pc}

08018930 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018930:	b510      	push	{r4, lr}
 8018932:	4604      	mov	r4, r0
 8018934:	2104      	movs	r1, #4
 8018936:	f008 fbd2 	bl	80210de <_ZdlPvj>
 801893a:	4620      	mov	r0, r4
 801893c:	bd10      	pop	{r4, pc}

0801893e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801893e:	b510      	push	{r4, lr}
 8018940:	4604      	mov	r4, r0
 8018942:	2104      	movs	r1, #4
 8018944:	f008 fbcb 	bl	80210de <_ZdlPvj>
 8018948:	4620      	mov	r0, r4
 801894a:	bd10      	pop	{r4, pc}

0801894c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801894c:	b510      	push	{r4, lr}
 801894e:	4604      	mov	r4, r0
 8018950:	2104      	movs	r1, #4
 8018952:	f008 fbc4 	bl	80210de <_ZdlPvj>
 8018956:	4620      	mov	r0, r4
 8018958:	bd10      	pop	{r4, pc}

0801895a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801895a:	b510      	push	{r4, lr}
 801895c:	4604      	mov	r4, r0
 801895e:	2104      	movs	r1, #4
 8018960:	f008 fbbd 	bl	80210de <_ZdlPvj>
 8018964:	4620      	mov	r0, r4
 8018966:	bd10      	pop	{r4, pc}

08018968 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8018968:	b510      	push	{r4, lr}
 801896a:	4604      	mov	r4, r0
 801896c:	2104      	movs	r1, #4
 801896e:	f008 fbb6 	bl	80210de <_ZdlPvj>
 8018972:	4620      	mov	r0, r4
 8018974:	bd10      	pop	{r4, pc}
	...

08018978 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801897c:	b08f      	sub	sp, #60	@ 0x3c
 801897e:	461c      	mov	r4, r3
 8018980:	460e      	mov	r6, r1
 8018982:	9206      	str	r2, [sp, #24]
 8018984:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018988:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801898a:	9202      	str	r2, [sp, #8]
 801898c:	2a00      	cmp	r2, #0
 801898e:	f000 8128 	beq.w	8018be2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8018992:	6820      	ldr	r0, [r4, #0]
 8018994:	aa0a      	add	r2, sp, #40	@ 0x28
 8018996:	6861      	ldr	r1, [r4, #4]
 8018998:	c203      	stmia	r2!, {r0, r1}
 801899a:	6818      	ldr	r0, [r3, #0]
 801899c:	aa0c      	add	r2, sp, #48	@ 0x30
 801899e:	6859      	ldr	r1, [r3, #4]
 80189a0:	c203      	stmia	r2!, {r0, r1}
 80189a2:	a80a      	add	r0, sp, #40	@ 0x28
 80189a4:	f7fa f9a2 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80189a8:	4621      	mov	r1, r4
 80189aa:	a80c      	add	r0, sp, #48	@ 0x30
 80189ac:	f7fa f9e2 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80189b0:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80189b4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80189b8:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80189bc:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80189c0:	bfdb      	ittet	le
 80189c2:	b2bb      	uxthle	r3, r7
 80189c4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80189c8:	2301      	movgt	r3, #1
 80189ca:	fb92 f3f3 	sdivle	r3, r2, r3
 80189ce:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80189d2:	441d      	add	r5, r3
 80189d4:	fb92 f1f3 	sdiv	r1, r2, r3
 80189d8:	fa1f fc81 	uxth.w	ip, r1
 80189dc:	3d01      	subs	r5, #1
 80189de:	fb0c 2413 	mls	r4, ip, r3, r2
 80189e2:	4661      	mov	r1, ip
 80189e4:	fb14 f407 	smulbb	r4, r4, r7
 80189e8:	4404      	add	r4, r0
 80189ea:	fb95 f5f3 	sdiv	r5, r5, r3
 80189ee:	b2a4      	uxth	r4, r4
 80189f0:	b121      	cbz	r1, 80189fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80189f2:	9b06      	ldr	r3, [sp, #24]
 80189f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80189f8:	ba1b      	rev	r3, r3
 80189fa:	441e      	add	r6, r3
 80189fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018a00:	b2ad      	uxth	r5, r5
 8018a02:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8018a06:	4418      	add	r0, r3
 8018a08:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8018a0c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8018a10:	00ad      	lsls	r5, r5, #2
 8018a12:	441a      	add	r2, r3
 8018a14:	4b74      	ldr	r3, [pc, #464]	@ (8018be8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8018a16:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8018a1a:	6818      	ldr	r0, [r3, #0]
 8018a1c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018a20:	6803      	ldr	r3, [r0, #0]
 8018a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a24:	4798      	blx	r3
 8018a26:	4a71      	ldr	r2, [pc, #452]	@ (8018bec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8018a28:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8018a2c:	2c00      	cmp	r4, #0
 8018a2e:	8813      	ldrh	r3, [r2, #0]
 8018a30:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8018a34:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a36:	fb03 c101 	mla	r1, r3, r1, ip
 8018a3a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018a3e:	fb03 f307 	mul.w	r3, r3, r7
 8018a42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018a46:	9204      	str	r2, [sp, #16]
 8018a48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a4c:	9a02      	ldr	r2, [sp, #8]
 8018a4e:	4408      	add	r0, r1
 8018a50:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8018a54:	4403      	add	r3, r0
 8018a56:	b292      	uxth	r2, r2
 8018a58:	9307      	str	r3, [sp, #28]
 8018a5a:	f105 0304 	add.w	r3, r5, #4
 8018a5e:	bf0c      	ite	eq
 8018a60:	4645      	moveq	r5, r8
 8018a62:	2500      	movne	r5, #0
 8018a64:	9308      	str	r3, [sp, #32]
 8018a66:	2300      	movs	r3, #0
 8018a68:	b2ad      	uxth	r5, r5
 8018a6a:	9205      	str	r2, [sp, #20]
 8018a6c:	9303      	str	r3, [sp, #12]
 8018a6e:	9a07      	ldr	r2, [sp, #28]
 8018a70:	4282      	cmp	r2, r0
 8018a72:	f240 80b1 	bls.w	8018bd8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8018a76:	b95b      	cbnz	r3, 8018a90 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8018a78:	7832      	ldrb	r2, [r6, #0]
 8018a7a:	0993      	lsrs	r3, r2, #6
 8018a7c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018a80:	9203      	str	r2, [sp, #12]
 8018a82:	1e5a      	subs	r2, r3, #1
 8018a84:	2a02      	cmp	r2, #2
 8018a86:	bf8d      	iteet	hi
 8018a88:	7873      	ldrbhi	r3, [r6, #1]
 8018a8a:	3601      	addls	r6, #1
 8018a8c:	b29b      	uxthls	r3, r3
 8018a8e:	3602      	addhi	r6, #2
 8018a90:	b184      	cbz	r4, 8018ab4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8018a92:	429c      	cmp	r4, r3
 8018a94:	bf91      	iteee	ls
 8018a96:	1b1c      	subls	r4, r3, r4
 8018a98:	1ae4      	subhi	r4, r4, r3
 8018a9a:	4629      	movhi	r1, r5
 8018a9c:	f04f 0e00 	movhi.w	lr, #0
 8018aa0:	bf9b      	ittet	ls
 8018aa2:	fa1f fe84 	uxthls.w	lr, r4
 8018aa6:	2400      	movls	r4, #0
 8018aa8:	b2a4      	uxthhi	r4, r4
 8018aaa:	fa1f f188 	uxthls.w	r1, r8
 8018aae:	4673      	mov	r3, lr
 8018ab0:	460d      	mov	r5, r1
 8018ab2:	e7dc      	b.n	8018a6e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8018ab4:	2203      	movs	r2, #3
 8018ab6:	9908      	ldr	r1, [sp, #32]
 8018ab8:	42ab      	cmp	r3, r5
 8018aba:	4617      	mov	r7, r2
 8018abc:	9a03      	ldr	r2, [sp, #12]
 8018abe:	bf24      	itt	cs
 8018ac0:	eba3 0e05 	subcs.w	lr, r3, r5
 8018ac4:	9501      	strcs	r5, [sp, #4]
 8018ac6:	fb17 1702 	smlabb	r7, r7, r2, r1
 8018aca:	9a06      	ldr	r2, [sp, #24]
 8018acc:	bf34      	ite	cc
 8018ace:	1ae9      	subcc	r1, r5, r3
 8018ad0:	fa1f fe8e 	uxthcs.w	lr, lr
 8018ad4:	4417      	add	r7, r2
 8018ad6:	9a02      	ldr	r2, [sp, #8]
 8018ad8:	bf2f      	iteee	cs
 8018ada:	4621      	movcs	r1, r4
 8018adc:	b289      	uxthcc	r1, r1
 8018ade:	9301      	strcc	r3, [sp, #4]
 8018ae0:	46a6      	movcc	lr, r4
 8018ae2:	2aff      	cmp	r2, #255	@ 0xff
 8018ae4:	d11e      	bne.n	8018b24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8018ae6:	4681      	mov	r9, r0
 8018ae8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8018aec:	f109 0903 	add.w	r9, r9, #3
 8018af0:	f1bc 0f00 	cmp.w	ip, #0
 8018af4:	d15f      	bne.n	8018bb6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8018af6:	9a01      	ldr	r2, [sp, #4]
 8018af8:	42ab      	cmp	r3, r5
 8018afa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018afe:	4410      	add	r0, r2
 8018b00:	d3d5      	bcc.n	8018aae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018b02:	fa1f f188 	uxth.w	r1, r8
 8018b06:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8018b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b0c:	1a64      	subs	r4, r4, r1
 8018b0e:	881b      	ldrh	r3, [r3, #0]
 8018b10:	b2a4      	uxth	r4, r4
 8018b12:	eba3 0308 	sub.w	r3, r3, r8
 8018b16:	2c00      	cmp	r4, #0
 8018b18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b1c:	bf18      	it	ne
 8018b1e:	2100      	movne	r1, #0
 8018b20:	4418      	add	r0, r3
 8018b22:	e7c4      	b.n	8018aae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018b24:	4684      	mov	ip, r0
 8018b26:	f8dd a004 	ldr.w	sl, [sp, #4]
 8018b2a:	f10c 0c03 	add.w	ip, ip, #3
 8018b2e:	f1ba 0f00 	cmp.w	sl, #0
 8018b32:	d0e0      	beq.n	8018af6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8018b34:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8018b38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018b3c:	9a05      	ldr	r2, [sp, #20]
 8018b3e:	f897 9000 	ldrb.w	r9, [r7]
 8018b42:	fa1f fa8a 	uxth.w	sl, sl
 8018b46:	fb1b fb02 	smulbb	fp, fp, r2
 8018b4a:	9a04      	ldr	r2, [sp, #16]
 8018b4c:	fb09 b902 	mla	r9, r9, r2, fp
 8018b50:	9a05      	ldr	r2, [sp, #20]
 8018b52:	fa1f f989 	uxth.w	r9, r9
 8018b56:	f109 0b01 	add.w	fp, r9, #1
 8018b5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018b5e:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8018b62:	fb1b fb02 	smulbb	fp, fp, r2
 8018b66:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018b6a:	9a04      	ldr	r2, [sp, #16]
 8018b6c:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8018b70:	f897 9001 	ldrb.w	r9, [r7, #1]
 8018b74:	fb09 b902 	mla	r9, r9, r2, fp
 8018b78:	9a05      	ldr	r2, [sp, #20]
 8018b7a:	fa1f f989 	uxth.w	r9, r9
 8018b7e:	f109 0b01 	add.w	fp, r9, #1
 8018b82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018b86:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8018b8a:	fb1b fb02 	smulbb	fp, fp, r2
 8018b8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018b92:	9a04      	ldr	r2, [sp, #16]
 8018b94:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8018b98:	f897 9002 	ldrb.w	r9, [r7, #2]
 8018b9c:	fb09 b902 	mla	r9, r9, r2, fp
 8018ba0:	fa1f f989 	uxth.w	r9, r9
 8018ba4:	f109 0b01 	add.w	fp, r9, #1
 8018ba8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018bac:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018bb0:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8018bb4:	e7b9      	b.n	8018b2a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8018bb6:	f897 a000 	ldrb.w	sl, [r7]
 8018bba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018bbe:	f809 ac03 	strb.w	sl, [r9, #-3]
 8018bc2:	fa1f fc8c 	uxth.w	ip, ip
 8018bc6:	f897 a001 	ldrb.w	sl, [r7, #1]
 8018bca:	f809 ac02 	strb.w	sl, [r9, #-2]
 8018bce:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018bd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018bd6:	e789      	b.n	8018aec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8018bd8:	4b03      	ldr	r3, [pc, #12]	@ (8018be8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8018bda:	6818      	ldr	r0, [r3, #0]
 8018bdc:	6803      	ldr	r3, [r0, #0]
 8018bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018be0:	4798      	blx	r3
 8018be2:	b00f      	add	sp, #60	@ 0x3c
 8018be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be8:	240253d4 	.word	0x240253d4
 8018bec:	240253ce 	.word	0x240253ce

08018bf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf4:	b09b      	sub	sp, #108	@ 0x6c
 8018bf6:	461d      	mov	r5, r3
 8018bf8:	4604      	mov	r4, r0
 8018bfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018bfc:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8018c00:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8018c04:	9208      	str	r2, [sp, #32]
 8018c06:	2a00      	cmp	r2, #0
 8018c08:	f000 81f3 	beq.w	8018ff2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8018c0c:	6828      	ldr	r0, [r5, #0]
 8018c0e:	aa16      	add	r2, sp, #88	@ 0x58
 8018c10:	6869      	ldr	r1, [r5, #4]
 8018c12:	c203      	stmia	r2!, {r0, r1}
 8018c14:	6818      	ldr	r0, [r3, #0]
 8018c16:	aa18      	add	r2, sp, #96	@ 0x60
 8018c18:	6859      	ldr	r1, [r3, #4]
 8018c1a:	c203      	stmia	r2!, {r0, r1}
 8018c1c:	a816      	add	r0, sp, #88	@ 0x58
 8018c1e:	f7fa f865 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018c22:	4629      	mov	r1, r5
 8018c24:	a818      	add	r0, sp, #96	@ 0x60
 8018c26:	f7fa f8a5 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018c2a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8018c2e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8018c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018c36:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8018c3a:	bfdb      	ittet	le
 8018c3c:	b29a      	uxthle	r2, r3
 8018c3e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018c42:	f04f 0a01 	movgt.w	sl, #1
 8018c46:	fb91 faf2 	sdivle	sl, r1, r2
 8018c4a:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8018c4e:	4456      	add	r6, sl
 8018c50:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8018c54:	3e01      	subs	r6, #1
 8018c56:	fb92 f0fa 	sdiv	r0, r2, sl
 8018c5a:	b280      	uxth	r0, r0
 8018c5c:	fb00 281a 	mls	r8, r0, sl, r2
 8018c60:	900e      	str	r0, [sp, #56]	@ 0x38
 8018c62:	fb18 f803 	smulbb	r8, r8, r3
 8018c66:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8018c6a:	4488      	add	r8, r1
 8018c6c:	4419      	add	r1, r3
 8018c6e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8018c72:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8018c76:	fa1f f888 	uxth.w	r8, r8
 8018c7a:	441a      	add	r2, r3
 8018c7c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8018c80:	9303      	str	r3, [sp, #12]
 8018c82:	4b9c      	ldr	r3, [pc, #624]	@ (8018ef4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8018c84:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8018c88:	6818      	ldr	r0, [r3, #0]
 8018c8a:	6803      	ldr	r3, [r0, #0]
 8018c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c8e:	4798      	blx	r3
 8018c90:	4b99      	ldr	r3, [pc, #612]	@ (8018ef8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8018c92:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8018c96:	f1b8 0f00 	cmp.w	r8, #0
 8018c9a:	881a      	ldrh	r2, [r3, #0]
 8018c9c:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8018ca0:	fb02 f505 	mul.w	r5, r2, r5
 8018ca4:	fb02 7101 	mla	r1, r2, r1, r7
 8018ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cac:	9314      	str	r3, [sp, #80]	@ 0x50
 8018cae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018cb2:	9b08      	ldr	r3, [sp, #32]
 8018cb4:	fb96 f6fa 	sdiv	r6, r6, sl
 8018cb8:	4408      	add	r0, r1
 8018cba:	f106 0601 	add.w	r6, r6, #1
 8018cbe:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8018cc2:	f04f 0100 	mov.w	r1, #0
 8018cc6:	eb00 0205 	add.w	r2, r0, r5
 8018cca:	b2b6      	uxth	r6, r6
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8018cd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018cd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8018cd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018cda:	4b88      	ldr	r3, [pc, #544]	@ (8018efc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8018cdc:	f106 0204 	add.w	r2, r6, #4
 8018ce0:	eba3 0304 	sub.w	r3, r3, r4
 8018ce4:	9205      	str	r2, [sp, #20]
 8018ce6:	9a03      	ldr	r2, [sp, #12]
 8018ce8:	bf18      	it	ne
 8018cea:	2200      	movne	r2, #0
 8018cec:	9315      	str	r3, [sp, #84]	@ 0x54
 8018cee:	b292      	uxth	r2, r2
 8018cf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018cf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018cf4:	fa11 f383 	uxtah	r3, r1, r3
 8018cf8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018cfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018cfe:	3304      	adds	r3, #4
 8018d00:	9306      	str	r3, [sp, #24]
 8018d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d04:	4283      	cmp	r3, r0
 8018d06:	f240 816f 	bls.w	8018fe8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8018d0a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8018d0e:	f04f 0900 	mov.w	r9, #0
 8018d12:	9d06      	ldr	r5, [sp, #24]
 8018d14:	fbb8 f3f3 	udiv	r3, r8, r3
 8018d18:	ebaa 0303 	sub.w	r3, sl, r3
 8018d1c:	782d      	ldrb	r5, [r5, #0]
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018d22:	3501      	adds	r5, #1
 8018d24:	9312      	str	r3, [sp, #72]	@ 0x48
 8018d26:	9b06      	ldr	r3, [sp, #24]
 8018d28:	9504      	str	r5, [sp, #16]
 8018d2a:	7859      	ldrb	r1, [r3, #1]
 8018d2c:	789b      	ldrb	r3, [r3, #2]
 8018d2e:	021b      	lsls	r3, r3, #8
 8018d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018d34:	9906      	ldr	r1, [sp, #24]
 8018d36:	78c9      	ldrb	r1, [r1, #3]
 8018d38:	430b      	orrs	r3, r1
 8018d3a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018d3c:	4419      	add	r1, r3
 8018d3e:	1c4d      	adds	r5, r1, #1
 8018d40:	7849      	ldrb	r1, [r1, #1]
 8018d42:	9502      	str	r5, [sp, #8]
 8018d44:	0209      	lsls	r1, r1, #8
 8018d46:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018d48:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8018d4c:	5ceb      	ldrb	r3, [r5, r3]
 8018d4e:	4319      	orrs	r1, r3
 8018d50:	b28b      	uxth	r3, r1
 8018d52:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8018d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d58:	2300      	movs	r3, #0
 8018d5a:	9307      	str	r3, [sp, #28]
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	e9cd 3300 	strd	r3, r3, [sp]
 8018d62:	469c      	mov	ip, r3
 8018d64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018d68:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d6a:	f1b8 0f00 	cmp.w	r8, #0
 8018d6e:	f000 8082 	beq.w	8018e76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8018d72:	45c4      	cmp	ip, r8
 8018d74:	d270      	bcs.n	8018e58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8018d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d78:	eba8 080c 	sub.w	r8, r8, ip
 8018d7c:	4611      	mov	r1, r2
 8018d7e:	4283      	cmp	r3, r0
 8018d80:	fa1f f888 	uxth.w	r8, r8
 8018d84:	d802      	bhi.n	8018d8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8018d86:	e074      	b.n	8018e72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d15f      	bne.n	8018e4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8018d8c:	9b02      	ldr	r3, [sp, #8]
 8018d8e:	9a01      	ldr	r2, [sp, #4]
 8018d90:	785b      	ldrb	r3, [r3, #1]
 8018d92:	f1c2 0207 	rsb	r2, r2, #7
 8018d96:	9d01      	ldr	r5, [sp, #4]
 8018d98:	4093      	lsls	r3, r2
 8018d9a:	005b      	lsls	r3, r3, #1
 8018d9c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018da0:	9b02      	ldr	r3, [sp, #8]
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	412b      	asrs	r3, r5
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	4313      	orrs	r3, r2
 8018daa:	462a      	mov	r2, r5
 8018dac:	3201      	adds	r2, #1
 8018dae:	b29e      	uxth	r6, r3
 8018db0:	b2d2      	uxtb	r2, r2
 8018db2:	2a08      	cmp	r2, #8
 8018db4:	9201      	str	r2, [sp, #4]
 8018db6:	9a02      	ldr	r2, [sp, #8]
 8018db8:	bf09      	itett	eq
 8018dba:	3202      	addeq	r2, #2
 8018dbc:	3201      	addne	r2, #1
 8018dbe:	9202      	streq	r2, [sp, #8]
 8018dc0:	2200      	moveq	r2, #0
 8018dc2:	bf14      	ite	ne
 8018dc4:	9202      	strne	r2, [sp, #8]
 8018dc6:	9201      	streq	r2, [sp, #4]
 8018dc8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018dca:	42b2      	cmp	r2, r6
 8018dcc:	d309      	bcc.n	8018de2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8018dce:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	9a04      	ldr	r2, [sp, #16]
 8018dd6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8018dda:	d30e      	bcc.n	8018dfa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8018ddc:	9300      	str	r3, [sp, #0]
 8018dde:	2500      	movs	r5, #0
 8018de0:	e035      	b.n	8018e4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018de2:	9b04      	ldr	r3, [sp, #16]
 8018de4:	429e      	cmp	r6, r3
 8018de6:	d318      	bcc.n	8018e1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8018de8:	9b00      	ldr	r3, [sp, #0]
 8018dea:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8018dee:	18e3      	adds	r3, r4, r3
 8018df0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8018df4:	9b00      	ldr	r3, [sp, #0]
 8018df6:	3301      	adds	r3, #1
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	9a04      	ldr	r2, [sp, #16]
 8018dfc:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8018e00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018e04:	9f00      	ldr	r7, [sp, #0]
 8018e06:	7115      	strb	r5, [r2, #4]
 8018e08:	3701      	adds	r7, #1
 8018e0a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018e0c:	7157      	strb	r7, [r2, #5]
 8018e0e:	80d5      	strh	r5, [r2, #6]
 8018e10:	9a04      	ldr	r2, [sp, #16]
 8018e12:	3201      	adds	r2, #1
 8018e14:	b292      	uxth	r2, r2
 8018e16:	9204      	str	r2, [sp, #16]
 8018e18:	e7e0      	b.n	8018ddc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8018e1a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018e1e:	4632      	mov	r2, r6
 8018e20:	795b      	ldrb	r3, [r3, #5]
 8018e22:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8018e26:	4425      	add	r5, r4
 8018e28:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8018e2a:	eb07 0c05 	add.w	ip, r7, r5
 8018e2e:	f1bc 0f00 	cmp.w	ip, #0
 8018e32:	dd07      	ble.n	8018e44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8018e34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018e38:	f892 c004 	ldrb.w	ip, [r2, #4]
 8018e3c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8018e40:	88d2      	ldrh	r2, [r2, #6]
 8018e42:	e7f1      	b.n	8018e28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8018e44:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	e7c3      	b.n	8018dd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8018e4c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018e4e:	460a      	mov	r2, r1
 8018e50:	960a      	str	r6, [sp, #40]	@ 0x28
 8018e52:	46a9      	mov	r9, r5
 8018e54:	469c      	mov	ip, r3
 8018e56:	e788      	b.n	8018d6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8018e58:	ebac 0308 	sub.w	r3, ip, r8
 8018e5c:	eb09 0508 	add.w	r5, r9, r8
 8018e60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	b2ad      	uxth	r5, r5
 8018e68:	f04f 0800 	mov.w	r8, #0
 8018e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e6e:	4282      	cmp	r2, r0
 8018e70:	d88a      	bhi.n	8018d88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8018e72:	460a      	mov	r2, r1
 8018e74:	e745      	b.n	8018d02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8018e76:	4594      	cmp	ip, r2
 8018e78:	9d08      	ldr	r5, [sp, #32]
 8018e7a:	4686      	mov	lr, r0
 8018e7c:	bf27      	ittee	cs
 8018e7e:	ebac 0302 	subcs.w	r3, ip, r2
 8018e82:	4616      	movcs	r6, r2
 8018e84:	eba2 010c 	subcc.w	r1, r2, ip
 8018e88:	4666      	movcc	r6, ip
 8018e8a:	bf27      	ittee	cs
 8018e8c:	b29b      	uxthcs	r3, r3
 8018e8e:	4641      	movcs	r1, r8
 8018e90:	b289      	uxthcc	r1, r1
 8018e92:	4643      	movcc	r3, r8
 8018e94:	2dff      	cmp	r5, #255	@ 0xff
 8018e96:	eb09 0506 	add.w	r5, r9, r6
 8018e9a:	b2ad      	uxth	r5, r5
 8018e9c:	d130      	bne.n	8018f00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8018e9e:	45a9      	cmp	r9, r5
 8018ea0:	f10e 0e03 	add.w	lr, lr, #3
 8018ea4:	d17a      	bne.n	8018f9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8018ea6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018eaa:	4594      	cmp	ip, r2
 8018eac:	4430      	add	r0, r6
 8018eae:	d3db      	bcc.n	8018e68 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8018eb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018eb2:	9903      	ldr	r1, [sp, #12]
 8018eb4:	8812      	ldrh	r2, [r2, #0]
 8018eb6:	1a52      	subs	r2, r2, r1
 8018eb8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018eba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ebe:	4410      	add	r0, r2
 8018ec0:	9a07      	ldr	r2, [sp, #28]
 8018ec2:	3201      	adds	r2, #1
 8018ec4:	428a      	cmp	r2, r1
 8018ec6:	9207      	str	r2, [sp, #28]
 8018ec8:	f040 8081 	bne.w	8018fce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8018ecc:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8018ed0:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8018ed4:	9b03      	ldr	r3, [sp, #12]
 8018ed6:	eba8 080c 	sub.w	r8, r8, ip
 8018eda:	fa1f f888 	uxth.w	r8, r8
 8018ede:	f1b8 0f00 	cmp.w	r8, #0
 8018ee2:	bf08      	it	eq
 8018ee4:	461a      	moveq	r2, r3
 8018ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ee8:	bf18      	it	ne
 8018eea:	2200      	movne	r2, #0
 8018eec:	3301      	adds	r3, #1
 8018eee:	b292      	uxth	r2, r2
 8018ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ef2:	e6fd      	b.n	8018cf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8018ef4:	240253d4 	.word	0x240253d4
 8018ef8:	240253ce 	.word	0x240253ce
 8018efc:	fffff7fb 	.word	0xfffff7fb
 8018f00:	45a9      	cmp	r9, r5
 8018f02:	f10e 0e03 	add.w	lr, lr, #3
 8018f06:	d0ce      	beq.n	8018ea6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8018f08:	f109 0701 	add.w	r7, r9, #1
 8018f0c:	44a1      	add	r9, r4
 8018f0e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8018f12:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018f16:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018f18:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018f1c:	9f05      	ldr	r7, [sp, #20]
 8018f1e:	eb07 0908 	add.w	r9, r7, r8
 8018f22:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018f26:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018f28:	fb1b fb07 	smulbb	fp, fp, r7
 8018f2c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018f2e:	fb08 b807 	mla	r8, r8, r7, fp
 8018f32:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018f34:	fa1f f888 	uxth.w	r8, r8
 8018f38:	f108 0b01 	add.w	fp, r8, #1
 8018f3c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f40:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8018f44:	fb1b fb07 	smulbb	fp, fp, r7
 8018f48:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f4c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018f4e:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018f52:	f899 8001 	ldrb.w	r8, [r9, #1]
 8018f56:	fb08 b807 	mla	r8, r8, r7, fp
 8018f5a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018f5c:	fa1f f888 	uxth.w	r8, r8
 8018f60:	f108 0b01 	add.w	fp, r8, #1
 8018f64:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f68:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f6c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018f70:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018f74:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8018f78:	fb19 f907 	smulbb	r9, r9, r7
 8018f7c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018f7e:	fb08 9807 	mla	r8, r8, r7, r9
 8018f82:	fa1f f888 	uxth.w	r8, r8
 8018f86:	f108 0901 	add.w	r9, r8, #1
 8018f8a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8018f8e:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8018f92:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f96:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8018f9a:	e7b1      	b.n	8018f00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8018f9c:	f109 0b01 	add.w	fp, r9, #1
 8018fa0:	44a1      	add	r9, r4
 8018fa2:	9f05      	ldr	r7, [sp, #20]
 8018fa4:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018fa8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018fac:	eb07 0908 	add.w	r9, r7, r8
 8018fb0:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018fb4:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018fb8:	f899 8001 	ldrb.w	r8, [r9, #1]
 8018fbc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018fc0:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018fc4:	fa1f f98b 	uxth.w	r9, fp
 8018fc8:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8018fcc:	e767      	b.n	8018e9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8018fce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018fd2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8018fd6:	eba8 0801 	sub.w	r8, r8, r1
 8018fda:	fa1f f888 	uxth.w	r8, r8
 8018fde:	f1b8 0f00 	cmp.w	r8, #0
 8018fe2:	bf18      	it	ne
 8018fe4:	2100      	movne	r1, #0
 8018fe6:	e741      	b.n	8018e6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018fe8:	4b03      	ldr	r3, [pc, #12]	@ (8018ff8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8018fea:	6818      	ldr	r0, [r3, #0]
 8018fec:	6803      	ldr	r3, [r0, #0]
 8018fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ff0:	4798      	blx	r3
 8018ff2:	b01b      	add	sp, #108	@ 0x6c
 8018ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff8:	240253d4 	.word	0x240253d4

08018ffc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8018ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019000:	b09d      	sub	sp, #116	@ 0x74
 8019002:	461d      	mov	r5, r3
 8019004:	4604      	mov	r4, r0
 8019006:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019008:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801900c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8019010:	920c      	str	r2, [sp, #48]	@ 0x30
 8019012:	2a00      	cmp	r2, #0
 8019014:	f000 81de 	beq.w	80193d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8019018:	6828      	ldr	r0, [r5, #0]
 801901a:	aa18      	add	r2, sp, #96	@ 0x60
 801901c:	6869      	ldr	r1, [r5, #4]
 801901e:	c203      	stmia	r2!, {r0, r1}
 8019020:	6818      	ldr	r0, [r3, #0]
 8019022:	aa1a      	add	r2, sp, #104	@ 0x68
 8019024:	6859      	ldr	r1, [r3, #4]
 8019026:	c203      	stmia	r2!, {r0, r1}
 8019028:	a818      	add	r0, sp, #96	@ 0x60
 801902a:	f7f9 fe5f 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801902e:	4629      	mov	r1, r5
 8019030:	a81a      	add	r0, sp, #104	@ 0x68
 8019032:	f7f9 fe9f 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019036:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801903a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801903e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019042:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8019046:	bfdb      	ittet	le
 8019048:	b29a      	uxthle	r2, r3
 801904a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801904e:	2201      	movgt	r2, #1
 8019050:	fb91 f2f2 	sdivle	r2, r1, r2
 8019054:	9201      	str	r2, [sp, #4]
 8019056:	9801      	ldr	r0, [sp, #4]
 8019058:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801905c:	9901      	ldr	r1, [sp, #4]
 801905e:	fb92 f0f0 	sdiv	r0, r2, r0
 8019062:	b280      	uxth	r0, r0
 8019064:	440f      	add	r7, r1
 8019066:	900d      	str	r0, [sp, #52]	@ 0x34
 8019068:	3f01      	subs	r7, #1
 801906a:	9801      	ldr	r0, [sp, #4]
 801906c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801906e:	fb05 2510 	mls	r5, r5, r0, r2
 8019072:	fb97 f7f1 	sdiv	r7, r7, r1
 8019076:	fb15 f503 	smulbb	r5, r5, r3
 801907a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801907e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8019082:	3701      	adds	r7, #1
 8019084:	440d      	add	r5, r1
 8019086:	4419      	add	r1, r3
 8019088:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801908c:	b2bf      	uxth	r7, r7
 801908e:	441a      	add	r2, r3
 8019090:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019094:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8019098:	00bf      	lsls	r7, r7, #2
 801909a:	9304      	str	r3, [sp, #16]
 801909c:	b2ad      	uxth	r5, r5
 801909e:	4bb0      	ldr	r3, [pc, #704]	@ (8019360 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80190a0:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	6803      	ldr	r3, [r0, #0]
 80190a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190aa:	4798      	blx	r3
 80190ac:	4bad      	ldr	r3, [pc, #692]	@ (8019364 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80190ae:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 80190b2:	2d00      	cmp	r5, #0
 80190b4:	881a      	ldrh	r2, [r3, #0]
 80190b6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 80190ba:	fb02 f606 	mul.w	r6, r2, r6
 80190be:	fb02 c101 	mla	r1, r2, r1, ip
 80190c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80190c6:	9316      	str	r3, [sp, #88]	@ 0x58
 80190c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80190cc:	4ba6      	ldr	r3, [pc, #664]	@ (8019368 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80190ce:	eb00 0801 	add.w	r8, r0, r1
 80190d2:	bf18      	it	ne
 80190d4:	2100      	movne	r1, #0
 80190d6:	eba3 0304 	sub.w	r3, r3, r4
 80190da:	eb08 0206 	add.w	r2, r8, r6
 80190de:	9317      	str	r3, [sp, #92]	@ 0x5c
 80190e0:	9208      	str	r2, [sp, #32]
 80190e2:	f107 0204 	add.w	r2, r7, #4
 80190e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80190e8:	9a04      	ldr	r2, [sp, #16]
 80190ea:	bf08      	it	eq
 80190ec:	4611      	moveq	r1, r2
 80190ee:	2200      	movs	r2, #0
 80190f0:	b289      	uxth	r1, r1
 80190f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80190f8:	fa12 f383 	uxtah	r3, r2, r3
 80190fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80190fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019102:	3304      	adds	r3, #4
 8019104:	9306      	str	r3, [sp, #24]
 8019106:	9b08      	ldr	r3, [sp, #32]
 8019108:	4543      	cmp	r3, r8
 801910a:	f240 815e 	bls.w	80193ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801910e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8019112:	f04f 0b01 	mov.w	fp, #1
 8019116:	9a01      	ldr	r2, [sp, #4]
 8019118:	9806      	ldr	r0, [sp, #24]
 801911a:	465e      	mov	r6, fp
 801911c:	f8cd b008 	str.w	fp, [sp, #8]
 8019120:	7800      	ldrb	r0, [r0, #0]
 8019122:	fbb5 f3f3 	udiv	r3, r5, r3
 8019126:	1ad3      	subs	r3, r2, r3
 8019128:	900e      	str	r0, [sp, #56]	@ 0x38
 801912a:	3001      	adds	r0, #1
 801912c:	b29b      	uxth	r3, r3
 801912e:	9005      	str	r0, [sp, #20]
 8019130:	9312      	str	r3, [sp, #72]	@ 0x48
 8019132:	9b06      	ldr	r3, [sp, #24]
 8019134:	785a      	ldrb	r2, [r3, #1]
 8019136:	789b      	ldrb	r3, [r3, #2]
 8019138:	021b      	lsls	r3, r3, #8
 801913a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801913e:	9a06      	ldr	r2, [sp, #24]
 8019140:	78d2      	ldrb	r2, [r2, #3]
 8019142:	4313      	orrs	r3, r2
 8019144:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019146:	441a      	add	r2, r3
 8019148:	1c50      	adds	r0, r2, #1
 801914a:	7852      	ldrb	r2, [r2, #1]
 801914c:	9003      	str	r0, [sp, #12]
 801914e:	0212      	lsls	r2, r2, #8
 8019150:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019152:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019156:	5cc3      	ldrb	r3, [r0, r3]
 8019158:	431a      	orrs	r2, r3
 801915a:	b293      	uxth	r3, r2
 801915c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019160:	930a      	str	r3, [sp, #40]	@ 0x28
 8019162:	2300      	movs	r3, #0
 8019164:	461a      	mov	r2, r3
 8019166:	9307      	str	r3, [sp, #28]
 8019168:	2d00      	cmp	r5, #0
 801916a:	d07c      	beq.n	8019266 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801916c:	42ae      	cmp	r6, r5
 801916e:	d26c      	bcs.n	801924a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019170:	9b08      	ldr	r3, [sp, #32]
 8019172:	1bad      	subs	r5, r5, r6
 8019174:	4608      	mov	r0, r1
 8019176:	4543      	cmp	r3, r8
 8019178:	b2ad      	uxth	r5, r5
 801917a:	d802      	bhi.n	8019182 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801917c:	e071      	b.n	8019262 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801917e:	2b00      	cmp	r3, #0
 8019180:	d15d      	bne.n	801923e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	9a02      	ldr	r2, [sp, #8]
 8019186:	785b      	ldrb	r3, [r3, #1]
 8019188:	f1c2 0207 	rsb	r2, r2, #7
 801918c:	9902      	ldr	r1, [sp, #8]
 801918e:	4093      	lsls	r3, r2
 8019190:	005b      	lsls	r3, r3, #1
 8019192:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019196:	9b03      	ldr	r3, [sp, #12]
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	410b      	asrs	r3, r1
 801919c:	3101      	adds	r1, #1
 801919e:	b2c9      	uxtb	r1, r1
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	2908      	cmp	r1, #8
 80191a4:	9102      	str	r1, [sp, #8]
 80191a6:	9903      	ldr	r1, [sp, #12]
 80191a8:	ea43 0302 	orr.w	r3, r3, r2
 80191ac:	bf0c      	ite	eq
 80191ae:	3102      	addeq	r1, #2
 80191b0:	3101      	addne	r1, #1
 80191b2:	b29a      	uxth	r2, r3
 80191b4:	bf05      	ittet	eq
 80191b6:	9103      	streq	r1, [sp, #12]
 80191b8:	2100      	moveq	r1, #0
 80191ba:	9103      	strne	r1, [sp, #12]
 80191bc:	9102      	streq	r1, [sp, #8]
 80191be:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80191c0:	4291      	cmp	r1, r2
 80191c2:	d30a      	bcc.n	80191da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80191c4:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80191c8:	2301      	movs	r3, #1
 80191ca:	9905      	ldr	r1, [sp, #20]
 80191cc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80191d0:	d30f      	bcc.n	80191f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80191d2:	469b      	mov	fp, r3
 80191d4:	f04f 0c00 	mov.w	ip, #0
 80191d8:	e032      	b.n	8019240 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80191da:	9b05      	ldr	r3, [sp, #20]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d318      	bcc.n	8019212 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80191e0:	eb04 030b 	add.w	r3, r4, fp
 80191e4:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80191e8:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80191ec:	f10b 0301 	add.w	r3, fp, #1
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	9905      	ldr	r1, [sp, #20]
 80191f4:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80191f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80191fc:	710e      	strb	r6, [r1, #4]
 80191fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019200:	80ce      	strh	r6, [r1, #6]
 8019202:	f10b 0601 	add.w	r6, fp, #1
 8019206:	714e      	strb	r6, [r1, #5]
 8019208:	9905      	ldr	r1, [sp, #20]
 801920a:	3101      	adds	r1, #1
 801920c:	b289      	uxth	r1, r1
 801920e:	9105      	str	r1, [sp, #20]
 8019210:	e7df      	b.n	80191d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8019212:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019216:	4611      	mov	r1, r2
 8019218:	795b      	ldrb	r3, [r3, #5]
 801921a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801921e:	4426      	add	r6, r4
 8019220:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8019222:	4437      	add	r7, r6
 8019224:	2f00      	cmp	r7, #0
 8019226:	dd06      	ble.n	8019236 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8019228:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801922c:	790f      	ldrb	r7, [r1, #4]
 801922e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019232:	88c9      	ldrh	r1, [r1, #6]
 8019234:	e7f4      	b.n	8019220 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8019236:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801923a:	b29b      	uxth	r3, r3
 801923c:	e7c5      	b.n	80191ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801923e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019240:	920a      	str	r2, [sp, #40]	@ 0x28
 8019242:	4601      	mov	r1, r0
 8019244:	4662      	mov	r2, ip
 8019246:	461e      	mov	r6, r3
 8019248:	e78e      	b.n	8019168 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801924a:	1b73      	subs	r3, r6, r5
 801924c:	eb02 0c05 	add.w	ip, r2, r5
 8019250:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019254:	b29b      	uxth	r3, r3
 8019256:	fa1f fc8c 	uxth.w	ip, ip
 801925a:	2500      	movs	r5, #0
 801925c:	9a08      	ldr	r2, [sp, #32]
 801925e:	4542      	cmp	r2, r8
 8019260:	d88d      	bhi.n	801917e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8019262:	4601      	mov	r1, r0
 8019264:	e74f      	b.n	8019106 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8019266:	428e      	cmp	r6, r1
 8019268:	bf2b      	itete	cs
 801926a:	468e      	movcs	lr, r1
 801926c:	46b6      	movcc	lr, r6
 801926e:	1a73      	subcs	r3, r6, r1
 8019270:	1b88      	subcc	r0, r1, r6
 8019272:	eb02 0c0e 	add.w	ip, r2, lr
 8019276:	bf2b      	itete	cs
 8019278:	4628      	movcs	r0, r5
 801927a:	462b      	movcc	r3, r5
 801927c:	b29b      	uxthcs	r3, r3
 801927e:	b280      	uxthcc	r0, r0
 8019280:	f108 0503 	add.w	r5, r8, #3
 8019284:	fa1f fc8c 	uxth.w	ip, ip
 8019288:	4562      	cmp	r2, ip
 801928a:	d06f      	beq.n	801936c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801928c:	1c57      	adds	r7, r2, #1
 801928e:	4422      	add	r2, r4
 8019290:	b2bf      	uxth	r7, r7
 8019292:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8019296:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019298:	2704      	movs	r7, #4
 801929a:	46b9      	mov	r9, r7
 801929c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801929e:	fb19 7202 	smlabb	r2, r9, r2, r7
 80192a2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80192a4:	58bf      	ldr	r7, [r7, r2]
 80192a6:	0e3a      	lsrs	r2, r7, #24
 80192a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80192aa:	d016      	beq.n	80192da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80192ac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80192b0:	fa5f fa87 	uxtb.w	sl, r7
 80192b4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80192b8:	fa5f f289 	uxtb.w	r2, r9
 80192bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80192be:	b2fa      	uxtb	r2, r7
 80192c0:	9215      	str	r2, [sp, #84]	@ 0x54
 80192c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80192c4:	2aff      	cmp	r2, #255	@ 0xff
 80192c6:	d10b      	bne.n	80192e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80192c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80192ca:	2aff      	cmp	r2, #255	@ 0xff
 80192cc:	d108      	bne.n	80192e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80192ce:	f805 ac03 	strb.w	sl, [r5, #-3]
 80192d2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80192d6:	f805 7c01 	strb.w	r7, [r5, #-1]
 80192da:	3503      	adds	r5, #3
 80192dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80192de:	e7d3      	b.n	8019288 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80192e0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80192e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80192e4:	437a      	muls	r2, r7
 80192e6:	1c57      	adds	r7, r2, #1
 80192e8:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80192ec:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80192f0:	1212      	asrs	r2, r2, #8
 80192f2:	fa1f f982 	uxth.w	r9, r2
 80192f6:	43d2      	mvns	r2, r2
 80192f8:	fb1a fa09 	smulbb	sl, sl, r9
 80192fc:	b2d2      	uxtb	r2, r2
 80192fe:	fb07 a702 	mla	r7, r7, r2, sl
 8019302:	9209      	str	r2, [sp, #36]	@ 0x24
 8019304:	b2bf      	uxth	r7, r7
 8019306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019308:	f107 0a01 	add.w	sl, r7, #1
 801930c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019310:	fb12 fa09 	smulbb	sl, r2, r9
 8019314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019316:	123f      	asrs	r7, r7, #8
 8019318:	f805 7c03 	strb.w	r7, [r5, #-3]
 801931c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8019320:	fb07 aa02 	mla	sl, r7, r2, sl
 8019324:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019326:	fb12 f909 	smulbb	r9, r2, r9
 801932a:	fa1f fa8a 	uxth.w	sl, sl
 801932e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019330:	f10a 0701 	add.w	r7, sl, #1
 8019334:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019338:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801933c:	fb07 9902 	mla	r9, r7, r2, r9
 8019340:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019344:	fa1f f989 	uxth.w	r9, r9
 8019348:	f805 ac02 	strb.w	sl, [r5, #-2]
 801934c:	f109 0201 	add.w	r2, r9, #1
 8019350:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019354:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019358:	f805 9c01 	strb.w	r9, [r5, #-1]
 801935c:	e7bd      	b.n	80192da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801935e:	bf00      	nop
 8019360:	240253d4 	.word	0x240253d4
 8019364:	240253ce 	.word	0x240253ce
 8019368:	fffff7fb 	.word	0xfffff7fb
 801936c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019370:	428e      	cmp	r6, r1
 8019372:	44f0      	add	r8, lr
 8019374:	f4ff af71 	bcc.w	801925a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8019378:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801937a:	9904      	ldr	r1, [sp, #16]
 801937c:	8812      	ldrh	r2, [r2, #0]
 801937e:	1a52      	subs	r2, r2, r1
 8019380:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019382:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019386:	4490      	add	r8, r2
 8019388:	9a07      	ldr	r2, [sp, #28]
 801938a:	3201      	adds	r2, #1
 801938c:	428a      	cmp	r2, r1
 801938e:	9207      	str	r2, [sp, #28]
 8019390:	d111      	bne.n	80193b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8019392:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8019396:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801939a:	9b04      	ldr	r3, [sp, #16]
 801939c:	eba5 050c 	sub.w	r5, r5, ip
 80193a0:	b2ad      	uxth	r5, r5
 80193a2:	2d00      	cmp	r5, #0
 80193a4:	bf08      	it	eq
 80193a6:	4619      	moveq	r1, r3
 80193a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80193aa:	bf18      	it	ne
 80193ac:	2100      	movne	r1, #0
 80193ae:	3301      	adds	r3, #1
 80193b0:	b289      	uxth	r1, r1
 80193b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193b4:	e69e      	b.n	80190f4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80193b6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80193ba:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80193be:	1a2d      	subs	r5, r5, r0
 80193c0:	b2ad      	uxth	r5, r5
 80193c2:	2d00      	cmp	r5, #0
 80193c4:	bf18      	it	ne
 80193c6:	2000      	movne	r0, #0
 80193c8:	e748      	b.n	801925c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80193ca:	4b04      	ldr	r3, [pc, #16]	@ (80193dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80193cc:	6818      	ldr	r0, [r3, #0]
 80193ce:	6803      	ldr	r3, [r0, #0]
 80193d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193d2:	4798      	blx	r3
 80193d4:	b01d      	add	sp, #116	@ 0x74
 80193d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193da:	bf00      	nop
 80193dc:	240253d4 	.word	0x240253d4

080193e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	b08f      	sub	sp, #60	@ 0x3c
 80193e6:	4616      	mov	r6, r2
 80193e8:	4681      	mov	r9, r0
 80193ea:	460d      	mov	r5, r1
 80193ec:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80193f0:	9205      	str	r2, [sp, #20]
 80193f2:	2a00      	cmp	r2, #0
 80193f4:	f000 82a8 	beq.w	8019948 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 80193f8:	6830      	ldr	r0, [r6, #0]
 80193fa:	ac0a      	add	r4, sp, #40	@ 0x28
 80193fc:	6871      	ldr	r1, [r6, #4]
 80193fe:	c403      	stmia	r4!, {r0, r1}
 8019400:	6818      	ldr	r0, [r3, #0]
 8019402:	ac0c      	add	r4, sp, #48	@ 0x30
 8019404:	6859      	ldr	r1, [r3, #4]
 8019406:	c403      	stmia	r4!, {r0, r1}
 8019408:	a80a      	add	r0, sp, #40	@ 0x28
 801940a:	f7f9 fc6f 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801940e:	4631      	mov	r1, r6
 8019410:	a80c      	add	r0, sp, #48	@ 0x30
 8019412:	f7f9 fcaf 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019416:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801941a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801941e:	bfdb      	ittet	le
 8019420:	b293      	uxthle	r3, r2
 8019422:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019426:	2301      	movgt	r3, #1
 8019428:	fb91 f3f3 	sdivle	r3, r1, r3
 801942c:	9300      	str	r3, [sp, #0]
 801942e:	f105 0308 	add.w	r3, r5, #8
 8019432:	9900      	ldr	r1, [sp, #0]
 8019434:	9306      	str	r3, [sp, #24]
 8019436:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801943a:	440b      	add	r3, r1
 801943c:	3b01      	subs	r3, #1
 801943e:	fb93 f3f1 	sdiv	r3, r3, r1
 8019442:	3b01      	subs	r3, #1
 8019444:	9906      	ldr	r1, [sp, #24]
 8019446:	b29b      	uxth	r3, r3
 8019448:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801944c:	9900      	ldr	r1, [sp, #0]
 801944e:	9307      	str	r3, [sp, #28]
 8019450:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019454:	fb93 f0f1 	sdiv	r0, r3, r1
 8019458:	b284      	uxth	r4, r0
 801945a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801945e:	b280      	uxth	r0, r0
 8019460:	9402      	str	r4, [sp, #8]
 8019462:	9d02      	ldr	r5, [sp, #8]
 8019464:	9c00      	ldr	r4, [sp, #0]
 8019466:	fb05 3514 	mls	r5, r5, r4, r3
 801946a:	fb15 f502 	smulbb	r5, r5, r2
 801946e:	440d      	add	r5, r1
 8019470:	b2ad      	uxth	r5, r5
 8019472:	2800      	cmp	r0, #0
 8019474:	d071      	beq.n	801955a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8019476:	1e42      	subs	r2, r0, #1
 8019478:	9806      	ldr	r0, [sp, #24]
 801947a:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801947e:	9a07      	ldr	r2, [sp, #28]
 8019480:	fa98 f888 	rev.w	r8, r8
 8019484:	4490      	add	r8, r2
 8019486:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801948a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801948e:	4411      	add	r1, r2
 8019490:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8019494:	f8df b348 	ldr.w	fp, [pc, #840]	@ 80197e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8019498:	4413      	add	r3, r2
 801949a:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801949e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80194a2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80194a6:	9301      	str	r3, [sp, #4]
 80194a8:	4bcb      	ldr	r3, [pc, #812]	@ (80197d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 80194aa:	6818      	ldr	r0, [r3, #0]
 80194ac:	6803      	ldr	r3, [r0, #0]
 80194ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194b0:	4798      	blx	r3
 80194b2:	4bca      	ldr	r3, [pc, #808]	@ (80197dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 80194b4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80194b8:	881b      	ldrh	r3, [r3, #0]
 80194ba:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 80194be:	fb03 2707 	mla	r7, r3, r7, r2
 80194c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80194c6:	4363      	muls	r3, r4
 80194c8:	2400      	movs	r4, #0
 80194ca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80194ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194d2:	4621      	mov	r1, r4
 80194d4:	4407      	add	r7, r0
 80194d6:	18fb      	adds	r3, r7, r3
 80194d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80194da:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80194de:	fb95 f3f3 	sdiv	r3, r5, r3
 80194e2:	9304      	str	r3, [sp, #16]
 80194e4:	f109 0304 	add.w	r3, r9, #4
 80194e8:	4618      	mov	r0, r3
 80194ea:	9308      	str	r3, [sp, #32]
 80194ec:	f008 fc0c 	bl	8021d08 <memset>
 80194f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194f2:	42bb      	cmp	r3, r7
 80194f4:	f240 8223 	bls.w	801993e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 80194f8:	2003      	movs	r0, #3
 80194fa:	f04f 0c07 	mov.w	ip, #7
 80194fe:	f04f 0e0b 	mov.w	lr, #11
 8019502:	2d00      	cmp	r5, #0
 8019504:	f000 813c 	beq.w	8019780 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8019508:	f898 3000 	ldrb.w	r3, [r8]
 801950c:	b2db      	uxtb	r3, r3
 801950e:	2bfe      	cmp	r3, #254	@ 0xfe
 8019510:	d126      	bne.n	8019560 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8019512:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019516:	f108 0604 	add.w	r6, r8, #4
 801951a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801951e:	3d01      	subs	r5, #1
 8019520:	b2c9      	uxtb	r1, r1
 8019522:	f898 8003 	ldrb.w	r8, [r8, #3]
 8019526:	b2d2      	uxtb	r2, r2
 8019528:	f361 0407 	bfi	r4, r1, #0, #8
 801952c:	fa5f f888 	uxtb.w	r8, r8
 8019530:	b2ad      	uxth	r5, r5
 8019532:	f362 240f 	bfi	r4, r2, #8, #8
 8019536:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801953a:	fb10 2208 	smlabb	r2, r0, r8, r2
 801953e:	f368 4417 	bfi	r4, r8, #16, #8
 8019542:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8019546:	0e23      	lsrs	r3, r4, #24
 8019548:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801954c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019550:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019554:	605c      	str	r4, [r3, #4]
 8019556:	46b0      	mov	r8, r6
 8019558:	e7d3      	b.n	8019502 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801955a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801955e:	e792      	b.n	8019486 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8019560:	2bff      	cmp	r3, #255	@ 0xff
 8019562:	d127      	bne.n	80195b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8019564:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019568:	f108 0605 	add.w	r6, r8, #5
 801956c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019570:	3d01      	subs	r5, #1
 8019572:	b2d2      	uxtb	r2, r2
 8019574:	f898 1003 	ldrb.w	r1, [r8, #3]
 8019578:	b2db      	uxtb	r3, r3
 801957a:	f898 8004 	ldrb.w	r8, [r8, #4]
 801957e:	f362 0407 	bfi	r4, r2, #0, #8
 8019582:	b2c9      	uxtb	r1, r1
 8019584:	fa5f f888 	uxtb.w	r8, r8
 8019588:	f363 240f 	bfi	r4, r3, #8, #8
 801958c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019590:	b2ad      	uxth	r5, r5
 8019592:	fb10 3301 	smlabb	r3, r0, r1, r3
 8019596:	f361 4417 	bfi	r4, r1, #16, #8
 801959a:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801959e:	f368 641f 	bfi	r4, r8, #24, #8
 80195a2:	fb1e 3808 	smlabb	r8, lr, r8, r3
 80195a6:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80195aa:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80195ae:	f8c8 4004 	str.w	r4, [r8, #4]
 80195b2:	e7d0      	b.n	8019556 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80195b4:	119a      	asrs	r2, r3, #6
 80195b6:	f108 0601 	add.w	r6, r8, #1
 80195ba:	d107      	bne.n	80195cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 80195bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80195c0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80195c4:	685c      	ldr	r4, [r3, #4]
 80195c6:	3d01      	subs	r5, #1
 80195c8:	b2ad      	uxth	r5, r5
 80195ca:	e7c4      	b.n	8019556 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80195cc:	2a01      	cmp	r2, #1
 80195ce:	d129      	bne.n	8019624 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 80195d0:	f003 0203 	and.w	r2, r3, #3
 80195d4:	1ea1      	subs	r1, r4, #2
 80195d6:	4411      	add	r1, r2
 80195d8:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80195dc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80195e0:	b2c9      	uxtb	r1, r1
 80195e2:	3a02      	subs	r2, #2
 80195e4:	3b02      	subs	r3, #2
 80195e6:	f361 0407 	bfi	r4, r1, #0, #8
 80195ea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80195ee:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80195f2:	f362 240f 	bfi	r4, r2, #8, #8
 80195f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80195fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80195fe:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8019602:	fb10 2203 	smlabb	r2, r0, r3, r2
 8019606:	f363 4417 	bfi	r4, r3, #16, #8
 801960a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801960e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8019612:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8019616:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801961a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801961e:	f8c8 4004 	str.w	r4, [r8, #4]
 8019622:	e7d0      	b.n	80195c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8019624:	2a02      	cmp	r2, #2
 8019626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801962a:	d12e      	bne.n	801968a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801962c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019630:	f1a3 0a20 	sub.w	sl, r3, #32
 8019634:	f108 0602 	add.w	r6, r8, #2
 8019638:	b2d2      	uxtb	r2, r2
 801963a:	f002 010f 	and.w	r1, r2, #15
 801963e:	1112      	asrs	r2, r2, #4
 8019640:	3908      	subs	r1, #8
 8019642:	3a08      	subs	r2, #8
 8019644:	4451      	add	r1, sl
 8019646:	4492      	add	sl, r2
 8019648:	4421      	add	r1, r4
 801964a:	b2c9      	uxtb	r1, r1
 801964c:	f361 0407 	bfi	r4, r1, #0, #8
 8019650:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8019654:	f1a8 0820 	sub.w	r8, r8, #32
 8019658:	4443      	add	r3, r8
 801965a:	b2db      	uxtb	r3, r3
 801965c:	f363 240f 	bfi	r4, r3, #8, #8
 8019660:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019664:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8019668:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801966c:	fb10 330a 	smlabb	r3, r0, sl, r3
 8019670:	f36a 4417 	bfi	r4, sl, #16, #8
 8019674:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8019678:	0e22      	lsrs	r2, r4, #24
 801967a:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801967e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019682:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8019686:	6054      	str	r4, [r2, #4]
 8019688:	e79d      	b.n	80195c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801968a:	3301      	adds	r3, #1
 801968c:	42ab      	cmp	r3, r5
 801968e:	dd59      	ble.n	8019744 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8019690:	1b5d      	subs	r5, r3, r5
 8019692:	2d00      	cmp	r5, #0
 8019694:	dc58      	bgt.n	8019748 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8019696:	f8dd a004 	ldr.w	sl, [sp, #4]
 801969a:	f04f 0800 	mov.w	r8, #0
 801969e:	f1ba 0f00 	cmp.w	sl, #0
 80196a2:	f340 8108 	ble.w	80198b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 80196a6:	1c73      	adds	r3, r6, #1
 80196a8:	9303      	str	r3, [sp, #12]
 80196aa:	7833      	ldrb	r3, [r6, #0]
 80196ac:	b2db      	uxtb	r3, r3
 80196ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80196b0:	d16a      	bne.n	8019788 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 80196b2:	7871      	ldrb	r1, [r6, #1]
 80196b4:	1d33      	adds	r3, r6, #4
 80196b6:	78b2      	ldrb	r2, [r6, #2]
 80196b8:	b2c9      	uxtb	r1, r1
 80196ba:	78f0      	ldrb	r0, [r6, #3]
 80196bc:	b2d2      	uxtb	r2, r2
 80196be:	9303      	str	r3, [sp, #12]
 80196c0:	f361 0407 	bfi	r4, r1, #0, #8
 80196c4:	b2c0      	uxtb	r0, r0
 80196c6:	2303      	movs	r3, #3
 80196c8:	f362 240f 	bfi	r4, r2, #8, #8
 80196cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80196d0:	fb13 2200 	smlabb	r2, r3, r0, r2
 80196d4:	f360 4417 	bfi	r4, r0, #16, #8
 80196d8:	2307      	movs	r3, #7
 80196da:	0e25      	lsrs	r5, r4, #24
 80196dc:	fb13 2101 	smlabb	r1, r3, r1, r2
 80196e0:	230b      	movs	r3, #11
 80196e2:	fb13 1305 	smlabb	r3, r3, r5, r1
 80196e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80196ea:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80196ee:	605c      	str	r4, [r3, #4]
 80196f0:	2501      	movs	r5, #1
 80196f2:	462e      	mov	r6, r5
 80196f4:	eb06 0308 	add.w	r3, r6, r8
 80196f8:	ebaa 0a06 	sub.w	sl, sl, r6
 80196fc:	1bad      	subs	r5, r5, r6
 80196fe:	2b40      	cmp	r3, #64	@ 0x40
 8019700:	dd16      	ble.n	8019730 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8019702:	4658      	mov	r0, fp
 8019704:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8019708:	f7e9 fbb6 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 801970c:	4659      	mov	r1, fp
 801970e:	9b05      	ldr	r3, [sp, #20]
 8019710:	4642      	mov	r2, r8
 8019712:	4638      	mov	r0, r7
 8019714:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019718:	f7e9 fc16 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801971c:	4b30      	ldr	r3, [pc, #192]	@ (80197e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801971e:	4447      	add	r7, r8
 8019720:	f04f 0800 	mov.w	r8, #0
 8019724:	459b      	cmp	fp, r3
 8019726:	bf0c      	ite	eq
 8019728:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 80197e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801972c:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 80197e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8019730:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8019734:	4633      	mov	r3, r6
 8019736:	3b01      	subs	r3, #1
 8019738:	f842 4b04 	str.w	r4, [r2], #4
 801973c:	d1fb      	bne.n	8019736 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801973e:	44b0      	add	r8, r6
 8019740:	9e03      	ldr	r6, [sp, #12]
 8019742:	e7ac      	b.n	801969e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8019744:	1aed      	subs	r5, r5, r3
 8019746:	e73f      	b.n	80195c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8019748:	9b01      	ldr	r3, [sp, #4]
 801974a:	42ab      	cmp	r3, r5
 801974c:	bfa8      	it	ge
 801974e:	462b      	movge	r3, r5
 8019750:	4698      	mov	r8, r3
 8019752:	9b01      	ldr	r3, [sp, #4]
 8019754:	eba3 0a08 	sub.w	sl, r3, r8
 8019758:	0e23      	lsrs	r3, r4, #24
 801975a:	eba5 0508 	sub.w	r5, r5, r8
 801975e:	d00b      	beq.n	8019778 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8019760:	9a05      	ldr	r2, [sp, #20]
 8019762:	4641      	mov	r1, r8
 8019764:	4638      	mov	r0, r7
 8019766:	4353      	muls	r3, r2
 8019768:	1c5a      	adds	r2, r3, #1
 801976a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801976e:	4622      	mov	r2, r4
 8019770:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019774:	f7e9 fb9a 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8019778:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801977c:	4447      	add	r7, r8
 801977e:	e78c      	b.n	801969a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8019780:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019784:	4646      	mov	r6, r8
 8019786:	e788      	b.n	801969a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8019788:	2bff      	cmp	r3, #255	@ 0xff
 801978a:	d11d      	bne.n	80197c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801978c:	7870      	ldrb	r0, [r6, #1]
 801978e:	1d73      	adds	r3, r6, #5
 8019790:	78b2      	ldrb	r2, [r6, #2]
 8019792:	b2c0      	uxtb	r0, r0
 8019794:	78f5      	ldrb	r5, [r6, #3]
 8019796:	b2d2      	uxtb	r2, r2
 8019798:	9303      	str	r3, [sp, #12]
 801979a:	f360 0407 	bfi	r4, r0, #0, #8
 801979e:	7933      	ldrb	r3, [r6, #4]
 80197a0:	b2ed      	uxtb	r5, r5
 80197a2:	b2d9      	uxtb	r1, r3
 80197a4:	f362 240f 	bfi	r4, r2, #8, #8
 80197a8:	2303      	movs	r3, #3
 80197aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80197ae:	f365 4417 	bfi	r4, r5, #16, #8
 80197b2:	fb13 2205 	smlabb	r2, r3, r5, r2
 80197b6:	2307      	movs	r3, #7
 80197b8:	f361 641f 	bfi	r4, r1, #24, #8
 80197bc:	fb13 2000 	smlabb	r0, r3, r0, r2
 80197c0:	230b      	movs	r3, #11
 80197c2:	fb13 0301 	smlabb	r3, r3, r1, r0
 80197c6:	e78e      	b.n	80196e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80197c8:	119d      	asrs	r5, r3, #6
 80197ca:	d10d      	bne.n	80197e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 80197cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80197d0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80197d4:	685c      	ldr	r4, [r3, #4]
 80197d6:	e78b      	b.n	80196f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80197d8:	240253d4 	.word	0x240253d4
 80197dc:	240253ce 	.word	0x240253ce
 80197e0:	24000140 	.word	0x24000140
 80197e4:	24000240 	.word	0x24000240
 80197e8:	2d01      	cmp	r5, #1
 80197ea:	d12a      	bne.n	8019842 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 80197ec:	f003 0203 	and.w	r2, r3, #3
 80197f0:	1ea1      	subs	r1, r4, #2
 80197f2:	2603      	movs	r6, #3
 80197f4:	4411      	add	r1, r2
 80197f6:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80197fa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80197fe:	b2c9      	uxtb	r1, r1
 8019800:	3a02      	subs	r2, #2
 8019802:	3b02      	subs	r3, #2
 8019804:	f361 0407 	bfi	r4, r1, #0, #8
 8019808:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801980c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8019810:	f362 240f 	bfi	r4, r2, #8, #8
 8019814:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019818:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801981c:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8019820:	fb16 2203 	smlabb	r2, r6, r3, r2
 8019824:	f363 4417 	bfi	r4, r3, #16, #8
 8019828:	2307      	movs	r3, #7
 801982a:	0e20      	lsrs	r0, r4, #24
 801982c:	fb13 2101 	smlabb	r1, r3, r1, r2
 8019830:	230b      	movs	r3, #11
 8019832:	fb13 1300 	smlabb	r3, r3, r0, r1
 8019836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801983a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801983e:	605c      	str	r4, [r3, #4]
 8019840:	e757      	b.n	80196f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8019842:	2d02      	cmp	r5, #2
 8019844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019848:	d12f      	bne.n	80198aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801984a:	1cb2      	adds	r2, r6, #2
 801984c:	f1a3 0020 	sub.w	r0, r3, #32
 8019850:	9203      	str	r2, [sp, #12]
 8019852:	7872      	ldrb	r2, [r6, #1]
 8019854:	b2d2      	uxtb	r2, r2
 8019856:	f002 010f 	and.w	r1, r2, #15
 801985a:	1112      	asrs	r2, r2, #4
 801985c:	3908      	subs	r1, #8
 801985e:	3a08      	subs	r2, #8
 8019860:	4401      	add	r1, r0
 8019862:	4402      	add	r2, r0
 8019864:	4421      	add	r1, r4
 8019866:	b2c9      	uxtb	r1, r1
 8019868:	f361 0407 	bfi	r4, r1, #0, #8
 801986c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8019870:	3d20      	subs	r5, #32
 8019872:	442b      	add	r3, r5
 8019874:	2503      	movs	r5, #3
 8019876:	b2db      	uxtb	r3, r3
 8019878:	f363 240f 	bfi	r4, r3, #8, #8
 801987c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019880:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8019884:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8019888:	fb15 3302 	smlabb	r3, r5, r2, r3
 801988c:	f362 4417 	bfi	r4, r2, #16, #8
 8019890:	2207      	movs	r2, #7
 8019892:	0e20      	lsrs	r0, r4, #24
 8019894:	fb12 3201 	smlabb	r2, r2, r1, r3
 8019898:	210b      	movs	r1, #11
 801989a:	fb11 2100 	smlabb	r1, r1, r0, r2
 801989e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80198a2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80198a6:	604c      	str	r4, [r1, #4]
 80198a8:	e722      	b.n	80196f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80198aa:	1c5d      	adds	r5, r3, #1
 80198ac:	4656      	mov	r6, sl
 80198ae:	45aa      	cmp	sl, r5
 80198b0:	bfa8      	it	ge
 80198b2:	462e      	movge	r6, r5
 80198b4:	e71e      	b.n	80196f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 80198b6:	f1b8 0f00 	cmp.w	r8, #0
 80198ba:	d00d      	beq.n	80198d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 80198bc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80198c0:	4658      	mov	r0, fp
 80198c2:	f7e9 fad9 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 80198c6:	4642      	mov	r2, r8
 80198c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80198cc:	4638      	mov	r0, r7
 80198ce:	9b05      	ldr	r3, [sp, #20]
 80198d0:	4659      	mov	r1, fp
 80198d2:	4447      	add	r7, r8
 80198d4:	f7e9 fb38 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80198d8:	4b1d      	ldr	r3, [pc, #116]	@ (8019950 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 80198da:	9a01      	ldr	r2, [sp, #4]
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	1a9b      	subs	r3, r3, r2
 80198e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80198e4:	441f      	add	r7, r3
 80198e6:	9b04      	ldr	r3, [sp, #16]
 80198e8:	3301      	adds	r3, #1
 80198ea:	9304      	str	r3, [sp, #16]
 80198ec:	9a04      	ldr	r2, [sp, #16]
 80198ee:	9b00      	ldr	r3, [sp, #0]
 80198f0:	4293      	cmp	r3, r2
 80198f2:	d11d      	bne.n	8019930 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 80198f4:	9b02      	ldr	r3, [sp, #8]
 80198f6:	2400      	movs	r4, #0
 80198f8:	9a02      	ldr	r2, [sp, #8]
 80198fa:	f103 0801 	add.w	r8, r3, #1
 80198fe:	9b06      	ldr	r3, [sp, #24]
 8019900:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8019904:	4621      	mov	r1, r4
 8019906:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801990a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801990e:	9b07      	ldr	r3, [sp, #28]
 8019910:	ba36      	rev	r6, r6
 8019912:	9808      	ldr	r0, [sp, #32]
 8019914:	441e      	add	r6, r3
 8019916:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801991a:	1aed      	subs	r5, r5, r3
 801991c:	f008 f9f4 	bl	8021d08 <memset>
 8019920:	f8cd 8008 	str.w	r8, [sp, #8]
 8019924:	b2ad      	uxth	r5, r5
 8019926:	9404      	str	r4, [sp, #16]
 8019928:	f7e9 fa9c 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 801992c:	46b0      	mov	r8, r6
 801992e:	e5df      	b.n	80194f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8019930:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019934:	9a01      	ldr	r2, [sp, #4]
 8019936:	1a9b      	subs	r3, r3, r2
 8019938:	1b5d      	subs	r5, r3, r5
 801993a:	b2ad      	uxth	r5, r5
 801993c:	e7f4      	b.n	8019928 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801993e:	4b05      	ldr	r3, [pc, #20]	@ (8019954 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8019940:	6818      	ldr	r0, [r3, #0]
 8019942:	6803      	ldr	r3, [r0, #0]
 8019944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019946:	4798      	blx	r3
 8019948:	b00f      	add	sp, #60	@ 0x3c
 801994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801994e:	bf00      	nop
 8019950:	240253ce 	.word	0x240253ce
 8019954:	240253d4 	.word	0x240253d4

08019958 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8019958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801995c:	b093      	sub	sp, #76	@ 0x4c
 801995e:	460d      	mov	r5, r1
 8019960:	4616      	mov	r6, r2
 8019962:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8019966:	9000      	str	r0, [sp, #0]
 8019968:	f1bb 0f00 	cmp.w	fp, #0
 801996c:	f000 82ac 	beq.w	8019ec8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8019970:	6810      	ldr	r0, [r2, #0]
 8019972:	ac0e      	add	r4, sp, #56	@ 0x38
 8019974:	6851      	ldr	r1, [r2, #4]
 8019976:	c403      	stmia	r4!, {r0, r1}
 8019978:	6818      	ldr	r0, [r3, #0]
 801997a:	ac10      	add	r4, sp, #64	@ 0x40
 801997c:	6859      	ldr	r1, [r3, #4]
 801997e:	c403      	stmia	r4!, {r0, r1}
 8019980:	a80e      	add	r0, sp, #56	@ 0x38
 8019982:	f7f9 f9b3 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019986:	4631      	mov	r1, r6
 8019988:	a810      	add	r0, sp, #64	@ 0x40
 801998a:	f7f9 f9f3 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801998e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8019992:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019996:	bfdb      	ittet	le
 8019998:	b293      	uxthle	r3, r2
 801999a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801999e:	2301      	movgt	r3, #1
 80199a0:	fb91 f3f3 	sdivle	r3, r1, r3
 80199a4:	9301      	str	r3, [sp, #4]
 80199a6:	f105 0308 	add.w	r3, r5, #8
 80199aa:	9901      	ldr	r1, [sp, #4]
 80199ac:	9305      	str	r3, [sp, #20]
 80199ae:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80199b2:	440b      	add	r3, r1
 80199b4:	3b01      	subs	r3, #1
 80199b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80199ba:	3b01      	subs	r3, #1
 80199bc:	9905      	ldr	r1, [sp, #20]
 80199be:	b29b      	uxth	r3, r3
 80199c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80199c4:	9901      	ldr	r1, [sp, #4]
 80199c6:	9306      	str	r3, [sp, #24]
 80199c8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80199cc:	fb93 f0f1 	sdiv	r0, r3, r1
 80199d0:	b284      	uxth	r4, r0
 80199d2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80199d6:	9403      	str	r4, [sp, #12]
 80199d8:	9d03      	ldr	r5, [sp, #12]
 80199da:	9c01      	ldr	r4, [sp, #4]
 80199dc:	fb05 3714 	mls	r7, r5, r4, r3
 80199e0:	fb17 f702 	smulbb	r7, r7, r2
 80199e4:	440f      	add	r7, r1
 80199e6:	b2bf      	uxth	r7, r7
 80199e8:	2d00      	cmp	r5, #0
 80199ea:	d06b      	beq.n	8019ac4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 80199ec:	1e6a      	subs	r2, r5, #1
 80199ee:	9805      	ldr	r0, [sp, #20]
 80199f0:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 80199f4:	9a06      	ldr	r2, [sp, #24]
 80199f6:	fa99 f989 	rev.w	r9, r9
 80199fa:	4491      	add	r9, r2
 80199fc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8019a00:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8019a04:	4411      	add	r1, r2
 8019a06:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019a0a:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8019d68 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8019a0e:	4413      	add	r3, r2
 8019a10:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8019a14:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8019a18:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8019a1c:	9302      	str	r3, [sp, #8]
 8019a1e:	4bd0      	ldr	r3, [pc, #832]	@ (8019d60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8019a20:	6818      	ldr	r0, [r3, #0]
 8019a22:	6803      	ldr	r3, [r0, #0]
 8019a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a26:	4798      	blx	r3
 8019a28:	4bce      	ldr	r3, [pc, #824]	@ (8019d64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8019a2a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8019a2e:	881b      	ldrh	r3, [r3, #0]
 8019a30:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8019a34:	fb03 2404 	mla	r4, r3, r4, r2
 8019a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019a3c:	436b      	muls	r3, r5
 8019a3e:	2500      	movs	r5, #0
 8019a40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a48:	4629      	mov	r1, r5
 8019a4a:	4404      	add	r4, r0
 8019a4c:	18e3      	adds	r3, r4, r3
 8019a4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019a50:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8019a54:	fb97 f3f3 	sdiv	r3, r7, r3
 8019a58:	9304      	str	r3, [sp, #16]
 8019a5a:	9b00      	ldr	r3, [sp, #0]
 8019a5c:	3304      	adds	r3, #4
 8019a5e:	4618      	mov	r0, r3
 8019a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a62:	f008 f951 	bl	8021d08 <memset>
 8019a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019a68:	42a3      	cmp	r3, r4
 8019a6a:	f240 8228 	bls.w	8019ebe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8019a6e:	2003      	movs	r0, #3
 8019a70:	2607      	movs	r6, #7
 8019a72:	2f00      	cmp	r7, #0
 8019a74:	f000 80cb 	beq.w	8019c0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8019a78:	f899 3000 	ldrb.w	r3, [r9]
 8019a7c:	b2db      	uxtb	r3, r3
 8019a7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8019a80:	d123      	bne.n	8019aca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8019a82:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019a86:	3f01      	subs	r7, #1
 8019a88:	f899 2002 	ldrb.w	r2, [r9, #2]
 8019a8c:	f109 0804 	add.w	r8, r9, #4
 8019a90:	b2db      	uxtb	r3, r3
 8019a92:	f899 1003 	ldrb.w	r1, [r9, #3]
 8019a96:	b2d2      	uxtb	r2, r2
 8019a98:	f363 0507 	bfi	r5, r3, #0, #8
 8019a9c:	b2c9      	uxtb	r1, r1
 8019a9e:	b2bf      	uxth	r7, r7
 8019aa0:	f362 250f 	bfi	r5, r2, #8, #8
 8019aa4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019aa8:	fb10 2201 	smlabb	r2, r0, r1, r2
 8019aac:	f361 4517 	bfi	r5, r1, #16, #8
 8019ab0:	fb16 2303 	smlabb	r3, r6, r3, r2
 8019ab4:	9a00      	ldr	r2, [sp, #0]
 8019ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019abe:	605d      	str	r5, [r3, #4]
 8019ac0:	46c1      	mov	r9, r8
 8019ac2:	e7d6      	b.n	8019a72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8019ac4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019ac8:	e798      	b.n	80199fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8019aca:	119a      	asrs	r2, r3, #6
 8019acc:	f109 0801 	add.w	r8, r9, #1
 8019ad0:	d108      	bne.n	8019ae4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8019ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019ad6:	9a00      	ldr	r2, [sp, #0]
 8019ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019adc:	685d      	ldr	r5, [r3, #4]
 8019ade:	3f01      	subs	r7, #1
 8019ae0:	b2bf      	uxth	r7, r7
 8019ae2:	e7ed      	b.n	8019ac0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8019ae4:	2a01      	cmp	r2, #1
 8019ae6:	d125      	bne.n	8019b34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8019ae8:	f003 0103 	and.w	r1, r3, #3
 8019aec:	1eaa      	subs	r2, r5, #2
 8019aee:	440a      	add	r2, r1
 8019af0:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8019af4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019af8:	b2d2      	uxtb	r2, r2
 8019afa:	3902      	subs	r1, #2
 8019afc:	3b02      	subs	r3, #2
 8019afe:	f362 0507 	bfi	r5, r2, #0, #8
 8019b02:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8019b06:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8019b0a:	f361 250f 	bfi	r5, r1, #8, #8
 8019b0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8019b12:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8019b16:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8019b1a:	fb10 1103 	smlabb	r1, r0, r3, r1
 8019b1e:	f363 4517 	bfi	r5, r3, #16, #8
 8019b22:	9b00      	ldr	r3, [sp, #0]
 8019b24:	fb16 1202 	smlabb	r2, r6, r2, r1
 8019b28:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019b2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019b30:	6055      	str	r5, [r2, #4]
 8019b32:	e7d4      	b.n	8019ade <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8019b34:	2a02      	cmp	r2, #2
 8019b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019b3a:	d12c      	bne.n	8019b96 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8019b3c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019b40:	f1a3 0c20 	sub.w	ip, r3, #32
 8019b44:	f109 0802 	add.w	r8, r9, #2
 8019b48:	b2d2      	uxtb	r2, r2
 8019b4a:	f002 010f 	and.w	r1, r2, #15
 8019b4e:	1112      	asrs	r2, r2, #4
 8019b50:	3908      	subs	r1, #8
 8019b52:	3a08      	subs	r2, #8
 8019b54:	4461      	add	r1, ip
 8019b56:	4494      	add	ip, r2
 8019b58:	4429      	add	r1, r5
 8019b5a:	b2c9      	uxtb	r1, r1
 8019b5c:	f361 0507 	bfi	r5, r1, #0, #8
 8019b60:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8019b64:	f1ae 0e20 	sub.w	lr, lr, #32
 8019b68:	4473      	add	r3, lr
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	f363 250f 	bfi	r5, r3, #8, #8
 8019b70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019b74:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8019b78:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8019b7c:	fb10 330c 	smlabb	r3, r0, ip, r3
 8019b80:	f36c 4517 	bfi	r5, ip, #16, #8
 8019b84:	fb16 3101 	smlabb	r1, r6, r1, r3
 8019b88:	9b00      	ldr	r3, [sp, #0]
 8019b8a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8019b8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019b92:	604d      	str	r5, [r1, #4]
 8019b94:	e7a3      	b.n	8019ade <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8019b96:	3301      	adds	r3, #1
 8019b98:	42bb      	cmp	r3, r7
 8019b9a:	dd23      	ble.n	8019be4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8019b9c:	eba3 0907 	sub.w	r9, r3, r7
 8019ba0:	f1b9 0f00 	cmp.w	r9, #0
 8019ba4:	dc20      	bgt.n	8019be8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8019ba6:	9e02      	ldr	r6, [sp, #8]
 8019ba8:	2700      	movs	r7, #0
 8019baa:	2e00      	cmp	r6, #0
 8019bac:	f340 8142 	ble.w	8019e34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8019bb0:	f108 0301 	add.w	r3, r8, #1
 8019bb4:	9307      	str	r3, [sp, #28]
 8019bb6:	f898 3000 	ldrb.w	r3, [r8]
 8019bba:	b2db      	uxtb	r3, r3
 8019bbc:	119a      	asrs	r2, r3, #6
 8019bbe:	d12a      	bne.n	8019c16 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8019bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019bc4:	9a00      	ldr	r2, [sp, #0]
 8019bc6:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019bca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019bce:	685d      	ldr	r5, [r3, #4]
 8019bd0:	f040 811f 	bne.w	8019e12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019bd4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019bd8:	7025      	strb	r5, [r4, #0]
 8019bda:	7063      	strb	r3, [r4, #1]
 8019bdc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019be0:	70a3      	strb	r3, [r4, #2]
 8019be2:	e04e      	b.n	8019c82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019be4:	1aff      	subs	r7, r7, r3
 8019be6:	e77b      	b.n	8019ae0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8019be8:	9b02      	ldr	r3, [sp, #8]
 8019bea:	4620      	mov	r0, r4
 8019bec:	462a      	mov	r2, r5
 8019bee:	454b      	cmp	r3, r9
 8019bf0:	bfa8      	it	ge
 8019bf2:	464b      	movge	r3, r9
 8019bf4:	461f      	mov	r7, r3
 8019bf6:	9b02      	ldr	r3, [sp, #8]
 8019bf8:	4639      	mov	r1, r7
 8019bfa:	1bde      	subs	r6, r3, r7
 8019bfc:	eba9 0907 	sub.w	r9, r9, r7
 8019c00:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019c04:	465b      	mov	r3, fp
 8019c06:	f7e9 f951 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8019c0a:	443c      	add	r4, r7
 8019c0c:	e7cc      	b.n	8019ba8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8019c0e:	46c8      	mov	r8, r9
 8019c10:	9e02      	ldr	r6, [sp, #8]
 8019c12:	46b9      	mov	r9, r7
 8019c14:	e7c8      	b.n	8019ba8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8019c16:	2a01      	cmp	r2, #1
 8019c18:	d136      	bne.n	8019c88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8019c1a:	f003 0103 	and.w	r1, r3, #3
 8019c1e:	1ea8      	subs	r0, r5, #2
 8019c20:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019c24:	4408      	add	r0, r1
 8019c26:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8019c2a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019c2e:	b2c0      	uxtb	r0, r0
 8019c30:	f1a1 0102 	sub.w	r1, r1, #2
 8019c34:	f1a3 0302 	sub.w	r3, r3, #2
 8019c38:	f360 0507 	bfi	r5, r0, #0, #8
 8019c3c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8019c40:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8019c44:	f361 250f 	bfi	r5, r1, #8, #8
 8019c48:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8019c4c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8019c50:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8019c54:	f04f 0303 	mov.w	r3, #3
 8019c58:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8019c5c:	f04f 0c07 	mov.w	ip, #7
 8019c60:	9b00      	ldr	r3, [sp, #0]
 8019c62:	f368 4517 	bfi	r5, r8, #16, #8
 8019c66:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8019c6a:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8019c6e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019c72:	f8cc 5004 	str.w	r5, [ip, #4]
 8019c76:	f040 80cd 	bne.w	8019e14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8019c7a:	7020      	strb	r0, [r4, #0]
 8019c7c:	7061      	strb	r1, [r4, #1]
 8019c7e:	f884 8002 	strb.w	r8, [r4, #2]
 8019c82:	3e01      	subs	r6, #1
 8019c84:	3403      	adds	r4, #3
 8019c86:	e0c1      	b.n	8019e0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8019c88:	2a02      	cmp	r2, #2
 8019c8a:	d13d      	bne.n	8019d08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8019c8c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019c94:	f108 0202 	add.w	r2, r8, #2
 8019c98:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019c9c:	b2c9      	uxtb	r1, r1
 8019c9e:	f1a3 0c20 	sub.w	ip, r3, #32
 8019ca2:	9207      	str	r2, [sp, #28]
 8019ca4:	f001 000f 	and.w	r0, r1, #15
 8019ca8:	f1a0 0008 	sub.w	r0, r0, #8
 8019cac:	4460      	add	r0, ip
 8019cae:	4428      	add	r0, r5
 8019cb0:	b2c0      	uxtb	r0, r0
 8019cb2:	f360 0507 	bfi	r5, r0, #0, #8
 8019cb6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8019cba:	f1a2 0220 	sub.w	r2, r2, #32
 8019cbe:	4413      	add	r3, r2
 8019cc0:	ea4f 1221 	mov.w	r2, r1, asr #4
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	f1a2 0208 	sub.w	r2, r2, #8
 8019cca:	f363 250f 	bfi	r5, r3, #8, #8
 8019cce:	4462      	add	r2, ip
 8019cd0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019cd4:	f04f 0c03 	mov.w	ip, #3
 8019cd8:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8019cdc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8019ce0:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8019ce4:	f04f 0107 	mov.w	r1, #7
 8019ce8:	f362 4517 	bfi	r5, r2, #16, #8
 8019cec:	fb11 c100 	smlabb	r1, r1, r0, ip
 8019cf0:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8019cf4:	9900      	ldr	r1, [sp, #0]
 8019cf6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8019cfa:	604d      	str	r5, [r1, #4]
 8019cfc:	f040 8089 	bne.w	8019e12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019d00:	7020      	strb	r0, [r4, #0]
 8019d02:	7063      	strb	r3, [r4, #1]
 8019d04:	70a2      	strb	r2, [r4, #2]
 8019d06:	e7bc      	b.n	8019c82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019d08:	2bfe      	cmp	r3, #254	@ 0xfe
 8019d0a:	d12f      	bne.n	8019d6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8019d0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019d10:	f108 0304 	add.w	r3, r8, #4
 8019d14:	f898 2002 	ldrb.w	r2, [r8, #2]
 8019d18:	f04f 0c03 	mov.w	ip, #3
 8019d1c:	f898 1003 	ldrb.w	r1, [r8, #3]
 8019d20:	b2c0      	uxtb	r0, r0
 8019d22:	b2d2      	uxtb	r2, r2
 8019d24:	9307      	str	r3, [sp, #28]
 8019d26:	b2c9      	uxtb	r1, r1
 8019d28:	f360 0507 	bfi	r5, r0, #0, #8
 8019d2c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8019d30:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019d34:	f362 250f 	bfi	r5, r2, #8, #8
 8019d38:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8019d3c:	f04f 0307 	mov.w	r3, #7
 8019d40:	f361 4517 	bfi	r5, r1, #16, #8
 8019d44:	fb13 c300 	smlabb	r3, r3, r0, ip
 8019d48:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8019d4c:	9b00      	ldr	r3, [sp, #0]
 8019d4e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019d52:	605d      	str	r5, [r3, #4]
 8019d54:	d15d      	bne.n	8019e12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019d56:	7020      	strb	r0, [r4, #0]
 8019d58:	7062      	strb	r2, [r4, #1]
 8019d5a:	70a1      	strb	r1, [r4, #2]
 8019d5c:	e791      	b.n	8019c82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019d5e:	bf00      	nop
 8019d60:	240253d4 	.word	0x240253d4
 8019d64:	240253ce 	.word	0x240253ce
 8019d68:	24000140 	.word	0x24000140
 8019d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019d70:	1c5a      	adds	r2, r3, #1
 8019d72:	b94b      	cbnz	r3, 8019d88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8019d74:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019d78:	d14c      	bne.n	8019e14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8019d7a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8019d7e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019d82:	7025      	strb	r5, [r4, #0]
 8019d84:	7062      	strb	r2, [r4, #1]
 8019d86:	e72b      	b.n	8019be0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8019d88:	4296      	cmp	r6, r2
 8019d8a:	46b0      	mov	r8, r6
 8019d8c:	bfa8      	it	ge
 8019d8e:	4690      	movge	r8, r2
 8019d90:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019d94:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019d98:	eba6 0608 	sub.w	r6, r6, r8
 8019d9c:	eba2 0908 	sub.w	r9, r2, r8
 8019da0:	9308      	str	r3, [sp, #32]
 8019da2:	b2eb      	uxtb	r3, r5
 8019da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019da6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019dac:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8019db2:	9b08      	ldr	r3, [sp, #32]
 8019db4:	d030      	beq.n	8019e18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8019db6:	18fb      	adds	r3, r7, r3
 8019db8:	2bc0      	cmp	r3, #192	@ 0xc0
 8019dba:	dd15      	ble.n	8019de8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8019dbc:	4650      	mov	r0, sl
 8019dbe:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8019dc2:	f7e9 f859 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 8019dc6:	2203      	movs	r2, #3
 8019dc8:	4651      	mov	r1, sl
 8019dca:	465b      	mov	r3, fp
 8019dcc:	4620      	mov	r0, r4
 8019dce:	443c      	add	r4, r7
 8019dd0:	fb97 f2f2 	sdiv	r2, r7, r2
 8019dd4:	f7e9 f894 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8019dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8019ed0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8019dda:	2700      	movs	r7, #0
 8019ddc:	459a      	cmp	sl, r3
 8019dde:	bf0c      	ite	eq
 8019de0:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8019edc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8019de4:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8019ed0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8019de8:	eb0a 0307 	add.w	r3, sl, r7
 8019dec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019dee:	f1b8 0801 	subs.w	r8, r8, #1
 8019df2:	f103 0303 	add.w	r3, r3, #3
 8019df6:	f803 2c03 	strb.w	r2, [r3, #-3]
 8019dfa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019dfc:	f803 2c02 	strb.w	r2, [r3, #-2]
 8019e00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019e02:	f803 2c01 	strb.w	r2, [r3, #-1]
 8019e06:	d1f1      	bne.n	8019dec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8019e08:	9b08      	ldr	r3, [sp, #32]
 8019e0a:	441f      	add	r7, r3
 8019e0c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019e10:	e6cb      	b.n	8019baa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8019e12:	2201      	movs	r2, #1
 8019e14:	4690      	mov	r8, r2
 8019e16:	e7bb      	b.n	8019d90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8019e18:	4423      	add	r3, r4
 8019e1a:	42a3      	cmp	r3, r4
 8019e1c:	d9f6      	bls.n	8019e0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8019e1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019e20:	3403      	adds	r4, #3
 8019e22:	f804 2c03 	strb.w	r2, [r4, #-3]
 8019e26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019e28:	f804 2c02 	strb.w	r2, [r4, #-2]
 8019e2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019e2e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8019e32:	e7f2      	b.n	8019e1a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8019e34:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019e38:	d00e      	beq.n	8019e58 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8019e3a:	b16f      	cbz	r7, 8019e58 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8019e3c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8019e40:	4650      	mov	r0, sl
 8019e42:	f7e9 f819 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 8019e46:	2203      	movs	r2, #3
 8019e48:	4620      	mov	r0, r4
 8019e4a:	443c      	add	r4, r7
 8019e4c:	465b      	mov	r3, fp
 8019e4e:	4651      	mov	r1, sl
 8019e50:	fb97 f2f2 	sdiv	r2, r7, r2
 8019e54:	f7e9 f854 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8019e58:	4b1e      	ldr	r3, [pc, #120]	@ (8019ed4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8019e5a:	9a02      	ldr	r2, [sp, #8]
 8019e5c:	881b      	ldrh	r3, [r3, #0]
 8019e5e:	1a9b      	subs	r3, r3, r2
 8019e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e64:	441c      	add	r4, r3
 8019e66:	9b04      	ldr	r3, [sp, #16]
 8019e68:	3301      	adds	r3, #1
 8019e6a:	9304      	str	r3, [sp, #16]
 8019e6c:	9a04      	ldr	r2, [sp, #16]
 8019e6e:	9b01      	ldr	r3, [sp, #4]
 8019e70:	4293      	cmp	r3, r2
 8019e72:	d11c      	bne.n	8019eae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8019e74:	9b03      	ldr	r3, [sp, #12]
 8019e76:	2500      	movs	r5, #0
 8019e78:	9a03      	ldr	r2, [sp, #12]
 8019e7a:	1c5e      	adds	r6, r3, #1
 8019e7c:	9b05      	ldr	r3, [sp, #20]
 8019e7e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8019e82:	4629      	mov	r1, r5
 8019e84:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8019e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019e8c:	9b06      	ldr	r3, [sp, #24]
 8019e8e:	fa98 f888 	rev.w	r8, r8
 8019e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e94:	4498      	add	r8, r3
 8019e96:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019e9a:	1aff      	subs	r7, r7, r3
 8019e9c:	f007 ff34 	bl	8021d08 <memset>
 8019ea0:	b2bf      	uxth	r7, r7
 8019ea2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8019ea6:	f7e8 ffdd 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 8019eaa:	46c1      	mov	r9, r8
 8019eac:	e5db      	b.n	8019a66 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8019eae:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8019eb2:	9b02      	ldr	r3, [sp, #8]
 8019eb4:	1aff      	subs	r7, r7, r3
 8019eb6:	eba7 0709 	sub.w	r7, r7, r9
 8019eba:	b2bf      	uxth	r7, r7
 8019ebc:	e7f3      	b.n	8019ea6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8019ebe:	4b06      	ldr	r3, [pc, #24]	@ (8019ed8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8019ec0:	6818      	ldr	r0, [r3, #0]
 8019ec2:	6803      	ldr	r3, [r0, #0]
 8019ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ec6:	4798      	blx	r3
 8019ec8:	b013      	add	sp, #76	@ 0x4c
 8019eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ece:	bf00      	nop
 8019ed0:	24000140 	.word	0x24000140
 8019ed4:	240253ce 	.word	0x240253ce
 8019ed8:	240253d4 	.word	0x240253d4
 8019edc:	24000240 	.word	0x24000240

08019ee0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ee4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8019ee8:	9c06      	ldr	r4, [sp, #24]
 8019eea:	2800      	cmp	r0, #0
 8019eec:	d06e      	beq.n	8019fcc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019eee:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8019ef2:	2d00      	cmp	r5, #0
 8019ef4:	dd6a      	ble.n	8019fcc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019ef6:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8019efa:	f1bc 0f00 	cmp.w	ip, #0
 8019efe:	dd65      	ble.n	8019fcc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019f00:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8019f04:	28ff      	cmp	r0, #255	@ 0xff
 8019f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f0a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8019f0e:	fb02 3306 	mla	r3, r2, r6, r3
 8019f12:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8019f16:	b2e4      	uxtb	r4, r4
 8019f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f1c:	4419      	add	r1, r3
 8019f1e:	fb02 f30c 	mul.w	r3, r2, ip
 8019f22:	eba2 0205 	sub.w	r2, r2, r5
 8019f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f32:	440b      	add	r3, r1
 8019f34:	d03e      	beq.n	8019fb4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8019f36:	fa1f fc80 	uxth.w	ip, r0
 8019f3a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8019f3e:	fb06 f60c 	mul.w	r6, r6, ip
 8019f42:	b280      	uxth	r0, r0
 8019f44:	fb07 f70c 	mul.w	r7, r7, ip
 8019f48:	fb04 f40c 	mul.w	r4, r4, ip
 8019f4c:	4299      	cmp	r1, r3
 8019f4e:	d23d      	bcs.n	8019fcc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019f50:	eb01 0c05 	add.w	ip, r1, r5
 8019f54:	458c      	cmp	ip, r1
 8019f56:	f101 0e03 	add.w	lr, r1, #3
 8019f5a:	d928      	bls.n	8019fae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8019f5c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8019f60:	fb11 f100 	smulbb	r1, r1, r0
 8019f64:	4421      	add	r1, r4
 8019f66:	b289      	uxth	r1, r1
 8019f68:	f101 0801 	add.w	r8, r1, #1
 8019f6c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019f70:	1209      	asrs	r1, r1, #8
 8019f72:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8019f76:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8019f7a:	fb11 f100 	smulbb	r1, r1, r0
 8019f7e:	4439      	add	r1, r7
 8019f80:	b289      	uxth	r1, r1
 8019f82:	f101 0801 	add.w	r8, r1, #1
 8019f86:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019f8a:	1209      	asrs	r1, r1, #8
 8019f8c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8019f90:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8019f94:	fb11 f100 	smulbb	r1, r1, r0
 8019f98:	4431      	add	r1, r6
 8019f9a:	b289      	uxth	r1, r1
 8019f9c:	f101 0801 	add.w	r8, r1, #1
 8019fa0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019fa4:	1209      	asrs	r1, r1, #8
 8019fa6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8019faa:	4671      	mov	r1, lr
 8019fac:	e7d2      	b.n	8019f54 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8019fae:	4411      	add	r1, r2
 8019fb0:	e7cc      	b.n	8019f4c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8019fb2:	4411      	add	r1, r2
 8019fb4:	4299      	cmp	r1, r3
 8019fb6:	d209      	bcs.n	8019fcc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019fb8:	1948      	adds	r0, r1, r5
 8019fba:	4281      	cmp	r1, r0
 8019fbc:	d2f9      	bcs.n	8019fb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8019fbe:	700c      	strb	r4, [r1, #0]
 8019fc0:	3103      	adds	r1, #3
 8019fc2:	f801 7c02 	strb.w	r7, [r1, #-2]
 8019fc6:	f801 6c01 	strb.w	r6, [r1, #-1]
 8019fca:	e7f6      	b.n	8019fba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8019fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd4:	b093      	sub	sp, #76	@ 0x4c
 8019fd6:	4699      	mov	r9, r3
 8019fd8:	4617      	mov	r7, r2
 8019fda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fde:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019fe8:	a80c      	add	r0, sp, #48	@ 0x30
 8019fea:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8019fee:	460d      	mov	r5, r1
 8019ff0:	4649      	mov	r1, r9
 8019ff2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019ff6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019ffa:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8019ffe:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801a002:	f7f3 fe17 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 801a006:	4639      	mov	r1, r7
 801a008:	a80c      	add	r0, sp, #48	@ 0x30
 801a00a:	f7f3 fe13 	bl	800dc34 <_ZN8touchgfx4RectaNERKS0_>
 801a00e:	4b78      	ldr	r3, [pc, #480]	@ (801a1f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a010:	8818      	ldrh	r0, [r3, #0]
 801a012:	4b78      	ldr	r3, [pc, #480]	@ (801a1f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801a014:	b202      	sxth	r2, r0
 801a016:	8819      	ldrh	r1, [r3, #0]
 801a018:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801a01c:	b20f      	sxth	r7, r1
 801a01e:	2b00      	cmp	r3, #0
 801a020:	da07      	bge.n	801a032 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801a022:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801a026:	4463      	add	r3, ip
 801a028:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a02c:	2300      	movs	r3, #0
 801a02e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a032:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801a036:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801a03a:	1ad2      	subs	r2, r2, r3
 801a03c:	4594      	cmp	ip, r2
 801a03e:	bfc4      	itt	gt
 801a040:	1ac2      	subgt	r2, r0, r3
 801a042:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801a046:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a04a:	2a00      	cmp	r2, #0
 801a04c:	da07      	bge.n	801a05e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801a04e:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801a052:	4462      	add	r2, ip
 801a054:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a058:	2200      	movs	r2, #0
 801a05a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a05e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a062:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801a066:	1abf      	subs	r7, r7, r2
 801a068:	45bc      	cmp	ip, r7
 801a06a:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801a1fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801a06e:	bfc8      	it	gt
 801a070:	1a8f      	subgt	r7, r1, r2
 801a072:	f89c c000 	ldrb.w	ip, [ip]
 801a076:	bfc8      	it	gt
 801a078:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801a07c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801a080:	f1bc 0f00 	cmp.w	ip, #0
 801a084:	d176      	bne.n	801a174 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801a086:	4287      	cmp	r7, r0
 801a088:	bf14      	ite	ne
 801a08a:	2100      	movne	r1, #0
 801a08c:	2101      	moveq	r1, #1
 801a08e:	2f00      	cmp	r7, #0
 801a090:	9107      	str	r1, [sp, #28]
 801a092:	dd73      	ble.n	801a17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a094:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801a098:	2900      	cmp	r1, #0
 801a09a:	9104      	str	r1, [sp, #16]
 801a09c:	dd6e      	ble.n	801a17c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a09e:	f8b9 1000 	ldrh.w	r1, [r9]
 801a0a2:	a80e      	add	r0, sp, #56	@ 0x38
 801a0a4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801a0a8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801a0ac:	1a5b      	subs	r3, r3, r1
 801a0ae:	a910      	add	r1, sp, #64	@ 0x40
 801a0b0:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a0b4:	b21b      	sxth	r3, r3
 801a0b6:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801a0ba:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801a200 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a0be:	9305      	str	r3, [sp, #20]
 801a0c0:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a0c4:	1ad2      	subs	r2, r2, r3
 801a0c6:	b213      	sxth	r3, r2
 801a0c8:	9306      	str	r3, [sp, #24]
 801a0ca:	9b05      	ldr	r3, [sp, #20]
 801a0cc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a0d0:	9b06      	ldr	r3, [sp, #24]
 801a0d2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a0d6:	9b04      	ldr	r3, [sp, #16]
 801a0d8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801a0dc:	2300      	movs	r3, #0
 801a0de:	9310      	str	r3, [sp, #64]	@ 0x40
 801a0e0:	f7f8 fe48 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0e4:	4640      	mov	r0, r8
 801a0e6:	f7f8 fe01 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0ea:	a810      	add	r0, sp, #64	@ 0x40
 801a0ec:	f7f8 fdfe 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0f0:	4b41      	ldr	r3, [pc, #260]	@ (801a1f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a0f2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	881b      	ldrh	r3, [r3, #0]
 801a0fa:	9308      	str	r3, [sp, #32]
 801a0fc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a100:	b21b      	sxth	r3, r3
 801a102:	9303      	str	r3, [sp, #12]
 801a104:	682b      	ldr	r3, [r5, #0]
 801a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a108:	4798      	blx	r3
 801a10a:	9a03      	ldr	r2, [sp, #12]
 801a10c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801a110:	4681      	mov	r9, r0
 801a112:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a116:	fb13 f302 	smulbb	r3, r3, r2
 801a11a:	2203      	movs	r2, #3
 801a11c:	f8da 0000 	ldr.w	r0, [sl]
 801a120:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a124:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801a126:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a128:	441d      	add	r5, r3
 801a12a:	6803      	ldr	r3, [r0, #0]
 801a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a12e:	4798      	blx	r3
 801a130:	9009      	str	r0, [sp, #36]	@ 0x24
 801a132:	f8da 0000 	ldr.w	r0, [sl]
 801a136:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801a13a:	6803      	ldr	r3, [r0, #0]
 801a13c:	910a      	str	r1, [sp, #40]	@ 0x28
 801a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a140:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801a144:	4798      	blx	r3
 801a146:	f010 0f01 	tst.w	r0, #1
 801a14a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801a14e:	d01e      	beq.n	801a18e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a150:	f8da 0000 	ldr.w	r0, [sl]
 801a154:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a158:	6803      	ldr	r3, [r0, #0]
 801a15a:	9200      	str	r2, [sp, #0]
 801a15c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801a15e:	462b      	mov	r3, r5
 801a160:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a164:	47b0      	blx	r6
 801a166:	9b05      	ldr	r3, [sp, #20]
 801a168:	80a7      	strh	r7, [r4, #4]
 801a16a:	8023      	strh	r3, [r4, #0]
 801a16c:	9b06      	ldr	r3, [sp, #24]
 801a16e:	8063      	strh	r3, [r4, #2]
 801a170:	9b04      	ldr	r3, [sp, #16]
 801a172:	e007      	b.n	801a184 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a174:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801a178:	4288      	cmp	r0, r1
 801a17a:	e785      	b.n	801a088 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a17c:	2300      	movs	r3, #0
 801a17e:	8023      	strh	r3, [r4, #0]
 801a180:	8063      	strh	r3, [r4, #2]
 801a182:	80a3      	strh	r3, [r4, #4]
 801a184:	4620      	mov	r0, r4
 801a186:	80e3      	strh	r3, [r4, #6]
 801a188:	b013      	add	sp, #76	@ 0x4c
 801a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a18e:	fb09 f606 	mul.w	r6, r9, r6
 801a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a194:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a198:	9a07      	ldr	r2, [sp, #28]
 801a19a:	4433      	add	r3, r6
 801a19c:	461e      	mov	r6, r3
 801a19e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801a1a2:	b16a      	cbz	r2, 801a1c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a1a4:	9a08      	ldr	r2, [sp, #32]
 801a1a6:	4593      	cmp	fp, r2
 801a1a8:	d10a      	bne.n	801a1c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a1aa:	f8da 0000 	ldr.w	r0, [sl]
 801a1ae:	fb09 f303 	mul.w	r3, r9, r3
 801a1b2:	4629      	mov	r1, r5
 801a1b4:	6802      	ldr	r2, [r0, #0]
 801a1b6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a1ba:	4632      	mov	r2, r6
 801a1bc:	47d0      	blx	sl
 801a1be:	e7d2      	b.n	801a166 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a1c0:	9a03      	ldr	r2, [sp, #12]
 801a1c2:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801a200 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a1c6:	fb02 5803 	mla	r8, r2, r3, r5
 801a1ca:	4545      	cmp	r5, r8
 801a1cc:	d2cb      	bcs.n	801a166 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a1ce:	f8db 0000 	ldr.w	r0, [fp]
 801a1d2:	4629      	mov	r1, r5
 801a1d4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801a1d8:	6802      	ldr	r2, [r0, #0]
 801a1da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1de:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a1e2:	4632      	mov	r2, r6
 801a1e4:	47d0      	blx	sl
 801a1e6:	9b03      	ldr	r3, [sp, #12]
 801a1e8:	444e      	add	r6, r9
 801a1ea:	441d      	add	r5, r3
 801a1ec:	e7ed      	b.n	801a1ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a1ee:	bf00      	nop
 801a1f0:	240253c8 	.word	0x240253c8
 801a1f4:	240253ca 	.word	0x240253ca
 801a1f8:	240253ce 	.word	0x240253ce
 801a1fc:	240253cc 	.word	0x240253cc
 801a200:	240253d4 	.word	0x240253d4

0801a204 <_ZN8touchgfx8LCD24bppC1Ev>:
 801a204:	2200      	movs	r2, #0
 801a206:	490e      	ldr	r1, [pc, #56]	@ (801a240 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801a208:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801a20c:	6001      	str	r1, [r0, #0]
 801a20e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a212:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a216:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801a21a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801a21e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801a222:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801a226:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801a22a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801a22e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801a232:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801a236:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801a23a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801a23e:	4770      	bx	lr
 801a240:	080259ac 	.word	0x080259ac

0801a244 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	b091      	sub	sp, #68	@ 0x44
 801a24a:	4607      	mov	r7, r0
 801a24c:	4688      	mov	r8, r1
 801a24e:	6810      	ldr	r0, [r2, #0]
 801a250:	6851      	ldr	r1, [r2, #4]
 801a252:	ac0c      	add	r4, sp, #48	@ 0x30
 801a254:	4616      	mov	r6, r2
 801a256:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801a25a:	4d64      	ldr	r5, [pc, #400]	@ (801a3ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a25c:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801a3f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a260:	c403      	stmia	r4!, {r0, r1}
 801a262:	6818      	ldr	r0, [r3, #0]
 801a264:	ac0e      	add	r4, sp, #56	@ 0x38
 801a266:	6859      	ldr	r1, [r3, #4]
 801a268:	c403      	stmia	r4!, {r0, r1}
 801a26a:	a80c      	add	r0, sp, #48	@ 0x30
 801a26c:	f7f8 fd3e 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a270:	4631      	mov	r1, r6
 801a272:	a80e      	add	r0, sp, #56	@ 0x38
 801a274:	f7f8 fd7e 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a278:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a27c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a280:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a284:	6828      	ldr	r0, [r5, #0]
 801a286:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a28a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801a28e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801a292:	440f      	add	r7, r1
 801a294:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a298:	440a      	add	r2, r1
 801a29a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a29e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a2a2:	4413      	add	r3, r2
 801a2a4:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a2a8:	6803      	ldr	r3, [r0, #0]
 801a2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a2ac:	4798      	blx	r3
 801a2ae:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a2b2:	6828      	ldr	r0, [r5, #0]
 801a2b4:	d01f      	beq.n	801a2f6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801a2b6:	2201      	movs	r2, #1
 801a2b8:	2500      	movs	r5, #0
 801a2ba:	6801      	ldr	r1, [r0, #0]
 801a2bc:	b2a4      	uxth	r4, r4
 801a2be:	b2b6      	uxth	r6, r6
 801a2c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a2c4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801a2c8:	250b      	movs	r5, #11
 801a2ca:	9507      	str	r5, [sp, #28]
 801a2cc:	f8ba 5000 	ldrh.w	r5, [sl]
 801a2d0:	f8cd 9010 	str.w	r9, [sp, #16]
 801a2d4:	9602      	str	r6, [sp, #8]
 801a2d6:	9401      	str	r4, [sp, #4]
 801a2d8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801a2dc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a2e0:	9203      	str	r2, [sp, #12]
 801a2e2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a2e6:	9200      	str	r2, [sp, #0]
 801a2e8:	4642      	mov	r2, r8
 801a2ea:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801a2ec:	4639      	mov	r1, r7
 801a2ee:	47a0      	blx	r4
 801a2f0:	b011      	add	sp, #68	@ 0x44
 801a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2f6:	6803      	ldr	r3, [r0, #0]
 801a2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2fa:	4798      	blx	r3
 801a2fc:	f8ba 5000 	ldrh.w	r5, [sl]
 801a300:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a304:	f04f 0e04 	mov.w	lr, #4
 801a308:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a30c:	436e      	muls	r6, r5
 801a30e:	fb05 2303 	mla	r3, r5, r3, r2
 801a312:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a316:	1b2d      	subs	r5, r5, r4
 801a318:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a320:	4418      	add	r0, r3
 801a322:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a326:	1982      	adds	r2, r0, r6
 801a328:	1b1b      	subs	r3, r3, r4
 801a32a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a330:	4290      	cmp	r0, r2
 801a332:	d254      	bcs.n	801a3de <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a334:	eb00 0a04 	add.w	sl, r0, r4
 801a338:	4550      	cmp	r0, sl
 801a33a:	d24c      	bcs.n	801a3d6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801a33c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a340:	fb1e e101 	smlabb	r1, lr, r1, lr
 801a344:	eb08 0c01 	add.w	ip, r8, r1
 801a348:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801a34c:	b173      	cbz	r3, 801a36c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a34e:	2bff      	cmp	r3, #255	@ 0xff
 801a350:	f818 b001 	ldrb.w	fp, [r8, r1]
 801a354:	d10c      	bne.n	801a370 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a356:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a35a:	d109      	bne.n	801a370 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a35c:	f880 b000 	strb.w	fp, [r0]
 801a360:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a364:	7043      	strb	r3, [r0, #1]
 801a366:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801a36a:	7083      	strb	r3, [r0, #2]
 801a36c:	3003      	adds	r0, #3
 801a36e:	e7e3      	b.n	801a338 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a370:	fb09 f103 	mul.w	r1, r9, r3
 801a374:	1c4b      	adds	r3, r1, #1
 801a376:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a37a:	7801      	ldrb	r1, [r0, #0]
 801a37c:	121b      	asrs	r3, r3, #8
 801a37e:	b29e      	uxth	r6, r3
 801a380:	43db      	mvns	r3, r3
 801a382:	fb1b fb06 	smulbb	fp, fp, r6
 801a386:	b2db      	uxtb	r3, r3
 801a388:	fb01 b103 	mla	r1, r1, r3, fp
 801a38c:	b289      	uxth	r1, r1
 801a38e:	f101 0b01 	add.w	fp, r1, #1
 801a392:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a396:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a39a:	fb1b fb03 	smulbb	fp, fp, r3
 801a39e:	1209      	asrs	r1, r1, #8
 801a3a0:	7001      	strb	r1, [r0, #0]
 801a3a2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a3a6:	fb01 b106 	mla	r1, r1, r6, fp
 801a3aa:	b289      	uxth	r1, r1
 801a3ac:	f101 0b01 	add.w	fp, r1, #1
 801a3b0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a3b4:	1209      	asrs	r1, r1, #8
 801a3b6:	7041      	strb	r1, [r0, #1]
 801a3b8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801a3bc:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a3c0:	fb1c f303 	smulbb	r3, ip, r3
 801a3c4:	fb01 3606 	mla	r6, r1, r6, r3
 801a3c8:	b2b6      	uxth	r6, r6
 801a3ca:	1c73      	adds	r3, r6, #1
 801a3cc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a3d0:	1236      	asrs	r6, r6, #8
 801a3d2:	7086      	strb	r6, [r0, #2]
 801a3d4:	e7ca      	b.n	801a36c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3d8:	4428      	add	r0, r5
 801a3da:	441f      	add	r7, r3
 801a3dc:	e7a8      	b.n	801a330 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801a3de:	4b03      	ldr	r3, [pc, #12]	@ (801a3ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a3e0:	6818      	ldr	r0, [r3, #0]
 801a3e2:	6803      	ldr	r3, [r0, #0]
 801a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3e6:	4798      	blx	r3
 801a3e8:	e782      	b.n	801a2f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a3ea:	bf00      	nop
 801a3ec:	240253d4 	.word	0x240253d4
 801a3f0:	240253ce 	.word	0x240253ce

0801a3f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f8:	b091      	sub	sp, #68	@ 0x44
 801a3fa:	4680      	mov	r8, r0
 801a3fc:	460e      	mov	r6, r1
 801a3fe:	6810      	ldr	r0, [r2, #0]
 801a400:	6851      	ldr	r1, [r2, #4]
 801a402:	ad0c      	add	r5, sp, #48	@ 0x30
 801a404:	4614      	mov	r4, r2
 801a406:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801a40a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801a5a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801a40e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801a5a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a412:	c503      	stmia	r5!, {r0, r1}
 801a414:	6818      	ldr	r0, [r3, #0]
 801a416:	ad0e      	add	r5, sp, #56	@ 0x38
 801a418:	6859      	ldr	r1, [r3, #4]
 801a41a:	c503      	stmia	r5!, {r0, r1}
 801a41c:	a80c      	add	r0, sp, #48	@ 0x30
 801a41e:	f7f8 fc65 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a422:	4621      	mov	r1, r4
 801a424:	a80e      	add	r0, sp, #56	@ 0x38
 801a426:	f7f8 fca5 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a42a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a42e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a432:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a436:	f8d9 0000 	ldr.w	r0, [r9]
 801a43a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a43e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801a442:	eb08 0401 	add.w	r4, r8, r1
 801a446:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a44a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801a44e:	440a      	add	r2, r1
 801a450:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a454:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a458:	4413      	add	r3, r2
 801a45a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a45e:	6803      	ldr	r3, [r0, #0]
 801a460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a462:	4798      	blx	r3
 801a464:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a468:	f8d9 0000 	ldr.w	r0, [r9]
 801a46c:	d022      	beq.n	801a4b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a46e:	2200      	movs	r2, #0
 801a470:	f04f 0c01 	mov.w	ip, #1
 801a474:	6801      	ldr	r1, [r0, #0]
 801a476:	b2ad      	uxth	r5, r5
 801a478:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a47c:	e9cd c208 	strd	ip, r2, [sp, #32]
 801a480:	f04f 0c0b 	mov.w	ip, #11
 801a484:	f8cd c01c 	str.w	ip, [sp, #28]
 801a488:	f8ba c000 	ldrh.w	ip, [sl]
 801a48c:	9704      	str	r7, [sp, #16]
 801a48e:	9502      	str	r5, [sp, #8]
 801a490:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801a494:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a498:	9203      	str	r2, [sp, #12]
 801a49a:	fa1f f288 	uxth.w	r2, r8
 801a49e:	9201      	str	r2, [sp, #4]
 801a4a0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a4a4:	9200      	str	r2, [sp, #0]
 801a4a6:	4632      	mov	r2, r6
 801a4a8:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801a4aa:	4621      	mov	r1, r4
 801a4ac:	47a8      	blx	r5
 801a4ae:	b011      	add	sp, #68	@ 0x44
 801a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4b4:	6803      	ldr	r3, [r0, #0]
 801a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a4b8:	4798      	blx	r3
 801a4ba:	f8ba 2000 	ldrh.w	r2, [sl]
 801a4be:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a4c2:	f04f 0e03 	mov.w	lr, #3
 801a4c6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801a4ca:	4355      	muls	r5, r2
 801a4cc:	fa1f fc87 	uxth.w	ip, r7
 801a4d0:	fb02 1303 	mla	r3, r2, r3, r1
 801a4d4:	eba2 0208 	sub.w	r2, r2, r8
 801a4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a4e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a4e4:	4418      	add	r0, r3
 801a4e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a4e8:	1943      	adds	r3, r0, r5
 801a4ea:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801a4ee:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801a4f2:	eba2 0208 	sub.w	r2, r2, r8
 801a4f6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a4fa:	b2ad      	uxth	r5, r5
 801a4fc:	4298      	cmp	r0, r3
 801a4fe:	d24a      	bcs.n	801a596 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801a500:	eb00 0908 	add.w	r9, r0, r8
 801a504:	4621      	mov	r1, r4
 801a506:	4548      	cmp	r0, r9
 801a508:	460c      	mov	r4, r1
 801a50a:	d240      	bcs.n	801a58e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a50c:	f04f 0a04 	mov.w	sl, #4
 801a510:	7824      	ldrb	r4, [r4, #0]
 801a512:	2fff      	cmp	r7, #255	@ 0xff
 801a514:	f101 0101 	add.w	r1, r1, #1
 801a518:	fb1e a404 	smlabb	r4, lr, r4, sl
 801a51c:	eb06 0a04 	add.w	sl, r6, r4
 801a520:	f816 b004 	ldrb.w	fp, [r6, r4]
 801a524:	d02b      	beq.n	801a57e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801a526:	7804      	ldrb	r4, [r0, #0]
 801a528:	fb14 f405 	smulbb	r4, r4, r5
 801a52c:	fb0b 440c 	mla	r4, fp, ip, r4
 801a530:	b2a4      	uxth	r4, r4
 801a532:	f104 0b01 	add.w	fp, r4, #1
 801a536:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a53a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a53e:	fb1b fb05 	smulbb	fp, fp, r5
 801a542:	1224      	asrs	r4, r4, #8
 801a544:	7004      	strb	r4, [r0, #0]
 801a546:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a54a:	fb04 b40c 	mla	r4, r4, ip, fp
 801a54e:	b2a4      	uxth	r4, r4
 801a550:	f104 0b01 	add.w	fp, r4, #1
 801a554:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a558:	1224      	asrs	r4, r4, #8
 801a55a:	7044      	strb	r4, [r0, #1]
 801a55c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a560:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a564:	fb1a fa05 	smulbb	sl, sl, r5
 801a568:	fb04 a40c 	mla	r4, r4, ip, sl
 801a56c:	b2a4      	uxth	r4, r4
 801a56e:	f104 0a01 	add.w	sl, r4, #1
 801a572:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a576:	1224      	asrs	r4, r4, #8
 801a578:	7084      	strb	r4, [r0, #2]
 801a57a:	3003      	adds	r0, #3
 801a57c:	e7c3      	b.n	801a506 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801a57e:	f880 b000 	strb.w	fp, [r0]
 801a582:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a586:	7044      	strb	r4, [r0, #1]
 801a588:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a58c:	e7f4      	b.n	801a578 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801a58e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a590:	4420      	add	r0, r4
 801a592:	188c      	adds	r4, r1, r2
 801a594:	e7b2      	b.n	801a4fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801a596:	4b03      	ldr	r3, [pc, #12]	@ (801a5a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a598:	6818      	ldr	r0, [r3, #0]
 801a59a:	6803      	ldr	r3, [r0, #0]
 801a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a59e:	4798      	blx	r3
 801a5a0:	e785      	b.n	801a4ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801a5a2:	bf00      	nop
 801a5a4:	240253d4 	.word	0x240253d4
 801a5a8:	240253ce 	.word	0x240253ce

0801a5ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a5ac:	b4f0      	push	{r4, r5, r6, r7}
 801a5ae:	460c      	mov	r4, r1
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a5b6:	461a      	mov	r2, r3
 801a5b8:	780f      	ldrb	r7, [r1, #0]
 801a5ba:	9b04      	ldr	r3, [sp, #16]
 801a5bc:	784e      	ldrb	r6, [r1, #1]
 801a5be:	b11f      	cbz	r7, 801a5c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801a5c0:	2f01      	cmp	r7, #1
 801a5c2:	d01d      	beq.n	801a600 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801a5c4:	bcf0      	pop	{r4, r5, r6, r7}
 801a5c6:	4770      	bx	lr
 801a5c8:	2e03      	cmp	r6, #3
 801a5ca:	d8fb      	bhi.n	801a5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a5cc:	e8df f006 	tbb	[pc, r6]
 801a5d0:	16140702 	.word	0x16140702
 801a5d4:	9504      	str	r5, [sp, #16]
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	bcf0      	pop	{r4, r5, r6, r7}
 801a5da:	f7ff be33 	b.w	801a244 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a5de:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a5e0:	2800      	cmp	r0, #0
 801a5e2:	d0ef      	beq.n	801a5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a5e4:	6806      	ldr	r6, [r0, #0]
 801a5e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a5ea:	68f5      	ldr	r5, [r6, #12]
 801a5ec:	4613      	mov	r3, r2
 801a5ee:	46ac      	mov	ip, r5
 801a5f0:	460a      	mov	r2, r1
 801a5f2:	4621      	mov	r1, r4
 801a5f4:	bcf0      	pop	{r4, r5, r6, r7}
 801a5f6:	4760      	bx	ip
 801a5f8:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a5fa:	e7f1      	b.n	801a5e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a5fc:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a5fe:	e7ef      	b.n	801a5e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a600:	2e03      	cmp	r6, #3
 801a602:	d8df      	bhi.n	801a5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a604:	e8df f006 	tbb	[pc, r6]
 801a608:	110f0702 	.word	0x110f0702
 801a60c:	9504      	str	r5, [sp, #16]
 801a60e:	4620      	mov	r0, r4
 801a610:	bcf0      	pop	{r4, r5, r6, r7}
 801a612:	f7ff beef 	b.w	801a3f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a616:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a618:	2800      	cmp	r0, #0
 801a61a:	d0d3      	beq.n	801a5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a61c:	6806      	ldr	r6, [r0, #0]
 801a61e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a622:	68b5      	ldr	r5, [r6, #8]
 801a624:	e7e2      	b.n	801a5ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801a626:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a628:	e7f6      	b.n	801a618 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801a62a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a62c:	e7f4      	b.n	801a618 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801a630 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801a630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a634:	4605      	mov	r5, r0
 801a636:	b08f      	sub	sp, #60	@ 0x3c
 801a638:	460c      	mov	r4, r1
 801a63a:	461f      	mov	r7, r3
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d052      	beq.n	801a6e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a640:	6808      	ldr	r0, [r1, #0]
 801a642:	ab0a      	add	r3, sp, #40	@ 0x28
 801a644:	6849      	ldr	r1, [r1, #4]
 801a646:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801a810 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801a64a:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801a814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801a64e:	c303      	stmia	r3!, {r0, r1}
 801a650:	6810      	ldr	r0, [r2, #0]
 801a652:	ab0c      	add	r3, sp, #48	@ 0x30
 801a654:	6851      	ldr	r1, [r2, #4]
 801a656:	c303      	stmia	r3!, {r0, r1}
 801a658:	a80a      	add	r0, sp, #40	@ 0x28
 801a65a:	f7f8 fb47 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a65e:	4621      	mov	r1, r4
 801a660:	a80c      	add	r0, sp, #48	@ 0x30
 801a662:	f7f8 fb87 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a666:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a66a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a66e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a672:	f8d8 0000 	ldr.w	r0, [r8]
 801a676:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a67a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801a67e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801a682:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801a686:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801a68a:	440a      	add	r2, r1
 801a68c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a690:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801a694:	4413      	add	r3, r2
 801a696:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a69a:	6803      	ldr	r3, [r0, #0]
 801a69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a69e:	4798      	blx	r3
 801a6a0:	2fff      	cmp	r7, #255	@ 0xff
 801a6a2:	d023      	beq.n	801a6ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801a6a4:	f010 0f04 	tst.w	r0, #4
 801a6a8:	f8d8 0000 	ldr.w	r0, [r8]
 801a6ac:	d021      	beq.n	801a6f2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801a6ae:	2100      	movs	r1, #0
 801a6b0:	f04f 0e01 	mov.w	lr, #1
 801a6b4:	f8d0 c000 	ldr.w	ip, [r0]
 801a6b8:	b2a4      	uxth	r4, r4
 801a6ba:	9106      	str	r1, [sp, #24]
 801a6bc:	b2b6      	uxth	r6, r6
 801a6be:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a6c2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a6c6:	e9cd e107 	strd	lr, r1, [sp, #28]
 801a6ca:	f8b9 e000 	ldrh.w	lr, [r9]
 801a6ce:	9703      	str	r7, [sp, #12]
 801a6d0:	9401      	str	r4, [sp, #4]
 801a6d2:	9600      	str	r6, [sp, #0]
 801a6d4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a6d8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a6dc:	9102      	str	r1, [sp, #8]
 801a6de:	4629      	mov	r1, r5
 801a6e0:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801a6e4:	47a0      	blx	r4
 801a6e6:	b00f      	add	sp, #60	@ 0x3c
 801a6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6ec:	f010 0f01 	tst.w	r0, #1
 801a6f0:	e7da      	b.n	801a6a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801a6f2:	6803      	ldr	r3, [r0, #0]
 801a6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6f6:	4798      	blx	r3
 801a6f8:	f8b9 1000 	ldrh.w	r1, [r9]
 801a6fc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a700:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801a704:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a708:	434c      	muls	r4, r1
 801a70a:	2fff      	cmp	r7, #255	@ 0xff
 801a70c:	fb01 2303 	mla	r3, r1, r3, r2
 801a710:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a714:	eba1 0106 	sub.w	r1, r1, r6
 801a718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a71c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a720:	4418      	add	r0, r3
 801a722:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a726:	eba3 0606 	sub.w	r6, r3, r6
 801a72a:	4404      	add	r4, r0
 801a72c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801a730:	d04a      	beq.n	801a7c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801a732:	43fa      	mvns	r2, r7
 801a734:	b2bb      	uxth	r3, r7
 801a736:	b2d7      	uxtb	r7, r2
 801a738:	42a0      	cmp	r0, r4
 801a73a:	d263      	bcs.n	801a804 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a73c:	eb00 0e0c 	add.w	lr, r0, ip
 801a740:	4586      	cmp	lr, r0
 801a742:	f100 0803 	add.w	r8, r0, #3
 801a746:	d93a      	bls.n	801a7be <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801a748:	f835 2b02 	ldrh.w	r2, [r5], #2
 801a74c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801a750:	00d0      	lsls	r0, r2, #3
 801a752:	fb19 f907 	smulbb	r9, r9, r7
 801a756:	b2c0      	uxtb	r0, r0
 801a758:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a75c:	fb00 9003 	mla	r0, r0, r3, r9
 801a760:	b280      	uxth	r0, r0
 801a762:	f100 0901 	add.w	r9, r0, #1
 801a766:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a76a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801a76e:	fb19 f907 	smulbb	r9, r9, r7
 801a772:	1200      	asrs	r0, r0, #8
 801a774:	f808 0c03 	strb.w	r0, [r8, #-3]
 801a778:	10d0      	asrs	r0, r2, #3
 801a77a:	1212      	asrs	r2, r2, #8
 801a77c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801a780:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801a784:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801a788:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a78c:	fb00 9003 	mla	r0, r0, r3, r9
 801a790:	b280      	uxth	r0, r0
 801a792:	f100 0901 	add.w	r9, r0, #1
 801a796:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a79a:	1200      	asrs	r0, r0, #8
 801a79c:	f808 0c02 	strb.w	r0, [r8, #-2]
 801a7a0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801a7a4:	fb10 f007 	smulbb	r0, r0, r7
 801a7a8:	fb02 0203 	mla	r2, r2, r3, r0
 801a7ac:	b292      	uxth	r2, r2
 801a7ae:	1c50      	adds	r0, r2, #1
 801a7b0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a7b4:	4640      	mov	r0, r8
 801a7b6:	1212      	asrs	r2, r2, #8
 801a7b8:	f808 2c01 	strb.w	r2, [r8, #-1]
 801a7bc:	e7c0      	b.n	801a740 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801a7be:	4408      	add	r0, r1
 801a7c0:	4435      	add	r5, r6
 801a7c2:	e7b9      	b.n	801a738 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801a7c4:	4408      	add	r0, r1
 801a7c6:	4435      	add	r5, r6
 801a7c8:	42a0      	cmp	r0, r4
 801a7ca:	d21b      	bcs.n	801a804 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a7cc:	eb00 070c 	add.w	r7, r0, ip
 801a7d0:	42b8      	cmp	r0, r7
 801a7d2:	d2f7      	bcs.n	801a7c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801a7d4:	f835 3b02 	ldrh.w	r3, [r5], #2
 801a7d8:	3003      	adds	r0, #3
 801a7da:	00da      	lsls	r2, r3, #3
 801a7dc:	b2d2      	uxtb	r2, r2
 801a7de:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a7e2:	f800 2c03 	strb.w	r2, [r0, #-3]
 801a7e6:	10da      	asrs	r2, r3, #3
 801a7e8:	121b      	asrs	r3, r3, #8
 801a7ea:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801a7ee:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801a7f2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a7f6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a7fa:	f800 2c02 	strb.w	r2, [r0, #-2]
 801a7fe:	f800 3c01 	strb.w	r3, [r0, #-1]
 801a802:	e7e5      	b.n	801a7d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801a804:	4b02      	ldr	r3, [pc, #8]	@ (801a810 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801a806:	6818      	ldr	r0, [r3, #0]
 801a808:	6803      	ldr	r3, [r0, #0]
 801a80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a80c:	4798      	blx	r3
 801a80e:	e76a      	b.n	801a6e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a810:	240253d4 	.word	0x240253d4
 801a814:	240253ce 	.word	0x240253ce

0801a818 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a81c:	b08a      	sub	sp, #40	@ 0x28
 801a81e:	460d      	mov	r5, r1
 801a820:	4604      	mov	r4, r0
 801a822:	461e      	mov	r6, r3
 801a824:	6808      	ldr	r0, [r1, #0]
 801a826:	ab06      	add	r3, sp, #24
 801a828:	6849      	ldr	r1, [r1, #4]
 801a82a:	4f5d      	ldr	r7, [pc, #372]	@ (801a9a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801a82c:	c303      	stmia	r3!, {r0, r1}
 801a82e:	6810      	ldr	r0, [r2, #0]
 801a830:	ab08      	add	r3, sp, #32
 801a832:	6851      	ldr	r1, [r2, #4]
 801a834:	c303      	stmia	r3!, {r0, r1}
 801a836:	a806      	add	r0, sp, #24
 801a838:	f7f8 fa58 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a83c:	4629      	mov	r1, r5
 801a83e:	a808      	add	r0, sp, #32
 801a840:	f7f8 fa98 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a844:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a848:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a84c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a850:	6838      	ldr	r0, [r7, #0]
 801a852:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a856:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801a85a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801a85e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a862:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a866:	440a      	add	r2, r1
 801a868:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a86c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a870:	4413      	add	r3, r2
 801a872:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a876:	6803      	ldr	r3, [r0, #0]
 801a878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a87a:	4798      	blx	r3
 801a87c:	2eff      	cmp	r6, #255	@ 0xff
 801a87e:	d119      	bne.n	801a8b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801a880:	f010 0f20 	tst.w	r0, #32
 801a884:	6838      	ldr	r0, [r7, #0]
 801a886:	d018      	beq.n	801a8ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801a888:	b2ad      	uxth	r5, r5
 801a88a:	2700      	movs	r7, #0
 801a88c:	6801      	ldr	r1, [r0, #0]
 801a88e:	9501      	str	r5, [sp, #4]
 801a890:	fa1f f588 	uxth.w	r5, r8
 801a894:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801a898:	9500      	str	r5, [sp, #0]
 801a89a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a89e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801a8a2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a8a6:	9602      	str	r6, [sp, #8]
 801a8a8:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801a8aa:	4621      	mov	r1, r4
 801a8ac:	47a8      	blx	r5
 801a8ae:	b00a      	add	sp, #40	@ 0x28
 801a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8b4:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801a8b8:	e7e4      	b.n	801a884 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801a8ba:	6803      	ldr	r3, [r0, #0]
 801a8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8be:	4798      	blx	r3
 801a8c0:	4b38      	ldr	r3, [pc, #224]	@ (801a9a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801a8c2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a8c6:	f8b3 c000 	ldrh.w	ip, [r3]
 801a8ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a8ce:	fb0c f505 	mul.w	r5, ip, r5
 801a8d2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801a8d6:	fb0c 2303 	mla	r3, ip, r3, r2
 801a8da:	ebac 0c08 	sub.w	ip, ip, r8
 801a8de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8e2:	ebae 0e08 	sub.w	lr, lr, r8
 801a8e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a8ee:	4418      	add	r0, r3
 801a8f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801a8f4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801a8f8:	4405      	add	r5, r0
 801a8fa:	42a8      	cmp	r0, r5
 801a8fc:	d24a      	bcs.n	801a994 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801a8fe:	eb00 0803 	add.w	r8, r0, r3
 801a902:	4540      	cmp	r0, r8
 801a904:	d243      	bcs.n	801a98e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801a906:	78e2      	ldrb	r2, [r4, #3]
 801a908:	b15a      	cbz	r2, 801a922 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801a90a:	2aff      	cmp	r2, #255	@ 0xff
 801a90c:	f894 9000 	ldrb.w	r9, [r4]
 801a910:	d10a      	bne.n	801a928 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801a912:	2eff      	cmp	r6, #255	@ 0xff
 801a914:	d108      	bne.n	801a928 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801a916:	f880 9000 	strb.w	r9, [r0]
 801a91a:	7862      	ldrb	r2, [r4, #1]
 801a91c:	7042      	strb	r2, [r0, #1]
 801a91e:	78a2      	ldrb	r2, [r4, #2]
 801a920:	7082      	strb	r2, [r0, #2]
 801a922:	3003      	adds	r0, #3
 801a924:	3404      	adds	r4, #4
 801a926:	e7ec      	b.n	801a902 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801a928:	4372      	muls	r2, r6
 801a92a:	1c51      	adds	r1, r2, #1
 801a92c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801a930:	1209      	asrs	r1, r1, #8
 801a932:	fa1f fa81 	uxth.w	sl, r1
 801a936:	43c9      	mvns	r1, r1
 801a938:	fb19 f90a 	smulbb	r9, r9, sl
 801a93c:	b2ca      	uxtb	r2, r1
 801a93e:	7801      	ldrb	r1, [r0, #0]
 801a940:	fb01 9902 	mla	r9, r1, r2, r9
 801a944:	fa1f f989 	uxth.w	r9, r9
 801a948:	f109 0101 	add.w	r1, r9, #1
 801a94c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801a950:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a954:	f880 9000 	strb.w	r9, [r0]
 801a958:	f890 9001 	ldrb.w	r9, [r0, #1]
 801a95c:	7861      	ldrb	r1, [r4, #1]
 801a95e:	fb19 f902 	smulbb	r9, r9, r2
 801a962:	fb01 910a 	mla	r1, r1, sl, r9
 801a966:	b289      	uxth	r1, r1
 801a968:	f101 0901 	add.w	r9, r1, #1
 801a96c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801a970:	1209      	asrs	r1, r1, #8
 801a972:	7041      	strb	r1, [r0, #1]
 801a974:	7881      	ldrb	r1, [r0, #2]
 801a976:	f894 9002 	ldrb.w	r9, [r4, #2]
 801a97a:	fb11 f202 	smulbb	r2, r1, r2
 801a97e:	fb09 220a 	mla	r2, r9, sl, r2
 801a982:	b292      	uxth	r2, r2
 801a984:	1c51      	adds	r1, r2, #1
 801a986:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a98a:	1212      	asrs	r2, r2, #8
 801a98c:	e7c8      	b.n	801a920 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801a98e:	4460      	add	r0, ip
 801a990:	4474      	add	r4, lr
 801a992:	e7b2      	b.n	801a8fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801a994:	6838      	ldr	r0, [r7, #0]
 801a996:	6803      	ldr	r3, [r0, #0]
 801a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a99a:	4798      	blx	r3
 801a99c:	e787      	b.n	801a8ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801a99e:	bf00      	nop
 801a9a0:	240253d4 	.word	0x240253d4
 801a9a4:	240253ce 	.word	0x240253ce

0801a9a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9ac:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801a9b0:	4607      	mov	r7, r0
 801a9b2:	460c      	mov	r4, r1
 801a9b4:	4692      	mov	sl, r2
 801a9b6:	4699      	mov	r9, r3
 801a9b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a9ba:	b335      	cbz	r5, 801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9bc:	4608      	mov	r0, r1
 801a9be:	f7fb fd93 	bl	80164e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a9c2:	4680      	mov	r8, r0
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	f7fb fdc3 	bl	8016550 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a9ca:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f8ad a008 	strh.w	sl, [sp, #8]
 801a9d4:	f8ad 900a 	strh.w	r9, [sp, #10]
 801a9d8:	f8ad 800c 	strh.w	r8, [sp, #12]
 801a9dc:	f7fb fefa 	bl	80167d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a9e0:	2810      	cmp	r0, #16
 801a9e2:	d812      	bhi.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9e4:	e8df f000 	tbb	[pc, r0]
 801a9e8:	11092d24 	.word	0x11092d24
 801a9ec:	11111111 	.word	0x11111111
 801a9f0:	14111111 	.word	0x14111111
 801a9f4:	4c111111 	.word	0x4c111111
 801a9f8:	3c          	.byte	0x3c
 801a9f9:	00          	.byte	0x00
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f7fb fe66 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801aa00:	462b      	mov	r3, r5
 801aa02:	4632      	mov	r2, r6
 801aa04:	a902      	add	r1, sp, #8
 801aa06:	f7ff ff07 	bl	801a818 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa0a:	b004      	add	sp, #16
 801aa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa10:	4620      	mov	r0, r4
 801aa12:	f7fb fe5b 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801aa16:	4680      	mov	r8, r0
 801aa18:	4620      	mov	r0, r4
 801aa1a:	f7fb fe87 	bl	801672c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801aa1e:	ab02      	add	r3, sp, #8
 801aa20:	4602      	mov	r2, r0
 801aa22:	4641      	mov	r1, r8
 801aa24:	4638      	mov	r0, r7
 801aa26:	e9cd 6500 	strd	r6, r5, [sp]
 801aa2a:	f7ff fdbf 	bl	801a5ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801aa2e:	e7ec      	b.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa30:	4620      	mov	r0, r4
 801aa32:	f7fb fe4b 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801aa36:	462b      	mov	r3, r5
 801aa38:	4632      	mov	r2, r6
 801aa3a:	a902      	add	r1, sp, #8
 801aa3c:	f7ff fdf8 	bl	801a630 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801aa40:	e7e3      	b.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa42:	683b      	ldr	r3, [r7, #0]
 801aa44:	4620      	mov	r0, r4
 801aa46:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801aa4a:	f7fb fe3f 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801aa4e:	2300      	movs	r3, #0
 801aa50:	4601      	mov	r1, r0
 801aa52:	aa02      	add	r2, sp, #8
 801aa54:	4638      	mov	r0, r7
 801aa56:	e9cd 5300 	strd	r5, r3, [sp]
 801aa5a:	4633      	mov	r3, r6
 801aa5c:	47c0      	blx	r8
 801aa5e:	e7d4      	b.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa60:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801aa62:	2f00      	cmp	r7, #0
 801aa64:	d0d1      	beq.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa66:	683b      	ldr	r3, [r7, #0]
 801aa68:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	f7fb fe2d 	bl	80166cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801aa72:	9500      	str	r5, [sp, #0]
 801aa74:	4601      	mov	r1, r0
 801aa76:	4633      	mov	r3, r6
 801aa78:	aa02      	add	r2, sp, #8
 801aa7a:	4638      	mov	r0, r7
 801aa7c:	47c0      	blx	r8
 801aa7e:	e7c4      	b.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa80:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801aa82:	2f00      	cmp	r7, #0
 801aa84:	d0c1      	beq.n	801aa0a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801aa8c:	e7ee      	b.n	801aa6c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801aa8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801aa8e:	b4f0      	push	{r4, r5, r6, r7}
 801aa90:	4616      	mov	r6, r2
 801aa92:	461c      	mov	r4, r3
 801aa94:	460d      	mov	r5, r1
 801aa96:	9a04      	ldr	r2, [sp, #16]
 801aa98:	2e01      	cmp	r6, #1
 801aa9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801aa9e:	d00e      	beq.n	801aabe <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801aaa0:	d303      	bcc.n	801aaaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801aaa2:	2e02      	cmp	r6, #2
 801aaa4:	d006      	beq.n	801aab4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801aaa6:	bcf0      	pop	{r4, r5, r6, r7}
 801aaa8:	4770      	bx	lr
 801aaaa:	4621      	mov	r1, r4
 801aaac:	4628      	mov	r0, r5
 801aaae:	bcf0      	pop	{r4, r5, r6, r7}
 801aab0:	f7ff bdbe 	b.w	801a630 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801aab4:	4621      	mov	r1, r4
 801aab6:	4628      	mov	r0, r5
 801aab8:	bcf0      	pop	{r4, r5, r6, r7}
 801aaba:	f7ff bead 	b.w	801a818 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aabe:	6805      	ldr	r5, [r0, #0]
 801aac0:	2600      	movs	r6, #0
 801aac2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801aac6:	68ed      	ldr	r5, [r5, #12]
 801aac8:	4613      	mov	r3, r2
 801aaca:	4622      	mov	r2, r4
 801aacc:	46ac      	mov	ip, r5
 801aace:	bcf0      	pop	{r4, r5, r6, r7}
 801aad0:	4760      	bx	ip
	...

0801aad4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801aad4:	b160      	cbz	r0, 801aaf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801aad6:	2903      	cmp	r1, #3
 801aad8:	d818      	bhi.n	801ab0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801aada:	e8df f001 	tbb	[pc, r1]
 801aade:	1902      	.short	0x1902
 801aae0:	1b06      	.short	0x1b06
 801aae2:	4b0e      	ldr	r3, [pc, #56]	@ (801ab1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801aae4:	8818      	ldrh	r0, [r3, #0]
 801aae6:	4240      	negs	r0, r0
 801aae8:	4770      	bx	lr
 801aaea:	4b0c      	ldr	r3, [pc, #48]	@ (801ab1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801aaec:	8818      	ldrh	r0, [r3, #0]
 801aaee:	4770      	bx	lr
 801aaf0:	2903      	cmp	r1, #3
 801aaf2:	d80b      	bhi.n	801ab0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801aaf4:	a301      	add	r3, pc, #4	@ (adr r3, 801aafc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801aaf6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801aafa:	bf00      	nop
 801aafc:	0801ab11 	.word	0x0801ab11
 801ab00:	0801aaeb 	.word	0x0801aaeb
 801ab04:	0801ab15 	.word	0x0801ab15
 801ab08:	0801aae3 	.word	0x0801aae3
 801ab0c:	2000      	movs	r0, #0
 801ab0e:	4770      	bx	lr
 801ab10:	2001      	movs	r0, #1
 801ab12:	4770      	bx	lr
 801ab14:	f04f 30ff 	mov.w	r0, #4294967295
 801ab18:	4770      	bx	lr
 801ab1a:	bf00      	nop
 801ab1c:	240253ce 	.word	0x240253ce

0801ab20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ab20:	b160      	cbz	r0, 801ab3c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801ab22:	2903      	cmp	r1, #3
 801ab24:	d818      	bhi.n	801ab58 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ab26:	e8df f001 	tbb	[pc, r1]
 801ab2a:	0219      	.short	0x0219
 801ab2c:	051b      	.short	0x051b
 801ab2e:	4b0e      	ldr	r3, [pc, #56]	@ (801ab68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ab30:	8818      	ldrh	r0, [r3, #0]
 801ab32:	4770      	bx	lr
 801ab34:	4b0c      	ldr	r3, [pc, #48]	@ (801ab68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ab36:	8818      	ldrh	r0, [r3, #0]
 801ab38:	4240      	negs	r0, r0
 801ab3a:	4770      	bx	lr
 801ab3c:	2903      	cmp	r1, #3
 801ab3e:	d80b      	bhi.n	801ab58 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ab40:	a301      	add	r3, pc, #4	@ (adr r3, 801ab48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801ab42:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ab46:	bf00      	nop
 801ab48:	0801ab2f 	.word	0x0801ab2f
 801ab4c:	0801ab61 	.word	0x0801ab61
 801ab50:	0801ab35 	.word	0x0801ab35
 801ab54:	0801ab5d 	.word	0x0801ab5d
 801ab58:	2000      	movs	r0, #0
 801ab5a:	4770      	bx	lr
 801ab5c:	2001      	movs	r0, #1
 801ab5e:	4770      	bx	lr
 801ab60:	f04f 30ff 	mov.w	r0, #4294967295
 801ab64:	4770      	bx	lr
 801ab66:	bf00      	nop
 801ab68:	240253ce 	.word	0x240253ce

0801ab6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab70:	b097      	sub	sp, #92	@ 0x5c
 801ab72:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ab74:	a912      	add	r1, sp, #72	@ 0x48
 801ab76:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801ab7a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801ab7e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801ab82:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801ab86:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801ab8a:	e881 000c 	stmia.w	r1, {r2, r3}
 801ab8e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801ab92:	930a      	str	r3, [sp, #40]	@ 0x28
 801ab94:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801ab98:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801ab9c:	9311      	str	r3, [sp, #68]	@ 0x44
 801ab9e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801aba2:	798d      	ldrb	r5, [r1, #6]
 801aba4:	930c      	str	r3, [sp, #48]	@ 0x30
 801aba6:	7b4b      	ldrb	r3, [r1, #13]
 801aba8:	0158      	lsls	r0, r3, #5
 801abaa:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801abae:	4328      	orrs	r0, r5
 801abb0:	9009      	str	r0, [sp, #36]	@ 0x24
 801abb2:	f000 817c 	beq.w	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801abb6:	011b      	lsls	r3, r3, #4
 801abb8:	79c8      	ldrb	r0, [r1, #7]
 801abba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801abbe:	4303      	orrs	r3, r0
 801abc0:	930e      	str	r3, [sp, #56]	@ 0x38
 801abc2:	f000 8174 	beq.w	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801abc6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801abca:	b29b      	uxth	r3, r3
 801abcc:	2f00      	cmp	r7, #0
 801abce:	f000 8116 	beq.w	801adfe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801abd2:	1aff      	subs	r7, r7, r3
 801abd4:	b2bf      	uxth	r7, r7
 801abd6:	043b      	lsls	r3, r7, #16
 801abd8:	d502      	bpl.n	801abe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801abda:	1bf6      	subs	r6, r6, r7
 801abdc:	2700      	movs	r7, #0
 801abde:	b236      	sxth	r6, r6
 801abe0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801abe4:	a812      	add	r0, sp, #72	@ 0x48
 801abe6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801abea:	428e      	cmp	r6, r1
 801abec:	b28b      	uxth	r3, r1
 801abee:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801abf2:	bfbf      	itttt	lt
 801abf4:	18ff      	addlt	r7, r7, r3
 801abf6:	1bbe      	sublt	r6, r7, r6
 801abf8:	b2b7      	uxthlt	r7, r6
 801abfa:	460e      	movlt	r6, r1
 801abfc:	8891      	ldrh	r1, [r2, #4]
 801abfe:	440b      	add	r3, r1
 801ac00:	4631      	mov	r1, r6
 801ac02:	b21b      	sxth	r3, r3
 801ac04:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac06:	88d3      	ldrh	r3, [r2, #6]
 801ac08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac0a:	449a      	add	sl, r3
 801ac0c:	fa0f f38a 	sxth.w	r3, sl
 801ac10:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801ac14:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac16:	4bb5      	ldr	r3, [pc, #724]	@ (801aeec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801ac18:	f893 b000 	ldrb.w	fp, [r3]
 801ac1c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ac20:	f1dc 0300 	rsbs	r3, ip, #0
 801ac24:	eb43 030c 	adc.w	r3, r3, ip
 801ac28:	930d      	str	r3, [sp, #52]	@ 0x34
 801ac2a:	464b      	mov	r3, r9
 801ac2c:	f7f7 fed2 	bl	80129d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ac30:	4631      	mov	r1, r6
 801ac32:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801ac36:	464b      	mov	r3, r9
 801ac38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac3a:	a812      	add	r0, sp, #72	@ 0x48
 801ac3c:	f7f7 fee7 	bl	8012a0e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ac40:	a916      	add	r1, sp, #88	@ 0x58
 801ac42:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ac46:	a815      	add	r0, sp, #84	@ 0x54
 801ac48:	f7f8 f80e 	bl	8012c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ac4c:	f1b9 0f00 	cmp.w	r9, #0
 801ac50:	f040 80d8 	bne.w	801ae04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801ac54:	f1bb 0f01 	cmp.w	fp, #1
 801ac58:	f040 80dc 	bne.w	801ae14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ac5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ac5e:	b153      	cbz	r3, 801ac76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ac60:	2508      	movs	r5, #8
 801ac62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac64:	fb95 f3f8 	sdiv	r3, r5, r8
 801ac68:	1e5d      	subs	r5, r3, #1
 801ac6a:	4415      	add	r5, r2
 801ac6c:	fb95 f5f3 	sdiv	r5, r5, r3
 801ac70:	fb15 f503 	smulbb	r5, r5, r3
 801ac74:	b2ad      	uxth	r5, r5
 801ac76:	b907      	cbnz	r7, 801ac7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ac78:	b16c      	cbz	r4, 801ac96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ac7a:	fb04 7305 	mla	r3, r4, r5, r7
 801ac7e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ac80:	ebaa 0a04 	sub.w	sl, sl, r4
 801ac84:	fb08 f303 	mul.w	r3, r8, r3
 801ac88:	fa1f fa8a 	uxth.w	sl, sl
 801ac8c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ac90:	f003 0407 	and.w	r4, r3, #7
 801ac94:	9226      	str	r2, [sp, #152]	@ 0x98
 801ac96:	4649      	mov	r1, r9
 801ac98:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ac9a:	f7ff ff1b 	bl	801aad4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ac9e:	4683      	mov	fp, r0
 801aca0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801aca2:	f7ff ff3d 	bl	801ab20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801aca6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aca8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801acaa:	4681      	mov	r9, r0
 801acac:	1a9b      	subs	r3, r3, r2
 801acae:	459a      	cmp	sl, r3
 801acb0:	bfa8      	it	ge
 801acb2:	469a      	movge	sl, r3
 801acb4:	f1ba 0f00 	cmp.w	sl, #0
 801acb8:	f340 80f9 	ble.w	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801acbc:	1bf6      	subs	r6, r6, r7
 801acbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801acc0:	1b9e      	subs	r6, r3, r6
 801acc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acc4:	429e      	cmp	r6, r3
 801acc6:	bfd4      	ite	le
 801acc8:	ebc7 0706 	rsble	r7, r7, r6
 801accc:	ebc7 0703 	rsbgt	r7, r7, r3
 801acd0:	2f00      	cmp	r7, #0
 801acd2:	f340 80ec 	ble.w	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801acd6:	1bed      	subs	r5, r5, r7
 801acd8:	fb08 f305 	mul.w	r3, r8, r5
 801acdc:	930d      	str	r3, [sp, #52]	@ 0x34
 801acde:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ace0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ace4:	930e      	str	r3, [sp, #56]	@ 0x38
 801ace6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ace8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801acec:	930f      	str	r3, [sp, #60]	@ 0x3c
 801acee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801acf0:	b2db      	uxtb	r3, r3
 801acf2:	9310      	str	r3, [sp, #64]	@ 0x40
 801acf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	f040 80de 	bne.w	801aeb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801acfc:	4b7c      	ldr	r3, [pc, #496]	@ (801aef0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801acfe:	6818      	ldr	r0, [r3, #0]
 801ad00:	6803      	ldr	r3, [r0, #0]
 801ad02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad04:	4798      	blx	r3
 801ad06:	2301      	movs	r3, #1
 801ad08:	4a7a      	ldr	r2, [pc, #488]	@ (801aef4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ad0a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801ad0e:	fb07 9b1b 	mls	fp, r7, fp, r9
 801ad12:	fa03 f308 	lsl.w	r3, r3, r8
 801ad16:	8811      	ldrh	r1, [r2, #0]
 801ad18:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801ad1c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ad20:	3b01      	subs	r3, #1
 801ad22:	fb06 bb07 	mla	fp, r6, r7, fp
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad2a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801ad2e:	fb01 2303 	mla	r3, r1, r3, r2
 801ad32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad36:	18c3      	adds	r3, r0, r3
 801ad38:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ad3c:	781a      	ldrb	r2, [r3, #0]
 801ad3e:	4122      	asrs	r2, r4
 801ad40:	b2d2      	uxtb	r2, r2
 801ad42:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ad46:	f0c0 80d7 	bcc.w	801aef8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801ad4a:	46be      	mov	lr, r7
 801ad4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ad4e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ad52:	f0c0 80ba 	bcc.w	801aeca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801ad56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad58:	4013      	ands	r3, r2
 801ad5a:	d041      	beq.n	801ade0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ad5c:	20ff      	movs	r0, #255	@ 0xff
 801ad5e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ad60:	fb90 f5f5 	sdiv	r5, r0, r5
 801ad64:	436b      	muls	r3, r5
 801ad66:	2bfe      	cmp	r3, #254	@ 0xfe
 801ad68:	dd03      	ble.n	801ad72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801ad6a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ad6c:	4285      	cmp	r5, r0
 801ad6e:	f000 80a5 	beq.w	801aebc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801ad72:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ad74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ad76:	fb15 f303 	smulbb	r3, r5, r3
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	1c5d      	adds	r5, r3, #1
 801ad7e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ad82:	780d      	ldrb	r5, [r1, #0]
 801ad84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ad88:	fa1f fc83 	uxth.w	ip, r3
 801ad8c:	43db      	mvns	r3, r3
 801ad8e:	fb10 f90c 	smulbb	r9, r0, ip
 801ad92:	b2db      	uxtb	r3, r3
 801ad94:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ad96:	fb05 9503 	mla	r5, r5, r3, r9
 801ad9a:	b2ad      	uxth	r5, r5
 801ad9c:	f105 0901 	add.w	r9, r5, #1
 801ada0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ada4:	fb10 f90c 	smulbb	r9, r0, ip
 801ada8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801adaa:	122d      	asrs	r5, r5, #8
 801adac:	fb10 fc0c 	smulbb	ip, r0, ip
 801adb0:	700d      	strb	r5, [r1, #0]
 801adb2:	784d      	ldrb	r5, [r1, #1]
 801adb4:	fb05 9503 	mla	r5, r5, r3, r9
 801adb8:	b2ad      	uxth	r5, r5
 801adba:	f105 0901 	add.w	r9, r5, #1
 801adbe:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801adc2:	122d      	asrs	r5, r5, #8
 801adc4:	704d      	strb	r5, [r1, #1]
 801adc6:	788d      	ldrb	r5, [r1, #2]
 801adc8:	fb05 cc03 	mla	ip, r5, r3, ip
 801adcc:	fa1f fc8c 	uxth.w	ip, ip
 801add0:	f10c 0301 	add.w	r3, ip, #1
 801add4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801add8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801addc:	f881 c002 	strb.w	ip, [r1, #2]
 801ade0:	4444      	add	r4, r8
 801ade2:	4431      	add	r1, r6
 801ade4:	b2a4      	uxth	r4, r4
 801ade6:	2c07      	cmp	r4, #7
 801ade8:	bf89      	itett	hi
 801adea:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801adec:	fa42 f208 	asrls.w	r2, r2, r8
 801adf0:	2400      	movhi	r4, #0
 801adf2:	785a      	ldrbhi	r2, [r3, #1]
 801adf4:	bf8a      	itet	hi
 801adf6:	3301      	addhi	r3, #1
 801adf8:	b2d2      	uxtbls	r2, r2
 801adfa:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801adfc:	e7a7      	b.n	801ad4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801adfe:	441e      	add	r6, r3
 801ae00:	b236      	sxth	r6, r6
 801ae02:	e6ed      	b.n	801abe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ae04:	f1b9 0f01 	cmp.w	r9, #1
 801ae08:	f47f af28 	bne.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae0c:	f1bb 0f01 	cmp.w	fp, #1
 801ae10:	f47f af24 	bne.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae14:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801aef0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ae18:	f8db 0000 	ldr.w	r0, [fp]
 801ae1c:	6803      	ldr	r3, [r0, #0]
 801ae1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae20:	4798      	blx	r3
 801ae22:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801ae26:	465a      	mov	r2, fp
 801ae28:	d006      	beq.n	801ae38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ae2a:	f1b8 0f04 	cmp.w	r8, #4
 801ae2e:	d141      	bne.n	801aeb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801ae30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ae32:	3300      	adds	r3, #0
 801ae34:	bf18      	it	ne
 801ae36:	2301      	movne	r3, #1
 801ae38:	0580      	lsls	r0, r0, #22
 801ae3a:	d566      	bpl.n	801af0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ae3c:	f1b8 0f08 	cmp.w	r8, #8
 801ae40:	d163      	bne.n	801af0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	bf0c      	ite	eq
 801ae46:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801ae4a:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801ae4e:	2f00      	cmp	r7, #0
 801ae50:	f47f af04 	bne.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae54:	2c00      	cmp	r4, #0
 801ae56:	f47f af01 	bne.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ae5e:	18f3      	adds	r3, r6, r3
 801ae60:	4283      	cmp	r3, r0
 801ae62:	f73f aefb 	bgt.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ae68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae6a:	4403      	add	r3, r0
 801ae6c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ae6e:	4283      	cmp	r3, r0
 801ae70:	f73f aef4 	bgt.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae74:	f1b8 0f08 	cmp.w	r8, #8
 801ae78:	6810      	ldr	r0, [r2, #0]
 801ae7a:	f04f 0600 	mov.w	r6, #0
 801ae7e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801ae82:	bf18      	it	ne
 801ae84:	3501      	addne	r5, #1
 801ae86:	6804      	ldr	r4, [r0, #0]
 801ae88:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801ae8c:	bf18      	it	ne
 801ae8e:	f025 0501 	bicne.w	r5, r5, #1
 801ae92:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801ae96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ae98:	bf18      	it	ne
 801ae9a:	b2ad      	uxthne	r5, r5
 801ae9c:	9104      	str	r1, [sp, #16]
 801ae9e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801aea0:	e9cd 5a00 	strd	r5, sl, [sp]
 801aea4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801aea8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801aeaa:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801aeac:	47a0      	blx	r4
 801aeae:	b017      	add	sp, #92	@ 0x5c
 801aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	e7bf      	b.n	801ae38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801aeb8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801aeba:	e724      	b.n	801ad06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801aebc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aebe:	700b      	strb	r3, [r1, #0]
 801aec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aec2:	704b      	strb	r3, [r1, #1]
 801aec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aec6:	708b      	strb	r3, [r1, #2]
 801aec8:	e78a      	b.n	801ade0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801aeca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aecc:	b153      	cbz	r3, 801aee4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801aece:	441c      	add	r4, r3
 801aed0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aed2:	b2a4      	uxth	r4, r4
 801aed4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801aed8:	f004 0407 	and.w	r4, r4, #7
 801aedc:	781a      	ldrb	r2, [r3, #0]
 801aede:	9326      	str	r3, [sp, #152]	@ 0x98
 801aee0:	4122      	asrs	r2, r4
 801aee2:	b2d2      	uxtb	r2, r2
 801aee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aee6:	445b      	add	r3, fp
 801aee8:	9309      	str	r3, [sp, #36]	@ 0x24
 801aeea:	e72a      	b.n	801ad42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801aeec:	240253cc 	.word	0x240253cc
 801aef0:	240253d4 	.word	0x240253d4
 801aef4:	240253ce 	.word	0x240253ce
 801aef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d1d7      	bne.n	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801aefe:	4b06      	ldr	r3, [pc, #24]	@ (801af18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801af00:	6818      	ldr	r0, [r3, #0]
 801af02:	6803      	ldr	r3, [r0, #0]
 801af04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af06:	4798      	blx	r3
 801af08:	e7d1      	b.n	801aeae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	f43f aea6 	beq.w	801ac5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801af10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801af14:	e79b      	b.n	801ae4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801af16:	bf00      	nop
 801af18:	240253d4 	.word	0x240253d4

0801af1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801af1c:	b538      	push	{r3, r4, r5, lr}
 801af1e:	4c15      	ldr	r4, [pc, #84]	@ (801af74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801af20:	4605      	mov	r5, r0
 801af22:	7823      	ldrb	r3, [r4, #0]
 801af24:	f3bf 8f5b 	dmb	ish
 801af28:	07da      	lsls	r2, r3, #31
 801af2a:	d40b      	bmi.n	801af44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801af2c:	4620      	mov	r0, r4
 801af2e:	f006 f8d8 	bl	80210e2 <__cxa_guard_acquire>
 801af32:	b138      	cbz	r0, 801af44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801af34:	4620      	mov	r0, r4
 801af36:	f006 f8e0 	bl	80210fa <__cxa_guard_release>
 801af3a:	4a0f      	ldr	r2, [pc, #60]	@ (801af78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801af3c:	490f      	ldr	r1, [pc, #60]	@ (801af7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801af3e:	4810      	ldr	r0, [pc, #64]	@ (801af80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801af40:	f006 f8c8 	bl	80210d4 <__aeabi_atexit>
 801af44:	4c0f      	ldr	r4, [pc, #60]	@ (801af84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801af46:	7823      	ldrb	r3, [r4, #0]
 801af48:	f3bf 8f5b 	dmb	ish
 801af4c:	07db      	lsls	r3, r3, #31
 801af4e:	d40b      	bmi.n	801af68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801af50:	4620      	mov	r0, r4
 801af52:	f006 f8c6 	bl	80210e2 <__cxa_guard_acquire>
 801af56:	b138      	cbz	r0, 801af68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801af58:	4620      	mov	r0, r4
 801af5a:	f006 f8ce 	bl	80210fa <__cxa_guard_release>
 801af5e:	4a06      	ldr	r2, [pc, #24]	@ (801af78 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801af60:	4909      	ldr	r1, [pc, #36]	@ (801af88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801af62:	480a      	ldr	r0, [pc, #40]	@ (801af8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801af64:	f006 f8b6 	bl	80210d4 <__aeabi_atexit>
 801af68:	4b05      	ldr	r3, [pc, #20]	@ (801af80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801af6a:	616b      	str	r3, [r5, #20]
 801af6c:	4b07      	ldr	r3, [pc, #28]	@ (801af8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801af6e:	61ab      	str	r3, [r5, #24]
 801af70:	bd38      	pop	{r3, r4, r5, pc}
 801af72:	bf00      	nop
 801af74:	240254b8 	.word	0x240254b8
 801af78:	24000000 	.word	0x24000000
 801af7c:	0801820d 	.word	0x0801820d
 801af80:	240000c8 	.word	0x240000c8
 801af84:	240254bc 	.word	0x240254bc
 801af88:	0801820b 	.word	0x0801820b
 801af8c:	240000cc 	.word	0x240000cc

0801af90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4c15      	ldr	r4, [pc, #84]	@ (801afe8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801af94:	4605      	mov	r5, r0
 801af96:	7823      	ldrb	r3, [r4, #0]
 801af98:	f3bf 8f5b 	dmb	ish
 801af9c:	07da      	lsls	r2, r3, #31
 801af9e:	d40b      	bmi.n	801afb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801afa0:	4620      	mov	r0, r4
 801afa2:	f006 f89e 	bl	80210e2 <__cxa_guard_acquire>
 801afa6:	b138      	cbz	r0, 801afb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801afa8:	4620      	mov	r0, r4
 801afaa:	f006 f8a6 	bl	80210fa <__cxa_guard_release>
 801afae:	4a0f      	ldr	r2, [pc, #60]	@ (801afec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801afb0:	490f      	ldr	r1, [pc, #60]	@ (801aff0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801afb2:	4810      	ldr	r0, [pc, #64]	@ (801aff4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801afb4:	f006 f88e 	bl	80210d4 <__aeabi_atexit>
 801afb8:	4c0f      	ldr	r4, [pc, #60]	@ (801aff8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801afba:	7823      	ldrb	r3, [r4, #0]
 801afbc:	f3bf 8f5b 	dmb	ish
 801afc0:	07db      	lsls	r3, r3, #31
 801afc2:	d40b      	bmi.n	801afdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801afc4:	4620      	mov	r0, r4
 801afc6:	f006 f88c 	bl	80210e2 <__cxa_guard_acquire>
 801afca:	b138      	cbz	r0, 801afdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801afcc:	4620      	mov	r0, r4
 801afce:	f006 f894 	bl	80210fa <__cxa_guard_release>
 801afd2:	4a06      	ldr	r2, [pc, #24]	@ (801afec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801afd4:	4909      	ldr	r1, [pc, #36]	@ (801affc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801afd6:	480a      	ldr	r0, [pc, #40]	@ (801b000 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801afd8:	f006 f87c 	bl	80210d4 <__aeabi_atexit>
 801afdc:	4b05      	ldr	r3, [pc, #20]	@ (801aff4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801afde:	60eb      	str	r3, [r5, #12]
 801afe0:	4b07      	ldr	r3, [pc, #28]	@ (801b000 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801afe2:	612b      	str	r3, [r5, #16]
 801afe4:	bd38      	pop	{r3, r4, r5, pc}
 801afe6:	bf00      	nop
 801afe8:	24025498 	.word	0x24025498
 801afec:	24000000 	.word	0x24000000
 801aff0:	08018211 	.word	0x08018211
 801aff4:	240000a8 	.word	0x240000a8
 801aff8:	2402549c 	.word	0x2402549c
 801affc:	0801820f 	.word	0x0801820f
 801b000:	240000ac 	.word	0x240000ac

0801b004 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801b004:	b510      	push	{r4, lr}
 801b006:	4604      	mov	r4, r0
 801b008:	f7ff ff88 	bl	801af1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b00c:	4620      	mov	r0, r4
 801b00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b012:	f7ff bfbd 	b.w	801af90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b018 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b018:	b538      	push	{r3, r4, r5, lr}
 801b01a:	4c15      	ldr	r4, [pc, #84]	@ (801b070 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b01c:	4605      	mov	r5, r0
 801b01e:	7823      	ldrb	r3, [r4, #0]
 801b020:	f3bf 8f5b 	dmb	ish
 801b024:	07da      	lsls	r2, r3, #31
 801b026:	d40b      	bmi.n	801b040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b028:	4620      	mov	r0, r4
 801b02a:	f006 f85a 	bl	80210e2 <__cxa_guard_acquire>
 801b02e:	b138      	cbz	r0, 801b040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b030:	4620      	mov	r0, r4
 801b032:	f006 f862 	bl	80210fa <__cxa_guard_release>
 801b036:	4a0f      	ldr	r2, [pc, #60]	@ (801b074 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b038:	490f      	ldr	r1, [pc, #60]	@ (801b078 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b03a:	4810      	ldr	r0, [pc, #64]	@ (801b07c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b03c:	f006 f84a 	bl	80210d4 <__aeabi_atexit>
 801b040:	4c0f      	ldr	r4, [pc, #60]	@ (801b080 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b042:	7823      	ldrb	r3, [r4, #0]
 801b044:	f3bf 8f5b 	dmb	ish
 801b048:	07db      	lsls	r3, r3, #31
 801b04a:	d40b      	bmi.n	801b064 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b04c:	4620      	mov	r0, r4
 801b04e:	f006 f848 	bl	80210e2 <__cxa_guard_acquire>
 801b052:	b138      	cbz	r0, 801b064 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b054:	4620      	mov	r0, r4
 801b056:	f006 f850 	bl	80210fa <__cxa_guard_release>
 801b05a:	4a06      	ldr	r2, [pc, #24]	@ (801b074 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b05c:	4909      	ldr	r1, [pc, #36]	@ (801b084 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b05e:	480a      	ldr	r0, [pc, #40]	@ (801b088 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b060:	f006 f838 	bl	80210d4 <__aeabi_atexit>
 801b064:	4b05      	ldr	r3, [pc, #20]	@ (801b07c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b066:	626b      	str	r3, [r5, #36]	@ 0x24
 801b068:	4b07      	ldr	r3, [pc, #28]	@ (801b088 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b06a:	62ab      	str	r3, [r5, #40]	@ 0x28
 801b06c:	bd38      	pop	{r3, r4, r5, pc}
 801b06e:	bf00      	nop
 801b070:	240254c0 	.word	0x240254c0
 801b074:	24000000 	.word	0x24000000
 801b078:	08018205 	.word	0x08018205
 801b07c:	240000d0 	.word	0x240000d0
 801b080:	240254c4 	.word	0x240254c4
 801b084:	08018203 	.word	0x08018203
 801b088:	240000d4 	.word	0x240000d4

0801b08c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b08c:	b538      	push	{r3, r4, r5, lr}
 801b08e:	4c15      	ldr	r4, [pc, #84]	@ (801b0e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b090:	4605      	mov	r5, r0
 801b092:	7823      	ldrb	r3, [r4, #0]
 801b094:	f3bf 8f5b 	dmb	ish
 801b098:	07da      	lsls	r2, r3, #31
 801b09a:	d40b      	bmi.n	801b0b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b09c:	4620      	mov	r0, r4
 801b09e:	f006 f820 	bl	80210e2 <__cxa_guard_acquire>
 801b0a2:	b138      	cbz	r0, 801b0b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	f006 f828 	bl	80210fa <__cxa_guard_release>
 801b0aa:	4a0f      	ldr	r2, [pc, #60]	@ (801b0e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b0ac:	490f      	ldr	r1, [pc, #60]	@ (801b0ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b0ae:	4810      	ldr	r0, [pc, #64]	@ (801b0f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b0b0:	f006 f810 	bl	80210d4 <__aeabi_atexit>
 801b0b4:	4c0f      	ldr	r4, [pc, #60]	@ (801b0f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b0b6:	7823      	ldrb	r3, [r4, #0]
 801b0b8:	f3bf 8f5b 	dmb	ish
 801b0bc:	07db      	lsls	r3, r3, #31
 801b0be:	d40b      	bmi.n	801b0d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f006 f80e 	bl	80210e2 <__cxa_guard_acquire>
 801b0c6:	b138      	cbz	r0, 801b0d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f006 f816 	bl	80210fa <__cxa_guard_release>
 801b0ce:	4a06      	ldr	r2, [pc, #24]	@ (801b0e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b0d0:	4909      	ldr	r1, [pc, #36]	@ (801b0f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b0d2:	480a      	ldr	r0, [pc, #40]	@ (801b0fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b0d4:	f005 fffe 	bl	80210d4 <__aeabi_atexit>
 801b0d8:	4b05      	ldr	r3, [pc, #20]	@ (801b0f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b0da:	61eb      	str	r3, [r5, #28]
 801b0dc:	4b07      	ldr	r3, [pc, #28]	@ (801b0fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b0de:	622b      	str	r3, [r5, #32]
 801b0e0:	bd38      	pop	{r3, r4, r5, pc}
 801b0e2:	bf00      	nop
 801b0e4:	240254a0 	.word	0x240254a0
 801b0e8:	24000000 	.word	0x24000000
 801b0ec:	08018209 	.word	0x08018209
 801b0f0:	240000b0 	.word	0x240000b0
 801b0f4:	240254a4 	.word	0x240254a4
 801b0f8:	08018207 	.word	0x08018207
 801b0fc:	240000b4 	.word	0x240000b4

0801b100 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b100:	b510      	push	{r4, lr}
 801b102:	4604      	mov	r4, r0
 801b104:	f7ff ff88 	bl	801b018 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b108:	4620      	mov	r0, r4
 801b10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b10e:	f7ff bfbd 	b.w	801b08c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b114 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b114:	b538      	push	{r3, r4, r5, lr}
 801b116:	4c15      	ldr	r4, [pc, #84]	@ (801b16c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b118:	4605      	mov	r5, r0
 801b11a:	7823      	ldrb	r3, [r4, #0]
 801b11c:	f3bf 8f5b 	dmb	ish
 801b120:	07da      	lsls	r2, r3, #31
 801b122:	d40b      	bmi.n	801b13c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b124:	4620      	mov	r0, r4
 801b126:	f005 ffdc 	bl	80210e2 <__cxa_guard_acquire>
 801b12a:	b138      	cbz	r0, 801b13c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b12c:	4620      	mov	r0, r4
 801b12e:	f005 ffe4 	bl	80210fa <__cxa_guard_release>
 801b132:	4a0f      	ldr	r2, [pc, #60]	@ (801b170 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b134:	490f      	ldr	r1, [pc, #60]	@ (801b174 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b136:	4810      	ldr	r0, [pc, #64]	@ (801b178 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b138:	f005 ffcc 	bl	80210d4 <__aeabi_atexit>
 801b13c:	4c0f      	ldr	r4, [pc, #60]	@ (801b17c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b13e:	7823      	ldrb	r3, [r4, #0]
 801b140:	f3bf 8f5b 	dmb	ish
 801b144:	07db      	lsls	r3, r3, #31
 801b146:	d40b      	bmi.n	801b160 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b148:	4620      	mov	r0, r4
 801b14a:	f005 ffca 	bl	80210e2 <__cxa_guard_acquire>
 801b14e:	b138      	cbz	r0, 801b160 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b150:	4620      	mov	r0, r4
 801b152:	f005 ffd2 	bl	80210fa <__cxa_guard_release>
 801b156:	4a06      	ldr	r2, [pc, #24]	@ (801b170 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b158:	4909      	ldr	r1, [pc, #36]	@ (801b180 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b15a:	480a      	ldr	r0, [pc, #40]	@ (801b184 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b15c:	f005 ffba 	bl	80210d4 <__aeabi_atexit>
 801b160:	4b05      	ldr	r3, [pc, #20]	@ (801b178 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b162:	636b      	str	r3, [r5, #52]	@ 0x34
 801b164:	4b07      	ldr	r3, [pc, #28]	@ (801b184 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b166:	63ab      	str	r3, [r5, #56]	@ 0x38
 801b168:	bd38      	pop	{r3, r4, r5, pc}
 801b16a:	bf00      	nop
 801b16c:	240254a8 	.word	0x240254a8
 801b170:	24000000 	.word	0x24000000
 801b174:	080181fd 	.word	0x080181fd
 801b178:	240000b8 	.word	0x240000b8
 801b17c:	240254ac 	.word	0x240254ac
 801b180:	080181fb 	.word	0x080181fb
 801b184:	240000bc 	.word	0x240000bc

0801b188 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b188:	b538      	push	{r3, r4, r5, lr}
 801b18a:	4c15      	ldr	r4, [pc, #84]	@ (801b1e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b18c:	4605      	mov	r5, r0
 801b18e:	7823      	ldrb	r3, [r4, #0]
 801b190:	f3bf 8f5b 	dmb	ish
 801b194:	07da      	lsls	r2, r3, #31
 801b196:	d40b      	bmi.n	801b1b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b198:	4620      	mov	r0, r4
 801b19a:	f005 ffa2 	bl	80210e2 <__cxa_guard_acquire>
 801b19e:	b138      	cbz	r0, 801b1b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f005 ffaa 	bl	80210fa <__cxa_guard_release>
 801b1a6:	4a0f      	ldr	r2, [pc, #60]	@ (801b1e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b1a8:	490f      	ldr	r1, [pc, #60]	@ (801b1e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b1aa:	4810      	ldr	r0, [pc, #64]	@ (801b1ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b1ac:	f005 ff92 	bl	80210d4 <__aeabi_atexit>
 801b1b0:	4c0f      	ldr	r4, [pc, #60]	@ (801b1f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b1b2:	7823      	ldrb	r3, [r4, #0]
 801b1b4:	f3bf 8f5b 	dmb	ish
 801b1b8:	07db      	lsls	r3, r3, #31
 801b1ba:	d40b      	bmi.n	801b1d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b1bc:	4620      	mov	r0, r4
 801b1be:	f005 ff90 	bl	80210e2 <__cxa_guard_acquire>
 801b1c2:	b138      	cbz	r0, 801b1d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f005 ff98 	bl	80210fa <__cxa_guard_release>
 801b1ca:	4a06      	ldr	r2, [pc, #24]	@ (801b1e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b1cc:	4909      	ldr	r1, [pc, #36]	@ (801b1f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b1ce:	480a      	ldr	r0, [pc, #40]	@ (801b1f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b1d0:	f005 ff80 	bl	80210d4 <__aeabi_atexit>
 801b1d4:	4b05      	ldr	r3, [pc, #20]	@ (801b1ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b1d6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801b1d8:	4b07      	ldr	r3, [pc, #28]	@ (801b1f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b1da:	632b      	str	r3, [r5, #48]	@ 0x30
 801b1dc:	bd38      	pop	{r3, r4, r5, pc}
 801b1de:	bf00      	nop
 801b1e0:	24025480 	.word	0x24025480
 801b1e4:	24000000 	.word	0x24000000
 801b1e8:	08018201 	.word	0x08018201
 801b1ec:	24000090 	.word	0x24000090
 801b1f0:	24025484 	.word	0x24025484
 801b1f4:	080181ff 	.word	0x080181ff
 801b1f8:	24000094 	.word	0x24000094

0801b1fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	4604      	mov	r4, r0
 801b200:	f7ff ff88 	bl	801b114 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b204:	4620      	mov	r0, r4
 801b206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b20a:	f7ff bfbd 	b.w	801b188 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b210 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b210:	b538      	push	{r3, r4, r5, lr}
 801b212:	4c15      	ldr	r4, [pc, #84]	@ (801b268 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b214:	4605      	mov	r5, r0
 801b216:	7823      	ldrb	r3, [r4, #0]
 801b218:	f3bf 8f5b 	dmb	ish
 801b21c:	07da      	lsls	r2, r3, #31
 801b21e:	d40b      	bmi.n	801b238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b220:	4620      	mov	r0, r4
 801b222:	f005 ff5e 	bl	80210e2 <__cxa_guard_acquire>
 801b226:	b138      	cbz	r0, 801b238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b228:	4620      	mov	r0, r4
 801b22a:	f005 ff66 	bl	80210fa <__cxa_guard_release>
 801b22e:	4a0f      	ldr	r2, [pc, #60]	@ (801b26c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b230:	490f      	ldr	r1, [pc, #60]	@ (801b270 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b232:	4810      	ldr	r0, [pc, #64]	@ (801b274 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b234:	f005 ff4e 	bl	80210d4 <__aeabi_atexit>
 801b238:	4c0f      	ldr	r4, [pc, #60]	@ (801b278 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b23a:	7823      	ldrb	r3, [r4, #0]
 801b23c:	f3bf 8f5b 	dmb	ish
 801b240:	07db      	lsls	r3, r3, #31
 801b242:	d40b      	bmi.n	801b25c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b244:	4620      	mov	r0, r4
 801b246:	f005 ff4c 	bl	80210e2 <__cxa_guard_acquire>
 801b24a:	b138      	cbz	r0, 801b25c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b24c:	4620      	mov	r0, r4
 801b24e:	f005 ff54 	bl	80210fa <__cxa_guard_release>
 801b252:	4a06      	ldr	r2, [pc, #24]	@ (801b26c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b254:	4909      	ldr	r1, [pc, #36]	@ (801b27c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b256:	480a      	ldr	r0, [pc, #40]	@ (801b280 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b258:	f005 ff3c 	bl	80210d4 <__aeabi_atexit>
 801b25c:	4b05      	ldr	r3, [pc, #20]	@ (801b274 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b25e:	646b      	str	r3, [r5, #68]	@ 0x44
 801b260:	4b07      	ldr	r3, [pc, #28]	@ (801b280 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b262:	64ab      	str	r3, [r5, #72]	@ 0x48
 801b264:	bd38      	pop	{r3, r4, r5, pc}
 801b266:	bf00      	nop
 801b268:	240254b0 	.word	0x240254b0
 801b26c:	24000000 	.word	0x24000000
 801b270:	080181f5 	.word	0x080181f5
 801b274:	240000c0 	.word	0x240000c0
 801b278:	240254b4 	.word	0x240254b4
 801b27c:	080181f3 	.word	0x080181f3
 801b280:	240000c4 	.word	0x240000c4

0801b284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b284:	b538      	push	{r3, r4, r5, lr}
 801b286:	4c15      	ldr	r4, [pc, #84]	@ (801b2dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b288:	4605      	mov	r5, r0
 801b28a:	7823      	ldrb	r3, [r4, #0]
 801b28c:	f3bf 8f5b 	dmb	ish
 801b290:	07da      	lsls	r2, r3, #31
 801b292:	d40b      	bmi.n	801b2ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b294:	4620      	mov	r0, r4
 801b296:	f005 ff24 	bl	80210e2 <__cxa_guard_acquire>
 801b29a:	b138      	cbz	r0, 801b2ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b29c:	4620      	mov	r0, r4
 801b29e:	f005 ff2c 	bl	80210fa <__cxa_guard_release>
 801b2a2:	4a0f      	ldr	r2, [pc, #60]	@ (801b2e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b2a4:	490f      	ldr	r1, [pc, #60]	@ (801b2e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b2a6:	4810      	ldr	r0, [pc, #64]	@ (801b2e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b2a8:	f005 ff14 	bl	80210d4 <__aeabi_atexit>
 801b2ac:	4c0f      	ldr	r4, [pc, #60]	@ (801b2ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b2ae:	7823      	ldrb	r3, [r4, #0]
 801b2b0:	f3bf 8f5b 	dmb	ish
 801b2b4:	07db      	lsls	r3, r3, #31
 801b2b6:	d40b      	bmi.n	801b2d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f005 ff12 	bl	80210e2 <__cxa_guard_acquire>
 801b2be:	b138      	cbz	r0, 801b2d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f005 ff1a 	bl	80210fa <__cxa_guard_release>
 801b2c6:	4a06      	ldr	r2, [pc, #24]	@ (801b2e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b2c8:	4909      	ldr	r1, [pc, #36]	@ (801b2f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b2ca:	480a      	ldr	r0, [pc, #40]	@ (801b2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b2cc:	f005 ff02 	bl	80210d4 <__aeabi_atexit>
 801b2d0:	4b05      	ldr	r3, [pc, #20]	@ (801b2e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b2d2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b2d4:	4b07      	ldr	r3, [pc, #28]	@ (801b2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b2d6:	642b      	str	r3, [r5, #64]	@ 0x40
 801b2d8:	bd38      	pop	{r3, r4, r5, pc}
 801b2da:	bf00      	nop
 801b2dc:	24025490 	.word	0x24025490
 801b2e0:	24000000 	.word	0x24000000
 801b2e4:	080181f9 	.word	0x080181f9
 801b2e8:	240000a0 	.word	0x240000a0
 801b2ec:	24025494 	.word	0x24025494
 801b2f0:	080181f7 	.word	0x080181f7
 801b2f4:	240000a4 	.word	0x240000a4

0801b2f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b2f8:	b510      	push	{r4, lr}
 801b2fa:	4604      	mov	r4, r0
 801b2fc:	f7ff ff88 	bl	801b210 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b300:	4620      	mov	r0, r4
 801b302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b306:	f7ff bfbd 	b.w	801b284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4c15      	ldr	r4, [pc, #84]	@ (801b364 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b310:	4605      	mov	r5, r0
 801b312:	7823      	ldrb	r3, [r4, #0]
 801b314:	f3bf 8f5b 	dmb	ish
 801b318:	07da      	lsls	r2, r3, #31
 801b31a:	d40b      	bmi.n	801b334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b31c:	4620      	mov	r0, r4
 801b31e:	f005 fee0 	bl	80210e2 <__cxa_guard_acquire>
 801b322:	b138      	cbz	r0, 801b334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b324:	4620      	mov	r0, r4
 801b326:	f005 fee8 	bl	80210fa <__cxa_guard_release>
 801b32a:	4a0f      	ldr	r2, [pc, #60]	@ (801b368 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b32c:	490f      	ldr	r1, [pc, #60]	@ (801b36c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b32e:	4810      	ldr	r0, [pc, #64]	@ (801b370 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b330:	f005 fed0 	bl	80210d4 <__aeabi_atexit>
 801b334:	4c0f      	ldr	r4, [pc, #60]	@ (801b374 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b336:	7823      	ldrb	r3, [r4, #0]
 801b338:	f3bf 8f5b 	dmb	ish
 801b33c:	07db      	lsls	r3, r3, #31
 801b33e:	d40b      	bmi.n	801b358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b340:	4620      	mov	r0, r4
 801b342:	f005 fece 	bl	80210e2 <__cxa_guard_acquire>
 801b346:	b138      	cbz	r0, 801b358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b348:	4620      	mov	r0, r4
 801b34a:	f005 fed6 	bl	80210fa <__cxa_guard_release>
 801b34e:	4a06      	ldr	r2, [pc, #24]	@ (801b368 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b350:	4909      	ldr	r1, [pc, #36]	@ (801b378 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b352:	480a      	ldr	r0, [pc, #40]	@ (801b37c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b354:	f005 febe 	bl	80210d4 <__aeabi_atexit>
 801b358:	4b05      	ldr	r3, [pc, #20]	@ (801b370 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b35a:	656b      	str	r3, [r5, #84]	@ 0x54
 801b35c:	4b07      	ldr	r3, [pc, #28]	@ (801b37c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b35e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801b360:	bd38      	pop	{r3, r4, r5, pc}
 801b362:	bf00      	nop
 801b364:	24025488 	.word	0x24025488
 801b368:	24000000 	.word	0x24000000
 801b36c:	080181ed 	.word	0x080181ed
 801b370:	24000098 	.word	0x24000098
 801b374:	2402548c 	.word	0x2402548c
 801b378:	080181eb 	.word	0x080181eb
 801b37c:	2400009c 	.word	0x2400009c

0801b380 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	4c15      	ldr	r4, [pc, #84]	@ (801b3d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b384:	4605      	mov	r5, r0
 801b386:	7823      	ldrb	r3, [r4, #0]
 801b388:	f3bf 8f5b 	dmb	ish
 801b38c:	07da      	lsls	r2, r3, #31
 801b38e:	d40b      	bmi.n	801b3a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b390:	4620      	mov	r0, r4
 801b392:	f005 fea6 	bl	80210e2 <__cxa_guard_acquire>
 801b396:	b138      	cbz	r0, 801b3a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b398:	4620      	mov	r0, r4
 801b39a:	f005 feae 	bl	80210fa <__cxa_guard_release>
 801b39e:	4a0f      	ldr	r2, [pc, #60]	@ (801b3dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b3a0:	490f      	ldr	r1, [pc, #60]	@ (801b3e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b3a2:	4810      	ldr	r0, [pc, #64]	@ (801b3e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b3a4:	f005 fe96 	bl	80210d4 <__aeabi_atexit>
 801b3a8:	4c0f      	ldr	r4, [pc, #60]	@ (801b3e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b3aa:	7823      	ldrb	r3, [r4, #0]
 801b3ac:	f3bf 8f5b 	dmb	ish
 801b3b0:	07db      	lsls	r3, r3, #31
 801b3b2:	d40b      	bmi.n	801b3cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f005 fe94 	bl	80210e2 <__cxa_guard_acquire>
 801b3ba:	b138      	cbz	r0, 801b3cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b3bc:	4620      	mov	r0, r4
 801b3be:	f005 fe9c 	bl	80210fa <__cxa_guard_release>
 801b3c2:	4a06      	ldr	r2, [pc, #24]	@ (801b3dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b3c4:	4909      	ldr	r1, [pc, #36]	@ (801b3ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b3c6:	480a      	ldr	r0, [pc, #40]	@ (801b3f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b3c8:	f005 fe84 	bl	80210d4 <__aeabi_atexit>
 801b3cc:	4b05      	ldr	r3, [pc, #20]	@ (801b3e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b3ce:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801b3d0:	4b07      	ldr	r3, [pc, #28]	@ (801b3f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b3d2:	652b      	str	r3, [r5, #80]	@ 0x50
 801b3d4:	bd38      	pop	{r3, r4, r5, pc}
 801b3d6:	bf00      	nop
 801b3d8:	24025478 	.word	0x24025478
 801b3dc:	24000000 	.word	0x24000000
 801b3e0:	080181f1 	.word	0x080181f1
 801b3e4:	24000088 	.word	0x24000088
 801b3e8:	2402547c 	.word	0x2402547c
 801b3ec:	080181ef 	.word	0x080181ef
 801b3f0:	2400008c 	.word	0x2400008c

0801b3f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b3f4:	b510      	push	{r4, lr}
 801b3f6:	4604      	mov	r4, r0
 801b3f8:	f7ff ff88 	bl	801b30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b402:	f7ff bfbd 	b.w	801b380 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b406 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b406:	b510      	push	{r4, lr}
 801b408:	4604      	mov	r4, r0
 801b40a:	f7ff fff3 	bl	801b3f4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b40e:	4620      	mov	r0, r4
 801b410:	f7ff ff72 	bl	801b2f8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b414:	4620      	mov	r0, r4
 801b416:	f7ff fe73 	bl	801b100 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b41a:	4620      	mov	r0, r4
 801b41c:	f7ff fdf2 	bl	801b004 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b420:	4620      	mov	r0, r4
 801b422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b426:	f7ff bee9 	b.w	801b1fc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801b42c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4c0b      	ldr	r4, [pc, #44]	@ (801b45c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801b430:	4605      	mov	r5, r0
 801b432:	7823      	ldrb	r3, [r4, #0]
 801b434:	f3bf 8f5b 	dmb	ish
 801b438:	07db      	lsls	r3, r3, #31
 801b43a:	d40b      	bmi.n	801b454 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b43c:	4620      	mov	r0, r4
 801b43e:	f005 fe50 	bl	80210e2 <__cxa_guard_acquire>
 801b442:	b138      	cbz	r0, 801b454 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b444:	4620      	mov	r0, r4
 801b446:	f005 fe58 	bl	80210fa <__cxa_guard_release>
 801b44a:	4a05      	ldr	r2, [pc, #20]	@ (801b460 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801b44c:	4905      	ldr	r1, [pc, #20]	@ (801b464 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801b44e:	4806      	ldr	r0, [pc, #24]	@ (801b468 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b450:	f005 fe40 	bl	80210d4 <__aeabi_atexit>
 801b454:	4b04      	ldr	r3, [pc, #16]	@ (801b468 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b456:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801b458:	bd38      	pop	{r3, r4, r5, pc}
 801b45a:	bf00      	nop
 801b45c:	2402546c 	.word	0x2402546c
 801b460:	24000000 	.word	0x24000000
 801b464:	080181e9 	.word	0x080181e9
 801b468:	24000080 	.word	0x24000080

0801b46c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801b46c:	b538      	push	{r3, r4, r5, lr}
 801b46e:	4c0b      	ldr	r4, [pc, #44]	@ (801b49c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801b470:	4605      	mov	r5, r0
 801b472:	7823      	ldrb	r3, [r4, #0]
 801b474:	f3bf 8f5b 	dmb	ish
 801b478:	07db      	lsls	r3, r3, #31
 801b47a:	d40b      	bmi.n	801b494 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b47c:	4620      	mov	r0, r4
 801b47e:	f005 fe30 	bl	80210e2 <__cxa_guard_acquire>
 801b482:	b138      	cbz	r0, 801b494 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b484:	4620      	mov	r0, r4
 801b486:	f005 fe38 	bl	80210fa <__cxa_guard_release>
 801b48a:	4a05      	ldr	r2, [pc, #20]	@ (801b4a0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801b48c:	4905      	ldr	r1, [pc, #20]	@ (801b4a4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801b48e:	4806      	ldr	r0, [pc, #24]	@ (801b4a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b490:	f005 fe20 	bl	80210d4 <__aeabi_atexit>
 801b494:	4b04      	ldr	r3, [pc, #16]	@ (801b4a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b496:	662b      	str	r3, [r5, #96]	@ 0x60
 801b498:	bd38      	pop	{r3, r4, r5, pc}
 801b49a:	bf00      	nop
 801b49c:	24025470 	.word	0x24025470
 801b4a0:	24000000 	.word	0x24000000
 801b4a4:	080181e7 	.word	0x080181e7
 801b4a8:	24000084 	.word	0x24000084

0801b4ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801b4ac:	b570      	push	{r4, r5, r6, lr}
 801b4ae:	4d0c      	ldr	r5, [pc, #48]	@ (801b4e0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801b4b0:	4606      	mov	r6, r0
 801b4b2:	4c0c      	ldr	r4, [pc, #48]	@ (801b4e4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801b4b4:	782b      	ldrb	r3, [r5, #0]
 801b4b6:	f3bf 8f5b 	dmb	ish
 801b4ba:	f013 0f01 	tst.w	r3, #1
 801b4be:	d10d      	bne.n	801b4dc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	f005 fe0e 	bl	80210e2 <__cxa_guard_acquire>
 801b4c6:	b148      	cbz	r0, 801b4dc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b4c8:	4b07      	ldr	r3, [pc, #28]	@ (801b4e8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801b4ca:	4628      	mov	r0, r5
 801b4cc:	6023      	str	r3, [r4, #0]
 801b4ce:	f005 fe14 	bl	80210fa <__cxa_guard_release>
 801b4d2:	4a06      	ldr	r2, [pc, #24]	@ (801b4ec <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	4906      	ldr	r1, [pc, #24]	@ (801b4f0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801b4d8:	f005 fdfc 	bl	80210d4 <__aeabi_atexit>
 801b4dc:	6674      	str	r4, [r6, #100]	@ 0x64
 801b4de:	bd70      	pop	{r4, r5, r6, pc}
 801b4e0:	24025474 	.word	0x24025474
 801b4e4:	240255cc 	.word	0x240255cc
 801b4e8:	080257ec 	.word	0x080257ec
 801b4ec:	24000000 	.word	0x24000000
 801b4f0:	080181e5 	.word	0x080181e5

0801b4f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801b4f4:	b510      	push	{r4, lr}
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	f7ff ff98 	bl	801b42c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f7ff ffb5 	bl	801b46c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801b502:	4620      	mov	r0, r4
 801b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b508:	f7ff bfd0 	b.w	801b4ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801b50c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801b50c:	b570      	push	{r4, r5, r6, lr}
 801b50e:	4d0c      	ldr	r5, [pc, #48]	@ (801b540 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801b510:	4606      	mov	r6, r0
 801b512:	4c0c      	ldr	r4, [pc, #48]	@ (801b544 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801b514:	782b      	ldrb	r3, [r5, #0]
 801b516:	f3bf 8f5b 	dmb	ish
 801b51a:	f013 0f01 	tst.w	r3, #1
 801b51e:	d10d      	bne.n	801b53c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801b520:	4628      	mov	r0, r5
 801b522:	f005 fdde 	bl	80210e2 <__cxa_guard_acquire>
 801b526:	b148      	cbz	r0, 801b53c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801b528:	4b07      	ldr	r3, [pc, #28]	@ (801b548 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801b52a:	4628      	mov	r0, r5
 801b52c:	6023      	str	r3, [r4, #0]
 801b52e:	f005 fde4 	bl	80210fa <__cxa_guard_release>
 801b532:	4a06      	ldr	r2, [pc, #24]	@ (801b54c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801b534:	4620      	mov	r0, r4
 801b536:	4906      	ldr	r1, [pc, #24]	@ (801b550 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801b538:	f005 fdcc 	bl	80210d4 <__aeabi_atexit>
 801b53c:	66b4      	str	r4, [r6, #104]	@ 0x68
 801b53e:	bd70      	pop	{r4, r5, r6, pc}
 801b540:	24025468 	.word	0x24025468
 801b544:	240254c8 	.word	0x240254c8
 801b548:	08025804 	.word	0x08025804
 801b54c:	24000000 	.word	0x24000000
 801b550:	080181e3 	.word	0x080181e3

0801b554 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b558:	b087      	sub	sp, #28
 801b55a:	788d      	ldrb	r5, [r1, #2]
 801b55c:	f891 9000 	ldrb.w	r9, [r1]
 801b560:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801b564:	9501      	str	r5, [sp, #4]
 801b566:	784d      	ldrb	r5, [r1, #1]
 801b568:	9203      	str	r2, [sp, #12]
 801b56a:	9502      	str	r5, [sp, #8]
 801b56c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b570:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801b574:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801b578:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801b57c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801b580:	fb06 0708 	mla	r7, r6, r8, r0
 801b584:	2e00      	cmp	r6, #0
 801b586:	eb02 0a07 	add.w	sl, r2, r7
 801b58a:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801b58e:	9d01      	ldr	r5, [sp, #4]
 801b590:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801b594:	ea45 0509 	orr.w	r5, r5, r9
 801b598:	9505      	str	r5, [sp, #20]
 801b59a:	f2c0 80b2 	blt.w	801b702 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b59e:	45b3      	cmp	fp, r6
 801b5a0:	f340 80af 	ble.w	801b702 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	f2c0 80aa 	blt.w	801b6fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b5aa:	4580      	cmp	r8, r0
 801b5ac:	f340 80a7 	ble.w	801b6fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b5b0:	9a03      	ldr	r2, [sp, #12]
 801b5b2:	5dd7      	ldrb	r7, [r2, r7]
 801b5b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b5b8:	441f      	add	r7, r3
 801b5ba:	1c42      	adds	r2, r0, #1
 801b5bc:	f100 80a4 	bmi.w	801b708 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b5c0:	4590      	cmp	r8, r2
 801b5c2:	f340 80a1 	ble.w	801b708 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b5c6:	2c00      	cmp	r4, #0
 801b5c8:	f000 809e 	beq.w	801b708 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b5cc:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b5d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5d4:	441d      	add	r5, r3
 801b5d6:	3601      	adds	r6, #1
 801b5d8:	f100 809a 	bmi.w	801b710 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b5dc:	45b3      	cmp	fp, r6
 801b5de:	f340 8097 	ble.w	801b710 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b5e2:	f1bc 0f00 	cmp.w	ip, #0
 801b5e6:	f000 8093 	beq.w	801b710 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b5ea:	2800      	cmp	r0, #0
 801b5ec:	f2c0 808e 	blt.w	801b70c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b5f0:	4580      	cmp	r8, r0
 801b5f2:	f340 808b 	ble.w	801b70c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b5f6:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801b5fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b5fe:	441e      	add	r6, r3
 801b600:	3001      	adds	r0, #1
 801b602:	f100 8088 	bmi.w	801b716 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b606:	4580      	cmp	r8, r0
 801b608:	f340 8085 	ble.w	801b716 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b60c:	2c00      	cmp	r4, #0
 801b60e:	f000 8082 	beq.w	801b716 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b612:	44d0      	add	r8, sl
 801b614:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b618:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b61c:	4413      	add	r3, r2
 801b61e:	b2a4      	uxth	r4, r4
 801b620:	f895 a000 	ldrb.w	sl, [r5]
 801b624:	fa1f fc8c 	uxth.w	ip, ip
 801b628:	fb04 fb0c 	mul.w	fp, r4, ip
 801b62c:	0124      	lsls	r4, r4, #4
 801b62e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801b632:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801b636:	eba4 040b 	sub.w	r4, r4, fp
 801b63a:	fa1f f08c 	uxth.w	r0, ip
 801b63e:	b2a2      	uxth	r2, r4
 801b640:	783c      	ldrb	r4, [r7, #0]
 801b642:	eba8 0800 	sub.w	r8, r8, r0
 801b646:	fa1f fc8e 	uxth.w	ip, lr
 801b64a:	fb02 fa0a 	mul.w	sl, r2, sl
 801b64e:	ea6f 0e0e 	mvn.w	lr, lr
 801b652:	fa1f f888 	uxth.w	r8, r8
 801b656:	fa5f fe8e 	uxtb.w	lr, lr
 801b65a:	fb08 aa04 	mla	sl, r8, r4, sl
 801b65e:	7834      	ldrb	r4, [r6, #0]
 801b660:	fb19 f90e 	smulbb	r9, r9, lr
 801b664:	fb00 aa04 	mla	sl, r0, r4, sl
 801b668:	781c      	ldrb	r4, [r3, #0]
 801b66a:	fb0b a404 	mla	r4, fp, r4, sl
 801b66e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b672:	fb04 990c 	mla	r9, r4, ip, r9
 801b676:	fa1f f989 	uxth.w	r9, r9
 801b67a:	f109 0401 	add.w	r4, r9, #1
 801b67e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b682:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b686:	f881 9000 	strb.w	r9, [r1]
 801b68a:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b68e:	787c      	ldrb	r4, [r7, #1]
 801b690:	fb02 f909 	mul.w	r9, r2, r9
 801b694:	fb08 9904 	mla	r9, r8, r4, r9
 801b698:	7874      	ldrb	r4, [r6, #1]
 801b69a:	fb00 9904 	mla	r9, r0, r4, r9
 801b69e:	785c      	ldrb	r4, [r3, #1]
 801b6a0:	fb0b 9404 	mla	r4, fp, r4, r9
 801b6a4:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801b6a8:	9c02      	ldr	r4, [sp, #8]
 801b6aa:	fb14 f90e 	smulbb	r9, r4, lr
 801b6ae:	fb0a 940c 	mla	r4, sl, ip, r9
 801b6b2:	b2a4      	uxth	r4, r4
 801b6b4:	f104 0901 	add.w	r9, r4, #1
 801b6b8:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801b6bc:	1224      	asrs	r4, r4, #8
 801b6be:	704c      	strb	r4, [r1, #1]
 801b6c0:	78ad      	ldrb	r5, [r5, #2]
 801b6c2:	78bc      	ldrb	r4, [r7, #2]
 801b6c4:	436a      	muls	r2, r5
 801b6c6:	789b      	ldrb	r3, [r3, #2]
 801b6c8:	fb08 2204 	mla	r2, r8, r4, r2
 801b6cc:	78b4      	ldrb	r4, [r6, #2]
 801b6ce:	fb00 2004 	mla	r0, r0, r4, r2
 801b6d2:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b6d6:	9b01      	ldr	r3, [sp, #4]
 801b6d8:	fb13 fe0e 	smulbb	lr, r3, lr
 801b6dc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b6e0:	fb0b ec0c 	mla	ip, fp, ip, lr
 801b6e4:	fa1f fc8c 	uxth.w	ip, ip
 801b6e8:	f10c 0e01 	add.w	lr, ip, #1
 801b6ec:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b6f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b6f4:	f881 c002 	strb.w	ip, [r1, #2]
 801b6f8:	b007      	add	sp, #28
 801b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6fe:	af05      	add	r7, sp, #20
 801b700:	e75b      	b.n	801b5ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801b702:	ad05      	add	r5, sp, #20
 801b704:	462f      	mov	r7, r5
 801b706:	e766      	b.n	801b5d6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b708:	ad05      	add	r5, sp, #20
 801b70a:	e764      	b.n	801b5d6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b70c:	ae05      	add	r6, sp, #20
 801b70e:	e777      	b.n	801b600 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801b710:	ab05      	add	r3, sp, #20
 801b712:	461e      	mov	r6, r3
 801b714:	e783      	b.n	801b61e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801b716:	ab05      	add	r3, sp, #20
 801b718:	e781      	b.n	801b61e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801b71a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b71a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b71e:	b093      	sub	sp, #76	@ 0x4c
 801b720:	9210      	str	r2, [sp, #64]	@ 0x40
 801b722:	9309      	str	r3, [sp, #36]	@ 0x24
 801b724:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b726:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801b72a:	9011      	str	r0, [sp, #68]	@ 0x44
 801b72c:	930e      	str	r3, [sp, #56]	@ 0x38
 801b72e:	6850      	ldr	r0, [r2, #4]
 801b730:	910d      	str	r1, [sp, #52]	@ 0x34
 801b732:	6812      	ldr	r2, [r2, #0]
 801b734:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801b738:	fb00 1303 	mla	r3, r0, r3, r1
 801b73c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b740:	18d3      	adds	r3, r2, r3
 801b742:	930a      	str	r3, [sp, #40]	@ 0x28
 801b744:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	930c      	str	r3, [sp, #48]	@ 0x30
 801b74a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b74c:	685c      	ldr	r4, [r3, #4]
 801b74e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b750:	3404      	adds	r4, #4
 801b752:	43db      	mvns	r3, r3
 801b754:	b2db      	uxtb	r3, r3
 801b756:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b758:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	dc03      	bgt.n	801b766 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b75e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b760:	2b00      	cmp	r3, #0
 801b762:	f340 8250 	ble.w	801bc06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b766:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b768:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b76c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b770:	1e48      	subs	r0, r1, #1
 801b772:	1e55      	subs	r5, r2, #1
 801b774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b776:	2b00      	cmp	r3, #0
 801b778:	f340 80ee 	ble.w	801b958 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b77c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801b77e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b780:	1436      	asrs	r6, r6, #16
 801b782:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b786:	d406      	bmi.n	801b796 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b788:	4286      	cmp	r6, r0
 801b78a:	da04      	bge.n	801b796 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	db02      	blt.n	801b796 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b790:	42ab      	cmp	r3, r5
 801b792:	f2c0 80e2 	blt.w	801b95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b796:	3601      	adds	r6, #1
 801b798:	f100 80cf 	bmi.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b79c:	42b1      	cmp	r1, r6
 801b79e:	f2c0 80cc 	blt.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b7a2:	3301      	adds	r3, #1
 801b7a4:	f100 80c9 	bmi.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	f2c0 80c6 	blt.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b7ae:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801b7b2:	f1bb 0f00 	cmp.w	fp, #0
 801b7b6:	f340 80f1 	ble.w	801b99c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b7ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b7bc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b7be:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b7c0:	141d      	asrs	r5, r3, #16
 801b7c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b7c4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b7c8:	68c7      	ldr	r7, [r0, #12]
 801b7ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b7cc:	1418      	asrs	r0, r3, #16
 801b7ce:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801b7d2:	6892      	ldr	r2, [r2, #8]
 801b7d4:	f100 8137 	bmi.w	801ba46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b7d8:	f102 3cff 	add.w	ip, r2, #4294967295
 801b7dc:	4560      	cmp	r0, ip
 801b7de:	f280 8132 	bge.w	801ba46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b7e2:	2d00      	cmp	r5, #0
 801b7e4:	f2c0 812f 	blt.w	801ba46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b7e8:	f107 3cff 	add.w	ip, r7, #4294967295
 801b7ec:	4565      	cmp	r5, ip
 801b7ee:	f280 812a 	bge.w	801ba46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b7f2:	b212      	sxth	r2, r2
 801b7f4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b7f6:	fb05 0002 	mla	r0, r5, r2, r0
 801b7fa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b7fc:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b800:	4405      	add	r5, r0
 801b802:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b806:	eb04 0e0c 	add.w	lr, r4, ip
 801b80a:	f1b8 0f00 	cmp.w	r8, #0
 801b80e:	f000 810c 	beq.w	801ba2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801b812:	786f      	ldrb	r7, [r5, #1]
 801b814:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b818:	4427      	add	r7, r4
 801b81a:	2900      	cmp	r1, #0
 801b81c:	f000 810d 	beq.w	801ba3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801b820:	18a8      	adds	r0, r5, r2
 801b822:	5caa      	ldrb	r2, [r5, r2]
 801b824:	7840      	ldrb	r0, [r0, #1]
 801b826:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b82a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b82e:	4422      	add	r2, r4
 801b830:	4420      	add	r0, r4
 801b832:	fa1f f388 	uxth.w	r3, r8
 801b836:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801b83a:	b289      	uxth	r1, r1
 801b83c:	f897 c000 	ldrb.w	ip, [r7]
 801b840:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b844:	fb03 f901 	mul.w	r9, r3, r1
 801b848:	011b      	lsls	r3, r3, #4
 801b84a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b84e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801b852:	eba3 0309 	sub.w	r3, r3, r9
 801b856:	b289      	uxth	r1, r1
 801b858:	b29b      	uxth	r3, r3
 801b85a:	eba8 0801 	sub.w	r8, r8, r1
 801b85e:	fb03 fc0c 	mul.w	ip, r3, ip
 801b862:	fa1f f888 	uxth.w	r8, r8
 801b866:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b868:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b86a:	fb08 cc0a 	mla	ip, r8, sl, ip
 801b86e:	f892 a000 	ldrb.w	sl, [r2]
 801b872:	fb01 cc0a 	mla	ip, r1, sl, ip
 801b876:	f890 a000 	ldrb.w	sl, [r0]
 801b87a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801b87e:	f896 a000 	ldrb.w	sl, [r6]
 801b882:	fb1a fa03 	smulbb	sl, sl, r3
 801b886:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b88a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b88c:	fb0c ac05 	mla	ip, ip, r5, sl
 801b890:	fa1f fc8c 	uxth.w	ip, ip
 801b894:	f10c 0a01 	add.w	sl, ip, #1
 801b898:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b89c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8a0:	f886 a000 	strb.w	sl, [r6]
 801b8a4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801b8a8:	f89e a001 	ldrb.w	sl, [lr, #1]
 801b8ac:	fb03 fc0c 	mul.w	ip, r3, ip
 801b8b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b8b2:	fb08 cc0a 	mla	ip, r8, sl, ip
 801b8b6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801b8ba:	fb01 cc0a 	mla	ip, r1, sl, ip
 801b8be:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b8c2:	fb09 cc0a 	mla	ip, r9, sl, ip
 801b8c6:	f896 a001 	ldrb.w	sl, [r6, #1]
 801b8ca:	fb1a fa03 	smulbb	sl, sl, r3
 801b8ce:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b8d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b8d4:	fb0c ac05 	mla	ip, ip, r5, sl
 801b8d8:	fa1f fc8c 	uxth.w	ip, ip
 801b8dc:	f10c 0a01 	add.w	sl, ip, #1
 801b8e0:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801b8e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b8e8:	f886 c001 	strb.w	ip, [r6, #1]
 801b8ec:	78bf      	ldrb	r7, [r7, #2]
 801b8ee:	f89e c002 	ldrb.w	ip, [lr, #2]
 801b8f2:	437b      	muls	r3, r7
 801b8f4:	fb08 330c 	mla	r3, r8, ip, r3
 801b8f8:	f892 c002 	ldrb.w	ip, [r2, #2]
 801b8fc:	7882      	ldrb	r2, [r0, #2]
 801b8fe:	fb01 310c 	mla	r1, r1, ip, r3
 801b902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b904:	fb09 1902 	mla	r9, r9, r2, r1
 801b908:	78b1      	ldrb	r1, [r6, #2]
 801b90a:	fb11 f103 	smulbb	r1, r1, r3
 801b90e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b912:	fb09 1505 	mla	r5, r9, r5, r1
 801b916:	b2ad      	uxth	r5, r5
 801b918:	1c6b      	adds	r3, r5, #1
 801b91a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b91e:	122d      	asrs	r5, r5, #8
 801b920:	70b5      	strb	r5, [r6, #2]
 801b922:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b924:	3603      	adds	r6, #3
 801b926:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801b928:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b92c:	4413      	add	r3, r2
 801b92e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b930:	931d      	str	r3, [sp, #116]	@ 0x74
 801b932:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b934:	4413      	add	r3, r2
 801b936:	931e      	str	r3, [sp, #120]	@ 0x78
 801b938:	e73b      	b.n	801b7b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b93a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b93c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801b93e:	4433      	add	r3, r6
 801b940:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b942:	931d      	str	r3, [sp, #116]	@ 0x74
 801b944:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b946:	4433      	add	r3, r6
 801b948:	931e      	str	r3, [sp, #120]	@ 0x78
 801b94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b94c:	3b01      	subs	r3, #1
 801b94e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b952:	3303      	adds	r3, #3
 801b954:	930a      	str	r3, [sp, #40]	@ 0x28
 801b956:	e70d      	b.n	801b774 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b958:	d028      	beq.n	801b9ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b95c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801b95e:	3b01      	subs	r3, #1
 801b960:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801b962:	fb00 5003 	mla	r0, r0, r3, r5
 801b966:	1400      	asrs	r0, r0, #16
 801b968:	f53f af21 	bmi.w	801b7ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b96c:	3901      	subs	r1, #1
 801b96e:	4288      	cmp	r0, r1
 801b970:	f6bf af1d 	bge.w	801b7ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b974:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801b976:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801b978:	fb01 0303 	mla	r3, r1, r3, r0
 801b97c:	141b      	asrs	r3, r3, #16
 801b97e:	f53f af16 	bmi.w	801b7ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b982:	3a01      	subs	r2, #1
 801b984:	4293      	cmp	r3, r2
 801b986:	f6bf af12 	bge.w	801b7ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b98a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b98c:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801b990:	1cdf      	adds	r7, r3, #3
 801b992:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801b996:	f1b9 0f00 	cmp.w	r9, #0
 801b99a:	dc73      	bgt.n	801ba84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801b99c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b99e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9a8:	441a      	add	r2, r3
 801b9aa:	920a      	str	r2, [sp, #40]	@ 0x28
 801b9ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	f340 8129 	ble.w	801bc06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b9b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b9b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b9ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9c2:	eef0 6a62 	vmov.f32	s13, s5
 801b9c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b9ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9d2:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801b9d6:	eef0 6a43 	vmov.f32	s13, s6
 801b9da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9de:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801b9e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b9f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b9fa:	ee12 2a90 	vmov	r2, s5
 801b9fe:	eef0 2a47 	vmov.f32	s5, s14
 801ba02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba06:	ee13 2a10 	vmov	r2, s6
 801ba0a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ba0c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ba0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ba12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba16:	9320      	str	r3, [sp, #128]	@ 0x80
 801ba18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ba1c:	3b01      	subs	r3, #1
 801ba1e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ba20:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ba22:	bf08      	it	eq
 801ba24:	4613      	moveq	r3, r2
 801ba26:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba28:	e696      	b.n	801b758 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ba2a:	b149      	cbz	r1, 801ba40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ba2c:	5caa      	ldrb	r2, [r5, r2]
 801ba2e:	4670      	mov	r0, lr
 801ba30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba34:	4422      	add	r2, r4
 801ba36:	4677      	mov	r7, lr
 801ba38:	e6fb      	b.n	801b832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ba3a:	4670      	mov	r0, lr
 801ba3c:	4672      	mov	r2, lr
 801ba3e:	e6f8      	b.n	801b832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ba40:	4670      	mov	r0, lr
 801ba42:	4672      	mov	r2, lr
 801ba44:	e7f7      	b.n	801ba36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ba46:	f110 0c01 	adds.w	ip, r0, #1
 801ba4a:	f53f af6a 	bmi.w	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba4e:	4562      	cmp	r2, ip
 801ba50:	f6ff af67 	blt.w	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba54:	f115 0c01 	adds.w	ip, r5, #1
 801ba58:	f53f af63 	bmi.w	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba5c:	4567      	cmp	r7, ip
 801ba5e:	f6ff af60 	blt.w	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba64:	b23f      	sxth	r7, r7
 801ba66:	b212      	sxth	r2, r2
 801ba68:	9002      	str	r0, [sp, #8]
 801ba6a:	9701      	str	r7, [sp, #4]
 801ba6c:	9200      	str	r2, [sp, #0]
 801ba6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ba70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ba72:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801ba76:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801ba7a:	4623      	mov	r3, r4
 801ba7c:	4631      	mov	r1, r6
 801ba7e:	f7ff fd69 	bl	801b554 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ba82:	e74e      	b.n	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ba84:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ba86:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801ba88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ba8c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ba8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ba90:	1400      	asrs	r0, r0, #16
 801ba92:	142d      	asrs	r5, r5, #16
 801ba94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ba96:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ba9a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ba9e:	fb02 5000 	mla	r0, r2, r0, r5
 801baa2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801baa4:	f815 e000 	ldrb.w	lr, [r5, r0]
 801baa8:	eb05 0c00 	add.w	ip, r5, r0
 801baac:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bab0:	eb04 060e 	add.w	r6, r4, lr
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	f000 8097 	beq.w	801bbe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801baba:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801babe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bac2:	4425      	add	r5, r4
 801bac4:	2900      	cmp	r1, #0
 801bac6:	f000 8098 	beq.w	801bbfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801baca:	eb0c 0002 	add.w	r0, ip, r2
 801bace:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bad2:	7840      	ldrb	r0, [r0, #1]
 801bad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bad8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801badc:	4422      	add	r2, r4
 801bade:	4420      	add	r0, r4
 801bae0:	b29b      	uxth	r3, r3
 801bae2:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801bae6:	b289      	uxth	r1, r1
 801bae8:	f895 e000 	ldrb.w	lr, [r5]
 801baec:	3703      	adds	r7, #3
 801baee:	f109 39ff 	add.w	r9, r9, #4294967295
 801baf2:	fb03 f801 	mul.w	r8, r3, r1
 801baf6:	011b      	lsls	r3, r3, #4
 801baf8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801bafc:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801bb00:	eba3 0308 	sub.w	r3, r3, r8
 801bb04:	b289      	uxth	r1, r1
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	ebac 0c01 	sub.w	ip, ip, r1
 801bb0c:	fb03 fe0e 	mul.w	lr, r3, lr
 801bb10:	fa1f fc8c 	uxth.w	ip, ip
 801bb14:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bb18:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bb1c:	f892 b000 	ldrb.w	fp, [r2]
 801bb20:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bb24:	f890 b000 	ldrb.w	fp, [r0]
 801bb28:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bb2c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801bb30:	fb1b fb03 	smulbb	fp, fp, r3
 801bb34:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bb38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb3a:	fb0e be0a 	mla	lr, lr, sl, fp
 801bb3e:	fa1f fe8e 	uxth.w	lr, lr
 801bb42:	f10e 0b01 	add.w	fp, lr, #1
 801bb46:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bb4a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bb4e:	f807 ec06 	strb.w	lr, [r7, #-6]
 801bb52:	f895 e001 	ldrb.w	lr, [r5, #1]
 801bb56:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bb5a:	fb03 fe0e 	mul.w	lr, r3, lr
 801bb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bb60:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bb64:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bb68:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bb6c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bb70:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bb74:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801bb78:	fb1b fb03 	smulbb	fp, fp, r3
 801bb7c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bb80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb82:	fb0e be0a 	mla	lr, lr, sl, fp
 801bb86:	fa1f fe8e 	uxth.w	lr, lr
 801bb8a:	f10e 0b01 	add.w	fp, lr, #1
 801bb8e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bb92:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bb96:	f807 ec05 	strb.w	lr, [r7, #-5]
 801bb9a:	78ad      	ldrb	r5, [r5, #2]
 801bb9c:	78b6      	ldrb	r6, [r6, #2]
 801bb9e:	436b      	muls	r3, r5
 801bba0:	7895      	ldrb	r5, [r2, #2]
 801bba2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bba4:	fb0c 3306 	mla	r3, ip, r6, r3
 801bba8:	fb01 3305 	mla	r3, r1, r5, r3
 801bbac:	7885      	ldrb	r5, [r0, #2]
 801bbae:	fb08 3805 	mla	r8, r8, r5, r3
 801bbb2:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801bbb6:	fb13 f302 	smulbb	r3, r3, r2
 801bbba:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801bbbe:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801bbc0:	fb08 380a 	mla	r8, r8, sl, r3
 801bbc4:	fa1f f888 	uxth.w	r8, r8
 801bbc8:	f108 0301 	add.w	r3, r8, #1
 801bbcc:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801bbd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bbd2:	4413      	add	r3, r2
 801bbd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bbd6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bbda:	931d      	str	r3, [sp, #116]	@ 0x74
 801bbdc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bbde:	f807 8c04 	strb.w	r8, [r7, #-4]
 801bbe2:	4413      	add	r3, r2
 801bbe4:	931e      	str	r3, [sp, #120]	@ 0x78
 801bbe6:	e6d6      	b.n	801b996 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bbe8:	b151      	cbz	r1, 801bc00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801bbea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bbee:	4630      	mov	r0, r6
 801bbf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bbf4:	4422      	add	r2, r4
 801bbf6:	4635      	mov	r5, r6
 801bbf8:	e772      	b.n	801bae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bbfa:	4630      	mov	r0, r6
 801bbfc:	4632      	mov	r2, r6
 801bbfe:	e76f      	b.n	801bae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bc00:	4630      	mov	r0, r6
 801bc02:	4632      	mov	r2, r6
 801bc04:	e7f7      	b.n	801bbf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bc06:	b013      	add	sp, #76	@ 0x4c
 801bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801bc0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc10:	784c      	ldrb	r4, [r1, #1]
 801bc12:	f891 a002 	ldrb.w	sl, [r1, #2]
 801bc16:	0224      	lsls	r4, r4, #8
 801bc18:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801bc1c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801bc20:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bc24:	f891 a000 	ldrb.w	sl, [r1]
 801bc28:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801bc2c:	ea44 040a 	orr.w	r4, r4, sl
 801bc30:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801bc34:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801bc38:	9401      	str	r4, [sp, #4]
 801bc3a:	fb05 c70e 	mla	r7, r5, lr, ip
 801bc3e:	2d00      	cmp	r5, #0
 801bc40:	eb02 0807 	add.w	r8, r2, r7
 801bc44:	db72      	blt.n	801bd2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bc46:	45a9      	cmp	r9, r5
 801bc48:	dd70      	ble.n	801bd2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bc4a:	f1bc 0f00 	cmp.w	ip, #0
 801bc4e:	db6b      	blt.n	801bd28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bc50:	45e6      	cmp	lr, ip
 801bc52:	dd69      	ble.n	801bd28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bc54:	5dd7      	ldrb	r7, [r2, r7]
 801bc56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bc5a:	441f      	add	r7, r3
 801bc5c:	f11c 0201 	adds.w	r2, ip, #1
 801bc60:	d467      	bmi.n	801bd32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bc62:	4596      	cmp	lr, r2
 801bc64:	dd65      	ble.n	801bd32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	d063      	beq.n	801bd32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bc6a:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bc6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc72:	441c      	add	r4, r3
 801bc74:	3501      	adds	r5, #1
 801bc76:	d460      	bmi.n	801bd3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bc78:	45a9      	cmp	r9, r5
 801bc7a:	dd5e      	ble.n	801bd3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bc7c:	2e00      	cmp	r6, #0
 801bc7e:	d05c      	beq.n	801bd3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bc80:	f1bc 0f00 	cmp.w	ip, #0
 801bc84:	db57      	blt.n	801bd36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801bc86:	45e6      	cmp	lr, ip
 801bc88:	dd55      	ble.n	801bd36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801bc8a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801bc8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc92:	441d      	add	r5, r3
 801bc94:	f11c 0201 	adds.w	r2, ip, #1
 801bc98:	d452      	bmi.n	801bd40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bc9a:	4596      	cmp	lr, r2
 801bc9c:	dd50      	ble.n	801bd40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bc9e:	2800      	cmp	r0, #0
 801bca0:	d04e      	beq.n	801bd40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bca2:	44c6      	add	lr, r8
 801bca4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bca8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bcac:	4413      	add	r3, r2
 801bcae:	b280      	uxth	r0, r0
 801bcb0:	f897 8000 	ldrb.w	r8, [r7]
 801bcb4:	b2b2      	uxth	r2, r6
 801bcb6:	fb00 f602 	mul.w	r6, r0, r2
 801bcba:	0100      	lsls	r0, r0, #4
 801bcbc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801bcc0:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801bcc4:	1b80      	subs	r0, r0, r6
 801bcc6:	fa1f fc82 	uxth.w	ip, r2
 801bcca:	b282      	uxth	r2, r0
 801bccc:	7820      	ldrb	r0, [r4, #0]
 801bcce:	ebae 0e0c 	sub.w	lr, lr, ip
 801bcd2:	4350      	muls	r0, r2
 801bcd4:	fa1f fe8e 	uxth.w	lr, lr
 801bcd8:	fb0e 0808 	mla	r8, lr, r8, r0
 801bcdc:	7828      	ldrb	r0, [r5, #0]
 801bcde:	fb0c 8800 	mla	r8, ip, r0, r8
 801bce2:	7818      	ldrb	r0, [r3, #0]
 801bce4:	fb06 8000 	mla	r0, r6, r0, r8
 801bce8:	1200      	asrs	r0, r0, #8
 801bcea:	7008      	strb	r0, [r1, #0]
 801bcec:	7860      	ldrb	r0, [r4, #1]
 801bcee:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bcf2:	4350      	muls	r0, r2
 801bcf4:	fb0e 0808 	mla	r8, lr, r8, r0
 801bcf8:	7868      	ldrb	r0, [r5, #1]
 801bcfa:	fb0c 8800 	mla	r8, ip, r0, r8
 801bcfe:	7858      	ldrb	r0, [r3, #1]
 801bd00:	fb06 8000 	mla	r0, r6, r0, r8
 801bd04:	1200      	asrs	r0, r0, #8
 801bd06:	7048      	strb	r0, [r1, #1]
 801bd08:	78a0      	ldrb	r0, [r4, #2]
 801bd0a:	78bf      	ldrb	r7, [r7, #2]
 801bd0c:	4350      	muls	r0, r2
 801bd0e:	78aa      	ldrb	r2, [r5, #2]
 801bd10:	fb0e 0007 	mla	r0, lr, r7, r0
 801bd14:	fb0c 0c02 	mla	ip, ip, r2, r0
 801bd18:	789a      	ldrb	r2, [r3, #2]
 801bd1a:	fb06 c202 	mla	r2, r6, r2, ip
 801bd1e:	1212      	asrs	r2, r2, #8
 801bd20:	708a      	strb	r2, [r1, #2]
 801bd22:	b002      	add	sp, #8
 801bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd28:	af01      	add	r7, sp, #4
 801bd2a:	e797      	b.n	801bc5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801bd2c:	ac01      	add	r4, sp, #4
 801bd2e:	4627      	mov	r7, r4
 801bd30:	e7a0      	b.n	801bc74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bd32:	ac01      	add	r4, sp, #4
 801bd34:	e79e      	b.n	801bc74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bd36:	ad01      	add	r5, sp, #4
 801bd38:	e7ac      	b.n	801bc94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801bd3a:	ab01      	add	r3, sp, #4
 801bd3c:	461d      	mov	r5, r3
 801bd3e:	e7b6      	b.n	801bcae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801bd40:	ab01      	add	r3, sp, #4
 801bd42:	e7b4      	b.n	801bcae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801bd44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd48:	b08d      	sub	sp, #52	@ 0x34
 801bd4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bd4e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801bd52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bd54:	900b      	str	r0, [sp, #44]	@ 0x2c
 801bd56:	9306      	str	r3, [sp, #24]
 801bd58:	6850      	ldr	r0, [r2, #4]
 801bd5a:	6812      	ldr	r2, [r2, #0]
 801bd5c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bd5e:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801bd62:	fb00 1303 	mla	r3, r0, r3, r1
 801bd66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd6a:	18d3      	adds	r3, r2, r3
 801bd6c:	9307      	str	r3, [sp, #28]
 801bd6e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	9308      	str	r3, [sp, #32]
 801bd74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bd76:	685d      	ldr	r5, [r3, #4]
 801bd78:	3504      	adds	r5, #4
 801bd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	dc03      	bgt.n	801bd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bd80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	f340 81e6 	ble.w	801c154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801bd88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bd8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bd8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bd92:	1e48      	subs	r0, r1, #1
 801bd94:	1e56      	subs	r6, r2, #1
 801bd96:	9b06      	ldr	r3, [sp, #24]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	f340 80bd 	ble.w	801bf18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bd9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bda0:	1427      	asrs	r7, r4, #16
 801bda2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bda6:	d406      	bmi.n	801bdb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bda8:	4287      	cmp	r7, r0
 801bdaa:	da04      	bge.n	801bdb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	db02      	blt.n	801bdb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdb0:	42b3      	cmp	r3, r6
 801bdb2:	f2c0 80b2 	blt.w	801bf1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bdb6:	3701      	adds	r7, #1
 801bdb8:	f100 80a1 	bmi.w	801befe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bdbc:	42b9      	cmp	r1, r7
 801bdbe:	f2c0 809e 	blt.w	801befe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bdc2:	3301      	adds	r3, #1
 801bdc4:	f100 809b 	bmi.w	801befe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bdc8:	429a      	cmp	r2, r3
 801bdca:	f2c0 8098 	blt.w	801befe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bdce:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801bdd2:	f1bb 0f00 	cmp.w	fp, #0
 801bdd6:	f340 80bf 	ble.w	801bf58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bdda:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bddc:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801bdde:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bde0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bde4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801bde8:	1420      	asrs	r0, r4, #16
 801bdea:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801bdec:	ea4f 4723 	mov.w	r7, r3, asr #16
 801bdf0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bdf4:	6892      	ldr	r2, [r2, #8]
 801bdf6:	f100 8103 	bmi.w	801c000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bdfa:	f102 3eff 	add.w	lr, r2, #4294967295
 801bdfe:	4570      	cmp	r0, lr
 801be00:	f280 80fe 	bge.w	801c000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801be04:	2f00      	cmp	r7, #0
 801be06:	f2c0 80fb 	blt.w	801c000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801be0a:	f10c 3eff 	add.w	lr, ip, #4294967295
 801be0e:	4577      	cmp	r7, lr
 801be10:	f280 80f6 	bge.w	801c000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801be14:	b212      	sxth	r2, r2
 801be16:	fb07 0002 	mla	r0, r7, r2, r0
 801be1a:	9f08      	ldr	r7, [sp, #32]
 801be1c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801be20:	eb07 0e00 	add.w	lr, r7, r0
 801be24:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801be28:	eb05 0c08 	add.w	ip, r5, r8
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	f000 80d8 	beq.w	801bfe2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801be32:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801be36:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801be3a:	442f      	add	r7, r5
 801be3c:	2900      	cmp	r1, #0
 801be3e:	f000 80d9 	beq.w	801bff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801be42:	eb0e 0002 	add.w	r0, lr, r2
 801be46:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801be4a:	7840      	ldrb	r0, [r0, #1]
 801be4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801be54:	442a      	add	r2, r5
 801be56:	4428      	add	r0, r5
 801be58:	b29b      	uxth	r3, r3
 801be5a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801be5e:	b289      	uxth	r1, r1
 801be60:	f897 8000 	ldrb.w	r8, [r7]
 801be64:	fb03 f901 	mul.w	r9, r3, r1
 801be68:	011b      	lsls	r3, r3, #4
 801be6a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801be6e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801be72:	eba3 0309 	sub.w	r3, r3, r9
 801be76:	b289      	uxth	r1, r1
 801be78:	b29b      	uxth	r3, r3
 801be7a:	ebae 0e01 	sub.w	lr, lr, r1
 801be7e:	fb03 f808 	mul.w	r8, r3, r8
 801be82:	fa1f fe8e 	uxth.w	lr, lr
 801be86:	fb0e 880a 	mla	r8, lr, sl, r8
 801be8a:	f892 a000 	ldrb.w	sl, [r2]
 801be8e:	fb01 880a 	mla	r8, r1, sl, r8
 801be92:	f890 a000 	ldrb.w	sl, [r0]
 801be96:	fb09 880a 	mla	r8, r9, sl, r8
 801be9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801be9e:	f886 8000 	strb.w	r8, [r6]
 801bea2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bea6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801beaa:	fb03 f808 	mul.w	r8, r3, r8
 801beae:	fb0e 880a 	mla	r8, lr, sl, r8
 801beb2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801beb6:	fb01 880a 	mla	r8, r1, sl, r8
 801beba:	f890 a001 	ldrb.w	sl, [r0, #1]
 801bebe:	fb09 880a 	mla	r8, r9, sl, r8
 801bec2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bec6:	f886 8001 	strb.w	r8, [r6, #1]
 801beca:	78bf      	ldrb	r7, [r7, #2]
 801becc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801bed0:	437b      	muls	r3, r7
 801bed2:	7892      	ldrb	r2, [r2, #2]
 801bed4:	fb0e 330c 	mla	r3, lr, ip, r3
 801bed8:	fb01 3102 	mla	r1, r1, r2, r3
 801bedc:	7882      	ldrb	r2, [r0, #2]
 801bede:	fb09 1902 	mla	r9, r9, r2, r1
 801bee2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bee6:	f886 9002 	strb.w	r9, [r6, #2]
 801beea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801beec:	3603      	adds	r6, #3
 801beee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bef0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bef4:	441c      	add	r4, r3
 801bef6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bef8:	4413      	add	r3, r2
 801befa:	9318      	str	r3, [sp, #96]	@ 0x60
 801befc:	e769      	b.n	801bdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801befe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bf00:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801bf02:	441c      	add	r4, r3
 801bf04:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bf06:	443b      	add	r3, r7
 801bf08:	9318      	str	r3, [sp, #96]	@ 0x60
 801bf0a:	9b06      	ldr	r3, [sp, #24]
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	9306      	str	r3, [sp, #24]
 801bf10:	9b07      	ldr	r3, [sp, #28]
 801bf12:	3303      	adds	r3, #3
 801bf14:	9307      	str	r3, [sp, #28]
 801bf16:	e73e      	b.n	801bd96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf18:	d026      	beq.n	801bf68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801bf1a:	9b06      	ldr	r3, [sp, #24]
 801bf1c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801bf1e:	3b01      	subs	r3, #1
 801bf20:	fb00 4003 	mla	r0, r0, r3, r4
 801bf24:	1400      	asrs	r0, r0, #16
 801bf26:	f53f af52 	bmi.w	801bdce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf2a:	3901      	subs	r1, #1
 801bf2c:	4288      	cmp	r0, r1
 801bf2e:	f6bf af4e 	bge.w	801bdce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bf34:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801bf36:	fb01 0303 	mla	r3, r1, r3, r0
 801bf3a:	141b      	asrs	r3, r3, #16
 801bf3c:	f53f af47 	bmi.w	801bdce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf40:	3a01      	subs	r2, #1
 801bf42:	4293      	cmp	r3, r2
 801bf44:	f6bf af43 	bge.w	801bdce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf48:	9b07      	ldr	r3, [sp, #28]
 801bf4a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801bf4e:	f103 0803 	add.w	r8, r3, #3
 801bf52:	f1ba 0f00 	cmp.w	sl, #0
 801bf56:	dc71      	bgt.n	801c03c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801bf58:	9b06      	ldr	r3, [sp, #24]
 801bf5a:	9a07      	ldr	r2, [sp, #28]
 801bf5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf64:	441a      	add	r2, r3
 801bf66:	9207      	str	r2, [sp, #28]
 801bf68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	f340 80f2 	ble.w	801c154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801bf70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf7a:	eeb0 6a62 	vmov.f32	s12, s5
 801bf7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf8a:	ee16 4a10 	vmov	r4, s12
 801bf8e:	eeb0 6a43 	vmov.f32	s12, s6
 801bf92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf96:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801bf9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfb2:	ee12 2a90 	vmov	r2, s5
 801bfb6:	eef0 2a47 	vmov.f32	s5, s14
 801bfba:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfbe:	ee13 2a10 	vmov	r2, s6
 801bfc2:	9319      	str	r3, [sp, #100]	@ 0x64
 801bfc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bfc6:	eeb0 3a67 	vmov.f32	s6, s15
 801bfca:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfce:	931a      	str	r3, [sp, #104]	@ 0x68
 801bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfd4:	3b01      	subs	r3, #1
 801bfd6:	9309      	str	r3, [sp, #36]	@ 0x24
 801bfd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bfda:	bf08      	it	eq
 801bfdc:	4613      	moveq	r3, r2
 801bfde:	9306      	str	r3, [sp, #24]
 801bfe0:	e6cb      	b.n	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bfe2:	b151      	cbz	r1, 801bffa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801bfe4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801bfe8:	4660      	mov	r0, ip
 801bfea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfee:	442a      	add	r2, r5
 801bff0:	4667      	mov	r7, ip
 801bff2:	e731      	b.n	801be58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bff4:	4660      	mov	r0, ip
 801bff6:	4662      	mov	r2, ip
 801bff8:	e72e      	b.n	801be58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bffa:	4660      	mov	r0, ip
 801bffc:	4662      	mov	r2, ip
 801bffe:	e7f7      	b.n	801bff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c000:	f110 0e01 	adds.w	lr, r0, #1
 801c004:	f53f af71 	bmi.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c008:	4572      	cmp	r2, lr
 801c00a:	f6ff af6e 	blt.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c00e:	f117 0e01 	adds.w	lr, r7, #1
 801c012:	f53f af6a 	bmi.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c016:	45f4      	cmp	ip, lr
 801c018:	f6ff af67 	blt.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c01c:	b212      	sxth	r2, r2
 801c01e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c022:	fa0f f38c 	sxth.w	r3, ip
 801c026:	9200      	str	r2, [sp, #0]
 801c028:	4631      	mov	r1, r6
 801c02a:	9a08      	ldr	r2, [sp, #32]
 801c02c:	9301      	str	r3, [sp, #4]
 801c02e:	462b      	mov	r3, r5
 801c030:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801c034:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c036:	f7ff fde9 	bl	801bc0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801c03a:	e756      	b.n	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c03c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c03e:	1426      	asrs	r6, r4, #16
 801c040:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801c042:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c046:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c04a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c04c:	1400      	asrs	r0, r0, #16
 801c04e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c052:	fb02 6000 	mla	r0, r2, r0, r6
 801c056:	9e08      	ldr	r6, [sp, #32]
 801c058:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c05c:	eb06 0c00 	add.w	ip, r6, r0
 801c060:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c064:	eb05 070e 	add.w	r7, r5, lr
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d064      	beq.n	801c136 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801c06c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801c070:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c074:	442e      	add	r6, r5
 801c076:	2900      	cmp	r1, #0
 801c078:	d066      	beq.n	801c148 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801c07a:	eb0c 0002 	add.w	r0, ip, r2
 801c07e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c082:	7840      	ldrb	r0, [r0, #1]
 801c084:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c088:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c08c:	442a      	add	r2, r5
 801c08e:	4428      	add	r0, r5
 801c090:	b29b      	uxth	r3, r3
 801c092:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801c096:	b289      	uxth	r1, r1
 801c098:	f896 e000 	ldrb.w	lr, [r6]
 801c09c:	f108 0803 	add.w	r8, r8, #3
 801c0a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0a4:	fb03 f901 	mul.w	r9, r3, r1
 801c0a8:	011b      	lsls	r3, r3, #4
 801c0aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c0ae:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801c0b2:	eba3 0309 	sub.w	r3, r3, r9
 801c0b6:	b289      	uxth	r1, r1
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	ebac 0c01 	sub.w	ip, ip, r1
 801c0be:	fb03 fe0e 	mul.w	lr, r3, lr
 801c0c2:	fa1f fc8c 	uxth.w	ip, ip
 801c0c6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c0ca:	f892 b000 	ldrb.w	fp, [r2]
 801c0ce:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c0d2:	f890 b000 	ldrb.w	fp, [r0]
 801c0d6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c0da:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0de:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c0e2:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c0e6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c0ea:	fb03 fe0e 	mul.w	lr, r3, lr
 801c0ee:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c0f2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c0f6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c0fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c0fe:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c102:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c106:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c10a:	78b6      	ldrb	r6, [r6, #2]
 801c10c:	78bf      	ldrb	r7, [r7, #2]
 801c10e:	4373      	muls	r3, r6
 801c110:	7896      	ldrb	r6, [r2, #2]
 801c112:	7882      	ldrb	r2, [r0, #2]
 801c114:	fb0c 3307 	mla	r3, ip, r7, r3
 801c118:	fb01 3306 	mla	r3, r1, r6, r3
 801c11c:	fb09 3902 	mla	r9, r9, r2, r3
 801c120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c122:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c124:	441c      	add	r4, r3
 801c126:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c128:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c12c:	4413      	add	r3, r2
 801c12e:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c132:	9318      	str	r3, [sp, #96]	@ 0x60
 801c134:	e70d      	b.n	801bf52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c136:	b151      	cbz	r1, 801c14e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c138:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c13c:	4638      	mov	r0, r7
 801c13e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c142:	442a      	add	r2, r5
 801c144:	463e      	mov	r6, r7
 801c146:	e7a3      	b.n	801c090 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c148:	4638      	mov	r0, r7
 801c14a:	463a      	mov	r2, r7
 801c14c:	e7a0      	b.n	801c090 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c14e:	4638      	mov	r0, r7
 801c150:	463a      	mov	r2, r7
 801c152:	e7f7      	b.n	801c144 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c154:	b00d      	add	sp, #52	@ 0x34
 801c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c15a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c15a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c15e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801c162:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c166:	2d00      	cmp	r5, #0
 801c168:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801c16c:	fb05 700c 	mla	r0, r5, ip, r7
 801c170:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801c174:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801c178:	eb02 0800 	add.w	r8, r2, r0
 801c17c:	f2c0 8118 	blt.w	801c3b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c180:	45a9      	cmp	r9, r5
 801c182:	f340 8115 	ble.w	801c3b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c186:	2f00      	cmp	r7, #0
 801c188:	f2c0 8110 	blt.w	801c3ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c18c:	45bc      	cmp	ip, r7
 801c18e:	f340 810d 	ble.w	801c3ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c192:	5c12      	ldrb	r2, [r2, r0]
 801c194:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c198:	1c7a      	adds	r2, r7, #1
 801c19a:	f100 810c 	bmi.w	801c3b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c19e:	4594      	cmp	ip, r2
 801c1a0:	f340 8109 	ble.w	801c3b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c1a4:	2c00      	cmp	r4, #0
 801c1a6:	f000 8108 	beq.w	801c3ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c1aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c1ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c1b2:	3501      	adds	r5, #1
 801c1b4:	f100 8105 	bmi.w	801c3c2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c1b8:	45a9      	cmp	r9, r5
 801c1ba:	f340 8102 	ble.w	801c3c2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c1be:	f1be 0f00 	cmp.w	lr, #0
 801c1c2:	f000 8101 	beq.w	801c3c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c1c6:	2f00      	cmp	r7, #0
 801c1c8:	f2c0 80f9 	blt.w	801c3be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c1cc:	45bc      	cmp	ip, r7
 801c1ce:	f340 80f6 	ble.w	801c3be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c1d2:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c1d6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c1da:	3701      	adds	r7, #1
 801c1dc:	f100 80f7 	bmi.w	801c3ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c1e0:	45bc      	cmp	ip, r7
 801c1e2:	f340 80f4 	ble.w	801c3ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c1e6:	2c00      	cmp	r4, #0
 801c1e8:	f000 80f3 	beq.w	801c3d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c1ec:	44c4      	add	ip, r8
 801c1ee:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c1f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c1f6:	fa1f fc84 	uxth.w	ip, r4
 801c1fa:	fa1f f48e 	uxth.w	r4, lr
 801c1fe:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c202:	fb04 fe0c 	mul.w	lr, r4, ip
 801c206:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c20a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c20e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c212:	ebac 070e 	sub.w	r7, ip, lr
 801c216:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801c21a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c21e:	b2a4      	uxth	r4, r4
 801c220:	b2bf      	uxth	r7, r7
 801c222:	1b1b      	subs	r3, r3, r4
 801c224:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c228:	fb07 fc0a 	mul.w	ip, r7, sl
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c232:	9300      	str	r3, [sp, #0]
 801c234:	fb04 cc09 	mla	ip, r4, r9, ip
 801c238:	fb0e cc08 	mla	ip, lr, r8, ip
 801c23c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c240:	9301      	str	r3, [sp, #4]
 801c242:	2b00      	cmp	r3, #0
 801c244:	f000 80af 	beq.w	801c3a6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c248:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801c24c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c250:	fb0b fc0c 	mul.w	ip, fp, ip
 801c254:	fb0b f606 	mul.w	r6, fp, r6
 801c258:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c25c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801c260:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801c264:	44dc      	add	ip, fp
 801c266:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801c26a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c26e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c272:	fb0a fb0b 	mul.w	fp, sl, fp
 801c276:	fb0a fa00 	mul.w	sl, sl, r0
 801c27a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801c27e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801c282:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801c286:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c28a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c28e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c292:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c296:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c29a:	0a36      	lsrs	r6, r6, #8
 801c29c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2a0:	44dc      	add	ip, fp
 801c2a2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801c2a6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801c2aa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c2ae:	fb09 fb0b 	mul.w	fp, r9, fp
 801c2b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2b6:	fb09 f905 	mul.w	r9, r9, r5
 801c2ba:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801c2be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c2c2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801c2c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c2ca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c2ce:	fb0c fc07 	mul.w	ip, ip, r7
 801c2d2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801c2d6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801c2da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801c2de:	4458      	add	r0, fp
 801c2e0:	fb08 f505 	mul.w	r5, r8, r5
 801c2e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c2e8:	fb08 f802 	mul.w	r8, r8, r2
 801c2ec:	0a00      	lsrs	r0, r0, #8
 801c2ee:	0a2a      	lsrs	r2, r5, #8
 801c2f0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801c2f4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c2f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801c2fc:	4415      	add	r5, r2
 801c2fe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801c302:	0a2d      	lsrs	r5, r5, #8
 801c304:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c308:	9a00      	ldr	r2, [sp, #0]
 801c30a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801c30e:	fb03 cc02 	mla	ip, r3, r2, ip
 801c312:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c316:	9b01      	ldr	r3, [sp, #4]
 801c318:	fb05 c50e 	mla	r5, r5, lr, ip
 801c31c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801c320:	fb00 5004 	mla	r0, r0, r4, r5
 801c324:	0a00      	lsrs	r0, r0, #8
 801c326:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801c32a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801c32e:	4378      	muls	r0, r7
 801c330:	fb02 0006 	mla	r0, r2, r6, r0
 801c334:	fb0e 0e08 	mla	lr, lr, r8, r0
 801c338:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801c33c:	fb04 e000 	mla	r0, r4, r0, lr
 801c340:	0a00      	lsrs	r0, r0, #8
 801c342:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c346:	4328      	orrs	r0, r5
 801c348:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801c34c:	b2ad      	uxth	r5, r5
 801c34e:	b2c4      	uxtb	r4, r0
 801c350:	436b      	muls	r3, r5
 801c352:	fb14 f405 	smulbb	r4, r4, r5
 801c356:	1c5a      	adds	r2, r3, #1
 801c358:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c35c:	780b      	ldrb	r3, [r1, #0]
 801c35e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c362:	b2d2      	uxtb	r2, r2
 801c364:	fb03 4302 	mla	r3, r3, r2, r4
 801c368:	b29b      	uxth	r3, r3
 801c36a:	1c5c      	adds	r4, r3, #1
 801c36c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c370:	784c      	ldrb	r4, [r1, #1]
 801c372:	fb14 f402 	smulbb	r4, r4, r2
 801c376:	121b      	asrs	r3, r3, #8
 801c378:	700b      	strb	r3, [r1, #0]
 801c37a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801c37e:	fb03 4305 	mla	r3, r3, r5, r4
 801c382:	b29b      	uxth	r3, r3
 801c384:	1c5c      	adds	r4, r3, #1
 801c386:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c38a:	0c04      	lsrs	r4, r0, #16
 801c38c:	7888      	ldrb	r0, [r1, #2]
 801c38e:	121b      	asrs	r3, r3, #8
 801c390:	fb10 f002 	smulbb	r0, r0, r2
 801c394:	704b      	strb	r3, [r1, #1]
 801c396:	fb04 0005 	mla	r0, r4, r5, r0
 801c39a:	b280      	uxth	r0, r0
 801c39c:	1c43      	adds	r3, r0, #1
 801c39e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c3a2:	1200      	asrs	r0, r0, #8
 801c3a4:	7088      	strb	r0, [r1, #2]
 801c3a6:	b003      	add	sp, #12
 801c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ac:	2600      	movs	r6, #0
 801c3ae:	e6f3      	b.n	801c198 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801c3b0:	2000      	movs	r0, #0
 801c3b2:	4606      	mov	r6, r0
 801c3b4:	e6fd      	b.n	801c1b2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c3b6:	2000      	movs	r0, #0
 801c3b8:	e6fb      	b.n	801c1b2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	e6f9      	b.n	801c1b2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c3be:	2500      	movs	r5, #0
 801c3c0:	e70b      	b.n	801c1da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	4615      	mov	r5, r2
 801c3c6:	e716      	b.n	801c1f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c3c8:	4672      	mov	r2, lr
 801c3ca:	4675      	mov	r5, lr
 801c3cc:	e713      	b.n	801c1f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	e711      	b.n	801c1f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c3d2:	4622      	mov	r2, r4
 801c3d4:	e70f      	b.n	801c1f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801c3d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3da:	b09f      	sub	sp, #124	@ 0x7c
 801c3dc:	921b      	str	r2, [sp, #108]	@ 0x6c
 801c3de:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3e0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c3e2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c3e6:	901d      	str	r0, [sp, #116]	@ 0x74
 801c3e8:	931c      	str	r3, [sp, #112]	@ 0x70
 801c3ea:	6850      	ldr	r0, [r2, #4]
 801c3ec:	9119      	str	r1, [sp, #100]	@ 0x64
 801c3ee:	6812      	ldr	r2, [r2, #0]
 801c3f0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801c3f2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c3f6:	fb00 1303 	mla	r3, r0, r3, r1
 801c3fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3fe:	18d3      	adds	r3, r2, r3
 801c400:	930c      	str	r3, [sp, #48]	@ 0x30
 801c402:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	9312      	str	r3, [sp, #72]	@ 0x48
 801c408:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c40a:	685e      	ldr	r6, [r3, #4]
 801c40c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801c410:	3604      	adds	r6, #4
 801c412:	930d      	str	r3, [sp, #52]	@ 0x34
 801c414:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c416:	2b00      	cmp	r3, #0
 801c418:	dc03      	bgt.n	801c422 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c41a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	f340 8378 	ble.w	801cb12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c422:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c424:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c428:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c42c:	1e48      	subs	r0, r1, #1
 801c42e:	1e57      	subs	r7, r2, #1
 801c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c432:	2b00      	cmp	r3, #0
 801c434:	f340 818c 	ble.w	801c750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801c438:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c43a:	142b      	asrs	r3, r5, #16
 801c43c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c440:	d406      	bmi.n	801c450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c442:	4584      	cmp	ip, r0
 801c444:	da04      	bge.n	801c450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c446:	2b00      	cmp	r3, #0
 801c448:	db02      	blt.n	801c450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c44a:	42bb      	cmp	r3, r7
 801c44c:	f2c0 8181 	blt.w	801c752 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801c450:	f11c 0c01 	adds.w	ip, ip, #1
 801c454:	f100 816f 	bmi.w	801c736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c458:	4561      	cmp	r1, ip
 801c45a:	f2c0 816c 	blt.w	801c736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c45e:	3301      	adds	r3, #1
 801c460:	f100 8169 	bmi.w	801c736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c464:	429a      	cmp	r2, r3
 801c466:	f2c0 8166 	blt.w	801c736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c46c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c46e:	931a      	str	r3, [sp, #104]	@ 0x68
 801c470:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c472:	2b00      	cmp	r3, #0
 801c474:	f340 818c 	ble.w	801c790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801c478:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c47a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c47e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c482:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c486:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c488:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c48c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c48e:	141b      	asrs	r3, r3, #16
 801c490:	f100 81d0 	bmi.w	801c834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c494:	f100 38ff 	add.w	r8, r0, #4294967295
 801c498:	4543      	cmp	r3, r8
 801c49a:	f280 81cb 	bge.w	801c834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c49e:	f1bc 0f00 	cmp.w	ip, #0
 801c4a2:	f2c0 81c7 	blt.w	801c834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c4a6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c4aa:	45c4      	cmp	ip, r8
 801c4ac:	f280 81c2 	bge.w	801c834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c4b0:	b200      	sxth	r0, r0
 801c4b2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c4b4:	fb0c 3300 	mla	r3, ip, r0, r3
 801c4b8:	eb04 0803 	add.w	r8, r4, r3
 801c4bc:	5ce3      	ldrb	r3, [r4, r3]
 801c4be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c4c2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c4c6:	2a00      	cmp	r2, #0
 801c4c8:	f000 81a9 	beq.w	801c81e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c4cc:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c4d0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c4d4:	940e      	str	r4, [sp, #56]	@ 0x38
 801c4d6:	0e24      	lsrs	r4, r4, #24
 801c4d8:	9415      	str	r4, [sp, #84]	@ 0x54
 801c4da:	b179      	cbz	r1, 801c4fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c4dc:	eb08 0c00 	add.w	ip, r8, r0
 801c4e0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c4e4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c4e8:	900a      	str	r0, [sp, #40]	@ 0x28
 801c4ea:	0e00      	lsrs	r0, r0, #24
 801c4ec:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c4ee:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c4f2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c4f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c4f8:	0e00      	lsrs	r0, r0, #24
 801c4fa:	9016      	str	r0, [sp, #88]	@ 0x58
 801c4fc:	b292      	uxth	r2, r2
 801c4fe:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c500:	b289      	uxth	r1, r1
 801c502:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c504:	fb02 f901 	mul.w	r9, r2, r1
 801c508:	0112      	lsls	r2, r2, #4
 801c50a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c50e:	eba2 0809 	sub.w	r8, r2, r9
 801c512:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c516:	b289      	uxth	r1, r1
 801c518:	fa1f f888 	uxth.w	r8, r8
 801c51c:	1a52      	subs	r2, r2, r1
 801c51e:	fb08 f000 	mul.w	r0, r8, r0
 801c522:	b292      	uxth	r2, r2
 801c524:	fb02 000e 	mla	r0, r2, lr, r0
 801c528:	fb01 0004 	mla	r0, r1, r4, r0
 801c52c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c52e:	fb09 0004 	mla	r0, r9, r4, r0
 801c532:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c536:	2800      	cmp	r0, #0
 801c538:	f000 80f2 	beq.w	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c53c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801c540:	d01b      	beq.n	801c57a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c542:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c546:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c54a:	fb0e fa0a 	mul.w	sl, lr, sl
 801c54e:	fb0e fe03 	mul.w	lr, lr, r3
 801c552:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c556:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c55a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801c55e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c562:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c566:	4453      	add	r3, sl
 801c568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c56c:	0a1b      	lsrs	r3, r3, #8
 801c56e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c572:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c576:	ea43 030c 	orr.w	r3, r3, ip
 801c57a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c57c:	2cff      	cmp	r4, #255	@ 0xff
 801c57e:	d021      	beq.n	801c5c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801c580:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c582:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c586:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c588:	fb04 fb0b 	mul.w	fp, r4, fp
 801c58c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c58e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c592:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c594:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c598:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c59c:	fb04 fa0a 	mul.w	sl, r4, sl
 801c5a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c5a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c5a8:	44de      	add	lr, fp
 801c5aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c5ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c5b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c5b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c5ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c5be:	ea4e 040a 	orr.w	r4, lr, sl
 801c5c2:	940e      	str	r4, [sp, #56]	@ 0x38
 801c5c4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c5c6:	2cff      	cmp	r4, #255	@ 0xff
 801c5c8:	d021      	beq.n	801c60e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c5ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c5cc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c5d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c5d2:	fb04 fb0b 	mul.w	fp, r4, fp
 801c5d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c5d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c5dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c5de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c5e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c5e6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c5ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c5ee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c5f2:	44de      	add	lr, fp
 801c5f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c5f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c5fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c600:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c604:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c608:	ea4e 040a 	orr.w	r4, lr, sl
 801c60c:	940a      	str	r4, [sp, #40]	@ 0x28
 801c60e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c610:	2cff      	cmp	r4, #255	@ 0xff
 801c612:	d021      	beq.n	801c658 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c614:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c616:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c61a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c61c:	fb04 fb0b 	mul.w	fp, r4, fp
 801c620:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c622:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c626:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c628:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c62c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c630:	fb04 fa0a 	mul.w	sl, r4, sl
 801c634:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c638:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c63c:	44de      	add	lr, fp
 801c63e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c64a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c64e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c652:	ea4e 040a 	orr.w	r4, lr, sl
 801c656:	940f      	str	r4, [sp, #60]	@ 0x3c
 801c658:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c65a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c65e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c662:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c666:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c668:	fb08 fc0c 	mul.w	ip, r8, ip
 801c66c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c670:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c674:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c676:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c67a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c67e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c680:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c684:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c688:	fb08 f80e 	mul.w	r8, r8, lr
 801c68c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c690:	fb02 8303 	mla	r3, r2, r3, r8
 801c694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c696:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c69a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c69e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c6a0:	fb01 330a 	mla	r3, r1, sl, r3
 801c6a4:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801c6a8:	fb09 3901 	mla	r9, r9, r1, r3
 801c6ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c6ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c6b0:	4343      	muls	r3, r0
 801c6b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c6b6:	1c58      	adds	r0, r3, #1
 801c6b8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c6bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c6c0:	ea4c 0c09 	orr.w	ip, ip, r9
 801c6c4:	783b      	ldrb	r3, [r7, #0]
 801c6c6:	fa5f f28c 	uxtb.w	r2, ip
 801c6ca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c6ce:	fb12 f201 	smulbb	r2, r2, r1
 801c6d2:	b2c0      	uxtb	r0, r0
 801c6d4:	fb03 2300 	mla	r3, r3, r0, r2
 801c6d8:	b29b      	uxth	r3, r3
 801c6da:	1c5a      	adds	r2, r3, #1
 801c6dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c6e0:	787a      	ldrb	r2, [r7, #1]
 801c6e2:	fb12 f200 	smulbb	r2, r2, r0
 801c6e6:	121b      	asrs	r3, r3, #8
 801c6e8:	703b      	strb	r3, [r7, #0]
 801c6ea:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c6ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c6f2:	fb03 2301 	mla	r3, r3, r1, r2
 801c6f6:	b29b      	uxth	r3, r3
 801c6f8:	1c5a      	adds	r2, r3, #1
 801c6fa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c6fe:	121b      	asrs	r3, r3, #8
 801c700:	707b      	strb	r3, [r7, #1]
 801c702:	78bb      	ldrb	r3, [r7, #2]
 801c704:	fb13 f000 	smulbb	r0, r3, r0
 801c708:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c70c:	fa1f fc8c 	uxth.w	ip, ip
 801c710:	f10c 0301 	add.w	r3, ip, #1
 801c714:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c718:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c71c:	f887 c002 	strb.w	ip, [r7, #2]
 801c720:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c722:	3703      	adds	r7, #3
 801c724:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801c726:	441a      	add	r2, r3
 801c728:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c72a:	441d      	add	r5, r3
 801c72c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c72e:	9229      	str	r2, [sp, #164]	@ 0xa4
 801c730:	3b01      	subs	r3, #1
 801c732:	931a      	str	r3, [sp, #104]	@ 0x68
 801c734:	e69c      	b.n	801c470 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c736:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c738:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c73a:	441c      	add	r4, r3
 801c73c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c73e:	441d      	add	r5, r3
 801c740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c742:	9429      	str	r4, [sp, #164]	@ 0xa4
 801c744:	3b01      	subs	r3, #1
 801c746:	9309      	str	r3, [sp, #36]	@ 0x24
 801c748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c74a:	3303      	adds	r3, #3
 801c74c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c74e:	e66f      	b.n	801c430 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c750:	d026      	beq.n	801c7a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c754:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c756:	3b01      	subs	r3, #1
 801c758:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c75a:	fb00 4003 	mla	r0, r0, r3, r4
 801c75e:	1400      	asrs	r0, r0, #16
 801c760:	f53f ae83 	bmi.w	801c46a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c764:	3901      	subs	r1, #1
 801c766:	4288      	cmp	r0, r1
 801c768:	f6bf ae7f 	bge.w	801c46a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c76c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c76e:	fb01 5303 	mla	r3, r1, r3, r5
 801c772:	141b      	asrs	r3, r3, #16
 801c774:	f53f ae79 	bmi.w	801c46a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c778:	3a01      	subs	r2, #1
 801c77a:	4293      	cmp	r3, r2
 801c77c:	f6bf ae75 	bge.w	801c46a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c782:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801c786:	f103 0e03 	add.w	lr, r3, #3
 801c78a:	f1bb 0f00 	cmp.w	fp, #0
 801c78e:	dc71      	bgt.n	801c874 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c792:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c798:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c79c:	4423      	add	r3, r4
 801c79e:	930c      	str	r3, [sp, #48]	@ 0x30
 801c7a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	f340 81b5 	ble.w	801cb12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c7a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c7ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c7ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7b6:	eef0 6a62 	vmov.f32	s13, s5
 801c7ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c7be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7c6:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801c7ca:	eef0 6a43 	vmov.f32	s13, s6
 801c7ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7d2:	ee16 5a90 	vmov	r5, s13
 801c7d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c7ee:	ee12 2a90 	vmov	r2, s5
 801c7f2:	eef0 2a47 	vmov.f32	s5, s14
 801c7f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7fa:	ee13 2a10 	vmov	r2, s6
 801c7fe:	932b      	str	r3, [sp, #172]	@ 0xac
 801c800:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c802:	eeb0 3a67 	vmov.f32	s6, s15
 801c806:	fb92 f3f3 	sdiv	r3, r2, r3
 801c80a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c80c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c80e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c810:	3b01      	subs	r3, #1
 801c812:	9319      	str	r3, [sp, #100]	@ 0x64
 801c814:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c816:	bf08      	it	eq
 801c818:	4613      	moveq	r3, r2
 801c81a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c81c:	e5fa      	b.n	801c414 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c81e:	2900      	cmp	r1, #0
 801c820:	f43f ae6c 	beq.w	801c4fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c824:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c828:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c82c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c82e:	0e00      	lsrs	r0, r0, #24
 801c830:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c832:	e663      	b.n	801c4fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c834:	f113 0801 	adds.w	r8, r3, #1
 801c838:	f53f af72 	bmi.w	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c83c:	4540      	cmp	r0, r8
 801c83e:	f6ff af6f 	blt.w	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c842:	f11c 0801 	adds.w	r8, ip, #1
 801c846:	f53f af6b 	bmi.w	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c84a:	45c6      	cmp	lr, r8
 801c84c:	f6ff af68 	blt.w	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c850:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801c852:	b200      	sxth	r0, r0
 801c854:	9302      	str	r3, [sp, #8]
 801c856:	fa0f f38e 	sxth.w	r3, lr
 801c85a:	9000      	str	r0, [sp, #0]
 801c85c:	9301      	str	r3, [sp, #4]
 801c85e:	4633      	mov	r3, r6
 801c860:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c862:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c866:	e9cd c203 	strd	ip, r2, [sp, #12]
 801c86a:	4639      	mov	r1, r7
 801c86c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c86e:	f7ff fc74 	bl	801c15a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801c872:	e755      	b.n	801c720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c874:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c876:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c87a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c87c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c880:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c882:	1427      	asrs	r7, r4, #16
 801c884:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c886:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c88a:	142b      	asrs	r3, r5, #16
 801c88c:	fb01 7303 	mla	r3, r1, r3, r7
 801c890:	18e7      	adds	r7, r4, r3
 801c892:	5ce3      	ldrb	r3, [r4, r3]
 801c894:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c898:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c89c:	2a00      	cmp	r2, #0
 801c89e:	f000 812e 	beq.w	801cafe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801c8a2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c8a6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801c8aa:	9410      	str	r4, [sp, #64]	@ 0x40
 801c8ac:	0e24      	lsrs	r4, r4, #24
 801c8ae:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c8b0:	b170      	cbz	r0, 801c8d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801c8b2:	eb07 0801 	add.w	r8, r7, r1
 801c8b6:	5c79      	ldrb	r1, [r7, r1]
 801c8b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c8bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c8be:	0e09      	lsrs	r1, r1, #24
 801c8c0:	9114      	str	r1, [sp, #80]	@ 0x50
 801c8c2:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c8c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c8ca:	9111      	str	r1, [sp, #68]	@ 0x44
 801c8cc:	0e09      	lsrs	r1, r1, #24
 801c8ce:	9118      	str	r1, [sp, #96]	@ 0x60
 801c8d0:	b292      	uxth	r2, r2
 801c8d2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c8d4:	b280      	uxth	r0, r0
 801c8d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c8d8:	fb02 f900 	mul.w	r9, r2, r0
 801c8dc:	0112      	lsls	r2, r2, #4
 801c8de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c8e2:	eba2 0809 	sub.w	r8, r2, r9
 801c8e6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c8ea:	b280      	uxth	r0, r0
 801c8ec:	fa1f f888 	uxth.w	r8, r8
 801c8f0:	1a12      	subs	r2, r2, r0
 801c8f2:	fb08 f101 	mul.w	r1, r8, r1
 801c8f6:	b292      	uxth	r2, r2
 801c8f8:	fb02 110c 	mla	r1, r2, ip, r1
 801c8fc:	fb00 1104 	mla	r1, r0, r4, r1
 801c900:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c902:	fb09 1104 	mla	r1, r9, r4, r1
 801c906:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c90a:	2900      	cmp	r1, #0
 801c90c:	f000 80ec 	beq.w	801cae8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801c910:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c914:	d019      	beq.n	801c94a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801c916:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c91a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c91e:	fb0c fa0a 	mul.w	sl, ip, sl
 801c922:	fb0c fc03 	mul.w	ip, ip, r3
 801c926:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c92a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c92e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c932:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c936:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c93a:	4453      	add	r3, sl
 801c93c:	0a3f      	lsrs	r7, r7, #8
 801c93e:	0a1b      	lsrs	r3, r3, #8
 801c940:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c944:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c948:	433b      	orrs	r3, r7
 801c94a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c94c:	2cff      	cmp	r4, #255	@ 0xff
 801c94e:	d020      	beq.n	801c992 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801c950:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c952:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c956:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c958:	4367      	muls	r7, r4
 801c95a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c95c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c960:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c964:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c966:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c96a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c96e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c972:	44bc      	add	ip, r7
 801c974:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c978:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c97c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c980:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c984:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c988:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c98c:	ea4c 040a 	orr.w	r4, ip, sl
 801c990:	9410      	str	r4, [sp, #64]	@ 0x40
 801c992:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c994:	2cff      	cmp	r4, #255	@ 0xff
 801c996:	d020      	beq.n	801c9da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801c998:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c99a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c99e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c9a0:	4367      	muls	r7, r4
 801c9a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c9a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c9a8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c9ac:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c9ae:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c9b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c9b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c9ba:	44bc      	add	ip, r7
 801c9bc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c9c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c9c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c9c8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c9cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c9d0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c9d4:	ea4c 040a 	orr.w	r4, ip, sl
 801c9d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c9da:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c9dc:	2cff      	cmp	r4, #255	@ 0xff
 801c9de:	d020      	beq.n	801ca22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801c9e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c9e2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c9e6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c9e8:	4367      	muls	r7, r4
 801c9ea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c9ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c9f0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c9f4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c9f6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c9fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c9fe:	fb04 fa0a 	mul.w	sl, r4, sl
 801ca02:	44bc      	add	ip, r7
 801ca04:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ca08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ca0c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ca10:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ca14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ca18:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ca1c:	ea4c 040a 	orr.w	r4, ip, sl
 801ca20:	9411      	str	r4, [sp, #68]	@ 0x44
 801ca22:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ca24:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ca28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ca2c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ca30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ca32:	fb08 f707 	mul.w	r7, r8, r7
 801ca36:	fb02 770c 	mla	r7, r2, ip, r7
 801ca3a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ca3e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ca40:	fb00 770c 	mla	r7, r0, ip, r7
 801ca44:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ca48:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ca4a:	fb09 770c 	mla	r7, r9, ip, r7
 801ca4e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ca52:	fb08 f80c 	mul.w	r8, r8, ip
 801ca56:	0a3f      	lsrs	r7, r7, #8
 801ca58:	fb02 8303 	mla	r3, r2, r3, r8
 801ca5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ca5e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ca62:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ca66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ca68:	fb00 330a 	mla	r3, r0, sl, r3
 801ca6c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ca70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ca72:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ca76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ca7c:	434b      	muls	r3, r1
 801ca7e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ca82:	1c59      	adds	r1, r3, #1
 801ca84:	ea47 070c 	orr.w	r7, r7, ip
 801ca88:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ca8c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ca90:	b2fa      	uxtb	r2, r7
 801ca92:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ca96:	fb12 f200 	smulbb	r2, r2, r0
 801ca9a:	b2c9      	uxtb	r1, r1
 801ca9c:	fb03 2301 	mla	r3, r3, r1, r2
 801caa0:	b29b      	uxth	r3, r3
 801caa2:	1c5a      	adds	r2, r3, #1
 801caa4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801caa8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801caac:	fb12 f201 	smulbb	r2, r2, r1
 801cab0:	121b      	asrs	r3, r3, #8
 801cab2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801cab6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801caba:	0c3f      	lsrs	r7, r7, #16
 801cabc:	fb03 2300 	mla	r3, r3, r0, r2
 801cac0:	b29b      	uxth	r3, r3
 801cac2:	1c5a      	adds	r2, r3, #1
 801cac4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cac8:	121b      	asrs	r3, r3, #8
 801caca:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801cace:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801cad2:	fb13 f101 	smulbb	r1, r3, r1
 801cad6:	fb07 1700 	mla	r7, r7, r0, r1
 801cada:	b2bf      	uxth	r7, r7
 801cadc:	1c7b      	adds	r3, r7, #1
 801cade:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cae2:	123f      	asrs	r7, r7, #8
 801cae4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801cae8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801caea:	f10e 0e03 	add.w	lr, lr, #3
 801caee:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801caf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801caf4:	441a      	add	r2, r3
 801caf6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801caf8:	9229      	str	r2, [sp, #164]	@ 0xa4
 801cafa:	441d      	add	r5, r3
 801cafc:	e645      	b.n	801c78a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801cafe:	2800      	cmp	r0, #0
 801cb00:	f43f aee6 	beq.w	801c8d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cb04:	5c79      	ldrb	r1, [r7, r1]
 801cb06:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cb0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cb0c:	0e09      	lsrs	r1, r1, #24
 801cb0e:	9114      	str	r1, [sp, #80]	@ 0x50
 801cb10:	e6de      	b.n	801c8d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cb12:	b01f      	add	sp, #124	@ 0x7c
 801cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801cb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb1c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801cb20:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801cb24:	2d00      	cmp	r5, #0
 801cb26:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801cb2a:	fb05 700e 	mla	r0, r5, lr, r7
 801cb2e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801cb32:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801cb36:	eb02 0800 	add.w	r8, r2, r0
 801cb3a:	f2c0 8105 	blt.w	801cd48 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801cb3e:	45a9      	cmp	r9, r5
 801cb40:	f340 8102 	ble.w	801cd48 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801cb44:	2f00      	cmp	r7, #0
 801cb46:	f2c0 80fd 	blt.w	801cd44 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cb4a:	45be      	cmp	lr, r7
 801cb4c:	f340 80fa 	ble.w	801cd44 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801cb50:	5c12      	ldrb	r2, [r2, r0]
 801cb52:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cb56:	1c7a      	adds	r2, r7, #1
 801cb58:	f100 80f9 	bmi.w	801cd4e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801cb5c:	4596      	cmp	lr, r2
 801cb5e:	f340 80f6 	ble.w	801cd4e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801cb62:	2c00      	cmp	r4, #0
 801cb64:	f000 80f5 	beq.w	801cd52 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801cb68:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cb6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cb70:	3501      	adds	r5, #1
 801cb72:	f100 80f2 	bmi.w	801cd5a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cb76:	45a9      	cmp	r9, r5
 801cb78:	f340 80ef 	ble.w	801cd5a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cb7c:	f1bc 0f00 	cmp.w	ip, #0
 801cb80:	f000 80ee 	beq.w	801cd60 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801cb84:	2f00      	cmp	r7, #0
 801cb86:	f2c0 80e6 	blt.w	801cd56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cb8a:	45be      	cmp	lr, r7
 801cb8c:	f340 80e3 	ble.w	801cd56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cb90:	f818 200e 	ldrb.w	r2, [r8, lr]
 801cb94:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cb98:	3701      	adds	r7, #1
 801cb9a:	f100 80e4 	bmi.w	801cd66 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cb9e:	45be      	cmp	lr, r7
 801cba0:	f340 80e1 	ble.w	801cd66 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cba4:	2c00      	cmp	r4, #0
 801cba6:	f000 80e0 	beq.w	801cd6a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801cbaa:	44c6      	add	lr, r8
 801cbac:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cbb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cbb4:	b2a3      	uxth	r3, r4
 801cbb6:	fa1f fc8c 	uxth.w	ip, ip
 801cbba:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cbbe:	fb0c fe03 	mul.w	lr, ip, r3
 801cbc2:	011b      	lsls	r3, r3, #4
 801cbc4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cbc8:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801cbcc:	eba3 070e 	sub.w	r7, r3, lr
 801cbd0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801cbd4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cbd8:	fa1f f48c 	uxth.w	r4, ip
 801cbdc:	b2bf      	uxth	r7, r7
 801cbde:	1b1b      	subs	r3, r3, r4
 801cbe0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cbe4:	fb07 fc0a 	mul.w	ip, r7, sl
 801cbe8:	b29b      	uxth	r3, r3
 801cbea:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cbee:	9300      	str	r3, [sp, #0]
 801cbf0:	fb04 cc09 	mla	ip, r4, r9, ip
 801cbf4:	fb0e cc08 	mla	ip, lr, r8, ip
 801cbf8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cbfc:	9301      	str	r3, [sp, #4]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	f000 809d 	beq.w	801cd3e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801cc04:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801cc08:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cc0c:	fb0b fc0c 	mul.w	ip, fp, ip
 801cc10:	fb0b f606 	mul.w	r6, fp, r6
 801cc14:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cc18:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cc1c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801cc20:	44dc      	add	ip, fp
 801cc22:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801cc26:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cc2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc2e:	fb0a fb0b 	mul.w	fp, sl, fp
 801cc32:	fb0a fa00 	mul.w	sl, sl, r0
 801cc36:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801cc3a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801cc3e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801cc42:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cc46:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cc4a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cc4e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cc52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cc56:	0a36      	lsrs	r6, r6, #8
 801cc58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc5c:	44dc      	add	ip, fp
 801cc5e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801cc62:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cc66:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cc6a:	fb09 fb0b 	mul.w	fp, r9, fp
 801cc6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc72:	fb09 f905 	mul.w	r9, r9, r5
 801cc76:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cc7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cc7e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801cc82:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cc86:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cc8a:	fb0c fc07 	mul.w	ip, ip, r7
 801cc8e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801cc92:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801cc96:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cc9a:	4458      	add	r0, fp
 801cc9c:	fb08 f505 	mul.w	r5, r8, r5
 801cca0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cca4:	fb08 f802 	mul.w	r8, r8, r2
 801cca8:	0a00      	lsrs	r0, r0, #8
 801ccaa:	0a2a      	lsrs	r2, r5, #8
 801ccac:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801ccb0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ccb4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ccb8:	4415      	add	r5, r2
 801ccba:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801ccbe:	0a2d      	lsrs	r5, r5, #8
 801ccc0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ccc4:	9a00      	ldr	r2, [sp, #0]
 801ccc6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ccca:	fb03 cc02 	mla	ip, r3, r2, ip
 801ccce:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ccd2:	9b01      	ldr	r3, [sp, #4]
 801ccd4:	fb05 c50e 	mla	r5, r5, lr, ip
 801ccd8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ccdc:	43db      	mvns	r3, r3
 801ccde:	fb00 5004 	mla	r0, r0, r4, r5
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	0a00      	lsrs	r0, r0, #8
 801cce6:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ccea:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ccee:	4378      	muls	r0, r7
 801ccf0:	fb02 0006 	mla	r0, r2, r6, r0
 801ccf4:	780a      	ldrb	r2, [r1, #0]
 801ccf6:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ccfa:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ccfe:	fb04 e000 	mla	r0, r4, r0, lr
 801cd02:	fb02 f403 	mul.w	r4, r2, r3
 801cd06:	0a00      	lsrs	r0, r0, #8
 801cd08:	1c62      	adds	r2, r4, #1
 801cd0a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cd0e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cd12:	4328      	orrs	r0, r5
 801cd14:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cd18:	700a      	strb	r2, [r1, #0]
 801cd1a:	784a      	ldrb	r2, [r1, #1]
 801cd1c:	435a      	muls	r2, r3
 801cd1e:	1c54      	adds	r4, r2, #1
 801cd20:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801cd24:	0a02      	lsrs	r2, r0, #8
 801cd26:	0c00      	lsrs	r0, r0, #16
 801cd28:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cd2c:	704a      	strb	r2, [r1, #1]
 801cd2e:	788a      	ldrb	r2, [r1, #2]
 801cd30:	4353      	muls	r3, r2
 801cd32:	1c5a      	adds	r2, r3, #1
 801cd34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cd38:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cd3c:	7088      	strb	r0, [r1, #2]
 801cd3e:	b003      	add	sp, #12
 801cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd44:	2600      	movs	r6, #0
 801cd46:	e706      	b.n	801cb56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801cd48:	2000      	movs	r0, #0
 801cd4a:	4606      	mov	r6, r0
 801cd4c:	e710      	b.n	801cb70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cd4e:	2000      	movs	r0, #0
 801cd50:	e70e      	b.n	801cb70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cd52:	4620      	mov	r0, r4
 801cd54:	e70c      	b.n	801cb70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cd56:	2500      	movs	r5, #0
 801cd58:	e71e      	b.n	801cb98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	4615      	mov	r5, r2
 801cd5e:	e729      	b.n	801cbb4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cd60:	4662      	mov	r2, ip
 801cd62:	4665      	mov	r5, ip
 801cd64:	e726      	b.n	801cbb4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cd66:	2200      	movs	r2, #0
 801cd68:	e724      	b.n	801cbb4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cd6a:	4622      	mov	r2, r4
 801cd6c:	e722      	b.n	801cbb4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801cd6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd72:	b09b      	sub	sp, #108	@ 0x6c
 801cd74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cd78:	9218      	str	r2, [sp, #96]	@ 0x60
 801cd7a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cd7c:	9019      	str	r0, [sp, #100]	@ 0x64
 801cd7e:	9116      	str	r1, [sp, #88]	@ 0x58
 801cd80:	6850      	ldr	r0, [r2, #4]
 801cd82:	9307      	str	r3, [sp, #28]
 801cd84:	6812      	ldr	r2, [r2, #0]
 801cd86:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801cd88:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801cd8c:	fb00 1303 	mla	r3, r0, r3, r1
 801cd90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd94:	18d3      	adds	r3, r2, r3
 801cd96:	930a      	str	r3, [sp, #40]	@ 0x28
 801cd98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cd9e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cda0:	685e      	ldr	r6, [r3, #4]
 801cda2:	3604      	adds	r6, #4
 801cda4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	dc03      	bgt.n	801cdb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cdaa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	f340 834f 	ble.w	801d450 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801cdb2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cdb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cdb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cdbc:	1e48      	subs	r0, r1, #1
 801cdbe:	1e57      	subs	r7, r2, #1
 801cdc0:	9b07      	ldr	r3, [sp, #28]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	f340 8178 	ble.w	801d0b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cdc8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801cdca:	142b      	asrs	r3, r5, #16
 801cdcc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cdd0:	d406      	bmi.n	801cde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cdd2:	4584      	cmp	ip, r0
 801cdd4:	da04      	bge.n	801cde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	db02      	blt.n	801cde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cdda:	42bb      	cmp	r3, r7
 801cddc:	f2c0 816d 	blt.w	801d0ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cde0:	f11c 0c01 	adds.w	ip, ip, #1
 801cde4:	f100 815b 	bmi.w	801d09e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cde8:	4561      	cmp	r1, ip
 801cdea:	f2c0 8158 	blt.w	801d09e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cdee:	3301      	adds	r3, #1
 801cdf0:	f100 8155 	bmi.w	801d09e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cdf4:	429a      	cmp	r2, r3
 801cdf6:	f2c0 8152 	blt.w	801d09e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cdfa:	9b07      	ldr	r3, [sp, #28]
 801cdfc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cdfe:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ce00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	f340 8178 	ble.w	801d0f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ce08:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ce0a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ce0e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ce12:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ce16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ce18:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801ce1c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ce1e:	141b      	asrs	r3, r3, #16
 801ce20:	f100 81ba 	bmi.w	801d198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ce24:	f101 38ff 	add.w	r8, r1, #4294967295
 801ce28:	4543      	cmp	r3, r8
 801ce2a:	f280 81b5 	bge.w	801d198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ce2e:	f1bc 0f00 	cmp.w	ip, #0
 801ce32:	f2c0 81b1 	blt.w	801d198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ce36:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ce3a:	45c4      	cmp	ip, r8
 801ce3c:	f280 81ac 	bge.w	801d198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ce40:	b209      	sxth	r1, r1
 801ce42:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ce44:	fb0c 3301 	mla	r3, ip, r1, r3
 801ce48:	eb04 0803 	add.w	r8, r4, r3
 801ce4c:	5ce3      	ldrb	r3, [r4, r3]
 801ce4e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ce52:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ce56:	2a00      	cmp	r2, #0
 801ce58:	f000 8193 	beq.w	801d182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801ce5c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ce60:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ce64:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ce66:	0e24      	lsrs	r4, r4, #24
 801ce68:	9412      	str	r4, [sp, #72]	@ 0x48
 801ce6a:	b178      	cbz	r0, 801ce8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ce6c:	eb08 0c01 	add.w	ip, r8, r1
 801ce70:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ce74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ce78:	9108      	str	r1, [sp, #32]
 801ce7a:	0e09      	lsrs	r1, r1, #24
 801ce7c:	9110      	str	r1, [sp, #64]	@ 0x40
 801ce7e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ce82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ce86:	910c      	str	r1, [sp, #48]	@ 0x30
 801ce88:	0e09      	lsrs	r1, r1, #24
 801ce8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ce8c:	b292      	uxth	r2, r2
 801ce8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ce90:	b280      	uxth	r0, r0
 801ce92:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ce94:	fb02 f900 	mul.w	r9, r2, r0
 801ce98:	0112      	lsls	r2, r2, #4
 801ce9a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ce9e:	eba2 0809 	sub.w	r8, r2, r9
 801cea2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801cea6:	b280      	uxth	r0, r0
 801cea8:	fa1f f888 	uxth.w	r8, r8
 801ceac:	1a12      	subs	r2, r2, r0
 801ceae:	fb08 f101 	mul.w	r1, r8, r1
 801ceb2:	b292      	uxth	r2, r2
 801ceb4:	fb02 110e 	mla	r1, r2, lr, r1
 801ceb8:	fb00 1104 	mla	r1, r0, r4, r1
 801cebc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cebe:	fb09 1104 	mla	r1, r9, r4, r1
 801cec2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cec6:	2900      	cmp	r1, #0
 801cec8:	f000 80de 	beq.w	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cecc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ced0:	d01b      	beq.n	801cf0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801ced2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ced6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ceda:	fb0e fa0a 	mul.w	sl, lr, sl
 801cede:	fb0e fe03 	mul.w	lr, lr, r3
 801cee2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cee6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ceea:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ceee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801cef2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cef6:	4453      	add	r3, sl
 801cef8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cefc:	0a1b      	lsrs	r3, r3, #8
 801cefe:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801cf02:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801cf06:	ea43 030c 	orr.w	r3, r3, ip
 801cf0a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801cf0c:	2cff      	cmp	r4, #255	@ 0xff
 801cf0e:	d021      	beq.n	801cf54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cf10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cf12:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cf16:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801cf18:	fb04 fb0b 	mul.w	fp, r4, fp
 801cf1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cf1e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cf22:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801cf24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cf28:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cf2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf30:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf34:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cf38:	44de      	add	lr, fp
 801cf3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cf3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cf42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf4a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cf4e:	ea4e 040a 	orr.w	r4, lr, sl
 801cf52:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cf54:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cf56:	2cff      	cmp	r4, #255	@ 0xff
 801cf58:	d021      	beq.n	801cf9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801cf5a:	9c08      	ldr	r4, [sp, #32]
 801cf5c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cf60:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cf62:	fb04 fb0b 	mul.w	fp, r4, fp
 801cf66:	9c08      	ldr	r4, [sp, #32]
 801cf68:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cf6c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cf6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cf72:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cf76:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf7a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf7e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cf82:	44de      	add	lr, fp
 801cf84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cf88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cf8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf94:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cf98:	ea4e 040a 	orr.w	r4, lr, sl
 801cf9c:	9408      	str	r4, [sp, #32]
 801cf9e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cfa0:	2cff      	cmp	r4, #255	@ 0xff
 801cfa2:	d021      	beq.n	801cfe8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cfa4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cfa6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cfaa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cfac:	fb04 fb0b 	mul.w	fp, r4, fp
 801cfb0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cfb2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cfb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cfb8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cfbc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cfc0:	fb04 fa0a 	mul.w	sl, r4, sl
 801cfc4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cfc8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cfcc:	44de      	add	lr, fp
 801cfce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cfd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cfd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cfda:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cfde:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cfe2:	ea4e 040a 	orr.w	r4, lr, sl
 801cfe6:	940c      	str	r4, [sp, #48]	@ 0x30
 801cfe8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cfea:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801cfee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801cff2:	43c9      	mvns	r1, r1
 801cff4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cff8:	9c08      	ldr	r4, [sp, #32]
 801cffa:	b2c9      	uxtb	r1, r1
 801cffc:	fb08 fc0c 	mul.w	ip, r8, ip
 801d000:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d004:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d008:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d00a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d00e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d012:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d014:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d018:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d01c:	fb08 f80e 	mul.w	r8, r8, lr
 801d020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d024:	fb02 8303 	mla	r3, r2, r3, r8
 801d028:	9a08      	ldr	r2, [sp, #32]
 801d02a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d02e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d032:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d034:	fb00 330a 	mla	r3, r0, sl, r3
 801d038:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801d03c:	fb09 3900 	mla	r9, r9, r0, r3
 801d040:	783b      	ldrb	r3, [r7, #0]
 801d042:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d046:	fb03 f201 	mul.w	r2, r3, r1
 801d04a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d04e:	1c53      	adds	r3, r2, #1
 801d050:	ea4c 0c09 	orr.w	ip, ip, r9
 801d054:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d058:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d05c:	703b      	strb	r3, [r7, #0]
 801d05e:	787b      	ldrb	r3, [r7, #1]
 801d060:	434b      	muls	r3, r1
 801d062:	1c5a      	adds	r2, r3, #1
 801d064:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d068:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d06c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d070:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d074:	707b      	strb	r3, [r7, #1]
 801d076:	78bb      	ldrb	r3, [r7, #2]
 801d078:	4359      	muls	r1, r3
 801d07a:	1c4b      	adds	r3, r1, #1
 801d07c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d080:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d084:	f887 c002 	strb.w	ip, [r7, #2]
 801d088:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d08a:	3703      	adds	r7, #3
 801d08c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d08e:	441a      	add	r2, r3
 801d090:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d092:	441d      	add	r5, r3
 801d094:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d096:	9225      	str	r2, [sp, #148]	@ 0x94
 801d098:	3b01      	subs	r3, #1
 801d09a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d09c:	e6b0      	b.n	801ce00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d09e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d0a0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d0a2:	441c      	add	r4, r3
 801d0a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d0a6:	441d      	add	r5, r3
 801d0a8:	9b07      	ldr	r3, [sp, #28]
 801d0aa:	9425      	str	r4, [sp, #148]	@ 0x94
 801d0ac:	3b01      	subs	r3, #1
 801d0ae:	9307      	str	r3, [sp, #28]
 801d0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0b2:	3303      	adds	r3, #3
 801d0b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0b6:	e683      	b.n	801cdc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d0b8:	d026      	beq.n	801d108 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d0ba:	9b07      	ldr	r3, [sp, #28]
 801d0bc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801d0be:	3b01      	subs	r3, #1
 801d0c0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d0c2:	fb00 4003 	mla	r0, r0, r3, r4
 801d0c6:	1400      	asrs	r0, r0, #16
 801d0c8:	f53f ae97 	bmi.w	801cdfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d0cc:	3901      	subs	r1, #1
 801d0ce:	4288      	cmp	r0, r1
 801d0d0:	f6bf ae93 	bge.w	801cdfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d0d4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801d0d6:	fb01 5303 	mla	r3, r1, r3, r5
 801d0da:	141b      	asrs	r3, r3, #16
 801d0dc:	f53f ae8d 	bmi.w	801cdfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d0e0:	3a01      	subs	r2, #1
 801d0e2:	4293      	cmp	r3, r2
 801d0e4:	f6bf ae89 	bge.w	801cdfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0ea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d0ee:	f103 0e03 	add.w	lr, r3, #3
 801d0f2:	f1bb 0f00 	cmp.w	fp, #0
 801d0f6:	dc6d      	bgt.n	801d1d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d0f8:	9b07      	ldr	r3, [sp, #28]
 801d0fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d0fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d100:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d104:	4423      	add	r3, r4
 801d106:	930a      	str	r3, [sp, #40]	@ 0x28
 801d108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	f340 81a0 	ble.w	801d450 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d110:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d114:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d116:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d11a:	eeb0 6a62 	vmov.f32	s12, s5
 801d11e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d122:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d126:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d12a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801d12e:	eeb0 6a43 	vmov.f32	s12, s6
 801d132:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d136:	ee16 5a10 	vmov	r5, s12
 801d13a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d13e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d142:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d146:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d14a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d14e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d152:	ee12 2a90 	vmov	r2, s5
 801d156:	eef0 2a47 	vmov.f32	s5, s14
 801d15a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d15e:	ee13 2a10 	vmov	r2, s6
 801d162:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d164:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d166:	eeb0 3a67 	vmov.f32	s6, s15
 801d16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d16e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d170:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d172:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d174:	3b01      	subs	r3, #1
 801d176:	9316      	str	r3, [sp, #88]	@ 0x58
 801d178:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d17a:	bf08      	it	eq
 801d17c:	4613      	moveq	r3, r2
 801d17e:	9307      	str	r3, [sp, #28]
 801d180:	e610      	b.n	801cda4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d182:	2800      	cmp	r0, #0
 801d184:	f43f ae82 	beq.w	801ce8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d188:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d18c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d190:	9108      	str	r1, [sp, #32]
 801d192:	0e09      	lsrs	r1, r1, #24
 801d194:	9110      	str	r1, [sp, #64]	@ 0x40
 801d196:	e679      	b.n	801ce8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d198:	f113 0801 	adds.w	r8, r3, #1
 801d19c:	f53f af74 	bmi.w	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d1a0:	4541      	cmp	r1, r8
 801d1a2:	f6ff af71 	blt.w	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d1a6:	f11c 0801 	adds.w	r8, ip, #1
 801d1aa:	f53f af6d 	bmi.w	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d1ae:	45c6      	cmp	lr, r8
 801d1b0:	f6ff af6a 	blt.w	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d1b4:	b209      	sxth	r1, r1
 801d1b6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d1ba:	fa0f f38e 	sxth.w	r3, lr
 801d1be:	9100      	str	r1, [sp, #0]
 801d1c0:	4639      	mov	r1, r7
 801d1c2:	9301      	str	r3, [sp, #4]
 801d1c4:	4633      	mov	r3, r6
 801d1c6:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d1ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d1cc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d1ce:	f7ff fca3 	bl	801cb18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d1d2:	e759      	b.n	801d088 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d1d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d1d6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d1da:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d1dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d1e0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d1e2:	1427      	asrs	r7, r4, #16
 801d1e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d1e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d1ea:	142b      	asrs	r3, r5, #16
 801d1ec:	fb01 7303 	mla	r3, r1, r3, r7
 801d1f0:	18e7      	adds	r7, r4, r3
 801d1f2:	5ce3      	ldrb	r3, [r4, r3]
 801d1f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d1f8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d1fc:	2a00      	cmp	r2, #0
 801d1fe:	f000 811d 	beq.w	801d43c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d202:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d206:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d20a:	940d      	str	r4, [sp, #52]	@ 0x34
 801d20c:	0e24      	lsrs	r4, r4, #24
 801d20e:	9414      	str	r4, [sp, #80]	@ 0x50
 801d210:	b170      	cbz	r0, 801d230 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d212:	eb07 0801 	add.w	r8, r7, r1
 801d216:	5c79      	ldrb	r1, [r7, r1]
 801d218:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d21c:	9109      	str	r1, [sp, #36]	@ 0x24
 801d21e:	0e09      	lsrs	r1, r1, #24
 801d220:	9111      	str	r1, [sp, #68]	@ 0x44
 801d222:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d226:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d22a:	910e      	str	r1, [sp, #56]	@ 0x38
 801d22c:	0e09      	lsrs	r1, r1, #24
 801d22e:	9115      	str	r1, [sp, #84]	@ 0x54
 801d230:	b292      	uxth	r2, r2
 801d232:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d234:	b280      	uxth	r0, r0
 801d236:	fb02 f900 	mul.w	r9, r2, r0
 801d23a:	0112      	lsls	r2, r2, #4
 801d23c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d240:	eba2 0809 	sub.w	r8, r2, r9
 801d244:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801d248:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d24a:	b280      	uxth	r0, r0
 801d24c:	fa1f f888 	uxth.w	r8, r8
 801d250:	1a09      	subs	r1, r1, r0
 801d252:	fb08 f202 	mul.w	r2, r8, r2
 801d256:	b289      	uxth	r1, r1
 801d258:	fb01 220c 	mla	r2, r1, ip, r2
 801d25c:	fb00 2204 	mla	r2, r0, r4, r2
 801d260:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d262:	fb09 2204 	mla	r2, r9, r4, r2
 801d266:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d26a:	2a00      	cmp	r2, #0
 801d26c:	f000 80db 	beq.w	801d426 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d270:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d274:	d019      	beq.n	801d2aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d276:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d27a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d27e:	fb0c fa0a 	mul.w	sl, ip, sl
 801d282:	fb0c fc03 	mul.w	ip, ip, r3
 801d286:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d28a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d28e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d292:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d296:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d29a:	4453      	add	r3, sl
 801d29c:	0a3f      	lsrs	r7, r7, #8
 801d29e:	0a1b      	lsrs	r3, r3, #8
 801d2a0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d2a4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d2a8:	433b      	orrs	r3, r7
 801d2aa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d2ac:	2cff      	cmp	r4, #255	@ 0xff
 801d2ae:	d020      	beq.n	801d2f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801d2b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2b2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d2b6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d2b8:	4367      	muls	r7, r4
 801d2ba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d2c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d2c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d2c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d2ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d2ce:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2d2:	44bc      	add	ip, r7
 801d2d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d2d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d2dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d2e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d2ec:	ea4c 040a 	orr.w	r4, ip, sl
 801d2f0:	940d      	str	r4, [sp, #52]	@ 0x34
 801d2f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d2f4:	2cff      	cmp	r4, #255	@ 0xff
 801d2f6:	d020      	beq.n	801d33a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801d2f8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d2fa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d2fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d300:	4367      	muls	r7, r4
 801d302:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d304:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d308:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d30c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d30e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d312:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d316:	fb04 fa0a 	mul.w	sl, r4, sl
 801d31a:	44bc      	add	ip, r7
 801d31c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d324:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d328:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d32c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d330:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d334:	ea4c 040a 	orr.w	r4, ip, sl
 801d338:	9409      	str	r4, [sp, #36]	@ 0x24
 801d33a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d33c:	2cff      	cmp	r4, #255	@ 0xff
 801d33e:	d020      	beq.n	801d382 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801d340:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d342:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d346:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d348:	4367      	muls	r7, r4
 801d34a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d34c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d350:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d354:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d356:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d35a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d35e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d362:	44bc      	add	ip, r7
 801d364:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d368:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d36c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d370:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d374:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d378:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d37c:	ea4c 040a 	orr.w	r4, ip, sl
 801d380:	940e      	str	r4, [sp, #56]	@ 0x38
 801d382:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d384:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d388:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d38c:	43d2      	mvns	r2, r2
 801d38e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d392:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d394:	b2d2      	uxtb	r2, r2
 801d396:	fb08 f707 	mul.w	r7, r8, r7
 801d39a:	fb01 770c 	mla	r7, r1, ip, r7
 801d39e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d3a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d3a4:	fb00 770c 	mla	r7, r0, ip, r7
 801d3a8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d3ac:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d3ae:	fb09 770c 	mla	r7, r9, ip, r7
 801d3b2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d3b6:	fb08 f80c 	mul.w	r8, r8, ip
 801d3ba:	0a3f      	lsrs	r7, r7, #8
 801d3bc:	fb01 8303 	mla	r3, r1, r3, r8
 801d3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d3c2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d3c6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801d3ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d3cc:	fb00 330a 	mla	r3, r0, sl, r3
 801d3d0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801d3d4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d3d8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d3dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3e0:	fb03 f102 	mul.w	r1, r3, r2
 801d3e4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d3e8:	1c4b      	adds	r3, r1, #1
 801d3ea:	ea47 070c 	orr.w	r7, r7, ip
 801d3ee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d3f2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801d3f6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d3fa:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801d3fe:	4353      	muls	r3, r2
 801d400:	1c59      	adds	r1, r3, #1
 801d402:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d406:	0a3b      	lsrs	r3, r7, #8
 801d408:	0c3f      	lsrs	r7, r7, #16
 801d40a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d40e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d412:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d416:	435a      	muls	r2, r3
 801d418:	1c53      	adds	r3, r2, #1
 801d41a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d41e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d422:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d426:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d428:	f10e 0e03 	add.w	lr, lr, #3
 801d42c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d42e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d432:	441a      	add	r2, r3
 801d434:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d436:	9225      	str	r2, [sp, #148]	@ 0x94
 801d438:	441d      	add	r5, r3
 801d43a:	e65a      	b.n	801d0f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d43c:	2800      	cmp	r0, #0
 801d43e:	f43f aef7 	beq.w	801d230 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d442:	5c79      	ldrb	r1, [r7, r1]
 801d444:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d448:	9109      	str	r1, [sp, #36]	@ 0x24
 801d44a:	0e09      	lsrs	r1, r1, #24
 801d44c:	9111      	str	r1, [sp, #68]	@ 0x44
 801d44e:	e6ef      	b.n	801d230 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d450:	b01b      	add	sp, #108	@ 0x6c
 801d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d456 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d45a:	b08d      	sub	sp, #52	@ 0x34
 801d45c:	468b      	mov	fp, r1
 801d45e:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801d462:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801d466:	fb0c 5703 	mla	r7, ip, r3, r5
 801d46a:	f1bc 0f00 	cmp.w	ip, #0
 801d46e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d470:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d474:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801d478:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801d47c:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801d480:	eb02 0607 	add.w	r6, r2, r7
 801d484:	f89b 4000 	ldrb.w	r4, [fp]
 801d488:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d48c:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801d490:	f2c0 80c1 	blt.w	801d616 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d494:	45e6      	cmp	lr, ip
 801d496:	f340 80be 	ble.w	801d616 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d49a:	2d00      	cmp	r5, #0
 801d49c:	f2c0 80b7 	blt.w	801d60e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d4a0:	42ab      	cmp	r3, r5
 801d4a2:	f340 80b4 	ble.w	801d60e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d4a6:	5dd2      	ldrb	r2, [r2, r7]
 801d4a8:	9205      	str	r2, [sp, #20]
 801d4aa:	7872      	ldrb	r2, [r6, #1]
 801d4ac:	9206      	str	r2, [sp, #24]
 801d4ae:	78b2      	ldrb	r2, [r6, #2]
 801d4b0:	9207      	str	r2, [sp, #28]
 801d4b2:	1c6a      	adds	r2, r5, #1
 801d4b4:	f100 80b6 	bmi.w	801d624 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d4b8:	4293      	cmp	r3, r2
 801d4ba:	f340 80b3 	ble.w	801d624 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d4be:	f1b8 0f00 	cmp.w	r8, #0
 801d4c2:	f000 80af 	beq.w	801d624 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d4c6:	78f2      	ldrb	r2, [r6, #3]
 801d4c8:	9201      	str	r2, [sp, #4]
 801d4ca:	7932      	ldrb	r2, [r6, #4]
 801d4cc:	9202      	str	r2, [sp, #8]
 801d4ce:	7972      	ldrb	r2, [r6, #5]
 801d4d0:	9203      	str	r2, [sp, #12]
 801d4d2:	f11c 0c01 	adds.w	ip, ip, #1
 801d4d6:	f100 80ad 	bmi.w	801d634 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d4da:	45e6      	cmp	lr, ip
 801d4dc:	f340 80aa 	ble.w	801d634 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d4e0:	f1ba 0f00 	cmp.w	sl, #0
 801d4e4:	f000 80a6 	beq.w	801d634 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d4e8:	2d00      	cmp	r5, #0
 801d4ea:	f2c0 809f 	blt.w	801d62c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d4ee:	42ab      	cmp	r3, r5
 801d4f0:	f340 809c 	ble.w	801d62c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d4f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d4f8:	f816 9002 	ldrb.w	r9, [r6, r2]
 801d4fc:	2203      	movs	r2, #3
 801d4fe:	fb03 6c02 	mla	ip, r3, r2, r6
 801d502:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d506:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d50a:	9704      	str	r7, [sp, #16]
 801d50c:	3501      	adds	r5, #1
 801d50e:	f100 8098 	bmi.w	801d642 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d512:	42ab      	cmp	r3, r5
 801d514:	f340 8095 	ble.w	801d642 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d518:	f1b8 0f00 	cmp.w	r8, #0
 801d51c:	f000 8091 	beq.w	801d642 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d520:	f04f 0c03 	mov.w	ip, #3
 801d524:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801d528:	5cb5      	ldrb	r5, [r6, r2]
 801d52a:	fb03 620c 	mla	r2, r3, ip, r6
 801d52e:	fb03 630c 	mla	r3, r3, ip, r6
 801d532:	7912      	ldrb	r2, [r2, #4]
 801d534:	795e      	ldrb	r6, [r3, #5]
 801d536:	fa1f f388 	uxth.w	r3, r8
 801d53a:	fa1f fc8a 	uxth.w	ip, sl
 801d53e:	fb03 f70c 	mul.w	r7, r3, ip
 801d542:	011b      	lsls	r3, r3, #4
 801d544:	9708      	str	r7, [sp, #32]
 801d546:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d54a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801d54e:	1bdb      	subs	r3, r3, r7
 801d550:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801d554:	fa1f fc8c 	uxth.w	ip, ip
 801d558:	b29b      	uxth	r3, r3
 801d55a:	9709      	str	r7, [sp, #36]	@ 0x24
 801d55c:	ebaa 0a0c 	sub.w	sl, sl, ip
 801d560:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d562:	930a      	str	r3, [sp, #40]	@ 0x28
 801d564:	fa1f fa8a 	uxth.w	sl, sl
 801d568:	ea6f 0807 	mvn.w	r8, r7
 801d56c:	9f01      	ldr	r7, [sp, #4]
 801d56e:	435f      	muls	r7, r3
 801d570:	9b05      	ldr	r3, [sp, #20]
 801d572:	fa5f f888 	uxtb.w	r8, r8
 801d576:	fb0a 7703 	mla	r7, sl, r3, r7
 801d57a:	9b08      	ldr	r3, [sp, #32]
 801d57c:	fb14 f408 	smulbb	r4, r4, r8
 801d580:	fb0c 7709 	mla	r7, ip, r9, r7
 801d584:	fb10 f008 	smulbb	r0, r0, r8
 801d588:	fb11 f108 	smulbb	r1, r1, r8
 801d58c:	fb03 7705 	mla	r7, r3, r5, r7
 801d590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d592:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d596:	fb07 4703 	mla	r7, r7, r3, r4
 801d59a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d59c:	b2bf      	uxth	r7, r7
 801d59e:	1c7c      	adds	r4, r7, #1
 801d5a0:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801d5a4:	1224      	asrs	r4, r4, #8
 801d5a6:	f88b 4000 	strb.w	r4, [fp]
 801d5aa:	9c02      	ldr	r4, [sp, #8]
 801d5ac:	435c      	muls	r4, r3
 801d5ae:	9b06      	ldr	r3, [sp, #24]
 801d5b0:	fb0a 4403 	mla	r4, sl, r3, r4
 801d5b4:	9b04      	ldr	r3, [sp, #16]
 801d5b6:	fb0c 4403 	mla	r4, ip, r3, r4
 801d5ba:	9b08      	ldr	r3, [sp, #32]
 801d5bc:	fb03 4402 	mla	r4, r3, r2, r4
 801d5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5c4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d5c8:	fb04 0403 	mla	r4, r4, r3, r0
 801d5cc:	9b03      	ldr	r3, [sp, #12]
 801d5ce:	435a      	muls	r2, r3
 801d5d0:	b2a4      	uxth	r4, r4
 801d5d2:	4613      	mov	r3, r2
 801d5d4:	9a07      	ldr	r2, [sp, #28]
 801d5d6:	1c60      	adds	r0, r4, #1
 801d5d8:	fb0a 3a02 	mla	sl, sl, r2, r3
 801d5dc:	9b08      	ldr	r3, [sp, #32]
 801d5de:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801d5e2:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d5e6:	1224      	asrs	r4, r4, #8
 801d5e8:	fb03 c606 	mla	r6, r3, r6, ip
 801d5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5ee:	f88b 4001 	strb.w	r4, [fp, #1]
 801d5f2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d5f6:	fb06 1103 	mla	r1, r6, r3, r1
 801d5fa:	b289      	uxth	r1, r1
 801d5fc:	1c4e      	adds	r6, r1, #1
 801d5fe:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d602:	1209      	asrs	r1, r1, #8
 801d604:	f88b 1002 	strb.w	r1, [fp, #2]
 801d608:	b00d      	add	sp, #52	@ 0x34
 801d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d60e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d612:	9405      	str	r4, [sp, #20]
 801d614:	e74d      	b.n	801d4b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801d616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d61a:	9401      	str	r4, [sp, #4]
 801d61c:	9405      	str	r4, [sp, #20]
 801d61e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d622:	e756      	b.n	801d4d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d628:	9401      	str	r4, [sp, #4]
 801d62a:	e752      	b.n	801d4d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d62c:	468e      	mov	lr, r1
 801d62e:	9004      	str	r0, [sp, #16]
 801d630:	46a1      	mov	r9, r4
 801d632:	e76b      	b.n	801d50c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801d634:	460e      	mov	r6, r1
 801d636:	4602      	mov	r2, r0
 801d638:	4625      	mov	r5, r4
 801d63a:	468e      	mov	lr, r1
 801d63c:	9004      	str	r0, [sp, #16]
 801d63e:	46a1      	mov	r9, r4
 801d640:	e779      	b.n	801d536 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801d642:	460e      	mov	r6, r1
 801d644:	4602      	mov	r2, r0
 801d646:	4625      	mov	r5, r4
 801d648:	e775      	b.n	801d536 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801d64a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d64a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d64e:	b09f      	sub	sp, #124	@ 0x7c
 801d650:	920e      	str	r2, [sp, #56]	@ 0x38
 801d652:	9307      	str	r3, [sp, #28]
 801d654:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801d656:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d65a:	901d      	str	r0, [sp, #116]	@ 0x74
 801d65c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d65e:	6850      	ldr	r0, [r2, #4]
 801d660:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d662:	6812      	ldr	r2, [r2, #0]
 801d664:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801d668:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801d66c:	fb00 1303 	mla	r3, r0, r3, r1
 801d670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d674:	18d3      	adds	r3, r2, r3
 801d676:	9308      	str	r3, [sp, #32]
 801d678:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d680:	43db      	mvns	r3, r3
 801d682:	b2db      	uxtb	r3, r3
 801d684:	9309      	str	r3, [sp, #36]	@ 0x24
 801d686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d688:	2b00      	cmp	r3, #0
 801d68a:	dc03      	bgt.n	801d694 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d68e:	2b00      	cmp	r3, #0
 801d690:	f340 81f5 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d694:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d696:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d69a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d69e:	1e48      	subs	r0, r1, #1
 801d6a0:	1e54      	subs	r4, r2, #1
 801d6a2:	9b07      	ldr	r3, [sp, #28]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	f340 80d5 	ble.w	801d854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d6aa:	ea5f 452a 	movs.w	r5, sl, asr #16
 801d6ae:	ea4f 4328 	mov.w	r3, r8, asr #16
 801d6b2:	d406      	bmi.n	801d6c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d6b4:	4285      	cmp	r5, r0
 801d6b6:	da04      	bge.n	801d6c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	db02      	blt.n	801d6c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d6bc:	42a3      	cmp	r3, r4
 801d6be:	f2c0 80ca 	blt.w	801d856 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d6c2:	3501      	adds	r5, #1
 801d6c4:	f100 80bb 	bmi.w	801d83e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6c8:	42a9      	cmp	r1, r5
 801d6ca:	f2c0 80b8 	blt.w	801d83e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6ce:	3301      	adds	r3, #1
 801d6d0:	f100 80b5 	bmi.w	801d83e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6d4:	429a      	cmp	r2, r3
 801d6d6:	f2c0 80b2 	blt.w	801d83e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6da:	9b07      	ldr	r3, [sp, #28]
 801d6dc:	9d08      	ldr	r5, [sp, #32]
 801d6de:	930d      	str	r3, [sp, #52]	@ 0x34
 801d6e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	f340 80d6 	ble.w	801d894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801d6e8:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801d6ea:	ea4f 4428 	mov.w	r4, r8, asr #16
 801d6ee:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d6f0:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801d6f4:	68c6      	ldr	r6, [r0, #12]
 801d6f6:	ea5f 402a 	movs.w	r0, sl, asr #16
 801d6fa:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801d6fe:	689b      	ldr	r3, [r3, #8]
 801d700:	f100 810f 	bmi.w	801d922 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d704:	1e5f      	subs	r7, r3, #1
 801d706:	42b8      	cmp	r0, r7
 801d708:	f280 810b 	bge.w	801d922 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d70c:	2c00      	cmp	r4, #0
 801d70e:	f2c0 8108 	blt.w	801d922 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d712:	1e77      	subs	r7, r6, #1
 801d714:	42bc      	cmp	r4, r7
 801d716:	f280 8104 	bge.w	801d922 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d71a:	b21b      	sxth	r3, r3
 801d71c:	fb04 0003 	mla	r0, r4, r3, r0
 801d720:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d722:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d726:	1826      	adds	r6, r4, r0
 801d728:	5c24      	ldrb	r4, [r4, r0]
 801d72a:	78b7      	ldrb	r7, [r6, #2]
 801d72c:	7870      	ldrb	r0, [r6, #1]
 801d72e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d730:	7977      	ldrb	r7, [r6, #5]
 801d732:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d736:	f896 c004 	ldrb.w	ip, [r6, #4]
 801d73a:	9710      	str	r7, [sp, #64]	@ 0x40
 801d73c:	b1c9      	cbz	r1, 801d772 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d73e:	f04f 0b03 	mov.w	fp, #3
 801d742:	f06f 0904 	mvn.w	r9, #4
 801d746:	3605      	adds	r6, #5
 801d748:	fb13 930b 	smlabb	r3, r3, fp, r9
 801d74c:	eb06 0b03 	add.w	fp, r6, r3
 801d750:	5cf3      	ldrb	r3, [r6, r3]
 801d752:	9311      	str	r3, [sp, #68]	@ 0x44
 801d754:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801d758:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d75a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d75e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d760:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801d764:	9312      	str	r3, [sp, #72]	@ 0x48
 801d766:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801d76a:	9314      	str	r3, [sp, #80]	@ 0x50
 801d76c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801d770:	9316      	str	r3, [sp, #88]	@ 0x58
 801d772:	b292      	uxth	r2, r2
 801d774:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d776:	b289      	uxth	r1, r1
 801d778:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801d77c:	fb02 f601 	mul.w	r6, r2, r1
 801d780:	0112      	lsls	r2, r2, #4
 801d782:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801d786:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801d78a:	1b92      	subs	r2, r2, r6
 801d78c:	b289      	uxth	r1, r1
 801d78e:	b292      	uxth	r2, r2
 801d790:	eba9 0901 	sub.w	r9, r9, r1
 801d794:	fb02 fe0e 	mul.w	lr, r2, lr
 801d798:	fa1f f989 	uxth.w	r9, r9
 801d79c:	fb02 fc0c 	mul.w	ip, r2, ip
 801d7a0:	fb09 e404 	mla	r4, r9, r4, lr
 801d7a4:	f895 e000 	ldrb.w	lr, [r5]
 801d7a8:	fb09 c000 	mla	r0, r9, r0, ip
 801d7ac:	fb01 4407 	mla	r4, r1, r7, r4
 801d7b0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801d7b2:	fb06 4407 	mla	r4, r6, r7, r4
 801d7b6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d7b8:	fb1e fe07 	smulbb	lr, lr, r7
 801d7bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d7c0:	fb04 e403 	mla	r4, r4, r3, lr
 801d7c4:	b2a4      	uxth	r4, r4
 801d7c6:	f104 0e01 	add.w	lr, r4, #1
 801d7ca:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801d7ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d7d0:	fb01 0004 	mla	r0, r1, r4, r0
 801d7d4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d7d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d7da:	fb06 0004 	mla	r0, r6, r4, r0
 801d7de:	786c      	ldrb	r4, [r5, #1]
 801d7e0:	f885 e000 	strb.w	lr, [r5]
 801d7e4:	fb14 f407 	smulbb	r4, r4, r7
 801d7e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d7ec:	fb00 4003 	mla	r0, r0, r3, r4
 801d7f0:	b280      	uxth	r0, r0
 801d7f2:	1c44      	adds	r4, r0, #1
 801d7f4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801d7f8:	1200      	asrs	r0, r0, #8
 801d7fa:	7068      	strb	r0, [r5, #1]
 801d7fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d7fe:	4342      	muls	r2, r0
 801d800:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d802:	fb09 2200 	mla	r2, r9, r0, r2
 801d806:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d808:	fb01 2100 	mla	r1, r1, r0, r2
 801d80c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d80e:	fb06 1602 	mla	r6, r6, r2, r1
 801d812:	78a9      	ldrb	r1, [r5, #2]
 801d814:	fb11 f107 	smulbb	r1, r1, r7
 801d818:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d81c:	fb06 1303 	mla	r3, r6, r3, r1
 801d820:	b29b      	uxth	r3, r3
 801d822:	1c5e      	adds	r6, r3, #1
 801d824:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d828:	121b      	asrs	r3, r3, #8
 801d82a:	70ab      	strb	r3, [r5, #2]
 801d82c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d82e:	3503      	adds	r5, #3
 801d830:	449a      	add	sl, r3
 801d832:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d834:	4498      	add	r8, r3
 801d836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d838:	3b01      	subs	r3, #1
 801d83a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d83c:	e750      	b.n	801d6e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d83e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d840:	449a      	add	sl, r3
 801d842:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d844:	4498      	add	r8, r3
 801d846:	9b07      	ldr	r3, [sp, #28]
 801d848:	3b01      	subs	r3, #1
 801d84a:	9307      	str	r3, [sp, #28]
 801d84c:	9b08      	ldr	r3, [sp, #32]
 801d84e:	3303      	adds	r3, #3
 801d850:	9308      	str	r3, [sp, #32]
 801d852:	e726      	b.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d854:	d026      	beq.n	801d8a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801d856:	9b07      	ldr	r3, [sp, #28]
 801d858:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d85a:	3b01      	subs	r3, #1
 801d85c:	fb00 a003 	mla	r0, r0, r3, sl
 801d860:	1400      	asrs	r0, r0, #16
 801d862:	f53f af3a 	bmi.w	801d6da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d866:	3901      	subs	r1, #1
 801d868:	4288      	cmp	r0, r1
 801d86a:	f6bf af36 	bge.w	801d6da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d86e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d870:	fb01 8303 	mla	r3, r1, r3, r8
 801d874:	141b      	asrs	r3, r3, #16
 801d876:	f53f af30 	bmi.w	801d6da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d87a:	3a01      	subs	r2, #1
 801d87c:	4293      	cmp	r3, r2
 801d87e:	f6bf af2c 	bge.w	801d6da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d882:	9b08      	ldr	r3, [sp, #32]
 801d884:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801d888:	1cdd      	adds	r5, r3, #3
 801d88a:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801d88e:	f1bc 0f00 	cmp.w	ip, #0
 801d892:	dc5f      	bgt.n	801d954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801d894:	9b07      	ldr	r3, [sp, #28]
 801d896:	9a08      	ldr	r2, [sp, #32]
 801d898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d89c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8a0:	441a      	add	r2, r3
 801d8a2:	9208      	str	r2, [sp, #32]
 801d8a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	f340 80e9 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d8ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d8b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8ba:	eef0 6a62 	vmov.f32	s13, s5
 801d8be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d8c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8ca:	ee16 aa90 	vmov	sl, s13
 801d8ce:	eef0 6a43 	vmov.f32	s13, s6
 801d8d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8d6:	ee16 8a90 	vmov	r8, s13
 801d8da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8f2:	ee12 2a90 	vmov	r2, s5
 801d8f6:	eef0 2a47 	vmov.f32	s5, s14
 801d8fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8fe:	ee13 2a10 	vmov	r2, s6
 801d902:	932b      	str	r3, [sp, #172]	@ 0xac
 801d904:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d906:	eeb0 3a67 	vmov.f32	s6, s15
 801d90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d90e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801d910:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d914:	3b01      	subs	r3, #1
 801d916:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d918:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d91a:	bf08      	it	eq
 801d91c:	4613      	moveq	r3, r2
 801d91e:	9307      	str	r3, [sp, #28]
 801d920:	e6b1      	b.n	801d686 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d922:	1c47      	adds	r7, r0, #1
 801d924:	d482      	bmi.n	801d82c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d926:	42bb      	cmp	r3, r7
 801d928:	db80      	blt.n	801d82c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d92a:	1c67      	adds	r7, r4, #1
 801d92c:	f53f af7e 	bmi.w	801d82c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d930:	42be      	cmp	r6, r7
 801d932:	f6ff af7b 	blt.w	801d82c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d936:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d938:	b236      	sxth	r6, r6
 801d93a:	9001      	str	r0, [sp, #4]
 801d93c:	b21b      	sxth	r3, r3
 801d93e:	9600      	str	r6, [sp, #0]
 801d940:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d942:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801d946:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801d94a:	4629      	mov	r1, r5
 801d94c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d94e:	f7ff fd82 	bl	801d456 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801d952:	e76b      	b.n	801d82c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d954:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801d956:	ea4f 402a 	mov.w	r0, sl, asr #16
 801d95a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801d95e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801d962:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801d966:	ea4f 4128 	mov.w	r1, r8, asr #16
 801d96a:	fb07 0101 	mla	r1, r7, r1, r0
 801d96e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d970:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d974:	1844      	adds	r4, r0, r1
 801d976:	5c40      	ldrb	r0, [r0, r1]
 801d978:	78a6      	ldrb	r6, [r4, #2]
 801d97a:	7861      	ldrb	r1, [r4, #1]
 801d97c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801d97e:	78e6      	ldrb	r6, [r4, #3]
 801d980:	910d      	str	r1, [sp, #52]	@ 0x34
 801d982:	9610      	str	r6, [sp, #64]	@ 0x40
 801d984:	f894 9004 	ldrb.w	r9, [r4, #4]
 801d988:	f894 b005 	ldrb.w	fp, [r4, #5]
 801d98c:	b192      	cbz	r2, 801d9b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d98e:	f06f 0604 	mvn.w	r6, #4
 801d992:	2103      	movs	r1, #3
 801d994:	3405      	adds	r4, #5
 801d996:	fb17 6701 	smlabb	r7, r7, r1, r6
 801d99a:	19e6      	adds	r6, r4, r7
 801d99c:	5de4      	ldrb	r4, [r4, r7]
 801d99e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d9a0:	7874      	ldrb	r4, [r6, #1]
 801d9a2:	9419      	str	r4, [sp, #100]	@ 0x64
 801d9a4:	78b4      	ldrb	r4, [r6, #2]
 801d9a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801d9a8:	78f4      	ldrb	r4, [r6, #3]
 801d9aa:	9418      	str	r4, [sp, #96]	@ 0x60
 801d9ac:	7934      	ldrb	r4, [r6, #4]
 801d9ae:	941a      	str	r4, [sp, #104]	@ 0x68
 801d9b0:	7974      	ldrb	r4, [r6, #5]
 801d9b2:	941c      	str	r4, [sp, #112]	@ 0x70
 801d9b4:	b29b      	uxth	r3, r3
 801d9b6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d9b8:	b292      	uxth	r2, r2
 801d9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d9bc:	3503      	adds	r5, #3
 801d9be:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d9c2:	fb03 f402 	mul.w	r4, r3, r2
 801d9c6:	011b      	lsls	r3, r3, #4
 801d9c8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801d9cc:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801d9d0:	1b1b      	subs	r3, r3, r4
 801d9d2:	b292      	uxth	r2, r2
 801d9d4:	b29b      	uxth	r3, r3
 801d9d6:	1ab6      	subs	r6, r6, r2
 801d9d8:	435f      	muls	r7, r3
 801d9da:	b2b6      	uxth	r6, r6
 801d9dc:	fb03 f909 	mul.w	r9, r3, r9
 801d9e0:	fb03 fb0b 	mul.w	fp, r3, fp
 801d9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9e6:	fb06 7000 	mla	r0, r6, r0, r7
 801d9ea:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801d9ec:	fb06 bb03 	mla	fp, r6, r3, fp
 801d9f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d9f2:	fb02 0007 	mla	r0, r2, r7, r0
 801d9f6:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801d9f8:	fb02 bb03 	mla	fp, r2, r3, fp
 801d9fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d9fe:	fb04 0007 	mla	r0, r4, r7, r0
 801da02:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801da06:	fb17 f701 	smulbb	r7, r7, r1
 801da0a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801da0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801da10:	fb00 700e 	mla	r0, r0, lr, r7
 801da14:	fb06 9101 	mla	r1, r6, r1, r9
 801da18:	b280      	uxth	r0, r0
 801da1a:	1c47      	adds	r7, r0, #1
 801da1c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801da20:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801da22:	1200      	asrs	r0, r0, #8
 801da24:	f805 0c06 	strb.w	r0, [r5, #-6]
 801da28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801da2a:	fb02 1100 	mla	r1, r2, r0, r1
 801da2e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801da30:	fb04 1100 	mla	r1, r4, r0, r1
 801da34:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801da38:	fb04 b403 	mla	r4, r4, r3, fp
 801da3c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801da40:	fb10 f007 	smulbb	r0, r0, r7
 801da44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801da48:	fb13 f307 	smulbb	r3, r3, r7
 801da4c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801da50:	fb01 010e 	mla	r1, r1, lr, r0
 801da54:	fb04 340e 	mla	r4, r4, lr, r3
 801da58:	b289      	uxth	r1, r1
 801da5a:	b2a4      	uxth	r4, r4
 801da5c:	1c48      	adds	r0, r1, #1
 801da5e:	1c63      	adds	r3, r4, #1
 801da60:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801da64:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801da68:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801da6a:	1209      	asrs	r1, r1, #8
 801da6c:	1224      	asrs	r4, r4, #8
 801da6e:	449a      	add	sl, r3
 801da70:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801da72:	f805 1c05 	strb.w	r1, [r5, #-5]
 801da76:	f805 4c04 	strb.w	r4, [r5, #-4]
 801da7a:	4498      	add	r8, r3
 801da7c:	e707      	b.n	801d88e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801da7e:	b01f      	add	sp, #124	@ 0x7c
 801da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da84 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da88:	b087      	sub	sp, #28
 801da8a:	780d      	ldrb	r5, [r1, #0]
 801da8c:	784c      	ldrb	r4, [r1, #1]
 801da8e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801da92:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801da96:	9004      	str	r0, [sp, #16]
 801da98:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801da9c:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801daa0:	9005      	str	r0, [sp, #20]
 801daa2:	fb06 bc03 	mla	ip, r6, r3, fp
 801daa6:	2e00      	cmp	r6, #0
 801daa8:	7888      	ldrb	r0, [r1, #2]
 801daaa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801daae:	eb02 090c 	add.w	r9, r2, ip
 801dab2:	f2c0 8084 	blt.w	801dbbe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dab6:	42b7      	cmp	r7, r6
 801dab8:	f340 8081 	ble.w	801dbbe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dabc:	f1bb 0f00 	cmp.w	fp, #0
 801dac0:	db79      	blt.n	801dbb6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dac2:	455b      	cmp	r3, fp
 801dac4:	dd77      	ble.n	801dbb6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dac6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801daca:	9201      	str	r2, [sp, #4]
 801dacc:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dad0:	9202      	str	r2, [sp, #8]
 801dad2:	f899 2002 	ldrb.w	r2, [r9, #2]
 801dad6:	9203      	str	r2, [sp, #12]
 801dad8:	f11b 0201 	adds.w	r2, fp, #1
 801dadc:	d476      	bmi.n	801dbcc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dade:	4293      	cmp	r3, r2
 801dae0:	dd74      	ble.n	801dbcc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dae2:	9a04      	ldr	r2, [sp, #16]
 801dae4:	2a00      	cmp	r2, #0
 801dae6:	d071      	beq.n	801dbcc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dae8:	f899 8003 	ldrb.w	r8, [r9, #3]
 801daec:	f899 c004 	ldrb.w	ip, [r9, #4]
 801daf0:	f899 a005 	ldrb.w	sl, [r9, #5]
 801daf4:	3601      	adds	r6, #1
 801daf6:	d471      	bmi.n	801dbdc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801daf8:	42b7      	cmp	r7, r6
 801dafa:	dd6f      	ble.n	801dbdc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dafc:	9a05      	ldr	r2, [sp, #20]
 801dafe:	2a00      	cmp	r2, #0
 801db00:	d06c      	beq.n	801dbdc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801db02:	f1bb 0f00 	cmp.w	fp, #0
 801db06:	db65      	blt.n	801dbd4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801db08:	455b      	cmp	r3, fp
 801db0a:	dd63      	ble.n	801dbd4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801db0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801db10:	f819 e002 	ldrb.w	lr, [r9, r2]
 801db14:	2203      	movs	r2, #3
 801db16:	fb03 9602 	mla	r6, r3, r2, r9
 801db1a:	7877      	ldrb	r7, [r6, #1]
 801db1c:	78b6      	ldrb	r6, [r6, #2]
 801db1e:	f11b 0b01 	adds.w	fp, fp, #1
 801db22:	d40c      	bmi.n	801db3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801db24:	455b      	cmp	r3, fp
 801db26:	dd0a      	ble.n	801db3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801db28:	9a04      	ldr	r2, [sp, #16]
 801db2a:	b142      	cbz	r2, 801db3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801db2c:	2203      	movs	r2, #3
 801db2e:	fb13 2002 	smlabb	r0, r3, r2, r2
 801db32:	f819 5000 	ldrb.w	r5, [r9, r0]
 801db36:	fb03 9002 	mla	r0, r3, r2, r9
 801db3a:	7904      	ldrb	r4, [r0, #4]
 801db3c:	7940      	ldrb	r0, [r0, #5]
 801db3e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801db42:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801db46:	fb03 fb02 	mul.w	fp, r3, r2
 801db4a:	011b      	lsls	r3, r3, #4
 801db4c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801db50:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801db54:	eba3 030b 	sub.w	r3, r3, fp
 801db58:	b292      	uxth	r2, r2
 801db5a:	b29b      	uxth	r3, r3
 801db5c:	eba9 0902 	sub.w	r9, r9, r2
 801db60:	9304      	str	r3, [sp, #16]
 801db62:	fa1f f989 	uxth.w	r9, r9
 801db66:	fb03 f808 	mul.w	r8, r3, r8
 801db6a:	9b01      	ldr	r3, [sp, #4]
 801db6c:	fb09 8803 	mla	r8, r9, r3, r8
 801db70:	9b04      	ldr	r3, [sp, #16]
 801db72:	fb03 fc0c 	mul.w	ip, r3, ip
 801db76:	9b02      	ldr	r3, [sp, #8]
 801db78:	fb02 880e 	mla	r8, r2, lr, r8
 801db7c:	fb09 cc03 	mla	ip, r9, r3, ip
 801db80:	9b04      	ldr	r3, [sp, #16]
 801db82:	fb0b 8805 	mla	r8, fp, r5, r8
 801db86:	fb02 c707 	mla	r7, r2, r7, ip
 801db8a:	fb03 f30a 	mul.w	r3, r3, sl
 801db8e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801db92:	fb0b 7404 	mla	r4, fp, r4, r7
 801db96:	f881 8000 	strb.w	r8, [r1]
 801db9a:	1224      	asrs	r4, r4, #8
 801db9c:	704c      	strb	r4, [r1, #1]
 801db9e:	9c03      	ldr	r4, [sp, #12]
 801dba0:	fb09 3904 	mla	r9, r9, r4, r3
 801dba4:	fb02 9206 	mla	r2, r2, r6, r9
 801dba8:	fb0b 2000 	mla	r0, fp, r0, r2
 801dbac:	1200      	asrs	r0, r0, #8
 801dbae:	7088      	strb	r0, [r1, #2]
 801dbb0:	b007      	add	sp, #28
 801dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801dbba:	9501      	str	r5, [sp, #4]
 801dbbc:	e78c      	b.n	801dad8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801dbbe:	4682      	mov	sl, r0
 801dbc0:	46a4      	mov	ip, r4
 801dbc2:	46a8      	mov	r8, r5
 801dbc4:	9501      	str	r5, [sp, #4]
 801dbc6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801dbca:	e793      	b.n	801daf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801dbcc:	4682      	mov	sl, r0
 801dbce:	46a4      	mov	ip, r4
 801dbd0:	46a8      	mov	r8, r5
 801dbd2:	e78f      	b.n	801daf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801dbd4:	4606      	mov	r6, r0
 801dbd6:	4627      	mov	r7, r4
 801dbd8:	46ae      	mov	lr, r5
 801dbda:	e7a0      	b.n	801db1e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801dbdc:	4606      	mov	r6, r0
 801dbde:	4627      	mov	r7, r4
 801dbe0:	46ae      	mov	lr, r5
 801dbe2:	e7ac      	b.n	801db3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801dbe4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe8:	b09b      	sub	sp, #108	@ 0x6c
 801dbea:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dbec:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801dbee:	9019      	str	r0, [sp, #100]	@ 0x64
 801dbf0:	9109      	str	r1, [sp, #36]	@ 0x24
 801dbf2:	6850      	ldr	r0, [r2, #4]
 801dbf4:	9306      	str	r3, [sp, #24]
 801dbf6:	6812      	ldr	r2, [r2, #0]
 801dbf8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801dbfc:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801dc00:	fb00 1303 	mla	r3, r0, r3, r1
 801dc04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc08:	18d3      	adds	r3, r2, r3
 801dc0a:	9307      	str	r3, [sp, #28]
 801dc0c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	9308      	str	r3, [sp, #32]
 801dc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	dc03      	bgt.n	801dc20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dc18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	f340 81ab 	ble.w	801df76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801dc20:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dc22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dc26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dc2a:	1e48      	subs	r0, r1, #1
 801dc2c:	1e55      	subs	r5, r2, #1
 801dc2e:	9b06      	ldr	r3, [sp, #24]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	f340 80b1 	ble.w	801dd98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dc36:	ea5f 462b 	movs.w	r6, fp, asr #16
 801dc3a:	ea4f 4324 	mov.w	r3, r4, asr #16
 801dc3e:	d406      	bmi.n	801dc4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc40:	4286      	cmp	r6, r0
 801dc42:	da04      	bge.n	801dc4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	db02      	blt.n	801dc4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc48:	42ab      	cmp	r3, r5
 801dc4a:	f2c0 80a6 	blt.w	801dd9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dc4e:	3601      	adds	r6, #1
 801dc50:	f100 8097 	bmi.w	801dd82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dc54:	42b1      	cmp	r1, r6
 801dc56:	f2c0 8094 	blt.w	801dd82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dc5a:	3301      	adds	r3, #1
 801dc5c:	f100 8091 	bmi.w	801dd82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dc60:	429a      	cmp	r2, r3
 801dc62:	f2c0 808e 	blt.w	801dd82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dc66:	9b06      	ldr	r3, [sp, #24]
 801dc68:	9e07      	ldr	r6, [sp, #28]
 801dc6a:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	f340 80b0 	ble.w	801ddd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dc74:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801dc76:	1425      	asrs	r5, r4, #16
 801dc78:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dc7a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dc7e:	68c7      	ldr	r7, [r0, #12]
 801dc80:	ea5f 402b 	movs.w	r0, fp, asr #16
 801dc84:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801dc88:	689b      	ldr	r3, [r3, #8]
 801dc8a:	f100 80ea 	bmi.w	801de62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dc8e:	f103 3cff 	add.w	ip, r3, #4294967295
 801dc92:	4560      	cmp	r0, ip
 801dc94:	f280 80e5 	bge.w	801de62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dc98:	2d00      	cmp	r5, #0
 801dc9a:	f2c0 80e2 	blt.w	801de62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dc9e:	f107 3cff 	add.w	ip, r7, #4294967295
 801dca2:	4565      	cmp	r5, ip
 801dca4:	f280 80dd 	bge.w	801de62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dca8:	b21b      	sxth	r3, r3
 801dcaa:	fb05 0003 	mla	r0, r5, r3, r0
 801dcae:	9d08      	ldr	r5, [sp, #32]
 801dcb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dcb4:	182f      	adds	r7, r5, r0
 801dcb6:	5c2d      	ldrb	r5, [r5, r0]
 801dcb8:	7878      	ldrb	r0, [r7, #1]
 801dcba:	f897 e002 	ldrb.w	lr, [r7, #2]
 801dcbe:	900c      	str	r0, [sp, #48]	@ 0x30
 801dcc0:	f897 9003 	ldrb.w	r9, [r7, #3]
 801dcc4:	f897 8004 	ldrb.w	r8, [r7, #4]
 801dcc8:	f897 a005 	ldrb.w	sl, [r7, #5]
 801dccc:	b1c9      	cbz	r1, 801dd02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dcce:	f04f 0c03 	mov.w	ip, #3
 801dcd2:	f06f 0004 	mvn.w	r0, #4
 801dcd6:	3705      	adds	r7, #5
 801dcd8:	fb13 030c 	smlabb	r3, r3, ip, r0
 801dcdc:	eb07 0c03 	add.w	ip, r7, r3
 801dce0:	5cfb      	ldrb	r3, [r7, r3]
 801dce2:	930d      	str	r3, [sp, #52]	@ 0x34
 801dce4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801dce8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dcea:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801dcee:	9311      	str	r3, [sp, #68]	@ 0x44
 801dcf0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801dcf4:	930e      	str	r3, [sp, #56]	@ 0x38
 801dcf6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801dcfa:	9310      	str	r3, [sp, #64]	@ 0x40
 801dcfc:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801dd00:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd02:	b292      	uxth	r2, r2
 801dd04:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dd06:	b289      	uxth	r1, r1
 801dd08:	fb02 f301 	mul.w	r3, r2, r1
 801dd0c:	0112      	lsls	r2, r2, #4
 801dd0e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801dd12:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801dd16:	1ad2      	subs	r2, r2, r3
 801dd18:	b289      	uxth	r1, r1
 801dd1a:	b292      	uxth	r2, r2
 801dd1c:	1a7f      	subs	r7, r7, r1
 801dd1e:	fb02 f909 	mul.w	r9, r2, r9
 801dd22:	b2bf      	uxth	r7, r7
 801dd24:	fb02 f808 	mul.w	r8, r2, r8
 801dd28:	fb02 fa0a 	mul.w	sl, r2, sl
 801dd2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dd2e:	fb07 9905 	mla	r9, r7, r5, r9
 801dd32:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801dd34:	fb07 8800 	mla	r8, r7, r0, r8
 801dd38:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801dd3a:	fb07 aa0e 	mla	sl, r7, lr, sl
 801dd3e:	fb01 9905 	mla	r9, r1, r5, r9
 801dd42:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801dd44:	fb01 8800 	mla	r8, r1, r0, r8
 801dd48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dd4a:	fb01 a102 	mla	r1, r1, r2, sl
 801dd4e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dd50:	fb03 9905 	mla	r9, r3, r5, r9
 801dd54:	fb03 8800 	mla	r8, r3, r0, r8
 801dd58:	fb03 1302 	mla	r3, r3, r2, r1
 801dd5c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dd60:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd64:	121b      	asrs	r3, r3, #8
 801dd66:	f886 9000 	strb.w	r9, [r6]
 801dd6a:	f886 8001 	strb.w	r8, [r6, #1]
 801dd6e:	70b3      	strb	r3, [r6, #2]
 801dd70:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dd72:	3603      	adds	r6, #3
 801dd74:	449b      	add	fp, r3
 801dd76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd78:	441c      	add	r4, r3
 801dd7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd7c:	3b01      	subs	r3, #1
 801dd7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd80:	e774      	b.n	801dc6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801dd82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dd84:	449b      	add	fp, r3
 801dd86:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd88:	441c      	add	r4, r3
 801dd8a:	9b06      	ldr	r3, [sp, #24]
 801dd8c:	3b01      	subs	r3, #1
 801dd8e:	9306      	str	r3, [sp, #24]
 801dd90:	9b07      	ldr	r3, [sp, #28]
 801dd92:	3303      	adds	r3, #3
 801dd94:	9307      	str	r3, [sp, #28]
 801dd96:	e74a      	b.n	801dc2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dd98:	d024      	beq.n	801dde4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801dd9a:	9b06      	ldr	r3, [sp, #24]
 801dd9c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801dd9e:	3b01      	subs	r3, #1
 801dda0:	fb00 b003 	mla	r0, r0, r3, fp
 801dda4:	1400      	asrs	r0, r0, #16
 801dda6:	f53f af5e 	bmi.w	801dc66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ddaa:	3901      	subs	r1, #1
 801ddac:	4288      	cmp	r0, r1
 801ddae:	f6bf af5a 	bge.w	801dc66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ddb2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ddb4:	fb01 4303 	mla	r3, r1, r3, r4
 801ddb8:	141b      	asrs	r3, r3, #16
 801ddba:	f53f af54 	bmi.w	801dc66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ddbe:	3a01      	subs	r2, #1
 801ddc0:	4293      	cmp	r3, r2
 801ddc2:	f6bf af50 	bge.w	801dc66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ddc6:	9b07      	ldr	r3, [sp, #28]
 801ddc8:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ddcc:	1cde      	adds	r6, r3, #3
 801ddce:	f1be 0f00 	cmp.w	lr, #0
 801ddd2:	dc5f      	bgt.n	801de94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ddd4:	9b06      	ldr	r3, [sp, #24]
 801ddd6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ddda:	9b07      	ldr	r3, [sp, #28]
 801dddc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dde0:	4423      	add	r3, r4
 801dde2:	9307      	str	r3, [sp, #28]
 801dde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	f340 80c5 	ble.w	801df76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ddec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ddf0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ddf2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddf6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ddfa:	eef0 6a62 	vmov.f32	s13, s5
 801ddfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de0a:	ee16 ba90 	vmov	fp, s13
 801de0e:	eef0 6a43 	vmov.f32	s13, s6
 801de12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de16:	ee16 4a90 	vmov	r4, s13
 801de1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de22:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de32:	ee12 2a90 	vmov	r2, s5
 801de36:	eef0 2a47 	vmov.f32	s5, s14
 801de3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801de3e:	ee13 2a10 	vmov	r2, s6
 801de42:	9327      	str	r3, [sp, #156]	@ 0x9c
 801de44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de46:	eeb0 3a67 	vmov.f32	s6, s15
 801de4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801de4e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801de50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801de54:	3b01      	subs	r3, #1
 801de56:	9309      	str	r3, [sp, #36]	@ 0x24
 801de58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de5a:	bf08      	it	eq
 801de5c:	4613      	moveq	r3, r2
 801de5e:	9306      	str	r3, [sp, #24]
 801de60:	e6d7      	b.n	801dc12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801de62:	f110 0c01 	adds.w	ip, r0, #1
 801de66:	d483      	bmi.n	801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801de68:	4563      	cmp	r3, ip
 801de6a:	db81      	blt.n	801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801de6c:	f115 0c01 	adds.w	ip, r5, #1
 801de70:	f53f af7e 	bmi.w	801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801de74:	4567      	cmp	r7, ip
 801de76:	f6ff af7b 	blt.w	801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801de7a:	b23f      	sxth	r7, r7
 801de7c:	b21b      	sxth	r3, r3
 801de7e:	9700      	str	r7, [sp, #0]
 801de80:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801de84:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801de88:	9a08      	ldr	r2, [sp, #32]
 801de8a:	4631      	mov	r1, r6
 801de8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801de8e:	f7ff fdf9 	bl	801da84 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801de92:	e76d      	b.n	801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801de94:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801de96:	ea4f 402b 	mov.w	r0, fp, asr #16
 801de9a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801de9e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801dea2:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801dea6:	1421      	asrs	r1, r4, #16
 801dea8:	930a      	str	r3, [sp, #40]	@ 0x28
 801deaa:	fb0c 0101 	mla	r1, ip, r1, r0
 801deae:	9808      	ldr	r0, [sp, #32]
 801deb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801deb4:	1845      	adds	r5, r0, r1
 801deb6:	5c40      	ldrb	r0, [r0, r1]
 801deb8:	796f      	ldrb	r7, [r5, #5]
 801deba:	7869      	ldrb	r1, [r5, #1]
 801debc:	f895 8002 	ldrb.w	r8, [r5, #2]
 801dec0:	f895 a003 	ldrb.w	sl, [r5, #3]
 801dec4:	f895 9004 	ldrb.w	r9, [r5, #4]
 801dec8:	970c      	str	r7, [sp, #48]	@ 0x30
 801deca:	b1a2      	cbz	r2, 801def6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801decc:	2703      	movs	r7, #3
 801dece:	f06f 0304 	mvn.w	r3, #4
 801ded2:	3505      	adds	r5, #5
 801ded4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801ded8:	eb05 070c 	add.w	r7, r5, ip
 801dedc:	f815 500c 	ldrb.w	r5, [r5, ip]
 801dee0:	9513      	str	r5, [sp, #76]	@ 0x4c
 801dee2:	787d      	ldrb	r5, [r7, #1]
 801dee4:	9515      	str	r5, [sp, #84]	@ 0x54
 801dee6:	78bd      	ldrb	r5, [r7, #2]
 801dee8:	9517      	str	r5, [sp, #92]	@ 0x5c
 801deea:	78fd      	ldrb	r5, [r7, #3]
 801deec:	9514      	str	r5, [sp, #80]	@ 0x50
 801deee:	793d      	ldrb	r5, [r7, #4]
 801def0:	9516      	str	r5, [sp, #88]	@ 0x58
 801def2:	797d      	ldrb	r5, [r7, #5]
 801def4:	9518      	str	r5, [sp, #96]	@ 0x60
 801def6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801defa:	b292      	uxth	r2, r2
 801defc:	3603      	adds	r6, #3
 801defe:	f10e 3eff 	add.w	lr, lr, #4294967295
 801df02:	fb03 f502 	mul.w	r5, r3, r2
 801df06:	011b      	lsls	r3, r3, #4
 801df08:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801df0c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801df10:	1b5b      	subs	r3, r3, r5
 801df12:	b292      	uxth	r2, r2
 801df14:	b29b      	uxth	r3, r3
 801df16:	1abf      	subs	r7, r7, r2
 801df18:	fb03 f909 	mul.w	r9, r3, r9
 801df1c:	b2bf      	uxth	r7, r7
 801df1e:	fb03 fa0a 	mul.w	sl, r3, sl
 801df22:	fb07 9901 	mla	r9, r7, r1, r9
 801df26:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801df28:	fb07 aa00 	mla	sl, r7, r0, sl
 801df2c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801df2e:	fb02 9901 	mla	r9, r2, r1, r9
 801df32:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801df34:	fb02 aa00 	mla	sl, r2, r0, sl
 801df38:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801df3a:	fb05 9901 	mla	r9, r5, r1, r9
 801df3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801df40:	fb05 aa00 	mla	sl, r5, r0, sl
 801df44:	434b      	muls	r3, r1
 801df46:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801df48:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df4c:	fb07 3308 	mla	r3, r7, r8, r3
 801df50:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df54:	f806 ac06 	strb.w	sl, [r6, #-6]
 801df58:	fb02 3201 	mla	r2, r2, r1, r3
 801df5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df5e:	f806 9c05 	strb.w	r9, [r6, #-5]
 801df62:	fb05 2503 	mla	r5, r5, r3, r2
 801df66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801df68:	122d      	asrs	r5, r5, #8
 801df6a:	449b      	add	fp, r3
 801df6c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df6e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801df72:	441c      	add	r4, r3
 801df74:	e72b      	b.n	801ddce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801df76:	b01b      	add	sp, #108	@ 0x6c
 801df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df80:	b087      	sub	sp, #28
 801df82:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801df86:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801df8a:	fb05 7003 	mla	r0, r5, r3, r7
 801df8e:	2d00      	cmp	r5, #0
 801df90:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801df94:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801df98:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801df9c:	f2c0 811f 	blt.w	801e1de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801dfa0:	45a8      	cmp	r8, r5
 801dfa2:	f340 811c 	ble.w	801e1de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801dfa6:	2f00      	cmp	r7, #0
 801dfa8:	f2c0 8117 	blt.w	801e1da <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801dfac:	42bb      	cmp	r3, r7
 801dfae:	f340 8114 	ble.w	801e1da <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801dfb2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801dfb6:	1c7a      	adds	r2, r7, #1
 801dfb8:	f100 8114 	bmi.w	801e1e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801dfbc:	4293      	cmp	r3, r2
 801dfbe:	f340 8111 	ble.w	801e1e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801dfc2:	2c00      	cmp	r4, #0
 801dfc4:	f000 8110 	beq.w	801e1e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801dfc8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801dfcc:	3501      	adds	r5, #1
 801dfce:	f100 810f 	bmi.w	801e1f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801dfd2:	45a8      	cmp	r8, r5
 801dfd4:	f340 810c 	ble.w	801e1f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801dfd8:	f1be 0f00 	cmp.w	lr, #0
 801dfdc:	f000 810b 	beq.w	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801dfe0:	2f00      	cmp	r7, #0
 801dfe2:	f2c0 8103 	blt.w	801e1ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801dfe6:	42bb      	cmp	r3, r7
 801dfe8:	f340 8100 	ble.w	801e1ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801dfec:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801dff0:	3701      	adds	r7, #1
 801dff2:	f100 8103 	bmi.w	801e1fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801dff6:	42bb      	cmp	r3, r7
 801dff8:	f340 8100 	ble.w	801e1fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801dffc:	2c00      	cmp	r4, #0
 801dffe:	f000 80ff 	beq.w	801e200 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801e002:	3301      	adds	r3, #1
 801e004:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e008:	fa1f fc84 	uxth.w	ip, r4
 801e00c:	fa1f fe8e 	uxth.w	lr, lr
 801e010:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e014:	fb0c f90e 	mul.w	r9, ip, lr
 801e018:	0e13      	lsrs	r3, r2, #24
 801e01a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e01e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e022:	9302      	str	r3, [sp, #8]
 801e024:	ebac 0709 	sub.w	r7, ip, r9
 801e028:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801e02c:	fa1f f48e 	uxth.w	r4, lr
 801e030:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801e034:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e038:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e03c:	fb0a fe0e 	mul.w	lr, sl, lr
 801e040:	1b1b      	subs	r3, r3, r4
 801e042:	fb0a f606 	mul.w	r6, sl, r6
 801e046:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e04a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e04e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801e052:	b29b      	uxth	r3, r3
 801e054:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e058:	b2bf      	uxth	r7, r7
 801e05a:	9301      	str	r3, [sp, #4]
 801e05c:	44e6      	add	lr, ip
 801e05e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e062:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e066:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e06a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801e06e:	9303      	str	r3, [sp, #12]
 801e070:	0a33      	lsrs	r3, r6, #8
 801e072:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801e076:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e07a:	9304      	str	r3, [sp, #16]
 801e07c:	fb0b f606 	mul.w	r6, fp, r6
 801e080:	fb0b f000 	mul.w	r0, fp, r0
 801e084:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e088:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e08c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e090:	44b6      	add	lr, r6
 801e092:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801e096:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e09a:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801e09e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e0a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0a6:	fb08 f606 	mul.w	r6, r8, r6
 801e0aa:	0a03      	lsrs	r3, r0, #8
 801e0ac:	fb08 f505 	mul.w	r5, r8, r5
 801e0b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e0b4:	0a30      	lsrs	r0, r6, #8
 801e0b6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e0ba:	9305      	str	r3, [sp, #20]
 801e0bc:	0e13      	lsrs	r3, r2, #24
 801e0be:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e0c2:	fb0e fe07 	mul.w	lr, lr, r7
 801e0c6:	4430      	add	r0, r6
 801e0c8:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801e0cc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e0d0:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801e0d4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e0d8:	0a00      	lsrs	r0, r0, #8
 801e0da:	435e      	muls	r6, r3
 801e0dc:	0a2d      	lsrs	r5, r5, #8
 801e0de:	435a      	muls	r2, r3
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e0e6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e0ea:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e0ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0f2:	44b4      	add	ip, r6
 801e0f4:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801e0f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0fc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e100:	9e01      	ldr	r6, [sp, #4]
 801e102:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e106:	fb03 ee06 	mla	lr, r3, r6, lr
 801e10a:	9b04      	ldr	r3, [sp, #16]
 801e10c:	0a12      	lsrs	r2, r2, #8
 801e10e:	fb0c ee09 	mla	lr, ip, r9, lr
 801e112:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801e116:	9b05      	ldr	r3, [sp, #20]
 801e118:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e11c:	fb00 ee04 	mla	lr, r0, r4, lr
 801e120:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e124:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801e128:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801e12c:	9b01      	ldr	r3, [sp, #4]
 801e12e:	fb07 fe0e 	mul.w	lr, r7, lr
 801e132:	fb07 f70b 	mul.w	r7, r7, fp
 801e136:	fb03 ee06 	mla	lr, r3, r6, lr
 801e13a:	fb03 730a 	mla	r3, r3, sl, r7
 801e13e:	fb09 e202 	mla	r2, r9, r2, lr
 801e142:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801e146:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e14a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801e14e:	fb04 3408 	mla	r4, r4, r8, r3
 801e152:	9b02      	ldr	r3, [sp, #8]
 801e154:	b292      	uxth	r2, r2
 801e156:	fb09 4903 	mla	r9, r9, r3, r4
 801e15a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e15e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e162:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e166:	fb09 f902 	mul.w	r9, r9, r2
 801e16a:	ea40 0e0e 	orr.w	lr, r0, lr
 801e16e:	f109 0301 	add.w	r3, r9, #1
 801e172:	fa5f f08e 	uxtb.w	r0, lr
 801e176:	fb10 f002 	smulbb	r0, r0, r2
 801e17a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e17e:	780b      	ldrb	r3, [r1, #0]
 801e180:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e184:	fa5f f989 	uxtb.w	r9, r9
 801e188:	fb03 0309 	mla	r3, r3, r9, r0
 801e18c:	b29b      	uxth	r3, r3
 801e18e:	1c58      	adds	r0, r3, #1
 801e190:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e194:	7848      	ldrb	r0, [r1, #1]
 801e196:	fb10 f009 	smulbb	r0, r0, r9
 801e19a:	121b      	asrs	r3, r3, #8
 801e19c:	700b      	strb	r3, [r1, #0]
 801e19e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e1a2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e1a6:	fb03 0302 	mla	r3, r3, r2, r0
 801e1aa:	b29b      	uxth	r3, r3
 801e1ac:	1c58      	adds	r0, r3, #1
 801e1ae:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e1b2:	121b      	asrs	r3, r3, #8
 801e1b4:	704b      	strb	r3, [r1, #1]
 801e1b6:	788b      	ldrb	r3, [r1, #2]
 801e1b8:	fb13 f909 	smulbb	r9, r3, r9
 801e1bc:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e1c0:	fa1f fe8e 	uxth.w	lr, lr
 801e1c4:	f10e 0301 	add.w	r3, lr, #1
 801e1c8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e1cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e1d0:	f881 e002 	strb.w	lr, [r1, #2]
 801e1d4:	b007      	add	sp, #28
 801e1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1da:	2600      	movs	r6, #0
 801e1dc:	e6eb      	b.n	801dfb6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e1de:	2000      	movs	r0, #0
 801e1e0:	4606      	mov	r6, r0
 801e1e2:	e6f3      	b.n	801dfcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e1e4:	2000      	movs	r0, #0
 801e1e6:	e6f1      	b.n	801dfcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	e6ef      	b.n	801dfcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e1ec:	2500      	movs	r5, #0
 801e1ee:	e6ff      	b.n	801dff0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	4615      	mov	r5, r2
 801e1f4:	e708      	b.n	801e008 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e1f6:	4672      	mov	r2, lr
 801e1f8:	4675      	mov	r5, lr
 801e1fa:	e705      	b.n	801e008 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	e703      	b.n	801e008 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e200:	4622      	mov	r2, r4
 801e202:	e701      	b.n	801e008 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e204 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e208:	b09d      	sub	sp, #116	@ 0x74
 801e20a:	9219      	str	r2, [sp, #100]	@ 0x64
 801e20c:	9307      	str	r3, [sp, #28]
 801e20e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801e210:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801e214:	901b      	str	r0, [sp, #108]	@ 0x6c
 801e216:	931a      	str	r3, [sp, #104]	@ 0x68
 801e218:	6850      	ldr	r0, [r2, #4]
 801e21a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e21c:	6812      	ldr	r2, [r2, #0]
 801e21e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801e222:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801e226:	fb00 1303 	mla	r3, r0, r3, r1
 801e22a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e22e:	18d3      	adds	r3, r2, r3
 801e230:	930a      	str	r3, [sp, #40]	@ 0x28
 801e232:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	9310      	str	r3, [sp, #64]	@ 0x40
 801e238:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e23c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e23e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e240:	2b00      	cmp	r3, #0
 801e242:	dc03      	bgt.n	801e24c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e246:	2b00      	cmp	r3, #0
 801e248:	f340 8368 	ble.w	801e91c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e24c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e24e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e252:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e256:	1e48      	subs	r0, r1, #1
 801e258:	1e57      	subs	r7, r2, #1
 801e25a:	9b07      	ldr	r3, [sp, #28]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	f340 8187 	ble.w	801e570 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e262:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e266:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e26a:	d406      	bmi.n	801e27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e26c:	4584      	cmp	ip, r0
 801e26e:	da04      	bge.n	801e27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e270:	2b00      	cmp	r3, #0
 801e272:	db02      	blt.n	801e27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e274:	42bb      	cmp	r3, r7
 801e276:	f2c0 817c 	blt.w	801e572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e27a:	f11c 0c01 	adds.w	ip, ip, #1
 801e27e:	f100 816c 	bmi.w	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e282:	4561      	cmp	r1, ip
 801e284:	f2c0 8169 	blt.w	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e288:	3301      	adds	r3, #1
 801e28a:	f100 8166 	bmi.w	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e28e:	429a      	cmp	r2, r3
 801e290:	f2c0 8163 	blt.w	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e294:	9b07      	ldr	r3, [sp, #28]
 801e296:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e298:	9318      	str	r3, [sp, #96]	@ 0x60
 801e29a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	f340 8186 	ble.w	801e5ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e2a2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e2a4:	142a      	asrs	r2, r5, #16
 801e2a6:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e2aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e2ae:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e2b2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e2b6:	f100 81cb 	bmi.w	801e650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e2ba:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e2be:	4542      	cmp	r2, r8
 801e2c0:	f280 81c6 	bge.w	801e650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e2c4:	2800      	cmp	r0, #0
 801e2c6:	f2c0 81c3 	blt.w	801e650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e2ca:	f103 38ff 	add.w	r8, r3, #4294967295
 801e2ce:	4540      	cmp	r0, r8
 801e2d0:	f280 81be 	bge.w	801e650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e2d4:	fa0f f38e 	sxth.w	r3, lr
 801e2d8:	fb00 2203 	mla	r2, r0, r3, r2
 801e2dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e2de:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801e2e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801e2e6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e2ea:	2900      	cmp	r1, #0
 801e2ec:	f000 81a6 	beq.w	801e63c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e2f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e2f4:	900c      	str	r0, [sp, #48]	@ 0x30
 801e2f6:	0e00      	lsrs	r0, r0, #24
 801e2f8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e2fa:	f1bc 0f00 	cmp.w	ip, #0
 801e2fe:	d00f      	beq.n	801e320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801e304:	3b01      	subs	r3, #1
 801e306:	009b      	lsls	r3, r3, #2
 801e308:	3304      	adds	r3, #4
 801e30a:	eb08 0003 	add.w	r0, r8, r3
 801e30e:	f858 3003 	ldr.w	r3, [r8, r3]
 801e312:	9308      	str	r3, [sp, #32]
 801e314:	0e1b      	lsrs	r3, r3, #24
 801e316:	9311      	str	r3, [sp, #68]	@ 0x44
 801e318:	6843      	ldr	r3, [r0, #4]
 801e31a:	930d      	str	r3, [sp, #52]	@ 0x34
 801e31c:	0e1b      	lsrs	r3, r3, #24
 801e31e:	9314      	str	r3, [sp, #80]	@ 0x50
 801e320:	b289      	uxth	r1, r1
 801e322:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e324:	fa1f fc8c 	uxth.w	ip, ip
 801e328:	0108      	lsls	r0, r1, #4
 801e32a:	fb01 f90c 	mul.w	r9, r1, ip
 801e32e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801e332:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801e336:	eba0 0809 	sub.w	r8, r0, r9
 801e33a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e33c:	fa1f f18c 	uxth.w	r1, ip
 801e340:	fa1f f888 	uxth.w	r8, r8
 801e344:	1a5b      	subs	r3, r3, r1
 801e346:	fb08 f000 	mul.w	r0, r8, r0
 801e34a:	b29b      	uxth	r3, r3
 801e34c:	fb03 000e 	mla	r0, r3, lr, r0
 801e350:	fb01 0004 	mla	r0, r1, r4, r0
 801e354:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e356:	fb09 0004 	mla	r0, r9, r4, r0
 801e35a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e35e:	2800      	cmp	r0, #0
 801e360:	f000 80f2 	beq.w	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e364:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e368:	d01b      	beq.n	801e3a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e36a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801e36e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e372:	fb0e fa0a 	mul.w	sl, lr, sl
 801e376:	fb0e fe02 	mul.w	lr, lr, r2
 801e37a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e37e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e382:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e386:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e38a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e38e:	4452      	add	r2, sl
 801e390:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e394:	0a12      	lsrs	r2, r2, #8
 801e396:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e39a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e39e:	ea42 020c 	orr.w	r2, r2, ip
 801e3a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e3a4:	2cff      	cmp	r4, #255	@ 0xff
 801e3a6:	d021      	beq.n	801e3ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e3a8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e3aa:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e3ae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e3b0:	fb04 fb0b 	mul.w	fp, r4, fp
 801e3b4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e3b6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e3ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e3bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e3c0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e3c4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e3c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e3cc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e3d0:	44de      	add	lr, fp
 801e3d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e3d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e3da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e3e2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e3e6:	ea4e 040a 	orr.w	r4, lr, sl
 801e3ea:	940c      	str	r4, [sp, #48]	@ 0x30
 801e3ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e3ee:	2cff      	cmp	r4, #255	@ 0xff
 801e3f0:	d021      	beq.n	801e436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e3f2:	9c08      	ldr	r4, [sp, #32]
 801e3f4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e3f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e3fa:	fb04 fb0b 	mul.w	fp, r4, fp
 801e3fe:	9c08      	ldr	r4, [sp, #32]
 801e400:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e404:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e406:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e40a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e40e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e412:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e416:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e41a:	44de      	add	lr, fp
 801e41c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e420:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e424:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e428:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e42c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e430:	ea4e 040a 	orr.w	r4, lr, sl
 801e434:	9408      	str	r4, [sp, #32]
 801e436:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e438:	2cff      	cmp	r4, #255	@ 0xff
 801e43a:	d021      	beq.n	801e480 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e43c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e43e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e442:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e444:	fb04 fb0b 	mul.w	fp, r4, fp
 801e448:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e44a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e44e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e450:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e454:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e458:	fb04 fa0a 	mul.w	sl, r4, sl
 801e45c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e460:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e464:	44de      	add	lr, fp
 801e466:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e46a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e46e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e472:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e476:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e47a:	ea4e 040a 	orr.w	r4, lr, sl
 801e47e:	940d      	str	r4, [sp, #52]	@ 0x34
 801e480:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e482:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801e486:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e48a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e48e:	9c08      	ldr	r4, [sp, #32]
 801e490:	fb08 fc0c 	mul.w	ip, r8, ip
 801e494:	fb03 cc0e 	mla	ip, r3, lr, ip
 801e498:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e49c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e49e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e4a2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e4a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e4a8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e4ac:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e4b0:	fb08 f80e 	mul.w	r8, r8, lr
 801e4b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4b8:	fb03 8202 	mla	r2, r3, r2, r8
 801e4bc:	9b08      	ldr	r3, [sp, #32]
 801e4be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e4c2:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801e4c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4c8:	fb01 220a 	mla	r2, r1, sl, r2
 801e4cc:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801e4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e4d2:	fb09 2901 	mla	r9, r9, r1, r2
 801e4d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e4d8:	4343      	muls	r3, r0
 801e4da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e4de:	1c58      	adds	r0, r3, #1
 801e4e0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e4e4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e4e8:	783b      	ldrb	r3, [r7, #0]
 801e4ea:	ea4c 0c09 	orr.w	ip, ip, r9
 801e4ee:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e4f2:	fa5f f28c 	uxtb.w	r2, ip
 801e4f6:	b2c0      	uxtb	r0, r0
 801e4f8:	fb12 f201 	smulbb	r2, r2, r1
 801e4fc:	fb03 2300 	mla	r3, r3, r0, r2
 801e500:	b29b      	uxth	r3, r3
 801e502:	1c5a      	adds	r2, r3, #1
 801e504:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e508:	787a      	ldrb	r2, [r7, #1]
 801e50a:	fb12 f200 	smulbb	r2, r2, r0
 801e50e:	121b      	asrs	r3, r3, #8
 801e510:	703b      	strb	r3, [r7, #0]
 801e512:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e516:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e51a:	fb03 2301 	mla	r3, r3, r1, r2
 801e51e:	b29b      	uxth	r3, r3
 801e520:	1c5a      	adds	r2, r3, #1
 801e522:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e526:	121b      	asrs	r3, r3, #8
 801e528:	707b      	strb	r3, [r7, #1]
 801e52a:	78bb      	ldrb	r3, [r7, #2]
 801e52c:	fb13 f000 	smulbb	r0, r3, r0
 801e530:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e534:	fa1f fc8c 	uxth.w	ip, ip
 801e538:	f10c 0301 	add.w	r3, ip, #1
 801e53c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e540:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e544:	f887 c002 	strb.w	ip, [r7, #2]
 801e548:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e54a:	3703      	adds	r7, #3
 801e54c:	441d      	add	r5, r3
 801e54e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e550:	441e      	add	r6, r3
 801e552:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e554:	3b01      	subs	r3, #1
 801e556:	9318      	str	r3, [sp, #96]	@ 0x60
 801e558:	e69f      	b.n	801e29a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e55a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e55c:	441d      	add	r5, r3
 801e55e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e560:	441e      	add	r6, r3
 801e562:	9b07      	ldr	r3, [sp, #28]
 801e564:	3b01      	subs	r3, #1
 801e566:	9307      	str	r3, [sp, #28]
 801e568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e56a:	3303      	adds	r3, #3
 801e56c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e56e:	e674      	b.n	801e25a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e570:	d025      	beq.n	801e5be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e572:	9b07      	ldr	r3, [sp, #28]
 801e574:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801e576:	3b01      	subs	r3, #1
 801e578:	fb00 5003 	mla	r0, r0, r3, r5
 801e57c:	1400      	asrs	r0, r0, #16
 801e57e:	f53f ae89 	bmi.w	801e294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e582:	3901      	subs	r1, #1
 801e584:	4288      	cmp	r0, r1
 801e586:	f6bf ae85 	bge.w	801e294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e58a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801e58c:	fb01 6303 	mla	r3, r1, r3, r6
 801e590:	141b      	asrs	r3, r3, #16
 801e592:	f53f ae7f 	bmi.w	801e294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e596:	3a01      	subs	r2, #1
 801e598:	4293      	cmp	r3, r2
 801e59a:	f6bf ae7b 	bge.w	801e294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e59e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e5a4:	f103 0e03 	add.w	lr, r3, #3
 801e5a8:	f1bb 0f00 	cmp.w	fp, #0
 801e5ac:	dc6e      	bgt.n	801e68c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e5ae:	9b07      	ldr	r3, [sp, #28]
 801e5b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e5ba:	4423      	add	r3, r4
 801e5bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e5be:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	f340 81ab 	ble.w	801e91c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e5c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e5ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e5cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5d4:	eef0 6a62 	vmov.f32	s13, s5
 801e5d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e5dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5e4:	ee16 5a90 	vmov	r5, s13
 801e5e8:	eef0 6a43 	vmov.f32	s13, s6
 801e5ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5f0:	ee16 6a90 	vmov	r6, s13
 801e5f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e600:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e604:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e608:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e60c:	ee12 2a90 	vmov	r2, s5
 801e610:	eef0 2a47 	vmov.f32	s5, s14
 801e614:	fb92 f3f3 	sdiv	r3, r2, r3
 801e618:	ee13 2a10 	vmov	r2, s6
 801e61c:	9329      	str	r3, [sp, #164]	@ 0xa4
 801e61e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e620:	eeb0 3a67 	vmov.f32	s6, s15
 801e624:	fb92 f3f3 	sdiv	r3, r2, r3
 801e628:	932a      	str	r3, [sp, #168]	@ 0xa8
 801e62a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e62c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e62e:	3b01      	subs	r3, #1
 801e630:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e632:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e634:	bf08      	it	eq
 801e636:	4613      	moveq	r3, r2
 801e638:	9307      	str	r3, [sp, #28]
 801e63a:	e600      	b.n	801e23e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e63c:	f1bc 0f00 	cmp.w	ip, #0
 801e640:	f43f ae6e 	beq.w	801e320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e644:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e648:	9308      	str	r3, [sp, #32]
 801e64a:	0e1b      	lsrs	r3, r3, #24
 801e64c:	9311      	str	r3, [sp, #68]	@ 0x44
 801e64e:	e667      	b.n	801e320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e650:	f112 0801 	adds.w	r8, r2, #1
 801e654:	f53f af78 	bmi.w	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e658:	45c6      	cmp	lr, r8
 801e65a:	f6ff af75 	blt.w	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e65e:	f110 0801 	adds.w	r8, r0, #1
 801e662:	f53f af71 	bmi.w	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e666:	4543      	cmp	r3, r8
 801e668:	f6ff af6e 	blt.w	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e66c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e66e:	b21b      	sxth	r3, r3
 801e670:	9201      	str	r2, [sp, #4]
 801e672:	9300      	str	r3, [sp, #0]
 801e674:	fa0f f38e 	sxth.w	r3, lr
 801e678:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e67a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e67e:	e9cd c404 	strd	ip, r4, [sp, #16]
 801e682:	4639      	mov	r1, r7
 801e684:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e686:	f7ff fc79 	bl	801df7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801e68a:	e75d      	b.n	801e548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e68c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e68e:	142f      	asrs	r7, r5, #16
 801e690:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e692:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e696:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e69a:	1433      	asrs	r3, r6, #16
 801e69c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e6a0:	fb02 7303 	mla	r3, r2, r3, r7
 801e6a4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801e6a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e6ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e6b0:	2900      	cmp	r1, #0
 801e6b2:	f000 812a 	beq.w	801e90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e6b6:	687c      	ldr	r4, [r7, #4]
 801e6b8:	940e      	str	r4, [sp, #56]	@ 0x38
 801e6ba:	0e24      	lsrs	r4, r4, #24
 801e6bc:	9415      	str	r4, [sp, #84]	@ 0x54
 801e6be:	b178      	cbz	r0, 801e6e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e6c0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e6c4:	3a01      	subs	r2, #1
 801e6c6:	0092      	lsls	r2, r2, #2
 801e6c8:	3204      	adds	r2, #4
 801e6ca:	eb07 0802 	add.w	r8, r7, r2
 801e6ce:	58ba      	ldr	r2, [r7, r2]
 801e6d0:	9209      	str	r2, [sp, #36]	@ 0x24
 801e6d2:	0e12      	lsrs	r2, r2, #24
 801e6d4:	9212      	str	r2, [sp, #72]	@ 0x48
 801e6d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e6da:	920f      	str	r2, [sp, #60]	@ 0x3c
 801e6dc:	0e12      	lsrs	r2, r2, #24
 801e6de:	9216      	str	r2, [sp, #88]	@ 0x58
 801e6e0:	b289      	uxth	r1, r1
 801e6e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6e4:	b280      	uxth	r0, r0
 801e6e6:	fb01 f900 	mul.w	r9, r1, r0
 801e6ea:	0109      	lsls	r1, r1, #4
 801e6ec:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e6f0:	eba1 0809 	sub.w	r8, r1, r9
 801e6f4:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801e6f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801e6fa:	b280      	uxth	r0, r0
 801e6fc:	fa1f f888 	uxth.w	r8, r8
 801e700:	1a12      	subs	r2, r2, r0
 801e702:	fb08 f101 	mul.w	r1, r8, r1
 801e706:	b292      	uxth	r2, r2
 801e708:	fb02 110c 	mla	r1, r2, ip, r1
 801e70c:	fb00 1104 	mla	r1, r0, r4, r1
 801e710:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e712:	fb09 1104 	mla	r1, r9, r4, r1
 801e716:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e71a:	2900      	cmp	r1, #0
 801e71c:	f000 80ec 	beq.w	801e8f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801e720:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e724:	d019      	beq.n	801e75a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801e726:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e72a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e72e:	fb0c fa0a 	mul.w	sl, ip, sl
 801e732:	fb0c fc03 	mul.w	ip, ip, r3
 801e736:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e73a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e73e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e742:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e746:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e74a:	4453      	add	r3, sl
 801e74c:	0a3f      	lsrs	r7, r7, #8
 801e74e:	0a1b      	lsrs	r3, r3, #8
 801e750:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e754:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e758:	433b      	orrs	r3, r7
 801e75a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e75c:	2cff      	cmp	r4, #255	@ 0xff
 801e75e:	d020      	beq.n	801e7a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801e760:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e762:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e766:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e768:	4367      	muls	r7, r4
 801e76a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e76c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e770:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e774:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e776:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e77a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e77e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e782:	44bc      	add	ip, r7
 801e784:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e78c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e790:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e798:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e79c:	ea4c 040a 	orr.w	r4, ip, sl
 801e7a0:	940e      	str	r4, [sp, #56]	@ 0x38
 801e7a2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e7a4:	2cff      	cmp	r4, #255	@ 0xff
 801e7a6:	d020      	beq.n	801e7ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801e7a8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e7aa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e7ae:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e7b0:	4367      	muls	r7, r4
 801e7b2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e7b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e7b8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e7bc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e7be:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e7c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e7c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e7ca:	44bc      	add	ip, r7
 801e7cc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e7d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e7d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e7dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e7e4:	ea4c 040a 	orr.w	r4, ip, sl
 801e7e8:	9409      	str	r4, [sp, #36]	@ 0x24
 801e7ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e7ec:	2cff      	cmp	r4, #255	@ 0xff
 801e7ee:	d020      	beq.n	801e832 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801e7f0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e7f2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e7f6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e7f8:	4367      	muls	r7, r4
 801e7fa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e7fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e800:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e804:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e806:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e80a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e80e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e812:	44bc      	add	ip, r7
 801e814:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e818:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e81c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e820:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e824:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e828:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e82c:	ea4c 040a 	orr.w	r4, ip, sl
 801e830:	940f      	str	r4, [sp, #60]	@ 0x3c
 801e832:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e834:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e838:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e83c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e840:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e842:	fb08 f707 	mul.w	r7, r8, r7
 801e846:	fb02 770c 	mla	r7, r2, ip, r7
 801e84a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e84e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e850:	fb00 770c 	mla	r7, r0, ip, r7
 801e854:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e858:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e85a:	fb09 770c 	mla	r7, r9, ip, r7
 801e85e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e862:	fb08 f80c 	mul.w	r8, r8, ip
 801e866:	0a3f      	lsrs	r7, r7, #8
 801e868:	fb02 8303 	mla	r3, r2, r3, r8
 801e86c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e86e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e872:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e876:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e878:	fb00 330a 	mla	r3, r0, sl, r3
 801e87c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e880:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e882:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e888:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e88c:	434b      	muls	r3, r1
 801e88e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e892:	1c59      	adds	r1, r3, #1
 801e894:	ea47 070c 	orr.w	r7, r7, ip
 801e898:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e89c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e8a0:	b2fa      	uxtb	r2, r7
 801e8a2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e8a6:	fb12 f200 	smulbb	r2, r2, r0
 801e8aa:	b2c9      	uxtb	r1, r1
 801e8ac:	fb03 2301 	mla	r3, r3, r1, r2
 801e8b0:	b29b      	uxth	r3, r3
 801e8b2:	1c5a      	adds	r2, r3, #1
 801e8b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e8b8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e8bc:	fb12 f201 	smulbb	r2, r2, r1
 801e8c0:	121b      	asrs	r3, r3, #8
 801e8c2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e8c6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e8ca:	0c3f      	lsrs	r7, r7, #16
 801e8cc:	fb03 2300 	mla	r3, r3, r0, r2
 801e8d0:	b29b      	uxth	r3, r3
 801e8d2:	1c5a      	adds	r2, r3, #1
 801e8d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e8d8:	121b      	asrs	r3, r3, #8
 801e8da:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e8de:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e8e2:	fb13 f101 	smulbb	r1, r3, r1
 801e8e6:	fb07 1700 	mla	r7, r7, r0, r1
 801e8ea:	b2bf      	uxth	r7, r7
 801e8ec:	1c79      	adds	r1, r7, #1
 801e8ee:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801e8f2:	123f      	asrs	r7, r7, #8
 801e8f4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e8f8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e8fa:	f10e 0e03 	add.w	lr, lr, #3
 801e8fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e902:	441d      	add	r5, r3
 801e904:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e906:	441e      	add	r6, r3
 801e908:	e64e      	b.n	801e5a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801e90a:	2800      	cmp	r0, #0
 801e90c:	f43f aee8 	beq.w	801e6e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e910:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e914:	9209      	str	r2, [sp, #36]	@ 0x24
 801e916:	0e12      	lsrs	r2, r2, #24
 801e918:	9212      	str	r2, [sp, #72]	@ 0x48
 801e91a:	e6e1      	b.n	801e6e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e91c:	b01d      	add	sp, #116	@ 0x74
 801e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e922 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801e922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e926:	b087      	sub	sp, #28
 801e928:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801e92c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801e930:	fb05 7003 	mla	r0, r5, r3, r7
 801e934:	2d00      	cmp	r5, #0
 801e936:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801e93a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801e93e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e942:	f2c0 810a 	blt.w	801eb5a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801e946:	45a8      	cmp	r8, r5
 801e948:	f340 8107 	ble.w	801eb5a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801e94c:	2f00      	cmp	r7, #0
 801e94e:	f2c0 8102 	blt.w	801eb56 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801e952:	42bb      	cmp	r3, r7
 801e954:	f340 80ff 	ble.w	801eb56 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801e958:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e95c:	1c7a      	adds	r2, r7, #1
 801e95e:	f100 80ff 	bmi.w	801eb60 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801e962:	4293      	cmp	r3, r2
 801e964:	f340 80fc 	ble.w	801eb60 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801e968:	2c00      	cmp	r4, #0
 801e96a:	f000 80fb 	beq.w	801eb64 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801e96e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e972:	3501      	adds	r5, #1
 801e974:	f100 80fa 	bmi.w	801eb6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801e978:	45a8      	cmp	r8, r5
 801e97a:	f340 80f7 	ble.w	801eb6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801e97e:	f1be 0f00 	cmp.w	lr, #0
 801e982:	f000 80f6 	beq.w	801eb72 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801e986:	2f00      	cmp	r7, #0
 801e988:	f2c0 80ee 	blt.w	801eb68 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801e98c:	42bb      	cmp	r3, r7
 801e98e:	f340 80eb 	ble.w	801eb68 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801e992:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e996:	3701      	adds	r7, #1
 801e998:	f100 80ee 	bmi.w	801eb78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801e99c:	42bb      	cmp	r3, r7
 801e99e:	f340 80eb 	ble.w	801eb78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801e9a2:	2c00      	cmp	r4, #0
 801e9a4:	f000 80ea 	beq.w	801eb7c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801e9a8:	3301      	adds	r3, #1
 801e9aa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e9ae:	fa1f fc84 	uxth.w	ip, r4
 801e9b2:	fa1f fe8e 	uxth.w	lr, lr
 801e9b6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e9ba:	fb0c f90e 	mul.w	r9, ip, lr
 801e9be:	0e13      	lsrs	r3, r2, #24
 801e9c0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e9c4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e9c8:	9302      	str	r3, [sp, #8]
 801e9ca:	ebac 0709 	sub.w	r7, ip, r9
 801e9ce:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801e9d2:	fa1f f48e 	uxth.w	r4, lr
 801e9d6:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801e9da:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e9de:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e9e2:	fb0a fe0e 	mul.w	lr, sl, lr
 801e9e6:	1b1b      	subs	r3, r3, r4
 801e9e8:	fb0a f606 	mul.w	r6, sl, r6
 801e9ec:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e9f0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e9f4:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9fe:	b2bf      	uxth	r7, r7
 801ea00:	9301      	str	r3, [sp, #4]
 801ea02:	44e6      	add	lr, ip
 801ea04:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ea08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea0c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ea10:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801ea14:	9303      	str	r3, [sp, #12]
 801ea16:	0a33      	lsrs	r3, r6, #8
 801ea18:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801ea1c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ea20:	9304      	str	r3, [sp, #16]
 801ea22:	fb0b f606 	mul.w	r6, fp, r6
 801ea26:	fb0b f000 	mul.w	r0, fp, r0
 801ea2a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ea2e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ea32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea36:	44b6      	add	lr, r6
 801ea38:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ea3c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ea40:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ea44:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ea48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea4c:	fb08 f606 	mul.w	r6, r8, r6
 801ea50:	0a03      	lsrs	r3, r0, #8
 801ea52:	fb08 f505 	mul.w	r5, r8, r5
 801ea56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea5a:	0a30      	lsrs	r0, r6, #8
 801ea5c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ea60:	9305      	str	r3, [sp, #20]
 801ea62:	0e13      	lsrs	r3, r2, #24
 801ea64:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ea68:	fb0e fe07 	mul.w	lr, lr, r7
 801ea6c:	4430      	add	r0, r6
 801ea6e:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801ea72:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ea76:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801ea7a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ea7e:	0a00      	lsrs	r0, r0, #8
 801ea80:	435e      	muls	r6, r3
 801ea82:	0a2d      	lsrs	r5, r5, #8
 801ea84:	435a      	muls	r2, r3
 801ea86:	9b03      	ldr	r3, [sp, #12]
 801ea88:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ea8c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ea90:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ea94:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea98:	44b4      	add	ip, r6
 801ea9a:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801ea9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eaa2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801eaa6:	9e01      	ldr	r6, [sp, #4]
 801eaa8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eaac:	fb03 ee06 	mla	lr, r3, r6, lr
 801eab0:	9b04      	ldr	r3, [sp, #16]
 801eab2:	0a12      	lsrs	r2, r2, #8
 801eab4:	fb0c ee09 	mla	lr, ip, r9, lr
 801eab8:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801eabc:	9b05      	ldr	r3, [sp, #20]
 801eabe:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801eac2:	fb00 ee04 	mla	lr, r0, r4, lr
 801eac6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eaca:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801eace:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ead2:	9b01      	ldr	r3, [sp, #4]
 801ead4:	fb07 fe0e 	mul.w	lr, r7, lr
 801ead8:	fb07 f70b 	mul.w	r7, r7, fp
 801eadc:	fb03 ee06 	mla	lr, r3, r6, lr
 801eae0:	fb03 730a 	mla	r3, r3, sl, r7
 801eae4:	fb09 e202 	mla	r2, r9, r2, lr
 801eae8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801eaec:	fb04 2e0e 	mla	lr, r4, lr, r2
 801eaf0:	fb04 3408 	mla	r4, r4, r8, r3
 801eaf4:	9b02      	ldr	r3, [sp, #8]
 801eaf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eafa:	fb09 4903 	mla	r9, r9, r3, r4
 801eafe:	780b      	ldrb	r3, [r1, #0]
 801eb00:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801eb04:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801eb08:	ea40 0e0e 	orr.w	lr, r0, lr
 801eb0c:	fa5f f989 	uxtb.w	r9, r9
 801eb10:	fb03 f209 	mul.w	r2, r3, r9
 801eb14:	1c53      	adds	r3, r2, #1
 801eb16:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb1a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801eb1e:	700b      	strb	r3, [r1, #0]
 801eb20:	784b      	ldrb	r3, [r1, #1]
 801eb22:	fb03 f309 	mul.w	r3, r3, r9
 801eb26:	1c5a      	adds	r2, r3, #1
 801eb28:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eb2c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801eb30:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801eb34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb38:	704b      	strb	r3, [r1, #1]
 801eb3a:	788b      	ldrb	r3, [r1, #2]
 801eb3c:	fb03 f909 	mul.w	r9, r3, r9
 801eb40:	f109 0301 	add.w	r3, r9, #1
 801eb44:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801eb48:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801eb4c:	f881 e002 	strb.w	lr, [r1, #2]
 801eb50:	b007      	add	sp, #28
 801eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb56:	2600      	movs	r6, #0
 801eb58:	e700      	b.n	801e95c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801eb5a:	2000      	movs	r0, #0
 801eb5c:	4606      	mov	r6, r0
 801eb5e:	e708      	b.n	801e972 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eb60:	2000      	movs	r0, #0
 801eb62:	e706      	b.n	801e972 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eb64:	4620      	mov	r0, r4
 801eb66:	e704      	b.n	801e972 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eb68:	2500      	movs	r5, #0
 801eb6a:	e714      	b.n	801e996 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	4615      	mov	r5, r2
 801eb70:	e71d      	b.n	801e9ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eb72:	4672      	mov	r2, lr
 801eb74:	4675      	mov	r5, lr
 801eb76:	e71a      	b.n	801e9ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eb78:	2200      	movs	r2, #0
 801eb7a:	e718      	b.n	801e9ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eb7c:	4622      	mov	r2, r4
 801eb7e:	e716      	b.n	801e9ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801eb80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb84:	b099      	sub	sp, #100	@ 0x64
 801eb86:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801eb8a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801eb8c:	9017      	str	r0, [sp, #92]	@ 0x5c
 801eb8e:	9306      	str	r3, [sp, #24]
 801eb90:	6850      	ldr	r0, [r2, #4]
 801eb92:	6812      	ldr	r2, [r2, #0]
 801eb94:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801eb98:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801eb9c:	fb00 1303 	mla	r3, r0, r3, r1
 801eba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eba4:	18d3      	adds	r3, r2, r3
 801eba6:	9309      	str	r3, [sp, #36]	@ 0x24
 801eba8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	930e      	str	r3, [sp, #56]	@ 0x38
 801ebae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	dc03      	bgt.n	801ebbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ebb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	f340 8360 	ble.w	801f27c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ebbc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ebbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ebc2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ebc6:	1e48      	subs	r0, r1, #1
 801ebc8:	1e57      	subs	r7, r2, #1
 801ebca:	9b06      	ldr	r3, [sp, #24]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	f340 817b 	ble.w	801eec8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801ebd2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ebd6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ebda:	d406      	bmi.n	801ebea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ebdc:	4584      	cmp	ip, r0
 801ebde:	da04      	bge.n	801ebea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	db02      	blt.n	801ebea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ebe4:	42bb      	cmp	r3, r7
 801ebe6:	f2c0 8170 	blt.w	801eeca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ebea:	f11c 0c01 	adds.w	ip, ip, #1
 801ebee:	f100 8160 	bmi.w	801eeb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ebf2:	4561      	cmp	r1, ip
 801ebf4:	f2c0 815d 	blt.w	801eeb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ebf8:	3301      	adds	r3, #1
 801ebfa:	f100 815a 	bmi.w	801eeb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ebfe:	429a      	cmp	r2, r3
 801ec00:	f2c0 8157 	blt.w	801eeb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ec04:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ec08:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ec0a:	f1b8 0f00 	cmp.w	r8, #0
 801ec0e:	f340 8179 	ble.w	801ef04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ec12:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801ec14:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ec18:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ec1a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ec1e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ec22:	142a      	asrs	r2, r5, #16
 801ec24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ec28:	689b      	ldr	r3, [r3, #8]
 801ec2a:	f100 81be 	bmi.w	801efaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ec2e:	f103 39ff 	add.w	r9, r3, #4294967295
 801ec32:	454a      	cmp	r2, r9
 801ec34:	f280 81b9 	bge.w	801efaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ec38:	f1bc 0f00 	cmp.w	ip, #0
 801ec3c:	f2c0 81b5 	blt.w	801efaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ec40:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ec44:	45cc      	cmp	ip, r9
 801ec46:	f280 81b0 	bge.w	801efaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ec4a:	b21b      	sxth	r3, r3
 801ec4c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ec4e:	fb0c 2203 	mla	r2, ip, r3, r2
 801ec52:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ec56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ec5a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ec5e:	2900      	cmp	r1, #0
 801ec60:	f000 8197 	beq.w	801ef92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ec64:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ec68:	940a      	str	r4, [sp, #40]	@ 0x28
 801ec6a:	0e24      	lsrs	r4, r4, #24
 801ec6c:	9411      	str	r4, [sp, #68]	@ 0x44
 801ec6e:	b180      	cbz	r0, 801ec92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ec70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ec74:	3b01      	subs	r3, #1
 801ec76:	009b      	lsls	r3, r3, #2
 801ec78:	3304      	adds	r3, #4
 801ec7a:	eb09 0c03 	add.w	ip, r9, r3
 801ec7e:	f859 3003 	ldr.w	r3, [r9, r3]
 801ec82:	9307      	str	r3, [sp, #28]
 801ec84:	0e1b      	lsrs	r3, r3, #24
 801ec86:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec88:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ec8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec8e:	0e1b      	lsrs	r3, r3, #24
 801ec90:	9312      	str	r3, [sp, #72]	@ 0x48
 801ec92:	b289      	uxth	r1, r1
 801ec94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ec96:	b280      	uxth	r0, r0
 801ec98:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ec9a:	fb01 fa00 	mul.w	sl, r1, r0
 801ec9e:	0109      	lsls	r1, r1, #4
 801eca0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801eca4:	eba1 090a 	sub.w	r9, r1, sl
 801eca8:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ecac:	b280      	uxth	r0, r0
 801ecae:	fa1f f989 	uxth.w	r9, r9
 801ecb2:	1a09      	subs	r1, r1, r0
 801ecb4:	fb09 f303 	mul.w	r3, r9, r3
 801ecb8:	b289      	uxth	r1, r1
 801ecba:	fb01 330e 	mla	r3, r1, lr, r3
 801ecbe:	fb00 3304 	mla	r3, r0, r4, r3
 801ecc2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ecc4:	fb0a 3304 	mla	r3, sl, r4, r3
 801ecc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	f000 80e8 	beq.w	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ecd2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ecd6:	d01b      	beq.n	801ed10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ecd8:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801ecdc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ece0:	fb0e fb0b 	mul.w	fp, lr, fp
 801ece4:	fb0e fe02 	mul.w	lr, lr, r2
 801ece8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ecec:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ecf0:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ecf4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ecf8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ecfc:	445a      	add	r2, fp
 801ecfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed02:	0a12      	lsrs	r2, r2, #8
 801ed04:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ed08:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ed0c:	ea42 020c 	orr.w	r2, r2, ip
 801ed10:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ed12:	2cff      	cmp	r4, #255	@ 0xff
 801ed14:	d021      	beq.n	801ed5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ed16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ed18:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ed1c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ed1e:	fb04 fc0c 	mul.w	ip, r4, ip
 801ed22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ed24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ed28:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ed2c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ed2e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ed32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed36:	fb04 fb0b 	mul.w	fp, r4, fp
 801ed3a:	44e6      	add	lr, ip
 801ed3c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ed40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed44:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ed48:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed4c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ed50:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ed54:	ea4e 040b 	orr.w	r4, lr, fp
 801ed58:	940a      	str	r4, [sp, #40]	@ 0x28
 801ed5a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ed5c:	2cff      	cmp	r4, #255	@ 0xff
 801ed5e:	d021      	beq.n	801eda4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ed60:	9c07      	ldr	r4, [sp, #28]
 801ed62:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ed66:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ed68:	fb04 fc0c 	mul.w	ip, r4, ip
 801ed6c:	9c07      	ldr	r4, [sp, #28]
 801ed6e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ed72:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ed76:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ed78:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ed7c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed80:	fb04 fb0b 	mul.w	fp, r4, fp
 801ed84:	44e6      	add	lr, ip
 801ed86:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ed8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed8e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ed92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed96:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ed9a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ed9e:	ea4e 040b 	orr.w	r4, lr, fp
 801eda2:	9407      	str	r4, [sp, #28]
 801eda4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801eda6:	2cff      	cmp	r4, #255	@ 0xff
 801eda8:	d021      	beq.n	801edee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801edaa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edac:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801edb0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801edb2:	fb04 fc0c 	mul.w	ip, r4, ip
 801edb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edb8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801edbc:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801edc0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801edc2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801edc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801edca:	fb04 fb0b 	mul.w	fp, r4, fp
 801edce:	44e6      	add	lr, ip
 801edd0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801edd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801edd8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801eddc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ede0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ede4:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ede8:	ea4e 040b 	orr.w	r4, lr, fp
 801edec:	940b      	str	r4, [sp, #44]	@ 0x2c
 801edee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801edf0:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801edf4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801edf8:	2bff      	cmp	r3, #255	@ 0xff
 801edfa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801edfe:	9c07      	ldr	r4, [sp, #28]
 801ee00:	fb09 fc0c 	mul.w	ip, r9, ip
 801ee04:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ee08:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ee0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee0e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ee12:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ee16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ee18:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ee1c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ee20:	fb09 f90e 	mul.w	r9, r9, lr
 801ee24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee28:	fb01 9202 	mla	r2, r1, r2, r9
 801ee2c:	9907      	ldr	r1, [sp, #28]
 801ee2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee32:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801ee36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee38:	fb00 220b 	mla	r2, r0, fp, r2
 801ee3c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801ee40:	fb0a 2a00 	mla	sl, sl, r0, r2
 801ee44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee4c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ee50:	fa5f f08c 	uxtb.w	r0, ip
 801ee54:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ee58:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ee5c:	f000 80a2 	beq.w	801efa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801ee60:	43db      	mvns	r3, r3
 801ee62:	783a      	ldrb	r2, [r7, #0]
 801ee64:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ee68:	b2db      	uxtb	r3, r3
 801ee6a:	fb02 fe03 	mul.w	lr, r2, r3
 801ee6e:	fb0a fa03 	mul.w	sl, sl, r3
 801ee72:	f10e 0201 	add.w	r2, lr, #1
 801ee76:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801ee7a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ee7e:	703a      	strb	r2, [r7, #0]
 801ee80:	787a      	ldrb	r2, [r7, #1]
 801ee82:	fb02 f003 	mul.w	r0, r2, r3
 801ee86:	f10a 0301 	add.w	r3, sl, #1
 801ee8a:	1c42      	adds	r2, r0, #1
 801ee8c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ee90:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801ee94:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ee98:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ee9c:	707a      	strb	r2, [r7, #1]
 801ee9e:	f887 c002 	strb.w	ip, [r7, #2]
 801eea2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801eea4:	3703      	adds	r7, #3
 801eea6:	f108 38ff 	add.w	r8, r8, #4294967295
 801eeaa:	441d      	add	r5, r3
 801eeac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801eeae:	441e      	add	r6, r3
 801eeb0:	e6ab      	b.n	801ec0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eeb2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801eeb4:	441d      	add	r5, r3
 801eeb6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801eeb8:	441e      	add	r6, r3
 801eeba:	9b06      	ldr	r3, [sp, #24]
 801eebc:	3b01      	subs	r3, #1
 801eebe:	9306      	str	r3, [sp, #24]
 801eec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eec2:	3303      	adds	r3, #3
 801eec4:	9309      	str	r3, [sp, #36]	@ 0x24
 801eec6:	e680      	b.n	801ebca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eec8:	d024      	beq.n	801ef14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801eeca:	9b06      	ldr	r3, [sp, #24]
 801eecc:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801eece:	3b01      	subs	r3, #1
 801eed0:	fb00 5003 	mla	r0, r0, r3, r5
 801eed4:	1400      	asrs	r0, r0, #16
 801eed6:	f53f ae95 	bmi.w	801ec04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eeda:	3901      	subs	r1, #1
 801eedc:	4288      	cmp	r0, r1
 801eede:	f6bf ae91 	bge.w	801ec04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eee2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801eee4:	fb01 6303 	mla	r3, r1, r3, r6
 801eee8:	141b      	asrs	r3, r3, #16
 801eeea:	f53f ae8b 	bmi.w	801ec04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eeee:	3a01      	subs	r2, #1
 801eef0:	4293      	cmp	r3, r2
 801eef2:	f6bf ae87 	bge.w	801ec04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eef8:	f8dd b018 	ldr.w	fp, [sp, #24]
 801eefc:	1cdf      	adds	r7, r3, #3
 801eefe:	f1bb 0f00 	cmp.w	fp, #0
 801ef02:	dc6e      	bgt.n	801efe2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801ef04:	9b06      	ldr	r3, [sp, #24]
 801ef06:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ef0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef10:	4423      	add	r3, r4
 801ef12:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	f340 81b0 	ble.w	801f27c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ef1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ef20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ef22:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef2a:	eef0 6a62 	vmov.f32	s13, s5
 801ef2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef32:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef3a:	ee16 5a90 	vmov	r5, s13
 801ef3e:	eef0 6a43 	vmov.f32	s13, s6
 801ef42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef46:	ee16 6a90 	vmov	r6, s13
 801ef4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef52:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef62:	ee12 2a90 	vmov	r2, s5
 801ef66:	eef0 2a47 	vmov.f32	s5, s14
 801ef6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef6e:	ee13 2a10 	vmov	r2, s6
 801ef72:	9325      	str	r3, [sp, #148]	@ 0x94
 801ef74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ef76:	eeb0 3a67 	vmov.f32	s6, s15
 801ef7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef7e:	9326      	str	r3, [sp, #152]	@ 0x98
 801ef80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ef82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ef84:	3b01      	subs	r3, #1
 801ef86:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ef8a:	bf08      	it	eq
 801ef8c:	4613      	moveq	r3, r2
 801ef8e:	9306      	str	r3, [sp, #24]
 801ef90:	e60d      	b.n	801ebae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ef92:	2800      	cmp	r0, #0
 801ef94:	f43f ae7d 	beq.w	801ec92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ef98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ef9c:	9307      	str	r3, [sp, #28]
 801ef9e:	0e1b      	lsrs	r3, r3, #24
 801efa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801efa2:	e676      	b.n	801ec92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801efa4:	7038      	strb	r0, [r7, #0]
 801efa6:	7079      	strb	r1, [r7, #1]
 801efa8:	e779      	b.n	801ee9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801efaa:	f112 0901 	adds.w	r9, r2, #1
 801efae:	f53f af78 	bmi.w	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801efb2:	454b      	cmp	r3, r9
 801efb4:	f6ff af75 	blt.w	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801efb8:	f11c 0901 	adds.w	r9, ip, #1
 801efbc:	f53f af71 	bmi.w	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801efc0:	45ce      	cmp	lr, r9
 801efc2:	f6ff af6e 	blt.w	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801efc6:	b21b      	sxth	r3, r3
 801efc8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801efcc:	fa0f f28e 	sxth.w	r2, lr
 801efd0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801efd4:	9200      	str	r2, [sp, #0]
 801efd6:	4639      	mov	r1, r7
 801efd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efda:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801efdc:	f7ff fca1 	bl	801e922 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801efe0:	e75f      	b.n	801eea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801efe2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801efe4:	1429      	asrs	r1, r5, #16
 801efe6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801efe8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801efec:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801eff0:	1433      	asrs	r3, r6, #16
 801eff2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801eff6:	fb0c 1303 	mla	r3, ip, r3, r1
 801effa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801effc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f000:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f004:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f008:	2a00      	cmp	r2, #0
 801f00a:	f000 8129 	beq.w	801f260 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f00e:	684c      	ldr	r4, [r1, #4]
 801f010:	940c      	str	r4, [sp, #48]	@ 0x30
 801f012:	0e24      	lsrs	r4, r4, #24
 801f014:	9413      	str	r4, [sp, #76]	@ 0x4c
 801f016:	b198      	cbz	r0, 801f040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f018:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801f01c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f020:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f024:	f10c 0c04 	add.w	ip, ip, #4
 801f028:	eb01 080c 	add.w	r8, r1, ip
 801f02c:	f851 100c 	ldr.w	r1, [r1, ip]
 801f030:	9108      	str	r1, [sp, #32]
 801f032:	0e09      	lsrs	r1, r1, #24
 801f034:	9110      	str	r1, [sp, #64]	@ 0x40
 801f036:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f03a:	910d      	str	r1, [sp, #52]	@ 0x34
 801f03c:	0e09      	lsrs	r1, r1, #24
 801f03e:	9114      	str	r1, [sp, #80]	@ 0x50
 801f040:	b292      	uxth	r2, r2
 801f042:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f044:	b280      	uxth	r0, r0
 801f046:	fb02 f900 	mul.w	r9, r2, r0
 801f04a:	0112      	lsls	r2, r2, #4
 801f04c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f050:	eba2 0809 	sub.w	r8, r2, r9
 801f054:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801f058:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f05a:	b280      	uxth	r0, r0
 801f05c:	fa1f f888 	uxth.w	r8, r8
 801f060:	1a09      	subs	r1, r1, r0
 801f062:	fb08 f202 	mul.w	r2, r8, r2
 801f066:	b289      	uxth	r1, r1
 801f068:	fb01 220e 	mla	r2, r1, lr, r2
 801f06c:	fb00 2204 	mla	r2, r0, r4, r2
 801f070:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f072:	fb09 2204 	mla	r2, r9, r4, r2
 801f076:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f07a:	2a00      	cmp	r2, #0
 801f07c:	f000 80e8 	beq.w	801f250 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f080:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f084:	d01b      	beq.n	801f0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801f086:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f08a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f08e:	fb0e fa0a 	mul.w	sl, lr, sl
 801f092:	fb0e fe03 	mul.w	lr, lr, r3
 801f096:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f09a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f09e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f0a2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f0a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f0aa:	4453      	add	r3, sl
 801f0ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0b0:	0a1b      	lsrs	r3, r3, #8
 801f0b2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f0b6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f0ba:	ea43 030c 	orr.w	r3, r3, ip
 801f0be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f0c0:	2cff      	cmp	r4, #255	@ 0xff
 801f0c2:	d021      	beq.n	801f108 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f0c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f0c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f0ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f0cc:	fb04 fc0c 	mul.w	ip, r4, ip
 801f0d0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f0d2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f0d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f0da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f0dc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f0e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f0e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f0e8:	44e6      	add	lr, ip
 801f0ea:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f0ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f0f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f0fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0fe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f102:	ea4e 040a 	orr.w	r4, lr, sl
 801f106:	940c      	str	r4, [sp, #48]	@ 0x30
 801f108:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f10a:	2cff      	cmp	r4, #255	@ 0xff
 801f10c:	d021      	beq.n	801f152 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f10e:	9c08      	ldr	r4, [sp, #32]
 801f110:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f114:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f116:	fb04 fc0c 	mul.w	ip, r4, ip
 801f11a:	9c08      	ldr	r4, [sp, #32]
 801f11c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f120:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f122:	fb04 fa0e 	mul.w	sl, r4, lr
 801f126:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f12a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f12e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f132:	44e6      	add	lr, ip
 801f134:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f138:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f13c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f140:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f144:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f148:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f14c:	ea4e 040a 	orr.w	r4, lr, sl
 801f150:	9408      	str	r4, [sp, #32]
 801f152:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f154:	2cff      	cmp	r4, #255	@ 0xff
 801f156:	d021      	beq.n	801f19c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f158:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f15a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f15e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f160:	fb04 fc0c 	mul.w	ip, r4, ip
 801f164:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f166:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f16a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f16e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f170:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f174:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f178:	fb04 fa0a 	mul.w	sl, r4, sl
 801f17c:	44e6      	add	lr, ip
 801f17e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f182:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f186:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f18a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f18e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f192:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f196:	ea4e 040a 	orr.w	r4, lr, sl
 801f19a:	940d      	str	r4, [sp, #52]	@ 0x34
 801f19c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f19e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801f1a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f1a6:	2aff      	cmp	r2, #255	@ 0xff
 801f1a8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f1ac:	9c08      	ldr	r4, [sp, #32]
 801f1ae:	fb08 fc0c 	mul.w	ip, r8, ip
 801f1b2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f1b6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f1ba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f1bc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f1c0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f1c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f1c6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f1ca:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f1ce:	fb08 f80e 	mul.w	r8, r8, lr
 801f1d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1d6:	fb01 8303 	mla	r3, r1, r3, r8
 801f1da:	9908      	ldr	r1, [sp, #32]
 801f1dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f1e0:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f1e4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f1e6:	fb00 330a 	mla	r3, r0, sl, r3
 801f1ea:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801f1ee:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f1f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1f6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f1fa:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f1fe:	fa5f f08c 	uxtb.w	r0, ip
 801f202:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f206:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f20a:	d032      	beq.n	801f272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f20c:	43d2      	mvns	r2, r2
 801f20e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f212:	b2d2      	uxtb	r2, r2
 801f214:	fb0e fe02 	mul.w	lr, lr, r2
 801f218:	f10e 0301 	add.w	r3, lr, #1
 801f21c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f220:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f224:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f228:	4350      	muls	r0, r2
 801f22a:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f22e:	1c43      	adds	r3, r0, #1
 801f230:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f234:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f238:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f23c:	4353      	muls	r3, r2
 801f23e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f242:	1c5a      	adds	r2, r3, #1
 801f244:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f248:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f24c:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f250:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f252:	3703      	adds	r7, #3
 801f254:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f258:	441d      	add	r5, r3
 801f25a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f25c:	441e      	add	r6, r3
 801f25e:	e64e      	b.n	801eefe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f260:	2800      	cmp	r0, #0
 801f262:	f43f aeed 	beq.w	801f040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f266:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f26a:	9108      	str	r1, [sp, #32]
 801f26c:	0e09      	lsrs	r1, r1, #24
 801f26e:	9110      	str	r1, [sp, #64]	@ 0x40
 801f270:	e6e6      	b.n	801f040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f272:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f276:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f27a:	e7e7      	b.n	801f24c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f27c:	b019      	add	sp, #100	@ 0x64
 801f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f284 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f288:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801f28c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f290:	2c00      	cmp	r4, #0
 801f292:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801f296:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801f29a:	fb00 4e03 	mla	lr, r0, r3, r4
 801f29e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801f2a2:	f2c0 80b8 	blt.w	801f416 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f2a6:	45a1      	cmp	r9, r4
 801f2a8:	f340 80b5 	ble.w	801f416 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f2ac:	2800      	cmp	r0, #0
 801f2ae:	f2c0 80b2 	blt.w	801f416 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f2b2:	4580      	cmp	r8, r0
 801f2b4:	f340 80af 	ble.w	801f416 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f2b8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801f2bc:	f01e 0f01 	tst.w	lr, #1
 801f2c0:	5d56      	ldrb	r6, [r2, r5]
 801f2c2:	bf0c      	ite	eq
 801f2c4:	f006 060f 	andeq.w	r6, r6, #15
 801f2c8:	1136      	asrne	r6, r6, #4
 801f2ca:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f2ce:	b2f6      	uxtb	r6, r6
 801f2d0:	f114 0a01 	adds.w	sl, r4, #1
 801f2d4:	f100 80a1 	bmi.w	801f41a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f2d8:	45d1      	cmp	r9, sl
 801f2da:	f340 809e 	ble.w	801f41a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f2de:	2800      	cmp	r0, #0
 801f2e0:	f2c0 809b 	blt.w	801f41a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f2e4:	4580      	cmp	r8, r0
 801f2e6:	f340 8098 	ble.w	801f41a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f2ea:	2f00      	cmp	r7, #0
 801f2ec:	f000 8097 	beq.w	801f41e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801f2f0:	f10e 0b01 	add.w	fp, lr, #1
 801f2f4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f2f8:	f01b 0f01 	tst.w	fp, #1
 801f2fc:	5d55      	ldrb	r5, [r2, r5]
 801f2fe:	bf0c      	ite	eq
 801f300:	f005 050f 	andeq.w	r5, r5, #15
 801f304:	112d      	asrne	r5, r5, #4
 801f306:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f30a:	b2ed      	uxtb	r5, r5
 801f30c:	f1bc 0f00 	cmp.w	ip, #0
 801f310:	f000 8089 	beq.w	801f426 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801f314:	2c00      	cmp	r4, #0
 801f316:	f100 0001 	add.w	r0, r0, #1
 801f31a:	f2c0 8082 	blt.w	801f422 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f31e:	45a1      	cmp	r9, r4
 801f320:	dd7f      	ble.n	801f422 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f322:	2800      	cmp	r0, #0
 801f324:	db7d      	blt.n	801f422 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f326:	4580      	cmp	r8, r0
 801f328:	dd7b      	ble.n	801f422 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f32a:	eb03 0b0e 	add.w	fp, r3, lr
 801f32e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f332:	f01b 0f01 	tst.w	fp, #1
 801f336:	5d14      	ldrb	r4, [r2, r4]
 801f338:	bf0c      	ite	eq
 801f33a:	f004 040f 	andeq.w	r4, r4, #15
 801f33e:	1124      	asrne	r4, r4, #4
 801f340:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f344:	b2e4      	uxtb	r4, r4
 801f346:	f1ba 0f00 	cmp.w	sl, #0
 801f34a:	db6f      	blt.n	801f42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f34c:	45d1      	cmp	r9, sl
 801f34e:	dd6d      	ble.n	801f42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f350:	2800      	cmp	r0, #0
 801f352:	db6b      	blt.n	801f42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f354:	4580      	cmp	r8, r0
 801f356:	dd69      	ble.n	801f42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f358:	2f00      	cmp	r7, #0
 801f35a:	d069      	beq.n	801f430 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801f35c:	3301      	adds	r3, #1
 801f35e:	449e      	add	lr, r3
 801f360:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f364:	f01e 0f01 	tst.w	lr, #1
 801f368:	5cd0      	ldrb	r0, [r2, r3]
 801f36a:	bf0c      	ite	eq
 801f36c:	f000 000f 	andeq.w	r0, r0, #15
 801f370:	1100      	asrne	r0, r0, #4
 801f372:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f376:	b2c3      	uxtb	r3, r0
 801f378:	b2ba      	uxth	r2, r7
 801f37a:	fa1f fc8c 	uxth.w	ip, ip
 801f37e:	fb02 f00c 	mul.w	r0, r2, ip
 801f382:	0112      	lsls	r2, r2, #4
 801f384:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801f388:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f38c:	1a12      	subs	r2, r2, r0
 801f38e:	fa1f fc8c 	uxth.w	ip, ip
 801f392:	b292      	uxth	r2, r2
 801f394:	eba7 070c 	sub.w	r7, r7, ip
 801f398:	436a      	muls	r2, r5
 801f39a:	b2bf      	uxth	r7, r7
 801f39c:	fb06 2207 	mla	r2, r6, r7, r2
 801f3a0:	fb0c 2404 	mla	r4, ip, r4, r2
 801f3a4:	fb00 4303 	mla	r3, r0, r3, r4
 801f3a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f3ac:	b38b      	cbz	r3, 801f412 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801f3ae:	4a21      	ldr	r2, [pc, #132]	@ (801f434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801f3b0:	6814      	ldr	r4, [r2, #0]
 801f3b2:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801f3b6:	b2e5      	uxtb	r5, r4
 801f3b8:	4353      	muls	r3, r2
 801f3ba:	1c5a      	adds	r2, r3, #1
 801f3bc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f3c0:	1212      	asrs	r2, r2, #8
 801f3c2:	b290      	uxth	r0, r2
 801f3c4:	43d2      	mvns	r2, r2
 801f3c6:	fb15 f500 	smulbb	r5, r5, r0
 801f3ca:	b2d3      	uxtb	r3, r2
 801f3cc:	780a      	ldrb	r2, [r1, #0]
 801f3ce:	fb02 5203 	mla	r2, r2, r3, r5
 801f3d2:	b292      	uxth	r2, r2
 801f3d4:	1c55      	adds	r5, r2, #1
 801f3d6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f3da:	784d      	ldrb	r5, [r1, #1]
 801f3dc:	fb15 f503 	smulbb	r5, r5, r3
 801f3e0:	1212      	asrs	r2, r2, #8
 801f3e2:	700a      	strb	r2, [r1, #0]
 801f3e4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f3e8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f3ec:	fb02 5200 	mla	r2, r2, r0, r5
 801f3f0:	b292      	uxth	r2, r2
 801f3f2:	1c55      	adds	r5, r2, #1
 801f3f4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f3f8:	1212      	asrs	r2, r2, #8
 801f3fa:	704a      	strb	r2, [r1, #1]
 801f3fc:	788a      	ldrb	r2, [r1, #2]
 801f3fe:	fb12 f303 	smulbb	r3, r2, r3
 801f402:	fb04 3300 	mla	r3, r4, r0, r3
 801f406:	b29b      	uxth	r3, r3
 801f408:	1c5a      	adds	r2, r3, #1
 801f40a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f40e:	121b      	asrs	r3, r3, #8
 801f410:	708b      	strb	r3, [r1, #2]
 801f412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f416:	2600      	movs	r6, #0
 801f418:	e75a      	b.n	801f2d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801f41a:	2500      	movs	r5, #0
 801f41c:	e776      	b.n	801f30c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f41e:	463d      	mov	r5, r7
 801f420:	e774      	b.n	801f30c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f422:	2400      	movs	r4, #0
 801f424:	e78f      	b.n	801f346 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801f426:	4663      	mov	r3, ip
 801f428:	4664      	mov	r4, ip
 801f42a:	e7a5      	b.n	801f378 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f42c:	2300      	movs	r3, #0
 801f42e:	e7a3      	b.n	801f378 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f430:	463b      	mov	r3, r7
 801f432:	e7a1      	b.n	801f378 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f434:	240253e4 	.word	0x240253e4

0801f438 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43c:	b097      	sub	sp, #92	@ 0x5c
 801f43e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f440:	9309      	str	r3, [sp, #36]	@ 0x24
 801f442:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801f444:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801f448:	9015      	str	r0, [sp, #84]	@ 0x54
 801f44a:	910c      	str	r1, [sp, #48]	@ 0x30
 801f44c:	6850      	ldr	r0, [r2, #4]
 801f44e:	930e      	str	r3, [sp, #56]	@ 0x38
 801f450:	6812      	ldr	r2, [r2, #0]
 801f452:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801f456:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801f45a:	fb00 1303 	mla	r3, r0, r3, r1
 801f45e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f462:	eb02 0a03 	add.w	sl, r2, r3
 801f466:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f468:	689b      	ldr	r3, [r3, #8]
 801f46a:	3301      	adds	r3, #1
 801f46c:	f023 0301 	bic.w	r3, r3, #1
 801f470:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f472:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f474:	681f      	ldr	r7, [r3, #0]
 801f476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f478:	2b00      	cmp	r3, #0
 801f47a:	dc03      	bgt.n	801f484 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f47c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f47e:	2b00      	cmp	r3, #0
 801f480:	f340 8247 	ble.w	801f912 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f484:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f486:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f48a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f48e:	1e48      	subs	r0, r1, #1
 801f490:	f102 3cff 	add.w	ip, r2, #4294967295
 801f494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f496:	2b00      	cmp	r3, #0
 801f498:	f340 80e5 	ble.w	801f666 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f49c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801f4a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f4a4:	d406      	bmi.n	801f4b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f4a6:	4586      	cmp	lr, r0
 801f4a8:	da04      	bge.n	801f4b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	db02      	blt.n	801f4b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f4ae:	4563      	cmp	r3, ip
 801f4b0:	f2c0 80da 	blt.w	801f668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f4b4:	f11e 0e01 	adds.w	lr, lr, #1
 801f4b8:	f100 80cb 	bmi.w	801f652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f4bc:	4571      	cmp	r1, lr
 801f4be:	f2c0 80c8 	blt.w	801f652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f4c2:	3301      	adds	r3, #1
 801f4c4:	f100 80c5 	bmi.w	801f652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f4c8:	429a      	cmp	r2, r3
 801f4ca:	f2c0 80c2 	blt.w	801f652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4d0:	46d0      	mov	r8, sl
 801f4d2:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f4d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	f340 80e3 	ble.w	801f6a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f4e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f4e2:	1430      	asrs	r0, r6, #16
 801f4e4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f4e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f4ec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801f4f0:	142b      	asrs	r3, r5, #16
 801f4f2:	f100 812e 	bmi.w	801f752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f4f6:	f10c 3bff 	add.w	fp, ip, #4294967295
 801f4fa:	455b      	cmp	r3, fp
 801f4fc:	f280 8129 	bge.w	801f752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f500:	2800      	cmp	r0, #0
 801f502:	f2c0 8126 	blt.w	801f752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f506:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f50a:	4558      	cmp	r0, fp
 801f50c:	f280 8121 	bge.w	801f752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f510:	fb00 3309 	mla	r3, r0, r9, r3
 801f514:	0858      	lsrs	r0, r3, #1
 801f516:	07dc      	lsls	r4, r3, #31
 801f518:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f51c:	bf54      	ite	pl
 801f51e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f522:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f526:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f52a:	fa5f fc8c 	uxtb.w	ip, ip
 801f52e:	2a00      	cmp	r2, #0
 801f530:	f000 80fe 	beq.w	801f730 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f534:	1c58      	adds	r0, r3, #1
 801f536:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801f53a:	07c0      	lsls	r0, r0, #31
 801f53c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f540:	bf54      	ite	pl
 801f542:	f00e 0e0f 	andpl.w	lr, lr, #15
 801f546:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801f54a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801f54e:	fa5f f08e 	uxtb.w	r0, lr
 801f552:	9010      	str	r0, [sp, #64]	@ 0x40
 801f554:	b1d9      	cbz	r1, 801f58e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f556:	444b      	add	r3, r9
 801f558:	0858      	lsrs	r0, r3, #1
 801f55a:	07dc      	lsls	r4, r3, #31
 801f55c:	f103 0301 	add.w	r3, r3, #1
 801f560:	5c38      	ldrb	r0, [r7, r0]
 801f562:	bf54      	ite	pl
 801f564:	f000 000f 	andpl.w	r0, r0, #15
 801f568:	1100      	asrmi	r0, r0, #4
 801f56a:	07dc      	lsls	r4, r3, #31
 801f56c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f570:	b2c0      	uxtb	r0, r0
 801f572:	900a      	str	r0, [sp, #40]	@ 0x28
 801f574:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801f578:	f817 e000 	ldrb.w	lr, [r7, r0]
 801f57c:	bf54      	ite	pl
 801f57e:	f00e 030f 	andpl.w	r3, lr, #15
 801f582:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801f586:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f58a:	b2db      	uxtb	r3, r3
 801f58c:	9311      	str	r3, [sp, #68]	@ 0x44
 801f58e:	b292      	uxth	r2, r2
 801f590:	b289      	uxth	r1, r1
 801f592:	0113      	lsls	r3, r2, #4
 801f594:	fb02 f001 	mul.w	r0, r2, r1
 801f598:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f59a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f59e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801f5a2:	1a1b      	subs	r3, r3, r0
 801f5a4:	b289      	uxth	r1, r1
 801f5a6:	b29b      	uxth	r3, r3
 801f5a8:	ebae 0e01 	sub.w	lr, lr, r1
 801f5ac:	4353      	muls	r3, r2
 801f5ae:	fa1f fe8e 	uxth.w	lr, lr
 801f5b2:	fb0c 320e 	mla	r2, ip, lr, r3
 801f5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f5b8:	fb01 2203 	mla	r2, r1, r3, r2
 801f5bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f5be:	fb00 2203 	mla	r2, r0, r3, r2
 801f5c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f5c6:	2a00      	cmp	r2, #0
 801f5c8:	d039      	beq.n	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f5ca:	4bc7      	ldr	r3, [pc, #796]	@ (801f8e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f5cc:	6819      	ldr	r1, [r3, #0]
 801f5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5d0:	fa5f fc81 	uxtb.w	ip, r1
 801f5d4:	435a      	muls	r2, r3
 801f5d6:	1c53      	adds	r3, r2, #1
 801f5d8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f5dc:	1212      	asrs	r2, r2, #8
 801f5de:	b290      	uxth	r0, r2
 801f5e0:	43d2      	mvns	r2, r2
 801f5e2:	fb1c fc00 	smulbb	ip, ip, r0
 801f5e6:	b2d3      	uxtb	r3, r2
 801f5e8:	f898 2000 	ldrb.w	r2, [r8]
 801f5ec:	fb02 c203 	mla	r2, r2, r3, ip
 801f5f0:	b292      	uxth	r2, r2
 801f5f2:	f102 0c01 	add.w	ip, r2, #1
 801f5f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f5fa:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f5fe:	fb1c fc03 	smulbb	ip, ip, r3
 801f602:	1212      	asrs	r2, r2, #8
 801f604:	f888 2000 	strb.w	r2, [r8]
 801f608:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f60c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f610:	fb02 c200 	mla	r2, r2, r0, ip
 801f614:	b292      	uxth	r2, r2
 801f616:	f102 0c01 	add.w	ip, r2, #1
 801f61a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f61e:	1212      	asrs	r2, r2, #8
 801f620:	f888 2001 	strb.w	r2, [r8, #1]
 801f624:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f628:	fb12 f303 	smulbb	r3, r2, r3
 801f62c:	fb01 3300 	mla	r3, r1, r0, r3
 801f630:	b29b      	uxth	r3, r3
 801f632:	1c5a      	adds	r2, r3, #1
 801f634:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f638:	121b      	asrs	r3, r3, #8
 801f63a:	f888 3002 	strb.w	r3, [r8, #2]
 801f63e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f640:	f108 0803 	add.w	r8, r8, #3
 801f644:	441d      	add	r5, r3
 801f646:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f648:	441e      	add	r6, r3
 801f64a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f64c:	3b01      	subs	r3, #1
 801f64e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f650:	e742      	b.n	801f4d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f654:	f10a 0a03 	add.w	sl, sl, #3
 801f658:	441d      	add	r5, r3
 801f65a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f65c:	441e      	add	r6, r3
 801f65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f660:	3b01      	subs	r3, #1
 801f662:	9309      	str	r3, [sp, #36]	@ 0x24
 801f664:	e716      	b.n	801f494 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f666:	d024      	beq.n	801f6b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f66a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f66c:	3b01      	subs	r3, #1
 801f66e:	fb00 5003 	mla	r0, r0, r3, r5
 801f672:	1400      	asrs	r0, r0, #16
 801f674:	f53f af2b 	bmi.w	801f4ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f678:	3901      	subs	r1, #1
 801f67a:	4288      	cmp	r0, r1
 801f67c:	f6bf af27 	bge.w	801f4ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f680:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801f682:	fb01 6303 	mla	r3, r1, r3, r6
 801f686:	141b      	asrs	r3, r3, #16
 801f688:	f53f af21 	bmi.w	801f4ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f68c:	3a01      	subs	r2, #1
 801f68e:	4293      	cmp	r3, r2
 801f690:	f6bf af1d 	bge.w	801f4ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f694:	f10a 0e03 	add.w	lr, sl, #3
 801f698:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801f69c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f6a0:	f1b8 0f00 	cmp.w	r8, #0
 801f6a4:	dc76      	bgt.n	801f794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801f6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f6ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f6b0:	44a2      	add	sl, r4
 801f6b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	f340 812c 	ble.w	801f912 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f6ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f6be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f6c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6c8:	eef0 6a62 	vmov.f32	s13, s5
 801f6cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f6d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6d8:	ee16 5a90 	vmov	r5, s13
 801f6dc:	eef0 6a43 	vmov.f32	s13, s6
 801f6e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6e4:	ee16 6a90 	vmov	r6, s13
 801f6e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f700:	ee12 2a90 	vmov	r2, s5
 801f704:	eef0 2a47 	vmov.f32	s5, s14
 801f708:	fb92 f3f3 	sdiv	r3, r2, r3
 801f70c:	ee13 2a10 	vmov	r2, s6
 801f710:	9323      	str	r3, [sp, #140]	@ 0x8c
 801f712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f714:	eeb0 3a67 	vmov.f32	s6, s15
 801f718:	fb92 f3f3 	sdiv	r3, r2, r3
 801f71c:	9324      	str	r3, [sp, #144]	@ 0x90
 801f71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f720:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f722:	3b01      	subs	r3, #1
 801f724:	930c      	str	r3, [sp, #48]	@ 0x30
 801f726:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f728:	bf08      	it	eq
 801f72a:	4613      	moveq	r3, r2
 801f72c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f72e:	e6a2      	b.n	801f476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f730:	2900      	cmp	r1, #0
 801f732:	f43f af2c 	beq.w	801f58e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f736:	eb09 0003 	add.w	r0, r9, r3
 801f73a:	0843      	lsrs	r3, r0, #1
 801f73c:	07c0      	lsls	r0, r0, #31
 801f73e:	5cfb      	ldrb	r3, [r7, r3]
 801f740:	bf54      	ite	pl
 801f742:	f003 030f 	andpl.w	r3, r3, #15
 801f746:	111b      	asrmi	r3, r3, #4
 801f748:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f74c:	b2db      	uxtb	r3, r3
 801f74e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f750:	e71d      	b.n	801f58e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f752:	f113 0b01 	adds.w	fp, r3, #1
 801f756:	f53f af72 	bmi.w	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f75a:	45dc      	cmp	ip, fp
 801f75c:	f6ff af6f 	blt.w	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f760:	f110 0b01 	adds.w	fp, r0, #1
 801f764:	f53f af6b 	bmi.w	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f768:	45de      	cmp	lr, fp
 801f76a:	f6ff af68 	blt.w	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f76e:	9302      	str	r3, [sp, #8]
 801f770:	fa0f f38e 	sxth.w	r3, lr
 801f774:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f776:	9301      	str	r3, [sp, #4]
 801f778:	fa0f f38c 	sxth.w	r3, ip
 801f77c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801f780:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f784:	9300      	str	r3, [sp, #0]
 801f786:	463a      	mov	r2, r7
 801f788:	464b      	mov	r3, r9
 801f78a:	4641      	mov	r1, r8
 801f78c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f78e:	f7ff fd79 	bl	801f284 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801f792:	e754      	b.n	801f63e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f794:	142a      	asrs	r2, r5, #16
 801f796:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f79a:	1433      	asrs	r3, r6, #16
 801f79c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f7a0:	fb09 2303 	mla	r3, r9, r3, r2
 801f7a4:	085a      	lsrs	r2, r3, #1
 801f7a6:	07dc      	lsls	r4, r3, #31
 801f7a8:	5cba      	ldrb	r2, [r7, r2]
 801f7aa:	bf54      	ite	pl
 801f7ac:	f002 020f 	andpl.w	r2, r2, #15
 801f7b0:	1112      	asrmi	r2, r2, #4
 801f7b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f7b6:	b2d2      	uxtb	r2, r2
 801f7b8:	2900      	cmp	r1, #0
 801f7ba:	f000 8097 	beq.w	801f8ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f7be:	f103 0b01 	add.w	fp, r3, #1
 801f7c2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801f7c6:	f01b 0f01 	tst.w	fp, #1
 801f7ca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f7ce:	bf0c      	ite	eq
 801f7d0:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f7d4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f7d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f7dc:	fa5f f48c 	uxtb.w	r4, ip
 801f7e0:	9412      	str	r4, [sp, #72]	@ 0x48
 801f7e2:	b300      	cbz	r0, 801f826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f7e4:	444b      	add	r3, r9
 801f7e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f7ea:	07dc      	lsls	r4, r3, #31
 801f7ec:	f103 0301 	add.w	r3, r3, #1
 801f7f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f7f4:	bf54      	ite	pl
 801f7f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f7fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f7fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f802:	fa5f f48c 	uxtb.w	r4, ip
 801f806:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f80a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f80c:	07dc      	lsls	r4, r3, #31
 801f80e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f812:	bf54      	ite	pl
 801f814:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f818:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f81c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f820:	fa5f f38c 	uxtb.w	r3, ip
 801f824:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f826:	b289      	uxth	r1, r1
 801f828:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f82a:	b280      	uxth	r0, r0
 801f82c:	fb01 f300 	mul.w	r3, r1, r0
 801f830:	0109      	lsls	r1, r1, #4
 801f832:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801f836:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801f83a:	1ac9      	subs	r1, r1, r3
 801f83c:	b280      	uxth	r0, r0
 801f83e:	b289      	uxth	r1, r1
 801f840:	ebac 0c00 	sub.w	ip, ip, r0
 801f844:	4361      	muls	r1, r4
 801f846:	fa1f fc8c 	uxth.w	ip, ip
 801f84a:	fb02 120c 	mla	r2, r2, ip, r1
 801f84e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f850:	fb00 2001 	mla	r0, r0, r1, r2
 801f854:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f856:	fb03 0302 	mla	r3, r3, r2, r0
 801f85a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d039      	beq.n	801f8d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f862:	4a21      	ldr	r2, [pc, #132]	@ (801f8e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f864:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801f868:	6810      	ldr	r0, [r2, #0]
 801f86a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f86c:	fa5f fc80 	uxtb.w	ip, r0
 801f870:	4353      	muls	r3, r2
 801f872:	1c5a      	adds	r2, r3, #1
 801f874:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f878:	121b      	asrs	r3, r3, #8
 801f87a:	b29a      	uxth	r2, r3
 801f87c:	43db      	mvns	r3, r3
 801f87e:	fb1c fc02 	smulbb	ip, ip, r2
 801f882:	b2db      	uxtb	r3, r3
 801f884:	fb01 c103 	mla	r1, r1, r3, ip
 801f888:	b289      	uxth	r1, r1
 801f88a:	f101 0c01 	add.w	ip, r1, #1
 801f88e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f892:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801f896:	fb1c fc03 	smulbb	ip, ip, r3
 801f89a:	1209      	asrs	r1, r1, #8
 801f89c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801f8a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f8a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f8a8:	fb01 c102 	mla	r1, r1, r2, ip
 801f8ac:	b289      	uxth	r1, r1
 801f8ae:	f101 0c01 	add.w	ip, r1, #1
 801f8b2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f8b6:	1209      	asrs	r1, r1, #8
 801f8b8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801f8bc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801f8c0:	fb11 f303 	smulbb	r3, r1, r3
 801f8c4:	fb00 3002 	mla	r0, r0, r2, r3
 801f8c8:	b280      	uxth	r0, r0
 801f8ca:	1c42      	adds	r2, r0, #1
 801f8cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f8d0:	1200      	asrs	r0, r0, #8
 801f8d2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801f8d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f8d8:	f10e 0e03 	add.w	lr, lr, #3
 801f8dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8e0:	441d      	add	r5, r3
 801f8e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f8e4:	441e      	add	r6, r3
 801f8e6:	e6db      	b.n	801f6a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f8e8:	240253e4 	.word	0x240253e4
 801f8ec:	2800      	cmp	r0, #0
 801f8ee:	d09a      	beq.n	801f826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f8f0:	444b      	add	r3, r9
 801f8f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f8f6:	07db      	lsls	r3, r3, #31
 801f8f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f8fc:	bf54      	ite	pl
 801f8fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f902:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f906:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f90a:	fa5f f38c 	uxtb.w	r3, ip
 801f90e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f910:	e789      	b.n	801f826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f912:	b017      	add	sp, #92	@ 0x5c
 801f914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f91c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801f920:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f924:	2d00      	cmp	r5, #0
 801f926:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801f92a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801f92e:	fb04 5e03 	mla	lr, r4, r3, r5
 801f932:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801f936:	f2c0 80b1 	blt.w	801fa9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f93a:	45a9      	cmp	r9, r5
 801f93c:	f340 80ae 	ble.w	801fa9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f940:	2c00      	cmp	r4, #0
 801f942:	f2c0 80ab 	blt.w	801fa9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f946:	45a0      	cmp	r8, r4
 801f948:	f340 80a8 	ble.w	801fa9c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f94c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801f950:	f01e 0f01 	tst.w	lr, #1
 801f954:	5d97      	ldrb	r7, [r2, r6]
 801f956:	bf0c      	ite	eq
 801f958:	f007 070f 	andeq.w	r7, r7, #15
 801f95c:	113f      	asrne	r7, r7, #4
 801f95e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801f962:	b2ff      	uxtb	r7, r7
 801f964:	f115 0a01 	adds.w	sl, r5, #1
 801f968:	f100 809a 	bmi.w	801faa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f96c:	45d1      	cmp	r9, sl
 801f96e:	f340 8097 	ble.w	801faa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f972:	2c00      	cmp	r4, #0
 801f974:	f2c0 8094 	blt.w	801faa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f978:	45a0      	cmp	r8, r4
 801f97a:	f340 8091 	ble.w	801faa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f97e:	2800      	cmp	r0, #0
 801f980:	f000 8090 	beq.w	801faa4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801f984:	f10e 0b01 	add.w	fp, lr, #1
 801f988:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801f98c:	f01b 0f01 	tst.w	fp, #1
 801f990:	5d96      	ldrb	r6, [r2, r6]
 801f992:	bf0c      	ite	eq
 801f994:	f006 060f 	andeq.w	r6, r6, #15
 801f998:	1136      	asrne	r6, r6, #4
 801f99a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f99e:	b2f6      	uxtb	r6, r6
 801f9a0:	f1bc 0f00 	cmp.w	ip, #0
 801f9a4:	f000 8082 	beq.w	801faac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801f9a8:	2d00      	cmp	r5, #0
 801f9aa:	f104 0401 	add.w	r4, r4, #1
 801f9ae:	db7b      	blt.n	801faa8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f9b0:	45a9      	cmp	r9, r5
 801f9b2:	dd79      	ble.n	801faa8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f9b4:	2c00      	cmp	r4, #0
 801f9b6:	db77      	blt.n	801faa8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f9b8:	45a0      	cmp	r8, r4
 801f9ba:	dd75      	ble.n	801faa8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f9bc:	eb03 0b0e 	add.w	fp, r3, lr
 801f9c0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f9c4:	f01b 0f01 	tst.w	fp, #1
 801f9c8:	5d55      	ldrb	r5, [r2, r5]
 801f9ca:	bf0c      	ite	eq
 801f9cc:	f005 050f 	andeq.w	r5, r5, #15
 801f9d0:	112d      	asrne	r5, r5, #4
 801f9d2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f9d6:	b2ed      	uxtb	r5, r5
 801f9d8:	f1ba 0f00 	cmp.w	sl, #0
 801f9dc:	db69      	blt.n	801fab2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f9de:	45d1      	cmp	r9, sl
 801f9e0:	dd67      	ble.n	801fab2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f9e2:	2c00      	cmp	r4, #0
 801f9e4:	db65      	blt.n	801fab2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f9e6:	45a0      	cmp	r8, r4
 801f9e8:	dd63      	ble.n	801fab2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f9ea:	2800      	cmp	r0, #0
 801f9ec:	d063      	beq.n	801fab6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801f9ee:	3301      	adds	r3, #1
 801f9f0:	449e      	add	lr, r3
 801f9f2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f9f6:	f01e 0f01 	tst.w	lr, #1
 801f9fa:	5cd4      	ldrb	r4, [r2, r3]
 801f9fc:	bf0c      	ite	eq
 801f9fe:	f004 040f 	andeq.w	r4, r4, #15
 801fa02:	1124      	asrne	r4, r4, #4
 801fa04:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fa08:	b2e3      	uxtb	r3, r4
 801fa0a:	b282      	uxth	r2, r0
 801fa0c:	fa1f fc8c 	uxth.w	ip, ip
 801fa10:	fb02 f40c 	mul.w	r4, r2, ip
 801fa14:	0112      	lsls	r2, r2, #4
 801fa16:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801fa1a:	fa1f f08c 	uxth.w	r0, ip
 801fa1e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801fa22:	1b12      	subs	r2, r2, r4
 801fa24:	ebac 0c00 	sub.w	ip, ip, r0
 801fa28:	b292      	uxth	r2, r2
 801fa2a:	fa1f fc8c 	uxth.w	ip, ip
 801fa2e:	4372      	muls	r2, r6
 801fa30:	fb07 220c 	mla	r2, r7, ip, r2
 801fa34:	fb00 2005 	mla	r0, r0, r5, r2
 801fa38:	fb04 0303 	mla	r3, r4, r3, r0
 801fa3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa40:	b353      	cbz	r3, 801fa98 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801fa42:	4a1e      	ldr	r2, [pc, #120]	@ (801fabc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801fa44:	7808      	ldrb	r0, [r1, #0]
 801fa46:	6814      	ldr	r4, [r2, #0]
 801fa48:	b29a      	uxth	r2, r3
 801fa4a:	43db      	mvns	r3, r3
 801fa4c:	b2e5      	uxtb	r5, r4
 801fa4e:	b2db      	uxtb	r3, r3
 801fa50:	fb15 f502 	smulbb	r5, r5, r2
 801fa54:	fb00 5003 	mla	r0, r0, r3, r5
 801fa58:	b280      	uxth	r0, r0
 801fa5a:	1c45      	adds	r5, r0, #1
 801fa5c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fa60:	784d      	ldrb	r5, [r1, #1]
 801fa62:	fb15 f503 	smulbb	r5, r5, r3
 801fa66:	1200      	asrs	r0, r0, #8
 801fa68:	7008      	strb	r0, [r1, #0]
 801fa6a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801fa6e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801fa72:	fb00 5002 	mla	r0, r0, r2, r5
 801fa76:	b280      	uxth	r0, r0
 801fa78:	1c45      	adds	r5, r0, #1
 801fa7a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fa7e:	1200      	asrs	r0, r0, #8
 801fa80:	7048      	strb	r0, [r1, #1]
 801fa82:	7888      	ldrb	r0, [r1, #2]
 801fa84:	fb10 f303 	smulbb	r3, r0, r3
 801fa88:	fb04 3202 	mla	r2, r4, r2, r3
 801fa8c:	b292      	uxth	r2, r2
 801fa8e:	1c53      	adds	r3, r2, #1
 801fa90:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fa94:	1212      	asrs	r2, r2, #8
 801fa96:	708a      	strb	r2, [r1, #2]
 801fa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa9c:	2700      	movs	r7, #0
 801fa9e:	e761      	b.n	801f964 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801faa0:	2600      	movs	r6, #0
 801faa2:	e77d      	b.n	801f9a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801faa4:	4606      	mov	r6, r0
 801faa6:	e77b      	b.n	801f9a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801faa8:	2500      	movs	r5, #0
 801faaa:	e795      	b.n	801f9d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801faac:	4663      	mov	r3, ip
 801faae:	4665      	mov	r5, ip
 801fab0:	e7ab      	b.n	801fa0a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fab2:	2300      	movs	r3, #0
 801fab4:	e7a9      	b.n	801fa0a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fab6:	4603      	mov	r3, r0
 801fab8:	e7a7      	b.n	801fa0a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801faba:	bf00      	nop
 801fabc:	240253e4 	.word	0x240253e4

0801fac0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac4:	b093      	sub	sp, #76	@ 0x4c
 801fac6:	461c      	mov	r4, r3
 801fac8:	920c      	str	r2, [sp, #48]	@ 0x30
 801faca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801facc:	9011      	str	r0, [sp, #68]	@ 0x44
 801face:	9107      	str	r1, [sp, #28]
 801fad0:	6850      	ldr	r0, [r2, #4]
 801fad2:	6812      	ldr	r2, [r2, #0]
 801fad4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801fad8:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801fadc:	fb00 1303 	mla	r3, r0, r3, r1
 801fae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fae4:	eb02 0b03 	add.w	fp, r2, r3
 801fae8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801faea:	689b      	ldr	r3, [r3, #8]
 801faec:	3301      	adds	r3, #1
 801faee:	f023 0301 	bic.w	r3, r3, #1
 801faf2:	9309      	str	r3, [sp, #36]	@ 0x24
 801faf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801faf6:	f8d3 8000 	ldr.w	r8, [r3]
 801fafa:	9b07      	ldr	r3, [sp, #28]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	dc03      	bgt.n	801fb08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	f340 822b 	ble.w	801ff5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fb08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fb0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb12:	1e48      	subs	r0, r1, #1
 801fb14:	1e57      	subs	r7, r2, #1
 801fb16:	2c00      	cmp	r4, #0
 801fb18:	f340 80d7 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fb1c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fb20:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fb24:	d406      	bmi.n	801fb34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fb26:	4584      	cmp	ip, r0
 801fb28:	da04      	bge.n	801fb34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	db02      	blt.n	801fb34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fb2e:	42bb      	cmp	r3, r7
 801fb30:	f2c0 80cc 	blt.w	801fccc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fb34:	f11c 0c01 	adds.w	ip, ip, #1
 801fb38:	f100 80bf 	bmi.w	801fcba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fb3c:	4561      	cmp	r1, ip
 801fb3e:	f2c0 80bc 	blt.w	801fcba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fb42:	3301      	adds	r3, #1
 801fb44:	f100 80b9 	bmi.w	801fcba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fb48:	429a      	cmp	r2, r3
 801fb4a:	f2c0 80b6 	blt.w	801fcba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fb4e:	46a2      	mov	sl, r4
 801fb50:	465f      	mov	r7, fp
 801fb52:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fb56:	f1ba 0f00 	cmp.w	sl, #0
 801fb5a:	f340 80d4 	ble.w	801fd06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801fb5e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801fb62:	1430      	asrs	r0, r6, #16
 801fb64:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fb68:	9308      	str	r3, [sp, #32]
 801fb6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fb6c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fb70:	142b      	asrs	r3, r5, #16
 801fb72:	f100 8124 	bmi.w	801fdbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fb76:	f10c 32ff 	add.w	r2, ip, #4294967295
 801fb7a:	4293      	cmp	r3, r2
 801fb7c:	f280 811f 	bge.w	801fdbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fb80:	2800      	cmp	r0, #0
 801fb82:	f2c0 811c 	blt.w	801fdbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fb86:	f10e 32ff 	add.w	r2, lr, #4294967295
 801fb8a:	4290      	cmp	r0, r2
 801fb8c:	f280 8117 	bge.w	801fdbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fb90:	fb00 3309 	mla	r3, r0, r9, r3
 801fb94:	0858      	lsrs	r0, r3, #1
 801fb96:	07da      	lsls	r2, r3, #31
 801fb98:	9a08      	ldr	r2, [sp, #32]
 801fb9a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801fb9e:	bf54      	ite	pl
 801fba0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fba4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fba8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fbac:	fa5f fc8c 	uxtb.w	ip, ip
 801fbb0:	2a00      	cmp	r2, #0
 801fbb2:	f000 80ed 	beq.w	801fd90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801fbb6:	1c58      	adds	r0, r3, #1
 801fbb8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fbbc:	07c0      	lsls	r0, r0, #31
 801fbbe:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801fbc2:	bf54      	ite	pl
 801fbc4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fbc8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fbcc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fbd0:	fa5f fe8e 	uxtb.w	lr, lr
 801fbd4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801fbd8:	b1c9      	cbz	r1, 801fc0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fbda:	444b      	add	r3, r9
 801fbdc:	0858      	lsrs	r0, r3, #1
 801fbde:	07da      	lsls	r2, r3, #31
 801fbe0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fbe4:	bf54      	ite	pl
 801fbe6:	f000 000f 	andpl.w	r0, r0, #15
 801fbea:	1100      	asrmi	r0, r0, #4
 801fbec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fbf0:	b2c0      	uxtb	r0, r0
 801fbf2:	900a      	str	r0, [sp, #40]	@ 0x28
 801fbf4:	1c58      	adds	r0, r3, #1
 801fbf6:	0843      	lsrs	r3, r0, #1
 801fbf8:	07c2      	lsls	r2, r0, #31
 801fbfa:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fbfe:	bf54      	ite	pl
 801fc00:	f003 030f 	andpl.w	r3, r3, #15
 801fc04:	111b      	asrmi	r3, r3, #4
 801fc06:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fc0a:	b2db      	uxtb	r3, r3
 801fc0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fc0e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fc12:	b289      	uxth	r1, r1
 801fc14:	fb02 f301 	mul.w	r3, r2, r1
 801fc18:	0112      	lsls	r2, r2, #4
 801fc1a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fc1e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801fc22:	1ad2      	subs	r2, r2, r3
 801fc24:	b289      	uxth	r1, r1
 801fc26:	b292      	uxth	r2, r2
 801fc28:	1a40      	subs	r0, r0, r1
 801fc2a:	fa1f fe80 	uxth.w	lr, r0
 801fc2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801fc30:	4342      	muls	r2, r0
 801fc32:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801fc36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc38:	fb01 c102 	mla	r1, r1, r2, ip
 801fc3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc3e:	fb03 1302 	mla	r3, r3, r2, r1
 801fc42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fc46:	b383      	cbz	r3, 801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fc48:	4ac6      	ldr	r2, [pc, #792]	@ (801ff64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801fc4a:	2bff      	cmp	r3, #255	@ 0xff
 801fc4c:	6812      	ldr	r2, [r2, #0]
 801fc4e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fc52:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801fc56:	b2d2      	uxtb	r2, r2
 801fc58:	f000 80ac 	beq.w	801fdb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fc5c:	b299      	uxth	r1, r3
 801fc5e:	43db      	mvns	r3, r3
 801fc60:	f897 c000 	ldrb.w	ip, [r7]
 801fc64:	fb12 f201 	smulbb	r2, r2, r1
 801fc68:	b2db      	uxtb	r3, r3
 801fc6a:	fb10 f001 	smulbb	r0, r0, r1
 801fc6e:	fb0c 2203 	mla	r2, ip, r3, r2
 801fc72:	fb1e f101 	smulbb	r1, lr, r1
 801fc76:	b292      	uxth	r2, r2
 801fc78:	f102 0c01 	add.w	ip, r2, #1
 801fc7c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fc80:	1212      	asrs	r2, r2, #8
 801fc82:	703a      	strb	r2, [r7, #0]
 801fc84:	787a      	ldrb	r2, [r7, #1]
 801fc86:	fb02 0003 	mla	r0, r2, r3, r0
 801fc8a:	b280      	uxth	r0, r0
 801fc8c:	1c42      	adds	r2, r0, #1
 801fc8e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fc92:	78ba      	ldrb	r2, [r7, #2]
 801fc94:	fb02 1303 	mla	r3, r2, r3, r1
 801fc98:	1200      	asrs	r0, r0, #8
 801fc9a:	b29b      	uxth	r3, r3
 801fc9c:	7078      	strb	r0, [r7, #1]
 801fc9e:	f103 0e01 	add.w	lr, r3, #1
 801fca2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fca6:	121b      	asrs	r3, r3, #8
 801fca8:	70bb      	strb	r3, [r7, #2]
 801fcaa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fcac:	3703      	adds	r7, #3
 801fcae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fcb2:	441d      	add	r5, r3
 801fcb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fcb6:	441e      	add	r6, r3
 801fcb8:	e74d      	b.n	801fb56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fcba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fcbc:	3c01      	subs	r4, #1
 801fcbe:	f10b 0b03 	add.w	fp, fp, #3
 801fcc2:	441d      	add	r5, r3
 801fcc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fcc6:	441e      	add	r6, r3
 801fcc8:	e725      	b.n	801fb16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fcca:	d021      	beq.n	801fd10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fccc:	1e63      	subs	r3, r4, #1
 801fcce:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fcd0:	fb00 5003 	mla	r0, r0, r3, r5
 801fcd4:	1400      	asrs	r0, r0, #16
 801fcd6:	f53f af3a 	bmi.w	801fb4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fcda:	3901      	subs	r1, #1
 801fcdc:	4288      	cmp	r0, r1
 801fcde:	f6bf af36 	bge.w	801fb4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fce2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fce4:	fb01 6303 	mla	r3, r1, r3, r6
 801fce8:	141b      	asrs	r3, r3, #16
 801fcea:	f53f af30 	bmi.w	801fb4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fcee:	3a01      	subs	r2, #1
 801fcf0:	4293      	cmp	r3, r2
 801fcf2:	f6bf af2c 	bge.w	801fb4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fcf6:	f10b 0c03 	add.w	ip, fp, #3
 801fcfa:	46a6      	mov	lr, r4
 801fcfc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fd00:	f1be 0f00 	cmp.w	lr, #0
 801fd04:	dc79      	bgt.n	801fdfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801fd06:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801fd0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fd0e:	44a3      	add	fp, r4
 801fd10:	9b07      	ldr	r3, [sp, #28]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	f340 8123 	ble.w	801ff5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fd18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fd1c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fd1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd26:	eef0 6a62 	vmov.f32	s13, s5
 801fd2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd36:	ee16 5a90 	vmov	r5, s13
 801fd3a:	eef0 6a43 	vmov.f32	s13, s6
 801fd3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd42:	ee16 6a90 	vmov	r6, s13
 801fd46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd5e:	ee12 2a90 	vmov	r2, s5
 801fd62:	eef0 2a47 	vmov.f32	s5, s14
 801fd66:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd6a:	ee13 2a10 	vmov	r2, s6
 801fd6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fd70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fd72:	eeb0 3a67 	vmov.f32	s6, s15
 801fd76:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd7a:	9320      	str	r3, [sp, #128]	@ 0x80
 801fd7c:	9b07      	ldr	r3, [sp, #28]
 801fd7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd80:	3b01      	subs	r3, #1
 801fd82:	9307      	str	r3, [sp, #28]
 801fd84:	bf08      	it	eq
 801fd86:	4614      	moveq	r4, r2
 801fd88:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fd8a:	bf18      	it	ne
 801fd8c:	461c      	movne	r4, r3
 801fd8e:	e6b4      	b.n	801fafa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fd90:	2900      	cmp	r1, #0
 801fd92:	f43f af3c 	beq.w	801fc0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fd96:	eb09 0003 	add.w	r0, r9, r3
 801fd9a:	0843      	lsrs	r3, r0, #1
 801fd9c:	07c0      	lsls	r0, r0, #31
 801fd9e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fda2:	bf54      	ite	pl
 801fda4:	f003 030f 	andpl.w	r3, r3, #15
 801fda8:	111b      	asrmi	r3, r3, #4
 801fdaa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fdae:	b2db      	uxtb	r3, r3
 801fdb0:	930a      	str	r3, [sp, #40]	@ 0x28
 801fdb2:	e72c      	b.n	801fc0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fdb4:	703a      	strb	r2, [r7, #0]
 801fdb6:	7078      	strb	r0, [r7, #1]
 801fdb8:	f887 e002 	strb.w	lr, [r7, #2]
 801fdbc:	e775      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdbe:	1c5a      	adds	r2, r3, #1
 801fdc0:	f53f af73 	bmi.w	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdc4:	4594      	cmp	ip, r2
 801fdc6:	f6ff af70 	blt.w	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdca:	1c42      	adds	r2, r0, #1
 801fdcc:	f53f af6d 	bmi.w	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdd0:	4596      	cmp	lr, r2
 801fdd2:	f6ff af6a 	blt.w	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdd6:	9302      	str	r3, [sp, #8]
 801fdd8:	fa0f f38e 	sxth.w	r3, lr
 801fddc:	9a08      	ldr	r2, [sp, #32]
 801fdde:	9301      	str	r3, [sp, #4]
 801fde0:	fa0f f38c 	sxth.w	r3, ip
 801fde4:	9105      	str	r1, [sp, #20]
 801fde6:	4639      	mov	r1, r7
 801fde8:	9300      	str	r3, [sp, #0]
 801fdea:	464b      	mov	r3, r9
 801fdec:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801fdf0:	4642      	mov	r2, r8
 801fdf2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fdf4:	f7ff fd90 	bl	801f918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801fdf8:	e757      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdfa:	142a      	asrs	r2, r5, #16
 801fdfc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fe00:	1433      	asrs	r3, r6, #16
 801fe02:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801fe06:	fb09 2303 	mla	r3, r9, r3, r2
 801fe0a:	085a      	lsrs	r2, r3, #1
 801fe0c:	07d9      	lsls	r1, r3, #31
 801fe0e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801fe12:	bf54      	ite	pl
 801fe14:	f002 020f 	andpl.w	r2, r2, #15
 801fe18:	1112      	asrmi	r2, r2, #4
 801fe1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fe1e:	b2d2      	uxtb	r2, r2
 801fe20:	2800      	cmp	r0, #0
 801fe22:	f000 8085 	beq.w	801ff30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801fe26:	f103 0a01 	add.w	sl, r3, #1
 801fe2a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801fe2e:	f01a 0f01 	tst.w	sl, #1
 801fe32:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fe36:	bf0c      	ite	eq
 801fe38:	f001 010f 	andeq.w	r1, r1, #15
 801fe3c:	1109      	asrne	r1, r1, #4
 801fe3e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fe42:	b2c9      	uxtb	r1, r1
 801fe44:	910f      	str	r1, [sp, #60]	@ 0x3c
 801fe46:	b1df      	cbz	r7, 801fe80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801fe48:	444b      	add	r3, r9
 801fe4a:	0859      	lsrs	r1, r3, #1
 801fe4c:	f013 0f01 	tst.w	r3, #1
 801fe50:	f103 0301 	add.w	r3, r3, #1
 801fe54:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fe58:	bf0c      	ite	eq
 801fe5a:	f001 010f 	andeq.w	r1, r1, #15
 801fe5e:	1109      	asrne	r1, r1, #4
 801fe60:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fe64:	b2c9      	uxtb	r1, r1
 801fe66:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe68:	0859      	lsrs	r1, r3, #1
 801fe6a:	07db      	lsls	r3, r3, #31
 801fe6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fe70:	bf54      	ite	pl
 801fe72:	f001 010f 	andpl.w	r1, r1, #15
 801fe76:	1109      	asrmi	r1, r1, #4
 801fe78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fe7c:	b2c9      	uxtb	r1, r1
 801fe7e:	9110      	str	r1, [sp, #64]	@ 0x40
 801fe80:	b280      	uxth	r0, r0
 801fe82:	b2bf      	uxth	r7, r7
 801fe84:	fb00 f307 	mul.w	r3, r0, r7
 801fe88:	0100      	lsls	r0, r0, #4
 801fe8a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801fe8e:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801fe92:	1ac0      	subs	r0, r0, r3
 801fe94:	b2bf      	uxth	r7, r7
 801fe96:	b280      	uxth	r0, r0
 801fe98:	1bc9      	subs	r1, r1, r7
 801fe9a:	fa1f fa81 	uxth.w	sl, r1
 801fe9e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fea0:	4348      	muls	r0, r1
 801fea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fea4:	fb02 020a 	mla	r2, r2, sl, r0
 801fea8:	fb07 2701 	mla	r7, r7, r1, r2
 801feac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801feae:	fb03 7302 	mla	r3, r3, r2, r7
 801feb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801feb6:	b393      	cbz	r3, 801ff1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801feb8:	4a2a      	ldr	r2, [pc, #168]	@ (801ff64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801feba:	2bff      	cmp	r3, #255	@ 0xff
 801febc:	6811      	ldr	r1, [r2, #0]
 801febe:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801fec2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801fec6:	b2c9      	uxtb	r1, r1
 801fec8:	d042      	beq.n	801ff50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801feca:	b298      	uxth	r0, r3
 801fecc:	43db      	mvns	r3, r3
 801fece:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801fed2:	fb11 f100 	smulbb	r1, r1, r0
 801fed6:	b2db      	uxtb	r3, r3
 801fed8:	fb17 f700 	smulbb	r7, r7, r0
 801fedc:	fb02 1103 	mla	r1, r2, r3, r1
 801fee0:	fb1a f000 	smulbb	r0, sl, r0
 801fee4:	b289      	uxth	r1, r1
 801fee6:	1c4a      	adds	r2, r1, #1
 801fee8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801feec:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801fef0:	fb02 7703 	mla	r7, r2, r3, r7
 801fef4:	1209      	asrs	r1, r1, #8
 801fef6:	b2bf      	uxth	r7, r7
 801fef8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801fefc:	1c7a      	adds	r2, r7, #1
 801fefe:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ff02:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801ff06:	fb02 0303 	mla	r3, r2, r3, r0
 801ff0a:	123f      	asrs	r7, r7, #8
 801ff0c:	b29b      	uxth	r3, r3
 801ff0e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ff12:	1c5a      	adds	r2, r3, #1
 801ff14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff18:	121b      	asrs	r3, r3, #8
 801ff1a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801ff1e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ff20:	f10c 0c03 	add.w	ip, ip, #3
 801ff24:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ff28:	441d      	add	r5, r3
 801ff2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ff2c:	441e      	add	r6, r3
 801ff2e:	e6e7      	b.n	801fd00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ff30:	2f00      	cmp	r7, #0
 801ff32:	d0a5      	beq.n	801fe80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ff34:	444b      	add	r3, r9
 801ff36:	0859      	lsrs	r1, r3, #1
 801ff38:	07db      	lsls	r3, r3, #31
 801ff3a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ff3e:	bf54      	ite	pl
 801ff40:	f001 010f 	andpl.w	r1, r1, #15
 801ff44:	1109      	asrmi	r1, r1, #4
 801ff46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ff4a:	b2c9      	uxtb	r1, r1
 801ff4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ff4e:	e797      	b.n	801fe80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ff50:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ff54:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ff58:	f80c ac01 	strb.w	sl, [ip, #-1]
 801ff5c:	e7df      	b.n	801ff1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ff5e:	b013      	add	sp, #76	@ 0x4c
 801ff60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff64:	240253e4 	.word	0x240253e4

0801ff68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801ff68:	b530      	push	{r4, r5, lr}
 801ff6a:	b29d      	uxth	r5, r3
 801ff6c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801ff70:	780c      	ldrb	r4, [r1, #0]
 801ff72:	b298      	uxth	r0, r3
 801ff74:	7813      	ldrb	r3, [r2, #0]
 801ff76:	fb14 f405 	smulbb	r4, r4, r5
 801ff7a:	fb13 f300 	smulbb	r3, r3, r0
 801ff7e:	441c      	add	r4, r3
 801ff80:	b2a4      	uxth	r4, r4
 801ff82:	1c63      	adds	r3, r4, #1
 801ff84:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ff88:	7853      	ldrb	r3, [r2, #1]
 801ff8a:	fb13 f300 	smulbb	r3, r3, r0
 801ff8e:	1224      	asrs	r4, r4, #8
 801ff90:	7014      	strb	r4, [r2, #0]
 801ff92:	784c      	ldrb	r4, [r1, #1]
 801ff94:	fb14 f405 	smulbb	r4, r4, r5
 801ff98:	441c      	add	r4, r3
 801ff9a:	b2a4      	uxth	r4, r4
 801ff9c:	1c63      	adds	r3, r4, #1
 801ff9e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ffa2:	1224      	asrs	r4, r4, #8
 801ffa4:	7054      	strb	r4, [r2, #1]
 801ffa6:	788b      	ldrb	r3, [r1, #2]
 801ffa8:	7891      	ldrb	r1, [r2, #2]
 801ffaa:	fb13 f305 	smulbb	r3, r3, r5
 801ffae:	fb11 f000 	smulbb	r0, r1, r0
 801ffb2:	4403      	add	r3, r0
 801ffb4:	b29b      	uxth	r3, r3
 801ffb6:	1c59      	adds	r1, r3, #1
 801ffb8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ffbc:	121b      	asrs	r3, r3, #8
 801ffbe:	7093      	strb	r3, [r2, #2]
 801ffc0:	bd30      	pop	{r4, r5, pc}
	...

0801ffc4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffc8:	461c      	mov	r4, r3
 801ffca:	b08b      	sub	sp, #44	@ 0x2c
 801ffcc:	460e      	mov	r6, r1
 801ffce:	4615      	mov	r5, r2
 801ffd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ffd2:	4682      	mov	sl, r0
 801ffd4:	6861      	ldr	r1, [r4, #4]
 801ffd6:	aa06      	add	r2, sp, #24
 801ffd8:	6820      	ldr	r0, [r4, #0]
 801ffda:	2702      	movs	r7, #2
 801ffdc:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801ffe0:	3504      	adds	r5, #4
 801ffe2:	c203      	stmia	r2!, {r0, r1}
 801ffe4:	6818      	ldr	r0, [r3, #0]
 801ffe6:	aa08      	add	r2, sp, #32
 801ffe8:	6859      	ldr	r1, [r3, #4]
 801ffea:	c203      	stmia	r2!, {r0, r1}
 801ffec:	a806      	add	r0, sp, #24
 801ffee:	f7f2 fe7d 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fff2:	4621      	mov	r1, r4
 801fff4:	a808      	add	r0, sp, #32
 801fff6:	f7f2 febd 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fffa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fffe:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8020002:	f002 0301 	and.w	r3, r2, #1
 8020006:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802000a:	9302      	str	r3, [sp, #8]
 802000c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020010:	f003 0101 	and.w	r1, r3, #1
 8020014:	9101      	str	r1, [sp, #4]
 8020016:	9801      	ldr	r0, [sp, #4]
 8020018:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802001c:	4403      	add	r3, r0
 802001e:	fb01 2303 	mla	r3, r1, r3, r2
 8020022:	fb93 f3f7 	sdiv	r3, r3, r7
 8020026:	441e      	add	r6, r3
 8020028:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802002c:	441a      	add	r2, r3
 802002e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8020032:	4419      	add	r1, r3
 8020034:	4b70      	ldr	r3, [pc, #448]	@ (80201f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020036:	f8ad 2020 	strh.w	r2, [sp, #32]
 802003a:	6818      	ldr	r0, [r3, #0]
 802003c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8020040:	6803      	ldr	r3, [r0, #0]
 8020042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020044:	4798      	blx	r3
 8020046:	4a6d      	ldr	r2, [pc, #436]	@ (80201fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8020048:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802004c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020050:	8813      	ldrh	r3, [r2, #0]
 8020052:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8020056:	fb03 1404 	mla	r4, r3, r4, r1
 802005a:	4611      	mov	r1, r2
 802005c:	fb0b f303 	mul.w	r3, fp, r3
 8020060:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020068:	4404      	add	r4, r0
 802006a:	4423      	add	r3, r4
 802006c:	d073      	beq.n	8020156 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802006e:	9705      	str	r7, [sp, #20]
 8020070:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020074:	9b03      	ldr	r3, [sp, #12]
 8020076:	429c      	cmp	r4, r3
 8020078:	f080 80b5 	bcs.w	80201e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802007c:	9b02      	ldr	r3, [sp, #8]
 802007e:	b35b      	cbz	r3, 80200d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8020080:	7831      	ldrb	r1, [r6, #0]
 8020082:	4622      	mov	r2, r4
 8020084:	1c77      	adds	r7, r6, #1
 8020086:	3403      	adds	r4, #3
 8020088:	f001 010f 	and.w	r1, r1, #15
 802008c:	f108 3bff 	add.w	fp, r8, #4294967295
 8020090:	464b      	mov	r3, r9
 8020092:	4650      	mov	r0, sl
 8020094:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020098:	4429      	add	r1, r5
 802009a:	f7ff ff65 	bl	801ff68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802009e:	f1bb 0f01 	cmp.w	fp, #1
 80200a2:	dd1c      	ble.n	80200de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80200a4:	7839      	ldrb	r1, [r7, #0]
 80200a6:	4622      	mov	r2, r4
 80200a8:	464b      	mov	r3, r9
 80200aa:	4650      	mov	r0, sl
 80200ac:	0909      	lsrs	r1, r1, #4
 80200ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80200b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200b6:	4429      	add	r1, r5
 80200b8:	f7ff ff56 	bl	801ff68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80200bc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80200c0:	1ce2      	adds	r2, r4, #3
 80200c2:	464b      	mov	r3, r9
 80200c4:	f001 010f 	and.w	r1, r1, #15
 80200c8:	4650      	mov	r0, sl
 80200ca:	3406      	adds	r4, #6
 80200cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200d0:	4429      	add	r1, r5
 80200d2:	f7ff ff49 	bl	801ff68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80200d6:	e7e2      	b.n	802009e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80200d8:	4637      	mov	r7, r6
 80200da:	46c3      	mov	fp, r8
 80200dc:	e7df      	b.n	802009e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80200de:	d10a      	bne.n	80200f6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80200e0:	7839      	ldrb	r1, [r7, #0]
 80200e2:	4622      	mov	r2, r4
 80200e4:	3403      	adds	r4, #3
 80200e6:	464b      	mov	r3, r9
 80200e8:	0909      	lsrs	r1, r1, #4
 80200ea:	4650      	mov	r0, sl
 80200ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200f0:	4429      	add	r1, r5
 80200f2:	f7ff ff39 	bl	801ff68 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80200f6:	9b04      	ldr	r3, [sp, #16]
 80200f8:	9a01      	ldr	r2, [sp, #4]
 80200fa:	881b      	ldrh	r3, [r3, #0]
 80200fc:	eba3 0308 	sub.w	r3, r3, r8
 8020100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020104:	441c      	add	r4, r3
 8020106:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802010a:	4413      	add	r3, r2
 802010c:	9a05      	ldr	r2, [sp, #20]
 802010e:	fb93 f3f2 	sdiv	r3, r3, r2
 8020112:	441e      	add	r6, r3
 8020114:	e7ae      	b.n	8020074 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8020116:	4632      	mov	r2, r6
 8020118:	46c4      	mov	ip, r8
 802011a:	e037      	b.n	802018c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802011c:	d10e      	bne.n	802013c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802011e:	7812      	ldrb	r2, [r2, #0]
 8020120:	3003      	adds	r0, #3
 8020122:	0912      	lsrs	r2, r2, #4
 8020124:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020128:	18ac      	adds	r4, r5, r2
 802012a:	5caa      	ldrb	r2, [r5, r2]
 802012c:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020130:	7862      	ldrb	r2, [r4, #1]
 8020132:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020136:	78a2      	ldrb	r2, [r4, #2]
 8020138:	f800 2c01 	strb.w	r2, [r0, #-1]
 802013c:	880c      	ldrh	r4, [r1, #0]
 802013e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020142:	eba4 0408 	sub.w	r4, r4, r8
 8020146:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802014a:	4404      	add	r4, r0
 802014c:	9801      	ldr	r0, [sp, #4]
 802014e:	4402      	add	r2, r0
 8020150:	fb92 f2f7 	sdiv	r2, r2, r7
 8020154:	4416      	add	r6, r2
 8020156:	429c      	cmp	r4, r3
 8020158:	d245      	bcs.n	80201e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802015a:	9a02      	ldr	r2, [sp, #8]
 802015c:	2a00      	cmp	r2, #0
 802015e:	d0da      	beq.n	8020116 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8020160:	7830      	ldrb	r0, [r6, #0]
 8020162:	1c72      	adds	r2, r6, #1
 8020164:	3403      	adds	r4, #3
 8020166:	f000 000f 	and.w	r0, r0, #15
 802016a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802016e:	eb05 0c00 	add.w	ip, r5, r0
 8020172:	5c28      	ldrb	r0, [r5, r0]
 8020174:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020178:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802017c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020180:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8020184:	f108 3cff 	add.w	ip, r8, #4294967295
 8020188:	f804 0c01 	strb.w	r0, [r4, #-1]
 802018c:	f1bc 0f01 	cmp.w	ip, #1
 8020190:	4620      	mov	r0, r4
 8020192:	f104 0406 	add.w	r4, r4, #6
 8020196:	ddc1      	ble.n	802011c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8020198:	7810      	ldrb	r0, [r2, #0]
 802019a:	f1ac 0c02 	sub.w	ip, ip, #2
 802019e:	0900      	lsrs	r0, r0, #4
 80201a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80201a4:	eb05 0e00 	add.w	lr, r5, r0
 80201a8:	5c28      	ldrb	r0, [r5, r0]
 80201aa:	f804 0c06 	strb.w	r0, [r4, #-6]
 80201ae:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80201b2:	f804 0c05 	strb.w	r0, [r4, #-5]
 80201b6:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80201ba:	f804 0c04 	strb.w	r0, [r4, #-4]
 80201be:	f812 0b01 	ldrb.w	r0, [r2], #1
 80201c2:	f000 000f 	and.w	r0, r0, #15
 80201c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80201ca:	eb05 0e00 	add.w	lr, r5, r0
 80201ce:	5c28      	ldrb	r0, [r5, r0]
 80201d0:	f804 0c03 	strb.w	r0, [r4, #-3]
 80201d4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80201d8:	f804 0c02 	strb.w	r0, [r4, #-2]
 80201dc:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80201e0:	f804 0c01 	strb.w	r0, [r4, #-1]
 80201e4:	e7d2      	b.n	802018c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80201e6:	4b04      	ldr	r3, [pc, #16]	@ (80201f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80201e8:	6818      	ldr	r0, [r3, #0]
 80201ea:	6803      	ldr	r3, [r0, #0]
 80201ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201ee:	4798      	blx	r3
 80201f0:	b00b      	add	sp, #44	@ 0x2c
 80201f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201f6:	bf00      	nop
 80201f8:	240253d4 	.word	0x240253d4
 80201fc:	240253ce 	.word	0x240253ce

08020200 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8020200:	b530      	push	{r4, r5, lr}
 8020202:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020206:	780d      	ldrb	r5, [r1, #0]
 8020208:	28ff      	cmp	r0, #255	@ 0xff
 802020a:	d107      	bne.n	802021c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802020c:	2bff      	cmp	r3, #255	@ 0xff
 802020e:	d105      	bne.n	802021c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020210:	7015      	strb	r5, [r2, #0]
 8020212:	784b      	ldrb	r3, [r1, #1]
 8020214:	7053      	strb	r3, [r2, #1]
 8020216:	788b      	ldrb	r3, [r1, #2]
 8020218:	7093      	strb	r3, [r2, #2]
 802021a:	bd30      	pop	{r4, r5, pc}
 802021c:	fb10 f003 	smulbb	r0, r0, r3
 8020220:	b283      	uxth	r3, r0
 8020222:	1c58      	adds	r0, r3, #1
 8020224:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020228:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802022c:	b284      	uxth	r4, r0
 802022e:	43c0      	mvns	r0, r0
 8020230:	fb15 f504 	smulbb	r5, r5, r4
 8020234:	b2c3      	uxtb	r3, r0
 8020236:	7810      	ldrb	r0, [r2, #0]
 8020238:	fb00 5003 	mla	r0, r0, r3, r5
 802023c:	b280      	uxth	r0, r0
 802023e:	1c45      	adds	r5, r0, #1
 8020240:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020244:	7855      	ldrb	r5, [r2, #1]
 8020246:	fb15 f503 	smulbb	r5, r5, r3
 802024a:	1200      	asrs	r0, r0, #8
 802024c:	7010      	strb	r0, [r2, #0]
 802024e:	7848      	ldrb	r0, [r1, #1]
 8020250:	fb00 5004 	mla	r0, r0, r4, r5
 8020254:	b280      	uxth	r0, r0
 8020256:	1c45      	adds	r5, r0, #1
 8020258:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802025c:	1200      	asrs	r0, r0, #8
 802025e:	7050      	strb	r0, [r2, #1]
 8020260:	7888      	ldrb	r0, [r1, #2]
 8020262:	7891      	ldrb	r1, [r2, #2]
 8020264:	fb11 f303 	smulbb	r3, r1, r3
 8020268:	fb00 3304 	mla	r3, r0, r4, r3
 802026c:	b29b      	uxth	r3, r3
 802026e:	1c59      	adds	r1, r3, #1
 8020270:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020274:	121b      	asrs	r3, r3, #8
 8020276:	e7cf      	b.n	8020218 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08020278 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802027c:	461d      	mov	r5, r3
 802027e:	b08f      	sub	sp, #60	@ 0x3c
 8020280:	460c      	mov	r4, r1
 8020282:	4616      	mov	r6, r2
 8020284:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020286:	4680      	mov	r8, r0
 8020288:	6869      	ldr	r1, [r5, #4]
 802028a:	aa0a      	add	r2, sp, #40	@ 0x28
 802028c:	6828      	ldr	r0, [r5, #0]
 802028e:	3604      	adds	r6, #4
 8020290:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8020294:	4f57      	ldr	r7, [pc, #348]	@ (80203f4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8020296:	c203      	stmia	r2!, {r0, r1}
 8020298:	6818      	ldr	r0, [r3, #0]
 802029a:	aa0c      	add	r2, sp, #48	@ 0x30
 802029c:	6859      	ldr	r1, [r3, #4]
 802029e:	c203      	stmia	r2!, {r0, r1}
 80202a0:	a80a      	add	r0, sp, #40	@ 0x28
 80202a2:	f7f2 fd23 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202a6:	4629      	mov	r1, r5
 80202a8:	a80c      	add	r0, sp, #48	@ 0x30
 80202aa:	2502      	movs	r5, #2
 80202ac:	f7f2 fd62 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202b0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80202b4:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80202b8:	f002 0301 	and.w	r3, r2, #1
 80202bc:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80202c0:	9304      	str	r3, [sp, #16]
 80202c2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80202c6:	f003 0101 	and.w	r1, r3, #1
 80202ca:	9103      	str	r1, [sp, #12]
 80202cc:	9803      	ldr	r0, [sp, #12]
 80202ce:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80202d2:	4403      	add	r3, r0
 80202d4:	6838      	ldr	r0, [r7, #0]
 80202d6:	fb01 2303 	mla	r3, r1, r3, r2
 80202da:	fb93 f3f5 	sdiv	r3, r3, r5
 80202de:	18e5      	adds	r5, r4, r3
 80202e0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80202e4:	441a      	add	r2, r3
 80202e6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80202ea:	4419      	add	r1, r3
 80202ec:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80202f0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80202f4:	6803      	ldr	r3, [r0, #0]
 80202f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80202f8:	4798      	blx	r3
 80202fa:	4a3f      	ldr	r2, [pc, #252]	@ (80203f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80202fc:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8020300:	8813      	ldrh	r3, [r2, #0]
 8020302:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020306:	9207      	str	r2, [sp, #28]
 8020308:	fb03 1404 	mla	r4, r3, r4, r1
 802030c:	fb0a f303 	mul.w	r3, sl, r3
 8020310:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020318:	4404      	add	r4, r0
 802031a:	18e3      	adds	r3, r4, r3
 802031c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8020320:	9b05      	ldr	r3, [sp, #20]
 8020322:	429c      	cmp	r4, r3
 8020324:	d25d      	bcs.n	80203e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8020326:	9b04      	ldr	r3, [sp, #16]
 8020328:	2b00      	cmp	r3, #0
 802032a:	d037      	beq.n	802039c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 802032c:	782b      	ldrb	r3, [r5, #0]
 802032e:	1c6f      	adds	r7, r5, #1
 8020330:	f003 030f 	and.w	r3, r3, #15
 8020334:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020338:	9309      	str	r3, [sp, #36]	@ 0x24
 802033a:	0e1b      	lsrs	r3, r3, #24
 802033c:	d006      	beq.n	802034c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802033e:	9300      	str	r3, [sp, #0]
 8020340:	4622      	mov	r2, r4
 8020342:	464b      	mov	r3, r9
 8020344:	a909      	add	r1, sp, #36	@ 0x24
 8020346:	4640      	mov	r0, r8
 8020348:	f7ff ff5a 	bl	8020200 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802034c:	3403      	adds	r4, #3
 802034e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8020352:	f1ba 0f01 	cmp.w	sl, #1
 8020356:	dd24      	ble.n	80203a2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020358:	783b      	ldrb	r3, [r7, #0]
 802035a:	091b      	lsrs	r3, r3, #4
 802035c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020360:	9308      	str	r3, [sp, #32]
 8020362:	0e1b      	lsrs	r3, r3, #24
 8020364:	d006      	beq.n	8020374 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8020366:	9300      	str	r3, [sp, #0]
 8020368:	4622      	mov	r2, r4
 802036a:	464b      	mov	r3, r9
 802036c:	a908      	add	r1, sp, #32
 802036e:	4640      	mov	r0, r8
 8020370:	f7ff ff46 	bl	8020200 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020374:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020378:	f003 030f 	and.w	r3, r3, #15
 802037c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020380:	9309      	str	r3, [sp, #36]	@ 0x24
 8020382:	0e1b      	lsrs	r3, r3, #24
 8020384:	d006      	beq.n	8020394 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020386:	9300      	str	r3, [sp, #0]
 8020388:	1ce2      	adds	r2, r4, #3
 802038a:	464b      	mov	r3, r9
 802038c:	a909      	add	r1, sp, #36	@ 0x24
 802038e:	4640      	mov	r0, r8
 8020390:	f7ff ff36 	bl	8020200 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020394:	3406      	adds	r4, #6
 8020396:	f1aa 0a02 	sub.w	sl, sl, #2
 802039a:	e7da      	b.n	8020352 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802039c:	462f      	mov	r7, r5
 802039e:	46da      	mov	sl, fp
 80203a0:	e7d7      	b.n	8020352 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80203a2:	d10e      	bne.n	80203c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 80203a4:	783b      	ldrb	r3, [r7, #0]
 80203a6:	091b      	lsrs	r3, r3, #4
 80203a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80203ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80203ae:	0e1b      	lsrs	r3, r3, #24
 80203b0:	d006      	beq.n	80203c0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 80203b2:	9300      	str	r3, [sp, #0]
 80203b4:	4622      	mov	r2, r4
 80203b6:	464b      	mov	r3, r9
 80203b8:	a909      	add	r1, sp, #36	@ 0x24
 80203ba:	4640      	mov	r0, r8
 80203bc:	f7ff ff20 	bl	8020200 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80203c0:	3403      	adds	r4, #3
 80203c2:	9b07      	ldr	r3, [sp, #28]
 80203c4:	9a03      	ldr	r2, [sp, #12]
 80203c6:	881b      	ldrh	r3, [r3, #0]
 80203c8:	eba3 030b 	sub.w	r3, r3, fp
 80203cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203d0:	441c      	add	r4, r3
 80203d2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80203d6:	4413      	add	r3, r2
 80203d8:	2202      	movs	r2, #2
 80203da:	fb93 f3f2 	sdiv	r3, r3, r2
 80203de:	441d      	add	r5, r3
 80203e0:	e79e      	b.n	8020320 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80203e2:	9b06      	ldr	r3, [sp, #24]
 80203e4:	6818      	ldr	r0, [r3, #0]
 80203e6:	6803      	ldr	r3, [r0, #0]
 80203e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80203ea:	4798      	blx	r3
 80203ec:	b00f      	add	sp, #60	@ 0x3c
 80203ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203f2:	bf00      	nop
 80203f4:	240253d4 	.word	0x240253d4
 80203f8:	240253ce 	.word	0x240253ce

080203fc <CRC_Lock>:
 80203fc:	4a2d      	ldr	r2, [pc, #180]	@ (80204b4 <CRC_Lock+0xb8>)
 80203fe:	b530      	push	{r4, r5, lr}
 8020400:	6813      	ldr	r3, [r2, #0]
 8020402:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8020406:	f023 0301 	bic.w	r3, r3, #1
 802040a:	6013      	str	r3, [r2, #0]
 802040c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8020410:	4b29      	ldr	r3, [pc, #164]	@ (80204b8 <CRC_Lock+0xbc>)
 8020412:	681c      	ldr	r4, [r3, #0]
 8020414:	4014      	ands	r4, r2
 8020416:	42ac      	cmp	r4, r5
 8020418:	d005      	beq.n	8020426 <CRC_Lock+0x2a>
 802041a:	681c      	ldr	r4, [r3, #0]
 802041c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8020420:	4014      	ands	r4, r2
 8020422:	42ac      	cmp	r4, r5
 8020424:	d125      	bne.n	8020472 <CRC_Lock+0x76>
 8020426:	4b25      	ldr	r3, [pc, #148]	@ (80204bc <CRC_Lock+0xc0>)
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d139      	bne.n	80204a2 <CRC_Lock+0xa6>
 802042e:	4b24      	ldr	r3, [pc, #144]	@ (80204c0 <CRC_Lock+0xc4>)
 8020430:	681a      	ldr	r2, [r3, #0]
 8020432:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020436:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802043a:	d00d      	beq.n	8020458 <CRC_Lock+0x5c>
 802043c:	681a      	ldr	r2, [r3, #0]
 802043e:	f240 4483 	movw	r4, #1155	@ 0x483
 8020442:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020446:	42a2      	cmp	r2, r4
 8020448:	d006      	beq.n	8020458 <CRC_Lock+0x5c>
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	f240 4285 	movw	r2, #1157	@ 0x485
 8020450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020454:	4293      	cmp	r3, r2
 8020456:	d124      	bne.n	80204a2 <CRC_Lock+0xa6>
 8020458:	4b1a      	ldr	r3, [pc, #104]	@ (80204c4 <CRC_Lock+0xc8>)
 802045a:	2201      	movs	r2, #1
 802045c:	601a      	str	r2, [r3, #0]
 802045e:	681a      	ldr	r2, [r3, #0]
 8020460:	2a00      	cmp	r2, #0
 8020462:	d1fc      	bne.n	802045e <CRC_Lock+0x62>
 8020464:	4b18      	ldr	r3, [pc, #96]	@ (80204c8 <CRC_Lock+0xcc>)
 8020466:	6018      	str	r0, [r3, #0]
 8020468:	6818      	ldr	r0, [r3, #0]
 802046a:	1a43      	subs	r3, r0, r1
 802046c:	4258      	negs	r0, r3
 802046e:	4158      	adcs	r0, r3
 8020470:	e00e      	b.n	8020490 <CRC_Lock+0x94>
 8020472:	681b      	ldr	r3, [r3, #0]
 8020474:	4013      	ands	r3, r2
 8020476:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802047a:	4293      	cmp	r3, r2
 802047c:	d111      	bne.n	80204a2 <CRC_Lock+0xa6>
 802047e:	4b13      	ldr	r3, [pc, #76]	@ (80204cc <CRC_Lock+0xd0>)
 8020480:	f240 4286 	movw	r2, #1158	@ 0x486
 8020484:	681b      	ldr	r3, [r3, #0]
 8020486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802048a:	4293      	cmp	r3, r2
 802048c:	d001      	beq.n	8020492 <CRC_Lock+0x96>
 802048e:	2000      	movs	r0, #0
 8020490:	bd30      	pop	{r4, r5, pc}
 8020492:	4b0f      	ldr	r3, [pc, #60]	@ (80204d0 <CRC_Lock+0xd4>)
 8020494:	2201      	movs	r2, #1
 8020496:	601a      	str	r2, [r3, #0]
 8020498:	681a      	ldr	r2, [r3, #0]
 802049a:	2a00      	cmp	r2, #0
 802049c:	d1fc      	bne.n	8020498 <CRC_Lock+0x9c>
 802049e:	4b0d      	ldr	r3, [pc, #52]	@ (80204d4 <CRC_Lock+0xd8>)
 80204a0:	e7e1      	b.n	8020466 <CRC_Lock+0x6a>
 80204a2:	4b0d      	ldr	r3, [pc, #52]	@ (80204d8 <CRC_Lock+0xdc>)
 80204a4:	2201      	movs	r2, #1
 80204a6:	601a      	str	r2, [r3, #0]
 80204a8:	681a      	ldr	r2, [r3, #0]
 80204aa:	2a00      	cmp	r2, #0
 80204ac:	d1fc      	bne.n	80204a8 <CRC_Lock+0xac>
 80204ae:	4b0b      	ldr	r3, [pc, #44]	@ (80204dc <CRC_Lock+0xe0>)
 80204b0:	e7d9      	b.n	8020466 <CRC_Lock+0x6a>
 80204b2:	bf00      	nop
 80204b4:	e0002000 	.word	0xe0002000
 80204b8:	e000ed00 	.word	0xe000ed00
 80204bc:	e0042000 	.word	0xe0042000
 80204c0:	5c001000 	.word	0x5c001000
 80204c4:	58024c08 	.word	0x58024c08
 80204c8:	58024c00 	.word	0x58024c00
 80204cc:	46008ff0 	.word	0x46008ff0
 80204d0:	46024c08 	.word	0x46024c08
 80204d4:	46024c00 	.word	0x46024c00
 80204d8:	40023008 	.word	0x40023008
 80204dc:	40023000 	.word	0x40023000

080204e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80204e0:	6101      	str	r1, [r0, #16]
 80204e2:	4770      	bx	lr

080204e4 <_ZN8touchgfx8Gestures4tickEv>:
 80204e4:	7b83      	ldrb	r3, [r0, #14]
 80204e6:	b14b      	cbz	r3, 80204fc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80204e8:	8903      	ldrh	r3, [r0, #8]
 80204ea:	3301      	adds	r3, #1
 80204ec:	b29b      	uxth	r3, r3
 80204ee:	2b07      	cmp	r3, #7
 80204f0:	8103      	strh	r3, [r0, #8]
 80204f2:	bf81      	itttt	hi
 80204f4:	2300      	movhi	r3, #0
 80204f6:	8143      	strhhi	r3, [r0, #10]
 80204f8:	8183      	strhhi	r3, [r0, #12]
 80204fa:	7383      	strbhi	r3, [r0, #14]
 80204fc:	4770      	bx	lr
	...

08020500 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020500:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020504:	4698      	mov	r8, r3
 8020506:	8883      	ldrh	r3, [r0, #4]
 8020508:	4604      	mov	r4, r0
 802050a:	4617      	mov	r7, r2
 802050c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020510:	eba8 0303 	sub.w	r3, r8, r3
 8020514:	4a19      	ldr	r2, [pc, #100]	@ (802057c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8020516:	460e      	mov	r6, r1
 8020518:	b21b      	sxth	r3, r3
 802051a:	88c1      	ldrh	r1, [r0, #6]
 802051c:	9200      	str	r2, [sp, #0]
 802051e:	2000      	movs	r0, #0
 8020520:	2b00      	cmp	r3, #0
 8020522:	8aa2      	ldrh	r2, [r4, #20]
 8020524:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8020528:	bfb8      	it	lt
 802052a:	425b      	neglt	r3, r3
 802052c:	f88d 0004 	strb.w	r0, [sp, #4]
 8020530:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020534:	b21b      	sxth	r3, r3
 8020536:	f8ad 800a 	strh.w	r8, [sp, #10]
 802053a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802053e:	4293      	cmp	r3, r2
 8020540:	dc07      	bgt.n	8020552 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020542:	1a69      	subs	r1, r5, r1
 8020544:	b209      	sxth	r1, r1
 8020546:	2900      	cmp	r1, #0
 8020548:	bfb8      	it	lt
 802054a:	4249      	neglt	r1, r1
 802054c:	b209      	sxth	r1, r1
 802054e:	428a      	cmp	r2, r1
 8020550:	da10      	bge.n	8020574 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8020552:	6920      	ldr	r0, [r4, #16]
 8020554:	4669      	mov	r1, sp
 8020556:	eba8 0606 	sub.w	r6, r8, r6
 802055a:	1bef      	subs	r7, r5, r7
 802055c:	6803      	ldr	r3, [r0, #0]
 802055e:	685b      	ldr	r3, [r3, #4]
 8020560:	4798      	blx	r3
 8020562:	2300      	movs	r3, #0
 8020564:	2001      	movs	r0, #1
 8020566:	8166      	strh	r6, [r4, #10]
 8020568:	8123      	strh	r3, [r4, #8]
 802056a:	81a7      	strh	r7, [r4, #12]
 802056c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020570:	80e5      	strh	r5, [r4, #6]
 8020572:	73a0      	strb	r0, [r4, #14]
 8020574:	b004      	add	sp, #16
 8020576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802057a:	bf00      	nop
 802057c:	08025760 	.word	0x08025760

08020580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020582:	461e      	mov	r6, r3
 8020584:	1e4b      	subs	r3, r1, #1
 8020586:	b085      	sub	sp, #20
 8020588:	4604      	mov	r4, r0
 802058a:	2b01      	cmp	r3, #1
 802058c:	460d      	mov	r5, r1
 802058e:	4617      	mov	r7, r2
 8020590:	d84b      	bhi.n	802062a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020592:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020596:	1cd3      	adds	r3, r2, #3
 8020598:	b29b      	uxth	r3, r3
 802059a:	2b06      	cmp	r3, #6
 802059c:	d916      	bls.n	80205cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802059e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8020640 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80205a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80205a6:	f8cd c004 	str.w	ip, [sp, #4]
 80205aa:	f04f 0c00 	mov.w	ip, #0
 80205ae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80205b2:	6900      	ldr	r0, [r0, #16]
 80205b4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80205b8:	a901      	add	r1, sp, #4
 80205ba:	f88d c008 	strb.w	ip, [sp, #8]
 80205be:	f8ad 200a 	strh.w	r2, [sp, #10]
 80205c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80205c6:	6803      	ldr	r3, [r0, #0]
 80205c8:	689b      	ldr	r3, [r3, #8]
 80205ca:	4798      	blx	r3
 80205cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80205d0:	1cd3      	adds	r3, r2, #3
 80205d2:	b29b      	uxth	r3, r3
 80205d4:	2b06      	cmp	r3, #6
 80205d6:	d916      	bls.n	8020606 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80205d8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8020640 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80205dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80205e0:	f8cd c004 	str.w	ip, [sp, #4]
 80205e4:	f04f 0c01 	mov.w	ip, #1
 80205e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80205ec:	6920      	ldr	r0, [r4, #16]
 80205ee:	f8ad 100c 	strh.w	r1, [sp, #12]
 80205f2:	a901      	add	r1, sp, #4
 80205f4:	f88d c008 	strb.w	ip, [sp, #8]
 80205f8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80205fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020600:	6803      	ldr	r3, [r0, #0]
 8020602:	689b      	ldr	r3, [r3, #8]
 8020604:	4798      	blx	r3
 8020606:	4b0d      	ldr	r3, [pc, #52]	@ (802063c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020608:	a901      	add	r1, sp, #4
 802060a:	6920      	ldr	r0, [r4, #16]
 802060c:	9301      	str	r3, [sp, #4]
 802060e:	2300      	movs	r3, #0
 8020610:	f88d 5008 	strb.w	r5, [sp, #8]
 8020614:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020618:	f8ad 600c 	strh.w	r6, [sp, #12]
 802061c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020620:	6803      	ldr	r3, [r0, #0]
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	4798      	blx	r3
 8020626:	b005      	add	sp, #20
 8020628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802062a:	2900      	cmp	r1, #0
 802062c:	d1eb      	bne.n	8020606 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802062e:	80a2      	strh	r2, [r4, #4]
 8020630:	80c6      	strh	r6, [r0, #6]
 8020632:	60a1      	str	r1, [r4, #8]
 8020634:	81a1      	strh	r1, [r4, #12]
 8020636:	73a1      	strb	r1, [r4, #14]
 8020638:	e7e5      	b.n	8020606 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802063a:	bf00      	nop
 802063c:	0802574c 	.word	0x0802574c
 8020640:	08025774 	.word	0x08025774

08020644 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8020644:	10c9      	asrs	r1, r1, #3
 8020646:	2900      	cmp	r1, #0
 8020648:	bfb8      	it	lt
 802064a:	4249      	neglt	r1, r1
 802064c:	2801      	cmp	r0, #1
 802064e:	d108      	bne.n	8020662 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8020650:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8020654:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8020658:	4601      	mov	r1, r0
 802065a:	dd02      	ble.n	8020662 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802065c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8020660:	4770      	bx	lr
 8020662:	29ff      	cmp	r1, #255	@ 0xff
 8020664:	bfa8      	it	ge
 8020666:	21ff      	movge	r1, #255	@ 0xff
 8020668:	4608      	mov	r0, r1
 802066a:	4770      	bx	lr

0802066c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802066c:	b410      	push	{r4}
 802066e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8020672:	429c      	cmp	r4, r3
 8020674:	d803      	bhi.n	802067e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8020676:	f85d 4b04 	ldr.w	r4, [sp], #4
 802067a:	f7f1 baeb 	b.w	8011c54 <_ZN8touchgfx7Outline6lineToEii>
 802067e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020682:	4770      	bx	lr

08020684 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8020684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020688:	b08b      	sub	sp, #44	@ 0x2c
 802068a:	4606      	mov	r6, r0
 802068c:	468a      	mov	sl, r1
 802068e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8020692:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8020696:	9308      	str	r3, [sp, #32]
 8020698:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802069c:	9309      	str	r3, [sp, #36]	@ 0x24
 802069e:	f7f1 fc44 	bl	8011f2a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80206a2:	68b5      	ldr	r5, [r6, #8]
 80206a4:	4604      	mov	r4, r0
 80206a6:	2d00      	cmp	r5, #0
 80206a8:	d044      	beq.n	8020734 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80206aa:	6873      	ldr	r3, [r6, #4]
 80206ac:	42ab      	cmp	r3, r5
 80206ae:	d33d      	bcc.n	802072c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80206b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80206b4:	f04f 0800 	mov.w	r8, #0
 80206b8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80206bc:	eb02 0b03 	add.w	fp, r2, r3
 80206c0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80206c4:	fb02 1203 	mla	r2, r2, r3, r1
 80206c8:	9205      	str	r2, [sp, #20]
 80206ca:	1e6a      	subs	r2, r5, #1
 80206cc:	9204      	str	r2, [sp, #16]
 80206ce:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80206d2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80206d6:	454b      	cmp	r3, r9
 80206d8:	463a      	mov	r2, r7
 80206da:	d008      	beq.n	80206ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80206dc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80206e0:	eb03 0b09 	add.w	fp, r3, r9
 80206e4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80206e8:	fb03 1309 	mla	r3, r3, r9, r1
 80206ec:	9305      	str	r3, [sp, #20]
 80206ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80206f2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80206f6:	4498      	add	r8, r3
 80206f8:	9b04      	ldr	r3, [sp, #16]
 80206fa:	3b01      	subs	r3, #1
 80206fc:	9304      	str	r3, [sp, #16]
 80206fe:	9b04      	ldr	r3, [sp, #16]
 8020700:	3301      	adds	r3, #1
 8020702:	d015      	beq.n	8020730 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8020704:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8020708:	42bb      	cmp	r3, r7
 802070a:	d117      	bne.n	802073c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802070c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8020710:	9b04      	ldr	r3, [sp, #16]
 8020712:	4548      	cmp	r0, r9
 8020714:	f103 33ff 	add.w	r3, r3, #4294967295
 8020718:	d17d      	bne.n	8020816 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802071a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802071e:	4401      	add	r1, r0
 8020720:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020724:	4480      	add	r8, r0
 8020726:	e7e9      	b.n	80206fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8020728:	461f      	mov	r7, r3
 802072a:	e042      	b.n	80207b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802072c:	2000      	movs	r0, #0
 802072e:	e002      	b.n	8020736 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8020730:	2900      	cmp	r1, #0
 8020732:	d16d      	bne.n	8020810 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8020734:	2001      	movs	r0, #1
 8020736:	b00b      	add	sp, #44	@ 0x2c
 8020738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802073c:	b379      	cbz	r1, 802079e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802073e:	2f00      	cmp	r7, #0
 8020740:	db29      	blt.n	8020796 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8020742:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8020746:	42bb      	cmp	r3, r7
 8020748:	dd25      	ble.n	8020796 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802074a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802074e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8020752:	f7ff ff77 	bl	8020644 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8020756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020758:	fb10 f003 	smulbb	r0, r0, r3
 802075c:	b280      	uxth	r0, r0
 802075e:	1c41      	adds	r1, r0, #1
 8020760:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020764:	1209      	asrs	r1, r1, #8
 8020766:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802076a:	d014      	beq.n	8020796 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802076c:	b2c9      	uxtb	r1, r1
 802076e:	9808      	ldr	r0, [sp, #32]
 8020770:	b2ba      	uxth	r2, r7
 8020772:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8020774:	9102      	str	r1, [sp, #8]
 8020776:	2101      	movs	r1, #1
 8020778:	4413      	add	r3, r2
 802077a:	4402      	add	r2, r0
 802077c:	9101      	str	r1, [sp, #4]
 802077e:	fa0f f18b 	sxth.w	r1, fp
 8020782:	f8da 0000 	ldr.w	r0, [sl]
 8020786:	b21b      	sxth	r3, r3
 8020788:	9100      	str	r1, [sp, #0]
 802078a:	b212      	sxth	r2, r2
 802078c:	6941      	ldr	r1, [r0, #20]
 802078e:	4650      	mov	r0, sl
 8020790:	460d      	mov	r5, r1
 8020792:	9905      	ldr	r1, [sp, #20]
 8020794:	47a8      	blx	r5
 8020796:	9b04      	ldr	r3, [sp, #16]
 8020798:	1c7a      	adds	r2, r7, #1
 802079a:	3301      	adds	r3, #1
 802079c:	d0ca      	beq.n	8020734 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802079e:	f9b4 7000 	ldrsh.w	r7, [r4]
 80207a2:	1abb      	subs	r3, r7, r2
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	dd31      	ble.n	802080c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80207a8:	2a00      	cmp	r2, #0
 80207aa:	dabd      	bge.n	8020728 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80207ac:	2f00      	cmp	r7, #0
 80207ae:	dd2d      	ble.n	802080c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80207b0:	2200      	movs	r2, #0
 80207b2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80207b6:	19d1      	adds	r1, r2, r7
 80207b8:	4299      	cmp	r1, r3
 80207ba:	db02      	blt.n	80207c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80207bc:	1a9f      	subs	r7, r3, r2
 80207be:	2f00      	cmp	r7, #0
 80207c0:	dd24      	ble.n	802080c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80207c2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80207c6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80207ca:	f7ff ff3b 	bl	8020644 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80207ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207d0:	fb10 f003 	smulbb	r0, r0, r3
 80207d4:	b280      	uxth	r0, r0
 80207d6:	1c41      	adds	r1, r0, #1
 80207d8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80207dc:	1209      	asrs	r1, r1, #8
 80207de:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80207e2:	d013      	beq.n	802080c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80207e4:	b292      	uxth	r2, r2
 80207e6:	9808      	ldr	r0, [sp, #32]
 80207e8:	b2c9      	uxtb	r1, r1
 80207ea:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80207ec:	b23f      	sxth	r7, r7
 80207ee:	4413      	add	r3, r2
 80207f0:	9102      	str	r1, [sp, #8]
 80207f2:	4402      	add	r2, r0
 80207f4:	fa0f f18b 	sxth.w	r1, fp
 80207f8:	f8da 0000 	ldr.w	r0, [sl]
 80207fc:	b21b      	sxth	r3, r3
 80207fe:	9100      	str	r1, [sp, #0]
 8020800:	b212      	sxth	r2, r2
 8020802:	9701      	str	r7, [sp, #4]
 8020804:	9905      	ldr	r1, [sp, #20]
 8020806:	6947      	ldr	r7, [r0, #20]
 8020808:	4650      	mov	r0, sl
 802080a:	47b8      	blx	r7
 802080c:	464b      	mov	r3, r9
 802080e:	e75e      	b.n	80206ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8020810:	2f00      	cmp	r7, #0
 8020812:	da96      	bge.n	8020742 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8020814:	e78e      	b.n	8020734 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8020816:	2900      	cmp	r1, #0
 8020818:	d0f8      	beq.n	802080c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802081a:	e790      	b.n	802073e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802081c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802081c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020820:	461e      	mov	r6, r3
 8020822:	4b36      	ldr	r3, [pc, #216]	@ (80208fc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8020824:	2500      	movs	r5, #0
 8020826:	f100 0814 	add.w	r8, r0, #20
 802082a:	4604      	mov	r4, r0
 802082c:	4617      	mov	r7, r2
 802082e:	e9c0 3100 	strd	r3, r1, [r0]
 8020832:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8020836:	8185      	strh	r5, [r0, #12]
 8020838:	8103      	strh	r3, [r0, #8]
 802083a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802083e:	81c5      	strh	r5, [r0, #14]
 8020840:	7283      	strb	r3, [r0, #10]
 8020842:	8205      	strh	r5, [r0, #16]
 8020844:	8245      	strh	r5, [r0, #18]
 8020846:	4640      	mov	r0, r8
 8020848:	f7f0 fd4a 	bl	80112e0 <_ZN8touchgfx7OutlineC1Ev>
 802084c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8020850:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8020854:	466b      	mov	r3, sp
 8020856:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802085a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802085e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8020862:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8020866:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802086a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802086e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8020872:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8020876:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802087a:	6830      	ldr	r0, [r6, #0]
 802087c:	6871      	ldr	r1, [r6, #4]
 802087e:	8872      	ldrh	r2, [r6, #2]
 8020880:	8835      	ldrh	r5, [r6, #0]
 8020882:	c303      	stmia	r3!, {r0, r1}
 8020884:	887b      	ldrh	r3, [r7, #2]
 8020886:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802088a:	4413      	add	r3, r2
 802088c:	883a      	ldrh	r2, [r7, #0]
 802088e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8020892:	442a      	add	r2, r5
 8020894:	81e3      	strh	r3, [r4, #14]
 8020896:	8220      	strh	r0, [r4, #16]
 8020898:	4668      	mov	r0, sp
 802089a:	81a2      	strh	r2, [r4, #12]
 802089c:	8261      	strh	r1, [r4, #18]
 802089e:	4639      	mov	r1, r7
 80208a0:	f7f2 fa68 	bl	8012d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80208a4:	f104 000c 	add.w	r0, r4, #12
 80208a8:	f7f2 fa20 	bl	8012cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80208ac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80208b0:	f8bd 2000 	ldrh.w	r2, [sp]
 80208b4:	4640      	mov	r0, r8
 80208b6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80208ba:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80208be:	f7f0 fcf3 	bl	80112a8 <_ZN8touchgfx7Outline5resetEv>
 80208c2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80208c6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80208ca:	4620      	mov	r0, r4
 80208cc:	015b      	lsls	r3, r3, #5
 80208ce:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80208d0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80208d4:	015b      	lsls	r3, r3, #5
 80208d6:	6523      	str	r3, [r4, #80]	@ 0x50
 80208d8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80208dc:	015b      	lsls	r3, r3, #5
 80208de:	6563      	str	r3, [r4, #84]	@ 0x54
 80208e0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80208e4:	015b      	lsls	r3, r3, #5
 80208e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80208e8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80208ec:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80208f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80208f4:	b002      	add	sp, #8
 80208f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208fa:	bf00      	nop
 80208fc:	08025a04 	.word	0x08025a04

08020900 <_ZN8touchgfx6Canvas5closeEv>:
 8020900:	b538      	push	{r3, r4, r5, lr}
 8020902:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8020906:	4604      	mov	r4, r0
 8020908:	b193      	cbz	r3, 8020930 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802090a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802090e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8020912:	4213      	tst	r3, r2
 8020914:	d10c      	bne.n	8020930 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8020916:	f100 0514 	add.w	r5, r0, #20
 802091a:	b123      	cbz	r3, 8020926 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802091c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8020920:	4628      	mov	r0, r5
 8020922:	f7ff fea3 	bl	802066c <_ZN8touchgfx10Rasterizer6lineToEii>
 8020926:	4628      	mov	r0, r5
 8020928:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802092c:	f7ff fe9e 	bl	802066c <_ZN8touchgfx10Rasterizer6lineToEii>
 8020930:	2300      	movs	r3, #0
 8020932:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8020936:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802093a:	4298      	cmp	r0, r3
 802093c:	bf34      	ite	cc
 802093e:	2000      	movcc	r0, #0
 8020940:	2001      	movcs	r0, #1
 8020942:	bd38      	pop	{r3, r4, r5, pc}

08020944 <_ZN8touchgfx6Canvas6renderEh>:
 8020944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020948:	7a85      	ldrb	r5, [r0, #10]
 802094a:	4604      	mov	r4, r0
 802094c:	4369      	muls	r1, r5
 802094e:	1c4d      	adds	r5, r1, #1
 8020950:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8020954:	122d      	asrs	r5, r5, #8
 8020956:	f000 8098 	beq.w	8020a8a <_ZN8touchgfx6Canvas6renderEh+0x146>
 802095a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802095e:	2b00      	cmp	r3, #0
 8020960:	f000 8093 	beq.w	8020a8a <_ZN8touchgfx6Canvas6renderEh+0x146>
 8020964:	f7ff ffcc 	bl	8020900 <_ZN8touchgfx6Canvas5closeEv>
 8020968:	4607      	mov	r7, r0
 802096a:	2800      	cmp	r0, #0
 802096c:	d045      	beq.n	80209fa <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802096e:	6860      	ldr	r0, [r4, #4]
 8020970:	4e47      	ldr	r6, [pc, #284]	@ (8020a90 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8020972:	6803      	ldr	r3, [r0, #0]
 8020974:	6837      	ldr	r7, [r6, #0]
 8020976:	689b      	ldr	r3, [r3, #8]
 8020978:	4798      	blx	r3
 802097a:	4601      	mov	r1, r0
 802097c:	4638      	mov	r0, r7
 802097e:	f7ee f85f 	bl	800ea40 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8020982:	4607      	mov	r7, r0
 8020984:	f7e3 f926 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8020988:	6803      	ldr	r3, [r0, #0]
 802098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802098c:	4798      	blx	r3
 802098e:	4680      	mov	r8, r0
 8020990:	f7e3 f920 	bl	8003bd4 <_ZN8touchgfx3HAL3lcdEv>
 8020994:	6803      	ldr	r3, [r0, #0]
 8020996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020998:	4798      	blx	r3
 802099a:	280b      	cmp	r0, #11
 802099c:	d85a      	bhi.n	8020a54 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802099e:	e8df f000 	tbb	[pc, r0]
 80209a2:	5b50      	.short	0x5b50
 80209a4:	3059066b 	.word	0x3059066b
 80209a8:	64646440 	.word	0x64646440
 80209ac:	6464      	.short	0x6464
 80209ae:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80209b2:	2208      	movs	r2, #8
 80209b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80209b8:	fb91 f2f2 	sdiv	r2, r1, r2
 80209bc:	fb08 2303 	mla	r3, r8, r3, r2
 80209c0:	441f      	add	r7, r3
 80209c2:	424b      	negs	r3, r1
 80209c4:	f001 0107 	and.w	r1, r1, #7
 80209c8:	f003 0307 	and.w	r3, r3, #7
 80209cc:	bf58      	it	pl
 80209ce:	4259      	negpl	r1, r3
 80209d0:	b2c9      	uxtb	r1, r1
 80209d2:	b2ed      	uxtb	r5, r5
 80209d4:	463a      	mov	r2, r7
 80209d6:	fa0f f388 	sxth.w	r3, r8
 80209da:	f104 0014 	add.w	r0, r4, #20
 80209de:	e9cd 1500 	strd	r1, r5, [sp]
 80209e2:	6861      	ldr	r1, [r4, #4]
 80209e4:	f7ff fe4e 	bl	8020684 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80209e8:	4607      	mov	r7, r0
 80209ea:	6860      	ldr	r0, [r4, #4]
 80209ec:	6803      	ldr	r3, [r0, #0]
 80209ee:	691b      	ldr	r3, [r3, #16]
 80209f0:	4798      	blx	r3
 80209f2:	6830      	ldr	r0, [r6, #0]
 80209f4:	6803      	ldr	r3, [r0, #0]
 80209f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80209f8:	4798      	blx	r3
 80209fa:	4638      	mov	r0, r7
 80209fc:	b002      	add	sp, #8
 80209fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a02:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8020a06:	2204      	movs	r2, #4
 8020a08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a0c:	fb91 f2f2 	sdiv	r2, r1, r2
 8020a10:	fb08 2303 	mla	r3, r8, r3, r2
 8020a14:	441f      	add	r7, r3
 8020a16:	424b      	negs	r3, r1
 8020a18:	f001 0103 	and.w	r1, r1, #3
 8020a1c:	f003 0303 	and.w	r3, r3, #3
 8020a20:	e7d4      	b.n	80209cc <_ZN8touchgfx6Canvas6renderEh+0x88>
 8020a22:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8020a26:	2202      	movs	r2, #2
 8020a28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a2c:	2900      	cmp	r1, #0
 8020a2e:	fb91 f2f2 	sdiv	r2, r1, r2
 8020a32:	f001 0101 	and.w	r1, r1, #1
 8020a36:	fb08 2303 	mla	r3, r8, r3, r2
 8020a3a:	bfb8      	it	lt
 8020a3c:	4249      	neglt	r1, r1
 8020a3e:	441f      	add	r7, r3
 8020a40:	e7c6      	b.n	80209d0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8020a42:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a4a:	fb08 f303 	mul.w	r3, r8, r3
 8020a4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8020a52:	441f      	add	r7, r3
 8020a54:	2100      	movs	r1, #0
 8020a56:	e7bc      	b.n	80209d2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8020a58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a5c:	2103      	movs	r1, #3
 8020a5e:	fb08 f203 	mul.w	r2, r8, r3
 8020a62:	89a3      	ldrh	r3, [r4, #12]
 8020a64:	fb13 2301 	smlabb	r3, r3, r1, r2
 8020a68:	e7f3      	b.n	8020a52 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8020a6a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a72:	fb08 2303 	mla	r3, r8, r3, r2
 8020a76:	e7ec      	b.n	8020a52 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8020a78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a80:	fb08 f303 	mul.w	r3, r8, r3
 8020a84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020a88:	e7e3      	b.n	8020a52 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8020a8a:	2701      	movs	r7, #1
 8020a8c:	e7b5      	b.n	80209fa <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8020a8e:	bf00      	nop
 8020a90:	240253d4 	.word	0x240253d4

08020a94 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8020a94:	4b06      	ldr	r3, [pc, #24]	@ (8020ab0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8020a96:	b510      	push	{r4, lr}
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	2b01      	cmp	r3, #1
 8020a9c:	d107      	bne.n	8020aae <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8020a9e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8020aa2:	680b      	ldr	r3, [r1, #0]
 8020aa4:	6814      	ldr	r4, [r2, #0]
 8020aa6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8020aaa:	6013      	str	r3, [r2, #0]
 8020aac:	600c      	str	r4, [r1, #0]
 8020aae:	bd10      	pop	{r4, pc}
 8020ab0:	240253cc 	.word	0x240253cc

08020ab4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8020ab4:	b513      	push	{r0, r1, r4, lr}
 8020ab6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8020aba:	4604      	mov	r4, r0
 8020abc:	e9cd 2100 	strd	r2, r1, [sp]
 8020ac0:	b9a3      	cbnz	r3, 8020aec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8020ac2:	466a      	mov	r2, sp
 8020ac4:	a901      	add	r1, sp, #4
 8020ac6:	4620      	mov	r0, r4
 8020ac8:	f7ff ffe4 	bl	8020a94 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8020acc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8020ace:	9901      	ldr	r1, [sp, #4]
 8020ad0:	9a00      	ldr	r2, [sp, #0]
 8020ad2:	1ac9      	subs	r1, r1, r3
 8020ad4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020ad6:	1ad2      	subs	r2, r2, r3
 8020ad8:	9101      	str	r1, [sp, #4]
 8020ada:	2a00      	cmp	r2, #0
 8020adc:	9200      	str	r2, [sp, #0]
 8020ade:	da0b      	bge.n	8020af8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8020ae0:	2301      	movs	r3, #1
 8020ae2:	2900      	cmp	r1, #0
 8020ae4:	da0e      	bge.n	8020b04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8020ae6:	f043 0304 	orr.w	r3, r3, #4
 8020aea:	e013      	b.n	8020b14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8020aec:	f7ff ff08 	bl	8020900 <_ZN8touchgfx6Canvas5closeEv>
 8020af0:	2800      	cmp	r0, #0
 8020af2:	d1e6      	bne.n	8020ac2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8020af4:	b002      	add	sp, #8
 8020af6:	bd10      	pop	{r4, pc}
 8020af8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020afa:	429a      	cmp	r2, r3
 8020afc:	bfac      	ite	ge
 8020afe:	2302      	movge	r3, #2
 8020b00:	2300      	movlt	r3, #0
 8020b02:	e7ee      	b.n	8020ae2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8020b04:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8020b06:	4281      	cmp	r1, r0
 8020b08:	bfac      	ite	ge
 8020b0a:	2008      	movge	r0, #8
 8020b0c:	2000      	movlt	r0, #0
 8020b0e:	4318      	orrs	r0, r3
 8020b10:	b2c3      	uxtb	r3, r0
 8020b12:	b158      	cbz	r0, 8020b2c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8020b14:	2200      	movs	r2, #0
 8020b16:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8020b1a:	9901      	ldr	r1, [sp, #4]
 8020b1c:	9a00      	ldr	r2, [sp, #0]
 8020b1e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8020b20:	6722      	str	r2, [r4, #112]	@ 0x70
 8020b22:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8020b26:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8020b2a:	e7e3      	b.n	8020af4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8020b2c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8020b30:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8020b34:	4298      	cmp	r0, r3
 8020b36:	d803      	bhi.n	8020b40 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8020b38:	f104 0014 	add.w	r0, r4, #20
 8020b3c:	f7f1 f8a4 	bl	8011c88 <_ZN8touchgfx7Outline6moveToEii>
 8020b40:	2301      	movs	r3, #1
 8020b42:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8020b46:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8020b4a:	2300      	movs	r3, #0
 8020b4c:	e7e5      	b.n	8020b1a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08020b4e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8020b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020b50:	ab02      	add	r3, sp, #8
 8020b52:	4604      	mov	r4, r0
 8020b54:	9101      	str	r1, [sp, #4]
 8020b56:	a901      	add	r1, sp, #4
 8020b58:	f843 2d08 	str.w	r2, [r3, #-8]!
 8020b5c:	461a      	mov	r2, r3
 8020b5e:	f7ff ff99 	bl	8020a94 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8020b62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8020b64:	9901      	ldr	r1, [sp, #4]
 8020b66:	9a00      	ldr	r2, [sp, #0]
 8020b68:	1ac9      	subs	r1, r1, r3
 8020b6a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020b6c:	1ad2      	subs	r2, r2, r3
 8020b6e:	9101      	str	r1, [sp, #4]
 8020b70:	2a00      	cmp	r2, #0
 8020b72:	9200      	str	r2, [sp, #0]
 8020b74:	db1c      	blt.n	8020bb0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8020b76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020b78:	429a      	cmp	r2, r3
 8020b7a:	bfac      	ite	ge
 8020b7c:	2002      	movge	r0, #2
 8020b7e:	2000      	movlt	r0, #0
 8020b80:	2900      	cmp	r1, #0
 8020b82:	db17      	blt.n	8020bb4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8020b84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8020b86:	4299      	cmp	r1, r3
 8020b88:	bfac      	ite	ge
 8020b8a:	2308      	movge	r3, #8
 8020b8c:	2300      	movlt	r3, #0
 8020b8e:	4303      	orrs	r3, r0
 8020b90:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8020b94:	b2dd      	uxtb	r5, r3
 8020b96:	b978      	cbnz	r0, 8020bb8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8020b98:	f104 0014 	add.w	r0, r4, #20
 8020b9c:	f7ff fd66 	bl	802066c <_ZN8touchgfx10Rasterizer6lineToEii>
 8020ba0:	9b01      	ldr	r3, [sp, #4]
 8020ba2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8020ba6:	6623      	str	r3, [r4, #96]	@ 0x60
 8020ba8:	9b00      	ldr	r3, [sp, #0]
 8020baa:	6663      	str	r3, [r4, #100]	@ 0x64
 8020bac:	b002      	add	sp, #8
 8020bae:	bd70      	pop	{r4, r5, r6, pc}
 8020bb0:	2001      	movs	r0, #1
 8020bb2:	e7e5      	b.n	8020b80 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8020bb4:	2304      	movs	r3, #4
 8020bb6:	e7ea      	b.n	8020b8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8020bb8:	b113      	cbz	r3, 8020bc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8020bba:	ea10 0305 	ands.w	r3, r0, r5
 8020bbe:	d11c      	bne.n	8020bfa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8020bc0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8020bc4:	f104 0614 	add.w	r6, r4, #20
 8020bc8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8020bcc:	b98b      	cbnz	r3, 8020bf2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8020bce:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8020bd2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8020bd6:	4298      	cmp	r0, r3
 8020bd8:	d802      	bhi.n	8020be0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8020bda:	4630      	mov	r0, r6
 8020bdc:	f7f1 f854 	bl	8011c88 <_ZN8touchgfx7Outline6moveToEii>
 8020be0:	2301      	movs	r3, #1
 8020be2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8020be6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8020bea:	4630      	mov	r0, r6
 8020bec:	e9dd 2100 	ldrd	r2, r1, [sp]
 8020bf0:	e7d4      	b.n	8020b9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8020bf2:	4630      	mov	r0, r6
 8020bf4:	f7ff fd3a 	bl	802066c <_ZN8touchgfx10Rasterizer6lineToEii>
 8020bf8:	e7f7      	b.n	8020bea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8020bfa:	461d      	mov	r5, r3
 8020bfc:	e7d0      	b.n	8020ba0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08020c00 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8020c00:	b538      	push	{r3, r4, r5, lr}
 8020c02:	ed2d 8b10 	vpush	{d8-d15}
 8020c06:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8020c0a:	4605      	mov	r5, r0
 8020c0c:	eeb0 ca40 	vmov.f32	s24, s0
 8020c10:	460c      	mov	r4, r1
 8020c12:	eef0 ca60 	vmov.f32	s25, s1
 8020c16:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8020d74 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8020c1a:	eeb0 da41 	vmov.f32	s26, s2
 8020c1e:	eef0 da61 	vmov.f32	s27, s3
 8020c22:	eeb0 ea42 	vmov.f32	s28, s4
 8020c26:	eef0 ea62 	vmov.f32	s29, s5
 8020c2a:	eef0 aa6b 	vmov.f32	s21, s23
 8020c2e:	2c08      	cmp	r4, #8
 8020c30:	d86e      	bhi.n	8020d10 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8020c32:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8020c36:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8020c3a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8020c3e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8020c42:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8020c46:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8020c4a:	ee7c faad 	vadd.f32	s31, s25, s27
 8020c4e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020c52:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8020c56:	ee3d aaae 	vadd.f32	s20, s27, s29
 8020c5a:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8020c5e:	ee6f faab 	vmul.f32	s31, s31, s23
 8020c62:	ee69 9aab 	vmul.f32	s19, s19, s23
 8020c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020c6a:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8020c6e:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8020c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c76:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8020c7a:	ee68 8aab 	vmul.f32	s17, s17, s23
 8020c7e:	bf48      	it	mi
 8020c80:	eef1 7a67 	vnegmi.f32	s15, s15
 8020c84:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8020c88:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8020c8c:	eef4 7acb 	vcmpe.f32	s15, s22
 8020c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c94:	dd3f      	ble.n	8020d16 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8020c96:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020c9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020c9e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8020ca2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8020ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cae:	d847      	bhi.n	8020d40 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8020cb0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8020cb4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8020cb8:	f000 fa39 	bl	802112e <atan2f>
 8020cbc:	eeb0 8a40 	vmov.f32	s16, s0
 8020cc0:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8020cc4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8020cc8:	f000 fa31 	bl	802112e <atan2f>
 8020ccc:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020cd0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8020d78 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8020cd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cdc:	bf48      	it	mi
 8020cde:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020ce2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cea:	bfa4      	itt	ge
 8020cec:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8020d7c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8020cf0:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8020cf4:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8020d80 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8020cf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d00:	d51e      	bpl.n	8020d40 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8020d02:	eef0 0a49 	vmov.f32	s1, s18
 8020d06:	4628      	mov	r0, r5
 8020d08:	eeb0 0a68 	vmov.f32	s0, s17
 8020d0c:	f7ee fd18 	bl	800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020d10:	ecbd 8b10 	vpop	{d8-d15}
 8020d14:	bd38      	pop	{r3, r4, r5, pc}
 8020d16:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8020d1a:	eeb0 7a68 	vmov.f32	s14, s17
 8020d1e:	eef0 6a49 	vmov.f32	s13, s18
 8020d22:	eea7 7aea 	vfms.f32	s14, s15, s21
 8020d26:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8020d2a:	eee7 6aea 	vfms.f32	s13, s15, s21
 8020d2e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8020d32:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020d36:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d3e:	d9e0      	bls.n	8020d02 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8020d40:	3401      	adds	r4, #1
 8020d42:	eef0 0a6c 	vmov.f32	s1, s25
 8020d46:	eeb0 0a4c 	vmov.f32	s0, s24
 8020d4a:	4628      	mov	r0, r5
 8020d4c:	4621      	mov	r1, r4
 8020d4e:	eef0 2a49 	vmov.f32	s5, s18
 8020d52:	eeb0 2a68 	vmov.f32	s4, s17
 8020d56:	eef0 1a6f 	vmov.f32	s3, s31
 8020d5a:	eeb0 1a4f 	vmov.f32	s2, s30
 8020d5e:	f7ff ff4f 	bl	8020c00 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8020d62:	eef0 da4a 	vmov.f32	s27, s20
 8020d66:	eeb0 da69 	vmov.f32	s26, s19
 8020d6a:	eef0 ca49 	vmov.f32	s25, s18
 8020d6e:	eeb0 ca68 	vmov.f32	s24, s17
 8020d72:	e75c      	b.n	8020c2e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8020d74:	2edbe6ff 	.word	0x2edbe6ff
 8020d78:	40490fdb 	.word	0x40490fdb
 8020d7c:	40c90fdb 	.word	0x40c90fdb
 8020d80:	3dcccccd 	.word	0x3dcccccd

08020d84 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8020d84:	b530      	push	{r4, r5, lr}
 8020d86:	ed2d 8b10 	vpush	{d8-d15}
 8020d8a:	eef0 8a40 	vmov.f32	s17, s0
 8020d8e:	b085      	sub	sp, #20
 8020d90:	eef0 9a60 	vmov.f32	s19, s1
 8020d94:	4604      	mov	r4, r0
 8020d96:	eef0 fa41 	vmov.f32	s31, s2
 8020d9a:	460d      	mov	r5, r1
 8020d9c:	eeb0 fa61 	vmov.f32	s30, s3
 8020da0:	eef0 ba42 	vmov.f32	s23, s4
 8020da4:	eeb0 ca62 	vmov.f32	s24, s5
 8020da8:	eef0 aa43 	vmov.f32	s21, s6
 8020dac:	eeb0 ba63 	vmov.f32	s22, s7
 8020db0:	2d08      	cmp	r5, #8
 8020db2:	f200 8113 	bhi.w	8020fdc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8020db6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020dba:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8020dbe:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8020dc2:	ee38 daaf 	vadd.f32	s26, s17, s31
 8020dc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8020dca:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8020dce:	ee2d da27 	vmul.f32	s26, s26, s15
 8020dd2:	ed8d 6a01 	vstr	s12, [sp, #4]
 8020dd6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8020dda:	ee6c caa7 	vmul.f32	s25, s25, s15
 8020dde:	eeb0 ea4d 	vmov.f32	s28, s26
 8020de2:	ee79 da8f 	vadd.f32	s27, s19, s30
 8020de6:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8020dea:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8020dee:	ee66 6a27 	vmul.f32	s13, s12, s15
 8020df2:	ee6d daa7 	vmul.f32	s27, s27, s15
 8020df6:	edcd 6a03 	vstr	s13, [sp, #12]
 8020dfa:	eef0 6a6c 	vmov.f32	s13, s25
 8020dfe:	eef0 ea6d 	vmov.f32	s29, s27
 8020e02:	ee2e ea27 	vmul.f32	s28, s28, s15
 8020e06:	eee7 6a27 	vfma.f32	s13, s14, s15
 8020e0a:	eee7 ea27 	vfma.f32	s29, s14, s15
 8020e0e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8020e12:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8020e16:	eef0 6a67 	vmov.f32	s13, s15
 8020e1a:	ed8d 7a02 	vstr	s14, [sp, #8]
 8020e1e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8020e22:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8020e26:	ed9d 7a02 	vldr	s14, [sp, #8]
 8020e2a:	ee3e aa87 	vadd.f32	s20, s29, s14
 8020e2e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8020e32:	ee2a aa27 	vmul.f32	s20, s20, s15
 8020e36:	2d00      	cmp	r5, #0
 8020e38:	f000 810b 	beq.w	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020e3c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8020e40:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8021098 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020e44:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8020e48:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8020e4c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8020e50:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020e54:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8020e58:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020e5c:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8020e60:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8020e64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020e68:	eea5 6a27 	vfma.f32	s12, s10, s15
 8020e6c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8020e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e74:	bf48      	it	mi
 8020e76:	eeb1 7a47 	vnegmi.f32	s14, s14
 8020e7a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e82:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8020e86:	bf48      	it	mi
 8020e88:	eeb1 6a46 	vnegmi.f32	s12, s12
 8020e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e90:	f340 80a8 	ble.w	8020fe4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8020e94:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8020e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e9c:	dd5a      	ble.n	8020f54 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8020e9e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8020ea2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8020ea6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8020eaa:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020eae:	ee65 7a85 	vmul.f32	s15, s11, s10
 8020eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eba:	f200 80ca 	bhi.w	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020ebe:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020ec2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020ec6:	f000 f932 	bl	802112e <atan2f>
 8020eca:	eeb0 8a40 	vmov.f32	s16, s0
 8020ece:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8020ed2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8020ed6:	f000 f92a 	bl	802112e <atan2f>
 8020eda:	ee38 fa40 	vsub.f32	s30, s16, s0
 8020ede:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020ee2:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020ee6:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8020eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eee:	bf48      	it	mi
 8020ef0:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8020ef4:	f000 f91b 	bl	802112e <atan2f>
 8020ef8:	ee30 0a48 	vsub.f32	s0, s0, s16
 8020efc:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802109c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020f00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f08:	eeb4 fae7 	vcmpe.f32	s30, s15
 8020f0c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802109c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020f10:	bf48      	it	mi
 8020f12:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020f1e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80210a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8020f22:	bfa4      	itt	ge
 8020f24:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80210a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020f28:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8020f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f30:	bfa4      	itt	ge
 8020f32:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80210a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020f36:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8020f3a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8020f3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f46:	f140 8084 	bpl.w	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020f4a:	eef0 0a4a 	vmov.f32	s1, s20
 8020f4e:	eeb0 0a49 	vmov.f32	s0, s18
 8020f52:	e040      	b.n	8020fd6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8020f54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020f58:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020f5c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020f60:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f6c:	d871      	bhi.n	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020f6e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020f72:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020f76:	f000 f8da 	bl	802112e <atan2f>
 8020f7a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8020f7e:	eeb0 8a40 	vmov.f32	s16, s0
 8020f82:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8020f86:	f000 f8d2 	bl	802112e <atan2f>
 8020f8a:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020f8e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802109c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020f92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f9a:	bf48      	it	mi
 8020f9c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020fa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fa8:	bfa4      	itt	ge
 8020faa:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80210a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020fae:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8020fb2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80210a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8020fb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fbe:	d548      	bpl.n	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020fc0:	eef0 0a4f 	vmov.f32	s1, s30
 8020fc4:	4620      	mov	r0, r4
 8020fc6:	eeb0 0a6f 	vmov.f32	s0, s31
 8020fca:	f7ee fbb9 	bl	800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020fce:	eef0 0a4c 	vmov.f32	s1, s24
 8020fd2:	eeb0 0a6b 	vmov.f32	s0, s23
 8020fd6:	4620      	mov	r0, r4
 8020fd8:	f7ee fbb2 	bl	800f740 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020fdc:	b005      	add	sp, #20
 8020fde:	ecbd 8b10 	vpop	{d8-d15}
 8020fe2:	bd30      	pop	{r4, r5, pc}
 8020fe4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8021098 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020fe8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8020fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ff0:	dd19      	ble.n	8021026 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8020ff2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020ff6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8020ffa:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020ffe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8021002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802100a:	d822      	bhi.n	8021052 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802100c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8021010:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8021014:	f000 f88b 	bl	802112e <atan2f>
 8021018:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802101c:	eeb0 8a40 	vmov.f32	s16, s0
 8021020:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8021024:	e7af      	b.n	8020f86 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8021026:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802102a:	eeb0 7a49 	vmov.f32	s14, s18
 802102e:	eeb0 6a4a 	vmov.f32	s12, s20
 8021032:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021036:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802103a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802103e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8021042:	eee7 7a07 	vfma.f32	s15, s14, s14
 8021046:	eef4 7ac5 	vcmpe.f32	s15, s10
 802104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802104e:	f67f af7c 	bls.w	8020f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8021052:	3501      	adds	r5, #1
 8021054:	eef0 0a69 	vmov.f32	s1, s19
 8021058:	eeb0 0a68 	vmov.f32	s0, s17
 802105c:	4620      	mov	r0, r4
 802105e:	4629      	mov	r1, r5
 8021060:	eef0 3a4a 	vmov.f32	s7, s20
 8021064:	eeb0 3a49 	vmov.f32	s6, s18
 8021068:	eef0 2a6e 	vmov.f32	s5, s29
 802106c:	eeb0 2a4e 	vmov.f32	s4, s28
 8021070:	eef0 1a6d 	vmov.f32	s3, s27
 8021074:	eeb0 1a4d 	vmov.f32	s2, s26
 8021078:	f7ff fe84 	bl	8020d84 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802107c:	eeb0 ca6c 	vmov.f32	s24, s25
 8021080:	eddd ba01 	vldr	s23, [sp, #4]
 8021084:	eef0 9a4a 	vmov.f32	s19, s20
 8021088:	ed9d fa02 	vldr	s30, [sp, #8]
 802108c:	eef0 8a49 	vmov.f32	s17, s18
 8021090:	eddd fa03 	vldr	s31, [sp, #12]
 8021094:	e68c      	b.n	8020db0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8021096:	bf00      	nop
 8021098:	2edbe6ff 	.word	0x2edbe6ff
 802109c:	40490fdb 	.word	0x40490fdb
 80210a0:	3dcccccd 	.word	0x3dcccccd
 80210a4:	40c90fdb 	.word	0x40c90fdb

080210a8 <_ZN8touchgfx6CanvasD1Ev>:
 80210a8:	4b04      	ldr	r3, [pc, #16]	@ (80210bc <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80210aa:	b510      	push	{r4, lr}
 80210ac:	4604      	mov	r4, r0
 80210ae:	f840 3b14 	str.w	r3, [r0], #20
 80210b2:	f7f0 f8f1 	bl	8011298 <_ZN8touchgfx7OutlineD1Ev>
 80210b6:	4620      	mov	r0, r4
 80210b8:	bd10      	pop	{r4, pc}
 80210ba:	bf00      	nop
 80210bc:	08025a04 	.word	0x08025a04

080210c0 <_ZN8touchgfx6CanvasD0Ev>:
 80210c0:	b510      	push	{r4, lr}
 80210c2:	4604      	mov	r4, r0
 80210c4:	f7ff fff0 	bl	80210a8 <_ZN8touchgfx6CanvasD1Ev>
 80210c8:	2174      	movs	r1, #116	@ 0x74
 80210ca:	4620      	mov	r0, r4
 80210cc:	f000 f807 	bl	80210de <_ZdlPvj>
 80210d0:	4620      	mov	r0, r4
 80210d2:	bd10      	pop	{r4, pc}

080210d4 <__aeabi_atexit>:
 80210d4:	460b      	mov	r3, r1
 80210d6:	4601      	mov	r1, r0
 80210d8:	4618      	mov	r0, r3
 80210da:	f000 bc5b 	b.w	8021994 <__cxa_atexit>

080210de <_ZdlPvj>:
 80210de:	f000 b812 	b.w	8021106 <_ZdlPv>

080210e2 <__cxa_guard_acquire>:
 80210e2:	6802      	ldr	r2, [r0, #0]
 80210e4:	07d2      	lsls	r2, r2, #31
 80210e6:	4603      	mov	r3, r0
 80210e8:	d405      	bmi.n	80210f6 <__cxa_guard_acquire+0x14>
 80210ea:	7842      	ldrb	r2, [r0, #1]
 80210ec:	b102      	cbz	r2, 80210f0 <__cxa_guard_acquire+0xe>
 80210ee:	deff      	udf	#255	@ 0xff
 80210f0:	2001      	movs	r0, #1
 80210f2:	7058      	strb	r0, [r3, #1]
 80210f4:	4770      	bx	lr
 80210f6:	2000      	movs	r0, #0
 80210f8:	4770      	bx	lr

080210fa <__cxa_guard_release>:
 80210fa:	2301      	movs	r3, #1
 80210fc:	6003      	str	r3, [r0, #0]
 80210fe:	4770      	bx	lr

08021100 <__cxa_pure_virtual>:
 8021100:	b508      	push	{r3, lr}
 8021102:	f000 f80f 	bl	8021124 <_ZSt9terminatev>

08021106 <_ZdlPv>:
 8021106:	f000 bb8f 	b.w	8021828 <free>

0802110a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802110a:	b508      	push	{r3, lr}
 802110c:	4780      	blx	r0
 802110e:	f000 fb58 	bl	80217c2 <abort>
	...

08021114 <_ZSt13get_terminatev>:
 8021114:	4b02      	ldr	r3, [pc, #8]	@ (8021120 <_ZSt13get_terminatev+0xc>)
 8021116:	6818      	ldr	r0, [r3, #0]
 8021118:	f3bf 8f5b 	dmb	ish
 802111c:	4770      	bx	lr
 802111e:	bf00      	nop
 8021120:	240000d8 	.word	0x240000d8

08021124 <_ZSt9terminatev>:
 8021124:	b508      	push	{r3, lr}
 8021126:	f7ff fff5 	bl	8021114 <_ZSt13get_terminatev>
 802112a:	f7ff ffee 	bl	802110a <_ZN10__cxxabiv111__terminateEPFvvE>

0802112e <atan2f>:
 802112e:	f000 b9cf 	b.w	80214d0 <__ieee754_atan2f>
	...

08021134 <sqrtf>:
 8021134:	b508      	push	{r3, lr}
 8021136:	ed2d 8b02 	vpush	{d8}
 802113a:	eeb0 8a40 	vmov.f32	s16, s0
 802113e:	f000 f9c4 	bl	80214ca <__ieee754_sqrtf>
 8021142:	eeb4 8a48 	vcmp.f32	s16, s16
 8021146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802114a:	d60c      	bvs.n	8021166 <sqrtf+0x32>
 802114c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802116c <sqrtf+0x38>
 8021150:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021158:	d505      	bpl.n	8021166 <sqrtf+0x32>
 802115a:	f000 fe89 	bl	8021e70 <__errno>
 802115e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8021162:	2321      	movs	r3, #33	@ 0x21
 8021164:	6003      	str	r3, [r0, #0]
 8021166:	ecbd 8b02 	vpop	{d8}
 802116a:	bd08      	pop	{r3, pc}
 802116c:	00000000 	.word	0x00000000

08021170 <sinf_poly>:
 8021170:	07cb      	lsls	r3, r1, #31
 8021172:	d412      	bmi.n	802119a <sinf_poly+0x2a>
 8021174:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021178:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802117c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021180:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021184:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021188:	ee21 1b05 	vmul.f64	d1, d1, d5
 802118c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021190:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021194:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021198:	4770      	bx	lr
 802119a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802119e:	ee21 5b01 	vmul.f64	d5, d1, d1
 80211a2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80211a6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80211aa:	eea1 7b06 	vfma.f64	d7, d1, d6
 80211ae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80211b2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80211b6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80211ba:	ee21 1b05 	vmul.f64	d1, d1, d5
 80211be:	eea5 0b06 	vfma.f64	d0, d5, d6
 80211c2:	e7e5      	b.n	8021190 <sinf_poly+0x20>
 80211c4:	0000      	movs	r0, r0
	...

080211c8 <sinf>:
 80211c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80211ca:	ee10 4a10 	vmov	r4, s0
 80211ce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80211d2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80211d6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80211da:	eef0 7a40 	vmov.f32	s15, s0
 80211de:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80211e2:	d218      	bcs.n	8021216 <sinf+0x4e>
 80211e4:	ee26 1b06 	vmul.f64	d1, d6, d6
 80211e8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80211ec:	d20a      	bcs.n	8021204 <sinf+0x3c>
 80211ee:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 80211f2:	d103      	bne.n	80211fc <sinf+0x34>
 80211f4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80211f8:	ed8d 1a01 	vstr	s2, [sp, #4]
 80211fc:	eeb0 0a67 	vmov.f32	s0, s15
 8021200:	b003      	add	sp, #12
 8021202:	bd30      	pop	{r4, r5, pc}
 8021204:	483a      	ldr	r0, [pc, #232]	@ (80212f0 <sinf+0x128>)
 8021206:	eeb0 0b46 	vmov.f64	d0, d6
 802120a:	2100      	movs	r1, #0
 802120c:	b003      	add	sp, #12
 802120e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021212:	f7ff bfad 	b.w	8021170 <sinf_poly>
 8021216:	f240 422e 	movw	r2, #1070	@ 0x42e
 802121a:	4293      	cmp	r3, r2
 802121c:	d824      	bhi.n	8021268 <sinf+0xa0>
 802121e:	4b34      	ldr	r3, [pc, #208]	@ (80212f0 <sinf+0x128>)
 8021220:	ed93 7b08 	vldr	d7, [r3, #32]
 8021224:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021228:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802122c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021230:	ee17 1a90 	vmov	r1, s15
 8021234:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021238:	1609      	asrs	r1, r1, #24
 802123a:	ee07 1a90 	vmov	s15, r1
 802123e:	f001 0203 	and.w	r2, r1, #3
 8021242:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021246:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802124a:	ed92 0b00 	vldr	d0, [r2]
 802124e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8021252:	f011 0f02 	tst.w	r1, #2
 8021256:	eea5 6b47 	vfms.f64	d6, d5, d7
 802125a:	bf08      	it	eq
 802125c:	4618      	moveq	r0, r3
 802125e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021262:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021266:	e7d1      	b.n	802120c <sinf+0x44>
 8021268:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802126c:	d237      	bcs.n	80212de <sinf+0x116>
 802126e:	4921      	ldr	r1, [pc, #132]	@ (80212f4 <sinf+0x12c>)
 8021270:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021274:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021278:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802127c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021280:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021284:	6a10      	ldr	r0, [r2, #32]
 8021286:	6912      	ldr	r2, [r2, #16]
 8021288:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802128c:	40ab      	lsls	r3, r5
 802128e:	fba0 5003 	umull	r5, r0, r0, r3
 8021292:	4359      	muls	r1, r3
 8021294:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021298:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802129c:	0f9d      	lsrs	r5, r3, #30
 802129e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80212a2:	1ac9      	subs	r1, r1, r3
 80212a4:	f7df f9fa 	bl	800069c <__aeabi_l2d>
 80212a8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80212ac:	4b10      	ldr	r3, [pc, #64]	@ (80212f0 <sinf+0x128>)
 80212ae:	f004 0203 	and.w	r2, r4, #3
 80212b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80212b6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80212e8 <sinf+0x120>
 80212ba:	ed92 0b00 	vldr	d0, [r2]
 80212be:	ec41 0b17 	vmov	d7, r0, r1
 80212c2:	f014 0f02 	tst.w	r4, #2
 80212c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80212ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80212ce:	4629      	mov	r1, r5
 80212d0:	bf08      	it	eq
 80212d2:	4618      	moveq	r0, r3
 80212d4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80212d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80212dc:	e796      	b.n	802120c <sinf+0x44>
 80212de:	b003      	add	sp, #12
 80212e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80212e4:	f000 b8e2 	b.w	80214ac <__math_invalidf>
 80212e8:	54442d18 	.word	0x54442d18
 80212ec:	3c1921fb 	.word	0x3c1921fb
 80212f0:	08025a70 	.word	0x08025a70
 80212f4:	08025a10 	.word	0x08025a10

080212f8 <sinf_poly>:
 80212f8:	07cb      	lsls	r3, r1, #31
 80212fa:	d412      	bmi.n	8021322 <sinf_poly+0x2a>
 80212fc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021300:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021304:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021308:	eea6 7b01 	vfma.f64	d7, d6, d1
 802130c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021310:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021314:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021318:	eea7 0b01 	vfma.f64	d0, d7, d1
 802131c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021320:	4770      	bx	lr
 8021322:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021326:	ee21 5b01 	vmul.f64	d5, d1, d1
 802132a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802132e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021332:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021336:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802133a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802133e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021342:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021346:	eea5 0b06 	vfma.f64	d0, d5, d6
 802134a:	e7e5      	b.n	8021318 <sinf_poly+0x20>
 802134c:	0000      	movs	r0, r0
	...

08021350 <cosf>:
 8021350:	b538      	push	{r3, r4, r5, lr}
 8021352:	ee10 4a10 	vmov	r4, s0
 8021356:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802135a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802135e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8021362:	d21f      	bcs.n	80213a4 <cosf+0x54>
 8021364:	ee27 7b07 	vmul.f64	d7, d7, d7
 8021368:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802136c:	f0c0 8082 	bcc.w	8021474 <cosf+0x124>
 8021370:	ee27 4b07 	vmul.f64	d4, d7, d7
 8021374:	4b44      	ldr	r3, [pc, #272]	@ (8021488 <cosf+0x138>)
 8021376:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802137a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802137e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8021382:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021386:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802138a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802138e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8021392:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021396:	eea4 0b05 	vfma.f64	d0, d4, d5
 802139a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802139e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80213a2:	bd38      	pop	{r3, r4, r5, pc}
 80213a4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80213a8:	4293      	cmp	r3, r2
 80213aa:	d829      	bhi.n	8021400 <cosf+0xb0>
 80213ac:	4b36      	ldr	r3, [pc, #216]	@ (8021488 <cosf+0x138>)
 80213ae:	ed93 6b08 	vldr	d6, [r3, #32]
 80213b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80213b6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80213ba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80213be:	ee16 1a90 	vmov	r1, s13
 80213c2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80213c6:	1609      	asrs	r1, r1, #24
 80213c8:	ee06 1a90 	vmov	s13, r1
 80213cc:	f001 0203 	and.w	r2, r1, #3
 80213d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80213d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80213d8:	ed92 0b00 	vldr	d0, [r2]
 80213dc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80213e0:	f011 0f02 	tst.w	r1, #2
 80213e4:	f081 0101 	eor.w	r1, r1, #1
 80213e8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80213ec:	bf08      	it	eq
 80213ee:	4618      	moveq	r0, r3
 80213f0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80213f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80213fc:	f7ff bf7c 	b.w	80212f8 <sinf_poly>
 8021400:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021404:	d232      	bcs.n	802146c <cosf+0x11c>
 8021406:	4921      	ldr	r1, [pc, #132]	@ (802148c <cosf+0x13c>)
 8021408:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802140c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021410:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021414:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021418:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802141c:	6a10      	ldr	r0, [r2, #32]
 802141e:	6912      	ldr	r2, [r2, #16]
 8021420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021424:	40ab      	lsls	r3, r5
 8021426:	fba0 5003 	umull	r5, r0, r0, r3
 802142a:	4359      	muls	r1, r3
 802142c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021430:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021434:	0f9d      	lsrs	r5, r3, #30
 8021436:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802143a:	1ac9      	subs	r1, r1, r3
 802143c:	f7df f92e 	bl	800069c <__aeabi_l2d>
 8021440:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021444:	4b10      	ldr	r3, [pc, #64]	@ (8021488 <cosf+0x138>)
 8021446:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8021480 <cosf+0x130>
 802144a:	ec41 0b17 	vmov	d7, r0, r1
 802144e:	f004 0203 	and.w	r2, r4, #3
 8021452:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021456:	ed92 0b00 	vldr	d0, [r2]
 802145a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802145e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021462:	f014 0f02 	tst.w	r4, #2
 8021466:	f085 0101 	eor.w	r1, r5, #1
 802146a:	e7bf      	b.n	80213ec <cosf+0x9c>
 802146c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021470:	f000 b81c 	b.w	80214ac <__math_invalidf>
 8021474:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8021478:	e793      	b.n	80213a2 <cosf+0x52>
 802147a:	bf00      	nop
 802147c:	f3af 8000 	nop.w
 8021480:	54442d18 	.word	0x54442d18
 8021484:	3c1921fb 	.word	0x3c1921fb
 8021488:	08025a70 	.word	0x08025a70
 802148c:	08025a10 	.word	0x08025a10

08021490 <with_errnof>:
 8021490:	b510      	push	{r4, lr}
 8021492:	ed2d 8b02 	vpush	{d8}
 8021496:	eeb0 8a40 	vmov.f32	s16, s0
 802149a:	4604      	mov	r4, r0
 802149c:	f000 fce8 	bl	8021e70 <__errno>
 80214a0:	eeb0 0a48 	vmov.f32	s0, s16
 80214a4:	ecbd 8b02 	vpop	{d8}
 80214a8:	6004      	str	r4, [r0, #0]
 80214aa:	bd10      	pop	{r4, pc}

080214ac <__math_invalidf>:
 80214ac:	eef0 7a40 	vmov.f32	s15, s0
 80214b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80214b4:	eef4 7a67 	vcmp.f32	s15, s15
 80214b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80214c0:	d602      	bvs.n	80214c8 <__math_invalidf+0x1c>
 80214c2:	2021      	movs	r0, #33	@ 0x21
 80214c4:	f7ff bfe4 	b.w	8021490 <with_errnof>
 80214c8:	4770      	bx	lr

080214ca <__ieee754_sqrtf>:
 80214ca:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80214ce:	4770      	bx	lr

080214d0 <__ieee754_atan2f>:
 80214d0:	ee10 2a90 	vmov	r2, s1
 80214d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80214d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80214dc:	b510      	push	{r4, lr}
 80214de:	eef0 7a40 	vmov.f32	s15, s0
 80214e2:	d806      	bhi.n	80214f2 <__ieee754_atan2f+0x22>
 80214e4:	ee10 0a10 	vmov	r0, s0
 80214e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80214ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80214f0:	d904      	bls.n	80214fc <__ieee754_atan2f+0x2c>
 80214f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80214f6:	eeb0 0a67 	vmov.f32	s0, s15
 80214fa:	bd10      	pop	{r4, pc}
 80214fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8021500:	d103      	bne.n	802150a <__ieee754_atan2f+0x3a>
 8021502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021506:	f000 b881 	b.w	802160c <atanf>
 802150a:	1794      	asrs	r4, r2, #30
 802150c:	f004 0402 	and.w	r4, r4, #2
 8021510:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8021514:	b93b      	cbnz	r3, 8021526 <__ieee754_atan2f+0x56>
 8021516:	2c02      	cmp	r4, #2
 8021518:	d05c      	beq.n	80215d4 <__ieee754_atan2f+0x104>
 802151a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80215e8 <__ieee754_atan2f+0x118>
 802151e:	2c03      	cmp	r4, #3
 8021520:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8021524:	e7e7      	b.n	80214f6 <__ieee754_atan2f+0x26>
 8021526:	b939      	cbnz	r1, 8021538 <__ieee754_atan2f+0x68>
 8021528:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80215ec <__ieee754_atan2f+0x11c>
 802152c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80215f0 <__ieee754_atan2f+0x120>
 8021530:	2800      	cmp	r0, #0
 8021532:	fe67 7a87 	vselge.f32	s15, s15, s14
 8021536:	e7de      	b.n	80214f6 <__ieee754_atan2f+0x26>
 8021538:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802153c:	d110      	bne.n	8021560 <__ieee754_atan2f+0x90>
 802153e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021542:	f104 34ff 	add.w	r4, r4, #4294967295
 8021546:	d107      	bne.n	8021558 <__ieee754_atan2f+0x88>
 8021548:	2c02      	cmp	r4, #2
 802154a:	d846      	bhi.n	80215da <__ieee754_atan2f+0x10a>
 802154c:	4b29      	ldr	r3, [pc, #164]	@ (80215f4 <__ieee754_atan2f+0x124>)
 802154e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021552:	edd3 7a00 	vldr	s15, [r3]
 8021556:	e7ce      	b.n	80214f6 <__ieee754_atan2f+0x26>
 8021558:	2c02      	cmp	r4, #2
 802155a:	d841      	bhi.n	80215e0 <__ieee754_atan2f+0x110>
 802155c:	4b26      	ldr	r3, [pc, #152]	@ (80215f8 <__ieee754_atan2f+0x128>)
 802155e:	e7f6      	b.n	802154e <__ieee754_atan2f+0x7e>
 8021560:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021564:	d0e0      	beq.n	8021528 <__ieee754_atan2f+0x58>
 8021566:	1a5b      	subs	r3, r3, r1
 8021568:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802156c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8021570:	da1a      	bge.n	80215a8 <__ieee754_atan2f+0xd8>
 8021572:	2a00      	cmp	r2, #0
 8021574:	da01      	bge.n	802157a <__ieee754_atan2f+0xaa>
 8021576:	313c      	adds	r1, #60	@ 0x3c
 8021578:	db19      	blt.n	80215ae <__ieee754_atan2f+0xde>
 802157a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802157e:	f000 f919 	bl	80217b4 <fabsf>
 8021582:	f000 f843 	bl	802160c <atanf>
 8021586:	eef0 7a40 	vmov.f32	s15, s0
 802158a:	2c01      	cmp	r4, #1
 802158c:	d012      	beq.n	80215b4 <__ieee754_atan2f+0xe4>
 802158e:	2c02      	cmp	r4, #2
 8021590:	d017      	beq.n	80215c2 <__ieee754_atan2f+0xf2>
 8021592:	2c00      	cmp	r4, #0
 8021594:	d0af      	beq.n	80214f6 <__ieee754_atan2f+0x26>
 8021596:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80215fc <__ieee754_atan2f+0x12c>
 802159a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802159e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8021600 <__ieee754_atan2f+0x130>
 80215a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80215a6:	e7a6      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215a8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80215ec <__ieee754_atan2f+0x11c>
 80215ac:	e7ed      	b.n	802158a <__ieee754_atan2f+0xba>
 80215ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8021604 <__ieee754_atan2f+0x134>
 80215b2:	e7ea      	b.n	802158a <__ieee754_atan2f+0xba>
 80215b4:	ee17 3a90 	vmov	r3, s15
 80215b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80215bc:	ee07 3a90 	vmov	s15, r3
 80215c0:	e799      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80215fc <__ieee754_atan2f+0x12c>
 80215c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80215ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8021600 <__ieee754_atan2f+0x130>
 80215ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80215d2:	e790      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8021600 <__ieee754_atan2f+0x130>
 80215d8:	e78d      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8021608 <__ieee754_atan2f+0x138>
 80215de:	e78a      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8021604 <__ieee754_atan2f+0x134>
 80215e4:	e787      	b.n	80214f6 <__ieee754_atan2f+0x26>
 80215e6:	bf00      	nop
 80215e8:	c0490fdb 	.word	0xc0490fdb
 80215ec:	3fc90fdb 	.word	0x3fc90fdb
 80215f0:	bfc90fdb 	.word	0xbfc90fdb
 80215f4:	08025b5c 	.word	0x08025b5c
 80215f8:	08025b50 	.word	0x08025b50
 80215fc:	33bbbd2e 	.word	0x33bbbd2e
 8021600:	40490fdb 	.word	0x40490fdb
 8021604:	00000000 	.word	0x00000000
 8021608:	3f490fdb 	.word	0x3f490fdb

0802160c <atanf>:
 802160c:	b538      	push	{r3, r4, r5, lr}
 802160e:	ee10 5a10 	vmov	r5, s0
 8021612:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8021616:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802161a:	eef0 7a40 	vmov.f32	s15, s0
 802161e:	d30f      	bcc.n	8021640 <atanf+0x34>
 8021620:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8021624:	d904      	bls.n	8021630 <atanf+0x24>
 8021626:	ee70 7a00 	vadd.f32	s15, s0, s0
 802162a:	eeb0 0a67 	vmov.f32	s0, s15
 802162e:	bd38      	pop	{r3, r4, r5, pc}
 8021630:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8021768 <atanf+0x15c>
 8021634:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802176c <atanf+0x160>
 8021638:	2d00      	cmp	r5, #0
 802163a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802163e:	e7f4      	b.n	802162a <atanf+0x1e>
 8021640:	4b4b      	ldr	r3, [pc, #300]	@ (8021770 <atanf+0x164>)
 8021642:	429c      	cmp	r4, r3
 8021644:	d810      	bhi.n	8021668 <atanf+0x5c>
 8021646:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802164a:	d20a      	bcs.n	8021662 <atanf+0x56>
 802164c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8021774 <atanf+0x168>
 8021650:	ee30 7a07 	vadd.f32	s14, s0, s14
 8021654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021658:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021660:	dce3      	bgt.n	802162a <atanf+0x1e>
 8021662:	f04f 33ff 	mov.w	r3, #4294967295
 8021666:	e013      	b.n	8021690 <atanf+0x84>
 8021668:	f000 f8a4 	bl	80217b4 <fabsf>
 802166c:	4b42      	ldr	r3, [pc, #264]	@ (8021778 <atanf+0x16c>)
 802166e:	429c      	cmp	r4, r3
 8021670:	d84f      	bhi.n	8021712 <atanf+0x106>
 8021672:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8021676:	429c      	cmp	r4, r3
 8021678:	d841      	bhi.n	80216fe <atanf+0xf2>
 802167a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802167e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8021682:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021686:	2300      	movs	r3, #0
 8021688:	ee30 0a27 	vadd.f32	s0, s0, s15
 802168c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021690:	1c5a      	adds	r2, r3, #1
 8021692:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8021696:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802177c <atanf+0x170>
 802169a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8021780 <atanf+0x174>
 802169e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8021784 <atanf+0x178>
 80216a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80216a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80216aa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8021788 <atanf+0x17c>
 80216ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80216b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802178c <atanf+0x180>
 80216b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80216ba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8021790 <atanf+0x184>
 80216be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80216c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021794 <atanf+0x188>
 80216c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80216ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8021798 <atanf+0x18c>
 80216ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 80216d2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802179c <atanf+0x190>
 80216d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80216da:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80217a0 <atanf+0x194>
 80216de:	eea7 5a26 	vfma.f32	s10, s14, s13
 80216e2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80217a4 <atanf+0x198>
 80216e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80216ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80216ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80216f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80216f6:	d121      	bne.n	802173c <atanf+0x130>
 80216f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80216fc:	e795      	b.n	802162a <atanf+0x1e>
 80216fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8021702:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021706:	ee30 0a27 	vadd.f32	s0, s0, s15
 802170a:	2301      	movs	r3, #1
 802170c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021710:	e7be      	b.n	8021690 <atanf+0x84>
 8021712:	4b25      	ldr	r3, [pc, #148]	@ (80217a8 <atanf+0x19c>)
 8021714:	429c      	cmp	r4, r3
 8021716:	d80b      	bhi.n	8021730 <atanf+0x124>
 8021718:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802171c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021720:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021724:	2302      	movs	r3, #2
 8021726:	ee70 6a67 	vsub.f32	s13, s0, s15
 802172a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802172e:	e7af      	b.n	8021690 <atanf+0x84>
 8021730:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8021734:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021738:	2303      	movs	r3, #3
 802173a:	e7a9      	b.n	8021690 <atanf+0x84>
 802173c:	4a1b      	ldr	r2, [pc, #108]	@ (80217ac <atanf+0x1a0>)
 802173e:	491c      	ldr	r1, [pc, #112]	@ (80217b0 <atanf+0x1a4>)
 8021740:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021744:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021748:	edd3 6a00 	vldr	s13, [r3]
 802174c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8021750:	2d00      	cmp	r5, #0
 8021752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021756:	edd2 7a00 	vldr	s15, [r2]
 802175a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802175e:	bfb8      	it	lt
 8021760:	eef1 7a67 	vneglt.f32	s15, s15
 8021764:	e761      	b.n	802162a <atanf+0x1e>
 8021766:	bf00      	nop
 8021768:	bfc90fdb 	.word	0xbfc90fdb
 802176c:	3fc90fdb 	.word	0x3fc90fdb
 8021770:	3edfffff 	.word	0x3edfffff
 8021774:	7149f2ca 	.word	0x7149f2ca
 8021778:	3f97ffff 	.word	0x3f97ffff
 802177c:	3c8569d7 	.word	0x3c8569d7
 8021780:	3d4bda59 	.word	0x3d4bda59
 8021784:	bd6ef16b 	.word	0xbd6ef16b
 8021788:	3d886b35 	.word	0x3d886b35
 802178c:	3dba2e6e 	.word	0x3dba2e6e
 8021790:	3e124925 	.word	0x3e124925
 8021794:	3eaaaaab 	.word	0x3eaaaaab
 8021798:	bd15a221 	.word	0xbd15a221
 802179c:	bd9d8795 	.word	0xbd9d8795
 80217a0:	bde38e38 	.word	0xbde38e38
 80217a4:	be4ccccd 	.word	0xbe4ccccd
 80217a8:	401bffff 	.word	0x401bffff
 80217ac:	08025b78 	.word	0x08025b78
 80217b0:	08025b68 	.word	0x08025b68

080217b4 <fabsf>:
 80217b4:	ee10 3a10 	vmov	r3, s0
 80217b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80217bc:	ee00 3a10 	vmov	s0, r3
 80217c0:	4770      	bx	lr

080217c2 <abort>:
 80217c2:	b508      	push	{r3, lr}
 80217c4:	2006      	movs	r0, #6
 80217c6:	f000 fae1 	bl	8021d8c <raise>
 80217ca:	2001      	movs	r0, #1
 80217cc:	f7df ff54 	bl	8001678 <_exit>

080217d0 <__assert_func>:
 80217d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80217d2:	4614      	mov	r4, r2
 80217d4:	461a      	mov	r2, r3
 80217d6:	4b09      	ldr	r3, [pc, #36]	@ (80217fc <__assert_func+0x2c>)
 80217d8:	681b      	ldr	r3, [r3, #0]
 80217da:	4605      	mov	r5, r0
 80217dc:	68d8      	ldr	r0, [r3, #12]
 80217de:	b954      	cbnz	r4, 80217f6 <__assert_func+0x26>
 80217e0:	4b07      	ldr	r3, [pc, #28]	@ (8021800 <__assert_func+0x30>)
 80217e2:	461c      	mov	r4, r3
 80217e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80217e8:	9100      	str	r1, [sp, #0]
 80217ea:	462b      	mov	r3, r5
 80217ec:	4905      	ldr	r1, [pc, #20]	@ (8021804 <__assert_func+0x34>)
 80217ee:	f000 f983 	bl	8021af8 <fiprintf>
 80217f2:	f7ff ffe6 	bl	80217c2 <abort>
 80217f6:	4b04      	ldr	r3, [pc, #16]	@ (8021808 <__assert_func+0x38>)
 80217f8:	e7f4      	b.n	80217e4 <__assert_func+0x14>
 80217fa:	bf00      	nop
 80217fc:	240000e8 	.word	0x240000e8
 8021800:	08025bc3 	.word	0x08025bc3
 8021804:	08025b95 	.word	0x08025b95
 8021808:	08025b88 	.word	0x08025b88

0802180c <atexit>:
 802180c:	2300      	movs	r3, #0
 802180e:	4601      	mov	r1, r0
 8021810:	461a      	mov	r2, r3
 8021812:	4618      	mov	r0, r3
 8021814:	f000 bb68 	b.w	8021ee8 <__register_exitproc>

08021818 <malloc>:
 8021818:	4b02      	ldr	r3, [pc, #8]	@ (8021824 <malloc+0xc>)
 802181a:	4601      	mov	r1, r0
 802181c:	6818      	ldr	r0, [r3, #0]
 802181e:	f000 b82d 	b.w	802187c <_malloc_r>
 8021822:	bf00      	nop
 8021824:	240000e8 	.word	0x240000e8

08021828 <free>:
 8021828:	4b02      	ldr	r3, [pc, #8]	@ (8021834 <free+0xc>)
 802182a:	4601      	mov	r1, r0
 802182c:	6818      	ldr	r0, [r3, #0]
 802182e:	f000 bbb7 	b.w	8021fa0 <_free_r>
 8021832:	bf00      	nop
 8021834:	240000e8 	.word	0x240000e8

08021838 <sbrk_aligned>:
 8021838:	b570      	push	{r4, r5, r6, lr}
 802183a:	4e0f      	ldr	r6, [pc, #60]	@ (8021878 <sbrk_aligned+0x40>)
 802183c:	460c      	mov	r4, r1
 802183e:	6831      	ldr	r1, [r6, #0]
 8021840:	4605      	mov	r5, r0
 8021842:	b911      	cbnz	r1, 802184a <sbrk_aligned+0x12>
 8021844:	f000 faf2 	bl	8021e2c <_sbrk_r>
 8021848:	6030      	str	r0, [r6, #0]
 802184a:	4621      	mov	r1, r4
 802184c:	4628      	mov	r0, r5
 802184e:	f000 faed 	bl	8021e2c <_sbrk_r>
 8021852:	1c43      	adds	r3, r0, #1
 8021854:	d103      	bne.n	802185e <sbrk_aligned+0x26>
 8021856:	f04f 34ff 	mov.w	r4, #4294967295
 802185a:	4620      	mov	r0, r4
 802185c:	bd70      	pop	{r4, r5, r6, pc}
 802185e:	1cc4      	adds	r4, r0, #3
 8021860:	f024 0403 	bic.w	r4, r4, #3
 8021864:	42a0      	cmp	r0, r4
 8021866:	d0f8      	beq.n	802185a <sbrk_aligned+0x22>
 8021868:	1a21      	subs	r1, r4, r0
 802186a:	4628      	mov	r0, r5
 802186c:	f000 fade 	bl	8021e2c <_sbrk_r>
 8021870:	3001      	adds	r0, #1
 8021872:	d1f2      	bne.n	802185a <sbrk_aligned+0x22>
 8021874:	e7ef      	b.n	8021856 <sbrk_aligned+0x1e>
 8021876:	bf00      	nop
 8021878:	24025e10 	.word	0x24025e10

0802187c <_malloc_r>:
 802187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021880:	1ccd      	adds	r5, r1, #3
 8021882:	f025 0503 	bic.w	r5, r5, #3
 8021886:	3508      	adds	r5, #8
 8021888:	2d0c      	cmp	r5, #12
 802188a:	bf38      	it	cc
 802188c:	250c      	movcc	r5, #12
 802188e:	2d00      	cmp	r5, #0
 8021890:	4606      	mov	r6, r0
 8021892:	db01      	blt.n	8021898 <_malloc_r+0x1c>
 8021894:	42a9      	cmp	r1, r5
 8021896:	d904      	bls.n	80218a2 <_malloc_r+0x26>
 8021898:	230c      	movs	r3, #12
 802189a:	6033      	str	r3, [r6, #0]
 802189c:	2000      	movs	r0, #0
 802189e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021978 <_malloc_r+0xfc>
 80218a6:	f000 f869 	bl	802197c <__malloc_lock>
 80218aa:	f8d8 3000 	ldr.w	r3, [r8]
 80218ae:	461c      	mov	r4, r3
 80218b0:	bb44      	cbnz	r4, 8021904 <_malloc_r+0x88>
 80218b2:	4629      	mov	r1, r5
 80218b4:	4630      	mov	r0, r6
 80218b6:	f7ff ffbf 	bl	8021838 <sbrk_aligned>
 80218ba:	1c43      	adds	r3, r0, #1
 80218bc:	4604      	mov	r4, r0
 80218be:	d158      	bne.n	8021972 <_malloc_r+0xf6>
 80218c0:	f8d8 4000 	ldr.w	r4, [r8]
 80218c4:	4627      	mov	r7, r4
 80218c6:	2f00      	cmp	r7, #0
 80218c8:	d143      	bne.n	8021952 <_malloc_r+0xd6>
 80218ca:	2c00      	cmp	r4, #0
 80218cc:	d04b      	beq.n	8021966 <_malloc_r+0xea>
 80218ce:	6823      	ldr	r3, [r4, #0]
 80218d0:	4639      	mov	r1, r7
 80218d2:	4630      	mov	r0, r6
 80218d4:	eb04 0903 	add.w	r9, r4, r3
 80218d8:	f000 faa8 	bl	8021e2c <_sbrk_r>
 80218dc:	4581      	cmp	r9, r0
 80218de:	d142      	bne.n	8021966 <_malloc_r+0xea>
 80218e0:	6821      	ldr	r1, [r4, #0]
 80218e2:	1a6d      	subs	r5, r5, r1
 80218e4:	4629      	mov	r1, r5
 80218e6:	4630      	mov	r0, r6
 80218e8:	f7ff ffa6 	bl	8021838 <sbrk_aligned>
 80218ec:	3001      	adds	r0, #1
 80218ee:	d03a      	beq.n	8021966 <_malloc_r+0xea>
 80218f0:	6823      	ldr	r3, [r4, #0]
 80218f2:	442b      	add	r3, r5
 80218f4:	6023      	str	r3, [r4, #0]
 80218f6:	f8d8 3000 	ldr.w	r3, [r8]
 80218fa:	685a      	ldr	r2, [r3, #4]
 80218fc:	bb62      	cbnz	r2, 8021958 <_malloc_r+0xdc>
 80218fe:	f8c8 7000 	str.w	r7, [r8]
 8021902:	e00f      	b.n	8021924 <_malloc_r+0xa8>
 8021904:	6822      	ldr	r2, [r4, #0]
 8021906:	1b52      	subs	r2, r2, r5
 8021908:	d420      	bmi.n	802194c <_malloc_r+0xd0>
 802190a:	2a0b      	cmp	r2, #11
 802190c:	d917      	bls.n	802193e <_malloc_r+0xc2>
 802190e:	1961      	adds	r1, r4, r5
 8021910:	42a3      	cmp	r3, r4
 8021912:	6025      	str	r5, [r4, #0]
 8021914:	bf18      	it	ne
 8021916:	6059      	strne	r1, [r3, #4]
 8021918:	6863      	ldr	r3, [r4, #4]
 802191a:	bf08      	it	eq
 802191c:	f8c8 1000 	streq.w	r1, [r8]
 8021920:	5162      	str	r2, [r4, r5]
 8021922:	604b      	str	r3, [r1, #4]
 8021924:	4630      	mov	r0, r6
 8021926:	f000 f82f 	bl	8021988 <__malloc_unlock>
 802192a:	f104 000b 	add.w	r0, r4, #11
 802192e:	1d23      	adds	r3, r4, #4
 8021930:	f020 0007 	bic.w	r0, r0, #7
 8021934:	1ac2      	subs	r2, r0, r3
 8021936:	bf1c      	itt	ne
 8021938:	1a1b      	subne	r3, r3, r0
 802193a:	50a3      	strne	r3, [r4, r2]
 802193c:	e7af      	b.n	802189e <_malloc_r+0x22>
 802193e:	6862      	ldr	r2, [r4, #4]
 8021940:	42a3      	cmp	r3, r4
 8021942:	bf0c      	ite	eq
 8021944:	f8c8 2000 	streq.w	r2, [r8]
 8021948:	605a      	strne	r2, [r3, #4]
 802194a:	e7eb      	b.n	8021924 <_malloc_r+0xa8>
 802194c:	4623      	mov	r3, r4
 802194e:	6864      	ldr	r4, [r4, #4]
 8021950:	e7ae      	b.n	80218b0 <_malloc_r+0x34>
 8021952:	463c      	mov	r4, r7
 8021954:	687f      	ldr	r7, [r7, #4]
 8021956:	e7b6      	b.n	80218c6 <_malloc_r+0x4a>
 8021958:	461a      	mov	r2, r3
 802195a:	685b      	ldr	r3, [r3, #4]
 802195c:	42a3      	cmp	r3, r4
 802195e:	d1fb      	bne.n	8021958 <_malloc_r+0xdc>
 8021960:	2300      	movs	r3, #0
 8021962:	6053      	str	r3, [r2, #4]
 8021964:	e7de      	b.n	8021924 <_malloc_r+0xa8>
 8021966:	230c      	movs	r3, #12
 8021968:	6033      	str	r3, [r6, #0]
 802196a:	4630      	mov	r0, r6
 802196c:	f000 f80c 	bl	8021988 <__malloc_unlock>
 8021970:	e794      	b.n	802189c <_malloc_r+0x20>
 8021972:	6005      	str	r5, [r0, #0]
 8021974:	e7d6      	b.n	8021924 <_malloc_r+0xa8>
 8021976:	bf00      	nop
 8021978:	24025e14 	.word	0x24025e14

0802197c <__malloc_lock>:
 802197c:	4801      	ldr	r0, [pc, #4]	@ (8021984 <__malloc_lock+0x8>)
 802197e:	f000 baa2 	b.w	8021ec6 <__retarget_lock_acquire_recursive>
 8021982:	bf00      	nop
 8021984:	24025f58 	.word	0x24025f58

08021988 <__malloc_unlock>:
 8021988:	4801      	ldr	r0, [pc, #4]	@ (8021990 <__malloc_unlock+0x8>)
 802198a:	f000 ba9d 	b.w	8021ec8 <__retarget_lock_release_recursive>
 802198e:	bf00      	nop
 8021990:	24025f58 	.word	0x24025f58

08021994 <__cxa_atexit>:
 8021994:	b510      	push	{r4, lr}
 8021996:	4604      	mov	r4, r0
 8021998:	4804      	ldr	r0, [pc, #16]	@ (80219ac <__cxa_atexit+0x18>)
 802199a:	4613      	mov	r3, r2
 802199c:	b120      	cbz	r0, 80219a8 <__cxa_atexit+0x14>
 802199e:	460a      	mov	r2, r1
 80219a0:	2002      	movs	r0, #2
 80219a2:	4621      	mov	r1, r4
 80219a4:	f000 faa0 	bl	8021ee8 <__register_exitproc>
 80219a8:	bd10      	pop	{r4, pc}
 80219aa:	bf00      	nop
 80219ac:	08021ee9 	.word	0x08021ee9

080219b0 <std>:
 80219b0:	2300      	movs	r3, #0
 80219b2:	b510      	push	{r4, lr}
 80219b4:	4604      	mov	r4, r0
 80219b6:	e9c0 3300 	strd	r3, r3, [r0]
 80219ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80219be:	6083      	str	r3, [r0, #8]
 80219c0:	8181      	strh	r1, [r0, #12]
 80219c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80219c4:	81c2      	strh	r2, [r0, #14]
 80219c6:	6183      	str	r3, [r0, #24]
 80219c8:	4619      	mov	r1, r3
 80219ca:	2208      	movs	r2, #8
 80219cc:	305c      	adds	r0, #92	@ 0x5c
 80219ce:	f000 f99b 	bl	8021d08 <memset>
 80219d2:	4b0d      	ldr	r3, [pc, #52]	@ (8021a08 <std+0x58>)
 80219d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80219d6:	4b0d      	ldr	r3, [pc, #52]	@ (8021a0c <std+0x5c>)
 80219d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80219da:	4b0d      	ldr	r3, [pc, #52]	@ (8021a10 <std+0x60>)
 80219dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80219de:	4b0d      	ldr	r3, [pc, #52]	@ (8021a14 <std+0x64>)
 80219e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80219e2:	4b0d      	ldr	r3, [pc, #52]	@ (8021a18 <std+0x68>)
 80219e4:	6224      	str	r4, [r4, #32]
 80219e6:	429c      	cmp	r4, r3
 80219e8:	d006      	beq.n	80219f8 <std+0x48>
 80219ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80219ee:	4294      	cmp	r4, r2
 80219f0:	d002      	beq.n	80219f8 <std+0x48>
 80219f2:	33d0      	adds	r3, #208	@ 0xd0
 80219f4:	429c      	cmp	r4, r3
 80219f6:	d105      	bne.n	8021a04 <std+0x54>
 80219f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80219fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a00:	f000 ba60 	b.w	8021ec4 <__retarget_lock_init_recursive>
 8021a04:	bd10      	pop	{r4, pc}
 8021a06:	bf00      	nop
 8021a08:	08021b59 	.word	0x08021b59
 8021a0c:	08021b7b 	.word	0x08021b7b
 8021a10:	08021bb3 	.word	0x08021bb3
 8021a14:	08021bd7 	.word	0x08021bd7
 8021a18:	24025e18 	.word	0x24025e18

08021a1c <stdio_exit_handler>:
 8021a1c:	4a02      	ldr	r2, [pc, #8]	@ (8021a28 <stdio_exit_handler+0xc>)
 8021a1e:	4903      	ldr	r1, [pc, #12]	@ (8021a2c <stdio_exit_handler+0x10>)
 8021a20:	4803      	ldr	r0, [pc, #12]	@ (8021a30 <stdio_exit_handler+0x14>)
 8021a22:	f000 b87b 	b.w	8021b1c <_fwalk_sglue>
 8021a26:	bf00      	nop
 8021a28:	240000dc 	.word	0x240000dc
 8021a2c:	080226dd 	.word	0x080226dd
 8021a30:	240000ec 	.word	0x240000ec

08021a34 <cleanup_stdio>:
 8021a34:	6841      	ldr	r1, [r0, #4]
 8021a36:	4b0c      	ldr	r3, [pc, #48]	@ (8021a68 <cleanup_stdio+0x34>)
 8021a38:	4299      	cmp	r1, r3
 8021a3a:	b510      	push	{r4, lr}
 8021a3c:	4604      	mov	r4, r0
 8021a3e:	d001      	beq.n	8021a44 <cleanup_stdio+0x10>
 8021a40:	f000 fe4c 	bl	80226dc <_fflush_r>
 8021a44:	68a1      	ldr	r1, [r4, #8]
 8021a46:	4b09      	ldr	r3, [pc, #36]	@ (8021a6c <cleanup_stdio+0x38>)
 8021a48:	4299      	cmp	r1, r3
 8021a4a:	d002      	beq.n	8021a52 <cleanup_stdio+0x1e>
 8021a4c:	4620      	mov	r0, r4
 8021a4e:	f000 fe45 	bl	80226dc <_fflush_r>
 8021a52:	68e1      	ldr	r1, [r4, #12]
 8021a54:	4b06      	ldr	r3, [pc, #24]	@ (8021a70 <cleanup_stdio+0x3c>)
 8021a56:	4299      	cmp	r1, r3
 8021a58:	d004      	beq.n	8021a64 <cleanup_stdio+0x30>
 8021a5a:	4620      	mov	r0, r4
 8021a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a60:	f000 be3c 	b.w	80226dc <_fflush_r>
 8021a64:	bd10      	pop	{r4, pc}
 8021a66:	bf00      	nop
 8021a68:	24025e18 	.word	0x24025e18
 8021a6c:	24025e80 	.word	0x24025e80
 8021a70:	24025ee8 	.word	0x24025ee8

08021a74 <global_stdio_init.part.0>:
 8021a74:	b510      	push	{r4, lr}
 8021a76:	4b0b      	ldr	r3, [pc, #44]	@ (8021aa4 <global_stdio_init.part.0+0x30>)
 8021a78:	4c0b      	ldr	r4, [pc, #44]	@ (8021aa8 <global_stdio_init.part.0+0x34>)
 8021a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8021aac <global_stdio_init.part.0+0x38>)
 8021a7c:	601a      	str	r2, [r3, #0]
 8021a7e:	4620      	mov	r0, r4
 8021a80:	2200      	movs	r2, #0
 8021a82:	2104      	movs	r1, #4
 8021a84:	f7ff ff94 	bl	80219b0 <std>
 8021a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021a8c:	2201      	movs	r2, #1
 8021a8e:	2109      	movs	r1, #9
 8021a90:	f7ff ff8e 	bl	80219b0 <std>
 8021a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021a98:	2202      	movs	r2, #2
 8021a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a9e:	2112      	movs	r1, #18
 8021aa0:	f7ff bf86 	b.w	80219b0 <std>
 8021aa4:	24025f50 	.word	0x24025f50
 8021aa8:	24025e18 	.word	0x24025e18
 8021aac:	08021a1d 	.word	0x08021a1d

08021ab0 <__sfp_lock_acquire>:
 8021ab0:	4801      	ldr	r0, [pc, #4]	@ (8021ab8 <__sfp_lock_acquire+0x8>)
 8021ab2:	f000 ba08 	b.w	8021ec6 <__retarget_lock_acquire_recursive>
 8021ab6:	bf00      	nop
 8021ab8:	24025f5a 	.word	0x24025f5a

08021abc <__sfp_lock_release>:
 8021abc:	4801      	ldr	r0, [pc, #4]	@ (8021ac4 <__sfp_lock_release+0x8>)
 8021abe:	f000 ba03 	b.w	8021ec8 <__retarget_lock_release_recursive>
 8021ac2:	bf00      	nop
 8021ac4:	24025f5a 	.word	0x24025f5a

08021ac8 <__sinit>:
 8021ac8:	b510      	push	{r4, lr}
 8021aca:	4604      	mov	r4, r0
 8021acc:	f7ff fff0 	bl	8021ab0 <__sfp_lock_acquire>
 8021ad0:	6a23      	ldr	r3, [r4, #32]
 8021ad2:	b11b      	cbz	r3, 8021adc <__sinit+0x14>
 8021ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ad8:	f7ff bff0 	b.w	8021abc <__sfp_lock_release>
 8021adc:	4b04      	ldr	r3, [pc, #16]	@ (8021af0 <__sinit+0x28>)
 8021ade:	6223      	str	r3, [r4, #32]
 8021ae0:	4b04      	ldr	r3, [pc, #16]	@ (8021af4 <__sinit+0x2c>)
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d1f5      	bne.n	8021ad4 <__sinit+0xc>
 8021ae8:	f7ff ffc4 	bl	8021a74 <global_stdio_init.part.0>
 8021aec:	e7f2      	b.n	8021ad4 <__sinit+0xc>
 8021aee:	bf00      	nop
 8021af0:	08021a35 	.word	0x08021a35
 8021af4:	24025f50 	.word	0x24025f50

08021af8 <fiprintf>:
 8021af8:	b40e      	push	{r1, r2, r3}
 8021afa:	b503      	push	{r0, r1, lr}
 8021afc:	4601      	mov	r1, r0
 8021afe:	ab03      	add	r3, sp, #12
 8021b00:	4805      	ldr	r0, [pc, #20]	@ (8021b18 <fiprintf+0x20>)
 8021b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b06:	6800      	ldr	r0, [r0, #0]
 8021b08:	9301      	str	r3, [sp, #4]
 8021b0a:	f000 fabd 	bl	8022088 <_vfiprintf_r>
 8021b0e:	b002      	add	sp, #8
 8021b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b14:	b003      	add	sp, #12
 8021b16:	4770      	bx	lr
 8021b18:	240000e8 	.word	0x240000e8

08021b1c <_fwalk_sglue>:
 8021b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b20:	4607      	mov	r7, r0
 8021b22:	4688      	mov	r8, r1
 8021b24:	4614      	mov	r4, r2
 8021b26:	2600      	movs	r6, #0
 8021b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8021b30:	d505      	bpl.n	8021b3e <_fwalk_sglue+0x22>
 8021b32:	6824      	ldr	r4, [r4, #0]
 8021b34:	2c00      	cmp	r4, #0
 8021b36:	d1f7      	bne.n	8021b28 <_fwalk_sglue+0xc>
 8021b38:	4630      	mov	r0, r6
 8021b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b3e:	89ab      	ldrh	r3, [r5, #12]
 8021b40:	2b01      	cmp	r3, #1
 8021b42:	d907      	bls.n	8021b54 <_fwalk_sglue+0x38>
 8021b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021b48:	3301      	adds	r3, #1
 8021b4a:	d003      	beq.n	8021b54 <_fwalk_sglue+0x38>
 8021b4c:	4629      	mov	r1, r5
 8021b4e:	4638      	mov	r0, r7
 8021b50:	47c0      	blx	r8
 8021b52:	4306      	orrs	r6, r0
 8021b54:	3568      	adds	r5, #104	@ 0x68
 8021b56:	e7e9      	b.n	8021b2c <_fwalk_sglue+0x10>

08021b58 <__sread>:
 8021b58:	b510      	push	{r4, lr}
 8021b5a:	460c      	mov	r4, r1
 8021b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b60:	f000 f93e 	bl	8021de0 <_read_r>
 8021b64:	2800      	cmp	r0, #0
 8021b66:	bfab      	itete	ge
 8021b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8021b6c:	181b      	addge	r3, r3, r0
 8021b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021b72:	bfac      	ite	ge
 8021b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021b76:	81a3      	strhlt	r3, [r4, #12]
 8021b78:	bd10      	pop	{r4, pc}

08021b7a <__swrite>:
 8021b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b7e:	461f      	mov	r7, r3
 8021b80:	898b      	ldrh	r3, [r1, #12]
 8021b82:	05db      	lsls	r3, r3, #23
 8021b84:	4605      	mov	r5, r0
 8021b86:	460c      	mov	r4, r1
 8021b88:	4616      	mov	r6, r2
 8021b8a:	d505      	bpl.n	8021b98 <__swrite+0x1e>
 8021b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b90:	2302      	movs	r3, #2
 8021b92:	2200      	movs	r2, #0
 8021b94:	f000 f912 	bl	8021dbc <_lseek_r>
 8021b98:	89a3      	ldrh	r3, [r4, #12]
 8021b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021ba2:	81a3      	strh	r3, [r4, #12]
 8021ba4:	4632      	mov	r2, r6
 8021ba6:	463b      	mov	r3, r7
 8021ba8:	4628      	mov	r0, r5
 8021baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bae:	f000 b94d 	b.w	8021e4c <_write_r>

08021bb2 <__sseek>:
 8021bb2:	b510      	push	{r4, lr}
 8021bb4:	460c      	mov	r4, r1
 8021bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bba:	f000 f8ff 	bl	8021dbc <_lseek_r>
 8021bbe:	1c43      	adds	r3, r0, #1
 8021bc0:	89a3      	ldrh	r3, [r4, #12]
 8021bc2:	bf15      	itete	ne
 8021bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021bce:	81a3      	strheq	r3, [r4, #12]
 8021bd0:	bf18      	it	ne
 8021bd2:	81a3      	strhne	r3, [r4, #12]
 8021bd4:	bd10      	pop	{r4, pc}

08021bd6 <__sclose>:
 8021bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bda:	f000 b8df 	b.w	8021d9c <_close_r>

08021bde <__swbuf_r>:
 8021bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021be0:	460e      	mov	r6, r1
 8021be2:	4614      	mov	r4, r2
 8021be4:	4605      	mov	r5, r0
 8021be6:	b118      	cbz	r0, 8021bf0 <__swbuf_r+0x12>
 8021be8:	6a03      	ldr	r3, [r0, #32]
 8021bea:	b90b      	cbnz	r3, 8021bf0 <__swbuf_r+0x12>
 8021bec:	f7ff ff6c 	bl	8021ac8 <__sinit>
 8021bf0:	69a3      	ldr	r3, [r4, #24]
 8021bf2:	60a3      	str	r3, [r4, #8]
 8021bf4:	89a3      	ldrh	r3, [r4, #12]
 8021bf6:	071a      	lsls	r2, r3, #28
 8021bf8:	d501      	bpl.n	8021bfe <__swbuf_r+0x20>
 8021bfa:	6923      	ldr	r3, [r4, #16]
 8021bfc:	b943      	cbnz	r3, 8021c10 <__swbuf_r+0x32>
 8021bfe:	4621      	mov	r1, r4
 8021c00:	4628      	mov	r0, r5
 8021c02:	f000 f82b 	bl	8021c5c <__swsetup_r>
 8021c06:	b118      	cbz	r0, 8021c10 <__swbuf_r+0x32>
 8021c08:	f04f 37ff 	mov.w	r7, #4294967295
 8021c0c:	4638      	mov	r0, r7
 8021c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c10:	6823      	ldr	r3, [r4, #0]
 8021c12:	6922      	ldr	r2, [r4, #16]
 8021c14:	1a98      	subs	r0, r3, r2
 8021c16:	6963      	ldr	r3, [r4, #20]
 8021c18:	b2f6      	uxtb	r6, r6
 8021c1a:	4283      	cmp	r3, r0
 8021c1c:	4637      	mov	r7, r6
 8021c1e:	dc05      	bgt.n	8021c2c <__swbuf_r+0x4e>
 8021c20:	4621      	mov	r1, r4
 8021c22:	4628      	mov	r0, r5
 8021c24:	f000 fd5a 	bl	80226dc <_fflush_r>
 8021c28:	2800      	cmp	r0, #0
 8021c2a:	d1ed      	bne.n	8021c08 <__swbuf_r+0x2a>
 8021c2c:	68a3      	ldr	r3, [r4, #8]
 8021c2e:	3b01      	subs	r3, #1
 8021c30:	60a3      	str	r3, [r4, #8]
 8021c32:	6823      	ldr	r3, [r4, #0]
 8021c34:	1c5a      	adds	r2, r3, #1
 8021c36:	6022      	str	r2, [r4, #0]
 8021c38:	701e      	strb	r6, [r3, #0]
 8021c3a:	6962      	ldr	r2, [r4, #20]
 8021c3c:	1c43      	adds	r3, r0, #1
 8021c3e:	429a      	cmp	r2, r3
 8021c40:	d004      	beq.n	8021c4c <__swbuf_r+0x6e>
 8021c42:	89a3      	ldrh	r3, [r4, #12]
 8021c44:	07db      	lsls	r3, r3, #31
 8021c46:	d5e1      	bpl.n	8021c0c <__swbuf_r+0x2e>
 8021c48:	2e0a      	cmp	r6, #10
 8021c4a:	d1df      	bne.n	8021c0c <__swbuf_r+0x2e>
 8021c4c:	4621      	mov	r1, r4
 8021c4e:	4628      	mov	r0, r5
 8021c50:	f000 fd44 	bl	80226dc <_fflush_r>
 8021c54:	2800      	cmp	r0, #0
 8021c56:	d0d9      	beq.n	8021c0c <__swbuf_r+0x2e>
 8021c58:	e7d6      	b.n	8021c08 <__swbuf_r+0x2a>
	...

08021c5c <__swsetup_r>:
 8021c5c:	b538      	push	{r3, r4, r5, lr}
 8021c5e:	4b29      	ldr	r3, [pc, #164]	@ (8021d04 <__swsetup_r+0xa8>)
 8021c60:	4605      	mov	r5, r0
 8021c62:	6818      	ldr	r0, [r3, #0]
 8021c64:	460c      	mov	r4, r1
 8021c66:	b118      	cbz	r0, 8021c70 <__swsetup_r+0x14>
 8021c68:	6a03      	ldr	r3, [r0, #32]
 8021c6a:	b90b      	cbnz	r3, 8021c70 <__swsetup_r+0x14>
 8021c6c:	f7ff ff2c 	bl	8021ac8 <__sinit>
 8021c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c74:	0719      	lsls	r1, r3, #28
 8021c76:	d422      	bmi.n	8021cbe <__swsetup_r+0x62>
 8021c78:	06da      	lsls	r2, r3, #27
 8021c7a:	d407      	bmi.n	8021c8c <__swsetup_r+0x30>
 8021c7c:	2209      	movs	r2, #9
 8021c7e:	602a      	str	r2, [r5, #0]
 8021c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021c84:	81a3      	strh	r3, [r4, #12]
 8021c86:	f04f 30ff 	mov.w	r0, #4294967295
 8021c8a:	e033      	b.n	8021cf4 <__swsetup_r+0x98>
 8021c8c:	0758      	lsls	r0, r3, #29
 8021c8e:	d512      	bpl.n	8021cb6 <__swsetup_r+0x5a>
 8021c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021c92:	b141      	cbz	r1, 8021ca6 <__swsetup_r+0x4a>
 8021c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021c98:	4299      	cmp	r1, r3
 8021c9a:	d002      	beq.n	8021ca2 <__swsetup_r+0x46>
 8021c9c:	4628      	mov	r0, r5
 8021c9e:	f000 f97f 	bl	8021fa0 <_free_r>
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8021ca6:	89a3      	ldrh	r3, [r4, #12]
 8021ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021cac:	81a3      	strh	r3, [r4, #12]
 8021cae:	2300      	movs	r3, #0
 8021cb0:	6063      	str	r3, [r4, #4]
 8021cb2:	6923      	ldr	r3, [r4, #16]
 8021cb4:	6023      	str	r3, [r4, #0]
 8021cb6:	89a3      	ldrh	r3, [r4, #12]
 8021cb8:	f043 0308 	orr.w	r3, r3, #8
 8021cbc:	81a3      	strh	r3, [r4, #12]
 8021cbe:	6923      	ldr	r3, [r4, #16]
 8021cc0:	b94b      	cbnz	r3, 8021cd6 <__swsetup_r+0x7a>
 8021cc2:	89a3      	ldrh	r3, [r4, #12]
 8021cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021ccc:	d003      	beq.n	8021cd6 <__swsetup_r+0x7a>
 8021cce:	4621      	mov	r1, r4
 8021cd0:	4628      	mov	r0, r5
 8021cd2:	f000 fd51 	bl	8022778 <__smakebuf_r>
 8021cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cda:	f013 0201 	ands.w	r2, r3, #1
 8021cde:	d00a      	beq.n	8021cf6 <__swsetup_r+0x9a>
 8021ce0:	2200      	movs	r2, #0
 8021ce2:	60a2      	str	r2, [r4, #8]
 8021ce4:	6962      	ldr	r2, [r4, #20]
 8021ce6:	4252      	negs	r2, r2
 8021ce8:	61a2      	str	r2, [r4, #24]
 8021cea:	6922      	ldr	r2, [r4, #16]
 8021cec:	b942      	cbnz	r2, 8021d00 <__swsetup_r+0xa4>
 8021cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021cf2:	d1c5      	bne.n	8021c80 <__swsetup_r+0x24>
 8021cf4:	bd38      	pop	{r3, r4, r5, pc}
 8021cf6:	0799      	lsls	r1, r3, #30
 8021cf8:	bf58      	it	pl
 8021cfa:	6962      	ldrpl	r2, [r4, #20]
 8021cfc:	60a2      	str	r2, [r4, #8]
 8021cfe:	e7f4      	b.n	8021cea <__swsetup_r+0x8e>
 8021d00:	2000      	movs	r0, #0
 8021d02:	e7f7      	b.n	8021cf4 <__swsetup_r+0x98>
 8021d04:	240000e8 	.word	0x240000e8

08021d08 <memset>:
 8021d08:	4402      	add	r2, r0
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	4293      	cmp	r3, r2
 8021d0e:	d100      	bne.n	8021d12 <memset+0xa>
 8021d10:	4770      	bx	lr
 8021d12:	f803 1b01 	strb.w	r1, [r3], #1
 8021d16:	e7f9      	b.n	8021d0c <memset+0x4>

08021d18 <strncmp>:
 8021d18:	b510      	push	{r4, lr}
 8021d1a:	b16a      	cbz	r2, 8021d38 <strncmp+0x20>
 8021d1c:	3901      	subs	r1, #1
 8021d1e:	1884      	adds	r4, r0, r2
 8021d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021d28:	429a      	cmp	r2, r3
 8021d2a:	d103      	bne.n	8021d34 <strncmp+0x1c>
 8021d2c:	42a0      	cmp	r0, r4
 8021d2e:	d001      	beq.n	8021d34 <strncmp+0x1c>
 8021d30:	2a00      	cmp	r2, #0
 8021d32:	d1f5      	bne.n	8021d20 <strncmp+0x8>
 8021d34:	1ad0      	subs	r0, r2, r3
 8021d36:	bd10      	pop	{r4, pc}
 8021d38:	4610      	mov	r0, r2
 8021d3a:	e7fc      	b.n	8021d36 <strncmp+0x1e>

08021d3c <_raise_r>:
 8021d3c:	291f      	cmp	r1, #31
 8021d3e:	b538      	push	{r3, r4, r5, lr}
 8021d40:	4605      	mov	r5, r0
 8021d42:	460c      	mov	r4, r1
 8021d44:	d904      	bls.n	8021d50 <_raise_r+0x14>
 8021d46:	2316      	movs	r3, #22
 8021d48:	6003      	str	r3, [r0, #0]
 8021d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8021d4e:	bd38      	pop	{r3, r4, r5, pc}
 8021d50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021d52:	b112      	cbz	r2, 8021d5a <_raise_r+0x1e>
 8021d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021d58:	b94b      	cbnz	r3, 8021d6e <_raise_r+0x32>
 8021d5a:	4628      	mov	r0, r5
 8021d5c:	f000 f864 	bl	8021e28 <_getpid_r>
 8021d60:	4622      	mov	r2, r4
 8021d62:	4601      	mov	r1, r0
 8021d64:	4628      	mov	r0, r5
 8021d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d6a:	f000 b84b 	b.w	8021e04 <_kill_r>
 8021d6e:	2b01      	cmp	r3, #1
 8021d70:	d00a      	beq.n	8021d88 <_raise_r+0x4c>
 8021d72:	1c59      	adds	r1, r3, #1
 8021d74:	d103      	bne.n	8021d7e <_raise_r+0x42>
 8021d76:	2316      	movs	r3, #22
 8021d78:	6003      	str	r3, [r0, #0]
 8021d7a:	2001      	movs	r0, #1
 8021d7c:	e7e7      	b.n	8021d4e <_raise_r+0x12>
 8021d7e:	2100      	movs	r1, #0
 8021d80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021d84:	4620      	mov	r0, r4
 8021d86:	4798      	blx	r3
 8021d88:	2000      	movs	r0, #0
 8021d8a:	e7e0      	b.n	8021d4e <_raise_r+0x12>

08021d8c <raise>:
 8021d8c:	4b02      	ldr	r3, [pc, #8]	@ (8021d98 <raise+0xc>)
 8021d8e:	4601      	mov	r1, r0
 8021d90:	6818      	ldr	r0, [r3, #0]
 8021d92:	f7ff bfd3 	b.w	8021d3c <_raise_r>
 8021d96:	bf00      	nop
 8021d98:	240000e8 	.word	0x240000e8

08021d9c <_close_r>:
 8021d9c:	b538      	push	{r3, r4, r5, lr}
 8021d9e:	4d06      	ldr	r5, [pc, #24]	@ (8021db8 <_close_r+0x1c>)
 8021da0:	2300      	movs	r3, #0
 8021da2:	4604      	mov	r4, r0
 8021da4:	4608      	mov	r0, r1
 8021da6:	602b      	str	r3, [r5, #0]
 8021da8:	f7df fc88 	bl	80016bc <_close>
 8021dac:	1c43      	adds	r3, r0, #1
 8021dae:	d102      	bne.n	8021db6 <_close_r+0x1a>
 8021db0:	682b      	ldr	r3, [r5, #0]
 8021db2:	b103      	cbz	r3, 8021db6 <_close_r+0x1a>
 8021db4:	6023      	str	r3, [r4, #0]
 8021db6:	bd38      	pop	{r3, r4, r5, pc}
 8021db8:	24025f54 	.word	0x24025f54

08021dbc <_lseek_r>:
 8021dbc:	b538      	push	{r3, r4, r5, lr}
 8021dbe:	4d07      	ldr	r5, [pc, #28]	@ (8021ddc <_lseek_r+0x20>)
 8021dc0:	4604      	mov	r4, r0
 8021dc2:	4608      	mov	r0, r1
 8021dc4:	4611      	mov	r1, r2
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	602a      	str	r2, [r5, #0]
 8021dca:	461a      	mov	r2, r3
 8021dcc:	f7df fc80 	bl	80016d0 <_lseek>
 8021dd0:	1c43      	adds	r3, r0, #1
 8021dd2:	d102      	bne.n	8021dda <_lseek_r+0x1e>
 8021dd4:	682b      	ldr	r3, [r5, #0]
 8021dd6:	b103      	cbz	r3, 8021dda <_lseek_r+0x1e>
 8021dd8:	6023      	str	r3, [r4, #0]
 8021dda:	bd38      	pop	{r3, r4, r5, pc}
 8021ddc:	24025f54 	.word	0x24025f54

08021de0 <_read_r>:
 8021de0:	b538      	push	{r3, r4, r5, lr}
 8021de2:	4d07      	ldr	r5, [pc, #28]	@ (8021e00 <_read_r+0x20>)
 8021de4:	4604      	mov	r4, r0
 8021de6:	4608      	mov	r0, r1
 8021de8:	4611      	mov	r1, r2
 8021dea:	2200      	movs	r2, #0
 8021dec:	602a      	str	r2, [r5, #0]
 8021dee:	461a      	mov	r2, r3
 8021df0:	f7df fc48 	bl	8001684 <_read>
 8021df4:	1c43      	adds	r3, r0, #1
 8021df6:	d102      	bne.n	8021dfe <_read_r+0x1e>
 8021df8:	682b      	ldr	r3, [r5, #0]
 8021dfa:	b103      	cbz	r3, 8021dfe <_read_r+0x1e>
 8021dfc:	6023      	str	r3, [r4, #0]
 8021dfe:	bd38      	pop	{r3, r4, r5, pc}
 8021e00:	24025f54 	.word	0x24025f54

08021e04 <_kill_r>:
 8021e04:	b538      	push	{r3, r4, r5, lr}
 8021e06:	4d07      	ldr	r5, [pc, #28]	@ (8021e24 <_kill_r+0x20>)
 8021e08:	2300      	movs	r3, #0
 8021e0a:	4604      	mov	r4, r0
 8021e0c:	4608      	mov	r0, r1
 8021e0e:	4611      	mov	r1, r2
 8021e10:	602b      	str	r3, [r5, #0]
 8021e12:	f7df fc29 	bl	8001668 <_kill>
 8021e16:	1c43      	adds	r3, r0, #1
 8021e18:	d102      	bne.n	8021e20 <_kill_r+0x1c>
 8021e1a:	682b      	ldr	r3, [r5, #0]
 8021e1c:	b103      	cbz	r3, 8021e20 <_kill_r+0x1c>
 8021e1e:	6023      	str	r3, [r4, #0]
 8021e20:	bd38      	pop	{r3, r4, r5, pc}
 8021e22:	bf00      	nop
 8021e24:	24025f54 	.word	0x24025f54

08021e28 <_getpid_r>:
 8021e28:	f7df bc1c 	b.w	8001664 <_getpid>

08021e2c <_sbrk_r>:
 8021e2c:	b538      	push	{r3, r4, r5, lr}
 8021e2e:	4d06      	ldr	r5, [pc, #24]	@ (8021e48 <_sbrk_r+0x1c>)
 8021e30:	2300      	movs	r3, #0
 8021e32:	4604      	mov	r4, r0
 8021e34:	4608      	mov	r0, r1
 8021e36:	602b      	str	r3, [r5, #0]
 8021e38:	f7df fc4c 	bl	80016d4 <_sbrk>
 8021e3c:	1c43      	adds	r3, r0, #1
 8021e3e:	d102      	bne.n	8021e46 <_sbrk_r+0x1a>
 8021e40:	682b      	ldr	r3, [r5, #0]
 8021e42:	b103      	cbz	r3, 8021e46 <_sbrk_r+0x1a>
 8021e44:	6023      	str	r3, [r4, #0]
 8021e46:	bd38      	pop	{r3, r4, r5, pc}
 8021e48:	24025f54 	.word	0x24025f54

08021e4c <_write_r>:
 8021e4c:	b538      	push	{r3, r4, r5, lr}
 8021e4e:	4d07      	ldr	r5, [pc, #28]	@ (8021e6c <_write_r+0x20>)
 8021e50:	4604      	mov	r4, r0
 8021e52:	4608      	mov	r0, r1
 8021e54:	4611      	mov	r1, r2
 8021e56:	2200      	movs	r2, #0
 8021e58:	602a      	str	r2, [r5, #0]
 8021e5a:	461a      	mov	r2, r3
 8021e5c:	f7df fc20 	bl	80016a0 <_write>
 8021e60:	1c43      	adds	r3, r0, #1
 8021e62:	d102      	bne.n	8021e6a <_write_r+0x1e>
 8021e64:	682b      	ldr	r3, [r5, #0]
 8021e66:	b103      	cbz	r3, 8021e6a <_write_r+0x1e>
 8021e68:	6023      	str	r3, [r4, #0]
 8021e6a:	bd38      	pop	{r3, r4, r5, pc}
 8021e6c:	24025f54 	.word	0x24025f54

08021e70 <__errno>:
 8021e70:	4b01      	ldr	r3, [pc, #4]	@ (8021e78 <__errno+0x8>)
 8021e72:	6818      	ldr	r0, [r3, #0]
 8021e74:	4770      	bx	lr
 8021e76:	bf00      	nop
 8021e78:	240000e8 	.word	0x240000e8

08021e7c <__libc_init_array>:
 8021e7c:	b570      	push	{r4, r5, r6, lr}
 8021e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8021eb4 <__libc_init_array+0x38>)
 8021e80:	4c0d      	ldr	r4, [pc, #52]	@ (8021eb8 <__libc_init_array+0x3c>)
 8021e82:	1b64      	subs	r4, r4, r5
 8021e84:	10a4      	asrs	r4, r4, #2
 8021e86:	2600      	movs	r6, #0
 8021e88:	42a6      	cmp	r6, r4
 8021e8a:	d109      	bne.n	8021ea0 <__libc_init_array+0x24>
 8021e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8021ebc <__libc_init_array+0x40>)
 8021e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8021ec0 <__libc_init_array+0x44>)
 8021e90:	f000 fcd0 	bl	8022834 <_init>
 8021e94:	1b64      	subs	r4, r4, r5
 8021e96:	10a4      	asrs	r4, r4, #2
 8021e98:	2600      	movs	r6, #0
 8021e9a:	42a6      	cmp	r6, r4
 8021e9c:	d105      	bne.n	8021eaa <__libc_init_array+0x2e>
 8021e9e:	bd70      	pop	{r4, r5, r6, pc}
 8021ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ea4:	4798      	blx	r3
 8021ea6:	3601      	adds	r6, #1
 8021ea8:	e7ee      	b.n	8021e88 <__libc_init_array+0xc>
 8021eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8021eae:	4798      	blx	r3
 8021eb0:	3601      	adds	r6, #1
 8021eb2:	e7f2      	b.n	8021e9a <__libc_init_array+0x1e>
 8021eb4:	08025dc4 	.word	0x08025dc4
 8021eb8:	08025dc4 	.word	0x08025dc4
 8021ebc:	08025dc4 	.word	0x08025dc4
 8021ec0:	08025de0 	.word	0x08025de0

08021ec4 <__retarget_lock_init_recursive>:
 8021ec4:	4770      	bx	lr

08021ec6 <__retarget_lock_acquire_recursive>:
 8021ec6:	4770      	bx	lr

08021ec8 <__retarget_lock_release_recursive>:
 8021ec8:	4770      	bx	lr

08021eca <memcpy>:
 8021eca:	440a      	add	r2, r1
 8021ecc:	4291      	cmp	r1, r2
 8021ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8021ed2:	d100      	bne.n	8021ed6 <memcpy+0xc>
 8021ed4:	4770      	bx	lr
 8021ed6:	b510      	push	{r4, lr}
 8021ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021ee0:	4291      	cmp	r1, r2
 8021ee2:	d1f9      	bne.n	8021ed8 <memcpy+0xe>
 8021ee4:	bd10      	pop	{r4, pc}
	...

08021ee8 <__register_exitproc>:
 8021ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021eec:	4d27      	ldr	r5, [pc, #156]	@ (8021f8c <__register_exitproc+0xa4>)
 8021eee:	4607      	mov	r7, r0
 8021ef0:	6828      	ldr	r0, [r5, #0]
 8021ef2:	4691      	mov	r9, r2
 8021ef4:	460e      	mov	r6, r1
 8021ef6:	4698      	mov	r8, r3
 8021ef8:	f7ff ffe5 	bl	8021ec6 <__retarget_lock_acquire_recursive>
 8021efc:	4a24      	ldr	r2, [pc, #144]	@ (8021f90 <__register_exitproc+0xa8>)
 8021efe:	6814      	ldr	r4, [r2, #0]
 8021f00:	b93c      	cbnz	r4, 8021f12 <__register_exitproc+0x2a>
 8021f02:	4b24      	ldr	r3, [pc, #144]	@ (8021f94 <__register_exitproc+0xac>)
 8021f04:	6013      	str	r3, [r2, #0]
 8021f06:	4a24      	ldr	r2, [pc, #144]	@ (8021f98 <__register_exitproc+0xb0>)
 8021f08:	b112      	cbz	r2, 8021f10 <__register_exitproc+0x28>
 8021f0a:	6812      	ldr	r2, [r2, #0]
 8021f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8021f10:	4c20      	ldr	r4, [pc, #128]	@ (8021f94 <__register_exitproc+0xac>)
 8021f12:	6863      	ldr	r3, [r4, #4]
 8021f14:	2b1f      	cmp	r3, #31
 8021f16:	dd06      	ble.n	8021f26 <__register_exitproc+0x3e>
 8021f18:	6828      	ldr	r0, [r5, #0]
 8021f1a:	f7ff ffd5 	bl	8021ec8 <__retarget_lock_release_recursive>
 8021f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8021f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f26:	b32f      	cbz	r7, 8021f74 <__register_exitproc+0x8c>
 8021f28:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8021f2c:	b968      	cbnz	r0, 8021f4a <__register_exitproc+0x62>
 8021f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8021f9c <__register_exitproc+0xb4>)
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d0f1      	beq.n	8021f18 <__register_exitproc+0x30>
 8021f34:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8021f38:	f7ff fc6e 	bl	8021818 <malloc>
 8021f3c:	2800      	cmp	r0, #0
 8021f3e:	d0eb      	beq.n	8021f18 <__register_exitproc+0x30>
 8021f40:	2300      	movs	r3, #0
 8021f42:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8021f46:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8021f4a:	6863      	ldr	r3, [r4, #4]
 8021f4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021f50:	2201      	movs	r2, #1
 8021f52:	409a      	lsls	r2, r3
 8021f54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021f58:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8021f5c:	4313      	orrs	r3, r2
 8021f5e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8021f62:	2f02      	cmp	r7, #2
 8021f64:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8021f68:	bf02      	ittt	eq
 8021f6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8021f6e:	4313      	orreq	r3, r2
 8021f70:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8021f74:	6863      	ldr	r3, [r4, #4]
 8021f76:	6828      	ldr	r0, [r5, #0]
 8021f78:	1c5a      	adds	r2, r3, #1
 8021f7a:	3302      	adds	r3, #2
 8021f7c:	6062      	str	r2, [r4, #4]
 8021f7e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8021f82:	f7ff ffa1 	bl	8021ec8 <__retarget_lock_release_recursive>
 8021f86:	2000      	movs	r0, #0
 8021f88:	e7cb      	b.n	8021f22 <__register_exitproc+0x3a>
 8021f8a:	bf00      	nop
 8021f8c:	24000138 	.word	0x24000138
 8021f90:	24025fe8 	.word	0x24025fe8
 8021f94:	24025f5c 	.word	0x24025f5c
 8021f98:	08025bc4 	.word	0x08025bc4
 8021f9c:	08021819 	.word	0x08021819

08021fa0 <_free_r>:
 8021fa0:	b538      	push	{r3, r4, r5, lr}
 8021fa2:	4605      	mov	r5, r0
 8021fa4:	2900      	cmp	r1, #0
 8021fa6:	d041      	beq.n	802202c <_free_r+0x8c>
 8021fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021fac:	1f0c      	subs	r4, r1, #4
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	bfb8      	it	lt
 8021fb2:	18e4      	addlt	r4, r4, r3
 8021fb4:	f7ff fce2 	bl	802197c <__malloc_lock>
 8021fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8022030 <_free_r+0x90>)
 8021fba:	6813      	ldr	r3, [r2, #0]
 8021fbc:	b933      	cbnz	r3, 8021fcc <_free_r+0x2c>
 8021fbe:	6063      	str	r3, [r4, #4]
 8021fc0:	6014      	str	r4, [r2, #0]
 8021fc2:	4628      	mov	r0, r5
 8021fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fc8:	f7ff bcde 	b.w	8021988 <__malloc_unlock>
 8021fcc:	42a3      	cmp	r3, r4
 8021fce:	d908      	bls.n	8021fe2 <_free_r+0x42>
 8021fd0:	6820      	ldr	r0, [r4, #0]
 8021fd2:	1821      	adds	r1, r4, r0
 8021fd4:	428b      	cmp	r3, r1
 8021fd6:	bf01      	itttt	eq
 8021fd8:	6819      	ldreq	r1, [r3, #0]
 8021fda:	685b      	ldreq	r3, [r3, #4]
 8021fdc:	1809      	addeq	r1, r1, r0
 8021fde:	6021      	streq	r1, [r4, #0]
 8021fe0:	e7ed      	b.n	8021fbe <_free_r+0x1e>
 8021fe2:	461a      	mov	r2, r3
 8021fe4:	685b      	ldr	r3, [r3, #4]
 8021fe6:	b10b      	cbz	r3, 8021fec <_free_r+0x4c>
 8021fe8:	42a3      	cmp	r3, r4
 8021fea:	d9fa      	bls.n	8021fe2 <_free_r+0x42>
 8021fec:	6811      	ldr	r1, [r2, #0]
 8021fee:	1850      	adds	r0, r2, r1
 8021ff0:	42a0      	cmp	r0, r4
 8021ff2:	d10b      	bne.n	802200c <_free_r+0x6c>
 8021ff4:	6820      	ldr	r0, [r4, #0]
 8021ff6:	4401      	add	r1, r0
 8021ff8:	1850      	adds	r0, r2, r1
 8021ffa:	4283      	cmp	r3, r0
 8021ffc:	6011      	str	r1, [r2, #0]
 8021ffe:	d1e0      	bne.n	8021fc2 <_free_r+0x22>
 8022000:	6818      	ldr	r0, [r3, #0]
 8022002:	685b      	ldr	r3, [r3, #4]
 8022004:	6053      	str	r3, [r2, #4]
 8022006:	4408      	add	r0, r1
 8022008:	6010      	str	r0, [r2, #0]
 802200a:	e7da      	b.n	8021fc2 <_free_r+0x22>
 802200c:	d902      	bls.n	8022014 <_free_r+0x74>
 802200e:	230c      	movs	r3, #12
 8022010:	602b      	str	r3, [r5, #0]
 8022012:	e7d6      	b.n	8021fc2 <_free_r+0x22>
 8022014:	6820      	ldr	r0, [r4, #0]
 8022016:	1821      	adds	r1, r4, r0
 8022018:	428b      	cmp	r3, r1
 802201a:	bf04      	itt	eq
 802201c:	6819      	ldreq	r1, [r3, #0]
 802201e:	685b      	ldreq	r3, [r3, #4]
 8022020:	6063      	str	r3, [r4, #4]
 8022022:	bf04      	itt	eq
 8022024:	1809      	addeq	r1, r1, r0
 8022026:	6021      	streq	r1, [r4, #0]
 8022028:	6054      	str	r4, [r2, #4]
 802202a:	e7ca      	b.n	8021fc2 <_free_r+0x22>
 802202c:	bd38      	pop	{r3, r4, r5, pc}
 802202e:	bf00      	nop
 8022030:	24025e14 	.word	0x24025e14

08022034 <__sfputc_r>:
 8022034:	6893      	ldr	r3, [r2, #8]
 8022036:	3b01      	subs	r3, #1
 8022038:	2b00      	cmp	r3, #0
 802203a:	b410      	push	{r4}
 802203c:	6093      	str	r3, [r2, #8]
 802203e:	da08      	bge.n	8022052 <__sfputc_r+0x1e>
 8022040:	6994      	ldr	r4, [r2, #24]
 8022042:	42a3      	cmp	r3, r4
 8022044:	db01      	blt.n	802204a <__sfputc_r+0x16>
 8022046:	290a      	cmp	r1, #10
 8022048:	d103      	bne.n	8022052 <__sfputc_r+0x1e>
 802204a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802204e:	f7ff bdc6 	b.w	8021bde <__swbuf_r>
 8022052:	6813      	ldr	r3, [r2, #0]
 8022054:	1c58      	adds	r0, r3, #1
 8022056:	6010      	str	r0, [r2, #0]
 8022058:	7019      	strb	r1, [r3, #0]
 802205a:	4608      	mov	r0, r1
 802205c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022060:	4770      	bx	lr

08022062 <__sfputs_r>:
 8022062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022064:	4606      	mov	r6, r0
 8022066:	460f      	mov	r7, r1
 8022068:	4614      	mov	r4, r2
 802206a:	18d5      	adds	r5, r2, r3
 802206c:	42ac      	cmp	r4, r5
 802206e:	d101      	bne.n	8022074 <__sfputs_r+0x12>
 8022070:	2000      	movs	r0, #0
 8022072:	e007      	b.n	8022084 <__sfputs_r+0x22>
 8022074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022078:	463a      	mov	r2, r7
 802207a:	4630      	mov	r0, r6
 802207c:	f7ff ffda 	bl	8022034 <__sfputc_r>
 8022080:	1c43      	adds	r3, r0, #1
 8022082:	d1f3      	bne.n	802206c <__sfputs_r+0xa>
 8022084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022088 <_vfiprintf_r>:
 8022088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802208c:	460d      	mov	r5, r1
 802208e:	b09d      	sub	sp, #116	@ 0x74
 8022090:	4614      	mov	r4, r2
 8022092:	4698      	mov	r8, r3
 8022094:	4606      	mov	r6, r0
 8022096:	b118      	cbz	r0, 80220a0 <_vfiprintf_r+0x18>
 8022098:	6a03      	ldr	r3, [r0, #32]
 802209a:	b90b      	cbnz	r3, 80220a0 <_vfiprintf_r+0x18>
 802209c:	f7ff fd14 	bl	8021ac8 <__sinit>
 80220a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80220a2:	07d9      	lsls	r1, r3, #31
 80220a4:	d405      	bmi.n	80220b2 <_vfiprintf_r+0x2a>
 80220a6:	89ab      	ldrh	r3, [r5, #12]
 80220a8:	059a      	lsls	r2, r3, #22
 80220aa:	d402      	bmi.n	80220b2 <_vfiprintf_r+0x2a>
 80220ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80220ae:	f7ff ff0a 	bl	8021ec6 <__retarget_lock_acquire_recursive>
 80220b2:	89ab      	ldrh	r3, [r5, #12]
 80220b4:	071b      	lsls	r3, r3, #28
 80220b6:	d501      	bpl.n	80220bc <_vfiprintf_r+0x34>
 80220b8:	692b      	ldr	r3, [r5, #16]
 80220ba:	b99b      	cbnz	r3, 80220e4 <_vfiprintf_r+0x5c>
 80220bc:	4629      	mov	r1, r5
 80220be:	4630      	mov	r0, r6
 80220c0:	f7ff fdcc 	bl	8021c5c <__swsetup_r>
 80220c4:	b170      	cbz	r0, 80220e4 <_vfiprintf_r+0x5c>
 80220c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80220c8:	07dc      	lsls	r4, r3, #31
 80220ca:	d504      	bpl.n	80220d6 <_vfiprintf_r+0x4e>
 80220cc:	f04f 30ff 	mov.w	r0, #4294967295
 80220d0:	b01d      	add	sp, #116	@ 0x74
 80220d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220d6:	89ab      	ldrh	r3, [r5, #12]
 80220d8:	0598      	lsls	r0, r3, #22
 80220da:	d4f7      	bmi.n	80220cc <_vfiprintf_r+0x44>
 80220dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80220de:	f7ff fef3 	bl	8021ec8 <__retarget_lock_release_recursive>
 80220e2:	e7f3      	b.n	80220cc <_vfiprintf_r+0x44>
 80220e4:	2300      	movs	r3, #0
 80220e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80220e8:	2320      	movs	r3, #32
 80220ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80220ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80220f2:	2330      	movs	r3, #48	@ 0x30
 80220f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80222a4 <_vfiprintf_r+0x21c>
 80220f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80220fc:	f04f 0901 	mov.w	r9, #1
 8022100:	4623      	mov	r3, r4
 8022102:	469a      	mov	sl, r3
 8022104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022108:	b10a      	cbz	r2, 802210e <_vfiprintf_r+0x86>
 802210a:	2a25      	cmp	r2, #37	@ 0x25
 802210c:	d1f9      	bne.n	8022102 <_vfiprintf_r+0x7a>
 802210e:	ebba 0b04 	subs.w	fp, sl, r4
 8022112:	d00b      	beq.n	802212c <_vfiprintf_r+0xa4>
 8022114:	465b      	mov	r3, fp
 8022116:	4622      	mov	r2, r4
 8022118:	4629      	mov	r1, r5
 802211a:	4630      	mov	r0, r6
 802211c:	f7ff ffa1 	bl	8022062 <__sfputs_r>
 8022120:	3001      	adds	r0, #1
 8022122:	f000 80a7 	beq.w	8022274 <_vfiprintf_r+0x1ec>
 8022126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022128:	445a      	add	r2, fp
 802212a:	9209      	str	r2, [sp, #36]	@ 0x24
 802212c:	f89a 3000 	ldrb.w	r3, [sl]
 8022130:	2b00      	cmp	r3, #0
 8022132:	f000 809f 	beq.w	8022274 <_vfiprintf_r+0x1ec>
 8022136:	2300      	movs	r3, #0
 8022138:	f04f 32ff 	mov.w	r2, #4294967295
 802213c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022140:	f10a 0a01 	add.w	sl, sl, #1
 8022144:	9304      	str	r3, [sp, #16]
 8022146:	9307      	str	r3, [sp, #28]
 8022148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802214c:	931a      	str	r3, [sp, #104]	@ 0x68
 802214e:	4654      	mov	r4, sl
 8022150:	2205      	movs	r2, #5
 8022152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022156:	4853      	ldr	r0, [pc, #332]	@ (80222a4 <_vfiprintf_r+0x21c>)
 8022158:	f7de f8c2 	bl	80002e0 <memchr>
 802215c:	9a04      	ldr	r2, [sp, #16]
 802215e:	b9d8      	cbnz	r0, 8022198 <_vfiprintf_r+0x110>
 8022160:	06d1      	lsls	r1, r2, #27
 8022162:	bf44      	itt	mi
 8022164:	2320      	movmi	r3, #32
 8022166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802216a:	0713      	lsls	r3, r2, #28
 802216c:	bf44      	itt	mi
 802216e:	232b      	movmi	r3, #43	@ 0x2b
 8022170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022174:	f89a 3000 	ldrb.w	r3, [sl]
 8022178:	2b2a      	cmp	r3, #42	@ 0x2a
 802217a:	d015      	beq.n	80221a8 <_vfiprintf_r+0x120>
 802217c:	9a07      	ldr	r2, [sp, #28]
 802217e:	4654      	mov	r4, sl
 8022180:	2000      	movs	r0, #0
 8022182:	f04f 0c0a 	mov.w	ip, #10
 8022186:	4621      	mov	r1, r4
 8022188:	f811 3b01 	ldrb.w	r3, [r1], #1
 802218c:	3b30      	subs	r3, #48	@ 0x30
 802218e:	2b09      	cmp	r3, #9
 8022190:	d94b      	bls.n	802222a <_vfiprintf_r+0x1a2>
 8022192:	b1b0      	cbz	r0, 80221c2 <_vfiprintf_r+0x13a>
 8022194:	9207      	str	r2, [sp, #28]
 8022196:	e014      	b.n	80221c2 <_vfiprintf_r+0x13a>
 8022198:	eba0 0308 	sub.w	r3, r0, r8
 802219c:	fa09 f303 	lsl.w	r3, r9, r3
 80221a0:	4313      	orrs	r3, r2
 80221a2:	9304      	str	r3, [sp, #16]
 80221a4:	46a2      	mov	sl, r4
 80221a6:	e7d2      	b.n	802214e <_vfiprintf_r+0xc6>
 80221a8:	9b03      	ldr	r3, [sp, #12]
 80221aa:	1d19      	adds	r1, r3, #4
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	9103      	str	r1, [sp, #12]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	bfbb      	ittet	lt
 80221b4:	425b      	neglt	r3, r3
 80221b6:	f042 0202 	orrlt.w	r2, r2, #2
 80221ba:	9307      	strge	r3, [sp, #28]
 80221bc:	9307      	strlt	r3, [sp, #28]
 80221be:	bfb8      	it	lt
 80221c0:	9204      	strlt	r2, [sp, #16]
 80221c2:	7823      	ldrb	r3, [r4, #0]
 80221c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80221c6:	d10a      	bne.n	80221de <_vfiprintf_r+0x156>
 80221c8:	7863      	ldrb	r3, [r4, #1]
 80221ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80221cc:	d132      	bne.n	8022234 <_vfiprintf_r+0x1ac>
 80221ce:	9b03      	ldr	r3, [sp, #12]
 80221d0:	1d1a      	adds	r2, r3, #4
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	9203      	str	r2, [sp, #12]
 80221d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80221da:	3402      	adds	r4, #2
 80221dc:	9305      	str	r3, [sp, #20]
 80221de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80222b4 <_vfiprintf_r+0x22c>
 80221e2:	7821      	ldrb	r1, [r4, #0]
 80221e4:	2203      	movs	r2, #3
 80221e6:	4650      	mov	r0, sl
 80221e8:	f7de f87a 	bl	80002e0 <memchr>
 80221ec:	b138      	cbz	r0, 80221fe <_vfiprintf_r+0x176>
 80221ee:	9b04      	ldr	r3, [sp, #16]
 80221f0:	eba0 000a 	sub.w	r0, r0, sl
 80221f4:	2240      	movs	r2, #64	@ 0x40
 80221f6:	4082      	lsls	r2, r0
 80221f8:	4313      	orrs	r3, r2
 80221fa:	3401      	adds	r4, #1
 80221fc:	9304      	str	r3, [sp, #16]
 80221fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022202:	4829      	ldr	r0, [pc, #164]	@ (80222a8 <_vfiprintf_r+0x220>)
 8022204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022208:	2206      	movs	r2, #6
 802220a:	f7de f869 	bl	80002e0 <memchr>
 802220e:	2800      	cmp	r0, #0
 8022210:	d03f      	beq.n	8022292 <_vfiprintf_r+0x20a>
 8022212:	4b26      	ldr	r3, [pc, #152]	@ (80222ac <_vfiprintf_r+0x224>)
 8022214:	bb1b      	cbnz	r3, 802225e <_vfiprintf_r+0x1d6>
 8022216:	9b03      	ldr	r3, [sp, #12]
 8022218:	3307      	adds	r3, #7
 802221a:	f023 0307 	bic.w	r3, r3, #7
 802221e:	3308      	adds	r3, #8
 8022220:	9303      	str	r3, [sp, #12]
 8022222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022224:	443b      	add	r3, r7
 8022226:	9309      	str	r3, [sp, #36]	@ 0x24
 8022228:	e76a      	b.n	8022100 <_vfiprintf_r+0x78>
 802222a:	fb0c 3202 	mla	r2, ip, r2, r3
 802222e:	460c      	mov	r4, r1
 8022230:	2001      	movs	r0, #1
 8022232:	e7a8      	b.n	8022186 <_vfiprintf_r+0xfe>
 8022234:	2300      	movs	r3, #0
 8022236:	3401      	adds	r4, #1
 8022238:	9305      	str	r3, [sp, #20]
 802223a:	4619      	mov	r1, r3
 802223c:	f04f 0c0a 	mov.w	ip, #10
 8022240:	4620      	mov	r0, r4
 8022242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022246:	3a30      	subs	r2, #48	@ 0x30
 8022248:	2a09      	cmp	r2, #9
 802224a:	d903      	bls.n	8022254 <_vfiprintf_r+0x1cc>
 802224c:	2b00      	cmp	r3, #0
 802224e:	d0c6      	beq.n	80221de <_vfiprintf_r+0x156>
 8022250:	9105      	str	r1, [sp, #20]
 8022252:	e7c4      	b.n	80221de <_vfiprintf_r+0x156>
 8022254:	fb0c 2101 	mla	r1, ip, r1, r2
 8022258:	4604      	mov	r4, r0
 802225a:	2301      	movs	r3, #1
 802225c:	e7f0      	b.n	8022240 <_vfiprintf_r+0x1b8>
 802225e:	ab03      	add	r3, sp, #12
 8022260:	9300      	str	r3, [sp, #0]
 8022262:	462a      	mov	r2, r5
 8022264:	4b12      	ldr	r3, [pc, #72]	@ (80222b0 <_vfiprintf_r+0x228>)
 8022266:	a904      	add	r1, sp, #16
 8022268:	4630      	mov	r0, r6
 802226a:	f3af 8000 	nop.w
 802226e:	4607      	mov	r7, r0
 8022270:	1c78      	adds	r0, r7, #1
 8022272:	d1d6      	bne.n	8022222 <_vfiprintf_r+0x19a>
 8022274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022276:	07d9      	lsls	r1, r3, #31
 8022278:	d405      	bmi.n	8022286 <_vfiprintf_r+0x1fe>
 802227a:	89ab      	ldrh	r3, [r5, #12]
 802227c:	059a      	lsls	r2, r3, #22
 802227e:	d402      	bmi.n	8022286 <_vfiprintf_r+0x1fe>
 8022280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022282:	f7ff fe21 	bl	8021ec8 <__retarget_lock_release_recursive>
 8022286:	89ab      	ldrh	r3, [r5, #12]
 8022288:	065b      	lsls	r3, r3, #25
 802228a:	f53f af1f 	bmi.w	80220cc <_vfiprintf_r+0x44>
 802228e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022290:	e71e      	b.n	80220d0 <_vfiprintf_r+0x48>
 8022292:	ab03      	add	r3, sp, #12
 8022294:	9300      	str	r3, [sp, #0]
 8022296:	462a      	mov	r2, r5
 8022298:	4b05      	ldr	r3, [pc, #20]	@ (80222b0 <_vfiprintf_r+0x228>)
 802229a:	a904      	add	r1, sp, #16
 802229c:	4630      	mov	r0, r6
 802229e:	f000 f879 	bl	8022394 <_printf_i>
 80222a2:	e7e4      	b.n	802226e <_vfiprintf_r+0x1e6>
 80222a4:	08025bc8 	.word	0x08025bc8
 80222a8:	08025bd2 	.word	0x08025bd2
 80222ac:	00000000 	.word	0x00000000
 80222b0:	08022063 	.word	0x08022063
 80222b4:	08025bce 	.word	0x08025bce

080222b8 <_printf_common>:
 80222b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222bc:	4616      	mov	r6, r2
 80222be:	4698      	mov	r8, r3
 80222c0:	688a      	ldr	r2, [r1, #8]
 80222c2:	690b      	ldr	r3, [r1, #16]
 80222c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80222c8:	4293      	cmp	r3, r2
 80222ca:	bfb8      	it	lt
 80222cc:	4613      	movlt	r3, r2
 80222ce:	6033      	str	r3, [r6, #0]
 80222d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80222d4:	4607      	mov	r7, r0
 80222d6:	460c      	mov	r4, r1
 80222d8:	b10a      	cbz	r2, 80222de <_printf_common+0x26>
 80222da:	3301      	adds	r3, #1
 80222dc:	6033      	str	r3, [r6, #0]
 80222de:	6823      	ldr	r3, [r4, #0]
 80222e0:	0699      	lsls	r1, r3, #26
 80222e2:	bf42      	ittt	mi
 80222e4:	6833      	ldrmi	r3, [r6, #0]
 80222e6:	3302      	addmi	r3, #2
 80222e8:	6033      	strmi	r3, [r6, #0]
 80222ea:	6825      	ldr	r5, [r4, #0]
 80222ec:	f015 0506 	ands.w	r5, r5, #6
 80222f0:	d106      	bne.n	8022300 <_printf_common+0x48>
 80222f2:	f104 0a19 	add.w	sl, r4, #25
 80222f6:	68e3      	ldr	r3, [r4, #12]
 80222f8:	6832      	ldr	r2, [r6, #0]
 80222fa:	1a9b      	subs	r3, r3, r2
 80222fc:	42ab      	cmp	r3, r5
 80222fe:	dc26      	bgt.n	802234e <_printf_common+0x96>
 8022300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022304:	6822      	ldr	r2, [r4, #0]
 8022306:	3b00      	subs	r3, #0
 8022308:	bf18      	it	ne
 802230a:	2301      	movne	r3, #1
 802230c:	0692      	lsls	r2, r2, #26
 802230e:	d42b      	bmi.n	8022368 <_printf_common+0xb0>
 8022310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022314:	4641      	mov	r1, r8
 8022316:	4638      	mov	r0, r7
 8022318:	47c8      	blx	r9
 802231a:	3001      	adds	r0, #1
 802231c:	d01e      	beq.n	802235c <_printf_common+0xa4>
 802231e:	6823      	ldr	r3, [r4, #0]
 8022320:	6922      	ldr	r2, [r4, #16]
 8022322:	f003 0306 	and.w	r3, r3, #6
 8022326:	2b04      	cmp	r3, #4
 8022328:	bf02      	ittt	eq
 802232a:	68e5      	ldreq	r5, [r4, #12]
 802232c:	6833      	ldreq	r3, [r6, #0]
 802232e:	1aed      	subeq	r5, r5, r3
 8022330:	68a3      	ldr	r3, [r4, #8]
 8022332:	bf0c      	ite	eq
 8022334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022338:	2500      	movne	r5, #0
 802233a:	4293      	cmp	r3, r2
 802233c:	bfc4      	itt	gt
 802233e:	1a9b      	subgt	r3, r3, r2
 8022340:	18ed      	addgt	r5, r5, r3
 8022342:	2600      	movs	r6, #0
 8022344:	341a      	adds	r4, #26
 8022346:	42b5      	cmp	r5, r6
 8022348:	d11a      	bne.n	8022380 <_printf_common+0xc8>
 802234a:	2000      	movs	r0, #0
 802234c:	e008      	b.n	8022360 <_printf_common+0xa8>
 802234e:	2301      	movs	r3, #1
 8022350:	4652      	mov	r2, sl
 8022352:	4641      	mov	r1, r8
 8022354:	4638      	mov	r0, r7
 8022356:	47c8      	blx	r9
 8022358:	3001      	adds	r0, #1
 802235a:	d103      	bne.n	8022364 <_printf_common+0xac>
 802235c:	f04f 30ff 	mov.w	r0, #4294967295
 8022360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022364:	3501      	adds	r5, #1
 8022366:	e7c6      	b.n	80222f6 <_printf_common+0x3e>
 8022368:	18e1      	adds	r1, r4, r3
 802236a:	1c5a      	adds	r2, r3, #1
 802236c:	2030      	movs	r0, #48	@ 0x30
 802236e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022372:	4422      	add	r2, r4
 8022374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802237c:	3302      	adds	r3, #2
 802237e:	e7c7      	b.n	8022310 <_printf_common+0x58>
 8022380:	2301      	movs	r3, #1
 8022382:	4622      	mov	r2, r4
 8022384:	4641      	mov	r1, r8
 8022386:	4638      	mov	r0, r7
 8022388:	47c8      	blx	r9
 802238a:	3001      	adds	r0, #1
 802238c:	d0e6      	beq.n	802235c <_printf_common+0xa4>
 802238e:	3601      	adds	r6, #1
 8022390:	e7d9      	b.n	8022346 <_printf_common+0x8e>
	...

08022394 <_printf_i>:
 8022394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022398:	7e0f      	ldrb	r7, [r1, #24]
 802239a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802239c:	2f78      	cmp	r7, #120	@ 0x78
 802239e:	4691      	mov	r9, r2
 80223a0:	4680      	mov	r8, r0
 80223a2:	460c      	mov	r4, r1
 80223a4:	469a      	mov	sl, r3
 80223a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80223aa:	d807      	bhi.n	80223bc <_printf_i+0x28>
 80223ac:	2f62      	cmp	r7, #98	@ 0x62
 80223ae:	d80a      	bhi.n	80223c6 <_printf_i+0x32>
 80223b0:	2f00      	cmp	r7, #0
 80223b2:	f000 80d2 	beq.w	802255a <_printf_i+0x1c6>
 80223b6:	2f58      	cmp	r7, #88	@ 0x58
 80223b8:	f000 80b9 	beq.w	802252e <_printf_i+0x19a>
 80223bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80223c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80223c4:	e03a      	b.n	802243c <_printf_i+0xa8>
 80223c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80223ca:	2b15      	cmp	r3, #21
 80223cc:	d8f6      	bhi.n	80223bc <_printf_i+0x28>
 80223ce:	a101      	add	r1, pc, #4	@ (adr r1, 80223d4 <_printf_i+0x40>)
 80223d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80223d4:	0802242d 	.word	0x0802242d
 80223d8:	08022441 	.word	0x08022441
 80223dc:	080223bd 	.word	0x080223bd
 80223e0:	080223bd 	.word	0x080223bd
 80223e4:	080223bd 	.word	0x080223bd
 80223e8:	080223bd 	.word	0x080223bd
 80223ec:	08022441 	.word	0x08022441
 80223f0:	080223bd 	.word	0x080223bd
 80223f4:	080223bd 	.word	0x080223bd
 80223f8:	080223bd 	.word	0x080223bd
 80223fc:	080223bd 	.word	0x080223bd
 8022400:	08022541 	.word	0x08022541
 8022404:	0802246b 	.word	0x0802246b
 8022408:	080224fb 	.word	0x080224fb
 802240c:	080223bd 	.word	0x080223bd
 8022410:	080223bd 	.word	0x080223bd
 8022414:	08022563 	.word	0x08022563
 8022418:	080223bd 	.word	0x080223bd
 802241c:	0802246b 	.word	0x0802246b
 8022420:	080223bd 	.word	0x080223bd
 8022424:	080223bd 	.word	0x080223bd
 8022428:	08022503 	.word	0x08022503
 802242c:	6833      	ldr	r3, [r6, #0]
 802242e:	1d1a      	adds	r2, r3, #4
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	6032      	str	r2, [r6, #0]
 8022434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802243c:	2301      	movs	r3, #1
 802243e:	e09d      	b.n	802257c <_printf_i+0x1e8>
 8022440:	6833      	ldr	r3, [r6, #0]
 8022442:	6820      	ldr	r0, [r4, #0]
 8022444:	1d19      	adds	r1, r3, #4
 8022446:	6031      	str	r1, [r6, #0]
 8022448:	0606      	lsls	r6, r0, #24
 802244a:	d501      	bpl.n	8022450 <_printf_i+0xbc>
 802244c:	681d      	ldr	r5, [r3, #0]
 802244e:	e003      	b.n	8022458 <_printf_i+0xc4>
 8022450:	0645      	lsls	r5, r0, #25
 8022452:	d5fb      	bpl.n	802244c <_printf_i+0xb8>
 8022454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022458:	2d00      	cmp	r5, #0
 802245a:	da03      	bge.n	8022464 <_printf_i+0xd0>
 802245c:	232d      	movs	r3, #45	@ 0x2d
 802245e:	426d      	negs	r5, r5
 8022460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022464:	4859      	ldr	r0, [pc, #356]	@ (80225cc <_printf_i+0x238>)
 8022466:	230a      	movs	r3, #10
 8022468:	e011      	b.n	802248e <_printf_i+0xfa>
 802246a:	6821      	ldr	r1, [r4, #0]
 802246c:	6833      	ldr	r3, [r6, #0]
 802246e:	0608      	lsls	r0, r1, #24
 8022470:	f853 5b04 	ldr.w	r5, [r3], #4
 8022474:	d402      	bmi.n	802247c <_printf_i+0xe8>
 8022476:	0649      	lsls	r1, r1, #25
 8022478:	bf48      	it	mi
 802247a:	b2ad      	uxthmi	r5, r5
 802247c:	2f6f      	cmp	r7, #111	@ 0x6f
 802247e:	4853      	ldr	r0, [pc, #332]	@ (80225cc <_printf_i+0x238>)
 8022480:	6033      	str	r3, [r6, #0]
 8022482:	bf14      	ite	ne
 8022484:	230a      	movne	r3, #10
 8022486:	2308      	moveq	r3, #8
 8022488:	2100      	movs	r1, #0
 802248a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802248e:	6866      	ldr	r6, [r4, #4]
 8022490:	60a6      	str	r6, [r4, #8]
 8022492:	2e00      	cmp	r6, #0
 8022494:	bfa2      	ittt	ge
 8022496:	6821      	ldrge	r1, [r4, #0]
 8022498:	f021 0104 	bicge.w	r1, r1, #4
 802249c:	6021      	strge	r1, [r4, #0]
 802249e:	b90d      	cbnz	r5, 80224a4 <_printf_i+0x110>
 80224a0:	2e00      	cmp	r6, #0
 80224a2:	d04b      	beq.n	802253c <_printf_i+0x1a8>
 80224a4:	4616      	mov	r6, r2
 80224a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80224aa:	fb03 5711 	mls	r7, r3, r1, r5
 80224ae:	5dc7      	ldrb	r7, [r0, r7]
 80224b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80224b4:	462f      	mov	r7, r5
 80224b6:	42bb      	cmp	r3, r7
 80224b8:	460d      	mov	r5, r1
 80224ba:	d9f4      	bls.n	80224a6 <_printf_i+0x112>
 80224bc:	2b08      	cmp	r3, #8
 80224be:	d10b      	bne.n	80224d8 <_printf_i+0x144>
 80224c0:	6823      	ldr	r3, [r4, #0]
 80224c2:	07df      	lsls	r7, r3, #31
 80224c4:	d508      	bpl.n	80224d8 <_printf_i+0x144>
 80224c6:	6923      	ldr	r3, [r4, #16]
 80224c8:	6861      	ldr	r1, [r4, #4]
 80224ca:	4299      	cmp	r1, r3
 80224cc:	bfde      	ittt	le
 80224ce:	2330      	movle	r3, #48	@ 0x30
 80224d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80224d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80224d8:	1b92      	subs	r2, r2, r6
 80224da:	6122      	str	r2, [r4, #16]
 80224dc:	f8cd a000 	str.w	sl, [sp]
 80224e0:	464b      	mov	r3, r9
 80224e2:	aa03      	add	r2, sp, #12
 80224e4:	4621      	mov	r1, r4
 80224e6:	4640      	mov	r0, r8
 80224e8:	f7ff fee6 	bl	80222b8 <_printf_common>
 80224ec:	3001      	adds	r0, #1
 80224ee:	d14a      	bne.n	8022586 <_printf_i+0x1f2>
 80224f0:	f04f 30ff 	mov.w	r0, #4294967295
 80224f4:	b004      	add	sp, #16
 80224f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224fa:	6823      	ldr	r3, [r4, #0]
 80224fc:	f043 0320 	orr.w	r3, r3, #32
 8022500:	6023      	str	r3, [r4, #0]
 8022502:	4833      	ldr	r0, [pc, #204]	@ (80225d0 <_printf_i+0x23c>)
 8022504:	2778      	movs	r7, #120	@ 0x78
 8022506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802250a:	6823      	ldr	r3, [r4, #0]
 802250c:	6831      	ldr	r1, [r6, #0]
 802250e:	061f      	lsls	r7, r3, #24
 8022510:	f851 5b04 	ldr.w	r5, [r1], #4
 8022514:	d402      	bmi.n	802251c <_printf_i+0x188>
 8022516:	065f      	lsls	r7, r3, #25
 8022518:	bf48      	it	mi
 802251a:	b2ad      	uxthmi	r5, r5
 802251c:	6031      	str	r1, [r6, #0]
 802251e:	07d9      	lsls	r1, r3, #31
 8022520:	bf44      	itt	mi
 8022522:	f043 0320 	orrmi.w	r3, r3, #32
 8022526:	6023      	strmi	r3, [r4, #0]
 8022528:	b11d      	cbz	r5, 8022532 <_printf_i+0x19e>
 802252a:	2310      	movs	r3, #16
 802252c:	e7ac      	b.n	8022488 <_printf_i+0xf4>
 802252e:	4827      	ldr	r0, [pc, #156]	@ (80225cc <_printf_i+0x238>)
 8022530:	e7e9      	b.n	8022506 <_printf_i+0x172>
 8022532:	6823      	ldr	r3, [r4, #0]
 8022534:	f023 0320 	bic.w	r3, r3, #32
 8022538:	6023      	str	r3, [r4, #0]
 802253a:	e7f6      	b.n	802252a <_printf_i+0x196>
 802253c:	4616      	mov	r6, r2
 802253e:	e7bd      	b.n	80224bc <_printf_i+0x128>
 8022540:	6833      	ldr	r3, [r6, #0]
 8022542:	6825      	ldr	r5, [r4, #0]
 8022544:	6961      	ldr	r1, [r4, #20]
 8022546:	1d18      	adds	r0, r3, #4
 8022548:	6030      	str	r0, [r6, #0]
 802254a:	062e      	lsls	r6, r5, #24
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	d501      	bpl.n	8022554 <_printf_i+0x1c0>
 8022550:	6019      	str	r1, [r3, #0]
 8022552:	e002      	b.n	802255a <_printf_i+0x1c6>
 8022554:	0668      	lsls	r0, r5, #25
 8022556:	d5fb      	bpl.n	8022550 <_printf_i+0x1bc>
 8022558:	8019      	strh	r1, [r3, #0]
 802255a:	2300      	movs	r3, #0
 802255c:	6123      	str	r3, [r4, #16]
 802255e:	4616      	mov	r6, r2
 8022560:	e7bc      	b.n	80224dc <_printf_i+0x148>
 8022562:	6833      	ldr	r3, [r6, #0]
 8022564:	1d1a      	adds	r2, r3, #4
 8022566:	6032      	str	r2, [r6, #0]
 8022568:	681e      	ldr	r6, [r3, #0]
 802256a:	6862      	ldr	r2, [r4, #4]
 802256c:	2100      	movs	r1, #0
 802256e:	4630      	mov	r0, r6
 8022570:	f7dd feb6 	bl	80002e0 <memchr>
 8022574:	b108      	cbz	r0, 802257a <_printf_i+0x1e6>
 8022576:	1b80      	subs	r0, r0, r6
 8022578:	6060      	str	r0, [r4, #4]
 802257a:	6863      	ldr	r3, [r4, #4]
 802257c:	6123      	str	r3, [r4, #16]
 802257e:	2300      	movs	r3, #0
 8022580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022584:	e7aa      	b.n	80224dc <_printf_i+0x148>
 8022586:	6923      	ldr	r3, [r4, #16]
 8022588:	4632      	mov	r2, r6
 802258a:	4649      	mov	r1, r9
 802258c:	4640      	mov	r0, r8
 802258e:	47d0      	blx	sl
 8022590:	3001      	adds	r0, #1
 8022592:	d0ad      	beq.n	80224f0 <_printf_i+0x15c>
 8022594:	6823      	ldr	r3, [r4, #0]
 8022596:	079b      	lsls	r3, r3, #30
 8022598:	d413      	bmi.n	80225c2 <_printf_i+0x22e>
 802259a:	68e0      	ldr	r0, [r4, #12]
 802259c:	9b03      	ldr	r3, [sp, #12]
 802259e:	4298      	cmp	r0, r3
 80225a0:	bfb8      	it	lt
 80225a2:	4618      	movlt	r0, r3
 80225a4:	e7a6      	b.n	80224f4 <_printf_i+0x160>
 80225a6:	2301      	movs	r3, #1
 80225a8:	4632      	mov	r2, r6
 80225aa:	4649      	mov	r1, r9
 80225ac:	4640      	mov	r0, r8
 80225ae:	47d0      	blx	sl
 80225b0:	3001      	adds	r0, #1
 80225b2:	d09d      	beq.n	80224f0 <_printf_i+0x15c>
 80225b4:	3501      	adds	r5, #1
 80225b6:	68e3      	ldr	r3, [r4, #12]
 80225b8:	9903      	ldr	r1, [sp, #12]
 80225ba:	1a5b      	subs	r3, r3, r1
 80225bc:	42ab      	cmp	r3, r5
 80225be:	dcf2      	bgt.n	80225a6 <_printf_i+0x212>
 80225c0:	e7eb      	b.n	802259a <_printf_i+0x206>
 80225c2:	2500      	movs	r5, #0
 80225c4:	f104 0619 	add.w	r6, r4, #25
 80225c8:	e7f5      	b.n	80225b6 <_printf_i+0x222>
 80225ca:	bf00      	nop
 80225cc:	08025bd9 	.word	0x08025bd9
 80225d0:	08025bea 	.word	0x08025bea

080225d4 <__sflush_r>:
 80225d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80225d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225dc:	0716      	lsls	r6, r2, #28
 80225de:	4605      	mov	r5, r0
 80225e0:	460c      	mov	r4, r1
 80225e2:	d454      	bmi.n	802268e <__sflush_r+0xba>
 80225e4:	684b      	ldr	r3, [r1, #4]
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	dc02      	bgt.n	80225f0 <__sflush_r+0x1c>
 80225ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	dd48      	ble.n	8022682 <__sflush_r+0xae>
 80225f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80225f2:	2e00      	cmp	r6, #0
 80225f4:	d045      	beq.n	8022682 <__sflush_r+0xae>
 80225f6:	2300      	movs	r3, #0
 80225f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80225fc:	682f      	ldr	r7, [r5, #0]
 80225fe:	6a21      	ldr	r1, [r4, #32]
 8022600:	602b      	str	r3, [r5, #0]
 8022602:	d030      	beq.n	8022666 <__sflush_r+0x92>
 8022604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022606:	89a3      	ldrh	r3, [r4, #12]
 8022608:	0759      	lsls	r1, r3, #29
 802260a:	d505      	bpl.n	8022618 <__sflush_r+0x44>
 802260c:	6863      	ldr	r3, [r4, #4]
 802260e:	1ad2      	subs	r2, r2, r3
 8022610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022612:	b10b      	cbz	r3, 8022618 <__sflush_r+0x44>
 8022614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022616:	1ad2      	subs	r2, r2, r3
 8022618:	2300      	movs	r3, #0
 802261a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802261c:	6a21      	ldr	r1, [r4, #32]
 802261e:	4628      	mov	r0, r5
 8022620:	47b0      	blx	r6
 8022622:	1c43      	adds	r3, r0, #1
 8022624:	89a3      	ldrh	r3, [r4, #12]
 8022626:	d106      	bne.n	8022636 <__sflush_r+0x62>
 8022628:	6829      	ldr	r1, [r5, #0]
 802262a:	291d      	cmp	r1, #29
 802262c:	d82b      	bhi.n	8022686 <__sflush_r+0xb2>
 802262e:	4a2a      	ldr	r2, [pc, #168]	@ (80226d8 <__sflush_r+0x104>)
 8022630:	410a      	asrs	r2, r1
 8022632:	07d6      	lsls	r6, r2, #31
 8022634:	d427      	bmi.n	8022686 <__sflush_r+0xb2>
 8022636:	2200      	movs	r2, #0
 8022638:	6062      	str	r2, [r4, #4]
 802263a:	04d9      	lsls	r1, r3, #19
 802263c:	6922      	ldr	r2, [r4, #16]
 802263e:	6022      	str	r2, [r4, #0]
 8022640:	d504      	bpl.n	802264c <__sflush_r+0x78>
 8022642:	1c42      	adds	r2, r0, #1
 8022644:	d101      	bne.n	802264a <__sflush_r+0x76>
 8022646:	682b      	ldr	r3, [r5, #0]
 8022648:	b903      	cbnz	r3, 802264c <__sflush_r+0x78>
 802264a:	6560      	str	r0, [r4, #84]	@ 0x54
 802264c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802264e:	602f      	str	r7, [r5, #0]
 8022650:	b1b9      	cbz	r1, 8022682 <__sflush_r+0xae>
 8022652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022656:	4299      	cmp	r1, r3
 8022658:	d002      	beq.n	8022660 <__sflush_r+0x8c>
 802265a:	4628      	mov	r0, r5
 802265c:	f7ff fca0 	bl	8021fa0 <_free_r>
 8022660:	2300      	movs	r3, #0
 8022662:	6363      	str	r3, [r4, #52]	@ 0x34
 8022664:	e00d      	b.n	8022682 <__sflush_r+0xae>
 8022666:	2301      	movs	r3, #1
 8022668:	4628      	mov	r0, r5
 802266a:	47b0      	blx	r6
 802266c:	4602      	mov	r2, r0
 802266e:	1c50      	adds	r0, r2, #1
 8022670:	d1c9      	bne.n	8022606 <__sflush_r+0x32>
 8022672:	682b      	ldr	r3, [r5, #0]
 8022674:	2b00      	cmp	r3, #0
 8022676:	d0c6      	beq.n	8022606 <__sflush_r+0x32>
 8022678:	2b1d      	cmp	r3, #29
 802267a:	d001      	beq.n	8022680 <__sflush_r+0xac>
 802267c:	2b16      	cmp	r3, #22
 802267e:	d11e      	bne.n	80226be <__sflush_r+0xea>
 8022680:	602f      	str	r7, [r5, #0]
 8022682:	2000      	movs	r0, #0
 8022684:	e022      	b.n	80226cc <__sflush_r+0xf8>
 8022686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802268a:	b21b      	sxth	r3, r3
 802268c:	e01b      	b.n	80226c6 <__sflush_r+0xf2>
 802268e:	690f      	ldr	r7, [r1, #16]
 8022690:	2f00      	cmp	r7, #0
 8022692:	d0f6      	beq.n	8022682 <__sflush_r+0xae>
 8022694:	0793      	lsls	r3, r2, #30
 8022696:	680e      	ldr	r6, [r1, #0]
 8022698:	bf08      	it	eq
 802269a:	694b      	ldreq	r3, [r1, #20]
 802269c:	600f      	str	r7, [r1, #0]
 802269e:	bf18      	it	ne
 80226a0:	2300      	movne	r3, #0
 80226a2:	eba6 0807 	sub.w	r8, r6, r7
 80226a6:	608b      	str	r3, [r1, #8]
 80226a8:	f1b8 0f00 	cmp.w	r8, #0
 80226ac:	dde9      	ble.n	8022682 <__sflush_r+0xae>
 80226ae:	6a21      	ldr	r1, [r4, #32]
 80226b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80226b2:	4643      	mov	r3, r8
 80226b4:	463a      	mov	r2, r7
 80226b6:	4628      	mov	r0, r5
 80226b8:	47b0      	blx	r6
 80226ba:	2800      	cmp	r0, #0
 80226bc:	dc08      	bgt.n	80226d0 <__sflush_r+0xfc>
 80226be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80226c6:	81a3      	strh	r3, [r4, #12]
 80226c8:	f04f 30ff 	mov.w	r0, #4294967295
 80226cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226d0:	4407      	add	r7, r0
 80226d2:	eba8 0800 	sub.w	r8, r8, r0
 80226d6:	e7e7      	b.n	80226a8 <__sflush_r+0xd4>
 80226d8:	dfbffffe 	.word	0xdfbffffe

080226dc <_fflush_r>:
 80226dc:	b538      	push	{r3, r4, r5, lr}
 80226de:	690b      	ldr	r3, [r1, #16]
 80226e0:	4605      	mov	r5, r0
 80226e2:	460c      	mov	r4, r1
 80226e4:	b913      	cbnz	r3, 80226ec <_fflush_r+0x10>
 80226e6:	2500      	movs	r5, #0
 80226e8:	4628      	mov	r0, r5
 80226ea:	bd38      	pop	{r3, r4, r5, pc}
 80226ec:	b118      	cbz	r0, 80226f6 <_fflush_r+0x1a>
 80226ee:	6a03      	ldr	r3, [r0, #32]
 80226f0:	b90b      	cbnz	r3, 80226f6 <_fflush_r+0x1a>
 80226f2:	f7ff f9e9 	bl	8021ac8 <__sinit>
 80226f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d0f3      	beq.n	80226e6 <_fflush_r+0xa>
 80226fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022700:	07d0      	lsls	r0, r2, #31
 8022702:	d404      	bmi.n	802270e <_fflush_r+0x32>
 8022704:	0599      	lsls	r1, r3, #22
 8022706:	d402      	bmi.n	802270e <_fflush_r+0x32>
 8022708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802270a:	f7ff fbdc 	bl	8021ec6 <__retarget_lock_acquire_recursive>
 802270e:	4628      	mov	r0, r5
 8022710:	4621      	mov	r1, r4
 8022712:	f7ff ff5f 	bl	80225d4 <__sflush_r>
 8022716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022718:	07da      	lsls	r2, r3, #31
 802271a:	4605      	mov	r5, r0
 802271c:	d4e4      	bmi.n	80226e8 <_fflush_r+0xc>
 802271e:	89a3      	ldrh	r3, [r4, #12]
 8022720:	059b      	lsls	r3, r3, #22
 8022722:	d4e1      	bmi.n	80226e8 <_fflush_r+0xc>
 8022724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022726:	f7ff fbcf 	bl	8021ec8 <__retarget_lock_release_recursive>
 802272a:	e7dd      	b.n	80226e8 <_fflush_r+0xc>

0802272c <__swhatbuf_r>:
 802272c:	b570      	push	{r4, r5, r6, lr}
 802272e:	460c      	mov	r4, r1
 8022730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022734:	2900      	cmp	r1, #0
 8022736:	b096      	sub	sp, #88	@ 0x58
 8022738:	4615      	mov	r5, r2
 802273a:	461e      	mov	r6, r3
 802273c:	da0d      	bge.n	802275a <__swhatbuf_r+0x2e>
 802273e:	89a3      	ldrh	r3, [r4, #12]
 8022740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022744:	f04f 0100 	mov.w	r1, #0
 8022748:	bf14      	ite	ne
 802274a:	2340      	movne	r3, #64	@ 0x40
 802274c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022750:	2000      	movs	r0, #0
 8022752:	6031      	str	r1, [r6, #0]
 8022754:	602b      	str	r3, [r5, #0]
 8022756:	b016      	add	sp, #88	@ 0x58
 8022758:	bd70      	pop	{r4, r5, r6, pc}
 802275a:	466a      	mov	r2, sp
 802275c:	f000 f848 	bl	80227f0 <_fstat_r>
 8022760:	2800      	cmp	r0, #0
 8022762:	dbec      	blt.n	802273e <__swhatbuf_r+0x12>
 8022764:	9901      	ldr	r1, [sp, #4]
 8022766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802276a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802276e:	4259      	negs	r1, r3
 8022770:	4159      	adcs	r1, r3
 8022772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022776:	e7eb      	b.n	8022750 <__swhatbuf_r+0x24>

08022778 <__smakebuf_r>:
 8022778:	898b      	ldrh	r3, [r1, #12]
 802277a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802277c:	079d      	lsls	r5, r3, #30
 802277e:	4606      	mov	r6, r0
 8022780:	460c      	mov	r4, r1
 8022782:	d507      	bpl.n	8022794 <__smakebuf_r+0x1c>
 8022784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022788:	6023      	str	r3, [r4, #0]
 802278a:	6123      	str	r3, [r4, #16]
 802278c:	2301      	movs	r3, #1
 802278e:	6163      	str	r3, [r4, #20]
 8022790:	b003      	add	sp, #12
 8022792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022794:	ab01      	add	r3, sp, #4
 8022796:	466a      	mov	r2, sp
 8022798:	f7ff ffc8 	bl	802272c <__swhatbuf_r>
 802279c:	9f00      	ldr	r7, [sp, #0]
 802279e:	4605      	mov	r5, r0
 80227a0:	4639      	mov	r1, r7
 80227a2:	4630      	mov	r0, r6
 80227a4:	f7ff f86a 	bl	802187c <_malloc_r>
 80227a8:	b948      	cbnz	r0, 80227be <__smakebuf_r+0x46>
 80227aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227ae:	059a      	lsls	r2, r3, #22
 80227b0:	d4ee      	bmi.n	8022790 <__smakebuf_r+0x18>
 80227b2:	f023 0303 	bic.w	r3, r3, #3
 80227b6:	f043 0302 	orr.w	r3, r3, #2
 80227ba:	81a3      	strh	r3, [r4, #12]
 80227bc:	e7e2      	b.n	8022784 <__smakebuf_r+0xc>
 80227be:	89a3      	ldrh	r3, [r4, #12]
 80227c0:	6020      	str	r0, [r4, #0]
 80227c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80227c6:	81a3      	strh	r3, [r4, #12]
 80227c8:	9b01      	ldr	r3, [sp, #4]
 80227ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80227ce:	b15b      	cbz	r3, 80227e8 <__smakebuf_r+0x70>
 80227d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227d4:	4630      	mov	r0, r6
 80227d6:	f000 f81d 	bl	8022814 <_isatty_r>
 80227da:	b128      	cbz	r0, 80227e8 <__smakebuf_r+0x70>
 80227dc:	89a3      	ldrh	r3, [r4, #12]
 80227de:	f023 0303 	bic.w	r3, r3, #3
 80227e2:	f043 0301 	orr.w	r3, r3, #1
 80227e6:	81a3      	strh	r3, [r4, #12]
 80227e8:	89a3      	ldrh	r3, [r4, #12]
 80227ea:	431d      	orrs	r5, r3
 80227ec:	81a5      	strh	r5, [r4, #12]
 80227ee:	e7cf      	b.n	8022790 <__smakebuf_r+0x18>

080227f0 <_fstat_r>:
 80227f0:	b538      	push	{r3, r4, r5, lr}
 80227f2:	4d07      	ldr	r5, [pc, #28]	@ (8022810 <_fstat_r+0x20>)
 80227f4:	2300      	movs	r3, #0
 80227f6:	4604      	mov	r4, r0
 80227f8:	4608      	mov	r0, r1
 80227fa:	4611      	mov	r1, r2
 80227fc:	602b      	str	r3, [r5, #0]
 80227fe:	f7de ff60 	bl	80016c2 <_fstat>
 8022802:	1c43      	adds	r3, r0, #1
 8022804:	d102      	bne.n	802280c <_fstat_r+0x1c>
 8022806:	682b      	ldr	r3, [r5, #0]
 8022808:	b103      	cbz	r3, 802280c <_fstat_r+0x1c>
 802280a:	6023      	str	r3, [r4, #0]
 802280c:	bd38      	pop	{r3, r4, r5, pc}
 802280e:	bf00      	nop
 8022810:	24025f54 	.word	0x24025f54

08022814 <_isatty_r>:
 8022814:	b538      	push	{r3, r4, r5, lr}
 8022816:	4d06      	ldr	r5, [pc, #24]	@ (8022830 <_isatty_r+0x1c>)
 8022818:	2300      	movs	r3, #0
 802281a:	4604      	mov	r4, r0
 802281c:	4608      	mov	r0, r1
 802281e:	602b      	str	r3, [r5, #0]
 8022820:	f7de ff54 	bl	80016cc <_isatty>
 8022824:	1c43      	adds	r3, r0, #1
 8022826:	d102      	bne.n	802282e <_isatty_r+0x1a>
 8022828:	682b      	ldr	r3, [r5, #0]
 802282a:	b103      	cbz	r3, 802282e <_isatty_r+0x1a>
 802282c:	6023      	str	r3, [r4, #0]
 802282e:	bd38      	pop	{r3, r4, r5, pc}
 8022830:	24025f54 	.word	0x24025f54

08022834 <_init>:
 8022834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022836:	bf00      	nop
 8022838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802283a:	bc08      	pop	{r3}
 802283c:	469e      	mov	lr, r3
 802283e:	4770      	bx	lr

08022840 <_fini>:
 8022840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022842:	bf00      	nop
 8022844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022846:	bc08      	pop	{r3}
 8022848:	469e      	mov	lr, r3
 802284a:	4770      	bx	lr
